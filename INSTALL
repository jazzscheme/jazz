Dependencies
============

Gambit
  You need to install the latest version of Gambit. You will also need to
  pull all the latest changes from the Gambit repository as Marc Feely,
  Gambit's author, is often fixing bugs and adding new features to support
  JazzScheme development. Be sure you have made a 'make bootstrap' for
  Gambit before pulling. This is documented on Gambit's website but is a
  costly gotcha as it will force you to reinstall if you forget to do it.
  See Gambit's INSTALL.txt file for details on installing Gambit and see
  Gambit's website for details on accessing Gambit's public repository:
  http://dynamo.iro.umontreal.ca/~gambit/wiki/index.php/Source_code_repository

  Note that JazzScheme relies on very few Gambit specific features and was
  designed with ease of porting to other Scheme systems in mind.

  All compilation is done through the underlying Scheme. As Gambit uses GCC
  for backend, please refer to Gambit's documentation if you're experiencing
  GCC problems. On Windows, the only backend fully tested to work with
  JazzScheme is MinGW. Note that some people have reported problems when
  building JazzScheme with old versions of MinGW. You can get the latest
  version of MinGW from http://www.mingw.org/. Another reported problem was
  from someone having both Cygwin and MinGW installed, where MinGW would
  wrongly call Cygwin's gcc. Uninstalling Cygwin fixed the problem.

Cairo
  If you plan on doing GUI development, you will need to install Cairo
  http://cairographics.org/. On Windows we precompiled it for you as a dll.
  On other systems, you should install it the usual way (with your package
  manager) and Jazz will use pkg-config to find the various paths. If you
  are on MacOS, the simplest way to install Cairo is through macports from
  http://www.macports.org/. If you decide to compile your own versions of
  the libraries, pkg-config will need to know where they are installed.
  You should set the environment variable PKG_CONFIG_PATH to the appropriate
  directories.

X11 on the Mac
  Due to a bug in Apple's installed version of X11, if you plan on using X11 on
  the Mac, you will need to install the latest X11 version from
  http://xquartz.macosforge.org/. This is the official apple site for X11 on
  the Mac. Note that depending on your settings, X11 may need to be manually
  started before launching Jedi.


Binaries
========

To install a binary release, just extract it into the 'bin' root directory of
Jazz's source install directory.


Sources
=======

JazzScheme uses Git to store all development files. You will need to install
Git to access the Jazz repository.

Repository
  The repository is currently hosted at
  git://64.235.209.250/git/jazz

  If you get an error like "fatal: unable to connect a socket (Connection timed out)"
  it may be that you are behind a firewall that blocks outbound connections on Git's
  port 9418.

Help
  Some usefull Git links :
  - http://www.kernel.org/pub/software/scm/git/docs/
  - http://www.kernel.org/pub/software/scm/git/docs/user-manual.html
  - http://www.kernel.org/pub/software/scm/git/docs/gittutorial.html

User Scenario
  ;; clone the JazzScheme repository (only once)
  git clone git://64.235.209.250/git/jazz
  cd jazz

  ;; After you clone the public repo, you should never modify the master
  ;; branch as it will make subsequent pulls more prone to failure. This can
  ;; easily happen when experimenting around. You should always work in your
  ;; own branch, lets say 'work'
  git branch work
  git checkout work

  ;; pull from time to time to get the latest revision
  git checkout master
  git pull
  git checkout work
  git rebase master
  <optional step: fix any rebase conflicts>
    <edit and resolve conflicts in all the conflicting files>
    <git add the resolved files>
    git rebase --continue
    <see http://www.kernel.org/pub/software/scm/git/docs/git-rebase.html for
    details>

Contributor Scenario
  ;; clone the JazzScheme repository (only once)
  git clone git://64.235.209.250/git/jazz
  cd jazz

  git config user.email "you@email.com"
  git config user.name "Your Name"

  ;; After you clone the public repo, you should never modify the master
  ;; branch as it will be used by git-rebase. You should always work in your
  ;; own branch, lets say 'work'
  git branch work
  git checkout work

  ;; commit any changes you have made
  ;; the -a option is necessary if you added any new file to the Jazz tree
  git commit -a -m "Some nice message describing your changes"

  ;; pull from time to time to get the latest revision and rebase your changes
  git checkout master
  git pull
  git checkout work
  git rebase master
  <optional step: fix any rebase conflicts>
    <edit and resolve conflicts in all the conflicting files>
    <git add the resolved files>
    git rebase --continue
    <see http://www.kernel.org/pub/software/scm/git/docs/git-rebase.html for
    details>

  ;; send contributions as a series of patch files
  ;; make sure you do the previous step of rebasing your changes just before
  ;; doing this as this will greatly minimize risks of conflicts when the Jazz
  ;; maintainers apply your patches to the central repository
  git format-patch origin
  <email generated patch files to gcartier@jazzscheme.org>

Maintainer Scenario
  ;; publish some changes
  git push pub master

  ;; merge contributions
  git am -3 *.patch
  <optional step: fix any am conflicts>
    git am --resolved


Building
========

Building Jazz follows the usual configure / make methodology. The only unusual
thing is that, as the underlying Scheme already represents a platform
independant abstraction, there is no need to use the low-level GNU tools. The
build system is fully implemented using the underlying Scheme.

Note that on Windows, building the platform target will generate many warnings.
These are due to limitations in the current implementation of the foreign-function
interface and can be safely ignored.

To load the build system using :

Gambit
  Just launch gsc from Jazz's source install directory. The .gambcini file
  located there will automatically load the build system.


Examples
========

Building the Jazz kernel and core modules
  gsc
  Jazz 2.0b1 Build System

  $ configure
  <default>
    system: gambit
    platform: windows
    safety: release

  $ make
  ...

Building Jedi's critical modules
  gsc
  Jazz 2.0b1 Build System

  $ make jedi
  ...


List
====

List configurations.

list


Delete
======

Delete a configuration.

delete [configuration]


Configure
=========

Register a new configuration.

To support multiple configurations, configurations can be optionaly be named.

Configurations are loaded / saved from a .configurations file located in the
.jazz directory of the user's home. Using configure is basically an easy way
to edit the .configurations file.

configure
  [name: name]
  [title: title]
  [system: system]
  [platform: platform]
  [windowing: windowing]
  [safety: safety]
  [optimize?: optimize?]
  [include-source?: include-source?]
  [interpret?: interpret?]
  [install: install]

name
  The optional configuration name. Must be alphanumeric.

title
  The optional configuration title. Must be alphanumeric.

  If present, this title will be used to name the installation directory.

system
  The underlying Scheme system (automatically determined)
  - gambit (the only fully supported scheme system at the moment)
  - chicken
  - ...

platform
  The platform (will try and guess based on system type)
  - mac
  - windows
  - unix

windowing
  The windowing system (will try and guess based on system type)
  - carbon (development started)
  - x11 (almost there)
  - #f (use default platform windowing)

safety
  The runtime safety level
  - core
      Core debug mode for debugging JazzScheme itself. Adds tests to make the
      kernel and core safe.
  - debug
      Standard debug mode with tests to make user code safe. This is the
      recommanded safety for development.
  - release (the default)
      Release mode for stable user code with no safety tests. If you plan on
      using the Jedi IDE, you may want to build using this safety level as it
      will run alot faster.

optimize?
  This option adds optimization declares to the source code. Note that this
  will make debugging somewhat harder as the generated code will have gone
  through some transformations. At the moment it adds: proper-tail-calls,
  constant-fold and lambda-lift.
  - #f
  - #t (the default)

include-source?
  Include source in compiled code by compiling with Gambit's 'debug-source'
  option.

  Note that this option is not needed anymore for using the statprof statistical
  profiler with compiled files since the new 'debug-location' option was added
  to Gambit.

  Do not use this option unless you have a very specific need for it as it will
  result in much larger object files and due to a flaw in gcc also result in longer
  compile times.
  - #f (the default)
  - #t

interpret?
  An advanced option for Jazz developers to enable loading the kernel fully
  interpreted.
  - #f (the default)
  - #t

install
  The installation directory.

  Having a separate installation directory for each configuration enables multiple
  configurations to be independently built. Any configuration dependent file will go
  inside the installation directory. Examples include: the Jazz kernel, built executables,
  libraries, compilation binaries, binary packages, ...

  If the installation directory is not specified, it will default to
  bin/<configuration name> where <configuration name> is either :
  - the configuration title if specified
  - the configuration name if specified
  - a name made by concatenating the following key configuration elements : the system,
    the platform, the windowing and the safety


Make
====

Build target for the active configuration.

make [target]

target
  The target to build which defaults to 'jazz'.

  To support multiple configurations, a target can also be specified as
  target@configuration

  - kernel    : the module system
  - core      : the core modules
  - jazz      : the jazz language modules
  - platform  : the platform modules
  - all       : jazz's modules
  - jedi      : jedi's critical modules
  - <product> : builds <product>


Install
=======

There is no equivalent of make install due to the complexity of supporting
multiple systems and user preferences. Since this step is also very simple to
do manually, installing the built configuration is left to the user.

Depending on your system you will usually
  - Copy the Jazz runtime files to a standard system location or
  - Modify your environment variables to point to the location of the Jazz
    executable

Note that at this time, modifying your environment variables is the preferred
approach as some modules like Jedi are still dependent on source files.


Quit
====

Quit the build system.
