Dependencies
============

Gambit
  You need to install the latest version of Gambit. You will also need to
  pull all the latest changes from the Gambit repository as Marc Feely,
  Gambit's author, is often fixing bugs and adding new features to support
  the JazzScheme development. Be sure you have made a 'make bootstrap' for
  Gambit before pulling. This is documented on Gambit's website but is a
  costly gotcha as it will force you to reinstall if you forget to do it.
  See Gambit's INSTALL.txt file for details on installing Gambit and see
  Gambit's website for details on accessing Gambit's public repository:
  http://dynamo.iro.umontreal.ca/~gambit/wiki/index.php/Source_code_repository

  Note that JazzScheme relies on very few Gambit specific features and was
  designed with ease of porting to other Scheme systems in mind.

  All compilation is done through the underlying Scheme. As Gambit uses GCC
  for backend, please refer to Gambit's documentation if you're experiencing
  GCC problems.

Cairo
  If you plan on doing GUI development, you will need to install Cairo
  http://cairographics.org/. On Windows we precompiled it for you as a dll.
  On other systems, you should install it the usual way (with your package
  manager) and Jazz will use pkg-config to find the various paths. If you
  are on Mac, you must install macports from http://www.macports.org/. If 
  you decide to compile your own versions of the libraries, pkg-config will
  need to know where they are installed. You should set the environment
  variable PKG_CONFIG_PATH to the appropriate directories.

X11 on the Mac
  Due to a bug in Apple's installed version of X11, if you plan on using X11 on
  the Mac, you will need to install the latest X11 version from
  http://xquartz.macosforge.org/. Note that this is the official apple site for
  X11 on the Mac.


Binaries
========

To install a binary release, just extract it into the 'bin' root directory of
Jazz's source install directory.


Sources
=======

JazzScheme uses Git to store all development files. You will need to install
Git to access the Jazz repository.

Repository
  The repository is currently hosted at
  git://64.235.209.250/home/jazz/dev

Help
  Some usefull Git links :
  - http://www.kernel.org/pub/software/scm/git/docs/
  - http://www.kernel.org/pub/software/scm/git/docs/user-manual.html
  - http://www.kernel.org/pub/software/scm/git/docs/core-tutorial.html

User Scenario
  ;; clone the JazzScheme repository (only once)
  git clone git://64.235.209.250/home/jazz/dev jazz
  cd jazz

  ;; After you clone the public repo, you should never modify the master
  ;; branch as it will make subsequent pulls more prone to failure. This can
  ;; easily happen when experimenting around. You should always work in your
  ;; own branch, lets say 'work'
  git branch work
  git checkout work

  ;; pull from time to time to get the latest revision
  git checkout master
  git pull
  git checkout work

Contributor Scenario
  ;; clone the JazzScheme repository (only once)
  git clone git://64.235.209.250/home/jazz/dev jazz
  cd jazz

  git config user.email "you@email.com"
  git config user.name "Your Name"

  ;; After you clone the public repo, you should never modify the master
  ;; branch as it will be used by git-rebase. You should always work in your
  ;; own branch, lets say 'work'
  git branch work
  git checkout work

  ;; pull from time to time to get the latest revision and rebase your changes
  git checkout master
  git pull
  git checkout work
  git rebase master
  <optional step: fix any rebase conflicts>
    <edit and resolve conflicts in all the conflicting files>
    <git add the resolved files>
    git rebase --continue
    <see http://www.kernel.org/pub/software/scm/git/docs/git-rebase.html for
    details>

  ;; send contribution as a series of patch files
  ;; make sure you do the previous step of rebasing your changes just before
  ;; doing this
  git format-patch origin
  <email generated patch files to gcartier@jazzscheme.org>

Maintainer Scenario
  ;; publish some changes
  git push pub

  ;; merge contributions
  git am -3 *.patch
  <optional step: fix any am conflicts>
    git am --resolved


Building
========

Building Jazz follows the usual configure / make methodology. The only unusual
thing is that, as the underlying Scheme already represents a platform
independant abstraction, there is no need to use the low-level GNU tools. The
build system is fully implemented using the underlying Scheme.

To load the build system using

Gambit
  Just launch gsc from Jazz's source install directory. The .gambcini file
  located there will automatically load the build system.


Examples
========

Building the Jazz kernel and core modules
  gsc
  Gambit v4.1.1
  > (configure platform: windows)
  > (make)

Building Jedi's critical modules
  gsc
  Gambit v4.1.1
  > (make jedi)


Cfg
===

Manage multiple configurations.

(cfg)
(cfg list)
(cfg delete [name])


Configure
=========

Register a new configuration.

To support multiple configurations, configurations can be optionaly be named.

Configurations are loaded / saved from the .configurations file located at the
root. Using configure is basically an easy way to edit the .configurations file.

(configure
  [name: name]
  [system: system]
  [platform: platform]
  [safety: safety]
  [options: options]
  [directory: directory])

name
  The optional configuration name. Must be alphanumeric.

system
  The underlying Scheme system (automatically determined)
  - gambit (the only fully supported scheme system at the moment)
  - chicken
  - ...

platform
  The GUI platform (will try and guess based on system type)
  - mac (development not yet started)
  - windows
  - x11 (almost there)

safety
  The runtime safety level
  - core
      Core debug mode for debugging JazzScheme itself. Adds tests to make the
      kernel and core safe.
  - debug
      Standard debug mode with tests to make user code safe. This is the
      recommanded safety for development.
  - release (the default)
      Release mode for stable user code with no safety tests. If you plan on
      using the Jedi IDE, you may want to build using this safety level as it
      will run alot faster.

options
  Various options
  - interpret
      An advanced option for Jazz developers to enable loading the kernel fully
      interpreted.
  - profile
      Enable statistical profiling using statprof by compiling files with the
      Gambit's 'debug' option to include debugging information in the code
      generated.

directory
  The optional output directory for make defaulting to the architecture name,
  for instance GambitWindowsDebug (see below for details).

  JazzScheme uses a directory structure to support cross-compilation accross
  multiple architectures. Architectures are subdirectories of the bin directory
  that regroup binary compatible files like executables, compilation results,
  libraries, ...

  An architecture name is determined by the following elements :
  - system
  - platform
  - safety
  - profile option


Make
====

Build target for the active configuration.

(make [target])

target
  The target to build which defaults to 'all'.

  To support multiple configurations, a target can be specified as
  target@configuration

  - jazz     : the Jazz kernel and core modules
  - platform : the platform modules
  - jedi     : Jedi's critical modules
  - picolo   : Picolo a minimalist IDE
  - all      : all targets


Install
=======

There is no equivalent of make install due to the complexity of supporting
multiple systems and user preferences. Since this step is also very simple to
do manually, installing the built configuration is left to the user.

Depending on your system you will usually
  - Copy the Jazz runtime files <need to detail this> to a standard system
    location or
  - Modify your environment variables to point to the location of the Jazz
    executable

Note that at this time, modifying your environment variables is the preferred
approach as some modules like Jedi are still dependent on source files.
