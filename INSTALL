Dependencies
============

Gambit
  You need to install the latest version of Gambit. You will also need to
  pull all the latest changes from the Gambit repository as Marc Feely,
  Gambit's author, is often fixing bugs and adding new features to support
  JazzScheme development. Be sure you have made a 'make bootstrap' for
  Gambit before pulling. This is documented on Gambit's website but is a
  costly gotcha as it will force you to reinstall if you forget to do it.
  See Gambit's INSTALL.txt file for details on installing Gambit and see
  Gambit's website for details on accessing Gambit's public repository:
  http://dynamo.iro.umontreal.ca/~gambit/wiki/index.php/Source_code_repository
  Note that installing Gambit from a Unix package manager can work but is
  risky as Gambit's version will not be as up-to-date as when installing from
  Gambit's source repository. Also, some package managers have been reported
  to install Gambit incorrectly (Gambit's author is working with the various
  package maintainer to fix this).

  Note that JazzScheme relies on very few Gambit specific features and was
  designed with ease of porting to other Scheme systems in mind.

  All compilation is done through the underlying Scheme. As Gambit uses GCC
  for backend, please refer to Gambit's documentation if you're experiencing
  GCC problems. On Windows, the only backend fully tested to work with
  JazzScheme is MinGW. Note that some people have reported problems when
  building JazzScheme with old versions of MinGW. You can get the latest
  version of MinGW from http://www.mingw.org/. Another reported problem was
  from someone having both Cygwin and MinGW installed, where MinGW would
  wrongly call Cygwin's gcc. Uninstalling Cygwin fixed the problem.

Cairo
  If you plan on doing GUI development, you will need to install Cairo from
  http://cairographics.org/. On Windows, we precompiled it for you as a DLL
  so it is already installed. On other systems, you should install it the
  usual way with your package manager and Jazz will use pkg-config to find
  the various paths. If you are on Mac OS X, the simplest way to install Cairo
  is through macports. See the next section for details on installing macports
  if you don't already have it. With macports installed, installing cairo is
  easy, simply execute the following command from any terminal:
  "sudo port install cairo". Note that on systems that support both binary
  and development packages you should install the cairo-dev development
  package.

Macports
  You install macports from http://www.macports.org/. Note that a standard
  Mac OS X Package (.pkg) Installer is available. After the installation, you
  will need to edit your ~/.bash_profile file. Add /opt/local/bin to your PATH
  variable if it is not already there, and add the following line anywhere:
  "export PKG_CONFIG_PATH=/opt/local/lib/pkgconfig".

X11 on the Mac
  Due to a bug in Apple's installed version of X11, if you plan on using X11
  on the Mac, you will need to install the latest X11 from Apple's official
  site for X11: http://xquartz.macosforge.org/. Note that depending on your
  settings, X11 may need to be manually started before launching the Jedi IDE.


Binaries
========

To install a binary release, simply extract it anywhere you want and then launch
  - the Jazz kernel: bin/jazz.exe or
  - the Jedi IDE: bin/jedi.exe


Sources
=======

JazzScheme uses Git: http://git.or.cz/ to store all development files. You will
need to install Git to access the Jazz repository.

Repository
  The repository is currently hosted at
  git://github.com:jazzscheme/jazz.git

Troubleshooting
  If you get an error like "fatal: unable to connect a socket (Connection timed out)"
  it may be that you are behind a firewall that blocks outbound connections on Git's
  port 9418.

Help
  Some usefull Git links :
  - http://www.kernel.org/pub/software/scm/git/docs/
  - http://www.kernel.org/pub/software/scm/git/docs/user-manual.html
  - http://www.kernel.org/pub/software/scm/git/docs/gittutorial.html

User Scenario
  ;; clone the JazzScheme repository (only once)
  ;; this will create a 'jazz' directory containing all development files
  $ git clone git://github.com:jazzscheme/jazz.git
  $ cd jazz

  ;; After you clone the repository, you should never modify the master branch
  ;; as it will make subsequent pulls more prone to failure. This can easily
  ;; happen if you modify files in the Jazz source tree when experimenting
  ;; around. You should always work in your own branch, lets say 'work'
  $ git branch work
  $ git checkout work

  ;; pull from time to time to get the latest revision
  $ git checkout master
  $ git pull
  $ git checkout work
  $ git rebase master

Contributor Scenario
  ;; clone the JazzScheme repository (only once)
  ;; this will create a 'jazz' directory containing all development files
  $ git clone git://github.com:jazzscheme/jazz.git
  $ cd jazz

  ;; add email and name information that will appear in patches you submit
  $ git config user.email "you@email.com"
  $ git config user.name "Your Name"

  ;; after you clone the repository, you should never modify the master branch
  ;; as it will be used by git-rebase. You should always work in your own
  ;; branch, lets say 'work'
  $ git branch work
  $ git checkout work

  ;; commit any changes you have made
  ;; the -a option is necessary if you added any new file to the Jazz tree
  $ git commit -a -m "Some nice message describing your changes"

  ;; pull from time to time to get the latest revision and rebase your changes
  $ git checkout master
  $ git pull
  $ git checkout work
  $ git rebase master
  ;; optional step: fix any rebase conflicts
  ;; see http://www.kernel.org/pub/software/scm/git/docs/git-rebase.html for details
  ;; edit and resolve conflicts in all the conflicting files
  $ git add <list of resolved files>
  $ git rebase --continue

  ;; send contributions as a series of patch files
  ;; make sure you do the previous step of rebasing your changes just before
  ;; doing this as this will greatly minimize risks of conflicts when the Jazz
  ;; maintainers apply your patches to the central repository
  $ git format-patch origin
  <email generated patch files to gcartier@jazzscheme.org>

Maintainer Scenario
  ;; publish some changes
  $ git push pub master

  ;; merge contributions
  $ git am -3 *.patch
  ;; optional step: fix any am conflict
  $ git am --resolved


Building
========

Building Jazz follows the usual configure / make methodology. The only unusual
thing is that, as the underlying Scheme already represents a platform
independant abstraction, there is no need to use the low-level GNU tools. The
build system is fully implemented using the underlying Scheme.

Note that building the platform target will generate many warnings. These are due
to limitations in the current implementation of the foreign-function interface and
can be safely ignored.

A full build of Jedi, e.g. 'make jedi', will take about 10mn on a MacBook Pro and
require about 2G of memory to build without disk swapping.

To load the build system using :

Gambit
  Just launch gsc from Jazz's source directory. The .gambcini file located there
  will automatically load the build system.


Examples
--------

Building the Jazz kernel and core modules
  gsc
  JazzScheme Build System v2.0.0

  % configure
  <default>
    system: gambit
    platform: windows
    safety: release

  % make
  ...

Building Jedi
  gsc
  JazzScheme Build System v2.0.0

  % make jedi
  ...

Building many targets at a time
  gsc
  JazzScheme Build System v2.0.0

  % make jedi jazz@debug
  ...


Scripting
---------

Launching the build system using gsc with no options starts it in interactive mode
which is unsuitable for batch scripting.

For scripting, the build system can be invoked with the following options :

Usage: gsc [options]

Options:
 -make <target@configuration> Make <target> for <configuration> where both parts are optional
 -help                        Display help information


list
----

List configurations.

list


delete
------

Delete a configuration.

delete [configuration]


configure
---------

Register a new configuration.

To support multiple configurations, configurations can optionaly be named.

Configurations are loaded / saved from a .configurations file located in the
.jazz directory of the user's home. Using configure is basically an easy way
to edit the .configurations file.

configure
  [name: name]
  [system: system]
  [platform: platform]
  [windowing: windowing]
  [safety: safety]
  [optimize?: optimize?]
  [debug-environments?: debug-environments?]
  [debug-location?: debug-location?]
  [debug-source?: debug-source?]
  [interpret-kernel?: interpret-kernel?]
  [destination: destination]

name
  The optional name. Must be alphanumeric.

system
  The underlying Scheme system (automatically determined)
  - gambit (the only fully supported scheme system at the moment)
  - chicken
  - ...

platform
  The platform (will try and guess based on system type)
  - mac
  - windows
  - unix

windowing
  The windowing system (will try and guess based on system type)
  - carbon (development started)
  - x11 (almost there)
  - #f (use default platform windowing)

safety
  The runtime safety level
  - core
      Core debug mode for debugging JazzScheme itself. Adds tests to make the
      kernel and core safe.
  - debug
      Standard debug mode with tests to make user code safe. This is the
      recommanded safety for development.
  - release (the default)
      Release mode for stable user code with no safety tests. If you plan on
      using the Jedi IDE, you may want to build using this safety level as it
      will run alot faster.

optimize?
  This option adds optimization declares to the source code. Note that this
  will make debugging somewhat harder as the generated code will have gone
  through some transformations. At the moment it adds: proper-tail-calls,
  constant-fold and lambda-lift.
  - #f
  - #t (the default)

debug-source?
  Include source in compiled code by compiling with Gambit's 'debug-source'
  option.

  Note that this option is not needed anymore for using the statprof statistical
  profiler with compiled files since the new 'debug-location' option was added
  to Gambit.

  Do not use this option unless you have a very specific need for it as it will
  result in much larger object files and due to a flaw in gcc also result in longer
  compile times.
  - #f (the default)
  - #t

interpret-kernel?
  An advanced option for Jazz developers to enable loading the kernel fully
  interpreted.
  - #f (the default)
  - #t

destination
  The optional destination. Must be alphanumeric.

  The destination can be used to specify the directory where files will be built.
  A destination is a string of the format : "<build directory alias>:<build name>"
  where both <build directory alias> and <build name> are optional.

  The following build directory aliases are supported :
  - user (the default)
      Used for user projects.
      -> HOME/jazz_user/build/<build name>
  - bin
      Used to build standard Jazz binaries. Note that <build name> is ignored.
      -> ./bin
  - jazz
      Used to build multiple configurations of Jazz.
      -> ./build/<build name>

  The effective destination string is determined as follows :
  - if destination was specified it is used
  - if a configuration name was specified it is used as "user:<configuration name>"
  - else "bin:" is used

  Note that having a separate destination directory for each configuration enables
  multiple configurations to be independently built.


make
----

Build target for a configuration.

make [target@configuration] ...

target
  The optional target to build which defaults to 'jazz'.

  - kernel      : the module system
  - core        : the core modules
  - scheme      : the scheme dialect
  - jazz        : the jazz dialect
  - jedi        : the jedi ide
  - clean       : removes all build files
  - cleankernel : removes all kernel files
  - <product>   : user <product>

configuration
  The optional configuration which defaults to the default configuration.


make clean
----------

Clean a configuration by removing all build files.

make [clean@configuration] ...

configuration
  The optional configuration which defaults to the default configuration.


make cleankernel
----------------

Clean a configuration's kernel by removing all kernel files.

This is useful when a Gambit installation is incompatible with prebuilt
binaries. Simply do a 'make cleankernel' followed by 'make jedi' to rebuild
jazz and jedi. Your newly built jazz and jedi executables now have correct
internal paths to your Gambit installation.

make [cleankernel@configuration] ...

configuration
  The optional configuration which defaults to the default configuration.


make install
------------

There is no equivalent of make install due to the complexity of supporting
multiple systems and user preferences. Since this step is also very simple to
do manually, installing the built configuration is left to the user.

Depending on your system you will usually
  - Copy the built files to standard system locations or
  - Modify your environment variables to point to the location of the Jazz
    executable

Note that at this time, modifying your environment variables is the preferred
approach as some modules like Jedi are still dependent on source files.


Quit
----

Quit the build system.

quit


Troubleshooting
---------------

The following instructions presuppose basic knowledge of Gambit's REPL
(Read Eval Print Loop) that is used for debugging Gambit code. See Gambit's
manual for details.

If you get an error while building, and the message is not enough to understand
the problem, you can follow the following instructions to get a full-fledged
Gambit REPL to explore the problem further.

First, you have to determine if the error is occuring while building the kernel
or while building a product. Each build step displays a message of the following
format: 'make <target>'. Any <target> other than 'kernel' means that it is a
product that is beeing built.

- If the problem is in building the kernel, launch the build system in debug
  mode with: 'gsc -debug'. This will disable the build system's own REPL and
  get you a Gambit REPL. To build configuration <configuration-name>, execute:
  (jazz.build-kernel '<configuration-name>). Note that <configuration-name> is
  optional if you want to build the default configuration.

- Else, launch the built 'jazz.exe' kernel located inside the build directory.
  As a Jazz kernel is simply an extension to Gambit, launching it automatically
  starts a Gambit REPL. To build product <target>, execute:
  (jazz.build-product '<target>).
