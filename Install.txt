Dependencies
============

JazzScheme has very few dependencies

Gambit
------
You need to install the Gambit binaries and also have Gambit's source code installed in
your HOME directory as "gambit" so that JazzScheme can use (include "~/gambit/lib/header.scm")
to include some Gambit internal stuff (see 16.1 Handling of file names in Gambit's documentation
for details on the ~ syntax).

Note that JazzScheme relies on very few specific Gambit features and was designed with ease
of porting to other Scheme systems in mind.

GCC
---
All compilation is done through the underlying Scheme. As Gambit uses GCC for backend, please
refer to Gambit's documentation if you're experiencing GCC problems.

Cairo
-----
If you plan on doing GUI development, Cairo needs to be installed.
<need to detail how and where to install Cairo>


Binaries
========

We plan on having binary distributions for the standard platforms Mac and Windows. This will
ease trying out JazzScheme as no dependencies will then need to be installed to just run the IDE.


Architecture
============

JazzScheme uses a directory structure to support cross-compilation accross multiple architectures.
The architecture is determined by 4 features :

- System : the underlying Scheme system (Gambit, Chicken, ...)
- Platform : the GUI platform (Mac, X11, Windows)
- Processor : the target processor (Intel, ...)
- Safety : the desired safety level
  - Core : core debug mode for debugging jazzscheme itself with tests to make the core safe
  - Debug : standard debug mode with tests to make user code safe (recommanded safety for development)
  - Release : release mode for stable user code with no safety tests

Each architecture has an associated subdirectory in the bin directory. This directory will contain
any architecture specific files: executables, compilation result files, libraries, ...


Launching
=========

At this time there is no executable to launch. Launching the underlying Scheme system from the desired
architecture directory plays that role. In Gambit's case, we rely on a Gambit feature where Gambit will
load any gambcini.scm file located in the current directory. Each architecture directory then contains
a gambcini.scm file that defines all the features of the architecture.

For example, using Gambit on Windows / Intel in Debug mode, just start gsc in the bin/GambitWinIntelDebug
directory. You can then issue the various build commands described in the next section or load modules
interpreted.


Building
========

As a design goal, JazzScheme's code is structured in such a way that it can be loaded almost fully
interpreted in the underlying Scheme. No external build is thus required. Only modules that use Gambit's
FFI (mainly platform modules) need to be compiled in order to run.

For better performance you can build :
- (bcore) : jazz core
- (bjazz) : jazz core + language
- (ball)  : jazz core + language + platform modules
- (bjd)   : all jedi critical modules


Jedi IDE
========

To launch Jedi, the Jazz IDE, you will first need to build all platform modules using (ball). If it's the first
time you build the core, I suggest for better performance that you quit Gambit and relaunch so that the compiled
core files get loaded.

The (j) command will then launch the IDE.

If you plan on using the IDE a lot, you should also run the (bjd) command that will build all Jedi critical modules.
It makes a huge difference in performance.
