Dependencies
============

JazzScheme has very few dependencies

Gambit
------
You need to install Gambit binaries and also have Gambit's source code available
in a standard location so that JazzScheme can use (include "~/gambit/lib/header.scm") to
include Gambit internal stuff (see 16.1 Handling of file names in Gambit's documentation
for details on the ~ syntax)

Note that JazzScheme relies on very few specific Gambit features and was designed with ease
of porting to other Scheme systems in mind.

GCC
---

Cairo
-----
If you plan on using the Jazz IDE or doing GUI development, Cairo needs to be installed.
Need to detail how and where to install Cairo...


Architecture
============

JazzScheme uses a directory structure to support cross-compilation accross multiple architectures.
The architecture is determined by 4 features :

- System : the underlying Scheme system (Gambit, Chicken, ...)
- Platform : the GUI platform (Mac, X11, Windows)
- Processor : the target processor (Intel, ...)
- Safety : the desired safety level
  - Core : core debug mode for debugging jazzscheme itself with tests to make the core safe
  - Debug : standard debug mode with tests to make user code safe
  - Release : release mode for stable user code with no safety tests

Each architecture has an associated subdirectory in the bin directory. This directory will contain
any architecture specific files: executables, compilation result files, libraries, ...


Launching
=========

At this time there is no executable to launch. Launching the underlying Scheme system from the desired
architecture directory plays that role.

For example, using Gambit on Windows / Intel in Debug mode, just start gsc in the bin/GambitWinIntelDebug
directory and execute (j). Note that this relies on a Gambit feature to load any gambcini.scm file located
in the current directory.


Building
========

As a design goal, JazzScheme's code base is structured in such a way that it can be loaded
fully interpreted in the underlying Scheme. No external build is thus required.

For better performance you can build :
- (bcore) : jazz core
- (bjazz) : jazz core + language
- (ball)  : jazz core + language + platform modules
- (bjd)   : jedi the jazz ide
