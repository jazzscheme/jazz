Dependencies
============

JazzScheme has very few dependencies

Gambit
------
You need to install Gambit version 4.1.0 or later and also have Gambit's source code installed
in your HOME directory as "gambit" so that JazzScheme can use (include "~/gambit/lib/header.scm")
to include some Gambit internal stuff (see 16.1 Handling of file names in Gambit's documentation
for details on the ~ syntax).

Note that JazzScheme relies on very few specific Gambit features and was designed with ease
of porting to other Scheme systems in mind.

GCC
---
All compilation is done through the underlying Scheme. As Gambit uses GCC for backend, please
refer to Gambit's documentation if you're experiencing GCC problems.

Cairo
-----
If you plan on doing GUI development, Cairo needs to be installed.
<need to detail how and where to install Cairo>


Binaries
========

We plan on having binary distributions for the standard platforms Mac and Windows. This will
ease trying out JazzScheme as no dependencies will need to be installed to run the IDE.


Sources
=======

JazzScheme uses Git to store all development files

Repository
----------
The repository is currently hosted at
git://64.235.209.250/home/jazz/dev


Help
----
Some usefull Git links :
- http://www.kernel.org/pub/software/scm/git/docs/
- http://www.kernel.org/pub/software/scm/git/docs/user-manual.html
- http://www.kernel.org/pub/software/scm/git/docs/core-tutorial.html


User
----
;; clone the JazzScheme repository (only once)
git clone git://64.235.209.250/home/jazz/dev jazz
cd jazz

;; from time to time to get the latest revision
git pull


Contributor
-----------
;; clone the JazzScheme repository (only once)
git clone git://64.235.209.250/home/jazz/dev jazz
cd jazz

git config user.email "you@email.com"
git config user.name "Your Name"

;; After you clone the public repo, would should never modify the master branch as it
;; will be used by git-rebase. You should always work in your own branch lets say work
git branch work
git checkout work

;; from time to time to get the latest revision and rebase your changes
git checkout master
git pull
git checkout work
git rebase master
<optional step: fix any rebase conflicts>
  <edit and resolve conflicts in all the conflicting files>
  <git add the resolved files>
  git rebase --continue
  <see http://www.kernel.org/pub/software/scm/git/docs/git-rebase.html for details>

;; send contribution as a series of patch files
;; make sure you do the previous step of rebasing your changes just before doing this
git format-patch origin
<email generated patch files to gcartier@jazzscheme.org>


Maintainer
----------
;; publish some changes
git push pub

;; merge contributions
git am -3 *.patch
<optional step: fix any am conflicts>
  git am --resolved


Building
========

As a design goal, JazzScheme is structured in such a way that its core can be loaded fully interpreted
in the underlying Scheme. No external build script is thus required. JazzScheme uses itself running
interpreted to execute build commands.

Example
-------
cd bin\GambitWinIntelDebug
gsc
Gambit v4.1.0
> (build)
...
> (exit)
gsc
Gambit v4.1.0
> (j)
...

See Readme.txt for details and examples on launching and building.
