2.4.0
=====

For each of your profiles you will need to update the workspace preferences located in
Preferences.jml as the format was changed in new multi-stage management 'a la emacs'.

Simplest solution is to create a new profile, edit its generated Preferences.jml
file, copy the whole (<workspaces~> ...) section and replace it in all your profiles.


2.1.27
======

In preparation for the new shared libraries, module has been renamed to
unit and library renamed to module. Please update your code.

To update your profiles, I suggest running a non-whole-word search & replace
on your profile directories replacing module by unit and library by module
searching every file including .package.

Note that the jazz.library import remains jazz.library.


2.1.25
======

The kludge of duplicating many action-items with an equivalent -aux was
replaced by a clean alternate-shortcut property of action-items.

Please update your Bindings.jml settings file.


2.1.23
======

Method propagation must now be explicit. Supported propagations are:
- final (the default)
- virtual
- override

This means that every test, test-shift, ... method in your profile class must
now add an explicit override modifier. For example:

(method override (test)
  ...)


2.1.21
======

Because a slot was added to the Lisp-Entry class, you will need to manually
delete your catalogs before launching Jedi.


2.1.16
======

The jazz.parse-verbose? setting was renamed to jazz.outline-verbose?. Please
update your HOME/.jazz/.jazzini file.


2.0.12
======

Due to packages beeing renamed from <package name>.pck to just .package, you
will need to do a make clean on your built configurations or manually rename
your already built packages. You will also need to manually rename your user
packages.


2.0.10
======

Renamed the user directory from HOME/jazz_projects to HOME/jazz_user in
preparation to it supporting more than user projects now that build output
goes to HOME/jazz_user/build.


2.0.9
=====

New profiles are now stored in their own package. For example, a new 'Me'
profile will end up creating a HOME/jazz_projects/lib/profile.me package.

Also, the system doesn't rely on a file system heuristic anymore to discover
profiles but on an explicit 'profiles' property of packages. This new approach
adds a lot of flexibility and makes it possible for instance to have a package
contain both its own code and a profile that developers of that package can
use when login in to Jedi.

To convert an existing profile lets say 'Me', we suggest you use the login
dialog to create a new 'Me' profile (note that this will not overwrite your
old profile) and then migrate your old 'Me' profile content into the new
'Me' profile manually.


2.0.5
=====

Starting from this release, Jedi now stores user projects in ~/jazz_projects
instead of ~/.jazz to reflect user projects beeing persistent entities with
invested work. This is in contrast to the ~/.jazz directory that can be deleted
without much lost.

To convert your projects, simply create a ~/jazz_projects directory and move the
existing ~/.jazz/lib directory to it.


2.0.4
=====

This release introduces a restructuration of projects by moving them in their
own 'project.' module for a clean separation between runtime and IDE code. These
changes will break any profile workbench that pointed to Jazz projects.

The simplest way to fix this is to :
  - delete and recreate any profile that does not contain any important
    customizations you wish to preserve or
  - create a new profile, edit its settings/Workbench.jml file, copy every entry
    related to Jazz projects in it (e.g. everything from Kernel-Project to
    SRFI19-Manifest) and update any broken profile workbench with these correct
    entries
