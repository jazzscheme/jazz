Release 2.0.9
=============

New profiles are now stored in their own package. Also, the system doesn't
rely on a file system heuristic anymore to discover profiles but on an explicit
'profiles' property of packages. This new approach adds a lot of flexibility and
makes possible for instance to have a package contain both its own code and a
profile that developers of that package could use when login in to Jedi.

To convert an existing profile lets say 'Me', I suggest you use the login
dialog to create a new 'Me' profile (note that this will not overwrite your
old profile) and then migrate your old 'Me' profile content into the new
'Me' profile manually.


Release 2.0.5
=============

Starting from this release, Jedi now stores user projects in ~/jazz_projects
instead of ~/.jazz to reflect user projects beeing persistent entities with
invested work. This is in contrast to the ~/.jazz directory that can be deleted
without much lost.

To convert your projects, simply create a ~/jazz_projects directory and move the
existing ~/.jazz/lib directory to it.


Release 2.0.4
=============

This release introduces a restructuration of projects by moving them in their
own 'project.' module for a clean separation between runtime and IDE code. These
changes will break any profile workbench that pointed to Jazz projects.

The simplest way to fix this is to :
  - delete and recreate any profile that does not contain any important
    customizations you wish to preserve or
  - create a new profile, edit its settings/Workbench.jml file, copy every entry
    related to Jazz projects in it (e.g. everything from Kernel-Project to
    SRFI19-Manifest) and update any broken profile workbench with these correct
    entries
