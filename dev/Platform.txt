COM

- generate separate files for each interface
  - a smart linker will be able to compile only the referenced files
  - all is accessible to the interpreter and *only* the needed classes
    will be loaded and we can also easily compile the files transparently
    on the fly


System

- constant
- enumeration
- structure
- array
- winexternal
- coexternal
- javaexternal
- [in] [out] [in-out]
- C callback
- pointer / non-pointer param
- COM types
- Java types


Multi-Platform

- SLC solution: ... uses (jazz.system.os) where jazz.system.os is a kind of symbolic link
  that the manifest will redirect according to the os... The problem is that nothing enforces
  conformity accross the system packages (like interfaces do accross classes). This could maybe
  be solved by a kind of static interface (named a template!?) but first implement with the
  available concepts of classes and interfaces as this is clearly only an optimisation...
