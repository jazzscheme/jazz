je voudrai meme pouvoir definir des cast en Jazz pour indiquer au code walker
que fx -> Cell est un cast

je suis vraiment en train d'etendre la phase de walk. faut bien penser tout ca.
il y a deja les macro qui font ca. ca devrais pas etre si pire...

in a call like (f (/ a b)) where f is <fl:fl> we need to find some way of not generating
a rational that will just be costly converted to a flonum

je pense que:
  definition / method : signature type tests on entry
  specializations : signature type tests at call site

[09:39:21] Stephane a dit : template <T> T operator+(T x, T y) {return x + y;}
[09:41:09] Stephane a dit : template <string> string operator+(string x, string y) {concat(x,y);}
[09:41:27] guillaumecartier a dit : (overload (+ x <fx> y <fx>)
  (#fx+ x y))
[09:43:44] guillaumecartier a dit : (specialize (+ x <fx> y <fx>)
  (##fx+ x y))
[09:44:20] Stephane a dit : (specialize (+ x <fx> y <fx>) ##fx+)
[09:44:47] guillaumecartier a dit : (specialize inline (+ x <fx> y <fx>)
  (##fx+ x y))
[09:46:13] Stephane a dit : (method (foo x y)
  ...)
(specialize (foo x <fx> y <fx>)
  ...)
[09:46:31] Stephane a dit : (method virtual (foo x y)
...)
(specialize (foo x <fx> y <fx>)
...)
[09:47:10] Stephane a dit : (method virtual (foo x y)
...)
(specialize (foo x <fx> y <fx>)
(foo-fx x y))
[09:47:24] Stephane a dit : (method virtual (foo x y)
...)
(specialize (foo x <fx> y <fx>)
(foo-fx x y))
(method virtual (foo-fx x y)
...)
[09:49:39] guillaumecartier a dit : (let ((lst <list<fx>> ...))
  (sort < ...))

vs

(let ((lst <list<fx>> ...))
  (sort (lambda (x <fx> y <fx>) (< x y)
[09:50:07] guillaumecartier a dit : < <fx,fx>
[09:50:32] Stephane a dit : (template<T> T (generic-add T x T y)
)
[09:50:35] guillaumecartier a dit : Foo<fx>
[09:50:41] guillaumecartier a dit : <<fx,fx>
[09:54:07] Stephane a dit : (lambda (x)
(let ((y (next~ x)))
(+ x y))
[09:55:49] Stephane a dit : (method inline (x <T> y <T>) <T>
...)
[09:56:52] Stephane a dit : template <typecase T>
[09:57:01] Stephane a dit : template <int T>
[09:57:09] guillaumecartier a dit : (method inline (x <fx> y <fx>) <fx>
...)
[10:02:12] guillaumecartier a dit : (instantiate Cell<fx>)
[10:04:13] guillaumecartier a dit : (template (Cell type)
--`(begin
----- (class Cell ...)
-----(specialize (+ x ,type y ,type) ...)
-----...))
[10:04:18] Stephane a dit : (template<T> class Cell
(slot x <T>)
(slot y <T>)
...)
[10:05:15] Stephane a dit : (template<> class Cell
(slot x <fx>)
(slot y <fx>)
...)
[10:05:36] guillaumecartier a dit : (Cell <fx>)
[10:06:16] guillaumecartier a dit : (template (Cell type)
--`(begin
-----(specialize (+ x ,type y ,type) ...)
-----...))
[10:07:20] Stephane a dit : (class Cell
(method (+ x y))
[10:08:16] Stephane a dit : (Cell <fx>)
(specialize (+ x <fx> y <fx>)...)
[10:08:39] Stephane a dit : (Rect <fx>)
(specialize (+ x <fx> y <fx>)...)
[10:09:06] guillaumecartier a dit : (Cell <fx>)
(specialize (+ x Cell<fx> y Cell<fx>)...)
[10:09:58] guillaumecartier a dit : (+ a b)
[10:10:21] Stephane a dit : (define (Cell<fx>.+...)
[10:10:53] guillaumecartier a dit : +type1type2type3...
[10:11:03] guillaumecartier a dit : +Cell<fx>Cell<fx>
[10:11:27] guillaumecartier a dit : <<fx>
[10:11:46] guillaumecartier a dit : +<Cell<fx>><Cell<fx>>
[10:12:04] guillaumecartier a dit : (sort <<fx> ...)
[10:12:15] Stephane a dit : < <fx > vs < <fx>
[10:12:41] Stephane a dit : type=<fx ou < sur type=fx
[10:14:38] guillaumecartier a dit : (fx)
[10:15:45] guillaumecartier a dit : (sort (specialized < <fx> <fx>) lst)
[10:16:43] Stephane a dit : (let ((lst <:fx>))
(sort < lst)
[10:16:56] Stephane a dit : (sort fx< lst)
[10:17:39] Stephane a dit : (specialize (< ..) fx<)
...
(let ((lst <:fx>))
(sort < lst)
[10:19:49] Stephane a dit : (specialize (< ..) fx<)
(declare (sort pred <T/T:bool> sequence<T>))
...
(let ((lst <:fx>))
(sort < lst)
[10:20:38] guillaumecartier a dit : sort <<T^T:bool>^list<T>:list<T>>
[10:22:23] guillaumecartier a dit : (let ((lst <:fx>))
(sort < lst)
[10:23:10] Stephane a dit : (sort toto list-fx)
[10:23:30] Stephane a dit : (toto x y)
[10:24:26] Stephane a dit : (sort < list-fx)
[10:26:34] Stephane a dit : (sort fx< lst)
[10:27:02] Stephane a dit : (sort (specialized < <fx> <fx>) lst)
[10:27:51] guillaumecartier a dit :   definition / method : signature type tests on entry
  specializations : signature type tests at call site
[10:28:09] guillaumecartier a dit : (define (f x <fx>) ...)
