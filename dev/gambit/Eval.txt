GAMBIT EVALUATOR
----------------

- Gambit eval nodes contain a pointer to their cte. Interresting.
- Eval nodes also contain their code location!
- As (macro-code-run c) is a macro, this is like doing the Jazz vtable dispatch
  without the overhead of going through an auxiliary eval dispatch method
- I think that rte are only backward chained and that recycling is left to the collector
  (as interpreted lambdas are implemented as compiled closures, the compiled code takes care
  of all this...)
- One place that Gambit gains vs an OO implementation is by inlining object slots of variable
  length inside the object vector instead of having to allocate a separate vector
- Gambit also uses macros to unroll alot of things (for example local variable access). I should
  really start using this as this is a big plus over C as an implementation language
- Interpreted closures are in fact compiled closures that implement the interpreted closure... I
  guess that if we have access to symbolic information via the node it is a good idea. Gambit then
  gives access to the compiled continuation, procedure, ... information. This is a big reason the
  Gambit interpreter is so fast.
- The Gambit philosophy really seems to be not to hinder compiled code as much as possible even if
  it means doing contorsions to get debugging info out of it later on (speed yet again!)
- In Gambit, a let seems to have it's own rte...
- Gambit calls are dispatched using one of ##subproblem so that the debugger can easily identity
  the interesting frames and also the ##subproblem procedure receives as first two parameters, the
  code and the rte... which also explains why if i do a show-all-continuations, there is 2 frames
  per procedure. Note that we don't see stuff like if even in show-all-continuations as it resolves
  to a tail call...
- Once again, I think that stuff like stepping can be greatly simplified by thinking it in turn of
  continuations... (the gambit debugger when breaked has access to a continuation point...)
- ##interp-continuation? means an internal uninteresting continuation of the interpreter. The general
  evaluator in Gambit is refered to as eval. Ummmm not so sure as it returns #t for one of my continuation
  because of (##eq? parent ##subproblem-apply1)...
- Gambit represents toplevel procedure as procedures without the closure.
- Return points are procedures with a special encoding. What is the difference between a continuation
  and it's return point?


; Continuation objects

; A continuation is represented by an object vector of length 2
; slot 0 = frame object
; slot 1 = dynamic-environment


##continuation-frame fait un ##gc dans sa boucle!!! Soit le ##gc est juste un petit increment
de la generation0, soit c'est une trace que Marc a oublie d'enlever!

C'est quoi une Job dans Gambit?


("##closure-length"                 (1)   #f ()    0    integer extended)
("##closure-code"                   (1)   #f ()    0    #f      extended)
("##closure-ref"                    (2)   #f ()    0    (#f)    extended)
("##closure-set!"                   (3)   #t ()    0    #f      extended)

("##subprocedure-id"                (1)   #f ()    0    #f      extended)
("##subprocedure-parent"            (1)   #f ()    0    #f      extended)

("##procedure-info"                 (1)   #f ()    0    #f      extended)

("##continuation-capture"           1     #t ()    1113 (#f)    extended)
("##continuation-graft"             2     #t ()    2203 #f      extended)
("##continuation-return"            (2)   #t ()    0    #f      extended)


;; TYPE TEST PRIMITIVES

("##fixnum?"                        (1)   #f ()    0    boolean extended)
("##special?"                       (1)   #f ()    0    boolean extended)
("##pair?"                          (1)   #f ()    0    boolean extended)
("##subtyped?"                      (1)   #f ()    0    boolean extended)
("##subtyped.vector?"               (1)   #f ()    0    boolean extended)
("##subtyped.symbol?"               (1)   #f ()    0    boolean extended)
("##subtyped.flonum?"               (1)   #f ()    0    boolean extended)
("##subtyped.bignum?"               (1)   #f ()    0    boolean extended)
("##vector?"                        (1)   #f ()    0    boolean extended)
("##ratnum?"                        (1)   #f ()    0    boolean extended)
("##cpxnum?"                        (1)   #f ()    0    boolean extended)
("##structure?"                     (1)   #f ()    0    boolean extended)
("##box?"                           (1)   #f ()    0    boolean extended)
("##values?"                        (1)   #f ()    0    boolean extended)
("##meroon?"                        (1)   #f ()    0    boolean extended)
("##symbol?"                        (1)   #f ()    0    boolean extended)
("##keyword?"                       (1)   #f ()    0    boolean extended)
("##frame?"                         (1)   #f ()    0    boolean extended) ?????????
("##continuation?"                  (1)   #f ()    0    boolean extended) ?????????
("##promise?"                       (1)   #f ()    0    boolean extended)
("##will?"                          (1)   #f ()    0    boolean extended)
("##gc-hash-table?"                 (1)   #f ()    0    boolean extended)
("##mem-allocated?"                 (1)   #f ()    0    boolean extended) subtyped or pair
("##procedure?"                     (1)   #f ()    0    boolean extended) ?????????
("##return?"                        (1)   #f ()    0    boolean extended) ????????? would it be a continuation return???
("##foreign?"                       (1)   #f ()    0    boolean extended)
("##string?"                        (1)   #f ()    0    boolean extended)
("##s8vector?"                      (1)   #f ()    0    boolean extended)
("##u8vector?"                      (1)   #f ()    0    boolean extended)
("##s16vector?"                     (1)   #f ()    0    boolean extended)
("##u16vector?"                     (1)   #f ()    0    boolean extended)
("##s32vector?"                     (1)   #f ()    0    boolean extended)
("##u32vector?"                     (1)   #f ()    0    boolean extended)
("##s64vector?"                     (1)   #f ()    0    boolean extended)
("##u64vector?"                     (1)   #f ()    0    boolean extended)
("##f32vector?"                     (1)   #f ()    0    boolean extended)
("##f64vector?"                     (1)   #f ()    0    boolean extended)
("##flonum?"                        (1)   #f ()    0    boolean extended)
("##bignum?"                        (1)   #f ()    0    boolean extended)
("##char?"                          (1)   #f ()    0    boolean extended)
("##closure?"                       (1)   #f ()    0    boolean extended) ?????????
("##subprocedure?"                  (1)   #f ()    0    boolean extended) ?????????
("##return-dynamic-env-bind?"       (1)   #f ()    0    boolean extended) not existent anymore
