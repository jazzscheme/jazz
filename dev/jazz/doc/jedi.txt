WORKSPACE
=========

Workspaces are groups of related windows, tools, ... that are activated together.

The buttons located at the right-hand side of the Jedi toolbar can be used to switch
the active workspace.

Jedi comes with the following workspaces installed:
- Home
- Text
- Debugger
- Groupware


WORKBENCH
=========

The workbench is the window used to manage source files.


PROJECT
=======

Projects are the workbench entities that contain source files and resources.

They are used to catalog source files so the IDE will know about every definition
and reference in those files. Note that projects are language agnostic.


PRODUCT
=======

Products are the workbench entities used to build and run code.

There are two kinds of products at the moment:
- Gambit (in development)
- Jazz


CATALOG
=======

A catalog is a full cross-reference database of a set of source files. Catalogs can
be created manually but the easiest way to manage catalogs is through projects as each
project automatically creates a catalog of it's source files.

Note that a new profile comes with projects for all Jazz packages pre-installed in
the workbench. An easy way to update the catalogs of all these projects is through the
Catalogs Manager window that can be invoked using Tools / Catalogs / Catalogs Manager.
In the catalog manager, if no project is selected, pressing the Update button will
update all catalogs.

Supported languages at the moment:
- CommonLisp
- Scheme
- Jazz
- C (very basic)
- CSS (very basic)
- Java (very basic)
- JavaScript (very basic)
- Lua-Parser (very basic)
- Properties (very basic)
- Python (very basic)


ALIASES
=======

Aliases are symbolic names for directories. They are similar to CommonLisp's logical
pathnames.

The following aliases are predefined:
- Home
- User
- Install
- Jazz


BINDINGS
========

The following bindings are predefined:
- Jazz
- Emacs (basic)
- Mac (todo)
- Windows


DEBUGGER
========

The Jazz debugger is a remote debugger. This means that the debugger will debug one or more
remote 'debuggee' that are automatically connected to it via TCP/IP. Note that Jedi also a
debuggee that is debugged by itself so that should an error occur inside the IDE, the debugger
can be used to debug it.

A great advantage of remote debugging is that you are debugging your application exactly as
itself with all its features: windows, menus, connections, ports, threads, ... instead of
simulating inside the IDE it's various features. With a remote debugger it is even possible
to debug a game running remotely on a gaming console.

The Jazz kernel supports debugging of Jazz code. But it really is a Gambit debugger and can
be used to debug any Gambit code. All you need to do is create a product that will load your
Gambit code and then run your product using the Debug command.

Restart
-------

Jazz supports a concept of restarts similar to CommonLisp. The debugger will automatically
propose all restarts when displaying an exception or break point.


CONSOLE
=======

The console is where the debuggee interact with the debugger usually through a read-eval-print
loop.

Each thread that throws an exception will open it's own console and start a repl at that point.

Note that Jedi automatically opens a console when it starts to enable experimenting. Expression
entered in that console are evaluation inside the IDE's primordial thread. Beware that if you
built Jedi in release safety, Gambit's safe mode is disabled so that code entered in that console
can crash the IDE.


TERMINAL
========

The terminal represent's Gambit console. The terminal name was choose to distinguish it
from Jedi's own console.


PROPERTIES
==========

This window is used to visually edit properties of components.

Mainly used by the workbench at the moment.


SEARCH
======

Alt-W : Toggle Whole Words
Alt-I : Toggle Ignore Case
Alt-C : Toggle Preserve Case
Alt-R : Toggle Play Recording


TEXT
====

Edit definitions : alt-.
Edit references : ctrl-alt-.
Browser metaphor navigation : ctrl-[ ctrl-]
Syntax coloring
Customisable code completion
Textual macro recording : ctrl-( ctrl-) control-click alt-E
Mouse copying : alt-click
Unlimited undo / redo : ctrl-Z ctrl-shift-Z
Clipboard stack : alt-V
Code tabulation : tab

Eval
----

In a Jazz text, use ctrl-enter to evaluate the current definition. Note that Jazz will need
to know to what debuggee to send the code for evaluation. You can right-click on any debuggee
in the Processed window and select 'Focus' to focus this debuggee so it will be the one that
gets the code evaluations.


GROUPWARE
=========

Compare directories
Compare files


SAMPLES
=======

To build / run / test a sample, open it's project in the workbench and double-click
it's product icon (the ruler with a pen icon). This will activate the product and make
it the current product. You can then use the Product menu to interact with it.

Note that there is no need to build a sample before running it. Jazz support running
any module interpreted. The only exception is modules containing FFI code but no sample
uses any FFI.

World
-----

The classical hello world sample.

Mandelbrot
----------

A simple window to explain how Mandelbrot sets are calculated that I did with my son.

Use the Test menu item to create a new Mandelbrot window.

C4
--

The Connect-4 game with a simple minimax AI.

Winner is first one to put 4 circles in a line.

Gomoku
------

The classic japanese game with a simple minimax AI.

Winner is first one to put 5 stones in a line.

Game Server
-----------

A sample web server.

You can launch the game server using either of the following methods :

- Select the Game Server product by double-clicking it and then launch the
  product using the Product / Debug command. You can use the game server console
  to control the server. Type help for help.
- Select the Servers window and double click the Game row to start the server
  inside the IDE.

To try the server enter the following address in any browser :
  
  http://localhost:8080/Games


ECLIPSE
=======

Here is a very informal correspondance between some Eclipse and Jazz concepts
where applicable.

Eclipse     Jazz
-------     ----

workspace   profile
feature     package
project     project / product
perspective workspace
