{Formatted-Text
 formats:
 ({Format Base}
  {Format Heading1}
  {Format Heading4}
  {Format Base left-margin: 16 bulleted?: #t}
  {Format Base left-margin: 48 bulleted?: #t}
  {Format Base left-margin: 0 bulleted?: #f})

 styles:
 ({Text-Style Base}
  {Text-Style Heading1}
  {Text-Style Heading4})

 paragraphs:
 ((1 ("Marc" 1))
  (0)
  (2 ("DONE" 2))
  (3 ("Would it be difficult to support compiling define-macro? It forces me to always separate the code into 2 files when I want the expander to be compiled and it is very annoying: possible by using the underlying code used by define-macro" 0))
  (3 ("Is it possible to explicitly pass (macro-absent)? : no" 0))
  (3 ("It would be nice if compile-file had an option of not generating the .o1 when using options like -expansion" 0))
  (3 ("Can statprof be used on compiled code? yes but better if compiled with -debug" 0))
  (3 ("Is statprof really reliable in that it reaches all the code? : yes" 0))
  (3 ("All of Gambit's tools are really useless in the presence of macros. Can something be done? : define-macro receives a version that is completely stripped of position infos but ##define-syntax receive the info intact. Gambit extends ##define-syntax to permit a transformation lambda" 0))
  (3 ("If need be can Gambit's heartbeat be made faster? yes but it is already set to max by passing 0 to the function that sets it" 0))
  (3 ("Is it ok to use the default hash function for hashing Shortcuts? Also, do I understand correctly that a custom hash function should return a fixnum? and if yes are there any fn to add 2 fixnums and return a fixnum? - NO" 0))
  (3 ("Is ##define-syntax supposed to work in compiled code? : fixed" 0))
  (3 ("If I want to reimplement Jazz's bug slayer module in Gambit, can a reliable stack trace be optained from C code? Also, does Marc know of an equivalent to Windows's SetUnhandledExceptionFilter in portable C? : Marc thinks that yes with signal handlers" 0))
  (3 ("Confirm that the following 2 notations are equivalent :" 0))
  (0 ("  (c-define-type int1 \"int\")" 0))
  (0 ("  (c-define-type int2 (type \"int\"))" 0))
  (0 ("  When I return the 2 types I get :" 0))
  (0 ("  t1 = '#<foreign #17 0x412f420>" 0))
  (0 ("  t2 = '#<int #18 0x3400410>" 0))
  (0 ("  : they should but are not. the first one should not be used directly" 0))
  (3 ("As ___CONS cannot be used in C code what should be used? : ___EXT(make_pair)" 0))
  (3 ("Donc toute memoire allouee en C on doit creer des objets STILL sinon le gc peut non avoir. Mais si je veut retourner disons une paire, comment je fait car alors elle a un refcount = 1 et ne sera jamais collecte et si je release avant le retour, il y a un petit moment ou le gc peut passer non? Ou bien es-ce que le gc parcourt les __result? : au moment du release, le resultat est dans ___R1 qui sera protege" 0))
  (3 ("Comment connaitre si file ou directory dans directory-files? Et aussi n'es-ce pas vraiment inefficace de reappeler l'os alors qu'on avait surement l'info quand on scannais... : pourrais soit retourner \".../\" pour les directories ou bien retourner directement les FileInfo" 0))
  (3 ("Is global variable access like function calls, e.g. alot less efficient when crossing modules? no they become C global variables" 0))
  (3 ("Native gambit objects implemented by structures like ports and hashtables. How can we obtain a fast dispatch for these : the best solution would probably be to integrate jazz classes to gambit types and then we would have no overhead" 0))
  (3 ("Should I use ##fx+ or ##fixnum.+ or ??? : non" 0))
  (3 ("Is there a difference between (f . rest) and (f #!rest rest) ? : non" 0))
  (3 ("Is implementing proper tail calls in an interpreter very complex? Are there some issues about an interpreter preserving proper continuations? Any other Scheme specific gotchas? : if all the calls the interpreter makes are in tail position for the interpreted code in tail position, everything will work seamlessly" 0))
  (3 ("Will Gambit optimize out any (let ((x ...)) body) where x occurs only once inside body? This would be usefull for macros generating code so I do not have to duplicate the logic of verifying the occurances of x and generating a surrounding let when > 1 : it's not even correct semantics to move the inlined code body into the variable place! and yes gambit will optimize many cases especially for variables like (let ((x a)) ...)" 0))
  (3 ("I will have a .o1 for many files. If I then want for some reason to build an exe or dll to package some of them, will Gambit need to recompile everyone or can it link from .o1 files? -> no. can either link an exe that will auto dyna load the .o1 or compile so we keep both the .obj and .o1..." 0))
  (3 ("The #ifdef ___LINKER_INFO header section in generated C files is it Lisp data that it contains? : yes" 0))
  (3 ("I guess the ` should create mutable pairs *even* if it does not contain unquotes... Else it is difficult to create mutable data structures like in my inline patterns... : arbitrary decision" 0))
  (3 ("When a compile like language takes a looong time, is it gambit or mostly gcc? If it's gcc are there any options to speed up compilation that do not affect output speed too much? : gcc mostly and affected *alot* by -debug" 0))
  (3 ("Is there any problem (semantic, performance, ...) in Gambit to have the same function defined many times in different modules when all the modules are declared block (for the compiled dispatchers). : yes so I should name them with a module-name prefix like a.b.fff" 0))
  (3 ("Exactly what does compiling with -debug give? The idea being could we have an option that turns off the embedding of source code that makes compiling sooooooooo slow but keeps the other debugging features" 0))
  (4 ("ability to show source with -i" 0))
  (4 ("variables content in debugger???" 0))
  (4 ("locations used by statprof???" 0))
  (0 ("  : should not be too hard to separate into something like -debug and -source" 0))
  (3 ("Or is it not more like statprof should go up the continuation tree until it finds a continuation with info so we always get where the code was... : done" 0))
  (3 ("Is there a performance penalty to loading a .o266? : maybe a slight one" 0))
  (3 ("Es-ce que (if var ...) est plus efficace que (if (##not var) ...) ? : non" 0))
  (3 ("Why the duplication between system and sys. : system is the good one" 0))
  (3 ("Are there any problems (perfo, semantics, ...) to doing only toplevel set! with no associated define. The reason beeing that because both my display __p2217 and the actual method point to the same lambda Gambit's debugger displays __p2217 which is really annoying : extend gambit's heuristic that skips ## with skiping __ :)" 0))
  (3 ("Is there a procedure to take 7 2 -> 3 : ##fxquotient" 0))
  (3 ("Es-ce que marc as une passete scheme pour faire qq chose juste la 1er fois qu'un fichier est loade? pour CLASS_ATOM : utiliser genre ##global-value" 0))
  (3 ("Does Gambit have something like fresh-line? : (output-port-column port)" 0))
  (3 ("Why is compiling language sooooo much slower on the Mac? : maybe gcc version!? num.scm of gambit is similar size so investigate why it is not as slow" 0))
  (3 ("Facon la + simple d'utiliser le sha-1 de snow? : implement show in jazz! Es-ce que ca va donner le meme resultat que le sha-1 de Git? yes" 0))
  (3 ("Y-a-t-il une facon simple d'avoir le size d'un fichier ou port? : file-size" 0))
  (3 ("Integrate my splitting the -debug option into -debug and -include-source" 0))
  (3 ("Why the USE_environ=1 - setenv not really standard" 0))
  (3 ("Validate that table-length is just a slot access - yes" 0))
  (3 ("Validate that statprof needs the source option - yes it does" 0))
  (3 ("(compile-file \"x\" options: '(some-garbage)) does not report an error - done" 0))
  (3 ("Could there be a read-line with proper? - use the include-separator? parameter" 0))
  (3 ("Entering #u8(72 101 108 108 111) at the gsc repl quits the application! - the problem is my exception handler that doesnt throw to get out of the exception point. this will be fixed when i do my own repl for the build system" 0))
  (3 ("How can we in Gambit specify runtime options like -:m500000 when building an application? : #!gsi -:dr,m250000 at the top of the main module" 0))
  (3 ("If i interrupt a build with ctrl-c and try to quit with ,q the process now hangs on windows : i need to manage correctly" 0))
  (3 ("Is there a peek on object ports? - no because as every scheme object is valid in an object port, peek would have to way of returning <not found>" 0))
  (3 ("How to implement ports to direct output into the jazz console" 0))
  (3 ("Try and understand with Marc why read can correctly read a point in Jazz and why even with a with-jazz-readtable a #\\at cannot be read." 0))
  (4 ("with it fix who-calls of forward-simple-expr with wrapping the read in find-expression with a with-jazz-readtable" 0))
  (3 ("It would be possible to link statically at any level into .o1 or .exe by preserving the gambit linking info but keeping the .c and by keeping the compile code into the .o." 0))
  (3 ("Need a way to use write with UTF-8 char-encoding" 0))
  (3 ("Need a way to start a tcp server and let the stack find an available port" 0))
  (3 ("Can we safely rely on the meroon type to always exist to get the extra bit we need in Jazz to implement the initialized feature?" 0))
  (3 ("How does force-output work? For instance why does (format :terminal \"aaa{%}\") display directly and (format :console \"aaa{%}\") takes a (force-output) to work" 0))
  (4 ("Based on that understanding maybe add format directives to force output or insert newline / force output (maybe {!})" 0))
  (3 ("Can a thread terminate itself cleanly by invoking like the initial continuation of the thread!?" 0))
  (3 ("Now that we can select threads, is there a way to do the same thing as ctrl-c in a specific thread?" 0))
  (3 ("What is the idea behind having ##primordial-exception-handler-hook and is it the right approach to set it to a jazz hook that will revert to calling" 0))
  (0 ("  (##repl-exception-handler-hook exc ##thread-end-with-uncaught-exception!)." 0))
  (0 ("  By delegating that way, the hook is really the default handler that can be changed on the fly so it will work even for threads aleady created." 0))
  (0)
  (0)
  (2 ("SNOW" 2))
  (3 ("It took me like 20mn to just download and figure out all the dependencies of hello world!!! The system has to do all this automatically" 0))
  (3 ("If I am to use snow to package jazz modules I will need :" 0))
  (4 ("support for binary packages : fat binaries for multiple architectures too!?" 0))
  (3 ("How do namespaces work? Can we integrate namespaces and jazz modules easily?" 0))
  (3 ("For snow, (requires: a b c (d ...)) would be more consistant and much easier to parse as it would just be keywords" 0))
  (3 ("So if I understand correctly, Snow is just Scheme code outside the package* form that rely on magic happening to make some symbols available like tk-start. There is no module management. This won't scale when a lot more packages are available. We absolutly need a robust module system underneath Snow and all code to go through that module system to access the Snow packages." 0))
  (3 ("It is also very difficult to reconcile Jazz's philosophy of refining concepts to their utmost simplicity with Snow's having to deal with all the various incompatibilities between all Scheme systems. It's pathetic to have to redifine all the bignum concepts and pay a performance penalty of going through an extra layer when bignums are part of r5rs." 0))
  (0)
  (0)
  (2 ("TODO" 2))
  (3 ("Le statement dans la doc: Moreover the C code is always placed at the head of a compound statement whose lifetime encloses the C to Scheme conversion of the result. Consequently, temporary storage (strings in particular) declared at the head of the C code can be returned by assigning them to `___result' or `___result_voidstar'. In the c-name-or-code, the macro `___AT_END' may be defined as the piece of C semble indiquer qu'on peut { S s; ___result_voidstar = s; } non?" 0))
  (3 ("The problem with Gambit's implementation of keyword parameters and rest. See my \"Parametres nommes\" message thread." 0))
  (3 ("Look with Marc at the reliability of cont-locat with a good example the reported 15% in jazz.read-toplevel-form" 0))
  (3 ("Ask Marc about the thing I don't understand about hashtable resizing performance cost. Also, if resize is really so fast then it would indicate that table-merge! is thus so slow and could then be optimized alot" 0))
  (3 ("Is there anything in Gambit for read-only flag of files and setting attributes and modification-time." 0))
  (3 ("Validate with Marc that my test.ptm is correct even if running tptm followed by ##gc doesn't really bring the memory back to where it was..." 0))
  (3 ("Could define-runtime-macro be exported? (integrate my version somehow!?)" 0))
  (3 ("Integrate my version of define-runtime-cond-expand-feature !?" 0))
  (3 ("Why does the (debug) option doesn't seem to work for the kernel?" 0))
  (3 ("Logic of tab completion should be adapted for cases where there is *alot* of completions" 0))
  (3 ("Could we compile using a precompiled header for gambit.h for faster builds?" 0))
  (3 ("compile-file option to suppress .o1 generation" 0))
  (3 ("still-obj-refcount" 0))
  (3 ("Marc is thinking about always using / as path separator and only externalizing to the platform separator on demand" 0))
  (3 ("Finish all that is necessary so a jazz binary release without gambit installed can still compile out of the box" 0))
  (3 ("I dont understand condition variables. How does a thread block on one? And how does the variable know what threads to unblock when doing a broadcast?" 0))
  (3 ("Another difficulty is that if a gambit thread errors, the primordial jedi thread will consume all keyboard events making debugging impossible" 0))
  (3 ("Could we consider that (path-normalize \"a/\") should not error just like (path-normalize \"a\")" 0))
  (3 ("Need a solution to class-of for ports" 0))
  (3 ("We will need a multi-platform solution to event management that works also on X11 and MacOS" 0))
  (3 ("Any idea why current-instance is always returning 0? If we can fix this, I could include the icon in the executable" 0))
  (3 ("Would be nice to fix the closing the Windows gsc console through the close box crashing" 0))
  (3 ("If some syntax for unreadable objects was taken so that for example #<blabla #2> is read exactly as #2, then it would elegantly solve the problem of seeing output with literals containing unreadable objects. For example you could paste (length '(#<blabla #2> #<blublu #3>))" 0))
  (3 ("Look at integrating my ,r into gambit and also at doing it the right way as (car 1) ,r (car 1) will have no stack the second time" 0))
  (3 ("Could the functionality to add to the repl-result-history be exported so that Jazz's console be consistant with the Gambit one." 0))
  (3 ("Does creating a parameter have performance costs outside of it's own usage?" 0))
  (3 ("Need explicit catchable errors for everything that can happen to a TCP connection to implement a robust remote debugging system." 0))
  (3 ("Look at my thread-loop/... code with marc." 0))
  (3 ("How can we get continuation location info for compiled code and more generaly we have to start thinking on how to implement the old jazz full featured location system." 0))
  (3 ("In all my inter-thread/process communication it is not always clear whether i should use a dynamic-wind or a with-exception-handler or both to protect the caller waiting on proper return from the callee." 0))
  (3 ("Is there a way to lock a port or to get the same behavior where ideally i want my repl's print to not be inter-spliced with user prints (or maybe the repl's print communication atomically directly with the debugger's console-output remote method!?)" 0))
  (3 ("There is something a bit broken in Scheme's way of giving access to continuations as function calls no? as every programmer is so used to a function call returning a value when this is absolutly not a function call and will never return! I think this is one of the big barrier to understanding continuations, this deeply ingrained reflex that (f ...) is a function call of f that will return a value." 0))
  (3 ("For the process snapshot, are there any functions to get info about the current state of the memory and/or garbage collector?" 0))
  (3 ("What are the pros and cons of using a SetTimer approach to wake up Gambit's threading system?" 0))
  (3 ("Is setting the SetTimer events-heartbeat to 1 milliseconds like the Gambit heartbeat a good idea?" 0))
  (3 ("Look at extending the Gambit interpreter to implement some key Jazz special forms" 0))
  (3 ("Marc's conceptual objection to the design of Jazz's module system that compilation is not file based, when you think about it it is only a question of what granularity level you choose. Jazz's module system does independent builds of packages. If we see source code in the abstract, file or package is just an arbitrary granularity decision that could possibly be even made parameterizable." 0))
  (0)
  (0)
  (2 ("NOTES" 2))
  (3 ("Got to really start forming people to Gambit." 0))
  (0))}
