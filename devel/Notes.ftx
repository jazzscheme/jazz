{Formatted-Text
 formats:
 ({Format Base}
  {Format Heading1}
  {Format Base left-margin: 16 bulleted?: #t}
  {Format Base left-margin: 48 bulleted?: #t}
  {Format Base left-margin: 80 bulleted?: #t})

 styles:
 ({Text-Style Base}
  {Text-Style Heading1})

 paragraphs:
 ((1 ("Notes" 1))
  (0)
  (1 ("Gambit" 1))
  (0)
  (2 ("About the only thing I know where Gambit doesn't respect the same semantics between interpreted and compiled code (and that can lead to difficult bugs) is :" 0))
  (3 ("doing an inter-module set! on a variable that was defined in a (block) declared module and that wasn't modified by any set! in that module" 0))
  (3 ("the interpreted code will change the value wheras the compiled code will leave the value as is" 0))
  (2 ("A big factor in load time is initial memory allocated by the -:m runtime option. Going from 500000 to 200000 made load time go from 4s to 6s" 0))
  (0)
  (0)
  (1 ("Jazz" 1))
  (0)
  (2 ("Thoughts: having a module hierarchy can be confusing if for instance some files under jazz.ui are part of the jazz.ui module and others like jazz.ui.clipboard are not... This seems to talk in favor of having jazz.ui.clipboard at the package toplevel!?" 0))
  (2 ("Look at C# Generics which seems pretty close to what I want. Very interesting interview with Anders Hejlsberg at http://www.artima.com/intv/generics2.html. Also look at Scala's solution to the problem." 0))
  (2 ("bwinton@latte.ca interested in beta testing the web framework" 0))
  (2 ("Maybe high perf counters in Gambit would solve the problem of timings beeing so inconsistant in Windows" 0))
  (2 ("Because language has some very critical functions like search, find, ... I think that when we have a typed dispatch with only 1 level of indirection that maybe specializing will not be as necessary for big functions like search" 0))
  (2 ("To implement a pump to capture output in the remote debuggee: open-string-pipe read-substring input-port-timeout-set!" 0))
  (2 ("When Stephane is done with generic methods, need to really think hard about wheter we should use generic methods instead of ~ syntax. As the cost of a generic method call is void when type info is available, using generic methods at large may not be too costly. Need to think how to preserve encapsulation in the context of generic methods" 0))
  (2 ("I really love the font, the layout, ... of the imagemagick site" 0))
  (2 ("The problem of conserving enough info to be able to find the original location is very general and a generic solution could apply not only to macros but to jml transformations" 0))
  (2 ("In factor all syntax is functional with the addition of a simple [] construct that is like scheme's lambdas but without any lexical environment" 0))
  (2 ("In general I think using literals for hierarchycal structures is not a good decision. Literals should be kept for simple structures. JML or components should be used for hierarchies." 0))
  (2 ("The only way to create modifyable tutorial videos is by generalising the recorder to everything" 0))
  (3 ("How can we move the mouse progr at playback" 0))
  (3 ("Could record short text sound clips" 0))
  (4 ("They could be displayed textually inside a buble" 0))
  (3 ("By recording a playback we could using an external software record in a common format like .mov for instance" 0))
  (3 ("By having saved scenarios we can automate and unify tutorials" 0))
  (2 ("A good tutorial automated through an event recording mecasnism could give :" 0))
  (3 ("samples" 0))
  (3 ("tutorials" 0))
  (3 ("screen shots" 0))
  (3 ("basic test suite if the tutorial cover a good % of the functionality" 0))
  (2 ("MVC Designer optimisation maybe could be done by registering the actions when locked?=#t and replaying them afterwards. That way we would be guarantied to have the exact same behavior and before playing them, an optimisation could be performed to do things like removing duplicate actions" 0))
  (2 ("Now that we do not need [] anymore, it could be used as an autoquoted version of () to enable elegant pattern matching. The only problem remaining would be quoting symbols that could be done like erlang with a naming convention (!?)" 0))
  (0)
  (0)
  (1 ("Java 1.5" 1))
  (0)
  (2 ("Unicode" 0))
  (2 ("Primitive datatypes" 0))
  (2 ("Exceptions" 0))
  (2 ("Assertions" 0))
  (2 ("Generics" 0))
  (2 ("Enumerated Types" 0))
  (2 ("Annotations" 0))
  (0))}
