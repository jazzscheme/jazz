{Formatted-Text
 formats:
 ({Format Base}
  {Format Heading1}
  {Format Heading4}
  {Format Base left-margin: 16 bulleted?: #t}
  {Format Base left-margin: 48 bulleted?: #t}
  {Format Base left-margin: 80 bulleted?: #t}
  {Format Base left-margin: 0 bulleted?: #f}
  {Format Base left-margin: 32 bulleted?: #f}
  {Format Heading3}
  {Format Heading2})

 styles:
 ({Text-Style Base}
  {Text-Style Heading1}
  {Text-Style Heading4}
  {Text-Style Heading3}
  {Text-Style Heading2})

 paragraphs:
 ((1 ("Todo long-term" 1))
  (0)
  (0 ("GC  : Guillaume Cartier (gcartier@jazzscheme.org)" 0))
  (0 ("SLC : Stephane Le Cornec (coleste@videotron.ca)" 0))
  (0 ("LJG : Louis-Julien Guillemette (guillelj@iro.umontreal.ca)" 0))
  (0 ("JLR : Jeremie Lasalle Ratelle (pouexmachinax@gmail.com)" 0))
  (0 ("MF  : Marc Feeley (feeley@iro.umontreal.ca)" 0))
  (0)
  (0)
  (0 ("PUBLIC : To be done before the public open-source release" 0))
  (0)
  (0)
  (1 ("Release" 1))
  (0)
  (2 ("PUBLIC" 2))
  (3 ("Create some tutorials about application creation (GC)" 0))
  (3 ("Consolidate in a 'Executing Gambit code' section (GC)" 0))
  (4 ("Add some (load \"mycode.scm\") examples at both the console and the profile" 0))
  (4 ("Gambit project to remotely run / build" 0))
  (4 ("Termimal" 0))
  (0)
  (0)
  (1 ("Repository" 1))
  (0)
  (2 ("MEDIUM" 2))
  (3 ("Look at how the repo can be made cross-platform so we don't need a separate devel release for Windows. At the moment if we take the repo from Mac for instance and use it on Windows, a git status will say some files are modified. This is probably a line-ending problem." 0))
  (0)
  (0)
  (1 ("Install" 1))
  (0)
  (2 ("HIGH" 2))
  (3 ("Need to make sure a binary release works out of the box on every platform" 0))
  (4 ("Brainstorm how this should be done" 0))
  (4 ("One approach would be to distribute prebuilt cairo and its dependencies" 0))
  (4 ("A key element is to have tests for each external dependency that gives a clear error message explaining what is the problem" 0))
  (4 ("On mac the solution is probably to create a .dmg with included installers for every external dependency" 0))
  (3 ("Finish automating release building (GC)" 0))
  (0)
  (2 ("MEDIUM" 2))
  (3 ("Gambit uses for the installer:" 0))
  (4 ("MacOS" 0))
  (5 ("xcode scriptable tools" 0))
  (5 ("should probably install in frameworks dir and not lib" 0))
  (5 ("see prebuilt/macosx/build-phase2 and gambc.pmproj.in" 0))
  (4 ("Windows" 0))
  (5 ("NIS" 0))
  (0)
  (0)
  (1 ("Build" 1))
  (0)
  (2 ("HIGH" 2))
  (3 ("Fix crash when bad unit name in jedi.product" 0))
  (3 ("Implement showing the description when a version forces a rebuild" 0))
  (0)
  (2 ("MEDIUM" 2))
  (3 ("Copy the resources so that a binary release of Jazz can be 100% standalone and not require the source files (GC)" 0))
  (3 ("Be able to compile and build without Gambit installed (GC)" 0))
  (3 ("Font and other literals should not depend on the platform at readtime but only at runtime (GC)" 0))
  (4 ("With that, cleanly separate platform build from windowing" 0))
  (5 ("Be able to build the game server using only jazz and maybe platform" 0))
  (3 ("Use ##current-user-interrupt-handler to correctly handle ctrl-c in both the build system process and it's subprocesses" 0))
  (0)
  (2 ("NOTES" 2))
  (3 ("To build Gambit under VisualStudio C++, -D___LIBRARY has to be defined for _gambcgsi.c and _gambcgsc.c" 0))
  (0)
  (0)
  (1 ("Kernel" 1))
  (0)
  (2 ("PUBLIC" 2))
  (3 ("Modify the kernel so it uses SHA-1 instead of file modification times everywhere. This is why installing a binary release and doing make at the moment recompiles some files" 0))
  (0)
  (2 ("HIGH" 2))
  (3 ("Clean header.scm with Marc Feeley's help (MF) (GC)" 0))
  (3 ("It is very important for performance and robustness of the debugger to improve the locking mecanism used by load-unit so it only locks out a thread if the unit it wants to load / walk is actually on the load / walk stack vs the current approach that uses a global lock. Note that this is probably a very simple change but it has to be done carefully as it implies making sure that every structure used by the code walker / loader is thread safe." 0))
  (3 ("Command line parameter to specify preferences paths (jazz jedi ...) (!?) (GC)" 0))
  (0)
  (0)
  (1 ("Platform" 1))
  (0)
  (2 ("HIGH" 2))
  (3 ("Find memory leaks in FFI packages. (JLR)" 0))
  (3 ("We should investigate every platform function beginning by \"(When handle\" for logic errors. (JLR)" 0))
  (3 ("exact->inexact and inexact->exact. (JLR)" 0))
  (3 ("Implement a standard FFI construct to get the c constant value. (c-constant type name . c-name) (JLR)" 0))
  (0)
  (2 ("MEDIUM" 2))
  (3 ("Decide if we are going to keep the platform-... naming scheme or if we are going to rename all that to better names (JLR)" 0))
  (3 ("Reduce the number of methods in platform packages and Window class. Remove old ones, merge others. (Ex. get-root-owner, get-front-frame,  get-top-window) (get-bounds, get-rectangle, set-bounds, etc.) (JLR)" 0))
  (3 ("Check platform packages for internal c-functions that could be written as c-code (JLR)" 0))
  (3 ("Implement play-sound in X11 and Carbon. (JLR)" 0))
  (0)
  (0)
  (1 ("Cairo" 1))
  (0)
  (2 ("HIGH" 2))
  (3 ("Need to fix the Cairo text truncation glitch (seems to only happen on Windows)" 0))
  (0)
  (2 ("MEDIUM" 2))
  (3 ("Check if it could be better to use native bitmaps instead of pixman surfaces in cairo. (JLR)" 0))
  (3 ("Fix the cairo memory leaks. Add a deallocator to our structures and call foreign-nullify in the with special form." 0))
  (4 ("This will probably unify with and with-closed" 0))
  (4 ("One thing that is very nice with foreign release functions (and wills!?) is that we do not need to wrap the expansion of with inside an unwind-protect (not 100% sure about this as sometimes, having the object closed in the dynamic scope is an important part of a function's semantics...)" 0))
  (0)
  (0)
  (1 ("Carbon" 1))
  (0)
  (2 ("MEDIUM" 2))
  (3 ("Investigate why the carbon port is so slow. (JLR)" 0))
  (0)
  (0)
  (1 ("Windows" 1))
  (0)
  (2 ("MEDIUM" 2))
  (3 ("Find how to fix the ascent hack in Windows. (Use freetype in windows?) (JLR)" 0))
  (3 ("Native Windows save-as dialog is buggy and can save as x.gLevel. Can reproduce by saving as to x.scm" 0))
  (0)
  (0)
  (1 ("X11" 1))
  (0)
  (2 ("PUBLIC" 2))
  (3 ("Figure out why X11 double-buffering performance is slugish on Gentoo (JLR)" 0))
  (3 ("Find a good approach to implement Application and Windows activation (JLR)" 0))
  (3 ("Implement show-noactivate and hide-noactivate (JLR)" 0))
  (3 ("If I open a menu and switch to Safari the menus will go on poping!" 0))
  (3 ("On mac, open an xterm, close it -> error in Jedi" 0))
  (3 ("Implement dialog modality" 0))
  (0)
  (2 ("HIGH" 2))
  (3 ("Modify set-cursor to have the player that is needed by X11. How do you do something like setting the cursor at application startup when there is no window on X11?" 0))
  (3 ("Can we implement palette so that they float over standard windows?" 0))
  (0)
  (2 ("MEDIUM" 2))
  (3 ("Check if it would be possible to receive mouse events only when we have the focus (JLR)" 0))
  (0)
  (2 ("NOTES" 2))
  (3 ("It would be very interesting using the message pump to identify exactly which messages are direct callbacks under Windows" 0))
  (0)
  (0)
  (1 ("Paint" 1))
  (0)
  (2 ("HIGH" 2))
  (3 ("Remove the lh lv sh sv sc sc? parameters to the painting algorithm (SLC)" 0))
  (0)
  (2 ("MEDIUM" 2))
  (3 ("Implement the CSS border-collapse concept" 0))
  (0)
  (0)
  (1 ("Jedi" 1))
  (0)
  (2 ("PUBLIC" 2))
  (3 ("Add a project with run and build methods for jazz.sample.fib without which it is not intuitive how to try it (same for every other project that have the same need)" 0))
  (0)
  (2 ("HIGH" 2))
  (3 ("Alt-S and Alt-R should have their own cache distinct from the search dialog so that doing one or the other with an empty selection uses the cache if available." 0))
  (3 ("Fast F8 + click -> bus error" 0))
  (4 ("The error is a close-popups with player = {}" 0))
  (3 ("Try and understand the heratic behavior of time" 0))
  (4 ("Try it with something like fib with no UI" 0))
  (4 ("Try it on all OS" 0))
  (3 ("We need a fast boot, up to login dialog (GC)" 0))
  (3 ("Why is the definition not centered (like ctrl-l) when we do Toplevel F12 (GC)" 0))
  (3 ("Should use a SHA-1 when needs reload tests to play nicelly with Git" 0))
  (3 ("Have a nice shortcut for add-to-history to replace emacs style marking" 0))
  (3 ("F8 should always reselect the mouse-view if more specific than the one currently highlighted" 0))
  (3 ("Convert any palette that would be better of beeing a frame like the class-browser" 0))
  (3 ("Find a better naming for the *-Tool classes and rename docked by tool" 0))
  (3 ("There is a bug if I open a menu, do F8 and then right-click an item and then do an action. This bug only appears on X11 because Windows will not error on handle = {}" 0))
  (3 ("Look at the behavior of Jedi with dual monitors" 0))
  (3 ("In home workspace: c-m-F, something, enter, c-m-S -> focus not correct (GC)" 0))
  (3 ("I got an \"Unable to destroy 'picker\" error after pressing enter in the login dialog (New was selected I think)" 0))
  (3 ("Find a solution to the offscreen beeing destructed / recreated on every workspace switch because it is associated with the root view. Maybe have the root view delegate offscreen management to the view-player!?" 0))
  (3 ("Implement assertions in Jazz and change the error test in install-child by an assertion." 0))
  (3 ("The Show Terminal menu item should become Show Terminal and Hide Terminal." 0))
  (3 ("Add gameserver to the Jedi dependencies and add some output to its banner about what port it's listening on." 0))
  (0)
  (2 ("MEDIUM" 2))
  (3 ("It would be nice to load the workbench partially even when there are errors. For that we will need to have a way to wrap a catch around form actions but *not* recursively (want the errors reported at the Workbench.jml level). Then display the component in error with a distinct icon and then maybe even support double-clicking to edit the error spot by having instantiate do a read-source!" 0))
  (3 ("Move mouse over a tool so that it is highlighted, launch an app with F5, come back to Jedi -> the button is still highlighted" 0))
  (3 ("Set current directory to a folder, remove that folder and quitting jedi errors!" 0))
  (3 ("Add a repository management window" 0))
  (3 ("Should annotate new files New, New1, New2, ..." 0))
  (3 ("With many open windows the Window menu can be too big and close as soon as it opens. Either put then together in submenus or have a dialog when >= 10" 0))
  (3 ("Put offscreen? = false and take a *really* good look at all that gets painted. For instance when resizing the workbench splitter between the wb and the stage, very strange things get painted" 0))
  (3 ("Adding sha-1 to catalogs instead of file modification time would be nice" 0))
  (3 ("When compiling lets says jazz.catalog, the merge of declarations generates an error because for instance the autoload of X that was already present is added again and autoloads are not eq?" 0))
  (3 ("Adding a file-modification-time column to search-results would enable to easily find some recent change like \"where did I add those annoying debug\"!" 0))
  (3 ("Maybe one day move up the text logic to view which is clearly a generic algo of box layouting very similar to css" 0))
  (3 ("For embeding views in texts, we need a rendering algo like html that goes botton-up as well as top-down" 0))
  (3 ("By spliting the first column of the bindings manager into context / action it would become possible to sort by action to find a specific action like goto-line" 0))
  (3 ("The bindings format needs to be improved as it forces us to unbind left-arrow to bind ctrl-a!" 0))
  (3 ("If from an external app like the Windows explorer I click on the jedi toolbar, jedi doesn't activate. This is due to mouse-activate? = #f for toolbars. Need to reinvestigate the role of this method" 0))
  (3 ("Road to having a palette with all the walk errors/warnings" 0))
  (4 ("Need to catch all problems in the walk phase before the emit" 0))
  (5 ("Should do type inferences in the walk phase as the interpreter will need them too anyways" 0))
  (3 ("A nice feature would be to color inner definitions by progressively augmenting their color's darkness in proportion to their depth." 0))
  (3 ("Could also color expression commented code by augmenting it's color's gray component." 0))
  (3 ("Finish the expression based search." 0))
  (3 ("Click a header with the mouse middle button and the header doesn't come up after the mouse is released." 0))
  (3 ("Resizing the rightmost header has invalidation problems." 0))
  (0)
  (0)
  (1 ("Debugger" 1))
  (0)
  (2 ("PUBLIC" 2))
  (3 ("Implement correct filled / border red color management for the workspace icon" 0))
  (3 ("Reimplement the eval in <selected frame>" 0))
  (3 ("Add support for explicitly creating a thread's console" 0))
  (3 ("Console tab should become a combo with menu items highlighting problems / visits" 0))
  (3 ("A new console's button should be highlighted in red" 0))
  (3 ("Make the indicators work nicelly with multiple threads" 0))
  (3 ("Replace the temporary fix of (sleep .1) in the threads view with a clean callback from the debuggee" 0))
  (3 ("Need a clean solution to repl threads. At the moment, if an exception occurs not from an eval, we get more than one repl thread reading at the same time" 0))
  (3 ("Find a solution to exceptions occuring in the read or print stage of the read-eval-print-loop" 0))
  (0)
  (2 ("HIGH" 2))
  (3 ("Complete the Gambit debugger (MF) (GC)" 0))
  (3 ("Could we use Gambit's ##exception->locat to show / edit every exception even read errors" 0))
  (3 ("Add sourcification to console input" 0))
  (3 ("Add TCP/IP exceptions to Gambit and have the debugger catch those to cleanly detect problems" 0))
  (3 ("Make the inspector remote aware and then make variables inspectable once again in the variables view" 0))
  (3 ("Use Gambit's new \"need\" parameter to read-substring and read-subu8vector" 0))
  (3 ("Make sure exceptions capture the real continuation (probably by using the continuation capture in a tail-call position) and have the exception view use it to edit the exception" 0))
  (0)
  (2 ("MEDIUM" 2))
  (3 ("Very interesting idea to pretty-print results in the repl..." 0))
  (3 ("If the debugger is exited while a remotely debugged app had an error in the primordial thread, the app's event loop should be restarted somehow" 0))
  (3 ("Add command-line arguments to set product icon/title so the user can launch distinguished instances of a same process code" 0))
  (3 ("Debuggers must integrate with" 0))
  (4 ("console" 0))
  (4 ("stack" 0))
  (4 ("variables" 0))
  (4 ("break points" 0))
  (4 ("tooltip debugging" 0))
  (4 ("memory inspector" 0))
  (3 ("Gambit" 0))
  (4 ("support for gambit records in the inspector" 0))
  (0)
  (0)
  (1 ("Emacs" 1))
  (0)
  (2 ("HIGH" 2))
  (3 ("Incremental search" 0))
  (4 ("c-s c-s to search again will beep for each character if not found" 0))
  (4 ("reset positions when doing a c-s c-s" 0))
  (4 ("wrap around when searching" 0))
  (0)
  (0)
  (1 ("Walker" 1))
  (0)
  (2 ("HIGH" 2))
  (3 ("Should not keep the full form-src in the syntax tree but just the locat info or maybe a source with the code emptied" 0))
  (3 ("Finish implementing the inconsistant dispatch error message for every case" 0))
  (3 ("Can sourcifications be used with Jazz inline functions / methods !?" 0))
  (3 ("Modules should keep the walk-problems for later consultation and display" 0))
  (4 ("has-warnings?" 0))
  (4 ("has-errors?" 0))
  (3 ("(set! (or pivot (and selection (car selection)))) will crash the walker" 0))
  (0)
  (2 ("MEDIUM" 2))
  (3 ("Implement access rights to declarations" 0))
  (3 ("At some point i should start looking at the generated c code for my typical code" 0))
  (3 ("(in p (class X ... (definition some-x (new X)))) should generate a runtime error like Class X not fully loaded" 0))
  (3 ("Because specifics don't have associated declarations, walk error in them get wrongly reported as beeing in their parent. Using the generic declaration is not correct as it will create illegal access problems. I will probably have to create dummy specific declarations or maybe this is yet again a macro problem that has to be solved with the complete macro solution..." 0))
  (3 ("Looking at how to implement the enumeration macro cleanly make me think that a declare special form is to moving alot of code from the walker to high level macros" 0))
  (4 ("define" 0))
  (4 ("declare" 0))
  (4 ("annotate (!?)" 0))
  (4 ("relocate (!?)" 0))
  (0)
  (4 ("(definition D expr)" 0))
  (4 ("(declare D <Definition-Declaration>" 0))
  (0 ("      (define D" 0))
  (0 ("        expr))" 0))
  (0 ("  " 0))
  (4 ("maybe definitions could even know their declaration which would unify the duplication between the 2" 0))
  (3 ("The optimisation of having a language construct that splices a slot's content at the end of the object's vector could be correct i think if limited to final classes..." 0))
  (3 ("Implement partial module access like importing jazz.platform.windows and then using (WinUser.RegisterClass ...)" 0))
  (0)
  (0)
  (1 ("Language" 1))
  (0)
  (2 ("HIGH" 2))
  (3 ("Dates generated in snapshot names are strange" 0))
  (3 ("Implement dependencies management for imported symbols, e.g. when a symbol is moved from one module to another one and some other modules that where referencing that symbol where already compiled pointing to the old module" 0))
  (0)
  (2 ("MEDIUM" 2))
  (3 ("Implement hierarchical module lookup so that it is possible to have a/b/c.jazz or a.b.c.jazz or a/b.c.jazz. Using that compile to a flat a.b.c.o1 so that gambit's rule of unique module names is not violated" 0))
  (3 ("When axises are working, simplify the code and make sure it is well optimized for the case of rows with not alot of sons" 0))
  (3 ("I should be able to clean *alot* of not directly related code that i was forced to put inside classes because i didn't have generics. A class that needs big time cleanup like this is Component" 0))
  (3 ("Why reimplement queues in Jazz? Probably just add access to them for Jazz" 0))
  (3 ("Not allocate void slots" 0))
  (3 ("Find a good and elegant solution to the register-autoclass patch" 0))
  (3 ("Think about a naming convention (maybe CL's *symbol*) that would distinguish between global variables and class names that make code like (f~ X) hard to understand" 0))
  (3 ("Detect if a user does a (form ...) without the initial <install>" 0))
  (3 ("If a toplevel doesn't specify an explicit size, we have an update bug" 0))
  (3 ("Why not have exactly like we have delimited strings, a syntax for binary objects that would enable images or ... to be saved in Jazz files like JML databases." 0))
  (4 ("Not a very scalable solution but very nice for small to medium size databases" 0))
  (3 ("Investigate if very generic and simple to implement inlined functions could be implemented by a simple macro expansion expanding to a syntax-case that would take care of lexical captures." 0))
  (3 ("Add validation code for methods for parameters with an enumeration type. This could be very usefull for all those methods receiving symbols which is nice but not very robust." 0))
  (0)
  (0)
  (1 ("R4RS" 1))
  (0)
  (2 ("MEDIUM" 2))
  (3 ("r4rstest.scm" 0))
  (3 ("f1.0 notation" 0))
  (3 ("internal defines" 0))
  (3 ("quasiquote for vectors" 0))
  (3 ("=>" 0))
  (3 ("semantics of declarations that are bound only after beeing defined vs jazz which binds declarations accross the whole module. another incompatibility that is related is that scheme code can define the same variable multiple times -> a possible solution would be to implement scheme semantics for define and jazz semantics for definition which seems very consistant with both names" 0))
  (0)
  (0)
  (1 ("Types" 1))
  (0)
  (2 ("MEDIUM" 2))
  (3 ("With a restriction type we could have a type like fxstring that is a string that guaranties that its length is bounded in the range of fixnums!?" 0))
  (3 ("Put back Rect as fx and make another class for number (or the opposite)" 0))
  (3 ("Because I want to do all type casting at call site for natives, I will need to always call the lowlevel ## version of the procedure" 0))
  (3 ("Ummm I think that saying car's signature is <pair:object> is wrong. Really, car's signature is <object:object> and throws an error if its parameter is not a pair. The <pair:object> is really a compile time specializer!" 0))
  (3 ("Specialize iterate and accumulate on basic classes" 0))
  (3 ("Decide if it is correct to only annotate the root method (annotations in a derived method should report an error) or maybe validate that the derived annotations are the same!?" 0))
  (3 ("In a call like (f (/ a b)) where f is <fl:fl> we need to find some way of not generating a rational that will just be costly converted to a flonum" 0))
  (0)
  (2 ("DOC" 2))
  (3 ("Type casting is done :" 0))
  (4 ("for native, inline and specialize at call site" 0))
  (4 ("for definitions, methods, ... and definition site" 0))
  (0)
  (0)
  (1 ("Optimize" 1))
  (0)
  (2 ("MEDIUM" 2))
  (3 ("optimize the interpreted caching would seem to be very critical" 0))
  (4 ("ahhh not really... why does it get always called is the right question!" 0))
  (4 ("look with marc at how can jazz.cache-dispatch-interpreted appear in the statprof report" 0))
  (0 ("    when it is even called! is it because of how we set! the dispatcher that gambit gets mixed up?" 0))
  (0)
  (0)
  (1 ("Interpreter" 1))
  (0)
  (2 ("MEDIUM" 2))
  (3 ("Determine the exact redefinition rules" 0))
  (4 ("Jazz -> Blues -> C++ -> Compiled Code" 0))
  (4 ("Jazz -> Blues -> Interpreted Code" 0))
  (3 ("Policies" 0))
  (4 ("Debug" 0))
  (4 ("Release" 0))
  (4 ("Distribution" 0))
  (3 ("Actions" 0))
  (4 ("add slot" 0))
  (4 ("redefine slot" 0))
  (4 ("remove slot" 0))
  (4 ("add method" 0))
  (4 ("redefine method" 0))
  (4 ("remove method" 0))
  (4 ("modify visibility" 0))
  (4 ("modify virtual" 0))
  (4 ("change slot -> definition" 0))
  (4 ("change definition -> slot" 0))
  (0)
  (0)
  (1 ("JRM" 1))
  (0)
  (2 ("MEDIUM" 2))
  (3 ("An interesting concept is to extend the RMI concept to inter-thread communication which would result in calling a thread connector through a proxy. What is nice is that the thread could be included in the IOR and the call be made directly even from another process. On the other hand it is very heavy to have to always marshall when calling in process between threads... We will see when the remote debugger implements the concept directly to support multi-thread debugging..." 0))
  (3 ("Une idee fort interessante est l'implementation du dispatch rmi et autres par:" 0))
  (0 ("  [X.foo x y z] qui est equivalent a" 0))
  (0 ("  (Dispatchable.dispatch x 'X.foo y z)" 0))
  (0 ("  (class IOR" 0))
  (0 ("    (method (dispatch ...)" 0))
  (0 ("      (rmi-call ...)))" 0))
  (0 ("  Ca correspont a une implementation tres simple du dispatch rmi via un dynamic invoke (comme dans la nouvelle version de Java)" 0))
  (0)
  (0)
  (1 ("Doc" 1))
  (0)
  (2 ("HIGH" 2))
  (3 ("It is very important to document for each toplevel module at least it's level of completion. Something like" 0))
  (4 ("commercial quality" 0))
  (4 ("not yet '' but very usable" 0))
  (4 ("experimental" 0))
  (4 ("..." 0))
  (0)
  (0)
  (1 ("Website" 1))
  (0)
  (2 ("PUBLIC" 2))
  (3 ("Tutorials" 0))
  (3 ("Documentation" 0))
  (4 ("Generate signatures from public methods" 0))
  (0)
  (0)
  (1 ("Wiki" 1))
  (0)
  (1 ("Snow" 1))
  (0)
  (2 ("MEDIUM" 2))
  (3 ("Can we work around the fact that the snow package* form doesn't enclose the whole file content?" 0))
  (3 ("Need a solution to snow's name including the version and having periods in it" 0))
  (3 ("The snow packages need to be jazz modules to include any kind of scheme code but they also need to be jazz modules for optional / named parameters and name scoping..." 0))
  (0)
  (0)
  (1 ("Termite" 1))
  (0)
  (2 ("MEDIUM" 2))
  (3 ("Not clear in documentation that there is a primordial process that is not the direct result of a spawn" 0))
  (3 ("node-init is not in the doc" 0))
  (3 ("Does termite implement message passing in a way that no tcp/ip is used for intra-node calls?" 0))
  (3 ("Look at Guillaume Germain's Dynamite web server!?" 0))
  (3 ("So is make-node to be used both for the actual node and for remotes and only the actual should call node-init ?" 0))
  (3 ("Everything i try crashes. There is no error validation? (node-init (current-node)) for instance" 0))
  (3 ("What does guillaume think about an RMI layer on top of termite" 0))
  (0))}
