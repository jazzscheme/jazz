{Formatted-Text
 formats:
 ({Format Base}
  {Format Heading1}
  {Format Base left-margin: 16 bulleted?: #t}
  {Format Base left-margin: 48 bulleted?: #t}
  {Format Base left-margin: 0 bulleted?: #f}
  {Format Base left-margin: 32 bulleted?: #f}
  {Format Base left-margin: 80 bulleted?: #t}
  {Format Heading3}
  {Format Heading2}
  {Format Heading4})

 styles:
 ({Text-Style Base}
  {Text-Style Heading1}
  {Text-Style Heading3}
  {Text-Style Heading2}
  {Text-Style Heading4})

 paragraphs:
 ((1 ("Todo" 1))
  (0)
  (0 ("GC  : Guillaume Cartier (gcartier@jazzscheme.org)" 0))
  (0 ("SLC : Stephane Le Cornec (coleste@videotron.ca)" 0))
  (0 ("LJG : Louis-Julien Guillemette (guillelj@iro.umontreal.ca)" 0))
  (0 ("JLR : Jeremie Lasalle Ratelle (pouexmachinax@gmail.com)" 0))
  (0 ("MF  : Marc Feeley (feeley@iro.umontreal.ca)" 0))
  (0 ("AS  : Alex Shinn (alexshinn@gmail.com)" 0))
  (0)
  (2 ("Look with Marc as why the ratio of _io.o to _io.scm is 1.6 and the ratio of kernel/runtime/module.o to module.scm is 3.1" 0))
  (2 ("It is possible for a frame variables to contain a Gambit absent object (MF)" 0))
  (2 ("Relook at the problem that ~ validation is only done in debug safety and so can lead to obtuse bugs and loss of time" 0))
  (0)
  (0)
  (1 ("Build" 1))
  (0)
  (9 ("HIGH" 4))
  (2 ("Separate optimize? into proper-tail-calls and optimize-dead-local-variables for users wanting better control. We need to refactor the code for all the build settings that are all over the place" 0))
  (2 ("Fix the jazz.setup-build patch of generating all the package (was to fix concurrent access from the build processes)" 0))
  (2 ("To build a shared library for a package we will need some kind of manifest to know the order of the included modules. This manifest will probably be the module #1 in the list of linked modules. With this it seems natural to try and unify this with the .o1 / .mnf used for compiled modules! Could probably be used to build shared libraries at any desired level of granularity" 0))
  (3 ("We will probably need to do the same job that gambit does of generating a .o2 when there is already a .o1 present (maybe add this directly to gambit!?)" 0))
  (2 ("We'll probably need to have separate compile dependencies and runtime dependencies. For instance, most packages only have compile dependencies to jazz but many runtime dependencies" 0))
  (2 ("interpret-kernel? should really be make kernel-interpreter that we can call without having to build the kernel :-)" 0))
  (0)
  (9 ("MEDIUM" 4))
  (2 ("Modify the parallel build so the controller passes the module-names to compile instead of packages so that we get parallelisation at the module level" 0))
  (2 ("Implement gsc update" 0))
  (2 ("If I move a.b.c._c.jazz to a.b.c.jazz then a.b.c will always be compiled even if I do many makes" 0))
  (2 ("In jazz.compile-source, check that the existing .o can be re-used to generate the .o1, rather than compiling the .o over again (LJG)" 0))
  (0)
  (0)
  (1 ("Kernel" 1))
  (0)
  (9 ("MEDIUM" 4))
  (2 ("Fix explicit exports. In time.exports, putting current-time as an explicit error caused problems in jazz.lookup-accessible/compatible-symbol as binding was a jazz.Export-Reference..." 0))
  (2 ("Improve the locking mechanism used by load-module so it only locks out a thread if the module it wants to load / walk is actually on the load / walk stack (needs some brainstorming to make sure it\u2019s the right approach)" 0))
  (2 ("Should not keep the full form-src in the syntax tree but just the locat info or maybe a source with the code emptied (note that for IDE tools it might be interesting to have the syntax tree point to the source locations)" 0))
  (2 ("Is there something we can do about not compiled files that because of that get searched over all the binary packages" 0))
  (0)
  (0)
  (1 ("Language" 1))
  (0)
  (9 ("HIGH" 4))
  (2 ("Modify form to generate code that uses the imports" 0))
  (3 ("Note that an approach to use module-ref doesn't work as we need access to the private table. It will also make it so the errors occur at walk time" 0))
  (3 ("Scrap autoclass, module autoloads, the global registry of autoloads and everything else" 0))
  (3 ("Add support for some (import ...) for in .jml files!? For user files as they are templated, it is very fragile. Probably better that it is the caller responsibility to somehow inform the jml instantiater of the available imports. After reflection, the right approach is probably more to have explicit <a.b.c.X> in the form. These explicit names will be created by the designer that already has the info when it receives a Design-Model d&d" 0))
  (2 ("Find a clean way of giving direct access to user's code to key functions like break, inspect, ... one approach is to define them in jazz and have them redirect to the module by using module-ref (this creates import conflicts...) (SLC)" 0))
  (2 ("Optimize object creation with a vector to copy of every constant slot initializer" 0))
  (2 ("Should we not also support autoload in imports!?" 0))
  (2 ("Autoload functions should be in the file that exports them!" 0))
  (2 ("If I ctrl-enter to (method (test) ) in my profile and then correct the error by adding the missing override and ctrl-enter again I get another error" 0))
  (0)
  (9 ("MEDIUM" 4))
  (2 ("It would probably be useful to have a similar syntax for a.b.c.field that uses module-ref, maybe a.b.c~field (for example to not error on loading the user profile if the field is not found)" 0))
  (2 ("Brainstorm with Marc how to solve the problem of changing a module m that then breaks the modules using it and that are compiled. I think the only clean and efficient solution is to recompile the using modules not forgetting about transitivity. It could also be a dynamic importing or linking phase (kinda like a big lexical let around a module with a variable for every referenced external symbol (how can we do this efficiently)" 0))
  (2 ("I should be able to clean *alot* of not directly related code that i was forced to put inside classes because i didn't have generics. A class that needs big time cleanup like this is Component" 0))
  (2 ("Redefining a slot in a subclass should error" 0))
  (2 ("Safe code with facade : it's easy compiling some modules in debug and some in release but debug code can pass bad values to release code. you kinda need a safe facade and debug code calls the safe facade. kinda jazz.language.safe" 0))
  (2 ("I think Stephane's add to references code should only do it for private access" 0))
  (2 ("Why BH?? when syntax-case is strictly more general than syntax-rules (it can easily implement syntax-rules), it gives access to arbitrary transformations and it could give us potentialy compatibility with R6RS code" 0))
  (2 ("A constant syntax for tables would be nice for the module-ref hashtable implementation (Gambit)" 0))
  (2 ("Find a solution to load/compile that do not validate the module structure like jazz.read-toplevel-form does" 0))
  (2 ("Detect collisions (class Y extends X implements (I J)) -> X.foo vs I.foo vs J.foo" 0))
  (2 ("Detect duplicate methods without blocking ctrl-enter" 0))
  (0)
  (0)
  (1 ("Memory" 1))
  (0)
  (9 ("HIGH" 4))
  (2 ("The uber solution for a memory profiler is to enable each object to register a method that recurses all its dependent objects. Amongst other things, this will enable a profile-memory to return only the non-dependent objects with their total size" 0))
  (0)
  (0)
  (1 ("Format" 1))
  (0)
  (9 ("MEDIUM" 4))
  (2 ("Optimize format by making it a macro (posibly only when in head position) or look at other approaches with more optimal performance (Ken Dickey is an expert on format) (could use something like identifier-macro in syntax-case to implement the non-head position format)" 0))
  (2 ("To optimize format we will probably need to add the ability to allocate static memory at the toplevel definition and then we can use it to eliminate the dispatch and literal toplevel symbols" 0))
  (2 ("Brainstorm with Alex Shinn the possibility to integrate fmt in Gambit / Jazz. Is dsp as efficient as display (e.g. doesn't create a format context?)" 0))
  (0)
  (0)
  (1 ("Graphics" 1))
  (0)
  (9 ("MEDIUM" 4))
  (2 ("Performance" 0))
  (3 ("Replace exact->inexact and inexact->exact calls" 0))
  (2 ("Fix the Cairo text truncation glitch" 0))
  (3 ("Maybe start work on integrating Pango" 0))
  (2 ("Implement the CSS border-collapse concept !?" 0))
  (0)
  (0)
  (1 ("Platform" 1))
  (0)
  (9 ("HIGH" 4))
  (2 ("Validate memory leaks in FFI packages" 0))
  (2 ("The memory of Jedi is constantly going up even when the app is not current" 0))
  (2 ("Finish the new workspaces with separate OS windows" 0))
  (0)
  (9 ("MEDIUM" 4))
  (2 ("Add a combo box in file chooser listing all aliases for quick navigation" 0))
  (0)
  (0)
  (1 ("JRM" 1))
  (0)
  (9 ("MEDIUM" 4))
  (2 ("Could JRM be used for communication with making the protocol into a separate entity where we could define distinct protocols for a Jazz client, a Qt client or the Web client" 0))
  (0)
  (0)
  (1 ("Component" 1))
  (0)
  (9 ("MEDIUM" 4))
  (2 ("For various needs like the preferences, it might be useful to have a notation in forms to replace the children. It might even be possible to keep the children around and do some cherry-picking with ~ !?" 0))
  (0)
  (0)
  (1 ("Designer" 1))
  (0)
  (9 ("HIGH" 4))
  (2 ("Unify Domain, Property, Value-Row, ... (SLC)" 0))
  (3 ("Think of the MVC needs" 0))
  (3 ("Replace value rows with domains" 0))
  (3 ("The domains knowing their editor is broken. Clearly it is up to the user's code to instantiate the needed editor" 0))
  (0)
  (0)
  (1 ("UI" 1))
  (0)
  (9 ("HIGH" 4))
  (2 ("Need to implement a generic and robust mecanism for view changing size influencing their parent's layout. One thing that needs to be generalized is the scrollee in the sense that all this should be done even when not in a scroller!" 0))
  (3 ("Maybe child-sized (or even better an abstract name like layout)" 0))
  (3 ("Scrollers and certain layouts do nothing" 0))
  (2 ("Finish the UI drawing algorithm. That should fix all the damn flickers when auto-completing" 0))
  (2 ("Should validate somehow shortcut conflicts at the same level, e.g. 2 text actions having the same shortcut while it is correct for a focus action to shadow an application action" 0))
  (0)
  (9 ("LOW" 4))
  (2 ("In Jedi, click on the Compare Files icon, drag and mouse up over the combo box next to it -> error." 0))
  (2 ("Conclude with the cairo missing pixel bug that I put CAIRO_HINT_STYLE_NONE to fix it but that does a less nice rendering of certain text like \"Jedi\" in Label font. Also, need to verify how the hint style behaves on Mac and Linux" 0))
  (0)
  (0)
  (1 ("Tree" 1))
  (0)
  (9 ("MEDIUM" 4))
  (2 ("Merge cell in trees (draw, selection, drag selection, keyboard navigation, ...)" 0))
  (2 ("Need to fix the bugs in hide/show-rows that where patched by doing an invalidate-view" 0))
  (0)
  (0)
  (1 ("Workspace" 1))
  (0)
  (9 ("HIGH" 4))
  (2 ("Fix acquire crash" 0))
  (3 ("I think it is due to the set-root done that leave some views in an invalid state, e.g. no view without a root should have a player" 0))
  (2 ("Complete the caption work" 0))
  (3 ("I think we should go back to a uniform root system (maybe have the root always be a Host-View) to be able to delegate?! This would also make easy using the old 'pure-rect' windows with a Jazz caption" 0))
  (0)
  (0)
  (1 ("IDE" 1))
  (0)
  (9 ("HIGH" 4))
  (2 ("Finish the dead code finder and use it to clean the code" 0))
  (2 ("Implement an heuristic to find definitions & methods that should really be inner defines" 0))
  (2 ("To support powerful codewalk based tools, can we find the declaration from a buffer's cursor position (use the source info associated to declarations)" 0))
  (2 ("Improve how references are found on shift-F12 that causes for instance problems on : (SLC)" 0))
  (3 ("Recursive functions -> highlights the function instead" 0))
  (3 ("(register-autoclass X) -> highlights (class X) instead" 0))
  (2 ("At the same time as the above, make it so all references are highlighted (maybe select the declaration containing the references and highlight the references!?) (SLC)" 0))
  (2 ("It would be nice to formalize the using a stable Jazz to debug a 'work' one. Actually ~/jazz should always be stable! and we should have another repo like jazz_work. With that setup we could even ship Jazz with a standard Jazz user that and that setup and only depends on a JazzWork alias that by default points to Jazz! To only missing thing for all that is to be able to import the JazzWork projects into the Jazz profile workbench and for this projects should become pure jml (we can always add some project-unit property to associate code to it if we ever need to)." 0))
  (0)
  (9 ("MEDIUM" 4))
  (2 ("Make reload-process work on Jedi" 0))
  (3 ("Problem comes from the console being closed while we remain attached to the debugger" 0))
  (2 ("Finish forward-invoices" 0))
  (3 ("Do show-arguments by searching in the module's invoices (SLC)" 0))
  (2 ("The enter-import method should be generalized into something like (enter-form 'import) (already done?) (SLC)" 0))
  (2 ("Plan to implement partial evaluation of a module (not sure it's a good idea)" 0))
  (3 ("Add a special form 'in' enabling (in a.b.c (in X (method (foo) ...))) doing the same behavior as ~ in forms" 0))
  (6 ("With that, evaluating a method inside a not yet defined class will correctly error" 0))
  (3 ("It should then be possible to emit the code of only the foo node" 0))
  (3 ("For this to work, everything that is kept in the module like the literals, will have to either go in the walker or inside the declaration itself and be emited as a local let around the declaration" 0))
  (2 ("Would be nice to generalise the \"stub\" code in Lisp-Parser and use it for instance to display define F12 as define (form) and maybe also improve F12 on core classes like jazz.Class-Declaration" 0))
  (2 ("Cannot evaluate (anymore?) native forms in scheme files" 0))
  (2 ("Quit Jedi before the catalog thread has finished doing its job can crash" 0))
  (0)
  (9 ("LOW" 4))
  (2 ("Finish toggle terminal by making it cross-platform" 0))
  (2 ("Would be nice to have some way on unresolved symbols to ask for the imports needed to resolve those" 0))
  (2 ("Should context-menu end picker before poping the menu?" 0))
  (2 ("Try and understand the strange behavior of the time special-form" 0))
  (0)
  (0)
  (1 ("Debugger" 1))
  (0)
  (9 ("URGENT" 4))
  (2 ("Debuggee should remain functional even when the main thread is not responding (example an ADO request to an inexistant database that is timing out)" 0))
  (2 ("Find a solution to exceptions occurring in the read or print stage of the read-eval-print-loop" 0))
  (3 ("We have the same problem for errors occuring in the 'print part of the read-eval-print" 0))
  (3 ("Should always kill the repl thread (optimize keeping it in certain case when all functional) by closing the repl port and joining on the thread till it's dead" 0))
  (6 ("The exception in the repl thread will then raise an uncaught exception wrapper in the joining thread" 0))
  (2 ("Trap read errors in the Profile so it doesn't land us in the Gambit debugger" 0))
  (2 ("Add support for interrupt and terminate thread" 0))
  (2 ("Add TCP/IP exceptions to Gambit and have the debugger catch those to cleanly detect problems" 0))
  (2 ("Try tcp-client-peer-socket-info to check before key TCP calls if the connection is still live" 0))
  (2 ("Add logic to deduce the process where evaluations should go from the text moniker" 0))
  (2 ("Should really make it so the default input/output port is the jazz console" 0))
  (2 ("Find a solution to reimplement the initialized and destroyed fields which are key to full stability, for example (new Action 'a 'a) crashes the IDE without even going in the Gambit debugger!" 0))
  (3 ("This might be done with no runtime cost by scanning the stack upon handling an exception for calls to initialize and destroy and registering their object as invalid!!? (SLC)" 0))
  (2 ("The auto-selected frame should display its variables even if it's not displaying the source code (SLC)" 0))
  (2 ("It is really annoying that after evaluating a new function, we need to reevaluate the imports in modules that where already importing that module in order to access the new function" 0))
  (2 ("If an error occurs in an eval in a frame (calling eval-within-no-winding) then the error occurs in the eval-within-no-winding continuation and that creates problems" 0))
  (2 ("If a require or import done at the console has an error, then the module has been added to the lib and so every other expansion will try to require / import again making evaluation 2 do the same error which can be very strange!" 0))
  (2 ("Now that Jedi tries to register to a specific port, we need to check if the port isn't already in use which can easily happen if there's another Jedi already running (atm open-tcp-server errors on an already open port on Mac but not on Windows...)" 0))
  (0)
  (9 ("HIGH" 4))
  (2 ("Implement listening on port 44333 by default for Jedi by finding a way to know if port is already in use (maybe by using reuse-address?: #f when calling open-tcp-server)" 0))
  (2 ("Fix that if a process exits using gambit's exit function, the debugger is not notified. We can either use the gambit exit notification functions or use polling to be crash resistent too!?" 0))
  (0)
  (9 ("MEDIUM" 4))
  (2 ("Implement correct filled / border red color management for the workspace icon" 0))
  (2 ("Reimplement the eval in <selected frame>" 0))
  (2 ("Console tab should become a combo with menu items highlighting problems / visits" 0))
  (2 ("A new console's button should be highlighted in red" 0))
  (2 ("Make the indicators work nicelly with multiple threads" 0))
  (2 ("Replace the temporary fix of (sleep .1) in the threads view with a clean callback from the debuggee" 0))
  (2 ("Need a clean solution to repl threads. At the moment, if an exception occurs not from an eval, we get more than one repl thread reading at the same time" 0))
  (2 ("Use Gambit's new \"need\" parameter to read-substring and read-subu8vector" 0))
  (2 ("Finish the jazz.exe console debugger" 0))
  (3 ("Gambit repl channel is basicaly just a mutex + the owner for the banner" 0))
  (3 ("Gambit repl =" 0))
  (6 ("acquire mutex" 0))
  (6 ("read" 0))
  (6 ("release mutex" 0))
  (6 ("eval" 0))
  (3 ("If we try and implement a different mecanism to be able to stay in a certain thread, a potential problem is in the eval starting a thread that errors and doing a join on it -> deadlock" 0))
  (0))}
