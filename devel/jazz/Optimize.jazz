(class Vertex extends Object
  
  (slot x <fl>)
  (slot y <fl>)
  (slot z <fl>))

(classoptimize vertex Vertex)


(class Plane extends Object
  
  (slot foo <fx>)
  (slot bar <fl>)
  (slot origin <Vertex>)
  (slot normal <Vertex>)
  @!?!?!?
  (slot user <scheme-object>))


(make-f64vector 1024)
(define my-planes (make-homogeneous Plane 1024)) -> HEAD plane1 plane2 ...
(define p (homogeneous-ref my-planes 55))
(class-of p)
(get-foo~ p)


PTR subtypep
HEADBODY
            |
ADDR |

32
ADDR ->


container
header
e1 e2 e3 ...
origin

TAG for internal objets

GC cost depends on the nb of references to internal objets


64 bits (48 bits effectifs)


#/C/
struct vertex {
  double x;
  double y;
  double z;
}

struct plane {
  int foo;
  double bar;
  vertex origin;
  vertex normal;
}

void foo() {
  struct vertex v;
  struct plane p;
  
  ...
}
//#
