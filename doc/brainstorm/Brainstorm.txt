[2:45:45 PM] guillaumecartier says: t'es la?
[2:46:01 PM] Stéphane says: o
[2:50:06 PM] guillaumecartier says: http://xmog.com/scrap/show/5
[2:50:13 PM] guillaumecartier says: Why Java (and almost every other programming language) sucks
[2:51:28 PM] Stéphane says: #338364 +(5641)- [X]
<Alanna> Saying that Java is nice because it works on all OS's is like saying that anal sex is nice because it works on all genders
[2:55:02 PM] guillaumecartier says: (f~ x y)
[2:55:23 PM] guillaumecartier says: (JML-Node.process node)
[2:56:50 PM] guillaumecartier says: (class X)

(generic ((X x))
  )
[2:57:08 PM] guillaumecartier says: (class X

  (method (x)
    ))
[2:57:52 PM] Stéphane says: (class X
(class Y
[2:58:22 PM] Stéphane says: (method (x)
(debug x y))))
[2:58:54 PM] Stéphane says: (class X
(class Y
(method (foo)
(debug self-x self-y))))
[2:59:39 PM] Stéphane says: [s self]
[3:00:08 PM] Stéphane says: [s self-y] -> slot s de X
[3:02:49 PM] Stéphane says: (class X
(slot a)
(class Y)
(slot a)
(method (foo)
(let ((a 0))
(debug a [a self])))))
[3:03:18 PM] guillaumecartier says: [a outer]
[3:03:47 PM] Stéphane says: (class X
(slot a)
(class Y)
(slot a)
(method (foo)
(let ((a 0)
(outer 0))
(debug a outer  [a self] [a outer] [a outer self])))))
[3:04:08 PM] guillaumecartier says: [a (get-outer self)]
[3:04:21 PM] guillaumecartier says: [a (get-class self)]
[3:04:45 PM] Stéphane says: [outer self]
[3:05:36 PM] guillaumecartier says: [a (outer: self)]
[3:05:41 PM] Stéphane says: (outer-object self)
[3:06:52 PM] guillaumecartier says: (f x y z)
[3:07:19 PM] guillaumecartier says: (draw Window OS)
[3:07:33 PM] guillaumecartier says: (class Window
  (class OS
[3:08:00 PM] Stéphane says: (class Window
(namespace OS
(method (foo)
[3:08:54 PM] guillaumecartier says: (generic ((OS os))
[3:09:04 PM] Stéphane says: (class Window
(method (foo)
(debug self os)))
[3:09:58 PM] guillaumecartier says: (behavior WindowOS on (Window OS)
[3:10:03 PM] Stéphane says: (class Window
(method (foo)
(debug self os))
(method (baz)
 (foo)))
[3:10:52 PM] Stéphane says: (class Window with-curried (OS os)
(method (foo)
(debug self os))
(method (baz)
(foo)))
[3:10:56 PM] guillaumecartier says: (behavior WindowOS on (Window OS)

   (method (draw)
      [a self.Window]
[3:11:29 PM] guillaumecartier says: draw.Window
[3:11:57 PM] guillaumecartier says: (map Component.name list)
[3:12:11 PM] guillaumecartier says: (map (function (c) (get-name~ c)) list)
[3:13:00 PM] Stéphane says: (map (curry Window.draw on OS) list)
[3:14:39 PM] guillaumecartier says: (generic ((Window window) (OS os))
[3:15:26 PM] guillaumecartier says: (behavior WindowOS on (Window OS)
[3:15:47 PM] guillaumecartier says: (class (Window OS)
[3:16:47 PM] guillaumecartier says: class generic specific
[3:16:58 PM] guillaumecartier says: (behavior (Window)
[3:17:11 PM] guillaumecartier says: (behavior Window
[3:17:48 PM] Stéphane says: class-of
[3:17:50 PM] guillaumecartier says: (behavior (Window OS)
[3:18:21 PM] Stéphane says: (class
(slot a))
[3:19:09 PM] Stéphane says: (class X
(slot a)
(method (foo)))
[3:19:26 PM] Stéphane says: (behavior (X)
(method (baz))
[3:20:08 PM] guillaumecartier says: (behavior B1 on X
[3:20:13 PM] guillaumecartier says: (behavior B2 on X