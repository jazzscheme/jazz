[4:34:53 PM] guillaumecartier says: (definition d val)
[4:35:07 PM] guillaumecartier says: (declare d (new Definition-Declaration)
  (define d val))
[4:36:27 PM] guillaumecartier says: Method-Defintion -> Method-Declaration
[4:38:44 PM] guillaumecartier says: (generic (f (X x) a b c)
[4:39:02 PM] guillaumecartier says: (generic (f (X x) (Y y) (Z z) a b c)
[4:39:29 PM] guillaumecartier says: Scheme
Generic
Jazz
[4:40:15 PM] guillaumecartier says: Generic
  structure
  generic
  specific
[4:40:39 PM] guillaumecartier says: Jazz
  package
[4:41:04 PM] guillaumecartier says: class =
  declare
    structure
    behavior
[4:43:00 PM] guillaumecartier says: class
  structure
[4:43:18 PM] guillaumecartier says: class X
  structure
  behavior (x)
[4:43:24 PM] guillaumecartier says: class X
[4:43:28 PM] guillaumecartier says: class Y
[4:43:33 PM] guillaumecartier says: behavior (X Y)
[4:43:51 PM] guillaumecartier says: (new X)
[4:44:45 PM] guillaumecartier says: (f~~ x y)
[4:45:20 PM] guillaumecartier says: (X) -> methods
(y) -> methods
(X Y) -> methods
[4:46:29 PM] guillaumecartier says: behavior XY on (X Y)
[4:46:55 PM] guillaumecartier says: (behavior on (View LF)
  (draw)
[4:47:46 PM] guillaumecartier says: ~
[4:48:14 PM] guillaumecartier says: (let ((fact (new List-Factory)))
  (List-Factory.put fact x)
  (List-Factory.put fact y)
  (List-Factory.get-output fact))

(let ((fact (new List-Factory)))
  (factory-put fact x)
  (factory-put fact y)
  (factory-get-output fact))

(let ((fact (new List-Factory)))
  (with-alias List-Factory fact
    (fact.put fact x)
    (process.get process)
    (fact.put fact y)
    (fact.get-output fact)))

(let ((fact (new List-Factory)))
  (put fact x)
  (put fact y)
  (get-output fact))
[4:48:30 PM] guillaumecartier says: (let ((fact (new List-Factory)))
  (List-Factory.put fact x)
  (List-Factory.put fact y)
  (List-Factory.get-output fact))
[4:48:36 PM] guillaumecartier says: (let ((fact (new List-Factory)))
  (factory-put fact x)
  (factory-put fact y)
  (factory-get-output fact))
[4:48:48 PM] guillaumecartier says: (let ((fact (new List-Factory)))
  (with-alias List-Factory fact
    (fact.put fact x)
    (process.get process)
    (fact.put fact y)
    (fact.get-output fact)))
[4:48:55 PM] guillaumecartier says: (let ((fact (new List-Factory)))
  (put fact x)
  (put fact y)
  (get-output fact))
[4:50:19 PM] guillaumecartier says: (class X extends Y uses (p q)
(let ((fact (new List-Factory)))
  (put fact x)
  (put fact y)
  (get-output fact))
[4:51:12 PM] guillaumecartier says: (class X extends Y uses (p q)
(let ((fact (new List-Factory)))
  (put~ fact x)
  (put~ fact y)
  (get-output~ fact))
[4:51:29 PM] guillaumecartier says: (draw~~ view lf)
[4:51:51 PM] guillaumecartier says: (draw)
[4:51:59 PM] guillaumecartier says: (draw~ x)
[4:52:40 PM] Stéphane says: (draw~ view)
(draw~ lf)
[4:53:32 PM] Stéphane says: draw~~
[4:55:43 PM] guillaumecartier says: (package drawing

  (method (draw (View v) (LF lf))
[4:55:58 PM] guillaumecartier says: (... uses drawing


  (draw view lf)
[4:56:53 PM] guillaumecartier says: (


  (drawing.draw view lf)
[4:57:13 PM] guillaumecartier says: (


  (draw.drawing view lf)
[4:57:25 PM] Stéphane says: draw.drawing.isaix.com
[4:57:42 PM] guillaumecartier says: draw~drawing~isaix~com
[4:57:59 PM] Stéphane says: draw~~
[4:58:03 PM] guillaumecartier says: draw~package
[4:58:07 PM] guillaumecartier says: draw~
[4:58:15 PM] guillaumecartier says: draw~ ?
[4:58:43 PM] guillaumecartier says: (put~Factory
[4:58:51 PM] guillaumecartier says: put
[4:58:56 PM] guillaumecartier says: put~Factory
[4:59:43 PM] Stéphane says: draw~LookFeel~com~View~com
[5:00:36 PM] Stéphane says: draw~drawing~isaix~com
[5:00:48 PM] Stéphane says: draw~drawing.isaix.com~lf
[5:01:24 PM] guillaumecartier says: draw~com.isaix.drawing
[5:02:36 PM] Stéphane says: draw~LF~
draw~~Drawing
[5:03:37 PM] Stéphane says: (draw lf view)
[5:03:46 PM] Stéphane says: (draw~ lf view)
[5:03:54 PM] Stéphane says: (draw~drawing lf view)
[5:04:22 PM] guillaumecartier says: (put~ fact)
[5:05:56 PM] guillaumecartier says: jazz.draw.drawing
[5:06:02 PM] guillaumecartier says: jazz.drawing.draw
[5:06:26 PM] Stéphane says: (draw~ lf view)
draw
[5:06:44 PM] Stéphane says: jazz.lf
[5:09:51 PM] guillaumecartier says: class X
  structure
  behavior (x)
[5:10:03 PM] guillaumecartier says: class X
  structure
[5:10:06 PM] guillaumecartier says: class Y
  structure
[5:10:14 PM] guillaumecartier says: behavior (X Y)
[5:10:28 PM] guillaumecartier says: (f~~ x y)
[5:10:59 PM] Stéphane says: (put~ fact)
[5:11:43 PM] Stéphane says: (put~Factory fact)
[5:11:45 PM] guillaumecartier says: (vdispatch fact (find-method fact 'put))
[5:11:57 PM] guillaumecartier says: ((vdispatch fact (find-method fact 'put)) fact)
[5:12:53 PM] Stéphane says: (vdispatch draw (find-method fact 'put))
[5:13:55 PM] Stéphane says: (vdispatch (find-method 'put fact) fact)
(vdispatch (find-method 'draw lf view) lf view)
[5:14:59 PM] guillaumecartier says: ( (find-method 'put fact) fact)
((find-method 'draw lf view) lf view)
[5:15:08 PM] Stéphane says: ((find-method 'put fact) fact)
((find-method 'draw lf view) lf view)
[5:16:56 PM] guillaumecartier says: (let ((fact (new Factory)))
  (put~ fact)
[5:19:49 PM] guillaumecartier says: (put fact)
[5:20:01 PM] guillaumecartier says: (put~ fact)
[5:20:22 PM] guillaumecartier says: (put~Factory fact)
[5:20:37 PM] guillaumecartier says: (put~ fact)
[5:20:51 PM] guillaumecartier says: (draw~ lf view)
[5:20:57 PM] guillaumecartier says: (draw~~ lf view)
[5:21:21 PM] Stéphane says: 
file X:
(class X
(method (foo)))

file BX:
(behavior on (X)
(method (baz)))
[5:23:38 PM] guillaumecartier says: file X:
(class X
(method (foo x)))

file BX:
(behavior on (X)
(method (baz x)))
[5:25:13 PM] guillaumecartier says: offset vtable
[5:26:17 PM] guillaumecartier says: JDefinition
[5:26:56 PM] Stéphane says: (baz~ x)
[5:27:54 PM] Stéphane says: (baz x)
[5:28:00 PM] guillaumecartier says: (put~factory fact)
[5:29:06 PM] guillaumecartier says: (put~factory fact)
[5:29:09 PM] Stéphane says: (baz~X x)
[5:29:46 PM] guillaumecartier says: (put fact)
[5:30:00 PM] guillaumecartier says: uses (Factory)
[5:30:22 PM] Stéphane says: (baz~ x)
[5:31:23 PM] guillaumecartier says: (bar~~~~~~ a b c d e)
[5:31:36 PM] Stéphane says: (bar~ a b c d e)
[5:32:24 PM] guillaumecartier says: uses (Factory)
[5:32:59 PM] guillaumecartier says: (method (foo)
  (let ((fact (new Factory)))
    (using Factory
      (put fact))))
[5:33:19 PM] Stéphane says: bar~
[5:35:44 PM] guillaumecartier says: (class X extends Y uses (p q) using (Factory Process)

  (method (f x)
     (let ((fact (new Factory)))
       (put fact))))
[5:36:35 PM] guillaumecartier says: (class X extends Y uses (p q) using (Factory Process)

  (method (f x)
     (let ((fact (gime-something)))
       (put fact))))
[5:38:21 PM] guillaumecartier says: (class X extends Y uses (p q) using (Factory fac Process proc)

  (method (f x)
     (let ((fact (gime-something)))
       (put~fac fact))))
[5:39:14 PM] guillaumecartier says: (class X extends Y uses (p q) using (Factory fac Process proc)
[5:39:21 PM] guillaumecartier says: +
[5:40:15 PM] guillaumecartier says: (class X extends Y uses (p q) using (Factory Process)

  (method (f x)
     (let ((fact (gime-something)))
       (put fact))))
[5:43:40 PM] guillaumecartier says: x~p = p.x
[5:44:35 PM] Stéphane says: put -> X/Y
put~ -> p/q ou Factory/Process
[5:45:26 PM] guillaumecartier says: (class X extends Y uses (p q Factory Process)

  (method (f x)
     (let ((fact (gime-something)))
       (put fact))))
[5:45:56 PM] guillaumecartier says: (class X extends Y uses (Factory p q Process)

  (method (f x)
     (let ((fact (gime-something)))
       (put fact))))
[5:47:44 PM] guillaumecartier says: uses (org.jazz org.jazz.declarations org.jazz.debugger)
[5:47:59 PM] guillaumecartier says: uses (org.jazz declarations debugger)
[5:48:33 PM] guillaumecartier says: uses (org.jazz.util Factory)
[5:49:43 PM] guillaumecartier says: inner meta (implicit references)
[5:49:52 PM] guillaumecartier says: (class X extends Y uses (p q) using (Factory fac Process proc)
[5:50:12 PM] guillaumecartier says: (class X extends Y uses (p q) using (Factory fac, Process proc)
[5:50:25 PM] Stéphane says: (class X extends Y uses (p q) using ((Factory fac) (Process proc))
[5:50:39 PM] guillaumecartier says: (class X extends Y uses (p q) using (Factory: fac Process: proc)
[5:51:19 PM] guillaumecartier says: (class X extends Y uses (p q) using (Factory fac, Factory.get get-it)
[5:52:44 PM] guillaumecartier says: (class X extends Y uses (p q) using (Factory fac, get fget, Process, get pget)
[5:55:19 PM] guillaumecartier says: (class X
  (method (f x)
     ))

=

(begin
  (structure X)
  (generic (f (X x))
    ))
[5:56:29 PM] guillaumecartier says: Factory.put
[5:57:04 PM] guillaumecartier says: scheme.+
[5:57:24 PM] guillaumecartier says: scheme.+
[6:02:21 PM] guillaumecartier says: (class X extends Y

  (method (mf mx)
    )

  (class I
[6:03:33 PM] guillaumecartier says: (class X extends Y

  (method (mf mx)
    )

  (method (out x)
   )

  (class I

    (method (f i)
      )

    (method (g i)
      (f i)
      (out ?)
      (mf ?))))
[6:04:23 PM] Stéphane says: (class X extends Y

(method (mf mx)
)

(method (out x)
)

(class I extends J

(method (f i)
)

(method (g i)
(f i)
(out ?)
(mf ?))))
[6:05:13 PM] Stéphane says: (out (get-outer i))
[6:05:13 PM] guillaumecartier says: (class X extends Y

  (method (mf mx)
    )

  (method (out x)
   )

  (class I

    (method (f i)
      )

    (method (g i)
      (f i)
      (out (outer i))
      (mf (class-of i)))))
[6:07:51 PM] guillaumecartier says: (class X extends Y

  (method (mf mx)
    )

  (method (out x)
   )

  (class I

    (method (f i)
      )

    (method (g i)
      (f i)
      (out outer)
      (mf (class-of i)))))
[6:08:43 PM] Stéphane says: i~class
[6:08:52 PM] Stéphane says: i~outer
[6:09:12 PM] guillaumecartier says: (class X extends Y

  (method (mf mx)
    )

  (method (out x)
   )

  (class I

    (method (f i)
      )

    (method (g x i)
      (f i)
      (out x)
      (mf (class-of i)))))
[6:09:15 PM] Stéphane says: i~outer~class
[6:09:28 PM] guillaumecartier says: (class X extends Y

  (method (mf mx)
    )

  (method (out x)
   )

  (class I

    (method (f x i)
      )

    (method (g x i)
      (f i)
      (out x)
      (mf (class-of i)))))
[6:09:44 PM] guillaumecartier says: (class X extends Y

  (method (mf mx)
    )

  (method (out x)
   )

  (class I

    (method (f x i)
      )

    (method (g x i)
      (f i)
      (out x)
      (mf~ x))))
[6:10:27 PM] Stéphane says: (~ x)
[6:11:42 PM] guillaumecartier says: (class X extends Y

  (method (mf mx)
    )

  (method (out x)
   )

  (class I

    (method (f i)
      )

    (method (g i)
      (f i)
      (out (. x))
      (mf (~ (. x))))))
[6:13:45 PM] guillaumecartier says: (c~.r i)
[6:15:13 PM] guillaumecartier says: (out~X (outer i))