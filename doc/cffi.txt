OBJECTIVES
- Arguments passed to and from c functions should always be able to validate their type
- Validate error return codes in debug level
- Need to be able to find memory leaks of non released memory
- The cffi needs the expressivity to keep hand written c code to a strict minimum
- Should enable the com interface to be build on top of it
- Should enable a swig interface to c and c++ code
- Support for union
- Access to Gambit native types should be provided
- No warnings should be generated as much as possible
- We should never have to revert to using a #f tag to bypass validation


C CONCEPTS
- typedef
- scalar
- structure
- union
- array
- pointer
- function pointer


SYNTAX
- c-include
- c-declare
- c-initialize
- c-type
- c-structure
- c-external
- c-function
- c-definition


TODO
- Finish test cases for every interesting point in Gambit's FFI
- Abstract the c-type-declaration so it has abstract information that can be consulted and only
  does it's expansion at expansion time
- With those:
(c-type HFONT (pointer (struct "HFONT__")))
(c-external HFONT (CreateFont INT INT INT INT INT DWORD DWORD DWORD DWORD DWORD DWORD DWORD DWORD LPCWSTR) "CreateFontW")
  do some tests to verify how the gc handles it
- Validate my understanding that foreign objects are still objects and thus and under the control
  of a refcount mecanism. Understand the implications of this


NOTES
- Add support for c-initialize!?
- Need to think about validation of types when there are types defined in terms of other types.
  Because we do not want all the declaration objects at runtime we will face the same problems
  Gambit is facing and solved with tags. Ask Marc exactly how tags work (was there a possibility
  of having a list of tags?). Explain to J and S the logic behind tags
- Should we use Gambit's release functions to release our structure via ##foreign-release? Any
  advantages to doing this?
- Verify that there is no place where our code allocates a Gambit struct or union that could then
  be released by the gc and cause a crash
- Could it be the code like this that causes gambit to release an invalid pointer?
  (c-type HACCEL (pointer (struct "HACCEL__")))
