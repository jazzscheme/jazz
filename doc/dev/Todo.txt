;;;
;;;; Todo
;;;


GC Guillaume Cartier
SLC Stephane Le Cornec
JLR Jeremie Lasalle Ratelle


;;;
;;;; Build
;;;


HIGH
- Fix pipe-no-return to wait for the return value. (Check execute-process)
- Standardize pkg-config code and add version checking


;;;
;;;; Platform
;;;


HIGH
- Remove all lparams and wparams in platform-independant packages.
- Find memory leaks in FFI packages.
- We should investigate every platform function beginning by "(When handle" for logic errors.
- Remove stupid or vulgar comments, dead code, etc. General cleanup.
- Correctly implement the FFI in the walker. It still uses the old macros style. It should be able
  to know which types are pointers, structures, etc.
- exact->inexact and inexact->exact.
- Implement a standard FFI construct to get the c constant value. (c-constant type name . c-name)

MEDIUM
- Decide if we are going to keep the platform-... naming scheme or if we are going to
  rename all that to better names
- Reduce the number of methods in platform packages and Window class. Remove old ones, merge others. 
  (Ex. get-root-owner, get-front-frame,  get-top-window)
  (get-bounds, get-rectangle, set-bounds, etc.)
- Check platform packages for internal c-functions that could be written as c-code
- Implement play-sound in X11 and Carbon.


;;;
;;;; Cairo
;;;


HIGH
- Check if there is a dotted line mode in cairo and change the tree accordingly.
- Implement highlight-color.
- Classbrowser tree lines have some missing pixels

MEDIUM
- Reimplement zoom and scaling in cairo.
- Use cairo to do the alpha blending.
- Check if it could be better to use native bitmaps instead of pixman surfaces in cairo.
- Try to remove all cairo-save and cairo-restore. This is a major problem because we need to work
  on a lot of painting logic to properly restore the states. (Is it even a good idea?)


;;;
;;;; Carbon
;;;


HIGH
- Investigate why the carbon port is so slow.


;;;
;;;; X11
;;;


HIGH
- Implement cursors
- Implement show-noactivate and hide-noactivate
- Remove polling and find elegant solution for clipboard
- Find why the window is scrolled after an F12
- Investigate and fix the problems with selection

MEDIUM
- Fix the workspace switching in X11 to eliminate the glitches. This is a complex problem that is
  related to windows moving and sizing in X11. We must understand how it is related to flushing,
  the event loop and painting. The temporary solution is a action-store used when in locked-update.
  This should also fix the white toplevel at load time.
- Check if it would be possible to receive mouse events only when we have the focus
- Implement the expose-store as an inval-store instead. Cache the invals and then only generate
  one expose event when we get back to the loop. (As gtk does)


;;;
;;;; Windows
;;;

MEDIUM
- Find how to fix the ascent hack in Windows. (Use freetype in windows?)


STEPHANE
- Look at SRFI-19 which does seems buggy with using sometimes 1000 and sometimes 10000
  for milli->nano. Also copy-time seems bugged (SLC)
- Implement type inference for the <X+> type
- Use Marc's catcher to implement exceptions
- It would seem that with Y extends X and foo a non virtual method in Y. If Y is compiled and we add in X
  foo as a virtual method, then we get an error when loading Y. Work with stephane to have clearer messages for the rebase ones
  like "Cannot override existing virtual method". We absolutly need to support separate compilation...


GUILLAUME
- Eval in user class
- Eval in text should load module if not already loaded
- Go through every walk method to verify that it does *not* forward-expr when not needed
- We need a fast boot, up to login dialog
- Complete Jedi as a Gambit IDE
- Improve all the definitions / references displays where the whole identifier is shown
- Cleanup of all the obsolete stuff in jazz explorer from the old jazz language
- Integrate my test1 and test2 for terminal access somehow
- Update the website
  - Basic tutorials
  - Someone looking at the website for the first time concluded that Jazz was 95x slower than the C++ version! Need to make it clearer
- Build
  - Fix gcc pathname quoting that doesn't work on non windows platforms
  - Use dynamic code to find the install dir under mac and windows
  - Copy the resources so that a binary release of Jazz can be 100% standalone and not require the source files
  - Remove the test patch in jazz.jazz-source
  - Be able to compile and build without Gambit installed
  + Jeremie should add pkg-config version number of libs checking
  - Jeremie should doc everything relevant to Git ports problems
  - Could we use git on the repo through http?
- We have to think about and go through the code for what happens if we make for unix but no windowing
+ Need to integrate Jeremie's todo list in here
- Marcel
  + 2007 -> 2008 everywhere
- Rename Servlet to Pages and Pages-Server
+ Font and other literals should not repend on the platform at readtime but only at runtime
  - With that cleanly separate platform build from windowing
    - Be able to build the game server using only jazz and maybe platform
- The bindings format needs to be improved as it forces us to unbind left-arrow to bind ctrl-a!
+ Put a binary build on the website for Marcel
+ Send Marc a good screenshot of Jazz and some basic info like line-of-code, ...
- Verify that the save-as dialog pops a warning if overriding an existing file
- Marc
  - Fix the first error never having a stack
  - Can start jedi either
    - from a gsc console already running a repl
    - as a standalone executable
  - Ask marc exactly what he did to register gambit to freenode
  - On mac, resizing the console while building will error!!!
    - Interrupted system call (open-process ...)
- Jeremie
  - Show Jeremie the new with-event-mutex so he can port them to x11 and carbon
  - Look with Jeremie at his pipe-no-return wich doesn't seem correct as it doesn't call process-status


;;;
;;;; Medium
;;;


GUILLAUME
- ummm with a restriction type we could have a type like fxstring that is a string that guaranties that
  its length is bounded in the range of fixnums!
- put back Rect as fx and make another class for number (or the opposite)
- when axis are working, simplify the code and make sure it is well optimized for the case of rows with not alot
  of sons
- i should be able to clean *alot* of not directly related code that i was forced to put inside classes because i
  didn't have generics. A class that needs big time cleanup like this is Component
- implement access rights to declarations
- why reimplement queues in Jazz??
- need to fix the save of text is buggy and loses the last line because of the new load-lines
- if i do a search in gambit's c files i will find a place that marc thought of for pasting and cutting from the
  system stack
- at some point i should start looking at the generated c code for my typical code
- because I want to do all type casting at call site for natives, I will need to always call the lowlevel
  ## version of the procedure
- ummm I think that saying car's signature is <pair:object> is wrong. Really, car's signature is <object:object>
  and throws an error if its parameter is not a pair. The <pair:object> is really a compile time specializer!
- specialize iterate and accumulate on basic classes
- Decide if it is correct to only annotate the root method (annotations in a derived method should report an error)
  or maybe validate that the derived annotations are the same!?
- (in p (class X ... (definition some-x (new X)))) should generate a runtime error like Class X not fully loaded
- Because specifics don't have associated declarations, walk error in them get wrongly reported as beeing
  in their parent. Using the generic declaration is not correct as it will create illegal access problems.
  I will probably have to create dummy specific declarations or maybe this is yet again a macro problem
  that has to be solved with the complete macro solution...
- Put offscreen? = false and take a *really* good look at all that gets painted. For instance when resizing the
  workbench splitter between the wb and the stage, very strange things get painted
- Not allocate void slots
- Source code -> code walk -> tree of Jazz expressions -> analyse and optimise -> compile -> scheme code
- Many explorer features in JOptimized still need to be migrated
- Very interesting idea to pretty-print results in the repl...
- The optimisation of having a language construct that splices a slot's content at the end of the
  object's vector could be correct i think if limited to final classes...
- Problems with explicit metaclasses:
  - Must know the metaclass of our ascendant. I.e. if I extend Component, I do not want to have to know if Component defined an explicit metaclass or not
  - The metaclass must be autoload exported too!
- Find a good and elegant solution to the register-autoclass patch
- Think about a naming convention (maybe CL's *symbol*) that would distinguish between global variables
  and class names that make code like (f~ X) hard to understand
- Implement partial library access like importing jazz.platform.windows and then using (WinUser.RegisterClass ...)
- Look at ways to add currying to Jazz.
- Use ##current-user-interrupt-handler to correctly handle ctrl-c in both the build system process and it's subprocesses
- Native Windows save-as dialog is buggy and can save as x.gLevel. Can reproduce by saving as to x.scm
- Need a clean solution to previously-focused-root management. One solution that looks clean would be to
  have the platform focus *always* to the overlapped and do the whole focus management ourselves with
  the Focus view. That way all the application activation events can be replaced in a platform independent
  maner by focus-gain/lose of the toplevel overlapped that can then set / reset the previously-focused-root
- Fix the cairo memory leaks. Add a deallocator to our structures and call foreign-nullify in the with special form.
  - This will probably unify with and with-closed
  - One thing that is very nice with foreign release functions (and wills!?) is that we do not need to wrap the
    expansion of with inside an unwind-protect (not 100% sure about this as sometimes, having the object closed in
    the dynamic scope is an important part of a function's semantics...)
- When compiling lets says jazz.catalog, the merge of declarations generates an error because for instance the autoload
  of X that was already present is added again and autoloads are not eq?
- Adding a file-modification-time column to search-results would enable to easily find some recent change like "where did
  I add those annoying debug"!
- Should annotate new files New, New1, New2, ...
- With many open windows the Window menu can be too big and close as soon as it opens. Either put then together in submenus
  or have a dialog when >= 10
- Adding sha-1 to catalogs instead of file modification time would be nice
- Add a clean command to scrap install folder to the build system
- Maybe one day move up the text logic to view which is clearly a generic algo of box layouting very similar to css
- For embeding views in texts, we need a rendering algo like html that goes botton-up as well as top-down


;;;
;;;; Termite
;;;


- Not clear in documentation that there is a primordial process that is not the direct result of a spawn
- node-init is not in the doc
- Does termite implement message passing in a way that no tcp/ip is used for intra-node calls?
- Look at Guillaume Germain's Dynamite web server!?
- So is make-node to be used both for the actual node and for remotes and only the actual should call node-init ?
- Everything i try crashes. There is no error validation? (node-init (current-node)) for instance
- What does guillaume think about an RMI layer on top of termite


;;;
;;;; R4RS
;;;


- r4rstest.scm
- f1.0 notation
- internal defines
- quasiquote for vectors
- =>
- semantics of declarations that are bound only after beeing defined vs jazz which binds declarations
  accross the whole module. another incompatibility that is related is that scheme code can define the
  same variable multiple times -> a possible solution would be to implement scheme semantics for define
  and jazz semantics for definition which seems very consistant with both names


;;;
;;;; Notes
;;;


- Thoughts: having a module hierarchy can be confusing if for instance some files under jazz.ui are part of the jazz.ui
  module and others like jazz.ui.clipboard are not... This seems to talk in favor of having jazz.ui.clipboard at the
  package toplevel!?
- Look at C# Generics which seems pretty close to what I want. Very interesting interview with Anders Hejlsberg at
  http://www.artima.com/intv/generics2.html. Also look at Scala's solution to the problem.
- bwinton@latte.ca interested in beta testing the web framework
- Maybe high perf counters in Gambit would solve the problem of timings beeing so inconsistant in Windows
- Because language has some very critical functions like search, find, ... I think that when we have a typed dispatch
  with only 1 level of indirection that maybe specializing will not be as necessary for big functions like search
- To implement a pump to capture output in the remote debuggee: open-string-pipe read-substring input-port-timeout-set!
- When Stephane is done with generic methods, need to really think hard about wheter we should use generic methods
  instead of ~ syntax. As the cost of a generic method call is void when type info is available, using generic methods
  at large may not be too costly. Need to think how to preserve encapsulation in the context of generic methods
- I really love the font, the layout, ... of the imagemagick site
- The problem of conserving enough info to be able to find the original location is very general and a generic solution
  could apply not only to macros but to jml transformations
- In factor all syntax is functional with the addition of a simple [] construct that is like scheme's lambdas but without
  any lexical environment
- In general I think using literals for hierarchycal structures is not a good decision. Literals should be kept for simple
  structures. JML or components should be used for hierarchies.
- The only way to create modifyable tutorial videos is by generalising the recorder to everything
  - How can we move the mouse progr at playback
  - Could record short text sound clips
    - They could be displayed textually inside a buble
  - By recording a playback we could using an external software record in a common format like .mov for instance
  - By having saved scenarios we can automate and unify tutorials
- A good tutorial automated through an event recording mecasnism could give :
  - samples
  - tutorials
  - screen shots
  - basic test suite if the tutorial cover a good % of the functionality
- MVC Designer optimisation maybe could be done by registering the actions when locked?=#t and replaying them afterwards.
  That way we would be guarantied to have the exact same behavior and before playing them, an optimisation could be performed
  to do things like removing duplicate actions
- Now that we do not need [] anymore, it could be used as an autoquoted version of () to enable elegant pattern matching. The
  only problem remaining would be quoting symbols that could be done like erlang with a naming convention (!?)


;;;
;;;; Language
;;;


- Looking at how to implement the enumeration macro cleanly make me think that a declare special form is to moving alot
  of code from the walker to high level macros
  - define
  - declare
  - annotate (!?)
  - relocate (!?)

  - (definition D expr)
  - (declare D <Definition-Declaration>
      (define D
        expr))
  
  - maybe definitions could even know their declaration which would unify the duplication between the 2


;;;
;;;; Optimize
;;;


- why are WinUser, ... appearing as .jazz in statprof??
- optimize the interpreted caching would seem to be very critical
  - ahhh not really... why does it get always called is the right question!
  - look with marc at how can jazz.cache-dispatch-interpreted appear in the statprof report
    when it is even called! is it because of how we set! the dispatcher that gambit gets mixed up?


;;;
;;;; Statprof
;;;


- should not index the buckets on file/line/col but rather on the continuation-code object itself
  so that 2 expressions on the same line are treated separately
- should keep the stack of callers so that in the report I can show that the 16% is divided between
  those 3 call branches
- the key is what gambit object represent static code and are stable?


;;;
;;;; Debugger
;;;


- Debugging-Environment as the top object!?
- Debuggers must integrate with
  - console
  - stack
  - variables
  - break points
  - tooltip debugging
  - memory inspector


;;;
;;;; Snow
;;;


- Can we work around the fact that the snow package* form doesn't enclose the whole file content?
- Need a solution to snow's name including the version and having periods in it
- The snow packages need to be jazz modules to include any kind of scheme code but they also need to
  be jazz libraries for optional / named parameters and name scoping...


;;;
;;;; Emacs
;;;


- ctrl-K kill to end (augment progressively)
- ctrl-S-R search incremental
- ctrl-W kill region cut from mark to cursor
- ctrl-Y paste (yank)
- ctrl-Z suspend and iconify


;;;
;;;; Interpreter
;;;


- Determine the exact redefinition rules
  - Jazz -> Blues -> C++ -> Compiled Code
  - Jazz -> Blues -> Interpreted Code
- Policies
  - Debug
  - Release
  - Distribution
- Actions
  - add slot
  - redefine slot
  - remove slot
  - add method
  - redefine method
  - remove method
  - modify visibility
  - modify virtual
  - change slot -> definition
  - change definition -> slot


;;;
;;;; RMI
;;;


- An interesting concept is to extend the RMI concept to inter-thread communication which would result in
  calling a thread connector through a proxy. What is nice is that the thread could be included in the IOR
  and the call be made directly even from another process. On the other hand it is very heavy to have to
  always marshall when calling in process between threads... We will see when the remote debugger implements
  the concept directly to support multi-thread debugging...
- Une idee fort interessante est l'implementation du dispatch rmi et autres par:
  [X.foo x y z] qui est equivalent a
  (Dispatchable.dispatch x 'X.foo y z)
  (class IOR
    (method (dispatch ...)
      (rmi-call ...)))
  Ca correspont a une implementation tres simple du dispatch rmi via un dynamic invoke (comme dans
  la nouvelle version de Java)


;;;
;;;; Java 1.5
;;;


- Unicode
- Primitive datatypes
- Exceptions
- Assertions
- Generics
- Enumerated Types
- Annotations
