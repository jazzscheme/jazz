;;;
;;;; High
;;;


JEREMIE
- Investigate the segmentation fault when leaving Gambit in Mac OS with X11
- Check logic of X11 events. Especially the fact that the window element in events refer to the window attached to the event and not to the
   window receiving the event. This is especially bad when combined with (get-in-creation) because some window may get the handle of a des
   troyed window.
- Is there a dotted line mode in Cairo for the tree?
- I changed in jazz.platform.cairo, string to cairo_string... (GC)
- We have to think about and go through the code for what happens if we make for unix but no windowing
- Fix build on Cygwin / Windows that fails i think because Cygwin doesn't like just "jazz" just like unix
- Confirm that on mac x11 starts automatically on launching jedi
- Shouldn't Windows do the same logic as X11 in destroy-window of calling call-focus-lose
- Check platform-erase-background
- Remove all references to lparam and wparam in non platform-specific packages
- Find memory leaks
- Unify platform-process-messages and platform-process-one-message
- Find better names for set-capture and unset-capture
- Decide if we are going to keep the platform-... naming scheme or if we are going to
  rename all that to better names
- Fix alpha-blending to use cairo
- send-message and etc should be removed from Window as it is used in a platform specific context
  I even think it is no longer used
- Check if we can remove these methods
  - get-root-owner in Window
  - get-front-frame in window
  - get-top-window in Window
- Implement acquire-rect in X11 and check if it shouldn't be put elsewhere as it is really acquiring 2 points
- Check if platform-get-size and platform-get-window-size do the same thing in windows because the do the same in X11
- I think that all the size and position functions could easily be condensed. (get-bounds, get-rectangle, set-bounds, etc.)
- Implement cursors in X11
- In every function where we check "(when handle" we should ask ourselves if it is really needed. If some logic is missing
- show-noactivate and hide-noactivate in X11
- Implement process-windows in x11. This could even be platform-independant as we get the handles in the window-table
- Can we remove unused event types completely? Event from the Union?
- Remove polling and find elegant solution for clipboard in X11
- Check why message-box do not process exposes correctly
- Implement redraw-view correctly to get status-bar updates and flashing parentheses correctly.
- Find why the window is scrolled after an F12
- Check if we should return a pair when a c-function returns an error code and put the result in a pointer


STEPHANE
- Look at SRFI-19 which does seems buggy with using sometimes 1000 and sometimes 10000
  for milli->nano. Also copy-time seems bugged.
- Add stack logic to catalog and module loading for better circular dependencies error messages
- Implement type inference for the <X+> type
- Use Marc's catcher to implement exceptions
- It would seem that with Y extends X and foo a non virtual method in Y. If Y is compiled and we add in X
  foo as a virtual method, then we get an error when loading Y. Work with stephane to have clearer messages for the rebase ones
  like "Cannot override existing virtual method". We absolutly need to support separate compilation...


GUILLAUME
- If I manage myself the repl started by gsc for the make I could make it so it is more natural like
  make jazz or configure without the parenthesis. At the same time i will be able to correctly handle
  exceptions by continuing my loop when an exception occurs
- Maybe more natural (cfg default: wd)
- When compiling lets says jazz.catalog, the merge of declarations generates an error because for instance the autoload
  of X that was already present is added again and autoloads are not eq?
- Basic Jazz l&f
- Fix the cairo memory leaks. Add a deallocator to our structures and call foreign-nullify in the with special form.
  - This will probably unify with and with-closed
  - One thing that is very nice with foreign release functions (and wills!?) is that we do not need to wrap the
    expansion of with inside an unwind-protect (not 100% sure about this as sometimes, having the object closed in
    the dynamic scope is an important part of a function's semantics...)
- Eval in user class
- Need a clean solution to previously-focused-root management. One solution that looks clean would be to
  have the platform focus *always* to the overlapped and do the whole focus management ourselves with
  the Focus view. That way all the application activation events can be replaced in a platform independent
  maner by focus-gain/lose of the toplevel overlapped that can then set / reset the previously-focused-root
- Go through every walk method to verify that it does *not* forward-expr when not needed
- Fix the unviewable characters in the text and characters like the e accent aigue
- Generic open-file dialog for X11
- Definitions and references search from the dialog
- Catalog pre-installed for new users / profiles
- Fix F8 with other than toplevel windows
- Implement timers for various stuff like auto scroll
- Reimplementing tooltips would be nice for new users
- Easy access to tutorials mandelbrot, p4, ...
- The right solution to tutorials is i think to have several profile templates with one for tutorials and one empty and ....
  (or maybe several checkbox options like Include tutorials). Or possibly using the new module-autoload
- We need a fast boot up to login dialog. Check if the autoloads load the catalog skeletons of the autoload classes
- Look at stephane's code for load-module to give a good error message with the stack info in it and generalize the code for catalogs
- I really love the font, the layout, ... of the imagemagick site
- Add an icon for Jedi
- Test installing Jazz in Program Files that seems may not work
- Why does gambit crash even in core with an empty package file
- Make a core build 100% safe even in the kernel code and document that in the case of a crash to retry using a core build.
- Complete Jedi as a Gambit IDE
- Default profile should include a test web server and anything to get people quickly started
- "; compiling core/class/syntax/class...gcc: argument to '-o' is missing"


TERMITE
- Not clear in documentation that there is a primordial process that is not the direct result of a spawn
- node-init is not in the doc
- Does termite implement message passing in a way that no tcp/ip is used for intra-node calls?
- Look at Guillaume Germain's Dynamite web server!?
- So is make-node to be used both for the actual node and for remotes and only the actual should call node-init ?
- Everything i try crashes. There is no error validation? (node-init (current-node)) for instance
- What does guillaume think about an RMI layer on top of termite


R4RS
- r4rstest.scm
- f1.0 notation
- internal defines
- quasiquote for vectors
- =>
- semantics of declarations that are bound only after beeing defined vs jazz which binds declarations
  accross the whole module. another incompatibility that is related is that scheme code can define the
  same variable multiple times -> a possible solution would be to implement scheme semantics for define
  and jazz semantics for definition which seems very consistant with both names


NOTES
- Thoughts: having a module hierarchy can be confusing if for instance some files under jazz.ui are part of the jazz.ui
  module and others like jazz.ui.clipboard are not... This seems to talk in favor of having jazz.ui.clipboard at the
  package toplevel!?
- Look at C# Generics which seems pretty close to what I want. Very interesting interview with Anders Hejlsberg at
  http://www.artima.com/intv/generics2.html. Also look at Scala's solution to the problem.
- bwinton@latte.ca interested in beta testing the web framework
- Maybe high perf counters in Gambit would solve the problem of timings beeing so inconsistant in Windows
- Because language has some very critical functions like search, find, ... I think that when we have a typed dispatch
  with only 1 level of indirection that maybe specializing will not be as necessary for big functions like search
- To implement a pump to capture output in the remote debuggee: open-string-pipe read-substring input-port-timeout-set!
- When Stephane is done with generic methods, need to really think hard about wheter we should use generic methods
  instead of ~ syntax. As the cost of a generic method call is void when type info is available, using generic methods
  at large may not be too costly. Need to think how to preserve encapsulation in the context of generic methods


;;;
;;;; Medium
;;;


JEREMIE
- See http://cairographics.org/cookbook/win32quickstart/ for an example of using Cairo in
  Python where they use BitBlt directly to copy Cairo's work
- I read somewhere that show_text cached the glyphs... Aren't we redoing the job then?
- Find a solution to put the dll somewhere else than the root
- put rect-intersects-region? at the right place


GUILLAUME
- ummm with a restriction type we could have a type like fxstring that is a string that guaranties that
  its length is bounded in the range of fixnums!
- put back Rect as fx and make another class for number (or the opposite)
- when axis are working, simplify the code and make sure it is well optimized for the case of rows with not alot
  of sons
- i should be able to clean *alot* of not directly related code that i was forced to put inside classes because i
  didn't have generics. A class that needs big time cleanup like this is Component
- implement access rights to declarations
- why reimplement queues in Jazz??
- need to fix the save of text is buggy and loses the last line because of the new load-lines
- if i do a search in gambit's c files i will find a place that marc thought of for pasting and cutting from the
  system stack
- at some point i should start looking at the generated c code for my typical code
- because I want to do all type casting at call site for natives, I will need to always call the lowlevel
  ## version of the procedure
- ummm I think that saying car's signature is <pair:object> is wrong. Really, car's signature is <object:object>
  and throws an error if its parameter is not a pair. The <pair:object> is really a compile time specializer!
- specialize iterate and accumulate on basic classes
- Decide if it is correct to only annotate the root method (annotations in a derived method should report an error)
  or maybe validate that the derived annotations are the same!?
- (in p (class X ... (definition some-x (new X)))) should generate a runtime error like Class X not fully loaded
- Because specifics don't have associated declarations, walk error in them get wrongly reported as beeing
  in their parent. Using the generic declaration is not correct as it will create illegal access problems.
  I will probably have to create dummy specific declarations or maybe this is yet again a macro problem
  that has to be solved with the complete macro solution...
- Put offscreen? = false and take a *really* good look at all that gets painted. For instance when resizing the
  workbench splitter between the wb and the stage, very strange things get painted
- Not allocate void slots
- Source code -> code walk -> tree of Jazz expressions -> analyse and optimise -> compile -> scheme code
- Many explorer features in JOptimized still need to be migrated
- Very interesting idea to pretty-print results in the repl...
- The optimisation of having a language construct that splices a slot's content at the end of the
  object's vector could be correct i think if limited to final classes...
- Problems with explicit metaclasses:
  - Must know the metaclass of our ascendant. I.e. if I extend Component, I do not want to have to know if Component defined an explicit metaclass or not
  - The metaclass must be autoload exported too!
- Find a good and elegant solution to the register-autoclass patch
- Think about a naming convention (maybe CL's *symbol*) that would distinguish between global variables
  and class names that make code like (f~ X) hard to understand
- Implement partial library access like importing jazz.platform.windows and then using (WinUser.RegisterClass ...)
- Look at ways to add currying to Jazz.
- Use ##current-user-interrupt-handler to correctly handle ctrl-c in both the build system process and it's subprocesses
- Native Windows save-as dialog is buggy and can save as x.gLevel. Can reproduce by saving as to x.scm


OPTIMIZE
- why are WinUser, ... appearing as .jazz in statprof??
- optimize the interpreted caching would seem to be very critical
  - ahhh not really... why does it get always called is the right question!
  - look with marc at how can jazz.cache-dispatch-interpreted appear in the statprof report
    when it is even called! is it because of how we set! the dispatcher that gambit gets mixed up?


STATPROF
- should not index the buckets on file/line/col but rather on the continuation-code object itself
  so that 2 expressions on the same line are treated separately
- should keep the stack of callers so that in the report I can show that the 16% is divided between
  those 3 call branches
- the key is what gambit object represent static code and are stable?


SNOW
- Can we work around the fact that the snow package* form doesn't enclose the whole file content?
- Need a solution to snow's name including the version and having periods in it
- The snow packages need to be jazz modules to include any kind of scheme code but they also need to
  be jazz libraries for optional / named parameters and name scoping...


EMACS
- ctrl-K kill to end (augment progressively)
- ctrl-S-R search incremental
- ctrl-W kill region cut from mark to cursor
- ctrl-Y paste (yank)
- ctrl-Z suspend and iconify


INTERPRETER
- Determine the exact redefinition rules
  - Jazz -> Blues -> C++ -> Compiled Code
  - Jazz -> Blues -> Interpreted Code
- Policies
  - Debug
  - Release
  - Distribution
- Actions
  - add slot
  - redefine slot
  - remove slot
  - add method
  - redefine method
  - remove method
  - modify visibility
  - modify virtual
  - change slot -> definition
  - change definition -> slot


NOTES
- An interesting concept is to extend the RMI concept to inter-thread communication which would result in
  calling a thread connector through a proxy. What is nice is that the thread could be included in the IOR
  and the call be made directly even from another process. On the other hand it is very heavy to have to
  always marshall when calling in process between threads... We will see when the remote debugger implements
  the concept directly to support multi-thread debugging...


EXPERIMENTAL
- Une idee fort interessante est l'implementation du dispatch rmi et autres par:
  [X.foo x y z] qui est equivalent a
  (Dispatchable.dispatch x 'X.foo y z)
  (class IOR
    (method (dispatch ...)
      (rmi-call ...)))
  Ca correspont a une implementation tres simple du dispatch rmi via un dynamic invoke (comme dans
  la nouvelle version de Java)


JAVA 1.5
- Unicode
- Primitive datatypes
- Exceptions
- Assertions
- Generics
- Enumerated Types
- Annotations
