(module protected angry.database jazz

@WAIT (

(import (jazz.foreign (phase syntax))
        (jazz.platform)
        (jazz.platform.types))


(c-declare ios #/Objective-C/

#import "CouchbaseLite.h"

//#)



;;;
;;;; basic types
;;;


(c-type nsarray (pointer "NSArray"))
(c-type nsstring (pointer "NSString"))

;;;
;;;; CBLManager
;;;


(c-type cblmanager (pointer "CBLManager"))

(c-external (cblCreateManager) cblmanager
  #/Objective-C/
  __LManager sharedInstance];
  ___return(result);
  //#)


(definition public (cblGetDatabases) 
  (let ((manager (cblCreateManager)))
    (map (lambda (i)
           (cblManagerGetDatabasesNameAtIndex manager i))
         (iota (cblManagerGetDatabasesNumber manager)))))


(c-external (cblManagerGetDatabasesNumber cblmanager) int
  #/Objective-C/
  ___return___arg1.allDatabaseNames.count;
  //#)


(c-external (cblManagerGetDatabasesNameAtIndex cblmanager int) char-string
  #/Objective-C/
  ___return((char *)[[___arg1.allDatabaseNames objectAtIndex:___arg2] cStringUsingEncoding:NSUTF8StringEncoding]);
  //#)


(c-type cbldatabase (pointer "CBLDatabase"))


(c-external (cblManagerGetDatabaseNamed cblmanager char-string) cbldatabase
  #/Objective-C/
  NSError *error;
  ___return([___arg1 databaseNamed:[NSString stringWithCString:___arg2 encoding:NSUTF8StringEncoding] error:&error]);
  //#)


;;;
;;;; CBLDatabase
;;;


(c-type cblquery (pointer "CBLQuery"))
(c-type cbldocument (pointer "CBLDocument"))
(c-type cblreplication (pointer "CBLReplication"))
(c-type cblauthenticator (pointer "CBLAuthenticator"))

(c-external (cblDatabaseAllDocumentsQuery cbldatabase) cblquery
  #/Objective-C/
  ___return([___arg1 createAllDocumentsQuery]);
//#)


(c-external (cblDatabaseDelete cbldatabase) void
  #/Objective-C/
  NSError *error;
  [___arg1 deleteDatabase:&error];
  //#)


(c-external (cblDatabaseCreateDocument cbldatabase) cbldocument
  #/Objective-C/
  ___return([___arg1 createDocument]);
  //#)

(c-external (cblDatabaseGetDocument cbldatabase char-string) cbldocument
  #/Objective-C/
  ___return([___arg1 documentWithID:[NSString stringWithCString:___arg2 encoding:NSUTF8StringEncoding]]);
  //#)


(c-external (cblDatabaseCreatePushReplication cbldatabase char-string) cblreplication
  #/Objective-C/
  ___return([___arg1 createPushReplication:[NSURL URLWithString:[NSString stringWithCString:___arg2 encoding:NSUTF8StringEncoding]]]);
  //#)


(c-external (cblDatabaseCreatePullReplication cbldatabase char-string) cblreplication
  #/Objective-C/
  ___return([___arg1 createPullReplication:[NSURL URLWithString:[NSString stringWithCString:___arg2 encoding:NSUTF8StringEncoding]]]);
  //#)


(c-external (cblDatabaseMonitorChanges cbldatabase) id
  #/Objective-C/
  ___return((struct objc_object *)[[NSNotificationCenter defaultCenter] addObserverForName: kCBLDatabaseChangeNotification
            object: ___arg1
             queue: nil
        usingBlock: ^(NSNotification *n) {
            jazz_call_db_changed(n.object);
        }
  ]);
  //#)


(c-external (cblDatabaseStopMonitorChanges id) void
  #/Objective-C/
 [[NSNotificationCenter defaultCenter] removeObserver:(id)___arg1];
  //#)

  
  
(c-definition (jazz-call-db-changed db) (cbldatabase) void "jazz_call_db_changed" ""
  (let ((t (table-ref db-changes-listeners (foreign-address db) #f)))
     (and t (t))))
   

(define db-changes-listeners (make-table))
   
   
(definition public (register-db-change-listener db thunk)
  (table-set! db-changes-listeners (foreign-address db) thunk))


(c-external (cblReplicationSetContinuous cblreplication int) void
  #/Objective-C/
  ___arg1.continuous=___arg2;
  //#)


(c-external (cblReplicationSetCreateTarget cblreplication int) void
  #/Objective-C/
  ___arg1.createTarget=___arg2;
  //#)


(c-external (cblReplicationSetFilter cblreplication char-string nsmutabledictionary) void
  #/Objective-C/
  ___arg1.filter=[NSString stringWithCString:___arg2 encoding:NSUTF8StringEncoding];
  ___arg1.filterParams=___arg3;
  //#)


(c-external (cblReplicationSetAuthenticator cblreplication cblauthenticator) void
  #/Objective-C/
  ___arg1.authenticator=___arg2;
  //#)


(c-external (cblCreateBasicAuthenticator char-string char-string) cblauthenticator
  #/Objective-C/
  ___return([CBLAuthenticator basicAuthenticatorWithName:[NSString stringWithCString:___arg1 encoding:NSUTF8StringEncoding] password:[NSString stringWithCString:___arg2 encoding:NSUTF8StringEncoding]]);
  //#)


(c-type nserror (pointer "NSError"))

(c-external (cblReplicationGetLastError cblreplication) nserror
  #/Objective-C/
  NSLog(@"%@",___arg1.lastError);
  //#)


(c-external (cblReplicationStart cblreplication) void
  #/Objective-C/
  [___arg1 start];
  //#)


(c-external (cblReplicationStop cblreplication) void
  #/Objective-C/
  NSLog(@"___arg1=%@",___arg1);
  [___arg1 stop];
  //#)


(c-external (nsErrorDisplay nserror) void
  #/Objective-C/
  NSLog(@"%@",___arg1);
  //#)


;;;
;;;; CBLQuery
;;;


(c-type cblqueryenumerator (pointer "CBLQueryEnumerator"))

(c-external (cblQueryRun cblquery) cblqueryenumerator
  #/Objective-C/
  NSError *error;
  ___return([___arg1 run:&error]);
  //#)


(c-external (cblQuerySetStartKey cblquery id) void
  #/Objective-C/
  ___arg1.startKey=(id)___arg2;
  //#)
            

(c-external (cblQuerySetEndKey cblquery id) void
  #/Objective-C/
  ___arg1.endKey=(id)___arg2;
  //#)


;;;
;;;; CBLQueryEnumerator
;;;


(c-type cblqueryrow (pointer "CBLQueryRow"))


(c-external (cblQueryEnumeratorCount cblqueryenumerator) int
  #/Objective-C/
  ___return(___arg1.count);
  //#)


(c-external (cblQueryEnumeratorRowAtIndex cblqueryenumerator int) cblqueryrow
  #/Objective-C/
  ___return([___arg1 rowAtIndex:___arg2]);
  //#)


;;;
;;;; CBLQueryRow
;;;


(c-external (cblQueryRowDocID cblqueryrow) char-string
  #/Objective-C/
  ___return((char *)[___arg1.documentID cStringUsingEncoding:NSUTF8StringEncoding]);
  //#)

(c-external (cblQueryRowDoc cblqueryrow) cbldocument
  #/Objective-C/
  ___return(___arg1.document);
  //#)


(definition public (cblGetAllDatabaseDocumentsIDS dbname)
  (let* ((enumerator (cblQueryRun (cblDatabaseAllDocumentsQuery (cblManagerGetDatabaseNamed (cblCreateManager) dbname)))))
    
    (map (lambda (i)
           (cblQueryRowDocID (cblQueryEnumeratorRowAtIndex enumerator i)))
         (iota (cblQueryEnumeratorCount enumerator)))))


(definition public (cblGetAllDatabaseDocuments dbname)
  (let* ((enumerator (cblQueryRun (cblDatabaseAllDocumentsQuery (cblManagerGetDatabaseNamed (cblCreateManager) dbname)))))
    
    (map (lambda (i)
           (cblQueryRowDoc (cblQueryEnumeratorRowAtIndex enumerator i)))
         (iota (cblQueryEnumeratorCount enumerator)))))
    

;;;
;;;; CBLDocument
;;;           


(c-type nsdictionary (pointer "NSDictionary"))


(c-external (cblDocumentID cbldocument) char-string
  #/Objective-C/
  ___return((char *)[___arg1.documentID cStringUsingEncoding:NSUTF8StringEncoding]);
  //#)


(c-external (cblDocumentProperties cbldocument) nsdictionary
  #/Objective-C/
  ___return(___arg1.properties);
  //#)


(c-external (cblDocumentPutProperties cbldocument nsdictionary) void
  #/Objective-C/
  NSError *error;
  [___arg1 putProperties:___arg2 error:&error];
  //#)


(definition public (cblDocumentUpdateProperties doc props)
  (let ((oprops (objectiveCobject->scheme (cblDocumentProperties doc))))
    (for-each (lambda (pinfo)
                (table-set! oprops (first pinfo) (second pinfo)))
              props)
    (debug (table->list oprops))
    (cblDocumentPutProperties doc (schemeObject->objectiveCobject oprops))))


(c-external (cblDocumentDelete cbldocument) void
  #/Objective-C/
  NSError *error;
  [___arg1 deleteDocument:&error];
  //#)


;;;
;;;; CBLRevision
;;;


(c-type cblrevision (pointer "CBLRevision"))
(c-type nsdata (pointer "NSData"))

(c-external (cblDocumentRevision cbldocument) cblrevision
  #/Objective-C/
  ___return(___arg1.currentRevision); 
  //#)
  
  
(c-external (cblRevisionNewRevision cblrevision) cblrevision
  #/Objective-C/
  ___return([___arg1 createRevision]);  
  //#)
  
  
(c-external (cblRevisionSetAttachment cblrevision char-string char-string nsdata) void
  #/Objective-C/
  NSString *attName=[NSString stringWithCString:___arg2 encoding:NSUTF8StringEncoding];
  NSString *attType=[NSString stringWithCString:___arg3 encoding:NSUTF8StringEncoding];
 [___arg1 setAttachmentNamed:attName withContentType:attType content:___arg4];  
  //#)
  
  
  
(c-type cblattachment (pointer "CBLAttachment"))  
  
(c-external (cblRevisionGetFirstAttachment cblrevision) cblattachment
  #/Objective-C/
  ___return([___arg1.attachments objectAtIndex:0]);
  //#)


(c-external (cblRevisionGetAttachmentAtIndex cblrevision int) cblattachment
  #/Objective-C/
  ___return([___arg1.attachments objectAtIndex:___arg2]);
  //#)


(c-external (cblRevisionGetAttachmentsLength cblrevision) int
  #/Objective-C/
  ___return([___arg1.attachments count]);
  //#)
  
  

(c-external (cblRevisionSave cblrevision) void
  #/Objective-C/
  NSError *error;
  [___arg1 save:&error]; 
  //#)


(definition public (cblDocumentSetAttachment doc name type data)
  (let* ((rev (cblDocumentRevision doc))
         (nrev (cblRevisionNewRevision rev)))
    (cblRevisionSetAttachment nrev name type data)
    (cblRevisionSave nrev)))


(definition public (cblDocumentGetFirstAttachment doc)
  (let* ((rev (cblDocumentRevision doc)))
    (cblRevisionGetFirstAttachment rev)))


(definition public (cblDocumentGetAttachments doc)
  (let* ((rev (cblDocumentRevision doc))
         (n (cblRevisionGetAttachmentsLength rev)))
    (map (lambda (i)
           (let ((att (cblRevisionGetAttachmentAtIndex rev i)))
             (cons (cblAttachmentGetName att) (cblAttachmentGetContent att))))
         (iota n))))

(definition public (cblDocumentGetAttachmentDataNamed doc name)
  (let ((found (assoc name (cblDocumentGetAttachments doc))))
    (and found (cdr found))))


(c-external (UIImagePNGRepresentation uiimage) nsdata
  #/Objective-C/
  ___return(UIImagePNGRepresentation(___arg1));
  //#)



(c-external (NSDataFromFile char-string) nsdata
  #/Objective-C/
  ___return([NSData dataWithContentsOfFile:[NSString stringWithCString:___arg1 encoding:NSUTF8StringEncoding]]);
  //#)

(c-external (NSDataWriteToFile nsdata char-string) void
  #/Objective-C/
  [___arg1 writeToFile:[NSString stringWithCString:___arg2 encoding:NSUTF8StringEncoding] atomically:YES];
  //#)


(c-external (temporaryDirectory) char-string
  #/Objective-C/
  ___return((char *)[NSTemporaryDirectory() cStringUsingEncoding:NSUTF8StringEncoding]);
  //#)


;;;
;;;; CBLView
;;;

(c-external (cblViewQuery cblview) cblquery
  #/Objective-C/
  ___return([___arg1 createQuery]);
  //#)


;;;
;;;; CBLAttachment
;;;


(c-external (cblAttachmentGetContent cblattachment) nsdata
  #/Objective-C/
  ___return(___arg1.content);
  //#)


(c-external (cblAttachmentGetName cblattachment) char-string
  #/Objective-C/
  ___return((char *)[___arg1.name cStringUsingEncoding:NSUTF8StringEncoding]);
  //#)


;;;
;;;; NSDictionary conversion
;;;


(c-type nsmutabledictionary (pointer "NSMutableDictionary" #f))


(c-external (nsdictionaryGetAllKeys nsdictionary) nsarray
  #/Objective-C/
  ___return(___arg1.allKeys);
  //#)


(c-external (nsdictionaryGetValueForKey nsdictionary nsstring) id
  #/Objective-C/
  ___return((struct objc_object *)[___arg1 valueForKey:___arg2]);
  //#)


(c-external (nsmutabledictionaryCreate) nsmutabledictionary
  #/Objective-C/
  ___return([[NSMutableDictionary alloc] init]);
  //#)


(c-external (nsmutabledictionarySetObjectForKey nsmutabledictionary nsstring id) void
  #/Objective-C/
  [___arg1 setObject:(id)___arg3 forKey:___arg2];
  //#)


(definition public (nsdictionary->table dict)
  (let ((t (make-table))
        (keys (nsarray->list (nsdictionaryGetAllKeys dict))))
    (for-each (lambda (k)
                (table-set! t (nsstring->string k) (objectiveCobject->scheme (nsdictionaryGetValueForKey dict k))))
              keys)
    t))


(definition public (table->nsdictionary t)
  (let ((d (nsmutabledictionaryCreate)))
    (table-for-each (lambda (k v)
                      (nsmutabledictionarySetObjectForKey d (string->nsstring k) (schemeObject->objectiveCobject v)))
                    t)
    d))



;;;
;;;; Views (family app)
;;; 

;; To move elsewhere


(c-type cblview (pointer "CBLView"))


(c-external (tasksByParentView cbldatabase) cblview
  #/Objective-C/
  CBLView* view = [___arg1 viewNamed: @"tasksByParent"];
  if (!view.mapBlock) 
  {
     // Register the map function, the first time we access the view:
     [view setMapBlock: MAPBLOCK({
            
                emit(doc[@"parentTask"], doc);
        }) reduceBlock: nil version: @"1"];
  }
  ___return(view);
  //#)


(c-external (tasksInstancesByActor cbldatabase) cblview
  #/Objective-C/
  CBLView* view = [___arg1 viewNamed: @"tasksInstancesByActor"];
  if (!view.mapBlock) 
  {
   // Register the map function, the first time we access the view:
    [view setMapBlock: MAPBLOCK({
                                 if(![doc[@"archive"] isEqualToString:@"true"])
                                 emit(doc[@"actor"], doc);
                                     }) reduceBlock: nil version: @"1.1"];
    }
  ___return(view);
  //#)


(c-external (tasksInstancesByTask cbldatabase) cblview
  #/Objective-C/
  CBLView* view = [___arg1 viewNamed: @"tasksInstancesByTask"];
  if (!view.mapBlock) 
  {
   // Register the map function, the first time we access the view:
    [view setMapBlock: MAPBLOCK({
                                 if(![doc[@"archive"] isEqualToString:@"true"])
                                     emit(doc[@"task"], doc);
                                }) reduceBlock: nil version: @"1.1"];
    }
  ___return(view);
  //#)

(c-external (tasksInstancesByState cbldatabase) cblview
  #/Objective-C/
  CBLView* view = [___arg1 viewNamed: @"tasksInstancesByState"];
  if (!view.mapBlock) 
  {
   // Register the map function, the first time we access the view:
    [view setMapBlock: MAPBLOCK({
                                 if(![doc[@"archive"] isEqualToString:@"true"])
                                    emit(doc[@"state"], doc);
                                    }) reduceBlock: nil version: @"1.1"];
    }
  ___return(view);
  //#)
      

;;;
;;;; filter
;;;


(c-external (setFamilyFilter cbldatabase) void 
  #/Objective-C/
  [___arg1 setFilterNamed:@"familyApp/familyFilter" asBlock:FILTERBLOCK({
                      
    NSString* fID = params[@"familyID"];
    return fID && [revision[@"familyID"] isEqualToString: fID];
})];
  //#)


;;;
;;;; Types conversion
;;;


(c-external (nsstring->string nsstring) nonnull-UTF-8-string
  #/Objective-C/
  ___return((char *)[___arg1 cStringUsingEncoding:NSUTF8StringEncoding]);
  //#)


(c-external (string->nsstring nonnull-UTF-8-string) nsstring
  #/Objective-C/
  ___return([NSString stringWithCString:___arg1 encoding:NSUTF8StringEncoding]);
  //#)


(c-type nsnumber (pointer "NSNumber"))


(c-external (nsnumber->integer nsnumber) int
  #/Objective-C/
  ___return([___arg1 intValue]);
  //#)


(c-external (integer->nsnumber int) nsnumber
  #/Objective-C/
  ___return([NSNumber numberWithInt:___arg1]);
  //#)


(c-external (float->nsnumber float) nsnumber
  #/Objective-C/
  ___return([NSNumber numberWithFloat:___arg1]);
  //#)


(c-external (isNSString? id) int
  #/Objective-C/
  ___return([(id)___arg1 isKindOfClass:[NSString class]]);
  //#)


(c-external (isNSArray? id) int
  #/Objective-C/
  ___return([(id)___arg1 isKindOfClass:[NSArray class]]);
  //#)


(c-external (isNSDictionary? id) int
  #/Objective-C/
  ___return([(id)___arg1 isKindOfClass:[NSDictionary class]]);
  //#)


(c-external (isNSNumber? id) int
  #/Objective-C/
  ___return([(id)___arg1 isKindOfClass:[NSNumber class]]);
  //#)


(c-external (printObjCObject id) void
  #/Objective-C/
  NSLog(@"%@",___arg1);
  //#)

;(printObjCObject #188 )

(definition public (objectiveCobject->scheme obj)
  (cond
    ((= (isNSString? obj) 1)
     (nsstring->string obj))
    ((= (isNSNumber? obj) 1)
     (nsnumber->integer obj))
    ((= (isNSArray? obj) 1)
     (map objectiveCobject->scheme (nsarray->list obj)))
    ((= (isNSDictionary? obj) 1)
     (nsdictionary->table obj))
    ((boolean? obj)
     obj)
    (#t 
      (error (string-append "Unsupported objC object:" (object->string obj))))))



(definition public (schemeObject->objectiveCobject value)
  (cond
    ((boolean? value)
     (integer->nsnumber (if value 1 0)))
    ((string? value)
     (string->nsstring value))
    ((and (number? value) (inexact? value))
     (float->nsnumber value))
    ((and (integer? value) (exact? value))
     (integer->nsnumber value))
    ((list? value)
     (list->nsarray (map schemeObject->objectiveCobject value)))
    ((table? value)
     (table->nsdictionary value))
    ((procedure? value)
     (integer->nsnumber 0))
    (#t 
      (error (string-append "Unsupported scheme object:" (object->string value)))
      
      )))


;;;
;;;; tests
;;;


(definition public (test-translation)
  (schemeObject->objectiveCobject 
    (list->table '(("a" . "toot")
                   ("beoe" . ("1" "3" "4"))
                   ("cckd" . "toto")))))
  

(definition public (test-types)
  (isNSString? (string->nsstring "toto")))

))