;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Angry Jazz
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module angry.jazz jazz


(import (jazz.cairo)
        (jazz.debuggee)
        (jazz.graphic)
        (jazz.platform))


;(load-verbose? #t)


(definition (ddd . rest)
  (display rest)
  (newline)
  (force-output))


@w
(thread-start!
  (make-thread
    (lambda ()
      (current-process-title-set! "AngryJazz")
      (set-default-context 'angry.jazz)
      (setup-debuggee debugger: "192.168.1.100:9000")
      (ddd 'connected 'in (- (current-seconds) kernel-boot))
      (start-repl))))


(definition (paint context width height)
  (let ((surface (new Surface (cairo_quartz_surface_create_for_cg_context context width height))))
    ;(fill-rect~ surface {Rect 0 0 1000 1000} {Color Red})
    (set-font~ surface {Font Label})
    (draw-text~ surface 50 50 "Angry World!" {Color White})
    (set-% (slot-value surface 'glyph-array))
    (set-%l (slot-value surface 'glyph-array-length))
    ;(get-text-extent~ surface "Hello")
    (fill-rect~ surface {Rect 0 0 100 100} {Color Red})
    (gradient-fill-rect~ surface {Rect 0 200 400 400} (list (list 0 {Color Red}) (list 1 {Color Blue})))
    (frame-round-rect~ surface {Rect 200 50 400 100} {Color Dark-Green})
    (ellipse~ surface {Rect 50 450 150 550} {Color Ochre} {Color Yellow})))


(set-paint-callback paint)


(platformCreateWindow)


(ddd 'ready 'in (- (current-seconds) kernel-boot)))
