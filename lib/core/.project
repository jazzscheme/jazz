;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Project
;;;


(data jazz.ide.data.project


(import (jazz.editor.jazz))


(form
  (<Project>                                      catalog?: #t catalog-extensions: :text include-extensions: :text catalog-name: core
    (<Project-Directory>                          directory: {Directory :context "src"}
      (<Project-Directory>                        directory: {Directory :context "src" "core"}
        (<Project-Directory>                      directory: {Directory :context "src" "core" "base"}
          (<Project-Directory>                    directory: {Directory :context "src" "core" "base" "runtime"}
            (<Project-File>                       source: {File :context "src" "core" "base" "runtime" "_runtime.scm"})
            (<Project-File>                       source: {File :context "src" "core" "base" "runtime" "boolean.scm"})
            (<Project-File>                       source: {File :context "src" "core" "base" "runtime" "error.scm"})
            (<Project-File>                       source: {File :context "src" "core" "base" "runtime" "exception.scm"})
            (<Project-File>                       source: {File :context "src" "core" "base" "runtime" "keyword.scm"})
            (<Project-File>                       source: {File :context "src" "core" "base" "runtime" "list.scm"})
            (<Project-File>                       source: {File :context "src" "core" "base" "runtime" "reader.scm"})
            (<Project-File>                       source: {File :context "src" "core" "base" "runtime" "serial.scm"})
            (<Project-File>                       source: {File :context "src" "core" "base" "runtime" "string.scm"})
            (<Project-File>                       source: {File :context "src" "core" "base" "runtime" "symbol.scm"})
            (<Project-File>                       source: {File :context "src" "core" "base" "runtime" "syntax.scm"})
            (<Project-File>                       source: {File :context "src" "core" "base" "runtime" "unspecified.scm"})
            (<Project-File>                       source: {File :context "src" "core" "base" "runtime" "vector.scm"}))
          (<Project-Directory>                    directory: {Directory :context "src" "core" "base" "syntax"}
            (<Project-File>                       source: {File :context "src" "core" "base" "syntax" "_syntax.scm"})
            (<Project-File>                       source: {File :context "src" "core" "base" "syntax" "macros.scm"}))
          (<Project-File>                         source: {File :context "src" "core" "base" "_base.scm"}))
        (<Project-Directory>                      directory: {Directory :context "src" "core" "class"}
          (<Project-Directory>                    directory: {Directory :context "src" "core" "class" "runtime"}
            (<Project-File>                       source: {File :context "src" "core" "class" "runtime" "_runtime.scm"})
            (<Project-File>                       source: {File :context "src" "core" "class" "runtime" "output-hook.scm"})
            (<Project-File>                       source: {File :context "src" "core" "class" "runtime" "output.scm"})
            (<Project-File>                       source: {File :context "src" "core" "class" "runtime" "runtime.scm"}))
          (<Project-Directory>                    directory: {Directory :context "src" "core" "class" "syntax"}
            (<Project-File>                       source: {File :context "src" "core" "class" "syntax" "_syntax.scm"})
            (<Project-File>                       source: {File :context "src" "core" "class" "syntax" "class.scm"})
            (<Project-File>                       source: {File :context "src" "core" "class" "syntax" "classes.scm"})
            (<Project-File>                       source: {File :context "src" "core" "class" "syntax" "define-class.scm"})
            (<Project-File>                       source: {File :context "src" "core" "class" "syntax" "define-method-expander.scm"})
            (<Project-File>                       source: {File :context "src" "core" "class" "syntax" "define-method.scm"})
            (<Project-File>                       source: {File :context "src" "core" "class" "syntax" "error.scm"})
            (<Project-File>                       source: {File :context "src" "core" "class" "syntax" "object.scm"}))
          (<Project-File>                         source: {File :context "src" "core" "class" "_class.scm"}))
        (<Project-Directory>                      directory: {Directory :context "src" "core" "exception"}
          (<Project-Directory>                    directory: {Directory :context "src" "core" "exception" "runtime"}
            (<Project-File>                       source: {File :context "src" "core" "exception" "runtime" "error.scm"})
            (<Project-File>                       source: {File :context "src" "core" "exception" "runtime" "exception.scm"}))
          (<Project-Directory>                    directory: {Directory :context "src" "core" "exception" "syntax"}
            (<Project-File>                       source: {File :context "src" "core" "exception" "syntax" "classes.scm"}))
          (<Project-File>                         source: {File :context "src" "core" "exception" "_exception.scm"}))
        (<Project-Directory>                      directory: {Directory :context "src" "core" "generic"}
          (<Project-Directory>                    directory: {Directory :context "src" "core" "generic" "runtime"}
            (<Project-File>                       source: {File :context "src" "core" "generic" "runtime" "_runtime.scm"})
            (<Jazz-File>         name: Dispatcher source: {File :context "src" "core" "generic" "runtime" "Dispatcher.jazz"})
            (<Project-File>                       source: {File :context "src" "core" "generic" "runtime" "generic.scm"})
            (<Project-File>                       source: {File :context "src" "core" "generic" "runtime" "specific.scm"}))
          (<Project-Directory>                    directory: {Directory :context "src" "core" "generic" "syntax"}
            (<Project-File>                       source: {File :context "src" "core" "generic" "syntax" "_syntax.scm"})
            (<Project-File>                       source: {File :context "src" "core" "generic" "syntax" "expander.scm"})
            (<Project-File>                       source: {File :context "src" "core" "generic" "syntax" "generic.scm"})
            (<Project-File>                       source: {File :context "src" "core" "generic" "syntax" "specific.scm"}))
          (<Project-File>                         source: {File :context "src" "core" "generic" "_generic.scm"}))
        (<Project-Directory>                      directory: {Directory :context "src" "core" "unit"}
          (<Project-Directory>                    directory: {Directory :context "src" "core" "unit" "builder"}
            (<Project-File>                       source: {File :context "src" "core" "unit" "builder" "_builder.scm"}))
          (<Project-File>                         source: {File :context "src" "core" "unit" "_unit.scm"}))
        (<Project-Directory>                      directory: {Directory :context "src" "core" "module"}
          (<Project-Directory>                    directory: {Directory :context "src" "core" "module" "runtime"}
            (<Project-File>                       source: {File :context "src" "core" "module" "runtime" "_runtime.scm"})
            (<Project-File>                       source: {File :context "src" "core" "module" "runtime" "autoload.scm"}))
          (<Project-Directory>                    directory: {Directory :context "src" "core" "module" "syntax"}
            (<Project-Directory>                  directory: {Directory :context "src" "core" "module" "syntax" "dialect"}
              (<Project-File>                     source: {File :context "src" "core" "module" "syntax" "dialect" "_dialect.scm"})
              (<Project-File>                     source: {File :context "src" "core" "module" "syntax" "dialect" "syntax.scm"}))
            (<Project-Directory>                  directory: {Directory :context "src" "core" "module" "syntax" "walker"}
              (<Project-File>                     source: {File :context "src" "core" "module" "syntax" "walker" "_walker.scm"})
              (<Project-File>                     source: {File :context "src" "core" "module" "syntax" "walker" "expression.scm"})
              (<Project-File>                     source: {File :context "src" "core" "module" "syntax" "walker" "ffi.scm"})
              (<Project-File>                     source: {File :context "src" "core" "module" "syntax" "walker" "register.scm"}))
            (<Project-File>                       source: {File :context "src" "core" "module" "syntax" "_syntax.scm"})
            (<Project-File>                       source: {File :context "src" "core" "module" "syntax" "classes.scm"})
            (<Project-File>                       source: {File :context "src" "core" "module" "syntax" "module.scm"}))
          (<Project-File>                         source: {File :context "src" "core" "module" "_module.scm"})
          (<Project-File>                         source: {File :context "src" "core" "module" "development.scm"})
          (<Project-File>                         source: {File :context "src" "core" "module" "initialize.scm"})))))))
