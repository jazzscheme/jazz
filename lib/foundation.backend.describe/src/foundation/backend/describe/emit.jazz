;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Foundation Describe Backend
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module foundation.backend.describe.emit jazz


(import (jazz.backend))


;;;
;;;; Module
;;;


(define-emit (module (describe backend) declaration environment)
  (let ((name (get-name~ declaration))
        (dialect-name (get-dialect-name~ declaration))
        (body-expansion (jazz:emit-namespace-statements (get-body~ declaration) declaration environment backend)))
    `(module ,name ,dialect-name
       ,@body-expansion)))


;;;
;;;; Declare
;;;


(define-emit (declare (describe backend) expression declaration environment)
  (let ((declarations (get-declarations~ expression)))
    `(declare ,@declarations)))


;;;
;;;; Proclaim
;;;


(define-emit (proclaim (describe backend) expression declaration environment)
  #f)


;;;
;;;; Begin
;;;


(define-emit (begin (describe backend) expression declaration environment code)
  `(begin ,@(jazz:sourcified-form code)))


;;;
;;;; Lambda
;;;


(define-emit (lambda (describe backend) expression declaration environment signature-emit signature-casts cast-body)
  `(lambda ,signature-emit
     ,cast-body))


;;;
;;;; Let
;;;


(define-emit (let (describe backend) expression declaration environment bindings-output body-code)
  `(let ,bindings-output
     ,@(jazz:sourcified-form body-code)))


;;;
;;;; Named Let
;;;


(define-emit (named-let (describe backend) expression declaration environment variable-emit bindings-output body-code)
  `(let ,variable-emit ,bindings-output
     ,@(jazz:sourcified-form body-code)))


;;;
;;;; Letstar
;;;


(define-emit (letstar (describe backend) expression declaration environment bindings-output body-code)
  `(let* ,bindings-output
     ,@(jazz:sourcified-form body-code)))


;;;
;;;; Letrec
;;;


(define-emit (letrec (describe backend) expression declaration environment bindings-output body-code)
  `(letrec ,bindings-output
     ,@(jazz:sourcified-form body-code)))


;;;
;;;; Receive
;;;


(define-emit (receive (describe backend) expression declaration environment bindings-output expression-output body-code)
  `(receive ,bindings-output
       ,expression-output
     ,@(jazz:sourcified-form body-code)))


;;;
;;;; And
;;;


(define-emit (and (describe backend) expression declaration environment expressions)
  `(and ,@(jazz:codes-forms expressions)))


;;;
;;;; Or
;;;


(define-emit (or (describe backend) expression declaration environment expressions)
  `(or ,@(jazz:codes-forms expressions)))


;;;
;;;; If
;;;


(define-emit (if (describe backend) expression declaration environment test yes no)
  `(if ,(jazz:sourcified-form test)
       ,(jazz:sourcified-form yes)
     ,(jazz:sourcified-form no)))


;;;
;;;; Cond
;;;


(define-emit (cond (describe backend) expression declaration environment clauses)
  `(cond))


;;;
;;;; Case
;;;


(define-emit (case (describe backend) expression declaration environment target-emit clauses clauses-emit)
  `(case))


;;;
;;;; Do
;;;


(define-emit (do (describe backend) expression declaration environment bindings-output test-code result-code body-code)
  `(do ,bindings-output
       (,(jazz:sourcified-form test-code) ,@(jazz:sourcified-form result-code))
     ,@(jazz:sourcified-form body-code)))


;;;
;;;; Delay
;;;


(define-emit (delay (describe backend) expression declaration environment expr)
  `(delay ,(jazz:sourcified-form expr)))


;;;
;;;; Quasiquote
;;;


(define-emit (quasiquote (describe backend) expression declaration environment)
  (define (emit form)
    (if (pair? form)
        (if (or (eq? (car form) 'unquote)
                (eq? (car form) 'unquote-splicing))
            (list (car form) (sourcified-form (emit-expression (cadr form) declaration environment backend)))
          (cons (emit (car form)) (emit (cdr form))))
      form))
  
  (list 'quasiquote (emit (get-form~ expression))))


;;;
;;;; Parameterize
;;;


(define-emit (parameterize (describe backend) expression declaration environment body-code)
  `(parameterize))


;;;
;;;; Unspecific
;;;


(define-emit (unspecific (describe backend) expression declaration environment body-code)
  `(unspecific))


;;;
;;;; Time
;;;


(define-emit (time (describe backend) expression declaration environment expressions)
  `(time))


;;;
;;;; Reference
;;;


(define-emit (autoload-reference (describe backend) declaration environment referenced-declaration)
  `(autoload-reference))


(define-emit (define-reference (describe backend) declaration)
  `(define-reference ,(get-locator~ declaration)))


(define-emit (export-reference (describe backend) declaration)
  `(export-reference ,(get-symbol~ declaration)))


(define-emit (export-syntax-reference (describe backend) declaration)
  `(export-syntax-reference))


(define-emit (local-variable-reference (describe backend) declaration)
  `(local-variable-reference ,(get-variable~ declaration)))


(define-emit (special-form-reference (describe backend) binding)
  `(special-form-reference))


(define-emit (variable-reference (describe backend) binding source-declaration environment)
  (if (is? binding Lexical-Binding)
      (let ((type (get-type~ binding)))
        (if type
            `(variable-reference ,(get-name~ binding) ,(type->specifier type))
          `(variable-reference ,(get-name~ binding))))
    `(variable-reference ,(get-name~ binding))))


(define-emit (lexical-binding-reference (describe backend) binding)
  `(lexical-binding-reference ,(get-name~ binding)))


(define-emit (named-parameter-reference (describe backend) binding)
  `(named-parameter-reference ,(get-name~ binding)))


(define-emit (symbol-reference (describe backend) binding)
  (let ((type (get-type~ binding)))
    (if type
        `(symbol-reference ,(get-name~ binding) ,(type->specifier type))
      `(symbol-reference ,(get-name~ binding)))))


;;;
;;;; Call
;;;


(define-emit (call (describe backend) expression declaration environment)
  #f)


(define-emit (expression-call (describe backend) expression declaration operator arguments)
  `(,(jazz:sourcified-form operator) ,@(jazz:codes-forms arguments)))


;;;
;;;; Binding Call
;;;


(define-emit (walk-binding-binding-call (describe backend) binding binding-src operator arguments)
  `(,(jazz:sourcified-form2 operator binding-src)
    ,@(jazz:codes-forms arguments)))


;;;
;;;; Constant
;;;


(jazz:define-emit (constant (describe backend) expression)
  (jazz:get-constant-expansion expression))


;;;
;;;; Assignment
;;;


(define-emit (define-assignment (describe backend) declaration source-declaration environment value-code)
  `(define-assignment ,(jazz:sourcified-form value-code)))


(define-emit (variable-assignment (describe backend) binding source-declaration environment binding-code value-code)
  `(variable-assignment ,(get-name~ binding) ,(jazz:sourcified-form value-code))))
