;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Foundation JavaScript Backend
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2012
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module foundation.backend.javascript.emit jazz


(import (jazz.backend))


;;;
;;;; Module
;;;


(define-emit (module (javascript backend) declaration environment)
  (let ((body-expansion (jazz:emit-namespace-statements (get-body~ declaration) declaration environment backend)))
    `(%begin
       ,@body-expansion)))


;;;
;;;; Declare
;;;


(define-emit (declare (javascript backend) expression declaration environment)
  #f)


;;;
;;;; Proclaim
;;;


(define-emit (proclaim (javascript backend) expression declaration environment)
  #f)


;;;
;;;; Begin
;;;


(define-emit (begin (javascript backend) expression declaration environment code)
  `(%begin ,@(jazz:sourcified-form code)))


;;;
;;;; Reference
;;;


(define-emit (autoload-reference (javascript backend) declaration environment referenced-declaration)
  (unimplemented 'autoload-reference))


(define-emit (define-reference (javascript backend) declaration)
  (get-locator~ declaration))


(define-emit (export-reference (javascript backend) declaration)
  (get-symbol~ declaration))


(define-emit (export-syntax-reference (javascript backend) declaration)
  (get-symbol~ declaration))


(define-emit (local-variable-reference (javascript backend) declaration)
  (get-variable~ declaration))


(define-emit (special-form-reference (javascript backend) binding)
  (get-name~ binding))


(define-emit (variable-reference (javascript backend) binding source-declaration environment)
  (get-name~ binding))


(define-emit (lexical-binding-reference (javascript backend) binding)
  (get-name~ binding))


(define-emit (named-parameter-reference (javascript backend) binding)
  (get-name~ binding))


(define-emit (symbol-reference (javascript backend) binding)
  (get-name~ binding))


;;;
;;;; Call
;;;


(define-emit (call (javascript backend) expression declaration environment)
  #f)


(define-emit (expression-call (javascript backend) expression declaration operator arguments)
  `(,(jazz:sourcified-form operator) ,@(jazz:codes-forms arguments)))


;;;
;;;; Binding Call
;;;


(define-emit (walk-binding-binding-call (javascript backend) binding binding-src operator arguments)
  `(,(jazz:sourcified-form operator) ,@(jazz:codes-forms arguments)))


;;;
;;;; Assignment
;;;


(define-emit (define-assignment (javascript backend) declaration source-declaration environment value-code)
  (let ((locator (get-locator~ declaration)))
    `(c= ,locator ,(jazz:sourcified-form value-code))))


(define-emit (variable-assignment (javascript backend) binding source-declaration environment binding-code value-code)
  `(c= ,binding-code ,(jazz:sourcified-form value-code))))
