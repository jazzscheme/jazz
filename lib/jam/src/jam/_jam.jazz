;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Jam
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module jam jazz


(import (jazz.core)
        (jazz.runtime))


(definition package (mode-argument arguments)
  (if (member? "-analysis" arguments)
      'analysis
    'interactive))


(definition package (port-argument arguments)
  (let ((pair (member "-port" arguments)))
    (when (and pair (pair? (cdr pair)))
      (string->number (cadr pair)))))


(definition package (product-argument arguments)
  (let ((target (string->symbol (last arguments)))
        (products '()))
    (for-each (lambda (repository)
                (unless (repository-binary? repository)
                  (iterate-packages repository
                    (lambda (package)
                      (for-each (lambda (product)
                                  (when (product-descriptor-named? product target)
                                    (set! products (cons (cons package product) products))))
                                (package-products package))))))
              (get-repositories))
    (cond ((null? products)
           (format :console "Unable to find product {s}" target)
           (exit))
          ((> (length products) 1)
           (format :console "Ambiguous name: {s}" target)
           (exit))
          (else
           (bind (package . product) (car products)
             (values package product))))))


(definition package (product-description package product)
  (or (product-descriptor-description product) (package-description package)))


(definition package (iterate-binding-references module-declaration proc)
  (tree-fold
    module-declaration
    (lambda (obj seed env) env)
    (lambda (obj seed child-seed env) seed)
    (lambda (obj seed env)
      (if (jazz:is? obj jazz:Binding-Reference)
          (proc obj))
      seed)
    #f
    #f))


(definition package (marshall-locat locat)
  (bind (container line col) (locat->container/line/col locat)
    (list (resource-pathname (find-unit-src container)) line col))))
