;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Jam Dependencies
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module jam.dependencies jazz


(import (jam)
        (jazz.runtime))


(definition (package-dependencies)
  (let ((package (package-argument)))
    (let ((name (package-name package))
          (description (package-description package))
          (authors (package-authors package))
          (stage (package-stage package))
          (products (package-products package)))
      (if description
          (format :console "{a}{? ({a})~}{?, {a}~}{?, {l detail: :human separator: \", \"}~}{%}" name stage description authors)
        (format :console "{a}{%}" name))
      (let ((units (package-units package))
            (explicit (map product-package (cond-expanded-product-descriptor-dependencies name (package-product package))))
            (implicit (make-table test: eq?)))
        (define (add package)
          (let ((name (package-name package)))
            (unless (table-ref implicit name #f)
              (table-set! implicit name package)
              #t)))
        
        (define (add-unit unit-name)
          (add (resource-package (find-unit-src unit-name))))
        
        (define (follow unit)
          (let ((declaration (or (walk-unit unit) (outline-unit unit))))
            (for-each (lambda (require-invoice)
                        (add-unit (get-name~ require-invoice)))
                      (get-unit/module-requires declaration))
            (when (is? declaration Module-Declaration)
              (add-unit (get-dialect-name~ declaration))
              (iterate-table (get-references~ (get-walker~ declaration))
                (lambda (locator declaration)
                  (let ((resolved-declaration (resolve-binding declaration)))
                    (let ((module (get-toplevel~ resolved-declaration)))
                      (add (get-container~ module)))))))))
        
        (define (present names (suffix #f))
          (for-each (lambda (name)
                      (format :console "  {a}{? ({a})~}{%}" name suffix))
                    (sort ci<? names)))
        
        (for-each follow units)
        (let ((explicit (map package-name explicit))
              (implicit (remove name (table-keys implicit))))
          (present (intersection explicit implicit))
          (present (difference explicit implicit) "unneeded")
          (present (difference implicit explicit) "missing"))))))


(register-product-run 'jam-dependencies
  (lambda (descriptor)
    (package-dependencies))))
