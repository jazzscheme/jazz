(module jam.info jazz


(import (jazz.runtime))


(definition (info-packages)
  (define (package-product package)
    (assq (package-name package) (package-products package)))
  
  (let ((target (last (command-arguments)))
        (repositories (get-repositories))
        (packages '()))
    (for-each (lambda (repository)
                (unless (repository-binary? repository)
                  (iterate-packages repository
                    (lambda (package)
                      (when (search (symbol->string (package-name package)) target)
                        (set! packages (cons package packages)))))))
              repositories)
    (let ((sorted (sort ci<? packages key: (lambda (package) (symbol->string (package-name package))))))
      (for-each (lambda (package)
                  (unless (eq? package (car sorted))
                    (format :console "{%}"))
                  (let ((name (package-name package))
                        (description (package-description package))
                        (authors (package-authors package)))
                    (if description
                        (format :console "{a}{?, {a}~}{?, {l detail: :human separator: \", \"}~}{%}" name description authors)
                      (format :console "{a}{%}" name))
                    (let ((product (package-product package)))
                      (for-each (lambda (dependency)
                                  (format :console "  {a}{%}" dependency))
                                (cond-expanded-product-descriptor-dependencies name product)))))
                sorted))))


(register-product-run 'jam-info
  (lambda (descriptor)
    (info-packages))))
