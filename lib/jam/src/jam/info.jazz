;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Jam Info
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module jam.info jazz


(import (jam)
        (jazz.runtime))


(definition package (jam-info arguments)
  (let ((output (current-output-port))
        (target (string->symbol (last arguments)))
        (repositories (get-repositories))
        (products '()))
    (for-each (lambda (repository)
                (unless (repository-binary? repository)
                  (iterate-packages repository
                    (lambda (package)
                      (for-each (lambda (product)
                                  (when (product-descriptor-named? product target)
                                    (set! products (cons (cons package product) products))))
                                (package-products package))))))
              repositories)
    (let ((sorted (sort ci<? products key: (lambda (info) (symbol->string (product-descriptor-name (cdr info)))))))
      (for-each (lambda (info)
                  (bind (package . product) info
                    (unless (eq? info (car sorted))
                      (format output "{%}"))
                    (let ((name (product-descriptor-name product))
                          (description (product-description package product))
                          (authors (package-authors package))
                          (stage (package-stage package))
                          (products (package-products package)))
                      (if description
                          (format output "{a}{? ({a})~}{?, {a}~}{?, {l detail: :human separator: \", \"}~}{%}" name stage description authors)
                        (format output "{a}{%}" name))
                      (format output "  dependencies: {l detail: :human separator: \", \"}{%}"
                        (cond-expanded-product-descriptor-dependencies name product))
                      (let ((names (map car products)))
                        (when (or (/= (length names) 1)
                                  (neq? (car names) name))
                          (format output "  products: {l detail: :human separator: \", \"}{%}"
                            names))))))
                sorted))
    (force-output output))))
