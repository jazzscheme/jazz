;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Jam List
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module jam.list jazz


(import (jazz.runtime))


(definition package (jam-list arguments)
  (define stages
    '(release candidate beta alpha experimental sample internal outdated obsolete))
  
  (let ((output (current-output-port))
        (repositories (repositories-get))
        (packages '()))
    (for-each (lambda (repository)
                (unless (repository-binary? repository)
                  (iterate-packages repository
                    (lambda (package)
                      (set! packages (cons package packages))))))
              repositories)
    (let ((partitions (partition packages key: package-stage)))
      (let ((sorted (sort < partitions key: (lambda (partition) (let ((stage (car partition))) (or (find stages stage) +infinity))))))
        (for-each (lambda (partition)
                    (bind (stage . packages) partition
                      (unless (eq? partition (car sorted))
                        (format output "{%}"))
                      (format output "{a}{%}" (or stage 'unstaged))
                      (for-each (lambda (package)
                                  (let ((name (package-name package))
                                        (description (package-description package))
                                        (authors (package-authors package)))
                                    (if description
                                        (format output "  {a}{?, {a}~}{?, {l detail: :human separator: \", \"}~}{%}" name description authors)
                                      (format output "  {a}{%}" name))))
                                (sort ci<? packages key: package-name))))
                  sorted)))
    (force-output output))))
