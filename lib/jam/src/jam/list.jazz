(module jam.list jazz


(import (jazz.runtime))


(definition (list-packages)
  (define stages
    '(release candidate beta alpha experimental sample internal outdated obsolete))
  
  (let ((repositories (get-repositories))
        (packages '()))
    (for-each (lambda (repository)
                (unless (repository-binary? repository)
                  (iterate-packages repository
                    (lambda (package)
                      (set! packages (cons package packages))))))
              repositories)
    (let ((partitions (partition packages key: package-stage)))
      (let ((sorted (sort < partitions key: (lambda (partition) (let ((stage (car partition))) (or (find stages stage) +infinity))))))
        (for-each (lambda (partition)
                    (bind (stage . packages) partition
                      (unless (eq? partition (car sorted))
                        (format :console "{%}"))
                      (format :console "{a}{%}" (or stage 'unstaged))
                      (for-each (lambda (package)
                                  (let ((name (package-name package))
                                        (description (package-description package))
                                        (authors (package-authors package)))
                                    (if description
                                        (format :console "  {a}{?, {a}~}{?, {l detail: :human separator: \", \"}~}{%}" name description authors)
                                      (format :console "  {a}{%}" name))))
                                (sort ci<? packages key: package-name))))
                  sorted)))))


(register-product-run 'jam-list
  (lambda (descriptor)
    (list-packages))))
