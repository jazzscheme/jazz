;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Jam References
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module jam.references jazz


(import (jam)
        (jazz.runtime))


(definition (package-references)
  (let ((output (current-output-port))
        (package (package-argument)))
    (let ((name (package-name package))
          (description (package-description package))
          (authors (package-authors package))
          (stage (package-stage package))
          (products (package-products package)))
      (if description
          (format output "{a}{? ({a})~}{?, {a}~}{?, {l detail: :human separator: \", \"}~}{%}" name stage description authors)
        (format output "{a}{%}" name))
      (let ((units (package-units package))
            (explicit (map product-package (cond-expanded-product-descriptor-dependencies name (package-product package))))
            (implicit (make-table test: eq?))
            (references (make-table test: eq?)))
        (define (add toplevel package)
          (let ((name (get-name~ toplevel)))
            (unless (table-ref references name #f)
              (table-set! implicit (package-name package) package)
              (table-set! references name toplevel)
              #t)))
        
        (define (follow unit)
          (follow-declaration (walk-unit unit)))
        
        (define (follow-declaration declaration)
          (typecase declaration
            ((Unit-Declaration)
             (when (add declaration (get-container~ declaration))
               (for-each follow (get-requires~ declaration))))
            ((Module-Declaration)
             (when (add declaration (get-container~ declaration))
               (iterate-table (get-references~ (get-walker~ declaration))
                 (lambda (locator declaration)
                   (let ((resolved-declaration (resolve-binding declaration)))
                     (let ((module (get-toplevel~ resolved-declaration)))
                       (follow-declaration module)))))))))
        
        (for-each follow units)
        (format output "  Found {a} references in{%}" (table-length references))
        (for-each (lambda (name)
                    (format output "    {a}{%}" name))
                  (sort ci<? (table-keys implicit)))))
    (force-output output)))


(register-product-run 'jam-references
  (lambda (descriptor)
    (package-references))))
