;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Jam References
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module jam.references jazz


(import (jam)
        (jazz.runtime))


(definition package (jam-references arguments)
  (receive (package product) (product-argument arguments)
    (let ((output (current-output-port))
          (name (product-descriptor-name product))
          (description (product-description package product))
          (authors (package-authors package))
          (stage (package-stage package)))
      (if description
          (format output "{a}{? ({a})~}{?, {a}~}{?, {l detail: :human separator: \", \"}~}{%}" name stage description authors)
        (format output "{a}{%}" name))
      (let ((units (product-descriptor-units package product))
            (explicit (cond-expanded-product-descriptor-dependencies name product))
            (implicit (make-table test: eq?))
            (references (make-table test: eq?))
            (delayed (make-table test: eq?))
            (done (make-table test: eq?)))
        (define (add-toplevel toplevel package path)
          (let ((name (get-name toplevel)))
            (unless (table-ref references name #f)
              (table-set! implicit (package-name package) package)
              (table-set! references name path)
              #t)))
        
        (define (delay-toplevel toplevel path)
          (let ((name (get-name toplevel)))
            (unless (or (table-ref references name #f)
                        (table-ref delayed name #f)
                        (table-ref done name #f))
              (table-set! delayed name path))))
        
        (define (follow-root unit)
          (follow-unit unit '()))
        
        (define (follow-unit unit path)
          (follow-toplevel (walk/outline-unit unit) path))
        
        (define (follow-toplevel toplevel path)
          (when (add-toplevel toplevel (get-unit/module-container toplevel) path)
            (for-each (lambda (require-invoice)
                        (follow-unit (get-name require-invoice) (cons (get-name toplevel) path)))
                      (get-unit/module-requires toplevel))
            (when (is? toplevel Module-Declaration)
              (iterate-table (get-references (get-walker toplevel))
                (lambda (locator declaration)
                  (let ((resolved-declaration (resolve-binding declaration)))
                    (delay-toplevel (get-toplevel resolved-declaration) (cons (get-name toplevel) path))))))))
        
        (for-each follow-root units)
        (let (loop)
          (let ((units/paths (table-keys/values delayed)))
            (iterate-table delayed
              (lambda (name toplevel)
                (table-clear delayed name)
                (table-set! done name #t)))
            (for-each (lambda (unit/path)
                        (bind (unit . path) unit/path
                          (follow-unit unit path)))
                      units/paths))
          (when (/= (table-length delayed) 0)
            (loop)))
        (format output "  Found {a} references in {a} packages{%}" (table-length references) (table-length implicit))
        (let ()
          (define (package-missing? package-name)
            (and (not (eq? package-name name))
                 (not (memq? package-name explicit))))
          
          (if (member? "-list" arguments)
              (for-each (lambda (partition)
                          (bind (package-name . units) partition
                            (assert (table-ref implicit package-name #f))
                            (format output "    {a}{? ({a})~}{%}" package-name (and (package-missing? package-name) "missing"))
                            (for-each (lambda (name)
                                        (format output "      {a} {l}{%}" name (table-ref references name)))
                                      (sort ci<? units))))
                        (sort ci<? (partition (table-keys references) key: (lambda (name) (package-name (get-unit/module-container (walk/outline-unit name))))) key: car))
            (for-each (lambda (package-name)
                        (format output "    {a}{? ({a})~}{%}" package-name (and (package-missing? package-name) "missing")))
                      (sort ci<? (table-keys implicit))))))
      (force-output output)))))
