(module jam.search jazz


(import (jazz.runtime))


(definition (search-packages)
  (define (package-product package)
    (assq (package-name package) (package-products package)))
  
  (let ((target (last (command-arguments)))
        (repositories (get-repositories))
        (packages '()))
    (define (search-field field)
      (and field (search field target ignore-case?: #t ignore-diacritic?: #t)))
    
    (for-each (lambda (repository)
                (unless (repository-binary? repository)
                  (iterate-packages repository
                    (lambda (package)
                      (when (or (search-field (symbol->string (package-name package)))
                                (search-field (package-title package))
                                (search-field (package-description package)))
                        (set! packages (cons package packages)))))))
              repositories)
    (let ((sorted (sort ci<? packages key: (lambda (package) (symbol->string (package-name package))))))
      (for-each (lambda (package)
                  (unless (eq? package (car sorted))
                    (format :console "{%}"))
                  (let ((name (package-name package))
                        (description (package-description package))
                        (authors (package-authors package))
                        (stage (package-stage package)))
                    (if description
                        (format :console "{a}{? ({a})~}{?, {a}~}{?, {l detail: :human separator: \", \"}~}" name stage description authors)
                      (format :console "{a}" name))))
                sorted))))


(register-product-run 'jam-search
  (lambda (descriptor)
    (search-packages))))
