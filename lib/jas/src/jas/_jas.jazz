;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; JAS
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module jas jazz


(import (jazz.associative)
        (jazz.associative.client)
        (jazz.associative.remote)
        (jazz.io))


(definition package (jas$help arguments)
  (with-jas
    (lambda (output)
      (format output "Usage:{%}")
      (format output "  jas init{%}")
      (format output "  jas config{%}")
      (format output "  jas add{%}")
      (format output "  jas remove{%}")
      (format output "  jas list (git ls-files){%}")
      (format output "  jas commit{%}")
      (format output "  jas discard (git reset --hard){%}")
      (format output "  jas restore{%}")
      (format output "  jas reset{%}")
      (format output "  jas branch{%}")
      (format output "  jas checkout{%}")
      (format output "  jas status{%}")
      (format output "  jas diff{%}")
      (format output "  jas log{%}")
      (format output "  jas clone{%}")
      (format output "  jas download{%}")
      (format output "  jas upload{%}")
      (format output "  jas parse{%}")
      (format output "  jas retrieve{%}")
      (format output "  jas scan{%}")
      (format output "  jas cat (git cat-file){%}")
      (format output "  jas collect (git gc){%}")
      (format output "{%}")
      (format output "Help:{%}")
      (format output "  jas help{%}")
      (force-output output))))


(definition package (jas$init arguments)
  (with-jas
    (lambda (output)
      (let ((dir (current-directory-get))
            (bare? (jas-switch arguments "bare"))
            (open? (jas-switch arguments "open")))
        (if (and bare? open?)
            (format output "A repository cannot be both bare and open{%}")
          (let ((repo (jas-init dir bare?: bare? open?: open?)))
            (format output "Initialized empty JAS repository in {a}{%}" (parse (get-directory repo)))))))))


(definition package (jas$config arguments)
  (with-jas
    (lambda (output)
      (if (null? arguments)
          (format output "Not enough arguments for jas config{%}")
        (let ((repo (jas-open (jas-directory "."))))
          (bind (command . arguments) arguments
            (cond ((equal? command "get")
                   (bind (key) arguments
                     (let ((key (string->symbol key)))
                       (format output "{a}{%}" (jas-config-get repo key)))))
                  ((equal? command "set")
                   (bind (key value) arguments
                     (let ((key (string->symbol key)))
                       (jas-config-set repo key value)
                       (format output "{a} set to {a}{%}" key value))))
                  (else
                   (format output "Unknown jas config command: {a}{%}" command)))))))))


(definition package (jas$add arguments)
  (with-jas
    (lambda (output)
      (if (null? arguments)
          (format output "Not enough arguments for jas add{%}")
        (let ((path (car arguments))
              (repo (jas-open (jas-directory "."))))
          (jas-add repo path))))))


(definition package (jas$remove arguments)
  (with-jas
    (lambda (output)
      (if (null? arguments)
          (format output "Not enough arguments for jas remove{%}")
        (let ((path (car arguments))
              (repo (jas-open (jas-directory "."))))
          (jas-remove repo path))))))


(definition package (jas$list arguments)
  (with-jas
    (lambda (output)
      (let ((repo (jas-open (jas-directory "."))))
        (let ((index (cond ((jas-switch arguments "head" "h")
                            (jas-head-index repo))
                           ((jas-switch arguments "working" "work" "w")
                            (jas-working-index repo))
                           (else
                            (jas-staging-index repo)))))
          (jas-describe index output))))))


(definition package (jas$commit arguments)
  (with-jas
    (lambda (output)
      (let ((repo (jas-open (jas-directory ".")))
            (message (jas-argument arguments "message" "m"))
            (all? (jas-switch arguments "all" "a")))
        (if (not message)
            (format output "Missing commit message{%}")
          ;; for now also include new files
          (when all?
            (jas-add repo "."))
          (let ((author (jas-config-get repo 'user.name))
                (email (jas-config-get repo 'user.email))
                (tree (jas-staging-tree repo))
                (head (jas-read-head repo)))
            (let ((commit (jas-commit repo author email message tree (and head (jas-resolve repo head)))))
              (format output "{a}{%}" commit))))))))


(definition package (jas$discard arguments)
  (with-jas
    (lambda (output)
      (if (not-null? arguments)
          (format output "Too many arguments for jas discard{%}")
        (let ((repo (jas-open (jas-directory "."))))
          (jas-discard repo))))))


(definition package (jas$restore arguments)
  (with-jas
    (lambda (output)
      (if (null? arguments)
          (format output "Not enough arguments for jas restore{%}")
        (let ((repo (jas-open (jas-directory "."))))
          (let ((commit (jas-resolve repo (jas-parse repo (car arguments)))))
            (jas-restore repo commit)))))))


(definition package (jas$reset arguments)
  (with-jas
    (lambda (output)
      (if (null? arguments)
          (format output "Not enough arguments for jas reset{%}")
        (let ((repo (jas-open (jas-directory "."))))
          (let ((commit (jas-resolve repo (jas-parse repo (car arguments)))))
            (jas-reset repo commit)))))))


(definition package (jas$branch arguments)
  (with-jas
    (lambda (output)
      (if (not-null? arguments)
          (format output "Too many arguments for jas branch{%}")
        (let ((repo (jas-open (jas-directory "."))))
          (let ((head (jas-read-head repo))
                (branches (jas-branches repo)))
            (let ((head-branch (and (jas-branch? repo head) (jas-branch-name repo head))))
              (for-each (lambda (branch)
                          (if (equal? branch head-branch)
                              (format output "* \033[32m{a}\033[39;49m{%}" branch)
                            (format output "  {a}{%}" branch)))
                        branches))))))))


(definition package (jas$checkout arguments)
  (with-jas
    (lambda (output)
      (if (null? arguments)
          (format output "Not enough arguments for jas checkout{%}")
        (let ((repo (jas-open (jas-directory "."))))
          (let ((create? (jas-switch arguments "b"))
                (name (last arguments)))
            (let ((ref (jas-checkout repo name validate-clean?: #t create?: create?)))
              (cond (create?
                     (format output "Switched to a new branch {a}{%}" name))
                    ((jas-branch? repo ref)
                     (format output "Switched to branch {a}{%}" (jas-branch-name repo ref)))
                    (else
                     (format output "Checked out detached HEAD at {a}{%}" ref))))))))))


(definition package (jas$status arguments)
  (with-jas
    (lambda (output)
      (if (not-null? arguments)
          (format output "Too many arguments for jas status{%}")
        (let ((repo (jas-open (jas-directory "."))))
          (define (describe title diff)
            (when (not-null? (get-changes diff))
              (format output "{%}")
              (format output "{a}{%}" title)
              (jas-describe diff output)))
          
          (let ((head (jas-read-head repo)))
            (cond ((not head)
                   (format output "No commits yet{%}"))
                  ((jas-commit? repo head)
                   (format output "HEAD detached at {a}{%}" head))
                  (else
                   (format output "On branch {a}{%}" (jas-branch-name repo head))))
            (describe "Changes to be committed:" (jas-staging-status repo))
            (unless (bare? repo)
              (describe "Changes not staged for commit:" (jas-working-status repo)))
            ;; TODO
            ;; "Untracked files:"
            ))))))


(definition package (jas$diff arguments)
  (with-jas
    (lambda (output)
      (let ((repo (jas-open (jas-directory "."))))
        (if (null? arguments)
            (let ((diff (jas-working-status repo)))
              (jas-describe diff output))
          (let ((from-commit (jas-resolve repo (jas-parse repo (car arguments))))
                (to-commit (jas-resolve repo (jas-parse repo (cadr arguments)))))
            (let ((from-index (jas-commit-index repo from-commit))
                  (to-index (jas-commit-index repo to-commit)))
              (let ((diff (jas-diff repo from-index to-index)))
                (jas-describe diff output)))))))))


(definition package (jas$log arguments)
  (with-jas
    (lambda (output)
      (let ((repo (jas-open (jas-directory ".")))
            (n (jas-number-argument arguments "n")))
        (unless (eqv? n 0)
          (let ((head (jas-require-head repo)))
            (let (iter (commit (jas-resolve repo head)) (count n))
              (bind (author email message digest parent time) (jas-retrieve repo commit)
                (format output "\033[33mcommit {a}\033[39;49m{%}" commit)
                (format output "Author:{? {a}~}{? <{a}>~}{%}" author email)
                (format output "Date:   {a}{%}" time)
                (format output "{%}")
                (format output "    {a}{%}" message)
                (when parent
                  (let ((count (and count (- count 1))))
                    (when (or (not count) (> count 0))
                      (format output "{%}")
                      (iter parent count))))))))))))


(definition package (jas$clone arguments)
  (define (parse str)
    (let ((pos (find str #\:)))
      (if (not pos)
          (values str #f)
        (values (substring str 0 pos) (substring str pos (string-length str))))))
  
  (with-jas
    (lambda (output)
      (let ((dir (current-directory-get))
            (remote (car arguments)))
        (receive (remote sets) (parse (car arguments))
          (bind (host path) (split remote "/")
            (let ((dirpath (if (null? (cdr arguments))
                               path
                             (cadr arguments))))
              (let ((dir (new-directory dir (tokenise-filename dirpath))))
                (if (exists? dir)
                    (format output "Directory already exists{%}")
                  (format output "Cloning into {a}{%}" dirpath)
                  (let ((repo (jas-init dir)))
                    (jas-config-set repo 'remote remote)
                    (jas-download repo host path (or sets 'all))))))))))))


(definition package (jas$download arguments)
  (with-jas
    (lambda (output)
      (let ((what (if (or (null? arguments)
                          (starts-with? (car arguments) "-"))
                      'all
                    (car arguments)))
            (cache (jas-argument arguments "cache" "c")))
        (let ((repo (jas-open (jas-directory "."))))
          (let ((remote (jas-config-get repo 'remote)))
            (if (not remote)
                (format output "Remote not set{%}")
              (bind (host path) (split remote "/")
                (jas-download repo host path what cache: cache)))))))))


(definition package (jas$upload arguments)
  (with-jas
    (lambda (output)
      (let ((what (if (null? arguments)
                      'all
                    (car arguments))))
        (let ((repo (jas-open (jas-directory "."))))
          (let ((remote (jas-config-get repo 'remote)))
            (if (not remote)
                (format output "Remote not set{%}")
              (bind (host path) (split remote "/")
                (jas-upload repo host path what)))))))))


(definition package (jas$parse arguments)
  (with-jas
    (lambda (output)
      (if (null? arguments)
          (format output "Not enough arguments for jas parse{%}")
        (let ((repo (jas-open (jas-directory "."))))
          (let ((rev (car arguments)))
            (let ((revision (jas-parse repo rev)))
              (if revision
                  (format output "{a}{%}" revision)
                (format output "Unknown revision: {a}{%}" rev)))))))))


(definition package (jas$retrieve arguments)
  (with-jas
    (lambda (output)
      (if (null? arguments)
          (format output "Not enough arguments for jas retrieve{%}")
        (let ((repo (jas-open (jas-directory "."))))
          (let ((digest (jas-resolve repo (jas-parse repo (car arguments)))))
            (pp (jas-retrieve repo digest) output)))))))


(definition package (jas$scan arguments)
  (with-jas
    (lambda (output)
      (if (null? arguments)
          (format output "Not enough arguments for jas scan{%}")
        (let ((repo (jas-open (jas-directory "."))))
          (let ((path (car arguments)))
            (let ((entry (jas-scan repo path)))
              (let ((digest (get-digest entry))
                    (seconds (get-seconds entry))
                    (flags (get-flags entry))
                    (set (get-set entry)))
                (format output "{a} {a} {a} {a}{%}" digest seconds flags set)))))))))


(definition package (jas$cat arguments)
  (with-jas
    (lambda (output)
      (if (null? arguments)
          (format output "Not enough arguments for jas cat{%}")
        (let ((repo (jas-open (jas-directory "."))))
          (let ((digest (car arguments))
                (extension (cadr arguments)))
            (let ((content (retrieve-blob repo digest extension)))
              (write-subu8vector content 0 (u8vector-length content) output))))))))


(definition package (jas$collect arguments)
  (with-jas
    (lambda (output)
      (let ((dry? (jas-switch arguments "dry")))
        (let ((repo (jas-open (jas-directory "."))))
          (jas-collect repo dry?))))))


(definition package (jas$test arguments)
  (with-jas
    (lambda (output)
      (let ((repo (jas-open (jas-directory "."))))
        ))))


;;;
;;;; Client
;;;


(definition (with-jas-client repo host path access feedback what proc)
  (catch (Jas-Unable-To-Connect exc
           (format :terminal "Unable to connect to server{%}"))
    (catch (Jas-Invalid-Version exc
             (format :terminal "Invalid version{%}"))
      (catch (Jas-Invalid-Path exc
               (format :terminal "Invalid path{%}"))
        (catch (Jas-Inexistant-Repository exc
                 (format :terminal "Inexistant repository{%}"))
          (catch (Jas-Connection-Broke exc
                   (format :terminal "Connection broke{%}"))
            (let ((client (new Jas-Client repo host path access feedback: feedback)))
              (connect client)
              (proc client)
              (deconnect client))))))))


(definition package (jas-download repo host path what (cache: cache #f))
  (define new-content?
    #f)
  
  (define (feedback stage . rest)
    (case stage
      ((connect)
       (format :terminal "Connecting to {a}{%}" path))
      ((deconnect)
       (if (not new-content?)
           (format :terminal "Already up to date{%}")
         (format :terminal "{%}")))
      ((progress)
       (set! new-content? #t)
       (bind (total-objects received-objects received-bytes) rest
         (let ((percentage (fxfloor (percentage received-objects total-objects))))
           (format :terminal "Downloading {a}% ({a}/{a}) {a}\r" percentage received-objects total-objects (present-binary-bytes received-bytes)))))))
  
  (with-jas-client repo host path 'read feedback what
    (lambda (client)
      (cond ((eq? what 'all)
             (if cache
                 (let ((cache-dir (new Directory (tokenise-filename cache))))
                    (let ((cache-repository (new Associative-Repository cache-dir)))
                      (download-all-with-cache client cache-repository)))
               (download-all client)))
            ((starts-with? what ":")
             (let ((sets (map (lambda (name)
                                (cond ((empty-string? name)
                                       #f)
                                      ((ends-with? name "^")
                                       (list (string->symbol (substring name 0 (- (string-length name) 1)))))
                                      (else
                                       (string->symbol name))))
                              (split (substring what 1 (string-length what)) ":"))))
               (download-sets client sets)))
            (else
             (download-file client what))))))


(definition package (jas-upload repo host path what)
  (define new-content?
    #f)
  
  (define (feedback stage . rest)
    (case stage
      ((connect)
       (format :terminal "Connecting to {a}{%}" path))
      ((deconnect)
       (if (not new-content?)
           (format :terminal "Everything up-to-date{%}")
         (format :terminal "{%}")))
      ((progress)
       (set! new-content? #t)
       (bind (total-objects sent-objects sent-bytes) rest
         (let ((percentage (fxfloor (percentage sent-objects total-objects))))
           (format :terminal "Uploading {a}% ({a}/{a}) {a}\r" percentage sent-objects total-objects (present-binary-bytes sent-bytes)))))))
  
  (with-jas-client repo host path 'write feedback what
    (lambda (client)
      (cond ((eq? what 'all)
             (upload-all client))
            (else
             (upload-file client what))))))


;;;
;;;; Utility
;;;


(definition package (with-jas proc)
  (let ((output (current-output-port)))
    (catch (Associative-Exception exc
             (format output "{a}{%}" (get-message exc)))
      (proc output))))


(definition package (jas-directory path)
  (new Directory (tokenise-filename (pathname-normalize path))))


(definition package (jas-switch arguments . args)
  (continuation-capture
    (lambda (return)
      (define (try arg)
        (let ((arg (string-append "-" arg)))
          (when (member arg arguments)
            (continuation-return return #t))))
      
      (for-each try args)
      #f)))


(definition package (jas-argument arguments . args)
  (continuation-capture
    (lambda (return)
      (define (try arg)
        (let ((arg (string-append "-" arg)))
          (let ((pair (member arg arguments)))
            (when (and pair (pair? (cdr pair)))
              (continuation-return return (cadr pair))))))
      
      (for-each try args)
      #f)))


(definition package (jas-number-argument arguments . args)
  (let ((value (apply jas-argument arguments args)))
    (and value
         (string->number value)))))
