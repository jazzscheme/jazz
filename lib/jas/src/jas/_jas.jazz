;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; JAS
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module jas jazz


(import (jazz.io)
        (jazz.jas))


(definition package (jas$help arguments)
  (with-jas
    (lambda (output)
      (format output "Usage:{%}")
      (format output "  jas init{%}")
      (format output "  jas config{%}")
      (format output "  jas add{%}")
      (format output "  jas remove{%}")
      (format output "  jas list{%}")
      (format output "  jas commit{%}")
      (format output "  jas discard{%}")
      (format output "  jas restore{%}")
      (format output "  jas reset{%}")
      (format output "  jas branch{%}")
      (format output "  jas checkout{%}")
      (format output "  jas status{%}")
      (format output "  jas diff{%}")
      (format output "  jas log{%}")
      (format output "  jas parse{%}")
      (format output "  jas retrieve{%}")
      (format output "  jas cat{%}")
      (format output "{%}")
      (format output "Help:{%}")
      (format output "  jas help{%}")
      (force-output output))))


(definition package (jas$init arguments)
  (with-jas
    (lambda (output)
      (let ((dir (current-directory-get)))
        (let ((repo (jas-init dir)))
          (format output "Initialized empty JAS repository in {a}{%}" (parse (get-directory repo))))))))


(definition package (jas$config arguments)
  (with-jas
    (lambda (output)
      (let ((repo (jas-open (jas-directory "."))))
        (bind (command . arguments) arguments
          (cond ((equal? command "get")
                 (bind (key) arguments
                   (let ((key (string->symbol key)))
                     (format output "{a}{%}" (jas-config-get repo key)))))
                ((equal? command "set")
                 (bind (key value) arguments
                   (let ((key (string->symbol key)))
                     (jas-config-set repo key value)
                     (format output "{a} set to {a}{%}" key value))))
                (else
                 (format output "Unknown jas config command: {a}{%}" command))))))))


(definition package (jas$add arguments)
  (with-jas
    (lambda (output)
      (let ((path (car arguments))
            (repo (jas-open (jas-directory "."))))
        (jas-add repo path)))))


(definition package (jas$remove arguments)
  (with-jas
    (lambda (output)
      (let ((path (car arguments))
            (repo (jas-open (jas-directory "."))))
        (jas-remove repo path)))))


(definition package (jas$list arguments)
  (with-jas
    (lambda (output)
      (let ((repo (jas-open (jas-directory "."))))
        (let ((index (cond ((jas-switch arguments "head" "h")
                            (jas-head-index repo))
                           ((jas-switch arguments "working" "work" "w")
                            (jas-working-index repo))
                           (else
                            (jas-staging-index repo)))))
          (jas-describe index output))))))


(definition package (jas$commit arguments)
  (with-jas
    (lambda (output)
      (let ((repo (jas-open (jas-directory ".")))
            (message (jas-argument arguments "message" "m"))
            (all? (jas-switch arguments "all" "a")))
        (if (not message)
            (format output "Missing commit message{%}")
          ;; for now also include new files
          (when all?
            (jas-add repo "."))
          (let ((author (jas-config-get repo 'user.name))
                (email (jas-config-get repo 'user.email))
                (tree (jas-staging-tree repo))
                (head (jas-read-head repo)))
            (let ((commit (jas-commit repo author email message tree (and head (jas-resolve repo head)))))
              (format output "{a}{%}" commit))))))))


(definition package (jas$discard arguments)
  (with-jas
    (lambda (output)
      (let ((repo (jas-open (jas-directory "."))))
        (jas-discard repo)))))


(definition package (jas$restore arguments)
  (with-jas
    (lambda (output)
      (let ((repo (jas-open (jas-directory "."))))
        (let ((commit (jas-resolve repo (jas-parse repo (car arguments)))))
          (jas-restore repo commit))))))


(definition package (jas$reset arguments)
  (with-jas
    (lambda (output)
      (let ((repo (jas-open (jas-directory "."))))
        (let ((commit (jas-resolve repo (jas-parse repo (car arguments)))))
          (jas-reset repo commit))))))


(definition package (jas$branch arguments)
  (with-jas
    (lambda (output)
      (let ((repo (jas-open (jas-directory "."))))
        (let ((head (jas-read-head repo))
              (branches (jas-branches repo)))
          (let ((head-branch (and (jas-branch? repo head) (jas-branch-name repo head))))
            (for-each (lambda (branch)
                        (if (equal? branch head-branch)
                            (format output "* \033[32m{a}\033[39;49m{%}" branch)
                          (format output "  {a}{%}" branch)))
                      branches)))))))


(definition package (jas$checkout arguments)
  (with-jas
    (lambda (output)
      (let ((repo (jas-open (jas-directory "."))))
        (let ((create? (jas-switch arguments "b"))
              (name (last arguments)))
          (let ((ref (jas-checkout repo name validate-clean?: #t create?: create?)))
            (cond (create?
                   (format output "Switched to a new branch {a}{%}" name))
                  ((jas-branch? repo ref)
                   (format output "Switched to branch {a}{%}" (jas-branch-name repo ref)))
                  (else
                   (format output "Checked out detached HEAD at {a}{%}" ref)))))))))


(definition package (jas$status arguments)
  (with-jas
    (lambda (output)
      (let ((repo (jas-open (jas-directory "."))))
        (define (describe title diff)
          (when (not-null? (get-changes diff))
            (format output "{%}")
            (format output "{a}{%}" title)
            (jas-describe diff output)))
        
        (let ((head (jas-require-head repo)))
          (cond ((jas-commit? repo head)
                 (format output "HEAD detached at {a}{%}" head))
                (else
                 (format output "On branch {a}{%}" (jas-branch-name repo head))))
          (describe "Changes to be committed:" (jas-staging-status repo))
          (describe "Changes not staged for commit:" (jas-working-status repo))
          ;; TODO
          ;; "Untracked files:"
          )))))


(definition package (jas$diff arguments)
  (with-jas
    (lambda (output)
      (let ((repo (jas-open (jas-directory "."))))
        (if (null? arguments)
            (let ((diff (jas-working-status repo)))
              (jas-describe diff output))
          (let ((from-commit (jas-resolve repo (jas-parse repo (car arguments))))
                (to-commit (jas-resolve repo (jas-parse repo (cadr arguments)))))
            (let ((from-index (jas-commit-index repo from-commit))
                  (to-index (jas-commit-index repo to-commit)))
              (let ((diff (jas-diff repo from-index to-index)))
                (jas-describe diff output)))))))))


(definition package (jas$log arguments)
  (with-jas
    (lambda (output)
      (let ((repo (jas-open (jas-directory ".")))
            (n (jas-number-argument arguments "n")))
        (unless (eqv? n 0)
          (let ((head (jas-require-head repo)))
            (let (iter (commit (jas-resolve repo head)) (count n))
              (bind (author email message digest parent time) (jas-retrieve repo commit)
                (format output "\033[33mcommit {a}\033[39;49m{%}" commit)
                (format output "Author: {a} <{a}>{%}" author email)
                (format output "Date:   {a}{%}" time)
                (format output "{%}")
                (format output "    {a}{%}" message)
                (when parent
                  (let ((count (and count (- count 1))))
                    (when (or (not count) (> count 0))
                      (format output "{%}")
                      (iter parent count))))))))))))


(definition package (jas$parse arguments)
  (with-jas
    (lambda (output)
      (let ((repo (jas-open (jas-directory "."))))
        (let ((rev (car arguments)))
          (let ((revision (jas-parse repo rev)))
            (if revision
                (format output "{a}{%}" revision)
              (format output "Unknown revision: {a}{%}" rev))))))))


(definition package (jas$retrieve arguments)
  (with-jas
    (lambda (output)
      (let ((repo (jas-open (jas-directory "."))))
        (let ((digest (jas-resolve repo (jas-parse repo (car arguments)))))
          (pp (jas-retrieve repo digest) output))))))


(definition package (jas$cat arguments)
  (with-jas
    (lambda (output)
      (let ((repo (jas-open (jas-directory "."))))
        (let ((digest (car arguments)))
          (let ((content (retrieve-blob repo digest)))
            (write-subu8vector content 0 (u8vector-length content) output)))))))


(definition package (jas$test arguments)
  (with-jas
    (lambda (output)
      (let ((repo (jas-open (jas-directory "."))))
        ))))


;;;
;;;; Utility
;;;


(definition package (with-jas proc)
  (let ((output (current-output-port)))
    (catch (JAS-Exception exc
             (format output "{a}{%}" (get-message exc)))
      (proc output))))


(definition package (jas-directory path)
  (new Directory (tokenise-filename (pathname-normalize path))))


(definition package (jas-switch arguments . args)
  (continuation-capture
    (lambda (return)
      (define (try arg)
        (let ((arg (string-append "-" arg)))
          (when (member arg arguments)
            (continuation-return return #t))))
      
      (for-each try args)
      #f)))


(definition package (jas-argument arguments . args)
  (continuation-capture
    (lambda (return)
      (define (try arg)
        (let ((arg (string-append "-" arg)))
          (let ((pair (member arg arguments)))
            (when (and pair (pair? (cdr pair)))
              (continuation-return return (cadr pair))))))
      
      (for-each try args)
      #f)))


(definition package (jas-number-argument arguments . args)
  (let ((value (apply jas-argument arguments args)))
    (and value
         (string->number value)))))
