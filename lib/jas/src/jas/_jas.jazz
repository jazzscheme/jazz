;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; JAS
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module jas jazz


(import (jazz.core)
        (jazz.io)
        (jazz.jas)
        (jazz.runtime))


(definition package (jas$help arguments)
  (let ((output (current-output-port)))
    (format output "Usage:{%}")
    (format output "  jas init{%}")
    (format output "  jas config{%}")
    (format output "  jas add{%}")
    (format output "  jas remove{%}")
    (format output "  jas list{%}")
    (format output "  jas commit{%}")
    (format output "  jas status{%}")
    (format output "  jas diff{%}")
    (format output "  jas log{%}")
    (format output "  jas parse{%}")
    (format output "  jas retrieve{%}")
    (format output "{%}")
    (format output "Help:{%}")
    (format output "  jas help")
    (force-output output)))


(definition package (jas$init arguments)
  (let ((dir (get-current-directory))
        (output (current-output-port)))
    (let ((repo (jas-init dir)))
      (format output "Initialized empty JAS repository in {a}" (parse~ (get-directory~ repo))))))


(definition package (jas$config arguments)
  (let ((repo (jas-open (jas-directory ".")))
        (output (current-output-port)))
    (bind (command . arguments) arguments
      (cond ((equal? command "get")
             (bind (key) arguments
               (let ((key (string->symbol key)))
                 (format output "{a}" (jas-config-get repo key)))))
            ((equal? command "set")
             (bind (key value) arguments
               (let ((key (string->symbol key)))
                 (jas-config-set repo key value)
                 (format output "{a} set to {a}" key value))))
            (else
             (format output "Unknown jas config command: {a}" command))))))


(definition package (jas$add arguments)
  (let ((path (car arguments))
        (repo (jas-open (jas-directory ".")))
        (output (current-output-port)))
    (jas-add repo path)))


(definition package (jas$remove arguments)
  (let ((path (car arguments))
        (repo (jas-open (jas-directory ".")))
        (output (current-output-port)))
    (jas-remove repo path)))


(definition package (jas$list arguments)
  (let ((repo (jas-open (jas-directory "."))))
    (let ((index (jas-staging-index repo)))
      (for-each (lambda (entry)
                  (apply debug entry))
                (get-entries~ index)))))


(definition package (jas$commit arguments)
  (let ((output (current-output-port)))
    (let ((repo (jas-open (jas-directory ".")))
          (author (jas-argument arguments "author" "a"))
          (email (jas-argument arguments "email" "e"))
          (message (jas-argument arguments "message" "m"))
          (parent (jas-argument arguments "parent" "p")))
      (let ((author (or author (jas-config-get repo 'user.name)))
            (email (or email (jas-config-get repo 'user.email)))
            (tree (jas-staging-tree repo))
            (parent (or parent (jas-read-head repo))))
        (let ((commit (jas-commit repo author email message tree (and parent (jas-resolve repo parent)))))
          (format output "{a}" commit))))))


(definition package (jas$status arguments)
  (let ((repo (jas-open (jas-directory ".")))
        (output (current-output-port)))
    (let ((head (jas-read-head repo))
          (diff (jas-status repo)))
      (if (string? head)
          (format output "HEAD detached at {a}{%}" head)
        (format output "On branch {a}{%}" (cadr head)))
      (when (not-null? (get-changes~ diff))
        (format output "{%}")
        (describe-diff diff output)))))


(definition package (jas$diff arguments)
  (let ((repo (jas-open (jas-directory ".")))
        (output (current-output-port)))
    (if (null? arguments)
        (jas$status arguments)
      (let ((from-commit (jas-parse repo (car arguments)))
            (to-commit (jas-parse repo (cadr arguments))))
        (let ((from-index (jas-commit-index repo from-commit))
              (to-index (jas-commit-index repo to-commit)))
          (let ((diff (jas-diff repo from-index to-index)))
            (describe-diff diff output)))))))


(definition package (jas$log arguments)
  (let ((repo (jas-open (jas-directory ".")))
        (output (current-output-port)))
    (let ((head (jas-read-head repo)))
      (if (not head)
          (format output "Your current head does not have any commits yet")
        (let (iter (commit (jas-resolve repo head)))
          (bind (author email message digest parent time) (jas-retrieve repo commit)
            (format output "\033[33mcommit {a}\033[39;49m{%}" commit)
            (format output "Author: {a} <{a}>{%}" author email)
            (format output "Date:   {a}{%}" time)
            (format output "{%}")
            (format output "    {a}{%}" message)
            (when parent
              (format output "{%}")
              (iter parent))))))))


(definition package (jas$parse arguments)
  (let ((repo (jas-open (jas-directory ".")))
        (output (current-output-port)))
    (let ((rev (car arguments)))
      (let ((revision (jas-parse repo rev)))
        (if revision
            (format output "{a}{%}" revision)
          (format output "Unknown revision: {a}{%}" rev))))))


(definition package (jas$retrieve arguments)
  (let ((repo (jas-open (jas-directory ".")))
        (output (current-output-port)))
    (let ((digest (car arguments)))
      (pp (jas-retrieve repo digest) output))))


(definition package (jas$test arguments)
  (let ((repo (jas-open (jas-directory ".")))
        (output (current-output-port)))
    ))


;;;
;;;; Describe
;;;


(definition (describe-index index output)
  (for-each (lambda (entry)
              (apply debug entry))
            (get-entries~ index)))


(definition (describe-diff diff output)
  (for-each (lambda (change)
              (bind (what path) change
                (case what
                  ((added)    (format output "    \033[32madded:    {a}\033[39;49m{%}" path))
                  ((removed)  (format output "    \033[31mremoved:  {a}\033[39;49m{%}" path))
                  ((modified) (format output "    \033[36mmodified: {a}\033[39;49m{%}" path)))))
            (get-changes~ diff)))


;;;
;;;; Utility
;;;


(definition package (jas-directory path)
  (new Directory (tokenise-filename (pathname-normalize path))))


(definition package (jas-argument arguments . args)
  (continuation-capture
    (lambda (return)
      (define (try arg)
        (let ((arg (string-append "-" arg)))
          (let ((pair (member arg arguments)))
            (when (and pair (pair? (cdr pair)))
              (continuation-return return (cadr pair))))))
      
      (for-each try args)
      #f))))
