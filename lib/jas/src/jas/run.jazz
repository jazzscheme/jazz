;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; JAS Run
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module jas.run jazz


(import (jas)
        (jazz.platform))


(definition (jas)
  (initialize-platform)
  (let ((arguments (command-arguments)))
    (if (null? arguments)
        (jas$help '())
      (bind (command . arguments) arguments
        (case (string->symbol command)
          ((help) (jas$help arguments))
          ((init) (jas$init arguments))
          ((config) (jas$config arguments))
          ((list) (jas$list arguments))
          ((add) (jas$add arguments))
          ((remove) (jas$remove arguments))
          ((commit) (jas$commit arguments))
          ((log) (jas$log arguments))
          ((status) (jas$status arguments))
          ((diff) (jas$diff arguments))
          ((parse) (jas$parse arguments))
          ((retrieve) (jas$retrieve arguments))
          ((test) (jas$test arguments))
          (else (format (current-output-port) "Unknown jas command: {a}" command)))))))


(register-product-run 'jas
  (lambda (descriptor)
    (jas))))
