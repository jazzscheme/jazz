;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Action Items
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.action.Action-Item jazz


(import (jazz.action)
        (jazz.component)
        (jazz.event))


(class Action-Item extends Component


  (property title              initialize #f accessors generate)
  (property action-handler     initialize #f accessors generate)
  (property shortcut           initialize #f accessors explicit)
  (property alternate-shortcut initialize #f accessors explicit)
  (property enabled?           initialize #t accessors explicit)
  
  
  (slot actionables initialize '() getter generate)
  
  
  (method override (print self output readably)
    (print-unreadable self output
      (lambda (output)
        (format output "{a}" (or title name)))))
  
  
  ;;;
  ;;;; Access
  ;;;


  (method public (get-shortcut self)
    shortcut)


  (method public (set-shortcut self value)
    (set! shortcut value)
    (process-shortcut-update self))


  (method public (get-alternate-shortcut self)
    alternate-shortcut)


  (method public (set-alternate-shortcut self value)
    (set! alternate-shortcut value)
    (process-shortcut-update self))
  
  
  (method public (first-alternate-shortcut self)
    (if (pair? alternate-shortcut)
        (car alternate-shortcut)
      alternate-shortcut))
  
  
  (method public (all-shortcuts self)
    (let ((all (cond ((not alternate-shortcut)
                      '())
                     ((pair? alternate-shortcut)
                      alternate-shortcut)
                     (else
                      (list alternate-shortcut)))))
      (if shortcut
          (cons shortcut all)
        all)))


  (method public (get-enabled? self)
    enabled?)


  (method public (set-enabled? self value)
    (when (neq? enabled? (boolean value))
      (set! enabled? value)
      (process-enabled-update self)))
  
  
  ;;;
  ;;;; Actionables
  ;;;
  
  
  (method public (register-actionable self actionable)
    (set! actionables (cons actionable actionables))
    (shortcut-update actionable self)
    (enabled-update actionable self))
  
  
  (method public (unregister-actionable self actionable)
    (set! actionables (remove! actionable actionables)))
  
  
  (method (process-shortcut-update self)
    (for-each (lambda (actionable)
                (shortcut-update actionable self))
              actionables))
  
  
  (method (process-enabled-update self)
    (for-each (lambda (actionable)
                (enabled-update actionable self))
              actionables))


  ;;;
  ;;;; Invoke
  ;;;
  
  
  ;; Receiving an optional action is a temporary solution until
  ;; a big cleanup between event handlers and actions...
  (method public (invoke self sender properties (action: action #f) (event: event #f))
    (when enabled?
      (let* ((properties (or properties (get-properties action-handler)))
             (event (or event (apply make-event Action-Event :action sender properties))))
        (invoke action-handler sender event action: action))))
  
  
  ;;;
  ;;;; Descriptor
  ;;;
  
  
  (method meta override (get-class-descriptor self (context: context #f))
    (new jazz.ui.descriptors:Action-Item-Descriptor))))
