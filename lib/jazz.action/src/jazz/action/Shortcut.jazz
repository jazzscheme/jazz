;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Shortcuts
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.action.Shortcut jazz


(import (jazz.action)
        (jazz.locale))


(class Shortcut extends Object
  
  
  (method meta override (marshall-object self obj)
    (serialize-literal obj))
  
  
  (method meta override (unmarshall-object self content)
    (deserialize-literal content))
  
  
  (slot modifiers getter generate)
  (slot key       getter generate)
  
  
  (method override (initialize self modifiers key)
    (define (standardize-key key)
      (if (char? key)
          (upcase key)
        key))
    
    (define (standardize-modifiers modifiers)
      (let ((standard '()))
        (let ((try
                (lambda (modifier)
                  (when (memq? modifier modifiers)
                    (set! standard (cons modifier standard))))))
          (try :alt)
          (try :shift)
          (try :control)
          (try :meta)
          standard)))
    
    (nextmethod self)
    (set! self.modifiers (standardize-modifiers modifiers))
    (set! self.key (standardize-key key)))
  
  
  (method override (hash-object self)
    (shortcut-hash self))
  

  (method override (compare-object self target)
    (cond ((is-not? target (class-of self))
           :incompatible)
          ((and (= modifiers (get-modifiers target))
                (= key (get-key target)))
           :equal)
          (else
           :not-equal)))
  
  
  (method override (print self output readably)
    (format output "~{{a}{?: {l}~} {s}}"
            (category-name (class-of self))
            (not-null? modifiers)
            modifiers
            key))
  
  
  ;;;
  ;;;; Presentation
  ;;;
  
  
  (method public (present self)
    (format "{?:{l} ~}{a}" (not-null? modifiers) modifiers key))


  (method public (present-shortcut self)
    (define Localized-Shortcuts
      '((Backspace . "Backspace")
        (Return    . "Return")
        (Space     . "Space")
        (Tab       . "Tab")
        (Home      . "Home")
        (End       . "End")
        (Left      . "Left")
        (Up        . "Up")
        (Right     . "Right")
        (Down      . "Down")
        (Prior     . "Prior")
        (Next      . "Next")
        (Insert    . "Insert")
        (Delete    . "Delete")
        (Add       . "Add")
        (Subtract  . "Subtract")
        (Multiply  . "Multiply")))
    
    (define (localize-shortcut shortcut)
      (let ((info (assq shortcut Localized-Shortcuts)))
        (if (not info)
            shortcut
          (localize (cdr info)))))
    
    (let ((str ""))
      (when (memq? :control modifiers)
        (set! str (string-append str (localize "Ctrl+"))))
      (when (memq? :alt modifiers)
        (set! str (string-append str (localize "Alt+"))))
      (when (memq? :meta modifiers)
        (set! str (string-append str (localize "Meta+"))))
      (when (memq? :shift modifiers)
        (set! str (string-append str (localize "Shift+"))))
      (string-append str (localize-shortcut (if (char? key) (format "{c}" key) (->string key))))))))
