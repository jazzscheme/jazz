;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Actions
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module jazz.action jazz


(hub actions-orphaned?)
(hub all-shortcuts)
(hub effective-visible?)
(hub enabled-update)
(hub first-alternate-shortcut)
(hub get-action-context)
(hub get-action-handler)
(hub get-action-name)
(hub get-actionables)
(hub get-enabled?)
(hub get-key)
(hub get-modifiers)
(hub get-properties)
(hub get-shortcut)
(hub get-title)
(hub invoke)
(hub present)
(hub present-shortcut)
(hub register-actionable)
(hub set-action-handler)
(hub set-enabled?)
(hub set-shortcut)
(hub set-title)
(hub shortcut-update)
(hub update-actions)


(export (jazz.action.autoload))
(import (jazz.action.autoload)
        (jazz.component)
        (jazz.locale))


;;;
;;;; Action
;;;


(definition package (construct-action action-context action-name . properties)
  (new Action action-context action-name properties))


;;;
;;;; Actions
;;;


(definition *actions*
  (make-table test: eq?))


(definition package (get-actions)
  *actions*)

(definition package (register-actions context actions)
  (table-set! *actions* context actions))

(definition package (find-actions context)
  (or (table-ref *actions* context #f)
      (error "Unable to find actions: {s}" context)))


(definition package (find-action-item context name)
  (find-component (find-actions context) name))


(definition package (require-action-item action)
  (or (find-action-item (get-action-context action) (get-action-name action))
      (error "Unable to find action: {t}" action)))


(definition package (call-action action sender properties (event: event #f))
  (let ((action-item (require-action-item action)))
    (invoke action-item sender properties action: action event: event)))


(definition package (get-action-enabled? action)
  (let ((action-item (require-action-item action)))
    (get-enabled? action-item)))


(definition package (set-action-enabled? action enabled?)
  (let ((action-item (require-action-item action)))
    (set-enabled? action-item enabled?)))


(definition package (set-actions-enabled? actions enabled?)
  (for-each (lambda (action)
              (set-action-enabled? action enabled?))
            actions))


(definition package (get-class-actions object)
  (class-actions object))


(definition package (view-guest-actions view)
  (guest-actions view))


(definition package (extract-actions actions-list)
  (let ((fact (new List-Factory)))
    (for-each (lambda (action-list)
                (let ((context-name (get-name action-list)))
                  (for-each (lambda (action-item)
                              (let* ((action-name (get-name action-item))
                                     (shortcut (get-shortcut action-item)))
                                (when shortcut
                                  (put fact action-item))))
                            (get-children action-list))))
              actions-list)
    (get-output fact)))


(definition package (update-actions-for for)
  (iterate-table (get-actions)
    (lambda (context actions)
      (update-actions actions for))))


(definition *global-actions*
  '())

(definition public (registered-global-actions)
  *global-actions*)

(definition public (register-global-actions actions)
  (set! *global-actions* (append! *global-actions* (list actions))))


(definition public action-item-visibility
  #t)

(definition public (set-action-item-visibility visibility)
  (set! action-item-visibility visibility))


;;;
;;;; Bindings
;;;


(definition *bindings*
  #f)


(definition public (current-bindings)
  *bindings*)


(definition public (set-current-bindings bindings)
  (set! *bindings* bindings)
  (register-bindings bindings))


(definition package (register-bindings bindings)
  (for-each (lambda (actions)
              ;; this test is for traits
              (when (is? actions Actions)
                (register-actions (get-name actions) actions)))
            (get-children bindings)))


;;;
;;;; Shortcut
;;;


(definition package (construct-shortcut . rest)
  (new Shortcut (butlast rest) (last rest)))


(definition public (shortcut=? s1 <Shortcut> s2 <Shortcut>) <bool>
  (and (equal? (get-modifiers s1) (get-modifiers s2))
       (eqv? (get-key s1) (get-key s2))))


(definition public (shortcut-hash shortcut <Shortcut>)
  (fxwrap+ (eqv?-hash (get-key shortcut))
           (equal?-hash (get-modifiers shortcut))))


(definition public (present-modifiers modifiers)
  (let ((str ""))
    (define (add modifier name)
      (when (memq? modifier modifiers)
        (when (not (empty-string? str))
          (set! str (string-append str "+")))
        (set! str (string-append str (localize name)))))
    
    (add :control "Ctrl")
    (add :alt "Alt")
    (add :meta "Meta")
    (add :shift "Shift")
    str))


(definition public (present-key key)
  (define Localized-Shortcuts
    '((Backspace . "Backspace")
      (Return    . "Return")
      (Space     . "Space")
      (Tab       . "Tab")
      (Home      . "Home")
      (End       . "End")
      (Left      . "Left")
      (Up        . "Up")
      (Right     . "Right")
      (Down      . "Down")
      (Prior     . "Prior")
      (Next      . "Next")
      (Insert    . "Insert")
      (Delete    . "Delete")
      (Add       . "Add")
      (Subtract  . "Subtract")
      (Multiply  . "Multiply")))
  
  (define (localize-shortcut shortcut)
    (let ((info (assq shortcut Localized-Shortcuts)))
      (if (not info)
          shortcut
        (localize (cdr info)))))
    
  (localize-shortcut (if (char? key)
                         (format "{c}" key)
                       (->string key))))


;;;
;;;; Hooks
;;;


(definition *action-hooks*
  '())


(definition public (register-action-hook hook)
  (set! *action-hooks* (append *action-hooks* (list hook))))

(definition public (unregister-action-hook hook)
  (set! *action-hooks* (remove! hook *action-hooks*)))


(definition public (hook-action action/handler event proc)
  (prog1 (proc)
    (for-each (lambda (hook)
                (hook action/handler event))
              *action-hooks*))))
