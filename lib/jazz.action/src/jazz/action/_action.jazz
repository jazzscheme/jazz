;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Actions
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module jazz.action jazz


(export (jazz.action.autoload))
(import (jazz.action.autoload))


;;;
;;;; Action
;;;


(definition package (construct-action action-context action-name . properties)
  (new Action action-context action-name properties))


;;;
;;;; Actions
;;;


(definition *actions*
  (make-table test: eq?))


(definition package (get-actions)
  *actions*)

(definition package (register-actions context actions)
  (table-set! *actions* context actions))

(definition package (find-actions context)
  (or (table-ref *actions* context #f)
      (error "Unable to find actions: {s}" context)))


(definition package (find-action-item context name)
  (find-component~ (find-actions context) name))


(definition package (require-action-item action)
  (or (find-action-item (get-action-context~ action) (get-action-name~ action))
      (error "Unable to find action: {t}" action)))


(definition package (call-action action sender properties (event: event #f))
  (let ((action-item (require-action-item action)))
    (invoke~ action-item sender properties action: action event: event)))


(definition package (get-action-enabled? action)
  (let ((action-item (require-action-item action)))
    (get-enabled?~ action-item)))


(definition package (set-action-enabled? action enabled?)
  (let ((action-item (require-action-item action)))
    (set-enabled?~ action-item enabled?)))


(definition package (set-actions-enabled? actions enabled?)
  (for-each (lambda (action)
              (set-action-enabled? action enabled?))
            actions))


(definition package (get-class-actions object)
  (class-actions~ object))


(definition package (get-guest-actions view)
  (guest-actions~ view))


(definition package (extract-actions actions-list)
  (let ((fact (new List-Factory)))
    (for-each (lambda (action-list)
                (let ((context-name (get-name~ action-list)))
                  (for-each (lambda (action-item)
                              (let* ((action-name (get-name~ action-item))
                                     (shortcut (get-shortcut~ action-item)))
                                (when shortcut
                                  (put~ fact action-item))))
                            (get-children~ action-list))))
              actions-list)
    (get-output~ fact)))


;;;
;;;; Shortcut
;;;


(definition package (construct-shortcut . rest)
  (new Shortcut (butlast rest) (last rest)))


(definition public (shortcut=? s1 <Shortcut> s2 <Shortcut>) <bool>
  (and (equal? (get-modifiers~ s1) (get-modifiers~ s2))
       (eqv? (get-key~ s1) (get-key~ s2))))


(definition public (shortcut-hash shortcut <Shortcut>)
  (fxwrap+ (eqv?-hash (get-key~ shortcut))
           (equal?-hash (get-modifiers~ shortcut))))


;;;
;;;; Hooks
;;;


(definition *action-hooks*
  '())


(definition public (register-action-hook hook)
  (set! *action-hooks* (append *action-hooks* (list hook))))

(definition public (unregister-action-hook hook)
  (set! *action-hooks* (remove! hook *action-hooks*)))


(definition public (hook-action action/handler event proc)
  (prog1 (proc)
    (for-each (lambda (hook)
                (hook action/handler event))
              *action-hooks*))))
