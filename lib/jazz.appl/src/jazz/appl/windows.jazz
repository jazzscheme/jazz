;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Windows Appl
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.appl.windows jazz


(import (jazz.foreign)
        (jazz.settings))


(c-declare appl #/Objective-C/

#include <stdbool.h>
#include <tlhelp32.h>

bool applInited = false;

static double windows_scale = 1;


void setup_scale()
{
    // this needs to be before SetProcessDPIAware
    HWND hwnd = GetDesktopWindow();
    HDC hdc = GetDC(hwnd);
    int phys = GetDeviceCaps(hdc, DESKTOPVERTRES);
    int virt = GetDeviceCaps(hdc, VERTRES);
    if (phys != virt) {
        double scale = (double) phys / (double) virt;
        double rounded_scale = round(scale * 100.) / 100.;
        windows_scale = rounded_scale;
    }
    ReleaseDC(hwnd, hdc);

    SetProcessDPIAware();
}


void applInit()
{
    if (applInited)
        return;

    setup_scale();

    applInited = true;
}


void applTerminate()
{
    if (!applInited)
        return;

    applInited = false;
}


double applWindowsScale()
{
    return windows_scale;
}


bool applIsProcessAlreadyRunning()
{
    DWORD myId = GetCurrentProcessId();
    wchar_t myPath[MAX_PATH];
    GetModuleFileName(NULL, myPath, MAX_PATH);
    HANDLE snapshot = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0);
    PROCESSENTRY32 process;
    process.dwSize = sizeof(PROCESSENTRY32);
    MODULEENTRY32 module;
    module.dwSize = sizeof(MODULEENTRY32);
    if (Process32First(snapshot, &process)) {
        do {
            DWORD id = process.th32ProcessID;
            if (id != 0) {
                HANDLE moduleSnapshot = CreateToolhelp32Snapshot(TH32CS_SNAPMODULE, id);
                if (Module32First(moduleSnapshot, &module)) {
                    WCHAR* path = module.szExePath;
                    if ((id != myId) && wcscmp(path, myPath) == 0) {
                        CloseHandle(moduleSnapshot);
                        CloseHandle(snapshot);
                        return true;
                    }
                    CloseHandle(moduleSnapshot);
                }
            }
        } while (Process32Next(snapshot, &process));
    }
    CloseHandle(snapshot);
    return false;
}
//#)


(c-type private INT                       (native int))
(c-type private LPCWSTR                   (native wchar_t-string))
(c-type private HWND                      (pointer (struct "HWND__") handle))


(definition private MB_TASKMODAL          #x00002000)


(definition private MB_ICONWARNING        48)
(definition private MB_ICONERROR          16)
(definition private MB_OK                 0)
(definition private MB_ICONINFORMATION    64)
(definition private MB_OKCANCEL           1)
(definition private MB_YESNO              4)
(definition private MB_YESNOCANCEL        3)


(definition private IDOK                  1)
(definition private IDCANCEL              2)
(definition private IDABORT               3)
(definition private IDRETRY               4)
(definition private IDIGNORE              5)
(definition private IDYES                 6)
(definition private IDNO                  7)


(c-external (applInit) void)
(c-external (applTerminate) void)
(c-external (applWindowsScale) double)
(c-external (applIsProcessAlreadyRunning) bool)
(c-external (MessageBox HWND LPCWSTR LPCWSTR INT) INT)


;;;
;;;; URL
;;;


(definition public (launch-url)
  (string-argument "url" #f))


;;;
;;;; Directory
;;;


(definition public (directory-writable? dirname)
  ;; quicky
  #t)


;;;
;;;; Process
;;;


(definition public (process-already-running?)
  (applIsProcessAlreadyRunning))


;;;
;;;; Message
;;;


(definition public (system-message text . rest)
  (bind-keywords ((type 'message) (title #f) (header #f) . others) rest
    (let ((text (if header
                    (string-append header "\n\n" text)
                  text))
          (title
            (or title (case type
                        ((message) "Message")
                        ((question) "Question")
                        ((confirmation) "Confirmation")
                        ((problem) "Problem")
                        ((error) "Error"))))
          (flags
            (case type
              ((message) (bitwise-ior MB_OK MB_ICONINFORMATION))
              ((question) (bitwise-ior MB_YESNO MB_ICONWARNING))
              ((confirmation) (bitwise-ior MB_YESNOCANCEL MB_ICONWARNING))
              ((problem) (bitwise-ior MB_OK MB_ICONERROR))
              ((error) (bitwise-ior MB_OKCANCEL MB_ICONERROR)))))
      (let ((code (MessageBox #f text title (bitwise-ior MB_TASKMODAL flags))))
        (ecase code
          ((IDOK) 'yes)
          ((IDCANCEL) 'cancel)
          ((IDYES) 'yes)
          ((IDNO) 'no)
          (else #f)))))))
