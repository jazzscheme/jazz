;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Windows Appl
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.appl.windows jazz


(import (jazz.foreign))


(c-declare appl #/Objective-C/

void applInit()
{
}


void applTerminate()
{
}
//#)


(c-external (applInit) void)
(c-external (applTerminate) void)


;;;
;;;; URL
;;;


(definition public (launch-url)
  (string-argument "url" #f))


;;;
;;;; Directory
;;;


(definition public (directory-writable? dirname)
  ;; quicky
  #t)


;;;
;;;; Message
;;;


(definition public (system-message text . rest)
  (bind-keywords ((type 'message) (title #f) (header #f) . others) rest
    (let ((text (if header
                    (string-append header "\n\n" text)
                  text))
          (title
            (or title (case type
                        ((message) "Message")
                        ((question) "Question")
                        ((confirmation) "Confirmation")
                        ((problem) "Problem")
                        ((error) "Error"))))
          (flags
            (case type
              ((message) (bitwise-ior MB_OK MB_ICONINFORMATION))
              ((question) (bitwise-ior MB_YESNO MB_ICONWARNING))
              ((confirmation) (bitwise-ior MB_YESNOCANCEL MB_ICONWARNING))
              ((problem) (bitwise-ior MB_OK MB_ICONERROR))
              ((error) (bitwise-ior MB_OKCANCEL MB_ICONERROR)))))
      (let ((code (MessageBox #f text title (bitwise-ior MB_TASKMODAL flags))))
        (ecase code
          ((IDOK) 'yes)
          ((IDCANCEL) 'cancel)
          ((IDYES) 'yes)
          ((IDNO) 'no)
          (else #f)))))))
