;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Application Descriptors
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module jazz.application.descriptors jazz


(import (jazz.application)
        (jazz.descriptor)
        (jazz.domain)
        (jazz.exemplar.descriptors)
        (jazz.jml)
        (jazz.preferences.descriptors)
        (jazz.process.descriptors))


;;;
;;;; Application-Preferences
;;;


(class Application-Preferences-Descriptor extends Process-Preferences-Descriptor
  
  
  (form
    (<install>
      (<properties~>
        (<Property-Descriptor>      name: toplevel-title
          (<Localized-Domain>       name: domain))
        (<Property-Descriptor>      name: toplevel-state
          (<Value-Domain>           name: domain))
        (<Property-Descriptor>      name: toplevel-monitor
          (<Value-Domain>           name: domain))
        (<Property-Descriptor>      name: toplevel-position
          (<Value-Domain>           name: domain))
        (<Property-Descriptor>      name: toplevel-size
          (<Value-Domain>           name: domain))
        (<Property-Descriptor>      name: catalog-types
          (<Value-Domain>           name: domain))
        (<Property-Descriptor>      name: documented?
          (<Boolean-Domain>         name: domain))
        (<Property-Descriptor>      name: first-startup?
          (<Boolean-Domain>         name: domain))
        (<Property-Descriptor>      name: fullscreen-warned?
          (<Boolean-Domain>         name: domain))
        (<Property-Descriptor>      name: active-bindings
          (<Value-Domain>           name: domain))
        (<Property-Descriptor>      name: toolbar-classes
          (<Toolbar-Classes-Domain> name: domain))))))


;;;
;;;; Toolbar-Classes-Domain
;;;


(class Toolbar-Classes-Domain extends List-Domain
  
  
  (method override (finish self rest)
    (nextmethod self rest)
    @convert    (set! domain (new Toolbar-Class-Domain)))
  
  
  @convert
  (method override (add-value value class)
    (add-row self (car value) (cdr value) class: class))
  
  
  @convert
  (method override (new-value)
    #f))


;;;
;;;; Toolbar-Class-Domain
;;;


(class Toolbar-Class-Domain extends Value-Domain
  
  
  ;;;
  ;;;; Presentation
  ;;;
  
  
  (method override (present-value self model)
    (format "{s}" model)))


;;;
;;;; Aliases-Preferences
;;;


(class Aliases-Preferences-Descriptor extends Preferences-Descriptor
  
  
  (form
    (<install>       can-rename?: #f can-delete?: #f can-relocate?: #f can-copy?: #f
      (<properties~>)))
  
  
  (method override (component-get-categorized-addable-classes self component)
    (list
      (list
        (reify-reference Alias-Configuration))))
  
  
  (method override (component-get-addable-details self component)
    '((alias 150 #f) (directory 300 #t))))


;;;
;;;; Alias-Configuration
;;;


(class Alias-Configuration-Descriptor extends Preferences-Descriptor
  
  
  (form
    (<install>                                 title: "Alias"
      (<properties~>
        (<Property-Descriptor> name: alias
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: directory
          (<Directory-Domain>  name: domain)))))
  
  
  (method override (component-presentation-property? self component property)
    (memq? (field-name property) '(alias)))
  
  
  (method override (component-get-presentation self component)
    (or (get-alias component)
        "{}"))
  
  
  (method override (component-set-presentation self component designer presentation)
    (set-property designer component :alias (string->symbol presentation))))


;;;
;;;; Favorites-Preferences
;;;


(class Favorites-Preferences-Descriptor extends Preferences-Descriptor
  
  
  (form
    (<install>       can-rename?: #f can-delete?: #f can-relocate?: #f can-copy?: #f
      (<properties~>)))
  
  
  (method override (component-get-categorized-addable-classes self component)
    (list
      (list
        (reify-reference Favorite-Configuration))))
  
  
  (method override (component-get-addable-details self component)
    '((shortcut 100 #f) (target 300 #t))))


;;;
;;;; Favorite-Configuration
;;;


(class Favorite-Configuration-Descriptor extends Preferences-Descriptor
  
  
  (form
    (<install>                 title: "Favorite"
      (<properties~>
        (<Property-Descriptor> name: shortcut
          (<String-Domain>     name: domain))
        (<Property-Descriptor> name: target
          (<Value-Domain>      name: domain)))))
  
  
  (method override (component-presentation-property? self component property)
    (memq? (field-name property) '(shortcut)))
  
  
  (method override (component-get-presentation self component)
    (or (get-shortcut component)
        "{}"))
  
  
  (method override (component-set-presentation self component designer shortcut)
    (set-property designer component shortcut: shortcut)))


;;;
;;;; Interface-Preferences
;;;


(class Interface-Preferences-Descriptor extends Preferences-Descriptor
  
  
  (form
    (<install>               can-rename?: #f can-delete?: #f can-relocate?: #f can-copy?: #f
      (<Property-Descriptor> name: sort-case-sensitive?
        (<Boolean-Domain>    name: domain)))))


;;;
;;;; Fonts-Preferences
;;;


(class Fonts-Preferences-Descriptor extends Exemplars-Preferences-Descriptor
  
  
  (form
    (<install> can-rename?: #f can-delete?: #f can-relocate?: #f can-copy?: #f)))


;;;
;;;; Print-Preferences
;;;


(class Print-Preferences-Descriptor extends Preferences-Descriptor
  
  
  (form
    (<install>                 can-rename?: #f can-delete?: #f can-relocate?: #f can-copy?: #f
      (<properties~>
        (<Property-Descriptor> name: color?
          (<Boolean-Domain>    name: domain)))))))
