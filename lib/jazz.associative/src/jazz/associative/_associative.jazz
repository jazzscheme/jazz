;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Jazz Associative Storage
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module jazz.associative jazz


(hub add-directory)
(hub add-file)
(hub add-path)
(hub branch-name)
(hub branch?)
(hub branches)
(hub checkout)
(hub commit)
(hub commit-index)
(hub commit?)
(hub config-get)
(hub config-set)
(hub diff)
(hub discard)
(hub exists?)
(hub find-entry)
(hub get-changes)
(hub get-directory)
(hub get-entries)
(hub get-file)
(hub get-head)
(hub get-index)
(hub get-objects)
(hub head-index)
(hub init)
(hub parse)
(hub read-head)
(hub remove-directory)
(hub remove-file)
(hub remove-path)
(hub require-head)
(hub reset)
(hub resolve)
(hub restore)
(hub retrieve)
(hub retrieve-blob)
(hub save-to-file)
(hub scan-directory)
(hub scan-file)
(hub staging-index)
(hub staging-status)
(hub staging-tree)
(hub update)
(hub working-index)
(hub working-status)


(import (jazz.io)
        (jazz.settings)
        (jazz.time)
        (jazz.zlib)
        (time))


;;;
;;;; Interface
;;;


(definition public (jas-init working)
  (new Associative-Repository working init?: #t))


(definition public (jas-open working)
  (new Associative-Repository working))


(definition public (jas-config-get repo key)
  (config-get repo key))


(definition public (jas-config-set repo key value)
  (config-set repo key value))


(definition public (jas-staging-tree repo)
  (staging-tree repo))


(definition public (jas-commit repo author email message tree parent)
  (commit repo author email message tree parent))


(definition public (jas-discard repo)
  (discard repo))


(definition public (jas-restore repo commit)
  (restore repo commit))


(definition public (jas-reset repo commit)
  (reset repo commit))


(definition public (jas-branches repo)
  (branches repo))


(definition public (jas-checkout repo name (validate-clean?: validate-clean? #f) (create?: create? #f))
  (checkout repo name validate-clean?: validate-clean? create?: create?))


(definition public (jas-read-head repo)
  (read-head repo))


(definition public (jas-require-head repo)
  (require-head repo))


(definition public (jas-add repo path)
  (add-path repo path))


(definition public (jas-remove repo path)
  (remove-path repo path))


(definition public (jas-head-index repo)
  (head-index repo))


(definition public (jas-working-index repo)
  (working-index repo))


(definition public (jas-staging-index repo)
  (staging-index repo))


(definition public (jas-commit-index repo commit)
  (commit-index repo commit))


(definition public (jas-staging-status repo)
  (staging-status repo))


(definition public (jas-working-status repo)
  (working-status repo))


(definition public (jas-diff repo from to)
  (diff repo from to))


(definition public (jas-commit? repo ref)
  (commit? repo ref))


(definition public (jas-branch? repo ref)
  (branch? repo ref))

(definition public (jas-branch-name repo ref)
  (branch-name repo ref))


(definition public (jas-resolve repo ref)
  (resolve repo ref))


(definition public (jas-parse repo rev)
  (parse repo rev))


(definition public (jas-retrieve repo digest)
  (retrieve repo digest))


;;;
;;;; Repository
;;;


(class Associative-Repository extends Object
  
  
  (slot working         getter generate)
  (slot directory       getter generate)
  (slot global-settings getter generate)
  (slot local-settings  getter generate)
  (slot disregard       getter generate)
  (slot ignore          getter generate)
  (slot head            getter generate)
  (slot index           getter generate)
  (slot objects         getter generate)
  (slot heads           getter generate)
  
  
  (method override (initialize self working (init?: init? #f))
    (define (jas-directory)
      (let ((dir (new-directory working ".jas")))
        (cond ((exists? dir)
               dir)
              (init?
               (create-directories dir)
               dir)
              (else
               (jas-exception "Not a jas repository")))))
    
    (initialize-aliases)
    (set! self.working working)
    (set! self.directory (jas-directory))
    (set! head (new-file directory "HEAD"))
    (set! index (new Associative-Index self working file: (new-file directory "index")))
    (set! objects (new-directory directory "objects"))
    (set! heads (new-directory directory '("refs" "heads")))
    (set! disregard '(".DS_Store"))
    (set! ignore '())
    (when init?
      (init self))
    (register-configs self))
  
  
  ;;;
  ;;;; Init
  ;;;
  
  
  (method package (init self)
    (create-directories objects)
    (create-directories heads))
  
  
  ;;;
  ;;;; Config
  ;;;
  
  
  (method (register-configs self)
    (let ((global {File Home ".jas"})
          (local (new-file directory "config")))
      (define (new-settings file)
        (when (not (exists? file))
          (create file))
        (let ((settings (new File-Settings file: file)))
          (register-settings settings)
          settings))
      
      (set! global-settings (new-settings global))
      (set! local-settings (new-settings local))))
  
  
  (method package (config-get self key)
    (find-setting key))
  
  
  (method package (config-set self key value)
    (let ((settings local-settings))
      (set-setting settings key value)
      (save-content settings)))
  
  
  ;;;
  ;;;; Database
  ;;;
  
  
  (method (objects-file self digest)
    (new-file objects digest))
  
  
  ;;;
  ;;;; Store
  ;;;
  
  
  (method (store-tree self tree)
    (store-content self tree))
  
  
  (method (store-content self content)
    (let ((digest (digest-u8vector (object->u8vector content) 'SHA-1)))
      (call-with-output-file (path-settings (objects-file self digest))
        (lambda (output)
          (pp content output)))
      digest))
  
  
  (method package (store-file self file digest)
    (store-blob self (load-binary file) digest))
  
  
  (method package (store-blob self content digest)
    (let ((objects-file (objects-file self digest)))
      (save-binary objects-file (zlib-deflate content))
      digest))
  
  
  ;;;
  ;;;; Retrieve
  ;;;
  
  
  (method package (exists? self digest)
    (exists? (objects-file self digest)))
  
  
  (method package (retrieve self digest)
    (call-with-input-file (path-settings (objects-file self digest))
      read))
  
  
  (method (retrieve-file self digest file)
    (create-directories file)
    (save-binary file (retrieve-blob self digest)))
  
  
  (method package (retrieve-blob self digest)
    (let ((objects-file (objects-file self digest)))
      (zlib-inflate (load-binary objects-file))))
  
  
  (method package (retrieve-path self path)
    (let ((entry (find-entry index path)))
      (and entry
           (bind (path digest seconds) entry
             (retrieve-blob self digest)))))
  
  
  ;;;
  ;;;; Commit
  ;;;
  
  
  (method package (staging-tree self)
    (index->tree self index))
  
  
  (method package (commit self author email message tree parent)
    (let ((time (date->string (system-date) "~a ~b ~d ~H:~M:~S ~Y ~z")))
      (let ((content (list author email message tree parent time)))
        (let ((commit (store-content self content))
              (head (read-head self)))
          (cond ((branch? self head)
                 (write-branch self (branch-name self head) commit))
                ((and (commit? self head)
                      (equal? head parent))
                 (write-head self commit))
                ((and (not head)
                      (not parent))
                 (write-branch self "master" commit)
                 (write-head self (make-branch self "master"))))
          commit))))
  
  
  (method (commit-tree self commit)
    (bind (author email message tree parent time) (retrieve self commit)
      tree))
  
  
  (method (commit-parent self commit)
    (bind (author email message tree parent time) (retrieve self commit)
      parent))
  
  
  ;;;
  ;;;; Discard
  ;;;
  
  
  (method package (discard self)
    (let ((diff (diff self (working-index self) (staging-index self))))
      (discarding-directories self
        (lambda (discard-directory)
          (for-each (lambda (change)
                      (bind (what path . rest) change
                        (let ((file (new-file working (tokenise-filename path))))
                          (case what
                            ((added)
                             (retrieve-file self (car rest) file))
                            ((removed)
                             (delete file)
                             (discard-directory (get-parent file)))
                            ((modified)
                             (retrieve-file self (cadr rest) file))))))
                    (get-changes diff))))))
  
  
  (method (discarding-directories self proc)
    (let ((queue (new-queue)))
      (define (discard-directory dir)
        (unless (member? dir (queue-list queue) test: pathname=?)
          (enqueue queue dir)))
      
      (define (directory-empty? dir)
        (continuation-capture
          (lambda (return)
            (iterate-directory dir
              (lambda (path)
                (unless (member? (get-name path) disregard)
                  (continuation-return return #f)))
              files?: #t
              directories?: #t
              recursive?: #f
              ignored-toplevel-dirnames: '(".jas" ".git"))
            #t)))
      
      (prog1 (proc discard-directory)
        (for-each (lambda (dir)
                    (when (directory-empty? dir)
                      (delete dir)))
                  (queue-list queue)))))
  
  
  ;;;
  ;;;; Restore
  ;;;
  
  
  (method package (restore self commit)
    (let ((head (require-head self)))
      (if (equal? (resolve self head) commit)
          (discard self)
        (discard self)
        (checkout-commit self commit)
        (cond ((commit? self head)
               (write-head self commit))
              (else
               (let ((name (branch-name self head)))
                 (write-branch self name commit)))))))
  
  
  ;;;
  ;;;; Reset
  ;;;
  
  
  (method package (reset self commit)
    (let ((head (require-head self)))
      (cond ((commit? self head)
             (jas-exception "Unable to reset while in a detached HEAD state"))
            (else
             (let ((name (branch-name self head)))
               (write-branch self name commit))))))
  
  
  ;;;
  ;;;; Checkout
  ;;;
  
  
  (method package (checkout self name (validate-clean?: validate-clean? #f) (create?: create? #f))
    (when (and validate-clean?
               (not-null? (get-changes (diff self (working-index self) (staging-index self)))))
      (jas-exception "Please commit your changes before you can checkout"))
    (cond (create?
           (let ((commit (resolve self (require-head self))))
             (write-branch self name commit)
             (write-head self (make-branch self name))
             commit))
          ((branch-exists? self name)
           (let ((ref (make-branch self name)))
             (checkout-commit self (resolve self ref))
             (write-head self ref)
             ref))
          (else
           (let ((commit (resolve self (parse self name))))
             (if (exists? self commit)
                 (begin
                   (checkout-commit self commit)
                   (write-head self commit)
                   commit)
               (jas-exception "Unable to checkout {a}" name))))))
  
  
  (method (checkout-commit self commit)
    (let ((staging-index (staging-index self))
          (commit-index (commit-index self commit)))
      (let ((diff (diff self staging-index commit-index)))
        (discarding-directories self
          (lambda (discard-directory)
            (for-each (lambda (change)
                        (bind (what path . rest) change
                          (let ((file (new-file working (tokenise-filename path))))
                            (case what
                              ((added)
                               (retrieve-file self (car rest) file)
                               (add-file staging-index path file))
                              ((removed)
                               (delete file)
                               (discard-directory (get-parent file))
                               (remove-file staging-index path file))
                              ((modified)
                               (retrieve-file self (cadr rest) file)
                               (add-file staging-index path file))))))
                      (get-changes diff))))
        (save-to-file staging-index))))
  
  
  ;;;
  ;;;; Index
  ;;;
  
  
  (method package (add-path self path)
    (let ((path (normalize-path self path)))
      (cond ((empty-string? path)
             (add-directory index "" working))
            ((ends-with? path "/")
             (add-directory index path (new-directory working path)))
            (else
             (add-file index path (new-file working path))))))
  
  
  (method package (add-blob self path content)
    (add-blob index path content))
  
  
  (method package (remove-path self path)
    (let ((path (normalize-path self path)))
      (cond ((empty-string? path)
             (remove-directory index "" working))
            ((ends-with? path "/")
             (remove-directory index path (new-directory working path)))
            (else
             (remove-file index path (new-file working path))))))
  
  
  (method (normalize-path self path)
    (if (equal? path ".")
        ""
      (let ((pathname (string-append (parse working) path)))
        (if (file-exists? pathname)
            (case (pathname-type pathname)
              ((file) path)
              (else (normalize-directory path)))
          (jas-exception "Unable to find {a}" path)))))
  
  
  (method package (head-index self)
    (let ((head (read-head self)))
      (if (not head)
          (new Associative-Index self #f)
        (commit-index self (resolve self head)))))
  
  
  (method package (working-index self)
    (prog1 (new Associative-Index self working entries: (scan-directory self "" working base: index))
      (save-to-file index)))
  
  
  (method package (staging-index self)
    index)
  
  
  (method package (commit-index self commit)
    (tree->index self (commit-tree self commit)))
  
  
  (method (tree->index self tree)
    (new Associative-Index self #f entries: (scan-tree self tree)))
  
  
  (method package (scan-file self path file (base: base #f))
    (let ((seconds (get-last-modification-seconds file)))
      (or (and base (let ((entry (find-entry base path)))
                      (and entry
                           (bind (entry-path entry-digest entry-seconds) entry
                             (and entry-seconds
                                  (if (= entry-seconds seconds)
                                      (list path entry-digest seconds)
                                    (let ((digest (digest-file (parse file) 'SHA-1)))
                                      ;; update base entry seconds
                                      ;; we do not update the digest
                                      ;; we are only creating a fast test
                                      ;; path + seconds = correct digest
                                      (when (equal? entry-digest digest)
                                        (set-third! entry seconds))
                                      (list path digest seconds))))))))
          (list path (digest-file (parse file) 'SHA-1) seconds))))
  
  
  (method package (scan-blob self path content)
    (list path (digest-u8vector content 'SHA-1) #f))
  
  
  (method package (scan-directory self dirpath dir (base: base #f))
    (let ((entries (new-queue)))
      (iterate-directory dir
        (lambda (path kind)
          (let ((file (new-file dir path)))
            (let ((name (get-name file)))
              (unless (or (member? name disregard)
                          (member? name ignore))
                (let ((subpath (join path "/")))
                  (enqueue entries (scan-file self (string-append dirpath subpath) file base: base)))))))
        full?: #f
        files?: #t
        directories?: #f
        recursive?: #t
        ignored-toplevel-dirnames: '(".jas" ".git")
        sort?: #t
        sort-type?: #f
        sort-test: ci<?)
      (queue-list entries)))
  
  
  (method (scan-tree self tree)
    (let ((entries (new-queue)))
      (define (scan prefix tree)
        (for-each (lambda (entry)
                    (bind (kind path digest) entry
                      (case kind
                        ((blob) (enqueue entries (list (string-append prefix path) digest #f)))
                        ((tree) (scan (string-append prefix path "/") digest)))))
                  (retrieve self tree)))
      
      (scan "" tree)
      (queue-list entries)))
  
  
  (method (index->tree self index)
    (let ((directory (get-directory index))
          (entries (get-entries index)))
      (define (gather prefix)
        (let ((len (string-length prefix))
              (queue (new-queue)))
          (define (prefix-change path)
            (let ((slash (search path "/" start: len)))
              (and slash
                   (substring path 0 (+ slash 1)))))
          
          (let (iter)
            (if (null? entries)
                (store-tree self (queue-list queue))
              (let ((entry (car entries)))
                (bind (path digest seconds) entry
                  (if (starts-with? path prefix)
                      (let ((slash (search path "/" start: len)))
                        (if (not slash)
                            (let ((file (new-file directory path)))
                              (enqueue queue (list 'blob (get-name file) digest))
                              (set! entries (cdr entries))
                              (iter))
                          (let ((name (substring path len slash))
                                (new-prefix (substring path 0 (+ slash 1))))
                            (enqueue queue (list 'tree name (gather new-prefix)))
                            (iter))))
                    (store-tree self (queue-list queue)))))))))
      
      (assert directory)
      (gather "")))
  
  
  (method package (find-entry self path)
    (find-entry index path))
  
  
  ;;;
  ;;;; Diff
  ;;;
  
  
  (method package (diff self from to)
    (let ((queue (new-queue)))
      (merge-ordered (lambda (what key left right)
                       (case what
                         ((:left)
                          (enqueue queue (list 'removed key (second left))))
                         ((:right)
                          (enqueue queue (list 'added key (second right))))
                         ((:same)
                          (let ((from-digest (second (find-entry from key)))
                                (to-digest (second (find-entry to key))))
                            (unless (equal? from-digest to-digest)
                              (enqueue queue (list 'modified key from-digest to-digest)))))))
                     (get-entries from)
                     (get-entries to)
                     key: car
                     case-insensitive?: #t)
      (new Associative-Diff (queue-list queue))))
  
  
  ;;;
  ;;;; Status
  ;;;
  
  
  (method package (staging-status self)
    (diff self (head-index self) (staging-index self)))
  
  
  (method package (working-status self)
    (diff self (staging-index self) (working-index self)))
  
  
  ;;;
  ;;;; Head
  ;;;
  
  
  (method (write-head self ref)
    (call-with-output-file (path-settings head)
      (lambda (output)
        (write ref output)
        (newline output))))
  
  
  (method package (read-head self)
    (and (exists? head)
         (call-with-input-file (path-settings head)
           read)))
  
  
  (method package (require-head self)
    (or (read-head self)
        (jas-exception-no-commits)))
  
  
  ;;;
  ;;;; Branches
  ;;;
  
  
  (method (write-branch self branch commit)
    (let ((file (branch-file self branch)))
      (call-with-output-file (path-settings file)
        (lambda (output)
          (write commit output)
          (newline output)))))
  
  
  (method (read-branch self name)
    (let ((file (branch-file self name)))
      (and (exists? file)
           (call-with-input-file (path-settings file)
             read))))
  
  
  (method (branch-file self name)
    (new-file (branches-directory self) name))
  
  
  (method (branches-directory self)
    heads)
  
  
  (method (branch-exists? self name)
    (exists? (branch-file self name)))
  
  
  (method package (branches self)
    (map get-name (collect-files (branches-directory self)
                     (lambda (file)
                       #t))))
  
  
  ;;;
  ;;;; References
  ;;;
  
  
  (method package (commit? self ref)
    (string? ref))
  
  
  (method package (branch? self ref)
    (and (pair? ref)
         (eq? (car ref) branch:)))
  
  (method (make-branch self name)
    (list branch: name))
  
  (method package (branch-name self ref)
    (cadr ref))
  
  
  (method package (resolve self ref)
    (cond ((commit? self ref)
           ref)
          ((branch? self ref)
           (read-branch self (branch-name self ref)))
          (else
           (jas-exception "Invalid reference: {a}" ref))))
  
  
  ;;;
  ;;;; Revisions
  ;;;
  
  
  (method package (parse self rev)
    (cond ((starts-with? rev "HEAD" ignore-case?: #t)
           (let ((parents (substring rev (string-length "HEAD") (string-length rev))))
             (if (equal? parents (make-string (string-length parents) #\^))
                 (let (iter (commit (resolve self (require-head self))) (count (string-length parents)))
                   (if (<= count 0)
                       commit
                     (iter (commit-parent self commit) (- count 1))))
               (jas-exception "Invalid revision: {a}" rev))))
          ((equal? rev "master")
           (make-branch self "master"))
          (else
           rev))))


;;;
;;;; Index
;;;


(class Associative-Index extends Object
  
  
  (slot repository getter generate)
  (slot directory  getter generate)
  (slot file       getter generate)
  (slot paths      getter generate)
  (slot entries    getter generate)
  
  
  (method override (initialize self repository directory (file: file #f) (entries: entries #f))
    (set! self.repository repository)
    (set! self.directory directory)
    (set! self.file file)
    (set! self.paths (make-table test: equal?))
    (set! self.entries (or entries (if (and file (exists? file))
                                       (load-from-file self)
                                     '())))
    (setup-paths self))
  
  
  (method override (print self output readably)
    (print-unreadable self output
      (lambda (output)
        (let ((len (length entries)))
          (format output "with {a} entr{a}" (format-cardinality len) (format-y/ies len))))))
  
  
  (method (setup-paths self)
    (for-each (lambda (entry)
                (table-set! paths (car entry) entry))
              entries))
  
  
  (method (load-from-file self)
    (call-with-input-file (path-settings file)
      read-all))
  
  
  (method package (save-to-file self)
    (call-with-output-file (path-settings file)
      (lambda (output)
        (for-each (lambda (entry)
                    (format output "{s}{%}" entry))
                  entries))))
  
  
  (method (updating self path test proc)
    (let (iter (prev #f) (scan entries))
      (if (null? scan)
          (proc prev scan)
        (let ((entry (car scan)))
          (let ((entry-path (car entry)))
            (if (test entry-path path)
                (iter prev (cdr scan))
              (case (ci-compare entry-path path)
                ((:less)
                 (iter scan (cdr scan)))
                ((:equal)
                 (proc prev (cdr scan)))
                ((:greater)
                 (proc prev scan)))))))))
  
  
  (method package (update self path path-type added)
    (let ((test (if (eq? path-type 'file)
                    ci=?
                  (lambda (entry-path path)
                    (starts-with? entry-path path ignore-case?: #t)))))
      (iterate-table-safe paths
        (lambda (entry-path entry)
          (when (test entry-path path)
            (table-clear paths entry-path))))
      (for-each (lambda (entry)
                  (bind (path digest seconds) entry
                    (table-set! paths path entry)))
                added)
      (updating self path test
        (lambda (prev next)
          (cond ((not prev)
                 (if (null? added)
                     (set! entries next)
                   (set-cdr! (last-pair added) next)
                   (set! entries added)))
                (else
                 (if (null? added)
                     (set-cdr! prev next)
                   (set-cdr! prev added)
                   (set-cdr! (last-pair added) next))))))
      entries))
  
  
  (method package (add-file self path file)
    (let ((entry (scan-file repository path file base: self)))
      (let ((entries (list entry)))
        (bind (path digest seconds) entry
          (store-file repository file digest)
          (update self path 'file entries)
          (save-to-file self)
          entries))))
  
  
  (method package (add-blob self path content)
    (let ((entry (scan-blob repository path content)))
      (let ((entries (list entry)))
        (bind (path digest seconds) entry
          (store-blob repository content digest)
          (update self path 'file entries)
          (save-to-file self)
          entries))))
  
  
  (method package (add-directory self path dir)
    (let ((entries (scan-directory repository path dir base: self)))
      (for-each (lambda (entry)
                  (bind (path digest seconds) entry
                    (let ((file (new-file directory path)))
                      (store-file repository file digest))))
                entries)
      (update self path 'directory entries)
      (save-to-file self)
      entries))
  
  
  (method package (remove-file self path file)
    (update self path 'file '())
    (save-to-file self))
  
  
  (method package (remove-directory self path directory)
    (update self path 'directory '())
    (save-to-file self))
  
  
  (method package (find-entry self path)
    (table-ref paths path #f)))


;;;
;;;; Diff
;;;


(class Associative-Diff extends Object
  
  
  (slot changes getter generate)
  
  
  (method override (initialize self changes)
    (set! self.changes changes))
  
  
  (method override (print self output readably)
    (print-unreadable self output
      (lambda (output)
        (let ((len (length changes)))
          (format output "with {a} change{a}" (format-cardinality len) (format-plural len)))))))


;;;
;;;; Exception
;;;


(definition protected (jas-exception format-string . rest)
  (throw (new Associative-Exception (apply format format-string rest))))


(definition protected (jas-exception-no-commits)
  (jas-exception "Your current head does not have any commits yet"))


(class Associative-Exception extends Exception
  
  
  (slot message)
  
  
  (method override (initialize self message)
    (nextmethod self)
    (set! self.message message))
  
  
  (method override (get-message self)
    message))


;;;
;;;; Describe
;;;


(definition public (jas-describe obj output)
  (define (describe-index index)
    (for-each (lambda (entry)
                (apply debug entry))
              (get-entries index)))
  
  (define (describe-diff diff)
    (for-each (lambda (change)
                (bind (what path) change
                  (case what
                    ((added)    (format output "    \033[32madded:    {a}\033[39;49m{%}" path))
                    ((removed)  (format output "    \033[31mremoved:  {a}\033[39;49m{%}" path))
                    ((modified) (format output "    \033[36mmodified: {a}\033[39;49m{%}" path)))))
              (get-changes diff)))
  
  (typecase obj
    ((Associative-Index)
     (describe-index obj))
    ((Associative-Diff)
     (describe-diff obj))
    (else
     (jas-exception "Unable to describe {a}" obj)))))
