;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Associative Remote Protocol
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module jazz.associative.remote jazz


(import (jazz.associative)
        (jazz.version))


(definition package jas-service
  51000)


(definition package jas-code
  (code-string->32-bit-integer "JASS"))

(definition package jas-version
  {Version 1 0 0})


(definition package jas-header
  (32-bit-integer->bytes jas-code
    (lambda (b1 b2 b3 b4)
      (version->bytes jas-version
        (lambda (b5 b6 b7 b8)
          (u8vector b1 b2 b3 b4 b5 b6 b7 b8))))))


(definition package (jas-retrieve-content repository path)
  (let ((entry (find-entry repository path)))
    (and entry
         (let ((digest (get-digest entry))
               (flags (get-flags entry)))
           (list (retrieve-object repository digest) digest flags))))))
