;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Associative Tester
;;;


(module protected jazz.associative.validate.Associative-Tester jazz


(import (jazz.associative)
        (jazz.io)
        (jazz.markup)
        (jazz.validation))


(class Associative-Tester extends Tester
  
  
  (form
    (<install> title: "Associative-Tester"))


  (method override (test self)
    (test-init self))
  
  
  ;;;
  ;;;; Init
  ;;;
  
  
  (method (test-init self)
    (initialize-aliases)
    (let ((dir {Directory Home "Devel" "jazz" "temp" "test"}))
      (define (create-file path content)
        (let ((file (new-file dir (tokenise-filename path))))
          (create-directories file)
          (call-with-output-file (path-settings file)
            (lambda (output)
              (display content output)
              (newline output)))))
      
      (define (delete-file path)
        (let ((file (new-file dir (tokenise-filename path))))
          (delete file)))
      
      (when (exists? dir)
        (delete dir))
      ;; init repo
      (let ((repo (jas-init dir))
            (author "Guillaume Cartier")
            (email "gcartier@jazzscheme.org"))
        (jas-config-set repo 'user.name author)
        (jas-config-set repo 'user.email email)
        (let* ((a "a.txt")
               (b "b.txt")
               (d "c/d.txt")
               (f "c/e/f.txt")
               (g "g.txt")
               (h "h.txt"))
          (create-file a "aaa")
          (create-file b "bbb")
          (create-file d "ddd")
          (create-file f "fff")
          (create-file g "ggg")
          (create-file h "hhh")
          ;; empty commit
          (let ((c1 (jas-commit repo author email "c1" (jas-staging-tree repo) #f)))
            (debug 'c1 c1)
            (jas-add repo a)
            (jas-add repo b)
            ;; add two files
            (let ((c2 (jas-commit repo author email "c2" (jas-staging-tree repo) c1)))
              (debug 'c2 c2)
              (jas-add repo ".")
              ;; add working dir
              (let ((c3 (jas-commit repo author email "c3" (jas-staging-tree repo) c2)))
                (debug 'c3 c3)
                (create-file f "newfff")
                (jas-add repo f)
                ;; modify f
                (let ((c4 (jas-commit repo author email "c4" (jas-staging-tree repo) c3)))
                  (debug 'c4 c4)
                  (jas-remove repo f)
                  (delete-file f)
                  ;; delete f
                  (let ((c5 (jas-commit repo author email "c5" (jas-staging-tree repo) c4)))
                    (debug 'c5 c5))))))))))))
