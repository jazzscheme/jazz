;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Audio
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module jazz.audio jazz


(hub get-handle)
(hub pause)
(hub play)
(hub playing?)
(hub ready?)
(hub resume)
(hub set-3d-enabled)
(hub set-3d-position)
(hub set-loop)
(hub set-volume)
(hub stop)


(export (jazz.audio.foreign))
(import (jazz.audio.foreign)
        (jazz.io))


;; unfortunately cricket crashes on some systems
(definition protected cricket?
  #t)

(definition protected (set-cricket? flag)
  (set! cricket? flag))


;;;
;;;; Library
;;;


(definition audio-initialized?
  #f)


(definition public (startup-audio)
  (when cricket?
    (unless audio-initialized?
      (CricketInit)
      (set! audio-initialized? #t))))


(definition public (shutdown-audio)
  (when cricket?
    (when audio-initialized?
      (CricketShutdown)
      (set! audio-initialized? #f))))


(definition public (update-audio)
  (when cricket?
    (when audio-initialized?
      (CricketUpdate))))


(add-exit-job!
  (lambda ()
    (shutdown-audio)))


;;;
;;;; Sound
;;;


(definition public (new-bank-sound path)
  (new Sound (and cricket? (CricketNewBankSound (parse path)))))


(definition public (new-stream-sound path)
  (new Sound (and cricket? (CricketNewStreamSound (parse path)))))


(definition public (set-3d-attenuation near far)
  (when cricket?
    (CricketSet3dAttenuation near far)))


(definition public (set-3d-listener eyeX eyeY eyeZ lookingAtX lookingAtY lookingAtZ upX upY upZ)
  (when cricket?
    (CricketSet3dListenerPosition eyeX eyeY eyeZ lookingAtX lookingAtY lookingAtZ upX upY upZ)))


(class Sound extends Object
  
  
  (slot handle getter generate)
  
  
  (method override (initialize self handle)
    (set! self.handle handle))
  
  
  (method override (destroy self)
    (when cricket?
      (CricketDestroy handle)))
  
  
  (method public (ready? self)
    (if cricket?
        (CricketReady handle)
      #t))
  
  
  (method public (play self)
    (when cricket?
      (CricketPlay handle)))
  
  
  (method public (stop self)
    (when cricket?
      (CricketStop handle)))
  
  
  (method public (playing? self)
    (if cricket?
        (CricketPlaying handle)
      #f))
  
  
  (method public (pause self)
    (when cricket?
      (CricketPause handle)))
  
  
  (method public (resume self)
    (when cricket?
      (CricketResume handle)))
  
  
  (method public (paused? self)
    (if cricket?
        (CricketPaused handle)
      #f))
  
  
  (method public (set-loop self)
    (when cricket?
      (CricketSetLoop handle)))
  
  
  (method public (release-loop self)
    (when cricket?
      (CricketReleaseLoop handle)))
  
  
  (method public (get-volume self)
    (if cricket?
        (CricketGetVolume handle)
      1.))
  
  
  (method public (set-volume self volume)
    (when cricket?
      (CricketSetVolume handle volume)))
  
  
  (method public (set-3d-enabled self flag)
    (when cricket?
      (CricketSet3dEnabled handle flag)))
  
  
  (method public (set-3d-position self x y z)
    (when cricket?
      (CricketSet3dPosition handle x y z)))))
