;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Audio
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module jazz.audio jazz


(hub pause)
(hub play)
(hub playing?)
(hub ready?)
(hub resume)
(hub set-3d-enabled)
(hub set-3d-position)
(hub set-loop)
(hub set-panorama)
(hub set-volume)
(hub stop)


(export (jazz.audio.foreign))
(import (jazz.audio.foreign)
        (jazz.geometry)
        (jazz.io)
        (jazz.stream)
        (jazz.syntax (phase syntax)))


;; useful if audio is unavailable on a system
(definition audio?
  #t)

(definition protected (set-audio? flag)
  (set! audio? flag))


;;;
;;;; Library
;;;


(definition audio-initialized?
  #f)


(definition public (startup-audio)
  (when audio?
    (unless audio-initialized?
      (startup-gstreamer)
      (set! audio-initialized? #t))))


(definition public (shutdown-audio)
  (when audio?
    (when audio-initialized?
      (shutdown-gstreamer)
      (set! audio-initialized? #f))))


;;;
;;;; Sound
;;;


(definition public (new-sound path)
  (and audio? (new Sound (parse path))))


(definition public (new-stream-sound path)
  (and audio? (new Sound (parse path))))


(definition public (set-3d-attenuation near far)
  (when audio?
    ))


(definition public (set-3d-listener eyeX eyeY eyeZ lookingAtX lookingAtY lookingAtZ upX upY upZ)
  (when audio?
    ))


(definition 3d-sounds
  '())

(definition (register-3d-sound sound)
  (set! 3d-sounds (cons sound 3d-sounds)))

(definition (unregister-3d-sound sound)
  (set! 3d-sounds (remove! sound 3d-sounds)))


(definition EPSI <fl>
  1e-5)


(definition (copy-vert vert <f64vector>) <f64vector>
  (f64vector
    (f64vector-ref vert 0)
    (f64vector-ref vert 1)
    (f64vector-ref vert 2)))


(definition (vert- v1 <f64vector> v2 <f64vector>) <f64vector>
  (f64vector
    (- (f64vector-ref v1 0) (f64vector-ref v2 0))
    (- (f64vector-ref v1 1) (f64vector-ref v2 1))
    (- (f64vector-ref v1 2) (f64vector-ref v2 2))))


(definition (vert-norm v <f64vector>) <fl>
  (let ((x (f64vector-ref v 0))
        (y (f64vector-ref v 1))
        (z (f64vector-ref v 2)))
    (sqrt (+ (* x x)
             (* y y)
             (* z z)))))


(definition (vert-distance v1 <f64vector> v2 <f64vector>) <fl>
  (vert-norm (vert- v2 v1)))


(definition (vert-near? v1 <f64vector> v2 <f64vector>) <bool>
  (< (vert-distance v1 v2) EPSI))


(definition (interpolate x <fl> x0 <fl> x1 <fl> y0 <fl> y1 <fl>) <fl>
  (+ y0 (* (- x x0) (/ (- y1 y0) (- x1 x0)))))


(definition listener-position
  #f)

(definition listener-sight
  #f)


(definition near-distance
  2.5)

(definition near-volume
  1.)

(definition far-distance
  50.)

(definition far-volume
  0.)


;; pass vector-signed-angle until a clean solution
(definition package (update-3d-sounds position sight vector-signed-angle)
  (when (or (not listener-position)
            (not listener-sight)
            (not (vert-near? position listener-position))
            (not (vert-near? sight listener-sight)))
    (set! listener-position (copy-vert position))
    (set! listener-sight (copy-vert sight))
    (for-each (lambda (sound)
                (let ((pos (get-position sound)))
                  ;; volume
                  (let ((dist (vert-distance pos listener-position)))
                    (let ((vol (cond ((<= dist near-distance)
                                      near-volume)
                                     ((>= dist far-distance)
                                      far-volume)
                                     (else
                                      (interpolate dist near-distance far-distance 1. 0.)))))
                      (set-volume sound vol)))
                  ;; pan
                  (let ((angle (vector-signed-angle listener-sight (vert- pos listener-position) (f64vector 0. 1. 0.))))
                    (let ((pan (cond ((between? angle 0. PI/2) (interpolate angle 0. PI/2 0. -1.))
                                     ((between? angle PI/2 PI) (interpolate angle PI/2 PI -1. 0.))
                                     ((between? angle (- PI) (- PI/2)) (interpolate angle (- PI) (- PI/2) 0. 1.))
                                     ((between? angle (- PI/2) 0.) (interpolate angle (- PI/2) 0. 1. 0.)))))
                      (set-panorama sound pan)))))
              3d-sounds)))


(class Sound extends Object
  
  
  (slot pipeline getter generate)
  (slot position getter generate)
  
  
  (method override (initialize self location)
    (let ((pipeline (gst-launch (tie "filesrc location={location} name=src")
                                "decodebin name=decode"
                                "audioconvert name=convert"
                                "volume name=volume"
                                "audiopanorama name=panorama"
                                "autoaudiosink name=sink")))
      (gst_object_set_name pipeline "sound")
      (let ((process-messages (pipeline-messages-processor pipeline #t)))
        (thread-start!
          (new-thread
            (lambda ()
              (let (loop)
                (process-messages)
                (sleep .01)
                (loop))))))
      (set! self.pipeline pipeline)))
  
  
  (method override (destroy self)
    (when audio?
      (when pipeline
        (unregister-3d-sound self)
        (gst_element_set_state pipeline GST_STATE_NULL)
        (gst_object_unref pipeline)
        (set! pipeline #f))))
  
  
  (method public (ready? self)
    (if audio?
        #t
      #t))
  
  
  (method public (play self)
    (when audio?
      (gst_element_set_state pipeline GST_STATE_PLAYING)))
  
  
  (method public (stop self)
    (when audio?
      (gst_element_set_state pipeline GST_STATE_READY)))
  
  
  (method public (rewind self)
    (when audio?
      (gst_element_seek_simple pipeline GST_FORMAT_TIME GST_SEEK_FLAG_FLUSH 0)))
  
  
  (method public (playing? self)
    (if audio?
        #t
      #f))
  
  
  (method public (pause self)
    (when audio?
      (gst_element_set_state pipeline GST_STATE_PAUSED)))
  
  
  (method public (resume self)
    (when audio?
      (gst_element_set_state pipeline GST_STATE_PLAYING)))
  
  
  (method public (paused? self)
    (if audio?
        #f
      #f))
  
  
  (method public (set-loop self)
    (when audio?
      ))
  
  
  (method public (release-loop self)
    (when audio?
      ))
  
  
  (method public (get-volume self)
    (if audio?
        1.
      1.))
  
  
  (method public (set-volume self vol)
    (when audio?
      (let ((volume (gst_bin_get_by_name pipeline "volume")))
        (g_object_set_double volume "volume" vol))))
  
  
  (method public (set-panorama self pan)
    (when audio?
      (let ((panorama (gst_bin_get_by_name pipeline "panorama")))
        (g_object_set_double panorama "panorama" pan))))
  
  
  (method public (set-3d-enabled self flag)
    (when audio?
      ))
  
  
  (method public (set-3d-position self x y z)
    (when audio?
      (set! position (f64vector x y z))
      (register-3d-sound self)))))
