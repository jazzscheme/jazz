;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Audio
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module jazz.audio jazz


(hub ended?)
(hub get-volume)
(hub mute)
(hub pause)
(hub paused?)
(hub play)
(hub playing?)
(hub resume)
(hub rewind)
(hub set-panorama)
(hub set-volume)
(hub unmute)


(import (jazz.event)
        (jazz.io)
        (jazz.stream)
        (jazz.stream.syntax (phase syntax))
        (jazz.syntax (phase syntax)))


;; useful if audio is unavailable on a system
(definition audio?
  #t)

(definition protected (set-audio? flag)
  (set! audio? flag))


;;;
;;;; Library
;;;


(definition audio-initialized?
  #f)


(definition public (startup-audio)
  (when audio?
    (unless audio-initialized?
      (startup-gstreamer)
      (set! audio-initialized? #t))))


(definition public (shutdown-audio)
  (when audio?
    (when audio-initialized?
      (shutdown-gstreamer)
      (set! audio-initialized? #f))))


;;;
;;;; Sound
;;;


(definition public (new-sound file)
  (new Sound file))


(class Sound extends Object
  
  
  (slot file     initialize #f getter generate)
  (slot pipeline initialize #f getter generate)
  
  
  (method override (initialize self file)
    (when audio?
      (set! self.file file)
      (let ((location (parse file)))
        (let ((pipeline (gst-pipeline (tie "filesrc location={location} name=src")
                                      "decodebin name=decode"
                                      "audioconvert name=convert"
                                      "audioresample name=resample"
                                      "volume name=volume"
                                      "audiopanorama name=panorama"
                                      (cond-expand
                                        (windows "directsoundsink name=sink buffer-time=200000 latency-time=100000")
                                        (else "autoaudiosink name=sink")))))
          (gst_object_set_name pipeline "sound")
          (set! self.pipeline pipeline)))))
  
  
  (method override (destroy self)
    (when audio?
      (when pipeline
        ;; hack around gstreamer sometimes crashing if we
        ;; destroy the sound shortly after asking for playing
        (gst_element_wait_state pipeline)
        (gst_element_release pipeline)
        (set! pipeline #f)))
    (nextmethod self))
  
  
  (method public (play self)
    (when audio?
      (gst_element_set_state pipeline GST_STATE_PLAYING)))

  
  (method public (playing? self)
    (and pipeline
         (= (gst_element_get_state pipeline) GST_STATE_PLAYING)))
  
  
  (method public (pause self)
    (when audio?
      (gst_element_set_state pipeline GST_STATE_PAUSED)))
  
  
  (method public (resume self)
    (when audio?
      (gst_element_set_state pipeline GST_STATE_PLAYING)))
  
  
  (method public (rewind self)
    (when audio?
      (when (playing? self)
        (gst_element_seek_simple pipeline GST_FORMAT_TIME GST_SEEK_FLAG_FLUSH 0))))
  
  
  (method public (paused? self)
    (if audio?
        (= (gst_element_get_state pipeline) GST_STATE_PAUSED)
      #f))
  
  
  (method public (ended? self)
    (if audio?
        (and (= (gst_element_get_state pipeline) GST_STATE_PLAYING)
             (let ((remaining (- (gst_element_query_duration pipeline GST_FORMAT_TIME)
                                 (gst_element_query_position pipeline GST_FORMAT_TIME))))
               ;; sometimes position is not exactly duration
               (<= remaining 1)))
      #f))
  
  
  (method public (mute self)
    (when audio?
      (with-unref ((volume (gst_bin_get_by_name pipeline "volume")))
        (g_object_set_boolean volume "mute" #t))))
  
  
  (method public (unmute self)
    (when audio?
      (with-unref ((volume (gst_bin_get_by_name pipeline "volume")))
        (g_object_set_boolean volume "mute" #f))))
  
  
  (method public (get-volume self)
    (if audio?
        (with-unref ((volume (gst_bin_get_by_name pipeline "volume")))
          (g_object_get_double volume "volume"))
      1.))
  
  
  (method public (set-volume self vol)
    (when audio?
      (with-unref ((volume (gst_bin_get_by_name pipeline "volume")))
        (g_object_set_double volume "volume" vol))))
  
  
  (method public (set-panorama self pan)
    (when audio?
      (with-unref ((panorama (gst_bin_get_by_name pipeline "panorama")))
        (g_object_set_double panorama "panorama" pan))))))
