;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Audio Foreign (Cricket)
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.audio.foreign jazz


(import (jazz.foreign)
        (jazz.platform.types))


;; TODO
;; - can we disable the cricket welcome message
;;   - kCkLog_None doesnt seem to work
;;   - maybe define a custom CkLogFunc


(cond-expand
  (windows
(c-include "<cricket.h>")


(c-external (CricketInit) void)
(c-external (CricketShutdown) void)
(c-external (CricketUpdate) void)
(c-external (CricketNewBankSound char-string) void*)
(c-external (CricketNewStreamSound char-string) void*)
(c-external (CricketDestroy void*) void)
(c-external (CricketReady void*) bool)
(c-external (CricketPlay void*) void)
(c-external (CricketStop void*) void)
(c-external (CricketPlaying void*) bool)
(c-external (CricketPause void*) void)
(c-external (CricketResume void*) void)
(c-external (CricketPaused void*) bool)
(c-external (CricketSetLoop void*) void)
(c-external (CricketReleaseLoop void*) void)
(c-external (CricketGetVolume void*) float)
(c-external (CricketSetVolume void* float) void)
(c-external (CricketSet3dEnabled void* bool) void)
(c-external (CricketSet3dPosition void* float float float) void)
(c-external (CricketSet3dAttenuation float float) void)
(c-external (CricketSet3dListenerPosition float float float float float float float float float) void))
  (mac
(c-include "<ck/ck.h>")
(c-include "<ck/config.h>")
(c-include "<ck/bank.h>")
(c-include "<ck/sound.h>")


(c-declare audio #/C/

CkConfig config;

//#)


(c-type CkSound (pointer "CkSound"))


(c-external (CricketInit) void
  #/C/
    config.logMask = kCkLog_Warning | kCkLog_Error;
    CkInit(&config);
//#)


(c-external (CricketShutdown) void
  #/C/
    CkShutdown();
//#)


(c-external (CricketUpdate) void
  #/C/
    CkUpdate();
//#)


(c-external (CricketNewBankSound char-string) CkSound
  #/C/
    CkBank* bank = CkBank::newBank(___arg1, kCkPathType_FileSystem);
    CkSound* sound = CkSound::newBankSound(bank, 0);
    ___result_voidstar = sound;
//#)


(c-external (CricketNewStreamSound char-string) CkSound
  #/C/
    CkSound* sound = CkSound::newStreamSound(___arg1, kCkPathType_FileSystem);
    ___result_voidstar = sound;
//#)


(c-external (CricketDestroy CkSound) void
  #/C/
    ___arg1->destroy();
//#)


(c-external (CricketReady CkSound) bool
  #/C/
    ___result = ___arg1->isReady();
//#)


(c-external (CricketPlay CkSound) void
  #/C/
    ___arg1->play();
//#)


(c-external (CricketStop CkSound) void
  #/C/
    ___arg1->stop();
//#)


(c-external (CricketPlaying CkSound) bool
  #/C/
    ___result = ___arg1->isPlaying();
//#)


(c-external (CricketPause CkSound bool) void
  #/C/
    ___arg1->setPaused(true);
//#)


(c-external (CricketResume CkSound bool) void
  #/C/
    ___arg1->setPaused(false);
//#)


(c-external (CricketPaused CkSound) bool
  #/C/
    ___result = ___arg1->isPaused();
//#)


(c-external (CricketSetLoop CkSound) void
  #/C/
    ___arg1->setLoop(0, -1);
    ___arg1->setLoopCount(-1);
//#)


(c-external (CricketReleaseLoop CkSound) void
  #/C/
    ___arg1->releaseLoop();
//#)


(c-external (CricketGetVolume CkSound) float
  #/C/
    ___result = ___arg1->getVolume();
//#)


(c-external (CricketSetVolume CkSound float) void
  #/C/
    ___arg1->setVolume(___arg2);
//#)


(c-external (CricketSet3dEnabled CkSound bool) void
  #/C/
    ___arg1->set3dEnabled(___arg2);
//#)


(c-external (CricketSet3dPosition CkSound float float float) void
  #/C/
    ___arg1->set3dPosition(___arg2, ___arg3, ___arg4);
//#)


(c-external (CricketSet3dAttenuation float float) void
  #/C/
    CkSound::set3dAttenuation(kCkAttenuationMode_Linear, ___arg1, ___arg2, 0);
//#)


(c-external (CricketSet3dListenerPosition float float float float float float float float float) void
  #/C/
    CkSound::set3dListenerPosition(___arg1, ___arg2, ___arg3, ___arg4, ___arg5, ___arg6, ___arg7, ___arg8, ___arg9);
//#)


@objc (
(c-include "<stdbool.h>")
(c-declare audio #/Objective-C/

#import "ck/objc/ck.h"
#import "ck/objc/config.h"
#import "ck/objc/bank.h"
#import "ck/objc/sound.h"

CkConfig config;

//#)


(c-type CkoSound (pointer "CkoSound"))


(c-external (CricketInit) void
  #/C/
    CkConfigInit(&config);
    config.logMask = kCkLog_Warning | kCkLog_Error;
    CkInit(&config);
//#)


(c-external (CricketShutdown) void
  #/C/
    CkShutdown();
//#)


(c-external (CricketUpdate) void
  #/C/
    CkUpdate();
//#)


(c-external (CricketNewBankSound char-string) CkoSound
  #/C/
    CkoBank* bank = [CkoBank newBank:[NSString stringWithUTF8String:___arg1]];
    CkoSound* sound = [CkoSound newBankSound:bank index:0];
    ___result_voidstar = sound;
//#)


(c-external (CricketNewStreamSound char-string) CkoSound
  #/C/
    CkoSound* sound = [CkoSound newStreamSound:[NSString stringWithUTF8String:___arg1]];
    ___result_voidstar = sound;
//#)


(c-external (CricketPlay CkoSound) void
  #/C/
    [___arg1 play];
//#)


(c-external (CricketStop CkoSound) void
  #/C/
    [___arg1 stop];
//#)


(c-external (CricketPlaying CkoSound) bool
  #/C/
    ___result = [___arg1 playing];
//#)


(c-external (CricketPause CkoSound) void
  #/C/
    [___arg1 setPaused:true];
//#)


(c-external (CricketResume CkoSound) void
  #/C/
    [___arg1 setPaused:false];
//#)


(c-external (CricketPaused CkoSound) bool
  #/C/
    ___result = [___arg1 paused];
//#)


(c-external (CricketSetLoop CkoSound) void
  #/C/
    [___arg1 setLoop:-1 endFrame:0];
    [___arg1 setLoopCount:-1];
//#)


(c-external (CricketReleaseLoop CkoSound) void
  #/C/
    [___arg1 releaseLoop];
//#)


(c-external (CkGetVolume CkoSound) float
  #/C/
    ___result = [___arg1 getVolume];
//#)


(c-external (CkSetVolume CkoSound float) void
  #/C/
    [___arg1 setVolume:___arg2];
//#)))
  (else
(definition public (CricketInit))
(definition public (CricketShutdown))
(definition public (CricketUpdate))
(definition public (CricketNewBankSound path))
(definition public (CricketNewStreamSound path))
(definition public (CricketDestroy sound))
(definition public (CricketReady sound))
(definition public (CricketPlay sound))
(definition public (CricketStop sound))
(definition public (CricketPlaying sound))
(definition public (CricketPause sound))
(definition public (CricketResume sound))
(definition public (CricketPaused sound))
(definition public (CricketSetLoop sound))
(definition public (CricketReleaseLoop sound))
(definition public (CricketGetVolume sound))
(definition public (CricketSetVolume sound volume))
(definition public (CricketSet3dEnabled sound flag))
(definition public (CricketSet3dPosition sound x y z))
(definition public (CricketSet3dAttenuation near far))
(definition public (CricketSet3dListenerPosition eyeX eyeY eyeZ lookingAtX lookingAtY lookingAtZ upX upY upZ)))))
