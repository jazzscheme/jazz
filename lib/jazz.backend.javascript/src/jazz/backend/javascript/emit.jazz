;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Jazz JavaScript Backend
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module jazz.backend.javascript.emit jazz


(import (jazz.backend))


;;;
;;;; Definition
;;;


(define-emit (definition (javascript backend) declaration environment expression unsafe-expression)
  (let ((locator (get-locator~ declaration)))
    (if (and (pair? expression)
             (eq? (car expression) '%fun))
        (bind (parameters . body) (cdr expression)
          `(%fun ,locator ,parameters
             ,@body))
      `(%var ,locator ,expression))))


;;;
;;;; Specialize
;;;


(define-emit (specialize (javascript backend) expression declaration environment)
  (unimplemented 'specialize))


;;;
;;;; Generic
;;;


(define-emit (generic (javascript backend) declaration environment signature-emit body-emit)
  (unimplemented 'generic))


;;;
;;;; Specific
;;;


(define-emit (specific (javascript backend) declaration environment signature-emit body-emit)
  (unimplemented 'specific))


;;;
;;;; Class
;;;


(define-emit (class (javascript backend) declaration environment)
  (unimplemented 'class))


;;;
;;;; Interface
;;;


(define-emit (interface (javascript backend) declaration environment)
  (unimplemented 'interface))


;;;
;;;; Slot
;;;


(define-emit (slot (javascript backend) declaration environment initialize-emit)
  (unimplemented 'slot))


;;;
;;;; Property
;;;


(define-emit (property (javascript backend) declaration environment initialize-emit)
  (unimplemented 'property))


;;;
;;;; Method
;;;


(define-emit (method (javascript backend) declaration environment signature-emit signature-casts body-emit unsafe-signature)
  (unimplemented 'method))


;;;
;;;; With-Self
;;;


(define-emit (with-self (javascript backend) expression declaration environment body-emit)
  (unimplemented 'with-self))


;;;
;;;; With-Dynamic-Self
;;;


(define-emit (with-dynamic-self (javascript backend) expression declaration environment body-emit)
  (unimplemented 'with-dynamic-self))


;;;
;;;; Dispatch Call
;;;


(define-emit (dispatch-call (javascript backend) name source declaration environment object-code others-arguments others-codes)
  (unimplemented 'dispatch-call))


;;;
;;;; Dispatch Reference
;;;


(define-emit (dispatch-reference (scheme backend) name source declaration environment)
  (unimplemented 'dispatch-reference))


;;;
;;;; Cast
;;;


(define-emit (cast (javascript backend) expression declaration environment type expression-emit)
  (unimplemented 'cast))


;;;
;;;; Construct
;;;


(define-emit (construct (javascript backend) expression declaration environment class-emit values-emit)
  (unimplemented 'construct))


;;;
;;;; Allocate
;;;


(define-emit (allocate (javascript backend) expression declaration environment class-emit values-emit)
  (unimplemented 'allocate))


;;;
;;;; Static
;;;


(define-emit (static (javascript backend) expression declaration environment static)
  (unimplemented 'static))


;;;
;;;; Reference
;;;


(define-emit (c-definition-reference (javascript backend) declaration)
  (unimplemented 'c-definition-reference))


(define-emit (category-reference (javascript backend) declaration)
  `(category-reference))


(define-emit (class-reference (javascript backend) declaration)
  `(class-reference))


(define-emit (definition-reference (javascript backend) declaration)
  `(definition-reference))


(define-emit (dynamic-self-reference (javascript backend) declaration)
  `(dynamic-self-reference))


(define-emit (generic-reference (javascript backend) declaration)
  (unimplemented 'generic-reference))


(define-emit (method-reference (javascript backend) declaration source-declaration environment self dispatch-code)
  `(method-reference))


(define-emit (nextmethod-variable-reference (javascript backend) binding)
  `(nextmethod-variable-reference))


(define-emit (self-reference (javascript backend) declaration source-declaration)
  `(self-reference))


(define-emit (slot-reference (javascript backend) declaration self)
  `(slot-reference))


;;;
;;;; Call
;;;


(define-emit (method-call (javascript backend) binding binding-src dispatch-code self arguments)
  (unimplemented 'method-call))


(define-emit (nextmethod-call (javascript backend) binding binding-src self arguments)
  (unimplemented 'nextmethod-call))


;;;
;;;; Specialized Call
;;;


(define-emit (specialized-call (javascript backend) expression declaration operator arguments)
  #f)


(define-emit (specialized-class-of-call (javascript backend) object)
  #f)


;;;
;;;; New Call
;;;


(define-emit (new-call (javascript backend) operator locator arguments arguments-codes declaration environment)
  #f)


;;;
;;;; Primitive Call
;;;


(define-emit (primitive-call (javascript backend) operator locator arguments arguments-codes declaration environment)
  #f)


;;;
;;;; Inlined Call
;;;


(define-emit (inlined-call (javascript backend) expression declaration operator arguments)
  #f)


;;;
;;;; Unsafe Call
;;;


(define-emit (unsafe-call (javascript backend) operator locator arguments arguments-codes declaration environment)
  #f)


;;;
;;;; Assignment
;;;


(define-emit (definition-assignment (javascript backend) declaration source-declaration environment value-code)
  (let ((locator (get-locator~ declaration)))
    `(c= ,locator ,(jazz:sourcified-form value-code))))


(define-emit (slot-assignment (javascript backend) declaration source-declaration environment self value-code)
  (unimplemented 'slot-assignment)))
