;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Builder Run
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module jazz.builder jazz


(require (dialect.development))


(definition (port-argument arguments)
  (let ((pair (member "-port" arguments)))
    (if (and pair (pair? (cdr pair)))
        (string->number (cadr pair))
      (error "Missing port argument"))))


(definition (handling-exceptions port thunk)
  (with-exception-catcher
    (lambda (exc)
      (write-binary (list 'error (exception-reason exc) #f) port))
    (lambda ()
      (catch (Walk-Problems exc
               (write-binary (list 'walk (exception-reason exc) (exception-detail exc)) port))
        (thunk)))))


(definition package (builder-analyse arguments)
  (define (parse-toplevel expr)
    (let ((kind (source-code (car (source-code expr))))
          (expr (cdr (source-code expr))))
      (let ((first (source-code (car expr))))
        (if (memq? first '(protected public))
            (values kind (source-code (cadr expr)) first)
          (values kind first 'public)))))
  
  (let ((port (open-tcp-client (port-argument arguments))))
    (let ((info (read-binary port)))
      (bind (syntax str container line col) info
        (handling-exceptions port
          (lambda ()
            (assert (eq? syntax 'jazz)
              (let ((forms (parameterize ((walk-for 'eval))
                             (with-readtable jazz-readtable
                               (lambda ()
                                 (call-with-input-string str
                                   (lambda (port)
                                     (read-source-all port container line col))))))))
                (assert (null? (cdr forms))
                  (let ((form (car forms)))
                    (receive (kind unit-name access) (parse-toplevel form)
                      (reset-module-imported (outline-unit unit-name))
                      (expand-form form backend: #f)
                      (write-binary (list 'none #f #f) port)))))))))))))
