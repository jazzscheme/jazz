;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Calendar Days
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library protected jazz.calendar.Calendar-Day jazz


(import (jazz.graphic)
        (jazz.locale)
        (jazz.ui)
        (jazz.ui.view)
        (jazz.utilities))


(class Calendar-Day extends View


  (property week initialize {} accessors generate)
  (property day  initialize {} accessors generate)
  (property date initialize {} accessors generate)
  
  
  (slot selected? initialize #f)

  
  (method (print printer readably)
    (print-unreadable self printer
      (function (printer)
        (format printer "{a}" date))))
  
  
  ;;;
  ;;;; Access
  ;;;
  
  
  (method (get-manager)
    (get-manager~ (get-calendar)))
  
  
  ;;;
  ;;;; Calendar
  ;;;
  
  
  (method public (get-calendar)
    parent)
  
  
  (method (same-day?)
    (= date (get-date~ (get-calendar))))
  
  
  (method (same-month?)
    (= (get-month~ date) (get-month~ (get-date~ (get-calendar)))))
  
  
  ;;;
  ;;;; Selection
  ;;;


  (method public (get-selected?)
    selected?)


  (method public (set-selected? flag)
    (set! selected? flag)
    (invalidate-view))


  ;;;
  ;;;; Mouse
  ;;;
  
  
  (method (mouse-down pos)
    (let ((calendar (get-calendar)))
      (acquire-focus~ calendar)
      (set-selection~ calendar self)))


  ;;;
  ;;;; Mouse
  ;;;
  
  
  (method (double-click pos)
    (double-click-day~ (get-manager) self))


  ;;;
  ;;;; Drawing
  ;;;
  
  
  (definition Current-Day-Font
    {Font name: Text}
    @convert
    {Font font-name: "MS Sans Serif" point-size: 8 bold?: #t})

  
  (method (draw surface context lh lv)
    (let ((bounds (get-bounds))
          (calendar (get-calendar)))
      (fill-rect~ surface bounds (either (day-color~ calendar self) (day-color))))
    (draw-day surface)
    (draw-header surface context))
  
  
  (method protected virtual (draw-day surface)
    )
  
  
  (method protected virtual (draw-header surface context)
    (let ((bounds (get-bounds)))
      (when selected?
        (let ((header (new Rect 0 0 (get-right~ bounds) 14)))
          (fill-rect~ surface header (selection-color))))
      (set-font~ surface (if (current-day?) Current-Day-Font {Font name: Label}))
      (let* ((same-month? (same-month?))
             (day-label (day-label same-month?)))
        (set-text-color~ surface (cond ((not same-month?) {Color name: White}) (selected? {Color name: White}) (else {Color name: Black})))
        (draw-text~ surface 0 0 day-label))))
  
  
  (method (selection-color)
    (if (focused?)
        {Color name: Focused-Selection}
      {Color name: Unfocused-Selection}))
  
  
  (method (day-color)
    (if (same-month?)
        {Color name: White}
      {Color name: Light-Purple}))
  
  
  (method (current-day?)
    @convert-date
    (= (day-date~ date) (day-date~ (local-date))))
  
  
  (method (day-label same-month?)
    (let ((day (get-day~ date)))
      (if (and (= day 1) same-month?)
          (format "{s} {a}" day (localize (month-abbrev~ date)))
        (->string day))))
  
  
  @wait
  (method (draw-day surface)
    (nextmethod surface)
    (let* ((calendar (get-calendar))
           (editor (get-editor~ calendar))
           (recurring (collect-recurring editor))
           (holidays (collect-holidays editor))
           (events (collect-events editor))
           (displayed (sort < (append events recurring) key: (function (time) (get-date~ time))))
           (h 1)
           (v 15)
           (row 0)
           (col 0))
      (when holidays
        (let ((bounds (get-bounds)))
          (fill-rect~ surface bounds (get-holiday-color~ (get-client~ editor)))))
      (for-each (function (event)
                  (let ((color (get-color~ event)))
                    (fill-rect~ surface (new Rect h v (+ h 10) (+ v 10)) color)
                    (increase! col)
                    (if (<= col 3)
                        (increase! h 11)
                      (increase! v 11)
                      (set! h 1)
                      (increase! row)
                      (set! col 0))))
                displayed)))


  ;;;
  ;;;; Focus
  ;;;
  
  
  (method protected virtual (focused?)
    (eq? (get-focus) parent))))
