;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Calendar Days
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.calendar.Calendar-Day jazz


(import (jazz.calendar)
        (jazz.graphic)
        (jazz.view)
        (time))


(class Calendar-Day extends View


  (property week initialize #f accessors generate)
  (property day  initialize #f accessors generate)
  (property date initialize #f accessors generate)
  
  
  (slot selected? initialize #f)

  
  (method override (print self output readably)
    (print-unreadable self output
      (lambda (output)
        (format output "{a}" date))))
  
  
  ;;;
  ;;;; Access
  ;;;
  
  
  (method package (get-manager self)
    (get-manager (get-calendar self)))
  
  
  ;;;
  ;;;; Calendar
  ;;;
  
  
  (method public (get-calendar self)
    parent)
  
  
  (method (same-day? self)
    (= (date-day date) (date-day (get-date (get-calendar self)))))
  
  
  (method (same-month? self)
    (= (date-month date) (date-month (get-date (get-calendar self)))))
  
  
  ;;;
  ;;;; Selection
  ;;;


  (method public (get-selected? self)
    selected?)


  (method public (set-selected? self flag)
    (set! selected? flag)
    (invalidate-view self))


  ;;;
  ;;;; Mouse
  ;;;
  
  
  (method override (mouse-down self evt)
    (let ((calendar (get-calendar self)))
      (acquire-focus calendar)
      (set-selection calendar self)))


  ;;;
  ;;;; Mouse
  ;;;
  
  
  (method override (double-click self evt)
    (double-click-day (get-manager self) self))


  ;;;
  ;;;; Drawing
  ;;;
  
  
  (definition Current-Day-Font
    {Font Label-Bold})

  
  (method override (draw self surface context)
    (let ((bounds (get-bounds self))
          (calendar (get-calendar self)))
      (fill-rect surface bounds (or (day-color calendar self) (day-color self))))
    (draw-day self surface)
    (draw-header self surface context))
  
  
  (method protected virtual (draw-day self surface)
    )
  
  
  (method package virtual (draw-header self surface context)
    (when selected?
      (fill-rect surface (new Rect 0 0 (get-right (get-bounds self)) (get-bottom (get-bounds self))) (selection-color self)))
    (set-font surface (if (current-day? self) Current-Day-Font {Font Label}))
    (draw-text surface 0 0 (->string (date-day date)) (cond (selected? {Color Red})
                                                             ((not (same-month? self)) {Color Medium-Gray})
                                                             (else {Color Black})))
    (draw-text surface 0 12 (date->string date "~a") (cond (selected? {Color Red})
                                                            ((not (same-month? self)) {Color Medium-Gray})
                                                            (else {Color Black}))))

  
  (method package (selection-color self)
    (if (focused? self)
        {Color Focused-Selection}
      {Color Light-Yellow}))
  
  
  (method package (day-color self)
    (if (same-month? self)
        {Color White}
      {Color Light-Purple}))
  
  
  (method (current-day? self)
    (let ((today (current-date)))
      (and (= (date-day date) (date-day today))
           (= (date-month date) (date-month today))
           (= (date-year date) (date-year today)))))
  
  
  @convert
  (method (draw-day surface)
    (nextmethod surface)
    (let* ((calendar (get-calendar))
           (editor (get-editor calendar))
           (recurring (collect-recurring editor))
           (holidays (collect-holidays editor))
           (events (collect-events editor))
           (displayed (sort < (append events recurring) key: get-date~))
           (h 1)
           (v 15)
           (row 0)
           (col 0))
      (when holidays
        (let ((bounds (get-bounds)))
          (fill-rect surface bounds (get-holiday-color (get-client editor)))))
      (for-each (lambda (event)
                  (let ((color (get-color event)))
                    (fill-rect surface (new Rect h v (+ h 10) (+ v 10)) color)
                    (increase! col)
                    (if (<= col 3)
                        (increase! h 11)
                      (increase! v 11)
                      (set! h 1)
                      (increase! row)
                      (set! col 0))))
                displayed)))


  ;;;
  ;;;; Focus
  ;;;
  
  
  (method package virtual (focused? self)
    (eq? (active-focus) parent))))
