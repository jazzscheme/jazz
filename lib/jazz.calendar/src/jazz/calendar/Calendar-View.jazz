;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Calendar
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2012
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.calendar.Calendar-View jazz


(import (jazz.calendar)
        (jazz.ui)
        (time))


(class Calendar-View extends View


  (property date                initialize #f accessors explicit)
  (property spacing             initialize 1  accessors generate)
  (property multiple-selection? initialize #f accessors generate)
  
  
  (slot selection initialize #f)
  
  
  (method override (finish rest)
    (nextmethod rest)
    (set-date date)
    (install-days)
    (set-selection (find-calendar-day date)))
  
  
  ;;;
  ;;;; Access
  ;;;


  (method public (get-date)
    date)


  (method public (set-date value)
    (set! date (or value (current-date)))
    (when (get-finished?)
      (date-update)))
  
  
  (method protected virtual (date-update)
    (update-days)
    (invalidate-view))


  (method public virtual (get-manager)
    (find-ascendant Calendar-Dialog))


  ;;;
  ;;;; Actions
  ;;;
  
  
  (method override (guest-actions)
    (cons (find-actions 'calendar)
          (nextmethod)))


  ;;;
  ;;;; Events
  ;;;
  
  
  (method (on-prior evt)
    (prior-press))
  
  
  (method (on-next evt)
    (next-press))
  
  
  ;;;
  ;;;; Focus
  ;;;
  
  
  (method override (focus-gained)
    (when selection
      (invalidate-view~ selection)))
  
  
  (method override (focus-lost)
    (when selection
      (invalidate-view~ selection)))


  ;;;
  ;;;; Keyboard
  ;;;
  
  
  (method override (left-arrow-press modifiers)
    (move-selection -1 0))
  
  
  (method override (up-arrow-press modifiers)
    (move-selection 0 -1))
  
  
  (method override (right-arrow-press modifiers)
    (move-selection 1 0))
  
  
  (method override (down-arrow-press modifiers)
    (move-selection 0 1))
  
  
  (method public virtual (prior-press)
    (goto-previous-month))
  
  
  (method public virtual (next-press)
    (goto-next-month))
  
  
  (method (move-selection dx dy)
    (if (null? selection)
        (bell)
      (let ((nx (max 0 (min 6 (+ (get-day~ selection) dx))))
            (ny (max 0 (min 4 (+ (get-week~ selection) dy)))))
        (set-selection (find-calendar-cell nx ny)))))
  
  
  ;;;
  ;;;; Install
  ;;;
  
  
  (method (install-days)
    (define (install-day week day date)
      (new (calendar-day-class) parent: self week: week day: day date: date))
    
    (let ((date (calendar-base)))
      (for-each (lambda (week)
                  (for-each (lambda (day)
                              (install-day week day date)
                              (set! date (add-one-day date)))
                            (naturals 0 7)))
                (naturals 0 6))))
  
  
  (method protected virtual (calendar-day-class)
    Calendar-Day)
  
  
  (method (calendar-base)
    (let (subtract (date (date-add (make-date 0 0 0 0 1 (date-month date) (date-year date) (date-zone-offset (current-date))) -1 'day)))
      (if (zero? (date-week-day date))
          date
        (subtract (subtract-one-day date)))))
  
  
  (method (add-one-day date)
    (date-add date 1 'day))
  
  
  ;; This method fix a broblem with date-add when original date is 31 and the Next or Previous Month as 30 or less days.
  (method (select-correct-month date month)
    (let ((new-month (if (< month 1) 12 (if (> month 12) 1 month)))
          (correct-date date))
      (while (> (date-month correct-date) new-month)
        (set! correct-date (date-add correct-date -1 'day)))
      correct-date))
  
  
  (method (add-one-month date)
    (let ((next-month-date (date-add date 1 'month)))
      (select-correct-month next-month-date (+ (date-month date) 1))))
  
  
  (method (subtract-one-day date)
    (date-add date -1 'day))
  
  
  (method (subtract-one-month date)
    (let ((last-month-date (date-add date -1 'month)))
      (select-correct-month last-month-date (- (date-month date) 1))))
  
  
  (method (normalize-date date)
    (make-date 0 0 0 0 (date-day date) (date-month date) (date-year date) (date-zone-offset date)))
  
  
  ;;;
  ;;;; Update
  ;;;
  
  
  (method (update-days)
    (let ((date (calendar-base))
          (scan children))
      (for-each (lambda (week)
                  (for-each (lambda (day)
                              (let ((calendar-day (car scan)))
                                (set-date~ calendar-day date)
                                (set! date (add-one-day date))
                                (set! scan (cdr scan))))
                            (naturals 0 7)))
                (naturals 0 6))))
  
  
  ;;;
  ;;;; Layout
  ;;;
  
  
  (method override (layout)
    (let ((width (quotient (get-width) 7))
          (height (quotient (get-height) 6)))
      (for-each (lambda (view)
                  (when (is? view Calendar-Day)
                    (let ((row (get-week~ view))
                          (col (get-day~ view)))
                      (set-position~ view (new Point (+ 1 (* col (+ width spacing))) (* row (+ height spacing))))
                      (set-size~ view (new Dimension width height)))))
                children)))
  
  
  ;;;
  ;;;; Drawing
  ;;;
  
  
  (method public virtual (day-color day)
    #f)
  
  
  ;;;
  ;;;; Days
  ;;;
  
  
  (method public (find-calendar-day date)
    (find-if (lambda (view)
               (and (is? view Calendar-Day)
                    (nu=? date (get-date~ view))))
             children))
  
  
  (method public (find-calendar-cell x y)
    (find-if (lambda (view)
               (and (is? view Calendar-Day)
                    (= x (get-day~ view))
                    (= y (get-week~ view))))
             children))
  
  
  ;;;
  ;;;; Selection
  ;;;


  (method public (get-selection)
    selection)


  (method public (set-selection day)
    (when (neq? selection day)
      (when selection
        (set-selected?~ selection #f))
      (set! selection day)
      (when selection
        (set-selected?~ selection #t))
      (selection-update)))
  
  
  (method protected virtual (selection-update)
    )
  
  
  ;;;
  ;;;; Navigation
  ;;;
  
  (method public (goto-previous-month)
    (goto-month date subtract-one-month))
  
  
  (method public (goto-next-month)
    (goto-month date add-one-month))
  
  
  (method (goto-month new-date proc)
    (let ((new-date (proc new-date)))
      (set-date new-date)
      (set-selection (find-calendar-day new-date))))))
