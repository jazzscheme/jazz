;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Periods Chooser
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.calendar.Periods-Chooser jazz


(import (jazz.calendar)
        (jazz.graphic)
        (jazz.handler)
        (jazz.jml)
        (jazz.library)
        (jazz.resource)
        (jazz.time)
        (jazz.ui)
        (jazz.ui.view))


(class Periods-Chooser extends View
  

  (property periods initialize '() accessors generate)

  
  (form
    (<install>                                              size: {Dimension 283 352}
      (<Label-View>                                         title: "Choose a set of dates" position: {Point 10 9} size: {Dimension 191 16} font: {Font Label})
      (<Border-View>                   name: periods-border position: {Point 9 33} size: {Dimension 172 254} border-type: edge
        (<Scroller-View>                                    hscroll?: #t vscroll?: #t
          (<!>                         name: content        layout-type: fill
            (<Tree-Header>
              (<!>                     name: content
                (<Tree-View>           name: periods-tree   filled-column: #f portfolio: :images action-handler: {Event-Handler :form on-action} selection-handler: {Event-Handler :form on-selection-change} return-press-handler: {Event-Handler :form on-return-press} escape-press-handler: {Event-Handler :form on-escape-press}
                  (<Tree-Node-Column>  name: start          title: "Start" toplevel-controls?: #f display-images?: #f width: 84)
                  (<Tree-Label-Column> name: end            title: "End" width: 84)))))))
      (<Push-Button>                   name: edit-start     title: "Start" position: {Point 192 33} size: {Dimension 80 24} action-handler: {Event-Handler :form on-edit-start})
      (<Push-Button>                   name: edit-end       title: "End" position: {Point 192 61} size: {Dimension 80 24} action-handler: {Event-Handler :form on-edit-end})
      (<Push-Button>                   name: add-period     title: "Add" position: {Point 192 95} size: {Dimension 80 24} action-handler: {Event-Handler :form on-add-period})
      (<Push-Button>                   name: remove-period  title: "Remove" position: {Point 192 123} size: {Dimension 80 24} action-handler: {Event-Handler :form on-remove-period})
      (<Horizontal-Line>                                    position: {Point 6 300} size: {Dimension 270 8})
      (<Push-Button>                   name: ok             title: "OK" position: {Point 110 315} size: {Dimension 80 24} action-handler: {Event-Handler :host on-ok} default?: #t)
      (<Push-Button>                   name: cancel         title: "Cancel" position: {Point 194 315} size: {Dimension 80 24} action-handler: {Event-Handler :host on-cancel})))

  
  (method override (finish rest)
    (nextmethod rest)
    (let ((tree (get-tree)))
      (setup-periods tree)
      (setup-selection tree)
      (update-buttons)
      (acquire-focus~ tree)))

  
  ;;;
  ;;;; Access
  ;;;


  (method (get-tree)
    (locate 'periods-tree))

  
  ;;;
  ;;;; Host
  ;;;
  
  
  (method meta override (host-title)
    "Choose dates")
  
  
  (method meta override (host-position)
    {Point 450 300})
  
  
  (method meta override (host-size)
    {Dimension 302 120})
  
  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method (on-action evt)
    (update-buttons))
  
  
  (method (on-selection-change evt)
    (let* ((tree (get-tree))
           (selection (get-single-selection~ tree)))
      (update-buttons)))
  
  
  (method (on-edit-start evt)
    (let* ((tree (get-tree))
           (selection (get-single-selection~ tree))
           (period (element periods selection))
           (date (get-modal Calendar-Dialog host-title: "Choose start date" initial-date: (get-start~ period))))
      (set-start~ period date)
      (update)))
  
  
  (method (on-edit-end evt)
    (let* ((tree (get-tree))
           (selection (get-single-selection~ tree))
           (period (element periods selection))
           (date (get-modal Calendar-Dialog host-title: "Choose end date" initial-date: (get-end~ period))))
      (set-end~ period date)
      (update)))
  
  
  (method (on-add-period evt)
    (let* ((tree (get-tree))
           (start (get-modal Calendar-Dialog host-title: "Choose start date"))
           (end (get-modal Calendar-Dialog host-title: "Choose end date" initial-date: (add~ start 'week 1)))
           (period (list (new Period start end))))
      (set! periods (append periods period))
      (update)))
  
  
  (method (on-remove-period evt)
    (let* ((tree (get-tree))
           (selection (get-single-selection~ tree))
           (period (element periods selection)))
      (set! periods (remove period periods))
      (update)
      (when (< selection (get-visible-count~ tree))
        (set-single-selection~ tree selection))))
  
  
  ;; Should really be generic in the Dialog class
  (method override (on-return-press evt)
    (let ((dialog (get-host)))
      (end-modal~ dialog (get-modal-result~ dialog))))
  
  
  ;; Should really be generic in the Dialog class
  (method override (on-escape-press evt)
    (let ((dialog (get-host)))
      (cancel-modal~ dialog)))

  
  ;;;
  ;;;; Setup
  ;;;
  
  
  (method (update)
    (setup-periods (get-tree)))

  
  (method (setup-periods tree)
    (remove-every-row~ tree)
    (with-update-locked~ tree
      (lambda ()
        (for-each (lambda (period)
                    (add-row~ tree children: (list (new Tree-Node image: {Image-Resource "PageDate"} title: (present-date-day (get-start~ period))) (new Tree-Label title: (present-date-day (get-end~ period)))) user-data: period))
                  periods))))
  
  
  (method (setup-selection tree)
    (when periods
      (set-selection~ tree (list 0))))
  
  
  ;;;
  ;;;; Update
  ;;;
  
  
  (method (update-buttons)
    (let* ((tree (get-tree))
           (selection (get-single-selection~ tree)))
      (if (null? selection)
          (begin
            (set-enabled?~ (locate 'edit-start) #f)
            (set-enabled?~ (locate 'edit-end) #f)
            (set-enabled?~ (locate 'add-period) #t)
            (set-enabled?~ (locate 'remove-period) #f))
        (set-enabled?~ (locate 'edit-start) #t)
        (set-enabled?~ (locate 'edit-end) #t)
        (set-enabled?~ (locate 'add-period) #t)
        (set-enabled?~ (locate 'remove-period) #t))))
  
  
  ;;;
  ;;;; Modal
  ;;;
  
  
  (method override (get-modal-result)
    (let ((tree (get-tree))
          (periods (new List-Factory)))
      (for-each-visible-row~ tree
       (lambda (row rank)
         (let ((period (get-user-data~ row)))
           (put~ periods period))))
      (get-output~ periods)))))
