;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Catalog
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module jazz.catalog jazz


(export (jazz.catalog.autoload))

(import (jazz.library)
        (jazz.system)
        (jazz.ui.view))


;;;
;;;; Parse
;;;


(definition Parser-Dialects
  '((commonlisp "lisp" "el") ;; quick approximation until a dedicated emacs lisp parser
    (c "c" "cpp" "h")
    (css "css")
    (jazz "jazz")
    (java "java")
    (javascript "js")
    (lua "lua")
    (properties "properties")
    (python "py")
    (scheme "scm" "sch" "ss" "gambcini" "jazzini")))


(definition Parser-Classes
  (list
    (cons 'commonlisp (lambda () jazz.editor.commonlisp.CommonLisp-Parser))
    (cons 'c (lambda () jazz.editor.c.C-Parser))
    @wait (cons 'css (lambda () jazz.editor.css.CSS-Parser))
    (cons 'jazz (lambda () jazz.editor.jazz.Jazz-Parser))
    @wait (cons 'java (lambda () jazz.editor.java.Java-Parser))
    @wait (cons 'javascript (lambda () jazz.editor.javascript.JavaScript-Parser))
    @wait (cons 'lua (lambda () jazz.editor.lua.Lua-Parser))
    @wait (cons 'properties (lambda () jazz.editor.properties.Properties-Parser))
    @wait (cons 'python (lambda () jazz.editor.python.Python-Parser))
    (cons 'scheme (lambda () jazz.editor.scheme.Scheme-Parser))))


(definition public (get-parser-dialect extension)
  (let ((info
          (rassociate extension Parser-Dialects
            test: (lambda (ext extensions)
                    (member? ext extensions test: ci=?)))))
    (when info
      (car info))))


(definition public (get-parser-class dialect)
  (let ((pair (assq dialect Parser-Classes)))
    (when pair
      (let ((proc (cdr pair)))
        (proc)))))


(definition public split-identifiers?
  (make-parameter #t))


;;;
;;;; Thread
;;;


(definition catalog-thread
  #f)


(definition (get-catalog-thread)
  (or catalog-thread (let ((thread (start-loop-thread 'catalog)))
                       (set! catalog-thread thread)
                       thread)))


(definition public (post-catalog thunk)
  (thread-post (get-catalog-thread) 'post-catalog
    thunk))


;;;
;;;; Locator
;;;


(definition public (locator->entry locator)
  (let ((cataloguer (get-cataloguer~ (get-application))))
    (let (iterate (scan (reverse (split-identifier locator)))
                  (name '()))
      (if (not-null? scan)
          (let ((root (apply compose-name (reverse scan))))
            (let ((definition (get-definition~ cataloguer root)))
              (if definition
                  (or (child~ definition name)
                      (iterate (cdr scan) (cons (car scan) name)))
                (iterate (cdr scan) (cons (car scan) name)))))
        #f)))))
