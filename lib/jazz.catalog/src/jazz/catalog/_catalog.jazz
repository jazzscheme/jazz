;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Catalog
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module jazz.catalog jazz


(export (jazz.catalog.autoload))

(import (jazz.io)
        (jazz.service)
        (jazz.version))


(definition public catalog-version
  {Version 2 7 5})


;;;
;;;; Services
;;;


(definition package edit-document
  (request-service 'edit-document))


;;;
;;;; Cataloguer
;;;


(definition *cataloguer*
  #f)


(definition public (get-cataloguer)
  *cataloguer*)

(definition public (set-cataloguer cataloguer)
  (set! *cataloguer* cataloguer))


;;;
;;;; Parse
;;;


(definition Parser-Extensions
  '())

(definition Parser-Classes
  '())


(definition public (register-parser name extensions class)
  (set! Parser-Extensions (cons (cons name extensions) Parser-Extensions))
  (set! Parser-Classes (cons (cons name class) Parser-Classes)))


(definition public (get-parser-dialect extension)
  (activate-couplers 'catalog)
  (let ((info
          (rassociate extension Parser-Extensions
            test: (lambda (ext extensions)
                    (member? ext extensions test: extension=?)))))
    (when info
      (car info))))


(definition public (get-parser-class dialect)
  (activate-couplers 'catalog)
  (let ((pair (assq dialect Parser-Classes)))
    (when pair
      (cdr pair))))


(definition public (extension-match-test ext)
  (let ((parser-class (get-parser-class (get-parser-dialect ext))))
    (when parser-class
      (get-match-test~ parser-class))))


;;;
;;;; Thread
;;;


(definition catalog-thread
  #f)


(definition (get-catalog-thread)
  (or catalog-thread (let ((thread (start-loop-thread 'catalog)))
                       (set! catalog-thread thread)
                       thread)))


(definition public (post-catalog thunk)
  (thread-post (get-catalog-thread) 'post-catalog
    thunk)))
