;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Catalog
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module jazz.catalog jazz


(hub activate)
(hub add-catalog)
(hub add-completions)
(hub add-definition)
(hub add-reference)
(hub child)
(hub context-setup)
(hub deactivate)
(hub edit)
(hub find-active-catalog)
(hub find-catalogs)
(hub find-definition)
(hub for-each-active-catalog)
(hub get-active?)
(hub get-catalog)
(hub get-catalogs)
(hub get-char-encoding)
(hub get-coalesced-definitions)
(hub get-column)
(hub get-completions)
(hub get-constituent-test)
(hub get-definition)
(hub get-definitions)
(hub get-dialect)
(hub get-digest)
(hub get-end)
(hub get-extends)
(hub get-file)
(hub get-file-definition)
(hub get-file-definitions)
(hub get-file-entry)
(hub get-filename-entries)
(hub get-image)
(hub get-implements)
(hub get-kind)
(hub get-line)
(hub get-location-name)
(hub get-marked?)
(hub get-match-test)
(hub get-modified?)
(hub get-modifiers)
(hub get-moniker)
(hub get-name)
(hub get-parameters)
(hub get-parent)
(hub get-qualified)
(hub get-range)
(hub get-references)
(hub get-root-definition)
(hub get-start)
(hub get-statistics)
(hub get-title)
(hub get-toplevel-definition)
(hub get-type)
(hub iterate-definitions)
(hub iterate-files)
(hub iterate-references)
(hub line->entry)
(hub load-content)
(hub parse)
(hub present)
(hub present-detailed)
(hub present-name)
(hub print-catalog)
(hub reset)
(hub save)
(hub save-catalogs)
(hub save?)
(hub scan)
(hub scan-file)
(hub search-definitions)
(hub search-references)
(hub set-active?)
(hub set-catalog)
(hub set-digest)
(hub set-file-definition)
(hub set-marked?)
(hub set-modified?)
(hub set-parent)
(hub set-root-definition)
(hub set-type)
(hub update)
(hub update-file)
(hub update-indexes)
(hub with-mutex)


(export (jazz.catalog.autoload))

(import (jazz.io)
        (jazz.version))


(definition public catalog-version
  {Version 2 7 5})


;;;
;;;; Cataloguer
;;;


(definition *cataloguer*
  #f)


(definition public (get-cataloguer)
  *cataloguer*)

(definition public (set-cataloguer cataloguer)
  (set! *cataloguer* cataloguer))


;;;
;;;; Parse
;;;


(definition Parser-Extensions
  '())

(definition Parser-Classes
  '())


(definition public (register-parser name extensions class)
  (set! Parser-Extensions (cons (cons name extensions) Parser-Extensions))
  (set! Parser-Classes (cons (cons name class) Parser-Classes)))


(definition public (get-parser-dialect extension)
  (activate-couplers 'catalog)
  (let ((info
          (rassociate extension Parser-Extensions
            test: (lambda (ext extensions)
                    (member? ext extensions test: extension=?)))))
    (and info
         (car info))))


(definition public (get-parser-class dialect)
  (activate-couplers 'catalog)
  (let ((pair (assq dialect Parser-Classes)))
    (and pair
         (cdr pair))))


(definition public (extension-match-test ext)
  (let ((parser-class (get-parser-class (get-parser-dialect ext))))
    (and parser-class
         (get-match-test parser-class))))


;;;
;;;; Thread
;;;


(definition catalog-thread
  #f)


(definition (get-catalog-thread)
  (or catalog-thread (let ((thread (start-loop-thread 'catalog)))
                       (set! catalog-thread thread)
                       thread)))


(definition public (post-catalog thunk)
  (thread-post (get-catalog-thread) 'post-catalog
    thunk))


;;;
;;;; Container
;;;


;; containers are either
;; - a module name: a.b.c
;; - a file name: foo.scm


(definition container-entries
  (make-table test: equal?))


(definition protected (clear-container-entry container)
  (table-clear container-entries container))


(definition public (cache-container-entry container)
  (define (find-entry)
    (let ((cataloguer (get-cataloguer)))
      (let ((toplevel (get-toplevel-definition cataloguer container)))
        (if toplevel
            (get-parent toplevel)
          (let ((base (extract-base container)))
            (let ((entries (collect-if (lambda (file-entry)
                                         (filename=? (get-name (get-file file-entry)) container))
                                       (get-filename-entries cataloguer base))))
              (and (= (length entries) 1)
                   (car entries))))))))
  
  (or (table-ref container-entries container #f)
      (let ((entry (find-entry)))
        (table-set! container-entries container entry)
        entry)))


;;;
;;;; File
;;;


(definition file-entries
  (make-table test: pathname=? hash: pathname-hash))


(definition protected (clear-file-entry file)
  (table-clear file-entries file))


(definition public (cache-file-entry file)
  (or (table-ref file-entries file #f)
      (let ((entry (get-file-entry (get-cataloguer) file)))
        (table-set! file-entries file entry)
        entry))))
