;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Catalogs Organizer
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.catalog.catalog.Cataloguer jazz


(import (jazz.catalog)
        (jazz.feedback))


(class Cataloguer extends Object


  (slot catalogs initialize '() getter generate)


  ;;;
  ;;;; Catalogs
  ;;;


  (method public virtual (for-each-active-catalog self context proc)
    (for-each (lambda (catalog)
                (when (get-active? catalog)
                  (proc catalog)))
              catalogs))


  (method public virtual (add-catalog self catalog)
    (unless (memq? catalog catalogs)
      (set! catalogs (append! catalogs (list catalog)))))


  (method public virtual (remove-catalog self catalog)
    (when (memq? catalog catalogs)
      (set! catalogs (remove! catalog catalogs))))


  (method public (get-catalog self name (error?: error? #t))
    (or (find-active-catalog self name)
        (and error? (error "Unknown catalog: {t}" name))))
  
  
  (method public virtual (find-catalogs self name)
    (collect-if (lambda (catalog) (eq? (get-name catalog) name)) catalogs))
  
  
  (method public (find-active-catalog self name)
    (continuation-capture
      (lambda (return)
        (for-each-active-catalog self (get-context)
          (lambda (catalog)
            (when (eq? (get-name catalog) name)
              (continuation-return return catalog))))
        #f)))


  ;;;
  ;;;; Save
  ;;;
  
  
  (method public (save-catalogs self)
    (let ((names (make-table test: equal?)))
      (for-each-active-catalog self (get-context)
        (lambda (catalog)
          (when (save? catalog)
            (let ((name (get-name (get-file catalog))))
              (if (table-ref names name #f)
                  (modal-feedback (format "Conflict detected. Two or more catalogs are saving to the same file: {a}" name))
                (table-set! names name #t)
                (save catalog))))))))


  ;;;
  ;;;; Context
  ;;;


  (definition (get-context)
    #f)


  ;;;
  ;;;; Definitions
  ;;;

  
  (method public (get-definitions self name (context: context (get-context)))
    (let ((fact (new List-Factory)))
      (for-each-active-catalog self context
        (lambda (catalog)
          (put-sequence fact (get-definitions catalog name))))
      (get-output fact)))


  (method public (get-definition self name)
    (let ((definitions (get-definitions self name)))
      (and (not-null? definitions)
           ;; a big simplification for now...
           (car definitions))))


  (method public (get-toplevel-definition self name)
    (define (toplevel? definition)
      (is? (get-parent definition) File-Entry))
    
    (let ((definitions (get-definitions self name)))
      (let ((toplevels (collect-if toplevel? definitions)))
        (and (not-null? toplevels)
             ;; this should always be unique
             (car toplevels)))))

  
  (method public (get-coalesced-definitions self name (context: context (get-context)))
    (let* ((definitions (get-definitions self name context: context))
           (coalesced (collect-if (lambda (entry)
                                    (is-not? entry Constructor-Entry))
                                  definitions)))
      (if (and (= 1 (length coalesced))
               (is? (car coalesced) Category-Entry))
          coalesced
        definitions)))
  
  
  (method public (search-definitions self search-set (context: context (get-context)))
    (let ((fact (new List-Factory)))
      (for-each-active-catalog self context
        (lambda (catalog)
          (put-sequence fact (search-definitions catalog search-set))))
      (get-output fact)))
  
  
  (method public (search-references self search-set (context: context (get-context)))
    (let ((fact (new List-Factory)))
      (for-each-active-catalog self context
        (lambda (catalog)
          (put-sequence fact (search-references catalog search-set))))
      (get-output fact)))
  
  
  (method public (get-references self name (context: context (get-context)))
    (let ((fact (new List-Factory)))
      (for-each-active-catalog self context
        (lambda (catalog)
          (put-sequence fact (get-references catalog name))))
      (get-output fact)))
  
  
  (method public (get-filename-entries self name (context: context (get-context)))
    (let ((fact (new List-Factory)))
      (for-each-active-catalog self context
        (lambda (catalog)
          (put-sequence fact (get-file-definitions catalog name))))
      (get-output fact)))
  
  
  (method public (get-file-entries self file (context: context (get-context)))
    (let ((fact (new List-Factory)))
      (for-each-active-catalog self context
        (lambda (catalog)
          (let ((entry (get-file-entry catalog file)))
            (when entry
              (put fact entry)))))
      (get-output fact)))
  
  
  (method public (get-file-entry self file (context: context (get-context)))
    (let ((entries (get-file-entries self file context: context)))
      ;; the workbench should check for catalogs overlap
      (and (not-null? entries)
           (car entries))))


  ;;;
  ;;;; Completions
  ;;;


  (method public (get-completions self name (context: context (get-context)))
    (let ((table (make-table test: equal?)))
      (add-completions self table name context: context)
      (table-keys table)))
  
  
  (method public (add-completions self table name (context: context (get-context)))
    (for-each-active-catalog self context
      (lambda (catalog)
        (add-completions catalog table name))))))
