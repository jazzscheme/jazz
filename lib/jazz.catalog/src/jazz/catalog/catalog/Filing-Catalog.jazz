;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Filing Catalogs
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.catalog.catalog.Filing-Catalog jazz


(import (jazz.application)
        (jazz.catalog)
        (jazz.event)
        (jazz.io)
        (jazz.library)
        (jazz.system)
        (jazz.version))


(class undocumented Filing-Catalog extends Catalog
  
  
  (slot file              getter generate)
  (slot loaded?           getter generate)
  (slot modified?         accessors generate)
  (slot directories       getter generate)
  (slot extensions)
  (slot char-encoding)
  (slot heuristics)
  (slot references?       getter generate)
  (slot content-index)
  (slot definitions-index)
  (slot references-index)
  (slot completions-index)
  (slot mutex)
  
  
  (method override (initialize name file directories extensions char-encoding heuristics references?)
    (nextmethod name)
    (set! file~self file)
    (set! loaded?~self #f)
    (set! modified?~self #f)
    (set! directories~self directories)
    (set! extensions~self extensions)
    (set! char-encoding~self char-encoding)
    (set! heuristics~self heuristics)
    (set! references?~self references?)
    (set! content-index~self (make-table test: equal?))
    (set! definitions-index~self (make-table test: equal?))
    (set! references-index~self (make-table test: equal?))
    (set! completions-index~self (make-table test: equal?))
    (set! mutex~self (make-mutex 'catalog)))
  
  
  ;;;
  ;;;; Access
  ;;;
  
  
  (method public virtual (get-extensions)
    extensions)
  
  
  (method public virtual (get-char-encoding)
    char-encoding)
  
  
  (method public virtual (get-heuristics)
    heuristics)
  
  
  (method public (iterate-content proc)
    (iterate-table content-index proc))
  
  
  (method public (iterate-definitions proc)
    (iterate-table definitions-index proc))
  
  
  (method public (iterate-references proc)
    (iterate-table references-index proc))
  
  
  (method public (get-file-definitions name)
    (with-mutex
      (lambda ()
        (%%get-file-definitions name))))
  
  
  (method (%%get-file-definitions name)
    (table-ref content-index name '()))
  
  
  (method public (for-each-file-entry proc)
    (iterate-content
      (lambda (name file-entries)
        (for-each proc file-entries))))
  
  
  (method override (get-file-entry file)
    (with-mutex
      (lambda ()
        (%%get-file-entry file))))
  
  
  (method (%%get-file-entry file)
    (find-if (lambda (definition)
               (pathname=? (get-file~ definition) file))
             (%%get-file-definitions (get-base~ file))))
  
  
  (method protected virtual (setup-contexts)
    )
  
  
  (method public (get-statistics)
    (define (count-file-entries content-index)
      (let ((count 0))
        (iterate-table content-index
          (lambda (name file-entries)
            (increase! count (length file-entries))))
        count))
    
    (with-mutex
      (lambda ()
        (let ((f (count-file-entries content-index))
              (d (table-length definitions-index))
              (r (table-length references-index)))
          (format "{a} file{a}, {a} definition{a}, {a} reference{a}"
                  f (format-plural f)
                  d (format-plural d)
                  r (format-plural r))))))
  
  
  ;;;
  ;;;; Thread
  ;;;
  
  
  (method (with-mutex thunk)
    (mutex-lock! mutex)
    (prog1 (thunk)
      (mutex-unlock! mutex)))
  
  
  ;;;
  ;;;; Load
  ;;;
  
  
  (method public (load-content (report?: report? #t))
    (define (update-catalog-indexes report?)
      (when report?
        (user-feedback "Updating Indexes..."))
      (iterate-table content-index
        (lambda (name definitions)
          (for-each (lambda (file-definition)
                      (set-catalog~ file-definition self)
                      (update-indexes~ file-definition definitions-index references-index))
                    definitions))))
    
    (with-mutex
      (lambda ()
        (when (not loaded?)
          (when (exists?~ file)
            (when report?
              (user-feedback "Loading {a}..." name))
            (with-jazz-readtable
              (lambda ()
                (call-with-input-file (path-settings file eol-encoding: 'cr-lf)
                  (lambda (port)
                    (let ((version (read port)))
                      (when (and (is? version Version)
                                 (compatible?~ version catalog-version))
                        (table-load content-index port #t)))))))
            (update-catalog-indexes report?)
            (setup-content)
            (update-completions-index)
            (when report?
              (user-feedback "Done")))
          (set! loaded? #t)))))
  
  
  (method protected virtual (setup-content)
    )
  
  
  ;;;
  ;;;; Save
  ;;;
  
  
  (method protected virtual (save?)
    #t)
  
  
  (method public (save)
    (define (save-content)
      (let* ((all (table-keys/values content-index))
             (sorted (sort string<? all key: car)))
        (create-directories~ file)
        (call-with-output-file (path-settings file)
          (lambda (output)
            (format output "{s}{%}{%}" catalog-version)
            (for-each (lambda (info)
                        (bind (name . definitions) info
                          (when (not-null? definitions)
                            (format output "{s}{%}" name)
                            (format output " (")
                            (let ((first? #t))
                              (for-each (lambda (definition)
                                          (print-catalog~ definition first? output)
                                          (set! first? #f))
                                        definitions))
                            (format output "){%}"))))
                      sorted)))))
    
    (with-mutex
      (lambda ()
        (when modified?
          (user-feedback "Saving {a}..." name)
          (save-content)
          (set-modified? #f)
          (user-feedback "Done")))))
  
  
  ;;;
  ;;;; Update
  ;;;
  
  
  (method public (update (report?: report? #t))
    (load-content report?: report?)
    (when report?
      (user-feedback "Updating {a}..." name))
    
    (let ((exceptions/entries (scan report?: report?)))
      (receive (exceptions entries) (partition-binary exceptions/entries exception?)
        (with-mutex
          (lambda ()
            (when (not-null? entries)
              (set-modified? #t)
              (for-each update-entry entries))
            (sweep)
            (update-completions-index)))
        (when (not-null? exceptions)
          (post-event
            (lambda ()
              @wait
              (for-each debug (map exception-reason exceptions))
              @wait
              (let ((exc (car exceptions)))
                (message-box (exception-reason exc))
                (edit-exception exc))))))))
  
  
  (method public (update-file file)
    (load-content report?: #t)
    (let ((exception/entry (scan-file file #f)))
      (when exception/entry
        (if (exception? exception/entry)
            (let ((line (if (is? exception/entry Explore-Error) (format " at line {a}" (+ (get-line~ (get-start~ exception/entry)) 1)) "")))
              (user-message/action-handler (format "Error{a}: {a}" line (exception-reason exception/entry))
                                           (new Event-Handler execute: (lambda (evt) (edit-exception exception/entry))))
              (bell))
          (with-mutex
            (lambda ()
              (set-modified? #t)
              (update-entry exception/entry)
              (sweep)
              (update-completions-index)))))))
  
  
  (method (update-entry entry)
    (let ((file (get-file~ entry)))
      (let ((actual (%%get-file-entry file)))
        (when actual
          (set-marked?~ actual #f)))
      (let ((name (get-base~ file)))
        (set-marked?~ entry #t)
        (update-indexes~ entry definitions-index references-index)
        (table-add content-index name entry))))
  
  
  (definition (edit-exception exc)
    (if (is? exc Explore-Error)
        (let ((source (get-source~ exc))
              (range (get-range~ exc)))
          (edit-document source selection: range))
      (bell)))
  
  
  ;;;
  ;;;; Files
  ;;;
  
  
  (method protected virtual (iterate-files proc)
    (define (iterate-dir dir)
      (iterate-directory~ dir
        (lambda (file)
          (when (scan-file? file)
            (proc file)))
        files?: #t
        directories?: #f
        recursive?: #t))
    
    (if (is? directories Directory-Group)
        (for-each iterate-dir (get-list~ directories))
      (iterate-dir directories)))
  
  
  ;;;
  ;;;; Scan
  ;;;
  
  
  ;; This section is entirely functional and so should not lock the catalog mutex
  
  
  (method protected (scan (report?: report? #t))
    (reset)
    (let ((queue (new-queue)))
      (iterate-files
        (lambda (file)
          (let ((entry (scan-file file report?)))
            (when entry
              (enqueue queue entry)))))
      (queue-list queue)))
  
  
  (method protected (scan-file? file)
    (let ((extension (get-extension~ file))
          (extensions (effective-catalog-extensions (get-extensions))))
      (and (or (not extensions) (member? extension extensions test: extension=?))
           (get-parser-class (get-parser-dialect extension)))))
  
  
  (method protected (scan-file file report?)
    (define (scan file digest report?)
      (when report?
        (user-feedback "Parsing {a}" file))
      (let ((dialect (get-parser-dialect (get-extension~ file))))
        (parse~ (get-parser dialect) file digest dialect)))
    
    (when (scan-file? file)
      (if (exists?~ file)
          (let ((actual-entry (get-file-entry file)))
            (let ((actual-digest (and actual-entry (get-digest~ actual-entry))))
              (let ((updated-digest (file-digest file actual-digest)))
                (cond ((and actual-digest (nu=? actual-digest updated-digest))
                       (set-marked?~ actual-entry #t)
                       #f)
                      ((and actual-digest (string=? (get-hash~ actual-digest) (get-hash~ updated-digest)))
                       (set-digest~ actual-entry updated-digest)
                       (set-modified? #t)
                       (set-marked?~ actual-entry #t)
                       #f)
                      (else
                       (with-exception-filter
                         (lambda (exc)
                           #t)
                         (lambda (exc)
                           (wrap-exception exc))
                         (lambda ()
                           (scan file updated-digest report?))))))))
        (format :console "{%}Unable to catalog inexistant file: {a}" (parse~ file))
        #f)))
  
  
  ;;;
  ;;;; Parse
  ;;;
  
  
  (method (get-parser dialect)
    (let ((class (get-parser-class dialect)))
      (when class
        (new class self char-encoding: char-encoding heuristics: (get-heuristics) references?: references?))))
  
  
  ;;;
  ;;;; Sweep
  ;;;
  
  
  (method (reset)
    (iterate-table content-index
      (lambda (name definitions)
        (for-each (lambda (file-definition)
                    (set-marked?~ file-definition #f))
                  definitions))))
  
  
  (method (sweep)
    (define (sweep-table table marked? reset?)
      (iterate-table table
        (lambda (name definitions)
          (when (not-null? definitions)
            (let ((previous definitions)
                  (list (cdr definitions)))
              (while (not-null? list)
                (let ((definition (car list)))
                  (if (marked? definition)
                      (begin
                        (set! previous list)
                        (set! list (cdr list)))
                    (when reset?
                      (set-marked?~ definition #f))
                    (set-cdr! previous (cddr previous))
                    (set! list (cdr previous))))))
            (when (not (marked? (car definitions)))
              (set-modified? #t)
              (let ((lst (cdr definitions)))
                (if (null? lst)
                    (table-clear table name)
                  (table-set! table name lst))))))))
    
    (define (marked? definition)
      (get-marked?~ (get-file-definition~ definition)))
    
    (sweep-table content-index marked? #t)
    (sweep-table definitions-index marked? #f)
    (sweep-table references-index marked? #f))
  
  
  ;;;
  ;;;; Definitions
  ;;;
  
  
  (method override (get-definitions name)
    (with-mutex
      (lambda ()
        (%%get-definitions name))))
  
  
  (method (%%get-definitions name)
    (table-ref definitions-index (canonicalize-name name) '()))
  
  
  (method (search-definitions search-set)
    (with-mutex
      (lambda ()
        (let ((fact (new List-Factory)))
          (iterate-table definitions-index
            (lambda (name definitions)
              (when (regular-search (->string name) search-set)
                (put-sequence~ fact definitions))))
          (get-output~ fact)))))
  
  
  (method (search-references search-set)
    (with-mutex
      (lambda ()
        (let ((fact (new List-Factory)))
          (iterate-table references-index
            (lambda (name references)
              (when (regular-search (->string name) search-set)
                (put-sequence~ fact references))))
          (remove-duplicates (get-output~ fact))))))
  
  
  (method override (get-references name)
    (with-mutex
      (lambda ()
        (%%get-references name))))
  
  
  (method (%%get-references name)
    (table-ref references-index (canonicalize-name name) '()))
  
  
  (definition (canonicalize-name name)
    (->string name))
  
  
  ;;;
  ;;;; Completions
  ;;;
  
  
  (method (update-completions-index)
    (define (process-table table)
      (iterate-table table
        (lambda (name value)
          (when (>= (string-length name) 2)
            (let ((key (substring name 0 2)))
              (let ((matches (table-ref completions-index key '())))
                (when (not (member name matches))
                  (table-set! completions-index key (cons name matches)))))))))
    
    (set! completions-index (make-table test: equal?))
    (process-table definitions-index)
    (process-table references-index))
  
  
  (method override (add-completions dest target)
    (let ((len (cardinality target)))
      (when (>= len 2)
        (let ((key (substring target 0 2)))
          (for-each (lambda (completion)
                      (when (compare-n completion target len)
                        (table-set! dest completion #t)))
                    (table-ref completions-index key '()))))))))
