;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Catalog Entry
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.catalog.entry.Catalog-Entry jazz


(import (jazz.catalog)
        (jazz.ui))


(class undocumented Catalog-Entry extends Object
  
  
  (slot parent          initialize #f)
  (slot root-definition initialize #f)
  (slot file-definition initialize #f)


  ;;;
  ;;;; Access
  ;;;


  (method public inline (get-parent)
    parent)


  (method public inline (set-parent p)
    (set! parent p))


  (method public virtual (get-root-definition)
    root-definition)


  (method public virtual (set-root-definition def)
    (set! root-definition def))


  (method public virtual (get-file-definition)
    file-definition)


  (method public virtual (set-file-definition def)
    (set! file-definition def))


  ;;;
  ;;;; Virtual
  ;;;


  (method public virtual (get-file)
    #f)


  (method public virtual (get-moniker)
    #f)


  (method public virtual (get-title)
    )


  (method public virtual (get-location-name)
    )


  (method public virtual (get-name)
    )


  (method public virtual (get-line)
    )


  (method public virtual (get-column)
    )
  
  
  (method public virtual (get-start)
    )
  
  
  (method public virtual (get-end-line)
    )
  
  
  (method public virtual (get-end-column)
    )
  
  
  (method public virtual (get-end)
    )
  
  
  (method public virtual (get-range)
    )


  (method public virtual (get-definitions)
    '())
  
  
  (method public virtual (get-image)
    #f)


  ;;;
  ;;;; Present
  ;;;


  (method public virtual (present)
    )


  (method public virtual (present-name)
    )


  (method public virtual (present-identifier)
    )


  (method public virtual (present-detailed)
    (present-name))


  ;;;
  ;;;; Edit
  ;;;


  (method public virtual (edit . rest)
    )


  (method public virtual (edit-reference direction search-result . rest)
    (apply edit rest))
  
  
  (method protected (edit-textual-reference target . rest)
    (define (make-reference-search-result target)
      (define (reference-searcher target)
        (let ((parser-class (get-parser-class (get-dialect~ file-definition))))
          (let ((match-test (get-match-test~ parser-class))
                (constituent-test (get-constituent-test~ parser-class)))
            (->search-set (list (make-search-context target whole-words?: #t match-test: match-test constituent-test: constituent-test))))))
      
      (let ((search (new Projects-Search 'references (reference-searcher target) #f)))
        (let ((resultset (new Search-Resultset search)))
          (new Reference-Search-Result resultset self))))
    
    (let ((search-result (make-reference-search-result target)))
      (apply edit-reference 'forward search-result rest)))


  ;;;
  ;;;; Browse
  ;;;
  
  
  (method public virtual (insert-definition tree father level sort?)
    (let ((row (insert-self tree father level)))
      (unless (eq? (get-state~ row) 'dynamic)
        (insert-self-definitions tree row level sort?))))
  
  
  (method protected virtual (insert-self tree father level)
    (let* ((image (get-image))
           (definitions (get-definitions))
           (state (insert-state level definitions))
           (title (present-name)))
      (add-row~ tree father: father state: state children: (list (new Tree-Node title: title image: image)) user-data: self)))
  
  
  (method protected virtual (insert-self-definitions tree father level sort?)
    (insert-definitions tree father (get-definitions) level sort?))
  
  
  (method protected virtual (insert-state level definitions)
    (cond ((and parent (= level 2) (= 1 (length (get-definitions~ parent))))
           'expanded)
          ((and (> level 1) (not-null? definitions))
           'dynamic)
          (else
           'expanded)))
  
  
  (method (insert-definitions tree father definitions level sort?)
    (define (sort-definitions definitions)
      (sort string<? definitions key: present-name~))
    
    (let ((ordered (if sort? (sort-definitions definitions) definitions)))
      (for-each (lambda (definition)
                  (insert-definition~ definition tree father (+ level 1) sort?))
                ordered)))


  ;;;
  ;;;; Indexes
  ;;;
  
  
  (method public virtual (update-indexes definitions-index references-index)
    )))
