;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Category Entry
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.catalog.entry.Category-Entry jazz


(import (jazz.catalog)
        (jazz.library)
        (jazz.ui))


(class undocumented Category-Entry extends Hierarchical-Entry
  
  
  (slot extends accessors generate)  ;; qualified
  
  
  (method override (initialize modifiers qualified name extends line column end-line end-column definitions)
    (nextmethod modifiers qualified name line column end-line end-column definitions '())
    (set! extends~self extends))
  
  
  (method override (present)
    (get-location-name))
  
  
  ;;;
  ;;;; Indexes
  ;;;
  
  
  (method override (update-indexes definitions-index references-index)
    (nextmethod definitions-index references-index)
    (for-each (lambda (qualified)
                (update-index references-index (last qualified)))
              extends))


  ;;;
  ;;;; Browse
  ;;;
  
  
  (method override (insert-self-definitions tree father level sort?)
    (insert-ascendants tree father)
    (insert-interfaces tree father)
    (insert-inherited tree father)
    (nextmethod tree father level sort?))
  
  
  (method (collect-ascendants)
    (let ((catalog (get-catalog))
          (fact (new List-Factory)))
      (define (process qualified)
        (when qualified
          (let ((category (get-qualified-category catalog qualified)))
            (when (and category (not (memq? category (get-list~ fact))))
              (put~ fact category)
              (for-each process (get-extends~ category))))))
      
      (for-each process extends)
      (get-output~ fact)))
  
  
  (method protected virtual (insert-ascendants tree father)
    (let ((ascendants (collect-ascendants)))
      (when ascendants
        (let ((row (add-row~ tree father: father state: 'collapsed row-height: 17 children: (list (new Tree-Node title: "Superclasses" image: {Image-Resource "OpenedFolder"})))))
          (for-each (lambda (category)
                      (add-row~ tree father: row state: 'collapsed row-height: 17 children: (list (new Tree-Node title: (present-name~ category) image: (get-image~ category))) user-data: category))
                    ascendants)))))
  
  
  (method protected virtual (insert-interfaces tree father)
    )
  
  
  (method (insert-interfaces-list tree father title interfaces)
    (when interfaces
      (let ((catalog (get-catalog))
            (row (add-row~ tree father: father state: 'collapsed row-height: 17 children: (list (new Tree-Node title: title image: {Image-Resource "OpenedFolder"})))))
        (define (insert row qualified)
          (when qualified
            (let ((interface (get-qualified-category catalog qualified)))
              (when interface
                (let ((row (add-row~ tree father: row state: 'collapsed row-height: 17 children: (list (new Tree-Node title: (present-name~ interface) image: (get-image~ interface))) user-data: interface)))
                  (for-each (lambda (interface)
                              (insert row interface))
                            (get-extends~ interface)))))))
        
        (for-each (lambda (interface)
                    (insert row interface))
                  interfaces))))


  (method (insert-inherited tree father)
    (define (collect-inherited ascendants)
      (apply append (map get-definitions~ ascendants)))
    
    (let* ((ascendants (collect-ascendants))
           (inherited (collect-inherited ascendants)))
      (when inherited
        (let ((row (add-row~ tree father: father state: 'collapsed row-height: 17 children: (list (new Tree-Node title: "Inherited members" image: {Image-Resource "OpenedFolder"})))))
          (insert-definitions tree row inherited 0 #t)))))
  
  
  (definition (get-qualified-category catalog qualified)
    (define (get-category-package definition)
      (find-if (lambda (definition)
                 (is? definition Package-Entry))
               (get-definitions~ (get-file-definition~ definition))))
    
    (let ((name (last qualified))
          (qualifier (butlast qualified)))
      (find-if (lambda (definition)
                 (and (is? definition Category-Entry)
                      (let ((package (get-category-package definition)))
                        (and package
                             (= (get-qualified~ package) qualifier)))))
               (get-definitions~ catalog name))))))
