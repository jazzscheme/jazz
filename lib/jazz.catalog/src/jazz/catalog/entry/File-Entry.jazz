;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; File Entry
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.catalog.entry.File-Entry jazz


(import (jazz.catalog)
        (jazz.library))


(class undocumented File-Entry extends Catalog-Entry
  
  
  (slot catalog       accessors generate)
  (slot marked?       accessors generate)
  (slot file)
  (slot digest        accessors generate)
  (slot dialect       getter generate)
  (slot definitions)
  (slot location-name)
  
  
  (method override (initialize catalog file digest dialect definitions)
    (nextmethod)
    (set! catalog~self catalog)
    (set! file~self file)
    (set! digest~self digest)
    (set! dialect~self dialect)
    (set! definitions~self definitions)
    (set! location-name~self (get-base~ file))
    (set! marked?~self #t)
    (for-each (lambda (definition)
                (set-parent~ definition self)
                (set-file-definition~ definition self))
              definitions))


  (method override (print output readably)
    (print-unreadable self output
      (lambda (output)
        (format output "{s}" file))))
  
  
  (method public virtual (print-catalog first? output)
    (when (not first?)
      (format output "{%}{_ :v}" 2))
    (format output "~{{s} {s} {s} {s}"
            (category-name (class-of self))
            file
            digest
            dialect)
    (for-each (lambda (definition)
                (print-catalog~ definition 2 output))
              definitions)
    (format output "}"))


  ;;;
  ;;;; Access
  ;;;


  (method override (get-file)
    file)


  (method override (get-moniker)
    file)


  (method override (get-definitions)
    definitions)


  (method override (get-location-name)
    location-name)


  (method override (get-file-definition)
    self)
  
  
  (method public (get-definition name)
    (find-if (lambda (definition)
               (= (get-name~ definition) name))
             definitions))
  
  
  (method override (for-each-descendant-entry proc (include-self?: include-self? #t))
    (when include-self?
      (proc self))
    (let (iter (entry self))
      (loop (for child in (get-definitions~ entry))
            (proc child)
            (iter child))))


  ;;;
  ;;;; Present
  ;;;
  
  
  (method override (get-image)
    {Image-Resource "File"})


  (method override (present-detailed)
    (get-name~ file))


  ;;;
  ;;;; Indexes
  ;;;
  
  
  (method override (update-indexes definitions-index references-index)
    (for-each (lambda (definition)
                (update-indexes~ definition definitions-index references-index))
              definitions))


  ;;;
  ;;;; Browse
  ;;;
  
  
  (method override (insert-definition tree father level sort?)
    (insert-definitions tree father (get-definitions) level sort?))))
