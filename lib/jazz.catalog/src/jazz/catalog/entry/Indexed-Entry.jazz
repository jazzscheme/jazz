;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Indexed Entry
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.catalog.entry.Indexed-Entry jazz


(import (jazz.catalog)
        (jazz.system)
        (jazz.ui)
        (jazz.ui.view))


(class undocumented Indexed-Entry extends Catalog-Entry
  
  
  (slot name)
  (slot line)
  (slot column)
  (slot end-line)
  (slot end-column)
  (slot definitions)
  (slot references getter generate)
  
  
  (method override (initialize name line column end-line end-column definitions references)
    (nextmethod)
    (set! name~self name)
    (set! line~self line)
    (set! column~self column)
    (set! end-line~self end-line)
    (set! end-column~self end-column)
    (set! definitions~self definitions)
    (set! references~self references)
    (for-each (lambda (definition)
                (set-parent~ definition self))
              definitions))


  (method override (print output readably)
    (print-unreadable self output
      (lambda (output)
        (format output "{a}" name))))
  
  
  (method public virtual (print-catalog level output)
    (format output "{%}{_ :v}~{{s} {s} {s} {s}"
            (* level 2)
            (category-name (class-of self))
            name line column)
    (print-definitions level output)
    (format output "}"))
  
  
  (method (print-definitions level output)
    (for-each (lambda (definition)
                (print-catalog~ definition (+ level 1) output))
              definitions))


  ;;;
  ;;;; Access
  ;;;


  (method override (get-file)
    (get-file~ file-definition))


  (method override (get-moniker)
    (get-moniker~ (or root-definition file-definition)))


  (method override (get-title)
    name)


  (method override (get-location-name)
    (get-location-name~ (or root-definition file-definition)))


  (method override (get-name)
    name)


  (method override (get-line)
    line)


  (method override (get-column)
    column)
  
  
  (method override (get-start)
    (new Cell line column))
  
  
  (method override (get-end-line)
    end-line)
  
  
  (method override (get-end-column)
    end-column)
  
  
  (method override (get-end)
    (new Cell end-line end-column))
  
  
  (method override (get-range)
    (new Range$Cell$ (get-start) (get-end)))
  
  
  (method override (get-definitions)
    definitions)
  
  
  (method public (find-definition name)
    (find-if (lambda (def)
               (equal? (get-name~ def) name))
             definitions))
  
  
  (method public (child path)
    (if (null? path)
        self
      (let ((def (find-definition (symbol->string (car path)))))
        (if def
            (child~ def (cdr path))
          #f))))
  
  
  (method public (add-definition definition)
    (set! definitions (append! definitions (list definition))))


  (method public (add-reference reference)
    (unless (member? reference references)
      (set! references (cons reference references))))


  (method public (get-catalog)
    (get-catalog~ file-definition))


  (method override (set-root-definition def)
    (nextmethod def)
    (for-each (lambda (definition)
                (set-root-definition~ definition def))
              definitions))


  (method override (set-file-definition def)
    (nextmethod def)
    (for-each (lambda (definition)
                (set-file-definition~ definition def))
              definitions))
  
  
  (method override (for-each-descendant-entry proc (include-self?: include-self? #t))
    (when include-self?
      (proc self))
    (let (iter (entry self))
      (loop (for child in (get-definitions~ entry))
            (proc child)
            (iter child))))
  
  
  ;;;
  ;;;; Indexes
  ;;;
  
  
  (method override (update-indexes definitions-index references-index)
    (update-index definitions-index name)
    (for-each (lambda (definition)
                (update-indexes~ definition definitions-index references-index))
              definitions))


  (method protected (update-index index key)
    (when key
      (table-add index key self)))


  ;;;
  ;;;; Present
  ;;;


  (method override (present)
    (present-name)
    @old
    (case mode
      ((definitions) (get-location-name))
      ((references) (format "{a}.{a}" (get-location-name) (present-name)))))


  (method override (present-name)
    (or (get-name) (present-noname)))
  
  
  (method protected virtual (present-noname)
    "<static>")


  ;;;
  ;;;; Edit
  ;;;

  
  (method override (edit (workspace: workspace #f) (activate-focus?: activate-focus? #t) (return-new?: return-new? #f))
    (let ((moniker (get-moniker)))
      (if (not (exists?~ moniker))
          (error "Unable to locate moniker: {t}" moniker)
        (let ((appl (get-application))
              (char-encoding (get-char-encoding~ (get-catalog)))
              (selection (get-range)))
          (edit-document~ appl moniker char-encoding: char-encoding selection: selection workspace: workspace activate-focus?: activate-focus? return-new?: return-new?)))))
  

  (method (find-source name)
    (let ((type (source-frame-type)))
      (find-if (lambda (frame)
                 (and (is? frame Frame-Host)
                      (let ((guest (get-guest~ frame)))
                        (and (is? guest type)
                             (let ((file (get-moniker~ guest)))
                               (and file
                                    (string=? (get-name~ file) name)))))))
               (all-frames include-invisibles?: #t))))
  

  (method protected virtual (source-frame-type)
    )))
