;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Catalog Entries
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module jazz.catalog.entry jazz


(import (jazz.catalog))


;;;
;;;; Entry
;;;


(definition (entry-cataloguer)
  (get-cataloguer))


(definition public (find-entries name (kind #f))
  (let ((definitions (get-definitions~ (entry-cataloguer) name)))
    (if (not kind)
        definitions
      (collect-if (lambda (definition)
                    (eq? (get-kind~ definition) kind))
                  definitions))))


(definition public (find-entry name (kind #f))
  (let ((entries (find-entries name kind)))
    (and (not-null? entries)
         (car entries))))


(definition public (require-entry name)
  (or (find-entry name)
      (error "Unable to find entry: {s}" name)))


(definition public (location->entry location)
  (bind (file line) location
    (let ((file-entry (cache-file-entry file)))
      (when file-entry
        (line->entry~ file-entry line)))))


;;;
;;;; Parameter
;;;


(definition public (entry-parameter entry name)
  (let ((pair (assv name (get-parameters~ entry))))
    (if pair
        (cdr pair)
      #f)))


(definition public (category-entry-extends entry)
  (entry-parameter entry 'extends))


(definition public (class-entry-implements entry)
  (let ((implements (entry-parameter entry 'implements)))
    (when implements
      (let ((implements (read-string-element implements)))
        (map ->string (listify implements))))))


;;;
;;;; Module
;;;


(definition public (entry-module entry)
  (let ((file-entry (get-file-definition~ entry)))
    (let ((file-definitions (get-definitions~ file-entry)))
      (assert (not-null? file-definitions)
        (let ((module-entry (car file-definitions)))
          (assert (eq? (get-kind~ module-entry) 'module)
            module-entry))))))


;;;
;;;; Class
;;;


(definition public (class-entry? obj)
  (eq? (get-kind~ obj) 'class))


(definition public (class-entry name)
  (find-entry name 'class))


(definition public (class-entry-ascendant entry)
  (let ((extends (category-entry-extends entry)))
    (when extends
      (class-entry extends))))


(definition public (class-entry-ascendants entry)
  (let (iter (class entry) (ascendants (list entry)))
    (let ((ascendant (class-entry-ascendant class)))
      (if (not ascendant)
          ascendants
        (iter ascendant (cons ascendant ascendants))))))


(definition public (class-entry-interfaces entry)
  (let ((implements (class-entry-implements entry)))
    (if (not implements)
        '()
      ;; because some interfaces might not be catalogued
      (remove-false (map interface-entry implements)))))


(definition public (class-entry-descendants entry)
  (collect-if (lambda (reference)
                (and (class-entry? reference)
                     (eq? (class-entry-ascendant reference) entry)))
              (get-references~ (entry-cataloguer) (get-name~ entry))))


(definition public (class-entry-descendants-recursive entry)
  (let ((queue (new-queue)))
    (let (iter (class entry))
      (enqueue queue class)
      (for-each iter (class-entry-descendants class)))
    (queue-list queue)))


;;;
;;;; Interface
;;;


(definition public (interface-entry name)
  (find-entry name 'interface))


;;;
;;;; Method
;;;


(definition public (method-entries name)
  (find-entries name 'method))


(definition public (method-entry-class entry)
  (get-parent~ entry))


(definition public (method-entry-descendants entry)
  (let ((name (->string (get-name~ entry)))
        (class (get-parent~ entry))
        (queue (new-queue)))
    (let (iter (class class))
      (let ((method (find-definition~ class name)))
        (when method
          (enqueue queue method)))
      (for-each iter (class-entry-descendants class)))
    (queue-list queue))))
