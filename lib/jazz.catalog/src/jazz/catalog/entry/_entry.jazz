;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Catalog Entries
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2012
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module jazz.catalog.entry jazz


(import (jazz.catalog)
        (jazz.editor.lisp)
        (jazz.io)
        (jazz.system))


;;;
;;;; Entry
;;;


@definition
{Lisp-File-Entry {File :context "src" "jazz" "catalog" "_catalog.jazz"} 256201679. jazz
  {Lisp-Entry "jazz.catalog" module () () #f #f 37 8 37 20 ("jazz")
    {Lisp-Entry "export" export () () #f #f 40 1 40 7 ("jazz.catalog.autoload")}
    {Lisp-Entry "import" import () () #f #f 42 1 42 7 ("jazz.io")}
    {Lisp-Entry "Parser-Dialects" definition () () #f #f 50 12 50 27 ("scheme" "python" "properties" "lua" "javascript" "java" "jazz" "css" "c" "commonlisp")}
    {Lisp-Entry "Parser-Classes" definition () () #f #f 63 12 63 26 ("Scheme-Parser" "jazz.editor.scheme" "jazz.editor.scheme:Scheme-Parser" "scheme" "Python-Parser" "jazz.editor.python" "jazz.editor.python:Python-Parser" "python" "Properties-Parser" "jazz.editor.properties" "jazz.editor.properties:Properties-Parser" "properties" "Lua-Parser" "jazz.editor.lua" "jazz.editor.lua:Lua-Parser" "lua" "JavaScript-Parser" "jazz.editor.javascript" "jazz.editor.javascript:JavaScript-Parser" "javascript" "Java-Parser" "jazz.editor.java" "jazz.editor.java:Java-Parser" "java" "Jazz-Parser" "jazz.editor.jazz" "jazz.editor.jazz:Jazz-Parser" "jazz" "CSS-Parser" "jazz.editor.css" "jazz.editor.css:CSS-Parser" "css" "C-Parser" "jazz.editor.c" "jazz.editor.c:C-Parser" "c" "CommonLisp-Parser" "jazz.editor.commonlisp" "jazz.editor.commonlisp:CommonLisp-Parser" "lambda" "commonlisp" "cons" "list")}
    {Lisp-Entry "get-parser-dialect" definition (public) ("extension") #f #f 77 20 77 38 ("car" "when" "extension=?" "member?" "extensions" "ext" "lambda" "test:" "Parser-Dialects" "rassociate" "info" "let" "extension")}
    {Lisp-Entry "get-parser-class" definition (public) ("dialect") #f #f 86 20 86 36 ("cdr" "proc" "when" "Parser-Classes" "assq" "pair" "let" "dialect")}}}

@interface
{Lisp-File-Entry {File :context "src" "jazz" "system" "process" "Exit-Listener.jazz"} 252386409. jazz
  {Lisp-Entry "jazz.system.process.Exit-Listener" module (protected) () #f #f 37 18 37 51 ("jazz")
    {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui")}
    {Lisp-Entry "Exit-Listener" interface (undocumented) ((extends . "Listener")) #f #f 43 24 43 37 ("Listener")
      {Lisp-Entry "prepare-exit" method (public virtual abstract) () #f #f 46 35 46 47 ()}}}}

@class
{Lisp-File-Entry {File :context "src" "jazz" "console" "Console-Manager.jazz"} 255679369. jazz
  {Lisp-Entry "jazz.console.Console-Manager" module (protected) () #f #f 37 18 37 46 ("jazz")
    {Lisp-Entry "import" import () () #f #f 40 1 40 7 ("jazz.ui.view" "jazz.ui.skin" "jazz.ui" "jazz.system" "jazz.library" "jazz.jml" "jazz.graphic" "jazz.debugger" "jazz.console")}
    {Lisp-Entry "Console-Manager" class (undocumented) ((extends . "Layout-View")) #f #f 51 20 51 35 ("Layout-View")
      {Lisp-Entry "form" form () () #f #f 54 3 54 7 ("center" "pad" "Pad-View" "<Pad-View>" "on-clear-console" "22" "clear" "Push-Tool" "<Push-Tool>" "tail" "location:" "Separator" "<Separator>" "pick" "on-print-detail-menu" ":guest" "Event-Handler" "action-handler:" "tooltip-text:" "tooltip?:" "Image-Resource" "resource:" ":images" "portfolio:" "body" "!" "<!>" "detail" "Push-Combo" "<Push-Combo>" "tools" "name:" "Layout-View" "<Layout-View>" "border" "layout-type:" "Dark" "Color" "background:" "400" "650" "Dimension" "size:" "install" "<install>")}
      {Lisp-Entry "external-name" method (meta override) ("." "rest") #f #f 66 25 66 38 ("Consoles" "rest")}}}}


(definition (entry-cataloguer)
  (get-cataloguer~ (get-application)))


(definition public (find-entry name (kind #f))
  (let ((definitions (get-definitions~ (entry-cataloguer) name)))
    (if (not kind)
        (and (not-null? definitions) (car definitions))
      (find-if (lambda (definition)
                 (eq? (get-kind~ definition) kind))
               definitions))))


(definition public (require-entry name)
  (or (find-entry name)
      (error "Unable to find entry: {s}" name)))


(definition public (location->entry location)
  (bind (file line col) location
    (let ((file-entry (get-file-entry~ (entry-cataloguer) file)))
      (when file-entry
        (let ((min-entry #f)
              (min-distance #f))
          (for-each-descendant-entry~ file-entry
            (lambda (entry)
              (when (is? entry Indexed-Entry)
                (let ((entry-line (get-line~ (get-start~ entry))))
                  (when (>= line entry-line)
                    (let ((distance (- line entry-line)))
                      (when (or (not min-distance) (< distance min-distance))
                        (set! min-entry entry)
                        (set! min-distance distance))))))))
          min-entry)))))


;;;
;;;; Parameter
;;;


(definition (entry-parameter entry name)
  (let ((pair (assv name (get-parameters~ entry))))
    (if pair
        (cdr pair)
      #f)))


(definition public (category-entry-extends entry)
  (entry-parameter entry 'extends))


(definition public (class-entry-implements entry)
  (let ((implements (entry-parameter entry 'implements)))
    (when implements
      (listify implements))))


;;;
;;;; Module
;;;


(definition public (entry-module entry)
  (let ((file-entry (get-file-definition~ entry)))
    (let ((file-definitions (get-definitions~ file-entry)))
      (assert (not-null? file-definitions)
        (let ((module-entry (car file-definitions)))
          (assert (eq? (get-kind~ module-entry) 'module)
            module-entry))))))


;;;
;;;; Class
;;;


(definition public (class-entry? obj)
  (and (is? obj Lisp-Entry)
       (eq? (get-kind~ obj) 'class)))


(definition public (class-entry name)
  (find-entry name 'class))


(definition public (class-entry-ascendant entry)
  (let ((extends (category-entry-extends entry)))
    (when extends
      (class-entry extends))))


(definition public (class-entry-interfaces entry)
  (map interface-entry (class-entry-implements entry)))


(definition public (class-entry-descendants entry)
  (collect-if (lambda (reference)
                (and (class-entry? reference)
                     (eq? (class-entry-ascendant reference) entry)))
              (get-references~ (entry-cataloguer) (get-name~ entry))))


;;;
;;;; Interface
;;;


(definition public (interface-entry name)
  (find-entry name 'interface))


;;;
;;;; Method
;;;


(definition public (method-entry-descendants entry)
  (let ((name (->string (get-name~ entry)))
        (class (get-parent~ entry))
        (queue (new-queue)))
    (let (iter (class class))
      (let ((method (find-definition~ class name)))
        (when method
          (enqueue queue method)))
      (for-each iter (class-entry-descendants class)))
    (queue-list queue))))
