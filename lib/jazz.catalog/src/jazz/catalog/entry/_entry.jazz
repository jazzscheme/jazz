;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Catalog Entries
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module jazz.catalog.entry jazz


(import (jazz.catalog))


;;;
;;;; Entry
;;;


(definition (entry-cataloguer)
  (get-cataloguer))


(definition public (find-cataloguer-entries name (kind #f))
  (let ((definitions (get-definitions (entry-cataloguer) name)))
    (if (not kind)
        definitions
      (collect-if (lambda (definition)
                    (eq? (get-kind definition) kind))
                  definitions))))


(definition public (find-cataloguer-entry name (kind #f))
  (let ((entries (find-cataloguer-entries name kind)))
    (and (not-null? entries)
         (car entries))))


(definition public (require-cataloguer-entry name)
  (or (find-cataloguer-entry name)
      (error "Unable to find entry: {s}" name)))


(definition cataloguer-modules
  (make-table test: equal?))


(definition public (cache-cataloguer-module name)
  (or (table-ref cataloguer-modules name #f)
      (let ((entry (find-cataloguer-entry name 'module)))
        (table-set! cataloguer-modules name entry)
        entry)))


(definition public (location->entry location)
  (bind (file line) location
    (let ((file-entry (cache-file-entry file)))
      (and file-entry
           (line->entry file-entry line)))))


;;;
;;;; Parameter
;;;


(definition public (entry-parameter entry name)
  (let ((pair (assv name (get-parameters entry))))
    (if pair
        (cdr pair)
      #f)))


;;;
;;;; Resolve
;;;


(definition public (entry-resolve entry name)
  (let ((queue (new-queue))
        (processed-imports (make-table test: equal?)))
    (define (process-module entry)
      (process-namespace entry)
      (let ((dialect (module-entry-dialect entry))
            (imports (module-entry-imports entry)))
        (let ((effective-imports (if (ends-with? dialect ":") imports (cons dialect imports))))
          (for-each process-import effective-imports))))
    
    (define (process-import import)
      (let ((module-name (if (pair? import) (car import) import)))
        (unless (table-ref processed-imports module-name #f)
          (table-set! processed-imports module-name #t)
          (let ((module-entry (module-entry module-name)))
            (when module-entry
              (for-each (lambda (export)
                          (when (pair? export)
                            (process-import export)))
                        (module-entry-exports module-entry))
              (process-namespace module-entry))))))
    
    (define (process-namespace entry)
      (let ((entry (find-definition entry name)))
        (when entry
          (enqueue queue entry))))
    
    (define (process-class module-entry class-name)
      (let ((class-entries (entry-resolve module-entry class-name)))
        (when (= 1 (length class-entries))
          (let ((class-entry (car class-entries)))
            (process-namespace class-entry)
            (let ((extends (category-entry-extends class-entry)))
              (when extends
                (process-class module-entry extends)))))))
    
    (define (process-interface module-entry interface-name)
      (let ((interface-entries (entry-resolve module-entry interface-name)))
        (when (= 1 (length interface-entries))
          (let ((interface-entry (car interface-entries)))
            (process-namespace interface-entry)))))
    
    (define (entry-class entry)
      (if (eq? (get-kind entry) 'class)
          entry
        (let ((parent (get-parent entry)))
          (and parent
               (eq? (get-kind parent) 'class)
               parent))))
    
    (let ((module-entry (module-entry name)))
      (when module-entry
        (enqueue queue module-entry)))
    (let ((module-entry (entry-module entry)))
      (let ((class-entry (entry-class entry)))
        (when class-entry
          (process-namespace class-entry)
          (let ((extends (category-entry-extends class-entry)))
            (when extends
              (process-class module-entry extends)))
          (let ((implements (class-entry-implements class-entry)))
            (when implements
              (for-each (lambda (interface-name)
                          (process-interface module-entry interface-name))
                        implements)))))
      (process-module module-entry))
    (remove-duplicates (queue-list queue))))


;;;
;;;; Module
;;;


(definition public (entry-module entry)
  (let (iter (entry entry))
    (cond ((not entry)
           (error "Unable to find entry module"))
          ((eq? (get-kind entry) 'module)
           entry)
          (else
           (iter (get-parent entry))))))


(definition public (entry-invoices entry)
  (or (entry-parameter entry 'invoices) '()))


(definition public (module-entry name)
  (cache-cataloguer-module name))


(definition public (module-entry-dialect entry)
  (entry-parameter entry 'dialect))


(definition public (module-entry-imports entry)
  (let ((imports (new-queue)))
    (for-each (lambda (entry)
                (when (eq? (get-kind entry) 'import)
                  (for-each (lambda (ref)
                              (enqueue imports ref))
                            (entry-invoices entry))))
              (get-definitions entry))
    (queue-list imports)))


(definition public (module-entry-exports entry)
  (let ((exports (new-queue)))
    (for-each (lambda (entry)
                (when (eq? (get-kind entry) 'export)
                  (for-each (lambda (ref)
                              (enqueue exports ref))
                            (entry-invoices entry))))
              (get-definitions entry))
    (queue-list exports)))


;;;
;;;; Category
;;;


(definition public (category-entry-extends entry)
  (entry-parameter entry 'extends))


;;;
;;;; Class
;;;


(definition public (class-entry? obj)
  (eq? (get-kind obj) 'class))


(definition public (class-entry name)
  (find-cataloguer-entry name 'class))


(definition public (class-entry-ascendant entry)
  (let ((extends (category-entry-extends entry)))
    (and extends
         (class-entry extends))))


(definition public (class-entry-ascendants entry)
  (let (iter (class entry) (ascendants (list entry)))
    (let ((ascendant (class-entry-ascendant class)))
      (if (not ascendant)
          ascendants
        (iter ascendant (cons ascendant ascendants))))))


(definition public (class-entry-implements entry)
  (let ((implements (entry-parameter entry 'implements)))
    (and implements
         (let ((implements (read-string-element implements)))
           (map ->string (listify implements))))))


(definition public (class-entry-interfaces entry)
  (let ((implements (class-entry-implements entry)))
    (if (not implements)
        '()
      ;; because some interfaces might not be catalogued
      (remove-false (map interface-entry implements)))))


(definition public (class-entry-descendants entry)
  (collect-if (lambda (reference)
                (and (class-entry? reference)
                     (eq? (class-entry-ascendant reference) entry)))
              (get-references (entry-cataloguer) (get-name entry))))


(definition public (class-entry-descendants-recursive entry)
  (let ((queue (new-queue)))
    (let (iter (class entry))
      (enqueue queue class)
      (for-each iter (class-entry-descendants class)))
    (queue-list queue)))


;;;
;;;; Interface
;;;


(definition public (interface-entry name)
  (find-cataloguer-entry name 'interface))


;;;
;;;; Method
;;;


(definition public (method-entries name)
  (find-cataloguer-entries name 'method))


(definition public (method-entry-class entry)
  (get-parent entry))


(definition public (method-entry-descendants entry)
  (let ((name (->string (get-name entry)))
        (class (get-parent entry))
        (queue (new-queue)))
    (let (iter (class class))
      (let ((method (find-definition class name)))
        (when method
          (enqueue queue method)))
      (for-each iter (class-entry-descendants class)))
    (queue-list queue))))
