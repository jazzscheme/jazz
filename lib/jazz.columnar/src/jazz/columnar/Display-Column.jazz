;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Display Column
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.columnar.Display-Column jazz


(class undocumented Display-Column extends Object
  
  
  (slot displayer)
  (slot factory)
  (slot content)
  (slot current)
  (slot border       <fx>   initialize 0 accessors generate)
  (slot border-after <fx>   initialize 0 accessors generate)
  (slot minimum      <fx>   initialize 0)
  (slot line         <fx>   initialize 0)
  (slot empty?       <bool> initialize #t getter generate)
  
  
  ;;;
  ;;;; Initialization
  ;;;
  
  
  (method override (initialize self displayer (border: border 0) (border-after: border-after 0) (minimum: minimum 0))
    (nextmethod self)
    (set! self.displayer displayer)
    (set! self.factory (new List-Factory))
    (set! self.border border)
    (set! self.border-after border-after)
    (set! self.minimum minimum))
  
  
  ;;;
  ;;;; Content
  ;;;
  
  
  (method public (output self data . rest)
    (fill-empty self)
    (put-data self data rest)
    (when data
      (set! empty? #f))
    (increase-line self))
  
  
  (method public virtual (put-data self data rest)
    (put factory data))
  
  
  (method public virtual (increase-line self)
    (increase! line))
  
  
  (method package (get-next self)
    (when current
      (prog1 (car current)
        (set! current (cdr current)))))
  
  
  (method public (rewind self)
    (set! content (get-output factory))
    (set! current content))
  
  
  (method public (fill-empty self)
    (let ((main (get-line displayer)))
      (while (< line main)
        (put factory #f)
        (increase! line))))
  
  
  (method package (replace-empty self previous-column previous-data)
    (let ((data (car current)))
      (if (null? data)
          (let ((replacement (empty-replacement self previous-column previous-data)))
            (set-car! current replacement)
            (set! current (cdr current))
            replacement)
        (set! current (cdr current))
        data)))
  
  
  (method protected virtual (empty-replacement self previous-column previous-data)
    "")
  
  
  ;;;
  ;;;; Printing
  ;;;
  
  
  (method public virtual (prepare-print self)
    (rewind self))
  
  
  (method public virtual (print-to self data previous-column previous-data output)
    (format output "{_ :v}{a}{_ :v}" border data border-after))))
