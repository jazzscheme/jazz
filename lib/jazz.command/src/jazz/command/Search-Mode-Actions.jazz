;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Search Mode Actions
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.command.Search-Mode-Actions jazz


(import (jazz.action)
        (jazz.handler)
        (jazz.jml))


(class Search-Mode-Actions extends Actions
  
  
  (form
    (<install>
      (<Action-Item> name: whole-words            action-handler: {Event-Handler (:focus :mode) on-whole-words} shortcut: {Shortcut :alt #\W})
      (<Action-Item> name: ignore-case            action-handler: {Event-Handler (:focus :mode) on-ignore-case} shortcut: {Shortcut :alt #\I})
      (<Action-Item> name: regexp                 action-handler: {Event-Handler (:focus :mode) on-regexp} shortcut: {Shortcut :alt #\R})
      (<Action-Item> name: forward                action-handler: {Event-Handler (:focus :mode) on-forward} shortcut: {Shortcut :control #\S})
      (<Action-Item> name: backward               action-handler: {Event-Handler (:focus :mode) on-backward} shortcut: {Shortcut :control #\R})
      (<Action-Item> name: current                action-handler: {Event-Handler (:focus :mode) on-current} shortcut: {Shortcut :alt #\S})
      (<Action-Item> name: widen                  action-handler: {Event-Handler (:focus :mode) on-widen} shortcut: {Shortcut :control #\W})
      (<Action-Item> name: outer-boundaries       action-handler: {Event-Handler (:focus :mode) on-outer-boundaries} shortcut: {Shortcut :control Space})
      (<Action-Item> name: declaration-boundaries action-handler: {Event-Handler (:focus :mode) on-declaration-boundaries} shortcut: {Shortcut :alt Space})
      (<Action-Item> name: buffer-boundaries      action-handler: {Event-Handler (:focus :mode) on-buffer-boundaries} shortcut: {Shortcut :control :shift Space})
      (<Action-Item> name: center-caret           action-handler: {Event-Handler (:focus :mode) on-center-caret} shortcut: {Shortcut :control #\L})
      (<Action-Item> name: prior                  action-handler: {Event-Handler (:focus :mode) on-prior} shortcut: {Shortcut :control :shift #\M})
      (<Action-Item> name: next                   action-handler: {Event-Handler (:focus :mode) on-next} shortcut: {Shortcut :control #\M})
      (<Action-Item> name: home                   action-handler: {Event-Handler (:focus :mode) on-home} shortcut: {Shortcut Home} alternate-shortcut: {Shortcut :control #\A})
      (<Action-Item> name: end                    action-handler: {Event-Handler (:focus :mode) on-end} shortcut: {Shortcut End} alternate-shortcut: {Shortcut :control #\E})
      (<Action-Item> name: highlight              action-handler: {Event-Handler (:focus :mode) on-highlight} shortcut: {Shortcut :alt #\H})
      (<Action-Item> name: persist-highlights     action-handler: {Event-Handler (:focus :mode) on-persist-highlights} shortcut: {Shortcut :shift :alt #\H})
      (<Action-Item> name: goto-find              action-handler: {Event-Handler (:focus :mode) on-goto-find})
      (<Action-Item> name: goto-replace           action-handler: {Event-Handler (:focus :mode) on-goto-replace} shortcut: {Shortcut :control #\/})
      (<Action-Item> name: find-forward           action-handler: {Event-Handler (:focus :mode) on-find-forward} shortcut: {Shortcut :control #\G} alternate-shortcut: {Shortcut F3})
      (<Action-Item> name: find-backward          action-handler: {Event-Handler (:focus :mode) on-find-backward} shortcut: {Shortcut :control :shift #\G} alternate-shortcut: {Shortcut :shift F3})
      (<Action-Item> name: replace                action-handler: {Event-Handler (:focus :mode) on-replace} shortcut: {Shortcut :control :shift #\H})
      (<Action-Item> name: replace&find-forward   action-handler: {Event-Handler (:focus :mode) on-replace&find-forward} shortcut: {Shortcut :control #\H})
      (<Action-Item> name: replace-all            action-handler: {Event-Handler (:focus :mode) on-replace-all} shortcut: {Shortcut :control :alt #\H})
      (<Action-Item> name: finish                 action-handler: {Event-Handler (:focus :mode) on-finish} shortcut: {Shortcut Return})
      (<Action-Item> name: cancel                 action-handler: {Event-Handler (:focus :mode) on-cancel} shortcut: {Shortcut :control #\Q} alternate-shortcut: {Shortcut Escape})))))
