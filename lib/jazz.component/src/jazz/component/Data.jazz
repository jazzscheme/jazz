;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Data
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.component.Data jazz


(class Data extends Object
  
  
  (slot version getter generate)
  (slot dialect getter generate)
  (slot imports getter generate)
  (slot context getter generate)
  
  
  (method override (initialize self version dialect imports context)
    (nextmethod self)
    (set! self.version version)
    (set! self.dialect dialect)
    (set! self.imports imports)
    (set! self.context context))
  
  
  (method override (copy-object self object)
    (new Data version dialect imports context))
  
  
  (method override (print self output readably)
    (print-unreadable self output
      (lambda (output)
        (format output "{a}" dialect))))
  
  
  ;;;
  ;;;; Version
  ;;;
  
  
  (method public (set-version self version)
    (set! self.version version))
  
  
  ;;;
  ;;;; Imports
  ;;;
  
  
  (method package (set-imports self imports)
    (set! self.imports imports))
  
  
  (method public (add-import self import)
    (define (same-import? x y)
      (eq? (import-module x)
           (import-module y)))
    
    (define (import-module import)
      (if (symbol? import)
          import
        (car import)))
    
    (let ((import (listify import))
          (imports (or imports '())))
      (unless (member? import imports test: same-import?)
        (set-imports self (cons import imports)))))
  
  
  (method public (effective-imports self)
    (let ((imports (or imports '())))
      (if dialect
          (cons dialect imports)
        imports)))))
