;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Component Forms
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.component.Form jazz


(import (jazz.component)
        (jazz.markup)
        (jazz.reference))


;;;
;;;; Header Formats
;;;


;; (new    model)       -> create a new unnamed instance of model
;; (new    model name)  -> create a new instance of model named name
;; (modify       name)  -> modify existing instance named name
;; (modify model name)  -> modify existing instance named name and override its class (work in progress)
;; (remove       name)  -> remove existing instance named name (used internally by branches)


;;;
;;;; Class Definition
;;;


(class Form extends Markup-Element implements Environment-Provider


  (slot data          accessors generate)
  (slot origin        accessors generate)
  (slot context       accessors generate)
  (slot action        accessors generate)
  (slot model         accessors generate)
  (slot locator       accessors generate)
  (slot name          accessors generate)
  (slot tag-symbolic? accessors generate)
  (slot tag-reference accessors generate)
  
  
  ;;;
  ;;;; Initialization
  ;;;


  (method override (initialize self (textual?: textual? #t)
                               (data: data #f)
                               (origin: origin #f)
                               (context: context #f)
                               (action: action #f)
                               (model: model #f)
                               (locator: locator #f)
                               (name: name #f)
                               (tag-symbolic?: tag-symbolic? #f)
                               (tag-reference: tag-reference #f)
                               (properties: properties '())
                               (children: children '()))
    (define (canonicalize-properties lst)
      (while (not-null? lst)
        (set-car! lst (keyword->symbol (car lst)))
        (set! lst (cddr lst))))
    
    (nextmethod self #f #f)
    (set! self.data data)
    (set! self.origin origin)
    (set! self.context context)
    (set! self.action action)
    (set! self.model model)
    (set! self.locator locator)
    (set! self.name name)
    (set! self.tag-symbolic? tag-symbolic?)
    (set! self.tag-reference tag-reference)
    (set! self.properties properties)
    (set! self.children children)
    (when textual?
      (canonicalize-properties properties)))
  
  
  (method override (copy-object self deep?)
    (let ((properties (copy properties))
          (children (subcopy children deep?)))
      (let ((new-form (new Form textual?: #f data: (and data (copy data)) origin: origin context: context action: action model: model locator: locator name: name tag-symbolic?: tag-symbolic? tag-reference: tag-reference properties: properties children: children)))
        (for-each (lambda (form)
                    (set-parent-value form new-form))
                  children)
        (when (and deep? (has-property? self 'client-form))
          (set-property new-form 'client-form (copy-object (get-property self 'client-form) #t)))
        new-form)))
  
  
  (method override (print self output readably)
    (print-unreadable self output
      (lambda (output)
        (format output "({a}{a}{a}) {a} {a}"
          action
          (if model (format " {s}" model) "")
          (if name (format " {s}" name) "")
          (if properties (format "{s}" (keywordize-properties properties)) "()")
          (if children (format "[{a}]" (length children)) "()")))))

  
  ;;;
  ;;;; Context
  ;;;


  (method override (setup-context self ctx)
    (set! context ctx)
    (setup-context tag-reference context)
    (for-each-property
      (lambda (name value)
        (setup-context value context))
      properties)
    (for-each (lambda (child)
                (setup-context child context))
              children))
  
  
  ;;;
  ;;;; Access
  ;;;
  
  
  (method public (resolve-model self)
    (require-reference context model))
  
  
  (method override (locate-reference self symbol)
    (let ((reference (locator symbol)))
      (and reference (resolve-runtime-reference reference))))
  
  
  (method override (require-reference self symbol)
    (or (locate-reference self symbol)
        (error "Unable to find reference: {s}" symbol)))
  
  
  (method override (get-reference self symbol)
    (locator symbol))

  
  ;;;
  ;;;; Children
  ;;;
  
  
  (method public (child self name)
    (or (find-child self name)
        (error "Could not find child {t}" name)))


  (method public (find-child self name)
    (find-by self (lambda (child)
               (equal? (get-name child) name))))
  
  
  (method override (find-name self name)
    (find-child self name))
  
  
  (method public (find-path self path)
    (if (null? path)
        self
      (let ((child (find-child self (car path))))
        (and child (find-path child (cdr path))))))
  
  
  (method public (find-type self type)
    (find-by self
      (lambda (child)
        (eq? (get-model child) type))))
  
  
  (method public (find-subtype self type)
    (find-by self
      (lambda (child)
        (let ((class (and (get-model child) (resolve-model child))))
          (and class (subtype? class type))))))
  
  
  (method override (add-child self child)
    (set! children (cons child children)))
    
  
  (method public (add-child-at self child rank)
    (set! children (insert! children rank child)))
  
  
  (method override (append-child self child)
    (set! children (append! children (list child))))
  
  
  (method public (send-child-before self child target)
    (let* ((removed (remove! child children))
           (rank (and target (or (find removed target) (error "Unable to find: {t}" target)))))
      (set! children (insert! removed rank child))))
  
  
  (method public (sort-children self test (key: key get-name))
    (set! children (sort test children key: key)))

  
  ;;;
  ;;;; Remember
  ;;;
  

  (method public (remember-creation self unused component)
    (set! children (cons (new Restore-Form action: 'remove component: component properties: '() children: '()) children)))


  (method public (remember-reference self unused name)
    (let ((form (new Restore-Form action: 'modify model: #f name: name properties: '() children: '())))
      (set! children (cons form children))
      form))


  (method public (remember-property self component property)
    (let ((actual-value (read-property component property)))
      (set-property self property actual-value)))

  
  ;;;
  ;;;; Open
  ;;;
  
  
  (method public (instantiate self . rest)
    (bind-keywords ((name #f) . others) rest
      (let ((model (resolve-model self)))
        (apply new model form: self creator: #t name: (or name self.name) rest))))
  
  
  (method public (instantiate-component self . rest)
    (let ((model (resolve-model self)))
      (apply new model creator: #t name: name rest)))

  
  ;;;
  ;;;; Editor
  ;;;
  
  
  (method public (get-parts self)
    (values
      (get-action self)
      (get-model self)
      (get-name self)
      (keywordize-properties (get-properties self))
      (get-children self)))
  
  
  ;;;
  ;;;; Traits
  ;;;
  
  
  (method public (get-base-traits-names self)
    (let ((names (or (getf properties 'base-traits) (getf properties base-traits:))))
      (and names
           (listify names))))
  
  
  (method public (get-traits self context)
    (map (lambda (trait)
           (resolve-trait context trait))
         (or (get-base-traits-names self) '())))
  
  
  ;;;
  ;;;; Location
  ;;;
  
  
  (method override (get-child-location self child)
    (list (+ 1
             (if name 2 0)
             (if tag-symbolic? 2 0)
             (if tag-reference 2 0)
             (length properties)
             (find-rank child children))))))
