;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Components
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module jazz.component jazz


(export (jazz.component.autoload))

(import (jazz.component.autoload)
        (jazz.library))


;;;
;;;; Form
;;;


(define *forms*
  (make-table test: eq?))


(definition public (register-form name form)
  (table-set! *forms* name form))

(definition public (unregister-form name)
  (table-clear *forms* name))

(definition public (registered-form name)
  (table-ref *forms* name #f))

(definition public (require-form name)
  (or (registered-form name)
      (error "Unable to find form: {s}" name)))


;;;
;;;; Trait
;;;


(definition public (instantiate-trait type form)
  (let ((trait (instantiate~ form)))
    (setup-client-type~ trait type)
    trait))


(definition public (resolve-trait context obj)
  (cond ((symbol? obj)
         (assert context)
         (local-trait context obj))
        ((is? obj Trait)
         obj)
        ((is? obj Trait-Reference)
         (resolve-parameters~ obj))
        (else
         (error "Unable to resolve trait: {s}" obj))))


(definition public (local-trait context obj)
  (or (find-local-trait context obj)
      (error "Unable to resolve trait: {s}" obj)))


(definition public (find-local-trait context obj)
  (find-component~ (get-creator~ context) (split-identifier obj))))
