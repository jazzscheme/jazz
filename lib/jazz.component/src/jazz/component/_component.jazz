;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Components
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module jazz.component jazz


(export (jazz.component.autoload)
        (jazz.component.hubs)
        (jazz.component.syntax))

(import (jazz.component.autoload)
        (jazz.component.hubs)
        (jazz.io)
        (jazz.markup)
        (jazz.reference)
        (jazz.version))


;;;
;;;; Parameter
;;;


(definition public current-tag-reference-chain
  (make-parameter '()))


(definition public tag-reference-not-found-handler
  (make-parameter #f))


;;;
;;;; File
;;;


(definition *file-forms*
  (make-table test: pathname=? hash: pathname-hash))


(definition public (register-file-form file form)
  (table-set! *file-forms* file form))

(definition public (registered-file-form file)
  (table-ref *file-forms* file #f))


(definition public (instantiate-file file . rest)
  (let ((form (let ((form (read-form file)))
                (register-file-form file form)
                form)))
    (apply instantiate form rest)))


;;;
;;;; Form
;;;


(define *forms*
  (make-table test: eq?))


(definition public (register-form name form)
  (table-set! *forms* name form))

(definition public (unregister-form name)
  (table-clear *forms* name))

(definition public (registered-form name)
  (table-ref *forms* name #f))

(definition public (require-form name)
  (or (registered-form name)
      (error "Unable to find form: {s}" name)))


(definition public (read-form file)
  (call-with-input-file (path-settings file char-encoding: 'UTF eol-encoding: 'cr-lf readtable: jazz-readtable)
    (lambda (input)
      (read-form-from input file))))


(definition public (read-form-from input (file #f))
  (parameterize ((walk-for #f))
    (let ((expr (read input)))
      (if (eof-object? expr)
          (error "No expression found in form{?~: {a}~}" (and file (parse file)))
        (let ((form (parse-form expr file)))
          (set-origin form file)
          form)))))


(definition public (parse-form expr (file #f))
  (define (parse-expr expr proc)
    (if (and (pair? expr)
             (eq? (car expr) 'data))
        (parse-data expr proc)
      (error "Ill-formed data{? in: {a}~}" (and file (parse file)))))
  
  (define (parse-data expr proc)
    (bind (data dialect . info) expr
      (let ((version (assq 'version info))
            (import (assq 'import info))
            (form (assq 'form info)))
        (assert form)
        (proc (new Data
                (if version (apply new Version (cdr version)) #f)
                dialect
                (if import (cdr import) #f)
                (if file (new Alias (get-list (get-parent file))) #f))
              (cadr form)))))
  
  (parse-expr expr
    (lambda (data form)
      (construct-form form (imports-locator (effective-imports data)) data))))


(definition public (imports-locator imports)
  (let ((imports (map (lambda (import)
                        (if (pair? import) (car import) import))
                      imports)))
    (lambda (symbol)
      (let ((module-name (find-if (lambda (module-name)
                                    (boolean (module-get module-name symbol)))
                                  imports)))
        (and module-name
             (deserialize-runtime-reference (list 'module-public module-name symbol)))))))


(definition public (locator-add-imports locator imports)
  (if (null? imports)
      locator
    (let ((new-locator (imports-locator imports)))
      (lambda (symbol)
        (or (new-locator symbol)
            (locator symbol))))))


;;;
;;;; Former
;;;


(class Designer-Error extends Error)


(definition public (designer-error . rest)
  (signal (new Designer-Error message: (apply format rest))))


;;;
;;;; Components
;;;


(definition public (common-ancestor components)
  (cond ((null? components) #f)
        ((= 1 (length components))
         (first components))
        (else
         (common-ancestor (remove-false (remove-duplicates (map get-parent components)))))))


(definition public (collect-oldest-ancestors components common-ancestor)
  (collect-if (lambda (component)
                (or (eq? component common-ancestor)
                    (let ((ancestry (component-ancestry (get-parent component) common-ancestor)))
                      (every? (lambda (ancestor)
                                (not (memq? ancestor components)))
                              ancestry))))
              components))


(definition public (component-owned? component form ancestor)
  (let ((form (component-owned-form component form ancestor)))
    (and form (eq? (get-action form) 'new))))


(definition public (component-ancestry component ancestor)
  (define (end? scan)
    (if scan
        (eq? scan ancestor)
      (error "{t} is not a descendant of the reference component {t}" component ancestor)))
  
  (unfold-right end? identity get-parent component))


(definition public (component-in-reference-descendants? component ancestor)
  (continuation-capture
    (lambda (exit)
      (define (end? scan)
        (if scan
            (eq? scan ancestor)
          (continuation-return exit #f)))
      
      (unfold-right end? identity get-parent component))))


(definition public (component-owned-form component form ancestor)
  (owned-form form (component-ancestry component ancestor)))


(definition public (owned-form form ancestry)
  (if (null? ancestry)
      form
    (let ((cpn (car ancestry)))
      (let ((subforms (get-children form))
            (cpn-form (get-form cpn))
            (name (get-name cpn)))
        (cond ((not cpn-form)
               #f)
              ((memq? cpn-form subforms)
               (owned-form cpn-form (cdr ancestry)))
              ((not name)
               #f)
              (else
               (let ((subform (find-in subforms name key: get-name test: equal?)))
                 (and subform (owned-form subform (cdr ancestry))))))))))


(definition public (ownership-level owned-form)
  (and owned-form
       (case (get-action owned-form)
          ((new install) 'create)
          (else (if (null? (get-properties owned-form))
                    'traverse
                  'modify)))))


(definition public (first-ancestry-owned-form component ascendant form)
  (let (loop (cur component))
    (if (eq? component ascendant)
        form
      (let ((owned-form (owned-form form (component-ancestry cur ascendant))))
        (or owned-form (loop (get-parent cur)))))))


(definition public (ancestry-traits-owned-forms component ascendant form)
  (let (loop (current-form (first-ancestry-owned-form (get-parent component) ascendant form))
             (traits-owned-forms '()))
    (if current-form
        (let ((traits (get-traits current-form component)))
          (loop (get-parent current-form)
                (append traits-owned-forms
                        (collect (lambda (trait)
                                   (let ((trait-form (get-client-form trait)))
                                     (owned-form trait-form (component-ancestry component ascendant))))
                                 traits))))
      traits-owned-forms)))


(definition public (component-ascendant-owned-forms component ascendant)
  (let* ((ancestry (component-ancestry component ascendant))
         (class-forms (reverse (get-class-forms ascendant))))
    (append-map (lambda (class-form)
                  (let ((owned-form (owned-form class-form ancestry)))
                    (append (ancestry-traits-owned-forms component ascendant class-form)
                            (if owned-form
                                (append (map get-client-form (get-traits owned-form component))
                                        (list owned-form))
                              '()))))
                class-forms)))


(definition public (component-forms component)
  (let (loop (ascendant (get-parent component))
             (forms '()))
    (if ascendant
        (loop (get-parent ascendant)
              (append forms (component-ascendant-owned-forms component ascendant)))
        forms)))



(definition public (common-root-component component-list)
  (let ((roots (remove-duplicates (map get-root-parent component-list))))
    (when (pair? roots)
      (car roots))))


(definition public (component-descendant-value-list component (filter-proc: filter-proc identity) (map-proc: map-proc get-name)) 
  (remove-duplicates (map map-proc (collect-if filter-proc (collect-descendants component)))))


(definition public (root-creator component)
  (let ((creator (get-creator component)))
    (if (and creator (not (eq? creator component)))
        (root-creator creator)
      component)))


;;;
;;;; Trait
;;;


(definition public (instantiate-trait type form)
  (let ((trait (instantiate form)))
    (setup-client-type trait type)
    trait))


(definition public (resolve-trait context obj)
  (cond ((symbol? obj)
         (assert context)
         (local-trait context obj))
        ((is? obj Trait)
         obj)
        ((is? obj Trait-Reference)
         (parameters-resolve obj))
        (else
         (error "Unable to resolve trait: {s}" obj))))


(definition public (local-trait context obj)
  (or (find-local-trait context obj)
      (error "Unable to resolve trait: {s}" obj)))


(definition public (find-local-trait context obj)
  (let ((creator (or (get-creator context) context))
        (path (split-identifier obj)))
    (or (locate-component creator path)
        (find-component creator path))))


;;;
;;;; Trait Reference
;;;


(definition package (walk-trait-reference arguments proc)
  (proc (source-code (car arguments))))


(definition package (construct-trait-reference symbol . parameters)
  (new Trait-Reference symbol parameters))


;;;
;;;; Surrogate
;;;


(definition package update-surrogate!
  #f)

(definition public (update-surrogate-set! proc)
  (set! update-surrogate! proc))


(definition package remove-surrogate!
  #f)

(definition public (remove-surrogate-set! proc)
  (set! remove-surrogate! proc)))
