;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Component Descriptors
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module jazz.component.descriptors jazz


(import (jazz.component)
        (jazz.descriptor)
        (jazz.domain)
        (jazz.integrity)
        (jazz.jml)
        (jazz.locale)
        (jazz.resource))


;;;
;;;; Traits
;;;


(definition public (get-active-trait-presentation component)
  (let ((trait (get-active-trait~ component)))
    (if (not trait)
        (get-presentation-property component)
      (get-presentation-property trait))))


;;;
;;;; Unfold
;;;


(definition public (unfold-branches component (branches: branches #t) (properties: properties '()) (include-root?: include-root? #t))
  (let* ((form (get-form~ (get-creator~ component)))
         (active-branch (get-branch~ component))
         (active-branch-name (and active-branch (get-name~ active-branch)))
         (all-branch-names (map get-name~ (child-traits~ component))))
    (define (instantiate branch-name)
      (if (eq? branch-name active-branch-name)
          component
        (let ((client (apply (~ instantiate form) properties)))
          (when branch-name
            (let ((branch (child~ client branch-name)))
              (set-restoreable?~ branch #f)
              (set-active-branch~ client branch)))
          client)))
    
    (if (eq? branches #t)
        (if include-root?
            (cons (instantiate #f) (map instantiate all-branch-names))
          (map instantiate all-branch-names))
      (map instantiate branches))))


;;;
;;;; Designers
;;;


(definition public (install-designer component designer)
  (set-designers~ component (cons designer (get-designers~ component)))
  (for-each (lambda (child)
              (install-designer child designer))
            (get-components component)))


(definition public (uninstall-designer component designer)
  (set-designers~ component (remove! designer (get-designers~ component)))
  (for-each (lambda (child)
              (uninstall-designer child designer))
            (get-components component)))


;;;
;;;; Surrogate
;;;


(update-surrogate-set!
  (lambda (component surrogate)
    (remove-surrogate component)
    (install-surrogate component (get-editor~ surrogate))))

(remove-surrogate-set!
  remove-surrogate)


;;;
;;;; Integrity
;;;


(generic (validate-component (<Component> component) validation-context)
  (for-each (lambda (symbol)
              (let* ((property (property-field (class-of component) symbol))
                     (validation-context (refine~ validation-context property: symbol)))
                (map (lambda (violation)
                       (add-property-violation~ validation-context "{a}" (get-message~ violation)))
                     (collect-value-violations~ (property-domain component property) (read-property component property) validation-context))))
            (get-filtered-properties component))
  (validate-children component validation-context))


(generic (validate-children (<Component> component) validation-context)
  (define (validate-child addable-classes child)
    (unless (some? (lambda (addable-class)
                     (is? child addable-class))
                   addable-classes)
      (let ((violation (new Integrity-Violation
                         message: (format "Class {a} cannot have children of type {a}"
                                          (category-name (class-of component))
                                          (category-name (class-of child))))))
        (add-violation~ (get-manager~ validation-context) violation child (get-root~ validation-context) (get-editor~ validation-context)))))
  
  (define (validate-child-descriptor child child-descriptor)
    (unless (some? (lambda (class-ref)
                     (is? child (resolve-reference~ class-ref)))
                   (get-classes~ child-descriptor))
      (let ((violation (new Integrity-Violation
                         message: (format "Child named {a} cannot be of type {a}"
                                          (get-name~ child)
                                          (category-name (class-of child))))))
        (add-violation~ (get-manager~ validation-context) violation child (get-root~ validation-context) (get-editor~ validation-context)))))
  
  (let ((addable-classes (map resolve-runtime-reference (flatten (get-categorized-addable-classes component))))
        (children-descriptor (get-children-descriptor~ (get-class-descriptor~ (class-of component)))))
    (for-each (lambda (child)
                (let ((name (get-name~ child)))
                  (let ((child-descriptor (and name
                                               (find-if (lambda (child-descriptor)
                                                          (eq? (get-target~ child-descriptor)
                                                               name))
                                                        (get-children~ children-descriptor)))))
                    (if child-descriptor
                        (validate-child-descriptor child child-descriptor)
                      (validate-child addable-classes child)))))
              (get-children~ component))
    (for-each (lambda (child-descriptor)
                (when (get-mandatory?~ child-descriptor)
                  (let ((child (find-child~ component (get-target~ child-descriptor))))
                    (unless child
                      (let ((violation (new Integrity-Violation
                                         message: (format "Missing child named {a}"
                                                          (get-target~ child-descriptor)))))
                        (add-violation~ (get-manager~ validation-context) violation component (get-root~ validation-context) (get-editor~ validation-context)))))))
              (get-children~ children-descriptor))))


;;;
;;;; Search
;;;


(generic (search-component (<Component> component) target <Object>)
  (define (search-name name)
    (let ((presentation (localize (get-presentation-property component))))
      (search presentation name ignore-case?: #t)))
  
  (define (search-type type)
    (is? component type))
  
  (let ((name (getf target name:))
        (type (getf target type:)))
    (and (or (not name) (search-name name))
         (or (not type) (search-type type)))))


(definition protected (search-text text <Object> target <Object>)
  (define (search-plain-text text <Object> target <Object>)
    (some? (lambda (line)
             (search line target ignore-case?: #t))
           (get-paragraphs~ text)))
  
  (define (search-formatted-text text <Object> target <Object>)
    (some? (lambda (info)
             (bind (format . runs) info
               (some? (lambda (run)
                        (let ((string (car run)))
                          (search string target ignore-case?: #t)))
                      runs)))
           (get-paragraphs~ text)))
  
  (unimplemented 'search-text)
  @Unimplemented
  (typecase text
    ((Formatted-Text)
     (search-formatted-text text target))
    ((Text)
     (search-plain-text text target))
    (else
     #f)))


;;;
;;;; Trait
;;;


(class Trait-Descriptor extends Component-Descriptor
  
  
  (form
    (<install>                                   image: {Image-Resource "Trait"} name-mandatory?: #t name-unicity?: #t
      (<properties~>
        (<Property-Descriptor> name: client-form standard?: #f
          (<Value-Domain>      name: domain)))))
  
  
  (method override (component-set-presentation component designer presentation)
    (set-name~ designer component (string->symbol presentation) trait: #f)))


;;;
;;;; Group
;;;


(class Group-Descriptor extends Component-Descriptor
  
  
  (form
    (<install>                               title: "Group" image: {Image-Resource "OpenedFolder"} indexable?: #f
      (<properties~>
        (<Property-Descriptor> name: title
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: icon
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: classes
          (<Classes-Domain>    name: domain))
        (<Property-Descriptor> name: sort?
          (<Boolean-Domain>    name: domain)))))
  
  
  (method override (component-get-component-image component)
    (or (get-icon~ component) (nextmethod component)))
  
  
  (method override (component-get-custom-card component)
    jazz.designer:Group-Card)
  
  
  (method override (component-sort-components? component)
    (get-sort?~ component))


  ;;;
  ;;;; Classes
  ;;;
  
  
  (method override (component-get-categorized-addable-classes component)
    '()
    @historical
    (map (lambda (model)
           (when model
             (resolve-reference~ model)))
         (get-component-classes component)))
  
  
  (method override (component-get-classes component)
    (or (get-classes~ component)
        (when (get-parent~ component)
          (get-component-classes (get-parent~ component))))))


;;;
;;;; Classes-Domain
;;;


(class Classes-Domain extends List-Domain
  
  
  (method override (finish rest)
    (nextmethod rest)
    @w
    (set! domain (new Class-Domain))))


;;;
;;;; Class-Domain
;;;


(class Class-Domain extends Enumeration-Domain
  
  
  (method override (finish rest)
    (nextmethod rest)
    @convert
    (set-choices '((() "Separator") () (Group "Group") () (Note "Note") (Task "Task") (Calendar-Event "Event") (Anniversary "Anniversary") () (Company "Company") (Organism "Organism") (Person "Person") () (Password "Password") () (Apartment "Apartment") (Recipe "Recipe"))))))
