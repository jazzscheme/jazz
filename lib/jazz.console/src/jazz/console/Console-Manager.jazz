;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Console Manager
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.console.Console-Manager jazz


(import (jazz.console)
        (jazz.debugger)
        (jazz.graphic)
        (jazz.jml)
        (jazz.library)
        (jazz.system)
        (jazz.ui)
        (jazz.ui.skin)
        (jazz.ui.view))


(class undocumented Console-Manager extends Layout-View


  (form
    (<install>                                  size: {Dimension 650 400} background: {Color Dark} layout-type: border
      (<Layout-View>             name: tools
        @convert
        (<Push-Combo>            name: detail
          (<!>                   name: body     portfolio: :images resource: {Image-Resource "PrintDetail"} tooltip?: #t tooltip-text: "Print Detail" action-handler: {Event-Handler :guest on-print-detail-menu})
          (<!>                   name: pick     action-handler: {Event-Handler :guest on-print-detail-menu}))
        (<Separator>                            location: tail)
        (<Push-Tool>             name: clear    size: {Dimension 22 22} location: tail tooltip?: #t tooltip-text: "Clear Console" resource: {Image-Resource "Clear"} portfolio: :images action-handler: {Event-Handler :guest on-clear-console}))
      (<Pad-View>                name: pad      location: center)))
    
  
  (method meta override (external-name . rest)
    'console-manager)

  
  ;;;
  ;;;; Host
  ;;;
  
  
  (method meta override (host-icon)
    {Image-Resource "Console"})
  
  
  (method meta override (host-title)
    "Consoles")

  
  ;;;
  ;;;; Docked
  ;;;
  
  
  (method override (get-tools-view)
    (locate 'tools))
  
  
  (method override (focus-default)
    (let ((text (get-text)))
      (when text
        (acquire-focus~ text))))
  
  
  ;;;
  ;;;; Access
  ;;;
  
  
  (method (get-pad)
    (locate 'pad))

  
  (method public (get-text)
    (let ((console (get-selection~ (get-pad))))
      (and console (get-text~ console))))
  
  
  ;;;
  ;;;; Register
  ;;;
  
  
  (method (register-console presentation select? (view-class: view-class #f) (console-button?: console-button? #t) (process-title: process-title #f) (process-traits: process-traits #f) (process-thread: process-thread #f))
    (let ((tool (and console-button? (new Console-Button title: (console-title process-title process-traits process-thread) process-title: process-title process-traits: process-traits process-thread: process-thread console-manager: self auto-size?: #t location: 'head resource: {Image-Resource "Process"} portfolio: :images tooltip-text: presentation tooltip?: #t))))
      (when tool
        (add-tool~ (get-host) tool))
      (let ((pad (get-pad))
            (view (new (or view-class Console-View) button: tool)))
        (let ((text (get-text~ view))
              (select? (or select? (not (get-selection~ pad)))))
          (add-view~ pad view)
          (when select?
            (set-selection~ pad view))
          (layout-view~ pad)
          (when tool
            (set-console~ tool text)
            (set-action-handler~ tool
              (new Event-Handler
                execute: (lambda (event)
                           (set-selection~ pad view)
                           (acquire-focus~ text))))
            (when select?
              (set-selected?~ tool #t)))
          text))))
  
  
  (method (unregister-console console)
    (let ((host (get-host))
          (pad (get-pad))
          (view (get-console~ console)))
      (let ((focused? (or (eq? console (get-focus)) (eq? console (get-focused~ host))))
            (next (next-child~ pad view)))
        (remove-tool~ host (get-button~ view))
        (remove-view~ pad view)
        (when (and focused? next)
          (select-console next))))
    (invalidate-view))
  
  
  (method package (get-consoles)
    (get-children~ (get-pad)))
  
  
  (method (select-console console)
    (let ((host (get-host))
          (pad (get-pad)))
      (set-selection~ pad console)
      (set-selected?~ (get-button~ console) #t)
      (let ((text (get-text~ console)))
        (if (eq? host (get-focused-host))
            (acquire-focus~ text)
          (set-focused~ host text)))))
  
  
  (method (select-next-console)
    (let ((host (get-host))
          (console (select-next~ (get-pad))))
      (set-selected?~ (get-button~ console) #t)
      (let ((text (get-text~ console)))
        (if (eq? host (get-focused-host))
            (acquire-focus~ text)
          (set-focused~ host text)))))
  
  
  ;;;
  ;;;; Update
  ;;;
  
  
  (method package (update-console-buttons)
    (let ((manager (get-debugger-manager)))
      (for-each-process~ manager
        (lambda (debugger process live? focused?)
          (for-each (lambda (resource)
                      (let ((reference (get-reference~ resource)))
                        (when (is? reference Console-Text-View)
                          (let ((button (get-button~ (get-console~ reference)))
                                (process (get-reference~ (get-process~ resource)))
                                (thread (get-reference~ (get-thread~ resource))))
                            (bind (title traits thread) (process-information process thread)
                              (set-process-title~ button title)
                              (set-process-traits~ button traits)
                              (set-process-thread~ button thread)
                              (update-title~ button)
                              (let ((presented (present-process-title/traits/thread title traits thread)))
                                (set-tooltip-text~ button presented)))))))
                    (get-debugger-resources process))))
      (refresh-tools~ (get-host))))
  
  
  ;;;
  ;;;; Console
  ;;;
  
  
  (method (console-context-menu button pos)
    (track-popup-menu~ button (new Console-Menu client: self button: button) pos))
  
  
  ;;;
  ;;;; Events
  ;;;


  (method (on-print-detail-menu evt)
    (let* ((sender (get-sender~ evt))
           (combo (typecase sender ((Push-Icon) (get-combo~ sender)) ((Combo-Button) (get-combo~ sender))))
           (pos (new Point 0 (get-height~ (get-size~ sender))))
           (menu (new Print-Detail-Menu client: self))
           (pref (get-preferences '(tools console)))
           (detail (get-print-detail~ pref)))
      (set-checked?~ (child~ menu detail) #t)
      (layout-menu~ menu)
      (track-popup-menu~ sender menu pos initiator: combo)))


  (method (on-print-detail evt)
    (let ((pref (get-preferences '(tools console)))
          (detail (get-property~ evt detail:)))
      (set-preference pref 'print-detail detail)
      (user-message "Print detail set to {a}" detail)))
  
  
  (method (on-clear-console evt)
    (let ((text (get-text)))
      (if (not text)
          (bell)
        (clear-console~ text)
        (acquire-focus~ text))))
  
  
  (method (on-close-console evt)
    (let ((console (get-console~ (get-button~ (get-parent~ (get-sender~ evt))))))
      (let ((resource (find-debugger-resource console)))
        (if (not resource)
            (unregister-debugger-console console)
          (let ((process (get-reference~ (get-process~ resource)))
                (thread (get-reference~ (get-thread~ resource))))
            (console-close~ process thread)))))))


;;;
;;;; Console-Button
;;;


(class Console-Button extends Radio-Tool
  
  
  (property process-title   initialize #f accessors generate)
  (property process-traits  initialize #f accessors generate)
  (property process-thread  initialize #f accessors generate)
  (property console-manager initialize #f accessors generate)
  (property console         initialize #f accessors generate)
  
  
  (method public (update-title)
    (set-title (console-title process-title process-traits process-thread)))
  
  
  (method override (draw-background surface context)
    (let ((look (find-look 'tool)))
      (let ((background (if selected?
                            (or (get-active-background~ look) {Color White})
                          (or (get-inactive-background~ look) (get-inactive-background~ (find-look 'docked))))))
        (fill-background~ surface (get-bounds) background))))
  
  
  (method override (context-menu pos)
    (console-context-menu~ console-manager self pos)))


;;;
;;;; Console-Menu
;;;


(class Console-Menu extends Context-Menu
  
  
  (property button initialize #f accessors generate)
  
  
  (form
    (<install>
      (<Check-Item> name: close title: "Close Console" action-handler: {Event-Handler (:form :client) on-close-console}))))


;;;
;;;; Print-Detail-Menu
;;;


(class Print-Detail-Menu extends Context-Menu
  
  
  (form
    (<install>
      (<Check-Item> name: :human    title: "Human" action-handler: {Event-Handler (:form :client) on-print-detail detail: :human})
      (<Check-Item> name: :text     title: "Textual" action-handler: {Event-Handler (:form :client) on-print-detail detail: :text})
      (<Check-Item> name: :reader   title: "Reader" action-handler: {Event-Handler (:form :client) on-print-detail detail: :reader})
      (<Check-Item> name: :describe title: "Describe" action-handler: {Event-Handler (:form :client) on-print-detail detail: :describe})))))
