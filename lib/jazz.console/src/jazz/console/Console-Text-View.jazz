;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Console Text View
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.console.Console-Text-View jazz


(import (jazz.console)
        (jazz.graphic)
        (jazz.ide)
        (jazz.jml)
        (jazz.library)
        (jazz.locale)
        (jazz.system)
        (jazz.ui))


(class undocumented Console-Text-View extends IDE-Text-View


  (slot inserted-rank  initialize #f)
  (slot inserted-where initialize #f)
  (slot banner         initialize #f accessors generate)
  (slot banner-prompt  initialize #f accessors generate)
  (slot console-port   initialize #f accessors generate)
  (slot console-pump   initialize #f accessors generate)
  (slot partial-line   initialize #f)

  
  (method meta override (external-name . rest)
    'console-text)


  (method override (default-tool?)
    #t)


  (method override (default-console?)
    #t)
  
  
  (method override (new-model)
    (new Text-Model base-style: {Text-Style Code-Base} wrap?: #t left-padding: 2))

  
  (method override (install rest)
    (nextmethod rest)
    (set-propagate-styles?~ model #f)
    (set-colorize?~ syntax #f)
    (let ((pref (preferences)))
      (add-style 'Banner  (get-banner-style~ pref))
      (add-style 'Prompt  (get-prompt-style~ pref))
      (add-style 'Entry   (get-entry-style~ pref))
      (add-style 'Input   (get-input-style~ pref))
      (add-style 'Output  (get-output-style~ pref))
      (add-style 'Comment (get-comment-style~ pref))))

  
  (method override (preferences)
    (get-preferences '(documents console-text)))


  ;;;
  ;;;; Host
  ;;;
  
  
  (method meta override (host-icon)
    {Image-Resource "Console"})
  
  
  (method meta override (host-title)
    "Console")

  
  ;;;
  ;;;; Console
  ;;;
  
  
  (method (get-console)
    (get-parent~ (get-parent)))


  ;;;
  ;;;; Actions
  ;;;
  

  (method override (focus-actions)
    (cons (find-actions 'console-text)
          (nextmethod)))


  ;;;
  ;;;; Events
  ;;;
  
  
  (method (on-fresh-prompt evt)
    (fresh-prompt))
  
  
  (method (on-console-evaluate evt)
    (let ((block (block-at (get-end))))
      (cond ((empty-block? block)
             (set-caret (text-ending)))
            ((nu=? block (last-block))
             (console-evaluate))
            (else
             (set-caret (text-ending))
             (insert-string (remove-enclosing #\newline (get-string block)))))))
  
  
  (method (on-insert-previous evt)
    (insert-previous-block))
  
  
  (method (on-insert-next evt)
    (insert-next-block))


  (method override (tab-press key modifiers)
    (if (has-completion?)
        (end-completion)
      (if (shift-key? modifiers)
          (insert-next-block)
        (insert-previous-block))))
  
  
  (method override (delete-char)
    (define (send-end-of-file)
      (close-port console-port))
    
    (if (at-end?)
        (send-end-of-file)
      (nextmethod)))
  
  
  (method override (scrollee-width)
    (get-display-width))


  (method override (context-menu pos)
    (receive (shift? control? alt?) (modifiers-down)
      (if (and (not control?) (not shift?) (not alt?))
          (begin
            (context-menu-click pos)
            (track-popup-menu (new Console-Menu) pos))
        (nextmethod pos))))
  
  
  (method override (set-selection range . rest)
    (apply nextmethod range rest)
    (set! inserted-where #f))


  ;;;
  ;;;; Eval
  ;;;
  
  
  (method (console-evaluate)
    (set-caret (text-ending))
    (eval-from-prompt))

  
  (method protected virtual (eval-from-prompt)
    (insert-newline)
    (let ((range (current-command)))
      (let ((command (get-string range)))
        (unless (empty-string? command)
          (display command console-port)
          (force-output console-port)
          (stylize-range~ model range (locate-style 'Input))
          (reset-inserted)))))
  
  
  (method (current-command)
    (select-style (text-ending)
      (lambda (style)
        (inherits?~ style 'Entry))))


  ;;;
  ;;;; Text
  ;;;


  (method override (get-modified?)
    #f)
  
  
  (method override (get-tooltip-context pos)
    #f)
  
  
  (method override (home-column row col)
    (let ((str (paragraph-string row)))
      (let ((pos (find str #\>)))
        (if pos
            (let ((end (+ pos 2)))
              (if (<= end (string-length str))
                  (let ((header (substring str 0 pos)))
                    (if (numeric? header)
                        end
                      0))
                0))
          0))))
  
  
  ;;;
  ;;;; Text Formatted
  ;;;
  
  
  (method override (insert-formatted-line line)
    (let ((line (if partial-line (string-append partial-line line) line)))
      (nextmethod
        (call-with-input-string line
          (lambda (input)
            (let (iterate (pos 0)
                          (insert-end #f)
                          (depth 0))
              (let ((c (read-char input)))
                (if (not (eof-object? c))
                    (ecase c
                      ((formatted-start-delimiter)
                       (iterate (+ pos 1) (or insert-end pos) (+ depth 1)))
                      ((formatted-end-delimiter)
                       (iterate (+ pos 1) (and (> depth 1) insert-end) (- depth 1)))
                      (else
                       (iterate (+ pos 1) (and (> depth 0) insert-end) depth)))
                  (if insert-end
                      (begin
                        (set! partial-line (substring line insert-end pos))
                        (substring line 0 insert-end))
                    (set! partial-line #f)
                    line)))))))))

  
  ;;;
  ;;;; History
  ;;;
  
  
  (method override (current-history-item)
    #f)
  

  ;;;
  ;;;; Formatted
  ;;;

  
  (method override (process-formatted-directive directive input)
    (case directive
      ((banner)
       (with-formatted-range input
         (lambda (range)
           (stylize-range~ model range (locate-style 'Banner))
           (set! banner (get-string range)))))
      ((banner-prompt)
       (with-formatted-range input
         (lambda (range)
           (stylize-range~ model range (locate-style 'Prompt))
           (set! banner-prompt (get-string range)))))
      ((prompt)
       (with-formatted-range input
         (lambda (range)
           (stylize-range~ model range (locate-style 'Prompt)))))
      (else
       (nextmethod directive input))))


  ;;;
  ;;;; Style
  ;;;
  
  
  (method protected (backward-style pos predicate)
    (let ((explorer (new (explorer-class) model start: pos end: pos)))
      (backward-style~ explorer predicate)
      (get-range~ explorer)))
  
  
  (method protected (forward-style pos predicate)
    (let ((explorer (new (explorer-class) model start: pos end: pos)))
      (forward-style~ explorer predicate)
      (get-range~ explorer)))
  
  
  (method protected (select-style pos predicate)
    (let ((explorer (new (explorer-class) model start: pos end: pos)))
      (select-style~ explorer predicate)
      (get-range~ explorer)))
    

  ;;;
  ;;;; Banner
  ;;;

  
  (method public virtual (display-banner banner)
    (when banner
      (insert-styled banner 'Banner)))
  
  
  (method public virtual (determine-banner)
    (let ((range (forward-style (text-beginning) (lambda (style)
                                                   (or (inherits?~ style 'Banner)
                                                       (inherits?~ style 'Prompt)
                                                       (inherits?~ style 'Output))))))
      (when range
        (get-string range))))
  
  
  (method public (clear-console)
    (let ((banner (or banner (determine-banner))))
      (clear-all)
      (display-banner banner)
      (when banner-prompt
        (insert-styled banner-prompt 'Prompt))))


  ;;;
  ;;;; Prompt
  ;;;
  
  
  (method public (fresh-prompt)
    (stylize-range~ model (block-at (get-end)) (locate-style 'Comment))
    (let ((end (text-ending)))
      (set-caret end)
      (let ((prompt-range (last-prompt)))
        (when (and prompt-range (nu/=? (get-end~ prompt-range) end))
          (let ((prompt (get-string prompt-range)))
            (when (/= (get-col~ end) 0)
              (insert-newline)
              (insert-styled prompt 'Prompt)))))))
  
  
  ;;;
  ;;;; Navigation
  ;;;
  
  
  (method (reset-inserted)
    (set! inserted-rank #f)
    (set! inserted-where #f))
  
  
  (definition (text-style? style)
    (or (inherits?~ style 'Banner)
        (inherits?~ style 'Prompt)
        (inherits?~ style 'Output)))
  
  
  (definition (user-style? style)
    (not (text-style? style)))
  
  
  (method (block-at pos)
    (new-range
      (get-start~ (backward-style pos user-style?))
      (get-end~ (forward-style pos user-style?))))
  
  
  (method (next-block block)
    (let* ((next-start (get-end~ (forward-style (get-end~ block) text-style?)))
           (next-end (get-end~ (forward-style next-start user-style?))))
      (new-range next-start next-end)))
  
  
  (method (previous-block block)
    (let* ((previous-end (get-start~ (backward-style (get-start~ block) text-style?)))
           (previous-start (get-start~ (backward-style previous-end user-style?))))
      (new-range previous-start previous-end)))
  
  
  (method (last-block)
    (let ((ending (text-ending)))
      (backward-style ending user-style?)))
  
  
  (method (last-prompt)
    (define (prompt-style? style)
      (inherits?~ style 'Prompt))
    
    (define (prompt range)
      (if (empty?~ range)
          #f
        (let ((start (get-start~ range))
              (end (get-end~ range)))
          (if (= (get-line~ start)
                 (get-line~ end))
              range
            (new Range$Cell$ (new Cell (get-line~ end) 0) end)))))
    
    (let ((ending (text-ending)))
      (let ((range (backward-style ending (lambda (style) (not (prompt-style? style))))))
        (prompt (backward-style (get-start~ range) (lambda (style) (prompt-style? style)))))))
  
  
  (method (find-block rank)
    (let (iterate (block (last-block)) (n rank))
      (if (<= n 0)
          block
        (iterate (previous-block block) (- n 1)))))
  
  
  (definition (empty-block? block)
    (nu=? (get-start~ block)
          (get-end~ block)))

  
  (method (insert-previous-block)
    (let* ((current (or inserted-rank 0))
           (previous (+ current 1))
           (block (find-block previous)))
      (unless (empty-block? block)
        (when inserted-where
          (set-selection inserted-where))
        (let ((start (get-start)))
          (insert-string (remove-enclosing #\newline (get-string block)))
          (set! inserted-rank previous)
          (set! inserted-where (new-range start (get-start)))))))

  
  (method (insert-next-block)
    (let* ((current (or inserted-rank 0))
           (next (- current 1)))
      (when (> next 0)
        (let ((block (find-block next)))
          (unless (empty-block? block)
            (when inserted-where
              (set-selection inserted-where))
            (let ((start (get-start)))
              (insert-string (remove-enclosing #\newline (get-string (find-block next))))
              (set! inserted-rank next)
              (set! inserted-where (new-range start (get-start))))))))))


;;;
;;;; Console-Menu
;;;


(class Console-Menu extends Context-Menu
  
  
  (form
    (<install>
      (<Label-Item>     name: console-evaluate title: "Evaluate" icon: {Image-Resource "Import"} action-handler: {Action console-text console-evaluate})
      (<Label-Item>     name: fresh-prompt     title: "Fresh Prompt" action-handler: {Action console-text fresh-prompt})
      (<Separator-Item>)
      (<Label-Item>     name: edit-definitions title: "Find Definitions" icon: {Image-Resource "Edit"} action-handler: {Action code-text edit-definitions})
      (<Label-Item>     name: edit-references  title: "Find References" action-handler: {Action code-text edit-references})
      (<Separator-Item>)
      (<Label-Item>     name: cut                  title: {Locales english: "Cut" french: "Couper"} icon: {Image-Resource "Cut"} action-handler: {Action view cut})
      (<Label-Item>     name: copy                 title: {Locales english: "Copy" french: "Copier"} icon: {Image-Resource "Copy"} action-handler: {Action view copy})
      (<Label-Item>     name: paste                title: {Locales english: "Paste" french: "Coller"} icon: {Image-Resource "Paste"} action-handler: {Action view paste})
      (<Separator-Item>)
      (<Label-Item>     name: insert-previous  title: "Insert Previous" icon: {Image-Resource "FindBackward"} action-handler: {Action console-text insert-previous})
      (<Label-Item>     name: insert-next      title: "Insert Next" icon: {Image-Resource "FindForward"} action-handler: {Action console-text insert-next})))))
