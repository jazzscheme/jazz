;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Console Text View
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library protected jazz.console.Console-Text-View jazz


(import (jazz.console)
        (jazz.graphic)
        (jazz.ide)
        (jazz.jml)
        (jazz.library)
        (jazz.locale)
        (jazz.system)
        (jazz.ui)
        (jazz.utilities))


(class undocumented Console-Text-View extends IDE-Text-View


  (slot inserted-rank  initialize {})
  (slot inserted-where initialize {})
  (slot banner         initialize {} accessors generate)
  (slot prompt         initialize {} accessors generate)
  (slot console-port   initialize {} accessors generate)
  (slot console-pump   initialize {} accessors generate)
  
  
  (form
    (<install> wrap?: #t left-padding: 2))

  
  (method meta (external-name . rest)
    'console-text)


  (method (default-tool?)
    #t)


  (method (default-console?)
    #t)
  
  
  (method (propagate-styles?)
    #f)
   
  
  (method (install rest)
    (nextmethod rest)
    (let ((pref (preferences)))
      (add-style (new Text-Style name: 'Base font: {Font name: Code}))
      (add-style (new Text-Style name: 'Base-Bold font: {Font name: Code-Bold}))
      (add-style (new Text-Style name: 'Banner  base: 'Base color: (get-banner-color~ pref)))
      (add-style (new Text-Style name: 'Entry  base: 'Base-Bold color: (get-entry-color~ pref)))
      (add-style (new Text-Style name: 'Input  base: 'Base-Bold color: (get-input-color~ pref)))
      (add-style (new Text-Style name: 'Output base: 'Base color: (get-output-color~ pref)))
      (add-style (new Text-Style name: 'Comment base: 'Base color: (get-comment-color~ pref)))
      (set-default-style (get-style 'Entry))))

  
  (method (preferences)
    (get-preferences '(documents console-text)))


  ;;;
  ;;;; Host
  ;;;
  
  
  (method meta (host-icon)
    {Bitmap-Resource "Console"})
  
  
  (method meta (host-title)
    "Console")

  
  ;;;
  ;;;; Document
  ;;;
  
  
  (method (position-host host)
    (set-size~ host {Dimension 1280 100}))

  
  ;;;
  ;;;; Console
  ;;;
  
  
  (method (get-console)
    (get-parent~ (get-parent)))


  ;;;
  ;;;; Actions
  ;;;
  

  (method (focus-actions)
    (cons (find-actions 'console-text)
          (nextmethod)))


  ;;;
  ;;;; Events
  ;;;
  
  
  (method (on-fresh-prompt evt)
    (fresh-prompt))
  
  
  (method (on-console-evaluate evt)
    (let ((block (block-at (get-end))))
      (cond ((empty-block? block)
             (set-caret (text-ending)))
            ((nu=? block (last-block))
             (console-evaluate))
            (else
             (set-caret (text-ending))
             (insert-string (remove-enclosing #\newline (get-string block)))))))
  
  
  (method (on-insert-previous evt)
    (insert-previous-block))
  
  
  (method (on-insert-next evt)
    (insert-next-block))


  (method (tab-press key modifiers)
    (if (has-completion?)
        (end-completion)
      (if (shift-key? modifiers)
          (insert-next-block)
        (insert-previous-block))))
  
  
  (method (delete-char)
    (if (and (at-end?)
             (not (extended?~ (current-command))))
        (send-end-of-file)
      (nextmethod)))
  
  
  (method (send-end-of-file)
    (close-port console-port))
  
  
  (method (scrollee-size)
    (if wrap?
        (new Dimension (get-display-width) (scrollee-height))
      (nextmethod)))


  (method (context-menu pos)
    (receive (shift? control? alt?) (modifiers-down)
      (if (and (not control?) (not shift?) (not alt?))
          (begin
            (context-menu-click pos)
            (track-popup-menu (new Console-Menu) pos))
        (nextmethod pos))))
  
  
  (method public (set-selection range . rest)
    (apply nextmethod range rest)
    (set! inserted-where {}))


  ;;;
  ;;;; Eval
  ;;;
  
  
  (method (console-evaluate)
    (set-caret (text-ending))
    (eval-from-prompt))

  
  (method protected virtual (eval-from-prompt)
    (insert-newline)
    (let ((range (current-command)))
      (let ((command (get-string range)))
        (unless (empty-string? command)
          (display command console-port)
          (force-output console-port)
          (set-style range (get-style 'Input))
          (reset-inserted)))))
  
  
  (method (current-command)
    (select-style (text-ending)
      (function (style)
        (inherits?~ style 'Entry))))


  ;;;
  ;;;; Text
  ;;;


  (method (get-modified?)
    #f)
  
  
  (method (get-tooltip-context pos)
    {})
  
  
  (method (home-column row)
    (if (and (>= (paragraph-length row) 2) (= (get-string (new-range (new Cell row 0) (new Cell row 2))) "> "))
        2
      0))

  
  ;;;
  ;;;; History
  ;;;
  
  
  (method (current-history-item)
    {})


  ;;;
  ;;;; Coloring
  ;;;
      
  
  (method (recolorize-text start end-row)
    )
  

  ;;;
  ;;;; Formatted
  ;;;

  
  (method (process-formatted-directive directive input)
    (case directive
      ((banner)
       (with-formatted-range input
         (function (range)
           (set-style range (get-style 'Banner))
           (set! banner (get-string range)))))
      ((prompt)
       (fresh-prompt))
      (else
       (nextmethod directive input))))


  ;;;
  ;;;; Style
  ;;;
  
  
  (method protected (backward-style pos predicate)
    (let ((explorer (new (explorer-class) self start: pos end: pos)))
      (backward-style~ explorer predicate)
      (get-range~ explorer)))
  
  
  (method protected (forward-style pos predicate)
    (let ((explorer (new (explorer-class) self start: pos end: pos)))
      (forward-style~ explorer predicate)
      (get-range~ explorer)))
  
  
  (method protected (select-style pos predicate)
    (let ((explorer (new (explorer-class) self start: pos end: pos)))
      (select-style~ explorer predicate)
      (get-range~ explorer)))
    

  ;;;
  ;;;; Banner
  ;;;

  
  (method public virtual (display-banner banner)
    (when banner
      (insert-styled banner 'Banner)))
  
  
  (method public virtual (determine-banner)
    (let ((range (forward-style (text-beginning) (function (style)
                                                   (or (inherits?~ style 'Banner)
                                                       (inherits?~ style 'Output))))))
      (when range
        (get-string range))))
  
  
  (method public (clear-console)
    (let ((banner (or banner (determine-banner))))
      (clear-all)
      (display-banner banner)))


  ;;;
  ;;;; Prompt
  ;;;


  (method public (fresh-prompt)
    (set-style (last-block) (get-style 'Comment))
    (set-caret (text-ending)))
  
  
  ;;;
  ;;;; Navigation
  ;;;
  
  
  (method (reset-inserted)
    (set! inserted-rank {})
    (set! inserted-where {}))
  
  
  (definition (text-style? style)
    (or (inherits?~ style 'Banner)
        (inherits?~ style 'Output)
        (inherits?~ style 'Comment)))
  
  
  (definition (user-style? style)
    (not (text-style? style)))
  
  
  (method (block-at pos)
    (new-range
      (get-start~ (backward-style pos user-style?))
      (get-end~ (forward-style pos user-style?))))
  
  
  (method (next-block block)
    (let* ((next-start (get-end~ (forward-style (get-end~ block) text-style?)))
           (next-end (get-end~ (forward-style next-start user-style?))))
      (new-range next-start next-end)))
  
  
  (method (previous-block block)
    (let* ((previous-end (get-start~ (backward-style (get-start~ block) text-style?)))
           (previous-start (get-start~ (backward-style previous-end user-style?))))
      (new-range previous-start previous-end)))
  
  
  (method (last-block)
    (let ((ending (text-ending)))
      (backward-style ending user-style?)))
  
  
  (method (find-block rank)
    (let (iterate (block (last-block)) (n rank))
      (if (<= n 0)
          block
        (iterate (previous-block block) (- n 1)))))
  
  
  (method (empty-block? block)
    (nu=? (get-start~ block)
          (get-end~ block)))

  
  (method (insert-previous-block)
    (let* ((current (either inserted-rank 0))
           (previous (+ current 1))
           (block (find-block previous)))
      (unless (empty-block? block)
        (when inserted-where
          (set-selection inserted-where))
        (let ((start (get-start)))
          (insert-string (remove-enclosing #\newline (get-string block)))
          (set! inserted-rank previous)
          (set! inserted-where (new-range start (get-start)))))))

  
  (method (insert-next-block)
    (let* ((current (either inserted-rank 0))
           (next (- current 1)))
      (when (> next 0)
        (let ((block (find-block next)))
          (unless (empty-block? block)
            (when inserted-where
              (set-selection inserted-where))
            (let ((start (get-start)))
              (insert-string (remove-enclosing #\newline (get-string (find-block next))))
              (set! inserted-rank next)
              (set! inserted-where (new-range start (get-start))))))))))


;;;
;;;; Console-Menu
;;;


(class Console-Menu extends Context-Menu
  
  
  (form
    (<install>
      (<Label-Item>     name: console-evaluate title: "Evaluate" icon: {Bitmap-Resource "Import"} action: {Action console-text console-evaluate})
      (<Label-Item>     name: fresh-prompt     title: "Fresh Prompt" action: {Action console-text fresh-prompt})
      (<Separator-Item>)
      (<Label-Item>     name: edit-definitions title: "Find Definitions" icon: {Bitmap-Resource "Edit"} action: {Action code-text edit-definitions})
      (<Label-Item>     name: edit-references  title: "Find References" action: {Action code-text edit-references})
      (<Separator-Item>)
      (<Label-Item>     name: cut                  title: {Locales english: "Cut" french: "Couper"} icon: {Bitmap-Resource "Cut"} action: {Action view cut})
      (<Label-Item>     name: copy                 title: {Locales english: "Copy" french: "Copier"} icon: {Bitmap-Resource "Copy"} action: {Action view copy})
      (<Label-Item>     name: paste                title: {Locales english: "Paste" french: "Coller"} icon: {Bitmap-Resource "Paste"} action: {Action view paste})
      (<Separator-Item>)
      (<Label-Item>     name: insert-previous  title: "Insert Previous" icon: {Bitmap-Resource "FindBackward"} action: {Action console-text insert-previous})
      (<Label-Item>     name: insert-next      title: "Insert Next" icon: {Bitmap-Resource "FindForward"} action: {Action console-text insert-next})))))
