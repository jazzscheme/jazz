;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Console
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module jazz.console jazz


(hub clear-console)
(hub console-context-menu)
(hub fresh-prompt)
(hub get-banner-style)
(hub get-button)
(hub get-comment-style)
(hub get-console)
(hub get-console-pump)
(hub get-context)
(hub get-entry-style)
(hub get-input-style)
(hub get-output-style)
(hub get-print-detail)
(hub get-prompt-style)
(hub get-text)
(hub get-wrap?)
(hub register-console)
(hub select-console)
(hub select-next-console)
(hub set-console)
(hub set-console-port)
(hub set-console-pump)
(hub set-context)
(hub set-process-thread)
(hub set-process-title)
(hub set-process-traits)
(hub set-wrap?)
(hub unregister-console)
(hub update-console-buttons)
(hub update-title)


(export (jazz.console.autoload))
(import (jazz.component)
        (jazz.editor.lisp)
        (jazz.exemplar)
        (jazz.text)
        (jazz.view))


(definition public (get-console-manager-guest)
  (get-guest (singleton-docked Lisp-Console-Manager)))


(definition public (get-console-text)
  (get-text (get-console-manager-guest)))


(definition package (get-console-text-manager text)
  (get-creator (get-parent (get-creator text))))


;;;
;;;; Inserted
;;;


(class Inserted extends Object
  
  
  (slot rank  initialize #f accessors generate)
  (slot where initialize #f accessors generate)
  
  
  (method (reset self)
    (set! rank #f)
    (set! where #f)))


;;;
;;;; Style
;;;


(definition package (console-backward-style text pos predicate)
  (let ((explorer (new (explorer-class text) (get-model text) start: pos end: pos)))
    (backward-style explorer predicate)
    (get-range explorer)))


(definition package (console-forward-style text pos predicate)
  (let ((explorer (new (explorer-class text) (get-model text) start: pos end: pos)))
    (forward-style explorer predicate)
    (get-range explorer)))


(definition package (console-select-style text pos predicate)
  (let ((explorer (new (explorer-class text) (get-model text) start: pos end: pos)))
    (select-style explorer predicate)
    (get-range explorer)))


;;;
;;;; Navigation
;;;


(definition (text-style? style)
  (or (inherits? style 'Banner)
      (inherits? style 'Prompt)
      (inherits? style 'Output)
      (inherits? style 'Link)
      (inherits? style 'Error)))


(definition (user-style? style)
  (not (text-style? style)))


(definition package (console-block-at text pos)
  (new-range text
             (get-start (console-backward-style text pos user-style?))
             (get-end (console-forward-style text pos user-style?))))


(definition (console-next-block text block)
  (let* ((next-start (get-end (console-forward-style text (get-end block) text-style?)))
         (next-end (get-end (console-forward-style text next-start user-style?))))
    (new-range text next-start next-end)))


(definition (console-previous-block text block)
  (let* ((previous-end (get-start (console-backward-style text (get-start block) text-style?)))
         (previous-start (get-start (console-backward-style text previous-end user-style?))))
    (new-range text previous-start previous-end)))


(definition package (console-last-block text)
  (let ((ending (text-ending text)))
    (console-backward-style text ending user-style?)))


(definition (console-find-block text rank)
  (let (iterate (block (console-last-block text)) (n rank))
    (if (<= n 0)
        block
      (iterate (console-previous-block text block) (- n 1)))))


(definition (empty-block? block)
  (nu=? (get-start block)
        (get-end block)))


(definition package (console-insert-previous-block text inserted)
  (let* ((current (or (get-rank inserted) 0))
         (previous (+ current 1))
         (block (console-find-block text previous)))
    (unless (empty-block? block)
      (when (get-where inserted)
        (set-selection text (get-where inserted)))
      (let ((start (get-start text)))
        (insert-string text (remove-enclosing #\newline (get-string text block)))
        (set-rank inserted previous)
        (set-where inserted (new-range text start (get-start text)))))))


(definition package (console-insert-next-block text inserted)
  (let* ((current (or (get-rank inserted) 0))
         (next (- current 1)))
    (when (> next 0)
      (let ((block (console-find-block text next)))
        (unless (empty-block? block)
          (when (get-where inserted)
            (set-selection text (get-where inserted)))
          (let ((start (get-start text)))
            (insert-string text (remove-enclosing #\newline (get-string text (console-find-block text next))))
            (set-rank inserted next)
            (set-where inserted (new-range text start (get-start text)))))))))


(definition package (console-return text evaluate)
  (let ((block (console-block-at text (get-end text))))
    (cond ((empty-block? block)
           (set-caret text (text-ending text)))
          ((nu=? block (console-last-block text))
           (evaluate))
          (else
           (set-caret text (text-ending text))
           (insert-string text (remove-enclosing #\newline (get-string text block)))))))


;;;
;;;; Console
;;;


(definition public (console-insert-previous text)
  ))
