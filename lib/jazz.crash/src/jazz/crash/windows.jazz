;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Crash Handler
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Jeremie Lasalle Ratelle.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.crash.windows jazz


(import (jazz.foreign)
        (jazz.platform.types)
        (jazz.platform.windows.Types)
        (jazz.snapshot))


;;;
;;;; Filter
;;;


(c-definition (SnapshotProcess code desc) (unsigned-int wchar_t-string) VOID "snapshot_process" ""
  (snapshot-process reason: (or desc (format "Received 0x{x}" code))))


(c-declare platform.crash #/C/
static LPWSTR exception_description(DWORD code)
{
    switch (code)
    {
        case 0xE0000001L:
            return L"Crash process";

        case EXCEPTION_ACCESS_VIOLATION:
            return L"Access violation";

        case EXCEPTION_DATATYPE_MISALIGNMENT:
            return L"Datatype misalignment";

        case EXCEPTION_FLT_DIVIDE_BY_ZERO:
            return L"Division by zero";

        case EXCEPTION_ILLEGAL_INSTRUCTION:
            return L"Illegal instruction";

        case EXCEPTION_STACK_OVERFLOW:
            return L"Stack overflow";

        default:
            return NULL;
    }
}

static VOID windows_unhandled_exception_handler(PVOID arg)
{
    LPEXCEPTION_POINTERS info = (LPEXCEPTION_POINTERS) arg;
    LPEXCEPTION_RECORD record = info->ExceptionRecord;

    DWORD code = record->ExceptionCode;
    LPWSTR desc = exception_description(code);
    
    snapshot_process(code, desc);
}
//#)


(definition package (setup-crash-handler log?)
  (set-crash-reporter
    (lambda (arg)
      (when log?
        (log-backtrace arg))
      ((c-function windows_unhandled_exception_handler (PVOID) VOID
         "windows_unhandled_exception_handler(___arg1);")
       arg)))))
