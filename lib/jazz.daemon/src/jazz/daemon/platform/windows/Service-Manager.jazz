;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Service Manager
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.daemon.platform.windows.Service-Manager jazz


(class Service-Manager extends Object)


@convert (


(class Service-Manager extends Object


  (slot handle)


  (method (initialize)
    (nextmethod)
    (let ((hnd (OpenSCManager NULL NULL SC_MANAGER_ALL_ACCESS)))
      (if (not hnd)
          (error "Could not open service control manager")
        (set! handle hnd)
        (allocated handle))))


  (method (destroy)
    (CloseServiceHandle handle)
    (freed handle)
    (nextmethod))
  
  
  ;;;
  ;;;; Create
  ;;;
  
  
  (method public (create-service name command (presentation: presentation #f))
    (let ((service-handle (CreateService handle name (or presentation name) SERVICE_ALL_ACCESS SERVICE_WIN32_OWN_PROCESS SERVICE_DEMAND_START SERVICE_ERROR_NORMAL command NULL NULL NULL NULL NULL)))
      (if (= service-handle NULL)
          (error "Could not create service")
        (new Service-Handle service-handle))))
  
  
  ;;;
  ;;;; Open
  ;;;
  
  
  (method public (open-service name)
    (let ((service-handle (OpenService handle name SERVICE_ALL_ACCESS)))
      (if (not service-handle)
          (error "Could not open service")
        (new Service-Handle service-handle))))))
)