;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; ADO Recordsets
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.database.ado.connection.ADO-Recordset jazz


(import (jazz.database)
        (jazz.database.ado)
        (jazz.platform)
        (jazz.platform.com))


(class ADO-Recordset extends Recordset
  
  
  (slot handle initialize #f getter generate)
  
  
  (method override (setup-recordset self initargs)
    (nextmethod self initargs)
    (set! handle (com-create Recordset-class)))
  
  
  (method override (destroy-recordset self)
    (when handle
      (when (/= (Recordset15$get-State handle) adStateClosed)
        (Recordset15$Close handle))
      (com-release handle)
      (set! handle #f))
    (nextmethod self))
  
  
  ;;;
  ;;;; Open
  ;;;
  
  
  (method override (opened? self)
    (boolean handle))
  
  
  (method override (open self command
                (connection: connection #f)
                (data-source: data-source #f)
                (max-load: max-load #t)
                (cursor-type: cursor-type adOpenForwardOnly)
                (lock-type: lock-type adLockReadOnly)
                (options: options adCmdText))
    (let ((connection (cond (connection (get-handle connection))
                            (data-source (format "Data Source={a};" data-source))
                            (else #f))))
      @convert
      (when (neq? max-load #t)
        ;; the + 1 is because the get-rows algorithm uses next
        ;; to figure out if some rows where not retrieved...
        (put-MaxRecords handle (+ max-load 1)))
      (Recordset15$Open handle command connection cursor-type lock-type options)))
  
  
  ;;;
  ;;;; State
  ;;;
  
  
  (method override (get-state self)
    (let ((state (Recordset15$get-State handle)))
      (cond ((= state adStateOpen) 'open)
            ((= state adStateClosed) 'closed)
            (else 'unknown))))
  
  
  ;;;
  ;;;; Metadata
  ;;;
  
  
  (method override (new-recordset-metadata self)
    (new ADO-Recordset-Metadata (Recordset15$get-Fields handle)))
  
  
  (method override (get-field-type self metadata field)
    (get-Type field))
  
  
  (method override (get-field-value self metadata field)
    (Field20$get-Value field))
  
  
  (method override (safe-field-value self metadata field)
    (get-field-value metadata field)
    @convert
    (ecase (get-field-type metadata field)
      ((adLongVarBinary) "<adLongVarBinary>")
      ((adVarBinary) "<sql_variant>")
      (else (get-field-value metadata field))))
  
  
  ;;;
  ;;;; Recordsets
  ;;;
  
  
  (method override (next-recordset! self)
    (receive (records-affected new-handle) (Recordset15$NextRecordset handle)
      (destroy-recordset)
      (set! handle new-handle)))
  
  
  ;;;
  ;;;; Records
  ;;;
  
  
  (method override (move-first self)
    (Recordset15$MoveFirst handle))
  
  
  (method override (move-last self)
    (Recordset15$MoveLast handle))
  
  
  (method override (move-next self)
    (Recordset15$MoveNext handle))
  
  
  (method override (move-previous self)
    (Recordset15$MovePrevious handle))
  
  
  (method override (at-bof? self)
    (Recordset15$get-BOF handle))
  
  
  (method override (at-eof? self)
    (Recordset15$get-EOF handle))
  
  
  (method override (iterate-records self proc)
    (declare (proper-tail-calls))
    (unless (at-eof?)
      @this-doesnt-work-with-multirecordsets-but-does-it-break-existing-code-to-comment-it?
      (move-first)
      (while (and (not (at-eof?)) (proc))
        (move-next))))))
