;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; SQLServer Data Sources
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2012
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.database.sqlserver.SQLServer-Data-Source jazz


(import (jazz.database)
        (jazz.database.ado)
        (jazz.database.odbc)
        (jazz.database.sqlserver)
        (jazz.jml)
        (jazz.schema))


(class SQLServer-Data-Source extends Database-Data-Source


  (property server   initialize #f     accessors generate)
  (property database initialize #f     accessors generate)
  (property dsn      initialize #f     accessors generate)
  
  
  (method meta override (external-name . rest)
    'sqlserver)
  
  
  ;;;
  ;;;; Provider
  ;;;
  
  
  ;; need a cache!?
  (method override (get-provider)
    (new SQLServer-Provider))
  
  
  ;;;
  ;;;; Inventory
  ;;;
  
  
  @convert
  (method (new-inventory connection . rest)
    (new SQLServer-Inventory connection server username password database))
  
  
  ;;;
  ;;;; Connection
  ;;;
  
  
  (method (get-driver-name)
    (case backend
      ((adodb) "SQL Server")
      ((odbc)  "SQL Server Native Client 10.0")))
  
  
  (method override (get-connection-string)
    (if dsn
        (format "DSN={a};" dsn)
      (format "driver=~{{a}};server={a};database={a};uid={a};pwd={a}"
              (get-driver-name)
              server
              database
              (or username "")
              (or password ""))))
  
  
  (method override (get-connection-properties)
    (list server:   server
          database: database
          username: username
          password: password))
  
  
  ;;;
  ;;;; Post-Process
  ;;;
  
  
  (method override (convert-symbolic-sql symbolic-sql)
    (bind (operator . rest) symbolic-sql
      (case operator
        ((string-concatenate)
         (bind (first second) rest
           (format "{a} + {a}" first second)))
        ((true?)
         (format "{a} = 1" (car rest)))
        ((cs=)
         (bind (first second) rest
           (format "{a} COLLATE Latin1_General_CS_AS = '{a}'" first second)))
        ((drop-temp-table)
         (format "if not object_id('tempdb..{a}') is null DROP TABLE {a}" (car rest) (car rest)))
        ((temp-table)
         (format "#{a}" (car rest)))
        ((into-temporary-table)
         (format "INTO #{a}" (car rest)))
        (else
         (nextmethod symbolic-sql)))))
  
  
  ;;;
  ;;;; Present
  ;;;
  
  
  (method override (present)
    (if dsn
        (format "{a} (SQLServer)" dsn)
      (format "{a}:{a} (SQLServer)" server database)))
  
  
  (method override (present-detailed)
    `(<span>
       "SQLServer Database"
       (<bulleted> ,(format "Server: {a}" server))
       (<bulleted> ,(format "Database: {a}" database))))
  
  
  ;;;
  ;;;; Descriptor
  ;;;
  
  
  (method meta override (get-class-descriptor (context: context #f))
    (new SQLServer-Data-Source-Descriptor)))


;;;
;;;; Design
;;;


(submodule design


(import (jazz.designer))


(class SQLServer-Data-Source-Descriptor extends Data-Source-Descriptor
  
  
  (form
    (<install>                                        title: "SQLServer Connection"
      (<properties~>
        (<Property-Descriptor>         name: server
          (<Value-Domain>              name: domain   nullable?: #t)
          @convert
          (<SQLServer-Server-Domain>   name: domain   nullable?: #t limit-to-list?: #f))
        (<Property-Descriptor>         name: database
          (<Value-Domain>              name: domain   nullable?: #t)
          @convert
          (<SQLServer-Database-Domain> name: domain   nullable?: #t condensed?: #t))
        (<Property-Descriptor>         name: dsn      title: "DSN"
          (<String-Domain>             name: domain   nullable?: #t))))))))
