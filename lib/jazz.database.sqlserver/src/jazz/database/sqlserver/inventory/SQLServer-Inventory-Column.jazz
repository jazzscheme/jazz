;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; SQLServer Inventory Column
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.database.sqlserver.inventory.SQLServer-Inventory-Column jazz


(import (jazz.database)
        (jazz.syntax (phase syntax)))


(class SQLServer-Inventory-Column extends Inventory-Column
  
  
  (slot handle)
  
  
  (method (initialize inventory parent index-column? handle)
    (nextmethod inventory parent index-column?)
    (set! self.handle handle)
    (allocated handle))
  
  
  (method (destroy)
    (com-release handle)
    (freed handle)
    (nextmethod))
  
  
  ;;;
  ;;;; Database
  ;;;
  
  
  (method public (get-handle)
    handle)
  
  
  (method (get-default-value)
    (with ((default (get-DRIDefault handle)))
      (get-Text default)))
  
  
  (method (set-default-value value)
    (with ((default (get-DRIDefault handle)))
      (if (null? value)
          (Remove default)
        (put-Text default value))))
  
  
  (method (get-default-value-name)
    (with ((default (get-DRIDefault handle)))
      (get-Name default)))
  

  (method (set-default-value-name value)
    (with ((default (get-DRIDefault handle)))
      (when value
        (put-Name default value))))
  
  
  (method (get-used-defined-datatype)
    (let ((used-defined-type (get-used-defined-type))
          (type (get-type)))
      (if (/= used-defined-type type)
          used-defined-type
        #f)))
  
  
  (method (get-used-defined-type)
    (get-Datatype handle))


  (method (get-datatype)
    (new-datatype SQLServer-Datatype (get-type) (get-size) (get-precision) (get-scale)))


  (method (get-type)
    (get-PhysicalDatatype handle)
    ;temporaire convertit les UsedDefinedDatatype en PhysicalDatatype
    @wait(get-Datatype handle))
  
  
  (method (get-size)
    (get-Length handle))
  
  
  (method (set-datatype value)
    (let ((name (get-name value))
          (size (get-size value))
          (precision (get-precision value))
          (scale (get-scale value)))
      (put-Datatype handle name)
      (set-size size)
      (set-precision precision)
      (set-scale scale)))
 
  
  (method (modify-datatype value)
    (let ((name (get-name value))
          (size (get-size value)))
      (with ((column (coquery handle SQLDMO._Column2)))
        (AlterDataType column name size 0 0))))
  
  
  (method (set-size size)
    (when size
      (put-Length handle size)))
  
  
  (method (get-title)
    (get-Name handle))
  
  
  (method public (get-length)
    (get-Length handle))
  
    
  (method (get-scale)
    (get-NumericScale handle))
  
  
  (method (set-scale scale)
    (when scale
      (put-NumericScale handle scale)))
  
  
  (method (get-precision)
    (get-NumericPrecision handle))
 
  
  (method (set-precision precision)
    (when precision
      (put-NumericPrecision handle precision)))
 
  
  (method (get-nullable?)
    (get-AllowNulls handle))
  
  
  (method (set-nullable? value)
    (put-AllowNulls handle value))
  
  
  (method (get-fixed?)
    (with ((type (get-system-type inventory (get-type))))
      (not (get-IsVariableLength type))))
  
  
  (method (get-ordinal-position)
    (- (get-ID handle) 1))
  
  
  (method (set-ordinal-position value)
    ;Not implemented in SQLServer
    )


  (method (get-order)
    (order-of parent (get-title)))
  
  
  (method (get-identity?)
    (get-Identity handle))
  
  
  (method (set-identity? value)
    (put-Identity handle value))
  
  
  (method (get-identity-replication?)
    (not (get-NotForRepl handle)))
  
  
  (method (set-identity-replication? value)
    (put-NotForRepl handle (not value)))
  
  
  (method (get-identity-seed)
    (get-IdentitySeed handle))
  
  
  (method (set-identity-seed value)
    (put-IdentitySeed handle value))
  
  
  (method (get-identity-increment)
    (get-IdentityIncrement handle))
  
  
  (method (get-row-guid-col?)
    (get-IsRowGuidCol handle))
  
  
  (method (get-computed?)
    (get-IsComputed handle))
  
  
  (method (get-computed-text)
    (get-ComputedText handle))
  
  
  (method (get-collation)
    (with ((column2 (coquery handle SQLDMO._Column2)))
      (get-Collation column2)))
  
  
  (method (get-description)
    (let* ((column-name (get-title))
           (table-name (get-title parent))
           (cmd (tie "select cast(value as nvarchar(4000)) as Res from ::fn_listextendedproperty(N'MS_Description', N'user', N'dbo', N'Table', N'{table-name}', N'Column', N'{column-name}')")))
      (load-value (get-connection inventory) cmd "Res")))))
