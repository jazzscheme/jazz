;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; SQLServer Inventory Index
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.database.sqlserver.inventory.SQLServer-Inventory-Index jazz


(import (jazz.database))


(class SQLServer-Inventory-Index extends Inventory-Index
  
  
  (slot handle)
  
  
  (method (initialize inventory parent index-handle)
    (nextmethod inventory parent)
    (set! self.handle (coquery index-handle SQLDMO._Index2))
    (com-release index-handle)
    (allocated handle))

  
  (method (destroy)
    (com-release handle)
    (freed handle)
    (nextmethod))
  
  
  ;;;
  ;;;; Database
  ;;;
  
  
  (method public (get-handle)
    handle)
  
  
  (method (get-title)
    (get-Name handle))
  
  
  (method public (set-fields/orders value)
    (let ((string (join (map (lambda (field/order)
                               (format "[{a}]" (car field/order)))
                             value)
                        ",")))
      (put-IndexedColumns handle string))
    (for-each (lambda (field/order)
                (bind (field order) field/order
                  (SetIndexedColumnDESC handle field (= order 'descending))))
              value))
  
  
  (method (get-ignore-duplicates?)
    (type-bit? SQLDMO.SQLDMOIndex_IgnoreDupKey))
  
  
  (method (get-unique?)
    (type-bit? SQLDMO.SQLDMOIndex_Unique))
  
  
  (method (get-clustered?)
    (type-bit? SQLDMO.SQLDMOIndex_Clustered))
  
  
  (method (get-pad-index?)
    (type-bit? SQLDMO.SQLDMOIndex_PadIndex))
  
  
  (method (get-recompute-statistics?)
    (not (type-bit? SQLDMO.SQLDMOIndex_NoRecompute)))
  
  
  (method (get-fields)
    (with ((fields (ListIndexedColumns handle)))
      (loop (for n from 1 to (get-Count fields))
            (collect
              (with ((field (Item fields n)))
                (new SQLServer-Inventory-Column inventory self #t (coquery field SQLDMO._Column)))))))
  
  
  (method protected (order-of name)
    ;; todo
    ;'ascending
    ;this-is-sqlserver-2000-specific
    (if (GetIndexedColumnDESC handle name)
        'descending
      'ascending))
  
  
  (method (get-fill-factor)
    (get-FillFactor handle))
  
  
  ;;;
  ;;;; Utilities
  ;;;
  
  
  (method (type-bit? bit)
    (mask-bit-set? (get-Type handle) bit))
  
  
  (method (set-type-bit? bit value)
    (put-Type handle (mask-bit-set (get-Type handle) bit value)))))
