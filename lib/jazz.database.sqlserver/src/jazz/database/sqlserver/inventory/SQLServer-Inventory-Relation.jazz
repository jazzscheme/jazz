;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; SQLServer Inventory Relation
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.database.sqlserver.inventory.SQLServer-Inventory-Relation jazz


(import (jazz.database)
        (jazz.syntax (phase syntax)))


(class SQLServer-Inventory-Relation extends Inventory-Relation
  
  
  (slot handle)
  
  
  (method (initialize inventory parent handle)
    (nextmethod inventory parent)
    (set! self.handle handle)
    (allocated handle))

  
  (method (destroy)
    (com-release handle)
    (freed handle)
    ;; destroy the parent as we are its container
    (when parent
      (close parent))
    (nextmethod))
  
  
  ;;;
  ;;;; Relation
  ;;;
  
  
  (method (get-title)
    (get-Name handle))
  
  
  (method (get-primary-table)
    (standardize-name (get-ReferencedTable handle)))
  
  
  (method (get-primary-field-names)
    (with ((names (get-ReferencedColumns handle)))
      (loop (for n from 1 to (get-Count names))
            (collect (Item names n)))))
  
    
  (method (get-foreign-table)
    (get-title parent))
  
  
  (method (get-foreign-field-names)
    (with ((names (get-KeyColumns handle)))
      (loop (for n from 1 to (get-Count names))
            (collect (Item names n)))))
  
  
  (method (get-checked?)
    (get-Checked handle))
  
  
  (method (get-exclude-replication?)
    (get-ExcludeReplication handle))
  
  
  (method (get-update-cascade?)
    (get-cascade? "update"))
  
  
  (method (get-delete-cascade?)
    (get-cascade? "delete"))
  
    
  (method (get-cascade? kind)
    (let* ((fk-name (get-title))
           (cmd (tie "select objectproperty(object_id('{fk-name}'), 'CnstIs{kind}Cascade') as Res")))
      (if (= (load-value (get-connection inventory) cmd "Res") 1)
            #t
          #f)))


  ;;;
  ;;;; Names
  ;;;
  
  
  (definition dbo-header
    "[dbo].")
  
  
  (method (standardize-name name)
    (when (starts-with? name dbo-header)
      (set! name (subseq name (length dbo-header))))
    (when (eqv? (element name 0) #\[)
      (set! name (subseq name 1 (- (length name) 1))))
    name)))
