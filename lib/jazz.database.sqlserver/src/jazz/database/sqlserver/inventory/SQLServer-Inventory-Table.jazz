;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; SQLServer Inventory Table
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.database.sqlserver.inventory.SQLServer-Inventory-Table jazz


(import (jazz.database)
        (jazz.syntax (phase syntax)))


(class SQLServer-Inventory-Table extends Inventory-Table
  
  
  (slot handle)
  
  
  (method (initialize inventory parent handle)
    (nextmethod inventory parent)
    (set! self.handle handle)
    (allocated handle))
  
  
  (method (destroy)
    (com-release handle)
    (freed handle)
    (nextmethod))
  
  
  ;;;
  ;;;; Database
  ;;;
  
  
  (method public (get-handle)
    handle)
  
  
  (method (get-title)
    (get-Name handle))
  

  ;;;
  ;;;; Keys
  ;;;
  
  
  (method public (get-primary-key)
    (let ((key (get-PrimaryKey handle)))
      (when key
        (new SQLServer-Inventory-Primary-Key inventory self key))))
                 
  
  (method public (create-primary-key name fields/orders)
    (let ((primary-key (com-create SQLDMO.Key)))
      (put-Name primary-key name)
      (put-Type primary-key SQLDMO.SQLDMOKey_Primary)
      (with ((names (get-KeyColumns primary-key)))
        (for-each (lambda (field/order)
                    (bind (field order) field/order
                      (Add names field)))
                  fields/orders))
      (with ((keys (get-Keys handle)))
        (Add keys primary-key))
      (new SQLServer-Inventory-Primary-Key inventory self primary-key)))


  (method (remove-primary-key name)
    (with ((keys (get-Keys handle)))
      (Remove keys name)))
  
  
  ;;;
  ;;;; Columns
  ;;;
  
  
  (method (get-columns)
    (with ((columns (get-Columns handle)))
      (loop (for n from 1 to (get-Count columns))
            (collect (new SQLServer-Inventory-Column inventory self #f (Item columns n))))))
  
  
  (method (get-column name)
    (with ((columns (get-Columns handle)))
      (new SQLServer-Inventory-Column inventory self #f (Item columns name))))
  
  
  (method (create-column name)
    (let ((new-column (com-create SQLDMO.Column)))
      (put-Name new-column name)
      (new SQLServer-Inventory-Column inventory self #f new-column)))
  
  
  (method (append-column column)
    (with ((columns (get-Columns handle)))
      (Add columns (get-handle column))))
  
  
  (method (remove-column name)
    (with ((columns (get-Columns handle)))
      (Remove columns name)))
  
  
  ;;;
  ;;;; Indexes
  ;;;
  
  
  (method (get-indexes)
    (with ((indexes (get-Indexes handle)))
      (let ((fact (new List-Factory)))
        (loop (for n from 1 to (get-Count indexes))
              (let ((index (Item indexes n)))
                (if (and (not (get-StatisticsIndex index))
                         (not (mask-bit-set? (get-Type index) SQLDMO.SQLDMOIndex_DRIPrimaryKey)))
                    (put fact (new SQLServer-Inventory-Index inventory self index))
                  (com-release index))))
        (get-output fact))))
  
  
  (method public (get-primary-index)
    (with ((indexes (get-Indexes handle)))
      (continuation-capture
        (lambda (return)
          (loop (for n from 1 to (get-Count indexes))
                (let ((index (Item indexes n)))
                  (if (and (not (get-StatisticsIndex index))
                           (mask-bit-set? (get-Type index) SQLDMO.SQLDMOIndex_DRIPrimaryKey))
                      (continuation-return return (new SQLServer-Inventory-Index inventory self index))
                    (com-release index))))
          #f))))
  
  
  (method (get-index name)
    (with ((indexes (get-Indexes handle)))
      (new SQLServer-Inventory-Index inventory self (Item indexes name))))
  
  
  (method (create-index name)
    (let ((new-index (com-create SQLDMO.Index)))
      (put-Name new-index name)
      (new SQLServer-Inventory-Index inventory self new-index)))
  
  
  (method (append-index index)
    (with ((indexes (get-Indexes handle)))
      (Add indexes (get-handle index))))
  
  
  (method (remove-index name)
    (with ((indexes (get-Indexes handle)))
      (Remove indexes name)))
  

  ;;;
  ;;;; Triggers
  ;;;
  
  
  (method (get-triggers)
    (with ((triggers (get-Triggers handle)))
      (let ((fact (new List-Factory)))
        (loop (for n from 1 to (get-Count triggers))
              (let ((trigger (Item triggers n #f)))
                (if (not (get-SystemObject trigger))
                    (put fact (new SQLServer-Inventory-Trigger inventory self trigger))
                  (com-release trigger))))
        (get-output fact))))
  
  
  (constant Object-Not-Existant
    #x80045510)
  
  
  (method (get-trigger name (error?: error? #t))
    (with ((triggers (get-Triggers handle)))
      (let* ((action
               (lambda ()
                 (Item triggers name #f)))
             (trigger
               (if error?
                   (action)
                 (cotry (action) (Object-Not-Existant #f)))))
        (when trigger
          (new SQLServer-Inventory-Trigger inventory self trigger)))))


  (method (create-trigger name)
    (let ((new-trigger (com-create SQLDMO.Trigger)))
      (put-Name new-trigger name)
      (new SQLServer-Inventory-Trigger inventory self new-trigger)))
  
  
  (method (append-trigger trigger)
    (with ((triggers (get-Triggers handle)))
      (Add triggers (get-handle trigger))))
  
  
  (method (remove-trigger trigger-name)
    (with ((triggers (get-Triggers handle)))
      (Remove triggers trigger-name #f)))
  
  
  ;;;
  ;;;; Relations
  ;;;
  
  
  (method protected (get-table-relations)
    (with ((keys (get-Keys handle)))
      (let ((fact (new List-Factory)))
        (loop (for n from 1 to (get-Count keys))
              (let ((key (Item keys n)))
                (if (= (get-Type key) SQLDMO.SQLDMOKey_Foreign)
                    (put fact (new SQLServer-Inventory-Relation inventory self key))
                  (com-release key))))
        (get-output fact))))
  
  
  ;;;
  ;;;; Constraints
  ;;;
  
  
  (method (get-constraints)
    (with ((checks (get-Checks handle)))
      (let ((fact (new List-Factory)))
        (loop (for n from 1 to (get-Count checks))
              (let ((check (Item checks n)))
                (put fact (new SQLServer-Inventory-Constraint inventory self check))))
        (get-output fact))))
  
  
  (method (get-constraint name (error?: error? #t))
    (with ((constraints (get-Checks handle)))
      (let* ((action
               (lambda ()
                 (Item constraints name)))
             (constraint
               (if error?
                   (action)
                 (cotry (action) (Object-Not-Existant #f)))))
        (when constraint
          (new SQLServer-Inventory-Constraint inventory self constraint)))))


  (method (create-constraint name)
    (let ((new-constraint (com-create SQLDMO.Check)))
      (put-Name new-constraint name)
      (new SQLServer-Inventory-Constraint inventory self new-constraint)))
  
  
  (method (append-constraint constraint)
    (with ((constraints (get-Checks handle)))
      (Add constraints (get-handle constraint))))
  
  
  (method (remove-constraint constraint-name)
    (with ((constraints (get-Checks handle)))
      (Remove constraints constraint-name)))
  
  
  ;;;
  ;;;; Properties
  ;;;
  
  
  (method (get-text-file-group)
    (get-TextFileGroup handle))
  
  
  (method (set-text-file-group value)
    (put-TextFileGroup handle value))
  
  
  (method (get-file-group)
    (get-FileGroup handle))
  
  
  (method (set-file-group value)
    (put-FileGroup handle value))
  
  
  (method (get-owner)
    (get-Owner handle))
  
  
  (method (set-owner value)
    (put-Owner handle value))
  
  
  (method (get-description)
    (let* ((table-name (get-title))
           (cmd (tie "select cast(value as nvarchar(4000)) as Res from ::fn_listextendedproperty(N'MS_Description', N'user', N'dbo', N'Table', N'{table-name}', Null, Null)")))
      (load-value (get-connection inventory) cmd "Res")))))
