;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; SQLServer Inventory
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.database.sqlserver.inventory.SQLServer-Inventory jazz


(import (jazz.database)
        (jazz.syntax (phase syntax))
        (jazz.version))


(class SQLServer-Inventory extends Inventory
  
  
  ;; It seems that SQLServer caches many collections like databases, tables, relations, ...
  ;; so that closing them won't decrease the refcount on their owner!? If this is really the
  ;; case, then having a memory leak trace of 3 5 at the end should be normal...
  
  
  (slot server       initialize #f)
  (slot database     initialize #f)
  (slot system-types initialize '())
  
  
  (method (initialize connection servername username password (databasename #f))
    (nextmethod connection)
    (set! server (com-create SQLDMO.SQLServer error?: #f))
    (when (null? server)
      (error "Unable to locate SQLServer"))
    (Connect server servername username password)
    (when databasename
      (with ((databases (get-Databases server)))
        (set! database (Item databases databasename #f))))
    (allocated self))
  
  
  (method (destroy)
    (destroy-inventory)
    (freed self)
    (nextmethod))
  
  
  (method (destroy-inventory)
    (when system-types
      (com-release system-types)
      (set! system-types '()))
    (when database
      @debug-memory-leaks
      (debug '*** (com-interface-refcount server) (com-interface-refcount database))
      (com-release database)
      (set! database #f))
    (when server
      (DisConnect server)
      @debug-memory-leaks
      (debug '*** (com-interface-refcount server))
      (com-release server)
      (set! server #f)))
  
  
  ;;;
  ;;;; Version
  ;;;
  
  
  (method (get-version)
    (let ((major (get-VersionMajor server))
          (minor (get-VersionMinor server))
          (revision 0))
      (new Version major minor revision)))
          
  
  ;;;
  ;;;; System Types
  ;;;

  
  (method public (get-system-types)
    (define (load-system-types)
      (get-SystemDatatypes database))
    
    (unless system-types
      (set! system-types (load-system-types)))
    system-types)
  
  
  (method public (get-system-type name)
    (Item (get-system-types) name))
  
  
  
  ;;;
  ;;;; Access
  ;;;
  
  
  (method public (get-database)
    database)
  
  
  ;;;
  ;;;; Tables
  ;;;
  
  
  (method (get-tables)
    (with ((tables (get-Tables database)))
      (let ((fact (new List-Factory)))
        (loop (for n from 1 to (get-Count tables))
              (let ((table (Item tables n #f)))
                (if (get-SystemObject table)
                    (com-release table)
                  (put fact (new SQLServer-Inventory-Table self self table)))))
        (get-output fact))))
  
  
  (method (get-table name)
    (with ((tables (get-Tables database)))
      (new SQLServer-Inventory-Table self self (Item tables name #f))))
  
  
  (method (create-table name)
    (let ((new-table (com-create SQLDMO.Table)))
      (put-Name new-table name)
      (new SQLServer-Inventory-Table self self new-table)))
  
  
  (method (append-table table)
    (with ((tables (get-Tables database)))
      (Add tables (get-handle table))))

  
  (method (remove-table name)
    (with ((tables (get-Tables database)))
      (Remove tables name #f)))
  
  
  (method (columns-ordinal-position-consecutive?)
    #f)
  
  
  ;;;
  ;;;; Views
  ;;;
  
  
  (method (get-views)
    (with ((views (get-Views database)))
      (let ((fact (new List-Factory)))
        (loop (for n from 1 to (get-Count views))
              (let ((view (Item views n #f)))
                (if (not (get-SystemObject view))
                    (put fact (new SQLServer-Inventory-View self self view))
                  (com-release view))))
        (get-output fact))))
  
  
  (method (get-view name (error?: error? #t))
    (with ((views (get-Views database)))
      (let* ((action
               (lambda ()
                 (Item views name #f)))
             (view
               (if error?
                   (action)
                 (cotry (action) (Object-Not-Existant #f)))))
        (when view
          (new SQLServer-Inventory-View self self view)))))
  
  
  (method (create-view name)
    (let ((new-view (com-create SQLDMO.View)))
      (put-Name new-view name)
      (new SQLServer-Inventory-View self self new-view)))
  
  
  (method (append-view view)
    (with ((views (get-Views database)))
      (Add views (get-handle view))))
  
  
  (method (remove-view name)
    (with ((views (get-Views database)))
      (Remove views name #f)))
  
  
  ;;;
  ;;;; Relations
  ;;;
  
  
  (method (get-relations)
    (let ((fact (new List-Factory))
          (tables (get-tables)))
      (for-each (lambda (table)
                  (let ((relations (get-table-relations table)))
                    (if relations
                        (put-sequence fact relations)
                      (close table))))
                tables)
      (get-output fact)))
  
  
  (method (create-relation-complete relation-name primary-table primary-fields foreign-table foreign-fields)
    (let ((new-key (com-create SQLDMO.Key)))
      (put-Name new-key relation-name)
      (put-Type new-key SQLDMO.SQLDMOKey_Foreign)
      (with ((columns (get-KeyColumns new-key)))
        (for-each (lambda (field)
                    (Add columns field))
                  foreign-fields))
      (put-ReferencedTable new-key primary-table)
      (with ((columns (get-ReferencedColumns new-key)))
        (for-each (lambda (field)
                    (Add columns field))
                  primary-fields))
      (with ((tables (get-Tables database))
             (foreign-table (Item tables foreign-table #f))
             (foreign-keys (get-Keys foreign-table)))
        (Add foreign-keys new-key))
      (new SQLServer-Inventory-Relation self self new-key)))
  
  
  (method (remove-relation relation-name table-name)
    (with ((tables (get-Tables database))
           (table (Item tables table-name #f))
           (keys (get-Keys table)))
      (Remove keys relation-name)))
  
  
  ;;;
  ;;;; Procedures
  ;;;
  
  @tempo
  (method (create-procedure-by-sql script-create-procedure)
    (let ((marker (tie "~{%}GO~{%}")))
      (when (ends-with? script-create-procedure marker)
        (set! script-create-procedure (subseq script-create-procedure 0
                                                (- (length script-create-procedure) (length marker))))))
    (execute connection script-create-procedure))
  

  (method (get-procedures)
    (with ((procedures (get-StoredProcedures database)))
      (let ((fact (new List-Factory)))
        (loop (for n from 1 to (get-Count procedures))
              (let ((procedure (Item procedures n #f)))
                (if (not (get-SystemObject procedure))
                    (put fact (new SQLServer-Inventory-Procedure self self procedure))
                  (com-release procedure))))
        (get-output fact))))
  
  
  (constant Object-Not-Existant
    #x80045510)
  
  
  (method (get-procedure name (error?: error? #t))
    (with ((procedures (get-StoredProcedures database)))
      (let* ((action
               (lambda ()
                 (Item procedures name #f)))
             (procedure
               (if error?
                   (action)
                 (cotry (action) (Object-Not-Existant #f)))))
        (when procedure
          (new SQLServer-Inventory-Procedure self self procedure)))))


  (method (create-procedure name)
    (let ((new-procedure (com-create SQLDMO.StoredProcedure)))
      (put-Name new-procedure name)
      (new SQLServer-Inventory-Procedure self self new-procedure)))
  
  
  (method (append-procedure procedure)
    (with ((procedures (get-StoredProcedures database)))
      (Add procedures (get-handle procedure))))
  
  
  (method (remove-procedure name)
    (with ((procedures (get-StoredProcedures database)))
      (Remove procedures name #f)))
  
  
  ;;;
  ;;;; Restore
  ;;;
  
  
  (method public (restore-database database backup)
    (with ((restore (com-create SQLDMO.Restore)))
      (put-Database restore database)
      (put-Files restore (parse backup))
      (SQLRestore restore server)))))
