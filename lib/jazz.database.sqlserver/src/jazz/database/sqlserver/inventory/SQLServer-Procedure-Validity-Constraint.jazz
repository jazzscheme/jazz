;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; SQLServer Procedure Validity Constraint
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.database.sqlserver.inventory.SQLServer-Procedure-Validity-Constraint jazz


(import (jazz.database))


(class SQLServer-Procedure-Validity-Constraint extends Integrity-Constraint


  ;;;
  ;;;; Register
  ;;;
  
  
  (method meta (register-constraints manager)
    @commented-because-this-refers-to-metascoop-classes-metamodeler-to-convert
    (register-constraint manager (new self) Design-Procedure))


  ;;;
  ;;;; Validate
  ;;;
  
  
  (method (validate procedure architecture client context manager)
    (define (ends-with-go? text)
      (let ((last-non-white (find-if (lambda (c) (not (whitespace? c))) text reversed?: #t return: 'position)))
        (and last-non-white
             (>= last-non-white 1)
             (ci=? (subseq text (- last-non-white 1) (+ last-non-white 1)) "GO"))))
    
    @commented-because-this-refers-to-metascoop-classes-metamodeler-to-convert
    (let* ((name (get-name procedure))
           (text (get-text procedure))
           (architecture (find-ascendant procedure Design-Architecture))
           (schema (get-schema architecture (get-schema procedure))))
      (when (and (is? schema SQLServer-Design-Schema)
                 (ends-with-go? text))
        (add-violation manager (new Integrity-Violation message: "Procedure is terminated by GO" property: 'text) procedure architecture client)
      'stop-descent)))))
