;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; SQLServer Provider
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.database.sqlserver.inventory.SQLServer-Provider jazz


(import (jazz.database))


(class SQLServer-Provider extends Provider
  
  
  (method override (external-name self)
    'sqlserver)
  
  
  ;;;
  ;;;; Datatypes
  ;;;
  
  
  @convert
  (method (get-datatype)
    SQLServer-Datatype)
  
  
  ;;;
  ;;;; Features
  ;;;
  
  
  (method override (supports-multirequests? self)
    #t)
  
  
  ;;;
  ;;;; Value
  ;;;
  
  
  @convert
  (method (format-variable variable)
    (format "@{a}" variable))
  
  
  ;;;
  ;;;; Presentation
  ;;;
  
  
  (method override (present self)
    "SQLServer")
  
  
  ;;;
  ;;;; Servers
  ;;;
  
  
  @convert
  (method public (get-server-names)
    (with-cursor :wait
      (lambda ()
        (with ((application (com-create SQLDMO.Application error?: #f)))
          (if (null? application)
              (begin
                (message-box "SQLServer is not installed on this machine")
                '())
            (with ((name-list (and application (ListAvailableSQLServers application))))
              (loop (for n from 1 to (get-Count name-list))
                    (collect (Item name-list n)))))))))
  
  
  @convert
  (method public (server-names-for-combo)
    (let ((names (get-server-names)))
      (cons (list "(local)") (map list (remove "(local)" names test: equal?)))))
  
  
  @convert
  (method public (server-names-choices-updater combo)
    (set-choices combo (server-names-for-combo))
    #t)
  
  
  ;;;
  ;;;; Browser
  ;;;
  
  
  @convert
  (method (browser-class)
    SQLServer-Widget)
  
  
  ;;;
  ;;;; Updater
  ;;;
  
  
  @convert
  (method (new-updater connection)
    (new SQLServer-Inventory-Updater connection))))
