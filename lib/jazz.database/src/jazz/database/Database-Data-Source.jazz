(module protected jazz.database.Database-Data-Source jazz


(import (jazz.schema)
        (jazz.database.ado (cond windows))
        (jazz.database.odbc))


(class Database-Data-Source extends Data-Source
  
  
  (property backend initialize 'adodb accessors generate)
  
  
  (method override (finish rest)
    (nextmethod rest)
    (unless (memq? backend (valid-backends))
      (error "Invalid backend for {a} : {a}" (class-of self) backend)))
  
  
  ;;;
  ;;;; Backends
  ;;;
  
  
  (method virtual (valid-backends)
    '(odbc adodb))
  
  
  ;;;
  ;;;; Connection
  ;;;
  
  
  (cond-expand
    (windows
      (method override (new-connection)
        (case backend
          ((adodb)
           (new ADO-Connection self))
          ((odbc)
           (new ODBC-Connection self))
          (else
           (error "Unsupported backend {a}" backend)))))
    (else
     (method override (new-connection)
       (case backend
         ((odbc)
          (new ODBC-Connection self))
         (else
          (error "Unsupported backend {a}" backend))))))
  
  
  ;;;
  ;;;; Post-Processing
  ;;;
  
  
  (method virtual (convert-symbolic-sql symbolic-sql)
    (error "Could not convert symbolic sql {a}" symbolic-sql))
  
  
  (method public (post-process-request request)
    (declare (proper-tail-calls))
    (let ((input (open-input-string request))
          (output (open-output-string)))
      (let (loop (in-quotes? #f))
        (let ((c (read-char input)))
          (cond ((eof-object? c)
                 (get-output-string output))
                ((and (eq? c #\@) (not in-quotes?))
                 (let* ((sql (string (read-char input) (read-char input) (read-char input)))
                        (result (if (string=? sql "sql")
                                    (convert-symbolic-sql (read input))
                                  sql)))
                   (display result output)
                   (loop in-quotes?)))
                ((and (eq? c #\') in-quotes?)
                 (let ((c1 (read-char input)))
                   (write-char c output)
                   (if (eof-object? c1)
                       (loop #f)
                     (let ((in-quotes? (eq? c1 #\')))
                       (write-char c1 output)
                       (loop in-quotes?)))))
                ((eq? c #\')
                 (write-char c output)
                 (loop #t))
                (else
                 (write-char c output)
                 (loop in-quotes?)))))))))