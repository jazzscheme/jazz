;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Database
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module jazz.database jazz


(hub browser-class)
(hub columns-ordinal-position-consecutive?)
(hub create-or-modify-constraint)
(hub create-or-modify-trigger)
(hub execute)
(hub external-name)
(hub get-allow-zero-length?)
(hub get-auto-increment?)
(hub get-checked?)
(hub get-clustered?)
(hub get-column)
(hub get-columns)
(hub get-connect)
(hub get-connection)
(hub get-constraints)
(hub get-count)
(hub get-data-source)
(hub get-datatype)
(hub get-default-value)
(hub get-defaultable?)
(hub get-delete-cascade?)
(hub get-description)
(hub get-display-format)
(hub get-empty-text)
(hub get-exclude-replication?)
(hub get-fields)
(hub get-fields/orders)
(hub get-fill-factor)
(hub get-foreign-field-names)
(hub get-foreign-table)
(hub get-handle)
(hub get-identity-increment)
(hub get-identity-replication?)
(hub get-identity-seed)
(hub get-identity?)
(hub get-ignore-duplicates?)
(hub get-index)
(hub get-indexes)
(hub get-inventory)
(hub get-left?)
(hub get-linked?)
(hub get-name)
(hub get-nullable?)
(hub get-order)
(hub get-ordinal-position)
(hub get-owner)
(hub get-pad-index?)
(hub get-parent)
(hub get-precision)
(hub get-precisionable?)
(hub get-primary-field-names)
(hub get-primary-key)
(hub get-primary-table)
(hub get-procedure)
(hub get-procedures)
(hub get-provider)
(hub get-recompute-statistics?)
(hub get-relations)
(hub get-right?)
(hub get-rows)
(hub get-scalable?)
(hub get-scale)
(hub get-schema)
(hub get-size)
(hub get-sizeable?)
(hub get-source)
(hub get-source-table-name)
(hub get-state)
(hub get-table)
(hub get-tables)
(hub get-text)
(hub get-title)
(hub get-triggers)
(hub get-type)
(hub get-unique?)
(hub get-update-cascade?)
(hub get-validation-rule)
(hub get-validation-text)
(hub get-version)
(hub get-view)
(hub get-views)
(hub load-multirequest)
(hub load-request)
(hub load-rows)
(hub load-table)
(hub new-request)
(hub next-recordset!)
(hub on-close)
(hub open)
(hub opened?)
(hub post-process-request)
(hub present)
(hub remove-view)
(hub set-checked?)
(hub set-data-source)
(hub set-default-focus)
(hub set-exclude-replication?)
(hub set-provider)
(hub set-scale)
(hub set-size)
(hub set-source)
(hub set-text)
(hub setup-username/password-mode)
(hub supports-multirequests?)
(hub with-transaction)


(export (jazz.database.autoload))


;;;
;;;; Providers
;;;


(definition Providers
  (make-table test: eq?))


(definition public (register-provider provider)
  (let ((name (external-name provider)))
    (table-set! Providers name provider)))


(definition public (registered-provider name)
  (or (table-ref Providers name #f)
      (error "Unknown provider: {a}" name)))


(definition public (get-providers)
  (gather Providers))


;;;
;;;; Datatypes
;;;


(definition Datatypes
  '(Access-Datatype Oracle-Datatype SQLServer-Datatype))

(definition Datatype-Classes
  '())


(definition public (get-datatypes)
  (unless Datatype-Classes
    (set! Datatype-Classes (map load Datatypes)))
  Datatype-Classes)


;;;
;;;; Data Source
;;;


@convert
(definition public undocumented (request-data-source (provider: provider #f))
  (receive (process? dialog) (new-dialog jazz.database.Data-Source-Chooser host-visible?: #f)
    (let ((manager (get-guest dialog)))
      (when provider
        (set-provider manager (external-name provider)))
      (process-modal dialog)))))
