;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Database Connections
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.database.connection.Connection jazz


(import (jazz.database))


(class Connection extends Object
  
  
  (slot data-source initialize {} getter generate)
  (slot inventory   initialize {})
  
  
  (method override (initialize data-source . rest)
    (nextmethod)
    (setup-connection)
    (apply open data-source rest)
    (destroy-mandatory))
  
  
  (method virtual (setup-connection)
    )
  
  
  (method override (destroy)
    (destroy-connection)
    (nextmethod))
  
  
  (method virtual (destroy-connection)
    (when inventory
      (close~ inventory)
      (set! inventory {}))
    (set! data-source {}))
  
  
  (method override (print printer readably)
    (print-unreadable self printer
      (lambda (printer)
        (when data-source
          (format printer "{s}" (get-connection-string~ data-source))))))
  
  
  ;;;
  ;;;; Access
  ;;;
  
  
  (method public (get-inventory . rest)
    (either inventory (apply reload-inventory rest)))
  
  
  (method public (reload-inventory . rest)
    (when data-source
      (set! inventory (apply (~ new-inventory data-source) self rest))))
  
  
  ;;;
  ;;;; Open
  ;;;
  
  
  (method virtual (open data-source . rest)
    (set! data-source~self data-source))
  
  
  ;;;
  ;;;; State
  ;;;
  
  
  (method public virtual (get-state)
    )
  
  
  ;;;
  ;;;; Request
  ;;;
  
  
  (method public virtual (new-request)
    )
  
  
  (method public virtual (supports-multirequests?)
    #f
    @convert
    (supports-multirequests?~ (get-provider~ data-source)))
  
  
  ;;;
  ;;;; Load
  ;;;
  
  
  (method public virtual (load-request command (name: name {}) (max-load: max-load #t) (data-class: data-class {}))
    (with-closed ((request (new-request)))
      (load-request~ request command name: name max-load: max-load data-class: data-class)))
  
  
  (method public virtual (load-multirequest command (max-load: max-load #t) (data-classes: data-classes '()))
    (with-closed ((request (new-request)))
      (load-multirequest~ request command max-load: max-load data-classes: data-classes)))
  
  
  (method public virtual (load-rows command)
    (get-rows~ (load-request command)))
  
  
  (method public virtual (load-row command)
    (let ((rows (load-rows command)))
      (assert (= 1 (length rows)))
      (car rows)))
  
  
  (method public (load-value command column)
    (let ((rows (load-rows command)))
      (assert (= 1 (length rows)))
      (get~ (car rows) column)))
  
  
  (method public (load-values command column)
    (map (lambda (row)
           (get~ row column))
         (load-rows command)))
  
  
  ;;;
  ;;;; Execute
  ;;;
  
  
  (method public virtual (execute command)
    )
  
  
  (method public virtual (comment string . parameters)
    )
  
  
  ;;;
  ;;;; Transaction
  ;;;
  
  
  (method public virtual (begin-transaction)
    )
  
  
  (method public virtual (commit-transaction)
    )
  
  
  (method public virtual (rollback-transaction)
    )
  
  
  (method public (with-transaction proc)
    (let ((started? #f)
          (completed? #f))
      (unwind-protect
          (begin
            (begin-transaction)
            (set! started? #t)
            (proc)
            (set! completed? #t))
        (when started?
          (if completed?
              (commit-transaction)
            (rollback-transaction))))))))
