;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Database Connections
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.database.connection.Connection jazz


(import (jazz.database)
        (jazz.schema))


(class Connection extends Object
  
  
  (slot data-source initialize #f getter generate)
  (slot inventory   initialize #f)
  
  
  (method override (initialize self data-source . rest)
    (nextmethod self)
    (setup-connection self)
    (apply open self data-source rest)
    (allocated self))
  
  
  (method virtual (setup-connection self)
    )
  
  
  (method override (destroy self)
    (destroy-connection self)
    (freed self)
    (nextmethod self))
  
  
  (method virtual (destroy-connection self)
    (when inventory
      (close inventory)
      (set! inventory #f))
    (set! data-source #f))
  
  
  (method override (print self output readably)
    (print-unreadable self output
      (lambda (output)
        (when data-source
          (format output "{s}" (get-connection-string data-source))))))
  
  
  ;;;
  ;;;; Access
  ;;;
  
  
  (method public (get-inventory self . rest)
    (or inventory (apply reload-inventory self rest)))
  
  
  (method public (reload-inventory self . rest)
    (when data-source
      (set! inventory (apply new-inventory data-source self rest))))
  
  
  ;;;
  ;;;; Open
  ;;;
  
  
  (method package virtual (open self data-source . rest)
    (set! self.data-source data-source))
  
  
  ;;;
  ;;;; State
  ;;;
  
  
  (method public virtual (get-state self)
    )
  
  
  ;;;
  ;;;; Request
  ;;;
  
  
  (method public virtual (new-request self)
    )
  
  
  (method public virtual (supports-multirequests? self)
    (supports-multirequests? (get-provider data-source)))
  
  
  ;;;
  ;;;; Load
  ;;;
  
  
  (method public virtual (load-request self command (name: name #f) (max-load: max-load #t) (data-class: data-class #f))
    (let ((command (post-process-request data-source command)))
      (with ((request (new-request self)))
        (load-request request command name: name max-load: max-load data-class: data-class))))
  
  
  (method public virtual (load-multirequest self command (max-load: max-load #t) (data-classes: data-classes '()))
    (let ((command (post-process-request data-source command)))
      (with ((request (new-request self)))
        (load-multirequest request command max-load: max-load data-classes: data-classes))))
  
  
  (method public virtual (load-rows self command)
    (get-rows (load-request self command)))
  
  
  (method public virtual (load-row self command)
    (let ((rows (load-rows self command)))
      (assert (= 1 (length rows)))
      (car rows)))
  
  
  (method public (load-value self command column)
    (let ((rows (load-rows self command)))
      (assert (= 1 (length rows)))
      (get (car rows) column)))
  
  
  (method public (load-values self command column)
    (map (lambda (row)
           (get row column))
         (load-rows self command)))
  
  
  ;;;
  ;;;; Execute
  ;;;
  
  
  (method public virtual (execute self command)
    )
  
  
  (method public virtual (comment self string . parameters)
    )
  
  
  ;;;
  ;;;; Transaction
  ;;;
  
  
  (method public virtual (begin-transaction self)
    )
  
  
  (method public virtual (commit-transaction self)
    )
  
  
  (method public virtual (rollback-transaction self)
    )
  
  
  (method public (with-transaction self proc)
    (let ((started? #f)
          (completed? #f))
      (unwind-protect
          (begin
            (begin-transaction self)
            (set! started? #t)
            (prog1 (proc)
              (set! completed? #t)))
        (when started?
          (if completed?
              (commit-transaction self)
            (rollback-transaction self))))))))
