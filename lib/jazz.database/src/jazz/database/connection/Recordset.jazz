;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Database Recordsets
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.database.connection.Recordset jazz


(import (jazz.database)
        (jazz.schema))


(class Recordset extends Object
  
  
  (method override (initialize self command . rest)
    (nextmethod self)
    (setup-recordset self rest)
    (when command
      (apply open self command rest))
    (allocated self))
  
  
  (method virtual (setup-recordset self initargs)
    )
  
  
  (method override (destroy self)
    (destroy-recordset self)
    (freed self)
    (nextmethod self))
  
  
  (method virtual (destroy-recordset self)
    )
  
  
  ;;;
  ;;;; Open
  ;;;
  
  
  (method public virtual (opened? self)
    )
  
  
  (method package virtual (open self command . rest)
    )
  
  
  ;;;
  ;;;; State
  ;;;
  
  
  (method public virtual (get-state self)
    )
  
  
  ;;;
  ;;;; Metadata
  ;;;
  
  
  (method public virtual (new-recordset-metadata self)
    )
  
  
  (method public virtual (get-field-type self metadata field)
    )
  
  
  (method public virtual (get-field-value self metadata field)
    )
  
  
  (method public virtual (safe-field-value self metadata field)
    (get-field-value self metadata field))
  
  
  ;;;
  ;;;; Recordsets
  ;;;
  
  
  (method public virtual (next-recordset! self)
    )
  
  
  ;;;
  ;;;; Data
  ;;;
  
  
  (method public virtual (get-columns self)
    (with ((metadata (new-recordset-metadata self)))
      (let ((count (get-count metadata)))
        (map (lambda (n)
               (get-column metadata n))
             (naturals 0 count)))))
  
  
  (method public virtual (get-rows self table (max-load: max-load #t) (data-class: data-class #f))
    (with ((metadata (new-recordset-metadata self))
           (fields (get-fields metadata)))
      (let ((fact (new List-Factory))
            (count 0)
            (has-more? #f))
        (iterate-records self
          (lambda ()
            (when (or (eq? max-load #t) (<= count max-load))
              (if (and (neq? max-load #t) (= count max-load))
                  (begin
                    (set! has-more? #t)
                    #f)
                (let ((values (map (lambda (field)
                                     (safe-field-value self metadata field))
                                   fields)))
                  (put fact (if (not data-class)
                                 (new Data-Row table #f values)
                               (new data-class table #f values)))
                  (increase! count)
                  #t)))))
        (let ((rows (get-output fact))
              (missing? has-more?))
          (values rows missing?)))))
  
  
  ;;;
  ;;;; Records
  ;;;
  
  
  (method public virtual (move-first self)
    )
  
  
  (method public virtual (move-last self)
    )
  
  
  (method public virtual (move-next self)
    )
  
  
  (method public virtual (move-previous self)
    )
  
  
  (method public virtual (at-bof? self)
    )
  
  
  (method public virtual (at-eof? self)
    )
  
  
  (method public virtual (iterate-records self proc)
    )
  
  
  (method public virtual (for-each-record self proc)
    (iterate-records self
      (lambda ()
        (proc)
        #t)))
  
  
  ;;;
  ;;;; Table
  ;;;
  
  
  (method public (create-table self (name: name #f) (max-load: max-load #t))
    (let ((table (new Data-Table name: name)))
      (load-table self table max-load: max-load)
      table))
  
  
  (method package (load-table self table (max-load: max-load #t) (data-class: data-class #f))
    (let ((columns (get-columns self)))
      (receive (rows missing?) (get-rows self table max-load: max-load data-class: data-class)
        (set-columns table columns)
        (set-rows table rows)
        (set-missing? table missing?))))))
