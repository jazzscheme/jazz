;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Datatype Row
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.database.designer.Datatype-Row jazz


(import (jazz.designer)
        (jazz.designer.ui)
        (jazz.text))


(class undocumented Datatype-Row extends Combo-Row)


@old
(class undocumented Datatype-Row extends Combo-Row


  (property datatype-class          initialize #f accessors generate)
  (property allow-partial-datatype? initialize #f accessors generate)
  
  
  (slot systypes)


  ;;;
  ;;;; Initialization
  ;;;


  (method override (initialize . rest)
    (bind-keywords ((datatype-class #f) (unavailable-systypes-message #f) (allow-partial-datatype? #f) . others) rest
      (apply nextmethod others)
      (set! self.datatype-class datatype-class)
      (set! self.allow-partial-datatype? allow-partial-datatype?)
      (set! self.systypes (and datatype-class (get-systypes datatype-class)))
      (setup systypes unavailable-systypes-message)))
  
  
  (method (setup systypes unavailable-systypes-message)
    (if (null? systypes)
        (set-choices-updater
          (lambda (combo)
            (message-box unavailable-systypes-message)
            (set-choices '())
            #t))
      (set-choices (map (lambda (systype) (list systype (present-format systype (get-name systype)))) systypes))))

  
  ;;;
  ;;;; Presentation
  ;;;
  
  
  (method override (present type)
    (if (null? type)
        "{}"
      (present type)))
  
  
  ;;;
  ;;;; Edition
  ;;;
  
  
  (method override (editor-class)
    Datatype-Row-Editor)
  
  
  (method override (get-edited-value)
    (let* ((string (get-content editor))
           (parsed (parse-content string)))
      (when parsed
        (receive (name size precision scale) parsed
          (new (or datatype-class Datatype) name size precision scale)))))
  
  
  (method override (set-edited-value value)
    (set-content editor (present value)))
  
  
  (definition (read-content content)
    (collect-if (lambda (string)
                  (not (empty-string? string)))
                (parse-strings (substitute #\comma #\space content) separator: " ")))
  
  
  (method (parse-content string)
    (define (parse-fixed name)
      (let ((systype (parse-systype name)))
        (if (and (not allow-partial-datatype?) systype
              (or (get-sizeable? systype) (get-precisionable? systype)))
            (parse-error (present-format systype name))
          (values name #f #f #f))))
    
    (define (parse-variable list)
      (bind (name precision) list
        (let ((systype (parse-systype name)))
          (cond ((get-sizeable? systype)
                 (values name (parse-integer precision) #f #f))
                ((and (get-precisionable? systype) allow-partial-datatype?)
                 (values name #f (parse-integer precision) #f))
                (else
                 (parse-error (present-format systype name)))))))
    
    (define (parse-decimal list)
      (bind (name precision scale) list
        (let ((systype (parse-systype name)))
          (if (and systype (get-precisionable? systype) (get-scalable? systype))
              (values name #f (parse-integer precision) (parse-integer scale))
            (parse-error (present-format systype name))))))
    
    (define (parse-systype name)
      (when datatype-class
        (or (find-systype datatype-class name)
            (parse-error (format "Invalid value: {a}" name)))))
    
    (define (parse-error message)
      (signal (new Parse-Error message: (format "Datatype syntax: {a}" message))))
    
    (let ((content (read-content string)))
      (case (length content)
        ((0) #f)
        ((1) (parse-fixed (car content)))
        ((2) (parse-variable content))
        ((3) (parse-decimal content))
        (else
         (let* ((name (car content))
                (systype (parse-systype name)))
           (if (null? systype)
               (parse-error (format "Datatype {a} invalid" name))
             (parse-error (present-format systype name))))))))
  
  
  (method (present-format systype name)
    (if allow-partial-datatype?
        (cond ((get-precisionable? systype) (format "{a} [precision scale]" name))
              ((get-sizeable? systype) (format "{a} size" name))
              ((get-fixed? systype) (format "{a}" name)))
      (cond ((get-precisionable? systype) (format "{a} precision scale" name))
            ((get-sizeable? systype) (format "{a} size" name))
            ((get-fixed? systype) (format "{a}" name))))))


;;;
;;;; Editor
;;;


(class Datatype-Row-Editor extends Combo-Row-Editor
  
  
  (method override (content-change self origin)
    (unless (eq? origin 'popup)
      (nextmethod self origin)))
  
  
  (method override (combo-choice self)
    )
  
  
  (method override (get-entry self)
    (let ((content (read-content value-row (get-content self))))
      (when content
        (car content))))
  
  
  (method override (set-entry self entry)
    (let ((actual (read-content value-row (get-content self)))
          (entry (car (parse-strings entry separator: " "))))
      (set-content self (join (cons entry (cdr actual)) " "))))))
