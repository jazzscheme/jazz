;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Datatype Row
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library protected jazz.database.designer.Datatype-Row jazz


(import (jazz.designer)
        (jazz.schema)
        (jazz.ui.view))


(class undocumented Datatype-Row extends Combo-Row


  (property datatype-class          initialize {} accessors generate)
  (property allow-partial-datatype? initialize #f accessors generate)
  
  
  (slot systypes)


  ;;;
  ;;;; Initialization
  ;;;


  (method (initialize . rest)
    (bind-keywords ((datatype-class {}) (unavailable-systypes-message {}) (allow-partial-datatype? #f) . others) rest
      (apply nextmethod others)
      (set! datatype-class~self datatype-class)
      (set! allow-partial-datatype?~self allow-partial-datatype?)
      (set! systypes~self (essay datatype-class (get-systypes~ datatype-class)))
      (setup systypes unavailable-systypes-message)))
  
  
  (method (setup systypes unavailable-systypes-message)
    (if (null? systypes)
        (set-choices-updater
          (function (combo)
            (message-box unavailable-systypes-message)
            (set-choices '())
            #t))
      (set-choices (map (function (systype) (list systype (present-format systype (get-name~ systype)))) systypes))))

  
  ;;;
  ;;;; Presentation
  ;;;
  
  
  (method (present type)
    (if (null? type)
        "{}"
      (present~ type)))
  
  
  ;;;
  ;;;; Edition
  ;;;
  
  
  (method (editor-class)
    Datatype-Row-Editor)
  
  
  (method (get-edited-value)
    (let* ((string (get-content~ editor))
           (parsed (parse-content string)))
      (when parsed
        (receive (name size precision scale) parsed
          (new (either datatype-class Datatype) name size precision scale)))))
  
  
  (method (set-edited-value value)
    (set-content~ editor (present value)))
  
  
  (method (read-content content)
    (collect-if (function (string)
                  (not (empty-string? string)))
                (parse-strings (substitute #\comma #\space content) separator: " ")))
  
  
  (method (parse-content string)
    (let ((content (read-content string)))
      (case (length content)
        ((0) {})
        ((1) (parse-fixed (car content)))
        ((2) (parse-variable content))
        ((3) (parse-decimal content))
        (else
         (let* ((name (car content))
                (systype (parse-systype name)))
           (if (null? systype)
               (parse-error (format "Datatype {a} invalid" name))
             (parse-error (present-format systype name))))))))
  
  
  (method (present-format systype name)
    (if allow-partial-datatype?
        (cond
         ((get-precisionable?~ systype) (format "{a} [precision scale]" name))
         ((get-sizeable?~ systype) (format "{a} size" name))
         ((get-fixed?~ systype) (format "{a}" name)))
      (cond
       ((get-precisionable?~ systype) (format "{a} precision scale" name))
       ((get-sizeable?~ systype) (format "{a} size" name))
       ((get-fixed?~ systype) (format "{a}" name)))))
  
  
  (method (parse-fixed name)
    (let ((systype (parse-systype name)))
      (if (and (not allow-partial-datatype?) systype
               (or (get-sizeable?~ systype) (get-precisionable?~ systype)))
          (parse-error (present-format systype name))
        (values name {} {} {}))))
  
  
  (method (parse-variable list)
    (bind (name precision) list
      (let ((systype (parse-systype name)))
        (cond
         ((get-sizeable?~ systype)
          (values name (parse-integer precision) {} {}))
         ((and (get-precisionable?~ systype) allow-partial-datatype?)
          (values name {} (parse-integer precision) {}))
         (else
          (parse-error (present-format systype name)))))))
  
  
  (method (parse-decimal list)
    (bind (name precision scale) list
      (let ((systype (parse-systype name)))
        (if (and systype (get-precisionable?~ systype) (get-scalable?~ systype))
            (values name {} (parse-integer precision) (parse-integer scale))
          (parse-error (present-format systype name))))))

  
  (method (parse-systype name)
    (when datatype-class
      (either (find-systype~ datatype-class name)
              (parse-error (format "Invalid value: {a}" name)))))
  
  
  (method (parse-error message)
    (signal (new Parse-Error message: (format "Datatype syntax: {a}" message)))))


;;;
;;;; Editor
;;;


(class Datatype-Row-Editor extends Combo-Row-Editor
  
  
  (method (content-change origin)
    (unless (eq? origin 'popup)
      (nextmethod origin)))
  
  
  (method (combo-choice)
    )
  
  
  (method (get-entry)
    (let ((content (read-content~ value-row (get-content))))
      (when content
        (car content))))
  
  
  (method (set-entry entry)
    (let ((actual (read-content~ value-row (get-content)))
          (entry (car (parse-strings entry separator: " "))))
      (set-content (join (cons entry (cdr actual)) " "))))))
