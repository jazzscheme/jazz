;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Inventory Table
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.database.inventory.Inventory-Table jazz


(import (jazz.database))


(class Inventory-Table extends Object
  
  
  (slot inventory getter generate)
  (slot parent    getter generate)
  
  
  (method override (initialize self inventory parent)
    (nextmethod self)
    (set! self.inventory inventory)
    (set! self.parent parent))
  
  
  ;;;
  ;;;; Database
  ;;;
  
  
  (method public virtual (get-owner self)
    )
  
  
  (method public virtual (set-owner self value)
    )
  
  
  (method public virtual (get-name self)
    )
  
  
  (method public virtual (get-title self)
    )
  
  
  (method public virtual (get-linked? self)
    #f)
  
  
  (method public virtual (get-connect self)
    #f)
  
  
  (method public virtual (set-connect self value)
    )
  
  
  (method public virtual (get-source-table-name self)
    #f)
  
  
  (method public virtual (set-source-table-name self value)
    )
  
  
  (method public virtual (get-validation-rule self)
    #f)
  
  
  (method public virtual (set-validation-rule self value)
    )
  
  
  (method public virtual (get-validation-text self)
    #f)
  
  
  (method public virtual (set-validation-text self value)
    )
  
  
  (method public virtual (get-description self)
    #f)
  
  
  (method public virtual (set-description self value)
    )
  
  
  ;;;
  ;;;; Keys
  ;;;
  
  
  (method public virtual (get-primary-key self)
    #f)
  
  
  (method public virtual (create-primary-key self name fields/orders)
    )
  
  
  (method public virtual (remove-primary-key self name)
    )
  
  
  (method public virtual (append-primary-key self primary-key)
    )
  
  
  ;;;
  ;;;; Columns
  ;;;
  
  
  (method public virtual (get-columns self)
    '())
  
  
  (method public virtual (get-column self name)
    #f)
  
  
  (method public virtual (create-column self name)
    )

  
  (method public virtual (append-column self column)
    )

  
  (method public virtual (remove-column self name)
    )
  
  
  ;;;
  ;;;; Indexes
  ;;;
  
  
  (method public virtual (get-indexes self)
    '())
  
  
  (method public virtual (get-index self name)
    #f)
  
  
  (method public virtual (create-index self name)
    )

  
  (method public virtual (append-index self index)
    )

  
  (method public virtual (remove-index self name)
    )
  
  
  ;;;
  ;;;; Triggers
  ;;;
  
  
  (method public virtual (create-or-modify-trigger self name text)
    (with ((trigger (get-trigger self name error?: #f)))
      (when trigger
        (remove-trigger self name))
      (with ((new-trigger (create-trigger self name)))
        (set-text new-trigger text)
        (append-trigger self new-trigger))))
  

  (method public virtual (get-triggers self)
    '())
  
  
  (method public virtual (get-trigger self name . rest)
    #f)
  
  
  (method public virtual (create-trigger self name)
    )
  
  
  (method public virtual (append-trigger self trigger)
    )
  
  
  (method public virtual (remove-trigger self name)
    )
  
  
  ;;;
  ;;;; Constraints
  ;;;
  
  
  (method public virtual (create-or-modify-constraint self name text checked? exclude-replication?)
    (with ((constraint (get-constraint self name error?: #f)))
      (when constraint
        (remove-constraint self name))
      (with ((new-constraint (create-constraint self name)))
        (set-text new-constraint text)
        (set-exclude-replication? new-constraint exclude-replication?)
        (append-constraint self new-constraint)
        (set-checked? new-constraint checked?))))
  
  
  (method public virtual (get-constraints self)
    '())
  
  
  (method public virtual (get-constraint self name . rest)
    #f)
  
  
  (method public virtual (create-constraint self name)
    )
  
  
  (method public virtual (append-constraint self constraint)
    )
  
  
  (method public virtual (remove-constraint self name)
    )
  
  
  ;;;
  ;;;; Properties
  ;;;
  
  
  (method public virtual (get-text-file-group self)
    )
  
  
  (method public virtual (set-text-file-group self value)
    )
  
  
  (method public virtual (get-file-group self)
    )
  
  
  (method public virtual (set-file-group self value)
    )))
