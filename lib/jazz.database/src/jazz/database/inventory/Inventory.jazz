;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Database Inventory
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.database.inventory.Inventory jazz


(import (jazz.database))


(class Inventory extends Object
  
  
  (slot connection getter generate)
  
  
  (method override (initialize self conn)
    (nextmethod self)
    (set! connection conn)
    (allocated connection))
  
  
  (method override (destroy self)
    (close connection)
    (freed connection)
    (nextmethod self))
  
  
  ;;;
  ;;;; Version
  ;;;
  
  
  (method public virtual (get-version self)
    )
  
  
  ;;;
  ;;;; Database
  ;;;
  
  
  (method public virtual (type-connection-string self)
    )
  
  
  ;;;
  ;;;; Tables
  ;;;
  
  
  (method public virtual (get-tables self)
    '())
  
  
  (method public virtual (get-table self name)
    #f)
  
  
  (method public virtual (create-table self name)
    )
  
  
  (method public virtual (append-table self table)
    )
  
  
  (method public virtual (remove-table self name)
    )
  
  
  (method public virtual (columns-ordinal-position-consecutive? self)
    #t)
  
  
  (method public virtual (column-supports-property? self object property)
    #t)
  
  
  ;;;
  ;;;; Views
  ;;;
  
  
  (method public virtual (create-or-modify-view self name text)
    (with ((view (get-view self name error?: #f)))
      (when view
        (remove-view self name))
      (with ((new-view (create-view self name)))
        (set-text new-view text)
        (append-view self new-view))))
  
  
  (method public virtual (get-views self)
    '())
  
  
  (method public virtual (get-view self name . rest)
    #f)
  
  
  (method public virtual (create-view self name)
    )
  
  
  (method public virtual (append-view self view)
    )
  
  
  (method public virtual (remove-view self name)
    )
  
  
  ;;;
  ;;;; Relations
  ;;;
  
  
  (method public virtual (get-relations self)
    '())
  
  
  (method public virtual (get-relation self name)
    #f)
  
  
  (method public virtual (create-relation self name)
    )
  
  
  (method public virtual (create-relation-complete self name primary-table primary-fields foreign-table foreign-fields)
    )
  
  
  (method public virtual (append-relation self new-relation)
    )
  
  
  (method public virtual (remove-relation self relation-name)
    )
  
  
  ;;;
  ;;;; Procedures
  ;;;
  
  
  (method public virtual (create-or-modify-procedure self name text)
    (with ((procedure (get-procedure self name error?: #f)))
      (when procedure
        (remove-procedure self name))
      (with ((new-procedure (create-procedure self name)))
        (set-text new-procedure text)
        (append-procedure self new-procedure))))
  
  
  (method public virtual (get-procedures self)
    '())
  
  
  (method public virtual (get-procedure self name . rest)
    #f)
  
  
  (method public virtual (create-procedure self name)
    )
  
  
  (method public virtual (append-procedure self procedure)
    )
  
  
  (method public virtual (remove-procedure self name)
    )
  
  
  ;;;
  ;;;; Misc
  ;;;
  
  
  (method public virtual (create-or-modify-trigger self table-name trigger-name text)
    (let ((table (get-table self table-name)))
      (create-or-modify-trigger table trigger-name text)))
  
  
  (method public virtual (create-or-modify-constraint self table-name constraint-name text checked? exclude-replication?)
    (let ((table (get-table self table-name)))
      (create-or-modify-constraint table constraint-name text checked? exclude-replication?)))))
