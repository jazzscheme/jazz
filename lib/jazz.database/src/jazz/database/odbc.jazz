(module jazz.database.odbc jazz


(import (jazz.database)
        (jazz.platform.odbc)
        (jazz.schema))


;;;
;;;; ODBC Connection
;;;


@need-to-convert
(class ODBC-DBase-Data-Source extends ODBC-Data-Source
  
  
  (property directory initialize #f accessors generate)
  
  
  (method override (get-connection-string)
    (format "driver=~{Microsoft dBASE Driver (*.dbf)~};DriverID=277;Dbq={a}" directory)))


;; some platforms are missing sql.h
(cond-expand
  (windows
(class ODBC-Connection extends Connection
  
  
  (slot henv accessors generate)
  (slot hdbc accessors generate)
  
  
  (method override (setup-connection)
    (nextmethod)
    (set! henv (SQLAllocHandleStd SQL_HANDLE_ENV #f))
    (set! hdbc (SQLAllocHandleStd SQL_HANDLE_DBC henv)))
  
  
  (method override (destroy-connection)
    (SQLDisconnect hdbc)
    (SQLFreeHandle SQL_HANDLE_DBC hdbc)
    (SQLFreeHandle SQL_HANDLE_ENV henv)
    (nextmethod))
  
  
  (method override (open data-source . rest)
    (let ((connection-string (get-connection-string~ data-source)))
      (SQLDriverConnect hdbc connection-string))
    (nextmethod data-source))
  
  
  (method (resultset->Data-Table resultset)
    (let ((table (new Data-Table)))
      (set-columns~ table (map (lambda (name)
                                 (new Data-Column name: name))
                               (vector->list (first resultset))))
      (set-rows~ table
        (map (lambda (vector)
               (new Data-Row table #f (vector->list vector)))
             (second resultset)))))
  
  
  (method override (begin-transaction)
    (SQLSetConnectAttr hdbc SQL_ATTR_AUTOCOMMIT 0 0))
  
  
  (method override (commit-transaction)
    (SQLEndTran SQL_HANDLE_DBC hdbc SQL_COMMIT)
    (SQLSetConnectAttr hdbc SQL_ATTR_AUTOCOMMIT 1 0))
  
  
  (method override (rollback-transaction)
    (SQLEndTran SQL_HANDLE_DBC hdbc SQL_ROLLBACK)
    (SQLSetConnectAttr hdbc SQL_ATTR_AUTOCOMMIT 1 0))
  
  
  (method override (execute request)
    (with ((statement (new ODBC-Statement self (post-process-request~ data-source request))))
      (execute~ statement)))
  
  
  (method override (load-request request (convert?: convert? #t))
    (define (autoconvert resultset)
      (if convert?
          (resultset->Data-Table resultset)
        resultset))
    
    (autoconvert (let ((request (post-process-request~ data-source request)))
                   (with ((statement (new ODBC-Statement self request)))
                     (execute~ statement)
                     (load-single-resultset~ statement)))))
  
  
  (method override (load-multirequest request (convert?: convert? #t) (strategy: strategy 'mixed))
    (define (autoconvert resultsets)
      (if convert?
          (map resultset->Data-Table resultsets)
        resultsets))
    
    (autoconvert (let ((request (post-process-request~ data-source request)))
                   (with ((statement (new ODBC-Statement self request strategy: strategy)))
                     (execute~ statement)
                     (load-multiple-resultsets~ statement)))))))
  (else))
)
