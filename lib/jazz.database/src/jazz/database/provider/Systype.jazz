;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; System types
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library protected jazz.database.provider.Systype jazz


(import (jazz.database))


(class Systype extends Object
  
  
  (slot name)
  (slot size)
  (slot precision)
  (slot scale)
  (slot default-value)
  
  
  @convert-literal
  (method meta (construct-literal context name size precision scale default-value)
    (assert (or (integer? size) (null? size)))
    (assert (or (integer? precision) (null? precision)))
    (assert (or (integer? scale) (null? scale)))
    (assert (or (is? default-value String) (integer? default-value) (null? default-value) (= default-value 'read-only)))
    (new self name size precision scale default-value))
    
    
  (method (initialize name size precision scale default-value)
    (nextmethod)
    (set! name~self name)
    (set! size~self size)
    (set! precision~self precision)
    (set! scale~self scale)
    (set! default-value~self default-value))


  (method (compare-object target)
    (cond ((is-not? target Systype)
           :incompatible)
          ((and (= name (get-name~ target))
                (= size (get-size~ target))
                (= precision (get-precision~ target))
                (= scale (get-scale~ target))
                (= default-value (get-default-value~ target)))
           :equal)
          (else
           :not-equal)))
  
  
  (method (print printer readably)
    (format printer "~{{a} {s} {s} {s} {s} {s}}"
            (identifier-name (type-name (class-of self)))
            name
            size
            precision
            scale
            default-value))
  
  
  ;;;
  ;;;; Access
  ;;;
  
  
  (method public (get-name)
    name)
  
  
  (method public (get-size)
    size)
  
  
  (method public (get-precision)
    precision)
  
  
  (method public (get-scale)
    scale)
  
  
  (method public (get-default-value)
    default-value)
  
  
  (method public (get-sizeable?)
    (null? size))
  
  
  (method public (get-fixed?)
    (not-null? size))
  
  
  (method public (get-precisionable?)
    (not-null? precision))
  
  
  (method public (get-scalable?)
    (not-null? scale))
  
  
  (method public (get-defaultable?)
    (not-null? default-value))
  
  
  ;;;
  ;;;; Presentation
  ;;;
  
  
  (method public (present)
    (format "{a}" name))))
