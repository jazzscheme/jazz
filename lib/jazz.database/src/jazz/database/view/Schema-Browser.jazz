;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Schema Browser
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.database.view.Schema-Browser jazz


(import (jazz.database)
        (jazz.geometry)
        (jazz.graphic)
        (jazz.handler)
        (jazz.locale)
        (jazz.markup)
        (jazz.resource)
        (jazz.schema)
        (jazz.text)
        (jazz.ui)
        (jazz.view))


(class undocumented Schema-Browser extends Border-View


  (property empty-text initialize #f accessors generate)
  
  
  (slot source initialize #f)
    

  (form
    (<install>                                 size: {Dimension 142 24} border-type: edge style: entry layout-type: fill
      (<Layout-View>            name: content  layout-type: border
        (<Layout-View>          name: top      size: {Dimension 120 21} location: north layout-type: flow background: {Color Medium}
          (<Separator-View>                    size: {Dimension 4 0})
          (<Label-View>         name: label    size: {Dimension 120 21})
          (<Push-Tool>          name: browse   size: {Dimension 22 22} location: tail tooltip?: #t tooltip-text: "Browse Schema..." resource: {Image-Resource "Open"} portfolio: :images action-handler: {Event-Handler :form on-browse}))
        (<Scroller-View>        name: scroller location: center hscroll?: #f vscroll?: #f
          (<!>                  name: content  layout-type: fill
            (<Schema-Text-View> name: text     selectable?: #f editable?: #f accepts-returns?: #f show-unfocused-selection?: #f left-padding: 4 top-padding: 2 paragraph-spacing: 1 return-press-handler: {Event-Handler :form on-return-press}))))))

  
  ;;;
  ;;;; Events
  ;;;
 
  
  (method (on-browse self evt)
    (set-source self (get-modal Schema-Chooser source: (get-source self))))
  
  
  (method override (on-return-press self evt)
    (when return-press-handler
      (invoke-handler self return-press-handler evt)))
    
  
  ;;;
  ;;;; Access
  ;;;
  
  
  (method public (get-text self)
    (locate self 'text))

  
  ;;;
  ;;;; Widget
  ;;;
  
  
  (method override (inner? self view)
    (memq? view children))
    
  
  ;;;
  ;;;; Drawing
  ;;;

  
  (method override (draw-children self surface nodes context)
    (nextmethod self surface nodes context)
    @convert/waiting
    (let ((width (get-width)))
      (set-color surface {Color Outline-Border})
      (set-line-width surface 1)
      (move-to surface 2 22)
      (line-to surface (- width 2) 22)))
    
  
  ;;;
  ;;;; Schema
  ;;;
  
  
  (method public (get-schema self (reporter: reporter #f))
    (let ((source (get-source self)))
      (when source
        (get-data-schema source reporter: reporter))))
  
  
  ;;;
  ;;;; Content
  ;;;

  
  (method public (get-source self)
    source)
  
  
  (method public (set-source self value)
    (define (present-source source)
      (when source
        (present-detailed source)))
    
    (source-changing self value)
    (set! source value)
    (set-text (get-text self) (present-source source))
    (source-changed self value))
  
  
  (method protected virtual (source-changing self source)
    )
  
  
  (method protected virtual (source-changed self source)
    (set-enabled? (locate self 'reload) #t)))


;;;
;;;; Schema-Text-View
;;;


(definition Background-Font
  {Font Text})


(class Schema-Text-View extends Plain-Formatted-Text-View
  
  
  (form
    (<install> base-style: {Text-Style Text-Base}))
  
  
  (method override (get-scroll-context self)
    (cons 0 0))
  
  
  (method override (draw-children self surface nodes context)
    (define (draw-empty-schema)
      (set-font surface Background-Font)
      (let* ((title (localize (or (get-empty-text creator) "No schema specified")))
             (extent (get-text-extent surface title))
             (pos (center extent (get-display-size self))))
        (draw-text surface (get-h pos) (get-v pos) title {Color Dark})))
    
    (if (text-empty? self)
        (draw-empty-schema)
      (nextmethod self surface nodes context)))))
