;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Schema Chooser
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.database.view.Schema-Chooser jazz


(import (jazz.ui))


(class undocumented Schema-Chooser extends Chooser
  

  @commented-because-this-refers-to-metascoop-classes-metamodeler-to-convert (
  (property source initialize #f accessors explicit)

  
  (form
    (<install>                                               size: {Dimension 546 264}
      (<!>                            name: title            title: "Schema Selection")
      (<!>                            name: description      title: "Select the information necessary to locate the desired schema")
      (<!>                            name: content
        (<Radio-Button>               name: design           title: "Design" position: {Point 33 50} size: {Dimension 56 16} selected?: #t action-handler: {Event-Handler :form on-select :sheet design-sheet})
        (<Radio-Button>               name: database         title: "Database" position: {Point 33 74} size: {Dimension 66 16} action-handler: {Event-Handler :form on-select :sheet database-sheet})
        (<Radio-Button>               name: archive          title: "Archive" position: {Point 33 98} size: {Dimension 60 16} action-handler: {Event-Handler :form on-select :sheet archive-sheet})
        (<Vertical-Line>              name: vertical-line    position: {Point 130 15} size: {Dimension 8 150})
        (<Pad-View>                   name: pad              position: {Point 158 20} size: {Dimension 370 140}
          (<Layout-View>              name: design-sheet
            (<Design-Schema-Browser>  name: design-browser   position: {Point 8 39} size: {Dimension 370 146}))
          (<Layout-View>              name: database-sheet
            (<Data-Source-Browser>    name: database-browser position: {Point 4 4} size: {Dimension 370 146}))
          (<Layout-View>              name: archive-sheet
            (<Archive-Schema-Browser> name: archive-browser  position: {Point 8 39} size: {Dimension 370 146}))))))

  
  (method (finish rest)
    (nextmethod rest)
    (setup))

  
  ;;;
  ;;;; Host
  ;;;
  
  
  (method meta (host-title)
    "Choose Schema")
  
  
  (method meta (host-position)
    {Point 450 300})
  
  
  (method meta (host-size)
    {Dimension 302 120})
  
  
  ;;;
  ;;;; Access
  ;;;


  (method public (get-source)
    source)


  (method public (set-source value)
    (set! source value))
  
  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method (on-select evt)
    (let ((sheet (get-property evt sheet:)))
      (select-sheet sheet)))
  
  
  ;; Should really be generic in the Dialog class
  (method (on-return-press evt)
    (let ((dialog (get-host)))
      (end-modal dialog (get-modal-result dialog))))
  
  
  ;; Should really be generic in the Dialog class
  (method (on-escape-press evt)
    (let ((dialog (get-host)))
      (cancel-modal dialog)))
  
  
  ;;;
  ;;;; Setup
  ;;;
 
  
  (method (setup)
    (typecase source
      ((Design-Schema-Source)
       (select-radio 'design)
       (select-sheet 'design-sheet)
       (setup-design))
      ((Data-Source)
       (select-radio 'database)
       (select-sheet 'database-sheet)
       (setup-database))
      ((Archive-Schema-Source)
       (select-radio 'archive)
       (select-sheet 'archive-sheet)
       (setup-archive))
      (else
       (select-radio 'design)
       (select-sheet 'design-sheet))))
  
  
  (method (setup-design)
    (set-source (locate 'design-browser) source))
  
  
  (method (setup-database)
    (set-data-source (locate 'database-browser) source))
  
  
  (method (setup-archive)
    (set-source (locate 'archive-browser) source))
  
  
  (method (select-radio name)
    (set-selected-element (locate 'content) name))

  
  ;;;
  ;;;; Content
  ;;;
 
  
  (method (selected-sheet)
    (get-name (get-selection (locate 'pad))))
 
  
  (method (select-sheet sheet)
    (set-selection (locate 'pad) (locate sheet)))

  
  ;;;
  ;;;; Modal
  ;;;
  
  
  (method (validate-dialog)
    (case (selected-sheet)
      ((design-sheet)   (validate-content (locate 'design-browser)))
      ((database-sheet) (validate-content (locate 'database-browser)))
      ((archive-sheet)  (validate-content (locate 'archive-browser)))))
  
  
  (method (get-modal-result)
    (case (selected-sheet)
      ((design-sheet)   (get-source (locate 'design-browser)))
      ((database-sheet) (get-data-source (locate 'database-browser)))
      ((archive-sheet)  (get-source (locate 'archive-browser))))))))
