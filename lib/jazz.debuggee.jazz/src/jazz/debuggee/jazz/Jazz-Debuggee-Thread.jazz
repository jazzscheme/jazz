;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Jazz Debuggee Thread
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.debuggee.jazz.Jazz-Debuggee-Thread jazz


(import (jazz.debuggee)
        (jazz.debuggee.autoload))


(class Jazz-Debuggee-Thread extends Debuggee-Thread
  

  (slot thread accessors generate)
  
  
  (method override (initialize thread)
    (nextmethod)
    (set! thread~self thread))
  
  
  (method override (get-id)
    (object->serial thread))
  
  
  (method override (get-name)
    (thread-name thread))
  
  
  (method override (get-state)
    (present-thread-state (thread-state thread)))
  
  
  ;; This is a hack to support continuation inspection. This should be reimplemented by either allowing
  ;; the debugger to directly inspect a continuation with a proper continuation stub without having to
  ;; create a temporary thread
  (method override (get-debugged-continuation?)
    (eq? (thread-thread-group thread) debugged-continuations-thread-group))
  
  
  (method override (get-stops)
    (get-thread-stops thread))
  
  
  (method override (set-repl-frame frame-proxy)
    (let ((frame (and frame-proxy (get-object~ frame-proxy))))
      (thread-post thread 'set-repl-frame
        (lambda ()
          (let ((box (current-repl-frame)))
            (when (box? box)
              (set-box! box frame)))))))))
