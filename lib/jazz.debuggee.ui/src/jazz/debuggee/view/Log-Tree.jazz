;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Log Tree
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.debuggee.view.Log-Tree jazz


(import (jazz.debuggee.ui)
        (jazz.debuggee.view)
        (jazz.debugger)
        (jazz.event)
        (jazz.feedback)
        (jazz.graphic)
        (jazz.handler)
        (jazz.io)
        (jazz.log)
        (jazz.markup)
        (jazz.tree)
        (jazz.ui.dialog))


(class Log-Tree extends Tree-View
  
  
  (property log initialize #f accessors generate)
  
  
  (slot frame-indicator initialize #f)


  (form
    (<install>                            filled-column: message portfolio: :images double-click-handler: {Event-Handler :form on-double-click} return-press-handler: {Event-Handler :form on-return-press}
      (<Tree-Node-Column>  name: name     title: "Name" width: 200 toplevel-controls?: #f)
      (<Tree-Label-Column> name: message  title: "Message")
      (<Tree-Label-Column> name: location title: "Location" width: 200)))
  
  
  ;;;
  ;;;; Events
  ;;;
  
  
  (definition Logs-Directory
    {Directory Settings "logs"})
  
  
  (definition (with-directory default? proc)
    (if (and default? (exists? Logs-Directory))
        (with-preserved-current-directory
         (lambda ()
           (proc Logs-Directory)))
      (proc #f)))
  
  
  (method package (on-open self evt)
    (with-directory (get-shift? evt)
      (lambda (dir)
        (open-file self (choose-file extensions: '(("Log Files" . "jlog")) directory: dir)))))


  (method package (on-edit self evt)
    (edit-selection self))


  (method package (on-clear self evt)
    (on-refresh self evt))


  (method package (on-refresh self evt)
    (update self))


  (method (on-double-click self evt)
    (edit-selection self))
  
  
  (method override (on-return-press self evt)
    (edit-selection self))


  (method public (clear self)
    (if (null? log)
        (bell)
      (clear log)
      (update self)))
  
  
  ;;;
  ;;;; Input/Output
  ;;;
  
  
  (method package (open-log-file self file)
    (let ((log (new Log file: file load?: #t)))
      (view-log self log)))
  
  
  ;;;
  ;;;; Update
  ;;;
  
  
  (method public (update self (reload?: reload? #t))
    (when (and reload? log (get-file log))
      (reload log))
    (view-content self))
  
  
  (method protected virtual (extract-log-content self log)
    (get-toplevel-nodes log))
  
  
  ;;;
  ;;;; Log Node
  ;;;
  
  
  (method (new-log-node self node)
    (define (log-node-class)
      (let ((class (get-property node 'class)))
        (if class
            (resolve-runtime-reference (deserialize-runtime-reference class))
          Log-Node)))
    
    (new (log-node-class) node))
  
  
  ;;;
  ;;;; Edit
  ;;;
  
  
  (method package (edit-selection self)
    (let ((selection (get-single-selection self)))
      (when selection
        (let ((log-node (get-user-data (get-row self selection))))
          (edit-location self log-node)
          (user-message "{a}" (node-message log-node))))))
  
  
  (method package (edit-location self log-node)
    (edit-location log-node self))
  
  
  (method package (get-frame-indicator self)
    (or frame-indicator
        (let ((indicator (new Location-Indicator {Color red: 255 green: 146 blue: 94})))
          (set! frame-indicator indicator)
          indicator)))
  
  
  ;;;
  ;;;; View
  ;;;
  
  
  (method public (view-log self log)
    (set! self.log log)
    (view-content self))
  
  
  (method (view-content self)
    (remove-every-row self)
    (with-update-locked self
      (lambda ()
        (when log
          ;; for-each-reversed ;; wait because of validations
          (for-each (lambda (node)
                      (insert-node self #f node))
                    (extract-log-content self log))))))


  (method (insert-node self father node)
    (case (get-tag node)
      ((resources))
      (else
       (let* ((log-node (new-log-node self node))
              (name (node-name log-node))
              (image (node-image log-node))
              (message (node-message log-node))
              (location (node-location log-node))
              (subfather (add-row self father: father children: (list (new Tree-Node title: name image: image) (new Tree-Label title: message) (new Tree-Label title: location)) user-data: log-node)))
         (for-each (lambda (subnode)
                     (insert-node self subfather subnode))
                   (get-children node))))))))
