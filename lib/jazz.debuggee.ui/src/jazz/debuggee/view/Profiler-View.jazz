;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Profiler View
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.debuggee.view.Profiler-View jazz


(import (jazz.application)
        (jazz.handler)
        (jazz.jml)
        (jazz.resource)
        (jazz.tree)
        (jazz.ui)
        (profiler))


(class Profiler-View extends Layout-View


  (form
    (<install>                                                 layout-type: fill
      (<Scroller-View>               name: scroller            style: document vscroll?: #t style: tool
        (<!>                         name: content             layout-type: fill
          (<Tree-Header>             name: header              style: document style: tool
            (<!>                     name: content
              (<Tree-View>           name: profile             filled-column: name portfolio: :images selection-mode: row double-click-handler: {Event-Handler :form on-double-click}
                (<Tree-Node-Column>  name: name                title: "Name" width: 279)
                (<Tree-Label-Column> name: count               title: "Count" width: 100)
                (<Tree-Label-Column> name: average             title: "Average" width: 100)
                (<Tree-Label-Column> name: total               title: "Total" width: 100)
                (<Tree-Label-Column> name: parent-percentage   title: "Parent %" width: 100)
                (<Tree-Label-Column> name: toplevel-percentage title: "Toplevel %" width: 100))))))))
  
  
  ;;;
  ;;;; Update
  ;;;
  
  
  (method public (update-profile)
    (view-profile (profile->jml (active-profile))))
  
  
  (method public (view-profile profile)
    (define (insert-call tree father call)
      (let ((row (insert-content tree father call)))
        (insert-children tree row call)))
    
    (define (insert-content tree father call)
      (let* ((name (call-name call))
             (count (call-count call))
             (total (call-total call))
             (average (/ (cast <fl> total) count))
             (parent-percentage (call-parent-percentage call))
             (toplevel-percentage (call-toplevel-percentage call)))
        (add-row~ tree father: father state: 'expanded children: (list (new Tree-Node image: {Image-Resource "Link"} title: name) (new Tree-Label title: count) (new Tree-Label title: average) (new Tree-Label title: total) (new Tree-Label title: (if parent-percentage (format "{r precision: 2}" parent-percentage) "")) (new Tree-Label title: (if toplevel-percentage (format "{r precision: 2}" toplevel-percentage) ""))) user-data: call)))
    
    (define (call-parent-percentage call)
      (let ((parent (call-parent call)))
        (when (and parent (eq? (get-tag~ parent) 'call))
          (percentage (call-total call)
                      (call-total parent)))))
    
    (define (call-toplevel-percentage call)
      (let ((toplevel (call-toplevel call)))
        (if (eq? toplevel call)
            100
          (percentage (call-total call)
                      (call-total toplevel)))))
    
    (define (call-toplevel call)
      (let ((parent (call-parent call)))
        (if (or (not parent) (neq? (get-tag~ parent) 'call))
            call
          (call-toplevel parent))))
    
    (define (insert-children tree father call)
      (insert-calls tree father (get-children~ call)))
    
    (define (insert-calls tree father calls)
      (for-each (lambda (child)
                  (insert-call tree father child))
                calls))
    
    (let ((tree (locate 'profile)))
      (remove-every-row~ tree)
      (with-update-locked~ tree
        (lambda ()
          (insert-calls tree #f profile)))))
  
  
  ;;;
  ;;;; Call
  ;;;
  
  
  (definition (call-parent call)
    (get-parent~ call))
  
  
  (definition (call-name call)
    (get-property~ call 'name))
  
  
  (definition (call-count call)
    (get-property~ call 'count))
  
  
  (definition (call-total call)
    (get-property~ call 'total))
  
  
  ;;;
  ;;;; Edition
  ;;;
  
  
  (method public (edit-call)
    (let* ((tree (locate 'profile))
           (selection (get-single-selection~ tree)))
      (if (null? selection)
          (bell)
        (let ((call (get-user-data~ (get-row~ tree selection)))
              (appl (get-application)))
          (edit-definitions~ appl (call-name call))))))))
