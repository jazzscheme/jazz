;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Debuggee Process
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.debuggee.Debuggee-Process jazz


(import (jazz.debuggee)
        (jazz.debuggee.stub)
        (jazz.editor.jazz.inspector)
        (jazz.system))


(class Debuggee-Process extends Object
  
  
  (method public (get-title)
    (current-process-present))
  
  
  (method public (get-icon)
    (current-process-icon))
  
  
  ;;;
  ;;;; Control
  ;;;
  
  
  (method public (detach-process)
    (detach-from-controller))
  
  
  (method public (reload-process)
    (reload-process~ (get-process)))
  
  
  (method public (exit-process)
    (let ((process (get-process))
          (primordial (primordial-thread)))
      (if (and process (thread-loop? primordial))
          (thread-post primordial 'exit-process
            (lambda ()
              (exit-process~ process)))
        (detach-from-controller)
        (exit))))
  
  
  ;;;
  ;;;; Process
  ;;;
  
  
  (method public (get-toplevel-hwnd)
    @convert
    (get-handle~ (get-toplevel)))
  
  
  ;;;
  ;;;; State
  ;;;
  
  
  (method (get-threads)
    (map (lambda (thread)
           (new Debuggee-Thread-Local-Proxy (new Debuggee-Thread thread)))
         (top-threads)))
  
  
  ;;;
  ;;;; Thread
  ;;;
  
  
  (definition (break-thread thread-proxy)
    (let ((thread (get-thread~ (get-object~ thread-proxy))))
      (thread-interrupt! thread
        (lambda ()
          (break)))))
  
  
  ;;;
  ;;;; Restart
  ;;;
  
  
  (method (restart-stop restart-proxy)
    (let ((debuggee-restart (get-object~ restart-proxy)))
      (let ((thread (get-thread~ debuggee-restart))
            (restart (get-restart~ debuggee-restart)))
        (thread-post thread 'restart-stop
          (lambda ()
            (invoke-restart restart))))))
  
  
  ;;;
  ;;;; Stop
  ;;;
  
  
  (method (continue-stop stop-proxy)
    (let ((stop (get-object~ stop-proxy)))
      (let ((thread (get-thread~ stop))
            (continuation (get-continuation~ stop)))
        (thread-post thread 'continue-stop
          (lambda ()
            (continuation-return continuation #f))))))
  
  
  ;;;
  ;;;; Console
  ;;;
  
  
  (method (console-input thread-proxy str)
    (let ((thread (get-thread~ (get-object~ thread-proxy))))
      (let ((port (thread-console-pump-port thread)))
        (if (not str)
            (close-port port)
          (display str port)
          (force-output port)))))
  
  
  ;;;
  ;;;; Evaluate
  ;;;
  
  
  (method (unit/module-form? expr)
    (and (pair? (source-code expr))
         (memq? (source-code (car (source-code expr))) '(unit module))))
  
  
  (method (evaluate-expressions syntax str container line col)
    (define (present result)
      (when (specified? result)
        (let ((values (call-with-values (lambda () result) list)))
          (for-each (lambda (value)
                      (format :console #"\($\)\(color Ochre {s}\){%}"# value))
                    values))
        (display-prompt (get-console-port) (current-repl-level))
        (force-output (get-console-port))))
    
    (thread-call (primordial-thread) 'evaluate-expressions
      (lambda ()
        (let ((expr (parameterize ((walk-for 'eval))
                      (with-readtable (case syntax
                                        ((scheme) scheme-readtable)
                                        ((jazz) jazz-readtable))
                        (lambda ()
                          (call-with-input-string str
                            (lambda (port)
                              (read-source-first port container line col))))))))
          (if (unit/module-form? expr)
              (receive (unit-name access) (parse-unit/module (cdr (source-code expr)))
                (load-unit unit-name)
                (outline-unit unit-name)
                (parameterize ((requested-unit-name unit-name)
                               (walk-for 'eval))
                  (present (eval expr))))
            (present (eval expr)))))))
  
  
  (definition (parse-unit/module expr)
    (let ((first (source-code (car expr))))
      (if (memq? first '(protected public))
          (values (source-code (cadr expr)) first)
        (values first 'public))))
  
  
  ;;;
  ;;;; Inspector
  ;;;
  
  
  (method public (inspect-serial serial)
    (inspect-value (serial->object serial)))))
