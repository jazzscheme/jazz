;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Debuggee Process
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.debuggee.Debuggee-Process jazz


(import (jazz.debuggee)
        (jazz.debuggee.stub)
        (jazz.editor.jazz.inspector)
        (jazz.runtime)
        (jazz.system)
        (profiler))


(class Debuggee-Process extends Object
  
  
  (method public (get-title)
    (current-process-present))
  
  
  (method public (get-icon)
    (current-process-icon))
  
  
  ;;;
  ;;;; Control
  ;;;
  
  
  (method public (detach-process)
    (detach-from-controller))
  
  
  (method public (reload-process)
    (reload-process~ (get-process)))
  
  
  (method public (exit-process)
    (let ((process (get-process))
          (primordial (primordial-thread)))
      (if (and process (thread-loop? primordial))
          (thread-post primordial 'exit-process
            (lambda ()
              (exit-process~ process)))
        (detach-from-controller)
        (exit))))
  
  
  ;;;
  ;;;; Process
  ;;;
  
  
  (method public (get-toplevel-hwnd)
    @convert
    (get-handle~ (get-toplevel)))
  
  
  ;;;
  ;;;; State
  ;;;
  
  
  (method (get-threads)
    (map (lambda (thread)
           (new Debuggee-Thread-Local-Proxy (new Debuggee-Thread thread)))
         (top-threads)))
  
  
  ;;;
  ;;;; Thread
  ;;;
  
  
  (definition (break-thread thread-proxy)
    (let ((thread (get-thread~ (get-object~ thread-proxy))))
      (thread-interrupt! thread
        (lambda ()
          (break)))))
  
  
  ;;;
  ;;;; Restart
  ;;;
  
  
  (method (restart-stop restart-proxy)
    (let ((debuggee-restart (get-object~ restart-proxy)))
      (let ((thread (get-thread~ debuggee-restart))
            (restart (get-restart~ debuggee-restart)))
        (thread-post thread 'restart-stop
          (lambda ()
            (invoke-restart restart))))))
  
  
  ;;;
  ;;;; Stop
  ;;;
  
  
  (method (continue-stop stop-proxy)
    (let ((stop (get-object~ stop-proxy)))
      (let ((thread (get-thread~ stop))
            (continuation (get-continuation~ stop)))
        (thread-post thread 'continue-stop
          (lambda ()
            (continuation-return continuation #f))))))
  
  
  (method (step-stop stop-proxy command)
    (let ((stop (get-object~ stop-proxy)))
      (let ((thread (get-thread~ stop))
            (stepper (get-stepper~ stop)))
        (thread-post thread 'step-stop
          (lambda ()
            (stepper command))))))
  
  
  ;;;
  ;;;; Console
  ;;;
  
  
  (method (console-input thread-proxy str)
    (let ((thread (get-thread~ (get-object~ thread-proxy))))
      (let ((port (thread-console-pump-port thread)))
        (if (not str)
            (close-port port)
          (display str port)
          (force-output port)))))
  
  
  ;;;
  ;;;; Evaluate
  ;;;
  
  
  (method (evaluate-expressions syntax str container line col)
    (define (unit/module-form? expr)
      (and (pair? (source-code expr))
           (memq? (source-code (car (source-code expr))) '(unit module))))
    
    (define (parse-unit/module expr)
      (let ((first (source-code (car expr))))
        (if (memq? first '(protected public))
            (values (source-code (cadr expr)) first)
          (values first 'public))))
    
    (define (present result)
      (when (specified? result)
        (let ((values (call-with-values (lambda () result) list)))
          (for-each (lambda (value)
                      (format :console #"\($\)\(color Ochre {s}\){%}"# value))
                    values))
        (display-prompt (get-console-port) (current-repl-level))
        (force-output (get-console-port))))
    
    (thread-call (primordial-thread) 'evaluate-expressions
      (lambda ()
        (let ((expressions (parameterize ((walk-for 'eval))
                             (with-readtable (case syntax
                                               ((scheme) scheme-readtable)
                                               ((jazz) jazz-readtable))
                               (lambda ()
                                 (call-with-input-string str
                                   (lambda (port)
                                     (read-source-all port container line col))))))))
          (let ((first (car expressions))
                (evaluate (cons 'begin expressions)))
            (if (and (eq? syntax 'jazz) (unit/module-form? first))
                (receive (unit-name access) (parse-unit/module (cdr (source-code first)))
                  (load-unit unit-name)
                  (outline-unit unit-name)
                  (parameterize ((requested-unit-name unit-name)
                                 (walk-for 'eval)
                                 (generate-symbol-for (format "%{a}&" (eval-count)))
                                 (generate-symbol-context unit-name)
                                 (generate-symbol-counter 0))
                    (present (eval evaluate))))
              (parameterize ((generate-symbol-for (format "%{a}&" (eval-count)))
                             (generate-symbol-counter 0))
                (present (eval evaluate)))))))))
  
  
  ;;;
  ;;;; Profiler
  ;;;
  
  
  (method public (profiler-start)
    (let ((profile (find-selected-profile)))
      (when profile
        (active-profile profile)
        (start-profiler profile))))
  
  
  (method public (profiler-stop)
    (let ((profile (find-selected-profile)))
      (when profile
        (stop-profiler profile)
        (active-profile #f))))


  (method public (profiler-profiles)
    (get-profile-names))
  
  
  (method public (profiler-selected-profile)
    (get-selected-profile))
  
  
  (method public (profiler-selected-profile-set! name)
    (set-selected-profile name))
  
  
  (method public (profiler-profile)
    (define (merge-profiles profile remote-profile)
      (define (frame->symbol frame)
        (or (when frame
              (bind (creator locat) frame
                (when creator
                  (let ((name (if (symbol? creator) creator (get-procedure-name creator))))
                    (list name locat)))))
            frame))
          
      (define (merge-calls calls source-calls)
        (iterate-table source-calls
          (lambda (proc count-duration)
            (let* ((key (map frame->symbol proc))
                   (temp-call (table-ref calls key #f)))
              (table-set! calls key
                          (if temp-call
                              (list (+ (first count-duration) (first temp-call))
                                    (+ (second count-duration) (second temp-call)))
                              count-duration))))))
      
      (let ((temp-profile (new-profile label: (profile-label profile)
                                       profiler: (profile-profiler profile)
                                       depth: (profile-depth profile))))
        (profile-calls-count-set! temp-profile (+ (profile-calls-count profile)
                                                  (if remote-profile
                                                      (profile-calls-count remote-profile)
                                                      0)))
        (profile-calls-duration-set! temp-profile (+ (profile-calls-duration profile)
                                                     (if remote-profile
                                                         (profile-calls-duration remote-profile)
                                                         0)))
        (profile-process-info-set! temp-profile (profile-process-info profile)) ;; ?
        (let ((temp-calls (profile-calls temp-profile)))
          (merge-calls temp-calls (profile-calls profile))
          (when remote-profile
            (merge-calls temp-calls (profile-calls remote-profile))))
        temp-profile))

    
    (let ((profile (find-selected-profile)))
      (when profile
        (let* ((label (profile-label profile))
               (remote-profile (and (get-application) (get-remote-profile~ (get-application) label)))
               (temp-profile (merge-profiles profile remote-profile)))
          (list label
                (profiler-type (profile-profiler temp-profile))
                (profile-depth temp-profile)
                (profile-calls-count temp-profile)
                (profile-calls-duration temp-profile)
                (profile-process-info temp-profile)
                (table->list (profile-calls temp-profile)))))))
  
  
  (method public (profile-reset profiler depth)
    (let ((profile (find-selected-profile)))
      (when profile
        (reset-profile profile (and profiler (require-service profiler)) depth))))
  
  
  ;;;
  ;;;; Inspector
  ;;;
  
  
  (method public (inspect-serial serial)
    (inspect-value (serial->object serial)))))
