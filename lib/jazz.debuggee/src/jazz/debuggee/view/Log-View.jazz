;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Log View
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.debuggee.view.Log-View jazz


(import (jazz.debuggee)
        (jazz.jml)
        (jazz.library)
        (jazz.platform)
        (jazz.ui))


(class Log-View extends Layout-View
  
  
  (property log initialize #f accessors generate)


  (form
    (<install>                                      layout-type: fill
      (<Scroller-View>               name: scroller style: document vscroll?: #t style: tool
        (<!>                         name: content  layout-type: fill
          (<Tree-Header>             name: header   style: document shown?: #t style: tool
            (<!>                     name: content
              (<Tree-View>           name: log-tree filled-column: message portfolio: :images
                (<Tree-Node-Column>  name: name     title: "Name" width: 200)
                (<Tree-Label-Column> name: message  title: "Message")
                (<Tree-Label-Column> name: data     title: "Data" width: 200))))))))
  
  
  ;;;
  ;;;; Access
  ;;;
  
  
  (method (get-tree)
    (locate 'log-tree))
  
  
  ;;;
  ;;;; Events
  ;;;


  (method public (clear)
    (if (null? log)
        (bell)
      (clear~ log)
      (update)))
  
  
  ;;;
  ;;;; Update
  ;;;
  
  
  (method public (update (reload?: reload? #t))
    (when (and reload? log (get-file~ log))
      (reload~ log))
    (view-content))
  
  
  (method protected virtual (extract-log-content log)
    (get-toplevel-nodes~ log))
  
  
  ;;;
  ;;;; View
  ;;;
  
  
  (method public (view-log log)
    (set! log~self log)
    (view-content))
  
  
  (method (view-content)
    (let ((tree (get-tree)))
      (remove-every-row~ tree)
      (with-update-locked~ tree
        (lambda ()
          (when log
            (for-each-reversed (lambda (node)
                                 (insert-node tree #f node))
                               (extract-log-content log)))))))


  (method (insert-node tree father node)
    (define (node-image node)
      (case (get-tag~ node)
        ((resources) {Image-Resource "Red"})
        ((problem) {Image-Resource "Red"})
        (else {Image-Resource "Blue"})))
    
    (case (get-tag~ node)
      ((resources))
      (else
       (let* ((name (->string (or (get-property~ node 'name) "")))
              (image (node-image node))
              (message (or (get-property~ node 'message) ""))
              (data (or (get-property~ node 'data) ""))
              (subfather (add-row~ tree father: father children: (list (new Tree-Node title: name image: image) (new Tree-Label title: message) (new Tree-Label title: data)) user-data: node)))
         (for-each (lambda (subnode)
                     (insert-node tree subfather subnode))
                   (get-children~ node))))))))
