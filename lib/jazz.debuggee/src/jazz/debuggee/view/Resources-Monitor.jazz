;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Resources Monitor
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.debuggee.view.Resources-Monitor jazz


(import (jazz.debuggee)
        (jazz.io)
        (jazz.jml)
        (jazz.library)
        (jazz.log)
        (jazz.ui)
        (jazz.ui.dialog))


(class Resources-Monitor extends Layout-View


  (form
    (<install>                                     size: {Dimension 800 500} layout-type: border layout-insets: {Rect 2 2 2 2}
      (<Layout-View>                               size: {Dimension 100 33} layout-type: flow layout-insets: {Rect 2 6 2 0} location: north
        (<Push-Tool>        name: open             size: {Dimension 22 22} tooltip?: #t tooltip-text: "Open Log..." resource: {Image-Resource "Open"} portfolio: :images action-handler: {Event-Handler :form on-open})
        (<Separator>)
        (<Push-Tool>        name: clear            size: {Dimension 22 22} tooltip?: #t tooltip-text: "Clear" resource: {Image-Resource "Clear"} portfolio: :images action-handler: {Event-Handler :form on-clear})
        (<Push-Tool>        name: update           size: {Dimension 22 22} location: tail tooltip?: #t tooltip-text: "Update" resource: {Image-Resource "Refresh"} portfolio: :images action-handler: {Event-Handler :form on-update}))
      (<Layout-View>                               location: center layout-type: fill layout-insets: {Rect 1 0 1 1}
        (<Border-View>      name: resources-border location: center border-type: edge style: entry
          (<Resources-View> name: resources)))))
  
  
  ;;;
  ;;;; Host
  ;;;
  
  
  (method meta override (host-title)
    "Resources Monitor")
  
  
  (method meta override (host-icon)
    {Image-Resource "Reminder"})
  
  
  (method meta override (host-position)
    {Point 80 50})
  
  
  (method meta override (host-size)
    {Dimension 1000 441})
  
  
  (method override (client-activate)
    (update))
  
  
  ;;;
  ;;;; Component
  ;;;

  
  (method override (conclude rest)
    (nextmethod rest)
    (update))

  
  ;;;
  ;;;; Access
  ;;;
  
  
  (method (get-resource-view)
    (locate 'resources))

  
  ;;;
  ;;;; Events
  ;;;
  
  
  (definition Logs-Directory
    {Directory Build "Logs"})
  
  
  (method (on-open evt)
    (let* ((default? (get-shift?~ evt))
           (resource-view (get-resource-view))
           (proc
            (lambda (dir)
              (let* ((file (choose-file extensions: '(("Log Files" . "jml")) directory: dir))
                     (log (new Log file: file load?: #t)))
                (view-log~ resource-view log)))))
      (if (and default? (exists?~ Logs-Directory))
          (with-preserved-current-directory
            (lambda ()
              (proc Logs-Directory)))
        (proc {}))))
  
  
  (method (on-update evt)
    (update))
  
  
  (method (on-clear evt)
    (let ((resource-view (get-resource-view)))
      (clear~ resource-view)))

  
  ;;;
  ;;;; Update
  ;;;
  
  
  (method (update)
    (let ((resource-view (get-resource-view)))
      (update~ resource-view)))))
