;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Resources View
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.debuggee.view.Resources-View jazz


(import (jazz.debuggee)
        (jazz.graphic)
        (jazz.jml)
        (jazz.library)
        (jazz.platform)
        (jazz.ui))


(class Resources-View extends Layout-View
  
  
  (property log initialize {} accessors generate)
  
  
  (slot what               initialize 'after)
  (slot next-rank          initialize 0)
  (slot last-counters      initialize (make-table test: eq?))
  (slot reference          initialize {})
  (slot reference-entry    initialize {})
  (slot reference-counters)


  (form
    (<install>                                              layout-type: fill
      (<Scroller-View>               name: scroller         style: document vscroll?: #t hscroll?: #t flat?: #t
        (<!>                         name: content          layout-type: fill
          (<Tree-Header>             name: header           style: document shown?: #t flat?: #t
            (<!>                     name: content
              (<Tree-View>           name: resources        portfolio: :icons background: {Color name: Dark} empty-background: {Color name: White} filled-column: {} selection-mode: cell row-spacing: 1 column-spacing: 1 double-click-handler: {Event-Handler :form on-double-click} context-menu-handler: {Event-Handler :form on-context-menu}
                (<Tree-Node-Column>  name: name             title: "Name" width: 200)
                (<Tree-Label-Column> name: private-bytes    title: "Private Bytes" width: 100 justification: tail)
                (<Tree-Label-Column> name: virtual          title: "Virtual" width: 70 justification: tail)
                (<Tree-Label-Column> name: committed        title: "Committed" width: 70 justification: tail)
                (<Tree-Label-Column> name: allocated        title: "Allocated" width: 70 justification: tail)
                (<Tree-Label-Column> name: strings          title: "Strings" width: 65 justification: tail)
                (<Tree-Label-Column> name: symbols          title: "Symbols" width: 65 justification: tail)
                (<Tree-Label-Column> name: system-stack     title: "System Stack" width: 80 justification: tail)
                (<Tree-Label-Column> name: data-stack       title: "Data Stack" width: 65 justification: tail)
                (<Tree-Label-Column> name: collector-stack  title: "GC Stack" width: 65 justification: tail)
                (<Tree-Label-Column> name: collector-roots  title: "GC Roots" width: 80 justification: tail)
                (<Tree-Label-Column> name: undestroyed      title: "Undestroyed" width: 80 justification: tail)
                (<Tree-Label-Column> name: bags             title: "Bags" width: 50 justification: tail)
                (<Tree-Label-Column> name: handles          title: "Handles" width: 50 justification: tail)
                (<Tree-Label-Column> name: gui-gdi-objects  title: "GDI" width: 50 justification: tail)
                (<Tree-Label-Column> name: gui-user-objects title: "USER" width: 50 justification: tail))))))))

  
  ;;;
  ;;;; Access
  ;;;
  
  
  (method public (get-tree)
    (locate 'resources))

  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method public (clear)
    (if (null? log)
        (bell)
      (clear~ log)
      (update)))
  
  
  (method (on-double-click evt)
    (bind (rank . counters) (selected-data)
      (if (null? counters)
          (bell)
        (if (eqv? reference rank)
            (clear-reference)
          (set-reference)))))
  
  
  (method (on-context-menu evt)
    (let ((sender (get-sender~ evt))
          (pos (get-position~ evt))
          (menu (new Resources-Menu client: self)))
      (set-selected?~ (child~ menu what) #t)
      (case what
        ((delta)
         (set-visible?~ (child~ menu 'reference-separator) #f)
         (set-visible?~ (child~ menu 'set-reference) #f)
         (set-visible?~ (child~ menu 'clear-reference) #f)))
      (when (null? reference)
        (set-visible?~ (child~ menu 'clear-reference) #f))
      (layout-menu~ menu)
      (with-context-click~ sender pos
        (lambda ()
          (track-popup-menu~ sender menu pos)))))
  
  
  (method (show-delta)
    (set! what 'delta)
    (view-content))
  
  
  (method (show-before)
    (set! what 'before)
    (view-content))
  
  
  (method (show-after)
    (set! what 'after)
    (view-content))
  
  
  (method (set-reference)
    (bind (rank . counters) (selected-data)
      (if (null? counters)
          (bell)
        (set! reference rank)
        (view-content))))
  
  
  (method (clear-reference)
    (set! reference {})
    (view-content))
  
  
  (method (selected-data)
    (let* ((tree (get-tree))
           (selection (get-single-selection~ tree))
           (row (get-row~ tree (get-row~ selection)))
           (data (get-user-data~ row)))
      data))

  
  ;;;
  ;;;; Update
  ;;;
  
  
  (method public (update (reload?: reload? #t))
    (when (and reload? log (get-file~ log))
      (reload~ log))
    (view-content))
  
  
  (method protected virtual (extract-log-content log)
    (get-toplevel-nodes~ log))
  
  
  ;;;
  ;;;; View
  ;;;
  
  
  (definition Reference-Rendering
    (list {Color red: 206 green: 206 blue: 255} {Color name: Dark-Blue}))
  
  (definition Allocate-Rendering
    (list {Color name: Light-Red} {Color name: Dark-Red}))
  
  (definition Release-Rendering
    (list {Color name: Light-Green} {Color name: Dark-Green}))
  
  (definition Stable-Rendering
    (list {} {}))
  
  
  (method public (view-log log)
    (set! log~self log)
    (clear-reference)
    (view-content))
  
  
  (method (view-content)
    (let ((tree (get-tree)))
      (with-update-locked~ tree
        (lambda ()
          (remove-every-row~ tree)
          (when log
            (set! next-rank 0)
            (set! last-counters (make-table test: eq?))
            (let ((entries (extract-log-content log)))
              (set! reference-entry (essay reference (element entries reference)))
              (set! reference-counters (essay reference-entry (entry-counters reference-entry)))
              (for-each (lambda (node)
                          (insert-node tree {} node))
                        entries)))))))
  
  
  (method (insert-node tree father node)
    (case (get-tag~ node)
      ((resources) (insert-resources tree father node))
      (else (insert-entry tree father node))))
  
  
  (method (insert-entry tree father entry)
    (let* ((name (either (get-property~ entry 'name) ""))
           (image {Bitmap-Resource "Blue"})
           (reference-entry? (and reference (eq? entry reference-entry)))
           (reference-scan (if reference reference-counters '()))
           (rank (if (null? father) (prog1 next-rank (increase! next-rank)) {}))
           (counters (entry-counters entry))
           (user-data (cons rank counters))
           (row (add-row~ tree father: father position: 0
                          children: (cons (new Tree-Node title: name image: image)
                                          (map (lambda (counter property)
                                                 (prog1 (if (null? counters)
                                                            (new Tree-Label title: "")
                                                          (case what
                                                            ((delta)
                                                             (bind (background frame-color) (cond ((> counter 0) Allocate-Rendering)
                                                                                                  ((< counter 0) Release-Rendering)
                                                                                                  (else Stable-Rendering))
                                                               (new Tree-Label title: (->string counter) background: background frame-color: frame-color)))
                                                            (else
                                                             (let ((previous (table-ref last-counters property #f)))
                                                               (bind (background frame-color) (cond (reference-entry? Reference-Rendering)
                                                                                                    ((or (not previous) (> counter previous)) Allocate-Rendering)
                                                                                                    ((< counter previous) Release-Rendering)
                                                                                                    (else Stable-Rendering))
                                                                 (table-set! last-counters property counter)
                                                                 (let ((value (if reference (- counter (car reference-scan)) counter)))
                                                                   (new Tree-Label title: (->string value) background: background frame-color: frame-color)))))))
                                                   (when reference-scan
                                                     (set! reference-scan (cdr reference-scan)))))
                                               (either counters Resources-Properties)
                                               Resources-Properties))
                          user-data: user-data)))
      (for-each (lambda (child)
                  (insert-node tree row child))
                (get-children~ entry))))

  
  (method (insert-resources tree father resources)
    (case what
      ((delta)
       (let ((name (either (get-property~ resources 'name) ""))
             (image {Bitmap-Resource "Red"})
             (counters (resources-counters resources)))
         (add-row~ tree father: father
                   children: (cons (new Tree-Node title: name image: image)
                                   (map (lambda (counter)
                                          (new Tree-Label title: (->string counter)))
                                        counters))
                   user-data: resources)))))
  
  
  (method (entry-counters entry)
    (let ((before (find-name~ entry 'before))
          (after (find-name~ entry 'after)))
      (case what
        ((delta)
         (when (and before after)
           (map - (resources-counters after) (resources-counters before))))
        ((before)
         (when before
           (resources-counters before)))
        ((after)
         (when after
           (resources-counters after))))))
  
  
  (definition Resources-Properties
    '(private-bytes
      virtual
      committed
      allocated
      strings
      symbols
      system-stack
      data-stack
      collector-stack
      collector-roots
      undestroyed
      bags
      handles
      gui-gdi-objects
      gui-user-objects))
  
  
  (definition (resources-counters resources)
    (map (lambda (property)
           (get-property~ resources property))
         Resources-Properties)))


;;;
;;;; Resources-Menu
;;;


(class Resources-Menu extends Context-Menu
  
  
  (form
    (<install>
      (<Radio-Item>     name: delta               title: "Show Delta" action-handler: {Event-Handler :form on-show-delta})
      (<Separator-Item>)
      (<Radio-Item>     name: before              title: "Show Before" action-handler: {Event-Handler :form on-show-before})
      (<Radio-Item>     name: after               title: "Show After" action-handler: {Event-Handler :form on-show-after})
      (<Separator-Item> name: reference-separator)
      (<Radio-Item>     name: set-reference       title: "Set Reference" action-handler: {Event-Handler :form on-set-reference})
      (<Radio-Item>     name: clear-reference     title: "Clear Reference" action-handler: {Event-Handler :form on-clear-reference})))
  
  
  (method (on-show-delta evt)
    (show-delta~ client))
  
  
  (method (on-show-before evt)
    (show-before~ client))
  
  
  (method (on-show-after evt)
    (show-after~ client))
  
  
  (method (on-set-reference evt)
    (set-reference~ client))
  
  
  (method (on-clear-reference evt)
    (clear-reference~ client))))
