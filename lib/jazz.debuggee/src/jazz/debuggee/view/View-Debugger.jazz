;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; View Debugger
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library protected jazz.debuggee.view.View-Debugger jazz


(import (jazz.debuggee)
        (jazz.jml)
        (jazz.system)
        (jazz.ui)
        (jazz.ui.development)
        (jazz.ui.picker)
        (jazz.library)
        (jazz.utilities)
        (jedi.development))


(class View-Debugger extends Object
  
  
  (method public (debug-views)
    (pick-figure click: debug-view-action
                 menu: debug-view-menu
                 highlight: #t
                 obscure-unhighlighted?: #f))
  
  
  (method public (explore-views)
    (pick-figure click: debug-view-action
                 menu: debug-view-menu
                 highlight: #t
                 obscure-unhighlighted?: #t))
  
  
  (method (debug-view-action view pos)
    (view-debug view pos))
  
  
  (method (describe-view-action view pos)
    (let ((appl (get-application)))
      (show-console~ appl focus?: #f)
      (display-description (view-describe view pos))
      (fresh-prompt~ appl)))
  
  
  (method (describe-state-action view pos)
    (let ((appl (get-application))
          (host (get-host~ view)))
      (when host
        (let ((guest (get-guest~ host)))
          (show-console~ appl focus?: #f)
          (view-describe-state guest pos)
          (fresh-prompt~ appl)))))
  
  
  (method (display-description description)
    (let ((max (apply max (map cardinality (map car description)))))
      (format :console "{%}")
      (for-each (function (info)
                  (bind (name value) info
                    (format :console "{a}:{_ :v} {s}{%}"
                      name
                      (- max (cardinality name))
                      value)))
                description)))
  
  
  (method package (on-debug-action evt)
    (let ((appl (get-application))
          (action (get-property~ evt action:))
          (view (get-property~ evt view:))
          (pos (get-property~ evt pos:)))
      (case action
        ((debug)          (debug-view-action view pos))
        ((describe)       (describe-view-action view pos))
        ((describe-state) (describe-state-action view pos))
        ((edit)           (let ((object (get-property~ evt object:))
                                (symbol (get-property~ evt symbol:)))
                            (edit-definitions~ appl (either symbol (identifier-name (type-name (class-of object)))))))
        ((edit-action)    (let* ((action (get-property~ evt object:))
                                 (action-item (require-action-item action))
                                 (action-handler (get-action-handler~ action-item)))
                            (edit-definitions~ appl (get-method-name~ action-handler))))
        ((inspect)        (inspect view))))))


;;;
;;;; Menu
;;;


(definition (get-tree-user-data tree pos)
  (let ((cell (view->tree~ tree pos)))
    (when cell
      (let* ((row (get-row~ tree (get-row~ cell)))
             (user-data (get-user-data~ row)))
        user-data))))


(definition (debug-view-menu view pos)
  (let* ((menu (new Debug-View-Menu))
         (host (get-host~ view))
         (guest (essay host (get-guest~ host)))
         (user-data (essay (is? view Tree-View) (get-tree-user-data view pos)))
         (action (get-action~ view))
         (action-handler (essay (get-action-handler~ view) (get-method-name~ (get-action-handler~ view)))))
    (new Separator-Item parent: menu)
    (new Label-Item parent: menu title: "Edit Host" action-handler: (new Event-Handler target: (current-view-debugger) method-name: 'on-debug-action properties: (list action: 'edit object: host)))
    (when guest
      (new Label-Item parent: menu title: "Edit Guest" action-handler: (new Event-Handler target: (current-view-debugger) method-name: 'on-debug-action properties: (list action: 'edit object: guest))))
    (new Label-Item parent: menu title: "Edit View" action-handler: (new Event-Handler target: (current-view-debugger) method-name: 'on-debug-action properties: (list action: 'edit object: view)))
    (when user-data
      (new Label-Item parent: menu title: "Edit Row Data" action-handler: (new Event-Handler target: (current-view-debugger) method-name: 'on-debug-action properties: (list action: 'edit object: user-data))))
    (when action
      (new Label-Item parent: menu title: "Edit Action" icon: {Bitmap-Resource "Link"} action-handler: (new Event-Handler target: (current-view-debugger) method-name: 'on-debug-action properties: (list action: 'edit-action object: action))))
    (when action-handler
      (new Label-Item parent: menu title: "Edit Action Handler" icon: {Bitmap-Resource "Link"}action-handler: (new Event-Handler target: (current-view-debugger) method-name: 'on-debug-action properties: (list action: 'edit symbol: action-handler))))
    (new Separator-Item parent: menu)
    (new Label-Item parent: menu title: "Inspect View" action-handler: (new Event-Handler target: (current-view-debugger) method-name: 'on-debug-action properties: (list action: 'inspect object: view)))
    (layout-menu~ menu)
    menu))


(class Debug-View-Menu extends Context-Menu
  
  
  (form
    (<install>
      (<Label-Item>     title: "Debug" default?: #t action-handler: {Event-Handler :view-debugger on-debug-action action: debug})
      @wait (<Separator-Item>)
      @wait (<Label-Item>     title: "Describe" icon: {Bitmap-Resource "Script"} action-handler: {Event-Handler :view-debugger on-debug-action action: describe})
      @wait (<Label-Item>     title: "Describe State" action-handler: {Event-Handler :view-debugger on-debug-action action: describe-state})))))
