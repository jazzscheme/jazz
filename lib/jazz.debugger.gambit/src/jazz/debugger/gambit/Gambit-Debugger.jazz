;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Gambit Debugger
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.debugger.gambit.Gambit-Debugger jazz


(import @wait (gambit)
        (jazz.debugger))


(class Gambit-Debugger extends Debugger)


@WAIT (


(class Gambit-Debugger extends Debugger
  
  
  ;;;
  ;;;; Debugger
  ;;;
  
  
  (method (start-debugger)
    (user-message "Starting gambit debugger...")
    (rdi-init rdi-function)
    (thread-start!
      (new-system-thread
        (lambda ()
          (rdi-debugger-init))
        'gambit-debugger-server)))
  
  
  (method (stop-debugger)
    )
  
  
  (method (get-processes (validate-liveness?: validate-liveness? #f))
    )
  
  
  (method public (detach-processes)
    )
  
  
  ;;;
  ;;;; Process
  ;;;
  
  
  (method (process=? x y)
    )
  
  
  (method (process-live? process)
    )
  
  
  (method (process-title process)
    )
  
  
  (method (process-icon process)
    )
  
  
  (method (process-threads process)
    )
  
  
  (method (present-process process)
    )
  
  
  (method (evaluate-expressions process syntax string container line col walk-debugger walk-cookie)
    )
  
  
  (method (process-detach process)
    )
  
  
  (method (process-exit process)
    )
  
  
  ;;;
  ;;;; Thread
  ;;;
  
  
  (method (thread-name thread)
    )
  
  
  (method (thread-state thread)
    )
  
  
  (method (thread-stops thread)
    )
  
  
  (method (break-thread process thread)
    )
  
  
  (method (terminate-thread process thread)
    )
  
  
  ;;;
  ;;;; Restart
  ;;;

  
  (method (restart-stop process restart)
    )
  
  
  ;;;
  ;;;; Stop
  ;;;
  
  
  (method (stop-kind stop)
    )
  
  
  (method (stop-reason stop)
    )
  
  
  (method (stop-frames stop)
    )
  
  
  (method (continue-stop process stop)
    )
  
  
  (method (step-stop process stop command)
    )
  
  
  ;;;
  ;;;; Frame
  ;;;
  
  
  (method (frame-name frame)
    )
  
  
  (method (frame-location frame)
    )
  
  
  (method (frame-variables frame)
    )
  
  
  (method (frame-variable-name frame variable)
    )
  
  
  (method (frame-variable-value frame variable)
    ))


;;;
;;;; Console
;;;


(definition console-no
  1)


(definition (open-console-window)
  (let ((manager (get-console-manager))
        (title (format "Gambit {s}" console-no)))
    (increase! console-no)
    (let ((text (register-console~ manager title)))
      (values text (setup-debugger-console-ports text)))))


@comment
(method public (register-console process thread)
  (call-event
    (lambda ()
      (let ((debugged-process (new Debugged-Process self process process))
            (text (register-debugger-console process thread)))
        (let ((console (new Debugger-Resource
                         debugged-process
                         text
                         (lambda ()
                           (unregister-debugger-console text)))))
          (register-debugger-resource debugged-process console)
          (object->serial console))))))


(definition (setup-debugger-console-ports text)
  (receive (head tail) (open-string-pipe (list permanent-close: #f))
    (set-console-port~ text head)
    tail))


@comment
(definition (setup-debugger-console-ports text process-proxy thread-proxy)
  (receive (head tail) (open-string-pipe (list permanent-close: #f))
    (set-console-port~ text head)
    (set-console-pump~ text (start-debugger-console-pump tail process-proxy thread-proxy))))


;;;
;;;; Dispatch
;;;


(definition rdi
  #f)


(definition (rdi-debugger-init)
  (set! rdi (rdi-create-server #f))
  (rdi-force-connection rdi))


(definition (rdi-function fn)
  (case fn
    ((register-console)
     rdi-register-console)
    ((console-output)
     rdi-console-output)
    (else
     (error "unknown function"))))


;;;
;;;; Console
;;;


(definition rdi-console-table
  (make-table))


(definition (rdi-register-console console-id)
  (receive (console-text console-port) (open-console-window)
    (table-set! rdi-console-table console-id console-text)
    (rdi-console-input-pump-start! console-id console-port)
    #f))


;; need to implement ctrl-c by calling rdi-user-interrupt
(definition (rdi-console-input-pump-start! console-id console-port)
  (thread-start!
    (new-system-thread
      (lambda ()
        (start-pump console-port
          (lambda (str)
            (if (not str)
                (rdi-console-input-eof rdi console-id)
              (rdi-console-input rdi console-id str)))))
      'gambit-console-pump)))


(definition (rdi-console-output console-id output)
  (let ((console-text
          (table-ref rdi-console-table console-id #f)))
    (if console-text
        (debugger-console-output console-text output)))
  #t)


;;;
;;;; Methods
;;;


(definition (rdi-console-input rdi console-id text)
  (rdi-remote-call rdi 'console-input console-id text))

(definition (rdi-console-input-eof rdi console-id)
  (rdi-remote-call rdi 'console-input console-id ""))

(definition (rdi-user-interrupt rdi console-id)
  (rdi-remote-call rdi 'user-interrupt console-id))

(definition (rdi-get-threads rdi)
  (rdi-remote-call rdi 'get-threads))

(definition (rdi-get-external-representation rdi $obj max-length)
  (rdi-remote-call rdi 'get-external-representation $obj max-length))))
