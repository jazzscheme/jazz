;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Jazz Debugger
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.debugger.jazz.Jazz-Debugger jazz


(import (jazz.application)
        (jazz.console)
        (jazz.debuggee)
        (jazz.debugger)
        (jazz.editor.jazz)
        (jazz.event)
        (jazz.feedback)
        (jazz.io)
        (jazz.network)
        (jazz.presence)
        (jazz.presence.transmission)
        (jazz.view)
        (jazz.window)
        (jazz.workspace))


(definition update-focused-process
  (request-service 'update-focused-process))


(class Jazz-Debugger extends Debugger

  
  (slot processes)
  (slot process-filenames)
  (slot process-processes)
  (slot process-properties)
  (slot process-information?)
  
  
  (method override (initialize self)
    (nextmethod self)
    (set! processes            '())
    (set! process-filenames    (make-table test: (~ process=? self) hash: process-hash))
    (set! process-processes    (make-table test: (~ process=? self) hash: process-hash))
    (set! process-properties   (make-table test: (~ process=? self) hash: process-hash))
    (set! process-information? (make-table test: (~ process=? self) hash: process-hash)))
  
  
  ;;;
  ;;;; Debugger
  ;;;
  
  
  (method override (start-debugger self)
    )
  
  
  (method override (stop-debugger self)
    )
  
  
  (method override (get-processes self (validate-liveness?: validate-liveness? #f))
    (when validate-liveness?
      (validate-processes self))
    processes)
  
  
  (method override (validate-processes self)
    (define (live-process? process)
      (or (is? process Local-Proxy)
          (live? process)))
    
    (let ((valid (new-queue)))
      (for-each (lambda (process)
                  (if (live-process? process)
                      (enqueue valid process)
                    (clear-runtime-information self process)
                    (detach-process (get-debugger-manager) (new Debugged-Process self process process))))
                processes)
      (set! processes (queue-list valid))))
  
  
  (method override (detach-processes self)
    (validate-processes self)
    (let ((local-process (get-local-process)))
      (for-each (lambda (process)
                  (when (not (proxy=? process local-process))
                    (detach-process process)))
                processes)))
  
  
  (method override (standard-process-image self)
    #f)
  
  
  ;;;
  ;;;; Process
  ;;;
  
  
  (method override (process=? self x y)
    (and (proxy-server=? x y)
         (equal? (get-id x) (get-id y))))
  
  
  (method override (process-live? self process)
    (live? process))
  
  
  (method override (process-title self process)
    (get-title process))
  
  
  (method override (process-icon self process)
    (get-icon process))
  
  
  (method override (process-threads self process)
    (with-remote-exception-handler (new Debugged-Process self process process)
      (lambda ()
        (get-threads process))))
  
  
  (method override (present-process self process)
    (present-process-title/traits (get-title process) (get-traits process)))
  
  
  (method override (reload-process self process)
    (with-remote-exception-handler (new Debugged-Process self process process)
      (lambda ()
        (reload-process process))))
  
  
  (method override (process-focusable? self process)
    #t)
  
  
  (method override (transmit-runtime-information self process what)
    (with-remote-exception-handler (new Debugged-Process self process process)
      (lambda ()
        (transmit-runtime-information process what))))
  
  
  (method override (evaluate-expressions self process forms syntax str container line col evaluation-mode walk-debugger walk-cookie)
    (with-remote-exception-handler (new Debugged-Process self process process)
      (lambda ()
        (evaluate-expressions process forms syntax str container line col evaluation-mode walk-debugger walk-cookie))))
  
  
  (method override (profiler-start self process)
    (with-remote-exception-handler (new Debugged-Process self process process)
      (lambda ()
        (profiler-start process))))
  
  
  (method override (profiler-stop self process)
    (with-remote-exception-handler (new Debugged-Process self process process)
      (lambda ()
        (profiler-stop process))))
  
  
  (method override (profiler-profiles self process)
    (with-remote-exception-handler (new Debugged-Process self process process)
      (lambda ()
        (profiler-profiles process))))
  
  
  (method override (profiler-selected-profile self process)
    (with-remote-exception-handler (new Debugged-Process self process process)
      (lambda ()
        (profiler-selected-profile process))))
  
  
  (method override (profiler-selected-profile-set! self process name)
    (with-remote-exception-handler (new Debugged-Process self process process)
      (lambda ()
        (profiler-selected-profile-set! process name))))
  
  
  (method override (profiler-profile self process)
    (with-remote-exception-handler (new Debugged-Process self process process)
      (lambda ()
        (profiler-profile process))))
  
  
  (method override (profile-reset self process profiler depth all?)
    (with-remote-exception-handler (new Debugged-Process self process process)
      (lambda ()
        (profile-reset process profiler depth all?))))
  
  
  (method override (tracker-start self process)
    (with-remote-exception-handler (new Debugged-Process self process process)
      (lambda ()
        (tracker-start process))))
  
  
  (method override (tracker-stop self process)
    (with-remote-exception-handler (new Debugged-Process self process process)
      (lambda ()
        (tracker-stop process))))
  
  
  (method override (tracker-trackings self process)
    (with-remote-exception-handler (new Debugged-Process self process process)
      (lambda ()
        (tracker-trackings process))))
  
  
  (method override (tracker-selected-tracking self process)
    (with-remote-exception-handler (new Debugged-Process self process process)
      (lambda ()
        (tracker-selected-tracking process))))
  
  
  (method override (tracker-selected-tracking-set! self process name)
    (with-remote-exception-handler (new Debugged-Process self process process)
      (lambda ()
        (tracker-selected-tracking-set! process name))))
  
  
  (method override (tracker-tracking self process)
    (with-remote-exception-handler (new Debugged-Process self process process)
      (lambda ()
        (tracker-tracking process))))
  
  
  (method override (tracking-reset self process all?)
    (with-remote-exception-handler (new Debugged-Process self process process)
      (lambda ()
        (tracking-reset process all?))))
  
  
  (method override (inspect-serial self process serial max-content)
    (with-remote-exception-handler (new Debugged-Process self process process)
      (lambda ()
        (inspect-serial process serial max-content))))
  
  
  (method override (present-serial self process serial)
    (with-remote-exception-handler (new Debugged-Process self process process)
      (lambda ()
        (present-serial process serial))))
  
  
  (method override (try-out self process class)
    (with-remote-exception-handler (new Debugged-Process self process process)
      (lambda ()
        (try-out process class))))
  
  
  (method override (process-detach self process)
    (with-remote-exception-handler (new Debugged-Process self process process)
      (lambda ()
        (detach-process process))))
  
  
  (method override (process-quit self process)
    (with-remote-exception-handler (new Debugged-Process self process process)
      (lambda ()
        (quit-process process))))
  
  
  ;;;
  ;;;; Thread
  ;;;
  
  
  (method override (thread=? self x y)
    (and (proxy-server=? x y)
         (= (get-id x) (get-id y))))
  
  
  (method override (get-thread-name self process thread)
    (get-name thread))
  
  
  (method override (get-thread-state self process thread)
    (get-state thread))
  
  
  (method override (get-thread-priority self process thread)
    (get-priority thread))
  
  
  (method override (get-thread-id self process thread)
    (get-id thread))
  
  
  (method override (get-thread-stops self process thread)
    (with-remote-exception-handler (new Debugged-Process self process process)
      (lambda ()
        (get-stops thread))))
  
  
  (method override (get-thread-active-stop self process thread)
    (let ((stops (get-thread-stops self process thread)))
      (if (null? stops)
          #f
        (last stops))))
  
  
  (method override (break-thread self process thread)
    (with-remote-exception-handler (new Debugged-Process self process process)
      (lambda ()
        (break-thread process thread))))
  
  
  (method override (repl-thread self process thread)
    (with-remote-exception-handler (new Debugged-Process self process process)
      (lambda ()
        (repl-thread process thread))))
  
  
  (method override (terminate-thread self process thread preserve-console?)
    (with-remote-exception-handler (new Debugged-Process self process process)
      (lambda ()
        (terminate-thread process thread preserve-console?))))
  
  
  (method override (kill-thread self process thread)
    (with-remote-exception-handler (new Debugged-Process self process process)
      (lambda ()
        (kill-thread process thread))))
  
  
  (method override (set-repl-frame self process thread frame)
    (with-remote-exception-handler (new Debugged-Process self process process)
      (lambda ()
        (set-repl-frame thread frame))))
    
  
  ;;;
  ;;;; Restart
  ;;;
  
  
  (method override (restart=? self x y)
    (and (proxy-server=? x y)
         (= (get-id x) (get-id y))))
  
  
  (method override (restart-name self process restart)
    (get-name restart))
  
  
  (method override (restart-message self process restart)
    (get-message restart))

  
  (method override (restart-stop self process restart)
    (with-remote-exception-handler (new Debugged-Process self process process)
      (lambda ()
        (restart-stop process restart))))

  
  (method override (thread-debugged-continuation? self thread)
    (get-debugged-continuation? thread))
  
  
  ;;;
  ;;;; Stop
  ;;;
  
  
  (method override (stop=? self x y)
    (and (proxy-server=? x y)
         (= (get-id x) (get-id y))))
  
  
  (method override (stop-kind self process stop)
    (get-kind stop))
  
  
  (method override (stop-reason self process stop)
    (get-reason stop))
  
  
  (method override (stop-detail self process stop)
    (with-remote-exception-handler (new Debugged-Process self process process)
      (lambda ()
        (get-detail stop))))
  
  
  (method override (stop-location self process stop)
    (get-location stop))
  
  
  (method override (stop-restarts self process stop)
    (with-remote-exception-handler (new Debugged-Process self process process)
      (lambda ()
        (get-restarts stop))))
  
  
  (method override (stop-frames self process stop)
    (with-remote-exception-handler (new Debugged-Process self process process)
      (lambda ()
        (get-frames stop))))
  
  
  (method override (continue-stop self process stop)
    (with-remote-exception-handler (new Debugged-Process self process process)
      (lambda ()
        (continue-stop process stop))))
  
  
  (method override (step-stop self process stop command)
    (with-remote-exception-handler (new Debugged-Process self process process)
      (lambda ()
        (step-stop process stop command))))
  
  
  ;;;
  ;;;; Frame
  ;;;
  
  
  (method override (frame=? self x y)
    (and (proxy-server=? x y)
         (= (get-id x) (get-id y))))
  
  
  (method override (frame-name self process frame)
    (get-name frame))
  
  
  (method override (frame-interpreted? self process frame)
    (get-interpreted? frame))
  
  
  (method override (frame-hidden? self process frame)
    (get-hidden? frame))
  
  
  (method override (frame-location self process frame)
    (with-remote-exception-handler (new Debugged-Process self process process)
      (lambda ()
        (get-location frame))))
  
  
  (method override (frame-variables self process frame kind)
    (with-remote-exception-handler (new Debugged-Process self process process)
      (lambda ()
        (get-variables frame kind))))
  
  
  ;;;
  ;;;; Inspect
  ;;;
  
  
  (method public (inspect-object self process info)
    (post-event
      (lambda ()
        (let ((debugged-process (new Debugged-Process self process process)))
          (inspect-info self debugged-process info)))))
  
  
  (method public (inspect-info self debugged-process info)
    (let ((client (cons info :remote)))
      (new-frame Inspector-View process: debugged-process client: client)))
  
  
  (method public (inspect-continuation self debugged-process serial)
    (with-remote-exception-handler debugged-process
      (lambda ()
        (inspect-continuation (get-process debugged-process) serial))))
  
  
  ;;;
  ;;;; Process
  ;;;


  (method package (attach-process self process focus?)
    (unless (member? process processes test: (~ process=? self))
      (send-event
        (lambda ()
          (set! processes (append! processes (list process)))
          (attach-process (get-debugger-manager) (new Debugged-Process self process process) focus?)))))
  
  
  (method package (ready-process self process cookie)
    (let ((debugged-process (new Debugged-Process self process process)))
      (let ((what (if (process-needs-filenames? (get-debugger-manager) debugged-process)
                      'all
                    'properties)))
        (transmit-runtime-information process what))
      (send-event
        (lambda ()
          (when cookie
            (invoke-registered-cookie-procedures debugged-process cookie))))))
  
  
  (method package (update-process self process)
    (when (remote-proxy? process)
      (let ((actual (find-in processes process test: (~ process=? self))))
        (when (and actual (remote-proxy? actual))
          (set-values actual (get-values process))
          (send-event
            (lambda ()
              (update (get-processes-view))
              (update-focused-process)
              (update-console-buttons (get-console-manager-guest))))))))


  (method package (detach-process self process)
    (when (member? process processes test: (~ process=? self))
      (when (remote-proxy? process)
        (catch (connection-exception? exc)
          (close-remote-proxy process)))
      (send-event
        (lambda ()
          (set! processes (remove! process processes test: (~ process=? self)))
          (clear-runtime-information self process)
          (detach-process (get-debugger-manager) (new Debugged-Process self process process))))))
  
  
  ;;;
  ;;;; Filenames
  ;;;
  
  
  (method package (unavailable-runtime-information self process)
    (table-set! process-filenames process '())
    (table-set! process-processes process '())
    (table-set! process-properties process '())
    (table-set! process-information? process #f)
    (process-evaluate-always (get-debugger-manager) (new Debugged-Process self process process))
    (let ((processes-view (get-processes-view)))
      (when processes-view
        (send-event
          (lambda ()
            (update processes-view))))))
  
  
  (method package (receive-runtime-information self process filenames processes properties)
    (table-set! process-filenames process filenames)
    (table-set! process-processes process processes)
    (table-set! process-properties process properties)
    (table-set! process-information? process #t)
    (let ((processes-view (get-processes-view)))
      (when processes-view
        (send-event
          (lambda ()
            (update processes-view))))))
  
  
  (method override (received-runtime-filenames? self process)
    (table-ref process-filenames process #f))
  
  
  (method override (add-filename-processes self queue filename)
    ;; quick hack for mac/windows parallels debugging
    (define (mac/windows-filename=? mac windows)
      (let ((effective-mac (cond ((starts-with? mac "/Volumes/C")
                                  (string-append "c:" (substring mac (string-length "/Volumes/C") (string-length mac))))
                                 ((starts-with? windows "z:")
                                  (let ((pos (search mac "/Users/")))
                                    (if pos
                                        (let ((pos (search mac "/" start: (string-length "/Users/"))))
                                          (if pos
                                              (string-append "z:" (substring mac pos (string-length mac)))
                                            filename))
                                      filename)))
                                 (else
                                  filename))))
        (filename=? effective-mac windows)))
    
    (define (add-process process)
      (let ((filenames (table-ref process-filenames process #f)))
        (when (and filenames
                   (member? filename filenames test: mac/windows-filename=?))
          (enqueue queue (new Debugged-Process self process process)))))
    
    (for-each add-process processes))
  
  
  (method override (clear-runtime-information self process)
    (table-clear process-filenames process)
    (table-clear process-processes process)
    (table-clear process-properties process)
    (table-clear process-information? process))
  
  
  ;;;
  ;;;; Processes
  ;;;
  
  
  (method override (determine-process-processes self process)
    (or (table-ref process-processes process #f) '()))
  
  
  (method override (determine-process-child? self process child)
    (member? child (determine-process-processes self process) test: (~ process=? self)))
  
  
  ;;;
  ;;;; Properties
  ;;;
  
  
  (method override (determine-process-properties self process)
    (table-ref process-properties process '()))
  
  
  (method override (determine-process-property self process property default)
    (getf (determine-process-properties self process) property not-found: default))
      
  
  ;;;
  ;;;; Information
  ;;;
  
  
  (method override (determine-process-information? self process)
    (table-ref process-information? process #f))

  
  ;;;
  ;;;; Evaluation
  ;;;
  
  
  (method protected virtual (evaluating-code self thunk)
    (thunk))

  
  ;;;
  ;;;; Problems
  ;;;
  
  
  (definition last-reported-cookie
    #f)
  
  
  (method protected virtual (report-walk-problems self process reason detail cookie)
    (when (or (not cookie) (not (eqv? cookie last-reported-cookie)))
      (set! last-reported-cookie cookie)
      (let ((problems-view (get-problems-view)))
        (when problems-view
          (send-event
            (lambda ()
              (let ((code (message-box (walk-problems-message detail)
                                       type: 'question
                                       title: "Problems"
                                       yes: "Highlight"
                                       no: "Ignore")))
                (case code
                  ((yes)
                   (report-problems problems-view detail highlight?: #t)
                   (ensure-focusable problems-view))))))))))
  
  
  ;;;
  ;;;; Console
  ;;;
  
  
  (method public (register-console self process thread select?)
    (call-event
      (lambda ()
        (let ((actual (or (find-in processes process test: (~ process=? self)) process)))
          (let ((debugged-process (new Debugged-Process self actual actual))
                (debugged-thread (new Debugged-Thread self actual thread)))
            (let ((text (register-console-text self debugged-process debugged-thread select?)))
              (let ((console (new Debugger-Resource
                               debugged-process
                               debugged-thread
                               text
                               (lambda ()
                                 (unregister-console-text self text)))))
                (register-debugger-resource debugged-process console)
                (object->serial console))))))))
  
  
  (method protected virtual (register-console-text self debugged-process debugged-thread select?)
    (register-debugger-console debugged-process debugged-thread select?))
  
  
  (method protected virtual (unregister-console-text self text)
    (unregister-debugger-console text))
  
  
  (method public (unregister-console self resource)
    (close-resource (serial->object resource)))
  
  
  (method public virtual (select-console self resource)
    (let ((text (get-reference (serial->object resource))))
      (let ((console (get-console text)))
        (select-console (get-console-manager-guest) console))))
  
  
  (method public (persist-console self resource)
    (persist-resource (serial->object resource)))
  
  
  (method public virtual (console-output self resource str)
    (let ((text (get-reference (serial->object resource))))
      (debugger-console-output text str)))
  
  
  (method public virtual (clear-console self resource)
    (let ((text (get-reference (serial->object resource))))
      (clear-console text)))
  
  
  ;;;
  ;;;; Status
  ;;;
  
  
  (method public (status-message self message)
    (user-message message))
  
  
  ;;;
  ;;;; Window
  ;;;
  
  
  (method public (get-toplevel-hwnd self)
    (get-handle (current-toplevel)))
  
  
  ;;;
  ;;;; Stop
  ;;;
  
  
  (method public (register-stop self process thread stop (step?: step? #f))
    (let ((debugged-process (new Debugged-Process self process process))
          (debugged-thread (new Debugged-Thread self process thread))
          (debugged-stop (new Debugged-Stop self process stop)))
      (send-event
        (lambda ()
          (register-stop (get-debugger-manager) debugged-process debugged-thread debugged-stop step?: step?)))))
  
  
  (method public (unregister-stop self process thread stop)
    (let ((debugged-process (new Debugged-Process self process process))
          (debugged-thread (new Debugged-Thread self process thread))
          (debugged-stop (new Debugged-Stop self process stop)))
      (send-event
        (lambda ()
          (unregister-stop (get-debugger-manager) debugged-process debugged-thread debugged-stop)))))))
