;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Jazz Debugger
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.debugger.jazz.Jazz-Debugger jazz


(import (jazz.console)
        (jazz.debuggee)
        (jazz.debugger)
        (jazz.io)
        (jazz.editor.jazz)
        (jazz.jrm)
        (jazz.media)
        (jazz.network)
        (jazz.system)
        (jazz.ui.view)
        (jazz.ui.window)
        (jazz.ui.workspace))


(class Jazz-Debugger extends Debugger

  
  (slot processes initialize '())
  
  
  ;;;
  ;;;; Debugger
  ;;;
  
  
  (method override (start-debugger)
    )
  
  
  (method override (stop-debugger)
    )
  
  
  (method override (get-processes (validate-liveness?: validate-liveness? #f))
    (when validate-liveness?
      (validate-processes))
    processes)
  
  
  (method override (validate-processes)
    (define (live-process? process)
      (or (is? process Local-Proxy)
          (live?~ process)))
    
    (let ((valid (new-queue)))
      (for-each (lambda (process)
                  (if (live-process? process)
                      (enqueue valid process)
                    (detach-process~ (get-debugger-manager)
                      (new Debugged-Process self process process)
                      (unless (proxy=? process (get-local-process))
                        (new Debugged-Process self (get-local-process) (get-local-process))))))
                processes)
      (set! processes (queue-list valid))))
  
  
  (method override (detach-processes)
    (validate-processes)
    (let ((local-process (get-local-process)))
      (for-each (lambda (process)
                  (when (not (proxy=? process local-process))
                    (detach-process~ process)))
                processes)))
  
  
  ;;;
  ;;;; Process
  ;;;
  
  
  (method override (process=? x y)
    (proxy-server=? x y))
  
  
  (method override (process-live? process)
    (live?~ process))
  
  
  (method override (process-title process)
    (get-title~ process))
  
  
  (method override (process-icon process)
    (get-icon~ process))
  
  
  (method override (process-threads process)
    (get-threads~ process))
  
  
  (method override (present-process process)
    (let ((title (either (get-title~ process) "Process")))
      (if (local-proxy? process)
          title
        (let ((host (get-host~ (get-ior~ process))))
          (if (host=? host (listening-host~ (get-remote-listener)))
              title
            (format "{a} at {a}" title (host->string host)))))))
  
  
  (method override (reload-process process)
    (reload-process~ process))
  
  
  (method override (process-focusable? process)
    #t)
  
  
  (method override (evaluate-expressions process syntax str container line col)
    (evaluate-expressions~ process syntax str container line col))
  
  
  (method override (profiler-start process)
    (profiler-start~ process))
  
  
  (method override (profiler-stop process)
    (profiler-stop~ process))
  
  
  (method override (profiler-reset process)
    (profiler-reset~ process))
  
  
  (method override (profiler-result process)
    (profiler-result~ process))
  
  
  (method override (inspect-serial process serial)
    (inspect-serial~ process serial))
  
  
  (method override (process-detach process)
    (detach-process~ process))
  
  
  (method override (process-exit process)
    (exit-process~ process))
  
  
  ;;;
  ;;;; Thread
  ;;;
  
  
  (method override (thread=? x y)
    (and (proxy-server=? x y)
         (= (get-id~ x) (get-id~ y))))
  
  
  (method override (thread-name process thread)
    (get-name~ thread))
  
  
  (method override (thread-state process thread)
    (get-state~ thread))
  
  
  (method override (thread-stops process thread)
    (get-stops~ thread))
  
  
  (method override (thread-active-stop process thread)
    (let ((stops (thread-stops process thread)))
      (if (null? stops)
          {}
        (last stops))))
  
  
  (method override (break-thread process thread)
    (break-thread~ process thread))
  
  
  (method override (set-repl-frame process thread frame)
    (set-repl-frame~ thread frame))
    
  
  ;;;
  ;;;; Restart
  ;;;
  
  
  (method override (restart=? x y)
    (and (proxy-server=? x y)
         (= (get-id~ x) (get-id~ y))))
  
  
  (method override (restart-name process restart)
    (get-name~ restart))
  
  
  (method override (restart-message process restart)
    (get-message~ restart))

  
  (method override (restart-stop process restart)
    (restart-stop~ process restart))

  
  ;;;
  ;;;; Stop
  ;;;
  
  
  (method override (stop=? x y)
    (and (proxy-server=? x y)
         (= (get-id~ x) (get-id~ y))))
  
  
  (method override (stop-kind process stop)
    (get-kind~ stop))
  
  
  (method override (stop-reason process stop)
    (get-reason~ stop))
  
  
  (method override (stop-detail process stop)
    (get-detail~ stop))
  
  
  (method override (stop-location process stop)
    (get-location~ stop))
  
  
  (method override (stop-restarts process stop)
    (get-restarts~ stop))
  
  
  (method override (stop-frames process stop)
    (get-frames~ stop))
  
  
  (method override (continue-stop process stop)
    (continue-stop~ process stop))
  
  
  (method override (step-stop process stop command)
    (step-stop~ process stop command))
  
  
  ;;;
  ;;;; Frame
  ;;;
  
  
  (method override (frame=? x y)
    (and (proxy-server=? x y)
         (= (get-id~ x) (get-id~ y))))
  
  
  (method override (frame-name process frame)
    (get-name~ frame))
  
  
  (method override (frame-interpreted? process frame)
    (get-interpreted?~ frame))
  
  
  (method override (frame-location process frame)
    (get-location~ frame))
  
  
  (method override (frame-variables process frame kind)
    (get-variables~ frame kind))
  
  
  ;;;
  ;;;; Inspect
  ;;;
  
  
  (method public (inspect process info)
    (post-event
      (lambda ()
        (bind (serial presentation more? mutable? kind) info
          (let ((title (format "Inspector - {a}" presentation))
                (debugged-process (new Debugged-Process self process process))
                (client (cons info :remote)))
            (new-frame Inspector-View host-title: title process: debugged-process client: client))))))
  
  
  ;;;
  ;;;; Process
  ;;;


  (method (attach-process process focus?)
    (unless (member? process processes test: process=?)
      (execute-event
        (lambda ()
          (set! processes (append! processes (list process)))
          (attach-process~ (get-debugger-manager) (new Debugged-Process self process process) focus?)))))
  
  
  (method (ready-process process cookie)
    (execute-event
      (lambda ()
        (when cookie
          (let ((proc (get-registered-cookie cookie)))
            (when proc
              (proc cookie)))))))
  
  
  (method (update-process process)
    (when (remote-proxy? process)
      (let ((actual (find-in processes process test: process=?)))
        (when (and actual (remote-proxy? actual))
          (set-values~ actual (get-values~ process))
          (execute-event
            (lambda ()
              (update~ (get-processes-view))
              (update-focused-process~ (find-status-bar~ (get-application)))
              (update-console-buttons~ (get-console-manager))))))))


  (method (detach-process process)
    (when (member? process processes test: process=?)
      (execute-event
        (lambda ()
          (set! processes (remove! process processes test: process=?))
          (let ((debugged-process (new Debugged-Process self process process))
                (best-debugged-process (unless (proxy=? process (get-local-process))
                                         (new Debugged-Process self (get-local-process) (get-local-process)))))
            (detach-process~ (get-debugger-manager) debugged-process best-debugged-process))))))
  
  
  ;;;
  ;;;; Console
  ;;;
  
  
  (method public (register-console process thread select?)
    (call-event
      (lambda ()
        (let ((actual (find-in processes process test: process=?)))
          (let ((debugged-process (new Debugged-Process self actual actual))
                (debugged-thread (new Debugged-Thread self actual thread))
                (text (register-debugger-console actual thread select?)))
            (let ((console (new Debugger-Resource
                             debugged-process
                             debugged-thread
                             text
                             (lambda ()
                               (unregister-debugger-console text)))))
              (register-debugger-resource debugged-process console)
              (object->serial console)))))))
  
  
  (method public (unregister-console resource)
    (close-resource~ (serial->object resource)))
  
  
  (method public (select-console resource)
    (let ((text (get-reference~ (serial->object resource))))
      (let ((console (get-console~ text)))
        (select-console~ (get-console-manager) console))))
  
  
  (method public (console-output resource str)
    (let ((text (get-reference~ (serial->object resource))))
      (debugger-console-output text str)))
  
  
  ;;;
  ;;;; Status
  ;;;
  
  
  (method public (status-message message)
    (user-message message))
  
  
  ;;;
  ;;;; Window
  ;;;
  
  
  (method public (get-toplevel-hwnd)
    (get-handle~ (get-toplevel)))
  
  
  ;;;
  ;;;; Stop
  ;;;
  
  
  (method public (register-stop process thread stop (step?: step? #f))
    (let ((debugged-process (new Debugged-Process self process process))
          (debugged-thread (new Debugged-Thread self process thread))
          (debugged-stop (new Debugged-Stop self process stop)))
      (execute-event
        (lambda ()
          (register-stop~ (get-debugger-manager) debugged-process debugged-thread debugged-stop step?: step?)))))
  
  
  (method public (unregister-stop process thread stop)
    (let ((debugged-process (new Debugged-Process self process process))
          (debugged-thread (new Debugged-Thread self process thread))
          (debugged-stop (new Debugged-Stop self process stop)))
      (execute-event
        (lambda ()
          (unregister-stop~ (get-debugger-manager) debugged-process debugged-thread debugged-stop)))))))
