;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Jazz Projects
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.debugger.jazz.Jazz-Project jazz


(import (jazz.debugger)
        (jazz.debugger.gambit)
        (jazz.designer)
        (jazz.ide)
        (jazz.io)
        (jazz.jml)
        (jazz.jrm)
        (jazz.library)
        (jazz.project)
        (jazz.network)
        (jazz.system)
        (jazz.ui.dialog)
        (jazz.ui.view))


(class Jazz-Project extends Gambit-Project
  
  
  (property directory     initialize #f accessors generate)
  (property configuration initialize #f accessors generate)
  (property product       initialize #f accessors generate)
  (property profile       initialize #f accessors generate)
  (property debug         initialize #f accessors generate)
  (property test          initialize #f accessors generate)
  (property arguments     initialize #f accessors generate)


  ;;;
  ;;;; Test
  ;;;
  
  
  (method override (project-test (profile: profile #f) (command-action: command-action #f) (command-arguments: command-arguments #f) (show-console?: show-console? #f) (wait?: wait? #f))
    (cond (test
           (load-unit test))
          (product
           (launch
             executable: (project-kernel)
             action: "-test"
             debugger?: #f
             profile: profile
             command-action: command-action
             command-arguments: command-arguments
             show-console?: show-console?
             wait?: wait?))
          (else
           (message-box "This project doesn't define a product property"))))


  ;;;
  ;;;; Run
  ;;;
  
  
  (method override (project-run (profile: profile #f) (command-action: command-action #f) (command-arguments: command-arguments #f) (show-console?: show-console? #f) (wait?: wait? #f))
    (if product
        (launch
          executable: (project-kernel)
          debugger?: #f
          profile: profile
          command-action: command-action
          command-arguments: command-arguments
          show-console?: show-console?
          wait?: wait?)
      (message-box "This project doesn't define a product property")))


  ;;;
  ;;;; Debug
  ;;;
  
  
  (method override (project-debug (executable: executable #f) (debugger-interactive?: debugger-interactive? #f) (debugger-cookie: debugger-cookie #f) (profile: profile #f) (command-action: command-action #f) (command-arguments: command-arguments #f) (show-console?: show-console? #f) (wait?: wait? #f))
    (if debug
        (parameterize ((script-arguments (cons self (or arguments '()))))
          (load-script (parse~ debug)))
      (if product
          (launch
            executable: executable
            debugger?: #t
            debugger-interactive?: debugger-interactive?
            debugger-cookie: debugger-cookie
            profile: profile
            command-action: command-action
            command-arguments: command-arguments
            show-console?: show-console?
            wait?: wait?)
        (message-box "This project doesn't define a product property"))))


  ;;;
  ;;;; Launch
  ;;;
  
  
  (method override (launch (executable: executable #f) (directory: directory #f) (kernel-arguments: kernel-arguments #f) (action: action #f) (debugger?: debugger? #f) (debugger-cookie: debugger-cookie #f) (debugger-interactive?: debugger-interactive? #f) (profile: profile #f) (command-action: command-action #f) (command-arguments: command-arguments #f) (show-console?: show-console? #f) (wait?: wait? #f))
    (define (determine-kernel)
      (cond ((eq? executable :choose) (choose-kernel))
            (executable executable)
            (else (project-kernel))))
    
    (define (choose-kernel)
      (choose-file
        title: "Choose Kernel"
        extensions: (list (executable-extension kernel-platform))))
    
    (let ((ide (get-process)))
      (when debugger?
        (start-remote-server~ ide)
        (start-debuggers~ ide))
      (let* ((executable               (determine-kernel))
             (runtime-arg              (list @wait "-:m250000,h1000000"))
             (product-arg              (list (or action "-run") (->string product)))
             (kernel-arguments-arg     (if kernel-arguments kernel-arguments '()))
             (debugger-arg             (if debugger? (list "-debugger" (encode-host/port (listening-host~ (get-remote-listener)) (listening-port~ (get-remote-listener)))) '()))
             (debugger-cookie-arg      (if debugger? (list "-debugger-cookie" (->string (or debugger-cookie (register-debugger-cookie (lambda (process cookie) (clear-user-message)))))) '()))
             (debugger-interactive-arg (if (and debugger? debugger-interactive?) (list "-debugger-interactive" "true") '()))
             (profile                  (or profile (project-profile)))
             (profile-arg              (if profile (list "-profile" (->string profile)) '()))
             (action-arg               (if command-action (list command-action) '()))
             (arguments-arg            (if command-arguments command-arguments '()))
             (arguments                (append runtime-arg action-arg product-arg kernel-arguments-arg debugger-arg debugger-cookie-arg debugger-interactive-arg profile-arg arguments-arg)))
        (save-all~ ide)
        (when debugger?
          (user-message "Debugging {a}..." (get-presentation-property)))
        (launch-executable executable
          directory: (or directory directory~self)
          arguments: arguments
          show-console?: show-console?))))
  
  
  (method protected virtual (project-profile)
    profile)
  
  
  (method public (project-kernel)
    (let ((executable (if directory
                          (let ((kernel-name (add-extension "kernel" (executable-extension kernel-platform))))
                            (cond ((directory? configuration)
                                   (new-directory~ configuration kernel-name))
                                  ((string? configuration)
                                   (new-file~ (new-directory~ directory configuration) kernel-name))
                                  ((not configuration)
                                   (find-actual-kernel))
                                  (else
                                   (error "Ill-formed configuration: {s}" configuration))))
                        (find-actual-kernel))))
      (if (and executable (exists?~ executable))
          executable
        (message-box (format "Unable to find kernel{?~: {a}~}" executable))
        (throw-cancel))))
  
  
  (method (project-executable)
    ;; quick hack
    (define (filename-heuristic build)
      (let ((info (car build)))
        (if (symbol? info)
            (symbol->string info)
          (symbol->string (car info)))))
    
    (receive (package descriptor) (get-product-descriptor product)
      (let ((build (product-descriptor-build descriptor)))
        (if build
            (let ((kernel (project-kernel))
                  (filename (filename-heuristic build)))
              (new-brother~ kernel (add-extension filename (executable-extension kernel-platform))))
          (message-box "This project doesn't define a build descriptor")
          (throw-cancel)))))


  ;;;
  ;;;; Build
  ;;;


  (method override (project-build)
    (if product
        (begin
          ;; should be only the project's files...
          (save-all~ (get-application))
          (let* ((kernel           (project-kernel))
                 (repositories-arg (let ((projects (find-repository 'Projects))) (if projects (list "-repositories" (format "\"{a}\"" (repository-directory projects))) '())))
                 (make-arg         (list "-make" (->string product)))
                 ;; until truncation bug fixed in parallel build
                 (debug-arg        (list "-debug"))
                 (arguments        (append repositories-arg make-arg debug-arg)))
            (launch-executable kernel arguments: arguments show-console?: #t)))
      (message-box "This project doesn't define a product property")))
  
  
  ;;;
  ;;;; Descriptor
  ;;;
  
  
  (method meta override (get-class-descriptor)
    (new Jazz-Project-Descriptor)))


;;;
;;;; Design
;;;


(submodule design


(import (jazz.designer))


(class Jazz-Project-Descriptor extends Gambit-Project-Descriptor
  
  
  (form
    (<install>
      (<properties~>           categorized: (title minimum-heap maximum-heap directory configuration product profile)
        (<Property-Descriptor> name: directory)
        (<Property-Descriptor> name: configuration)
        (<Property-Descriptor> name: product)
        (<Property-Descriptor> name: profile)))))))
