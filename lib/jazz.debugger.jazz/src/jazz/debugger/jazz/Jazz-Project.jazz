;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Jazz Projects
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.debugger.jazz.Jazz-Project jazz


(import (jazz.application)
        (jazz.debugger)
        (jazz.debugger.gambit)
        (jazz.descriptor)
        (jazz.designer)
        (jazz.feedback)
        (jazz.ide)
        (jazz.io)
        (jazz.network)
        (jazz.preferences)
        (jazz.presence)
        (jazz.process)
        (jazz.project)
        (jazz.settings)
        (jazz.view))


(class Jazz-Project extends Gambit-Project
  
  
  (property directory         initialize #f accessors generate)
  (property configuration     initialize #f accessors generate)
  (property executable        initialize #f accessors generate)
  (property product           initialize #f accessors generate)
  (property profile           initialize #f accessors generate)
  (property home              initialize #f accessors generate)
  (property working           initialize #f accessors generate)
  (property arguments         initialize #f accessors generate)
  (property debug-script      initialize #f accessors generate)
  (property test-unit         initialize #f accessors generate)
  (property validate-script   initialize #f accessors generate)
  (property script-arguments  initialize #f accessors generate)


  ;;;
  ;;;; Action
  ;;;
  
  
  (method override (project-action self launch-action . rest)
    (case launch-action
      ((run) (apply project-run self rest))
      ((debug) (apply project-debug self rest))
      ((test) (apply project-test self rest))
      ((validate) (apply project-validate self rest))
      (else (error "Unknown launch action: {s}" launch-action))))


  ;;;
  ;;;; Run
  ;;;
  
  
  (method override (project-run self (profile: profile #f) (command-action: command-action #f) (command-arguments: command-arguments #f) (show-console?: show-console? #f) (wait?: wait? #f))
    (if debug-script
        (parameterize ((current-script-arguments `(run ,self ,@(or script-arguments '()))))
          (load-script (parse debug-script)))
      (if product
          (launch self
            executable: (project-executable self)
            debugger?: #f
            profile: profile
            command-action: command-action
            command-arguments: command-arguments
            show-console?: show-console?
            wait?: wait?
            invite: "Running")
        (message-box "This project doesn't define a product property"))))


  ;;;
  ;;;; Debug
  ;;;
  
  
  (method override (project-debug self (executable: executable #f) (debugger-interactive?: debugger-interactive? #f) (debugger-cookie: debugger-cookie #f) (profile: profile #f) (command-action: command-action #f) (command-arguments: command-arguments #f) (show-console?: show-console? #f) (wait?: wait? #f))
    (if debug-script
        (parameterize ((current-script-arguments `(debug ,self ,@(or script-arguments '()) command-arguments: ,command-arguments)))
          (load-script (parse debug-script)))
      (if product
          (launch self
            executable: executable
            debugger?: #t
            debugger-interactive?: debugger-interactive?
            debugger-cookie: debugger-cookie
            profile: profile
            command-action: command-action
            command-arguments: command-arguments
            show-console?: show-console?
            wait?: wait?)
        (message-box "This project doesn't define a product property"))))


  ;;;
  ;;;; Test
  ;;;
  
  
  (method override (project-test self (profile: profile #f) (command-action: command-action #f) (command-arguments: command-arguments #f) (show-console?: show-console? #f) (wait?: wait? #f))
    (cond (test-unit
           (load-unit test-unit))
          (product
           (launch self
             executable: (project-executable self)
             action: "-test"
             debugger?: #t
             profile: profile
             command-action: command-action
             command-arguments: command-arguments
             show-console?: show-console?
             wait?: wait?
             invite: "Testing"))
          (else
           (message-box "This project doesn't define a product property"))))


  ;;;
  ;;;; Validate
  ;;;
  
  
  (method override (project-validate self (executable: executable #f) (debugger-interactive?: debugger-interactive? #f) (debugger-cookie: debugger-cookie #f) (profile: profile #f) (command-action: command-action #f) (command-arguments: command-arguments #f) (show-console?: show-console? #f) (wait?: wait? #f))
    (if validate-script
        (parameterize ((current-script-arguments `(validate ,self ,@(or script-arguments '()))))
          (load-script (parse validate-script)))
      (if product
          (launch self
            executable: executable
            debugger?: #t
            debugger-interactive?: debugger-interactive?
            debugger-cookie: debugger-cookie
            validate?: #t
            profile: profile
            command-action: command-action
            command-arguments: command-arguments
            show-console?: show-console?
            wait?: wait?
            invite: "Validating")
        (message-box "This project doesn't define a product property"))))


  ;;;
  ;;;; Launch
  ;;;
  
  
  (method override (launch self (executable: executable #f) (directory: directory #f) (kernel-arguments: kernel-arguments #f) (action: action #f) (debugger?: debugger? #f) (debugger-cookie: debugger-cookie #f) (debugger-interactive?: debugger-interactive? #f) (validate?: validate? #f) (profile: profile #f) (command-action: command-action #f) (command-arguments: command-arguments #f) (show-console?: show-console? #f) (wait?: wait? #f) (invite: invite #f))
    (define (determine-kernel)
      (let ((kernel (or executable (project-executable self))))
        (if (and kernel (exists? kernel))
            kernel
          (choose&save-kernel))))
    
    (define (choose&save-kernel)
      (let ((file (choose-kernel)))
        (let ((manager (get-workbench-manager (current-application))))
          (let ((designer (get-designer manager)))
            (set-property designer self 'executable file)))
        file))
    
    (define (filter-application-trait traits)
      (and traits
           (collect-if (lambda (trait)
                         (not (starts-with? (symbol->string trait) "Application.")))
                       traits)))
    
    (let ((ide (current-process))
          (cookie (or debugger-cookie (register-debugger-cookie))))
      (when debugger?
        (start-remote-server ide)
        (start-debuggers ide))
      (register-debugger-cookie-procedure cookie
        (lambda (process cookie)
          (clear-user-message)))
      (let* ((executable               (determine-kernel))
             (runtime-arg              (list @wait "-:m250000,h1000000"))
             (product-arg              (list (or action "-run") (->string product)))
             (kernel-arguments-arg     (if kernel-arguments kernel-arguments '()))
             (repositories-arg         (project-repositories-arg self))
             (home-arg                 (if home (list "-home" (parse home)) '()))
             (debugger-arg             (if debugger? (list "-debugger" (encode-host/port (or (listening-host (get-remote-listener)) "localhost") (listening-port (get-remote-listener)))) '()))
             (debugger-cookie-arg      (if debugger? (list "-debugger-cookie" (->string cookie)) '()))
             (debugger-interactive-arg (if (and debugger? debugger-interactive?) (list "-debugger-interactive" "true") '()))
             (process-title-arg        (list "-process-title" (->string (project-title self))))
             (process-traits-arg       (let ((traits (filter-application-trait (get-default-traits self)))) (if traits (list "-process-traits" (present-process-traits traits)) '())))
             (validate-arg             (if validate? (list "-validate" (->string name)) '()))
             (profile                  (or profile (project-profile self)))
             (profile-arg              (if profile (list "-profile" (->string profile)) '()))
             (action-arg               (if command-action (list command-action) '()))
             (arguments-arg            (if command-arguments command-arguments '()))
             (project-arg              (if arguments arguments '()))
             (toplevel-arg             (let ((pref (current-preferences 'debug)))
                                         (let ((toplevel-state (get-toplevel-state pref))
                                               (toplevel-monitor (get-toplevel-monitor pref))
                                               (toplevel-position (get-toplevel-position pref))
                                               (toplevel-size (get-toplevel-size pref)))
                                           (append (if toplevel-state (list "-toplevel-state" (->string toplevel-state)) '())
                                                   (if toplevel-monitor (list "-toplevel-monitor" (->string toplevel-monitor)) '())
                                                   (if toplevel-position (list "-toplevel-position" (point->argument toplevel-position)) '())
                                                   (if toplevel-size (list "-toplevel-size" (dimension->argument toplevel-size)) '())))))
             (arguments                (append runtime-arg action-arg product-arg kernel-arguments-arg repositories-arg arguments-arg home-arg debugger-arg debugger-cookie-arg debugger-interactive-arg process-title-arg process-traits-arg validate-arg profile-arg project-arg toplevel-arg)))
        (save-all ide)
        (when debugger?
          (user-message "{a} {a}..." (or invite "Debugging") (get-presentation-property self)))
        @debug
        (debug (path-normalize (parse executable)) directory: (or directory working) arguments: arguments)
        (launch-executable executable
          directory: (or directory working)
          arguments: arguments
          show-console?: show-console?))))
  
  
  (method protected virtual (project-profile self)
    profile)
  
  
  (method (projects-project? self)
    (and directory
         (is-alias? 'Projects)
         (equal? (get-list directory) '(Projects))))
  
  
  (method (project-repositories-arg self)
    (if (projects-project? self)
        (list "-repositories" (parse {Directory Projects}))
      '()))
  
  
  (method public (project-kernel self (executable-name: executable-name #f))
    ;; another quick hack until major cleanup of this mess
    (if (file? executable-name)
        executable-name
    (if (projects-project? self)
        (find-actual-kernel)
      (let ((executable (if directory
                            (let ((kernel-name (add-extension (or executable-name "jazz") (executable-extension kernel-platform))))
                              (cond ((directory? configuration)
                                     (new-file configuration kernel-name))
                                    ((string? configuration)
                                     (new-file (new-directory directory configuration) kernel-name))
                                    ((not configuration)
                                     (new-file directory kernel-name))
                                    (else
                                     (error "Ill-formed configuration: {s}" configuration))))
                          (find-actual-kernel))))
        (if (and executable (exists? executable))
            executable
          (let ((actual (find-actual-kernel)))
            (let ((answer (message-box (format "Unable to find configuration kernel{?~: {a}~}{%}{%}Use Jedi's kernel as fallback?" (parse executable)) type: 'question)))
              (if (eq? answer 'no)
                  (signal-cancel)
                actual))))))))
  
  
  (method (project-executable self)
    (project-kernel self executable-name: executable))


  ;;;
  ;;;; Build
  ;;;


  (method override (project-build self)
    (if product
        (begin
          ;; should be only the project's files...
          (save-all (current-application))
          (let* ((kernel           (project-kernel self))
                 (repositories-arg (project-repositories-arg self))
                 (make-arg         (list "-make" (->string product)))
                 ;; until truncation bug fixed in parallel build
                 (debug-arg        (list "-debug"))
                 (arguments        (append repositories-arg make-arg debug-arg)))
            (launch-executable kernel arguments: arguments show-console?: #t)))
      (message-box "This project doesn't define a product property")))
  
  
  ;;;
  ;;;; Descriptor
  ;;;
  
  
  (method meta override (get-class-descriptor self (context: context #f))
    (new jazz.debugger.jazz.descriptors:Jazz-Project-Descriptor))))
