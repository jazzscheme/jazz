;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Snapshot Debugger
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.debugger.jazz.Snapshot-Debugger jazz


(import (jazz.debugger)
        (jazz.event)
        (jazz.io)
        (jazz.markup)
        (jazz.project)
        (jazz.resource)
        (jazz.settings))


(class Snapshot-Debugger extends Debugger
  
  
  (slot processes initialize '())
  
  
  ;;;
  ;;;; Debugger
  ;;;
  
  
  (method override (start-debugger self)
    )
  
  
  (method override (stop-debugger self)
    )
  
  
  (method override (get-processes self (validate-liveness?: validate-liveness? #f))
    processes)
  
  
  (method override (detach-processes self)
    )
  
  
  (method override (standard-process-image self)
    {Image-Resource "File"})
  
  
  ;;;
  ;;;; Process
  ;;;
  
  
  (method override (process=? self x y)
    (eq? x y))
  
  
  (method override (process-live? self process)
    #t)
  
  
  (method override (process-title self process)
    (get-property process 'name))
  
  
  (method override (process-icon self process)
    (or (get-property process 'icon) "File"))
  
  
  (method override (process-threads self process)
    (get-children (find-node process 'threads)))
  
  
  (method override (present-process self process)
    (get-base (get-property process 'file)))
  
  
  (method override (reload-process self process)
    )
  
  
  (method override (process-focusable? self process)
    #f)
  
  
  (method override (evaluate-expressions self process forms syntax str container line col evaluation-mode walk-debugger walk-cookie)
    )
  
  
  (method override (inspect-serial self process serial max-content)
    (let ((value (serial->value self process serial)))
      (let ((content (get-property value 'content '())))
        (map (lambda (info)
               (bind (key . serial) info
                 (bind (category name rank) (backward-compatible-key key)
                   (inspect-name/serial self process name rank serial))))
             content))))
  
  
  (method override (present-serial self process serial)
    (unimplemented))
  
  
  (method override (try-out self process class)
    (unimplemented))
  
  
  (method (inspect-name/serial self process name rank serial)
    (let ((mutable? #f)
          (value (serial->value self process serial)))
      (if (not value)
          (begin
            (debug 'found 'unbound 'value serial)
            '())
        (let ((class (get-property value 'class))
              (presentation (get-property value 'presentation))
              (content (get-property value 'content '())))
          (cons (list #f name rank) (list serial class presentation (not-null? content) mutable? :raw))))))
  
  
  (method override (process-detach self process)
    )
  
  
  (method override (process-quit self process)
    (detach-process self process))
  
  
  ;;;
  ;;;; Thread
  ;;;
  
  
  (method override (thread=? self x y)
    (eq? x y))
  
  
  (method override (get-thread-name self process thread)
    (get-property thread 'name))
  
  
  (method override (get-thread-state self process thread)
    (get-property thread 'state))
  
  
  (method override (get-thread-priority self process thread)
    (get-property thread 'priority))
  
  
  (method override (get-thread-id self process thread)
    (get-property thread 'id))
  
  
  (method override (get-thread-stops self process thread)
    (list thread))
  
  
  (method override (get-thread-active-stop self process thread)
    (let ((stops (get-thread-stops self process thread)))
      (if (null? stops)
          #f
        (last stops))))
  
  
  (method override (break-thread self process thread)
    )
  
  
  (method override (repl-thread self process thread)
    )
  
  
  (method override (terminate-thread self process thread preserve-console?)
    )
  
  
  (method override (set-repl-frame self process thread frame)
    )
  
  
  (method override (thread-debugged-continuation? self thread)
    #f)
  
  
  ;;;
  ;;;; Restart
  ;;;
  
  
  (method override (restart=? self x y)
    (eq? x y))
  
  
  (method override (restart-name self process restart)
    (get-property restart 'name))
  
  
  (method override (restart-message self process restart)
    (get-property restart 'message))
  
  
  (method override (restart-stop self process restart)
    (restart-stop process restart))
  
  
  ;;;
  ;;;; Stop
  ;;;
  
  
  (method override (stop=? self x y)
    (eq? x y))
  
  
  ;; quick hack
  (method override (stop-kind self process stop)
    (if (and (get-property process 'exception)
             (eq? (first-child (get-parent stop)) stop))
        'exception
      #f))
  
  
  ;; quick hack
  (method override (stop-reason self process stop)
    (get-property process 'exception))
  
  
  (method override (stop-detail self process stop)
    (get-property stop 'detail))
  
  
  (method override (stop-location self process stop)
    (get-property stop 'location))
  
  
  (method override (stop-restarts self process stop)
    '())
  
  
  (method override (stop-frames self process stop)
    (get-children stop))
  
  
  (method override (continue-stop self process stop)
    )
  
  
  (method override (step-stop self process stop command)
    )
  
  
  ;;;
  ;;;; Frame
  ;;;
  
  
  (method override (frame=? self x y)
    (eq? x y))
  
  
  (method override (frame-name self process frame)
    (get-property frame 'name))
  
  
  (method override (frame-interpreted? self process frame)
    (get-property frame 'interpreted?))
  
  
  (method override (frame-hidden? self process frame)
    (get-property frame 'hidden?))
  
  
  (method override (frame-location self process frame)
    (define (sanitize-name name)
      (if (symbol? name)
          (let ((str (symbol->string name)))
            (if (starts-with? str "%%")
                (string->symbol (substring str 2 (string-length str)))
              name))
        name))
    
    (let ((name (sanitize-name (get-property frame 'name))))
      (let ((location (get-property frame 'location))
            (sourced (and (symbol? name) (locator->location name))))
        (if location
            (bind (container line col) location
              (if (file-exists? container)
                  location
                (if (and sourced
                         (filename=? (filename-name container)
                                     (filename-name (car sourced)))
                         (<= (abs (- (second sourced) line)) 50))
                    (list (first sourced) line col)
                  sourced)))
          sourced))))

  
  (method override (frame-variables self process frame kind)
    (let ((variables (get-children frame)))
      (map (lambda (variable rank)
             (let ((name (get-property variable 'name))
                   (serial (get-property variable 'serial)))
               (inspect-name/serial self process name rank serial)))
           variables
           (naturals 0 (length variables)))))
  
  
  ;;;
  ;;;; Values
  ;;;
  
  
  (method (setup-values self process)
    (let ((values (make-table test: eqv?)))
      (for-each (lambda (value)
                  (let ((serial (get-property value 'serial)))
                    (table-set! values serial value)))
                (get-children (find-node process 'values)))
      (set-property process 'values values)))
  
  
  (method (serial->value self process serial)
    (table-ref (get-property process 'values) serial #f))
  
  
  ;;;
  ;;;; Process
  ;;;
  
  
  (method package (attach-process self process focus?)
    (and (not (member? process processes test: (~ process=? self)))
         (call-event
           (lambda ()
             (setup-values self process)
             (set! processes (append! processes (list process)))
             (let ((manager (get-debugger-manager))
                   (debugged-process (new Debugged-Process self process process)))
               (attach-process manager debugged-process focus?)
               ;; thread that invoked snapshot is always first
               (let ((threads (process-threads self process)))
                 (when (not-null? threads)
                   (let ((thread (car threads)))
                     (let ((debugged-thread (new Debugged-Thread self process thread))
                           (debugged-stop (new Debugged-Stop self process 'stop)))
                       (register-stop manager debugged-process debugged-thread debugged-stop sound?: #f)))))
               debugged-process)))))
  
  
  (method package (detach-process self process)
    (when (member? process processes test: (~ process=? self))
      (send-event
        (lambda ()
          (set! processes (remove! process processes test: (~ process=? self)))
          (detach-process (get-debugger-manager) (new Debugged-Process self process process))))))
  
  
  ;;;
  ;;;; Processes
  ;;;
  
  
  (method override (determine-process-processes self process)
    '())
  
  
  (method override (determine-process-child? self process child)
    #f)
  
  
  ;;;
  ;;;; Properties
  ;;;
  
  
  (method override (determine-process-properties self process)
    '())
  
  
  (method override (determine-process-property self process property default)
    default)
      
  
  ;;;
  ;;;; Information
  ;;;
  
  
  (method override (determine-process-information? self process)
    #f)))
