;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Snapshot Debugger
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.debugger.jazz.Snapshot-Debugger jazz


(import (jazz.catalog)
        (jazz.console)
        (jazz.debuggee)
        (jazz.debugger)
        (jazz.io)
        (jazz.editor.jazz)
        (jazz.editor.jazz.inspector)
        (jazz.jrm)
        (jazz.media)
        (jazz.network)
        (jazz.project)
        (jazz.system)
        (jazz.ui.view)
        (jazz.ui.window)
        (jazz.ui.workspace))


(class Snapshot-Debugger extends Debugger
  
  
  (slot processes initialize '())
  
  
  ;;;
  ;;;; Debugger
  ;;;
  
  
  (method override (start-debugger)
    )
  
  
  (method override (stop-debugger)
    )
  
  
  (method override (get-processes (validate-liveness?: validate-liveness? #f))
    processes)
  
  
  (method override (detach-processes)
    )
  
  
  ;;;
  ;;;; Process
  ;;;
  
  
  (method override (process=? x y)
    (eq? x y))
  
  
  (method override (process-live? process)
    #t)
  
  
  (method override (process-title process)
    (get-property~ process 'name))
  
  
  (method override (process-icon process)
    (or (get-property~ process 'icon) "File"))
  
  
  (method override (process-threads process)
    (get-children~ (find-node~ process 'threads)))
  
  
  (method override (present-process process)
    (get-base~ (get-property~ process 'file)))
  
  
  (method override (reload-process process)
    )
  
  
  (method override (process-focusable? process)
    #f)
  
  
  (method override (evaluate-expressions process syntax str container line col)
    )
  
  
  (method override (inspect-serial process serial)
    (let ((value (serial->value process serial)))
      (map (lambda (info)
             (bind (name serial) info
               (inspect-name/serial process name serial)))
           (get-property~ value 'content '()))))
  
  
  (method (inspect-name/serial process name serial)
    (let ((mutable? #f)
          (value (serial->value process serial)))
      (if (not value)
          (begin
            (debug 'found 'unbound 'value serial)
            '())
        (let ((presentation (get-property~ value 'presentation))
              (content (get-property~ value 'content '())))
          (cons name (list serial presentation (not-null? content) mutable? :raw))))))
  
  
  (method override (process-detach process)
    )
  
  
  (method override (process-exit process)
    (detach-process process))
  
  
  ;;;
  ;;;; Thread
  ;;;
  
  
  (method override (thread=? x y)
    (eq? x y))
  
  
  (method override (thread-name process thread)
    (get-property~ thread 'name))
  
  
  (method override (thread-state process thread)
    (get-property~ thread 'state))
  
  
  (method override (thread-stops process thread)
    (list thread))
  
  
  (method override (thread-active-stop process thread)
    (let ((stops (thread-stops process thread)))
      (if (null? stops)
          #f
        (last stops))))
  
  
  (method override (break-thread process thread)
    )
  
  
  (method override (set-repl-frame process thread frame)
    )
  
  
  ;;;
  ;;;; Restart
  ;;;
  
  
  (method override (restart=? x y)
    (eq? x y))
  
  
  (method override (restart-name process restart)
    (get-property~ restart 'name))
  
  
  (method override (restart-message process restart)
    (get-property~ restart 'message))
  
  
  (method override (restart-stop process restart)
    (restart-stop~ process restart))
  
  
  ;;;
  ;;;; Stop
  ;;;
  
  
  (method override (stop=? x y)
    (eq? x y))
  
  
  ;; quick hack
  (method override (stop-kind process stop)
    (if (and (get-property~ process 'exception)
             (eq? (first-child~ (get-parent~ stop)) stop))
        'exception
      #f))
  
  
  ;; quick hack
  (method override (stop-reason process stop)
    (get-property~ process 'exception))
  
  
  (method override (stop-detail process stop)
    (get-property~ stop 'detail))
  
  
  (method override (stop-location process stop)
    (get-property~ stop 'location))
  
  
  (method override (stop-restarts process stop)
    '())
  
  
  (method override (stop-frames process stop)
    (get-children~ stop))
  
  
  (method override (continue-stop process stop)
    )
  
  
  (method override (step-stop process stop command)
    )
  
  
  ;;;
  ;;;; Frame
  ;;;
  
  
  (method override (frame=? x y)
    (eq? x y))
  
  
  (method override (frame-name process frame)
    (get-property~ frame 'name))
  
  
  (method override (frame-interpreted? process frame)
    (get-property~ frame 'interpreted?))
  
  
  (method override (frame-hidden? process frame)
    (get-property~ frame 'hidden?))
  
  
  (method override (frame-location process frame)
    (define (location-from-location)
      (get-property~ frame 'location))
    
    (define (location-from-name)
      (let ((name (get-property~ frame 'name)))
        (when name
          (let ((entry (locator->entry name)))
            (when entry
              (let ((file (parse~ (get-file~ (get-file-definition~ entry))))
                    (line (get-line~ entry))
                    (column (get-column~ entry)))
                (list file line column)))))))
    
    (or (location-from-location)                 
        (location-from-name)))

    
  (method override (frame-variables process frame kind)
    (map (lambda (variable)
           (let ((name (get-property~ variable 'name))
                 (serial (get-property~ variable 'serial)))
             (inspect-name/serial process name serial)))
         (get-children~ frame)))
  
  
  ;;;
  ;;;; Values
  ;;;
  
  
  (method (setup-values process)
    (let ((values (make-table test: eqv?)))
      (for-each (lambda (value)
                  (let ((serial (get-property~ value 'serial)))
                    (table-set! values serial value)))
                (get-children~ (find-node~ process 'values)))
      (set-property~ process 'values values)))
  
  
  (method (serial->value process serial)
    (table-ref (get-property~ process 'values) serial #f))
  
  
  ;;;
  ;;;; Process
  ;;;
  
  
  (method (attach-process process focus?)
    (unless (member? process processes test: process=?)
      (call-event
        (lambda ()
          (setup-values process)
          (set! processes (append! processes (list process)))
          (let ((debugged-process (new Debugged-Process self process process)))
            (attach-process~ (get-debugger-manager) debugged-process focus?)
            debugged-process)))))
  
  
  (method (detach-process process)
    (when (member? process processes test: process=?)
      (execute-event
        (lambda ()
          (set! processes (remove! process processes test: process=?))
          (detach-process~ (get-debugger-manager) (new Debugged-Process self process process))))))))
