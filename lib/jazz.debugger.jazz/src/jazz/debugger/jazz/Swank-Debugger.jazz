;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Swank Debugger
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.debugger.jazz.Swank-Debugger jazz


(import (jazz.console)
        (jazz.debugger)
        (jazz.debugger.jazz)
        (jazz.editor.jazz.inspector)
        (jazz.library)
        (jazz.ui.window))


(class Swank-Debugger extends Debugger
  
  
  (slot processes initialize '())
  (slot stops     initialize '())
  
  
  ;;;
  ;;;; Debugger
  ;;;
  
  
  (method override (start-debugger)
    )
  
  
  (method override (stop-debugger)
    )
  
  
  (method override (get-processes (validate-liveness?: validate-liveness? #f))
    processes)
  
  
  (method override (validate-processes)
    )
  
  
  (method override (detach-processes)
    )
  
  
  (method override (standard-process-image)
    {Image-Resource "Interface"})
  
  
  ;;;
  ;;;; Process
  ;;;
  
  
  (method override (process=? x y)
    (eq? x y))
  
  
  (method override (process-live? process)
    #t)
  
  
  (method override (process-title process)
    (get-title~ process))
  
  
  (method override (process-icon process)
    "Grab")
  
  
  (method override (process-threads process)
    (collect (lambda (stop)
               (let ((thread (get-thread~ stop)))
                 (when (process=? (get-process~ thread) process)
                   thread)))
             stops))
  
  
  (method override (present-process process)
    (process-title process))
  
  
  (method override (reload-process process)
    )
  
  
  (method override (process-focusable? process)
    #t)
  
  
  (method override (evaluate-expressions process syntax str container line col cookie)
    )
  
  
  (method override (inspect-serial process serial max-content)
    '())
  
  
  (method override (present-serial process serial)
    (unimplemented))
  
  
  (method override (process-detach process)
    )
  
  
  (method override (process-exit process)
    (swank-disconnect process)
    (detach-process process))
  
  
  ;;;
  ;;;; Thread
  ;;;
  
  
  (method override (thread=? x y)
    (and (process=? (get-process~ x) (get-process~ y))
         (= (get-id~ x) (get-id~ y))))
  
  
  (method override (thread-name process thread)
    "Thread")
  
  
  (method override (thread-state process thread)
    #f)
  
  
  (method override (thread-stops process thread)
    (collect-if (lambda (stop)
                  (thread=? (get-thread~ stop) thread))
                stops))
  
  
  (method override (thread-active-stop process thread)
    (let ((stops (thread-stops process thread)))
      (if (null? stops)
          #f
        (last stops))))
  
  
  (method override (break-thread process thread)
    )
  
  
  (method override (terminate-thread process thread)
    )
  
  
  (method override (set-repl-frame process thread frame)
    )
  
  
  ;;;
  ;;;; Restart
  ;;;
  
  
  (method override (restart=? x y)
    (eq? x y))
  
  
  (method override (restart-name process restart)
    (get-title~ restart))
  
  
  (method override (restart-message process restart)
    (format "[{a}] {a}" (get-title~ restart) (get-message~ restart)))
  
  
  (method override (restart-stop process restart)
    (swank-restart process (get-rank~ restart)))
  
  
  ;;;
  ;;;; Stop
  ;;;
  
  
  (method override (stop=? x y)
    (and (thread=? (get-thread~ x) (get-thread~ y))
         (= (get-id~ x) (get-id~ y))))
  
  
  (method override (stop-kind process stop)
    'exception)
  
  
  (method override (stop-reason process stop)
    (car (get-condition~ stop)))
  
  
  (method override (stop-detail process stop)
    #f)
  
  
  (method override (stop-location process stop)
    #f)
  
  
  (method override (stop-restarts process stop)
    (get-restarts~ stop))
  
  
  (method override (stop-frames process stop)
    (get-frames~ stop))
  
  
  (method override (continue-stop process stop)
    )
  
  
  (method override (step-stop process stop command)
    )
  
  
  ;;;
  ;;;; Frame
  ;;;
  
  
  (method override (frame=? x y)
    (eq? x y))
  
  
  (method override (frame-name process frame)
    (cadr frame))
  
  
  (method override (frame-interpreted? process frame)
    #t)
  
  
  (method override (frame-hidden? process frame)
    #f)
  
  
  (method override (frame-location process frame)
    #f)
  
  
  (method override (frame-variables process frame kind)
    (map (lambda (variable)
           (let ((name (getf variable :name))
                 (value (getf variable :value))
                 (mutable? #f))
             (cons name (package-info value kind: :raw mutable?: mutable?))))
         (swank-frame-variables process (car frame) kind)))
  
  
  ;;;
  ;;;; Process
  ;;;
  
  
  (method (attach-process process focus?)
    (unless (member? process processes test: process=?)
      (call-event
        (lambda ()
          (set! processes (append! processes (list process)))
          (let ((debugged-process (new Debugged-Process self process process)))
            (attach-process~ (get-debugger-manager) debugged-process focus?)
            debugged-process)))))
  
  
  (method (detach-process process)
    (when (member? process processes test: process=?)
      (execute-event
        (lambda ()
          (set! processes (remove! process processes test: process=?))
          (detach-process~ (get-debugger-manager) (new Debugged-Process self process process))))))
  
  
  ;;;
  ;;;; Swank
  ;;;
  
  
  (definition swank-port-number
    4005)
  
  
  (method (swank-connect)
    (let ((port (open-tcp-client (list port-number: swank-port-number))))
      (let ((process (new Swank-Process port)))
        (let ((info (swank-connection-info process)))
          (let ((implementation (getf info :lisp-implementation))
                (package (getf info :package)))
            (let ((type (getf implementation :type))
                  (version (getf implementation :version)))
              (set-title~ process type)
              (set-process-id~ process (getf info :pid))
              (set-package-name~ process (and package (getf package :name)))
              (swank-create-repl process)
              (attach-process process #f)
              (let ((text (register-console process type #t)))
                (set-console~ process text)
                (when (and type version)
                  (console-write process (format "{a} {a}{%}{%}" type version))))))))))
  
  
  (method (swank-disconnect process)
    (let ((console (get-console~ process)))
      (close-port (get-port~ process))
      (unregister-console console)))
  
  
  (method (register-console process title select?)
    (define (setup-debugger-console-ports text)
      (receive (head tail) (open-string-pipe (list permanent-close: #f))
        (set-console-port~ text head)
        tail))
    
    (let ((manager (get-console-manager)))
      (let ((text (register-console~ manager title select?)))
        (let ((port (setup-debugger-console-ports text))
              (resource (new Debugger-Resource
                             process
                             #f
                             text
                             (lambda ()
                               (unregister-console text)))))
          (register-debugger-resource process resource)
          (start-swank-repl process port)
          (set-console~ process text)
          (set-console-resource~ process resource)
          (when select?
            (acquire-focus~ text))
          text))))
  
  
  (method (unregister-console text)
    (unregister-console~ (get-console-text-manager text) text))
  
  
  (method (console-write process str)
    (let ((text (get-console~ process)))
      (execute-event
        (lambda ()
          (set-caret~ text (text-ending~ text))
          (insert-formatted-line~ text str)))))
  
  
  (method (start-swank-repl process port)
    (define (swank-repl)
      (let (loop)
        (console-write process (prompt 0))
        (let ((expr (read port)))
          (if (eof-object? expr)
              (begin
                (swank-disconnect process)
                (console-write process "disconnected"))
            (swank-eval process expr)
            (loop)))))
    
    (define (prompt level)
      (if (> level 0)
          (format "{a}> " level)
        "> "))
    
    (thread-start!
      (new-thread
        (lambda ()
          (swank-repl))
        'swank-repl)))
  
  
  (method (register-stop process thread stop)
    (let ((debugged-process (new Debugged-Process self process process))
          (debugged-thread (new Debugged-Thread self process thread))
          (debugged-stop (new Debugged-Stop self process stop)))
      (execute-event
        (lambda ()
          (set! stops (cons stop stops))
          (register-stop~ (get-debugger-manager) debugged-process debugged-thread debugged-stop)))))
  
  
  (method (unregister-stop process thread stop)
    (let ((debugged-process (new Debugged-Process self process process))
          (debugged-thread (new Debugged-Thread self process thread))
          (debugged-stop (new Debugged-Stop self process stop)))
      (execute-event
        (lambda ()
          (set! stops (remove! stop stops test: stop=?))
          (unregister-stop~ (get-debugger-manager) debugged-process debugged-thread debugged-stop)))))
  
  
  (method (swank-connection-info process)
    (let ((id (swank-unique-id process)))
      (send-swank-message process `(:emacs-rex (swank:connection-info) "COMMON-LISP-USER" t ,id))
      (wait-swank-response process id)))
  
  
  (method (swank-create-repl process)
    (let ((package (get-package-name~ process))
          (id (swank-unique-id process)))
      (send-swank-message process `(:emacs-rex (swank:create-repl nil) ,package t ,id))
      (wait-swank-response process id)))
  
  
  (method (swank-eval process expr)
    (let ((package (get-package-name~ process))
          (id (swank-unique-id process))
          (str (format "{s}" expr)))
      (send-swank-message process `(:emacs-rex (swank:listener-eval ,str) ,package :repl-thread ,id))
      (wait-swank-response process id)))
  

  (method (swank-frame-variables process frame kind)
    (let ((package (get-package-name~ process))
          (id (swank-unique-id process)))
      (send-swank-message process `(:emacs-rex (swank:frame-locals-and-catch-tags ,frame) ,package :repl-thread ,id))
      (bind (locals catch-tags) (wait-swank-response process id)
        (append (swank-decode locals)
                ;; need to understand the format of catch-tags
                '()))))
  
  
  (method (swank-decode expr)
    (if (eq? expr 'nil)
        '()
      expr))
  
  
  (method (swank-restart process n)
    (let ((package (get-package-name~ process))
          (id (swank-unique-id process)))
      (send-swank-message process `(:emacs-rex (swank:invoke-nth-restart-for-emacs 1 ,n) ,package 0 ,id))
      (wait-swank-response process id)))
  
  
  (method (swank-debug-return process thread level)
    (let ((thread (new Swank-Thread process thread)))
      (let ((stop (find-if (lambda (stop)
                             (and (thread=? (get-thread~ stop) thread)
                                  (= (get-level~ stop) level)))
                           stops)))
        (when stop
          (unregister-stop process thread stop)))))
  
  
  (method (swank-unique-id process)
    (generate-unique-id~ process))
  
  
  (method (send-swank-message process expr)
    (define (encode-length message)
      (format "{x width: 6 justify: :right padding: :v}" (cardinality message) #\0))
    
    (let ((port (get-port~ process))
          (message (->string expr :reader)))
      (let ((message-length (encode-length message)))
        (display message-length port)
        (display message port)
        (force-output port))))
  
  
  (method (receive-swank-response process)
    (let ((port (get-port~ process))
          (header (make-string 6)))
      (when (= (read-substring header 0 6 port) 6)
        (let ((count (string->number header 16)))
          (let ((response (make-string count)))
            (when (= (read-substring response 0 count port) count)
              (read-string-element response)))))))
  
  
  (method (receive-swank-response-non-blocking process)
    (let ((port (get-port~ process))
          (header (make-string 6)))
      (input-port-timeout-set! port 0.1)
      (when (= (read-substring header 0 6 port) 6)
        (let ((count (string->number header 16)))
          (let ((response (make-string count)))
            (input-port-timeout-set! port 0.1)
            (when (= (read-substring response 0 count port) count)
              (read-string-element response)))))))
  

  (method (wait-swank-response process target-id)
    (define (create-restarts restarts)
      (map (lambda (restart rank)
             (let ((title (car restart))
                   (message (cadr restart)))
               (new Swank-Restart title message rank)))
           restarts
           (naturals 0 (length restarts))))
    
    ;; quick try
    (define (process-events)
      (let (loop)
        (let ((response (receive-swank-response-non-blocking process)))
          (when response
            (process-swank-event process response)
            (loop)))))
    
    (let (loop)
      (let ((response (receive-swank-response process)))
        (if (not response)
            #f
          (let ((kind (car response)))
            (case kind
              ((:return)
               (let ((id (caddr response)))
                 (if (= target-id id)
                     (case (car (cadr response))
                       ((:ok)
                        ;(process-events)
                        (cadr (cadr response)))
                       ((:abort)
                        ;(process-events)
                        (process-swank-abort process response)))
                   (process-swank-problem process response)
                   (loop))))
              ((:debug)
               (bind (kind thread level condition restarts frames ids) response
                 (if (memv target-id ids)
                     (let ((thread (new Swank-Thread process thread)))
                       (let ((stop (new Swank-Stop thread target-id level condition (create-restarts restarts) frames)))
                         (register-stop process thread stop)
                         ;(process-events)
                         response))
                   (process-swank-problem process response)
                   (loop))))
              (else
               (process-swank-event process response)
               (loop))))))))
  
  
  (method (process-swank-abort process abort)
    @debug
    (debug 'swank 'abort abort)
    #f)
  
  
  (method (process-swank-problem process problem)
    @debug
    (debug 'swank 'problem problem))
  
  
  (method (process-swank-event process event)
    (let ((kind (car event)))
      (case kind
        ((:write-string)
         (console-write process (cadr event)))
        ((:new-features)
         )
        ((:indentation-update)
         )
        ((:debug-return)
         (swank-debug-return process (cadr event) (caddr event)))
        (else
         @debug
         (debug 'swank 'event process event)))))))
