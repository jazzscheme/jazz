;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Debugger
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module jazz.debugger jazz


(hub add-filename-processes)
(hub attach-process)
(hub break-thread)
(hub clear-problems)
(hub clear-runtime-information)
(hub close-resource)
(hub collect-always-processes)
(hub continue-stop)
(hub debugged-visited?)
(hub detach)
(hub detach-process)
(hub detach-processes)
(hub determine-process-information?)
(hub determine-process-processes)
(hub edit)
(hub edit-frame)
(hub edit-location)
(hub effective-filename-processes)
(hub evaluate-always-process)
(hub evaluate-expressions)
(hub evaluate-filename-expressions)
(hub evaluate-known-process)
(hub evaluate-never-process)
(hub evaluating-code)
(hub find-live-process)
(hub focus-process)
(hub focus-selected-process)
(hub focusable?)
(hub for-each-frame)
(hub for-each-process)
(hub for-each-thread)
(hub frame-changed)
(hub frame-hidden?)
(hub frame-interpreted?)
(hub frame-location)
(hub frame-name)
(hub frame-variables)
(hub frame=?)
(hub get-active-stop)
(hub get-address)
(hub get-alive?)
(hub get-client)
(hub get-date)
(hub get-debugger)
(hub get-description)
(hub get-detail)
(hub get-evaluate-when)
(hub get-exception)
(hub get-focused-mode?)
(hub get-focused-process)
(hub get-frame)
(hub get-frames)
(hub get-hidden?)
(hub get-icon)
(hub get-id)
(hub get-image)
(hub get-inspector)
(hub get-interpreted?)
(hub get-kind)
(hub get-location)
(hub get-message)
(hub get-name)
(hub get-parameters)
(hub get-process)
(hub get-processes)
(hub get-reason)
(hub get-reference)
(hub get-restarts)
(hub get-state)
(hub get-stopped-frame-color)
(hub get-stops)
(hub get-thread)
(hub get-thread-active-stop)
(hub get-thread-id)
(hub get-thread-name)
(hub get-thread-priority)
(hub get-thread-state)
(hub get-thread-stops)
(hub get-threads)
(hub get-title)
(hub get-toplevel-monitor)
(hub get-toplevel-position)
(hub get-toplevel-size)
(hub get-toplevel-state)
(hub get-tree)
(hub get-variables)
(hub get-visited-highlight-color)
(hub inspect-continuation)
(hub inspect-serial)
(hub kill-thread)
(hub live?)
(hub on-backward)
(hub on-clear)
(hub on-forward)
(hub on-refresh)
(hub on-selection-change)
(hub open-snapshot)
(hub persist-resource)
(hub present)
(hub present-process)
(hub present-serial)
(hub process-changed)
(hub process-evaluate-always)
(hub process-evaluate-known)
(hub process-evaluate-never)
(hub process-evaluate-when)
(hub process-focusable?)
(hub process-icon)
(hub process-live?)
(hub process-needs-filenames?)
(hub process-quit)
(hub process-received-filenames?)
(hub process-threads)
(hub process-title)
(hub process=?)
(hub profile-reset)
(hub profiler-profile)
(hub profiler-profiles)
(hub profiler-selected-profile)
(hub profiler-selected-profile-set!)
(hub profiler-start)
(hub profiler-stop)
(hub quit-process)
(hub quit-selected-process)
(hub received-runtime-filenames?)
(hub refresh-selected-process)
(hub register-stop)
(hub reload-process)
(hub repl-thread)
(hub report-message)
(hub report-problems)
(hub report-status)
(hub require-focused-process)
(hub restart-message)
(hub restart-name)
(hub restart-stop)
(hub restart=?)
(hub same?)
(hub selected-frame)
(hub selected-process)
(hub selected-thread)
(hub set-alive?)
(hub set-client)
(hub set-code)
(hub set-date)
(hub set-exception)
(hub set-info)
(hub set-process)
(hub set-repl-frame)
(hub set-selected-process)
(hub set-selected-thread)
(hub shared-process?)
(hub standard-process-image)
(hub start-debugger)
(hub step-stop)
(hub stop-detail)
(hub stop-frames)
(hub stop-kind)
(hub stop-location)
(hub stop-reason)
(hub stop-restarts)
(hub stop=?)
(hub terminate-thread)
(hub thread-changed)
(hub thread-debugged-continuation?)
(hub thread=?)
(hub toggle-focused-mode)
(hub tracker-selected-tracking)
(hub tracker-selected-tracking-set!)
(hub tracker-start)
(hub tracker-stop)
(hub tracker-tracking)
(hub tracker-trackings)
(hub tracking-reset)
(hub transmit-runtime-information)
(hub try-out)
(hub unregister-stop)
(hub update)
(hub update-focused-mode)
(hub update-highlight)
(hub update-status)
(hub validate-processes)
(hub visit-debugged)


(export (jazz.debugger.autoload))

(import (jazz.debuggee)
        (jazz.debugger.autoload)
        (jazz.console)
        (jazz.event)
        (jazz.presence.transmission)
        (jazz.text)
        (jazz.view))


(definition protected inhibit-connection-failed-dialog?
  (make-parameter #f))


(definition public (with-remote-exception-handler process thunk)
  (define (abort-connect?)
    (and (eq? (call-event
                (lambda ()
                  (message-box "Connection failed previously. Do you want to retry?" type: 'question yes: "Retry" no: "Cancel")))
              'no)
         (if (event-thread?)
             (signal-cancel)
           #t)))
  
  (define (process-remote-exception exc)
    (send-event
      (lambda ()
        (unless (inhibit-connection-failed-dialog?)
          (message-box (format "Connection to remote process failed{%}{%}{a}" exc)))
        (when process
          (set-alive? (get-debugger-manager) process #f))
        (signal-cancel))))
  
  (and (not (and process
                 (not (get-alive? (get-debugger-manager) process))
                 (abort-connect?)))
       (catch (connection-exception? exc
                (process-remote-exception exc))
         (thunk))))


;;;
;;;; Manager
;;;


(definition *debugger-manager*
  #f)


(definition public (get-debugger-manager)
  *debugger-manager*)


(definition public (set-debugger-manager debugger-manager)
  (set! *debugger-manager* debugger-manager))


;;;
;;;; Debugger
;;;


(definition *debuggers*
  '())

(definition *current-debugger*
  #f)


(definition with-debuggers-mutex
  (let ((mutex (make-mutex 'debuggers)))
    (lambda (thunk)
      (mutex-lock! mutex)
      (thunk)
      (mutex-unlock! mutex))))


(definition package (register-debugger debugger)
  (with-debuggers-mutex
    (lambda ()
      (set! *debuggers* (append *debuggers* (list debugger))))))


(definition package (unregister-debugger debugger)
  (with-debuggers-mutex
    (lambda ()
      (set! *debuggers* (remove! debugger *debuggers*)))))


(definition public (get-debuggers)
  *debuggers*)


(definition public (current-debugger)
  *current-debugger*)


(definition public (set-current-debugger debugger)
  (set! *current-debugger* debugger))


;;;
;;;; Inspector
;;;


(definition protected (backward-compatible-key key)
  (if (pair? key)
      key
    (list #f key 0)))


;;;
;;;; Debugged
;;;


(definition public (debugged=? x y)
  (or (and (not x) (not y))
      (and x
           y
           (let ((dx (get-debugger x))
                 (dy (get-debugger y)))
             (and (eq? dx dy)
                  (same? x y))))))


(definition public (debugged-hash debugged <Debugged+>)
  ;; fixme
  (if (not debugged)
      0
    0
    @must-be-recursive ; eq?-hash fails
    (fxwrap+ (eq?-hash (get-debugger debugged))
             (eq?-hash (get-process debugged))
             (eq?-hash (get-reference debugged)))))


;;;
;;;; Processes
;;;


(definition public (collect-processes)
  (let ((queue (new-queue)))
    (for-each (lambda (debugger)
                (for-each (lambda (process)
                            (let ((debugged (new Debugged-Process debugger process process)))
                              (enqueue queue debugged)))
                          (get-processes debugger validate-liveness?: #t)))
              (get-debuggers))
    (queue-list queue)))


;;;
;;;; Cookies
;;;


(definition *current-debugger-cookie*
  0)

(definition *debugger-cookie-procedures*
  (make-table test: eqv?))


(definition public (register-debugger-cookie)
  (prog1 *current-debugger-cookie*
    (increase! *current-debugger-cookie*)))


(definition public (register-debugger-cookie-procedure cookie proc)
  (table-add *debugger-cookie-procedures* cookie proc))


(definition public (invoke-registered-cookie-procedures process cookie)
  (let ((procedures (table-ref *debugger-cookie-procedures* cookie '())))
    (table-clear *debugger-cookie-procedures* cookie)
    (for-each-reversed (lambda (proc)
                         (proc process cookie))
                       procedures)))


;;;
;;;; Configurations
;;;


(definition *process-configurations*
  (make-table test: debugged=? hash: debugged-hash))


(definition package (registered-process-configurations)
  *process-configurations*)


(definition public (register-process-configuration process configuration)
  (table-set! *process-configurations* process configuration))

(definition public (registered-process-configuration process)
  (table-ref *process-configurations* process #f))


(definition public (registered-processes target)
  (collect (lambda (info)
             (bind (process . configuration) info
               (and (equal? configuration target)
                    process)))
           (table->list *process-configurations*)))


(definition public (registered-process-live? configuration)
  (let ((processes (registered-processes configuration)))
    (some? (lambda (process)
             (find-live-process (get-debugger-manager) process))
           processes)))


(definition package (cleanup-process-configurations process)
  (table-clear *process-configurations* process))


;;;
;;;; Resources
;;;


(definition *debugger-resources*
  (make-table test: debugged=? hash: debugged-hash))


(definition package (get-debugger-resources-table)
  *debugger-resources*)


(definition public (get-debugger-resources process)
  (table-ref *debugger-resources* process '()))

(definition public (set-debugger-resources process resources)
  (table-set! *debugger-resources* process resources))


(definition public (register-debugger-resource process resource)
  (set-debugger-resources process (cons resource (get-debugger-resources process))))

(definition public (unregister-debugger-resource process resource)
  (set-debugger-resources process (remove! resource (get-debugger-resources process))))


(definition public (find-debugger-resource target)
  (continuation-capture
    (lambda (return)
      (let ((manager (get-debugger-manager)))
        (for-each-process manager
          (lambda (debugger process live? focused?)
            (for-each (lambda (resource)
                        (let ((reference (get-reference resource)))
                          (when (eq? reference target)
                            (continuation-return return resource))))
                      (get-debugger-resources process)))))
      #f)))


(definition package (close-process-debugger-resources process)
  (for-each close-resource (get-debugger-resources process))
  (table-clear *debugger-resources* process))


;;;
;;;; Walk
;;;


(definition package (walk-problems-message detail)
  (define (collect-problems)
    (let ((queue (new-queue)))
      (for-each-detail detail
                       (lambda (detail)
                         (when (null? (get-children detail))
                           (enqueue queue detail))))
      (queue-list queue)))
  
  (define (for-each-detail detail proc)
    (proc detail)
    (for-each (lambda (child)
                (for-each-detail child proc))
              (get-children detail)))
  
  (let ((max 8)
        (problems (collect-problems)))
    (let ((effective-problems (if (> (length problems) max) (subseq problems 0 max) problems)))
      `(<span>
         "Walk problems encountered"
         ,@(map (lambda (problem)
                  `(<bulleted> ,(->string (get-title problem))))
                effective-problems)
         ,@(if (> (length problems) max)
               '((<bulleted> "..."))
             '())))))


;;;
;;;; Break
;;;


(definition Once-Breaks
  (make-table test: eq?))


(definition public (add-break-once name)
  (table-set! Once-Breaks name #t))


(definition public (break-once name)
  (when (table-ref Once-Breaks name #f)
    (table-set! Once-Breaks name #f)
    (break)))


(definition Once-Executes
  (make-table test: eq?))


(definition public (add-execute-once name)
  (table-set! Once-Executes name #t))


(definition public (execute-once name proc)
  (when (table-ref Once-Executes name #f)
    (table-set! Once-Executes name #f)
    (proc)))


;;;
;;;; Console
;;;


(definition public (register-debugger-console debugged-process debugged-thread select?)
  (define (setup-debugger-console-ports text process-proxy thread-proxy)
    (receive (head tail) (open-string-pipe (list permanent-close: #f))
      (set-console-port text head)
      (set-console-pump text (start-debugger-console-pump tail process-proxy thread-proxy))))
  
  (define (start-debugger-console-pump port process-proxy thread-proxy)
    (thread-start!
      (new-system-thread
        (lambda ()
          (start-pump port
                      (lambda (str)
                        (with-remote-exception-handler debugged-process
                          (lambda ()
                            (console-input process-proxy thread-proxy str))))))
        'debugger-pump)))
  
  (let ((manager (get-console-manager-guest))
        (process-proxy (get-reference debugged-process))
        (thread-proxy (get-reference debugged-thread)))
    (bind (title traits thread) (process-information process-proxy thread-proxy)
      (let ((text (register-console manager (present-process-title/traits/thread title traits thread) select? process-title: title process-traits: traits process-thread: thread)))
        (setup-debugger-console-ports text process-proxy thread-proxy)
        text))))


(definition public (unregister-debugger-console text)
  (let ((pump (get-console-pump text)))
    (when pump
      (exit-thread pump)))
  (send-event
    (lambda ()
      (unregister-console (get-console-text-manager text) text))))


(definition public (debugger-console-output text str)
  (send-event
    (lambda ()
      (set-caret text (text-ending text))
      (insert-formatted-line text str))))


(definition public (present-process-title process-proxy thread-proxy)
  (bind (title traits thread) (process-information process-proxy thread-proxy)
    (present-process-title/traits/thread title traits thread)))


(definition public (present-process-title/traits/thread title traits thread)
  (let ((title (present-process-title/traits title traits)))
    (if (not thread)
        title
      (format "{a} {a}" title (present-thread-name thread)))))


(definition public (present-process-title/traits title traits)
  (if traits
      (format "{a}{a}" title traits)
    title))


(definition public (present-process-traits traits)
  (apply string-append (map (lambda (trait)
                              (format "<{a}>" (identifier-name trait)))
                            traits)))


(definition public (process-information process-proxy thread-proxy)
  (let ((thread-name (and thread-proxy (get-name thread-proxy))))
    (case thread-name
      ((local-repl)
       (list "Local"
             #f
             #f))
      (else
       (list (get-title process-proxy)
             (get-traits process-proxy)
             thread-name)))))


(definition public (console-title title traits thread)
  (let ((title (present-process-title/traits title @wait-smarter-space-management traits #f)))
    (if (or (not thread) (eq? thread 'primordial))
        title
      (format "{a} {a}" title (present-thread-name thread)))))


;;;
;;;; Calls
;;;


(definition public (on-call-step-over evt)
  (on-step-over evt))


(definition public (on-call-step-into evt)
  (if (get-shift? evt)
      (on-step-into-function evt)
    (on-step-into evt)))


(definition public (on-call-step-out evt)
  (if (get-shift? evt)
      (on-step-outside-function evt)
    (on-step-out evt)))


(definition public (on-call-run-to evt)
  (if (get-shift? evt)
      (on-run-to-result evt)
    (on-run-to-cursor evt)))


;;;
;;;; Events
;;;


(definition public (on-restart evt)
  (restart-loop))


(definition public (on-break evt)
  @convert
  (break-next))


(definition public (on-continue evt)
  (if (not (debugging-loop?))
      (bell)
    (continue-loop)))


(definition public (on-step-over evt)
  @convert
  (if (not (debugging-loop?))
      (bell)
    (continue-loop)
    (step-over)))


(definition public (on-step-into evt)
  @convert
  (if (not (debugging-loop?))
      (bell)
    (continue-loop)
    (step-into)))


(definition public (on-step-into-function evt)
  @convert
  (if (not (debugging-loop?))
      (bell)
    (continue-loop)
    (step-into-function)))


(definition public (on-step-out evt)
  @convert
  (if (not (debugging-loop?))
      (bell)
    (continue-loop)
    (step-out)))


(definition public (on-step-outside-function evt)
  @convert
  (if (not (debugging-loop?))
      (bell)
    (continue-loop)
    (step-outside-function)))


(definition public (on-run-to-cursor evt)
  )


(definition public (on-run-to-result evt)
  )


(definition public (restart-loop)
  @convert
  (restart (get-loop (current-application))))


(definition public (continue-loop)
  @convert
  (continue (get-loop (current-application))))


(definition public (debugging-loop?)
  @convert
  (/= (get-level (get-loop (current-application))) 0))


;;;
;;;; View
;;;


(definition public (get-processes-view)
  (get-guest (singleton-docked Processes-View)))


(definition public (get-threads-view)
  (get-guest (singleton-docked Threads-View)))


(definition public (get-frames-view)
  (get-guest (singleton-docked Frames-View)))


(definition public (get-restarts-view)
  (get-guest (singleton-docked Restarts-View)))


(definition public (get-exception-view)
  (get-guest (singleton-docked Exception-View)))


(definition public (get-problems-view)
  (get-guest (singleton-docked Problems-View)))


(definition public (get-variables-view)
  (get-guest (singleton-docked Variables-View))))
