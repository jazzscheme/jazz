;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Debugged Process
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.debugger.debugged.Debugged-Process jazz


(import (jazz.debugger)
        (jazz.library))


(class Debugged-Process extends Debugged
  
  
  (slot alive? initialize #t accessors generate)
  
  
  ;;;
  ;;;; Equality
  ;;;
  
  
  (method override (same? debugged)
    (and (is? debugged Debugged-Process)
         (process=?~ debugger reference (get-reference~ debugged))))
  
  
  ;;;
  ;;;; Delegation
  ;;;
  
  
  (method public (live?)
    (process-live?~ debugger reference))
  
  
  (method public (get-title)
    (or (process-title~ debugger reference)
        "Process"))
  
  
  (method public (get-icon)
    (new Image-Resource
      (or (process-icon~ debugger reference)
          "Process")))
  
  
  (method public (get-threads)
    (map (lambda (thread)
           (new Debugged-Thread debugger process thread))
         (process-threads~ debugger reference)))
  
  
  (method public (present)
    (present-process~ debugger reference))
  
  
  (method public (reload-process)
    (reload-process~ debugger reference))
  
  
  (method public (focusable?)
    (process-focusable?~ debugger reference))
  
  
  (method public (restart-stop restart)
    (restart-stop~ debugger reference (get-reference~ restart)))
  
  
  (method public (break-thread thread)
    (break-thread~ debugger reference (get-reference~ thread)))
  
  
  (method public (continue-stop stop)
    (continue-stop~ debugger reference (get-reference~ stop)))
  
  
  (method public (step-stop stop command)
    (step-stop~ debugger reference (get-reference~ stop) command))
  
  
  (method public (evaluate-expressions syntax str container line col)
    (evaluate-expressions~ debugger reference syntax str container line col))
  
  
  (method public (profiler-start)
    (profiler-start~ debugger reference))
  
  
  (method public (profiler-stop)
    (profiler-stop~ debugger reference))
  
  
  (method public (profiler-profiles)
    (profiler-profiles~ debugger reference))
  
  
  (method public (profiler-selected-profile)
    (profiler-selected-profile~ debugger reference))
  
  
  (method public (profiler-selected-profile-set! name)
    (profiler-selected-profile-set!~ debugger reference name))
  
  
  (method public (profiler-profile)
    (profiler-profile~ debugger reference))
  
  
  (method public (profile-reset profiler depth)
    (profile-reset~ debugger reference profiler depth))
  
  
  (method public (inspect-serial serial max-content)
    (inspect-serial~ debugger reference serial max-content))
  
  
  (method public (exit)
    (if alive?
        (process-exit~ debugger reference)
      (detach-process~ debugger reference)))))
