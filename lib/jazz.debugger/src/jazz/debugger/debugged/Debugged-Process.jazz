;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Debugged Process
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.debugger.debugged.Debugged-Process jazz


(import (jazz.debugger)
        (jazz.resource))


(class Debugged-Process extends Debugged
  
  
  ;;;
  ;;;; Equality
  ;;;
  
  
  (method override (same? self debugged)
    (and (is? debugged Debugged-Process)
         (process=? debugger reference (get-reference debugged))))
  
  
  ;;;
  ;;;; Delegation
  ;;;
  
  
  (method public (live? self)
    (process-live? debugger reference))
  
  
  (method public (get-title self)
    (or (process-title debugger reference)
        "Process"))
  
  
  (method public (get-icon self)
    (new Image-Resource
      (or (process-icon debugger reference)
          "Process")))
  
  
  (method public (get-threads self)
    (map (lambda (thread)
           (let ((class (if (thread-debugged-continuation? debugger thread)
                            Debugged-Continuation
                          Debugged-Thread)))
             (new class debugger process thread)))
         (process-threads debugger reference)))
  
  
  (method public (present self)
    (present-process debugger reference))
  
  
  (method public (reload-process self)
    (reload-process debugger reference))
  
  
  (method public (focusable? self)
    (process-focusable? debugger reference))
  
  
  (method public (restart-stop self restart)
    (restart-stop debugger reference (get-reference restart)))
  
  
  (method public (break-thread self thread)
    (break-thread debugger reference (get-reference thread)))
  
  
  (method public (repl-thread self thread)
    (repl-thread debugger reference (get-reference thread)))
  
  
  (method public (terminate-thread self thread preserve-console?)
    (terminate-thread debugger reference (get-reference thread) preserve-console?))
  
  
  (method public (kill-thread self thread)
    (kill-thread debugger reference (get-reference thread)))
  
  
  (method public (continue-stop self stop)
    (continue-stop debugger reference (get-reference stop)))
  
  
  (method public (step-stop self stop command)
    (step-stop debugger reference (get-reference stop) command))
  
  
  (method public (transmit-runtime-information self what)
    (transmit-runtime-information debugger reference what))
  
  
  (method public (evaluate-expressions self forms syntax str container line col evaluation-mode walk-debugger walk-cookie)
    (evaluate-expressions debugger reference forms syntax str container line col evaluation-mode walk-debugger walk-cookie))
  
  
  (method public (profiler-start self)
    (profiler-start debugger reference))
  
  
  (method public (profiler-stop self)
    (profiler-stop debugger reference))
  
  
  (method public (profiler-profiles self)
    (profiler-profiles debugger reference))
  
  
  (method public (profiler-selected-profile self)
    (profiler-selected-profile debugger reference))
  
  
  (method public (profiler-selected-profile-set! self name)
    (profiler-selected-profile-set! debugger reference name))
  
  
  (method public (profiler-profile self)
    (profiler-profile debugger reference))
  
  
  (method public (profile-reset self profiler depth all?)
    (profile-reset debugger reference profiler depth all?))
  
  
  (method public (tracker-start self)
    (tracker-start debugger reference))
  
  
  (method public (tracker-stop self)
    (tracker-stop debugger reference))
  
  
  (method public (tracker-trackings self)
    (tracker-trackings debugger reference))
  
  
  (method public (tracker-selected-tracking self)
    (tracker-selected-tracking debugger reference))
  
  
  (method public (tracker-selected-tracking-set! self name)
    (tracker-selected-tracking-set! debugger reference name))
  
  
  (method public (tracker-tracking self)
    (tracker-tracking debugger reference))
  
  
  (method public (tracking-reset self all?)
    (tracking-reset debugger reference all?))
  
  
  (method public (inspect-serial self serial max-content)
    (inspect-serial debugger reference serial max-content))
  
  
  (method public (inspect-continuation self serial max-content)
    (inspect-continuation debugger reference serial))
  
  
  (method public (present-serial self serial)
    (present-serial debugger reference serial))
  
  
  (method public (try-out self class)
    (try-out debugger reference class))
  
  
  (method public (detach self)
    (detach-process debugger reference))
  
  
  (method public (quit-process self)
    (process-quit debugger reference))))
