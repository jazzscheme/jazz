;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Debugger Manager
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.debugger.debugger.Debugger-Manager jazz


(import (jazz.debuggee)
        (jazz.debugger)
        (jazz.graphic)
        (jazz.io)
        (jazz.media)
        (jazz.system.access))


(constant stopped-frame-color     {Color name: Dark-Red})
(constant visited-highlight-color {Color red: 255 green: 205 blue: 205})


(class Debugger-Manager extends Object
  
  
  (slot debugged-stops    initialize (make-table test: debugged=? hash: debugged-hash))
  (slot debugged-to-visit initialize (make-table test: debugged=? hash: debugged-hash))
  (slot focused-process   initialize {} getter generate)
  
  (slot process           initialize {} getter generate)
  (slot thread            initialize {} getter generate)
  (slot frame             initialize {} getter generate)
  
  
  ;;;
  ;;;; Status
  ;;;
  
  
  (method public (visit-debugged debugged)
    (unless (debugged-visited? debugged)
      (table-set! debugged-to-visit debugged)
      (update-status)
      #t))
  
  
  (method public (update-status)
    (let ((toolbar (find-toolbar~ (get-application))))
      (when toolbar
        (let ((button (find-component~ toolbar 'debugger))
              (visited? (> (table-length debugged-to-visit) 0))
              (stopped? (> (table-length debugged-stops) 0)))
          (when button
            (notify~ button visited? stopped?))))))
  
  
  (method public (get-stopped-frame-color debugged)
    (when (debugged-stopped? debugged)
      stopped-frame-color))
  
  
  (method public (get-visited-highlight-color debugged)
    (unless (debugged-visited? debugged)
      visited-highlight-color))
  
  
  (method (debugged-stopped? debugged)
    (not-null? (table-ref debugged-stops debugged '())))
  
  
  (method (debugged-visited? debugged)
    (not (table-ref debugged-to-visit debugged #f)))
  
  
  ;;;
  ;;;; Focused Process
  ;;;
  
  
  (method public (focus-process process)
    (unless (debugged=? focused-process process)
      (set-focus-process process)
      (when (get-processes-view)
        (update-processes~ (get-processes-view)))))
  
  
  (method (set-focus-process process)
    (set! focused-process process)
    (let ((focus-status-view (find-status-bar~ (get-application))))
      (when focus-status-view
        (update-focused-process~ focus-status-view))))
  
  
  ;;;
  ;;;; Processes
  ;;;
  
  
  (method public (attach-process process focus?)
    (when (or focus? (not focused-process))
      (set-focus-process process))
    (when (get-processes-view)
      (update-processes~ (get-processes-view))))
  
  
  (method public (detach-process process best-process)
    (define (cleanup-stops table)
      (for-each (lambda (key)
                  (when (shared-process?~ process key)
                    (table-clear table key)))
                (table-keys table)))
    
    (when (and best-process (debugged=? focused-process process))
      (set-focus-process best-process))
    (close-process-debugger-resources process)
    (cleanup-stops debugged-stops)
    (cleanup-stops debugged-to-visit)
    (let ((view (get-processes-view)))
      (when view
        (update-processes~ view)
        (unless (selected-process~ view)
          (process-changed #f))))
    (update-status))
  
  
  (method public (for-each-process proc)
    (for-each (lambda (debugger)
                (for-each (lambda (process)
                            (let ((debugged (new Debugged-Process debugger process process)))
                              (let ((live? (live?~ debugged))
                                    (focused? (debugged=? focused-process debugged)))
                                (proc debugger debugged live? focused?))))
                          (get-processes~ debugger)))
              (get-debuggers)))
  
  
  (method public (process-changed new-process)
    (unless (debugged=? process new-process)
      (set! process new-process)
      (when (visit-debugged process)
        (update-processes-highlight process))
      (let ((view (get-threads-view)))
        (when view
          (process-changed~ view process)
          (unless (selected-thread~ view)
            (thread-changed #f))))))
  
  
  (definition (update-processes-highlight process)
    (when (get-processes-view)
      (update-highlight~ (get-processes-view) process)))
  
  
  ;;;
  ;;;; Threads
  ;;;
  
  
  (method public (for-each-thread proc (detailed?: detailed? #f))
    (define system-threads
      '(message-pump
         debuggee-console-pump
         debugger-console-pump
         remote-listener
         remote-connection
         catalog
         autorepeat
         autoscroll
         caret
         hovering))
    
    (define (system-thread? thread)
      (let ((name (get-name~ thread)))
        (or (memq? name system-threads)
            (and (symbol? name)
                 (starts-with? (symbol->string name) "repl")))))
    
    (when process
      (let ((debugger (get-debugger~ process)))
        (for-each (lambda (thread)
                    (let ((thread (new Debugged-Thread debugger process thread)))
                      (when (or detailed? (not (system-thread? thread)))
                        (let ((stop (get-active-stop~ thread)))
                          (proc thread stop detailed?)))))
                  (get-threads~ process)))))
  
  
  (method public (thread-changed new-thread)
    (unless (debugged=? thread new-thread)
      (set! thread new-thread)
      (when (and (get-threads-view) (view-visible?~ (get-threads-view)))
        (when (visit-debugged thread)
          (update-threads-highlight thread)))
      (when (get-frames-view)
        (thread-changed~ (get-frames-view) thread))
      (when (get-exception-view)
        (thread-changed~ (get-exception-view) thread))))
  
  
  (definition (update-threads-highlight thread)
    (when (get-threads-view)
      (update-highlight~ (get-threads-view) thread)))
  
  
  ;;;
  ;;;; Frame
  ;;;

  
  (method public (for-each-frame proc)
    (when (and process thread)
      (let ((debugger (get-debugger~ process))
            (stop (get-active-stop~ thread)))
        (when stop
          (for-each (lambda (frame)
                      (let ((frame (new Debugged-Frame debugger process frame)))
                        (proc frame)))
                    (get-frames~ stop))))))
  
  
  (method public (frame-changed new-frame (user-origin?: user-origin? #f))
    (when (or (not (debugged=? frame new-frame)))
      (set! frame new-frame)
      (when (and (get-frames-view) (or (not frame) (view-visible?~ (get-frames-view))))
        (when (get-variables-view)
          (frame-changed~ (get-variables-view) frame))
        (when (or user-origin? (not frame))
          (edit-frame frame)))
      (when (and thread (get-active-stop~ thread))
        (set-repl-frame~ thread (essay frame (get-reference~ frame))))))
  
  
  (definition *frame-indicator*
    (new Frame-Indicator color: {Color name: Light-Green}))
  
  
  (method public (edit-selected-frame)
    (when (get-variables-view)
      (frame-changed~ (get-variables-view) frame))
    (edit-frame frame))
  
  
  (definition (edit-frame frame)
    (let ((location (essay frame (get-location~ frame))))
      (edit~ *frame-indicator* location)))
  
  
  ;;;
  ;;;; Stop
  ;;;
  
  
  (method public (register-stop process thread stop (step?: step? #f)) ;; to test the stepper
    (define (update-process)
      (let ((empty? (not process~self))
            (view (get-processes-view)))
        (when empty?
          (if view
              (set-selected-process~ view process)
            (process-changed process)))
        (update-processes-highlight process)))
    
    (define (update-thread)
      (when (debugged=? process process~self)
        (let ((empty? (not thread~self))
              (view (get-threads-view)))
          (when view
            (process-changed~ view process~self))
          (when empty?
            (if view
                (set-selected-thread~ view thread)
              (thread-changed process)))
          (when (and view (view-visible?~ view))
            (when (visit-debugged thread)
              (update-threads-highlight thread))))))
    
    (define (update-others)
      (when (debugged=? thread thread~self)
        (when (get-frames-view)
          (thread-changed~ (get-frames-view) thread))
        (when (get-exception-view)
          (thread-changed~ (get-exception-view) thread)))
      (update-status))
    
    (define (add-debugged-stop debugged stop)
      (table-add debugged-stops debugged stop))
    
    (define (add-debugged-to-visit debugged)
      (table-set! debugged-to-visit debugged #t))
    
    (add-debugged-stop process stop)
    (add-debugged-stop thread stop)
    (add-debugged-to-visit process)
    (add-debugged-to-visit thread)
    (unless step?
      (error-sound))
    (update-process)
    (update-thread)
    (update-others))
  
  
  (method public (unregister-stop process thread stop)
    (define (update-others)
      (when (debugged=? thread thread~self)
        (when (get-frames-view)
          (thread-changed~ (get-frames-view) thread))
        (when (get-exception-view)
          (thread-changed~ (get-exception-view) thread)))
      (update-status))
    
    (define (remove-debugged-stop debugged stop)
      (let ((stops (remove! stop (table-ref debugged-stops debugged '()) test: debugged=?)))
        (if (not-null? stops)
            (table-set! debugged-stops debugged stops)
          (table-set! debugged-stops debugged))))
    
    (define (remove-debugged-to-visit debugged)
      (unless (and (table-ref debugged-to-visit debugged #f)
                   (some? (lambda (stop)
                            (table-ref debugged-to-visit debugged #f))
                          (table-ref debugged-stops debugged '())))
        (table-set! debugged-to-visit debugged)))
    
    (remove-debugged-stop process stop)
    (remove-debugged-stop thread stop)
    (remove-debugged-to-visit process)
    (remove-debugged-to-visit thread)
    (update-processes-highlight process)
    (let ((view (get-threads-view)))
      (when view
        (process-changed~ view process~self)))
    (update-others))))
