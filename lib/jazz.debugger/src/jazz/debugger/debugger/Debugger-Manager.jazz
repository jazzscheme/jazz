;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Debugger Manager
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.debugger.debugger.Debugger-Manager jazz


(import (jazz.debuggee)
        (jazz.debugger)
        (jazz.graphic)
        (jazz.jrm)
        (jazz.media)
        (jazz.system)
        (jazz.system.access)
        (jazz.ui)
        (jazz.ui.view))


(constant stopped-frame-color     {Color Dark-Red})
(constant visited-highlight-color {Color red: 255 green: 205 blue: 205})


(class Debugger-Manager extends Object
  
  
  (slot active-stops     initialize (make-table test: debugged=? hash: debugged-hash))
  (slot unvisited-stops  initialize (make-table test: debugged=? hash: debugged-hash))
  (slot unzoomed-stops   initialize (make-table test: debugged=? hash: debugged-hash))
  (slot liveliness-cache initialize (make-table test: debugged=? hash: debugged-hash))
  (slot focused-mode?    initialize #f getter generate)
  (slot focused-process  initialize #f getter generate)
  
  (slot process          initialize #f getter generate)
  (slot thread           initialize #f getter generate)
  (slot frame            initialize #f getter generate)
  
  
  (method override (initialize)
    (nextmethod)
    (set! focused-mode? (get-focused-mode?~ (get-preferences 'debug))))
  
  
  (method public (debugging?)
    (/= 0 (table-length active-stops)))
  
  
  (method public (selected-process)
    (let ((processes-view (get-processes-view)))
      (if processes-view
          (selected-process~ processes-view)
        process)))
  
  
  (method public (selected-thread)
    (let ((threads-view (get-threads-view)))
      (if threads-view
          (selected-thread~ threads-view)
        thread)))
  
  
  (method public (selected-frame)
    (let ((frames-view (get-frames-view)))
      (if frames-view
          (selected-frame~ frames-view)
        frame)))
  
  
  ;;;
  ;;;; Status
  ;;;
  
  
  (method public (visit-debugged debugged)
    (unless (debugged-visited? debugged)
      (table-set! unvisited-stops debugged)
      (update-status)
      #t))
  
  
  (method public (unzoom-debugged debugged)
    (unless (debugged-zoomed? debugged)
      (table-set! unzoomed-stops debugged)
      #t))
  
  
  (method public (update-status)
    (let ((toolbar (find-toolbar~ (get-application))))
      (when toolbar
        (let ((button (find-component~ toolbar 'debugger))
              (visited? (> (table-length unvisited-stops) 0))
              (stopped? (> (table-length active-stops) 0)))
          (when button
            (notify~ button visited? stopped?))))))
  
  
  (method public (get-stopped-frame-color debugged)
    (when (debugged-stopped? debugged)
      stopped-frame-color))
  
  
  (method public (get-visited-highlight-color debugged)
    (unless (debugged-visited? debugged)
      visited-highlight-color))
  
  
  (method (debugged-stopped? debugged)
    (not-null? (table-ref active-stops debugged '())))
  
  
  (method (debugged-visited? debugged)
    (not (table-ref unvisited-stops debugged #f)))
  
  
  (method (debugged-zoomed? debugged)
    (not (table-ref unzoomed-stops debugged #f)))
  
  
  (method public (get-active-stops debugged)
    (table-ref active-stops debugged '()))
  
  
  ;;;
  ;;;; Focused
  ;;;
  
  
  (method public (toggle-focused-mode)
    (set! focused-mode? (not focused-mode?))
    (let ((processes-view (get-processes-view)))
      (when processes-view
        (update-focused-mode~ processes-view focused-mode?)
        (update~ processes-view)))
    (focused-process-update))
  
  
  (method public (require-focused-process)
    (or (get-focused-process)
        (begin
          (message-box "There is no focused process")
          (signal-cancel))))
  
  
  (method public (focus-process process)
    (set! focused-mode? #t)
    (set-focused-process process)
    (let ((processes-view (get-processes-view)))
      (when processes-view
        (update-focused-mode~ processes-view focused-mode?)
        (update~ processes-view))))
  
  
  (method (set-focused-process process)
    (set! focused-process process)
    (focused-process-update))
  
  
  (method (focused-process-update)
    (let ((focus-status-view (find-status-bar~ (get-application))))
      (when focus-status-view
        (update-focused-process~ focus-status-view))))
  
  
  ;;;
  ;;;; Processes
  ;;;
  
  
  (method public (attach-process process focus?)
    (when (and focus? (focusable?~ process))
      (set-focused-process process))
    (when (get-processes-view)
      (update~ (get-processes-view))))
  
  
  (method public (detach-process process)
    (define (best-process)
      (continuation-capture
        (lambda (return)
          (for-each-process
            (lambda (debugger debugged-process live? focused?)
              (when (and live?
                         (focusable?~ debugged-process)
                         (not (debugged=? debugged-process process)))
                (continuation-return return debugged-process))))
          #f)))
    
    (define (cleanup-stops table)
      (for-each (lambda (key)
                  (when (shared-process?~ process key)
                    (table-clear table key)))
                (table-keys table)))
    
    (when (debugged=? focused-process process)
      (let ((best-process (best-process)))
        (unless (debugged=? best-process process)
          (set-focused-process best-process))))
    (close-process-debugger-resources process)
    (cleanup-process-configurations process)
    (cleanup-stops active-stops)
    (cleanup-stops unvisited-stops)
    (let ((view (get-processes-view)))
      (when view
        (update~ view)
        (unless (selected-process~ view)
          (process-changed #f))))
    (update-variables-zoom)
    (update-status))
  
  
  (method public (for-each-process proc (live-test?: live-test? #t))
    (for-each (lambda (debugger)
                (for-each (lambda (process)
                            (let ((debugged-process (new Debugged-Process debugger process process)))
                              (let ((live? (if live-test? (live?~ debugged-process) (get-alive? debugged-process)))
                                    (focused? (debugged=? focused-process debugged-process)))
                                (proc debugger debugged-process live? focused?))))
                          (get-processes~ debugger)))
              (get-debuggers)))
  
  
  (method public (get-process-debugger target)
    (continuation-capture
      (lambda (return)
        (for-each (lambda (debugger)
                    (for-each (lambda (process)
                                (when (eq? process target)
                                  (continuation-return return debugger)))
                              (get-processes~ debugger)))
                  (get-debuggers))
        #f)))
  
  
  (method public (find-live-process process)
    (continuation-capture
      (lambda (return)
        (for-each-process
          (lambda (debugger debugged-process live? focused?)
            (when (debugged=? debugged-process process)
              (continuation-return return process))))
        #f)))
  
  
  (method public (process-changed new-process)
    (let ((new-process (when (and new-process (get-alive? new-process)) new-process)))
      (unless (debugged=? process new-process)
        (catch (Cancel-Signal exc
                 (when (get-processes-view)
                   (update~ (get-processes-view))))
          (set! process new-process)
          (when (visit-debugged process)
            (update-processes-highlight process))
          (let ((view (get-threads-view)))
            (when view
              (process-changed~ view process)
              (unless (selected-thread~ view)
                (thread-changed #f))))))))
  
  
  (definition (update-processes-highlight process)
    (when (get-processes-view)
      (update-highlight~ (get-processes-view) process)))
    
  
  ;;;
  ;;;; Liveliness
  ;;;

  
  (method public (get-alive? process)
    (table-ref liveliness-cache process #t))

  
  (method public (set-alive? process alive?)
    (table-set! liveliness-cache process alive?))
  
  
  ;;;
  ;;;; Threads
  ;;;
  
  
  (method public (for-each-thread proc (detailed?: detailed? #f))
    (define system-threads
      '(message-pump
        debuggee-pump
        debugger-pump
        local-repl
        remote-listener
        remote-connection
        catalog
        autorepeat
        autoscroll
        caret
        hovering))
    
    (define (system-thread? thread)
      (let ((name (get-name~ thread)))
        (or (memq? name system-threads)
            (and (symbol? name)
                 (starts-with? (symbol->string name) "repl")))))
    
    (when process
      (let ((debugger (get-debugger~ process)))
        (for-each (lambda (thread)
                    (when (or detailed? (not (system-thread? thread)))
                      (let ((stop (get-active-stop~ thread)))
                        (proc thread stop detailed?))))
                  (with-jrm-exception-handler
                    (lambda ()
                      (get-threads~ process)))))))
  
  
  (method public (thread-changed new-thread (user-origin: user-origin #f))
    (unless (debugged=? thread new-thread)
      (set! thread new-thread)
      (when (and (get-threads-view) (view-visible?~ (get-threads-view)))
        (when (visit-debugged thread)
          (update-threads-highlight thread)))
      (let ((frames-view (get-frames-view)))
        (when frames-view
          (thread-changed~ frames-view thread)
          (when (and user-origin
                     (view-visible?~ frames-view)
                     (get-variables-view)
                     (unzoom-debugged thread))
            (ensure-unzoomed (get-host~ (get-variables-view))))))
      (when (get-restarts-view)
        (thread-changed~ (get-restarts-view) thread))
      (when (get-exception-view)
        (thread-changed~ (get-exception-view) thread))))
  
  
  (definition (update-threads-highlight thread)
    (when (get-threads-view)
      (update-highlight~ (get-threads-view) thread)))
  
  
  ;;;
  ;;;; Frame
  ;;;

  
  (method public (for-each-frame proc)
    (define (frames stop)
      (with-jrm-exception-handler
        (lambda ()
          (get-frames~ stop))))
    
    (when (and process thread)
      (let ((stop (get-active-stop~ thread)))
        (when stop
          (for-each proc (frames stop))))))
  
  
  (method public (frame-changed new-frame (user-origin: user-origin #f))
    (set! frame new-frame)
    (when (and (get-frames-view) (or (not frame) (view-visible?~ (get-frames-view))))
      (let ((variables-view (get-variables-view)))
        (when variables-view
          (frame-changed~ variables-view frame)
          (when (and user-origin
                     (unzoom-debugged thread))
            (ensure-unzoomed (get-host~ variables-view)))))
      (when (or user-origin (not frame))
        (edit-frame frame)))
    (when (and thread (get-active-stop~ thread))
      (with-jrm-exception-handler
        (lambda ()
          (set-repl-frame~ thread (and frame (get-reference~ frame)))))))
  
  
  (definition *frame-indicator*
    (new Location-Indicator {Color Frame}))
  
  
  (method public (edit-frame frame (select?: select? #f))
    (let ((location (and frame (get-location~ frame))))
      (edit-location~ *frame-indicator* location select?: select?)))
  
  
  ;;;
  ;;;; Stop
  ;;;
  
  
  (method public (register-stop process thread stop (step?: step? #f)) ;; to test the stepper
    (define (update-process)
      (let ((empty? (not (selected-process)))
            (view (get-processes-view)))
        (when empty?
          (if view
              (set-selected-process~ view process)
            (process-changed process)))
        (update-processes-highlight process)))
    
    (define (update-thread)
      (when (debugged=? process (selected-process))
        (let ((empty? (not (selected-thread)))
              (view (get-threads-view)))
          (when view
            (process-changed~ view (selected-process)))
          (when empty?
            (if view
                (set-selected-thread~ view thread)
              (thread-changed thread)))
          (when (and view (view-visible?~ view))
            (when (visit-debugged process)
              (update-threads-highlight thread))))))
    
    (define (update-others)
      (when (debugged=? thread (selected-thread))
        (when (get-frames-view)
          (thread-changed~ (get-frames-view) thread))
        (when (get-restarts-view)
          (thread-changed~ (get-restarts-view) thread))
        (when (get-exception-view)
          (thread-changed~ (get-exception-view) thread)))
      (update-status))
    
    (define (add-active-stop debugged stop)
      (table-add active-stops debugged stop))
    
    (define (add-unvisited-stops debugged)
      (table-set! unvisited-stops debugged #t))
    
    (define (add-unzoomed-stops debugged)
      (table-set! unzoomed-stops debugged #t))
    
    (add-active-stop process stop)
    (add-active-stop thread stop)
    (add-unvisited-stops process)
    (add-unvisited-stops thread)
    (add-unzoomed-stops thread)
    (unless step?
      (error-sound))
    (update-process)
    (update-thread)
    (update-others))
  
  
  (method public (update-variables-zoom)
    (when (= (table-length unvisited-stops) 0)
      (let ((variables-view (get-variables-view)))
        (when variables-view
          (let ((variables-parent (get-parent~ variables-view)))
            (let ((variables-target (if (is? variables-parent Splitter-View) variables-view variables-parent)))
              (let ((variables-splitter (get-parent~ variables-target)))
                (when (is? variables-splitter Splitter-View)
                  (zoom~ variables-splitter (brother-view~ variables-splitter variables-target))))))))))
  
  
  (method public (unregister-stop process thread stop)
    (define (update-others)
      (when (debugged=? thread (selected-thread))
        (when (get-frames-view)
          (thread-changed~ (get-frames-view) thread))
        (when (get-restarts-view)
          (thread-changed~ (get-restarts-view) thread))
        (when (get-exception-view)
          (thread-changed~ (get-exception-view) thread)))
      (update-variables-zoom)
      (update-status))
    
    (define (remove-active-stop debugged stop)
      (let ((stops (remove! stop (table-ref active-stops debugged '()) test: debugged=?)))
        (if (not-null? stops)
            (table-set! active-stops debugged stops)
          (table-set! active-stops debugged))))
    
    (define (remove-unvisited-stops debugged)
      (unless (and (table-ref unvisited-stops debugged #f)
                   (some? (lambda (stop)
                            (table-ref unvisited-stops debugged #f))
                          (table-ref active-stops debugged '())))
        (table-set! unvisited-stops debugged)))
    
    (define (remove-unzoomed-stops debugged)
      (table-set! unzoomed-stops debugged))
    
    (remove-active-stop process stop)
    (remove-active-stop thread stop)
    (remove-unvisited-stops process)
    (remove-unvisited-stops thread)
    (remove-unzoomed-stops thread)
    (update-processes-highlight process)
    (let ((view (get-threads-view)))
      (when view
        (process-changed~ view (selected-process))))
    (update-others))
  
  
  ;;;
  ;;;; Filenames
  ;;;
  
  
  (method public (filename-processes filename)
    (let ((filename-processes (determine-filename-processes filename)))
      (if focused-mode?
          (let ((processes
                  (if focused-process
                      (list focused-process)
                    '())))
            (let ((effective-processes (intersection test: debugged=? processes filename-processes)))
              (if (not-null? effective-processes)
                  effective-processes
                (case (message-box (format "No focused process contains this file ({a}).{%}{%}Do you want to force evaluation?" filename) type: 'question yes: "Force" no: "Cancel")
                  ((yes)
                   processes)
                  ((no)
                   (signal-cancel))))))
        filename-processes)))
  
  
  (method public (determine-filename-processes filename)
    (let ((queue (new-queue)))
      (for-each (lambda (debugger)
                  (add-filename-processes~ debugger queue filename))
                (get-debuggers))
      (collect-if get-alive? (queue-list queue))))
  
  
  (method public (process-received-filenames? process)
    (let ((process (get-reference~ process)))
      (let ((debugger (get-process-debugger process)))
        (and debugger (received-runtime-filenames?~ debugger process)))))
  
  
  (method public (evaluate-filename-expressions filename syntax str container line col)
    (let ((processes (filename-processes filename)))
      (if (null? processes)
          (let ((appl (get-application)))
            (when (get-local-debugger~ appl)
              (let ((controller-debugger (get-controller-debugger)))
                (when (remote-proxy? controller-debugger)
                  (let ((targets (evaluation-processes~ appl)))
                    (let ((processes (evaluate-expressions-to~ controller-debugger targets filename syntax str container line col)))
                      (if (not-null? processes)
                          processes
                        (message-box (format "No process found that contains this file ({a})" filename))
                        #f)))))))
        (let ((cookie (register-debugger-cookie)))
          (for-each (lambda (process)
                      (evaluate-expressions~ process syntax str container line col cookie))
                    processes))
        (map get-reference~ processes))))
  
  
  ;;;
  ;;;; Properties
  ;;;
  
  
  (method public (determine-processes filter)
    (let ((queue (new-queue)))
      (for-each (lambda (debugger)
                  (for-each (lambda (process)
                              (when (filter debugger process)
                                (enqueue queue (new Debugged-Process debugger process process))))
                            (get-processes~ debugger)))
                (get-debuggers))
      (collect-if get-alive? (queue-list queue))))))
