;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Debugger Manager
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.debugger.debugger.Debugger-Manager jazz


(import (jazz.application)
        (jazz.component)
        (jazz.debuggee)
        (jazz.debugger)
        (jazz.feedback)
        (jazz.graphic)
        (jazz.media)
        (jazz.preferences)
        (jazz.project)
        (jazz.remote)
        (jazz.settings)
        (jazz.ui)
        (jazz.view)
        (jazz.workspace))


(constant stopped-frame-color     {Color Dark-Red})
(constant visited-highlight-color {Color red: 255 green: 205 blue: 205})


(class Debugger-Manager extends Object
  
  
  (slot active-stops        initialize (make-table test: debugged=? hash: debugged-hash))
  (slot unvisited-stops     initialize (make-table test: debugged=? hash: debugged-hash))
  (slot unzoomed-stops      initialize (make-table test: debugged=? hash: debugged-hash))
  (slot liveliness-cache    initialize (make-table test: debugged=? hash: debugged-hash))
  (slot evaluated-processes initialize (make-table test: debugged=? hash: debugged-hash))
  (slot evaluate-when       initialize #f getter generate)
  (slot focused-mode?       initialize #t getter generate)
  (slot focused-process     initialize #f getter generate)
  
  (slot process             initialize #f getter generate)
  (slot thread              initialize #f getter generate)
  (slot frame               initialize #f getter generate)
  
  
  (method override (initialize self)
    (nextmethod self)
    (set! evaluate-when (get-evaluate-when (current-preferences 'debug)))
    (set! focused-mode? (get-focused-mode? (current-preferences 'debug))))
  
  
  (method public (debugging? self)
    (/= 0 (table-length active-stops)))
  
  
  (method public (selected-process self)
    (let ((processes-view (get-processes-view)))
      (if processes-view
          (selected-process processes-view)
        process)))
  
  
  (method public (selected-thread self)
    (let ((threads-view (get-threads-view)))
      (if threads-view
          (selected-thread threads-view)
        thread)))
  
  
  (method public (selected-frame self)
    (let ((frames-view (get-frames-view)))
      (if frames-view
          (selected-frame frames-view)
        frame)))
  
  
  ;;;
  ;;;; Report
  ;;;
  
  
  (method protected virtual (report-message self format-string . rest)
    (let ((message (apply format format-string rest)))
      (message-box message)))
  
  
  (method protected virtual (report-status self format-string . rest)
    (let ((message (apply format format-string rest)))
      (user-message message)))
  
  
  ;;;
  ;;;; Status
  ;;;
  
  
  (method public (visit-debugged self debugged)
    (and (not (debugged-visited? self debugged))
         (begin
           (table-set! unvisited-stops debugged)
           (update-status self)
           #t)))
  
  
  (method public (unzoom-debugged self debugged)
    (and (not (debugged-zoomed? self debugged))
         (begin
           (table-set! unzoomed-stops debugged)
           #t)))
  
  
  (method public (update-status self)
    (let ((toolbar (find-toolbar (current-application))))
      (when toolbar
        (let ((button (find-component toolbar 'debugger))
              (visited? (> (table-length unvisited-stops) 0))
              (stopped? (> (table-length active-stops) 0)))
          (when button
            (notify button visited? stopped?))))))
  
  
  (method public (get-stopped-frame-color self debugged)
    (and (debugged-stopped? self debugged)
         stopped-frame-color))
  
  
  (method public (get-visited-highlight-color self debugged)
    (and (not (debugged-visited? self debugged))
         visited-highlight-color))
  
  
  (method (debugged-stopped? self debugged)
    (not-null? (table-ref active-stops debugged '())))
  
  
  (method package (debugged-visited? self debugged)
    (not (table-ref unvisited-stops debugged #f)))
  
  
  (method (debugged-zoomed? self debugged)
    (not (table-ref unzoomed-stops debugged #f)))
  
  
  (method public (get-active-stops self debugged)
    (table-ref active-stops debugged '()))
  
  
  ;;;
  ;;;; Evaluation
  ;;;
  
  
  (method public virtual (process-evaluate-when self process)
    (let ((default (if (eq? (get-reference process) (get-local-process))
                       'known
                     (or evaluate-when 'known))))
      (table-ref evaluated-processes process default)))
  
  
  (method public (process-evaluate-never self process)
    (table-set! evaluated-processes process 'never))
  
  (method public (process-evaluate-known self process)
    (table-set! evaluated-processes process 'known))
  
  (method public (process-evaluate-always self process)
    (table-set! evaluated-processes process 'always))
  
  
  ;;;
  ;;;; Focused
  ;;;
  
  
  (method public (toggle-focused-mode self)
    (set! focused-mode? (not focused-mode?))
    (let ((processes-view (get-processes-view)))
      (when processes-view
        (update-focused-mode processes-view focused-mode?)
        (update processes-view)))
    (focused-process-update self))
  
  
  (method public (require-focused-process self)
    (or (get-focused-process self)
        (begin
          (message-box "There is no focused process")
          (signal-cancel))))
  
  
  (method public (focus-process self process)
    (set! focused-mode? #t)
    (set-focused-process self process)
    (let ((processes-view (get-processes-view)))
      (when processes-view
        (update-focused-mode processes-view focused-mode?)
        (update processes-view))))
  
  
  (method (set-focused-process self process)
    (set! focused-process process)
    (focused-process-update self))
  
  
  (method (focused-process-update self)
    (let ((focus-status-view (find-status-bar (current-application))))
      (and (unit-loadable? 'jazz.ide.application.IDE-Status)
           (is? focus-status-view jazz.ide:IDE-Status)
           (jazz.ide:update-focused-process focus-status-view))))
  
  
  ;;;
  ;;;; Processes
  ;;;
  
  
  (method public (attach-process self process focus?)
    (define (add-unzoomed-stops debugged)
      (table-set! unzoomed-stops debugged #t))
    
    (for-each (lambda (thread)
                (when (not-null? (with-remote-exception-handler process
                                   (lambda ()
                                     (get-stops thread))))
                  (add-unzoomed-stops thread)))
              (with-remote-exception-handler process
                (lambda ()
                  (get-threads process))))
    (when (and focus? (focusable? process))
      (set-focused-process self process))
    (when (get-processes-view)
      (update (get-processes-view))))
  
  
  (method public (detach-process self process)
    (define (best-process)
      (continuation-capture
        (lambda (return)
          (for-each-process self
            (lambda (debugger debugged-process live? focused?)
              (when (and live?
                         (focusable? debugged-process)
                         (not (debugged=? debugged-process process)))
                (continuation-return return debugged-process))))
          #f)))
    
    (define (cleanup-stops table)
      (for-each (lambda (key)
                  (when (shared-process? process key)
                    (table-clear table key)))
                (table-keys table)))
    
    (when (debugged=? focused-process process)
      (let ((best-process (best-process)))
        (unless (debugged=? best-process process)
          (set-focused-process self best-process))))
    (close-process-debugger-resources process)
    (cleanup-process-configurations process)
    (cleanup-stops active-stops)
    (cleanup-stops unvisited-stops)
    (cleanup-stops unzoomed-stops)
    (let ((view (get-processes-view)))
      (when view
        (update view)
        (unless (selected-process view)
          (process-changed self #f))))
    (cleanup-liveliness-cache self process)
    (update-variables-zoom self)
    (update-status self))
  
  
  (method public (for-each-process self proc (live-test?: live-test? #f))
    (for-each (lambda (debugger)
                (for-each (lambda (process)
                            (let ((debugged-process (new Debugged-Process debugger process process)))
                              (let ((live? (if live-test? (live? debugged-process) (get-alive? self debugged-process)))
                                    (focused? (debugged=? focused-process debugged-process)))
                                (when live-test?
                                  (set-alive? self debugged-process live?))
                                (proc debugger debugged-process live? focused?))))
                          (get-processes debugger)))
              (get-debuggers)))
  
  
  (method public (get-process-debugger self target)
    (continuation-capture
      (lambda (return)
        (for-each (lambda (debugger)
                    (for-each (lambda (process)
                                (when (eq? process target)
                                  (continuation-return return debugger)))
                              (get-processes debugger)))
                  (get-debuggers))
        #f)))
  
  
  (method public (find-live-process self process)
    (continuation-capture
      (lambda (return)
        (for-each-process self
          (lambda (debugger debugged-process live? focused?)
            (when (debugged=? debugged-process process)
              (continuation-return return process))))
        #f)))
  
  
  (method public (process-changed self new-process)
    (let ((new-process (and new-process (get-alive? self new-process) new-process)))
      (unless (debugged=? process new-process)
        (catch (Cancel-Signal exc
                 (when (get-processes-view)
                   (update (get-processes-view))))
          (set! process new-process)
          (when (visit-debugged self process)
            (update-processes-highlight process))
          (let ((view (get-threads-view)))
            (when view
              (process-changed view process)
              (unless (selected-thread view)
                (thread-changed self #f))))))))
  
  
  (definition (update-processes-highlight process)
    (when (get-processes-view)
      (update-highlight (get-processes-view) process)))
    
  
  ;;;
  ;;;; Liveliness
  ;;;

  
  (method public (get-alive? self process)
    (table-ref liveliness-cache process #t))

  
  (method public (set-alive? self process alive?)
    (table-set! liveliness-cache process alive?))
  
  
  (method (cleanup-liveliness-cache self process)
    (table-clear liveliness-cache process))
  
  
  ;;;
  ;;;; Threads
  ;;;
  
  
  (method public (for-each-thread self proc (detailed?: detailed? #f))
    (define system-threads
      '(debuggee-pump
        debugger-pump
        local-repl
        remote-listener
        remote-connection
        remote-switchboard
        remote-pump
        remote-post
        remote-exec
        remote-call
        message
        catalog
        autorepeat
        autoscroll
        caret
        hovering
        runtime-information))
    
    (define (system-thread? thread)
      (let ((name (get-name thread)))
        (or (memq? name system-threads)
            (and (symbol? name)
                 (starts-with? (symbol->string name) "repl")))))
    
    (when process
      (let ((threads (with-remote-exception-handler process
                       (lambda ()
                         (get-threads process)))))
        (for-each (lambda (thread)
                    (when (or detailed? (not (system-thread? thread)))
                      (let ((stop (get-active-stop thread)))
                        (proc thread stop detailed?))))
                  (sort nu<? threads key: (lambda (thread)
                                            (let ((name (get-name thread))
                                                  (system? (system-thread? thread)))
                                              (cons (cond ((eq? name 'primordial) 0)
                                                          ((not system?) 1)
                                                          (else 2))
                                                    (if (and name (specified? name))
                                                        name
                                                      'thread)))))))))
  
  
  (method public (thread-changed self new-thread (user-origin: user-origin #f))
    (unless (debugged=? thread new-thread)
      (set! thread new-thread)
      (when (and (get-threads-view) (view-visible? (get-threads-view)))
        (when (visit-debugged self thread)
          (update-threads-highlight thread)))
      (let ((frames-view (get-frames-view)))
        (when frames-view
          (thread-changed frames-view thread)
          (when (and user-origin
                     (view-visible? frames-view)
                     (get-variables-view)
                     (unzoom-debugged self thread))
            (ensure-unzoomed (get-host (get-variables-view))))))
      (when (get-restarts-view)
        (thread-changed (get-restarts-view) thread))
      (when (get-exception-view)
        (thread-changed (get-exception-view) thread))))
  
  
  (definition (update-threads-highlight thread)
    (when (get-threads-view)
      (update-highlight (get-threads-view) thread)))
  
  
  ;;;
  ;;;; Frame
  ;;;

  
  (method public (for-each-frame self proc)
    (define (frames stop)
      (with-remote-exception-handler process
        (lambda ()
          (get-frames stop))))
    
    (when (and process thread)
      (let ((stop (get-active-stop thread)))
        (when stop
          (for-each proc (frames stop))))))
  
  
  (method public (frame-changed self new-frame (user-origin: user-origin #f))
    (set! frame new-frame)
    (when (and (get-frames-view) (or (not frame) (view-visible? (get-frames-view))))
      (let ((variables-view (get-variables-view)))
        (when variables-view
          (frame-changed variables-view frame)
          (when (and user-origin
                     (unzoom-debugged self thread))
            (ensure-unzoomed (get-host variables-view)))))
      (when (or user-origin (not frame))
        (edit-frame self frame)))
    (when (and thread (get-active-stop thread))
      (with-remote-exception-handler process
        (lambda ()
          (set-repl-frame thread (and frame (get-reference frame)))))))
  
  
  (definition *frame-indicator*
    (new Location-Indicator {Color Frame}))
  
  
  (method public (edit-frame self frame (select?: select? #f))
    (parameterize ((ignore-outlines? #t))
      (let ((location (and frame (get-location frame))))
        (edit-location *frame-indicator* location select?: select?))))
  
  
  ;;;
  ;;;; Stop
  ;;;
  
  
  (method public (register-stop self process thread stop (sound?: sound? #t) (step?: step? #f)) ;; to test the stepper
    (define (update-process)
      (let ((empty? (not (selected-process self)))
            (view (get-processes-view)))
        (when empty?
          (if view
              (set-selected-process view process)
            (process-changed self process)))
        (update-processes-highlight process)))
    
    (define (update-thread)
      (when (debugged=? process (selected-process self))
        (let ((empty? (not (selected-thread self)))
              (view (get-threads-view)))
          (when view
            (process-changed view (selected-process self)))
          (when empty?
            (if view
                (set-selected-thread view thread)
              (thread-changed self thread)))
          (when (and view (view-visible? view))
            (when (visit-debugged self process)
              (update-threads-highlight thread))))))
    
    (define (update-others)
      (when (debugged=? thread (selected-thread self))
        (when (get-frames-view)
          (thread-changed (get-frames-view) thread))
        (when (get-restarts-view)
          (thread-changed (get-restarts-view) thread))
        (when (get-exception-view)
          (thread-changed (get-exception-view) thread)))
      (update-status self))
    
    (define (add-active-stop debugged stop)
      (table-add active-stops debugged stop))
    
    (define (add-unvisited-stops debugged)
      (table-set! unvisited-stops debugged #t))
    
    (define (add-unzoomed-stops debugged)
      (table-set! unzoomed-stops debugged #t))
    
    (add-active-stop process stop)
    (add-active-stop thread stop)
    (add-unvisited-stops process)
    (add-unvisited-stops thread)
    (add-unzoomed-stops thread)
    (when sound?
      (unless (or step? (eq? (get-kind stop) 'break))
        (error-sound)))
    (update-process)
    (update-thread)
    (update-others))
  
  
  (method public (update-variables-zoom self)
    (when (= (table-length active-stops) 0)
      (let ((variables-view (get-variables-view)))
        (when variables-view
          (let ((variables-parent (get-parent variables-view)))
            (let ((variables-target (if (is? variables-parent Splitter-View) variables-view variables-parent)))
              (let ((variables-splitter (get-parent variables-target)))
                (when (is? variables-splitter Splitter-View)
                  (zoom variables-splitter (brother-view variables-splitter variables-target))))))))))
  
  
  (method public (unregister-stop self process thread stop)
    (define (update-others)
      (let ((selected-thread (selected-thread self)))
        (when (or (debugged=? thread selected-thread) (not selected-thread))
          (when (get-frames-view)
            (thread-changed (get-frames-view) thread))
          (when (get-restarts-view)
            (thread-changed (get-restarts-view) thread))
          (when (get-exception-view)
            (thread-changed (get-exception-view) thread)))
        (update-variables-zoom self)
        (update-status self)))
    
    (define (remove-active-stop debugged stop)
      (let ((stops (remove! stop (table-ref active-stops debugged '()) test: debugged=?)))
        (if (not-null? stops)
            (table-set! active-stops debugged stops)
          (table-set! active-stops debugged))))
    
    (define (remove-unvisited-stops debugged)
      (unless (and (table-ref unvisited-stops debugged #f)
                   (some? (lambda (stop)
                            (table-ref unvisited-stops debugged #f))
                          (table-ref active-stops debugged '())))
        (table-set! unvisited-stops debugged)))
    
    (define (remove-unzoomed-stops debugged)
      (table-set! unzoomed-stops debugged))
    
    (remove-active-stop process stop)
    (remove-active-stop thread stop)
    (remove-unvisited-stops process)
    (remove-unvisited-stops thread)
    (remove-unzoomed-stops process)
    (remove-unzoomed-stops thread)
    (update-processes-highlight process)
    (let ((view (get-threads-view)))
      (when view
        (process-changed view (selected-process self))))
    (update-others))
  
  
  ;;;
  ;;;; Filenames
  ;;;
  
  
  (method public (filename-processes self filename)
    (let ((always (collect-always-processes self))
          (processes (evaluation-filename-processes self filename)))
      (let ((forced (collect-if (~ has-information? self) (difference always processes test: debugged=?))))
        (if (not-null? forced)
            (if (not (and (= (length forced) 1) (is? (get-reference (first forced)) Local-Proxy)))
                (case (if (find-setting 'jazz.debugger.warn-evaluate? #t)
                          (message-box (format "Some processes do not contain the current file: {a}.{%}{%}Do you want to force evaluation?" filename) type: 'confirmation yes: "Force" no: "Known")
                        'yes)
                  ((yes)
                   (union test: debugged=? always processes))
                  ((no)
                   processes)
                  ((cancel)
                   (signal-cancel)))
              (union test: debugged=? always processes))
          processes))))
  
  
  (method public (effective-filename-processes self filename)
    (union test: debugged=?
      (evaluation-filename-processes self filename)
      (collect-always-processes self)))
  
  
  (method public (evaluation-filename-processes self filename)
    (remove-never-processes self
      (let ((processes (determine-filename-processes self filename)))
        (if focused-mode?
            (let ((always (collect-always-processes self))
                  (focused-processes (or (determine-focused-processes self) '())))
              (intersection test: debugged=? (union always focused-processes) processes))
          processes))))
  
  
  (method public (determine-focused-processes self)
    (and focused-mode? focused-process
      (let ((debugger (get-debugger focused-process)))
        (map (lambda (process)
               (new Debugged-Process debugger process process))
             (determine-process-processes debugger (get-reference focused-process))))))
  
  
  (method (remove-never-processes self processes)
    (collect-if (lambda (process)
                  (neq? (process-evaluate-when self process) 'never))
                processes))
  
  
  (method package (collect-always-processes self)
    (let ((queue (new-queue)))
      (for-each-process self
        (lambda (debugger debugged-process live? focused?)
          (when (eq? (process-evaluate-when self debugged-process) 'always)
            (enqueue queue debugged-process))))
      (queue-list queue)))
  
  
  (method public (determine-filename-processes self filename)
    (let ((queue (new-queue)))
      (for-each (lambda (debugger)
                  (add-filename-processes debugger queue filename))
                (get-debuggers))
      (collect-if (~ get-alive? self) (queue-list queue))))
  
  
  (method public (process-needs-filenames? self process)
    (eq? (process-evaluate-when self process) 'known))
  
  
  (method public (process-received-filenames? self process)
    (if (process-needs-filenames? self process)
        (let ((process (get-reference process)))
          (let ((debugger (get-process-debugger self process)))
            (and debugger (received-runtime-filenames? debugger process))))
      #t))
  
  
  (method public (evaluate-filename-expressions self filename forms syntax str container line col evaluation-mode)
    (let ((processes (filename-processes self filename)))
      (let ((walk-debugger (find-object (get-local-register) 'debugger))
            (walk-cookie (register-debugger-cookie)))
        (for-each (lambda (process)
                    (evaluate-expressions process forms syntax str container line col evaluation-mode walk-debugger walk-cookie))
                  processes))
      (map get-reference processes)))
  
  
  (method public (has-information? self process)
    (determine-process-information? (get-debugger process) (get-reference process)))
  
  
  ;;;
  ;;;; Properties
  ;;;
  
  
  (method public (determine-processes self filter)
    (let ((queue (new-queue)))
      (for-each (lambda (debugger)
                  (for-each (lambda (process)
                              (when (filter debugger process)
                                (enqueue queue (new Debugged-Process debugger process process))))
                            (get-processes debugger)))
                (get-debuggers))
      (collect-if (~ get-alive? self) (queue-list queue))))))
