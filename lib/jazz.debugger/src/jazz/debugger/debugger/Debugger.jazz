;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Debuggers
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.debugger.debugger.Debugger jazz


(class Debugger extends Object
  
  
  ;;;
  ;;;; Debugger
  ;;;
  
  
  (method public virtual (start-debugger self))
  (method public virtual (stop-debugger self))
  (method public virtual (get-processes self . rest))
  (method public virtual (validate-processes self))
  (method public virtual (detach-processes self))
  (method public virtual (standard-process-image self))

  
  ;;;
  ;;;; Process
  ;;;
  
  
  (method public virtual (process=? self x-process y-process))
  (method public virtual (process-live? self process))
  (method public virtual (process-title self process))
  (method public virtual (process-icon self process))
  (method public virtual (process-threads self process))
  (method public virtual (present-process self process))
  (method public virtual (reload-process self process))
  (method public virtual (process-focusable? self process))
  (method public virtual (transmit-runtime-information self process what))
  (method public virtual (received-runtime-filenames? self process))
  (method public virtual (add-filename-processes self queue filename))
  (method public virtual (clear-runtime-information self process))
  (method public virtual (determine-process-processes self process))
  (method public virtual (determine-process-child? self process child))
  (method public virtual (determine-process-properties self process))
  (method public virtual (determine-process-property self process property default))
  (method public virtual (determine-process-information? self process))
  (method public virtual (evaluate-expressions self process forms syntax str container line col evaluation-mode walk-debugger walk-cookie))
  (method public virtual (profiler-start self process))
  (method public virtual (profiler-stop self process))
  (method public virtual (profiler-profiles self process))
  (method public virtual (profiler-selected-profile self process))
  (method public virtual (profiler-selected-profile-set! self process name))
  (method public virtual (profiler-profile self process))
  (method public virtual (profile-reset self process profiler depth all?))
  (method public virtual (tracker-start self process))
  (method public virtual (tracker-stop self process))
  (method public virtual (tracker-trackings self process))
  (method public virtual (tracker-selected-tracking self process))
  (method public virtual (tracker-selected-tracking-set! self process name))
  (method public virtual (tracker-tracking self process))
  (method public virtual (tracking-reset self process all?))
  (method public virtual (inspect-serial self process serial max-content))
  (method public virtual (present-serial self process serial))
  (method public virtual (try-out self process class))
  (method public virtual (process-detach self process))
  (method public virtual (process-quit self process))

  
  ;;;
  ;;;; Thread
  ;;;
  
  
  (method public virtual (thread=? self x-thread y-thread))
  (method public virtual (get-thread-name self process thread))
  (method public virtual (get-thread-state self process thread))
  (method public virtual (get-thread-id self process thread))
  (method public virtual (get-thread-stops self process thread))
  (method public virtual (get-thread-active-stop self process thread))
  (method public virtual (break-thread self process thread))
  (method public virtual (repl-thread self process thread))
  (method public virtual (terminate-thread self process thread preserve-console?))
  (method public virtual (kill-thread self process thread))
  (method public virtual (set-repl-frame self process thread frame))
  (method public virtual (thread-debugged-continuation? self process thread))

  
  ;;;
  ;;;; Restart
  ;;;
  
  
  (method public virtual (restart=? self x-restart y-restart))
  (method public virtual (restart-name self process restart))
  (method public virtual (restart-message self process restart))
  (method public virtual (restart-stop self process restart))

  
  ;;;
  ;;;; Stop
  ;;;
  
  
  (method public virtual (stop=? self x-stop y-stop))
  (method public virtual (stop-kind self process stop))
  (method public virtual (stop-reason self process stop))
  (method public virtual (stop-detail self process stop))
  (method public virtual (stop-location self process stop))
  (method public virtual (stop-restarts self process stop))
  (method public virtual (stop-frames self process stop))
  (method public virtual (continue-stop self process stop))
  (method public virtual (step-stop self process stop command))

  
  ;;;
  ;;;; Frame
  ;;;
  
  
  (method public virtual (frame=? self x-frame y-frame))
  (method public virtual (frame-name self process frame))
  (method public virtual (frame-interpreted? self process frame))
  (method public virtual (frame-hidden? self process frame))
  (method public virtual (frame-location self process frame))
  (method public virtual (frame-variables self process frame kind))
  (method public virtual (frame-variable-name self process frame variable))
  (method public virtual (frame-variable-value self process frame variable))))
