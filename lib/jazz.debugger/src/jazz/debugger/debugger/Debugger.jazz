;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Debuggers
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library protected jazz.debugger.debugger.Debugger jazz


(import (jazz.debugger))


(class Debugger extends Object
  
  
  ;;;
  ;;;; Debugger
  ;;;
  
  
  (method public virtual (start-debugger))
  (method public virtual (stop-debugger))
  (method public virtual (get-processes . rest))
  (method public virtual (detach-processes))

  
  ;;;
  ;;;; Process
  ;;;
  
  
  (method public virtual (process=? x-process y-process))
  (method public virtual (process-live? process))
  (method public virtual (process-title process))
  (method public virtual (process-icon process))
  (method public virtual (process-threads process))
  (method public virtual (present-process process))
  (method public virtual (reload-process process))
  (method public virtual (evaluate-expressions process syntax str container line col))
  (method public virtual (inspect-serial process serial))
  (method public virtual (process-detach process))
  (method public virtual (process-exit process))

  
  ;;;
  ;;;; Thread
  ;;;
  
  
  (method public virtual (thread=? x-process x-thread y-process y-thread))
  (method public virtual (thread-name process thread))
  (method public virtual (thread-state process thread))
  (method public virtual (thread-stops process thread))
  (method public virtual (thread-active-stop process thread))
  (method public virtual (break-thread process thread))
  (method public virtual (set-repl-frame process thread frame))

  
  ;;;
  ;;;; Restart
  ;;;
  
  
  (method public virtual (restart=? x-process x-restart y-process y-restart))
  (method public virtual (restart-name process restart))
  (method public virtual (restart-message process restart))
  (method public virtual (restart-stop process restart))

  
  ;;;
  ;;;; Stop
  ;;;
  
  
  (method public virtual (stop=? x-process x y-process y))
  (method public virtual (stop-kind process stop))
  (method public virtual (stop-reason process stop))
  (method public virtual (stop-detail process stop))
  (method public virtual (stop-restarts process stop))
  (method public virtual (stop-frames process stop))
  (method public virtual (continue-stop process stop))

  
  ;;;
  ;;;; Frame
  ;;;
  
  
  (method public virtual (frame=? x-process x-frame y-process y-frame))
  (method public virtual (frame-name process frame))
  (method public virtual (frame-interpreted? process frame))
  (method public virtual (frame-location process frame))
  (method public virtual (frame-variables process frame))
  (method public virtual (frame-variable-name process frame variable))
  (method public virtual (frame-variable-value process frame variable))))
