;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Detail View
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.debugger.debugger.Detail-View jazz


(import (jazz.debugger)
        (jazz.jml)
        (jazz.library)
        (jazz.project)
        (jazz.system)
        (jazz.ui))


(class Detail-View extends Layout-View
  

  (form
    (<install>                              layout-type: border
      (<Layout-View>         name: tools)
      (<Scroller-View>       name: scroller location: center vscroll?: #t style: tool
        (<!>                 name: content  layout-type: fill
          (<Tree-Header>     name: header   shown?: #f
            (<!>             name: content
              (<Detail-Tree> name: detail   multiple-selection?: #f selection-mode: row selection-handler: {Selection-Handler :form on-edit-stop/detail})))))))
  
  
  ;;;
  ;;;; Docked
  ;;;
  
  
  (method override (get-tools-view)
    (locate 'tools))
  
  
  (method override (focus-default)
    (let ((tree (locate 'detail)))
      (acquire-focus~ tree)))

  
  ;;;
  ;;;; Edition
  ;;;
  

  (definition *indicators*
    #f)


  (method (edit-stop/detail)
    (define (install-indicators locations)
      (uninstall-active-indicators)
      (for-each (lambda (location)
                  (let ((info (find-location location)))
                    (if (not info)
                        (bell)
                      (receive (frame text range) info
                        (let ((model (get-model~ text)))
                          (apply-style~ model 'Fatal (get-start~ range) (get-end~ range))
                          (ensure-cell-displayed~ text (get-start~ range))
                          (reset-tooltip~ text)
                          (acquire-focus~ text))))))
                locations)
      (set! *indicators* locations))
    
    (define (uninstall-indicators locations)
      (for-each (lambda (location)
                  (let ((info (find-location location)))
                    (when info
                      (receive (frame text range) info
                        (let ((model (get-model~ text)))
                          (apply-style~ model (get-default-style~ model) (get-start~ range) (get-end~ range))
                          (reset-tooltip~ text))))))
                locations))
    
    (define (uninstall-active-indicators)
      (when *indicators*
        (uninstall-indicators *indicators*)
        (set! *indicators* #f)))
    
    (define (find-location location)
      (bind (container line col) location
        (let ((file (container->file container)))
          (when file
            (let ((start (new Cell line col))
                  (end (new Cell line (+ col 1))))
              (let ((frame (edit-document~ (get-application) file activate-focus?: #f visible?: #f)))
                (let ((text (get-guest~ frame)))
                  (let ((range (valid-range~ text (new Range$Cell$ start end))))
                    (values frame text range)))))))))
    
    (define (detail-locations detail)
      (collect (lambda (detail)
                 (let ((location (get-location~ detail)))
                   (when location
                     (if (pair? location)
                         location
                       (let ((locat (get-locat~ location)))
                         (locat->container/line/col locat))))))
               (detail-subdetails detail)))
    
    ;; when all this works, I think stop details
    ;; should really be just a linear list...
    (define (detail-subdetails detail)
      (let ((queue (new-queue)))
        (define (recurse detail)
          (when detail
            (enqueue queue detail)
            (for-each recurse (get-children~ detail))))
        
        (recurse detail)
        (queue-list queue)))
    
    (let ((data (selected-data)))
      (cond ((not data)
             (uninstall-active-indicators))
            ((is? data Debugged-Stop)
             (let ((location (get-location~ data)))
               (if (not location)
                   (begin
                     (uninstall-active-indicators)
                     (bell))
                 (install-indicators (list location)))))
            ((is? data Exception-Detail)
             (let ((locations (detail-locations data)))
               (if (null? locations)
                   (begin
                     (uninstall-active-indicators)
                     (bell))
                 (install-indicators locations)))))))

  
  ;;;
  ;;;; Events
  ;;;


  (method override (resize dh dv)
    (nextmethod dh dv)
    (size-figure~ (locate 'scroller) dh dv))
  
  
  (method (on-edit-stop/detail evt)
    (edit-stop/detail)
    ;; as a quick solution we let the previous call give the focus to the document
    ;; because a lot of framework behavior depends on a new document gaining focus
    (let ((user-origin (get-user-origin~ evt)))
      (when user-origin
        (acquire-focus~ (locate 'detail)))))
  
  
  ;;;
  ;;;; Selection
  ;;;
  
  
  (method (selected-data)
    (define (row-data row)
      (when row
        (or (get-user-data~ row)
            (row-data (get-father~ row)))))
    
    (row-data (selected-row)))
  
  
  (method (selected-row)
    (let* ((tree (locate 'detail))
           (n (get-single-selection~ tree)))
      (when n
        (get-row~ tree n)))))


;;;
;;;; Detail-Tree
;;;


(class Detail-Tree extends Tree-View
  
  
  (form
    (<install>                         portfolio: :images
      (<Tree-Node-Column> name: detail title: "Detail" width: 431 toplevel-controls?: #f)))))
