;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Exception View
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.debugger.debugger.Exception-View jazz


(import (jazz.debugger)
        (jazz.resource)
        (jazz.ui))


(class Exception-View extends Detail-View
  
  
  (property thread initialize #f)
  
  
  (slot stop initialize #f)

  
  (method meta override (external-name . rest)
    'Exception)

  
  ;;;
  ;;;; Host
  ;;;
  
  
  (method meta override (host-icon)
    {Image-Resource "Info"})
  
  
  (method meta override (host-title)
    "Exception")

  
  ;;;
  ;;;; Thread
  ;;;
  
  
  (method public (get-thread)
    thread)
  
  
  (method public (set-thread value)
    (set! thread value)
    (set! stop (and thread (get-active-stop~ thread)))
    (update))
  
  
  (method public (thread-changed new-thread)
    (set! thread new-thread)
    (set! stop (and thread (get-active-stop~ thread)))
    (update)
    (edit-stop/detail))

  
  ;;;
  ;;;; Update
  ;;;

  
  (method protected (update)
    (define (stop-title stop)
      (let ((reason (get-reason~ stop)))
        (if (not reason)
            "Break"
          (let ((line (car (split reason "\n"))))
            line))))
    
    (define (stop-image stop)
      (case (get-kind~ stop)
        ((exception) {Image-Resource "ErrorStop"})
        (else {Image-Resource "BreakStop"})))
    
    (define (stop-reason-lines stop)
      (let ((reason (or (get-reason~ stop) "Break")))
        (split reason "\n")))
    
    (define (insert-detail tree father detail)
      (let ((title (get-title~ detail))
            (icon (get-icon~ detail)))
        (let ((image (if icon (new Image-Resource icon) #f)))
          (let ((row (add-row~ tree father: father state: 'expanded children: (list (new Tree-Node title: title image: image)) user-data: detail)))
            (for-each (lambda (subdetail)
                        (insert-detail tree row subdetail))
                      (get-children~ detail))))))
    
    (with-system-exception-debugger
      (lambda ()
        (let ((tree (locate 'detail)))
          (remove-every-row~ tree)
          (with-update-locked~ tree
            (lambda ()
              (when (and stop (get-kind~ stop))
                (let ((title (stop-title stop))
                      (image (stop-image stop))
                      (detail (get-detail~ stop)))
                  (if detail
                      (insert-detail tree #f detail)
                    (let ((stop-row (add-row~ tree state: 'expanded children: (list (new Tree-Node title: title image: image)) user-data: stop)))
                      (for-each (lambda (line)
                                  (when (not (empty-string? line))
                                    (let ((title line)
                                          (image {Image-Resource "Green"}))
                                      (add-row~ tree father: stop-row children: (list (new Tree-Node title: title image: image))))))
                                (cdr (stop-reason-lines stop)))))))))))))))
