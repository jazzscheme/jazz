;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Exception View
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.debugger.debugger.Exception-View jazz


(import (jazz.debugger)
        (jazz.io)
        (jazz.jml)
        (jazz.library)
        (jazz.platform)
        (jazz.system)
        (jazz.ui))


(class Exception-View extends Layout-View
  
  
  (property thread initialize {})
  
  
  (slot stop initialize {})
  

  (form
    (<install>                                layout-type: border
      (<Layout-View>         name: tools)
      (<Scroller-View>       name: scroller   location: center vscroll?: #t flat?: #t
        (<!>                 name: content    layout-type: fill
          (<Tree-Header>     name: header     shown?: #f
            (<!>             name: content
              (<Detail-Tree> name: detail     multiple-selection?: #f selection-mode: row selection-handler: {Selection-Handler :form on-edit-stop/detail #t})))))))

  
  (method meta override (external-name . rest)
    'exception-view)

  
  ;;;
  ;;;; Host
  ;;;
  
  
  (method meta override (host-icon)
    {Bitmap-Resource "Info"})
  
  
  (method meta override (host-title)
    "Exception")
  
  
  ;;;
  ;;;; Docked
  ;;;
  
  
  (method override (get-tools-view)
    (locate 'tools))
  
  
  (method override (focus-default)
    (let ((tree (locate 'detail)))
      (acquire-focus~ tree)))

  
  ;;;
  ;;;; Access
  ;;;
  
  
  (method public (get-thread)
    thread)
  
  
  (method public (set-thread value)
    (define (thread-stop thread)
      (when thread
        (let ((object (get-active-stop~ thread)))
          (if (not object)
              {}
            (let ((debugger (get-debugger~ thread))
                  (process (get-process~ thread)))
              (new Debugged-Stop debugger process object))))))
    
    (set! thread value)
    (set! stop (thread-stop thread))
    (update))
  
  
  (method public (thread-changed new-thread)
    (define (thread-stop)
      (when thread
        (let ((object (get-active-stop~ thread)))
          (if (not object)
              {}
            (let ((debugger (get-debugger~ thread))
                  (process (get-process~ thread)))
              (new Debugged-Stop debugger process object))))))
    
    (set! thread new-thread)
    (set! stop (thread-stop))
    (update)
    (edit-stop/detail))

  
  ;;;
  ;;;; Edition
  ;;;
  

  (definition *indicators*
    {})


  (method (edit-stop/detail)
    (define (detail-locations detail)
      (collect (lambda (detail)
                 (let ((location (get-location~ detail)))
                   (when location
                     (locat->file/line/col (get-locat~ location)))))
               (detail-subdetails detail)))
    
    ;; when all this works, I think stop details
    ;; should really be just a linear list...
    (define (detail-subdetails detail)
      (let ((queue (new-queue)))
        (define (recurse detail)
          (when detail
            (enqueue queue detail)
            (for-each recurse (get-children~ detail))))
        
        (recurse detail)
        (queue-list queue)))
    
    (let ((data (selected-data)))
      (cond ((not data)
             (uninstall-active-indicators))
            ((is? data Debugged-Stop)
             (let ((location (get-location~ data)))
               (if (not location)
                   (begin
                     (uninstall-active-indicators)
                     (bell))
                 (install-indicators (list location)))))
            ((is? data Exception-Detail)
             (let ((locations (detail-locations data)))
               (if (null? locations)
                   (begin
                     (uninstall-active-indicators)
                     (bell))
                 (install-indicators locations)))))))
  
  
  (method (install-indicators locations)
    (uninstall-active-indicators)
    (for-each (lambda (location)
                (receive (frame text range) (find-location location)
                  (apply-style~ text 'Walk-Fatal (get-start~ range) (get-end~ range))
                  (ensure-cell-displayed~ text (get-start~ range))
                  (reset-tooltip~ text)
                  (bring-to-front~ frame)
                  (set-visible?~ frame #t)))
              locations)
    (set! *indicators* locations))
  
  
  (method (uninstall-indicators locations)
    (for-each (lambda (location)
                (receive (frame text range) (find-location location)
                  (apply-style~ text (get-default-style~ text) (get-start~ range) (get-end~ range))
                  (reset-tooltip~ text)))
              locations))


  (method protected (uninstall-active-indicators)
    (when *indicators*
      (uninstall-indicators *indicators*)
      (set! *indicators* {})))
  
  
  (definition (find-location location)
    (bind (filename line col) location
      (let ((file (new File (list filename)))
            (start (new Cell line col))
            (end (new Cell line (+ col 1))))
        (let ((frame (edit-document~ (get-application) file activate-focus?: #f visible?: #f))
              (range (new Range$Cell$ start end)))
          (values frame (get-guest~ frame) range)))))

  
  ;;;
  ;;;; Events
  ;;;


  (method override (resize dh dv)
    (nextmethod dh dv)
    (size-figure~ (locate 'scroller) dh dv))
  
  
  (method (on-edit-stop/detail evt)
    (edit-stop/detail))

  
  ;;;
  ;;;; Update
  ;;;


  (method protected (update)
    (define (stop-title stop)
      (let ((reason (get-reason~ stop)))
        (if (not reason)
            "Break"
          (let ((line (car (split reason "\n"))))
            line))))
    
    (define (stop-image stop)
      (case (get-kind~ stop)
        ((exception) {Bitmap-Resource "ErrorStop"})
        (else {Bitmap-Resource "BreakStop"})))
    
    (define (stop-reason-lines stop)
      (let ((reason (either (get-reason~ stop) "Break")))
        (split reason "\n")))
    
    (define (insert-detail tree father detail)
      (let ((title (get-title~ detail))
            (icon (get-icon~ detail)))
        (let ((image (if icon (new Bitmap-Resource icon) {})))
          (let ((row (add-row~ tree father: father state: 'expanded children: (list (new Tree-Node title: title image: image)) user-data: detail)))
            (for-each (lambda (subdetail)
                        (insert-detail tree row subdetail))
                      (get-children~ detail))))))
    
    (with-system-exception-debugger
      (lambda ()
        (let ((tree (locate 'detail)))
          (with-update-locked~ tree
            (lambda ()
              (remove-every-row~ tree)
              (when stop
                (let ((title (stop-title stop))
                      (image (stop-image stop))
                      (detail (get-detail~ stop)))
                  (if detail
                      (insert-detail tree {} detail)
                    (let ((stop-row (add-row~ tree state: 'expanded children: (list (new Tree-Node title: title image: image)) user-data: stop)))
                      (for-each (lambda (line)
                                  (when (not (empty-string? line))
                                    (let ((title line)
                                          (image {Bitmap-Resource "Green"}))
                                      (add-row~ tree father: stop-row children: (list (new Tree-Node title: title image: image))))))
                                (cdr (stop-reason-lines stop)))))))))))))
  
  
  ;;;
  ;;;; Selection
  ;;;
  
  
  (method (selected-data)
    (define (row-data row)
      (when row
        (either (get-user-data~ row)
                (row-data (get-father~ row)))))
    
    (row-data (selected-row)))
  
  
  (method (selected-row)
    (let* ((tree (locate 'detail))
           (n (get-single-selection~ tree)))
      (when n
        (get-row~ tree n)))))


;;;
;;;; Detail-Tree
;;;


(class Detail-Tree extends Tree-View
  
  
  (form
    (<install>            portfolio: :icons
      (<Tree-Node-Column> title: "Frame" width: 431 toplevel-controls?: #f))))


(register-autoclass Detail-Tree))
