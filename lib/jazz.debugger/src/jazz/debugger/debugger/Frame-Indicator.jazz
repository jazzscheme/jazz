;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Frame Indicator
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library protected jazz.debugger.debugger.Frame-Indicator jazz


(import (jazz.io)
        (jazz.library)
        (jazz.literals)
        (jazz.platform)
        (jazz.runtime)
        (jazz.system)
        (jazz.ui)
        (jazz.utilities))


(class Frame-Indicator extends Object
  
  
  (slot color)
  (slot location initialize {})
  
  
  (method (initialize (color: color {}))
    (nextmethod)
    (set! color~self color))
  
  
  ;;;
  ;;;; Edition
  ;;;


  (method public (edit location (activate-focus?: activate-focus? #f))
    (if (not location)
        (uninstall-active-indicator)
      (install-indicator location)))
  
  
  (method (install-indicator location)
    (uninstall-active-indicator)
    (receive (frame text range) (find-location location)
      (fill~ text color (get-start~ range))
      (ensure-cell-displayed~ text (get-start~ range))
      (set! location~self location)
      (reset-tooltip~ text)
      (bring-to-front~ frame)
      (set-visible?~ frame #t)))
  
  
  (method (uninstall-indicator location)
    (receive (frame text range) (find-location location)
      (unfill~ text (get-start~ range))
      (reset-tooltip~ text)))


  (method protected (uninstall-active-indicator)
    (when location
      (uninstall-indicator location)
      (set! location {})))
  
  
  (method (find-location location)
    (bind (container line col) location
      (let ((file (if (symbol? container)
                      (find-module-source container)
                    (anchorize~ (new File (tokenise-filename container)))))
            (start (new Cell line col))
            (end (new Cell line (+ col 1))))
        (let ((frame (edit-document~ (get-application) file activate-focus?: #f visible?: #f))
              (range (new Range$Cell$ start end)))
          (values frame (get-guest~ frame) range)))))))
