;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Frames View
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library protected jazz.debugger.debugger.Frames-View jazz


(import (jazz.debugger)
        (jazz.graphic)
        (jazz.jml)
        (jazz.library)
        (jazz.system)
        (jazz.ui))


(class Frames-View extends Layout-View
  
  
  (property process initialize {} accessors generate)
  (property thread  initialize {})
  

  (form
    (<install>                                layout-type: border
      (<Layout-View>         name: tools)
      (<Scroller-View>       name: scroller   location: center vscroll?: #t flat?: #t
        (<!>                 name: content    layout-type: fill
          (<Tree-Header>     name: header     shown?: #f
            (<!>             name: content
              (<Frames-Tree> name: frames     multiple-selection?: #f selection-mode: row selection-handler: {Selection-Handler :form on-select-frame #t} context-menu-handler: {Event-Handler :form on-context-menu})))))))

  
  (method meta override (external-name . rest)
    'frames-view)

  
  ;;;
  ;;;; Host
  ;;;
  
  
  (method meta override (host-icon)
    {Bitmap-Resource "Link"})
  
  
  (method meta override (host-title)
    "Frames")
  
  
  ;;;
  ;;;; Docked
  ;;;
  
  
  (method override (get-tools-view)
    (locate 'tools))
  
  
  (method override (focus-default)
    (let ((tree (locate 'frames)))
      (acquire-focus~ tree)))

  
  ;;;
  ;;;; Access
  ;;;
  
  
  (method public (get-thread)
    thread)
  
  
  (method public (set-thread value)
    (set! thread value)
    (update-frames))
  
  
  (method public (thread-changed new-thread)
    (set! process (get-process~ (get-debugger-manager)))
    (set! thread new-thread)
    (update-frames)
    (select-first-frame))

  
  ;;;
  ;;;; Events
  ;;;


  (method override (resize dh dv)
    (nextmethod dh dv)
    (size-figure~ (locate 'scroller) dh dv))
  
  
  (method (on-context-menu evt)
    (let* ((sender (get-sender~ evt))
           (pos (get-position~ evt))
           (acquired (acquire sender pos)))
      (with-context-click~ sender pos
        (function ()
          (let ((menu (new-context-menu (selected-frame))))
            (when menu
              (track-popup-menu menu acquired)))))))


  (method (on-select-frame evt)
    (let ((user-origin? (get-user-origin?~ evt)))
      (when (and thread (get-active-stop~ thread))
        (let ((frame (selected-frame)))
          (set-repl-frame~ thread (essay frame (get-reference~ frame)))))
      (frame-change)
      (edit-frame user-origin?: user-origin?)))

  
  ;;;
  ;;;; Update
  ;;;
  
  
  (method (update-frames)
    (define (frame-title frame)
      (let ((name (get-name~ frame)))
        (cond ((not name)
               "<function>")
              ((symbol? name)
               (present-identifier name))
              (else
               name))))
    
    (define (frame-image frame)
      (if (get-interpreted?~ frame)
          {Bitmap-Resource "Green"}
        {Bitmap-Resource "Link"}))
    
    (with-system-exception-debugger
      (function ()
        (let ((tree (locate 'frames)))
          (with-update-locked~ tree
            (function ()
              (with-preserved-selection~ tree
                (function ()
                  (remove-every-row~ tree)
                  (for-each-frame~ (get-debugger-manager)
                    (function (frame)
                      (let ((title (frame-title frame))
                            (image (frame-image frame)))
                        (add-row~ tree children: (list (new Tree-Node title: title image: image)) user-data: frame)))))
                use: 'data
                test: debugged=?)))))))

  
  ;;;
  ;;;; Edition
  ;;;
  
  
  (definition *frame-indicator*
    (new Frame-Indicator color: {Color name: Light-Green}))


  (method (edit-frame (user-origin?: user-origin? #f) (activate-focus?: activate-focus? #f))
    (let ((frame (selected-frame)))
      (let ((location (if (and frame user-origin?)
                          (get-location~ frame)
                        {})))
        (edit~ *frame-indicator* location activate-focus?: activate-focus?))))
    
  
  (method (frame-change)
    (frame-changed~ (get-debugger-manager) (selected-frame)))
  
  
  (method public (select-first-frame)
    (let ((tree (locate 'frames)))
      (when (and (not (get-single-selection~ tree)) (> (get-visible-count~ tree) 0))
        (set-single-selection~ tree 0))))
  
  
  ;;;
  ;;;; Selection
  ;;;
  
  
  (method public (selected-frame)
    (let ((row (selected-row)))
      (when row
        (get-user-data~ row))))
  
  
  (method (selected-row)
    (let* ((tree (locate 'frames))
           (n (get-single-selection~ tree)))
      (when n
        (get-row~ tree n))))
  
  
  ;;;
  ;;;; Menu
  ;;;
  
  
  (method (new-context-menu object)
    (when object
      (new Frame-Menu))))


;;;
;;;; Frames-Tree
;;;


(class Frames-Tree extends Tree-View
  
  
  (form
    (<install>            portfolio: :icons
      (<Tree-Node-Column> title: "Frame" width: 431 toplevel-controls?: #f))))


(register-autoclass Frames-Tree)


;;;
;;;; Frame-Menu
;;;


(class Frame-Menu extends Context-Menu
  
  
  (form
    (<install>
      (<Label-Item> name: edit title: "Edit" icon: {Bitmap-Resource "Edit"} action-handler: {Event-Handler :form on-edit})))
  
  
  (method (on-edit evt)
    )))
