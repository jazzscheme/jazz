;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Frames View
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.debugger.debugger.Frames-View jazz


(import (jazz.debugger)
        (jazz.handler)
        (jazz.jml)
        (jazz.resource)
        (jazz.tree)
        (jazz.ui)
        (jazz.view))


(class Frames-View extends Layout-View
  
  
  (property process initialize #f accessors generate)
  (property thread  initialize #f)
  
  
  (form
    (<install>                                layout-type: border
      (<Layout-View>         name: tools
        (<Toggle-Tool>       name: hidden     size: {Dimension 22 22} location: tail tooltip?: #t tooltip-text: "Show Hidden Frames" resource: {Image-Resource "All"} portfolio: :images action-handler: {Event-Handler :guest on-show-hidden}))
      (<Scroller-View>       name: scroller   location: center vscroll?: #t style: tool
        (<!>                 name: content    layout-type: fill
          (<Tree-Header>     name: header     shown?: #f
            (<!>             name: content
              (<Frames-Tree> name: frames     multiple-selection?: #f selection-mode: row always-select?: #t selection-handler: {Selection-Handler :form on-select-frame} double-click-handler: {Event-Handler :form on-double-click} return-press-handler: {Event-Handler :form on-return-press})))))))
  
  
  (method meta override (external-name . rest)
    'Frames)
  
  
  ;;;
  ;;;; Host
  ;;;
  
  
  (method meta override (host-icon)
    {Image-Resource "Link"})
  
  
  (method meta override (host-title)
    "Frames")
  
  
  ;;;
  ;;;; Docked
  ;;;
  
  
  (method override (get-tools-view)
    (locate 'tools))
  
  
  (method override (focus-default)
    (let ((tree (locate 'frames)))
      (acquire-focus~ tree)))
  
  
  ;;;
  ;;;; Access
  ;;;
  
  
  (method public (get-thread)
    thread)
  
  
  (method (show-hidden?)
    (get-selected?~ (locate 'hidden)))
  
  
  (method public (thread-changed new-thread)
    (set! process (get-process~ (get-debugger-manager)))
    (set! thread new-thread)
    (update-frames)
    (when (view-visible?)
      (select-first-frame)))
  
  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method override (resize dh dv)
    (nextmethod dh dv)
    (size-figure~ (locate 'scroller) dh dv))
  
  
  (method (on-show-hidden evt)
    (update-frames))
  
  
  (method (on-select-frame evt)
    (let ((user-origin (get-user-origin~ evt)))
      (frame-changed~ (get-debugger-manager) (selected-frame) user-origin: user-origin)
      ;; as a quick solution we let the previous call give the focus to the document
      ;; because a lot of framework behavior depends on a new document gaining focus
      (when user-origin
        (acquire-focus~ (locate 'frames)))))
  
  
  (method (on-double-click evt)
    (edit-frame~ (get-debugger-manager) (selected-frame) select?: #t))
  
  
  (method override (on-return-press evt)
    (edit-frame~ (get-debugger-manager) (selected-frame) select?: #t))
  
  
  ;;;
  ;;;; Update
  ;;;
  
  
  (method (update-frames)
    (define (frame-title frame)
      (let ((name (get-name~ frame)))
        (cond ((not name)
               "<lambda>")
              ((symbol? name)
               (let ((str (symbol->string name)))
                 (if (eqv? (string-ref str 0) #\space)
                     (format "<{a}>" (substring str 1 (string-length str)))
                   (present-reference name))))
              (else
               name))))
    
    (define (frame-image frame)
      (if (get-interpreted?~ frame)
          {Image-Resource "Green"}
        {Image-Resource "Link"}))
    
    (with-system-exception-debugger
      (lambda ()
        (let ((tree (locate 'frames)))
          (with-preserved-selection~ tree
            (lambda ()
              (remove-every-row~ tree)
              (with-update-locked~ tree
                (lambda ()
                  (for-each-frame~ (get-debugger-manager)
                    (lambda (frame)
                      (let ((title (frame-title frame))
                            (image (frame-image frame)))
                        (when (or (show-hidden?) (not (get-hidden?~ frame)))
                          (add-row~ tree children: (list (new Tree-Node title: title image: image)) user-data: frame))))))))
            use: 'data
            test: debugged=?
            generate-event?: #t)))))
  
  
  ;;;
  ;;;; Selection
  ;;;
  
  
  (method public (select-first-frame)
    (let ((tree (locate 'frames)))
      (let ((preferred-selection (min 2 (- (get-visible-count~ tree) 1))))
        (when (and (not (get-single-selection~ tree)) (>= preferred-selection 0))
          ;; force?: #t user-origin: #t to test the stepper
          (set-single-selection~ tree preferred-selection force?: #t)))))
  
  
  (method public (selected-frame)
    (let ((row (selected-row)))
      (and row
           (get-user-data~ row))))
  
  
  (method (selected-row)
    (let* ((tree (locate 'frames))
           (n (get-single-selection~ tree)))
      (and n
           (get-row~ tree n)))))


;;;
;;;; Frames-Tree
;;;


(class Frames-Tree extends Tree-View
  
  
  (form
    (<install>            portfolio: :images
      (<Tree-Node-Column> title: "Frame" width: 431 toplevel-controls?: #f)))))
