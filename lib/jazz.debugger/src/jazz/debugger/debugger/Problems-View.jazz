;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Problems View
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.debugger.debugger.Problems-View jazz


(import (jazz.debugger)
        (jazz.event)
        (jazz.handler)
        (jazz.io)
        (jazz.layout)
        (jazz.markup)
        (jazz.outline)
        (jazz.resource)
        (jazz.tree)
        (jazz.ui)
        (jazz.ui.dialog)
        (jazz.view))


(class Problems-View extends Detail-View
  

  (form
    (<install>                      layout-type: border
      (<!>           name: tools
        (<Push-Tool> name: open     size: {Dimension 22 22} tooltip?: #t tooltip-text: "Open Warnings" resource: {Image-Resource "Open"} portfolio: :images action-handler: {Event-Handler :guest on-open-warnings})
        (<Separator>                size: {Dimension 6 0})
        (<Push-Tool> name: edit     size: {Dimension 22 22} location: tail tooltip?: #t tooltip-text: "Resolved" resource: {Image-Resource "Done"} portfolio: :images action-handler: {Event-Handler :guest on-resolved})
        (<Push-Tool> name: pop      size: {Dimension 22 22} location: tail tooltip?: #t tooltip-text: "Clear" resource: {Image-Resource "ClearResults"} portfolio: :images action-handler: {Event-Handler :guest on-clear}))
      (<!>           name: scroller
        (<!>         name: content
          (<!>       name: header
            (<!>     name: content
              (<!>   name: detail
                (<!> name: detail   toplevel-controls?: #t))))))))


  (slot details       initialize (make-table test: equal?))
  (slot problems-file initialize #f)

  
  (method meta override (external-name self . rest)
    'Problems)

  
  ;;;
  ;;;; Host
  ;;;
  
  
  (method meta override (host-icon self)
    {Image-Resource "Clone"})
  
  
  (method meta override (host-title self)
    "Problems")

  
  ;;;
  ;;;; Access
  ;;;
  
  
  (method package (get-tree self)
    (locate self 'detail))

  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method (on-open-warnings self evt)
    (with-cursor :wait
      (lambda ()
        (if (get-shift? evt)
            (if (not problems-file)
                (bell)
              (empty-table details)
              (report-problems self (open-warnings self problems-file)))
          (let ((file (choose-file)))
            (report-problems self (open-warnings self file))
            (set! problems-file file))))))
  
  
  (method (on-resolved self evt)
    (let ((row (selected-row self)))
      (when row
        (let ((tree (get-tree self))
              (top-row (car (get-spine row))))
          (let ((location (->string (get-title (get-user-data top-row)))))
            (table-clear details location))
          (update self)
          (if (> (get-visible-count tree) 0)
              (set-selection tree (list 0))
            (set-selection tree '()))))))
  
  
  (method package (on-clear self evt)
    (clear-problems self))
  
  
  (method package (clear-problems self)
    (empty-table details)
    (update self)
    (set-selection (get-tree self) '()))
  
  
  ;;;
  ;;;; Warnings
  ;;;
  
  
  (method (open-warnings self file)
    (let ((queue (new-queue)))
      (define (process warning)
        (define (process-header header icon)
          (when (starts-with? warning header)
            (let ((start (string-length header)))
              (let ((at (find warning #\@ start: start)))
                (let ((colon (find warning #\: start: start))
                      (period (and at (find warning #\. start: at)))
                      (message-colon (search warning ": " start: (or at start))))
                  (let ((container (string->symbol (substring warning start (if (and colon (< colon message-colon)) colon at))))
                        (line (if at (- (string->number (substring warning (+ at 1) period)) 1) 0))
                        (col (if at (- (string->number (substring warning (+ period 1) message-colon)) 1) 0))
                        (message (substring warning (+ message-colon 2) (string-length warning))))
                    ;@quick-hack-comment-out-to-show-member
                    (when (< colon message-colon)
                      (let ((end (or at colon)))
                        (when (< colon end)
                          (let ((member (substring warning (+ colon 1) end)))
                            (set! message (string-append member ": " message))))))
                    (enqueue queue (new-exception-detail icon message (list container line col) '()))))))))
        
        (process-header "Unsafe: In " "Red")
        (process-header "Warning: In " "Green"))
      
      (call-with-input-file (path-settings file)
        (lambda (port)
          (let (iter)
            (let ((warning (read-line port)))
              (unless (eof-object? warning)
                (process warning)
                (iter))))))
      (let ((partition (partition (queue-list queue) key: (lambda (detail) (car (get-location detail))))))
        (new-exception-detail "Warning" #f #f
          (map (lambda (partition)
                 (bind (container . details) partition
                   (new-exception-detail "Warning" (symbol->string container) #f
                     details)))
               partition)))))

  
  ;;;
  ;;;; Problems
  ;;;


  (method public (report-problems self problems (highlight?: highlight? #f))
    (define (add-detail detail)
      (let ((location (->string (get-title detail))))
        (table-set! details location detail)))
    
    (let ((children (get-children problems)))
      (for-each add-detail children)
      (update self)
      (when (and highlight? (not-null? children))
        (let ((tree (get-tree self))
              (detail (car children)))
          (let ((line (user-data-index tree detail)))
            (when line
              (set-single-selection tree line)))))))

  
  ;;;
  ;;;; Update
  ;;;

  
  (method package (update self)
    (define (insert-detail tree father detail)
      (let ((title (get-title detail))
            (icon (get-icon detail)))
        (let ((image (if icon (new Image-Resource icon) #f)))
          (let ((row (add-row tree father: father state: 'expanded children: (list (new Tree-Node title: title image: image)) user-data: detail)))
            (for-each (lambda (subdetail)
                        (insert-detail tree row subdetail))
                      (get-children detail))))))
    
    (let ((tree (get-tree self)))
      (remove-every-row tree)
      (with-update-locked tree
        (lambda ()
          (let ((pairs (table->list details)))
            (for-each (lambda (pair)
                        (let ((detail (cdr pair)))
                          (insert-detail tree #f detail)))
                      (sort string<? pairs key: car)))))))))
