;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Processes View
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.debugger.debugger.Processes-View jazz


(import (jazz.debugger)
        (jazz.graphic)
        (jazz.io)
        (jazz.jml)
        (jazz.library)
        (jazz.system)
        (jazz.ui)
        (jazz.ui.dialog)
        (jazz.ui.view))


(class Processes-View extends Layout-View


  (property snapshots initialize '() accessors generate)
  

  (form
    (<install>                                   layout-type: border
      (<Layout-View>            name: tools
        @wait
        (<Push-Tool>            name: open       size: {Dimension 22 22} tooltip?: #t tooltip-text: "Open Snapshot" resource: {Image-Resource "Open"} portfolio: :images action-handler: {Event-Handler :form on-open-snapshot})
        @wait
        (<Separator>                             size: {Dimension 2 0})
        (<Push-Tool>            name: focus      size: {Dimension 22 22} location: tail tooltip?: #t tooltip-text: "Focus" resource: {Image-Resource "Script"} portfolio: :images action-handler: {Event-Handler :form on-focus})
        (<Separator>                             size: {Dimension 2 0})
        (<Push-Tool>            name: update     size: {Dimension 22 22} location: tail tooltip?: #t tooltip-text: "Refresh" resource: {Image-Resource "Refresh"} portfolio: :images action-handler: {Event-Handler :form on-update}))
      (<Scroller-View>          name: scroller   location: center vscroll?: #t flat?: #t
        (<!>                    name: content    layout-type: fill
          (<Tree-Header>        name: header     shown?: #f
            (<!>                name: content
              (<Processes-Tree> name: processes  multiple-selection?: #f selection-mode: row selection-handler: {Selection-Handler :form on-select-process #t} context-menu-handler: {Event-Handler :form on-context-menu} double-click-handler: {Event-Handler :form on-double-click})))))))

  
  (method meta override (external-name . rest)
    'processes-view)

  
  ;;;
  ;;;; Host
  ;;;
  
  
  (method meta override (host-icon)
    {Image-Resource "Process"})
  
  
  (method meta override (host-title)
    "Processes")
  
  
  (method override (client-activate)
    (let ((selected-process (selected-process)))
      (when selected-process
        (update-highlight selected-process))))
  
  
  ;;;
  ;;;; Docked
  ;;;
  
  
  (method override (get-tools-view)
    (locate 'tools))
  
  
  (method override (focus-default)
    (let ((tree (locate 'processes)))
      (acquire-focus~ tree)))

  
  ;;;
  ;;;; Component
  ;;;


  (method override (install rest)
    (nextmethod rest)
    (update))

  
  ;;;
  ;;;; Events
  ;;;


  (method override (resize dh dv)
    (nextmethod dh dv)
    (size-figure~ (locate 'scroller) dh dv))
  
  
  (method (on-context-menu evt)
    (let* ((sender (get-sender~ evt))
           (pos (get-position~ evt))
           (acquired (acquire sender pos)))
      (with-context-click~ sender pos
        (lambda ()
          (let ((menu (new-context-menu (selected-object))))
            (when menu
              (track-popup-menu menu acquired)))))))
  
  
  (method (on-double-click evt)
    (let ((process (selected-process)))
      (when process
        (focus-selected-process))))
  
  
  (definition Snapshot-Extensions
    '(("Crash Files" . "crash")))
  
  
  (method (on-open-snapshot evt)
    (with-cursor :wait
      (lambda ()
        (let ((file (if (get-shift?~ evt)
                        (with-preserved-current-directory
                          (lambda ()
                            (choose-file directory: {Directory Build} extensions: Snapshot-Extensions)))
                      (choose-file extensions: Snapshot-Extensions))))
          (open-snapshot file)))))


  (method (on-select-process evt)
    (update-tools)
    (process-change))
  
  
  (method (on-focus evt)
    (focus-selected-process))
  
  
  (method (on-update evt)
    (when (get-shift?~ evt)
      (for-each validate-processes~ (get-debuggers)))
    (update user-origin?: #t))
  
  
  (method (process-change)
    (process-changed~ (get-debugger-manager) (selected-process)))
  
  
  (method (update-tools)
    (set-enabled?~ (locate 'focus) (selected-process)))

  
  ;;;
  ;;;; Update
  ;;;
  
  
  (method public (update (user-origin?: user-origin? #f))
    (define (process-image process live? focused?)
      (cond ((not live?)
             {Image-Resource "ProcessDead"})
            ((not focused?)
             (either (get-icon~ process) {Image-Resource "Process"}))
            (else
             {Image-Resource "Script"})))
    
    (define (update-processes tree)
      (let ((manager (get-debugger-manager)))
        (for-each-process~ manager
          (lambda (debugger process live? focused?)
            (let ((title (get-title~ process))
                  (image (process-image process live? focused?))
                  (frame-color (get-stopped-frame-color~ manager process))
                  (background (get-visited-highlight-color~ manager process)))
              (add-row~ tree children: (list (new Tree-Node title: title image: image frame-color: frame-color background: background)) user-data: process))))))
    
    (define (update-snapshots snapshots)
      @convert
      (for-each (function (snapshot)
                          (bind (process file) snapshot
                            (let ((handler (essay executable (new Symbol-Handler executable))))
                              (let* ((title (format "{a}{? : {a}~}" (get-process~ process) (essay file (get-base~ file))))
                                     (threads (get-threads~ process))
                                     (process-row (add-row state: 'expanded children: (list (new Tree-Node title: title image: {Bitmap-Resource "Spy"})) user-data: snapshot)))
                                (for-each (function (thread)
                                                    (let* ((title (get-label~ thread))
                                                           (state (get-state~ thread))
                                                           (image (if (> state 0) {Bitmap-Resource "ThreadError"} {Bitmap-Resource "ThreadRun"}))
                                                           (thread-row (add-row father: process-row state: 'expanded children: (list (new Tree-Node title: title image: image)) user-data: thread))
                                                           (call-stack (get-call-stack~ thread))
                                                           (frames (coalesce-frames thread (map (function (info)
                                                                                                          (bind (address . parameters) info
                                                                                                            (get-frame-snapshot thread handler address parameters)))
                                                                                                call-stack)))
                                                           (c? (show-c-frames?)))
                                                      (for-each (function (frame)
                                                                          (let ((title (present~ frame))
                                                                                (image (get-image~ frame)))
                                                                            (when (or c? (is? frame Lisp-Frame-Snapshot) (is? frame Coalesced-Frames-Snapshot))
                                                                              (add-row father: thread-row children: (list (new Tree-Node title: title image: image)) user-data: frame))))
                                                                frames)))
                                          threads)))))
                snapshots))
    
    (define (get-frame-snapshot thread handler address parameters)
      @convert
      (let* ((address (->string address))
             (kind (if (starts-with? address "#x") 'c 'lisp)))
        (case kind
          ((c)
           (let* ((addr (extract-address address))
                  (sym (get-sym-from-addr~ handler addr))
                  (title (standardize-sym sym)))
             (when title
               (let ((info (get-line-from-addr~ handler addr)))
                 (if (null? info)
                     (new C-Frame-Snapshot thread title {} {} parameters)
                   (receive (filename line) info
                     (let ((file (new File (tokenise filename))))
                       (new C-Frame-Snapshot thread title file line parameters))))))))
          ((lisp)
           (let* ((title address)
                  (pos (find title #\period)))
             (if (null? pos)
                 (new Lisp-Frame-Snapshot thread title {} {} parameters)
               (let* ((model (string->symbol (subseq title 0 pos)))
                      (method-name (string->symbol (subseq title (+ pos 1) (find title #\period start: (+ pos 1))))))
                 (new Lisp-Frame-Snapshot thread title model method-name parameters))))))))
    
    (define (coalesce-frames thread frames)
      @convert
      (let ((fact (new List-Factory))
            (get-type
              (function (frame)
                        (cond ((null? frame)
                               'none)
                              ((and (is? frame C-Frame-Snapshot)
                                    (let ((title (get-title~ frame)))
                                      (or (starts-with? title "JCompiledClosure::")
                                          (starts-with? title "JCompiledExternal::"))))
                               'eval)
                              ((is? frame C-Frame-Snapshot)
                               'c)
                              ((is? frame Lisp-Frame-Snapshot)
                               'lisp)
                              (else
                               'other)))))
        (while (not-null? frames)
          (let ((first (car frames)))
            (set! frames (cdr frames))
            (when first
              (let* ((second (car frames))
                     (third (cadr frames))
                     (f (get-type first))
                     (s (get-type second))
                     (t (get-type third)))
                (cond ((and (eq? f 'lisp) (memq? s '(none c)) (eq? t 'eval))
                       (put~ fact (new Coalesced-Frames-Snapshot thread first second third))
                       (set! frames (cddr frames)))
                      ((and (eq? f 'c) (eq? s 'eval))
                       (put~ fact (new Coalesced-Frames-Snapshot thread {} first second))
                       (set! frames (cdr frames)))
                      (else
                       (put~ fact first)))))))
        (get-output~ fact)))
    
    (with-system-exception-debugger
      (lambda ()
        (let ((tree (locate 'processes)))
          (with-preserved-selection~ tree
            (lambda ()
              (remove-every-row~ tree)
              (with-update-locked~ tree
                (lambda ()
                  (update-processes tree))))
            use: 'data
            test: debugged=?
            generate-event?: user-origin?)))))

  
  ;;;
  ;;;; Highlight
  ;;;
  
  
  (method public (update-highlight process)
    (let ((selected-process (selected-process)))
      (when (debugged=? process selected-process)
        (visit-debugged~ (get-debugger-manager) process)))
    (let ((tree (locate 'processes)))
      (let ((row (process-row tree process)))
        (when row
          (let ((cell (new Cell (row-rank~ tree row) 0)))
            (let ((data (get-cell-data~ tree cell))
                  (manager (get-debugger-manager)))
              (set-frame-color~ data (get-stopped-frame-color~ manager process))
              (set-background~ data (get-visited-highlight-color~ manager process)))
            (invalidate-cell~ tree cell))))))
  
  
  ;;;
  ;;;; Selection
  ;;;
  
  
  (method public (selected-process)
    (selected-object))
  
  
  (method public (selected-object)
    (let ((row (selected-row)))
      (when row
        (get-user-data~ row))))
  
  
  (method (selected-row)
    (let* ((tree (locate 'processes))
           (n (get-single-selection~ tree)))
      (when n
        (get-row~ tree n))))
  
  
  (method public (set-selected-process process)
    (let ((tree (locate 'processes)))
      (let ((row (process-row tree process)))
        (when row
          (set-single-selection~ tree (row-rank~ tree row))))))
  
  
  (definition (process-row tree process)
    (assert process)
    (continuation-capture
      (lambda (return)
        (for-each-row~ tree
          (lambda (row rank)
            (when (debugged=? (get-user-data~ row) process)
              (continuation-return return row))))
        {})))
  
  
  ;;;
  ;;;; Menu
  ;;;
  
  
  (method (new-context-menu object)
    (typecase object
      ((Debugged-Process) (new Process-Menu client: self))
      @convert/wait
      ((Pair) (new Snapshot-Menu))
      (else {})))
  
  
  (method (exit-selected-process)
    (let ((object (selected-object)))
      (exit~ object)
      (let ((tree (locate 'processes)))
        (set-selection~ tree '()))))
  
  
  (method (close-selected-snapshot)
    (let ((object (selected-object)))
      (set! snapshots (remove! object snapshots))
      (update)))
  
  
  (method (focus-selected-process)
    (focus-process~ (get-debugger-manager) (selected-process)))
  
  
  @convert/wait
  (method (select-toplevel)
    (let* ((process (selected-process))
           (toplevel-hwnd (get-toplevel-hwnd~ process)))
      (select-foreground-window toplevel-hwnd)))
  
  
  (method public (open-snapshot file . rest)
    (call-with-input-file (list path: (parse~ file) eol-encoding: 'cr-lf readtable: jazz-readtable)
      (lambda (reader)
        (let ((snapshot (read reader)))
          (add-snapshot snapshot file)))))
  
  
  (method public (add-snapshot snapshot file)
    (set! snapshots (cons (list snapshot file) snapshots))
    (update)))


;;;
;;;; Processes-Tree
;;;


(class Processes-Tree extends Tree-View
  
  
  (form
    (<install>            portfolio: :images
      (<Tree-Node-Column> title: "Process" width: 431 toplevel-controls?: #f))))


(register-autoclass Processes-Tree)


;;;
;;;; Process-Menu
;;;


(class Process-Menu extends Context-Menu
  
  
  (form
    (<install>
      (<Label-Item>     name: focus title: "Focus" default?: #t icon: {Image-Resource "Script"} action-handler: {Event-Handler :form on-focus})
      (<Separator-Item>)
      @wait
      (<Label-Item>     name: select title: "Select" icon: {Image-Resource "Select"} action-handler: {Event-Handler :form on-select})
      @wait
      (<Separator-Item>)
      (<Label-Item>     name: exit   title: "Exit" action-handler: {Event-Handler :form on-exit})))
  
  
  (method (on-focus evt)
    (focus-selected-process~ client))
  
  
  @wait
  (method (on-select evt)
    (select-toplevel~ client))
  
  
  (method (on-exit evt)
    (exit-selected-process~ client)))


;;;
;;;; Snapshot-Menu
;;;


(class Snapshot-Menu extends Context-Menu
  
  
  (form
    (<install>
      (<Label-Item> name: close title: "Close" action-handler: {Event-Handler :form on-close})))
  
  
  (method (on-close evt)
    @convert
    (close-selected-snapshot))))
