;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Processes View
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.debugger.debugger.Processes-View jazz


(import (jazz.debugger)
        (jazz.io)
        (jazz.jml)
        (jazz.library)
        (jazz.system)
        (jazz.ui)
        (jazz.ui.dialog)
        (jazz.ui.view))


(class Processes-View extends Layout-View
  
  
  (property client initialize #f accessors explicit)
  

  (form
    (<install>                                     layout-type: border
      (<Layout-View>            name: tools
        (<Push-Tool>            name: open         size: {Dimension 22 22} tooltip?: #t tooltip-text: "Open Snapshot" resource: {Image-Resource "Open"} portfolio: :images action-handler: {Event-Handler :guest on-open-snapshot})
        (<Separator>                               size: {Dimension 6 0})
        (<Toggle-Tool>          name: focused-mode size: {Dimension 22 22} location: tail tooltip?: #t tooltip-text: "Focused Mode" resource: {Image-Resource "Script"} portfolio: :images action-handler: {Event-Handler :guest on-focused-mode})
        (<Separator>                               size: {Dimension 2 0})
        (<Push-Tool>            name: update       size: {Dimension 22 22} location: tail tooltip?: #t tooltip-text: "Refresh" resource: {Image-Resource "Refresh"} portfolio: :images action-handler: {Event-Handler :guest on-update}))
      (<Scroller-View>          name: scroller     location: center vscroll?: #t style: tool
        (<!>                    name: content      layout-type: fill
          (<Tree-Header>        name: header       shown?: #f
            (<!>                name: content
              (<Processes-Tree> name: processes    multiple-selection?: #f selection-mode: row selection-handler: {Selection-Handler :form on-select-process} context-menu-handler: {Event-Handler :form on-context-menu} double-click-handler: {Event-Handler :form on-double-click})))))))

  
  (method meta override (external-name . rest)
    'processes-view)
  
  
  (method override (finish initargs)
    (nextmethod initargs)
    (set-selected?~ (locate 'focused-mode) (get-focused-mode?~ (get-debugger-manager))))

  
  ;;;
  ;;;; Host
  ;;;
  
  
  (method meta override (host-icon)
    {Image-Resource "Process"})
  
  
  (method meta override (host-title)
    "Processes")
  
  
  (method override (client-activate)
    (let ((guest (current-document)))
      (if (is? guest Text-View)
          (set-client guest)
        (set-client #f)))
    (let ((selected-process (selected-process)))
      (when selected-process
        (update-highlight selected-process))))
  
  
  (method override (client-deactivate)
    (set-client #f))
  
  
  ;;;
  ;;;; Docked
  ;;;
  
  
  (method override (get-tools-view)
    (locate 'tools))
  
  
  (method override (focus-default)
    (let ((tree (locate 'processes)))
      (acquire-focus~ tree)))

  
  ;;;
  ;;;; Component
  ;;;


  (method override (install rest)
    (nextmethod rest)
    (update))

  
  ;;;
  ;;;; Events
  ;;;


  (method override (resize dh dv)
    (nextmethod dh dv)
    (size-figure~ (locate 'scroller) dh dv))
  
  
  (method (on-context-menu evt)
    (let* ((sender (get-sender~ evt))
           (pos (get-position~ evt))
           (acquired (acquire sender pos)))
      (with-context-click~ sender pos
        (lambda ()
          (let ((menu (new-context-menu (selected-object))))
            (when menu
              (track-popup-menu menu acquired)))))))
  
  
  (method (on-double-click evt)
    (let ((process (selected-process)))
      (when (and process (focusable?~ process))
        (focus-selected-process))))
  
  
  (definition Snapshot-Extensions
    '(("Snapshot Files" . "snapshot")))
  
  
  (method (on-open-snapshot evt)
    (with-cursor :wait
      (lambda ()
        (let ((file (with-preserved-current-directory
                      (lambda ()
                        (choose-file directory: {Directory Jazz-Settings} extensions: Snapshot-Extensions)))))
          (set-selected-process (open-snapshot file))
          (acquire-focus~ (locate 'processes))))))


  (method (on-select-process evt)
    (process-change))
  
  
  (method (on-focused-mode evt)
    (toggle-focused-mode))
  
  
  (method (on-update evt)
    (when (get-shift?~ evt)
      (for-each validate-processes~ (get-debuggers)))
    (update user-origin: #t))
  
  
  (method (process-change)
    (process-changed~ (get-debugger-manager) (selected-process)))
  
  
  ;;;
  ;;;; Client
  ;;;


  (method public (get-client)
    client)

 
  (method public (set-client clt)
    (when (neq? clt client)
      (set! client clt)
      (update)))

  
  ;;;
  ;;;; Update
  ;;;
  
  
  (method public (update (user-origin: user-origin #f))
    (define (process-image debugger process live? focused? focused-mode? manager)
      (cond ((standard-process-image~ debugger) => identity)
            ((not live?)
             {Image-Resource "ProcessDead"})
            ((not focused-mode?)
             (cond ((not (process-received-filenames?~ manager process))
                    {Image-Resource "Link"})
                   ((not client)
                    {Image-Resource "Process"})
                   (else
                    (let ((moniker (get-moniker~ client)))
                      (if (not moniker)
                          {Image-Resource "Process"}
                        (let ((filename (parse~ moniker)))
                          (let ((processes (determine-filename-processes~ manager filename)))
                            (if (member? process processes test: debugged=?)
                                {Image-Resource "Script"}
                              {Image-Resource "Process"}))))))))
            ((not focused?)
             (or (get-icon~ process) {Image-Resource "Process"}))
            (else
             {Image-Resource "Script"})))
    
    (define (update-processes tree)
      (let ((manager (get-debugger-manager)))
        (let ((focused-mode? (get-focused-mode?~ manager)))
          (for-each-process~ manager
            (lambda (debugger process live? focused?)
              (let ((title (present~ process))
                    (image (process-image debugger process live? focused? focused-mode? manager))
                    (frame-color (get-stopped-frame-color~ manager process))
                    (background (get-visited-highlight-color~ manager process)))
                (set-alive?~ manager process live?)
                (add-row~ tree children: (list (new Tree-Node title: title image: image frame-color: frame-color background: background)) user-data: process)))
            live-test?: user-origin))))
    
    (with-system-exception-debugger
      (lambda ()
        (let ((tree (locate 'processes)))
          (with-preserved-selection~ tree
            (lambda ()
              (remove-every-row~ tree)
              (with-update-locked~ tree
                (lambda ()
                  (update-processes tree))))
            use: 'data
            test: debugged=?
            generate-event?: user-origin)))))
  
  
  (method public (update-focused-mode focused-mode?)
    (set-selected?~ (locate 'focused-mode) focused-mode?))

  
  ;;;
  ;;;; Highlight
  ;;;
  
  
  (method public (update-highlight process)
    (let ((selected-process (selected-process)))
      (when (debugged=? process selected-process)
        (visit-debugged~ (get-debugger-manager) process)))
    (let ((tree (locate 'processes)))
      (let ((line (process-row tree process)))
        (when line
          (let ((cell (new Cell (row->line~ tree line) 0)))
            (let ((data (get-cell-data~ tree cell))
                  (manager (get-debugger-manager)))
              (set-frame-color~ data (get-stopped-frame-color~ manager process))
              (set-background~ data (get-visited-highlight-color~ manager process)))
            (invalidate-cell~ tree cell))))))
  
  
  ;;;
  ;;;; Selection
  ;;;
  
  
  (method public (selected-process)
    (selected-object))
  
  
  (method public (selected-object)
    (let ((row (selected-row)))
      (when row
        (get-user-data~ row))))
  
  
  (method (selected-row)
    (let* ((tree (locate 'processes))
           (n (get-single-selection~ tree)))
      (when n
        (get-row~ tree n))))
  
  
  (method public (set-selected-process process)
    (let ((tree (locate 'processes)))
      (let ((row (process-row tree process)))
        (when row
          (set-single-selection~ tree (row->line~ tree row))))))
  
  
  (definition (process-row tree process)
    (assert process)
    (continuation-capture
      (lambda (return)
        (for-each-row~ tree
          (lambda (row rank)
            (when (debugged=? (get-user-data~ row) process)
              (continuation-return return row))))
        #f)))
  
  
  ;;;
  ;;;; Menu
  ;;;
  
  
  (method (new-context-menu object)
    (define (new-process-menu)
      (let ((manager (get-debugger-manager))
            (menu (new Process-Menu client: self)))
        (let ((alive? (get-alive?~ manager object))
              (focusable? (focusable?~ object)))
          (unless (and focusable? alive?)
            (set-visible?~ (locate~ menu 'focus) #f))
          (when (and focusable? alive?)
            (set-title~ (locate~ menu 'exit) "Exit"))
          (when (not alive?)
            (set-title~ (locate~ menu 'exit) "Remove Process")))
        (cleanup-separators~ menu)
        (layout-menu~ menu)
        menu))
    
    (typecase object
      ((Debugged-Process) (new-process-menu))
      (else #f)))
  
  
  (method (exit-selected-process)
    (let ((manager (get-debugger-manager))
          (object (selected-object)))
      (if (get-alive?~ manager object)
          (exit~ object)
        (detach~ object))
      (let ((tree (locate 'processes)))
        (set-selection~ tree '()))))
  
  
  (method (toggle-focused-mode)
    (toggle-focused-mode~ (get-debugger-manager)))
  
  
  (method (focus-selected-process)
    (focus-process~ (get-debugger-manager) (selected-process)))
  
  
  (method (refresh-selected-process)
    (let ((process (selected-process)))
      (if (not process)
          (bell)
        (clear-runtime-filenames~ (get-debugger~ process) (get-reference~ process))
        (transmit-runtime-filenames~ process)
        (update))))
  
  
  (method public (open-snapshot file)
    (let ((snapshot (load-jml file)))
      (set-property~ snapshot 'file file)
      (add-snapshot snapshot)))
  
  
  (method public (add-snapshot snapshot)
    (attach-process~ (get-snapshot-debugger~ (get-application)) snapshot #f)))


;;;
;;;; Processes-Tree
;;;


(class Processes-Tree extends Tree-View
  
  
  (form
    (<install>            portfolio: :images
      (<Tree-Node-Column> title: "Process" width: 431 toplevel-controls?: #f))))


;;;
;;;; Process-Menu
;;;


(class Process-Menu extends Context-Menu
  
  
  (form
    (<install>
      (<Label-Item>     name: focus   title: "Focus" default?: #t icon: {Image-Resource "Script"} action-handler: {Event-Handler :form on-focus})
      (<Separator-Item>)
      (<Label-Item>     name: refresh title: "Refresh Filenames" icon: {Image-Resource "Refresh"} action-handler: {Event-Handler :form on-refresh})
      (<Separator-Item>)
      (<Label-Item>     name: exit    title: "Close" action-handler: {Event-Handler :form on-exit})))
  
  
  (method (on-focus evt)
    (focus-selected-process~ client))
  
  
  (method (on-refresh evt)
    (refresh-selected-process~ client))
  
  
  (method (on-exit evt)
    (exit-selected-process~ client))))
