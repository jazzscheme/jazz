;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Threads View
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.debugger.debugger.Threads-View jazz


(import (jazz.debuggee.stub)
        (jazz.debugger)
        (jazz.graphic)
        (jazz.jml)
        (jazz.library)
        (jazz.system)
        (jazz.ui)
        (jazz.ui.window))


(class Threads-View extends Layout-View


  (property process initialize {} getter get-process setter set-process)
  

  (form
    (<install>                                 layout-type: border
      (<Layout-View>          name: tools
        (<Push-Tool>          name: restart    size: {Dimension 22 22} tooltip?: #t tooltip-text: "Restart" resource: {Bitmap-Resource "Restart"} portfolio: :icons action-handler: {Event-Handler :form on-restart})
        (<Push-Tool>          name: break      size: {Dimension 22 22} tooltip?: #t tooltip-text: "Break" resource: {Bitmap-Resource "Break"} portfolio: :icons action-handler: {Event-Handler :form on-break})
        (<Push-Tool>          name: continue   size: {Dimension 22 22} tooltip?: #t tooltip-text: "Continue" resource: {Bitmap-Resource "Continue"} portfolio: :icons action-handler: {Event-Handler :form on-continue})
        (<Separator>                           size: {Dimension 5 0})
        (<Toggle-Tool>        name: detailed   size: {Dimension 22 22} location: tail tooltip?: #t tooltip-text: "Show Detailed Information" resource: {Bitmap-Resource "All"} portfolio: :icons action-handler: {Event-Handler :form on-toggle-detailed})
        (<Separator>                           size: {Dimension 2 0})
        (<Push-Tool>          name: update     size: {Dimension 22 22} location: tail tooltip?: #t tooltip-text: "Refresh" resource: {Bitmap-Resource "Refresh"} portfolio: :icons action-handler: {Event-Handler :form on-update}))
      (<Scroller-View>        name: scroller   location: center vscroll?: #t flat?: #t
        (<!>                  name: content    layout-type: fill
          (<Tree-Header>      name: header     shown?: #f
            (<!>              name: content
              (<Threads-Tree> name: threads    multiple-selection?: #f selection-mode: row selection-handler: {Selection-Handler :form on-select-thread #t} context-menu-handler: {Event-Handler :form on-context-menu} double-click-handler: {Event-Handler :form on-double-click})))))))

  
  (method meta override (external-name . rest)
    'threads-view)

  
  ;;;
  ;;;; Host
  ;;;
  
  
  (method meta override (host-icon)
    {Bitmap-Resource "Threads"})
  
  
  (method meta override (host-title)
    "Threads")
  
  
  (method override (client-activate)
    (let ((selected-thread (selected-thread)))
      (when selected-thread
        (update-highlight selected-thread))))
  
  
  ;;;
  ;;;; Docked
  ;;;
  
  
  (method override (get-tools-view)
    (locate 'tools))
  
  
  (method override (focus-default)
    (let ((tree (locate 'threads)))
      (acquire-focus~ tree)))

  
  ;;;
  ;;;; Component
  ;;;


  (method override (install rest)
    (nextmethod rest)
    (update-threads))

  
  ;;;
  ;;;; Access
  ;;;


  (method public (get-process)
    process)


  (method public (set-process value)
    (set! process value)
    (update-threads))
  
  
  (method (show-detailed?)
    (get-selected?~ (locate 'detailed)))
  
  
  (method public (process-changed new-process)
    (set! process new-process)
    (update-threads))

  
  ;;;
  ;;;; Events
  ;;;


  (method override (resize dh dv)
    (nextmethod dh dv)
    (size-figure~ (locate 'scroller) dh dv))
  
  
  (method (on-context-menu evt)
    (let* ((sender (get-sender~ evt))
           (pos (get-position~ evt))
           (acquired (acquire sender pos)))
      (with-context-click~ sender pos
        (lambda ()
          (let ((menu (new-context-menu (selected-thread))))
            (when menu
              (track-popup-menu menu acquired)))))))
  
  
  (method (on-double-click evt)
    )
  
  
  (method (on-toggle-detailed evt)
    (update-threads))


  (method (on-select-thread evt)
    (update-tools)
    (thread-change))
  
  
  (method (on-break evt)
    (let ((thread (selected-thread)))
      (with-thread-refresh thread
        (lambda ()
          (break-thread~ process (get-reference~ thread))))))
  
  
  (method (on-continue evt)
    (continue-stop))
  
  
  (method (on-update evt)
    (update-threads user-origin?: #t))
  
  
  (method (with-thread-refresh thread thunk)
    (thread-start!
      (new-thread
        (lambda ()
          (sleep .1)
          (execute-event
            (lambda ()
              (update-threads))))))
    (thunk))
  
  
  ;; not used for the moment
  (definition (event-thread-local-proxy? thread)
    (when (eq? (get-debugger~ thread) (get-local-debugger~ (get-application)))
      (let ((thread-proxy (get-reference~ thread)))
        (and (is? thread-proxy Debuggee-Thread-Local-Proxy)
             (eq? (get-thread~ (get-object~ thread-proxy)) (event-thread))))))
  
  
  (method (restart-stop restart)
    (let ((thread (selected-thread)))
      (with-thread-refresh thread
        (lambda ()
          (restart-stop~ process restart)))))
  
  
  (method (continue-stop)
    (let ((thread (selected-thread)))
      (let ((stop (get-active-stop~ thread)))
        (with-thread-refresh thread
          (lambda ()
            (continue-stop~ process stop))))))
  
  
  (method package (step-stop command)
    (let ((thread (selected-thread)))
      (let ((stop (get-active-stop~ thread)))
        (with-thread-refresh thread
          (lambda ()
            (step-stop~ process stop command))))))
  
  
  (method (update-tools)
    (define (enable restart break continue)
      (set-enabled?~ (locate 'restart) restart)
      (set-enabled?~ (locate 'break) break)
      (set-enabled?~ (locate 'continue) continue))
    
    (let ((thread (selected-thread)))
      (if (not thread)
          (enable #f #f #f)
        (let ((stop (get-active-stop~ thread)))
          (if (not stop)
              (enable #f #f #f)
            (enable #f #f (eq? (get-kind~ stop) 'break)))))))
  
  ;;;
  ;;;; Update
  ;;;
  
  
  (method protected (update-threads (user-origin?: user-origin? #f))
    (define (thread-title thread stop detailed?)
      (define (stop-title stop)
        (let ((reason (get-reason~ stop)))
          (if reason
              (car (split reason "\n"))
            "Break")))
      
      (let ((name (present-thread-name (get-name~ thread))))
        (if stop
            (format "{a} - {a}" name (stop-title stop))
          (if detailed?
              (format "{a} - {a}" name (get-state~ thread))
            (->string name)))))
    
    (define (thread-image thread stop)
      (case (and stop (get-kind~ stop))
        ((exception) {Bitmap-Resource "ThreadError"})
        ((#f)        {Bitmap-Resource "ThreadRun"})
        (else        {Bitmap-Resource "ThreadBreak"})))
    
    (let ((manager (get-debugger-manager)))
      (with-system-exception-debugger
        (lambda ()
          (let ((tree (locate 'threads)))
            (with-update-locked~ tree
              (lambda ()
                (with-preserved-selection~ tree
                  (lambda ()
                    (remove-every-row~ tree)
                    (for-each-thread~ manager
                      (lambda (thread stop detailed?)
                        (let ((title (thread-title thread stop detailed?))
                              (image (thread-image thread stop))
                              (frame-color (get-stopped-frame-color~ manager thread))
                              (background (get-visited-highlight-color~ manager thread)))
                          (add-row~ tree children: (list (new Tree-Node title: title image: image frame-color: frame-color background: background)) user-data: thread)))
                      detailed?: (show-detailed?)))
                  use: 'data
                  test: debugged=?
                  generate-event?: user-origin?)
                (unless (selected-thread)
                  (when (get-installed?)
                    (continuation-capture
                      (lambda (return)
                        (for-each-thread~ manager
                          (lambda (thread stop detailed?)
                            (unless (debugged-visited?~ manager thread)
                              ;; this will recursively call (get-threads-view) when called from (install)
                              (set-selected-thread thread)
                              (thread-change))
                            (continuation-return return))))))))))))))
  
  
  (method public (update-highlight thread)
    (let ((selected-thread (selected-thread)))
      (when (debugged=? thread selected-thread)
        (visit-debugged~ (get-debugger-manager) thread)))
    (let ((tree (locate 'threads)))
      (let ((row (thread-row tree thread)))
        (when row
          (let ((cell (new Cell (row-rank~ tree row) 0)))
            (let ((data (get-cell-data~ tree cell))
                  (manager (get-debugger-manager)))
              (set-frame-color~ data (get-stopped-frame-color~ manager thread))
              (set-background~ data (get-visited-highlight-color~ manager thread)))
            (invalidate-cell~ tree cell))))))

  
  ;;;
  ;;;; Edition
  ;;;
  
  
  (method (thread-change)
    (thread-changed~ (get-debugger-manager) (selected-thread)))
  
  
  ;;;
  ;;;; Selection
  ;;;
  
  
  (method public (selected-thread)
    (let ((row (selected-row)))
      (when row
        (get-user-data~ row))))
  
  
  (method (selected-row)
    (get-selected-row~ (locate 'threads)))
  
  
  (method public (set-selected-thread thread)
    (let ((tree (locate 'threads)))
      (let ((row (thread-row tree thread)))
        (when row
          (set-single-selection~ tree (row-rank~ tree row))))))
  
  
  (definition (thread-row tree thread)
    (assert thread)
    (continuation-capture
      (lambda (return)
        (for-each-row~ tree
          (lambda (row rank)
            (when (debugged=? (get-user-data~ row) thread)
              (continuation-return return row))))
        {})))
  
  
  ;;;
  ;;;; Menu
  ;;;
  
  
  (method (new-context-menu object)
    (define (new-thread-menu thread)
      (let ((menu (new Thread-Menu))
            (stop (get-active-stop~ thread)))
        (if (not stop)
            #f @wait (new Label-Item parent: menu title: "Break" icon: {Bitmap-Resource "Break"} action-handler: {Event-Handler :form on-break})
          (for-each (lambda (restart)
                      (let ((title (get-message~ restart))
                            (icon {Bitmap-Resource "Restart"}))
                        (new Label-Item parent: menu title: title icon: icon action-handler: (new Event-Handler execute: (lambda (event) (restart-stop restart))))))
                    (get-restarts~ stop))
          @wait
          (when (eq? (get-kind~ stop) 'break)
            (new Separator-Item parent: menu)
            (new Label-Item parent: menu title: "Continue" icon: {Bitmap-Resource "Continue"} action-handler: {Event-Handler :form on-continue})))
        (cleanup-separators~ menu)
        (layout-menu~ menu)
        menu))
    
    (typecase object
      ((Debugged-Thread) (new-thread-menu object))
      (else {})))
  
  
  (method (new-thread-menu thread)
    (let ((menu (new Thread-Menu))
          (stop (get-active-stop~ thread)))
      (if (not stop)
          #f @wait (new Label-Item parent: menu title: "Break" icon: {Bitmap-Resource "Break"} action-handler: {Event-Handler :form on-break})
        (for-each (lambda (restart)
                    (let ((title (get-message~ restart))
                          (icon {Bitmap-Resource "Restart"}))
                      (new Label-Item parent: menu title: title icon: icon action-handler: (new Event-Handler execute: (lambda (event) (restart-stop restart))))))
                  (get-restarts~ stop))
        (when (eq? (get-kind~ stop) 'break)
          (new Separator-Item parent: menu)
          (new Label-Item parent: menu title: "Continue" icon: {Bitmap-Resource "Continue"} action-handler: (new Event-Handler execute: (lambda (event) (continue-stop))))
          (new Separator-Item parent: menu)
          (new Label-Item parent: menu title: "Step" icon: {Bitmap-Resource "StepInto"} action-handler: (new Event-Handler execute: (lambda (event) (step-stop 'step))))
          (new Label-Item parent: menu title: "Leap" icon: {Bitmap-Resource "StepOver"} action-handler: (new Event-Handler execute: (lambda (event) (step-stop 'leap))))))
      (cleanup-separators~ menu)
      (layout-menu~ menu)
      menu)))


;;;
;;;; Threads-Tree
;;;


(class Threads-Tree extends Tree-View
  
  
  (form
    (<install>            portfolio: :icons
      (<Tree-Node-Column> title: "Thread" width: 431 toplevel-controls?: #f))))


(register-autoclass Threads-Tree)


;;;
;;;; Thread-Menu
;;;


(class Thread-Menu extends Context-Menu))
