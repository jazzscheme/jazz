;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Threads View
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.debugger.debugger.Threads-View jazz


(import (jazz.application)
        (jazz.debuggee.stub)
        (jazz.debugger)
        (jazz.event)
        (jazz.handler)
        (jazz.layout)
        (jazz.markup)
        (jazz.menu)
        (jazz.outline)
        (jazz.platform)
        (jazz.process)
        (jazz.resource)
        (jazz.settings)
        (jazz.tree)
        (jazz.ui)
        (jazz.view))


(definition priority-base
  (find-setting 'jazz.debugger.priority-base 0))

(definition priority-sort?
  (find-setting 'jazz.debugger.priority-sort? #f))


(class Threads-View extends Layout-View


  (property process initialize #f accessors explicit)
  

  (form
    (<install>                                 layout-type: border
      (<Layout-View>          name: tools
        (<Push-Tool>          name: restart    size: {Dimension 22 22} enabled?: #f tooltip?: #t tooltip-text: "Restart" resource: {Image-Resource "Restart"} portfolio: :images action-handler: {Event-Handler :guest on-restart})
        (<Push-Tool>          name: break      size: {Dimension 22 22} enabled?: #f tooltip?: #t tooltip-text: "Break" resource: {Image-Resource "Break"} portfolio: :images action-handler: {Event-Handler :guest on-break})
        (<Push-Tool>          name: continue   size: {Dimension 22 22} enabled?: #f tooltip?: #t tooltip-text: "Continue" resource: {Image-Resource "Continue"} portfolio: :images action-handler: {Event-Handler :guest on-continue})
        (<Separator>                           size: {Dimension 5 0})
        (<Toggle-Tool>        name: detailed   size: {Dimension 22 22} location: tail tooltip?: #t tooltip-text: "Show Detailed Information" resource: {Image-Resource "All"} portfolio: :images action-handler: {Event-Handler :guest on-toggle-detailed})
        (<Separator>                           size: {Dimension 2 0})
        (<Push-Tool>          name: update     size: {Dimension 22 22} location: tail tooltip?: #t tooltip-text: "Refresh" resource: {Image-Resource "Refresh"} portfolio: :images action-handler: {Event-Handler :guest on-update}))
      (<Scroller-View>        name: scroller   location: center vscroll?: #t style: tool
        (<!>                  name: content    layout-type: fill
          (<Tree-Header>      name: header     shown?: #f
            (<!>              name: content
              (<Threads-Tree> name: threads    multiple-selection?: #f selection-mode: row selection-handler: {Selection-Handler :form on-select-thread} context-menu-handler: {Event-Handler :form on-context-menu} double-click-handler: {Event-Handler :form on-double-click})))))))

  
  (method meta override (external-name self . rest)
    'Threads)

  
  ;;;
  ;;;; Host
  ;;;
  
  
  (method meta override (host-icon self)
    {Image-Resource "Threads"})
  
  
  (method meta override (host-title self)
    "Threads")
  
  
  (method override (client-activate self)
    (let ((selected-thread (selected-thread self)))
      (when selected-thread
        (update-highlight self selected-thread))))
  
  
  ;;;
  ;;;; Docked
  ;;;
  
  
  (method override (get-tools-view self)
    (locate self 'tools))
  
  
  (method override (focus-default self)
    (let ((tree (locate self 'threads)))
      (acquire-focus tree)))

  
  ;;;
  ;;;; Component
  ;;;


  (method override (install self rest)
    (nextmethod self rest)
    (update self))

  
  ;;;
  ;;;; Access
  ;;;


  (method public (get-process self)
    process)


  (method public (set-process self value)
    (set! process value)
    (update self))
  
  
  (method (show-detailed? self)
    (get-selected? (locate self 'detailed)))
  
  
  (method public (process-changed self new-process)
    (set! process new-process)
    (update self))

  
  ;;;
  ;;;; Events
  ;;;


  (method override (resize self dh dv)
    (nextmethod self dh dv)
    (size-figure (locate self 'scroller) dh dv))
  
  
  (method (on-context-menu self evt)
    (let* ((sender (get-sender evt))
           (pos (get-position evt))
           (acquired (acquire self sender pos)))
      (with-context-click sender pos
        (lambda ()
          (let ((menu (new-context-menu self (selected-thread self))))
            (when menu
              (track-popup-menu self menu acquired)))))))
  
  
  (method (on-double-click self evt)
    )
  
  
  (method (on-toggle-detailed self evt)
    (update self))


  (method (on-select-thread self evt)
    (let ((user-origin (get-user-origin evt)))
      (update-tools self)
      (thread-changed (get-debugger-manager) (selected-thread self) user-origin: user-origin)))
  
  
  (method (on-restart self evt)
    (let ((restart (car (get-restarts (get-active-stop (selected-thread self))))))
      (restart-stop self restart)))
  
  
  (method (on-break self evt)
    (break-thread self))
  
  
  (method (on-continue self evt)
    (continue-stop self))
  
  
  (method (on-terminate self evt)
    (terminate-thread self))
  
  
  (method (on-update self evt)
    (update self user-origin: #t))
  
  
  (method (with-thread-refresh self thread thunk)
    (thread-start!
      (new-thread
        (lambda ()
          (sleep .1)
          (send-event
            (lambda ()
              (update self))))))
    (thunk))
  
  
  ;; not used for the moment
  (definition (event-thread-local-proxy? thread)
    (and (eq? (get-debugger thread) (get-local-debugger (current-application)))
         (let ((thread-proxy (get-reference thread)))
           (and (is? thread-proxy Debuggee-Thread-Local-Proxy)
                (eq? (get-thread (get-object thread-proxy)) (event-thread))))))
  
  
  (method package (restart-stop self restart)
    (let ((thread (selected-thread self)))
      (with-thread-refresh self thread
        (lambda ()
          (with-remote-exception-handler process
            (lambda ()
              (restart-stop process restart)))))))
  
  
  (method package (break-thread self)
    (let ((thread (selected-thread self)))
      (with-thread-refresh self thread
        (lambda ()
          (with-remote-exception-handler process
            (lambda ()
              (break-thread process thread)))))))
  
  
  (method package (continue-stop self)
    (let ((thread (selected-thread self)))
      (let ((stop (get-active-stop thread)))
        (with-thread-refresh self thread
          (lambda ()
            (with-remote-exception-handler process
              (lambda ()
                (continue-stop process stop))))))))
  
  
  (method package (step-stop self command)
    (let ((thread (selected-thread self)))
      (let ((stop (get-active-stop thread)))
        (with-thread-refresh self thread
          (lambda ()
            (with-remote-exception-handler process
              (lambda ()
                (step-stop process stop command))))))))
  
  
  (method package (repl-thread self)
    (let ((thread (selected-thread self)))
      (with-thread-refresh self thread
        (lambda ()
          (with-remote-exception-handler process
            (lambda ()
              (repl-thread process thread)))))))
  
  
  (method package (terminate-thread self)
    (let ((thread (selected-thread self))
          (preserve-console? (shift-down?)))
      (with-thread-refresh self thread
        (lambda ()
          (with-remote-exception-handler process
            (lambda ()
              (terminate-thread process thread preserve-console?)))))))
  
  
  (method package (kill-thread self)
    (let ((thread (selected-thread self)))
      (with-thread-refresh self thread
        (lambda ()
          (with-remote-exception-handler process
            (lambda ()
              (kill-thread process thread)))))))
  
  
  (method (update-tools self)
    (receive (restarts break? continue?) (selected-state self)
      (set-enabled? (locate self 'restart) (not-null? restarts))
      (set-enabled? (locate self 'break) break?)
      (set-enabled? (locate self 'continue) continue?)))
  
  
  (method (selected-state self)
    (let ((thread (selected-thread self)))
      (if (not thread)
          (values '() #f #f)
        (let ((stop (get-active-stop thread)))
          (if (not stop)
              (values '() #t #f)
            (values (get-restarts stop) #f  (and (eq? (get-kind stop) 'break)
                                                  (not (is? thread Debugged-Continuation)))))))))
  
  ;;;
  ;;;; Update
  ;;;
  
  
  (method package (update self (user-origin: user-origin #f))
    (update-threads self user-origin: user-origin)
    (update-tools self))
  
  
  (method protected (update-threads self (user-origin: user-origin #f))
    (define (thread-title thread stop detailed?)
      (define (stop-title stop default)
        (let ((reason (get-reason stop)))
          (if reason
              (car (split reason "\n"))
            default)))
      
      (define (normalize-priority priority)
        (let ((priority (+ priority priority-base)))
          (if (integer? priority)
              (inexact->exact priority)
            priority)))
      
      (let ((name (present-thread-name (get-name thread)))
            (priority (normalize-priority (get-priority thread)))
            (id (get-id thread)))
        (case (if stop (get-kind stop) 'run)
          ((exception) (format "{a}{? #{a}~}{? ({a})~} - {a}" name (and detailed? id) (and detailed? priority) (stop-title stop "Exception")))
          ((break)     (format "{a}{? #{a}~}{? ({a})~} - {a}" name (and detailed? id) (and detailed? priority) (stop-title stop "Break")))
          (else        (if detailed?
                           (format "{a}{? #{a}~}{? ({a})~} - {a}" name id priority (get-state thread))
                         (->string name))))))
    
    (define (thread-image thread stop)
      (case (if stop (get-kind stop) 'run)
        ((exception) {Image-Resource "ThreadError"})
        ((break)     {Image-Resource "ThreadBreak"})
        (else        {Image-Resource "ThreadRun"})))
    
    (let ((manager (get-debugger-manager)))
      (with-system-exception-debugger
        (lambda ()
          (let ((tree (locate self 'threads)))
            (with-preserved-selection tree
              (lambda ()
                (remove-every-row tree)
                (with-update-locked tree
                  (lambda ()
                    (for-each-thread manager
                      (lambda (thread stop detailed?)
                        (let ((title (thread-title thread stop detailed?))
                              (image (thread-image thread stop))
                              (frame-color (get-stopped-frame-color manager thread))
                              (background (get-visited-highlight-color manager thread)))
                          (add-row tree children: (list (new Tree-Node title: title image: image frame-color: frame-color background: background)) user-data: thread)))
                      detailed?: (show-detailed? self)
                      sort-priority?: priority-sort?))))
              use: 'data
              test: debugged=?
              generate-event?: user-origin)
            (unless (selected-thread self)
              (when (get-installed? self)
                (continuation-capture
                  (lambda (return)
                    (for-each-thread manager
                      (lambda (thread stop detailed?)
                        (unless (debugged-visited? manager thread)
                          ;; this will recursively call (get-threads-view) when called from (install)
                          (set-selected-thread self thread)
                          (thread-changed (get-debugger-manager) (selected-thread self)))
                        (continuation-return return))))))))))))
  
  
  (method public (update-highlight self thread)
    (let ((selected-thread (selected-thread self)))
      (when (debugged=? thread selected-thread)
        (visit-debugged (get-debugger-manager) thread)))
    (let ((tree (locate self 'threads)))
      (let ((row (thread-row tree thread)))
        (when row
          (let ((cell (new Cell (row->line tree row) 0)))
            (let ((data (get-cell-data tree cell))
                  (manager (get-debugger-manager)))
              (set-frame-color data (get-stopped-frame-color manager thread))
              (set-background data (get-visited-highlight-color manager thread)))
            (invalidate-cell tree cell))))))
  
  
  ;;;
  ;;;; Selection
  ;;;
  
  
  (method public (selected-thread self)
    (let ((row (selected-row self)))
      (and row
           (get-user-data row))))
  
  
  (method (selected-row self)
    (get-selected-row (locate self 'threads)))
  
  
  (method public (set-selected-thread self thread)
    (let ((tree (locate self 'threads)))
      (let ((row (thread-row tree thread)))
        (when row
          (set-single-selection tree (row->line tree row))))))
  
  
  (definition (thread-row tree thread)
    (assert thread)
    (continuation-capture
      (lambda (return)
        (for-each-row tree
          (lambda (row rank)
            (when (debugged=? (get-user-data row) thread)
              (continuation-return return row))))
        #f)))
  
  
  ;;;
  ;;;; Menu
  ;;;
  
  
  (method (new-context-menu self object)
    (define (make-handler proc)
      (new Event-Handler
        execute: (lambda (event)
                   (with-remote-exception-handler process
                     proc))))
    
    (define (new-thread-menu thread)
      (receive (restarts break? continue?) (selected-state self)
        (let ((menu (new Thread-Menu))
              (stop (get-active-stop thread)))
          (if break?
              (new Label-Item parent: menu title: "Break" icon: {Image-Resource "Break"} action-handler: (make-handler (lambda () (break-thread self))))
            (for-each (lambda (restart)
                        (let ((title (get-message restart))
                              (icon {Image-Resource "Restart"}))
                          (new Label-Item parent: menu title: title icon: icon action-handler: (make-handler (lambda () (restart-stop self restart))))))
                      restarts))
          (new Separator-Item parent: menu)
          (new Label-Item parent: menu title: "Repl" action-handler: (make-handler (lambda () (repl-thread self))))
          (new Separator-Item parent: menu)
          (new Label-Item parent: menu title: "Terminate" action-handler: (make-handler (lambda () (terminate-thread self))))
          (layout-menu menu)
          menu)))
    
    (define (new-continuation-menu thread)
      (let ((menu (new Thread-Menu)))
        (new Label-Item parent: menu title: "Close" action-handler: (make-handler (lambda () (kill-thread self))))
        (layout-menu menu)
        menu))
    
    (typecase object
      ((Debugged-Continuation)
       (with-remote-exception-handler process
         (lambda ()
           (new-continuation-menu object))))
      ((Debugged-Thread)
       (with-remote-exception-handler process
         (lambda ()
           (new-thread-menu object))))
      (else #f))))


;;;
;;;; Threads-Tree
;;;


(class Threads-Tree extends Tree-View
  
  
  (form
    (<install>            portfolio: :images
      (<Tree-Node-Column> title: "Thread" width: 431 toplevel-controls?: #f))))


;;;
;;;; Thread-Menu
;;;


(class Thread-Menu extends Context-Menu))
