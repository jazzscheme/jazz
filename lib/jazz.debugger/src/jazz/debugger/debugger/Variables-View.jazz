;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Variables View
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.debugger.debugger.Variables-View jazz


(import (jazz.debugger)
        (jazz.editor.jazz)
        (jazz.graphic)
        (jazz.handler)
        (jazz.jml)
        (jazz.resource)
        (jazz.ui))


(class Variables-View extends Layout-View
  
  
  (property process            initialize #f accessors explicit)
  (property continuation-frame initialize #f accessors explicit)
  
  
  (form
    (<install>                                    layout-type: fill
      (<Layout-View>              name: tools
        (<Toggle-Tool>            name: dynamic   size: {Dimension 22 22} location: tail tooltip?: #t tooltip-text: "Show Dynamic Environment" resource: {Image-Resource "All"} portfolio: :images action-handler: {Event-Handler :guest on-toggle-dynamic}))
      (<Variables-Inspector-View> name: variables background: {Color Medium}
        (<!>                      name: scroller
          (<!>                    name: content
            (<!>                  name: header
              (<!>                name: content
                (<!>              name: inspector multiple-selection?: #f selection-mode: row
                  (<!>            name: name      width: 130)
                  (<!>            name: value     width: 303)))))))))
  
  
  (method meta override (external-name self . rest)
    'Variables)
  
  
  ;;;
  ;;;; Host
  ;;;
  
  
  (method meta override (host-icon self)
    {Image-Resource "Spy"})
  
  
  (method meta override (host-title self)
    "Variables")
  
  
  ;;;
  ;;;; Docked
  ;;;
  
  
  (method override (get-tools-view self)
    (locate self 'tools))
  
  
  (method override (focus-default self)
    (let ((tree (get-inspector self)))
      (acquire-focus tree)))
  
  
  ;;;
  ;;;; Access
  ;;;
  
  
  (method public (get-inspector-view self)
    (locate self 'variables))
  
  
  (method public (get-inspector self)
    (get-inspector (get-inspector-view self)))
  
  
  (method public (get-process self)
    (get-process (get-inspector-view self)))
  
  
  (method public (set-process self process)
    (set-process (get-inspector-view self) process))
  
  
  (method public (get-continuation-frame self)
    continuation-frame)
  
  
  (method public (set-continuation-frame self frm)
    (set! continuation-frame frm)
    (set-client (get-inspector-view self) (determine-frame-client self)))
  
  
  (method public (frame-changed self new-frame)
    (set-process self (get-process (get-debugger-manager)))
    (set-continuation-frame self new-frame))
  
  
  (method (determine-frame-client self)
    (define (show-dynamic?)
      (get-selected? (locate self 'dynamic)))
    
    (and continuation-frame
         (let ((kind (if (show-dynamic?) :all :lexical)))
           (cons continuation-frame kind))))
  
  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method override (resize self dh dv)
    (nextmethod self dh dv)
    (size-figure (locate self 'variables) dh dv))
  
  
  (method package (on-backward self evt)
    (on-backward (get-inspector-view self) evt))
  
  
  (method package (on-forward self evt)
    (on-forward (get-inspector-view self) evt))
  
  
  (method package (on-frame-change self evt)
    (let ((process (get-property evt process:))
          (frame (get-property evt frame:)))
      (set-process self process)
      (set-continuation-frame self frame)
      @convert
      (typecase frame
        ((Frame-Snapshot)
         (set-process #f)
         (set-continuation-frame frame))
        (else
         (set-process #f)
         (set-continuation-frame #f)))))
  
  
  (method (on-toggle-dynamic self evt)
    (when continuation-frame
      (set-client (get-inspector-view self) (determine-frame-client self)))))


;;;
;;;; Inspector-View
;;;


(class Variables-Inspector-View extends Inspector-View
  
  
  (method override (form-model self form)
    (case (get-name form)
      ((inspector) Variables-Inspector)
      (else (nextmethod self form)))))


;;;
;;;; Inspector
;;;


(class Variables-Inspector extends Inspector
  
  
  (method override (inspect-object self data kind max-content)
    (define (inspect-frame frame)
      (typecase frame
        ((Frame-Snapshot)
         (let ((parameters (get-parameters frame)))
           (map (lambda (parameter rank)
                  (if (pair? parameter)
                      (bind (name value) parameter
                        (list (list #f name rank) 0 value #f #f))
                    (list (list #f rank rank) 0 parameter #f #f)))
                parameters
                (naturals 0 (length parameters)))))))
    
    (if (is? data Debugged-Frame)
        (with-remote-exception-handler process
          (lambda ()
            (get-variables data kind)))
      (case kind
        ((frame:) (inspect-frame data))
        (else (nextmethod self data kind max-content)))))))
