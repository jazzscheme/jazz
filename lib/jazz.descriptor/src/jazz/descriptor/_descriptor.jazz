;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Descriptors
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module jazz.descriptor jazz


(hub can-try-out?)
(hub class-detail-presentation)
(hub class-get-category)
(hub class-get-domain)
(hub class-get-standard?)
(hub class-image)
(hub class-name->presentation)
(hub class-name-mandatory?)
(hub class-name-prohibited?)
(hub class-name-unicity?)
(hub class-persist-property?)
(hub class-presentation)
(hub class-presentation->name)
(hub class-property-presentation)
(hub component-add-component-menu)
(hub component-addable-class?)
(hub component-can-copy-component?)
(hub component-can-cut-component?)
(hub component-can-delete-component?)
(hub component-can-paste-component?)
(hub component-can-paste-properties-component?)
(hub component-can-relocate-component?)
(hub component-can-rename-component?)
(hub component-can-select-all-component?)
(hub component-can-send-before?)
(hub component-can-view-properties?)
(hub component-determine-can-paste)
(hub component-determine-paster)
(hub component-get-addable-base)
(hub component-get-addable-classes)
(hub component-get-addable-default)
(hub component-get-addable-default-trait)
(hub component-get-addable-details)
(hub component-get-addable-traits)
(hub component-get-categorized-addable-classes)
(hub component-get-class-searchable-classes)
(hub component-get-classes)
(hub component-get-component-image)
(hub component-get-components)
(hub component-get-custom-card)
(hub component-get-custom-details)
(hub component-get-default-property)
(hub component-get-presentation)
(hub component-get-recursive-details?)
(hub component-get-standard-properties)
(hub component-get-string-presentation)
(hub component-indexable?)
(hub component-install-children-surrogates)
(hub component-install-surrogate)
(hub component-present-property)
(hub component-presentation-property?)
(hub component-property-domain)
(hub component-remove-component-surrogate)
(hub component-remove-surrogate)
(hub component-save-properties)
(hub component-set-presentation)
(hub component-set-string-presentation)
(hub component-sort-components)
(hub component-sort-components?)
(hub component-surrogate-class)
(hub get-addable?)
(hub get-category)
(hub get-children-descriptor)
(hub get-classes)
(hub get-default)
(hub get-domain)
(hub get-image)
(hub get-mandatory?)
(hub get-name-mandatory?)
(hub get-name-prohibited?)
(hub get-name-unicity?)
(hub get-standard)
(hub get-standard?)
(hub get-target)
(hub get-title)
(hub set-classes)
(hub set-image)
(hub set-target)
(hub set-title)
(hub try-out)


(export (jazz.descriptor.autoload))
(import (jazz.descriptor.autoload)
        (jazz.component)
        (jazz.markup))


;;;
;;;; Descriptor
;;;


(generic (get-class-domain (<Component-Class> class) property)
  (class-get-domain (get-descriptor class) class property))


(generic (get-class-category (<Component-Class> class) property)
  (class-get-category (get-descriptor class) class property))


(generic (get-class-standard? (<Component-Class> class) property)
  (class-get-standard? (get-descriptor class) class property))


(definition public (get-class-presentation class)
  (class-presentation (get-descriptor class) class))


(definition public (get-class-image class)
  (class-image (get-descriptor class) class))


(definition public (get-class-name-prohibited? class)
  (class-name-prohibited? (get-descriptor class) class))


(definition public (get-class-name-mandatory? class)
  (class-name-mandatory? (get-descriptor class) class))


(definition public (get-class-name-unicity? class)
  (class-name-unicity? (get-descriptor class) class))


(definition public (presentation->name class presentation)
  (class-presentation->name (get-descriptor class) class presentation))


(definition public (name->presentation class name)
  (class-name->presentation (get-descriptor class) class name))


(definition public (property-presentation class property)
  (class-property-presentation (get-descriptor class) class property))


(definition public (detail-presentation class property)
  (class-detail-presentation (get-descriptor class) class property))


(definition public (persist-property? class property)
  (class-persist-property? (get-descriptor class) class property))


(definition public (presentation-property? component property)
  (component-presentation-property? (get-descriptor (class-of component)) component property))


(definition public (get-presentation-property component)
  (component-get-presentation (get-descriptor (class-of component)) component))


(definition public (set-presentation-property component designer presentation)
  (component-set-presentation (get-descriptor (class-of component)) component designer presentation))


(definition protected (get-string-presentation component)
  (component-get-string-presentation (get-descriptor (class-of component)) component))


(definition protected (set-string-presentation component designer presentation)
  (component-set-string-presentation (get-descriptor (class-of component)) component designer presentation))


(definition public (present-property component property value)
  (component-present-property (get-descriptor (class-of component)) component property value))


(definition public (get-components component)
  (component-get-components (get-descriptor (class-of component)) component))


(definition public (get-component-image component)
  (component-get-component-image (get-descriptor (class-of component)) component))


(definition public (can-cut-component? component)
  (component-can-cut-component? (get-descriptor (class-of component)) component))


(definition public (can-copy-component? component)
  (component-can-copy-component? (get-descriptor (class-of component)) component))


(definition public (can-paste-component? component)
  (component-can-paste-component? (get-descriptor (class-of component)) component))


(definition public (can-paste-properties-component? component)
  (component-can-paste-properties-component? (get-descriptor (class-of component)) component))


(definition public (can-rename-component? component)
  (component-can-rename-component? (get-descriptor (class-of component)) component))


(definition public (can-select-all-component? component)
  (component-can-select-all-component? (get-descriptor (class-of component)) component))


(definition public (can-delete-component? component)
  (component-can-delete-component? (get-descriptor (class-of component)) component))


(definition public (can-relocate-component? component)
  (component-can-relocate-component? (get-descriptor (class-of component)) component))


(definition public (can-view-properties? component)
  (component-can-view-properties? (get-descriptor (class-of component)) component))


(definition public (determine-can-paste component (try-parent? #t))
  (component-determine-can-paste (get-descriptor (class-of component)) component try-parent?))


(definition public (determine-paster component (try-parent? #t))
  (component-determine-paster (get-descriptor (class-of component)) component try-parent?))


(definition public (can-send-before? component types father before)
  (component-can-send-before? (get-descriptor (class-of component)) component types father before))


(definition public (sort-component-components? component)
  (component-sort-components? (get-descriptor (class-of component)) component))


(definition public (sort-component-components component predicate components)
  (component-sort-components (get-descriptor (class-of component)) component predicate components))


(definition public (indexable? component)
  (component-indexable? (get-descriptor (class-of component)) component))


(definition public (component-surrogate component)
  (component-surrogate-class (get-descriptor (class-of component)) component))


(definition public (install-surrogate component editor)
  (component-install-surrogate (get-descriptor (class-of component)) component editor))


(definition public (install-children-surrogates component editor)
  (component-install-children-surrogates (get-descriptor (class-of component)) component editor))


(definition public (remove-surrogate component)
  (component-remove-surrogate (get-descriptor (class-of component)) component))


(definition public (remove-component-surrogate component)
  (component-remove-component-surrogate (get-descriptor (class-of component)) component))


(definition public (get-default-property component)
  (component-get-default-property (get-properties-descriptor (class-of component)) component))


(definition public (get-standard-properties component)
  (component-get-standard-properties (get-properties-descriptor (class-of component)) component))


(definition public (property-domain component property)
  (component-property-domain (get-descriptor (class-of component)) component property))


(definition public (get-addable-default component)
  (component-get-addable-default (get-descriptor (class-of component)) component))


(definition public (get-addable-classes component)
  (component-get-addable-classes (get-descriptor (class-of component)) component))


(definition public (get-categorized-addable-classes component)
  (component-get-categorized-addable-classes (get-descriptor (class-of component)) component))


(definition public (addable-class? component class)
  (component-addable-class? (get-descriptor (class-of component)) component class))


(definition public (get-component-classes component)
  (component-get-classes (get-descriptor (class-of component)) component))


(definition public (get-addable-traits component)
  (component-get-addable-traits (get-descriptor (class-of component)) component))


(definition public (get-addable-default-trait component)
  (component-get-addable-default-trait (get-descriptor (class-of component)) component))


(definition public (get-addable-base component)
  (component-get-addable-base (get-descriptor (class-of component)) component))


(definition public (get-addable-details component)
  (component-get-addable-details (get-descriptor (class-of component)) component))


(definition public (get-recursive-details? component)
  (component-get-recursive-details? (get-descriptor (class-of component)) component))


(definition public (get-class-searchable-classes component)
  (component-get-class-searchable-classes (get-descriptor (class-of component)) component))


(definition public (get-custom-details component)
  (component-get-custom-details (get-descriptor (class-of component)) component))


(definition public (get-custom-card component)
  (component-get-custom-card (get-descriptor (class-of component)) component))


(definition public (add-component-menu component menu)
  (component-add-component-menu (get-descriptor (class-of component)) component menu))


(definition public (save-component-properties component designer)
  (component-save-properties (get-descriptor (class-of component)) component designer))


;;;
;;;; Properties
;;;


(definition public (get-filtered-properties component (filter: filter 'standard))
  (define (collect-properties filter)
    (collect-if (lambda (property)
                  (display-filtered-property? property filter))
                (mop-instance-slots (class-of component) component)))
  
  (define (display-filtered-property? property filter)
    (and (property? property)
         (property-getter property)
         (or (memq? filter '(all standard))
             (let ((name (get-name (get-class-category (class-of component) property))))
               (if (symbol? filter)
                   (eq? name filter)
                 (memq? name filter))))))
  
  (if (eq? filter 'standard)
      (let ((properties (get-standard-properties component)))
        (if (eq? properties #t)
            (collect-properties '(infos properties handlers))
          (let ((class (class-of component)))
            (define (standardize object)
              (cond ((string? object)
                     object)
                    ((symbol? object)
                     (or (category-field class object)
                         (error "Field {t} is undefined in {t}" object class)))
                    (else
                     (map standardize object))))
            
            (standardize properties))))
    (collect-properties filter)))


;;;
;;;; Clipboard
;;;


(definition public (determine-unique-paster components)
  (case (length components)
    ((0) #f)
    ((1) (determine-paster (first components)))
    (else (let ((parents (remove-duplicates (map get-parent components))))
            (and (= 1 (length parents))
                 (let ((parent (car parents)))
                   (and parent
                        (determine-paster parent #f))))))))


;;;
;;;; Form
;;;


;; This is a bit of a heuristic...
(definition public (get-form-presentation form)
  (or (get-property form 'title)
      (get-class-presentation (resolve-model form))))


;;;
;;;; Descriptors
;;;


(definition Class-Descriptors
  (make-table test: equal?))


(definition package (reset-descriptors)
  (empty-table Class-Descriptors))


(definition public undocumented (get-descriptor model)
  (let ((name (category-identifier model)))
    (or (table-ref Class-Descriptors name #f)
        (let ((descriptor (get-class-descriptor model)))
          (set-name descriptor name)
          (table-set! Class-Descriptors name descriptor)
          descriptor))))


(definition public undocumented (get-properties-descriptor model)
  (let ((class-descriptor (get-descriptor model)))
    (and class-descriptor
         (find-component class-descriptor 'properties))))


(definition public undocumented (get-property-descriptor model name)
  (let ((properties-descriptor (get-properties-descriptor model)))
    (and properties-descriptor
         (find-component properties-descriptor name))))


(definition public undocumented (require-property-descriptor model name)
  (or (get-property-descriptor model name)
      (begin
        @to-be-replaced-by-a-validation-suite (debug 'missing 'property 'descriptor 'for model name)
        #f)
      @wait
      (error "No property descriptor found for {s}" name))))
