;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Canvas Manager
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.designer.ui.canvas.Canvas-Manager jazz


(import (jazz.descriptor)
        (jazz.designer)
        (jazz.designer.ui)
        (jazz.event)
        (jazz.handler)
        (jazz.locale)
        (jazz.markup)
        (jazz.outline)
        (jazz.resource)
        (jazz.tree)
        (jazz.ui))


(class undocumented Canvas-Manager extends Component-Editor


  (form
    (<install>                                                         size: {Dimension 650 400} layout-type: border layout-insets: {Rect 0 2 0 0}
      (<Layout-View>                          name: toolbar            size: {Dimension 300 33} layout-type: flow layout-insets: {Rect 0 7 0 0} location: north
        (<Push-Tool>                          name: new                size: {Dimension 22 22} location: tail enabled?: #f tooltip?: #t tooltip-text: "New" resource: {Image-Resource "New"} portfolio: :images action-handler: {Event-Handler :form on-new}))
      (<Splitter-View>                        name: splitter           size: {Dimension 650 367} location: center orientation: horz mode: absolute division: 250 style: document
        (<Border-View>                        name: descendants-border position: {Point 2 4} size: {Dimension 278 338} location: first border-type: edge style: entry
          (<Descendants-Editor>               name: descendants
            (<!>                              name: border
              (<!>                            name: scroller
                (<!>                          name: content
                  (<!>                        name: header
                    (<!>                      name: content
                      (<!>                    name: tree               highlight-edited?: #f tab-press-handler: {Event-Handler :form on-tab-press}
                        (<!>                  name: descendant         title: "Subject")))))))))
        (<Layout-View>                        name: right              location: second layout-type: fill
          (<Splitter-View>                    name: editor-splitter    position: {Point 289 0} size: {Dimension 360 366} orientation: vert mode: relative division: 60 style: document
            (<Layout-View>                    name: details-pane       location: first layout-type: fill
              (<Border-View>                  name: details-border     size: {Dimension 100 300} border-type: edge style: entry
                (<Scroller-View>                                       style: document hscroll?: #t vscroll?: #t
                  (<!>                        name: content            layout-type: fill
                    (<Tree-Header>                                     style: document
                      (<!>                    name: content
                        (<Details-Tree>       name: details
                          (<Tree-Node-Column> name: element            title: "Name" toplevel-controls?: #f))))))))
            (<Layout-View>                    name: bottom-right       location: second layout-type: fill
              (<Border-View>                  name: card-border        border-type: edge style: entry)))))))
  
  
  ;;;
  ;;;; Host
  ;;;
    

  (method meta override (host-icon self)
    {Image-Resource "Doc"})
  
  
  (method meta override (host-position self)
    #f)
  
  
  (method meta override (host-size self)
    #f)
  
  
  (method override (host-workspaces self)
    '(home))
  
  
  ;;;
  ;;;; New
  ;;;
  
  
  @convert-guest
  (method meta override (new-event . rest)
    (let* ((frame (apply new-frame host-visible?: #f rest))
           (manager (get-guest frame))
           (newbase (localize "New"))
           (newname (unique-domain-name newbase (collect-names manager)))
           (controller (get-document-controller manager)))
      (set-newname controller newname)
      (update-status controller)
      (let ((client (instantiate (<form> (<Canvas-Base> name: newname)))))
        (set-client manager client))
      (bring-to-front frame)
      (set-visible? frame #t)
      frame))
  
  
  @convert-guest
  (method meta (collect-names base)
    (let ((model (class-of base)))
      (collect (lambda (frame)
                 (when (is? frame Internal-Frame-Host)
                   (let ((guest (get-guest frame)))
                     (when (and guest (neq? guest base) (is? guest model))
                       (get-name (get-client guest))))))
               (all-frames))))
  
  
  ;;;
  ;;;; Controller
  ;;;


  (method override (new-document-controller self)
    (new Canvas-Manager-Controller self))

  
  ;;;
  ;;;; Component
  ;;;

  
  (method override (install self rest)
    (nextmethod self rest)
    (set-editor (locate self 'descendants) self)
    (set-editor (locate self 'details) self))

  
  (method override (install-in-host self host)
    (nextmethod self host)
    (let ((pref (tool-preferences self)))
      (when pref
        (set-size host (get-size pref)))))

  
  (method override (focus-document self)
    (acquire-focus (locate self '(descendants tree))))


  ;;;
  ;;;; Selection
  ;;;
    
  
  (method override (selection-changed self old-selection new-selection origin force-parent? focus?)
    (define (update-new)
      (let* ((tool (locate self 'new))
             (tree (locate self 'details))
             (client (get-client tree))
             (refs (and client (get-addable-classes client))))
        (if (or (not refs) (/= (length refs) 1))
            (begin
              (set-enabled? tool #f)
              (set-tooltip-text tool "New"))
          (set-enabled? tool #t)
          (let* ((class (resolve-runtime-reference (car refs)))
                 (pres (get-class-presentation class)))
            (set-tooltip-text tool (new Locales
                                      english: (format "New {a}" (if (is? pres Locales) (localize-object pres :english) pres))
                                      french: (format "Nouveau {a}" (if (is? pres Locales) (localize-object pres :french) pres))))))))
    
    (nextmethod self old-selection new-selection origin force-parent? focus?)
    (update-new))


  ;;;
  ;;;; Editor
  ;;;
  
  
  (method override (on-editor self evt)
    (unless (destroying? self)
      (nextmethod self evt)
      (case (get-kind evt)
        ((:selection-changing)
         (let ((selection (get-selection evt)))
           (let ((component (if (null? selection) #f (car selection))))
             (setup-details self component)
             (setup-card self component))))
        ((:saving)
         (let ((current (get-card self)))
           (when (is? current Custom-Card)
             (save-client current)))))))
  

  ;;;
  ;;;; Details
  ;;;
  
  
  (method (setup-details self component)
    @w
    (let ((current (get-details)))
      (if (not component)
          (when current
            (close current))
        (let ((details-class (or (get-custom-details component) Details-Card)))
          (when (or (null? current) (neq? details-class (class-of current)))
            (when current
              (close current))
            (let ((card (new details-class name: 'details parent: (locate 'details-border))))
              @w
              (set-editor card (locate 'details) self)
              @w
              (begin
              (set-editor card self)
              (set-designer card designer)
              (when (is? card Details-Card)
                (set-filter (get-tree card) 'standard))
              (card-update card))))))))
  
  
  (method (get-details self)
    (find-component (locate self 'details-border) 'details))
  

  ;;;
  ;;;; Card
  ;;;
  
  
  (method package (get-card self)
    (find-component (locate self 'card-border) 'properties))
  
  
  (method (setup-card self component)
    (let ((current (get-card self)))
      (when (is? current Custom-Card)
        (save-client current))
      (if (not component)
          (when current
            (close current))
        (let ((card-class (or (get-custom-card component) Properties-Card)))
          (when (or (null? current) (neq? card-class (class-of current)))
            (when current
              (close current))
            (let ((card (new card-class name: 'properties parent: (locate self 'card-border))))
              (set-editor card self)
              (set-designer card designer)
              (when (is? card Properties-Card)
                (set-filter (get-tree card) 'standard))
              (card-update self card)))))))
  
  
  (method public virtual (card-update self card)
    )

  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method package (on-selection-change self evt)
    (let ((sender (get-sender evt)))
      (case (get-name sender)
        ((log)
         (let ((selection (get-single-selection sender)))
           (when selection
             (let* ((row (get-row sender selection))
                    (component (get-user-data row)))
               (when component
                 (set-selection self (list component) origin: sender force-parent?: #t focus?: #f)))))))))
  
  
  (method package (on-new self evt)
    (let* ((details (locate self 'details))
           (client (get-client details))
           (ref (car (get-addable-classes client)))
           (component (add-component-class (locate self '(descendants tree)) ref select?: #f)))
      (set-selection self (list component) origin: details)
      (let* ((row (component-row details component))
             (line (row->line details row)))
        (case (get-selection-mode details)
          ((cell)
           (set-single-selection details (new Cell line 0) generate-event?: #f))
          (else
           (set-single-selection details line generate-event?: #f)))
        (acquire-focus details))))
  
  
  (method override (on-tab-press self evt)
    (let ((tree (get-tree (locate self 'card))))
      (acquire-focus tree)))
  
  
  ;;;
  ;;;; Integrity
  ;;;
  
  
  @convert
  (class Validation-Reporter extends Progress-Reporter
  
  
    (form
      (<install>              title: "Validation Progress"
        (<!>     name: invite title: "Please wait while the integrity validation completes")))
    
    
    (method meta (dialog-title)
      "Validation Progress"))
  
  
  @convert
  (method (on-validate-integrity evt)
    (let ((client (get-client))
          (designer (get-designer)))
      (with-progress
        (lambda (reporter)
          (validate-integrity client reporter: reporter)
          (report-message reporter "Done")
          (set-done reporter))
        threaded?: #t
        name: "Validate Integrity"
        context: self
        progress-reporter: Validation-Reporter
        cancelable?: #t))))


;;;
;;;; Controller
;;;


(class Canvas-Manager-Controller extends Component-Editor-Controller
  
  
  (method override (document-status self)
    (format "{a}{a}"
            (name-status self)
            (modified-status self)))))
