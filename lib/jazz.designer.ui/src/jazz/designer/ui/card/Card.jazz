;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Component Card
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.designer.ui.card.Card jazz


(import (jazz.designer)
        (jazz.designer.ui)
        (jazz.handler)
        (jazz.ui)
        (jazz.view))


(class undocumented Card extends Layout-View
  
  
  (slot editor   initialize #f)
  (slot client   initialize #f)
  (slot designer initialize #f)
  

  ;;;
  ;;;; Events
  ;;;
  
  
  (method override (destroy self)
    (set-designer self #f)
    (set-editor self #f)
    (nextmethod self))
  

  ;;;
  ;;;; Editor
  ;;;
  
  
  (method public virtual (get-editor self)
    editor)
  
  
  (method public virtual (set-editor self edt)
    (when (neq? edt editor)
      (when editor
        (remove-editor-listener editor self))
      (set! editor edt)
      (when editor
        (add-editor-listener editor (new Event-Handler target: self method-name: 'on-editor)))))
    
  
  (method protected virtual (on-editor self evt)
    (case (get-kind evt)
      ((:designer-change) (set-designer self (get-property evt designer:)))
      ((:selection-changed) (set-client self (car (get-selection evt)) force?: (get-force? evt)))))

  
  ;;;
  ;;;; Client
  ;;;


  (method public virtual (get-client self)
    client)


  (method public virtual (set-client self clt (force?: force? #f))
    (set-client-direct self (and clt (map inner-widget clt))))
  
  
  (method public virtual (set-client-direct self clt (force?: force? #f))
    (when (or force? (not (equal? clt client)))
      (set! client clt)
      (client-update self)))
  
  
  (method public virtual (client-update self)
    )
  
  
  ;;;
  ;;;; Designer
  ;;;
  
  
  (method public virtual (get-designer self)
    designer)
  
  
  (method public virtual (set-designer self dsg)
    (when (neq? dsg designer)
      (when designer
        (uninstall-listener self designer))
      (when dsg
        (install-listener self dsg))
      (set! designer dsg)))


  (method (on-designer self evt)
    (case (get-kind evt)
      ((:property-change)
       (call-property-change self evt))
      ((:refresh)
       (call-refresh self evt))))
  
  
  (method virtual (call-refresh self evt)
    (let ((component (get-property evt component:)))
      (when (eq? component client)
        (case (get-property evt what:)
          ((all)
           (refresh self component))))))
  
  
  (method public virtual (refresh self component)
    )


  (method protected virtual (call-property-change self evt)
    (let ((component (get-property evt component:)))
      (when (eq? component client)
        (property-change self component (get-property evt property:) (get-property evt value:)))))
  
  
  (method public virtual (property-change self component property value)
    )

  
  ;;;
  ;;;; Listener
  ;;;

  
  (method (install-listener self designer)
    (let ((listener (new Event-Handler target: self method-name: 'on-designer)))
      (add-designer-listener designer listener)))
  
  
  (method (uninstall-listener self designer)
    (remove-designer-listener designer self))
  
  
  ;;;
  ;;;; Value
  ;;;


  (method public virtual (enter-value self property value)
    (when client
      (set-property designer client property value)))))
