;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Details Chooser
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.designer.ui.choosers.Details-Chooser jazz


(import (jazz.designer)
        (jazz.designer.ui)
        (jazz.event)
        (jazz.graphic)
        (jazz.handler)
        (jazz.markup)
        (jazz.outline)
        (jazz.text)
        (jazz.tree)
        (jazz.ui)
        (jazz.view))


(class undocumented Details-Chooser extends View
  

  (property reference initialize #f  accessors generate)
  (property details   initialize '() accessors generate)
  @wait
  (property defaults  initialize '() accessors explicit)

  
  (form
    (<install>                                         size: {Dimension 282 400}
      (<Label-View>                                    title: "Select the details that will be displayed" position: {Point 10 9} size: {Dimension 191 16} font: {Font Label})
      (<Border-View>              name: details-border position: {Point 9 33} size: {Dimension 171 254} border-type: edge
        (<Scroller-View>                               hscroll?: #t vscroll?: #t
          (<!>                    name: content        layout-type: fill
            (<Tree-View>          name: details-tree   filled-column: detail top-padding: 2 portfolio: :images action-handler: {Event-Handler :form on-action} selection-handler: {Event-Handler :form on-selection-change} return-press-handler: {Event-Handler :form on-return-press} escape-press-handler: {Event-Handler :form on-escape-press}
              (<Tree-Node-Column> name: detail         toplevel-controls?: #f display-images?: #f width: 200)))))
      (<Push-Button>              name: move-up        title: "Move Up" position: {Point 191 33} size: {Dimension 80 24} action-handler: {Event-Handler :form on-move-up})
      (<Push-Button>              name: move-down      title: "Move Down" position: {Point 191 61} size: {Dimension 80 24} action-handler: {Event-Handler :form on-move-down})
      (<Push-Button>              name: show           title: "Show" position: {Point 191 95} size: {Dimension 80 24} action-handler: {Event-Handler :form on-show})
      (<Push-Button>              name: hide           title: "Hide" position: {Point 191 123} size: {Dimension 80 24} action-handler: {Event-Handler :form on-hide})
      (<Label-View>               name: size-label     title: "Selected column size :" position: {Point 8 300} size: {Dimension 110 16})
      (<Radio-Button>             name: filled         title: "Filled" position: {Point 8 321} size: {Dimension 47 16} action-handler: {Event-Handler :form on-filled})
      (<Radio-Button>             name: width          title: "Width In Pixels" position: {Point 61 321} size: {Dimension 90 16} action-handler: {Event-Handler :form on-width})
      (<Entry-Widget>             name: column-size    position: {Point 155 318} size: {Dimension 40 21}
        (<!>                      name: scroller
          (<!>                    name: content
            (<!>                  name: text           focus-selects-all?: #t show-unfocused-selection?: #f return-press-handler: {Event-Handler :form on-return-press}))))
      (<Horizontal-Line>                               position: {Point 6 348} size: {Dimension 270 8})
      (<Push-Button>              name: ok             title: "OK" position: {Point 109 363} size: {Dimension 80 24} action-handler: {Event-Handler :host on-ok} default?: #t)
      (<Push-Button>              name: cancel         title: "Cancel" position: {Point 193 363} size: {Dimension 80 24} action-handler: {Event-Handler :host on-cancel})))

  
  (method override (finish self rest)
    (nextmethod self rest)
    (let ((tree (get-tree self)))
      (setup-details self tree)
      (setup-selection self tree)
      (update-buttons self)
      (acquire-focus tree)))

  
  ;;;
  ;;;; Access
  ;;;


  @wait
  (method public (get-defaults)
    defaults)


  @wait
  (method public (set-defaults value)
    (set! defaults value))
  
  
  (method package (get-tree self)
    (locate self 'details-tree))
  
  
  (method package (get-text self)
    (locate self '(column-size text)))

  
  ;;;
  ;;;; Host
  ;;;
  
  
  (method meta override (host-title self)
    "Choose Details")
  
  
  (method meta override (host-position self)
    {Point 450 300})
  
  
  (method meta override (host-size self)
    {Dimension 302 120})
  
  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method package (on-action self evt)
    (let ((sender (get-sender evt)))
      (when (is? sender Check-Box)
        (toggle-displayed? sender)))
    (update-buttons self))
  
  
  (method package (on-selection-change self evt)
    (let* ((old (get-old evt))
           (old-detail (and old (element details (first old)))))
      (update-buttons self)
      (enter-width self old-detail)
      (update-details self)))
  
  
  (method (on-move-up self evt)
    (let* ((tree (get-tree self))
           (selection (get-single-selection tree))
           (detail (element details selection)))
      (set! details (remove! detail details))
      (set! details (insert! details (- selection 1) detail))
      (setup-details self tree)
      (acquire-focus tree)
      (set-single-selection tree (- selection 1))))
  
  
  (method (on-move-down self evt)
    (let* ((tree (get-tree self))
           (selection (get-single-selection tree))
           (detail (element details selection)))
      (set! details (remove! detail details))
      (set! details (insert! details (+ selection 1) detail))
      (setup-details self tree)
      (acquire-focus tree)
      (set-single-selection tree (+ selection 1))))
  
  
  (method (on-show self evt)
    (let* ((tree (get-tree self))
           (selection (get-single-selection tree))
           (checkbox (get-user-data (get-row tree selection))))
      (acquire-focus tree)
      (set-checked? checkbox #t)
      (toggle-displayed? checkbox)
      (update-buttons self)))
  
  
  (method (on-hide self evt)
    (let* ((tree (get-tree self))
           (selection (get-single-selection tree))
           (checkbox (get-user-data (get-row tree selection))))
      (acquire-focus tree)
      (set-checked? checkbox #f)
      (toggle-displayed? checkbox)
      (update-buttons self)))
  
  
  (method (on-filled self evt)
    (change-filled self))
  
  
  (method (on-width self evt)
    (let* ((tree (get-tree self))
           (selection (get-single-selection tree))
           (detail (and selection (element details selection))))
      (enter-width self detail)
      (set-filled? detail #f)
      (set-detail-font self tree detail {Font Label})))
  
  
  @wait
  (method (on-reset evt)
    (unimplemented 'on-reset))
  
  
  ;; Should really be generic in the Dialog class
  (method override (on-return-press self evt)
    (let ((dialog (get-host self)))
      (end-modal dialog (get-modal-result dialog))))
  
  
  ;; Should really be generic in the Dialog class
  (method override (on-escape-press self evt)
    (let ((dialog (get-host self)))
      (cancel-modal dialog)))

  
  ;;;
  ;;;; Setup
  ;;;

  
  (method (setup-details self tree)
    (remove-every-row tree)
    (with-update-locked tree
      (lambda ()
        (for-each (lambda (detail)
                    (bind (name title width mandatory) (assoc (get-name detail) reference)
                      (let* ((border 0)
                             (layout (new Layout-View layout-type: 'fill layout-insets: (new Rect 4 border border border)))
                             (color {Color Black})
                             (enabled? (neq? mandatory 'mandatory))
                             (font (if (get-filled? detail) {Font Label-Bold} {Font Label}))
                             (checkbox (new Check-Box font: font parent: layout :outline tree title: title
                                            :enabled? enabled? checked?: (get-displayed? detail) color: color user-data: detail)))
                        (add-row tree children: (list layout) user-data: checkbox))))
                  details))))
  
  
  (method (setup-selection self tree)
    (when details
      (set-selection tree (list 0))))
  
  
  ;;;
  ;;;; Update
  ;;;
  
  
  (method package (update-buttons self)
    (let* ((tree (get-tree self))
           (selection (get-single-selection tree))
           (count (get-visible-count tree)))
      (if (null? selection)
          (begin
            (set-enabled? (locate self 'move-up) #f)
            (set-enabled? (locate self 'move-down) #f)
            (set-enabled? (locate self 'show) #f)
            (set-enabled? (locate self 'hide) #f))
        (let ((detail (element details selection)))
          (bind (name title width mandatory) (assoc (get-name detail) reference)
            (set-enabled? (locate self 'move-up) (> selection 0))
            (set-enabled? (locate self 'move-down) (< selection (- count 1)))
            (set-enabled? (locate self 'show) (not (get-displayed? detail)))
            (set-enabled? (locate self 'hide) (and (get-displayed? detail) (neq? mandatory 'mandatory)))))))
    @wait
    (set-enabled? (locate 'reset) defaults))
  
  
  (method (update-details self)
    (let ((selection (get-single-selection (get-tree self)))
          (label (locate self 'size-label))
          (filled (locate self 'filled))
          (width (locate self 'width))
          (text (get-text self)))
      (if (null? selection)
          (begin
            (set-enabled? label #f)
            (set-enabled? filled #f)
            (set-enabled? width #f)
            (set-enabled? text #f)
            (set-string-content text ""))
        (let ((detail (element details selection)))
            (set-enabled? label #t)
            (set-enabled? filled #t)
            (set-enabled? width #t)
            (set-enabled? text #t)
            (set-string-content text (->string (get-width detail)))
            (set-selected? (if (get-filled? detail) filled width) #t)))))
  
  
  ;;;
  ;;;; Displayed
  ;;;
  
  
  (definition (toggle-displayed? checkbox)
    (let* ((detail (get-user-data checkbox))
           (visible? (get-displayed? detail)))
      (set-displayed? detail (not visible?))))
  
  
  ;;;
  ;;;; Edited
  ;;;
  
  
  (method (enter-width self edited-detail)
    (when edited-detail
      (let* ((tree (get-tree self))
             (text (get-text self))
             (content (get-string-content text)))
        (catch (Parse-Error err
                 (message-box (exception-reason err))
                 (acquire-focus text)
                 (select-all text)
                 (signal-cancel))
          (set-width edited-detail (parse-integer content))))))
    
  
  (method (set-detail-font self tree detail font)
    (let* ((row (get-row tree (find details detail)))
           (checkbox (get-user-data row)))
      (set-font checkbox font)))
  
  
  ;;;
  ;;;; Filled/Width
  ;;;
  
  
  (method (change-filled self)
    (define (find-filled)
      (find-if get-filled? details))
    
    (let* ((tree (get-tree self))
           (selection (get-single-selection tree))
           (detail (and selection (element details selection)))
           (filled (find-filled)))
      (when (neq? detail filled)
        (when filled
          (set-filled? filled #f)
          (set-detail-font self tree filled {Font Label}))
        (when detail
          (set-filled? detail #t)
          (set-detail-font self tree detail {Font Label-Bold})))))
  
  
  ;;;
  ;;;; Modal
  ;;;
  
  
  (method override (get-modal-result self)
    (let* ((tree (get-tree self))
           (selection (get-single-selection tree))
           (detail (and selection (element details selection)))
           (details (new List-Factory)))
      (enter-width self detail)
      (for-each-row tree
        (lambda (row rank)
          (let ((checkbox (get-user-data row)))
            (when (is? checkbox Check-Box)
              (let ((detail (get-user-data checkbox)))
                (put details detail))))))
      (get-output details)))))
