;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Style Domains
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.designer.ui.domain.Style-Domain jazz


(import (jazz.designer.ui)
        (jazz.jml)
        (jazz.library)
        (jazz.ui))


(class Style-Domain extends Literal-Domain
  
  
  (form
    (<install> is: {Class-Reference Text-Style}))
  
  
  (property width   initialize 100 accessors generate)
  (property choices initialize '() accessors generate)
  
  
  ;;;
  ;;;; Presentation
  ;;;
  
  
  (method override (present-value value)
    (let ((pair (assq value choices)))
      (if pair
          (cadr pair)
        (->string value))))
  
  
  ;;;
  ;;;; Entry
  ;;;
  
  
  (method (style-choices)
    '(Text-Base
      Text-Bold))
  
  
  (method override (setup-entry view client)
    (set! choices~self (cons (list #f "None")
                             (map (lambda (name)
                                    (let ((style (symbolic-style name))
                                          (title (->string name)))
                                      (list style title)))
                                  (sort nu<? (style-choices) key: symbol->string))))
    (let ((entry (new Enumeration-Entry parent: view size: (new Dimension width 19) domain: self)))
      (set-choices~ (locate~ entry 'combo) choices)))))
