;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Containment View
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.designer.ui.editor.Containment-View jazz


(import (jazz.descriptor)
        (jazz.designer)
        (jazz.designer.ui)
        (jazz.graphic)
        (jazz.handler)
        (jazz.markup)
        (jazz.resource)
        (jazz.ui)
        (jazz.view))


(class undocumented Containment-View extends Layout-View

  
  (slot editor initialize #f)
  (slot client initialize #f)
  

  (form
    (<install> layout-type: flow layout-insets: {Rect 2 5 0 0} layout-padding: 4 background: {Color Medium}))

  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method override (destroy self)
    (set-editor self #f)
    (nextmethod self))


  ;;;
  ;;;; Editor
  ;;;
  
  
  (method public (get-editor self)
    editor)
    
  
  (method public (set-editor self edt)
    (when (neq? edt editor)
      (when editor
        (remove-editor-listener editor self))
      (set! editor edt)
      (when editor
        (add-editor-listener editor (new Event-Handler target: self method-name: 'on-editor)))
      (set-client self (and editor (get-selection editor)))))
  
  
  (method protected virtual (on-editor self evt)
    (case (get-kind evt)
      ((:selection-changed) (selection-changed self (get-selection evt) (get-old evt) (get-origin evt) (get-force-parent? evt) (get-user-origin evt)))))
  
  
  (method protected virtual (selection-changed self selection old origin force-parent? focus?)
    (set-client self selection))
  
  
  ;;;
  ;;;; Client
  ;;;


  (method public (get-client self)
    client)
  
  
  (method public (set-client self clt)
    (set-client-direct self (and clt (map inner-widget clt))))


  (method public (set-client-direct self clt)
    (define (collect-outers client)
      (when (and client editor)
        (let ((reference (get-reference editor)))
          (map (lambda (component)
                 (outer-component component reference))
               client))))
    
    (define (collect-groups outers)
      (let ((inners (map collect-inner outers)))
            (when (uniform inners key: length)
              (let ((groups (apply zip inners)))
                (when (every? (lambda (group)
                                (uniform group key: class-of))
                              groups)
                  groups)))))
    
    (define (collect-inner outer)
      (let ((queue (new-queue)))
        (define (collect component)
          (enqueue queue component)
          (for-each (lambda (child)
                      (when (inner? component child)
                        (collect child)))
                    (get-children component)))
        
        (collect outer)
        (queue-list queue)))
    
    (define (selected-group groups client)
      (let ((selected (collect-if (lambda (group)
                                    (some? (lambda (component)
                                             (member? component client))
                                           group))
                                  groups)))
        (when (= (length selected) 1)
          (car selected))))
    
    (define (setup-tool tool)
      (set-action-handler tool (new Event-Handler execute: (selector tool))))
    
    (define (selector tool)
      (lambda (event)
        (let ((selection (get-selection tool)))
          (set-client-direct self selection)
          (set-client-direct (get-parent self) selection))
        (acquire-focus tool)))
    
    (let* ((outers (collect-outers clt))
           (old-outers (collect-outers client))
           (groups (and clt (not-null? clt) (collect-groups outers))))
      (set! client clt)
      (unless (equal? outers old-outers)
        (close-children self)
        (when (and client (not-null? client))
          (cond (groups
                  (for-each (lambda (group)
                              (setup-tool (new Containment-Tool parent: self resource: (get-component-image (car group)) portfolio: :images selection: group uniform?: #t)))
                            groups))
                (else
                 (setup-tool (new Containment-Tool parent: self resource: {Image-Resource "All"} portfolio: :images selected?: #t selection: client uniform?: #f))))
          (layout-view self)))
      (when groups
        (let* ((selected-group (selected-group groups client))
               (selected-tool (find children selected-group test: equal? key: get-selection return: 'item)))
          (when (and selected-group selected-tool)
            (set-selected? selected-tool #t)))))))


;;;
;;;; Tool
;;;


(class Containment-Tool extends Radio-Tool
  
  
  (property selection initialize #f accessors generate)
  (property uniform?  initialize #f accessors generate)
  
  
  (form
    (<install> tooltip?: #t))
  
  
  (method override (get-formatted-tooltip? self)
    #f)
  
  
  (method override (get-tooltip-context self pos)
    (let ((any (car selection)))
      (new Tooltip-Context
        view: self
        text: (if uniform?
                  (format "{a}{? {a}~}"
                          (category-name (class-of any))
                          (uniform (map get-name selection)))
                (format "{a} selected"
                        (length selection))))))))
