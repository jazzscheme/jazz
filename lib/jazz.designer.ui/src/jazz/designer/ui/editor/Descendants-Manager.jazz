;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Descendants Manager
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.designer.ui.editor.Descendants-Manager jazz


(import (jazz.designer)
        (jazz.designer.ui)
        (jazz.handler)
        (jazz.markup)
        (jazz.text)
        (jazz.tree)
        (jazz.ui))


(class undocumented Descendants-Manager extends Descendants-Editor
  
  
  (form
    (<install>
      (<!>                          name: tools
        (<Border-View>                                location: tail size: {Dimension 130 21} border-type: fill border-insets: {Rect 0 2 0 0}
          (<Border-View>                              border-type: edge style: entry
            (<Scroller-View>                          hscroll?: #f vscroll?: #f
              (<!>                  name: content     layout-type: fill
                (<Filter-Text-View> name: filter-text content-change-handler: {Event-Handler :guest on-filter-text-change}))))))
      (<!>                          name: border
        (<!>                        name: scroller
          (<!>                      name: content
            (<!>                    name: header      shown?: #f))))))
  
  
  (method meta override (external-name self . rest)
    'Descendants)

  
  (method override (form-model self form)
    (case (get-name form)
      ((tree) Descendants-Manager-Tree)
      (else (nextmethod self form))))
  
  
  ;;;
  ;;;; Filter
  ;;;
  
  
  (method package (filter self filter-search)
    (define (collect-classes client)
      (let ((table (make-table test: eq?))
            (not-found {Box}))
        (for-each-descendant client
          (lambda (component level)
            (when (eq? not-found (table-ref table (class-of component) not-found))
              (let ((match? #f)
                    (ancestors (get-ancestors (class-of component))))
                (loop (for n from (- (vector-length ancestors) 1) downto 0)
                      (let ((category (vector-ref ancestors n)))
                        (let ((category-name (symbol->string (category-name category))))
                          (when (search category-name filter-search)
                            (set! match? #t))
                          (table-set! table category match?))))))))
        table))
    
    (let ((client (get-client self)))
      (when client
        (let ((classes (collect-classes client)))
          (filter-rows (get-tree self)
            #f
            row-filter:
            (lambda (row)
              (let ((component (get-user-data row)))
                (table-ref classes (class-of component)))))))))
  
  
  (method (get-filter-text self)
    (locate self 'filter-text))
  
  
  (method (on-filter-text-change self evt)
    (filter-target (get-filter-text self)))))
