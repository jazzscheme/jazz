;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Descendants Tree
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.designer.ui.editor.Descendants-Tree jazz


(import (jazz.application)
        (jazz.component)
        (jazz.descriptor)
        (jazz.designer)
        (jazz.designer.ui)
        (jazz.event)
        (jazz.graphic)
        (jazz.handler)
        (jazz.markup)
        (jazz.outline)
        (jazz.preferences)
        (jazz.tree)
        (jazz.view))


(class undocumented Descendants-Tree extends Components-Tree


  (property group?            initialize #f accessors generate)
  (property editable?         initialize #f accessors generate)
  (property highlight-edited? initialize #t accessors generate)
  (property show-traits?      initialize #f accessors explicit)
  

  (form
    (<install>                             draggable?: #t reorderable?: #t portfolio: :images multiple-selection?: #t selection-handler: {Event-Handler :form on-selection-change}
      (<Component-Column> name: descendant title: "Component" width: 187)))
  

  ;;;
  ;;;; Access
  ;;;


  (method public (get-show-traits? self)
    show-traits?)


  (method public (set-show-traits? self value)
    (set! show-traits? value)
    (preserving-update self))


  ;;;
  ;;;; Mouse
  ;;;
  
  
  (method override (mouse-down self evt)
    (nextmethod self evt)
    (when (and (get-alt? evt) editable?)
      (let ((component (selected-component self)))
        (if (not component)
            (bell)
          (edit-component editor component)))))
  
  
  (method override (double-click self evt)
    (if (or (not highlight-edited?) (not editable?))
        (nextmethod self evt)
      (let ((component (selected-component self)))
        (if (not component)
            (bell)
          (edit-component editor component)))))


  ;;;
  ;;;; Editor
  ;;;
  
  
  (method override (branch-changed self)
    (preserving-update self))
  
  
  (method override (selection-changed self selection old origin force-parent? focus?)
    (define (groupify-selection selection)
      (map (lambda (component)
             (if (is? component Group)
                 component
               (find-ascendant component Group)))
           selection))
    
    (unless (or group? (not origin) (eq? self origin) (is? origin Details-Tree))
      (let ((rows (remove-false (map (~ component-row self) (if group? (groupify-selection selection) selection)))))
        (for-each (~ ensure-expanded self) rows)
        (set-selection self (map (~ row->line self) rows) generate-event?: #f))))
  
  
  ;;;
  ;;;; Update
  ;;;


  (method override (update self (expand-state: expand-state (get-expand-state self)) (selected-components: selected-components '()))
    (remove-every-row self)
    (with-update-locked self
      (lambda ()
        (when client
          (insert-toplevel self (get-rights self))
          (update-selection self expand-state selected-components)))))
  
  
  (method protected virtual (insert-toplevel self rights)
    (insert-component self #f client rights #t 0))
  
  
  (method protected virtual (insert-component? self component level)
    #t)
  
  
  (method protected virtual (insert-component self row component rights update? level (image: image #f) (state: state #f))
    (when (insert-component? self component level)
      (let* ((components (get-components component))
             (title      (component-presentation self component))
             (owned      (component-owned self component))
             (font       (component-font self component owned))
             (color      (component-color self component owned))
             (image      (or image (component-image self component)))
             (state      (or state (component-state self component) (if (null? components) 'collapsed (row-state self component update? level))))
             (subrow     (add-row self father: row state: state children: (list (new Component-Node title: title font: font color: color image: image)) user-data: component)))
        (insert-components self subrow component rights update? level)
        subrow)))
  
  
  (method protected virtual (insert-components self row component rights update? level)
    (insert-component-list self row component (get-components component) rights update? level))
  
  
  (method protected virtual (insert-component-list self row component components rights update? level)
    (when group?
      (set! components (collect-if (lambda (component) (is? component Group)) components)))
    (when (not show-traits?)
      (set! components (collect-if (lambda (component) (is-not? component Trait)) components)))
    (for-each (lambda (child)
                (receive (access-granted? child-rights) (access-rights rights child)
                  (when access-granted?
                    (insert-component self row child child-rights update? (and level (+ level 1))))))
              (if (sort-component-components? component)
                  (sort-component-components component (sort-predicate 'smaller) components)
                components)))
  
  
  (method protected virtual (row-state self component update? level)
    (if update?
        'expanded
      'collapsed))
  
  
  ;;;
  ;;;; Refresh
  ;;;
  
  
  (method (refresh-component self component)
    (let* ((row (component-row self component))
           (line (row->line self row)))
      ;; rank will be #f if row is not visible for instance inside a collapsed row
      (when line
        (let ((cell (new Cell line 0)))
          (let ((data (get-cell-data self cell))
                (owned (component-owned self component)))
            (let ((font (component-font self component owned))
                  (color (component-color self component owned))
                  (title (get-presentation-property component)))
              (set-font data font)
              (set-color data color)
              (set-title data title)
              (invalidate-cell self cell)))))))
  
  
  (method (refresh-descendants self component)
    (let ((row (component-row self component)))
      (when row
        (with-update-locked self
          (lambda ()
            (let ((state (get-state row))
                  (level (+ (get-level row) 1)))
              (remove-every-son row)
              (insert-components self row component #f #t level)
              (when (eq? state 'expanded)
                (expand self row))))))))
  
  
  ;;;
  ;;;; Rights
  ;;;
  
  
  (method package (get-rights self)
    ;; the essay is probably not necessary but because this
    ;; is for the MetaModeler I am not taking any chances...
    (and editor (get-rights editor)))
  
  
  (definition (access-rights rights child)
    (if (not rights)
        (values #t #f)
      (values #f #f)
      @cant-find
      (let ((child-rights (find-child-rights rights child)))
        (if (not child-rights)
            (values #f #f)
          (values #f #f)
          @cant-find
          (values (can-access? child-rights) child-rights)))))
  
  
  ;;;
  ;;;; Highlight
  ;;;
  
  
  (method public (highlight-component self component)
    (set-component-highlighted? self component #t))
  
  
  (method public (unhighlight-component self component)
    (set-component-highlighted? self component #f))
  
  
  (method override (highlight-edited self component)
    (when highlight-edited?
      (set-component-highlighted? self component #t)))
  
  
  (method override (unhighlight-edited self component)
    (when highlight-edited?
      (set-component-highlighted? self component #f)))
  
  
  (method (set-component-highlighted? self component flag)
    (let ((row (component-row self component)))
      (when row
        (set-highlighted? (get-child row 0) flag)
        (let ((line (row->line self row)))
          (when (and line (> (get-columns-count self) 0))
            (let ((cell (new Cell line 0)))
              (invalidate-cell self cell)))))))
  

  ;;;
  ;;;; Drag
  ;;;
  
  
  (method override (get-draggable? self)
    (let ((component (selected-component self)))
      (and component (is? component Component) (can-relocate-component? component))))

  
  ;;;
  ;;;; Drop
  ;;;
  
  
  (method override (get-row-reorder-target self drag-drop row quarter)
    (let* ((selection (get-selection (get-view (get-source drag-drop))))
           (components (map get-user-data (selection->rows self selection))))
      (and (every? (~ client-owned? self) components)
           (nextmethod self drag-drop row quarter))))
  
  
  ;;;
  ;;;; Designer
  ;;;

  
  (method (client-owned? self component)
    (and client (component-owned? component (get-form designer) client)))
  
  
  (method package (component-owned self component)
    (and client (component-owned-form component (get-form designer) client)))
  
  
  (method override (on-designer self evt)
    (case (get-kind evt)
      ((:presentation-change) (presentation-change self (get-property evt component:) (get-property evt presentation:)))
      ((:child-add) (child-add self (get-property evt child:) (get-property evt parent:) (get-property evt descendant?:)))
      ((:child-remove) (child-remove self (get-property evt child:)))
      ((:child-relocate) (child-relocate self (get-property evt child:) (get-property evt parent:) (get-property evt target:)))
      ((:send-before) (send-before-target self (get-property evt child:) (get-property evt parent:) (get-property evt target:)))
      ((:refresh)
       (let ((component (get-property evt component:)))
         (case (get-property evt what:)
           ((component) (refresh-component self component))
           ((descendants) (refresh-descendants self component))
           ((all)
            (refresh-component self component)
            (refresh-descendants self component)))))))
  
  
  (method (presentation-change self component presentation)
    (unless (or (and group? (is-not? component Group))
                (and (not show-traits?) (is? component Trait)))
      (let ((row (find-row self component)))
        (when row
          (let ((line (row->line self row))
                (node (first-child row)))
            (when node
              (set-title node presentation)
              (when line
                (let ((cell (new Cell line 0)))
                  (invalidate-cell self cell)))))))))
  
  
  (method package (child-add self child parent descendant?)
    (unless (or (and group? (is-not? child Group))
                (and (not show-traits?) (is? child Trait)))
      (let ((row (find-row self (parent-relocation self parent))))
        (when row
          (let ((level (get-level row))
                (state (if (not descendant?) 'expanded 'collapsed)))
            (with-update-locked self
              (lambda ()
                (insert-component self row child #f #f level state: state)
                (when (not descendant?)
                  (reorder-component self child)
                  (expand self row)))))))))
  
  
  (method package (child-remove self child)
    (unless (or (and group? (is-not? child Group))
                (and (not show-traits?) (is? child Trait)))
      (let ((row (find-row self child)))
        (when row
          (with-update-locked self
            (lambda ()
              (remove-row self row)))))))
  
  
  (method (child-relocate self child parent destination)
    (let ((child-row (find-row self child))
          (destination-row (find-row self (parent-relocation self destination))))
      (with-update-locked self
        (lambda ()
          (relocate-component-row self child-row destination-row)))))
  
  
  (method (send-before-target self child parent target)
    (let ((child-row (find-row self child))
          (parent-row (find-row self (parent-relocation self parent))))
      (with-update-locked self
        (lambda ()
          (relocate-component-row self child-row parent-row
            position: (lambda ()
                        (find-component-insertion self parent-row child target))))))))


;;;
;;;; Component-Column
;;;


(class Component-Column extends Tree-Node-Column
  
  
  (property highlight-color initialize {Color Dark-Red} accessors generate)
  
  
  (method override (draw-data self surface context row data width height)
    (nextmethod self surface context row data width height)
    (when (and (is? data Component-Node) (get-highlighted? data))
      (frame-rect surface (text-rect self row data width height #f) highlight-color))))


;;;
;;;; Component-Node
;;;


(class Component-Node extends Tree-Node
  
  
  (slot protected highlighted? initialize #f accessors generate)))
