(module protected jazz.designer.ui.editor.Text-Editor jazz


(import (jazz.component.runtime)
        (jazz.designer)
        (jazz.designer.ui)
        (jazz.designer.ui.view)
        (jazz.editor.jazz)
        (jazz.handler)
        (jazz.jml)
        (jazz.ui)
        (jazz.view))


(class Comment-Exception extends Exception)


(definition (invalid-comment . _)
  (throw (new Comment-Exception)))


(definition jazz-readtable-no-comments
  (let ((readtable (make-jazz-readtable)))
    (readtable-char-class-set! readtable #\@ #t invalid-comment)
    (readtable-char-class-set! readtable #\; #t invalid-comment)
    (readtable-char-sharp-handler-set! readtable #\; invalid-comment)
    readtable))


(class Jazz-Text-Editor-View extends Jazz-Text-View
  
  
  (slot editor initialize #f setter explicit getter generate)
  (slot designer initialize #f accessors generate)
  
  
  (method public (set-editor edt)
    (when (neq? edt editor)
      (when editor
        (remove-editor-listener~ editor self))
      (set! editor edt)
      (when editor
        (add-editor-listener~ editor (new Event-Handler target: self method-name: 'on-editor)))))
  
  
  (method (on-editor evt)
    (case (get-kind~ evt)
      ((:designer-change) (set-designer (get-property~ evt designer:)))))
  
  
  (method (get-imports-expression)
    (let ((explorer (new Jazz-Explorer model)))
      (forward-namespace~ explorer)
      (find-import~ explorer)
      (read-marked~ explorer)))
  
  
  (method (get-class-form-expression class-name)
    (let ((explorer (new Jazz-Explorer model)))
      (forward-location~ explorer (list class-name :form))
      (parameterize ((walk-for #f))
        (with-readtable jazz-readtable-no-comments
          (lambda ()
            (read-marked~ explorer))))))
  
  
  (method (get-trait-form-expression trait-name)
    (let ((explorer (new Jazz-Explorer model)))
      (forward-location~ explorer (list trait-name 3))
      (list (string->symbol (format "<{a}>" (get-model~ (get-form~ designer))))
            (parameterize ((walk-for #f))
              (with-readtable jazz-readtable-no-comments
                (lambda ()
                  (read-marked~ explorer)))))))
  
  
  (method (make-new-form origin locator)
    (with-exception-filter
      (lambda (exc)
        (is? exc Comment-Exception))
      (lambda (exc)
        (message-box "Comments area not allowed in this editor, please remove them.")
        (signal-cancel))
      (lambda ()
        (bind (module symbol) (cdr (serialize-origin origin))
          (if (class? origin)
              (construct-form (cadr (get-class-form-expression symbol)) locator)
            (construct-form (get-trait-form-expression symbol) locator))))))
  
  
  (method (evaluate-form)
    (with-cursor :wait
      (lambda ()
        (sleep .1)
        (when (get-modified?)
          (with-exception-filter
            (lambda (obj)
              (is-not? obj Cancel-Signal))
            (lambda (obj)
              (let* ((exc (wrap-exception obj))
                     (msg (format "Form evaluation failed: {a}" (exception-reason exc)))
                     (result (message-box msg yes: "Correct errors" no: "Revert changes")))
                (case result
                  ((no)
                   (reset-form)))
                (signal-cancel)))
            (lambda ()
              (let ((origin (get-origin~ (get-form~ designer)))
                    (locator (imports-locator (cdr (get-imports-expression)))))
                (bind (module symbol) (cdr (serialize-origin origin))
                  (let ((new-form (make-new-form origin locator)))
                    (setup-context~ new-form new-form)
                    (set-origin~ new-form origin)
                    (create-client~ editor new-form)
                    (set-form~ designer new-form)
                    (set-modified?~ editor #t)
                    (set-modified? #f))))))))))
  
  
  (method (reset-form)
    (let* ((form (get-form~ designer))
           (origin (get-origin~ form)))
      (bind (unit symbol) (cdr (serialize-origin origin))
        (set-string-content (format "(module {a} jazz)" unit))
        (insert-imports self (form-imports form) #t)
        (if (class? origin)
            (begin
              (insert-class self symbol (category-name (class-ascendant origin)))
              (insert-new-form self symbol form))
          (let* ((trait (resolve-runtime-reference origin))
                 (range (find-namespace-insertion-range~ (new Jazz-Explorer model))))
            (insert-string~ model range (format "{%}{%}{%}(define-trait {a} {a}{%}{a})" symbol (category-name (get-client-type~ trait)) (form->string (car (get-children~ form)) 1 include-form?: #f)))))
        (set-modified? #f)
        (goto-home #t #f)
        (reset~ (get-undoer~ model)))))
  
  
  (method override (get-modified?)
    (get-text-modified?~ editor))
  
  
  (method override (set-modified? flag)
    (set-text-modified?~ editor flag))
  
  
  (method override (evaluate-range range . rest)
    (evaluate-form))
  
  
  (method override (evaluate-selection)
    (evaluate-form))
  
  
  (method override (evaluate-buffer)
    (evaluate-form)))


(class Text-Editor-Controller extends Component-Editor-Controller
  
  
  (slot form-modified? initialize #f)
  (slot text-modified? initialize #f)
  
  
  (method override (get-modified?)
    (or form-modified? text-modified?))
  
  
  (method override (set-modified? flag)
    (when (neq? flag form-modified?)
      (set! form-modified? flag)
      (update-status)))
  
  
  (method public (get-text-modified?)
    text-modified?)
  
  
  (method public (set-text-modified? flag)
    (when (neq? flag text-modified?)
      (set! text-modified? flag)
      (update-status))))


(class Text-Editor extends Component-Editor
  
  
  (form
    (<install>                                   layout-type: fill
      (<Scroller-View>                           vscroll?: #t hscroll?: #t
        (<!>                       name: content
          (<Jazz-Text-Editor-View> name: text)))))
  
  
  (method override (get-text-view)
    (locate 'text))
  
  
  (method override (new-document-controller)
    (new Text-Editor-Controller self))
  
  
  (method public (set-text-modified? flag)
    (set-text-modified?~ (get-document-controller) flag))
  
  
  (method public (get-text-modified?)
    (get-text-modified?~ (get-document-controller)))
  
  
  (method public (create-client form)
    (set! client (recreate-client form)))
  
  
  (method override (prepare-mode-switch)
    (evaluate-buffer~ (get-text-view))
    (nextmethod))
  
  
  (method override (save-content-patch)
    (evaluate-buffer~ (get-text-view))
    (nextmethod))
  
  
  (method override (set-selection new . rest)
    (when (is? new Range$Cell$)
      (set-selection~ (get-text-view) new)))
  
  
  (method override (client-updated)
    (when client
      (reset-form~ (get-text-view))))
  
  
  (method override (install rest)
    (nextmethod rest)
    (set-editor~ (get-text-view) self)
    (set-designer~ (get-text-view) designer))))
