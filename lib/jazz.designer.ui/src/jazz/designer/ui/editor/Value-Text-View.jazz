;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Value Text View
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.designer.ui.editor.Value-Text-View jazz


(import (jazz.designer)
        (jazz.designer.ui)
        (jazz.markup)
        (jazz.text))


(class undocumented Value-Text-View extends Plain-Text-View @wait-this-can-be-annoying-because-of-completion IDE-Text-View implements Property-Editor


  (property value-row initialize #f accessors generate)
  
  
  (slot manager initialize #f)
    
  
  (form
    (<install> accepts-returns?: #f show-unfocused-selection?: #f))
  
  
  (method override (new-model self)
    (new Text-Model base-style: {Text-Style Text-Base} left-padding: 1 top-padding: 1))

  
  ;;;
  ;;;; Editor
  ;;;


  (method override (get-manager self)
    manager)


  (method override (set-manager self value)
    (set! manager value))
  
  
  (method (get-edited-value self)
    (read-string-element (get-string-content self)))
  
  
  (method package (set-edited-value self value)
    (define (present-edited-value value)
      (->string value :reader))
    
    (set-string-content self (present-edited-value value)))
  
  
  (method (get-edited-modified? self)
    (get-modified? (get-document-controller self)))
  
  
  (method package (set-edited-modified? self flag)
    (set-modified? (get-document-controller self) flag))
  
  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method override (up-arrow-move self extend? scroll?)
    (let ((target (or manager value-row)))
      (editor-up-arrow target)))
  
  
  (method override (down-arrow-move self extend? scroll?)
    (let ((target (or manager value-row)))
      (editor-down-arrow target)))
    

  (method override (tab-press self evt)
    (if (has-ambiguous-completion? self)
        (end-completion self)
      (if manager
          (editor-tab manager)
        (editor-tab value-row))))
  
  
  (method override (return-press self evt)
    (nextmethod self evt)
    (if manager
        (editor-return manager)
      (editor-return value-row)))
  
  
  (method (document-menu self)
    #f)
  
  
  ;;;
  ;;;; Focus
  ;;;
  
  
  (method override (focus-lose self)
    (nextmethod self)
    (if manager
        (editor-focus-lose manager)
      (editor-focus-lose value-row)))
  
  
  (method override (focus-master self)
    (get-tree value-row))
  
  
  (method override (focus-reset self)
    (get-tree value-row))))
