;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; View Editor
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.designer.ui.editor.View-Editor jazz


(import (jazz.action)
        (jazz.application)
        (jazz.component)
        (jazz.descriptor)
        (jazz.designer)
        (jazz.designer.ui)
        (jazz.designer.ui.view)
        (jazz.exemplar)
        (jazz.geometry)
        (jazz.graphic)
        (jazz.markup)
        (jazz.platform)
        (jazz.resource)
        (jazz.text)
        (jazz.ui)
        (jazz.undoer)
        (jazz.view)
        (jazz.view.descriptors)
        (jazz.workspace))


(class undocumented View-Editor extends Component-Editor


  (property mode initialize 'select accessors generate)
  
  
  (slot protected overlay          initialize #f getter generate)
  (slot protected showed-property  initialize #f getter generate)
  (slot protected rubber-band?     initialize #f getter generate)
  (slot protected base-view        initialize #f getter generate)
  (slot protected base-position    initialize #f getter generate)
  (slot protected current-position initialize #f getter generate)
  (slot protected preserved-client initialize #f getter generate)
  (slot protected show-frames?     initialize #t getter generate)
  (slot protected show-content?    initialize #t getter generate)
  
  
  (form
    (<install>                        layout-type: fill background: {Color Medium-Gray}
      (<Scroller-View> name: scroller hscroll?: #t vscroll?: #t)))

  
  ;;;
  ;;;; Host
  ;;;
  
  
  (method meta override (host-position self)
    {Point 227 117})
  
  
  (method meta override (host-size self)
    {Dimension 810 629})
  
  
  (method override (install-in-host self host)
    (nextmethod self host)
    (set! selection (list client)))


  ;;;
  ;;;; Actions
  ;;;
  

  (method override (guest-actions self)
    (cons (find-actions 'view-editor)
          (nextmethod self)))

  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method (on-bring-to-front self evt)
    (for-each (lambda (component)
                (bring-to-front designer component))
              (collect-oldest-ancestors selection client)))
  
  
  (method (on-send-to-back self evt)
    (for-each (lambda (component)
                (send-to-back designer component))
              (collect-oldest-ancestors selection client)))
  
  
  (method (on-delete-selection self evt)
    (delete-selection self))
  
  
  (method (on-rename-selected self evt)
    (if (/= (length selection) 1)
        (bell)
      (let ((component (car selection))
            (designer (get-designer self)))
        (let ((presentation (request-component-presentation (class-of component) (get-brothers component) initial-value: (get-presentation-property component))))
          (set-presentation-property component designer presentation)))))
  
  
  (method (on-select-all-children self evt)
    (if (/= (length selection) 1)
        (bell)
      (let ((component (car selection)))
        (select-all (get-surrogate component)))))
  
  
  (method (on-properties self evt)
    (select-docked Properties-Manager workspace: #f focus?: #t))
  
  
  (method package (on-open self evt)
    (when (not-null? selection)
      (open-class (class-of (car selection)))))
  
  
  ;;;
  ;;;; New
  ;;;
  
  
  (method meta override (new-event self . rest)
    (new-class (get-tree (find-docked-class Toolbox-Manager)) 'Page-View 'jazz.ui))
  
  
  ;;;
  ;;;; Client
  ;;;
  
  
  (method override (client-update self)
    (nextmethod self)
    (install-client self)
    (when client
      (set-visible? client #t)))
  
  
  (method override (install-client-surrogate self)
    (when client
      (install-surrogate client self)))
  
  
  (method protected virtual (install-client self)
    (when client
      (let ((client-parent (get-parent client)))
        ;; to support in-place edition
        (unless client-parent
          (let* ((scroller (locate-component self 'scroller))
                 (content (and scroller (get-content scroller))))
            (set-parent client content)
            (when scroller
              (set-client scroller client)))))))
    
  
  ;;;
  ;;;; Designer
  ;;;
  
  
  (method override (install-current-designer self component form)
    (nextmethod self component form)
    @w
    (redraw-border (get-surrogate component)))
  
  
  ;;;
  ;;;; Mode
  ;;;
  
  
  (method (select-mode self m)
    (set! mode m)
    (let ((manager (find-docked-class Designer-Manager)))
      (when manager
        (set-selected? (locate manager mode) #t))))
  
  
  ;;;
  ;;;; Display
  ;;;
  
  
  (method package (toggle-frames self)
    (set! show-frames? (not show-frames?))
    (invalidate-reference self))
  
  
  (method package (toggle-content self)
    (set! show-content? (not show-content?))
    (invalidate-reference self))
  
  
  (method (invalidate-reference self)
    (let ((reference (get-reference self)))
      (when reference
        (invalidate-view reference))))
  
  
  ;;;
  ;;;; Preview
  ;;;
  
  
  (method override (preview self)
    (cond ((not (previewing? self))
           (set! preserved-client client)
           (set-selection self '())
           (set-client self #f))
          (else
           (set-client self preserved-client)
           (set-selection self (list preserved-client))
           (set! preserved-client #f))))
  
  
  (method override (previewing? self)
    (boolean preserved-client))

  
  ;;;
  ;;;; Property
  ;;;
  
  
  (method package (set-showed-property self property)
    (set! showed-property property)
    (invalidate-view client))
    
  
  ;;;
  ;;;; Selection
  ;;;
  
  
  (method package (invalidate-selection self)
    (for-each (lambda (selected)
                (when (is? selected View)
                  (invalidate-view selected)))
              selection))


  ;;;
  ;;;; Rendering
  ;;;
  
  
  (method override (render self surface draw-self? nodes context)
    (nextmethod self surface draw-self? nodes context)
    (for-each (lambda (view rank)
                (when (is? view View)
                  (let ((surrogate (get-surrogate view)))
                    (draw-selected surrogate surface rank))))
              selection
              (naturals 0 (length selection))))


  ;;;
  ;;;; RubberBand
  ;;;
  
  
  (method package (start-rubber-band self view pos)
    (set! rubber-band? #t)
    (set! base-view view)
    (set! base-position pos)
    (set! current-position #f)
    (acquire-capture base-view)
    (setup-overlay self)
    (set-selection self '() origin: self))
  
  
  (method package (process-rubber-band self pos)
    (when rubber-band?
      (let ((old current-position))
        (set! current-position pos)
        (when old
          (invalidate-rect client (inflate-rect (normalize-rect (corners->rect base-position old)) 1 1)))
        (when current-position
          (let ((rect (normalize-rect (corners->rect base-position current-position))))
            (invalidate-rect client (inflate-rect rect 1 1))
            (select-rubber-banded self rect))))))
  
  
  (method (select-rubber-banded self rect)
    (let* ((r (normalize-rect rect))
           (p (rect-position r))
           (s (rect-size r))
           (selection (new List-Factory)))
      (for-each-view base-view
        (lambda (view)
          (unless (is? view Client-Overlay)
            (let* ((b (get-bounds view))
                   (r (acquire client view b)))
              (when (rects-intersect? r p s)
                (put selection view))))))
      (let ((lst (get-output selection)))
        (set-selection self lst origin: self))))
  
  
  (method package (end-rubber-band self pos)
    (process-rubber-band self #f)
    (select-rubber-banded self (corners->rect base-position pos))
    (remove-overlay self)
    (release-capture base-view)
    (set! rubber-band? #f)
    (when (not-null? selection)
      (select-mode self 'select)))


  ;;;
  ;;;; Overlay
  ;;;
  
  
  (method (setup-overlay self)
    (set! overlay (new Client-Overlay parent: client size: {Dimension 4000 4000} editor: self)))
  
  
  (method (remove-overlay self)
    (close overlay)
    (set! overlay #f))


  ;;;
  ;;;; Alignment
  ;;;
  
  
  (method public (align-left self)
    (if (< (length selection) 2)
        (bell)
      (with-alignment self
        (lambda ()
          (let* ((reference (car selection))
                 (h (lie-left reference)))
            (for-each (lambda (view)
                        (let ((lie (get-lie view)))
                          (set-view-lie self view (new Point h (get-v lie)))))
                      (cdr selection)))))))
  
  
  (method public (align-top self)
    (if (< (length selection) 2)
        (bell)
      (with-alignment self
        (lambda ()
          (let* ((reference (car selection))
                 (v (lie-top reference)))
            (for-each (lambda (view)
                        (let ((lie (get-lie view)))
                          (set-view-lie self view (new Point (get-h lie) v))))
                      (cdr selection)))))))
  
  
  (method public (align-right self)
    (if (< (length selection) 2)
        (bell)
      (with-alignment self
        (lambda ()
          (let* ((reference (car selection))
                 (h (lie-right reference)))
            (for-each (lambda (view)
                        (let ((lie (get-lie view))
                              (h (- h (get-width view))))
                          (set-view-lie self view (new Point h (get-v lie)))))
                      (cdr selection)))))))
  
  
  (method public (align-bottom self)
    (if (< (length selection) 2)
        (bell)
      (with-alignment self
        (lambda ()
          (let* ((reference (car selection))
                 (v (lie-bottom reference)))
            (for-each (lambda (view)
                        (let ((lie (get-lie view))
                              (v (- v (get-height view))))
                          (set-view-lie self view (new Point (get-h lie) v))))
                      (cdr selection)))))))
  
  
  (method public (center-horizontally self)
    (if (< (length selection) 2)
        (bell)
      (with-alignment self
        (lambda ()
          (let* ((reference (car selection))
                 (h (lie-left reference))
                 (width (get-width reference)))
            (for-each (lambda (view)
                        (let ((lie (get-lie view))
                              (h (+ h (fxround/ (- width (get-width view)) 2))))
                          (set-view-lie self view (new Point h (get-v lie)))))
                      (cdr selection)))))))
  
  
  (method public (center-vertically self)
    (if (< (length selection) 2)
        (bell)
      (with-alignment self
        (lambda ()
          (let* ((reference (car selection))
                 (v (lie-top reference))
                 (height (get-height reference)))
            (for-each (lambda (view)
                        (let ((lie (get-lie view))
                              (v (+ v (fxround/ (- height (get-height view)) 2))))
                          (set-view-lie self view (new Point (get-h lie) v))))
                      (cdr selection)))))))
  
  
  (method public (space-horizontally self)
    (if (< (length selection) 3)
        (bell)
      (with-alignment self
        (lambda ()
          (let* ((first (first selection))
                 (second (second selection))
                 (dh (- (lie-left second) (lie-right first)))
                 (h (+ (lie-right second) dh)))
            (for-each (lambda (view)
                        (let ((lie (get-lie view)))
                          (set-view-lie self view (new Point h (get-v lie))))
                        (increase! h (+ (get-width view) dh)))
                      (cddr selection)))))))
  
  
  (method public (space-vertically self)
    (if (< (length selection) 3)
        (bell)
      (with-alignment self
        (lambda ()
          (let* ((first (first selection))
                 (second (second selection))
                 (dv (- (lie-top second) (lie-bottom first)))
                 (v (+ (lie-bottom second) dv)))
            (for-each (lambda (view)
                        (let ((lie (get-lie view)))
                          (set-view-lie self view (new Point (get-h lie) v)))
                        (increase! v (+ (get-height view) dv)))
                      (cddr selection)))))))
  
  
  (method public (resize-width self)
    (if (< (length selection) 2)
        (bell)
      (with-alignment self
        (lambda ()
          (let* ((reference (car selection))
                 (width (get-width reference)))
            (for-each (lambda (view)
                        (let ((size (get-size view)))
                          (safe-set-property designer view 'size (new Dimension width (get-height size)))))
                      (cdr selection)))))))
  
  
  (method public (resize-height self)
    (if (< (length selection) 2)
        (bell)
      (with-alignment self
        (lambda ()
          (let* ((reference (car selection))
                 (height (get-height reference)))
            (for-each (lambda (view)
                        (let ((size (get-size view)))
                          (safe-set-property designer view 'size (new Dimension (get-width size) height))))
                      (cdr selection)))))))
  
  
  (method public (resize-both self)
    (if (< (length selection) 2)
        (bell)
      (with-alignment self
        (lambda ()
          (let* ((reference (car selection))
                 (size (get-size reference)))
            (for-each (lambda (view)
                        (safe-set-property designer view 'size size))
                      (cdr selection)))))))
  
  
  (method (with-alignment self thunk)
    (with-atomic-undo (get-undoer designer)
      thunk)
    (update-focus-actions (current-application)))
  
  
  (method public (force-layout self)
    (let ((layout-parent? (shift-down?)))
      (for-each (lambda (view)
                  (let ((target (if layout-parent? (get-parent view) view)))
                    (layout-view target)))
                selection)))
  
  
  (definition (lie-left view)
    (get-h (get-lie view)))
  
  
  (definition (lie-top view)
    (get-v (get-lie view)))
  
  
  (definition (lie-right view)
    (+ (get-h (get-lie view)) (get-width view)))
  
  
  (definition (lie-bottom view)
    (+ (get-v (get-lie view)) (get-height view)))
  
  
  (method (set-view-lie self view lie)
    (let ((old-value (get-position view)))
      (set-lie view lie)
      (safe-set-property designer view 'position (get-position view) old-value: old-value)))


  ;;;
  ;;;; Style
  ;;;
  
  
  (method virtual (extend-selection-style self generate-properties)
    (let* ((selection (car (get-selection self)))
           (style (or (get-style selection) (new Text-Style))))
      (safe-set-property designer selection 'style (apply extend style (generate-properties style)))))
  
  
  (method (extend-selection-font self generate-properties)
    (extend-selection-style self
      (lambda (style)
        (list font: (let ((font (get-font style)))
                      (apply extend font (generate-properties font)))))))
  
  
  (method package (toggle-bold self)
    (extend-selection-font self
      (lambda (font)
        (list bold?: (not (get-bold? font))))))
  
  
  (method package (toggle-italic self)
    (extend-selection-font self
      (lambda (font)
        (list italic?: (not (get-italic? font))))))
  
  
  (method package (toggle-underline self)
    (extend-selection-font self
      (lambda (font)
        (list underline?: (not (get-underline? font))))))
  
  
  (method package (on-font-size self val)
    (extend-selection-font self
      (lambda (font)
        (list point-size: val))))
  
  
  (method package (on-font-name self val)
    (extend-selection-style self
      (lambda (style)
        (let ((font (get-font style)))
          (list font: (if font
                          (extend font font-name: val)
                        (new Font font-name: val point-size: 8)))))))
  
  
  (method package (on-style self val)
    (let* ((selection (car (get-selection self))))
      (safe-set-property designer selection 'style val)))
  
  
  (method public (change-text-color self color)
    (extend-selection-style self (lambda (style) (list color: color))))
  
  
  (method public (change-highlight-color self color)
    (extend-selection-style self (lambda (style) (list highlight: color))))
  
  
  (method public (change-frame-color self color)
    (extend-selection-style self (lambda (style) (list frame: color))))
  
  )


;;;
;;;; Workbench
;;;


(class View-Workbench extends View
  
  
  (form
    (<install> background: {Color Medium-Gray}))
  
  
  ;;;
  ;;;; Descriptor
  ;;;
  
  
  (method meta override (get-class-descriptor self (context: context #f))
    (new View-Workbench-Descriptor)))


;;;
;;;; Design
;;;


(submodule design


(import (jazz.designer)
        (jazz.designer.ui))


(class View-Workbench-Descriptor extends View-Descriptor
  
  
  (form
    (<install> image: {Image-Resource "DesignLayout"}))
  
  
  (method override (component-surrogate-class self component)
    View-Workbench-Surrogate))


(class undocumented View-Workbench-Surrogate extends View-Surrogate
  
  
  (method override (draw self surface)
    )))


;;;
;;;; Overlay
;;;


(definition Overlay-Outside
  {Color red: 96 green: 158 blue: 234 alpha: 0.8})

(definition Overlay-Inside
  {Color red: 96 green: 158 blue: 234 alpha: 0.4})


(class Client-Overlay extends View
  
  
  (property editor)
  
  
  (method override (draw self surface context)
    (let ((base (get-base-position editor))
          (current (get-current-position editor)))
      (when current
        (let ((rect (normalize-rect (corners->rect base current))))
          (set-line-width surface 1)
          (rectangle surface rect Overlay-Outside Overlay-Inside)))))))
