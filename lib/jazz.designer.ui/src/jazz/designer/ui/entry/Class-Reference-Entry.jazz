;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Class-Reference Entry
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.designer.ui.entry.Class-Reference-Entry jazz


(import (jazz.designer)
        (jazz.designer.ui)
        (jazz.domain)
        (jazz.graphic)
        (jazz.markup)
        (jazz.reference)
        (jazz.runtime)
        (jazz.text)
        (jazz.ui)
        (jazz.view))


(class Class-Combo extends Combo-Box
  
  
  (slot reference initialize #f getter generate)
  (slot classes   initialize #f accessors generate)
  
  
  (form
    (<install> kind: choose))

  
  (method public (set-reference self reference)
    (set! self.reference reference)
    (set-string-content (locate self 'body) (get-presentation parent)))
  
  
  (method public (get-import self)
    (and reference
         (second (serialize-runtime-reference reference))))
  
  
  (method override (button-action self)
    (define (initialize-manager manager)
      (when reference
        (bind (unit symbol) (parse-runtime-reference reference)
          (setup manager unit symbol))))
    
    (bind (symbol unit) 
        (get-modal Class-Dialog-Toolbox 
                   initialize: initialize-manager 
                   references: (map (lambda (class-ref)
                                      (if (is? class-ref Runtime-Reference)
                                          (runtime-reference->reference class-ref)
                                        class-ref))
                                    classes))
      (set-reference self (deserialize-runtime-reference (list 'module-public unit symbol)))
      (set-modified? self #t))))


(class Class-Reference-Entry extends Property-Entry
  
  
  (form
    (<install>                   layout-type: border background: {Color White}
      (<Class-Combo> name: combo selectable?: #t location: center
        (<!>         name: body  left-padding: 0 top-padding: 1))))
  
  
  (method override (finish self rest)
    (nextmethod self rest)
    (set-classes (locate self 'combo) (get-classes domain)))
  
  
  (method override (tab-view self)
    (locate self '(combo body)))
  
  
  (method override (get-value self)
    (let ((value (get-reference (locate self 'combo))))
      (if (get-runtime-reference? domain)
          value
        (let ((ref (new Class-Reference (last (parse-runtime-reference value)))))
          (setup-context ref (new Environment #f (lambda (sym) value)))
          ref))))
  
  
  (method override (set-value self value)
    (let ((ref (if (get-runtime-reference? domain)
                   value
                 (let ((class (reference-resolve value)))
                   (deserialize-runtime-reference (list 'module-public (category-unit class) (category-name class)))))))
      (set-reference (locate self 'combo) ref)))
  
  
  (method override (get-imports self)
    (list (get-import (locate self 'combo))))
  
  
  (method override (get-modified? self)
    (get-modified? (locate self 'combo)))
  
  
  (method override (set-modified? self value)
    (set-modified? (locate self 'combo) value))
  
  
  (method override (set-editable? self value)
    (set-editable? (locate self 'combo) value))))
