;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Enumeration Entry
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.designer.ui.entry.Enumeration-Entry jazz


(import (jazz.designer.ui)
        (jazz.domain)
        (jazz.jml)
        (jazz.locale)
        (jazz.ui))


(class Enumeration-Entry extends Property-Entry
  
  
  (form
    (<install>
      (<Entry-Combo-Box> name: combo condensed?: #t selectable?: #t
        (<!>             name: body  left-padding: 1 top-padding: 1))))
  
  
  (method override (finish rest)
    (nextmethod rest)
    (set-entry-test~ (locate 'combo) di=?)    
    (set-editable?~ (locate 'combo) #t)
    (set-editor~ (locate '(combo body)) self))
  
  
  ;;;
  ;;;; Tab
  ;;;
  
  
  (method override (tab-view)
    (locate '(combo body)))
  
  
  ;;;
  ;;;; Grid
  ;;;
  
  
  (method override (setup-for-grid)
    (let ((text (locate '(combo body))))
      (set-left-padding~ text 0)
      (set-top-padding~ text 1)))
    
  
  ;;;
  ;;;; Value
  ;;;
  
  
  (method override (get-value)
    (get-value~ (locate 'combo)))
  
  
  (method override (set-value value)
    (let ((combo (locate 'combo)))
      (if (or (get-strict?~ domain) (valid?~ combo value))
          (set-value~ combo value)
        (set-content~ combo (->string value)))))
  
  
  (method override (get-modified?)
    (get-modified?~ (locate 'combo)))
  
  
  (method override (set-modified? value)
    (set-modified?~ (locate 'combo) value))
  
  
  ;;;
  ;;;; Presentation
  ;;;
  
  
  (method override (presentation-violation)
    (let ((combo (locate 'combo)))
      (and (not (member? (localize (get-content~ combo)) 
                         (get-choices~ combo)
                         key: (compose localize cadr)
                         test: di=?))
           (new Violation message: "Unavailable choice"))))
  
  
  (method override (get-presentation)
    (get-content~ (locate 'combo)))
  
  
  (method override (set-presentation text)
    (set-content~ (locate 'combo) text))
  
  
  ;;;
  ;;;; Editable
  ;;;
  
  
  (method override (set-editable? value)
    (set-editable?~ (locate 'combo) value))))
