;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Name Entry
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.designer.ui.entry.Name-Entry jazz


(import (jazz.designer.ui))


(class Name-Entry extends String-Entry)


@convert
(class Name-Entry extends String-Entry
  
  
  ;;;
  ;;;; Validation
  ;;;
  
  
  (method override (validate domain)
    (let ((content (get-string-content~ (locate 'text)))
          (limit (get-limit~ domain))
          (predicate? (get-predicate?~ domain)))
      (cond ((empty-string? content)
             (if (get-nullable?~ domain)
                 #f
               (new Violation message: {Locales english: "This field is mandatory" french: "Ce champ est obligatoire"})))
            ((and limit
                  (> (string-length content) limit))
             (new Violation message: (contextual-locales {Locales english: "This field can't contain more than {limit} characters" french: "Ce champ ne peut contenir plus de {limit} caract√®res"} (local-context limit))))
            (predicate?
             (predicate? content))
            (else
             #f))))
  
  
  ;;;
  ;;;; Value
  ;;;
  
  
  (method override (get-value)
    (let ((content (get-string-content~ (locate 'text))))
      (if (empty-string? content)
          #f
        content)))
  
  
  (method override (set-value value)
    (set-string-content~ (locate 'text)
      (if (not value)
          ""
        value)))))
