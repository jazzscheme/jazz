;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Designer Grid
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.designer.ui.grid jazz


(import (jazz.action)
        (jazz.application)
        (jazz.component)
        (jazz.component.runtime)
        (jazz.descriptor)
        (jazz.designer.ui)
        (jazz.designer.ui.grid.tree)
        (jazz.designer.ui.view)
        (jazz.domain)
        (jazz.graphic)
        (jazz.handler)
        (jazz.locale)
        (jazz.jml)
        (jazz.menu)
        (jazz.resource)
        (jazz.runtime)
        (jazz.ui.clipboard)
        (jazz.ui))


(definition (classes-common-ancestor . classes)
  (let ((ancestor (find-if (lambda (class)
                             (every? (lambda (subclass)
                                       (subclass? subclass class))
                                     classes))
                           classes)))
    (or ancestor (apply classes-common-ancestor (map class-ascendant classes)))))


(definition (get-class-standard-properties class)
  (let* ((properties-descriptor (get-properties-descriptor class))
         (standard (get-standard~ properties-descriptor)))
    (either standard #f)))


(definition (class-properties class)
  (let ((standard (get-class-standard-properties class)))
    (define (keep-property? property)
      (let ((standard? (get-standard?~ class property))
            (category (get-category~ class property)))
        (and standard?
             (not (eq? (get-name~ category) 'infos))
             (if standard
                 (memq (get-name~ property) standard)
               (let ((property-descriptor (get-property-descriptor class (get-name~ property))))
                 (and property-descriptor (get-domain~ property-descriptor)))))))
    
    (collect-if keep-property? (get-properties~ class))))


(definition (present-property-value component property)
  (let ((value (read-property component property)))
    (present-property~ component property value)))


(definition (column-data-component-property row-data column-data fail succeed)
  (let* ((component (element (get-hierarchy~ row-data) (get-component-offset~ column-data)))
         (field (and component (category-field (class-of component) (get-identifier~ column-data))))
         (property (and (is? field Property) field)))
    (if property
        (succeed component property)
      (fail))))


(definition (column-component-property row column fail succeed)
  (call-with-row/column-data row column
    (lambda (rd cd) (column-data-component-property rd cd fail succeed))))


(definition public (classes-properties/presentations/domains classes)
  (remove-duplicates
    (append-map (lambda (class)
                  (map (lambda (property)
                         (list (get-name~ property)
                               (property-presentation~ class property)
                               (get-domain~ class property)))
                       (class-properties class)))
                classes)
    key: second
    test: string=?))


(definition public (get-selection-columns grid)
  (collect-type Component-Provider-Selection-Data (get-columns~ grid) key: get-provider-data~))


(definition public (get-sub-property-domain component property sub-identifier)
  (let* ((domain (property-domain~ component property))
         (multi-domains (get-multi-domains~ domain component))
         (result (and multi-domains (assq-value sub-identifier multi-domains #f))))
    (and result (second result))))


(class Component-Row-Data extends Component
  
  
  (property hierarchy  initialize #f accessors generate)
  (property violations initialize #f accessors generate))


(class Component-Provider-Data extends Provider-Data
  
  
  (property component-name   initialize #f accessors generate)
  (property read-only?       initialize #f accessors generate)
  (property identifier       initialize #f accessors generate)
  (property component-offset initialize #f accessors generate)
  (property parent-offset    initialize #f accessors generate)
  
  
  (method (class-selection?)
    (eq? identifier 'class-info)))


(class Component-Provider-Selection-Data extends Component-Provider-Data
  
  
  (property class-references initialize '() accessors generate))


(class Component-Provider-Sub-Property-Data extends Component-Provider-Data
  
  
  (property sub-identifier initialize #f accessors generate))


(class Component-Provider extends Component implements Data-Provider
  
  
  (slot designer accessors generate)
  (slot editor accessors generate)
  (slot client accessors generate)
  
  
  (method (get-grid)
    (get-parent))
  
  
  (method (column-data-component-class-references row-data column-data fail succeed)
    (let ((component (element (get-hierarchy~ row-data) (get-component-offset~ column-data))))
      (if component
          (let ((component-column-data (element (get-selection-structure~ editor) (get-component-offset~ column-data))))
            (succeed component (get-class-references~ component-column-data)))
        (fail))))
  
  
  (method (get-class-domain row-data column-data)
    (column-data-component-class-references row-data column-data
      (const #f)
      (lambda (component class-references)
        (new Class-Reference-Domain classes: class-references runtime-reference?: #t))))
  
  
  (method (get-class-reference row-data column-data fail succeed)
    (column-data-component-class-references row-data column-data
      fail
      (lambda (component class-references)
        (succeed (runtime-class-reference (class-of component))))))
  
  
  (method (set-class row-data column-data reference)
    (let ((runtime-reference (publicize-runtime-reference reference)))
      (column-data-component-class-references row-data column-data
        (lambda () (error "Can't set class"))
        (lambda (component _)
          (let ((parent (get-parent~ component))
                (name (get-name~ component))
                (import (second (serialize-runtime-reference runtime-reference)))
                (new-component (new (resolve-runtime-reference runtime-reference))))
            (remove-child~ designer component)
            (add-child~ designer new-component parent name: name import: import))))))
  
  
  ;;;
  ;;;; Data Provider
  ;;;
  
  
  (method override (get-data row-data column-data fail succeed)
    (cond ((is? column-data Component-Provider-Selection-Data)
           (fail))
          ((class-selection?~ column-data)
           (get-class-reference row-data column-data fail succeed))
          (else
           (column-data-component-property row-data column-data
             fail
             (lambda (component property)
               (succeed (read-property component property)))))))
  
  
  (method override (set-data row-data column-data value)
    (if (class-selection?~ column-data)
        (set-class row-data column-data value)
      (column-data-component-property row-data column-data
        (lambda () (error "Can't set data"))
        (lambda (component property)
          (safe-set-property~ designer component property value)))))
  
  
  (method override (get-domain row-data column-data)
    (cond ((is? column-data Component-Provider-Selection-Data)
           #f)
          ((class-selection?~ column-data)
           (get-class-domain row-data column-data))
          ((is? column-data Component-Provider-Sub-Property-Data)
           (column-data-component-property row-data column-data (const #f)
             (lambda (component property)
               (get-sub-property-domain component property (get-sub-identifier~ column-data)))))
          (else
           (column-data-component-property row-data column-data (const #f) property-domain~))))
  
  
  (method override (read-only? row-data column-data)
    (or (get-read-only?~ column-data)
        (and (class-selection?~ column-data)
             (column-data-component-class-references row-data column-data
               (lambda args #t)
               (lambda (component _)
                 (not (component-owned? component (get-form~ designer) (get-reference~ designer))))))))
  
  
  (method override (get-violation row-data column-data)
    (let ((index (find (get-columns~ (get-grid)) column-data key: get-provider-data~ test: eq?)))
      (element (get-violations~ row-data) index)))
  
  
  (method override (set-violation row-data column-data violation)
    (let ((index (find (get-columns~ (get-grid)) column-data key: get-provider-data~ test: eq?)))
      (list-set! (get-violations~ row-data) index violation))))


(class Component-Controller-Actions extends Actions
  
  
  (form
    (<install>
      (<Action-Item> name: rename     action-handler: {Event-Handler (:focus controller) on-rename-component} shortcut: {Shortcut F2})
      (<Action-Item> name: insert     action-handler: {Event-Handler (:focus controller) on-insert-component}))))


(class Component-Controller-Menu extends Context-Menu
  
  
  (form
    (<install>
      (<Label-Item>     name: insert            title: "Insert" icon: {Image-Resource "Add"} action-handler: {Action component-controller insert})
      (<Label-Item>     name: delete            title: "Delete" icon: {Image-Resource "Remove"} action-handler: {Action view delete})
      (<Label-Item>     name: rename            title: "Rename"action-handler: {Action component-controller rename})
      (<Separator-Item>)
      (<Label-Item>     name: cut               title: "Cut" icon: {Image-Resource "Cut"} action-handler: {Action view cut})
      (<Label-Item>     name: copy              title: "Copy" icon: {Image-Resource "Copy"} action-handler: {Action view copy})
      (<Label-Item>     name: paste             title: "Paste" icon: {Image-Resource "Paste"} action-handler: {Action view paste}))))


(class Component-Controller extends Component implements Grid-Controller
  
  
  (slot designer initialize #f accessors generate)
  (slot editor initialize #f accessors generate)
  (slot client initialize #f accessors generate)
  (slot components-lists)
  
  
  (definition Default-Class-Width 120)
  (definition Default-Property-Width 120)
  (definition Default-Selection-Width 80)
  
  
  ;;;
  ;;;; Redispatch
  ;;;
  
  
  (method override (drop? source cell)
    (and (not cell)
         (let ((view (get-view~ source)))
           (and (is? view Toolbox-Tree)
                (let ((class (selected-class~ view)))
                  (addable-class?~ client class))))))
  
  
  (method override (receive-drop sender pos drag-drop)
    (let* ((tool (selected-component~ sender))
           (ref (get-reference~ tool))
           (child (new (resolve-runtime-reference ref))))
      (add-child~ designer child client import: (get-unit~ tool) descendant?: #t)))
  
  
  (method override (get-tab-stops)
    (let ((grid (get-grid)))
      
      (define (tab-cell row column)
        (let ((cell (site->cell~ grid (row/column->site~ grid row column))))
          (or (and (cell=? (get-single-selection~ grid) cell) cell)
              (call-with-row/column-data row column
                (lambda (rd cd)
                  (and (is-not? cd Component-Provider-Selection-Data)
                       (not (get-read-only?~ cd))
                       (column-data-component-property rd cd
                         (lambda () #f)
                         (lambda (c p) cell))))))))
      
      (append-map (lambda (row)
                    (collect (lambda (column) (tab-cell row column)) (get-columns~ grid)))
                  (collect-visible-rows~ grid))))
  
  
  (method (update-rows-highlight old new)
    (define (background row-data column-data selected?)
      (get-data~ (get-provider) row-data column-data
        (lambda ()
          (inactive-background row-data column-data selected?))
        (lambda (val)
          (active-background row-data column-data selected?))))
    
    (define (switch-row-color row selected?)
      (let ((row-data (get-user-data~ row)))
        (for-each (lambda (label column-data)
                    (let ((color (background row-data column-data selected?)))
                      (typecase label
                        ((Tree-Data)
                         (set-background~ label color))
                        ((Tree-Data-View)
                         (set-background~ label color)))))
                  (get-children~ row)
                  (map get-provider-data~ (get-columns~ (get-grid))))))
    
    (define (get-merged-rows rows)
      (let ((components (map first (map get-hierarchy~ (map get-user-data~ rows)))))
        (user-data-rows~ (get-grid) components test: (lambda (data component)
                                                       (eq? (first (get-hierarchy~ data)) component)))))
    
    (let ((old-rows (get-merged-rows (map (~ get-row (get-grid)) (remove-duplicates (map get-line~ old)))))
          (new-rows (get-merged-rows (map (~ get-row (get-grid)) (remove-duplicates (map get-line~ new))))))
      (let ((removed-rows (difference old-rows new-rows))
            (added-rows (difference new-rows old-rows)))
        (for-each (lambda (row)
                    (switch-row-color row #f))
                  removed-rows)
        (for-each (lambda (row)
                    (switch-row-color row #t))
                  added-rows))))
  
  
  (method override (inactive-title row-data column-data)
    (if (is? column-data Component-Provider-Selection-Data)
        "+"
      ""))
  
  
  (definition clear-color {Color White})
  (definition clear-selected-color {Color Light-Gray})
  (definition grayed-color {Color Gray})
  (definition grayed-selected-color {Color Dark-Gray})
  
  
  (method override (inactive-background row-data column-data (selected? #f))
    (let ((clear-color (if selected? clear-selected-color clear-color))
          (grayed-color (if selected? grayed-selected-color grayed-color)))
      (typecase column-data
        ((Component-Provider-Selection-Data)
         (let ((parent-offset (get-parent-offset~ column-data)))
           (cond ((not parent-offset) clear-color)
                 ((element (get-hierarchy~ row-data) (get-parent-offset~ column-data)) clear-color)
                 (else grayed-color))))
        (else
         grayed-color))))
  
  
  (method override (active-background row-data column-data (selected? #f))
    (if selected? clear-selected-color clear-color))
  
  
  (method override (get-frame-color)
    #f)
  
  
  (method public (get-cell-color row-data column-data)
    (and (get-violation~ (get-provider) row-data column-data)
         {Color Red}))
  
  
  (method public (get-editor-color row-data column-data)
    (if (get-violation~ (get-provider) row-data column-data)
        {Color Red}
      {Color Black}))
  
  
  (method override (selection-cell? row column)
    (call-with-row/column-data row column
      (lambda (row-data column-data)
        (is? column-data Component-Provider-Selection-Data))))
  
  
  (method override (cell-editable? row column)
    (call-with-row/column-data row column
      (lambda (row-data column-data)
        (and (not (get-read-only?~ column-data))
             (not (is? column-data Component-Provider-Selection-Data))))))
  
  
  (method (get-provider)
    (get-provider~ parent))
  
  
  (method (get-grid)
    parent)
  
  
  (method override (get-focus-actions)
    (find-actions 'component-controller))
  
  
  (method public (can-rename?)
    (receive (rows-data columns-data) (selected-cells-data~ (get-grid))
      (and (= 1 (length rows-data))
           (let ((row-data (car rows-data))
                 (column-data (car columns-data)))
             (and (is? column-data Component-Provider-Selection-Data)
                  (let ((component (element (get-hierarchy~ row-data) (get-component-offset~ column-data))))
                    (and component
                         (not (get-component-name~ column-data))
                         (component-owned-by-reference?~ designer component))))))))
  
  
  (method public (can-insert?)
    (receive (rows-data columns-data) (selected-cells-data~ (get-grid))
      (and (= 1 (length rows-data))
           (let ((row-data (car rows-data))
                 (column-data (car columns-data)))
             (and (is? column-data Component-Provider-Selection-Data)
                  (or (not (get-component-name~ column-data))
                      (not (element (get-hierarchy~ row-data) (get-component-offset~ column-data)))))))))
  
  
  (method override (focus-update-actions)
    (set-action-enabled? {Action component-controller insert} (can-insert?))
    (set-action-enabled? {Action component-controller rename} (can-rename?)))
  
  
  (method override (get-context-menu)
    (new Component-Controller-Menu client: self))
  
  
  (method (selected-components)
    (receive (rows-data columns-data) (selected-cells-data~ (get-grid))
      (if (null? rows-data)
          (list client)
        (assert (if (> (length columns-data) 1)
                    (every? (lambda (data) (is? data Component-Provider-Selection-Data)) columns-data)
                  #t))
        (remove-false (map element (map get-hierarchy~ rows-data) (map get-component-offset~ columns-data))))))
  
  
  (method public (on-rename-component evt)
    (let* ((components (selected-components))
           (component (car components))
           (presentation (request-component-presentation (class-of component) (get-brothers~ component) initial-value: (get-presentation-property~ component))))
      (set-presentation-property~ component designer presentation)
      (update-selection~ editor)))
  
  
  (method public (on-insert-component evt)
    (receive (rows-data columns-data) (selected-cells-data~ (get-grid))
      (let ((row-data (car rows-data))
            (column-data (car columns-data)))
        (let ((runtime-reference (publicize-runtime-reference (car (get-class-references~ column-data))))
              (parent (let ((parent-offset (get-parent-offset~ column-data)))
                        (if parent-offset (element (get-hierarchy~ row-data) parent-offset) client))))
          (let* ((brothers (get-children~ parent))
                 (class (resolve-runtime-reference runtime-reference))
                 (name (or (get-component-name~ column-data) (string->symbol (request-component-presentation class brothers)))))
            (set-selection~ editor (list (add-child~ designer (new class) parent name: name import: (second (serialize-runtime-reference runtime-reference))))))))))
  
  
  (method override (on-selection-change evt)
    (when editor
      (let ((old (get-selection~ editor))
            (new (selected-components)))
        (unless (equal? old new)
          (set-selection~ editor (selected-components))
          (update-focus-actions~ (get-application))))))
  
  
  (method override (cut-selection)
    (cut-components~ designer (selected-components)))
  
  
  (method override (copy-selection)
    (copy-components~ designer (selected-components)))
  
  
  (method override (delete-selection)
    (delete-components~ designer (selected-components)))
  
  
  (method override (paste-clipboard)
    (let ((parent (determine-unique-paster (selected-components))))
      (paste-parcels~ designer (get-jazz-parcels) parent)))
  
  
  (method override (can-copy?)
    (can-copy-components? (selected-components)))
  
  
  (method override (can-cut?)
    (let ((components (selected-components)))
      (and (every? (~ component-owned-by-reference? designer) components)
           (can-cut-components? components))))
  
  
  (method override (can-paste?)
    (can-paste-components? (selected-components)))
  
  
  (method override (can-delete?)
    (let ((components (selected-components)))
      (and (every? (~ component-owned-by-reference? designer) components)
           (can-delete-components? components))))
  
  
  (method override (get-draggable?)
    (can-modify-components? (selected-components) can-relocate-component?~))
  
  
  (method (child-add child parent)
    (populate~ (get-grid)))
  
  
  (method (child-remove child parent)
    (populate~ (get-grid)))
  
  
  (method (property-change component property)
    (for-each-row~ (get-grid)
      (lambda (row row-rank)
        (let ((row-data (get-user-data~ row)))
          (when (memq? component (get-hierarchy~ row-data))
            (for-each-column~ (get-grid)
              (lambda (column column-rank)
                (let ((column-data (get-provider-data~ column)))
                  (when (and (eq? (get-name~ property) (get-identifier~ column-data))
                             (eq? component (element (get-hierarchy~ row-data) (get-component-offset~ column-data))))
                    (update-cell~ (get-grid) (new Cell row-rank column-rank)))))))))))
  
  
  (method (name-change component new-name old-name)
    (populate~ (get-grid)))
  
  
  (method override (merge? row1-data row2-data column-data)
    (let ((component-offset (get-component-offset~ column-data))
          (parent-offset (get-parent-offset~ column-data)))
      (let ((c1 (element (get-hierarchy~ row1-data) component-offset))
            (c2 (element (get-hierarchy~ row2-data) component-offset)))
        (if (and (not c1) (not c2))
            (and parent-offset (merge? row1-data row2-data (element (get-selection-structure~ editor) parent-offset)))
          (eq? c1 c2)))))
  
  
  (method (new-selection-column selection-data)
    (let* ((common-class (apply classes-common-ancestor (map resolve-runtime-reference (get-class-references~ selection-data))))
           (title (get-class-presentation~ common-class)))
      (let ((column (new Grid-Tree-Column title: title width: Default-Selection-Width)))
        (add-child~ column selection-data)
        column)))
  
  
   (method (new-class-column component-name component-offset parent-offset)
    (let ((column (new Grid-Tree-Column title: "Class" width: Default-Class-Width)))
      (add-child~ column (new Component-Provider-Data name: 'provider-data component-name: component-name identifier: 'class-info component-offset: component-offset parent-offset: parent-offset))
      column))
  
  
  (method (new-property-column component-name component-offset parent-offset identifier title (read-only? #f))
    (let ((column (new Grid-Tree-Column title: title width: Default-Property-Width)))
      (add-child~ column (new Component-Provider-Data name: 'provider-data component-name: component-name identifier: identifier component-offset: component-offset parent-offset: parent-offset read-only?: read-only?))
      column))
  
  
  (method (new-sub-property-column component-name component-offset parent-offset identifier sub-identifier title (read-only? #f))
    (let ((column (new Grid-Tree-Column title: title width: Default-Property-Width)))
      (add-child~ column (new Component-Provider-Sub-Property-Data name: 'provider-data component-name: component-name identifier: identifier sub-identifier: sub-identifier component-offset: component-offset parent-offset: parent-offset read-only?: read-only?))
      column))
  
  
  (method (generate-components-lists)
    (define (make-child-lists child rest)
      (if (null? rest)
          (list (list child))
        (map (lambda (row-data) (cons child row-data)) rest)))
    
    (define (make-rows-components-lists component selection-datas)
      (if (null? selection-datas)
          '()
        (let* ((column-data (car selection-datas))
               (name (get-component-name~ column-data)))
          (if name
              (make-child-lists (find-child~ component name)
                                (make-rows-components-lists component (cdr selection-datas)))
            (let ((addable-children (collect-if (lambda (class) (addable-class?~ component class))
                                                (get-components~ component)
                                                key: class-of)))
              (if (null? addable-children)
                  (list (make-list (length selection-datas) #f))
                (append-map (lambda (child)
                              (make-child-lists child (make-rows-components-lists child (cdr selection-datas))))
                            addable-children)))))))
    
    (set! components-lists (make-rows-components-lists client (get-selection-structure~ editor))))
  
  
  (method override (make-columns)
    (define (make-property-columns component-name classes component-offset parent-offset)
      (append-map (lambda (x)
                    (bind (identifier presentation domain) x
                      (let ((multi-domains (get-multi-domains~ domain client)))
                        (if multi-domains
                            (map (lambda (lst)
                                   (bind (sub-identifier title domain) lst
                                     (let ((title (and title (localize title))))
                                       (new-sub-property-column component-name component-offset parent-offset identifier sub-identifier (format "{a}{? {a}~}" presentation title)))))
                                 multi-domains)
                          (list (new-property-column component-name component-offset parent-offset identifier presentation))))))
                  (classes-properties/presentations/domains classes)))
    
    (define (make-component-columns component-name component-offset parent-offset classes)
      (let ((name-column (and (not component-name) (new-property-column component-name component-offset parent-offset 'name-info "Name" #t)))
            (class-column (new-class-column component-name component-offset parent-offset))
            (property-columns (make-property-columns component-name classes component-offset parent-offset)))
        (append (if name-column (list name-column) '())
                (if class-column (list class-column) '())
                property-columns)))
    
    (generate-components-lists)
    (append-map (lambda (selection-data components)
                  (let ((component-name (get-component-name~ selection-data))
                        (component-offset (get-component-offset~ selection-data))
                        (parent-offset (get-parent-offset~ selection-data))
                        (classes (remove-duplicates (map class-of (remove-false components)))))
                    (cons (new-selection-column selection-data)
                          (if (null? classes)
                              '()
                            (make-component-columns component-name component-offset parent-offset classes)))))
                (get-selection-structure~ editor)
                (if (null? components-lists)
                    (map list (get-selection-structure~ editor))
                  (apply zip components-lists))))
  
  
  (method override (client-rows-datas)
    (map (lambda (components)
           (new Component-Row-Data hierarchy: components violations: (make-list (length (get-columns~ (get-grid))) #f)))
         components-lists)))


(class Grid-Tree-Editor extends Grid-Tree-Widget
  
  
  (slot editor   initialize #f)
  (slot designer initialize #f)
  (slot client   initialize #f)
  (slot selection-structure accessors generate)
  
  
  (form
    (<install>
      (<grid~>
        (<Component-Provider>   name: provider)
        (<Component-Controller> name: controller))))
  
  
  (method override (destroy)
    (set-designer #f)
    (set-editor #f)
    (nextmethod))
  
  
  ;;;
  ;;;; Grid
  ;;;
  
  
  (method (get-grid)
    (locate 'grid))
  
  
  (method (get-provider)
    (locate 'provider))
  
  
  (method (get-controller)
    (locate 'controller))
  
  
  ;;;
  ;;;; Host
  ;;;
  
  ;;; Mettre ce qu'il faut pour gerer les docked. Voir Descendants-Editor
  
  
  ;;;
  ;;;; Client
  ;;;
  
  
  (method public (get-client)
    client)
  
  
  (method public (set-client clt)
    (when (neq? clt client)
      (set! client clt)
      (client-update)))
  
  
  ;;;
  ;;;; Update
  ;;;
  
  
  (method (update-provider)
    (set-client~ (get-provider) client)
    (set-designer~ (get-provider) designer)
    (set-editor~ (get-provider) self))
  
  
  (method (update-controller)
    (set-client~ (get-controller) client)
    (set-designer~ (get-controller) designer)
    (set-editor~ (get-controller) self))
  
  
  (method (client-update)
    (end-edition~ (get-grid))
    (update-controller)
    (update-provider)
    (update))
  
  
  (method (update)
    (with-update-locked~ (get-grid)
      (lambda ()
        (setup-structure)
        (populate~ (get-grid)))))
  
  
  (method (new-selection-data component-name component-offset parent-offset class-references)
    (new Component-Provider-Selection-Data name: 'provider-data component-name: component-name component-offset: component-offset parent-offset: parent-offset class-references: class-references))
  
  
  (method (make-selection-structure)
    (define (make-children-selection-datas addable-references parent-offset)
      (let* ((addable-ancestor (apply classes-common-ancestor (map resolve-runtime-reference addable-references)))
             (ancestor-descriptor (get-descriptor addable-ancestor))
             (children-descriptor (find-child~ ancestor-descriptor 'children))
             (child-descriptors (get-children~ children-descriptor)))
        (append (map (lambda (component-name component-offset class-references)
                       (new-selection-data component-name component-offset parent-offset (map get-runtime-reference~ class-references)))
                     (map get-target~ child-descriptors)
                     (iota (length child-descriptors) (+ parent-offset 1))
                     (map get-classes~ child-descriptors))
                (let ((ancestor-addable-references (and (get-addable?~ children-descriptor)
                                                        (component-get-addable-classes~ (get-descriptor addable-ancestor) #f))))
                  (if (and ancestor-addable-references (not-null? ancestor-addable-references))
                      (make-all-selection-datas ancestor-addable-references (+ parent-offset 1 (length child-descriptors)) parent-offset)
                    '())))))
    
    (define (make-all-selection-datas addable-references component-offset parent-offset)
      (let ((class-references (remove-duplicates addable-references key: resolve-runtime-reference)))
        (cons (new-selection-data #f component-offset parent-offset class-references)
              (make-children-selection-datas addable-references component-offset))))
    
    (make-all-selection-datas (component-addable-classes client) 0 #f))
  
  
  (method (setup-structure)
    (set! selection-structure (if (and client (not-null? (component-addable-classes client)))
                                  (make-selection-structure)
                                '())))
  
  
  ;;;
  ;;;; Designer
  ;;;
  
  
  (method (set-designer dsg)
    (when (neq? dsg designer)
      (when designer
        (remove-designer-listener~ designer self))
      (set! designer dsg)
      (when designer
        (let ((listener (new Event-Handler target: self method-name: 'on-designer)))
          (add-designer-listener~ designer listener))
        (update-controller)
        (update-provider))))
  
  
  (method (on-designer evt)
    (case (get-kind~ evt)
      ((:name-change)     (name-change~     (get-controller) (get-property~ evt component:) (get-property~ evt name:) (get-property~ evt old-name:)))
      ((:child-add)       (child-add~       (get-controller) (get-property~ evt child:) (get-property~ evt parent:)))
      ((:child-remove)    (child-remove~    (get-controller) (get-property~ evt child:) (get-property~ evt parent:)))
      ((:property-change) (property-change~ (get-controller) (get-property~ evt component:) (get-property~ evt property:)))))
  
  
  ;;;
  ;;;; Editor
  ;;;
  
  
  (method public (get-editor)
    editor)
  
  
  (method public (set-editor edt)
    (when (neq? edt editor)
      (when editor
        (remove-editor-listener~ editor self))
      (set! editor edt)
      (when editor
        (add-editor-listener~ editor (new Event-Handler target: self method-name: 'on-editor)))))
  
  
  (method (on-editor evt)
    (case (get-kind~ evt)
      ((:client-change) (set-client (get-property~ evt client:)))
      ((:designer-change) (set-designer (get-property~ evt designer:)))
      ((:selection-changed)
       (selection-changed (get-selection~ evt) (get-origin~ evt)))
      ((:saving) (end-edition~ (get-grid)))))
  
  
  (method (determine-client components)
    (define (get-addable? component)
      (let* ((descriptor (get-descriptor (class-of component)))
             (structure (find-child~ descriptor 'children)))
        (get-addable?~ structure)))
    
    (let ((editor-client (get-client~ editor)))
      (let (loop (ancestor (common-ancestor components)))
        (cond ((or (eq? ancestor editor-client)
                   (not ancestor))
               editor-client)
              ((and (not (get-addable? ancestor))
                    (not-null? (component-addable-classes ancestor)))
               ancestor)
              (else
               (loop (get-parent~ ancestor)))))))
  
  
  (method (get-selection)
    (get-selection~ editor))
  
  
  (method (set-selection components)
    (set-selection~ editor components origin: self force?: #t focus?: #f))
  
  
  (method (update-selection)
    (selection-changed (get-selection~ editor) self))
  
  
  (method (selection-changed selection origin)
    (let ((grid (get-grid)))
      (define (component->cell component)
        (let* ((row (user-data-row~ grid component test: (lambda (target val) (memq? target (get-hierarchy~ val)))))
               ;; This does not work if the selection columns are reordered
               (column (and row (element (get-selection-columns grid) (find (get-hierarchy~ (get-user-data~ row)) component)))))
          (and row (new Cell (row->line~ grid row) (column->col~ grid column)))))
      
      (unless (eq? self origin)
        (let ((client (determine-client selection)))
          (unless (eq? client (get-client))
            (set-client client))))
      (let ((cells (collect component->cell selection)))
        (unless (nu=? cells (get-selection~ grid))
          (set-selection~ grid cells))))))


(class Grid-Component-Editor extends Component-Editor
  
  
  (form
    (<install>                          layout-type: fill
      (<Grid-Tree-Editor> name: grid)))
  
  
  ;;;
  ;;;; Host
  ;;;
  
  
  (method meta override (host-icon)
    {Image-Resource "Doc"})
  
  
  (method meta override (host-size)
    {Dimension 800 600})
  
  
  ;;;
  ;;;; Component
  ;;;
  
  
  (method override (install rest)
    (nextmethod rest)
    (set-editor~ (locate 'grid) self)
    (set-designer~ (locate 'grid) designer))))