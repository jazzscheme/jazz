;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Color Row
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.designer.ui.row.Color-Row jazz


(import (jazz.designer)
        (jazz.designer.ui)
        (jazz.markup)
        (jazz.ui))


(class undocumented Color-Row extends Value-Row)


@old
(class undocumented Color-Row extends Value-Row
  
  
  ;;;
  ;;;; Presentation
  ;;;
  
  
  (method override (present color)
    (if (not color)
        "{}"
      (present color)))
  
  
  ;;;
  ;;;; Update
  ;;;
  
  
  (method public (update-color)
    (set-background (locate editor 'color) (get-edited-value)))
  
  
  ;;;
  ;;;; Drawing
  ;;;
  
  
  (method override (draw-data surface context value column row data width height)
    (draw-at column surface context row data 15 0 width height)
    (let* ((outer (new Rect 2 3 13 (- height 3)))
           (inner (inflate-rect outer -1 -1)))
      (frame-rect surface outer {Color Black})
      (if value
          (fill-rect surface inner value)
        (set-color surface {Color Black})
        (set-line-width surface 1)
        (line surface (- (get-right outer) 1) (+ (get-top outer) 1) (+ (get-left outer) 1) (- (get-bottom outer) 1)))))
  
  
  ;;;
  ;;;; Edition
  ;;;
  
  
  (method override (new-editor)
    (new (editor-class)
      value-row: self))
  
  
  (method override (editor-class)
    Color-Row-Editor)
  
  
  (method override (get-edited-value)
    (let ((content (get-string-content (locate editor 'body))))
      (parse-string Color content)))
  
  
  (method override (set-edited-value value)
    (set-string-content (locate editor 'body) (present value))
    (set-background (locate editor 'color) value))
  
  
  (method override (get-edited-modified?)
    (get-modified? (get-document-controller (locate editor 'body))))
  
  
  (method override (set-edited-modified? flag)
    (set-modified? (get-document-controller (locate editor 'body)) flag))
  
  
  (method override (show-cursor)
    (show-text-cursor (locate editor 'body)))
  
  
  (method override (focused-editor)
    (locate editor 'body)))


;;;
;;;; Editor
;;;


(class Color-Row-Editor extends Color-Combo
  
  
  (form
    (<install>
      (<!>     name: color-contour size: {Dimension 14 15} layout-insets: {Rect 1 2 2 2})))
  
  
  (property value-row initialize #f accessors explicit)
  
  
  (method override (form-model self form)
    (case (get-name form)
      ((body) Color-Value-Text-View)
      (else (nextmethod self form))))
  
  
  (method public (get-value-row self)
    value-row)
  
  
  (method public (set-value-row self value)
    (set! value-row value)
    (set-value-row (locate self 'body) value-row))
  
  
  (method override (content-change self origin)
    (case origin
      ((return) (editor-return value-row))
      ((popup) (enter-edited-value value-row)))
    (nextmethod self origin)))


;;;
;;;; Color-Value-Text-View
;;;


(class Color-Value-Text-View extends Color-Text-View
  
  
  (property value-row initialize #f accessors generate)
  
  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method override (up-arrow-move self extend? scroll?)
    (editor-up-arrow value-row))
  
  
  (method override (down-arrow-move self extend? scroll?)
    (editor-down-arrow value-row))
  
  
  (method (document-menu self)
    #f)
  
  
  ;;;
  ;;;; Focus
  ;;;
  
  
  (method override (focus-lose self)
    (nextmethod self)
    (editor-focus-lose value-row))
  
  
  (method override (focus-master self)
    (get-tree value-row))))
