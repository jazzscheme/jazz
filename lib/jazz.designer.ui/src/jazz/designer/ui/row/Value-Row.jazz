;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Value Row
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.designer.ui.row.Value-Row jazz


(import (jazz.designer)
        (jazz.designer.ui)
        (jazz.domain)
        (jazz.graphic)
        (jazz.handler)
        (jazz.markup)
        (jazz.outline)
        (jazz.platform)
        (jazz.text)
        (jazz.tree)
        (jazz.ui)
        (jazz.view))


(class undocumented Value-Row extends Tree-Row


  (property domain    initialize #f accessors generate)
  (property property_ initialize #f getter get-property setter set-property)
  (property value     initialize #f accessors generate)
  (property violation initialize #f accessors generate)

  
  (slot editor    initialize #f getter generate)
  (slot modified? initialize #f accessors generate)


  ;;;
  ;;;; Initialization
  ;;;


  (method override (initialize self . rest)
    (bind-keywords ((property #f) (value #f) (domain #f) . others) rest
      (apply nextmethod self others)
      (set! self.property_ property)
      (set! self.value value)
      (set! self.domain domain)))
  
  
  ;;;
  ;;;; Access
  ;;;


  (method public (get-property self)
    property_)


  (method public (set-property self prop)
    (set! property_ prop))
  
  
  (method public (get-title self)
    (let ((node (car children)))
      (get-title node)))
  
  
  (method public (set-title self title)
    (let ((node (car children)))
      (set-title node title)))


  (method public (get-client self)
    (get-client (get-tree self)))
  
  
  ;;;
  ;;;; Value
  ;;;
  
  
  (method public (enter-value self v (imports: imports #f))
    (set! value v)
    (set-modified? self #t)
    (if (not property_)
        (update self value)
      (enter-value (get-card (get-tree self)) property_ value imports: imports)))
  
  
  (method public (enter-edited-value self)
    (enter-value self (get-edited-value self) imports: (get-edited-imports self)))
  
  
  (method public (default-value self)
    #f)
  
  
  ;;;
  ;;;; Presentation
  ;;;
  
  
  (method public (present self value)
    (present domain value))
  
  
  (method package (get-entry self)
    (first-child editor))
  
  
  ;;;
  ;;;; Edition
  ;;;
  
  
  (method public (editable? self)
    (or (not property_)
        (property-setter property_)))
  
  
  (method public (get-edited-value self)
    (get-value (get-entry self)))
  
  
  (method public (set-edited-value self value)
    (if violation
        (set-edited-violation self)
      (set-value (get-entry self) value)))
  
  
  (method public (get-edited-modified? self)
    (get-modified? (get-entry self)))
  
  
  (method public (set-edited-modified? self flag)
    (set-modified? (get-entry self) flag))
  
  
  (method public (start-edition self (focus?: focus? #t))
    (when (not (in-edition? self))
      (edit self focus?: focus?)))
  
  
  (method public (finish-edition self)
    (when (in-edition? self)
      (close-editor self)))
  
  
  (method public (close-editor self)
    (save-edition self)
    (end-edition (get-tree self)))
  
  
  (method public (save-edition self)
    (when (get-edited-modified? self)
      (let ((entry (get-entry self)))
        (let ((violation (presentation-violation entry))
              (string (get-presentation entry))
              (label (get-preserved-data (get-cell-editor (get-parent self)))))
          (set! self.violation (and violation (cons string violation)))
          (set-frame-color label (and violation {Color Red}))
          (if violation
              (set-title label string)
            (enter-edited-value self))
          (set-edited-modified? self #f)
          (invalidate-cell (get-parent self) (new Cell (row->line parent self) 1))))))
  
  
  (method public (in-edition? self)
    (and editor (in-edition? (get-tree self))))
  
  
  (method public (get-edited-imports self)
    (get-imports (get-entry self)))
  
  
  (method (set-edited-violation self)
    (set-presentation (get-entry self) (car violation)))
  
  
  ;;;
  ;;;; Editor
  ;;;
  
  
  (method public (editor-up-arrow self)
    (up-arrow-press (get-tree self) NoModifiers))
  
  
  (method public (editor-down-arrow self)
    (down-arrow-press (get-tree self) NoModifiers))
  
  
  (method public (editor-tab self)
    (let ((modifiers NoModifiers))
      (if (shift-down?)
          (up-arrow-press (get-tree self) modifiers)
        (down-arrow-press (get-tree self) modifiers))))
  
  
  (method public (editor-return self)
    (with-cursor :wait
      (lambda ()
        (set-edited-modified? self #t)
        (save-edition self))
      duration: .150))
  
  
  (method public (editor-focus-delegate self)
    (start-edition self)
    (focus-editor self select-all?: #f)
    (invalidate-drawing self))
  
  
  (method public (editor-focus-lose self)
    (unless (window-losing-focus?)
      (when (get-player self)
        (finish-edition self)
        (invalidate-drawing self))))
  
  
  ;;;
  ;;;; Edit
  ;;;
  
  
  (method public (edit self (focus?: focus? #t))
    (let* ((tree (get-tree self))
           (cell (new Cell (row->line tree self) 1))
           (border (new Border-View border-type: 'solid border-color: {Color Dark-Red}))
           (scroller (new Scroller-View parent: border vscroll?: #f hscroll?: #f))
           (content (get-content scroller)))
      (set-layout-type content 'fill)
      (set! editor (new-editor self))
      (set-parent editor content)
      (set-edited-value self value)
      (edit-cell tree cell editor: border after-end: (lambda (site) (set! editor #f)))
      (when focus?
        (focus-editor self))
      (set-client scroller editor)))
  
  
  (method protected (new-editor self)
    (let ((editor (new Value-Editor)))
      (setup-entry domain editor (get-client self))
      editor))
  
  
  (method protected (editor-class self)
    )
  
  
  (method public (focus-editor self (start: start #f) (end: end #f) (select-all?: select-all? #t))
    (let* ((entry (get-entry self))
           (view (tab-view entry)))
      (when view
        (set-escape-press-handler view (new Event-Handler target: self method-name: 'on-editor-escape))
        (set-arrow-press-handler view (new Event-Handler target: self method-name: 'on-editor-arrow))
        (set-tab-press-handler view (new Event-Handler target: self method-name: 'on-editor-tab))
        (set-return-press-handler view (new Event-Handler target: self method-name: 'on-editor-return))
        (set-focus-lose-handler view (new Event-Handler target: self method-name: 'on-focus-lose))
        (when (is? (get-entry self) Enumeration-Entry)
          (set-action-handler (locate entry 'combo) (new Event-Handler target: self method-name: 'on-editor-action)))
        (acquire-focus view)
        (select-all view))))
  
  
  (method (on-editor-tab self evt)
    (editor-tab self))
  
  
  (method (on-editor-return self evt)
    (editor-return self))
  
  
  (method (on-editor-arrow self evt)
    (let ((direction (get-property evt direction:))
          (view (tab-view (get-entry self))))
      (case direction
        ((up) (editor-up-arrow self))
        ((down) (editor-down-arrow self))
        (else
         (typecase view
           ((Text-View) (arrow-move view evt))
           (else (arrow-press view evt)))))))
  
  
  (method (on-editor-escape self evt)
    (end-edition (get-tree self)))
  
  
  (method (on-focus-lose self evt)
    (editor-focus-lose self))
  
  
  (method (on-editor-action self evt)
    (let ((combo (locate (get-entry self) 'combo)))
      (on-action combo evt)
      (editor-return self)))

  
  ;;;
  ;;;; Update
  ;;;
  
  
  (definition Modified-Color
    {Color Dark-Red})
  
  
  (method public (update self value)
    (let* ((tree (get-tree self))
           (title (present self value))
           (line (row->line tree self))
           (cell (new Cell line 1))
           (edited? (in-edition? self))
           (data (if edited?
                     (get-preserved-data (get-cell-editor tree))
                   (get-cell-data tree cell))))
      (set-value self value)
      (set-property-modified? self #t)
      (set-color data #f)
      (set-title data title)
      (if edited?
          (set-edited-modified? self #t)
        (invalidate-cell tree cell))))
  
  
  (method package (set-property-modified? self flag)
    (when property_
      (let* ((tree (get-tree self))
             (line (row->line tree self))
             (cell (new Cell line 0))
             (node (get-cell-data tree cell))
             (color (if flag Modified-Color #f)))
        (set-color node color)
        (invalidate-cell tree cell))))
  
  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method override (double-click self pos)
    (if (is? domain Boolean-Domain)
        (begin
          (enter-edited-value self)
          (set-edited-value self (not value))
          (enter-edited-value self)
          (focus-editor self))
      (nextmethod self pos)))

  
  (method public (show-property self)
    (let* ((client (get-client self))
           (surrogate (get-surrogate client)))
      (if (not surrogate)
          (bell)
        (let ((editor (get-editor surrogate)))
          (if (is-not? editor View-Editor)
              (bell)
            (set-showed-property editor (field-name property_)))))))
  
  
  (method public (revert-property self)
    (set-edited-value self value)
    (set-edited-modified? self #f)
    (set-property-modified? self #f)
    (set-modified? self #f)
    (focus-editor self))
  
  
  ;;;
  ;;;; Drawing
  ;;;
  
  
  (method package (draw-data self surface context value column row data width height)
    (draw-data domain surface context value column row data width height)))


;;;
;;;; Value-Editor
;;;


(class Value-Editor extends Layout-View
  
  
  (form
    (<install> layout-type: fill))))
