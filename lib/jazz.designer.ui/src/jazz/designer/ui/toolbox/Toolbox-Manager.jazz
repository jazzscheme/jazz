;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Toolbox Manager
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.designer.ui.toolbox.Toolbox-Manager jazz


(import (jazz.designer)
        (jazz.designer.ui)
        (jazz.designer.ui.view)
        (jazz.io)
        (jazz.jml)
        (jazz.library)
        (jazz.library.component)
        (jazz.system)
        (jazz.system.process)
        (jazz.ui)
        (jazz.ui.view))


;;;
;;;; Read
;;;


(definition (read-toolbox toolbox)
  (define (load-toolbox file)
    (if (exists?~ file)
        (instantiate~ (read-form file))
      (new Toolbox)))
  
  (with-safe-execution "loading the toolbox"
    (lambda ()
      (let ((appl (get-application)))
        (let ((toolbox (load-toolbox (toolbox-file~ appl toolbox))))
          (install-context~ appl toolbox)
          toolbox)))
    continue-handler:
    (lambda (err)
      )))


;;;
;;;; Toolbox
;;;


(class undocumented Toolbox-Manager extends Component-Editor implements Exit-Listener
  
  
  (property toolbox initialize #f accessors explicit)
  
  
  (form
    (<install>                             layout-type: border
      (<Layout-View>     name: tools
        (<Push-Tool>     name: synchronize size: {Dimension 22 22} location: tail tooltip?: #t tooltip-text: "Synchronize" resource: {Image-Resource "Refresh"} portfolio: :images action-handler: {Event-Handler :guest on-synchronize}))
      (<Toolbox-Editor>  name: descendants location: center
        (<!>             name: border
          (<!>           name: scroller    style: tool
            (<!>         name: content
              (<!>       name: header
                (<!>     name: content
                  (<!>   name: tree        highlight-edited?: #f auto-expand/collapse?: #t double-click-handler: {Event-Handler :self on-double-click}
                    (<!> name: descendant  title: "Model" width: 291))))))))))
  
  
  (method override (finish rest)
    (nextmethod rest)
    (set-application-select?~ (locate '(descendants tree)) application-select?)
    (catch (Cancel-Signal signal
             #f)
      (on-synchronize #f)))
  
  
  (method meta override (external-name . rest)
    'toolbox-manager)
  
  
  ;;;
  ;;;; Aliases
  ;;;
  
  
  (method override (component-alias name)
    (case name
      ((tree) (get-tree))
      (else (nextmethod name))))
  
  
  ;;;
  ;;;; Host
  ;;;
  
  
  (method meta override (host-icon)
    {Image-Resource "Toolbox"})
  
  
  (method meta override (host-title)
    "Toolbox")
  
  
  ;;;
  ;;;; Docked
  ;;;
  
  
  (method override (get-tools-view)
    (locate 'tools))
  
  
  (method override (focus-default)
    (let ((tree (locate '(descendants tree))))
      (acquire-focus~ tree)))
  
  
  ;;;
  ;;;; Controller
  ;;;
  
  
  (method override (new-document-controller)
    (new Toolbox-Manager-Controller self))
  
  
  ;;;
  ;;;; Toolbox
  ;;;
  
  
  (method public (get-toolbox)
    toolbox)
  
  
  (method public (set-toolbox tlb)
    (set! toolbox tlb)
    (when toolbox
      (if (is? toolbox Toolbox)
          (set-client toolbox)
        (set-client (read-toolbox toolbox)))))
  
  
  ;;;
  ;;;; Component
  ;;;
  
  
  (method override (install rest)
    (nextmethod rest)
    (set-shown?~ (locate-component '(descendants header)) #f)
    (set-editor~ (locate 'descendants) self)
    (add-exit-listener~ (get-application) self))
  
  
  (method override (prepare-exit)
    (when (and designer (file? (get-origin~ (get-form~ designer))))
      (save~ designer)))
  
  
  ;;;
  ;;;; Tree
  ;;;
  
  
  (method (get-tree)
    (locate '(descendants tree)))
  
  
  ;;;
  ;;;; Document
  ;;;
  
  
  (method (document-status)
    "Toolbox")
  
  
  ;;;
  ;;;; Modules
  ;;;
  
  
  (method public (get-module-names)
    (map get-module-name~ (get-toolbox-modules)))
  
  
  (method public (get-toolbox-modules)
    (collect-descendants~ (get-client) Toolbox-Module))
  
  
  (method public (get-toolbox-models)
    (collect-descendants~ (get-client) Toolbox-Model))
  
  
  (method public (get-addable-models-refs component)
    (let ((tools (collect-if (lambda (tool)
                               (let ((class (get-class~ tool)))
                                 (and (class? class) (addable-class?~ component class))))
                             (get-toolbox-models))))
      (map get-reference~ tools)))
  
  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method (on-synchronize evt)
    (let ((tree (get-tree)))
      (with-cursor :wait
        (lambda ()
          (with-preserved-selection~ tree
            (lambda ()
              (with-preserved-expand-state~ tree
                (lambda ()
                  (with-safe-design
                    (lambda ()
                      (with-update-locked
                        (lambda ()
                          (with-design-locked client
                            (lambda ()
                              (for-each (lambda (module)
                                          (for-each (~ remove-child designer) (get-children~ module))
                                          (add-module-elements~ module (lambda (class properties)
                                                                         (install-new-component~ tree designer (new class) module #f '() properties descendant?: #t))))
                                        (get-toolbox-modules)))))))))))
            use: 'text
            ensure-expanded?: #t)
          (set-selection (get-selected-data~ tree)))))))


;;;
;;;; Dialog
;;;


(class Dialog-Toolbox-Manager extends Layout-View
  
  
  (property toolbox-title initialize #f accessors generate)
  
  
  (slot toolboxes initialize #f)
  
  
  (form
    (<install>                                          layout-type: border size: {Dimension 500 500}
      (<Border-View>                  name: border      location: center border-type: edge style: entry
        (<Scroller-View>              name: scroller    style: tool hscroll?: #f vscroll?: #t
          (<!>                        name: content     layout-type: fill
            (<Tree-Header>            name: header      style: document shown?: #f
              (<!>                    name: content
                (<Tree-View>          name: tree        portfolio: :images show-header?: #f return-press-handler: {Event-Handler :form on-return-press} escape-press-handler: {Event-Handler :form on-escape-press} double-click-handler: {Event-Handler :form on-double-click}
                  (<Tree-Node-Column> name: descendants)))))))
      (<Layout-View>                  name: south       location: south layout-type: border size: {Dimension 500 36}
        (<Layout-View>                                  location: south size: {Dimension 500 30} layout-type: flow
          (<Push-Button>              name: ok          title: "OK" location: tail size: {Dimension 80 24} action-handler: {Event-Handler :host on-ok} default?: #t position: {Point 9 3})
          (<Separator>                                  location: tail size: {Dimension 3 0} location: tail)
          (<Push-Button>              name: cancel      title: "Cancel" location: tail size: {Dimension 80 24} action-handler: {Event-Handler :host on-cancel} position: {Point 97 3})
          (<Separator>                                  size: {Dimension 5 0} location: tail)))))
  
  
  (method public virtual (filter-model model)
    #t)
  
  
  (method (get-tree)
    (locate 'tree))
  
  
  (method (insert-component row component)
    (let* ((components (get-components~ component))
           (title      (get-presentation-property~ component))
           (image      (get-component-image~ component))
           (state      (if (null? components) 'collapsed 'expanded))
           (subrow     (add-row~ (locate 'tree) father: row state: state children: (list (new Tree-Node title: title image: image)) user-data: component)))
      (for-each (lambda (component) (insert-component subrow component)) components)
      subrow))
  
  
  (method (build-toolbox-element element)
    (let ((children (collect build-toolbox-element (get-children~ element))))
      (and (typecase element
             ((Toolbox-Model) (filter-model element))
             (else (not-null? children)))
           (let ((new-element (copy-object~ element #f)))
             (set-children~ new-element children)
             new-element))))


  (method (build-toolboxes)
    (map (lambda (toolbox)
           (let ((new-toolbox (new Toolbox title: (get-title~ toolbox) icon: (get-icon~ toolbox))))
             (set-children~ new-toolbox (collect build-toolbox-element (get-children~ toolbox)))
             new-toolbox))
         (map get-client~ (get-toolbox-managers))))
  
  
  (method (setup-toolboxes)
    (let ((toolboxes (build-toolboxes)))
      (set! toolboxes~self toolboxes)
      (with-update-locked~ (get-tree)
        (lambda ()
          (remove-every-row~ (get-tree))
          (for-each (lambda (toolbox)
                      (insert-component #f toolbox))
                    toolboxes)))))
  
  
  (method override (finish rest)
    (nextmethod rest)
    (setup-toolboxes))
  
  
  ;;;
  ;;;; Setup
  ;;;
  
  
  (method (select-tool import symbol)
    (let (loop (toolboxes toolboxes))
      (when (not-null? toolboxes)
        (let ((model (find-model~ (car toolboxes) symbol import)))
          (if model
              (select-user-data-row~ (locate 'tree) model)
            (loop (cdr toolboxes)))))))
  
  
  (method virtual public (setup import symbol . rest)
    (select-tool import symbol))
  
  
  ;;;
  ;;;; Events
  ;;;
  
  
  ;; Should really be generic in the Dialog class
  (method override (on-return-press evt)
    (let ((dialog (get-host)))
      (end-modal~ dialog (get-modal-result~ dialog))))
  
  
  ;; Should really be generic in the Dialog class
  (method override (on-escape-press evt)
    (let ((dialog (get-host)))
      (cancel-modal~ dialog)))
  
  
  (method (on-double-click evt)
    (let ((dialog (get-host)))
      (end-modal~ dialog (get-modal-result~ dialog))))
  
  
  ;;;
  ;;;; Result
  ;;;
  
  
  (method (selected-model)
    (let ((obj (get-single-selected-data~ (get-tree))))
      (and (is? obj Toolbox-Model) obj)))
  
  
  (method override (get-modal-result)
    (let ((obj (selected-model)))
      (if obj
          (list (get-model~ obj) (get-unit~ obj))
        (designer-error "Select a valid model"))))
  
  
  ;;;
  ;;;; Descriptor
  ;;;
  
  
  (method meta override (get-class-descriptor (context: context #f))
    (new Dialog-Toolbox-Manager-Descriptor)))


(import (jazz.ui.designer))


(class Class-Dialog-Toolbox extends Dialog-Toolbox-Manager
  
  
  (property references initialize #f accessors generate)
  
  
  (method override (filter-model model)
    (if references
        (let ((classes (map resolve-reference~ references))
              (class (get-class~ model)))
          (and (class? class)
               (member? class classes test: subclass?)))
      (error "No class references in toolbox dialog"))))


;;;
;;;; Controller
;;;


(class Toolbox-Manager-Controller extends Component-Editor-Controller
  
  
  (method override (update-caption)
    )
  
  
  (method override (document-status)
    "Toolbox"))


;;;
;;;; Design
;;;


(class Dialog-Toolbox-Manager-Descriptor extends Layout-View-Descriptor
  
  (form
    (<install>
      (<properties~>
        (<Property-Descriptor> name: toolbox-title
          (<Localized-Domain> name: domain)))))))
