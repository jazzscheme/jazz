;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Traits Tree
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.designer.ui.trait.Traits-Tree jazz


(import (jazz.action)
        (jazz.application)
        (jazz.component)
        (jazz.designer.ui)
        (jazz.handler)
        (jazz.jml)
        (jazz.locale)
        (jazz.menu)
        (jazz.resource)
        (jazz.ui)
        (jazz.ui.view))


(class undocumented Traits-Tree extends Tree-View


  (slot editor   initialize #f)
  (slot client   initialize #f)
  (slot designer initialize #f)


  (form
    (<install>                        multiple-selection?: #f portfolio: :images selection-handler: {Event-Handler :form on-selection-change}
      (<Tree-Node-Column> name: trait title: "Trait" width: 157)))

  
  ;;;
  ;;;; Actions
  ;;;
  

  (method override (focus-actions)
    (cons (find-actions 'traits-tree)
          (nextmethod)))
  

  ;;;
  ;;;; Events
  ;;;
  
  
  (method override (context-menu evt)
    (let ((pos (get-position~ evt)))
      (with-context-click pos
        (lambda ()
          (let* ((menu (new Trait-Menu))
                 (item (locate~ menu 'add))
                 (classes (and client (get-addable-traits~ client)))
                 (trait (selected-trait)))
            (when trait
              (with-update-locked~ menu
                (lambda ()
                  (when (null? classes)
                    (set-visible?~ (locate~ menu 'add) #f)
                    (set-visible?~ (locate~ menu 'separator) #f))
                  (when (is-not? trait Trait)
                    (set-visible?~ (locate~ menu 'separator) #f)
                    (set-visible?~ (locate~ menu 'close) #f)
                    (set-visible?~ (locate~ menu 'rename) #f))))
              (if (eqv? classes #t)
                  (let ((default (get-addable-default-trait~ client)))
                    (set-title~ item (format "Add {a}..." (get-class-presentation~ default))))
                (set-title~ item "Add")
                (let ((submenu (new Context-Menu parent: item)))
                  (with-update-locked~ submenu
                    (lambda ()
                      (for-each (lambda (class)
                                  (if (not class)
                                      (new Separator-Item parent: submenu)
                                    (let ((icon (get-class-image~ class))
                                          (title (format "{a}..." (get-class-presentation~ class)))
                                          (handler (new Event-Handler target: self method-name: 'on-add-trait properties: (list class: class))))
                                      (new Label-Item parent: submenu icon: icon title: title action-handler: handler))))
                                classes)))))
              (layout-menu~ menu)
              (track-popup-menu menu pos)))))))
  
  
  (method (on-add-trait evt)
    (let ((class (or (get-property~ evt class:) (get-addable-default-trait~ client)))
          (parent (selected-trait)))
      (add-trait class parent)))
  
  
  (method public (new-default-trait)
    (when client
      (let* ((class (get-addable-default-trait~ client))
             (add-here? (get-addable-traits~ client))
             (parent (or (when add-here? (selected-trait))
                         client)))
        (add-trait class parent))))
  
  
  (method public (add-trait class parent)
    (let ((presentation (trait-presentation-request class (child-traits~ parent)))
          (trait (new class parent: parent))
          (designer (get-designer~ editor)))
      (add-child~ designer trait parent trait: #f)
      (set-property~ designer trait client-form: (new Form textual?: #f action: 'install context: (get-form~ designer)) trait: #f)
      ;; Problem: at that point this update causes some node titles to be #f
      ;; because the trait doesn't yet have a name...
      (update-tree)
      (set-single-selection (trait-index trait))
      (rename-trait trait presentation)))
  
  
  (method protected virtual (trait-presentation-request class brothers (initial-value: initial-value #f))
    (let* ((name-mandatory? (get-name-mandatory?~ class))
           (name-unicity? (get-name-unicity?~ class))
           (unicity-domain (and name-unicity? (map get-presentation-property~ brothers)))
           (name-validator (trait-name-validator))
           (presentation (request-string title: (format "Enter {a} Name" (get-class-presentation~ class)) initial-value: initial-value accepts-empty?: (not name-mandatory?) unicity-domain: unicity-domain validator: name-validator)))
      presentation))
  
  
  (method protected virtual (trait-name-validator)
    #f)
  
  
  (method (on-close-trait evt)
    (delete-selection))
  
  
  (method override (delete-selection)
    (let ((trait (selected-trait)))
      (if (is-not? trait Trait)
          (bell)
        (when (confirm-close)
          (with-deleted-selection selection
            (lambda ()
              (remove-trait trait))
              can-survive?: #t)))))
  
  
  (method override (confirm-close)
    (confirm-action "Delete selected trait?"))
  
  
  (method protected (confirm-action text)
    (let ((code (message-box (localize text) type: 'confirmation)))
      (case code
        ((yes) #t)
        ((no) #f)
        ((cancel) (signal-cancel)))))
  
  
  (method protected virtual (remove-trait trait)
    (let ((designer (get-designer~ editor)))
      (select-trait #f)
      (remove-child~ designer trait)
      (update-tree)))
  
  
  (method (on-rename-trait evt)
    (rename-selected-trait))
  
  
  (method (rename-selected-trait)
    (let* ((trait (selected-trait))
           (presentation (trait-presentation-request (class-of trait) (get-brothers~ trait) initial-value: (get-presentation-property~ trait))))
      (rename-trait trait presentation)))
  
  
  (method (rename-trait trait presentation)
    (let ((designer (get-designer~ editor)))
      (set-presentation-property~ trait designer presentation)
      (update-tree)
      (set-single-selection (trait-index trait))))
  
  
  (method (on-trait-properties evt)
    (show-properties select-palette?: #t))
  
  
  (method (show-properties (select-palette?: select-palette? #f))
    (let ((trait (selected-trait)))
      (set-selection~ editor (if trait (list trait) '()) origin: self force?: #t focus?: #f)
      (when select-palette?
        (select-docked Properties-Manager workspace: #f focus?: #t))))
  
  
  (method (maybe-show-properties)
    (when editor
      (let ((trait (selected-trait))
            (selection (get-selection~ editor)))
        (when (or (null? selection)
                  (and (= (length selection) 1)
                       (let ((selection (car selection)))
                         (or (eq? selection (get-client~ editor))
                             (is? selection Trait)))))
          (show-properties)))))
  
  
  ;;;
  ;;;; Editor
  ;;;
  
  
  (method public (get-editor)
    editor)
  
  
  (method public (set-editor edt)
    (when (neq? edt editor)
      (when editor
        (remove-editor-listener~ editor self))
      (set! editor edt)
      (when editor
        (add-editor-listener~ editor (new Event-Handler target: self method-name: 'on-editor)))))
    
  
  (method (on-editor evt)
    (case (get-kind~ evt)
      ((:client-change) (set-client (get-property~ evt client:)))
      ((:designer-change) (set-designer (get-property~ evt designer:)))
      ((:branch-changed) (branch-changed (get-property~ evt trait:)))))
  
  
  (method (branch-changed trait)
    (set-single-selection (trait-index trait)))

  
  ;;;
  ;;;; Designer
  ;;;
  
  
  (method public (get-designer)
    designer)
  
  
  (method public virtual (set-designer dsg)
    (when (neq? dsg designer)
      (when designer
        (uninstall-listener designer))
      (set! designer dsg)
      (when designer
        (install-listener designer))))
  
  
  (method (install-listener designer)
    (let ((listener (new Event-Handler target: self method-name: 'on-designer)))
      (add-designer-listener~ designer listener)))
  
  
  (method (uninstall-listener designer)
    (remove-designer-listener~ designer self))
  
  
  (method (on-designer evt)
    (case (get-kind~ evt)
      ((:presentation-change) (presentation-change (get-property~ evt component:) (get-property~ evt presentation:)))))
  
  
  (method (presentation-change component presentation)
    (when (eq? component client)
      (let ((cell {Cell 0 0}))
        (set-title~ (get-cell-data cell) presentation)
        (invalidate-cell cell))))
  

  ;;;
  ;;;; Client
  ;;;


  (method public (get-client)
    client)


  (method public (set-client clt)
    (when (neq? clt client)
      (set! client clt)
      (update-tree))
    (update-selection))
  

  ;;;
  ;;;; Update
  ;;;
  
  
  (method (update)
    (update-tree)
    (update-selection))


  (method (update-tree)
    (remove-every-row)
    (when client
      (let ((node (insert-client client)))
        (for-each (lambda (trait)
                    (insert-trait node trait))
                  (sort-traits (child-traits~ client))))))
  
  
  (method protected virtual (sort-traits traits)
    traits)
  
  
  (method (update-selection)
    (if (not client)
        (set-selection '() generate-event?: #f)
      (let* ((trait (get-active-trait~ client))
             (index (user-data-index (or trait client))))
        (if (not index)
            (set-selection '() generate-event?: #f)
          (set-single-selection index generate-event?: #f)))))
  
  
  (method (insert-client client)
    (let ((title (get-presentation-property~ client))
          (image (component-image client)))
      (add-row state: 'expanded children: (list (new Tree-Node title: title image: image)) user-data: (and (is? client Trait) client))))
  
  
  (method (insert-trait node trait)
    (let ((children (get-children~ trait))
          (title    (component-presentation trait))
          (image    (component-image trait)))
      (let ((handle (add-row father: node state: 'expanded children: (list (new Tree-Node title: title image: image)) user-data: trait)))
        (for-each (lambda (child)
                    (insert-trait handle child))
                  (sort-traits children)))))
  
  
  (method protected virtual (component-presentation component)
    (get-presentation-property~ component))
  
  
  (method protected virtual (component-image component)
    (get-component-image~ component))
  
  
  ;;;
  ;;;; Edition
  ;;;
  
  
  (method override (can-undo?)
    #f)
  
  
  (method override (can-redo?)
    #f)
  
  
  (method override (can-delete?)
    (let ((trait (selected-trait)))
      (is? trait Trait)))
  
  
  ;;;
  ;;;; Selection
  ;;;
  
  
  (method (on-selection-change evt)
    (select-trait (selected-trait))
    (maybe-show-properties)
    (update-focus-actions~ (get-application)))
  
  
  (method public (selected-trait)
    (let ((selection (get-single-selection)))
      (when selection
        (get-user-data~ (get-row selection)))))
  
  
  (method (select-trait trait)
    (when (neq? trait (get-active-trait~ client))
      (process-branch-changing~ editor trait)))
  
  
  (method (trait-index trait)
    (user-data-index trait)))


;;;
;;;; Trait-Menu
;;;


(class Trait-Menu extends Context-Menu
  
  
  (form
    (<install>
      (<Label-Item>     name: add        title: "Add Trait" icon: {Image-Resource "Add"} action-handler: {Action traits-tree add})
      (<Separator-Item> name: separator)
      (<Label-Item>     name: close      title: "Delete" icon: {Image-Resource "Remove"} action-handler: {Action traits-tree close})
      (<Label-Item>     name: rename     title: "Rename" action-handler: {Action traits-tree rename})
      (<Separator-Item>)
      (<Label-Item>     name: properties title: "Properties" action-handler: {Action traits-tree properties})))))
