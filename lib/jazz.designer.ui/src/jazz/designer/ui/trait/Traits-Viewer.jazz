;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Traits Viewer
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.designer.ui.trait.Traits-Viewer jazz


(import (jazz.handler)
        (jazz.jml)
        (jazz.resource)
        (jazz.ui)
        (jazz.ui.view))


(class undocumented Traits-Viewer extends Layout-View


  (form
    (<install>                              layout-type: fill
      (<Scroller-View>       name: scroller hscroll?: #t vscroll?: #t style: tool
        (<!>                 name: content  layout-type: fill
          (<Tree-Header>     name: header   shown?: #f
            (<!>             name: content
              (<Viewer-Tree> name: tree
                (<!>         name: trait    width: 183))))))))
  
  
  ;;;
  ;;;; Host
  ;;;
  
  
  (method meta override (host-icon)
    {Image-Resource "Traits"})
  

  (method meta override (host-title)
    "Traits")
  
  
  (method override (client-activate)
    (set-client (current-document)))
  
  
  (method override (client-deactivate)
    (set-client #f))
  
  
  ;;;
  ;;;; Docked
  ;;;
  
  
  (method override (focus-default)
    (let ((tree (locate 'tree)))
      (acquire-focus~ tree)
      (auto-select-first~ tree)))
    
  
  ;;;
  ;;;; Hosting
  ;;;
  
  
  (method override (install-in-host host)
    (nextmethod host)
    (set-layout-type~ (get-root~ host) 'fill)
    (set-layout-insets~ (get-root~ host) {Rect 0 2 0 0}))

  
  ;;;
  ;;;; Access
  ;;;
  
  
  (method public (get-tree)
    (locate 'tree))

  
  ;;;
  ;;;; Client
  ;;;
  
  
  (method public (get-client)
    (get-client~ (get-tree)))
  
  
  (method public (set-client client)
    (set-client~ (get-tree) client)))


;;;
;;;; Viewer-Tree
;;;


(class Viewer-Tree extends Tree-View
  
  
  (form
    (<install>                        multiple-selection?: #f portfolio: :images selection-handler: {Event-Handler :self on-selection-change}
      (<Tree-Node-Column> name: trait title: "Trait" width: 157)))
  
  
  (slot client initialize #f)
  
  
  ;;;
  ;;;; Client
  ;;;
  
  
  (method public (get-client)
    client)
  
  
  (method public (set-client clt)
    (when (neq? clt client)
      (set! client clt)
      (update-tree)))
  
  
  (method (update-tree)
    (remove-every-row)
    (when client
      (let ((node (insert-client)))
        (for-each (lambda (trait)
                    (insert-trait node trait))
                  (child-traits~ client)))))
  
  
  (method (insert-client)
    (let ((title (get-presentation-property~ client))
          (image (component-image client)))
      (add-row state: 'expanded children: (list (new Tree-Node title: title image: image)) user-data: client)))
  
  
  (method (insert-trait node trait)
    (let ((children (get-children~ trait))
          (title    (get-presentation-property~ trait))
          (image    (component-image trait)))
      (let ((handle (add-row father: node state: 'expanded children: (list (new Tree-Node title: title image: image)) user-data: trait)))
        (for-each (lambda (child)
                    (insert-trait handle child))
                  children))))
  
  
  (method protected virtual (component-image component)
    (get-component-image~ component))
  
  
  ;;;
  ;;;; Selection
  ;;;
  
  
  (method (on-selection-change evt)
    (select-trait (or (selected-trait) client)))
  
  
  (method public (selected-trait)
    (let ((selection (get-single-selection)))
      (when selection
        (get-user-data~ (get-row selection)))))
  
  
  (method (select-trait trait)
    (when trait
      (set-active-trait~ client trait)))))
