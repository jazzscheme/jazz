;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Trait Grid
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Jeremie Lasalle Ratelle.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module jazz.designer.ui.trait.grid jazz


(import (jazz.component)
        (jazz.descriptor)
        (jazz.designer.ui.grid)
        (jazz.designer.ui.grid.tree)
        (jazz.graphic)
        (jazz.jml))


(class Trait-Row-Data extends Component
  
  
  (property trait initialize #f accessors generate))


(class Traits-Provider-Data extends Provider-Data
  
  
  (property path initialize '() accessors generate)
  (property prop initialize #f accessors generate))


(class Traits-Controller extends Component implements Grid-Controller
  
  (slot client accessors generate)
  (slot traits accessors generate)
  
  (method override (get-focus-actions)
    #f)
  (method override (focus-update-actions))
  (method override (selection-cell? row column)
    #f)
  (method override (get-context-menu)
    #f)
  (method override (on-selection-change evt))
  (method override (get-tab-stops)
    #f)
  (method override (copy-selection))
  (method override (cut-selection))
  (method override (delete-selection))
  (method override (paste-clipboard))
  (method override (can-copy?) #f)
  (method override (can-cut?) #f)
  (method override (can-delete?) #f)
  (method override (can-paste?) #f)
  (method override (get-draggable?) #f)
  (method override (get-frame-color)
    #f)
  (method override (active-background row-data column-data)
    {Color Tree-Background})
  (method override (inactive-background row-data column-data)
    {Color Gray})
  
  (method override (cell-editable? row column) #f)
  (method override (merge? master-row-data row-data column-data) #f)
  
  (method override (client-rows-datas)
    (map (lambda (trait)
           (new Trait-Row-Data trait: (resolve-trait #f trait)))
         traits)))


(class Traits-Provider extends Component implements Data-Provider
  
  
  (slot client accessors generate)
  
  
  (method (get-grid)
    (get-parent))
  
  
  (method override (read-only? row-data column-data)
    #t)
  
  
  (method override (get-violation row-data column-data)
    #f)
  
  
  (method override (get-domain row-data column-data)
    (let* ((component (find-path~ client (get-path~ column-data)))
           (field (and component (category-field (class-of component) (get-prop~ column-data)))))
      (and field (property-domain~ component field))))
  
  
  (method override (get-data row-data column-data fail succeed)
    (let ((form (find-path~ (get-client-form~ (get-trait~ row-data)) (get-path~ column-data)))
          (not-found (list 'not-found)))
      (let ((value (if form (get-property~ form (get-prop~ column-data) not-found) not-found)))
        (if (eq? value not-found)
            (fail)
          (succeed value))))))


(class Grid-Traits-Editor extends Grid-Tree-Widget
  
  
  (slot client   initialize #f)
  (slot traits   initialize #f)
  
  
  (form
    (<install>
      (<grid~>
        (<Traits-Provider> name: provider)
        (<Traits-Controller> name: controller))))
  
  (method (get-grid)
    (locate 'grid))
  
  
  (method (get-provider)
    (locate 'provider))
  
  
  (method (get-controller)
    (locate 'controller))
  
  
  (definition Default-Property-Width 100)
  
  
  (method public (setup client traits)
    (set! traits~self traits)
    (set-client client))
  
  
  (method public (set-client clt)
    (when (neq? clt client)
      (set! client clt)
      (client-update)))
  
  
  (method (client-update)
    (end-edition~ (get-grid))
    (update-controller)
    (update-provider)
    (update))
  
  
  (method (update-provider)
    (set-client~ (get-provider) client))
  
  
  (method (update-controller)
    (set-client~ (get-controller) client)
    (set-traits~ (get-controller) traits))
  
  
  (method (update)
    (with-update-locked~ (get-grid)
      (lambda ()
        (setup-columns)
        (populate~ (get-grid)))))
  
  (method (add-column path prop presentation)
    (let ((column (add-column~ (get-grid) class: Grid-Tree-Column title: presentation width: Default-Property-Width)))
      (add-child~ column (new Traits-Provider-Data name: 'provider-data path: path prop: prop))))
  
  
  (method (setup-child-columns parent child-descriptor)
    (let* ((path (list (get-target~ child-descriptor)))
           (subcomponent (find-path~ parent path))
           (class (class-of subcomponent)))
      (for-each (lambda (x)
                  (bind (name presentation domain) x
                    (add-column path name presentation)))
                (classes-properties/presentations/domains (list class)))))
  
  
  (method (setup-client-columns)
    (let ((client-class (class-of client)))
      (let ((client-properties/presentation/domains (classes-properties/presentations/domains (list client-class)))
            (child-descriptors (get-children~ (find-child~ (get-descriptor client-class) 'children))))
        (for-each (lambda (name presentation) (add-column '() name presentation)) (map car client-properties/presentation/domains) (map cadr client-properties/presentation/domains))
        (for-each (lambda (desc) (setup-child-columns client desc)) child-descriptors))))
        
  
  (method (setup-columns)
    (remove-columns~ (get-grid))
    (when client
      (setup-client-columns))))
)
