;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Dispatch Designer
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.designer.Dispatch-Designer jazz


(import (jazz.designer))


(class undocumented Dispatch-Designer extends Designer)


@convert


(class undocumented Dispatch-Designer extends Designer
  
  
  (slot designers initialize '())

  
  ;;;
  ;;;; Initialization
  ;;;
  
  
  (method (initialize . rest)
    (apply nextmethod rest)
    (install-designers))

  
  ;;;
  ;;;; Designers
  ;;;
  
  
  (method (install-designers)
    (for-each-descendant reference
      (lambda (descendant level)
        (when (install-designer? descendant)
          (install-designer descendant)))))
  
  
  (method public virtual (install-designer? component)
    #f)
  
  
  (method public virtual (get-designer-class)
    Designer)
  
  
  (method (install-designer component)
    (let* ((class (class-of project))
           (form (get-class-form class))
           (designer (new (get-designer-class) form: form reference: project)))
      (add-project-designer project designer)))
  
  
  (method (add-designer component designer)
    (set! designers (cons (cons component designer) designers)))
  
  
  (method (remove-designer component)
    (set! designers (remove! (assq component designers) designers)))
  
  
  (method protected (get-designer component)
    (assq-value component designers #f))
  
  
  (method (for-each-designer proc)
    (for-each (lambda (pair)
                (bind (component . designer) pair
                  (proc component designer)))
              designers))
  
  
  (method protected (project-add project)
    (for-each-descendant project
      (lambda (descendant level)
        (when (is? descendant Project)
          (add-designer descendant)))))
  
  
  (method protected (project-remove project)
    ;; This a bit strange way of doing is necessary because when we get notified,
    ;; the descendants of project have already been removed and so we cannot know
    ;; which designers to remove
    (cleanup-project-designers))

  
  ;;;
  ;;;; Design
  ;;;
  
  
  (method (set-name component name . rest)
    (bind-keywords ((use-owner? #t) . others) rest
      (let ((designer (find-modification-designer component)))
        (apply set-name~ designer component name others))))
  
  
  (method (set-property component property value . rest)
    (bind-keywords ((use-owner? #t) . others) rest
      (let ((owner (find-modification-owner component)))
        (if (or (not use-owner?) (eq? owner reference))
            (apply nextmethod component property value others)
          (let ((designer (get-project-designer owner)))
            (apply set-property~ designer component property value others))))))
  
  
  (method (add-child child parent . rest)
    (bind-keywords ((use-owner? #t) . others) rest
      (let ((owner (find-modification-owner parent)))
        (if (or (not use-owner?) (eq? owner reference))
            (apply nextmethod child parent others)
          (let ((designer (get-project-designer owner)))
            (apply add-child~ designer child parent others))))))
  
  
  (method (remove-child child . rest)
    (let* ((parent (get-parent child))
           (owner (find-modification-owner parent)))
      (if (eq? owner reference)
          (apply nextmethod child rest)
        (let ((designer (get-project-designer owner)))
          (apply remove-child~ designer child rest)))))
  
  
  @try
  (method (instantiate-parcels parcels parent . rest)
    (let ((owner (find-modification-owner parent)))
      (if (eq? owner reference)
          (apply nextmethod parcels parent rest)
        (let ((designer (get-project-designer owner)))
          (apply instantiate-parcels~ designer parcels parent rest)))))
  
  
  @old
  (method (transfer-components components destination (trait: trait #t))
    (let ((owner (uniform components key: (lambda (component) (find-modification-owner (get-parent component)))))
          (destination-owner (find-modification-owner destination)))
      (delete-components components trait: trait)
      (prog1 (instantiate-parcels parcels destination trait: trait name-resolution: name-resolution design-events?: #t descendant?: #f)
        (set-modified? #t))
      (let* ((parcels (package-components components))
             (name-resolution (verify-name-conflicts parcels destination)))
        (if (eq? owner reference)
            (apply nextmethod components destination rest)
          (let ((designer (get-project-designer owner)))
            (apply transfer-components~ designer components destination rest))))))
  
  
  ;; The Designer version is for moving components installed in the same designer...
  @old
  (method (transfer-components components destination (trait: trait #t))
    (let* ((parcels (package-components components))
           (name-resolution (verify-name-conflicts parcels destination)))
      (delete-components components trait: trait)
      (prog1 (instantiate-parcels parcels destination trait: trait name-resolution: name-resolution design-events?: #t descendant?: #f)
        (set-modified? #t))))
  
  
  ;;;
  ;;;; Edit
  ;;;
  
  
  (method (cut-components components)
    (let* ((parents (get-parents components))
           (owner (find-modification-owner parents)))
      (if (eq? owner reference)
          (nextmethod components)
        (let ((designer (get-project-designer owner)))
          (cut-components designer components)))))
  
  
  (method (copy-components components)
    (let* ((parents (get-parents components))
           (owner (find-modification-owner parents)))
      (if (eq? owner reference)
          (nextmethod components)
        (let ((designer (get-project-designer owner)))
          (copy-components designer components)))))
  
  
  (method (paste-clipboard parent . rest)
    (let ((owner (find-modification-owner parent)))
      (if (eq? owner reference)
          (apply nextmethod parent rest)
        (let ((designer (get-project-designer owner)))
          (apply paste-clipboard~ designer parent rest)))))
  
  
  (method (get-parents components)
    (map get-parent~ components))

  
  ;;;
  ;;;; Owner
  ;;;
  
  
  (method (find-modification-designer components use-owner?)
    (let ((owner (find-modification-owner components)))
      (if (or (not use-owner?) (eq? owner reference))
          my-designer??
        (get-designer owner))))
  
  
  (method (find-modification-owner components)
    (define (find-owner-project component)
      (if (or (eq? component reference) (install-designer? component))
          component
        (find-owner-project (get-parent component))))
    
    (if (pair? components)
        (let ((owners (remove-duplicates (map find-owner-project components))))
          (if (> (length owners) 1)
              (error "This operation is not yet supported accross multiple projects")
            (car owners)))
      (find-owner-project components)))

  
  ;;;
  ;;;; Save
  ;;;
  
  
  (method protected (save-designer)
    (let ((some-modified? #f))
      (when (get-modified?)
        (set! some-modified? #t)
        (save))
      (for-each-designer
        (lambda (project designer)
          (when (get-modified? designer)
            (set! some-modified? #t)
            (save designer))))
      some-modified?))))
