;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Designer
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module jazz.designer jazz


(export (jazz.designer.autoload))
(import (jazz.designer.autoload)
        (jazz.graphic)
        (jazz.library)
        (jazz.system)
        (jazz.ui.view))


;;;
;;;; Error
;;;


(class Designer-Error extends Error)


(definition public (designer-error . rest)
  (signal (new Designer-Error message: (apply format rest))))


(definition public (with-safe-design thunk)
  (with-catched-exception
    (lambda (obj)
      (and (object? obj)
           (is? obj Designer-Error)))
    thunk))


;;;
;;;; Designer
;;;


(definition public design-locked?
  (make-parameter #f))


(definition public (with-design-locked component thunk)
  (parameterize ((design-locked? #t))
    (thunk)
    (fire-refresh component 'all)))


(definition public (fire-name-change component name old-name undoable?)
  (unless (design-locked?)
    (for-each (lambda (designer)
                (process-name-change~ designer component name old-name undoable?))
              (get-designers~ component))))


(definition public (fire-presentation-change component presentation old-presentation undoable?)
  (unless (design-locked?)
    (for-each (lambda (designer)
                (process-presentation-change~ designer component presentation old-presentation undoable?))
              (get-designers~ component))))


(definition public (fire-property-change branch component property value undoable?)
  (unless (design-locked?)
    (for-each (lambda (designer)
                (process-property-change~ designer branch component property value undoable?))
              (get-designers~ component))))


(definition public (fire-child-add child parent descendant?)
  (unless (design-locked?)
    (for-each (lambda (designer)
                (process-child-add~ designer child parent descendant?))
              (get-designers~ parent))))


(definition public (fire-child-remove child parent)
  (unless (design-locked?)
    (for-each (lambda (designer)
                (process-child-remove~ designer child parent))
              (get-designers~ child))))


(definition public (fire-child-relocate child parent destination)
  (unless (design-locked?)
    (for-each (lambda (designer)
                (process-child-relocate~ designer child parent destination))
              (get-designers~ child))))


(definition public (fire-send-before child parent target)
  (unless (design-locked?)
    (for-each (lambda (designer)
                (process-send-before~ designer child parent target))
              (get-designers~ child))))


(definition public (fire-refresh component what)
  (for-each (lambda (designer)
              (process-refresh~ designer component what))
            (get-designers~ component)))


;;;
;;;; Form
;;;


(definition public (imports-to-insert form include-modules exclude-modules)
  (let ((appl (get-application)))
    (difference (remove-duplicates (append (designer-default-imports~ appl)
                                           include-modules
                                           (designer-form-imports~ appl form)))
                exclude-modules)))


(definition public (serialize-origin origin)
  (if (class? origin)
      (serialize-class origin)
    (serialize-runtime-reference origin))))
