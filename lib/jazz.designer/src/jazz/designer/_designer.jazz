;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Designer
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module jazz.designer jazz


(export (jazz.designer.autoload)
        (jazz.designer.syntax))

(import (jazz.application)
        (jazz.component)
        (jazz.editor.jazz)
        (jazz.graphic)
        (jazz.io)
        (jazz.jml)
        (jazz.platform)
        (jazz.preferences)
        (jazz.reference)
        (jazz.runtime)
        (jazz.ui.dialog)
        (jazz.view))


;;;
;;;; Colors
;;;


(definition public Focused-Background
  {Color Dark-Purple alpha: 0.15})

(definition public Unfocused-Background
  {Color Dark alpha: 0.15})


(definition public Selected-Colors
  '({Color Red} {Color red: 227 green: 11 blue: 239} {Color Blue}))

(definition public Selected-Inner-Colors
  '({Color Light-Red} {Color red: 248 green: 146 blue: 254} {Color red: 133 green: 134 blue: 254}))

(definition public Unselected-Owned-Color
  {Color red: 24 green: 175 blue: 43})

(definition public Unselected-Owned-Inner-Color
  {Color red: 189 green: 237 blue: 203})

(definition public Unselected-Modify-Color
  {Color red: 1 green: 194 blue: 213})

(definition public Unselected-Modify-Inner-Color
  {Color red: 160 green: 225 blue: 231})

(definition public Unselected-Color
  {Color Medium-Gray})

(definition public Unselected-Inner-Color
  {Color Gray})


(definition public (selected-color rank)
  (if (not rank)
      Unselected-Color
    (let ((colors Selected-Colors))
      (element colors (min rank (- (length colors) 1))))))


(definition public (set-selected-color rank color)
  (if (not rank)
      (set! Unselected-Color color)
    (let ((colors Selected-Colors))
      (set-element! colors (min rank (- (length colors) 1)) color))))


(definition public (selected-inner-color rank)
  (if (not rank)
      Unselected-Inner-Color
    (let ((colors Selected-Inner-Colors))
      (element colors (min rank (- (length colors) 1))))))


(definition public (set-selected-inner-color rank color)
  (if (not rank)
      (set! Unselected-Inner-Color color)
    (let ((colors Selected-Inner-Colors))
      (set-element! colors (min rank (- (length colors) 1)) color))))


(definition public (unselected-owned-color)
  Unselected-Owned-Color)

(definition public (set-unselected-owned-color color)
  (set! Unselected-Owned-Color color))


(definition public (unselected-owned-inner-color)
  Unselected-Owned-Inner-Color)

(definition public (set-unselected-owned-inner-color color)
  (set! Unselected-Owned-Inner-Color color))


(definition public (unselected-modify-color)
  Unselected-Modify-Color)

(definition public (set-unselected-modify-color color)
  (set! Unselected-Modify-Color color))


(definition public (unselected-modify-inner-color)
  Unselected-Modify-Inner-Color)

(definition public (set-unselected-modify-inner-color color)
  (set! Unselected-Modify-Inner-Color color))


;;;
;;;; Property
;;;


(definition public (initialized-value-heuristic component property)
  (let ((initialize (get-initialize~ property)))
    (if (not initialize)
        (unspecified)
      (initialize component))))


;;;
;;;; Fire
;;;


(definition public design-locked?
  (make-parameter #f))


(definition public (with-design-locked component thunk)
  (parameterize ((design-locked? #t))
    (thunk)
    (fire-refresh component 'all)))


(definition public (fire-name-change component name old-name undoable?)
  (unless (design-locked?)
    (for-each (lambda (designer)
                (process-name-change~ designer component name old-name undoable?))
              (get-designers~ component))))


(definition public (fire-presentation-change component presentation old-presentation undoable?)
  (unless (design-locked?)
    (for-each (lambda (designer)
                (process-presentation-change~ designer component presentation old-presentation undoable?))
              (get-designers~ component))))


(definition public (fire-property-change branch component property value undoable?)
  (unless (design-locked?)
    (for-each (lambda (designer)
                (process-property-change~ designer branch component property value undoable?))
              (get-designers~ component))))


(definition public (fire-child-add child parent descendant?)
  (unless (design-locked?)
    (for-each (lambda (designer)
                (process-child-add~ designer child parent descendant?))
              (get-designers~ parent))))


(definition public (fire-child-remove child parent)
  (unless (design-locked?)
    (for-each (lambda (designer)
                (process-child-remove~ designer child parent))
              (get-designers~ child))))


(definition public (fire-child-relocate child parent destination)
  (unless (design-locked?)
    (for-each (lambda (designer)
                (process-child-relocate~ designer child parent destination))
              (get-designers~ child))))


(definition public (fire-send-before child parent target)
  (unless (design-locked?)
    (for-each (lambda (designer)
                (process-send-before~ designer child parent target))
              (get-designers~ child))))


(definition public (fire-refresh component what)
  (for-each (lambda (designer)
              (process-refresh~ designer component what))
            (get-designers~ component)))


;;;
;;;; Suite
;;;


(definition *editor-suites*
  (make-table test: eq?))


(definition public (register-editor-suite suite)
  (table-set! *editor-suites* (get-name~ suite) suite))


(definition public (find-editor-suite name)
  (table-ref *editor-suites* name #f))

(definition public (require-editor-suite name)
  (or (find-editor-suite name)
      (error "Unable to find editor suite: {s}" name)))


(definition *default-editor-suite*
  #f)


(definition public (get-default-editor-suite)
  *default-editor-suite*)

(definition public (set-default-editor-suite suite)
  (set! *default-editor-suite* suite))


;;;
;;;; Toolbox
;;;


(definition *symbolic-addable-references*
  (make-table test: eq?))


(definition public (register-symbolic-addable-references name references)
  (table-set! *symbolic-addable-references* name references))


(definition public (find-symbolic-addable-references name)
  (table-ref *symbolic-addable-references* name #f))

(definition public (require-symbolic-addable-references name)
  (or (find-symbolic-addable-references name)
      (error "Unknown symbolic addable references: {s}" name)))


;;;
;;;; Descriptors
;;;


(definition public (missing-named-children component)
  (collect-if (lambda (element)
                (bind (name reference) element
                  (not (find-child~ component name))))
              (get-descriptor-named-children component)))


(definition public (get-descriptor-named-children component)
  (if component
      (append-map (lambda (child-descriptor)
                    (let ((name (get-target~ child-descriptor)))
                      (map (lambda (reference)
                             (list name (get-runtime-reference~ reference)))
                           (get-classes~ child-descriptor))))
                  (get-children~ (get-children-descriptor~ (get-class-descriptor~ (class-of component)))))
    '()))


;;;
;;;; Form
;;;


(definition public (open-form)
  (read-form (choose-file multiple-selection?: #f)))


(definition public (serialize-origin origin)
  (if (class? origin)
      (serialize-class origin)
    (serialize-runtime-reference origin)))


(definition public (safe-read-form file)
  ;; quick solution we should only catch reading and parsing errors
  (with-exception-filter
    (lambda (exc)
      (or (datum-parsing-exception? exc)
          (error? exc)))
    (lambda (exc)
      (wrap-exception exc))
    (lambda ()
      (read-form file))))


(definition public (save-form form file)
  (with-jazz-readtable
    (lambda ()
      (call-with-output-file (path-settings file)
        (lambda (output)
          (print-form-data form output))))))


(definition public (print-form-data form output)
  (let ((data (get-data~ form)))
    (output-header (get-model~ form) output)
    (format output "{%}{%}")
    (format output "(data {a}{%}" (get-dialect~ data))
    (format output "{%}{%}")
    (let ((imports (get-imports~ data)))
      (when imports
        (format output "(import ")
        (let ((first? #t))
          (for-each (lambda (import)
                      (if first?
                          (set! first? #f)
                        (format output "{%}        "))
                      (format output "{s}" import))
                    imports)
          (format output "){%}"))
        (format output "{%}{%}")))
    (format output "(form{%}")
    (pretty-print~ (form->node form) output base: 1 space-name?: #t)
    (format output ")")
    (format output "){%}")))


(definition public (locator-add-reference locator reference-symbol reference)
  (lambda (symbol)
    (if (eq? symbol reference-symbol)
        reference
      (locator symbol))))


;;;
;;;; Imports
;;;


(definition public (form-imports form)
  (define (collect-nodes form)
    (let ((factory (new List-Factory)))
      (iterate-nodes form (~ put factory))
      (get-output~ factory)))
  
  (define (collect-symbols form)
    (let* ((nodes (collect-nodes form))
           (client-forms (collect (lambda (node)
                                    (get-property~ node client-form:))
                                  nodes))
           (nodes (append nodes (append-map collect-nodes client-forms)))
           (properties (append-map get-properties~ nodes))
           (new-nodes (collect-if (lambda (action) (eq? action 'new))
                                  nodes
                                  key: get-action~)))
      (append
        (collect (lambda (val)
                   (and (is? val Reference)
                        (get-symbol~ val)))
                 (map-property (lambda (_ value) value) properties))
        (map get-model~ new-nodes))))
  
  (define (symbol-import symbol)
    (let ((context (get-context~ form)))
      (first (parse-runtime-reference (get-reference~ context symbol)))))
  
  (let ((symbols (collect-symbols form)))
    (remove-duplicates (collect symbol-import symbols))))


;;;
;;;; Edit
;;;


(definition public (edit-designer-form designer (workspace: workspace #f))
  (let ((appl (get-application))
        (origin (get-origin~ (get-form~ designer))))
    (define (find-entry locator)
      ((module-ref 'jazz.project 'locator->entry) locator))
    
    (cond ((not origin)
           (bell))
          ((file? origin)
           (edit-document~ appl origin class: Jazz-Text-View workspace: workspace))
          ((find-entry (get-name~ origin)) => (lambda (entry) (edit~ entry workspace: workspace)))
          (else
           (receive (module class) (break-reference (get-name~ origin))
             (edit-document~ appl (find-unit-source module) class: Jazz-Text-View workspace: workspace))))))


;;;
;;;; Source
;;;


(definition public (designer-source-workspace)
  (let ((source-in-designer? (get-source-in-designer?~ (get-preferences 'designer))))
    (if (xor source-in-designer? (shift-down?))
        'designer
      #f)))


;;;
;;;; Safe
;;;


(definition public (with-safe-design thunk)
  (with-catched-exception
    (lambda (obj)
      (and (object? obj)
           (is? obj Designer-Error)))
    thunk)))
