;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Designer
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module jazz.designer jazz


(hub active-background)
(hub add-column)
(hub add-component-class)
(hub add-designer-listener)
(hub add-editor-listener)
(hub add-element)
(hub add-form)
(hub add-module-elements)
(hub add-new)
(hub add-new-form)
(hub add-properties)
(hub add-view)
(hub add-violation)
(hub align-bottom)
(hub align-left)
(hub align-right)
(hub align-top)
(hub apply-form)
(hub backspace-press)
(hub border-region)
(hub bring-to-front)
(hub can-bring-selection-to-front?)
(hub can-copy-selection?)
(hub can-copy?)
(hub can-cut-selection?)
(hub can-cut?)
(hub can-delete-selection?)
(hub can-delete?)
(hub can-paste-properties?)
(hub can-paste?)
(hub can-redo?)
(hub can-rename-selection?)
(hub can-rename?)
(hub can-select-all?)
(hub can-send-selection-to-back?)
(hub can-undo?)
(hub cascade-view-position)
(hub categorized-addable-classes)
(hub center-child)
(hub center-horizontally)
(hub center-vertically)
(hub change-frame-color)
(hub change-highlight-color)
(hub change-text-color)
(hub child-add)
(hub child-remove)
(hub class-selection?)
(hub client-rows-datas)
(hub client-update)
(hub collect-toolbox-modules)
(hub combo-choose)
(hub complete-part)
(hub component-color)
(hub component-font)
(hub component-image)
(hub component-owned)
(hub component-relocatable?)
(hub component-row)
(hub consolidate-property)
(hub context-menu)
(hub copy-components)
(hub copy-selection)
(hub create-client)
(hub current-drop)
(hub current-entries)
(hub current-position)
(hub cursor-update)
(hub cut-components)
(hub cut-selection)
(hub delete-components)
(hub delete-selection)
(hub distribute-property)
(hub double-click)
(hub drag-move)
(hub drag-up)
(hub draw)
(hub draw-data)
(hub draw-selected)
(hub drop?)
(hub edit)
(hub edit-component)
(hub edit-descriptor)
(hub editable?)
(hub editor-down-arrow)
(hub editor-focus-delegate)
(hub editor-focus-gained)
(hub editor-focus-lose)
(hub editor-return)
(hub editor-tab)
(hub editor-up-arrow)
(hub end-rubber-band)
(hub enter-combo-choice)
(hub enter-edited-value)
(hub enter-pathname-value)
(hub enter-value)
(hub filter)
(hub find-changed-property)
(hub find-model)
(hub finish-edition)
(hub focus-gained)
(hub focus-lose)
(hub focus-update-actions)
(hub for-each-section)
(hub force-layout)
(hub get-addable-references)
(hub get-all)
(hub get-base)
(hub get-base-position)
(hub get-book-name)
(hub get-card)
(hub get-cell-color)
(hub get-class)
(hub get-class-references)
(hub get-classes)
(hub get-client)
(hub get-color)
(hub get-component-name)
(hub get-component-offset)
(hub get-context-menu)
(hub get-current-position)
(hub get-data)
(hub get-description)
(hub get-designer)
(hub get-displayed?)
(hub get-domain)
(hub get-draggable?)
(hub get-editable?)
(hub get-editor)
(hub get-editor-color)
(hub get-effective-style)
(hub get-end)
(hub get-entry)
(hub get-file-entry)
(hub get-filled?)
(hub get-filter)
(hub get-filter-visible?)
(hub get-focus-actions)
(hub get-frame-color)
(hub get-hierarchy)
(hub get-highlight-edited?)
(hub get-highlighted?)
(hub get-id)
(hub get-identifier)
(hub get-image)
(hub get-import)
(hub get-imports)
(hub get-key)
(hub get-kind)
(hub get-locale-tree)
(hub get-locales-object)
(hub get-location)
(hub get-manager)
(hub get-master)
(hub get-master-model)
(hub get-master-name)
(hub get-mode)
(hub get-model)
(hub get-modified?)
(hub get-module-name)
(hub get-moniker)
(hub get-name)
(hub get-names)
(hub get-new-requests-name?)
(hub get-overlay)
(hub get-parent-offset)
(hub get-path)
(hub get-position)
(hub get-presentation)
(hub get-preserved)
(hub get-prop)
(hub get-properties)
(hub get-property)
(hub get-provider)
(hub get-provider-data)
(hub get-rank)
(hub get-read-only?)
(hub get-reference)
(hub get-references)
(hub get-result)
(hub get-rights)
(hub get-rubber-band?)
(hub get-section)
(hub get-selected)
(hub get-selected?)
(hub get-selection)
(hub get-selection-locked?)
(hub get-selection-structure)
(hub get-show-content?)
(hub get-show-frames?)
(hub get-showed-property)
(hub get-source-in-designer?)
(hub get-start)
(hub get-sub-identifier)
(hub get-tab-stops)
(hub get-target)
(hub get-text)
(hub get-text-modified?)
(hub get-title)
(hub get-trait)
(hub get-traits)
(hub get-tree)
(hub get-undoer)
(hub get-unit)
(hub get-value)
(hub get-version)
(hub get-violation)
(hub get-violations)
(hub get-width)
(hub guest-installed-in-host)
(hub highlight-component)
(hub in-edition?)
(hub inactive-background)
(hub inactive-title)
(hub install-handlers)
(hub install-new-component)
(hub instantiate-component)
(hub instantiate-parcel)
(hub invalidate-border)
(hub invalidate-selection)
(hub key-press)
(hub make-columns)
(hub merge?)
(hub mouse-down)
(hub mouse-up)
(hub move-client)
(hub move-client?)
(hub move-selection)
(hub navigate-backward)
(hub navigate-forward)
(hub new-class)
(hub new-default-trait)
(hub on-action)
(hub on-font-name)
(hub on-font-size)
(hub on-ok)
(hub on-open)
(hub on-refresh)
(hub on-selection-change)
(hub on-style)
(hub on-try-out)
(hub open-form)
(hub outer-client)
(hub owner-image)
(hub package-component)
(hub part-domain)
(hub paste-clipboard)
(hub paste-parcels)
(hub paste-properties)
(hub populate)
(hub prepare-mode-switch)
(hub present)
(hub present-location)
(hub presentation-violation)
(hub preview)
(hub previewing?)
(hub print-to)
(hub process-branch-changed)
(hub process-branch-changing)
(hub process-child-add)
(hub process-child-relocate)
(hub process-child-remove)
(hub process-name-change)
(hub process-presentation-change)
(hub process-property-change)
(hub process-refresh)
(hub process-rubber-band)
(hub process-saved)
(hub process-saving)
(hub process-send-before)
(hub property-change)
(hub read-only?)
(hub receive-drop)
(hub redo)
(hub redraw-border)
(hub refresh)
(hub refresh-descriptors)
(hub relocate-component)
(hub relocate-components)
(hub remove-designer-listener)
(hub remove-editor-listener)
(hub remove-element)
(hub remove-from-runtime)
(hub remove-handlers)
(hub rename-selection)
(hub render)
(hub reorder-component)
(hub reset-form)
(hub reset-modified-properties)
(hub reset-property)
(hub resize-both)
(hub resize-center)
(hub resize-height)
(hub resize-width)
(hub resolve-form)
(hub restore-state)
(hub return-press)
(hub safe-set-property)
(hub save-all)
(hub save-client)
(hub save-content-as-patch)
(hub save-content-patch)
(hub save-edition)
(hub saved-form)
(hub select)
(hub select-all)
(hub select-component)
(hub select-property)
(hub select-trait)
(hub selected-addable)
(hub selected-cells-data)
(hub selected-class)
(hub selected-component)
(hub selected-components)
(hub selected-property)
(hub selected?)
(hub selection-cell?)
(hub selection-rank)
(hub selection-update)
(hub send-before)
(hub send-to-back)
(hub set-all)
(hub set-allow-duplicates?)
(hub set-application-select?)
(hub set-base)
(hub set-classes)
(hub set-client)
(hub set-client-direct)
(hub set-color)
(hub set-composite?)
(hub set-data)
(hub set-default-traits)
(hub set-designer)
(hub set-displayed?)
(hub set-domain)
(hub set-editable?)
(hub set-edited-modified?)
(hub set-edited-value)
(hub set-editor)
(hub set-enabled?)
(hub set-end)
(hub set-filled?)
(hub set-filter)
(hub set-highlight-color)
(hub set-highlighted?)
(hub set-id)
(hub set-kind)
(hub set-locale-tree)
(hub set-locales-object)
(hub set-manager)
(hub set-mode)
(hub set-model)
(hub set-modified?)
(hub set-moniker)
(hub set-name)
(hub set-path)
(hub set-presentation)
(hub set-presenter)
(hub set-property)
(hub set-property-modified?)
(hub set-reference)
(hub set-selected)
(hub set-selection)
(hub set-showed-property)
(hub set-start)
(hub set-target)
(hub set-text-modified?)
(hub set-title)
(hub set-trait)
(hub set-traits)
(hub set-value)
(hub set-value-row)
(hub set-violation)
(hub set-width)
(hub setup)
(hub setup-entry)
(hub setup-for-grid)
(hub show-properties)
(hub space-horizontally)
(hub space-vertically)
(hub start-edition)
(hub start-rubber-band)
(hub tab-view)
(hub text-change)
(hub toggle-bold)
(hub toggle-content)
(hub toggle-filter)
(hub toggle-frames)
(hub toggle-italic)
(hub toggle-lock-selection)
(hub toggle-underline)
(hub try-out)
(hub undo)
(hub unhighlight-component)
(hub unselect)
(hub update)
(hub update-buttons)
(hub update-cell)
(hub update-highlight)
(hub update-moniker-time)
(hub update-rows-highlight)
(hub update-selection)
(hub update-status)
(hub validate-integrity)
(hub view-completions)
(hub view-component)


(export (jazz.designer.autoload)
        (jazz.designer.syntax))

(import (jazz.application)
        (jazz.component)
        (jazz.descriptor)
        (jazz.editor.jazz)
        (jazz.graphic)
        (jazz.io)
        (jazz.markup)
        (jazz.platform)
        (jazz.preferences)
        (jazz.reference)
        (jazz.runtime)
        (jazz.ui.dialog)
        (jazz.view))


;;;
;;;; Property
;;;


(definition public (initialized-value-heuristic component property)
  (let ((initialize (get-initialize property)))
    (if (not initialize)
        (unspecified)
      (initialize component))))


;;;
;;;; Fire
;;;


(definition public design-locked?
  (make-parameter #f))


(definition public (with-design-locked component thunk)
  (parameterize ((design-locked? #t))
    (thunk)
    (fire-refresh component 'all)))


(definition public (fire-name-change component name old-name undoable?)
  (unless (design-locked?)
    (for-each (lambda (designer)
                (process-name-change designer component name old-name undoable?))
              (get-designers component))))


(definition public (fire-presentation-change component presentation old-presentation undoable?)
  (unless (design-locked?)
    (for-each (lambda (designer)
                (process-presentation-change designer component presentation old-presentation undoable?))
              (get-designers component))))


(definition public (fire-property-change branch component property value undoable?)
  (unless (design-locked?)
    (for-each (lambda (designer)
                (process-property-change designer branch component property value undoable?))
              (get-designers component))))


(definition public (fire-child-add child parent descendant?)
  (unless (design-locked?)
    (for-each (lambda (designer)
                (process-child-add designer child parent descendant?))
              (get-designers parent))))


(definition public (fire-child-remove child parent)
  (unless (design-locked?)
    (for-each (lambda (designer)
                (process-child-remove designer child parent))
              (get-designers child))))


(definition public (fire-child-relocate child parent destination)
  (unless (design-locked?)
    (for-each (lambda (designer)
                (process-child-relocate designer child parent destination))
              (get-designers child))))


(definition public (fire-send-before child parent target)
  (unless (design-locked?)
    (for-each (lambda (designer)
                (process-send-before designer child parent target))
              (get-designers child))))


(definition public (fire-refresh component what)
  (for-each (lambda (designer)
              (process-refresh designer component what))
            (get-designers component)))


;;;
;;;; Suite
;;;


(definition *editor-suites*
  (make-table test: eq?))


(definition public (register-editor-suite suite)
  (table-set! *editor-suites* (get-name suite) suite))


(definition public (find-editor-suite name)
  (table-ref *editor-suites* name #f))

(definition public (require-editor-suite name)
  (or (find-editor-suite name)
      (error "Unable to find editor suite: {s}" name)))


(definition *default-editor-suite*
  #f)


(definition public (get-default-editor-suite)
  *default-editor-suite*)

(definition public (set-default-editor-suite suite)
  (set! *default-editor-suite* suite))


;;;
;;;; Toolbox
;;;


(definition *symbolic-addable-references*
  (make-table test: eq?))


(definition public (register-symbolic-addable-references name references)
  (table-set! *symbolic-addable-references* name references))


(definition public (find-symbolic-addable-references name)
  (table-ref *symbolic-addable-references* name #f))

(definition public (require-symbolic-addable-references name)
  (or (find-symbolic-addable-references name)
      (error "Unknown symbolic addable references: {s}" name)))


;;;
;;;; Descriptors
;;;


(definition public (missing-named-children component)
  (collect-if (lambda (element)
                (bind (name reference) element
                  (not (find-child component name))))
              (get-descriptor-named-children component)))


(definition public (get-descriptor-named-children component)
  (if component
      (append-map (lambda (child-descriptor)
                    (let ((name (get-target child-descriptor)))
                      (map (lambda (reference)
                             (list name (get-runtime-reference reference)))
                           (get-classes child-descriptor))))
                  (get-children (get-children-descriptor (get-class-descriptor (class-of component)))))
    '()))


;;;
;;;; Form
;;;


(definition public (serialize-origin origin)
  (if (class? origin)
      (serialize-class origin)
    (serialize-runtime-reference origin)))


(definition public (safe-read-form file)
  ;; quick solution we should only catch reading and parsing errors
  (with-exception-filter
    (lambda (exc)
      (or (datum-parsing-exception? exc)
          (error? exc)))
    (lambda (exc)
      (wrap-exception exc))
    (lambda ()
      (read-form file))))


(definition public (save-form-to form file)
  (with-jazz-readtable
    (lambda ()
      (call-with-output-file (path-settings file)
        (lambda (output)
          (print-form-data form output))))))


(definition public (print-form-data form output)
  (let ((data (get-data form)))
    (output-header (get-model form) output)
    (format output "{%}{%}")
    (format output "(data {a}{%}" (get-dialect data))
    (format output "{%}{%}")
    (let ((imports (get-imports data)))
      (when imports
        (format output "(import ")
        (let ((first? #t))
          (for-each (lambda (import)
                      (if first?
                          (set! first? #f)
                        (format output "{%}        "))
                      (format output "{s}" import))
                    imports)
          (format output "){%}"))
        (format output "{%}{%}")))
    (format output "(form{%}")
    (print-node (form->node form) output base: 1 space-name?: #t)
    (format output ")")
    (format output "){%}")))


(definition public (locator-add-reference locator reference-symbol reference)
  (lambda (symbol)
    (if (eq? symbol reference-symbol)
        reference
      (locator symbol))))


;;;
;;;; Imports
;;;


(definition public (form-imports form)
  (define (collect-nodes form)
    (let ((factory (new List-Factory)))
      (iterate-nodes form (~ put factory))
      (get-output factory)))
  
  (define (collect-symbols form)
    (let* ((nodes (collect-nodes form))
           (client-forms (collect (lambda (node)
                                    (get-property node client-form:))
                                  nodes))
           (nodes (append nodes (append-map collect-nodes client-forms)))
           (properties (append-map get-properties nodes))
           (new-nodes (collect-if (lambda (action) (eq? action 'new))
                                  nodes
                                  key: get-action)))
      (append
        (collect (lambda (val)
                   (and (is? val Reference)
                        (get-symbol val)))
                 (map-property (lambda (_ value) value) properties))
        (map get-model new-nodes))))
  
  (define (symbol-import symbol)
    (let ((context (get-context form)))
      (first (parse-runtime-reference (get-reference context symbol)))))
  
  (let ((symbols (collect-symbols form)))
    (remove-duplicates (collect symbol-import symbols))))


;;;
;;;; Edit
;;;


(definition public (edit-designer-form designer (workspace: workspace #f))
  (let ((appl (get-application))
        (origin (get-origin (get-form designer))))
    (define (find-entry locator)
      ((module-ref 'jazz.project 'locator->entry) locator))
    
    (cond ((not origin)
           (bell))
          ((file? origin)
           (edit-document appl origin class: Jazz-Text-View workspace: workspace))
          ((find-entry (get-name origin)) => (lambda (entry) (edit entry workspace: workspace)))
          (else
           (receive (module class) (break-reference (get-name origin))
             (edit-document appl (find-unit-source module) class: Jazz-Text-View workspace: workspace))))))


;;;
;;;; Source
;;;


(definition public (designer-source-workspace)
  (let ((source-in-designer? (get-source-in-designer? (current-preferences 'designer))))
    (if (xor source-in-designer? (shift-down?))
        'designer
      #f)))


;;;
;;;; Safe
;;;


(definition public (with-safe-design thunk)
  (with-catched-exception
    (lambda (obj)
      (and (object? obj)
           (is? obj Designer-Error)))
    thunk)))
