;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Canvas
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.designer.canvas.Canvas jazz


(import (jazz.component)
        (jazz.descriptor)
        (jazz.integrity)
        (jazz.reporter)
        (jazz.ui)
        (jazz.view)
        (jazz.workspace))


;; A canvas is a Jazz database that has a rigid format where
;; every level knows exactly what type of child it can have.
;; It is a bit like a Jazz database plus a validating schema...


(class undocumented Canvas extends Component
  
  
  (property violations initialize '() accessors generate)
  
  
  (slot violations-factory initialize (new List-Factory))


  ;;;
  ;;;; Integrity
  ;;;
  
  
  (method (get-integrity-manager self)
    (new Integrity-Manager))
  
  
  (method public (validate-integrity self (context: context #f) (reporter: reporter #f) (report?: report? #t))
    (define (update-violations-manager violations)
      (let ((manager (get-violations-manager self)))
        (update manager)))
    
    (let ((integrity-manager (get-integrity-manager self)))
      (reset violations-factory)
      (validate-integrity integrity-manager self #f context: context reporter: reporter)
      (set! violations (get-output violations-factory))
      (when report?
        (when reporter
          (report-message reporter "Displaying violations..."))
        (let ((presentation (get-presentation-property self)))
          (update-violations-manager violations)
          (if (null? violations)
              (message-box (format "Found no integrity violations in {a}" presentation))
            (let ((count (length violations)))
              (message-box (format "Found {a} integrity violation{a} in {a}" count (format-plural count) presentation) @convert icon: @convert IDI_ERROR)
              (select-violations-manager self)))))
      violations))


  (method (get-violations-manager self)
    (get-guest (singleton-docked (violations-manager-class self))))
  
  
  (method public (select-violations-manager self)
    (let ((manager (get-violations-manager self)))
      (select-resultset manager)
      (select-first manager))
    (select-docked (violations-manager-class self) workspace: (violations-manager-workspace self) focus?: #t))
  
  
  (method protected virtual (violations-manager-class self)
    Violations-Manager)
  
  
  (method protected virtual (violations-manager-workspace self)
    #f)
  
  
  ;;;
  ;;;; Violations
  ;;;
  
  
  (method public (add-violation self violation)
    (put violations-factory violation))
  
  
  (method public (clear-violations self)
    (reset violations-factory)
    (set! violations '()))))
