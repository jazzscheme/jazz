;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Custom Card
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.designer.card.Custom-Card jazz


(import (jazz.descriptor)
        (jazz.designer)
        (jazz.text)
        (jazz.ui))


(class undocumented Custom-Card extends Card
  
  
  (slot setup? initialize #f)
  
  
  ;;;
  ;;;; New Approach
  ;;;
  
  
  (method (setup-properties self)
    (unless setup?
      (for-each-property-view self
        (lambda (view property domain)
          (setup-entry domain view client)
          (layout-view view)))
      (set! setup? #t)))
  
  
  (method (update-properties self)
    @cant-find-set-property-value
    (for-each-property-view self
      (lambda (view property domain)
        (let ((value (read-property client property)))
          (set-property-value domain view value)))))
  
  
  (method (for-each-property-view self proc)
    (for-each-descendant self
      (lambda (view level)
        (when (is? view Property-View)
          (let* ((property (category-field (class-of client) (get-property view)))
                 (domain (property-domain client property)))
            (proc view property domain))))))
  
  
  (method public (find-property-view self property)
    (continuation-capture
      (lambda (return)
        (for-each-descendant self
          (lambda (component level)
            (when (and (is? component Property-View) (eq? (get-property component) property))
              (continuation-return return component))))
        #f)))
  
  
  ;;;
  ;;;; Properties
  ;;;
  
  
  (method override (client-update self)
    (when client
      (setup-properties self)
      (update-properties self)
      (for-each (lambda (mapping)
                  (bind (property name type) mapping
                    (let ((view (locate self name))
                          (value (read-property client property)))
                      (property-update self view value type))))
                (get-properties-mapping self))))
  
  
  (method protected virtual (property-update self view value type)
    (case type
      ((string)  (set-string-content view (or value "")))
      ((text)    (set-content view value))
      ((boolean) (set-checked? view value))
      ((date)    (set-string-content view (if (not value) "" (present value seconds?: #f))))
      ((color)   (set-color view value))
      (else      (error "Unknown property type: {t}" type))))
  
  
  (method public virtual (save-client self)
    (define (save-properties-new)
      (when client
        (for-each-property-view self
          (lambda (view property domain)
            @cant-find-get-property-modified?
            (when (get-property-modified? domain view)
              (let ((value (get-property-value domain view)))
                (if (eq? (field-name property) 'name-info)
                    (set-name designer client value)
                  (set-property designer client property value)))
              (set-property-modified? domain view #f))))))
    
    (define (save-properties)
      (let ((modified? #f))
        (for-each (lambda (mapping)
                    (bind (property name type) mapping
                      (let ((view (locate self name)))
                        (when (save-property self view property type)
                          (set! modified? #t)))))
                  (get-properties-mapping self))
        modified?))
    
    (save-properties-new)
    (save-properties))
  
  
  (method protected virtual (save-property self view property type)
    (case type
      ((string)
        (when (get-modified? view)
          (set-property designer client property (get-string-content view) design-events?: #f)
          (set-modified? view #f)
          #t))
      ((text)
        (when (get-modified? view)
          (set-property designer client property (get-content view) design-events?: #f)
          (set-modified? view #f)
          #t))
      ((boolean)
        (when (get-modified? view)
          (set-property designer client property (get-checked? view) design-events?: #f)
          (set-modified? view #f)
          #t))
      @convert-date
      ((date)
        (when (get-modified? view)
          (let ((content (get-string-content view)))
            (set-property designer client property (if (empty-string? content) #f (parse-string Date content)) design-events?: #f)
            (set-modified? view #f)
            #t)))
      ((color)
        (when (get-modified? view)
          (let ((color (get-color view)))
            (set-property designer client property color design-events?: #f)
            (set-modified? view #f)
            #t)))
      (else
        (error "Unknown property type: {t}" type))))
  
  
  (method protected virtual (get-properties-mapping self)
    #f)

  
  ;;;
  ;;;; Design
  ;;;
    
  
  (method override (property-change self component property value)
    ;; quick and dirty for now...
    @this-had-many-bugs---a-better-approach-will-use-the-properties-mapping
    (client-update))))
