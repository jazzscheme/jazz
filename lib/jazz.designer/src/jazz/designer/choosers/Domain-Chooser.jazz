;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Domain Chooser
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.designer.choosers.Domain-Chooser jazz


(import (jazz.graphic)
        (jazz.jml)
        (jazz.library)
        (jazz.locale)
        (jazz.ui))


(class undocumented Domain-Chooser extends View
  

  (property names    initialize '() accessors generate)
  (property selected initialize #f  accessors generate)

  
  (form
    (<install>                                       size: {Dimension 222 388}
      (<Label-View>                                  title: "Select the details that will be displayed" position: {Point 10 9} size: {Dimension 201 16} font: {Font Label})
      (<Border-View>              name: names-border position: {Point 9 33} size: {Dimension 201 304} border-type: edge
        (<Scroller-View>                             hscroll?: #t vscroll?: #t
          (<!>                    name: content      layout-type: fill
            (<Tree-View>          name: names-tree   filled-column: detail top-padding: 2 portfolio: :images return-press-handler: {Event-Handler :form on-return-press} escape-press-handler: {Event-Handler :form on-escape-press}
              (<Tree-Node-Column> name: detail       toplevel-controls?: #f display-images?: #f width: 200)))))
      (<Push-Button>              name: ok           title: "OK" position: {Point 30 351} size: {Dimension 80 24} action-handler: {Event-Handler :host on-ok} default?: #t)
      (<Push-Button>              name: cancel       title: "Cancel" position: {Point 114 351} size: {Dimension 80 24} action-handler: {Event-Handler :host on-cancel})))

  
  (method override (finish rest)
    (nextmethod rest)
    (let ((tree (get-tree)))
      (setup-names tree)
      (acquire-focus~ tree)))

  
  ;;;
  ;;;; Access
  ;;;


  (method (get-tree)
    (locate 'names-tree))
  
  
  (method (get-text)
    (locate '(column-size text)))

  
  ;;;
  ;;;; Host
  ;;;
  
  
  (method meta override (host-title)
    "Choose Values")
  
  
  (method meta override (host-position)
    {Point 450 300})
  
  
  (method meta override (host-size)
    {Dimension 252 120})
  
  
  ;;;
  ;;;; Events
  ;;;
  
  
  ;; Should really be generic in the Dialog class
  (method override (on-return-press evt)
    (let ((dialog (get-host)))
      (end-modal~ dialog (get-modal-result~ dialog))))
  
  
  ;; Should really be generic in the Dialog class
  (method override (on-escape-press evt)
    (let ((dialog (get-host)))
      (cancel-modal~ dialog)))

  
  ;;;
  ;;;; Setup
  ;;;

  
  (method (setup-names tree)
    (remove-every-row~ tree)
    (with-update-locked~ tree
      (lambda ()
        (for-each (lambda (info)
                    (let* ((border 0)
                           (layout (new Layout-View layout-type: 'fill layout-insets: (new Rect 4 border border border)))
                           (color {Color Black})
                           (font (if (eq? size 'filled) {Font Label-Bold} {Font Label}))
                           (name (if (string? info) info (car info)))
                           (title (if (string? info) info (localize (cadr info))))
                           (checked? (member? name selected))
                           (checkbox (new Check-Box font: font parent: layout title: title checked?: checked? color: color user-data: name)))
                      (add-row~ tree children: (list layout) user-data: checkbox)))
                  names))))
  
  
  ;;;
  ;;;; Modal
  ;;;
  
  
  (method override (get-modal-result)
    (let ((tree (get-tree))
          (fact (new List-Factory)))
      (for-each-row~ tree
        (lambda (row rank)
          (let ((checkbox (get-user-data~ row)))
            (when (and (is? checkbox Check-Box) (get-checked?~ checkbox))
              (let ((name (get-user-data~ checkbox)))
                (put~ fact name))))))
      (get-output~ fact)))))
