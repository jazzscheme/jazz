;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Foreign List Chooser
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2012
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.designer.choosers.Foreign-List-Chooser jazz


(import (jazz.designer)
        (jazz.jml)
        (jazz.library)
        (jazz.ui))


(class undocumented Foreign-List-Chooser extends View


  (property foreign           initialize #f  accessors generate)
  (property foreign-objects   initialize '() accessors generate)
  (property key               initialize #f  accessors generate)
  (property composite?        initialize #t  accessors generate)
  (property allow-duplicates? initialize #f  accessors generate)
  (property all               initialize '() accessors generate)
  (property value             initialize '() accessors generate)
    
  
  (form
    (<install>                           size: {Dimension 450 305}
      (<Foreign-List-Entry> name: entry  position: {Point 10 10} size: {Dimension 430 230})
      (<Horizontal-Line>                 position: {Point 10 253} size: {Dimension 430 8})
      (<Push-Button>        name: ok     title: "OK" position: {Point 138 268} size: {Dimension 80 24} action-handler: {Event-Handler :host on-ok} default?: #t)
      (<Push-Button>        name: cancel title: "Cancel" position: {Point 222 268} size: {Dimension 80 24} action-handler: {Event-Handler :host on-cancel})))

  
  (method override (finish rest)
    (nextmethod rest)
    (set-presenter~ (locate 'entry) present)
    (set-all~ (locate 'entry) (if foreign (map key (if (null? foreign-objects) (get-children~ foreign) (foreign-objects foreign))) all))
    (set-composite?~ (locate 'entry) composite?)
    (set-allow-duplicates?~ (locate 'entry) allow-duplicates?)
    (set-value~ (locate 'entry) value))
  
  
  (method override (install-in-host host)
    (nextmethod host)
    (guest-installed-in-host~ (locate 'entry))
    (set-title~ (get-host) (if composite?
                               "Choose Values"
                             "Choose Value")))
  
  
  ;;;
  ;;;; Present
  ;;;
  
  
  (definition (present object)
    (if (list? object)
        (join object ".")
      object))
  
  
  ;;;
  ;;;; Modal
  ;;;
  
  
  (method override (get-modal-result)
    (get-result~ (locate 'entry)))))
