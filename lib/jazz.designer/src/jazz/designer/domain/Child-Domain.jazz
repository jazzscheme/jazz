;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Child Domains
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.designer.domain.Child-Domain jazz


(import (jazz.designer)
        (jazz.library)
        (jazz.locale))


(class Child-Domain extends Domain
  
  
  (property filter-child initialize #f)
  
  
  (method (get-choices component)
    (let* ((children (get-children~ component))
           (filtered (if filter-child
                         (let ((filter-child (resolve-reference~ filter-child)))
                           (collect-if filter-child children))
                       children)))
      (cons (list #f "{}")
            (collect (lambda (child)
                       (let ((name (get-name~ child)))
                         (and name
                              (list name (symbol->string name)))))
                     filtered))))
  
  
  (method override (present value)
    (if (not value)
        "{}"
      (symbol->string value)))
  
  
  (method override (validate property value component root editor context manager)
    (validate-value property value component root editor context manager))
  
  
  (method override (validate-value property value component root editor context manager)
    (define (present-choice choice)
      (if (not (cdr choice))
          (car choice)
        (localize (cadr choice))))
    
    (let ((choices (get-choices component)))
      (when (not (member? value choices key: car))
        (add-violation~ manager (new Integrity-Violation message: (format "Property {a} must be one of {a}: {t}" (field-name property) (join (map present-choice choices) ", ") value) property: property) component root editor))))
  
  
  (method override (setup-entry view client)
    (if (> (length client) 1)
        (let ((entry (new Value-Entry parent: view size: (get-size~ view) domain: self)))
          (set-editable?~ (locate~ entry 'text) #f)
          entry)
      (let ((entry (new Enumeration-Entry parent: view size: (get-size~ view) domain: self)))
        (let ((combo (locate~ entry 'combo)))
          (set-choices~ combo (get-choices (car client))))
        entry)))
  
  ))
