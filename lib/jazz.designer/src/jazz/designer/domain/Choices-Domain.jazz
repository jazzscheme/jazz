;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Choices Domains
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.designer.domain.Choices-Domain jazz


(import (jazz.designer)
        (jazz.locale.components))


(class Choices-Domain extends List-Domain
  
  
  ;;;
  ;;;; Validation
  ;;;

  
  (method override (validate-value value (validation-context #f))
    (define (validate-presentation pair)
      (let* ((presentation (cadr pair))
             (module-metadata (and validation-context (get-module-metadata~ validation-context)))
             (locale-tree (and (is? module-metadata Toolbox-Module) (get-locale-tree~ module-metadata))))
        (validate-locales presentation locale-tree (lambda (format-string . rest)
                                                     (add-violation "Presentation {t}: {a}" presentation (apply format format-string rest))))))
    
    (or (nextmethod value validation-context)
        (if (not (every? (lambda (elt)
                           (and (list? elt)
                                (= 2 (length elt))))
                         value))
            (add-violation "must be an association list")
          (for-each validate-presentation value)
          (not-null? data-violations))))))

