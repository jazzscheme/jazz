;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Choices Domains
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2012
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.designer.domain.Choices-Domain jazz


(import (jazz.designer)
        (jazz.jml)
        (jazz.library)
        (jazz.locale)
        (jazz.locale.components))


(class Choices-Domain extends List-Domain
  
  
  ;;;
  ;;;; Validation
  ;;;

  
  (method override (validate-value property value component root editor context manager)
    (define (validate-presentation presentation)
      (define (add-presentation-violation format-string . rest)
        (add-violation~ manager
          (new Integrity-Violation 
            message: (apply format (append (list (concatenate "Presentation {t} in property '{a}' " format-string) 
                                                 presentation 
                                                 (localize (property-presentation~ (class-of component) property)))
                                           rest))
            property: (field-name property))
          component root editor))
      
      (validate-locales presentation (class-of root) add-presentation-violation))
    
    (nextmethod property value component root editor context manager)
    (cond ((null? value))
          ((or (not (list? value))
               (not (every? (lambda (elt) 
                              (and (list? elt) 
                                   (= 2 (length elt))))
                            value)))
           ((make-add-property-violation-proc property component root editor manager) "must be an association list"))
          (else
           (for-each (lambda (elt)
                       (validate-presentation (cadr elt)))
                     value))))))