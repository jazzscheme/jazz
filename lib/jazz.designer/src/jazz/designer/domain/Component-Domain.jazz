;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Component Domains
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.designer.domain.Component-Domain jazz


(import (jazz.designer)
        (jazz.library)
        (jazz.locale))



(class Component-Domain extends Domain

  
  (property filter-test initialize #f)
  (property value-map   initialize #f)
  
  
  (method virtual (domain-root-component client)
    (let ((guests (remove-duplicates (map get-guest~ client))))
      (when (= 1 (length guests))
        (get-parent~ (car guests)))))


  (method virtual (filter root component)
    (if filter-test
        ((resolve-reference~ filter-test) root component)
      #t))
  

  (method virtual (component->value root component)
    (if value-map
        ((resolve-reference~ value-map) root component)
      (get-name~ component)))
    
    
  (method virtual (make-values client)
    (let ((root (domain-root-component client)))
      (remove-duplicates (cons #f (map (lambda (component) (component->value root component))
                                       (collect-if (lambda (component) (filter root component)) 
                                                   (if root (collect-descendants~ root) '())))))))
      

  (method override (present value)
    (if (not value)
        "{}"
      (->string value :reader)))  

 
  (method override (validate property value component root editor context manager)
    (validate-value property value component root editor context manager))


  (method override (validate-value property value component root editor context manager)
    (let ((values (make-values (list component))))
      (unless (member? value values)        
        (let ((message (format "Property {a} must be one of {a}: {t}" (field-name property) (join (sort string>? (map present values)) ", ") value)))
          (add-violation~ manager (new Integrity-Violation message: message property: property) component root editor)))))
  
  
  (method override (setup-entry view client)
    (let ((choices (sort string>? (map (lambda (value) (list value (present value))) (make-values client)) key: cadr)))
      (if (= 1 (length choices))
          (let ((entry (new Value-Entry parent: view size: (get-size~ view) domain: self)))
            (set-editable?~ (locate~ entry 'text) #f)
            entry)
        (let ((entry (new Enumeration-Entry parent: view size: (get-size~ view) domain: self)))
          (set-choices~ (locate~ entry 'combo) choices)
          entry))))))
