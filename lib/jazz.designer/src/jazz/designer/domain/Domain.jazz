;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Domains
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2012
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.designer.domain.Domain jazz


(import (jazz.library)
        (jazz.locale)
        (jazz.designer))


(class Domain extends Component
  
  
  (property nullable? initialize #f accessors generate)
  
  
  (slot data-violations initialize '())
  
  
  ;;;
  ;;;; Validation
  ;;;
  
  
  (method (add-violation format-string . rest)
    (set! data-violations (cons (new Property-Violation message: (apply format (cons format-string rest))) data-violations))
    #t)
  

  (method public (collect-data-violations value validation-context)
    (set! data-violations '())
    (validate-data value validation-context: validation-context)
    (prog1 data-violations
      (set! data-violations '())))
  
    
  (method public virtual (validate-data value (validation-context: validation-context #f))
    (and (not value)
         (or nullable?
             (add-violation~ self "must be set"))))
  
  
  ;;;
  ;;;; Presentation
  ;;; 
 
  (method public virtual (present value)
    (error "{t} class does not define a present method" (category-name (class-of self))))
  
  
  ;;;
  ;;;; Parse
  ;;;
  
 
  (method public virtual (parse text)
    (error "{t} class does not define a parse method" (category-name (class-of self))))
  
  
  ;;;
  ;;;; Drawing
  ;;;
  
  
  (method public virtual (draw-data surface context value column row data width height)
    (draw-at~ column surface context row data 0 0 width height))
  
  
  ;;;
  ;;;; Entry
  ;;;
  
  
  (method public virtual (setup-entry view client)
    (new Text-Entry parent: view size: (get-size~ view) domain: self))
  
  
  (method public virtual (setup-list-entry view client)
    (error "Must override setup-list-entry"))
  
  
  ;;;
  ;;;; Value
  ;;;
  
  
  (method public virtual (get-property-presentation view)
    (get-presentation~ (get-entry~ view)))
  
  
  (method public virtual (set-property-presentation view presentation)
    (set-presentation~ (get-entry~ view) presentation))
  
  
  (method public virtual (get-property-value view)
    (get-value~ (get-entry~ view)))
  
  
  (method public virtual (set-property-value view value)
    (set-value~ (get-entry~ view) value))
  
  
  (method public virtual (get-property-modified? view)
    (get-modified?~ (get-entry~ view)))
  
  
  (method public virtual (set-property-modified? view value)
    (set-modified?~ (get-entry~ view) value))
  
  
  ;;;
  ;;;; Descriptor
  ;;;
  
  
  (method meta override (get-class-descriptor)
    (new Domain-Descriptor)))


;;;
;;;; Design
;;;


(submodule design


(import (jazz.designer)
        (jazz.jml))


(class Domain-Descriptor extends Component-Descriptor
  

  (form
    (<install>
      (<properties~>
        (<Property-Descriptor> name: nullable?
          (<Boolean-Domain>    name: domain))))))))
