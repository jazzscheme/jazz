;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Enumeration Domains
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2012
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.designer.domain.Enumeration-Domain jazz


(import (jazz.designer)
        (jazz.jml)
        (jazz.library)
        (jazz.locale))



(class Enumeration-Domain extends Domain
  
  
  (form
    (<install> nullable?: #t))
  
  
  (property choices                     initialize '() accessors generate)
  (property choices-handler             initialize #f  accessors generate)
  (property value->presentation-handler initialize #f  accessors generate)
  (property condensed?                  initialize #f  accessors generate)
  (property strict?                     initialize #f  accessors generate)
  (property limit                       initialize #f  accessors generate)
  (property nil-presentation            initialize {Locales all: "{}"} accessors generate)
    
  
  ;;;
  ;;;; Validation
  ;;;
  
  
  (method override (validate-data value (validation-context: validation-context #f))
    (or (nextmethod value validation-context: validation-context)
        choices-handler
        (let ((values (map car choices)))
          (unless (member? value values)
            (add-violation "must be one of: {a}" (join (map ->string (if nullable? (cons #f values) values)) ", "))))))

  
  ;;;
  ;;;; Presentation
  ;;;
  
  
  (method (value->text value)
    (if value->presentation-handler
        ((resolve-reference~ value->presentation-handler) value)
      (->string value)))
  
  
  (method override (present value)
    (localize (if (not value)
                  nil-presentation
                (let ((pair (and (not choices-handler) (assq value choices))))
                  (if (not pair)
                      (value->text value)
                    (cadr pair))))))
    
  
  ;;;
  ;;;; Entry
  ;;;
    
  
  (method (make-choices-list client)
    (if (not choices-handler)
        (map (lambda (pair)
               (bind (value presentation) pair
                 (list value (localize presentation))))
             (if nullable? 
                 (cons (list #f nil-presentation) choices)
               choices))
      (let ((dynamic-choices (map (lambda (value) 
                                    (list value (localize (value->text value))))
                                  ((resolve-reference~ choices-handler) client))))
        (sort string<=?
              (if nullable? 
                  (cons (list #f (localize nil-presentation)) dynamic-choices) 
                dynamic-choices)
              key: cadr))))
  
  
  (method override (setup-entry view client)
    (let ((entry (new Enumeration-Entry parent: view size: (get-size~ view) domain: self)))
      (let ((combo (locate~ entry 'combo)))
        (set-condensed?~ combo condensed?)
        (set-choices~ combo (make-choices-list client))
      entry)))
  
  
  (method override (setup-list-entry view client)
    (let ((entry (new Enumeration-List-Entry parent: view domain: self)))
      (setup~ entry client (make-choices-list client))
      entry))))
