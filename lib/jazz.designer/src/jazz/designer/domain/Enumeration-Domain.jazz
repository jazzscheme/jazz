;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Enumeration Domains
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library protected jazz.designer.domain.Enumeration-Domain jazz


(import (jazz.designer)
        (jazz.library)
        (jazz.locale)
        (jazz.utilities))


(class Enumeration-Domain extends Domain
  
  
  (attributes (nullable?)
    (width      initialize 100)
    (choices    initialize '())
    (condensed? initialize #t)
    (strict?    initialize #f)
    (limit      initialize {}))
  
  
  ;;;
  ;;;; Validation
  ;;;
  
  
  (method override (validate-value property value component root client context manager)
    (when (not (member? value choices key: car))
      (add-violation~ manager (new Integrity-Violation message: (format "Value must be one of {a}: {t}" (join (map present-choice choices) ", ") value) property: property) component root client)))
  
  
  (method (present-choice choice)
    (if (not (cdr choice))
        (car choice)
      (localize (cadr choice))))
  
  
  ;;;
  ;;;; Presentation
  ;;;
  
  
  (method override (present value)
    (if (not value)
        "{}"
      (let ((pair (assq value choices)))
        (if (not pair)
            value
          (localize (cadr pair))))))
  
  
  ;;;
  ;;;; Entry
  ;;;
  
  
  (method override (setup-entry view client)
    (let ((entry (new Enumeration-Entry parent: view size: (new Dimension width 19) domain: self)))
      (set-choices~ (locate~ entry 'combo) choices)))
  
  
  (method override (setup-list-entry view client)
    (let ((entry (new Enumeration-List-Entry parent: view domain: self)))
      (setup~ entry client choices)))))
