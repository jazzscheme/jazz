;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Integer Domains
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.designer.domain.Integer-Domain jazz


(import (jazz.designer)
        (jazz.library))


(class Integer-Domain extends Text-Domain
  
  
  (property upper-limit initialize #f accessors generate)
  (property lower-limit initialize #f accessors generate)
  
  
  ;;;
  ;;;; Validation
  ;;;
  
  
  (method override (validate-value property value component root editor context manager)
    (let ((message (cond ((not (integer? value))
                          (format "Value must be an integer: {t}" value))
                         ((and upper-limit (> value upper-limit))
                          (format "Value {t} must be lower than: {t}" value upper-limit))
                         ((and lower-limit (< value lower-limit))
                          (format "Value {t} must be higher than: {t}" value lower-limit))
                         (else #f))))
      (when message
        (add-violation~ manager (new Integrity-Violation message: message property: property) component root editor))))
  
  
  ;;;
  ;;;; Presentation
  ;;;
  
  
  (method override (present value)
    (if (not value)
        "{}"
      (->string value)))
  
  
  ;;;
  ;;;; Parse
  ;;;
  
  
  (method override (parse text)
    (if (equal? text "{}")
        #f
      (parse-integer text)))))
