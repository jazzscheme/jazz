;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Localized Domain
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2012
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.designer.domain.Localized-Domain jazz


(import (jazz.designer)
        (jazz.designer.view)
        (jazz.graphic)
        (jazz.jml)
        (jazz.library)
        (jazz.locale)
        (jazz.locale.components)
        (jazz.ui))


;;;
;;;; Localized-Domain
;;;


(class undocumented Localized-Domain extends Value-Domain

   
  (form
    (<install> nullable?: #t))
  
  
  ;;;
  ;;;; Validation
  ;;;
  
    
  (method override (validate-value value (validation-context #f))
    (or (nextmethod value validation-context)
        (let* ((toolbox-module (and validation-context (get-module-metadata~ validation-context)))
               (locale-tree (and toolbox-module (get-locale-tree~ toolbox-module))))
          (validate-locales value locale-tree add-violation))))
  
  
  ;;;
  ;;;; Entry
  ;;;
  
  
  (method override (setup-entry view client)
    (let ((unit-names (remove-duplicates (map (lambda (component)
                                                (string->symbol (car (split (symbol->string (get-name~ (class-of (or (get-creator~ component) component)))) ":"))))
                                              client)))
          (toolbox-modules (append-map get-toolbox-modules~ (get-toolbox-managers))))
      (new Localized-Entry
        parent: view
        domain: self
        locales: (or (and (= 1 (length unit-names))
                          (let ((toolbox-module (find toolbox-modules (car unit-names) key: get-module-name~ test: eq? return: 'item)))
                            (and toolbox-module
                                 (provide-locales~ (get-locale-tree~ toolbox-module)))))
                   '()))))))
