;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Component-Editor Controller
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.designer.editor.Component-Editor-Controller jazz


(import (jazz.io)
        (jazz.library)
        (jazz.ui)
        (jazz.ui.view))


(class undocumented Component-Editor-Controller extends Document-Controller
  
  
  (slot origin-form initialize #f)
  
  
  (method override (initialize . rest)
    (apply nextmethod rest)
    (set! origin-form (get-origin-form)))
  
  
  (method (get-origin-form)
    (let ((client (get-client~ document)))
      (and client
           (let ((origin (get-origin~ (get-form~ client))))
             (and origin (typecase origin
                           ((Class)
                            (get-class-form~ origin))
                           ((Runtime-Reference)
                            (let ((trait (resolve-runtime-reference origin)))
                              (and (is? trait Trait) (get-form~ trait))))
                           (else
                            #f)))))))
  
  ;; this is a quick fix that I know will break some other code!!!
  (method override (save)
    (save-content-patch~ document)
    (set! origin-form (get-origin-form)))
  
  
  (method override (save-as)
    (save-content-as-patch~ document)
    (set! origin-form (get-origin-form)))
  
  
  (method override (needs-reload?)
    (and origin-form
         (not (eq? origin-form (get-origin-form)))))
  
  
  (method meta override (propose-multiple-reloads)
    (message-box "Components have been modified elsewhere. You can reload them, losing your designer changes, or overwrite them."
                 title: "Components Status"
                 type: 'question
                 yes: "Reload"
                 no: "Overwrite"))
  
  
  (method override (propose-reload (propose-reload?: propose-reload? #t) (cancel-edition?: cancel-edition? #f))
    (let ((code (if (not propose-reload?)
                    'yes
                  (message-box (format "Component {s} has been modified elsewhere. You can reload it, losing your designer changes, or overwrite it." (name-status))
                               title: "Component Status"
                               type: 'question
                               yes: "Reload"
                               no: "Overwrite"))))
      (propose-reload-action code cancel-edition?: cancel-edition?)))
  
  
  (method override (propose-reload-action code (cancel-edition?: cancel-edition? #f))
    (let ((designer (get-designer~ document)))
      (case code
        ((no)
         (save)))
      (set! origin-form (get-origin-form))
      (reset-client~ document (get-origin~ (get-form~ designer)))))
  
  
  (method override (name-status)
    (define (find-origin)
      (let ((designer (get-designer~ document)))
        (when designer
          (let ((form (get-form~ designer)))
            (when form
              (get-origin~ form))))))
    
    (let ((origin (find-origin)))
      (format "{a} form"
              (cond ((not origin)
                     (effective-newname))
                    ((file? origin)
                     (get-name~ origin))
                    ((is? origin Runtime-Reference)
                     (symbol->string (third (serialize-runtime-reference origin))))
                    (else
                     (category-name origin))))))
  
  
  (method override (confirm-close)
    (when (get-modified?)
      (let ((code (message-box (format "Save changes to {a}?" (name-status))
                               type: 'confirmation)))
        (case code
          ((yes) (save-all))
          ((cancel) (signal-cancel))))))
  
  
  (method override (update-moniker-time moniker)
    )))
