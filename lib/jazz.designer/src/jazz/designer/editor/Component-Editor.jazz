;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Base For Component Editors
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.designer.editor.Component-Editor jazz


(import (jazz.application)
        (jazz.component)
        (jazz.component.descriptors)
        (jazz.descriptor)
        (jazz.designer)
        (jazz.designer.view)
        (jazz.document)
        (jazz.event)
        (jazz.handler)
        (jazz.integrity)
        (jazz.io)
        (jazz.locale)
        (jazz.platform)
        (jazz.reporter)
        (jazz.resource)
        (jazz.ui)
        (jazz.undoer)
        (jazz.view)
        (jazz.workspace))


(definition compare-trees
  (request-service 'compare-trees))


(class undocumented Component-Editor extends Layout-View implements Document

  
  (property client              initialize #f  accessors explicit)
  (property application-select? initialize #t  accessors generate)
  (property violations          initialize '() accessors generate)
  
  
  (slot designer            initialize #f getter generate)
  (slot listeners           initialize '())
  (slot selection           initialize '())
  (slot document-controller initialize #f)
  (slot rights              initialize #f accessors generate)
  (slot selection-locked?   initialize #f accessors generate)
  (slot violations-factory  initialize (new List-Factory))
  
  
  (method override (get-component-editor self)
    self)
  
  
  ;;;
  ;;;; Host
  ;;;
  

  (method meta override (host-icon self)
    {Image-Resource "Designer"})
  
  
  (method meta override (host-title self)
    "Edit")
  
  
  (method override (host-workspaces self)
    '(designer))
  
  
  (method override (install-in-host self host)
    (nextmethod self host)
    (update-status (get-document-controller self)))
  
  
  (method (install-scroller self)
    )
  
  
  ;;;
  ;;;; Document
  ;;;
  
  
  (method override (default-extension self)
    "jmf")
  
  
  (method override (extensions self)
    '(("JMF Files" . "jmf")))
  
  
  (method override (focus-document self)
    (acquire-focus self))
  
  
  (method override (current-history-item self)
    #f)
  
  
  (method override (get-page-setup self)
    (get-page-setup client))
  
  
  (method override (get-page-setup-designer self)
    (if (custom-page-setup? client)
        designer
      (get-page-setup-designer client)))
  
  
  (method override (get-page-setup-parcel self designer)
    (get-page-setup-parcel client designer))
  
  
  (method override (apply-page-setup self designer form page-setup)
    (apply-page-setup client designer form page-setup))
  
  
  ;;;
  ;;;; Controller
  ;;;


  (method override (get-document-controller self)
    (unless document-controller
      (set! document-controller (new-document-controller self)))
    document-controller)


  (method override (new-document-controller self)
    (new Component-Editor-Controller self))
  
  
  (method override (save self)
    (save (get-document-controller self)))
  
  
  (method override (save-as self)
    (save-as (get-document-controller self)))
  
  
  (method public virtual (save-all self)
    (save-all (get-document-controller self)))
  
  
  (method override (install-scroller? self)
    #f)


  (method package (get-moniker self)
    (get-moniker (get-document-controller self)))


  (method package (set-moniker self moniker)
    (set-moniker (get-document-controller self) moniker))


  (method override (load-content self moniker)
    (let* ((form (read-form moniker))
           (cpnt (instantiate form)))
      (set-client self cpnt)))
  
  
  (method override (verify-reload self)
    )
  
  
  (method override (reload-moniker self moniker)
    )


  (method override (get-modified? self)
    (get-modified? (get-document-controller self)))


  (method override (set-modified? self state)
    (set-modified? (get-document-controller self) state))
  
  
  (method protected virtual (set-document-controller-modified? self state)
    (set-modified? (get-document-controller self) state))
  
  
  (method package (update-status self)
    (update-status (get-document-controller self)))
  
  
  (method package (update-moniker-time self moniker)
    (update-moniker-time (get-document-controller self) moniker))
  
  
  (method override (confirm-close self . rest)
    (confirm-close (get-document-controller self)))
  
  
  (method override (compare-moniker self moniker)
    (let* ((left (new Document-Moniker moniker))
           (right moniker))
      (compare-trees left right)))


  (method override (tool-update self tool?)
    )


  (method override (console-update self console?)
    )


  ;;;
  ;;;; Initialization
  ;;;
  
  
  (method override (install self rest)
    (nextmethod self rest)
    (add-editor-listener self (new Event-Handler target: self method-name: 'on-editor)))


  ;;;
  ;;;; Destruction
  ;;;
  
  
  (method override (destroy self)
    (set-client self #f)
    (remove-editor-listener self self)
    (close-application-selected self)
    (nextmethod self))

  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method package (new-form self)
    )
  
  
  (method package (open-form self)
    @to-convert-cause-same-name
    (set-client (instantiate (open-form))))
  
  
  (method package (save-form self)
    (with-cursor :wait
      (lambda ()
        (save self)
        (let ((appl (get-application))
              (origin (get-origin (get-form designer))))
          (when (file? origin)
            (edit-document appl origin))))))
  
  
  (method package (edit-form self)
    (view-component self))
  
  
  (method public (try-out self)
    (if (not designer)
        (bell)
      (let ((class (get-origin (get-form designer))))
        (if (not (class? class))
            (bell)
          (save self)
          (let ((descriptor (get-descriptor class)))
            (let ((try-out? (and descriptor (can-try-out? descriptor class))))
              (cond ((not try-out?)
                     (bell))
                    ((null? (validate-integrity self box?: #f))
                     (try-out descriptor class))
                    (else
                     (if (eq? 'yes (message-box "Validation found errors, try out anyway?" yes: "Proceed" no: "Cancel"))
                         (try-out descriptor class)
                       (signal-cancel))))))))))

  
  ;;;
  ;;;; Traits
  ;;;
  
  
  (method public (select-trait self trait)
    (when (neq? trait (or (get-active-trait client) client))
      (with-cursor :wait
        (lambda ()
          (process-branch-changing self trait)))))
  
  
  (method (change-trait self trait)
    (set-active-trait (get-client self) trait)
    (process-branch-changed self trait))
  
  
  ;;;
  ;;;; Components
  ;;;
  
  
  (method package (select-component self tree control?)
    (when (and control? (get-highlight-edited? (locate self 'descendants)))
      (let ((component (selected-component tree)))
        (if (not component)
            (bell)
          (edit-component self component)))))

  
  (method (setup-components self)
    (for-each-descendant client (lambda (component _)
                                   (setup-component component))))
  
  
  ;;;
  ;;;; Properties
  ;;;
  
  
  (method package (find-changed-property self trait component property)
    #f
    @convert
    (let ((property (symbolize-property property))
          (undo-list (get-undo-list undoer)))
      (find-if (lambda (action)
                 (bind (tr cpn prop) action
                   (and (eq? tr trait)
                        (eq? cpn component)
                        (eq? prop property))))
               undo-list)))
  
  
  (method public (select-property self property)
    (process-property-selected self property))
  
  
  (method public virtual (show-properties self)
    (select-docked Properties-Manager workspace: #f focus?: #t))
  
  
  ;;;
  ;;;; Selection
  ;;;


  (method public (get-selection self)
    selection)


  (method virtual public (set-selection self new (origin: origin #f) (force-parent?: force-parent? #f) (force?: force? #f) (focus?: focus? #t))
    (let ((appl (get-application))
          (old selection))
      (unless (and (equal? old new) (eq? (get-selected-owner appl) self))
        (process-selection-changing self old new origin force-parent? force? focus?)
        (process-selection-changed self old new origin force-parent? force? focus?)
        (when application-select?
          (set-selected appl self new force?: force?)
          (update-focus-actions appl)))))
  
  
  (method (close-application-selected self)
    (let ((appl (get-application)))
      (close-selected appl self)))
  
  
  (method override (select-all self . rest)
    )
  
  
  (method public (unselect-all self)
    (set-selection self '()))
  
  
  (method public (select self component (focus?: focus? #t))
    (unless selection-locked?
      (if (or (control-down?) (shift-down?))
          (if (selected? self component)
              (set-selection self (remove component selection) origin: self focus?: focus?)
            (set-selection self (append selection (list component)) origin: self focus?: focus?))
        (if (selected? self component)
            (set-selection self (cons component (remove component selection)) origin: self focus?: focus?)
          (set-selection self (list component) origin: self focus?: focus?)))))
  
  
  (method public (selected? self component)
    (memq? component selection))
  
  
  (method protected virtual (selection-changed self old new origin force-parent? focus?)
    (assert (every? (lambda (component) (is? component Component)) new))
    (set! selection new)
    (for-each (lambda (component)
                (when (is? component Component)
                  (let ((surrogate (get-surrogate component)))
                    (when surrogate
                      (unselect surrogate)))))
              old)
    (for-each (lambda (component rank)
                (when (is? component Component)
                  (let ((surrogate (get-surrogate component)))
                    (when surrogate
                      (select surrogate rank focus?)))))
              selection
              (naturals 0 (length selection))))
  
  
  (method (with-common-parent-reselect self proc)
    (let ((parent (components-parent self selection)))
      (set-selection self '() origin: self)
      (proc)
      (set-selection self (if parent (list parent) '()) origin: self)))
  
  
  (method override (copy-selection self)
    (let ((selection (collect-oldest-ancestors selection client)))
      (copy-components designer selection)))
  
  
  (method override (cut-selection self)
    (let ((selection (collect-oldest-ancestors selection client)))
      (with-common-parent-reselect self
        (lambda ()
          (cut-components designer selection)))))
  
  
  (method override (delete-selection self (message: message "Delete selected objects?"))
    (define (confirm-close)
      (let ((code (message-box (localize message) type: 'confirmation)))
        (case code
          ((yes) #t)
          ((no) #f)
          ((cancel) (signal-cancel)))))
    
    (when (confirm-close)
      (let ((selection (collect-oldest-ancestors selection client)))
        (with-common-parent-reselect self
          (lambda ()
            (remove-selection self selection))))))
  
  
  (method protected virtual (remove-selection self selection)
    (remove-components designer selection))
  
  
  (method package (components-parent self components)
    (let ((parents (remove-duplicates (map get-parent components))))
      (if (= (length parents) 1)
          (car parents)
        #f)))
  
  
  ;; I am not sure this is the simplest solution to branches modifying components that where selected...
  (method (cleanup-selection self)
    (when (some? destroyed? selection)
      (set-selection self (collect-if (lambda (component)
                                   (not (destroyed? component)))
                                 selection))))
  
  
  (method public (toggle-lock-selection self)
    (set! selection-locked? (not selection-locked?)))
  
  
  ;;;
  ;;;; Save
  ;;;
  
  
  (method override (save-content self moniker)
    (process-saving self)
    (save-to designer moniker)
    (set-name designer (get-client self) (get-base moniker) trait: #f)
    (update-moniker-time self moniker)
    (if (not (get-modified? self))
        (update-status self)
      (set-modified? self #f))
    (process-saved self))
  
  
  (method package virtual (prepare-mode-switch self))
  
  
  (method (recreate-client self (form #f))
    (let* ((form (or form (get-form designer)))
           (origin (get-origin (get-form designer))))
      (typecase origin
        ((File) (instantiate form))
        ((Class) (new origin class-form: form))
        ((Runtime-Reference)
         (let ((obj (resolve-runtime-reference origin)))
           (if (is? obj Trait)
               (instantiate form)
             (error "Incompatible object"))))
        (else
         (instantiate form)))))
  
  
  (method package (refresh self)
    (set-client self (recreate-client self) recreate?: #t)
    (select self client))
  
  
  (method public (reset-client self target)
    (set-client self
      (typecase target
        ((File) (instantiate (read-form target)))
        ((Class) (make-class-edition-instance target))
        ((Runtime-Reference)
         (let ((obj (resolve-runtime-reference target)))
           (if (is? obj Trait)
               (make-trait-edition-instance target)
             (error "Incompatible object"))))))
    (select self client))
  
  
  (method virtual public (save-content-patch self)
    (process-saving self)
    (designer-save self)
    (set-modified? self #f))
  
  
  (method public (save-content-as-patch self)
    (process-saving self)
    (designer-save-as self)
    (set-modified? self #f))
  
  
  (method protected virtual (designer-save self)
    (save designer))
  
  
  (method protected virtual (designer-save-as self)
    (save-as designer))
  
  
  ;;;
  ;;;; Preview
  ;;;
  
  
  (method package virtual (preview self)
    )
  
  
  (method package virtual (previewing? self)
    #f)
  
  
  ;;;
  ;;;; Edit
  ;;;
  
  
  (method package (view-component self (workspace: workspace #f))
    (if (not designer)
        (bell)
      (edit-designer-form designer workspace: workspace)))
  
  
  ;;;
  ;;;; Edition
  ;;;
  
  
  (method (can-modify? self pred)
    (let ((selection (collect-oldest-ancestors selection client)))
      (and (every? (lambda (component) (neq? component client)) selection)
           (every? (lambda (component) (component-owned-by-reference? designer component)) selection)
           (pred selection))))
  
  
  (method public (can-delete-selection? self)
    (can-modify? self can-delete-components?))
  
  
  (method public (can-cut-selection? self)
    (can-modify? self can-cut-components?))
  
  
  (method public (can-copy-selection? self)
    (let ((selection (collect-oldest-ancestors selection client)))
      (and (every? (lambda (component) (neq? component client)) selection)
           (can-copy-components? selection))))
  
  
  (method public (can-rename-selection? self)
    (and (= (length selection) 1)
         (component-owned-by-reference? designer (car selection))
         (can-rename-component? (car selection))))
  
  
  (method public (can-send-selection-to-back? self)
    (can-modify? self (const #t)))
  
  
  (method public (can-bring-selection-to-front? self)
    (can-modify? self (const #t)))
  
  
  ;;;
  ;;;; Editor
  ;;;
  
  
  (method protected virtual (on-editor self evt)
    (case (get-kind evt)
      ((:branch-changing)
       (change-trait self (get-property evt trait:)))
      ((:branch-changed)
       (cleanup-selection self))
      ((:selection-changing :saving)
       (when (not-null? selection)
         (let ((cpn (car selection)))
           (when (is? cpn Component)
             (save-component-properties cpn designer)))))
      ((:selection-changed)
       (let ((old (get-old evt))
             (selection (get-selection evt))
             (origin (get-origin evt))
             (force-parent? (get-force-parent? evt))
             (focus? (get-user-origin evt)))
         (selection-changed self old selection origin force-parent? focus?)))))
  
  
  ;;;
  ;;;; Client
  ;;;


  (method public (get-client self)
    client)
  
  
  (method public (set-client self clt (recreate?: recreate? #f))
    (when (neq? clt client)
      (set-selection self '())
      (let ((old client))
        (when old
          (remove-surrogate old))
        (set! client clt)
        (client-update self)
        (edit-component self client)
        (process-client-change self old client recreate?: recreate?)
        (client-updated self))))
  
  
  (method package virtual (client-update self)
    (install-client-surrogate self))
  
  
  (method protected virtual (client-updated self)
    )
  
  
  (method protected virtual (install-client-surrogate self)
    )
  
  
  ;;;
  ;;;; Designer
  ;;;
  
  
  (method protected virtual (get-designer-class self)
    Designer)
  
  
  (method public (get-reference self)
    (and designer (get-reference designer)))
  
  
  (method public (edit-component self component (form: form #f))
    (when (neq? component (get-reference self))
      (let ((old designer))
        (uninstall-current-designer self)
        (when component
          (let ((form (or form (get-form component))))
            (install-current-designer self component form)))
        (process-designer-change self old designer)
        (update-status self))))
  
  
  (method protected virtual (install-current-designer self component form)
    (define (setup-undoer)
      (let ((undoer (get-undoer designer)))
        (set-preserve-state undoer preserve-state)
        (set-restore-state undoer restore-state)
        (set-reset-modified undoer reset-modified)))
    
    (define (preserve-state)
      (get-selection self))
    
    (define (restore-state state)
      (set-selection self state))
    
    (define (reset-modified)
      (reset-modified? designer)
      (set-modified? self #f))
      
    (set! designer (new (get-designer-class self) form: form reference: component))
    (setup-undoer)
    (add-designer-listener designer (new Event-Handler target: self method-name: 'on-designer))
    (install-designer client designer))
  
  
  (method protected virtual (uninstall-current-designer self)
    (when designer
      (remove-designer-listener designer self)
      (when client
        (uninstall-designer client designer))
      (set! designer #f)))
  
  
  (method protected virtual (on-designer self evt)
    (let ((kind (get-kind evt)))
      (case kind
        ((:property-change)
         (set-document-controller-modified? self #t))
        ((:child-remove)
         (let ((child (get-property evt child:)))
           (set-selection self (remove child selection test: eq?))
           (set-document-controller-modified? self #t)))
        ((:child-add :child-relocate :send-before)
         (set-document-controller-modified? self #t))
        ((:refresh)
         (set-selection self '())))
      (setup-components self)))


  ;;;
  ;;;; Integrity
  ;;;
  
  
  (method (get-integrity-manager self)
    (new Integrity-Manager))
  
  
  (method public (validate-integrity self (context: context #f) (reporter: reporter #f) (report?: report? #t) (box?: box? #t))
    (clear-violations self)
    (let* ((integrity-manager (get-integrity-manager self))
           (unit (string->symbol (car (split (symbol->string (get-name (class-of client))) ":"))))
           (module-metadata (find (append-map collect-toolbox-modules (get-toolbox-managers)) unit key: get-module-name return: 'item)))
      (setup-components self)
      (validate-integrity integrity-manager client module-metadata self context: context reporter: reporter)
      (set! violations (get-output violations-factory))
      (when report?
        (when reporter
          (report-message reporter "Displaying violations..."))
        (update (get-violations-manager self))
        (when box?
          (if (null? violations)
              (message-box (format "Found no integrity violations"))
            (let ((count (length violations)))
              (message-box (format "Found {a} integrity violation{a}" count (format-plural count)) @convert icon: @convert IDI_ERROR)
              (select-violations-manager self)))))
      violations))


  (method (get-violations-manager self)
    (get-guest (singleton-docked (violations-manager-class self))))
  
  
  (method public (select-violations-manager self)
    (let ((manager (get-violations-manager self)))
      (select-resultset manager)
      (select-first manager))
    (select-docked (violations-manager-class self) workspace: (violations-manager-workspace self) focus?: #t))
  
  
  (method protected virtual (violations-manager-class self)
    Violations-Manager)
  
  
  (method protected virtual (violations-manager-workspace self)
    #f)
  
  
  ;;;
  ;;;; Violations
  ;;;
  
  
  (method public (add-violation self violation)
    (put violations-factory violation))
  
  
  (method public (clear-violations self)
    (reset violations-factory)
    (set! violations '()))
  
  
  ;;;
  ;;;; Listeners
  ;;;
  
  
  (method public (add-editor-listener self listener)
    (set! listeners (add-listener listener listeners)))
  
  
  (method public (remove-editor-listener self listener)
    (set! listeners (remove-listener listener listeners)))

  
  (method (process-client-change self old client (recreate?: recreate? #f))
    (when listeners
      (let ((evt (make-event Editor-Event :client-change self old: old client: client recreate?: recreate?)))
        (for-each (lambda (listener)
                    (invoke listener self evt))
                  listeners))))

  
  (method (process-designer-change self old designer)
    (when listeners
      (let ((evt (make-event Editor-Event :designer-change self old: old designer: designer)))
        (for-each (lambda (listener)
                    (invoke listener self evt))
                  listeners))))

  
  (method public (process-branch-changing self trait)
    (when listeners
      (let ((evt (make-event Editor-Event :branch-changing self trait: trait)))
        (for-each (lambda (listener)
                    (invoke listener self evt))
                  listeners))))

  
  (method public (process-branch-changed self trait)
    (when listeners
      (let ((evt (make-event Editor-Event :branch-changed self trait: trait)))
        (for-each (lambda (listener)
                    (invoke listener self evt))
                  listeners))))

  
  (method public (process-selection-changing self old selection origin force-parent? force? user-origin)
    (when listeners
      (let ((evt (new Selection-Event :selection-changing self (modifiers-mask) old selection origin: origin force-parent?: force-parent? force?: force? user-origin: user-origin)))
        (for-each (lambda (listener)
                    (invoke listener self evt))
                  listeners))))

  
  (method public (process-selection-changed self old selection origin force-parent? force? user-origin)
    (when listeners
      (let ((evt (new Selection-Event :selection-changed self (modifiers-mask) old selection origin: origin force-parent?: force-parent? force?: force? user-origin: user-origin)))
        (for-each (lambda (listener)
                    (invoke listener self evt))
                  listeners))))

  
  (method public (process-property-selected self property)
    (when listeners
      (let ((evt (make-event Editor-Event :property-selected self property: property)))
        (for-each (lambda (listener)
                    (invoke listener self evt))
                  listeners))))

  
  (method public (process-saving self)
    (when listeners
      (let ((evt (make-event Editor-Event :saving self)))
        (for-each (lambda (listener)
                    (invoke listener self evt))
                  listeners))))

  
  (method public (process-saved self)
    (when listeners
      (let ((evt (make-event Editor-Event :saved self)))
        (for-each (lambda (listener)
                    (invoke listener self evt))
                  listeners))))
  
  
  ;;;
  ;;;; Presentation
  ;;;
  
  
  (method public virtual (editor-title self)
    (let ((reference (get-reference self)))
      (if (not reference)
          "Component Editor"
        (format "Component Editor - {s}" (category-identifier (class-of reference)))))))


;;;
;;;; Editor-Event
;;;


(class Editor-Event extends Event))
