;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Base For Component Editors
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.designer.editor.Component-Editor jazz


(import (jazz.designer)
        (jazz.designer.view)
        (jazz.io)
        (jazz.library)
        (jazz.library.component)
        (jazz.library.listener)
        (jazz.locale)
        (jazz.runtime)
        (jazz.ui)
        (jazz.ui.view)
        (jazz.system))


(class undocumented Component-Editor extends Layout-View implements Document

  
  (property client              initialize #f  accessors explicit)
  (property application-select? initialize #t  accessors generate)
  (property violations          initialize '() accessors generate)
  
  
  (slot designer            initialize #f getter generate)
  (slot listeners           initialize '())
  (slot selection           initialize '())
  (slot document-controller initialize #f)
  (slot rights              initialize #f accessors generate)
  (slot selection-locked?   initialize #f accessors generate)
  (slot violations-factory  initialize (new List-Factory))
  
  
  (method override (get-component-editor)
    self)
  
  
  ;;;
  ;;;; Host
  ;;;
  

  (method meta override (host-icon)
    {Image-Resource "Designer"})
  
  
  (method meta override (host-title)
    "Edit")
  
  
  (method override (install-in-host host)
    (nextmethod host)
    (update-status~ (get-document-controller)))
  
  
  (method (install-scroller)
    )
  
  
  ;;;
  ;;;; Document
  ;;;
  
  
  (method override (default-extension)
    "jmf")
  
  
  (method override (extensions)
    '(("JMF Files" . "jmf")))
  
  
  (method override (focus-document)
    (acquire-focus))
  
  
  (method override (current-history-item)
    #f)
  
  
  (method override (get-page-setup)
    (get-page-setup~ client))
  
  
  (method override (get-page-setup-designer)
    (if (custom-page-setup?~ client)
        designer
      (get-page-setup-designer~ client)))
  
  
  (method override (get-page-setup-parcel designer)
    (get-page-setup-parcel~ client designer))
  
  
  (method override (apply-page-setup designer form page-setup)
    (apply-page-setup~ client designer form page-setup))
  
  
  ;;;
  ;;;; Controller
  ;;;


  (method override (get-document-controller)
    (unless document-controller
      (set! document-controller (new-document-controller)))
    document-controller)


  (method override (new-document-controller)
    (new Component-Editor-Controller self))
  
  
  (method override (save)
    (save~ (get-document-controller)))
  
  
  (method override (save-as)
    (save-as~ (get-document-controller)))
  
  
  (method public virtual (save-all)
    (save-all~ (get-document-controller)))
  
  
  (method override (install-scroller?)
    #f)


  (method (get-moniker)
    (get-moniker~ (get-document-controller)))


  (method (set-moniker moniker)
    (set-moniker~ (get-document-controller) moniker))


  (method override (load-content moniker)
    (let* ((form (read-form moniker))
           (cpnt (instantiate~ form)))
      (set-client cpnt)))
  
  
  (method override (verify-reload)
    )
  
  
  (method override (reload-moniker moniker)
    )


  (method override (get-modified?)
    (get-modified?~ (get-document-controller)))


  (method override (set-modified? state)
    (set-modified?~ (get-document-controller) state))
  
  
  (method protected virtual (set-document-controller-modified? state)
    (set-modified?~ (get-document-controller) state))
  
  
  (method (update-status)
    (update-status~ (get-document-controller)))
  
  
  (method (update-moniker-time moniker)
    (update-moniker-time~ (get-document-controller) moniker))
  
  
  (method override (confirm-close . rest)
    (confirm-close~ (get-document-controller)))
  
  
  (method override (compare-moniker moniker)
    (let* ((left (new Document-Moniker moniker))
           (right moniker)
           (frame (new-frame (require-service 'Compare-Databases) host-visible?: #f left-moniker: left right-moniker: right)))
      (with-cursor :wait
        (lambda ()
          (compare-trees~ (get-guest~ frame))
          (focus-host~ frame)))))


  (method override (tool-update tool?)
    )


  (method override (console-update console?)
    )


  ;;;
  ;;;; Initialization
  ;;;
  
  
  (method override (install rest)
    (nextmethod rest)
    (add-editor-listener (new Event-Handler target: self method-name: 'on-editor)))


  ;;;
  ;;;; Destruction
  ;;;
  
  
  (method override (destroy)
    (set-client #f)
    (remove-editor-listener self)
    (close-application-selected)
    (nextmethod))

  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method package (new-form)
    )
  
  
  (method package (open-form)
    @to-convert-cause-same-name
    (set-client (instantiate~ (open-form))))
  
  
  (method package (save-form)
    (with-cursor :wait
      (lambda ()
        (save)
        (let ((appl (get-application))
              (origin (get-origin~ (get-form~ designer))))
          (when (file? origin)
            (edit-document~ appl origin))))))
  
  
  (method package (edit-form)
    (view-component))
  
  
  ;;;
  ;;;; Traits
  ;;;
  
  
  (method public (select-trait trait)
    (when (neq? trait (or (get-active-trait~ client) client))
      (with-cursor :wait
        (lambda ()
          (process-branch-changing trait)))))
  
  
  (method (change-trait trait)
    (set-active-trait~ (get-client) trait)
    (process-branch-changed trait))
  
  
  ;;;
  ;;;; Components
  ;;;
  
  
  (method (select-component tree control?)
    (when (and control? (get-highlight-edited?~ (locate 'descendants)))
      (let ((component (selected-component~ tree)))
        (if (not component)
            (bell)
          (edit-component component)))))

  
  ;;;
  ;;;; Properties
  ;;;
  
  
  (method protected (find-changed-property trait component property)
    #f
    @convert
    (let ((property (symbolize-property property))
          (undo-list (get-undo-list~ undoer)))
      (find-if (lambda (action)
                 (bind (tr cpn prop) action
                   (and (eq? tr trait)
                        (eq? cpn component)
                        (eq? prop property))))
               undo-list)))
  
  
  (method public (select-property property)
    (process-property-selected property))
  
  
  (method public virtual (show-properties)
    (select-docked Properties-Manager workspace: #f focus?: #t))
  
  
  ;;;
  ;;;; Selection
  ;;;


  (method public (get-selection)
    selection)


  (method virtual public (set-selection new (origin: origin #f) (force-parent?: force-parent? #f) (force?: force? #f) (focus?: focus? #t))
    (let ((appl (get-application))
          (old selection))
      (unless (and (equal? old new) (eq? (get-selected-owner~ appl) self))
        (process-selection-changing old new origin force-parent? force? focus?)
        (process-selection-changed old new origin force-parent? force? focus?)
        (when application-select?
          (set-selected~ appl self new force?: force?)
          (update-focus-actions~ appl)))))
  
  
  (method (close-application-selected)
    (let ((appl (get-application)))
      (close-selected~ appl self)))
  
  
  (method override (select-all . rest)
    )
  
  
  (method public (unselect-all)
    (set-selection '()))
  
  
  (method public (select component (focus?: focus? #t))
    (unless selection-locked?
      (if (or (control-down?) (shift-down?))
          (if (selected? component)
              (set-selection (remove component selection) origin: self focus?: focus?)
            (set-selection (append selection (list component)) origin: self focus?: focus?))
        (if (selected? component)
            (set-selection (cons component (remove component selection)) origin: self focus?: focus?)
          (set-selection (list component) origin: self focus?: focus?)))))
  
  
  (method public (selected? component)
    (memq? component selection))
  
  
  (method protected virtual (selection-changed old new origin force-parent? focus?)
    (assert (every? (lambda (component) (is? component Component)) new))
    (set! selection new)
    (for-each (lambda (component)
                (when (is? component Component)
                  (let ((surrogate (get-surrogate~ component)))
                    (when surrogate
                      (unselect~ surrogate)))))
              old)
    (for-each (lambda (component rank)
                (when (is? component Component)
                  (let ((surrogate (get-surrogate~ component)))
                    (when surrogate
                      (select~ surrogate rank focus?)))))
              selection
              (naturals 0 (length selection))))
  
  
  (method (with-common-parent-reselect proc)
    (let ((parent (components-parent selection)))
      (set-selection '() origin: self)
      (proc)
      (set-selection (if parent (list parent) '()) origin: self)))
  
  
  (method override (copy-selection)
    (let ((selection (collect-oldest-ancestors selection client)))
      (copy-components~ designer selection)))
  
  
  (method override (cut-selection)
    (let ((selection (collect-oldest-ancestors selection client)))
      (with-common-parent-reselect
        (lambda ()
          (cut-components~ designer selection)))))
  
  
  (method override (delete-selection (message: message "Delete selected objects?"))
    (define (confirm-close)
      (let ((code (message-box (localize message) type: 'confirmation)))
        (case code
          ((yes) #t)
          ((no) #f)
          ((cancel) (throw-cancel)))))
    
    (when (confirm-close)
      (let ((selection (collect-oldest-ancestors selection client)))
        (with-common-parent-reselect
          (lambda ()
            (remove-components~ designer selection))))))
  
  
  (method package (components-parent components)
    (let ((parents (remove-duplicates (map get-parent~ components))))
      (if (= (length parents) 1)
          (car parents)
        #f)))
  
  
  ;; I am not sure this is the simplest solution to branches modifying components that where selected...
  (method (cleanup-selection)
    (when (some? destroyed?~ selection)
      (set-selection (collect-if (lambda (component)
                                   (not (destroyed?~ component)))
                                 selection))))
  
  
  (method public (toggle-lock-selection)
    (set! selection-locked? (not selection-locked?)))
  
  
  ;;;
  ;;;; Save
  ;;;
  
  
  (method override (save-content moniker)
    (process-saving)
    (save-to~ designer moniker)
    (set-name~ designer (get-client) (get-base~ moniker) trait: #f)
    (update-moniker-time moniker)
    (if (not (get-modified?))
        (update-status)
      (set-modified? #f))
    (process-saved))
  
  
  (method (refresh)
    (define (confirm-refresh)
      (let ((code (message-box "You must save before refreshing. Save changes?"
                               type: 'confirmation)))
        (case code
          ((yes) #t)
          ((no) (throw-cancel))
          ((cancel) (throw-cancel)))))
    
    (let ((destination (if (get-modified?)
                           (when (confirm-refresh)
                             (designer-save))
                         (get-origin~ (get-form~ designer)))))
      (set-modified? #f)
      (reset-client destination)))
  
  
  (method public (reset-client target)
    (set-client
      (typecase target
        ((File) (instantiate~ (read-form target)))
        ((Class) (make-class-edition-instance target))
        ((Runtime-Reference)
         (let ((obj (resolve-runtime-reference target)))
           (if (is? obj Trait)
               (make-trait-edition-instance target)
             (error "Incompatible object"))))))
    (select client))
  
  
  (method public (save-patch thunk)
    (process-saving)
    (let* ((origin (get-origin~ (get-form~ designer)))
           (destination (thunk)))
      (if (not (get-modified?))
          (update-status)
        (set-modified? #f))
      (unless (origin-equal? origin destination)
        (reset-client destination))))
  
  
  (method public (save-content-patch)
    (save-patch designer-save))
  
  
  (method public (save-content-as-patch)
    (save-patch designer-save-as))
  
  
  (method protected virtual (designer-save)
    (save~ designer))
  
  
  (method protected virtual (designer-save-as)
    (save-as~ designer))
  
  
  ;;;
  ;;;; Try Out
  ;;;
  
  
  (method protected virtual (toggle-try-out)
    )
  
  
  (method protected virtual (trying-out?)
    #f)
  
  
  ;;;
  ;;;; Edit
  ;;;
  
  
  (method (view-component (workspace: workspace #f))
    (if (not designer)
        (bell)
      (edit-form~ designer workspace: workspace)))
  
  
  ;;;
  ;;;; Edition
  ;;;
  
  
  (method (can-modify? pred)
    (let ((selection (collect-oldest-ancestors selection client)))
      (and (every? (lambda (component) (neq? component client)) selection)
           (every? (~ component-owned-by-reference? designer) selection)
           (pred selection))))
  
  
  (method public (can-delete-selection?)
    (can-modify? can-delete-components?))
  
  
  (method public (can-cut-selection?)
    (can-modify? can-cut-components?))
  
  
  (method public (can-copy-selection?)
    (let ((selection (collect-oldest-ancestors selection client)))
      (and (every? (lambda (component) (neq? component client)) selection)
           (can-copy-components? selection))))
  
  
  (method public (can-rename-selection?)
    (and (= (length selection) 1)
         (component-owned-by-reference?~ designer (car selection))
         (can-rename-component?~ (car selection))))
  
  
  (method public (can-send-selection-to-back?)
    (can-modify? (const #t)))
  
  
  (method public (can-bring-selection-to-front?)
    (can-modify? (const #t)))
  
  
  ;;;
  ;;;; Editor
  ;;;
  
  
  (method protected virtual (on-editor evt)
    (case (get-kind~ evt)
      ((:branch-changing)
       (change-trait (get-property~ evt trait:)))
      ((:branch-changed)
       (cleanup-selection))
      ((:selection-changing :saving)
       (when (not-null? selection)
         (let ((cpn (car selection)))
           (when (is? cpn Component)
             (save-component-properties~ cpn designer)))))
      ((:selection-changed)
       (let ((old (get-old~ evt))
             (selection (get-selection~ evt))
             (origin (get-origin~ evt))
             (force-parent? (get-force-parent?~ evt))
             (focus? (get-user-origin~ evt)))
         (selection-changed old selection origin force-parent? focus?)))))
  
  
  ;;;
  ;;;; Client
  ;;;


  (method public (get-client)
    client)
  
  
  (method public (set-client clt)
    (when (neq? clt client)
      (set-selection '())
      (let ((old client))
        (when old
          (remove-surrogate~ old))
        (set! client clt)
        (client-update)
        (edit-component client)
        (process-client-change old client)
        (client-updated))))
  
  
  (method protected virtual (client-update)
    (install-client-surrogate))
  
  
  (method protected virtual (client-updated)
    )
  
  
  (method protected virtual (install-client-surrogate)
    )
  
  
  ;;;
  ;;;; Designer
  ;;;
  
  
  (method protected virtual (get-designer-class)
    Designer)
  
  
  (method public (get-reference)
    (and designer (get-reference~ designer)))
  
  
  (method public (edit-component component (form: form #f))
    (when (neq? component (get-reference))
      (let ((old designer))
        (uninstall-current-designer)
        (when component
          (let ((form (or form (get-form~ component))))
            (install-current-designer component form)))
        (process-designer-change old designer)
        (update-status))))
  
  
  (method protected virtual (install-current-designer component form)
    (define (setup-undoer)
      (let ((undoer (get-undoer~ designer)))
        (set-preserve-state~ undoer preserve-state)
        (set-restore-state~ undoer restore-state)
        (set-reset-modified~ undoer reset-modified)))
    
    (define (preserve-state)
      (get-selection))
    
    (define (restore-state state)
      (set-selection state))
    
    (define (reset-modified)
      (reset-modified?~ designer)
      (set-modified? #f))
      
    (set! designer (new (get-designer-class) form: form reference: component))
    (setup-undoer)
    (add-designer-listener~ designer (new Event-Handler target: self method-name: 'on-designer))
    (install-designer~ client designer))
  
  
  (method protected virtual (uninstall-current-designer)
    (when designer
      (remove-designer-listener~ designer self)
      (when client
        (uninstall-designer~ client designer))
      (set! designer #f)))
  
  
  (method protected virtual (on-designer evt)
    (let ((kind (get-kind~ evt)))
      (case kind
        ((:property-change)
         (set-document-controller-modified? #t))
        ((:child-remove)
         (let ((child (get-property~ evt child:)))
           (set-selection (remove child selection test: eq?))
           (set-document-controller-modified? #t)))
        ((:child-add :child-relocate :send-before)
         (set-document-controller-modified? #t))
        ((:refresh)
         (set-selection '())))))


  ;;;
  ;;;; Integrity
  ;;;
  
  
  (method override (get-integrity-manager)
    (new Integrity-Manager))
  
  
  (method public (validate-integrity (context: context #f) (reporter: reporter #f) (report?: report? #t))
    (define (update-violations-manager violations)
      (let ((manager (get-violations-manager)))
        (update~ manager)))
    
    (let ((integrity-manager (get-integrity-manager)))
      (reset~ violations-factory)
      (validate-integrity~ integrity-manager client self context: context reporter: reporter)
      (set! violations (get-output~ violations-factory))
      (when report?
        (when reporter
          (user-message~ reporter "Displaying violations..."))
        (let ((presentation (get-presentation-property)))
          (update-violations-manager violations)
          (if (null? violations)
              (message-box (format "No integrity violation found in {a}" presentation))
            (let ((count (length violations)))
              (message-box (format "Found {a} integrity violation{a} in {a}" count (format-plural count) presentation) @convert icon: @convert IDI_ERROR)
              (select-violations-manager)))))
      violations))


  (method (get-violations-manager)
    (get-guest~ (singleton-docked (violations-manager-class) #f)))
  
  
  (method public (select-violations-manager)
    (let ((manager (get-violations-manager)))
      (select-resultset~ manager)
      (select-first~ manager))
    (select-docked (violations-manager-class) workspace: (violations-manager-workspace) focus?: #t))
  
  
  (method protected virtual (violations-manager-class)
    Violations-Manager)
  
  
  (method protected virtual (violations-manager-workspace)
    #f)
  
  
  ;;;
  ;;;; Violations
  ;;;
  
  
  (method public (add-violation violation)
    (put~ violations-factory violation))
  
  
  (method public (clear-violations)
    (reset~ violations-factory)
    (set! violations '()))
  
  
  ;;;
  ;;;; Listeners
  ;;;
  
  
  (method public (add-editor-listener listener)
    (set! listeners (add-listener listener listeners)))
  
  
  (method public (remove-editor-listener listener)
    (set! listeners (remove-listener listener listeners)))

  
  (method (process-client-change old client)
    (when listeners
      (let ((evt (new Editor-Event :client-change self old: old client: client)))
        (for-each (lambda (listener)
                    (invoke~ listener self evt))
                  listeners))))

  
  (method (process-designer-change old designer)
    (when listeners
      (let ((evt (new Editor-Event :designer-change self old: old designer: designer)))
        (for-each (lambda (listener)
                    (invoke~ listener self evt))
                  listeners))))

  
  (method public (process-branch-changing trait)
    (when listeners
      (let ((evt (new Editor-Event :branch-changing self trait: trait)))
        (for-each (lambda (listener)
                    (invoke~ listener self evt))
                  listeners))))

  
  (method public (process-branch-changed trait)
    (when listeners
      (let ((evt (new Editor-Event :branch-changed self trait: trait)))
        (for-each (lambda (listener)
                    (invoke~ listener self evt))
                  listeners))))

  
  (method public (process-selection-changing old selection origin force-parent? force? user-origin)
    (when listeners
      (let ((evt (new Selection-Event :selection-changing self old selection origin: origin force-parent?: force-parent? force?: force? user-origin: user-origin)))
        (for-each (lambda (listener)
                    (invoke~ listener self evt))
                  listeners))))

  
  (method public (process-selection-changed old selection origin force-parent? force? user-origin)
    (when listeners
      (let ((evt (new Selection-Event :selection-changed self old selection origin: origin force-parent?: force-parent? force?: force? user-origin: user-origin)))
        (for-each (lambda (listener)
                    (invoke~ listener self evt))
                  listeners))))

  
  (method public (process-property-selected property)
    (when listeners
      (let ((evt (new Editor-Event :property-selected self property: property)))
        (for-each (lambda (listener)
                    (invoke~ listener self evt))
                  listeners))))

  
  (method public (process-saving)
    (when listeners
      (let ((evt (new Editor-Event :saving self)))
        (for-each (lambda (listener)
                    (invoke~ listener self evt))
                  listeners))))

  
  (method public (process-saved)
    (when listeners
      (let ((evt (new Editor-Event :saved self)))
        (for-each (lambda (listener)
                    (invoke~ listener self evt))
                  listeners))))
  
  
  ;;;
  ;;;; Presentation
  ;;;
  
  
  (method public virtual (editor-title)
    (let ((reference (get-reference)))
      (if (not reference)
          "Component Editor"
        (format "Component Editor - {s}" (category-identifier (class-of reference))))))))
