;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Base For Component Editors
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.designer.editor.Component-Editor jazz


(import (jazz.designer)
        (jazz.io)
        (jazz.library)
        (jazz.library.component)
        (jazz.library.listener)
        (jazz.locale)
        (jazz.platform)
        (jazz.ui)
        (jazz.ui.view)
        (jazz.system))


(class undocumented Component-Editor extends Layout-View implements Document

  
  (property client initialize #f accessors explicit)
  
  
  (slot designer   initialize #f getter generate)
  (slot listeners  initialize '())
  (slot undoer     initialize #f)
  (slot selection  initialize '())
  (slot controller initialize #f)
  (slot rights     initialize #f accessors generate)
  
  
  (method override (get-component-editor)
    self)
  
  
  ;;;
  ;;;; Host
  ;;;
  

  (method meta override (host-icon)
    {Image-Resource "Designer"})
  
  
  (method meta override (host-title)
    "Edit")
  
  
  (method override (install-in-host host)
    (nextmethod host)
    (update-status~ (get-controller)))
  
  
  (method (install-scroller)
    )
  
  
  ;;;
  ;;;; Document
  ;;;
  
  
  (method override (default-extension)
    "jmf")
  
  
  (method override (extensions)
    '(("JMF Files" . "jmf")))
  
  
  (method override (focus-document)
    (acquire-focus))
  
  
  (method override (current-history-item));;abstract
  
  
  ;;;
  ;;;; Controller
  ;;;


  (method override (get-controller)
    (unless controller
      (set! controller (new-controller)))
    controller)


  (method override (new-controller)
    (new Component-Editor-Controller self))
  
  
  (method override (save)
    (save~ (get-controller)))
  
  
  (method override (save-as)
    (save-as~ (get-controller)))
  
  
  (method public virtual (save-all)
    (save-all~ (get-controller)))
  
  
  (method override (install-scroller?)
    #f)


  (method (get-moniker)
    (get-moniker~ (get-controller)))


  (method (set-moniker moniker)
    (set-moniker~ (get-controller) moniker))


  (method override (load-content moniker)
    (let* ((form (read-from-file moniker))
           (cpnt (instantiate~ form)))
      (set-client cpnt)))
  
  
  (method override (verify-reload)
    )
  
  
  (method override (reload-moniker moniker)
    )


  (method override (get-modified?)
    (get-modified?~ (get-controller)))


  (method override (set-modified? state)
    (set-modified?~ (get-controller) state))
  
  
  (method protected virtual (set-controller-modified? state)
    (set-modified?~ (get-controller) state))
  
  
  (method (update-status)
    (update-status~ (get-controller)))
  
  
  (method (update-moniker-time moniker)
    (update-moniker-time~ (get-controller) moniker))
  
  
  (method override (confirm-close . rest)
    (confirm-close~ (get-controller)))
  
  
  (method override (compare-moniker moniker)
    (let* ((left (new Document-Moniker moniker))
           (right moniker)
           (frame (new-frame (require-service 'Compare-Databases) host-visible?: #f left-moniker: left right-moniker: right)))
      (with-cursor :wait
        (lambda ()
          (compare-trees~ (get-guest~ frame))
          (focus-host~ frame)))))


  (method override (tool-update tool?)
    )


  (method override (console-update console?)
    )


  ;;;
  ;;;; Initialization
  ;;;
  
  
  (method override (install rest)
    (nextmethod rest)
    (add-editor-listener (new Event-Handler target: self method-name: 'on-editor)))


  ;;;
  ;;;; Destruction
  ;;;
  
  
  (method override (destroy)
    (set-client #f)
    (close~ controller)
    (remove-editor-listener self)
    (close-application-selected)
    (nextmethod))

  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method package (new-form)
    )
  
  
  (method package (open-form)
    @to-convert-cause-same-name
    (set-client (instantiate~ (open-form))))
  
  
  (method package (save-form)
    (with-cursor :wait
      (lambda ()
        (save)
        (let ((appl (get-application))
              (origin (get-origin~ (get-form~ designer))))
          (when (file? origin)
            (edit-document~ appl origin))))))
  
  
  (method package (edit-form)
    (view-component))
  
  
  ;;;
  ;;;; Traits
  ;;;
  
  
  (method public (select-trait trait)
    (when (neq? trait (or (get-active-trait~ client) client))
      (with-cursor :wait
        (lambda ()
          (process-branch-changing trait)))))
  
  
  (method (change-trait trait)
    (set-active-trait~ (get-client) trait)
    (process-branch-changed trait))
  
  
  ;;;
  ;;;; Components
  ;;;
  
  
  (method (select-component tree control?)
    (when (and control? (get-highlight-edited?~ (locate 'descendants)))
      (let ((component (selected-component~ tree)))
        (if (not component)
            (bell)
          (edit-component component)))))

  
  ;;;
  ;;;; Properties
  ;;;
  
  
  (method protected (property-change trait component property value undoable?)
    (when undoable?
      (let ((category (get-category~ (class-of component) property))
            (property (symbolize-property property)))
        (unless (or (= (get-rank~ category) 0) (find-changed-property trait component property))
          (register-undo~ undoer (list trait component property))))))
  
  
  (method protected (find-changed-property trait component property)
    (let ((property (symbolize-property property))
          (undo-list (get-undo-list~ undoer)))
      (find-if (lambda (action)
                 (bind (tr cpn prop) action
                   (and (eq? tr trait)
                        (eq? cpn component)
                        (eq? prop property))))
               undo-list)))
  
  
  (method public (select-property property)
    (process-property-selected property))
  
  
  (method public virtual (show-properties)
    (select-docked Properties-Manager workspace: #f focus?: #t))
  
  
  ;;;
  ;;;; Selection
  ;;;


  (method public (get-selection)
    selection)


  (method public (set-selection new (origin: origin #f) (force-parent?: force-parent? #f) (force?: force? #f) (focus?: focus? #t))
    (let ((appl (get-application))
          (old selection))
      (process-selection-changing old new origin force-parent? force? focus?)
      (process-selection-changed old new origin force-parent? force? focus?)
      (set-selected~ appl self new force?: force?)
      (update-focus-actions~ appl)))
  
  
  (method protected (outer-selection)
    (let ((reference (get-reference)))
      (map (lambda (component)
             (outer-component~ component reference))
           selection)))
  
  
  (method (close-application-selected)
    (let ((appl (get-application)))
      (close-selected~ appl self)))
  
  
  (method override (select-all . rest)
    )
  
  
  (method public (unselect-all)
    (set-selection '()))
  
  
  (method public (select component (focus?: focus? #t))
    (if (control-down?)
        (if (memq? component selection)
            (set-selection (remove component selection) origin: self focus?: focus?)
          (set-selection (append selection (list component)) origin: self focus?: focus?))
      (if (memq? component selection)
          (set-selection (cons component (remove component selection)) origin: self focus?: focus?)
        (set-selection (list component) origin: self focus?: focus?))))
  
  
  (method protected virtual (selection-changed old new origin force-parent? focus?)
    (set! selection new)
    (for-each (lambda (component)
                (when (is? component Component)
                  (let ((surrogate (get-surrogate~ component)))
                    (when surrogate
                      (unselect~ surrogate)))))
              old)
    (for-each (lambda (component rank)
                (when (is? component Component)
                  (let ((surrogate (get-surrogate~ component)))
                    (when surrogate
                      (select~ surrogate rank focus?)))))
              selection
              (naturals 0 (length selection))))
  
  
  (method override (delete-selection)
    (define (confirm-close)
      (confirm-action "Delete selected objects?"))
    
    (define (confirm-action text)
      (let ((code (message-box (localize text) type: 'confirmation)))
        (case code
          ((yes) #t)
          ((no) #f)
          ((cancel) (throw-cancel)))))
    
    (let ((components (outer-selection)))
      (when (confirm-close)
        (let ((parent (components-parent components)))
          (for-each (lambda (component)
                      (let ((surrogate (get-surrogate~ component)))
                        (remove-child~ (get-designer~ (get-editor~ surrogate)) (get-client~ surrogate))))
                    components)
          (set-selection (if parent (list parent) '()) origin: self)))))
  
  
  (method package (components-parent components)
    (let ((parents (remove-duplicates (map get-parent~ components))))
      (if (= (length parents) 1)
          (car parents)
        #f)))
  
  
  ;; I am not sure this is the simplest solution to branches modifying components that where selected...
  (method (cleanup-selection)
    (when (some? destroyed?~ selection)
      (set-selection (collect-if (lambda (component)
                                   (not (destroyed?~ component)))
                                 selection))))
  
  
  ;;;
  ;;;; Save
  ;;;
  
  
  (method override (save-content moniker)
    (process-saving)
    (save-to~ designer moniker)
    (set-name~ designer (get-client) (get-base~ moniker) trait: #f)
    (update-moniker-time moniker)
    (if (not (get-modified?))
        (update-status)
      (set-modified? #f))
    (process-saved))
  
  
  ;; temp patch to make saving in the view designer work
  (method public (save-content-patch moniker)
    (process-saving)
    (designer-save)
    (update-moniker-time moniker)
    (if (not (get-modified?))
        (update-status)
      (set-modified? #f)))
  
  
  (method protected virtual (designer-save)
    (save~ designer))

  
  ;;;
  ;;;; Edit
  ;;;
  
  
  (method (view-component)
    (if (not designer)
        (bell)
      (edit-form~ designer)))
  
  
  ;;;
  ;;;; Editor
  ;;;
  
  
  (method protected virtual (on-editor evt)
    (case (get-kind~ evt)
      ((:branch-changing)
       (change-trait (get-property~ evt trait:)))
      ((:branch-changed)
       (cleanup-selection))
      ((:selection-changing :saving)
       (when (not-null? selection)
         (let ((cpn (car selection)))
           (when (is? cpn Component)
             (save-component-properties~ cpn designer)))))
       ((:selection-changed)
        (let ((old (get-old~ evt))
              (selection (get-selection~ evt))
              (origin (get-origin~ evt))
              (force-parent? (get-force-parent?~ evt))
              (focus? (get-user-origin?~ evt)))
          (selection-changed old selection origin force-parent? focus?)))))
  
  
  ;;;
  ;;;; Client
  ;;;


  (method public (get-client)
    client)
  
  
  (method public (set-client clt)
    (when (neq? clt client)
      (let ((old client))
        (when old
          (remove-surrogate~ old))
        (set! client clt)
        (set! undoer (and client (new Editor-Undoer self)))
        (client-update)
        (process-client-change old client)
        (edit-component client)
        (client-updated))))
  
  
  (method protected virtual (client-update)
    (install-client-surrogate))
  
  
  (method protected virtual (client-updated)
    )
  
  
  (method protected virtual (install-client-surrogate)
    )
  
  
  ;;;
  ;;;; Designer
  ;;;
  
  
  (method protected virtual (get-designer-class)
    Designer)
  
  
  (method public (get-reference)
    (and designer (get-reference~ designer)))
  
  
  (method public (edit-component component (form: form #f))
    (define (get-edited-form component)
      (when component
        (let ((component-form (get-form~ component)))
          (if (and component-form (let ((origin (get-origin~ component-form)))
                                    (or (not origin)
                                        (file? origin))))
              component-form
            (get-metaclass-form~ (class-of component))))))
    
    (when (neq? component (get-reference))
      (let ((old designer)
            (form (or form (get-edited-form component))))
        (uninstall-current-designer)
        (when component
          (install-current-designer component form))
        (process-designer-change old designer)
        (update-status))))
  
  
  (method protected virtual (install-current-designer component form)
    (set! designer (new (get-designer-class) form: form reference: component))
    (add-designer-listener~ designer (new Event-Handler target: self method-name: 'on-designer))
    (install-designer~ client designer))
  
  
  (method protected virtual (uninstall-current-designer)
    (when designer
      (remove-designer-listener~ designer self)
      (when client
        (uninstall-designer~ client designer))
      (set! designer #f)))
  
  
  (method protected virtual (on-designer evt)
    (let ((kind (get-kind~ evt)))
      (case kind
        ((:property-change)
         (property-change (get-property~ evt trait:) (get-property~ evt component:) (get-property~ evt property:) (get-property~ evt value:) (get-property~ evt undoable?:))
         (set-controller-modified? #t))
        ((:child-add :child-remove :send-before)
         (set-controller-modified? #t)))))
  
  
  ;;;
  ;;;; Listeners
  ;;;
  
  
  (method public (add-editor-listener listener)
    (set! listeners (add-listener listener listeners)))
  
  
  (method public (remove-editor-listener listener)
    (set! listeners (remove-listener listener listeners)))

  
  (method (process-client-change old client)
    (when listeners
      (let ((evt (new Editor-Event :client-change self old: old client: client)))
        (for-each (lambda (listener)
                    (invoke~ listener self evt))
                  listeners))))

  
  (method (process-designer-change old designer)
    (when listeners
      (let ((evt (new Editor-Event :designer-change self old: old designer: designer)))
        (for-each (lambda (listener)
                    (invoke~ listener self evt))
                  listeners))))

  
  (method public (process-branch-changing trait)
    (when listeners
      (let ((evt (new Editor-Event :branch-changing self trait: trait)))
        (for-each (lambda (listener)
                    (invoke~ listener self evt))
                  listeners))))

  
  (method public (process-branch-changed trait)
    (when listeners
      (let ((evt (new Editor-Event :branch-changed self trait: trait)))
        (for-each (lambda (listener)
                    (invoke~ listener self evt))
                  listeners))))

  
  (method public (process-selection-changing old selection origin force-parent? force? user-origin?)
    (when listeners
      (let ((evt (new Selection-Event :selection-changing self old selection origin: origin force-parent?: force-parent? force?: force? user-origin?: user-origin?)))
        (for-each (lambda (listener)
                    (invoke~ listener self evt))
                  listeners))))

  
  (method public (process-selection-changed old selection origin force-parent? force? user-origin?)
    (when listeners
      (let ((evt (new Selection-Event :selection-changed self old selection origin: origin force-parent?: force-parent? force?: force? user-origin?: user-origin?)))
        (for-each (lambda (listener)
                    (invoke~ listener self evt))
                  listeners))))

  
  (method public (process-property-selected property)
    (when listeners
      (let ((evt (new Editor-Event :property-selected self property: property)))
        (for-each (lambda (listener)
                    (invoke~ listener self evt))
                  listeners))))

  
  (method public (process-saving)
    (when listeners
      (let ((evt (new Editor-Event :saving self)))
        (for-each (lambda (listener)
                    (invoke~ listener self evt))
                  listeners))))

  
  (method public (process-saved)
    (when listeners
      (let ((evt (new Editor-Event :saved self)))
        (for-each (lambda (listener)
                    (invoke~ listener self evt))
                  listeners))))
  
  
  ;;;
  ;;;; Presentation
  ;;;
  
  
  (method public virtual (editor-title)
    (let ((reference (get-reference)))
      (if (not reference)
          "Component Editor"
        (format "Component Editor - {s}" (category-identifier (class-of reference)))))))


;;;
;;;; Editor-Undoer
;;;


(class Editor-Undoer extends Undoer
  
  
  (method override (play-action action)
    (unimplemented 'play-action))))
