;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Components Tree
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.designer.editor.Components-Tree jazz


(import (jazz.designer)
        (jazz.designer.view)
        (jazz.library)
        (jazz.runtime)
        (jazz.system)
        (jazz.ui)
        (jazz.ui.view)
        (jazz.ui.clipboard))


(class undocumented Components-Tree extends Components-Viewer

  
  (property application-select? initialize #t accessors generate)
  
  
  ;;;
  ;;;; Actions
  ;;;
  

  (method override (focus-actions)
    (cons (find-actions 'components-tree)
          (nextmethod)))


  ;;;
  ;;;; Events
  ;;;
  
  
  (method (on-delete-selection evt)
    (delete-selection))
  
  
  (method (on-rename-component evt)
    (rename-selection))
  
  
  (method (on-export-text evt)
    (let ((component (selected-component)))
      (if (not component)
          (bell)
        (with-cursor :wait
          (lambda ()
            (export-text~ component)
            (user-message "Done"))))))
  
  
  (method override (on-properties evt)
    (show-properties))
  
  
  (method virtual (on-open evt)
    (let ((component (selected-component)))
      (open-class (class-of component))))
  
  ;;;
  ;;;; Focus
  ;;;


  (method override (focus-gained)
    (nextmethod)
    (when application-select?
      (set-selected~ (get-application) (get-editor) (selected-components))))
  
  
  (method override (focus-update-actions)
    (set-action-enabled? {Action components-tree rename} (can-rename?))
    (set-action-enabled? {Action components-tree open} #f)
    (set-action-enabled? {Action components-tree try-out} #f)
    (set-action-enabled? {Action components-tree edit-source} #f)
    (set-action-enabled? {Action components-tree set-default-traits} #f))


  ;;;
  ;;;; Editor
  ;;;
    
  
  (method override (on-editor evt)
    (case (get-kind~ evt)
      ((:saving) (end-edition))
      ((:branch-changed) (branch-changed))
      ((:selection-changed) (selection-changed (get-selection~ evt) (get-old~ evt) (get-origin~ evt) (get-force-parent?~ evt) (get-user-origin~ evt)))
      (else (nextmethod evt))))
  
  
  (method protected virtual (branch-changed)
    )
  
  
  (method protected virtual (selection-changed selection old origin force-parent? focus?)
    )


  ;;;
  ;;;; Client
  ;;;


  (method override (client-update)
    (when editor
      (update selected-components: (get-selection~ editor))))
  
  
  ;;;
  ;;;; Designer
  ;;;
  
  
  (method override (set-designer dsg)
    (when (neq? dsg designer)
      (when designer
        (unhighlight-edited (get-reference~ designer))
        (uninstall-listener designer))
      (set! designer dsg)
      (when designer
        (install-listener designer)
        (highlight-edited (get-reference~ designer)))))
  
  
  ;;;
  ;;;; Highlight
  ;;;
  
  
  (method protected virtual (highlight-edited component)
    )
  
  
  (method protected virtual (unhighlight-edited component)
    )
  

  ;;;
  ;;;; Update
  ;;;
  
  
  (method protected virtual (component-presentation component)
    (get-presentation-property~ component))
  
  
  (method protected virtual (component-font component owned-form)
    #f)
  
  
  (method protected virtual (component-color component owned-form)
    #f)
  
  
  (method protected virtual (component-image component)
    (get-component-image~ component))
  
  
  (method protected virtual (component-state component)
    #f)

  
  ;;;
  ;;;; Relocation
  ;;;
  
  
  (method protected virtual (parent-relocation parent)
    parent)
  
  
  (method protected virtual (relocation-parent destination class)
    destination)
  
  
  ;;;
  ;;;; Edition
  ;;;
  
  
  (method override (can-undo?)
    #f)
  
  
  (method override (can-redo?)
    #f)
  
  
  (method override (can-cut?)
    (and editor (can-cut-selection?~ editor)))
  
  
  (method override (can-copy?)
    (and editor (can-copy-selection?~ editor)))
  
  
  (method override (can-paste?)
    (can-paste-components? (selected-components)))
  
  
  (method override (can-paste-properties?)
    (let ((components (selected-components)))
      (when components
        (when (clipboard-format-available? 'jazz-parcels)
          (let ((parcels (get-jazz-parcels)))
            (when (= (length parcels) 1)
              (let* ((parcel (car parcels))
                     (parcel-model (get-master-model~ parcel)))
                (when parcel-model
                  (every? (lambda (component)
                            (subtype? (class-of component) parcel-model))
                          components)))))))))
  
  
  (method override (can-delete?)
    (and editor (can-delete-selection?~ editor)))
  
  
  (method override (can-rename?)
    (and editor (can-rename-selection?~ editor)))
  
  
  (method override (can-select-all?)
    #t)
  
  
  (method override (cut-selection)
    (cut-selection~ editor))
  
  
  (method override (copy-selection)
    (copy-selection~ editor))
  
  
  ;; This is a simplification from the old version see commit : e073f6cb308d78d5f3458eecda045e6076430745
  (method override (paste-clipboard)
    (let ((parent (or (selected-component) client))
          (parcels (get-jazz-parcels)))
      (for-each (lambda (info)
                  (bind (model . parcels) info
                    (with-atomic-undo~ (get-undoer~ designer)
                      (lambda ()
                        (let ((components (paste-parcels~ designer parcels (relocation-parent parent model))))
                          (for-each (lambda (comp) (cascade-view-position~ designer comp {Point 0 0})) components)
                          (select-components components))))))
                (partition parcels key: (lambda (parcel) (let ((master (get-master~ parcel))) (get-model~ master)))))))
  
  
  (method override (paste-properties)
    (let ((components (selected-components)))
      (paste-properties~ designer components)))
  
  
  (method override (delete-selection)
    (delete-selection~ editor))
    

  
  ;;;
  ;;;; Add
  ;;;
  
  
  (method override (on-add-component evt)
    (let ((components (selected-components)))
      (when (= (length components) 1)
        (let ((classes (addable-classes (selected-component))))
          (when (= (length classes) 1)
            (let ((class (car classes)))
              (add-component-class class)))))))
  
  
  (method override (categorized-addable-classes component)
    (if (is? component Component)
        (component-categorized-addable-classes component (parent-relocation (get-parent~ component)))
      '()))
  
  
  (method override (add-component-class reference (parent: parent #f) (presentation: presentation #f) (properties: properties '()) (select?: select? #t))
    (define (create-new-component class parent import creation-info extra-properties)
      (receive (presentation added-properties) creation-info
        (let ((name (and presentation (presentation->name~ class presentation))))
          (let ((child (new class parent: parent name: name))
                (designer (get-designer)))
            (with-update-locked
              (lambda ()
                (install-new-component designer child parent presentation added-properties extra-properties import: import)))
            child))))
    
    (let* ((selected (selected-component))
           (class (resolve-runtime-reference reference))
           (parent (or parent (relocation-parent selected class) selected client))
           (extra-properties properties))
      (bind (import _) (parse-runtime-reference reference)
        ;; To support the new feature that it is now possible to
        ;; insert a parent's child directly from the child itself
        @creates-problems
        (when (not (memq? class (map resolve-runtime-reference (addable-classes parent))))
          (set! parent (get-parent~ parent)))
        (let* ((creation-info (if presentation (values presentation '()) (add-component-request class parent)))
               (child (create-new-component class parent import creation-info extra-properties)))
          (when select?
            (select-component child))
          child))))
  
  
  (method override (add-named-child name reference)
    (bind (import _) (parse-runtime-reference reference)
      (add-child~ designer (new (resolve-runtime-reference reference)) (selected-component) name: name import: import)))
  
  
  (method protected virtual (add-component-request class parent)
    (values (component-presentation-request class (get-children~ parent))
            (component-properties-request class)))
  
  
  (method protected virtual (component-presentation-request class brothers (initial-value: initial-value #f))
    (request-component-presentation class brothers initial-value: initial-value))
  
  
  (method protected virtual (component-properties-request class)
    '())
  
  
  (method protected virtual (install-new-component designer child parent presentation added-properties extra-properties (import: import #f) (descendant?: descendant? #f))
    (add-child~ designer child parent import: import descendant?: descendant?)
    (when presentation
      (set-presentation-property~ child designer presentation))
    (install-new-properties designer child added-properties extra-properties))
  
  
  (method protected virtual (install-new-properties designer child added-properties extra-properties)
    (add-properties child (append added-properties extra-properties)))
  
  
  (method protected virtual (add-properties component properties)
    (for-each-property (lambda (property value)
                         (set-property~ designer component property value))
                       properties))
  
  ;;;
  ;;;; Rename
  ;;;
  
  
  (method override (rename-selection)
    (let ((component (selected-component)))
      (when component
        (rename-component component))))
  

  (method public (rename-component component)
    (let ((row (component-row component)))
      (when row
        (ensure-expanded row)
        (let* ((presentation (component-presentation-request (class-of component) (get-brothers~ component) initial-value: (get-presentation-property~ component)))
               (line (row->line row))
               (cell (new Cell line 0)))
          (end-rename component cell presentation)))))
  
  
  (method (end-rename component cell presentation)
    (with-update-locked
      (lambda ()
        (set-title~ (get-cell-data cell) presentation)
        (set-presentation-property~ component designer presentation)
        (let ((parent (get-parent~ component)))
          (when (and parent (sort-components?~ parent))
            (reorder-component component)))))
    (acquire-focus)
    (select-component component))
    

  ;;;
  ;;;; Relocate
  ;;;
  
  
  (method (relocate-components source target)
    (let* ((designer (get-designer))
           (components (get-selected-data~ (get-view~ source)))
           (dst (get-row~ target))
           (part (get-part~ target))
           (destination (get-user-data~ dst)))
      (with-update-locked
        (lambda ()
          (if (eq? part 'row)
              (let ((parent (uniform components key: (lambda (component) (relocation-parent destination (class-of component))))))
                (if (not parent)
                    (bell)
                  (with-atomic-undo~ (get-undoer~ designer)
                    (lambda ()
                      (relocate-components~ designer components parent)
                      (for-each (lambda (comp) (cascade-view-position~ designer comp {Point 0 0})) components)
                      (select-components components)))))
            (let* ((father (get-father~ dst))
                   (sons (get-sons~ father))
                   (rank (son-rank~ father dst))
                   (position (case part ((before) rank) ((after) (+ rank 1))))
                   (target (if (< position (cardinality sons)) (element sons position) #f))
                   (target-data (and target (get-user-data~ target))))
              (for-each (lambda (component)
                          (send-before~ designer component (and target (send-component-before component target-data))))
                        components))
            (select-components components))))))
  
  
  (method (relocate-component-row row father (position: position #f))
    (unless (and (eq? (get-father~ row) father) (= 1 (cardinality (get-sons~ father))))
      (let* ((source (get-user-data~ row))
             (destination (or (get-user-data~ father) client))
             (sort? (sort-components?~ destination)))
        (move-row row father
          position: (or position (lambda ()
                                   (if (not sort?)
                                       #f
                                     (find-component-position source row father))))))))
  
  
  (method public (reorder-component component)
    (let ((row (find-row component)))
      (when row
        (relocate-component-row row (get-father~ row)))))
  
  
  (method protected virtual (find-component-position component row father)
    (find-ordered-position (get-presentation-property~ component) father))
  
  
  (method protected virtual (find-component-insertion parent-row component target)
    (when target
      (son-rank~ parent-row (find-row target))))
  
  
  (method protected virtual (send-component-before component before)
    before)
        

  ;;;
  ;;;; Drop
  ;;;
  
  
  (method override (get-row-reorder-target drag-drop row quarter)
    (let* ((src-selection (get-selection~ (get-view~ (get-source~ drag-drop))))
           (src-range (contiguous-range src-selection))
           (src (map (lambda (n) (get-user-data~ (get-row n))) src-selection))
           (src-types (remove-duplicates (map class-of src)))
           (src-parent (uniform src key: (lambda (component) (parent-relocation (get-parent~ component)))))
           (dst (get-user-data~ row))
           (dst-father (get-father~ row))
           (dst-line (row->line row))
           (dst-parent (parent-relocation (get-parent~ dst)))
           (before? (eq? src-parent dst-parent))
           (before-last (row->line (last (get-sons~ dst-father))))
           (before-rank (and before? (if (memq? quarter '(1 2)) dst-line (if (eq? dst-line before-last) #f (+ dst-line 1)))))
           (before (and before-rank (if (< before-rank visible-count) (get-row before-rank) #f)))
           (move? (and (not (memq? dst src)) (or (not dst) (and (or (not src-parent) (neq? src-parent dst)) (every? (lambda (src) (and (not (has-parent?~ dst src)) (addable-class?~ dst (class-of src)))) src)))))
           (before? (and before? (not (memq? before-rank src-selection)) (or (not src-range) (/= (or before-rank (+ before-last 1)) (+ (cdr src-range) 1))) (can-send-before?~ src-parent src-types dst-father before)))
           (part (cond ((and move? (or (memq? quarter '(2 3)) (and (not before?) (memq? quarter '(1 4))))) 'row)
                       ((and before? (or (= quarter 1) (and (not move?) (= quarter 2)))) 'before)
                       ((and before? (not (expanded?~ row)) (or (= quarter 4) (and (not move?) (= quarter 3)))) 'after)
                       (else #f))))
      (when part
        (new Tree-Drop-Target view: self row: row part: part))))
  
  
  (method override (get-row-target drag-drop row)
    (let* ((source (get-source~ drag-drop))
           (view (get-view~ source)))
      (typecase view
        ((Toolbox-Tree)
         (let* ((tool (selected-component~ view))
                (class (get-class~ tool))
                (component (get-user-data~ row)))
           (when (and class (addable-class?~ component class))
             (new Tree-Drop-Target view: self row: row))))
        @wait
        ((Descendants-Tree)
         (get-row-reorder-target drag-drop row 'row))
        (else
         #f))))
  
  
  (method override (receive-drop sender pos drag-drop)
    (define (receive-model target)
      (let* ((tool (selected-component~ sender))
             (ref (get-reference~ tool))
             (parent (get-user-data~ (get-row~ target))))
        (with-update-locked
          (lambda ()
            (add-component-class ref parent: parent)))))
    
    (let ((source (get-source~ drag-drop))
          (target (get-target~ drag-drop)))
      (if (eq? sender self)
          (relocate-components source target)
        (typecase sender
          ((Toolbox-Tree)
           (receive-model target))))))
  
  
  ;;;
  ;;;; Properties
  ;;;
  
  
  (method public virtual (show-properties)
    (when editor
      (show-properties~ editor)))

  
  ;;;
  ;;;; Selection
  ;;;
  
  
  (method virtual (on-selection-change evt)
    (when (and editor (eq? editor (get-selected-owner~ (get-application))))
      (set-selection~ editor (selected-components) origin: self focus?: #f)))
  
  
  (method public (select-component component)
    (let ((row (component-visible-row component)))
      ;; if row is #f, then the row must be collapsed and I should expand it...
      (when row
        (set-single-selection row))))
  
  
  (method public (select-components components)
    (let ((rows (remove-false (map component-visible-row components))))
      ;; if a row is #f, then the row must be collapsed and I should expand it...
      (set-selection rows)))
  
  
  (method protected virtual (find-row component)
    (component-row component))))
