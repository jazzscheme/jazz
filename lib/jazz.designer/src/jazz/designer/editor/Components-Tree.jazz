;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Components Tree
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library protected jazz.designer.editor.Components-Tree jazz


(import (jazz.designer)
        (jazz.graphic)
        (jazz.platform)
        (jazz.library)
        (jazz.literals)
        (jazz.library.component)
        (jazz.ui)
        (jazz.ui.view)
        (jazz.ui.clipboard)
        (jazz.utilities))


(class Components-Tree extends Components-Viewer
    
  
  (slot last-class initialize {})

  
  ;;;
  ;;;; Actions
  ;;;
  

  (method (focus-actions)
    (cons (find-actions 'components-tree)
          (nextmethod)))


  ;;;
  ;;;; Access
  ;;;


  (method public (get-last-class)
    last-class)


  ;;;
  ;;;; Events
  ;;;
  
  
  (method (on-delete-selection evt)
    (delete-selection))
  
  
  (method (on-rename-component evt)
    (rename-selection))
  
  
  (method (on-export-text evt)
    (let ((component (selected-component)))
      (if (not component)
          (bell)
        (with-cursor :wait
          (function ()
            (export-text~ component)
            (user-message "Done"))))))
  
  
  (method (on-properties evt)
    (show-properties))
    
  
  ;;;
  ;;;; Focus
  ;;;


  (method (focus-gain old)
    (nextmethod old)
    (set-selected~ (get-application) (get-editor) (selected-components)))
  
  
  (method (focus-update-actions)
    (set-action-enabled? {Action components-tree rename} (can-rename?)))


  ;;;
  ;;;; Editor
  ;;;
    
  
  (method (on-editor evt)
    (case (get-kind~ evt)
      ((:saving) (end-edition))
      ((:branch-changed) (branch-changed))
      ((:selection-changed) (selection-changed (get-selection~ evt) (get-old~ evt) (get-origin~ evt) (get-force-parent?~ evt) (get-user-origin?~ evt)))
      (else (nextmethod evt))))
  
  
  (method protected virtual (branch-changed)
    )
  
  
  (method protected virtual (selection-changed selection old origin force-parent? focus?)
    )


  ;;;
  ;;;; Client
  ;;;


  (method (client-update)
    (update))
  
  
  ;;;
  ;;;; Designer
  ;;;
  
  
  (method public (set-designer dsg)
    (when (neq? dsg designer)
      (when designer
        (unhighlight-edited (get-reference~ designer))
        (uninstall-listener designer))
      (set! designer dsg)
      (when designer
        (install-listener designer)
        (highlight-edited (get-reference~ designer)))))
  
  
  ;;;
  ;;;; Highlight
  ;;;
  
  
  (method protected virtual (highlight-edited component)
    )
  
  
  (method protected virtual (unhighlight-edited component)
    )
  

  ;;;
  ;;;; Update
  ;;;
  
  
  (method protected virtual (component-presentation component)
    (get-presentation~ component))
  
  
  (method protected virtual (component-image component)
    (get-component-image~ component))
  
  
  (method protected virtual (component-state component)
    {})

  
  ;;;
  ;;;; Relocation
  ;;;
  
  
  (method protected virtual (parent-relocation parent)
    parent)
  
  
  (method protected virtual (relocation-parent destination class)
    destination)
  
  
  ;;;
  ;;;; Edition
  ;;;
  
  
  (method (can-undo?)
    #f)
  
  
  (method (can-redo?)
    #f)
  
  
  (method (can-cut?)
    (let ((components (selected-components)))
      (and components
           (every? (function (component)
                     (and (neq? component client)
                          (is? component Component)
                          (can-cut-component?~ component)
                          (not (redundant-descendant? component components))))
                   components))))
  
  
  (method (can-copy?)
    (let ((components (selected-components)))
      (and components
           (every? (function (component)
                     (and (is? component Component)
                          (can-copy-component?~ component)
                          (not (redundant-descendant? component components))))
                   components))))
  
  
  (method (can-paste?)
    (let ((components (selected-components)))
      (and (every? (function (component)
                     (is? component Component))
                   components)
           (determine-unique-paster components))))
  
  
  (method (can-paste-properties?)
    (let ((components (selected-components)))
      (when components
        (when (clipboard-format-available? 'jazz-parcels)
          (let ((parcels (read-string-element (get-clipboard-text format: 'jazz-parcels))))
            (when (= (length parcels) 1)
              (let* ((parcel (car parcels))
                     (parcel-model (get-master-model~ parcel)))
                (when parcel-model
                  (every? (function (component)
                            (subtype? (class-of component) parcel-model))
                          components)))))))))
  
  
  (method (can-delete?)
    (let ((components (selected-components)))
      (and components
           (every? (function (component)
                     (and (neq? component client)
                          (is? component Component)
                          (can-delete-component?~ component)
                          (not (redundant-descendant? component components))))
                   components))))
  
  
  (method (can-rename?)
    (let ((components (selected-components)))
      (and (= (length components) 1)
           (let ((component (car components)))
             (and (is? component Component)
                  (can-rename-component?~ component))))))
  
  
  (method (can-select-all?)
    #t)
  
  
  ;; This is a temporary patch until a bug fix in the tree selection update
  (method (redundant-descendant? component components)
    (some? (function (target)
             (and (neq? component target)
                  (has-parent?~ component target)))
           components))
  
  
  (method (cut-selection)
    (let ((components (selected-components)))
      (if (null? components)
          (bell)
        (with-update-locked
          (function ()
            (with-deleted-selection (get-selection)
              (function ()
                (cut-components~ designer components))
              can-survive?: #t))))))
  
  
  (method (copy-selection)
    (let ((components (selected-components)))
      (if (null? components)
          (bell)
        (with-cursor :wait
          (function ()
            (copy-components~ designer components)
            (update-focus-actions~ (get-application)))
          duration: .150))))
  
  
  @convert
  (class Paste-Reporter extends Progress-Reporter
  
  
    (form
      (<install>              title: "Paste Progress"
        (<!>     name: invite title: "Please wait while the paste operation completes")))
    
    
    (method meta (dialog-title)
      "Paste Progress"))
  
  
  @convert
  (method (paste-clipboard)
    (let ((parent (either (selected-component) client))
          (parcels (get-jazz-parcels)))
      ;; Note: the MetaModeler makes sure that all parcels have the same model
      ;; Todo: the override confirm should be done all at once and before the progress bar!
      ;;       a possible solution would be to call explicitly verify-name-conflicts before pasting
      (with-progress
        (function (reporter)
          (set-range~ reporter (new Range 0 (length parcels)))
          (with-update-locked
            (function ()
              (with-cursor :wait
                (function ()
                  ;; because of relocation parcels may go to different parents...
                  (for-each (function (info)
                              (bind (model . parcels) info
                                (paste-parcels~ designer parcels (relocation-parent parent model) reporter: reporter)))
                            (partition parcels key: (function (parcel) (let ((master (get-master~ parcel))) (get-model~ master)))))))))
          (user-message~ reporter "Completed")
          (set-done~ reporter))
        threaded?: #t
        name: "Paste"
        context: self
        progress-reporter: Paste-Reporter
        cancelable?: #t)))
  
  
  (method (paste-properties)
    (let ((components (selected-components)))
      (paste-properties~ designer components)))
  
  
  (method (delete-selection)
    (let ((selection (get-selection)))
      (when (not-null? selection)
        (let ((components (get-selected-data)))
          (when (confirm-close components)
            (with-deleted-selection selection
              (function ()
                (delete-components~ designer components))
              can-survive?: #t))))))
  
  
  (method (confirm-close (components '()))
    (confirm-action "Delete selected objects?"))
  
  
  (method (confirm-action text)
    (let ((code (message-box (localize text) type: 'confirmation)))
      (case code
        ((yes) #t)
        ((no) #f)
        ((cancel) (throw-cancel)))))

  
  ;;;
  ;;;; Add
  ;;;
  
  
  (method (on-add-component evt)
    (let ((components (selected-components)))
      (when (= (length components) 1)
        (let ((classes (remove-nils (addable-classes))))
          (when (= (length classes) 1)
            (let ((class (car classes)))
              (add-component-class class)))))))
  
  
  (method (addable-classes)
    (let ((component (selected-component)))
      (cond ((not component)
             (addable-root-classes))
            ((is-not? component Component)
             '())
            (else
             (let* ((parent (parent-relocation (get-parent~ component)))
                    (parent-classes (essay parent (get-addable-classes~ parent)))
                    (classes (get-addable-classes~ component))
                    (model (class-of component)))
               (when (and (memq? model parent-classes)
                          (not (memq? model classes)))
                 (set! classes (cons model (cons {} classes))))
               classes)))))
  
  
  (method (add-component-class class (parent: parent {}) (presentation: presentation {}) (properties: properties '()) (select?: select? #t))
    (let* ((selected (selected-component))
           (parent (either parent (relocation-parent selected class) selected client))
           (extra-properties properties))
      ;; To support the new feature that it is now possible to
      ;; insert a parent's child directly from the child itself
      (when (not (memq? class (get-addable-classes~ parent)))
        (set! parent (get-parent~ parent)))
      (let* ((creation-info (if presentation (values presentation '()) (add-component-request class parent)))
             (child (create-new-component class parent creation-info extra-properties)))
        (when select?
          (select-component child))
        child)))
  
  
  (method protected virtual (add-component-request class parent)
    (values (component-presentation-request class (get-children~ parent))
            (component-properties-request class)))
  
  
  (method protected virtual (component-presentation-request class brothers (initial-value: initial-value {}))
    (if (get-name-prohibited?~ class)
        {}
      (let* ((name-mandatory? (get-name-mandatory?~ class))
             (name-unicity? (get-name-unicity?~ class))
             (unicity-domain (essay name-unicity? (map (function (component) (get-presentation~ component)) brothers)))
             (name-validator (component-name-validator))
             (pres (localize (get-class-presentation~ class)))
             (presentation (request-string title: (new Locales english: (format "Enter {a} Name" pres) french: "Entrez le nom") initial-value: initial-value accepts-empty?: (not name-mandatory?) unicity-domain: unicity-domain validator: name-validator)))
        presentation)))
  
  
  (method protected virtual (component-properties-request class)
    '())
  
  
  (method protected virtual (component-name-validator)
    {})
  
  
  (method (create-new-component class parent creation-info extra-properties)
    (receive (presentation added-properties) creation-info
      (let ((child (new class parent: parent))
            (name (essay presentation (presentation->name~ class presentation)))
            (designer (get-designer)))
        (when name
          (set-name~ child name))
        (set! last-class class)
        (with-update-locked
          (function ()
            (install-new-component designer child parent presentation added-properties extra-properties)))
        child)))
  
  
  (method protected virtual (install-new-component designer child parent presentation added-properties extra-properties)
    (add-child~ designer child parent)
    (when presentation
      (set-presentation~ child designer presentation))
    (install-new-properties designer child added-properties extra-properties))
  
  
  (method protected virtual (install-new-properties designer child added-properties extra-properties)
    (add-properties child (append added-properties extra-properties)))
  
  
  (method protected virtual (add-properties component properties)
    (for-each-property (function (property value)
                         (set-property~ designer component property value))
                       properties))


  ;;;
  ;;;; Rename
  ;;;
  
  
  (method (rename-selection)
    (let ((component (selected-component)))
      (when component
        (rename-component component))))
  

  (method public (rename-component component)
    (let ((row (component-row component)))
      (when row
        (ensure-expanded row)
        (let* ((presentation (component-presentation-request (class-of component) (get-brothers~ component) initial-value: (get-presentation~ component)))
               (rank (row-rank row))
               (cell (new Cell rank 0)))
          (end-rename component cell presentation))
        @other-approach-but-much-tougher-to-ensure-that-the-name-follows-certains-restrictions
        (let* ((rank (row-rank row))
               (cell (new Cell rank 0))
               (border (new Border-View border-type: 'solid border-color: {Color name: Dark-Red}))
               (scroller (new Scroller-View parent: border vscroll?: #f hscroll?: #f))
               (text (new Tree-Embedded-Presentation-Text-View parent: (get-content~ scroller) left-padding: 1 top-padding: 1 font: font)))
          (ensure-row-displayed rank)
          (set-string-content~ text (get-presentation~ component))
          (edit-cell cell
            editor: border
            location: {Point 3 0}
            draw-preserved?: #t
            end-proc: (function () (end-rename component cell (get-string-content~ text))))
          (set-client~ scroller text)
          (set-tree~ text self)
          (acquire-focus~ text)
          (select-all~ text)))))
  
  
  (method (end-rename component cell presentation)
    (with-update-locked
      (function ()
        (set-title~ (get-cell-data cell) presentation)
        (set-presentation~ component designer presentation)
        (let ((parent (get-parent~ component)))
          (when (and parent (sort-components?~ parent))
            (reorder-component component)))))
    (acquire-focus)
    (select-component component))
    

  ;;;
  ;;;; Move
  ;;;
  
  
  (method (move-components source target)
    (let* ((designer (get-designer))
           (components (get-selected-data~ (get-view~ source)))
           (dst (get-row~ target))
           (part (get-part~ target))
           (destination (get-user-data~ dst)))
      (with-update-locked
        (function ()
          (if (eq? part 'row)
              (let ((parent (uniform components key: (function (component) (relocation-parent destination (class-of component))))))
                (if (not parent)
                    (bell)
                  (move-components~ designer components parent)))
            (let* ((father (get-father~ dst))
                   (sons (get-sons~ father))
                   (rank (son-rank~ father dst))
                   (position (case part ((before) rank) ((after) (+ rank 1))))
                   (target (if (< position (cardinality sons)) (element sons position) {}))
                   (target-data (essay target (get-user-data~ target))))
              (for-each (function (component)
                          (send-before~ designer component (essay target (send-component-before component target-data))))
                        components)))
          (select-components components)))))
  
  
  (method (move-component-row row father (position: position {}))
    (unless (and (eq? (get-father~ row) father) (= 1 (cardinality (get-sons~ father))))
      (let* ((source (get-user-data~ row))
             (destination (either (get-user-data~ father) client))
             (sort? (sort-components?~ destination)))
        (move-row row father
          position: (either position (function ()
                                       (if (not sort?)
                                           {}
                                         (find-component-position source row father))))))))
  
  
  (method public (reorder-component component)
    (let ((row (find-row component)))
      (move-component-row row (get-father~ row))))
  
  
  (method protected virtual (find-component-position component row father)
    (find-ordered-position (get-presentation~ component) father))
  
  
  (method protected virtual (find-component-insertion parent-row component target)
    (when target
      (son-rank~ parent-row (find-row target))))
  
  
  (method protected virtual (send-component-before component before)
    before)
        

  ;;;
  ;;;; Drop
  ;;;
  
  
  (method (get-row-reorder-target drag-drop row quarter)
    (let* ((src-selection (get-selection~ (get-view~ (get-source~ drag-drop))))
           (src-range (contiguous-range src-selection))
           (src (map (function (n) (get-user-data~ (get-row n))) src-selection))
           (src-types (remove-duplicates (map class-of src)))
           (src-parent (uniform src key: (function (component) (parent-relocation (get-parent~ component)))))
           (dst (get-user-data~ row))
           (dst-father (get-father~ row))
           (dst-rank (row-rank row))
           (dst-parent (parent-relocation (get-parent~ dst)))
           (before? (eq? src-parent dst-parent))
           (before-last (row-rank (last (get-sons~ dst-father))))
           (before-rank (essay before? (if (memq? quarter '(1 2)) dst-rank (if (eq? dst-rank before-last) {} (+ dst-rank 1)))))
           (before (essay before-rank (if (< before-rank visible-count) (get-row before-rank) {})))
           (move? (and (not (memq? dst src)) (or (not dst) (and (or (not src-parent) (neq? src-parent dst)) (every? (function (src) (and (not (has-parent?~ dst src)) (addable-class?~ dst (class-of src)))) src)))))
           (before? (and before? (not (memq? before-rank src-selection)) (or (not src-range) (/= (either before-rank (+ before-last 1)) (+ (cdr src-range) 1))) (can-send-before?~ src-parent src-types dst-father before)))
           (part (cond ((and move? (or (memq? quarter '(2 3)) (and (not before?) (memq? quarter '(1 4))))) 'row)
                       ((and before? (or (= quarter 1) (and (not move?) (= quarter 2)))) 'before)
                       ((and before? (or (= quarter 4) (and (not move?) (= quarter 3)))) 'after)
                       (else {}))))
      (when part
        (new Tree-Drop-Target view: self row: row part: part))))
  
  
  (method (get-row-target drag-drop row)
    (let* ((source (get-source~ drag-drop))
           (view (get-view~ source)))
      {}
      @wait
      (typecase view
        @to-convert-to-new-toolbox
        ((Model-Icon)
         (let* ((model (get-model~ view))
                (class (autoload model))
                (component (get-user-data~ row)))
           (when (addable-class?~ component class)
             (new Tree-Drop-Target view: self row: row))))
        @wait
        ((Descendants-Tree)
         (get-row-reorder-target drag-drop row 'row))
        (else
         {}))))
  
  
  (method (receive-drop sender pos drag-drop)
    (let* ((source (get-source~ drag-drop))
           (view (get-view~ source))
           (target (get-target~ drag-drop)))
      (if (eq? view self)
          (move-components source target)
        {}
        @wait
        (typecase view
          @to-convert-to-new-toolbox
          ((Model-Icon)
           (receive-model view target))))))
  
  
  (method (receive-model window target)
    (let* ((model (dispatch self (get-model~ window)))
           (parent (get-user-data~ (get-row~ target)))
           (child (new model visible?: #f)))
      (with-update-locked
        (function ()
          (add-view~ (get-designer) child parent position: {Point 0 0} centered?: #f)
          (rename-component child)))))
  
  
  ;;;
  ;;;; Properties
  ;;;
    

  @i-am-not-sure-i-like-this-approach-anymore!
  (method public (show-properties)
    (let* ((selection (get-single-selection))
           (row (get-row selection))
           (component (selected-component))
           (border (new Border-View border-type: 'edge border-insets: {Rect 1 1 1 1}))
           (card (new Properties-Card parent: border))
           (tree (get-tree~ card)))
      (set-flat?~ (get-header~ tree) #t)
      (set-filter~ tree 'categorized)
      (set-editor~ card (get-editor))
      (set-designer~ card designer)
      (set-client~ card component)
      (let* ((header-height 16)
             (borders-height 2)
             (height (+ header-height (get-height~ (get-tree~ card)) borders-height))
             (subrow (add-row class: Editor-Row father: row row-height: height)))
        (set! auto-expanded-row row)
        (set-parent~ border subrow)
        (set-editor~ subrow border)
        (expand/collapse row)
        (let ((width (get-width~ tree)))
          (set-width~ (locate~ tree 'property) 100)
          (set-width~ (locate~ tree 'value) (- width 100))))))
  
  
  (method public virtual (show-properties)
    (show-properties~ editor))

  
  ;;;
  ;;;; Selection
  ;;;
  
  
  (method (on-selection-change evt)
    (when (and editor (eq? editor (get-selected-owner~ (get-application))))
      (set-selection~ editor (selected-components) origin: self force?: #t focus?: #f)))
  
  
  (method public (select-component component)
    (let ((row (component-visible-row component)))
      ;; if row is {}, then the row must be collapsed and I should expand it...
      (when row
        (set-single-selection row))))
  
  
  (method public (select-components components)
    (let ((rows (remove-nils (map component-visible-row components))))
      ;; if a row is {}, then the row must be collapsed and I should expand it...
      (set-selection rows)))
  
  
  (method protected virtual (find-row component)
    (component-row component))))
