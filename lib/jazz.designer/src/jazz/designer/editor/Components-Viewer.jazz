;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Components Viewer
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.designer.editor.Components-Viewer jazz


(import (jazz.action)
        (jazz.designer)
        (jazz.designer.menu)
        (jazz.handler)
        (jazz.tree))


(class undocumented Components-Viewer extends Tree-View
  
  
  (slot editor   initialize #f)
  (slot client   initialize #f)
  (slot designer initialize #f)

  
  ;;;
  ;;;; Actions
  ;;;
  

  (method override (focus-actions self)
    (cons (find-actions 'components-viewer)
          (nextmethod self)))


  ;;;
  ;;;; Events
  ;;;
  
  
  (method override (destroy self)
    (set-designer self #f)
    (set-editor self #f)
    (nextmethod self))
  
  
  (method override (context-menu self evt)
    (let ((pos (get-position evt)))
      (with-context-click self pos
        (lambda ()
          (let ((menu (get-context-menu self)))
            (when menu
              (track-popup-menu self menu pos)))))))
  
  
  (method virtual (context-menu-class self)
    Component-Menu)
  
  
  (method override (get-context-menu self)
    (let ((menu (new (context-menu-class self) client: self))
          (categories (categorized-addable-classes self (selected-component self)))
          (named-children (missing-named-children (selected-component self))))
      (update-component-menu menu (selected-components self) categories (~ add-component-class self) named-children (~ add-named-child self))
      menu))
  
  
  (method protected virtual (on-add-component self evt)
    )

  
  ;;;
  ;;;; Add
  ;;;
  
  
  (method public virtual (categorized-addable-classes self component)
    '())
  
  
  (method public virtual (addable-classes self component)
    (flatten-lists (categorized-addable-classes self component)))
  
  
  (method public virtual (add-component-class self class . rest)
    )
  
  
  (method public virtual (add-named-child self name class)
    )


  ;;;
  ;;;; Editor
  ;;;
  
  
  (method public (get-editor self)
    editor)
    
  
  (method public (set-editor self edt)
    (when (neq? edt editor)
      (when editor
        (remove-editor-listener editor self))
      (set! editor edt)
      (when editor
        (add-editor-listener editor (new Event-Handler target: self method-name: 'on-editor)))
      (editor-update self)))
  
  
  (method protected virtual (editor-update self)
    )
    
  
  (method protected virtual (on-editor self evt)
    (case (get-kind evt)
      ((:client-change) (set-client self (get-property evt client:) recreate?: (get-property evt recreate?:)))
      ((:designer-change) (set-designer self (get-property evt designer:)))))


  ;;;
  ;;;; Client
  ;;;


  (method public (get-client self)
    client)


  (method public (set-client self clt (recreate?: recreate? #f))
    (when (neq? clt client)
      (when recreate?
        (transfer-state self client clt))
      (when (and client (not recreate?))
        (preserve-state self client))
      (set! client clt)
      (client-update self)
      (when (and client (not recreate?))
        (restore-state self client))))
  
  
  (method package virtual (client-update self)
    )
  

  ;;;
  ;;;; State
  ;;;
  
  
  (method protected virtual (transfer-state self actual client)
    )
  
  
  (method protected virtual (preserve-state self client)
    )
  
  
  (method package virtual (restore-state self client)
    )

  
  ;;;
  ;;;; Designer
  ;;;
  
  
  (method public (get-designer self)
    designer)
  
  
  (method public virtual (set-designer self dsg)
    (when (neq? dsg designer)
      (when designer
        (uninstall-listener self designer))
      (set! designer dsg)
      (when designer
        (install-listener self designer))))
  
  
  ;;;
  ;;;; Listener
  ;;;
  
  
  (method (install-listener self designer)
    (let ((listener (new Event-Handler target: self method-name: 'on-designer)))
      (add-designer-listener designer listener)))
  
  
  (method (uninstall-listener self designer)
    (remove-designer-listener designer self))

  
  ;;;
  ;;;; Designer
  ;;;
  
  
  (method protected virtual (on-designer self evt)
    )
  
  
  ;;;
  ;;;; Selection
  ;;;
  
  
  (method (get-selection-component self selection)
    (get-user-data 
      (get-row self (case selection-mode
                 ((cell)
                  (get-line selection))
                 ((row)
                  selection)))))
  
  
  (method public (selected-component self)
    (let ((selection (get-single-selection self)))
      (and selection
           (get-selection-component self selection))))
  
  
  (method public virtual (selected-components self)
    (map (~ get-selection-component self) (get-ordered-selection self)))
  
  
  (method public (component-row self component)
    (user-data-row self component include-invisibles?: #t))
  
  
  (method (component-visible-row self component)
    (user-data-index self component))
  
  
  ;;;
  ;;;; Update
  ;;;
  
  
  (method public (preserving-update self)
    (update self expand-state: (get-expand-state self) selected-components: (selected-components self)))


  (method public virtual (update self . rest)
    )
  
  
  (method public virtual (update-selection self expand-state selected-components)
    (when expand-state
      (set-expand-state self expand-state))
    (when selected-components
      (set-selection self (collect (~ component-visible-row self) selected-components)
                     force?: #t
                     generate-event?: #f)))))
