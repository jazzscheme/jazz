;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Components Viewer
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.designer.editor.Components-Viewer jazz


(import (jazz.designer)
        (jazz.designer.menu)
        (jazz.library)
        (jazz.locale)
        (jazz.system)
        (jazz.ui))


(class undocumented Components-Viewer extends Tree-View
  
  
  (slot editor   initialize #f)
  (slot client   initialize #f)
  (slot designer initialize #f)

  
  ;;;
  ;;;; Actions
  ;;;
  

  (method override (focus-actions)
    (cons (find-actions 'components-viewer)
          (nextmethod)))


  ;;;
  ;;;; Events
  ;;;
  
  
  (method override (destroy)
    (set-designer #f)
    (set-editor #f)
    (nextmethod))
  
  
  (method override (context-menu pos)
    (with-context-click pos
      (lambda ()
        (let ((menu (get-context-menu)))
          (when menu
            (track-popup-menu menu pos))))))
  
  
  (method override (get-context-menu)
    (let ((menu (new Component-Menu client: self)))
      (update-component-menu menu (selected-components) (categorized-addable-classes (selected-component)) add-component-class)
      menu))
  
  
  (method protected virtual (on-add-component evt)
    )

  
  ;;;
  ;;;; Add
  ;;;
  
  
  (method public virtual (categorized-addable-classes component)
    '())
  
  
  (method public virtual (addable-classes component)
    (jazz.dialect.language.functional:flatten (categorized-addable-classes component)))
  
  
  (method public virtual (add-component-class class . rest)
    )


  ;;;
  ;;;; Editor
  ;;;
  
  
  (method public (get-editor)
    editor)
    
  
  (method public (set-editor edt)
    (when (neq? edt editor)
      (when editor
        (remove-editor-listener~ editor self))
      (set! editor edt)
      (when editor
        (add-editor-listener~ editor (new Event-Handler target: self method-name: 'on-editor)))
      (editor-update)))
  
  
  (method protected virtual (editor-update)
    )
    
  
  (method protected virtual (on-editor evt)
    (case (get-kind~ evt)
      ((:client-change) (set-client (get-property~ evt client:)))
      ((:designer-change) (set-designer (get-property~ evt designer:)))))


  ;;;
  ;;;; Client
  ;;;


  (method public (get-client)
    client)


  (method public (set-client clt)
    (set! client clt)
    (client-update))
  
  
  (method protected virtual (client-update)
    )
  
  
  ;;;
  ;;;; Designer
  ;;;
  
  
  (method public (get-designer)
    designer)
  
  
  (method public virtual (set-designer dsg)
    (when (neq? dsg designer)
      (when designer
        (uninstall-listener designer))
      (set! designer dsg)
      (when designer
        (install-listener designer))))
  
  
  ;;;
  ;;;; Listener
  ;;;
  
  
  (method (install-listener designer)
    (let ((listener (new Event-Handler target: self method-name: 'on-designer)))
      (add-designer-listener~ designer listener)))
  
  
  (method (uninstall-listener designer)
    (remove-designer-listener~ designer self))

  
  ;;;
  ;;;; Designer
  ;;;
  
  
  (method protected virtual (on-designer evt)
    )
  
  
  ;;;
  ;;;; Selection
  ;;;
  
  
  (method (get-selection-component selection)
    (get-user-data~ 
      (get-row (case selection-mode
                 ((cell)
                  (get-line~ selection))
                 ((row)
                  selection)))))
  
  
  (method public (selected-component)
    (let ((selection (get-single-selection)))
      (when selection
        (get-selection-component selection))))
  
  
  (method public virtual (selected-components)
    (map get-selection-component (get-ordered-selection)))
  
  
  (method public (component-row component)
    (user-data-row component include-invisibles?: #t))
  
  
  (method (component-visible-row component)
    (user-data-index component))
  
  
  ;;;
  ;;;; Update
  ;;;
  
  
  (method public (preserving-update)
    (update expand-state: (get-expand-state) selected-components: (selected-components)))


  (method public virtual (update . rest)
    )
  
  
  (method public virtual (update-selection expand-state selected-components)
    (set-expand-state expand-state)
    (when selected-components
      (set-selection (collect component-visible-row selected-components)
                     force?: #t generate-event?: #f)))))
