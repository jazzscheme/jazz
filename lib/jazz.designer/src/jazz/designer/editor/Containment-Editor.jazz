;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Containment Editor
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library protected jazz.designer.editor.Containment-Editor jazz


(import (jazz.designer)
        (jazz.jml)
        (jazz.library)
        (jazz.ui)
        (jazz.ui.view)
        (jazz.utilities))


(class Containment-Editor extends View


  (property client initialize {} getter get-client setter set-client)
    
  
  (slot flow-layout)
  

  (form
    (<install>))
       
  
  (method meta (external-name . rest)
    'containment-editor)

  
  ;;;
  ;;;; Host
  ;;;
  
  
  (method meta (host-icon)
    {Bitmap-Resource "CallStack"})
  

  (method meta (host-title)
    "Containment")
  
  
  (method (client-activate)
    (let ((guest (current-document)))
      (when (is? guest View-Editor)
        (set-client (get-client~ guest)))))

  
  ;;;
  ;;;; Events
  ;;;


  (method (finish initargs)
    (nextmethod initargs)
    (set! flow-layout (new Flow-Layout insets: {Rect 4 5 0 0}))
    (layout-view))
  
  
  (method (layout)
    (layout~ flow-layout children (get-width) (get-height)))
  
  
  ;;;
  ;;;; Client
  ;;;


  (method public (get-client)
    client)


  (method public (set-client clt)
    (when (neq? clt client)
      (set! client clt)))))
