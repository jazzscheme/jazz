;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Containment View
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.designer.editor.Containment-View jazz


(import (jazz.designer)
        (jazz.graphic)
        (jazz.jml)
        (jazz.library)
        (jazz.ui)
        (jazz.ui.view))


(class undocumented Containment-View extends Layout-View

  
  (slot editor initialize #f)
  (slot client initialize #f)
  

  (form
    (<install> layout-type: flow layout-insets: {Rect 4 5 0 0} layout-padding: 4 background: {Color Medium}))

  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method override (destroy)
    (set-editor #f)
    (nextmethod))


  ;;;
  ;;;; Editor
  ;;;
  
  
  (method public (get-editor)
    editor)
    
  
  (method public (set-editor edt)
    (when (neq? edt editor)
      (when editor
        (remove-editor-listener~ editor self))
      (set! editor edt)
      (when editor
        (add-editor-listener~ editor (new Event-Handler target: self method-name: 'on-editor)))
      (set-client (and editor (determine-client (get-selection~ editor))))))
    
  
  (method protected virtual (on-editor evt)
    (case (get-kind~ evt)
      ((:selection-changed) (selection-changed (get-selection~ evt) (get-old~ evt) (get-origin~ evt) (get-force-parent?~ evt) (get-user-origin~ evt)))))
  
  
  (method protected virtual (selection-changed selection old origin force-parent? focus?)
    (set-client (determine-client selection)))
  
  
  (method (determine-client selection)
    (if (= (length selection) 1)
        (car selection)
      #f))
  
  
  ;;;
  ;;;; Client
  ;;;


  (method public (get-client)
    client)


  (method public (set-client clt)
    (define (collect-inner outer)
      (let ((queue (new-queue)))
        (define (collect component)
          (enqueue queue component)
          (for-each (lambda (child)
                      (when (inner?~ component child)
                        (collect child)))
                    (get-children~ component)))
        
        (collect outer)
        (queue-list queue)))
    
    (when (neq? clt client)
      (set! client clt)
      (close-children)
      (when client
        (let ((outer (outer-component~ client (get-reference~ editor))))
          (for-each (lambda (component)
                      (let ((execute
                              (lambda (event)
                                (set-selection~ editor (list component) origin: self))))
                        (new Containment-Tool parent: self resource: (get-component-image~ component) portfolio: :images selected?: (eq? component client) client: component action-handler: (new Event-Handler execute: execute))))
                    (collect-inner outer))))
      (layout-view))))


;;;
;;;; Tool
;;;


(class Containment-Tool extends Radio-Tool
  
  
  (property client initialize #f accessors generate)
  
  
  (form
    (<install> tooltip?: #t))
  
  
  (method override (get-formatted-tooltip?)
    #f)
  
  
  (method override (get-tooltip-context pos)
    (new Tooltip-Context
      view: self
      text: (format "{a}{? {a}~}"
                    (category-name (class-of client))
                    (get-name~ client))))))
