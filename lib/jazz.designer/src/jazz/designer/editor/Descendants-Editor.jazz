;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Descendants Editor
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.designer.editor.Descendants-Editor jazz


(import (jazz.designer)
        (jazz.markup)
        (jazz.resource)
        (jazz.tree)
        (jazz.ui)
        (jazz.workspace))


(class undocumented Descendants-Editor extends Layout-View


  (form
    (<install>                                            layout-type: fill
      (<Layout-View>                name: tools
        @wait
        (<Push-Tool>                name: new-default     size: {Dimension 22 22} location: tail tooltip?: #t tooltip-text: "New Default" resource: {Image-Resource "New"} portfolio: :images action-handler: {Event-Handler :guest on-new-default}))
      (<Border-View>                name: border          border-type: none
        (<Scroller-View>            name: scroller        style: document hscroll?: #t vscroll?: #t
          (<!>                      name: content         layout-type: fill
            (<Tree-Header>          name: header          style: document
              (<!>                  name: content
                (<Descendants-Tree> name: tree
                  (<!>              name: descendant      width: 183)))))))))
              
  
  (method meta override (external-name self . rest)
    'descendants-editor)

  
  ;;;
  ;;;; Host
  ;;;
  
  
  (method meta override (host-icon self)
    {Image-Resource "Components"})
  

  (method meta override (host-title self)
    "Components")
  
  
  (method override (client-activate self)
    (let ((guest (current-document)))
      (typecase guest
        ((Text-Editor)
         (set-client self #f)
         (set-designer self #f)
         (set-editor self #f))
        ((Component-Editor)
         (set-editor self guest)
         (set-designer self (get-designer guest))
         (set-client self (get-client guest)))
        (else
         (set-client self #f)
         (set-designer self #f)
         (set-editor self #f)))))
  
  
  (method override (client-deactivate self)
    (set-client self #f)
    (set-designer self #f)
    (set-editor self #f))
  
  
  ;;;
  ;;;; Docked
  ;;;
  
  
  (method override (focus-default self)
    (let ((tree (locate self 'tree)))
      (acquire-focus tree)
      (select-first-row tree)))
  
  
  (method override (get-tools-view self)
    (locate self 'tools))
    
  
  ;;;
  ;;;; Hosting
  ;;;
  
  
  (method override (install-in-host self host)
    (nextmethod self host)
    @convert
    (set-layout-type (get-root host) 'fill)
    @convert
    (set-layout-insets (get-root host) {Rect 0 2 0 0})
    @convert
    (when (is? host Docked-Host)
      (set-flat? (locate 'scroller) #t)
      (set-shown? (locate 'header) #f)))
  
  
  ;;;
  ;;;; Access
  ;;;
  
  
  (method public (get-tree self)
    (locate self 'tree))
  
  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method (on-new-default self evt)
    (new-default self))
  
  
  ;;;
  ;;;; Component
  ;;;
  
  
  (method protected virtual (new-default self)
    (bell))
  
  
  (method (add-default self class)
    (let* ((tree (get-tree self))
           (parent (get-client tree)))
      (add-component-class tree class parent: parent)))
  
  
  ;;;
  ;;;; Editor
  ;;;
  
  
  (method public (get-editor self)
    (get-editor (get-tree self)))
  
  
  (method public (set-editor self editor)
    (set-editor (get-tree self) editor))

  
  ;;;
  ;;;; Client
  ;;;
  
  
  (method public (get-client self)
    (get-client (get-tree self)))
  
  
  (method public (set-client self client)
    (set-client (get-tree self) client))

  
  ;;;
  ;;;; Designer
  ;;;
  
  
  (method public (get-designer self)
    (get-designer (get-tree self)))
  
  
  (method public (set-designer self designer)
    (set-designer (get-tree self) designer))))
