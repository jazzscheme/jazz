;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Descendants-Manager-Tree
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.designer.editor.Descendants-Manager-Tree jazz


(import (jazz.designer)
        (jazz.designer.view)
        (jazz.graphic)
        (jazz.library)
        (jazz.library.component)
        (jazz.ui))


(class undocumented Descendants-Manager-Tree extends Descendants-Tree
  
  
  (slot preserved-states initialize (make-table test: eq? weak-keys: #t))


  ;;;
  ;;;; Classes
  ;;;
  
  
  (method override (categorized-addable-classes component)
    (or (component-categorized-toolbox-addable-classes component)
        (nextmethod component)))
  
  
  ;;;
  ;;;; Designer
  ;;;
  
  
  (method (refresh-colors component)
    (let* ((row (component-row component))
           (data (and row (get-child~ row 0))))
      (unless (or (not data) (get-color~ data))
        (for-each refresh-component (component-ancestry component (get-reference~ designer))))))
  
  
  (method override (on-designer evt)
    (if (eq? (get-kind~ evt) ':property-change)
        (refresh-colors (get-property~ evt component:))
      (nextmethod evt)))
  
  
  ;;;
  ;;;; Focus
  ;;;
  
  
  (method override (focus-update-actions)
    (nextmethod)
    (when (is? (get-single-selected-data) Component)
      (set-action-enabled? {Action components-tree open} #t)))


  ;;;
  ;;;; Client
  ;;;


  (method override (client-update)
    (when editor
      (update expand-state: (table-ref preserved-states client #f) selected-components: (get-selection~ editor))))
  
  
  ;;;
  ;;;; State
  ;;;
  
  
  (method override (preserve-state client)
    (table-set! preserved-states client (get-expand-state)))
  
  
  ;;;
  ;;;; Update
  ;;;
  
  
  (method (owned-color)
    {Color Dark-Green})
  
  
  (method (unowned-color)
    {Color Dark-Gray})
  
  
  (method override (component-color component)
    (if (client-owned? component)
        (owned-color)
      (unowned-color)))
  
  
  (method override (component-state component)
    (if (some? client-owned? (get-children~ component))
        'expanded
      'collapsed))))
