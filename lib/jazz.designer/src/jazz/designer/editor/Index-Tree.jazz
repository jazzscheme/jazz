;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Index Tree
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library protected jazz.designer.editor.Index-Tree jazz


(import (jazz.designer)
        (jazz.jml)
        (jazz.library)
        (jazz.ui)
        (jazz.utilities))


(class undocumented Index-Tree extends Details-Tree


  (form
    (<install>                             filled-column: component portfolio: :icons selection-mode: row multiple-selection?: #f can-select-empty?: #t selection-handler: {Event-Handler :self on-selection-change}
      (<Tree-Node-Column>  name: component title: "Name" width: 100 toplevel-controls?: #f)
      (<Tree-Label-Column> name: location  title: "Location" width: 275)
      (<Tree-Label-Column> name: kind      title: "Kind" width: 100)))


  ;;;
  ;;;; Client
  ;;;
  
  
  (method (selection-changed component old origin force-parent? focus?)
    )


  ;;;
  ;;;; Designer
  ;;;
    
  
  (method (on-designer evt)
    ;; this is to much... should be incremental
    (case (get-kind~ evt)
      ((:child-add :child-remove :property-change) (update))))


  ;;;
  ;;;; Update
  ;;;


  (method (update . rest)
    (with-update-locked
      (function ()
        (remove-every-row)
        (when client
          (for-each (function (component)
                      (insert-component component {} #f))
                    (sort < (collect-components) key: (function (component) (get-presentation~ component))))))))
  
  
  (method (collect-components)
    (let ((list '()))
      (for-each-descendant~ client
        (function (component level)
          (when (indexable?~ component)
            (set! list (cons component list)))))
      list))
  
  
  (method (insert-component component father recursive?)
    (let ((title (get-presentation~ component))
          (image (get-component-image~ component))
          (location (present-location component))
          (kind (get-class-presentation~ (class-of component))))
      (add-row father: father children: (list (new Tree-Node title: title image: image) (new Tree-Label title: location) (new Tree-Label title: kind)) user-data: component)))))
