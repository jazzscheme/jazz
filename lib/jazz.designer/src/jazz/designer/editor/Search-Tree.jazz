;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Search Tree
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.designer.editor.Search-Tree jazz


(import (jazz.component)
        (jazz.component.descriptors)
        (jazz.descriptor)
        (jazz.designer)
        (jazz.handler)
        (jazz.locale)
        (jazz.markup)
        (jazz.tree))


(class undocumented Search-Tree extends Details-Tree


  (property target initialize #f accessors explicit)


  (form
    (<install>                             filled-column: component portfolio: :images selection-mode: row multiple-selection?: #f can-select-empty?: #t selection-handler: {Event-Handler :self on-selection-change}
      (<Tree-Node-Column>  name: component title: "Name" width: 100 toplevel-controls?: #f)
      (<Tree-Label-Column> name: location  title: "Location" width: 275)
      (<Tree-Label-Column> name: kind      title: "Kind" width: 100)))


  ;;;
  ;;;; Access
  ;;;


  (method public (get-target self)
    target)


  (method public (set-target self value)
    (set! target value)
    (update self)
    (when (> visible-count 0)
      (set-single-selection self 0)
      (acquire-focus self)))


  ;;;
  ;;;; Client
  ;;;
  
  
  (method override (selection-changed self component old origin force-parent? focus?)
    )


  ;;;
  ;;;; Designer
  ;;;
    
  
  (method override (on-designer self evt)
    @comment-gives-empty-case
    (case (get-kind evt)
      @this-is-too-much
      ((:child-add :child-remove :property-change) (update))))
  

  ;;;
  ;;;; Update
  ;;;


  (method override (update self . rest)
    (define (search-components target)
      (let ((list '()))
        (for-each-descendant client
          (lambda (component level)
            (when (and (indexable? component) (search-component component target))
              (set! list (cons component list)))))
        list))
    
    (remove-every-row self)
    (with-update-locked self
      (lambda ()
        (when (and client target)
          (for-each (lambda (component)
                      (insert-component self component #f #f))
                    (sort < (search-components target) key: (lambda (component) (localize (get-presentation-property component)))))))))
  
  
  (method override (insert-component self component father recursive?)
    (let ((title (get-presentation-property component))
          (image (get-component-image component))
          (location (present-location self component))
          (kind (get-class-presentation (class-of component))))
      (add-row self father: father children: (list (new Tree-Node title: title image: image) (new Tree-Label title: location) (new Tree-Label title: kind)) user-data: component)))))
