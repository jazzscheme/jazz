(module protected jazz.designer.editor.Text-Editor jazz


(import (jazz.designer)
        (jazz.designer.view)
        (jazz.editor.jazz)
        (jazz.jml)
        (jazz.library)
        (jazz.library.component)
        (jazz.runtime)
        (jazz.ui)
        (jazz.ui.view))


(definition (serialize-origin origin)
  (if (is? origin Class)
      (serialize-class origin)
    (serialize-runtime-reference origin)))


(class Jazz-Text-Editor-View extends Jazz-Text-View
  
  
  (slot editor initialize #f setter explicit getter generate)
  (slot designer initialize #f accessors generate)
  
  
  (method public (set-editor edt)
    (when (neq? edt editor)
      (when editor
        (remove-editor-listener~ editor self))
      (set! editor edt)
      (when editor
        (add-editor-listener~ editor (new Event-Handler target: self method-name: 'on-editor)))))
  
  
  (method (on-editor evt)
    (case (get-kind~ evt)
      ((:designer-change) (set-designer (get-property~ evt designer:)))))
  
  
  (method (get-imports-expression)
    (let ((explorer (new Jazz-Explorer model)))
      (forward-namespace~ explorer)
      (find-import~ explorer)
      (read-marked~ explorer)))
  
  
  (method (get-class-form-expression class-name)
    (let ((explorer (new Jazz-Explorer model)))
      (forward-location~ explorer (list class-name :form))
      (parameterize ((walk-for #f))
        (with-readtable jazz-readtable
          (lambda ()
            (read-marked~ explorer))))))
  
  
  (method (get-trait-form-expression trait-name)
    (let ((explorer (new Jazz-Explorer model)))
      (forward-location~ explorer (list trait-name 3))
      (list (string->symbol (format "<{a}>" (get-model~ (get-form~ designer))))
            (parameterize ((walk-for #f))
              (with-readtable jazz-readtable
                (lambda ()
                  (read-marked~ explorer)))))))
  
  
  (method (make-new-form origin locator)
    (bind (module symbol) (cdr (serialize-origin origin))
      (if (is? origin Class)
          (construct-form (cadr (get-class-form-expression symbol)) locator)
        (construct-form (get-trait-form-expression symbol) locator))))
  
  
  (method (evaluate-form)
    (with-cursor :wait
      (lambda ()
        (when (get-modified?)
          (with-catched-exception
            (lambda (exc)
              #t)
            (lambda ()
              (let ((origin (get-origin~ (get-form~ designer)))
                    (locator (imports-locator (cdr (get-imports-expression)))))
                (bind (module symbol) (cdr (serialize-origin origin))
                  (let ((new-form (make-new-form origin locator)))
                    (setup-context~ new-form new-form)
                    (set-origin~ new-form origin)
                    (set-form~ designer new-form)
                    (set-modified?~ editor #t)
                    (set-modified? #f))))))))))
  
  
  (method override (evaluate-range range)
    (evaluate-form))
  
  
  (method override (evaluate-selection)
    (evaluate-form))
  
  
  (method override (evaluate-buffer)
    (evaluate-form)))


(class Text-Editor extends Component-Editor
  
  
  (form
    (<install>                                   layout-type: fill
      (<Scroller-View>                           vscroll?: #t hscroll?: #t
        (<!>                       name: content
          (<Jazz-Text-Editor-View> name: text)))))
  
  
  (method override (get-text-view)
    (locate 'text))
  
  
  (method override (prepare-mode-switch)
    (with-catched-exception
      (lambda (exc)
        #t)
      (lambda ()
        (evaluate-buffer~ (locate 'text))
        (set! client (recreate-client))
        (nextmethod))))
  
  
  (method override (client-updated)
    (when client
      (let* ((text (locate 'text))
             (form (get-form~ designer))
             (origin (get-origin~ form)))
        (bind (unit symbol) (cdr (serialize-origin origin))
          (set-string-content~ text (format "(module {a} jazz)" unit))
          (insert-imports text (form-imports form))
          (if (is? origin Class)
              (begin
                (insert-class text symbol (category-name (class-ascendant origin)))
                (insert-new-form text symbol form))
            (let* ((trait (resolve-runtime-reference origin))
                   (model (get-model~ text))
                   (range (find-namespace-insertion-range~ (new Jazz-Explorer model))))
              (insert-string~ model range (format "{%}{%}{%}(define-trait {a} {a}{%}{a})" symbol (category-name (get-client-type~ trait)) (form->string (car (get-children~ form)) 1 include-form?: #f)))))
          (set-modified?~ text #f)
          (goto-home~ text #t #f)
          (reset~ (get-undoer~ (get-model~ text)))))))
  
  
  (method override (install rest)
    (nextmethod rest)
    (set-editor~ (locate 'text) self)
    (set-designer~ (locate 'text) designer))))
