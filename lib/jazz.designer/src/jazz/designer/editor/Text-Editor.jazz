(module protected jazz.designer.editor.Text-Editor jazz


(import (jazz.designer)
        (jazz.editor.jazz)
        (jazz.jml)
        (jazz.library)
        (jazz.library.component)
        (jazz.ui)
        (jazz.ui.view))


(class Jazz-Text-Editor-View extends Jazz-Text-View
    
  
  (slot editor initialize #f setter explicit getter generate)
  (slot designer initialize #f accessors generate)
  
  
  (method public (set-editor edt)
    (when (neq? edt editor)
      (when editor
        (remove-editor-listener~ editor self))
      (set! editor edt)
      (when editor
        (add-editor-listener~ editor (new Event-Handler target: self method-name: 'on-editor)))))
  
  
  (method (on-editor evt)
    (case (get-kind~ evt)
      ((:designer-change) (set-designer (get-property~ evt designer:)))))
  
  
  (method (evaluate-form)
    (with-catched-exception
      (lambda (exc)
        #t)
      (lambda ()
        (parameterize ((walk-for #f))
          (with-readtable jazz-readtable
            (lambda ()
              (let ((old-form (get-form~ designer)))
                (bind (imports form-expr) (read-string-content (get-string-content))
                  (let* ((locator (imports-locator (cdr imports)))
                         (new-form (construct-form (cadr form-expr) locator)))
                    (setup-context~ new-form new-form)
                    (set-origin~ form (get-origin~ old-form))
                    (set-form~ designer new-form)
                    (set-modified?~ editor #t))))))))))
  
  
  (method override (evaluate-range range)
    (evaluate-form))
  
  
  (method override (evaluate-selection)
    (evaluate-form))
  
  
  (method override (evaluate-buffer)
    (evaluate-form)))


(class Text-Editor extends Component-Editor
  
  
  (form
    (<install> layout-type: fill
      (<Scroller-View> vscroll?: #t hscroll?: #t
        (<!>                       name: content
          (<Jazz-Text-Editor-View> name: text)))))
  
  
  (method override (prepare-mode-switch)
    (with-catched-exception
      (lambda (exc)
        #t)
      (lambda ()
        (evaluate-buffer~ (locate 'text))
        (nextmethod))))
  
  
  (method override (client-updated)
    (when client
      (let ((text (locate 'text))
            (form (get-form~ designer)))
        (set-string-content~ text "(module #f jazz)")
        (insert-imports text (form-imports form))
        (let ((model (get-model~ text)))
          (delete-range~ model (selection-line~ text 0))
          (delete-range~ model (selection-line~ text 0))
          (delete-range~ model (selection-line~ text 0)))
        (goto-end~ text #t #f)
        (backspace~ text #f)
        (let ((form-string (form->string form 1)))
          (insert-string~ text (format "{%}{%}{%}{a}" form-string)))
        (goto-home~ text #t #f))))
  
  
  (method override (install rest)
    (nextmethod rest)
    (set-editor~ (locate 'text) self)
    (set-designer~ (locate 'text) designer))))
