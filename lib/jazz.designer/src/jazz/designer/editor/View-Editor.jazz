;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; View Editor
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.designer.editor.View-Editor jazz


(import (jazz.designer)
        (jazz.designer.view)
        (jazz.geometry)
        (jazz.graphic)
        (jazz.jml)
        (jazz.library)
        (jazz.platform)
        (jazz.system)
        (jazz.ui)
        (jazz.ui.view)
        (jazz.ui.window))


(class undocumented View-Editor extends Component-Editor


  (property mode initialize 'select accessors generate)
  
  
  (slot protected overlay          initialize #f getter generate)
  (slot protected showed-property  initialize #f getter generate)
  (slot protected rubber-band?     initialize #f getter generate)
  (slot protected base-view        initialize #f getter generate)
  (slot protected base-position    initialize #f getter generate)
  (slot protected current-position initialize #f getter generate)
  (slot protected preserved-client initialize #f getter generate)
  (slot protected show-frames?     initialize #t getter generate)
  (slot protected show-content?    initialize #t getter generate)
  
  
  (form
    (<install>                        layout-type: fill background: {Color Medium-Gray}
      (<Scroller-View> name: scroller hscroll?: #t vscroll?: #t)))

  
  ;;;
  ;;;; Host
  ;;;
  
  
  (method meta override (host-position)
    {Point 227 117})
  
  
  (method meta override (host-size)
    {Dimension 810 629})
  
  
  (method override (host-workspaces)
    '(designer))


  ;;;
  ;;;; Actions
  ;;;
  

  (method override (guest-actions)
    (cons (find-actions 'view-editor)
          (nextmethod)))

  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method (on-bring-to-front evt)
    (let ((selection (outer-selection)))
      (for-each (lambda (component)
                  (bring-to-front~ designer component))
                selection)))
  
  
  (method (on-send-to-back evt)
    (let ((selection (outer-selection)))
      (for-each (lambda (component)
                  (send-to-back~ designer component))
                selection)))
  
  
  (method (on-delete-selection evt)
    (delete-selection))
  
  
  (method (on-rename-selected evt)
    (let ((selection (outer-selection)))
      (if (/= (length selection) 1)
          (bell)
        (let ((component (car selection))
              (designer (get-designer)))
          (let ((presentation (request-component-presentation (class-of component) (get-brothers~ component) initial-value: (get-presentation-property~ component))))
            (set-presentation-property~ component designer presentation))))))
  
  
  (method (on-select-all-children evt)
    (let ((selection (outer-selection)))
      (if (/= (length selection) 1)
          (bell)
        (let ((component (car selection)))
          (select-all~ (get-surrogate~ component))))))
  
  
  (method (on-properties evt)
    (select-docked Properties-Manager workspace: #f focus?: #t))
  
  
  (method (on-open evt)
    (when (not-null? selection)
      (open-component (class-of (car selection)))))
  
  
  ;;;
  ;;;; New
  ;;;
  
  
  (method meta override (new-event . rest)
    (new-class~ (get-tree~ (find-docked Toolbox-Manager)) 'View 'jazz.ui size: {Dimension 800 600})
    @w
    (new-class~ (get-tree~ (find-docked Toolbox-Manager)) 'View-Workbench 'jazz.designer size: {Dimension 800 600}))
  
  
  ;;;
  ;;;; Client
  ;;;
  
  
  (method override (client-update)
    (nextmethod)
    (install-client)
    (when client
      (set-visible?~ client #t)))
  
  
  (method override (install-client-surrogate)
    (when client
      (install-surrogate~ client self)))
  
  
  (method protected virtual (install-client)
    (when client
      (let ((client-parent (get-parent~ client)))
        ;; to support in-place edition
        (unless client-parent
          (let* ((scroller (locate-component 'scroller))
                 (content (and scroller (get-content~ scroller))))
            (set-parent~ client content)
            (when scroller
              (set-client~ scroller client)))))))
    
  
  ;;;
  ;;;; Designer
  ;;;
  
  
  (method override (install-current-designer component form)
    (nextmethod component form)
    @w
    (redraw-border~ (get-surrogate~ component)))
  
  
  ;;;
  ;;;; Mode
  ;;;
  
  
  (method (select-mode m)
    (set! mode m)
    (let ((manager (find-docked Designer-Manager)))
      (when manager
        (set-selected?~ (locate~ manager mode) #t))))
  
  
  ;;;
  ;;;; Display
  ;;;
  
  
  (method package (toggle-frames)
    (set! show-frames? (not show-frames?))
    (invalidate-view~ (get-reference)))
  
  
  (method package (toggle-content)
    (set! show-content? (not show-content?))
    (invalidate-view~ (get-reference)))
  
  
  (method package (toggle-try-out)
    (cond ((not (trying-out?))
           (set! preserved-client client)
           (set-selection '())
           (set-client #f))
          (else
           (set-client preserved-client)
           (set-selection (list preserved-client))
           (set! preserved-client #f))))
  
  
  (method package (trying-out?)
    (boolean preserved-client))

  
  ;;;
  ;;;; Property
  ;;;
  
  
  (method package (set-showed-property property)
    (set! showed-property property)
    (invalidate-view~ client))
    
  
  ;;;
  ;;;; Selection
  ;;;
  
  
  (method package (invalidate-selection)
    (for-each (lambda (selected)
                (when (is? selected View)
                  (invalidate-view~ selected)))
              selection))


  ;;;
  ;;;; Rendering
  ;;;
  
  
  (method override (render surface draw-self? nodes context lh lv sh sv sc sc?)
    (nextmethod surface draw-self? nodes context lh lv sh sv sc sc?)
    (for-each (lambda (view rank)
                (when (is? view View)
                  (let* ((surrogate (get-surrogate~ view))
                         (outer (outer-client~ surrogate)))
                    (draw-selected~ (get-surrogate~ outer) surface rank))))
              selection
              (naturals 0 (length selection))))


  ;;;
  ;;;; RubberBand
  ;;;
  
  
  (method package (start-rubber-band view pos)
    (set! rubber-band? #t)
    (set! base-view view)
    (set! base-position pos)
    (set! current-position #f)
    (acquire-capture~ base-view)
    (setup-overlay)
    (set-selection '() origin: self))
  
  
  (method package (process-rubber-band pos)
    (when rubber-band?
      (let ((old current-position))
        (set! current-position pos)
        (when old
          (invalidate-rect~ client (inflate-rect (normalize-rect (corners->rect base-position old)) 1 1)))
        (when current-position
          (let ((rect (normalize-rect (corners->rect base-position current-position))))
            (invalidate-rect~ client (inflate-rect rect 1 1))
            (select-rubber-banded rect))))))
  
  
  (method (select-rubber-banded rect)
    (let* ((r (normalize-rect rect))
           (p (rect-position r))
           (s (rect-size r))
           (selection (new List-Factory)))
      (for-each-view~ base-view
        (lambda (view)
          (unless (is? view Client-Overlay)
            (let* ((b (get-bounds~ view))
                   (r (acquire~ client view b)))
              (when (rects-intersect? r p s)
                (put~ selection view))))))
      (let ((lst (get-output~ selection)))
        (set-selection lst origin: self))))
  
  
  (method package (end-rubber-band pos)
    (process-rubber-band #f)
    (select-rubber-banded (corners->rect base-position pos))
    (remove-overlay)
    (release-capture~ base-view)
    (set! rubber-band? #f)
    (when (not-null? selection)
      (select-mode 'select)))


  ;;;
  ;;;; Overlay
  ;;;
  
  
  (method (setup-overlay)
    (set! overlay (new Client-Overlay parent: client size: {Dimension 4000 4000} editor: self)))
  
  
  (method (remove-overlay)
    (close~ overlay)
    (set! overlay #f))


  ;;;
  ;;;; Alignment
  ;;;
  
  
  (method public (align-left)
    (if (< (length selection) 2)
        (bell)
      (with-atomic-undo~ (get-undoer~ designer)
        (lambda ()
          (let* ((reference (outer-client~ (get-surrogate~ (car selection))))
                 (h (lie-left reference)))
            (for-each (lambda (view)
                        (let* ((view (outer-client~ (get-surrogate~ view)))
                               (lie (get-lie~ view)))
                          (set-view-lie view (new Point h (get-v~ lie)))))
                      (cdr selection)))))))
  
  
  (method public (align-top)
    (if (< (length selection) 2)
        (bell)
      (with-atomic-undo~ (get-undoer~ designer)
        (lambda ()
          (let* ((reference (outer-client~ (get-surrogate~ (car selection))))
                 (v (lie-top reference)))
            (for-each (lambda (view)
                        (let* ((view (outer-client~ (get-surrogate~ view)))
                               (lie (get-lie~ view)))
                          (set-view-lie view (new Point (get-h~ lie) v))))
                      (cdr selection)))))))
  
  
  (method public (align-right)
    (if (< (length selection) 2)
        (bell)
      (with-atomic-undo~ (get-undoer~ designer)
        (lambda ()
          (let* ((reference (outer-client~ (get-surrogate~ (car selection))))
                 (h (lie-right reference)))
            (for-each (lambda (view)
                        (let* ((view (outer-client~ (get-surrogate~ view)))
                               (lie (get-lie~ view))
                               (h (- h (get-width~ view))))
                          (set-view-lie view (new Point h (get-v~ lie)))))
                      (cdr selection)))))))
  
  
  (method public (align-bottom)
    (if (< (length selection) 2)
        (bell)
      (with-atomic-undo~ (get-undoer~ designer)
        (lambda ()
          (let* ((reference (outer-client~ (get-surrogate~ (car selection))))
                 (v (lie-bottom reference)))
            (for-each (lambda (view)
                        (let* ((view (outer-client~ (get-surrogate~ view)))
                               (lie (get-lie~ view))
                               (v (- v (get-height~ view))))
                          (set-view-lie view (new Point (get-h~ lie) v))))
                      (cdr selection)))))))
  
  
  (method public (center-horizontally)
    (if (< (length selection) 2)
        (bell)
      (with-atomic-undo~ (get-undoer~ designer)
        (lambda ()
          (let* ((reference (outer-client~ (get-surrogate~ (car selection))))
                 (h (lie-left reference))
                 (width (get-width~ reference)))
            (for-each (lambda (view)
                        (let* ((view (outer-client~ (get-surrogate~ view)))
                               (lie (get-lie~ view))
                               (h (+ h (fxround/ (- width (get-width~ view)) 2))))
                          (set-view-lie view (new Point h (get-v~ lie)))))
                      (cdr selection)))))))
  
  
  (method public (center-vertically)
    (if (< (length selection) 2)
        (bell)
      (with-atomic-undo~ (get-undoer~ designer)
        (lambda ()
          (let* ((reference (outer-client~ (get-surrogate~ (car selection))))
                 (v (lie-top reference))
                 (height (get-height~ reference)))
            (for-each (lambda (view)
                        (let* ((view (outer-client~ (get-surrogate~ view)))
                               (lie (get-lie~ view))
                               (v (+ v (fxround/ (- height (get-height~ view)) 2))))
                          (set-view-lie view (new Point (get-h~ lie) v))))
                      (cdr selection)))))))
  
  
  (method public (space-horizontally)
    (if (< (length selection) 3)
        (bell)
      (with-atomic-undo~ (get-undoer~ designer)
        (lambda ()
          (let* ((first (outer-client~ (get-surrogate~ (first selection))))
                 (second (outer-client~ (get-surrogate~ (second selection))))
                 (dh (- (lie-left second) (lie-right first)))
                 (h (+ (lie-right second) dh)))
            (for-each (lambda (view)
                        (let* ((view (outer-client~ (get-surrogate~ view)))
                               (lie (get-lie~ view)))
                          (set-view-lie view (new Point h (get-v~ lie))))
                        (increase! h (+ (get-width~ view) dh)))
                      (cddr selection)))))))
  
  
  (method public (space-vertically)
    (if (< (length selection) 3)
        (bell)
      (with-atomic-undo~ (get-undoer~ designer)
        (lambda ()
          (let* ((first (outer-client~ (get-surrogate~ (first selection))))
                 (second (outer-client~ (get-surrogate~ (second selection))))
                 (dv (- (lie-top second) (lie-bottom first)))
                 (v (+ (lie-bottom second) dv)))
            (for-each (lambda (view)
                        (let* ((view (outer-client~ (get-surrogate~ view)))
                               (lie (get-lie~ view)))
                          (set-view-lie view (new Point (get-h~ lie) v)))
                        (increase! v (+ (get-height~ view) dv)))
                      (cddr selection)))))))
  
  
  (method public (resize-width)
    (if (< (length selection) 2)
        (bell)
      (with-atomic-undo~ (get-undoer~ designer)
        (lambda ()
          (let* ((reference (outer-client~ (get-surrogate~ (car selection))))
                 (width (get-width~ reference)))
            (for-each (lambda (view)
                        (let* ((view (outer-client~ (get-surrogate~ view)))
                               (size (get-size~ view)))
                          (safe-set-property~ designer view 'size (new Dimension width (get-height~ size)))))
                      (cdr selection)))))))
  
  
  (method public (resize-height)
    (if (< (length selection) 2)
        (bell)
      (with-atomic-undo~ (get-undoer~ designer)
        (lambda ()
          (let* ((reference (outer-client~ (get-surrogate~ (car selection))))
                 (height (get-height~ reference)))
            (for-each (lambda (view)
                        (let* ((view (outer-client~ (get-surrogate~ view)))
                               (size (get-size~ view)))
                          (safe-set-property~ designer view 'size (new Dimension (get-width~ size) height))))
                      (cdr selection)))))))
  
  
  (method public (resize-both)
    (if (< (length selection) 2)
        (bell)
      (with-atomic-undo~ (get-undoer~ designer)
        (lambda ()
          (let* ((reference (outer-client~ (get-surrogate~ (car selection))))
                 (size (get-size~ reference)))
            (for-each (lambda (view)
                        (let ((view (outer-client~ (get-surrogate~ view))))
                          (safe-set-property~ designer view 'size size)))
                      (cdr selection)))))))
  
  
  (method public (force-layout)
    (let ((use-view? (shift-down?)))
      (for-each (lambda (view)
                  (let ((target (if use-view? view (get-parent~ view))))
                    (layout-view~ target)))
                selection)))
  
  
  (definition (lie-left view)
    (get-h~ (get-lie~ view)))
  
  
  (definition (lie-top view)
    (get-v~ (get-lie~ view)))
  
  
  (definition (lie-right view)
    (+ (get-h~ (get-lie~ view)) (get-width~ view)))
  
  
  (definition (lie-bottom view)
    (+ (get-v~ (get-lie~ view)) (get-height~ view)))
  
  
  (method (set-view-lie view lie)
    (set-lie~ view lie)
    (safe-set-property~ designer view 'position (get-position~ view))))


;;;
;;;; Workbench
;;;


(class View-Workbench extends View
  
  
  (form
    (<install> background: {Color Medium-Gray}))
  
  
  ;;;
  ;;;; Descriptor
  ;;;
  
  
  (method meta override (get-class-descriptor)
    (new View-Workbench-Descriptor)))


;;;
;;;; Design
;;;


(submodule design


(import (jazz.designer))


(class View-Workbench-Descriptor extends View-Descriptor
  
  
  (method override (class-image class)
    {Image-Resource "DesignLayout"})
  
  
  (method override (component-surrogate-class component)
    View-Workbench-Surrogate))


(class undocumented View-Workbench-Surrogate extends View-Surrogate
  
  
  (method override (draw surface)
    )))


;;;
;;;; Overlay
;;;


(definition Overlay-Outside
  {Color red: 96 green: 158 blue: 234 alpha: 0.8})

(definition Overlay-Inside
  {Color red: 96 green: 158 blue: 234 alpha: 0.4})


(class Client-Overlay extends View
  
  
  (property editor)
  
  
  (method override (draw surface context lh lv)
    (let ((base (get-base-position~ editor))
          (current (get-current-position~ editor)))
      (when current
        (let ((rect (normalize-rect (corners->rect base current))))
          (set-line-width~ surface 1)
          (rectangle~ surface rect Overlay-Outside Overlay-Inside)))))))
