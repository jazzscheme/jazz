;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Foreign List Entry
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.designer.entry.Foreign-List-Entry jazz


(import (jazz.designer)
        (jazz.event)
        (jazz.handler)
        (jazz.jml)
        (jazz.outline)
        (jazz.tree)
        (jazz.ui))


(class Foreign-List-Entry extends Property-Entry
  

  (property composite?        initialize #t  accessors explicit)
  (property allow-duplicates? initialize #f  accessors generate)
  (property presenter         initialize #f  accessors explicit)
  (property all               initialize '() accessors explicit)
  (property value             initialize #f  accessors explicit)
  
  
  (slot to initialize '())

  
  (form
    (<install>                                          size: {Dimension 352 320}
      (<Border-View>                  name: from-border border-type: edge
        (<Scroller-View>                                hscroll?: #t vscroll?: #t
          (<!>                        name: content     layout-type: fill
            (<Tree-Header>                              shown?: #f style: document
              (<!>                    name: content
                (<Tree-View>          name: from-tree   show-header?: #f filled-column: from-entry selection-mode: row multiple-selection?: #t show-unfocused-selection?: #f portfolio: :images selection-handler: {Event-Handler :form on-selection-change} double-click-handler: {Event-Handler :form on-double-click} tab-press-handler: {Event-Handler :form on-tab-press} return-press-handler: {Event-Handler :form on-return-press} escape-press-handler: {Event-Handler :form on-escape-press}
                  (<Tree-Node-Column> name: from-entry  controls?: #f toplevel-controls?: #f display-images?: #f width: 200)))))))
      (<Push-Button>                  name: add         title: "Add >>" size: {Dimension 80 22} action-handler: {Event-Handler :form on-add})
      (<Push-Button>                  name: remove      title: "<< Remove" size: {Dimension 80 22} action-handler: {Event-Handler :form on-remove})
      (<Border-View>                  name: to-border   border-type: edge
        (<Scroller-View>                                hscroll?: #t vscroll?: #t
          (<!>                        name: content     layout-type: fill
            (<Tree-Header>                              shown?: #f style: document
              (<!>                    name: content
                (<Tree-View>          name: to-tree     show-header?: #f filled-column: to-entry selection-mode: row multiple-selection?: #t show-unfocused-selection?: #f portfolio: :images selection-handler: {Event-Handler :form on-selection-change} double-click-handler: {Event-Handler :form on-double-click} tab-press-handler: {Event-Handler :form on-tab-press} return-press-handler: {Event-Handler :form on-return-press} escape-press-handler: {Event-Handler :form on-escape-press}
                  (<Tree-Node-Column> name: to-entry    controls?: #f toplevel-controls?: #f display-images?: #f width: 200)))))))))
  
  
  (method package (guest-installed-in-host self)
    (let ((tree (locate self 'from-tree)))
      (focus-and-select tree)))

  
  ;;;
  ;;;; Host
  ;;;
  
  
  (method meta override (host-title self)
    "Choose Values")
  
  
  (method meta override (host-position self)
    {Point 450 300})
  
  
  (method meta override (host-size self)
    {Dimension 252 320})

  
  ;;;
  ;;;; Modal
  ;;;
  
  
  (method public (get-result self)
    (let ((value (to->value self)))
      (if composite?
          (sort < value)
        value)))

  
  ;;;
  ;;;; Access
  ;;;


  (method public (get-presenter self)
    presenter)


  (method public (set-presenter self value)
    (set! presenter value)
    (update self))


  (method public (get-all self)
    all)


  (method public (set-all self value)
    (set! all value)
    (update self))

  
  (method override (get-value self)
    value)
  
  
  (method override (set-value self v)
    (set! value v)
    (set! to (value->to self))
    (update self))


  (method public (get-composite? self)
    composite?)


  (method public (set-composite? self value)
    (set! composite? value)
    (set! to (value->to self))
    (set-title (locate self 'add) (if composite? "Add >>" "Choose >>"))
    (set-multiple-selection? (locate self 'from-tree) composite?))


  ;; assume nullable? = #t for now
  (method (value->to self)
    (if composite?
        value
      (if (not value)
          value
        (list value))))
  
  
  ;; assume nullable? = #t for now
  (method (to->value self)
    (if composite?
        to
      (if (not to)
          to
        (car to))))
  
  
  ;;;
  ;;;; Setup
  ;;;
  
  
  (method package (setup self client key)
    (let ((foreign (child (get-creator client) key)))
      (set-all self (map (lambda (component)
                      (get-name component))
                    (get-children foreign)))))
  
  
  ;;;
  ;;;; Layout
  ;;;
  
  
  (method override (layout self)
    (let* ((size (get-size self))
           (width (get-width size))
           (height (get-height size))
           (from (locate self 'from-border))
           (to (locate self 'to-border))
           (tree-width (quotient (- width 100) 2))
           (buttons-pos (quotient (- height 52) 2)))
      (set-position from (new Point 0 0))
      (set-size from (new Dimension tree-width height))
      (set-position (locate self 'add) (new Point (+ tree-width 10) buttons-pos))
      (set-position (locate self 'remove) (new Point (+ tree-width 10) (+ buttons-pos 30)))
      (set-position to (new Point (- width tree-width) 0))
      (set-size to (new Dimension tree-width height))))
  
  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method package (on-selection-change self evt)
    (update-buttons self))
  
  
  (method (on-double-click self evt)
    (let ((sender (get-sender evt)))
      (case (get-name sender)
        ((from-tree) (when (get-enabled? (locate self 'add)) (on-add self evt)))
        ((to-tree) (when (get-enabled? (locate self 'remove)) (on-remove self evt))))))
  
  
  (method (on-add self evt)
    (let* ((from-tree (locate self 'from-tree))
           (to-tree (locate self 'to-tree))
           (values (get-selected-data from-tree)))
      (set! to (if composite? (append to values) values))
      (update self)
      (if allow-duplicates?
          (set-selection from-tree (user-data-indexes from-tree values))
        (acquire-focus to-tree)
        (set-selection to-tree (user-data-indexes to-tree values)))
      (set-modified? self #t)))
  
  
  (method (on-remove self evt)
    (let* ((from-tree (locate self 'from-tree))
           (to-tree (locate self 'to-tree))
           (values (get-selected-data to-tree)))
      (set! to (difference to values))
      (update self)
      (unless allow-duplicates?
        (acquire-focus from-tree)
        (set-selection from-tree (user-data-indexes from-tree values)))
      (set-modified? self #t)))
  
  
  (method package (update-buttons self)
    (let* ((from-tree (locate self 'from-tree))
           (from? (get-selection from-tree))
           (to-tree (locate self 'to-tree))
           (to? (get-selection to-tree)))
      (set-enabled? (locate self 'add) from?)
      (set-enabled? (locate self 'remove) to?)))
  
  
  (method override (on-tab-press self evt)
    (let ((sender (get-sender evt)))
      (case (get-name sender)
        ((from-tree)
          (focus-and-select (locate self 'to-tree)))
        ((to-tree)
          (focus-and-select (locate self 'from-tree))))))
  
  
  ;; Should really be generic in the Dialog class
  (method override (on-return-press self evt)
    (let ((dialog (get-host self)))
      (end-modal dialog (get-modal-result dialog))))
  
  
  ;; Should really be generic in the Dialog class
  (method override (on-escape-press self evt)
    (let ((dialog (get-host self)))
      (cancel-modal dialog)))
  
  
  ;;;
  ;;;; Update
  ;;;
  
  
  (method package (update self)
    (define (update-from)
      (let ((from-tree (locate self 'from-tree)))
        (remove-every-row from-tree)
        (with-update-locked from-tree
          (lambda ()
            (for-each (lambda (object)
                        (let ((title (present object)))
                          (add-row from-tree children: (list (new Tree-Node title: title)) user-data: object)))
                      (sort < (if allow-duplicates? all (difference all to test: equal?))))))))
    
    (define (update-to)
      (let ((to-tree (locate self 'to-tree)))
        (remove-every-row to-tree)
        (with-update-locked to-tree
          (lambda ()
            (for-each (lambda (object)
                        (let ((title (present object)))
                          (add-row to-tree children: (list (new Tree-Node title: title)) user-data: object)))
                      (sort < to))))))
    
    (define (present object)
      (if (not presenter)
          object
        (presenter object)))
    
    (update-from)
    (update-to)
    (update-buttons self))))
