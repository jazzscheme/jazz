;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Handler Entry
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2012
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.designer.entry.Localized-Entry jazz


(import (jazz.designer)
        (jazz.graphic)
        (jazz.jml)
        (jazz.locale)
        (jazz.ui))


(class undocumented Localized-Entry extends String-Entry
  
  
  (property active-locale initialize #f accessors generate)
  
  
  (slot locales-object)
  
  
  (method override (finish rest)
    (nextmethod rest)
    (set! locales-object #f))
  
  
  ;;;
  ;;;; Value
  ;;;
  
  
  (method (make-locales-object new-str)
    (let ((old-str (if locales-object (localize~ locales-object active-locale) #f)))
      (if (equal? new-str old-str)
          locales-object
        (let* ((old-plist (if locales-object (get-locales~ locales-object) '()))
               (new-plist (if new-str
                              (plist-add old-plist active-locale new-str)
                            (plist-remove old-plist active-locale))))
          (if (null? new-plist)
              #f
            (apply new Locales new-plist))))))
  
  
  (method override (get-value)
    (if active-locale
        (let ((new-value (make-locales-object (nextmethod))))
          (set! locales-object new-value)
          new-value)
      (nextmethod)))
  
  
  (method override (set-value value)
    (set! locales-object (and active-locale (is? value Locales) value))
    (nextmethod value))
  
   
  ;;;
  ;;;; Descriptor
  ;;;

  
  (method meta override (get-class-descriptor)
    (new Localized-Entry-Descriptor)))


;;;
;;;; Design
;;;


(submodule design


(class Localized-Entry-Descriptor extends Property-Entry-Descriptor
  
  
  (form
    (<install>
      (<properties~>
        (<Property-Descriptor> name: active-locale
          (<Value-Domain>      name: domain  nullable?: #t))))))))
