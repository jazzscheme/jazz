;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Handler Entry
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.designer.entry.Localized-Entry jazz


(import (jazz.descriptor)
        (jazz.designer)
        (jazz.domain)
        (jazz.event)
        (jazz.graphic)
        (jazz.handler)
        (jazz.layout)
        (jazz.locale)
        (jazz.markup)
        (jazz.outline)
        (jazz.resource)
        (jazz.text)
        (jazz.tree)
        (jazz.ui)
        (jazz.view))


;;;
;;;; Locale-Text-View
;;;


(class Locale-Text-View extends Text-View
  
  (form
    (<install> focus-selects-all?: #t show-unfocused-selection?: #f return-press-handler: {Event-Handler :host on-ok} escape-press-handler: {Event-Handler :host on-cancel}))
      
      
  (method override (on-tab-press self evt)
    (let ((dialog (find-ascendant self Localized-Dialog)))
      (move-selection dialog self (if (get-shift? evt) -1 +1)))))
  

;;;
;;;; Locale-View
;;;


(class Locale-View extends Layout-View

  
  (form
    (<install>                                 layout-type: fill
      (<Border-View>            name: border   border-type: none style: entry
        (<Scroller-View>        name: scroller layout-type: fill
          (<!>                  name: content
            (<Locale-Text-View> name: text))))))
  
  
  (method override (get-text-view self)
    (locate self 'text)))


;;;
;;;; Localized-Dialog
;;;


(class Localized-Dialog extends Layout-View
  

  (property locales-object initialize #f)
  (property locale-tree    initialize #f)
  
  
  (slot initial-focused-view initialize #f)
  

  (form
    (<install>                                        layout-type: border size: {Dimension 500 500}
      (<Border-View>                   name: border   location: center border-type: edge style: entry
        (<Scroller-View>               name: scroller style: tool hscroll?: #f vscroll?: #t
          (<!>                         name: content  layout-type: fill
            (<Tree-Header>                            style: document
              (<!>                     name: content
                (<Tree-View>           name: locales  font: {Font Label-User} selection-mode: row filled-column: text portfolio: :images tab-press-handler: {Event-Handler :form on-tab-press} selection-handler: {Selection-Handler :form on-selection-change}
                  (<Tree-Node-Column>  name: name     title: {Locales english: "Locale" french: "Locale"} width: 150)
                  (<Tree-Label-Column> name: text     title: {Locales english: "Text" french: "Texte"} width: 350)))))))
      (<Layout-View>                   name: south    location: south layout-type: border size: {Dimension 500 36}
        (<Layout-View>                                location: south size: {Dimension 500 30} layout-type: flow
          (<Push-Button>               name: ok       title: {Locales english: "OK" french: "OK"} location: tail size: {Dimension 80 24} action-handler: {Event-Handler :host on-ok} default?: #t position: {Point 9 3})
          (<Separator>                                location: tail size: {Dimension 3 0} location: tail)
          (<Push-Button>               name: cancel   title: {Locales english: "Cancel" french: "Annuler"} location: tail size: {Dimension 80 24} action-handler: {Event-Handler :host on-cancel} position: {Point 97 3})
          (<Separator>                                size: {Dimension 5 0} location: tail)))))
  
  
  ;;;
  ;;;; Dialog
  ;;;
  
  
  (method override (finish self rest)
    (nextmethod self rest)
    (let ((locales-tree (locate self 'locales))
          (father-table (make-table)))
      (for-each-descendant locale-tree
        (lambda (locale-tree-node level)
          (let ((locale (get-locale locale-tree-node))
                (parent-node (get-parent locale-tree-node)))
            (let ((locale-view (new Locale-View name: (keyword->symbol locale))))
              ;; modify text view
              (let ((locale-text (get-text-view locale-view)))
                (unless initial-focused-view
                  (set! initial-focused-view locale-text))
                (set-string-content locale-text (or (and locales-object 
                                                          (localize-object locales-object locale)) 
                                                     "{}")))
              ;; create row
              (table-set! father-table locale
                (add-row locales-tree
                  state: 'expanded
                  father: (table-ref father-table (and parent-node (get-locale parent-node)) #f)
                  children: (list (new Tree-Node title: (get-title locale-tree-node) image: {Image-Resource "Slot"})
                                  locale-view)))))))))
  
  
  (method override (focus-default self)
    (select-all initial-focused-view)
    (acquire-focus initial-focused-view))
  
  
  (method override (get-modal-result self)
    (let ((alist (collect (lambda (locale-view)
                            (let ((text (get-string-content (get-text-view locale-view))))
                              (and (not (string=? "{}" text))
                                   (cons (symbol->keyword (get-name locale-view)) text))))
                          (map second-child (collect-rows (locate self 'locales))))))
      (and (pair? alist)
           (apply new (cons Locales (alist->plist alist))))))
  
  
  ;;;
  ;;;; Handlers
  ;;;
  
  
  (method public (move-selection self current-text-view delta)
    (let ((current-row (find-ascendant current-text-view Tree-Row))
          (locales-tree (locate self 'locales))
          (ok-button (locate self 'ok))
          (cancel-button (locate self 'cancel)))
      (acquire-focus locales-tree)
      (let ((new-index (+ (row-index locales-tree current-row) delta)))
        (cond ((= -1 new-index)
               (set-single-selection locales-tree (- (get-visible-count locales-tree) 1)))
              ((get-row locales-tree new-index)
               (set-single-selection locales-tree new-index))
              (else
               (set-single-selection locales-tree 0))))))

  
  (method package (on-selection-change self evt)
    (let ((sender (get-sender evt))
          (locales-tree (locate self 'locales)))
      (let ((selection (get-selection evt)))
        (when (and (pair? selection) (null? (cdr selection)))
          (let ((view (second-child (get-row locales-tree (car selection)))))
            (when view
              (acquire-focus (get-text-view view))))))))
  
  
  ;;;
  ;;;; Metaclass
  ;;;

  
  (method meta override (host-icon self)
    {Image-Resource "Catalog"})
  
  
  (method meta override (host-title self)
    {Locales english: "Localized Entry" french: "Saisie localis√©e"})
  
  
  (method meta override (get-class-descriptor self (context: context #f))
    (new Localized-Dialog-Descriptor)))
  

;;;
;;;; Localized-Combo
;;;


(class Localized-Combo extends Combo-Box
  
  
  (slot locales-object initialize #f getter generate)
  
  
  (form
    (<install> kind: choose))
  
  
  (method public (set-locales-object self value)
    (set! self.locales-object (if (string? value) (new Locales all: value) value))
    (set-string-content (locate self 'body) (present (get-domain parent) value)))
  
  
  (method override (button-action self)
    (let ((new-locales-object (get-modal Localized-Dialog locales-object: locales-object locale-tree: (get-locale-tree parent))))
      (unless (nu=? locales-object new-locales-object)
        (set! locales-object new-locales-object)
        (set-value parent (get-value parent))
        (set-modified? self #t)))))


;;;
;;;; Localized-Dialog-Entry
;;;


(class Localized-Dialog-Entry extends Property-Entry
  
  
  (slot locale-tree initialize #f accessors generate)
  
  
  (form
    (<install>                       layout-type: border background: {Color White}
      (<Localized-Combo> name: combo selectable?: #t location: center
        (<!>             name: body  left-padding: 0 top-padding: 1))))
  
   
  (method override (tab-view self)
    (locate self '(combo body)))
  
  
  (method override (get-modified? self)
    (get-modified? (locate self 'combo)))
  
  
  (method override (set-modified? self value)
    (set-modified? (locate self 'combo) value))
  
  
  (method override (set-editable? self value)
    (set-editable? (locate self 'combo) value))
  
  
  (method override (get-value self)
    (get-locales-object (locate self 'combo)))
  
  
  (method override (set-value self value)
    (set-locales-object (locate self 'combo) value)))
  


;;;
;;;; Localized-Entry
;;;


(class undocumented Localized-Entry extends String-Entry
  
  
  (property active-locale initialize #f accessors generate)
  
  
  (slot locales-object)
  
  
  (method override (finish self rest)
    (nextmethod self rest)
    (set! locales-object #f))
  
  
  ;;;
  ;;;; Value
  ;;;
  
  
  (method (make-locales-object self new-str)
    (let ((old-str (if locales-object (localize-object locales-object active-locale) #f)))
      (if (equal? new-str old-str)
          locales-object
        (let* ((old-plist (if locales-object (get-locales locales-object) '()))
               (new-plist (if new-str
                              (plist-add old-plist active-locale new-str)
                            (plist-remove old-plist active-locale))))
          (if (null? new-plist)
              #f
            (apply new Locales new-plist))))))
  
  
  (method override (get-value self)
    (if active-locale
        (let ((new-value (make-locales-object self (nextmethod self))))
          (set! locales-object new-value)
          new-value)
      (nextmethod self)))
  
  
  (method override (set-value self value)
    (set! locales-object (and active-locale (is? value Locales) value))
    (nextmethod self value))
  
   
  ;;;
  ;;;; Descriptor
  ;;;

  
  (method meta override (get-class-descriptor self (context: context #f))
    (new Localized-Entry-Descriptor)))


;;;
;;;; Design
;;;


(submodule design


(import (jazz.ui.descriptors))


(class Localized-Dialog-Descriptor extends Layout-View-Descriptor
  
  
  (form
    (<install>
      (<properties~>
        (<Property-Descriptor> name: locales-object
          (<Value-Domain>      name: domain         nullable?: #t))
        (<Property-Descriptor> name: locale-tree
          (<Value-Domain>      name: domain         nullable?: #t))))))


(class Localized-Entry-Descriptor extends Property-Entry-Descriptor
  
  
  (form
    (<install>
      (<properties~>
        (<Property-Descriptor> name: active-locale
          (<Value-Domain>      name: domain        nullable?: #t))))))))
