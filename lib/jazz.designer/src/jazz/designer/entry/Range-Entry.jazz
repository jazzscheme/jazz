;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Range Entry
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.designer.entry.Range-Entry jazz


(import (jazz.designer)
        (jazz.graphic)
        (jazz.jml)
        (jazz.ui))


(class Range-Entry extends Property-Entry
  
  
  (form
    (<install>
      (<Border-View>           name: border   border-type: edge style: entry
        (<Scroller-View>       name: scroller hscroll?: #f vscroll?: #f
          (<!>                 name: content  layout-type: fill
            (<Entry-Text-View> name: text left-padding: 0 top-padding: 0))))))
  
  
  (method override (finish rest)
    (nextmethod rest)
    (set-editor~ (locate 'text) self))
  
  
  ;;;
  ;;;; Tab
  ;;;
  
  
  (method override (tab-view)
    (locate 'text))
  
  
  ;;;
  ;;;; Validate
  ;;;
  
  
  (method override (validate domain)
    (let ((content (get-string-content~ (locate-component 'text))))
      (if (and (empty-string? content)
               (not (get-nullable?~ domain)))
          (new Property-Violation message: "This field is mandatory")
        #f)))
  
  
  ;;;
  ;;;; Value
  ;;;
  
  
  (method override (get-modified?)
    (get-modified?~ (locate 'text)))
  
  
  (method override (set-modified? value)
    (set-modified?~ (locate 'text) value))  
  
  ;;;
  ;;;; Value
  ;;;
  
  
  (method override (get-value)
    (let ((string (get-string-content~ (locate 'text))))
      (if (equal? string "#f")
          #f
        (let ((list (read-delimited-string string #\comma)))
          (bind ((start-line) (start-col) (end-line) (end-col)) list
            (new Range
              (new Cell start-line start-col)
              (new Cell end-line end-col)))))))
  
  
  (method override (set-value range)
    (let ((start (get-start~ range))
          (end (get-end~ range)))
      (set-string-content~ (locate 'text)
        (if (not range)
            "#f"
          (format "{a}, {a}, {a}, {a}"
                  (get-line~ start)
                  (get-col~ start)
                  (get-line~ end)
                  (get-col~ end))))))
  
  
  ;;;
  ;;;; Editable
  ;;;
  
  
  (method override (set-editable? flag)
    (set-border-type~ (locate 'border) (if flag 'edge 'none))
    (set-editable?~ (locate 'text) flag)
    (set-background~ (locate 'text) (if flag {Color name: White} {Color name: Medium})))
  
  
  ;;;
  ;;;; Enabled
  ;;;
  
  
  (method override (set-enabled? flag)
    (set-enabled?~ (locate 'text) flag))))