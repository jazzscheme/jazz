;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Value Entry
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2012
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.designer.entry.Value-Entry jazz


(import (jazz.designer))


;;;
;;;; Value-Entry
;;;


(class Value-Entry extends String-Entry
    
  
  (property is initialize #f accessors generate)
  
  
  ;;;
  ;;;; Value
  ;;;
  
  
  (method override (get-value)
    (let ((content (get-string-content~ (locate 'text))))
      (and (not (empty-string? content))
           (not (string=? content "{}"))
           (let ((value (read-string-safe content)))
             (and (or (is-not? is~self Class-Reference)
                      (is? value (resolve-reference~ is~self)))
                  value)))))
  
  
  (method override (set-value value)
    (set-string-content~ (locate 'text)
      (if (not value)
          "{}"
        (->string value :reader))))

  
  ;;;
  ;;;; Descriptor
  ;;;


  (method meta override (get-class-descriptor)
    (new Value-Entry-Descriptor)))


;;;
;;;; Design
;;;


(submodule design


(import (jazz.designer.entry.Property-Entry)
        (jazz.jml))


(class Value-Entry-Descriptor extends Property-Entry-Descriptor
  
  
  (form
    (<install>
      (<properties~>
        (<Property-Descriptor>      name: is
          (<Class-Reference-Domain> name: domain nullable?: #t))))))))
  
