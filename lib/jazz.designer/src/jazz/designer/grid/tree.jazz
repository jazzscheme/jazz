;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Grid
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Jeremie Lasalle Ratelle.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module jazz.designer.grid.tree jazz


(import (jazz.action)
        (jazz.application)
        (jazz.component)
        (jazz.designer)
        (jazz.event)
        (jazz.graphic)
        (jazz.handler)
        (jazz.markup)
        (jazz.text)
        (jazz.tree)
        (jazz.ui))


(definition public (call-with-row/column-data row column proc)
  (proc (get-user-data row) (get-provider-data column)))


;;;
;;;; Data-Provider
;;;


(interface Data-Provider
  
  
  (method public virtual abstract (get-domain self row-data column-data))
  (method public virtual abstract (get-data self row-data column-data fail succeed))
  (method public virtual abstract (set-data self row-data column-data value))
  (method public virtual abstract (read-only? self row-data column-data))
  (method public virtual abstract (get-violation self row-data column-data))
  (method public virtual abstract (set-violation self row-data column-data violation)))


(class Provider-Data extends Component
  
  
  (method override (default-name self)
    'provider-data))



(class Provider-Violation extends Component

  
  (property violation initialize #f accessors generate)
  (property presentation initialize #f accessors generate))


;;;
;;;; Grid-Controller
;;;


(interface Grid-Controller
  
  
  (method public virtual abstract (get-focus-actions self))
  (method public virtual abstract (focus-update-actions self))
  (method public virtual abstract (selection-cell? self row column))
  (method public virtual abstract (get-context-menu self))
  (method public virtual abstract (on-selection-change self evt))
  (method public virtual abstract (get-tab-stops self))
  (method public virtual abstract (copy-selection self))
  (method public virtual abstract (cut-selection self))
  (method public virtual abstract (delete-selection self))
  (method public virtual abstract (paste-clipboard self))
  (method public virtual abstract (can-copy? self))
  (method public virtual abstract (can-cut? self))
  (method public virtual abstract (can-delete? self))
  (method public virtual abstract (can-paste? self))
  (method public virtual abstract (get-draggable? self))
  (method public virtual abstract (active-background self row-data column-data))
  (method public virtual abstract (inactive-title self row-data column-data))
  (method public virtual abstract (inactive-background self row-data column-data))
  (method public virtual abstract (get-frame-color self))
  (method public virtual abstract (cell-editable? self row column))
  (method public virtual abstract (merge? self master-row-data row-data column-data))
  (method public virtual abstract (client-rows-datas self))
  (method public virtual abstract (drop? self source cell))
  (method public virtual abstract (make-columns self))
  (method public virtual abstract (receive-drop self sender pos drag-drop)))
  

;;;
;;;; Grid-Column
;;;


(class Grid-Tree-Column extends Tree-Label-Column
  
  
  (form
    (<install> justification: (1 1)))
  
  
  (method package (get-provider-data self)
    (child self 'provider-data))
  
  
  (method override (draw-data self surface context row data width height)
    (let ((provider (get-provider parent)))
      (call-with-row/column-data row self
        (lambda (row-data column-data)
          (get-data provider row-data column-data
            (lambda ()
              (nextmethod self surface context row data width height))
            (lambda (value)
              (let ((domain (get-domain provider row-data column-data)))
                (draw-data domain surface context value self row data width height)))))))))


;;;
;;;; Grid-Tree
;;;


(class Grid-Tree extends Tree-View
  
  
  (form
    (<install> default-row-height: 15 row-spacing: 1 column-spacing: 1 background: {Color Medium-Gray} empty-background: {Color Medium-Gray} multiple-selection?: #t filled-column: #f selection-mode: cell selection-handler: {Event-Handler :self on-selection-change}))
  
  
  (method package (get-provider self)
    (child self 'provider))
  
  
  (method (get-controller self)
    (child self 'controller))
  
  
  (method virtual (get-widget self)
    (find-ascendant self Grid-Tree-Widget))
  
  
  (method override (focus-actions self)
    (let ((actions (get-focus-actions (get-controller self))))
      (if actions
          (cons actions (nextmethod self))
        (nextmethod self))))
  
  
  (method override (focus-update-actions self)
    (focus-update-actions (get-controller self)))
  
  
  (method package (selected-cells-data self)
    (let ((cells (remove-duplicates (get-selection self) test: cell=?)))
      (values (map (compose* get-user-data (~ get-row self) get-line) cells)
              (map (compose* get-provider-data (~ get-column self) get-col) cells))))
  
  
  (method (cell-data-values self cell)
    (receive (row column) (cell-values self cell)
      (values (get-user-data row) (get-provider-data column))))
  
  
  ;;;
  ;;;; Handlers
  ;;;
  
  
  (method override (mouse-down self evt)
    (let ((cell (view->tree self (get-position evt))))
      (when cell
        (save-edition self)
        (end-edition self)
        (receive (row column) (cell-values self cell)
          (if (and (or (null? selection)
                       (receive (row column) (cell-values self (car selection))
                         (selection-cell? (get-controller self) row column)))
                   (selection-cell? (get-controller self) row column))
              (nextmethod self evt)
            (select-cell self cell))))))
  
  
  (method override (context-menu self evt)
    (let ((pos (get-position evt)))
      (save-edition self)
      (end-edition self)
      (with-context-click self pos
        (lambda ()
          (let ((menu (get-context-menu (get-controller self))))
            (when menu
              (track-popup-menu self menu pos)))))))
  
  
  (method package (on-selection-change self evt)
    (on-selection-change (get-controller self) evt)
    (update-focus-actions (get-application))
    (update-rows-highlight (get-controller self) (get-old evt) (get-selection evt))
    (invalidate-view self))
  
  
  (method (editor-arrow-press self tab-view evt)
    (let ((text? (is? tab-view Text-View)))
      (let ((edited-cell (get-edited-cell self))
            (next-move (dispatch (class-of tab-view) (if text? 'arrow-move 'arrow-press)))
            (direction (get-property evt direction:))
            (internal? (if text? (get-property evt word?:) (get-control? evt)))
            (evt (if text?
                     (make-event Action-Event (get-kind evt) (get-sender evt) word?: #f extend?: (get-property evt extend?:) direction: (get-property evt direction:))
                   evt)))
        (unless internal?
          (save-edition self))
        (case direction
          ((left)  (if internal? (next-move tab-view evt) (select-left self edited-cell)))
          ((right) (if internal? (next-move tab-view evt) (select-right self edited-cell)))
          ((up)    (select-up self edited-cell))
          ((down)  (select-down self edited-cell))))))
  
  
  (method override (arrow-press self evt)
    (define (select-direction next-cell)
      (let ((cell (next-cell (get-single-selection self))))
        (when cell
          (select-cell self cell))))
    
    (let ((direction (get-property evt direction:)))
      (select-direction (case direction
                          ((left)  (~ cell-left self))
                          ((right) (~ cell-right self))
                          ((up)    (~ cell-up self))
                          ((down)  (~ cell-down self))))))
  
  
  (method (editor-return-press self tab-view evt)
    (on-tab-press tab-view evt))
  
  
  (method (editor-tab-press self tab-view evt)
    (if (and (is? tab-view Text-View) (has-ambiguous-completion? tab-view))
        (end-completion tab-view)
      (navigate-view tab-view (if (get-shift? evt) #t #f))))
  
  
  (method override (navigate-tab self from backward?)
    (save-edition self)
    (let ((stops (get-tab-stops self)))
      (if (not-null? stops)
          (if (eq? from (get-creator self))
              (let ((cell (if backward?
                              (last stops)
                            (first stops))))
                (when cell
                  (when (eq? cell from)
                    (set! cell (navigated-view self cell backward?)))
                  (if (is? cell Cell)
                      (select-cell self cell)
                    (navigate-tab cell self backward?))))
            (let ((sel (navigated-view self (car (get-selection self)) backward? test: cell=?)))
              (if (and sel (is? sel Cell))
                  (select-cell self sel)
                (navigate-tab sel self backward?))))
        (nextmethod self from backward?))))
  
  
  (method override (get-tab-stops self)
    (get-tab-stops (get-controller self)))
  
  
  ;;;
  ;;;; Copy
  ;;;
  
  
  (method override (copy-selection self)
    (copy-selection (get-controller self)))
  
  
  (method override (cut-selection self)
    (cut-selection (get-controller self)))
  
  
  (method override (delete-selection self)
    (delete-selection (get-controller self)))
  
  
  (method override (paste-clipboard self)
    (paste-clipboard (get-controller self)))
  
  
  (method override (can-copy? self)
    (can-copy? (get-controller self)))
  
  
  (method override (can-cut? self)
    (can-cut? (get-controller self)))
  
  
  (method override (can-paste? self)
    (can-paste? (get-controller self)))
  
  
  (method override (can-delete? self)
    (can-delete? (get-controller self)))
  
  
  (method override (get-draggable? self)
    (get-draggable? (get-controller self)))
  
  
  ;;;
  ;;;; Drag
  ;;;
  
  
  (method override (highlight-drop self drag-drop pos)
    )
  
  
  (method override (get-tree-target self drag-drop pos)
    (call-with-view->tree self pos
      (lambda (cell v height)
        (let ((row (and cell (get-row self (get-line cell))))
              (col (and cell (get-col cell)))
              (source (get-source drag-drop))
              (current (get-target drag-drop)))
          (when (or (neq? (get-view source) self) (neq? (get-row source) row) (not (equal? (get-col source) col)))
            (if (and current (eq? self (get-view current)) (eq? row (get-row current)) (equal? col (get-col current)))
                current
              (and (drop? (get-controller self) source cell) (new Tree-Drop-Target view: self row: row col: col))))))))
  
  
  (method override (receive-drop self sender pos drag-drop)
    (receive-drop (get-controller self) sender pos drag-drop))
  
  
  ;;;
  ;;;; Edition
  ;;;
  
  
  (method (prepare-and-focus-entry self entry)
    (let ((view-to-focus (tab-view entry)))
      (set-arrow-press-handler view-to-focus (new Event-Handler execute: (lambda (evt) (editor-arrow-press self view-to-focus evt))))
      (set-return-press-handler view-to-focus (new Event-Handler execute: (lambda (evt) (editor-return-press self view-to-focus evt))))
      (set-tab-press-handler view-to-focus (new Event-Handler execute: (lambda (evt) (editor-tab-press self view-to-focus evt))))
      (acquire-focus view-to-focus)
      (select-all view-to-focus)))
  
  
  (method virtual (new-editor self)
    (new Border-View border-type: 'edge style: 'entry))
  
  
  (method package virtual (setup-entry self editor domain component)
    (let ((entry (setup-entry domain editor (list component))))
      (setup-for-grid entry)
      entry))
  
  
  (method package (save-edition self)
    (let ((provider (get-provider self)))
      (when edited-site
        (let ((cell (site->cell self edited-site))
              (entry (first-child (first-child cell-editor))))
          (receive (row-data column-data) (cell-data-values self cell)
            (when (get-modified? entry)
              (let ((text (get-presentation entry))
                    (violation (presentation-violation entry)))
                (set-violation provider row-data column-data (and violation (new Provider-Violation violation: violation presentation: text)))
                (if violation
                    (update-cell self cell)
                  (set-data provider row-data column-data (get-value entry))))))))))
  
  
  (method override (select-cell self cell)
    (let ((provider (get-provider self)))
      (receive (row-data column-data) (cell-data-values self cell)
        (acquire-focus self)
        (set-single-selection self cell)
        (unless (read-only? provider row-data column-data)
          (get-data provider row-data column-data
            (const #f)
            (lambda (value)
              (let ((domain (get-domain provider row-data column-data))
                    (editor (new-editor self))
                    (component (element (get-hierarchy row-data) (get-component-offset column-data))))
                (let ((entry (setup-entry self editor domain component)))
                  (let ((provider-violation (get-violation provider row-data column-data)))
                    (if provider-violation
                        (set-presentation entry (get-presentation provider-violation))
                      (set-value entry value)))
                  (edit-cell self cell editor: editor)
                  (prepare-and-focus-entry self entry)))))))))
  
  
  (method package (populate self)
    (let ((scrolled-position (get-scrolled-position self)))
      (remove-every-row self)
      (remove-columns self)
      (for-each (lambda (column)
                  (set-parent column self))
                (make-columns (get-controller self)))
      (let ((datas (client-rows-datas (get-controller self))))
        (for-each (lambda (row-data row-labels)
                    (add-row self children: row-labels user-data: row-data))
                  datas
                  (map (~ make-row-labels self) datas)))
      (merge-grid-cells self)
      (update-highlight self)
      (scroll-to self scrolled-position)))
  
  
  ;;;
  ;;;; Labels
  ;;;
  
  
  (method (make-row-label self row-data column-data)
    (let ((label (new Tree-Label)))
      (update-label self row-data column-data label #f)
      label))
  
  
  (method (make-row-labels self row-data)
    (map (lambda (column)
           (make-row-label self row-data (get-provider-data column)))
         (get-columns self)))
  
  
  (method public (update-label self row-data column-data label selected?)
    (define (update-inactive-element)
      (set-title label (inactive-title (get-controller self) row-data column-data))
      (set-background label (inactive-background (get-controller self) row-data column-data selected?)))
    
    (define (update-active-element val)
      (let ((domain (get-domain (get-provider self) row-data column-data)))
        (set-background label (active-background (get-controller self) row-data column-data selected?))
        (let ((violation (get-violation (get-provider self) row-data column-data)))
          (if violation
              (set-title label (get-presentation violation))
            (set-title label (present domain val))))))
    
    (get-data (get-provider self) row-data column-data update-inactive-element update-active-element))
  
  
  (method public (update-editor self row-data column-data editor)
    (let ((entry (first-child (get-editor editor))))
      (unless (or (get-modified? entry)
                  (get-violation (get-provider self) row-data column-data))
        (get-data (get-provider self) row-data column-data
          (const #f)
          (~ set-value entry)))))
  
  
  ;;;
  ;;;; Highlight
  ;;;
  
  
  (method virtual (update-frame-highlight self)
    (set-border-color (get-widget self) (get-frame-color (get-controller self))))
  
  
  (method virtual (update-cell-highlight self tree-data cell)
    (receive (row-data column-data) (cell-data-values self cell)
      (let ((current-color (get-frame-color tree-data))
            (color (get-cell-color (get-controller self) row-data column-data)))
        (unless (eq? current-color color)
          (set-frame-color tree-data color)
          (invalidate-cell self cell)))))
  
  
  (method virtual (get-editor-widget self editor)
    (find-ascendant editor Border-View include-self?: #t))
  
      
  (method virtual (update-editor-highlight self tree-data cell)
    (update-cell-highlight self (get-preserved-data tree-data) cell)
    (let ((border (get-editor-widget self (get-editor tree-data))))
      (receive (row-data column-data) (cell-data-values self cell)
        (let ((current-color (get-border-color border))
              (color (get-editor-color (get-controller self) row-data column-data)))
          (unless (eq? current-color color)
            (set-border-color border color))))))
  
  
  (method (update-cells-highlight self)
    (for-each-visible-row self
      (lambda (row line)
        (for-each-column self
          (lambda (column col)
            (let ((tree-data (get-child row col))
                  (cell (new Cell line col)))
              (typecase (~ child self)
                ((Tree-Label)
                 (update-cell-highlight self tree-data cell))
                ((Tree-Data-View)
                 (update-editor-highlight self tree-data cell)))))))))
          
  
  (method package (update-highlight self)
    (update-frame-highlight self)
    (update-cells-highlight self))
  
  
  ;;;
  ;;;; Merge cells
  ;;;
  
  
  (method (merge-column-cells self column col)
    (let (iterate-master-rows (master (get-next (get-root-row self))))
      (when master
        (let (iterate-rows (current (get-next master)) (to-merge 0))
          (if (and current (merge? (get-controller self) (get-user-data master) (get-user-data current) (get-provider-data column)))
              (iterate-rows (get-next current) (+ to-merge 1))
            (let ((cell (new Cell (row->line self master) col)))
              (merge-cells self cell (+ to-merge 1) 1)
              (iterate-master-rows current)))))))
  
  
  (method (merge-grid-cells self)
    (for-each-column self (~ merge-column-cells self)))
  
  
  (method package (update-cell self cell)
    (let* ((edited-cell (get-edited-cell self))
           (editor (and edited-cell (cell=? cell edited-cell) cell-editor))
           (label (if editor (get-preserved-data cell-editor) (get-cell-data self cell))))
      (receive (row column) (cell-values self cell)
        (call-with-row/column-data row column
          (lambda (rd cd)
            (let ((selected-lines (remove-duplicates (map get-line selection)))
                  (cell-line (get-line cell)))
              (update-label self rd cd label (memv? cell-line selected-lines)))
            (update-cell-highlight self label cell)
            (when editor
              (update-editor self rd cd editor)
              (update-editor-highlight self editor cell))
            (invalidate-cell self cell)))))))


(class Grid-Tree-Widget extends Border-View
  
  
  (form
    (<install>                                         border-type: edge style: entry background: {Color Medium-Gray}
      (<Scroller-View>              name: scroller     style: document vscroll?: #t hscroll?: #t
        (<content~>                                    layout-type: fill
          (<Tree-Header>            name: grid-header  style: document @a (background: {Color Medium-Gray} empty-background: {Color Medium-Gray})
            (<content~>
              (<Grid-Tree>          name: grid)))))))))
