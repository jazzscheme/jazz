;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Designer Manager
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.designer.manager.Designer-Manager jazz


(import (jazz.designer)
        (jazz.jml)
        (jazz.library)
        (jazz.ui)
        (jazz.ui.view)
        (jazz.ui.window))


(class Designer-Manager extends View


  (property client initialize {} getter get-client setter set-client)
    
  
  (slot flow-layout)


  (form
    (<install>
      (<Radio-Tool>    name: mode-select size: {Dimension 22 22} image-name: {Bitmap-Resource "ModeSelect"} portfolio: :icons selected?: #t tooltip?: #t tooltip-text: "Select" action-handler: {Event-Handler :form on-mode mode: select})
      @wait
      (<Separator>                       size: {Dimension 2 0})
      @wait
      (<Radio-Tool>    name: mode-edit   size: {Dimension 22 22} image-name: {Bitmap-Resource "Font"} portfolio: :icons tooltip?: #t tooltip-text: "Edit" action-handler: {Event-Handler :form on-mode mode: edit})
      @wait
      (<Separator>                       size: {Dimension 2 0})
      @wait
      (<Radio-Tool>    name: mode-rect   size: {Dimension 22 22} image-name: {Bitmap-Resource "ModeRect"} portfolio: :icons tooltip?: #t tooltip-text: "Rectangle" action-handler: {Event-Handler :form on-mode mode: rect})
      (<Separator>)
      (<Toggle-Tool>   name: frames      size: {Dimension 22 22} tooltip?: #t tooltip-text: "Show Frames?" image-name: {Bitmap-Resource "Fill"} portfolio: :icons selected?: #t action-handler: {Event-Handler :form on-toggle-frames})
      (<Toggle-Tool>   name: content     size: {Dimension 22 22} tooltip?: #t tooltip-text: "Show Content?" image-name: {Bitmap-Resource "View"} portfolio: :icons selected?: #t action-handler: {Event-Handler :form on-toggle-content})
      (<Separator>)
      (<Toggle-Tool>   name: try-out     size: {Dimension 22 22} tooltip?: #t tooltip-text: "Try Out" image-name: {Bitmap-Resource "Branch"} portfolio: :icons action-handler: {Event-Handler :form on-toggle-try-out})
      (<Separator>)
      (<Push-Tool>     name: edit-form   size: {Dimension 22 22} tooltip?: #t tooltip-text: "Edit Source form" image-name: {Bitmap-Resource "Script"} portfolio: :icons action-handler: {Event-Handler :form on-edit-form})))
  
  
  (method meta override (external-name . rest)
    'designer-manager)

  
  ;;;
  ;;;; Host
  ;;;
  
  
  (method meta override (host-icon)
    {Bitmap-Resource "Designer"})
  

  (method meta override (host-title)
    "Design")
  
  
  (method override (client-activate)
    (let ((guest (current-document)))
      (let ((client (essay (is? guest View-Editor) guest)))
        (set-client client))))
  
  
  (method override (client-deactivate)
    (set-client {}))

  
  ;;;
  ;;;; Events
  ;;;


  (method override (finish initargs)
    (nextmethod initargs)
    (set! flow-layout (new Flow-Layout insets: {Rect 4 5 0 0}))
    (layout-view))
  
  
  (method override (layout)
    (layout~ flow-layout children (get-width) (get-height)))
  
  
  (method (on-editor evt)
    (case (get-kind~ evt)
      ((:designer-change) (set-designer (get-property~ evt designer:)))))
  
  
  (method (on-new evt)
    )
  
  
  (method (on-open evt)
    (set-client~ client (instantiate~ (open-form~ client))))
  
  
  (method (on-toggle-frames evt)
    (toggle-frames~ client))
  
  
  (method (on-toggle-content evt)
    (toggle-content~ client))
  
  
  (method (on-toggle-try-out evt)
    (toggle-try-out~ client))
  
  
  (method (on-edit-form evt)
    (view-component~ client))
  
  
  ;;;
  ;;;; Mode
  ;;;
  
  
  (method (on-mode evt)
    (let ((mode (get-property~ evt mode:))
          (editor (current-document)))
      (set-mode~ editor mode)))
  
  
  ;;;
  ;;;; Client
  ;;;


  (method public (get-client)
    client)


  (method public (set-client clt)
    (set! client clt)
    (client-update))
  
  
  (method (client-update)
    (set-enabled?~ (locate 'mode-select) client)
    @wait
    (set-enabled?~ (locate 'mode-edit) client)
    @wait
    (set-enabled?~ (locate 'mode-rect) client)
    (set-enabled?~ (locate 'edit-form) client)
    (let ((frames-button (locate 'frames))
          (content-button (locate 'content))
          (try-out-button (locate 'try-out)))
      (set-enabled?~ frames-button client)
      (set-enabled?~ content-button client)
      (set-enabled?~ try-out-button client)
      (set-selected?~ frames-button (and client (get-show-frames?~ client)))
      (set-selected?~ content-button (and client (get-show-content?~ client)))
      (set-selected?~ try-out-button (and client (trying-out?~ client)))))
  
  
  ;;;
  ;;;; Designer
  ;;;
    
  
  (method (set-designer designer)
    (if (not designer)
        (set-title "Design")
      (let ((reference (get-reference~ designer)))
        (set-title (format "Design : {a}" (category-name (class-of reference)))))))))
