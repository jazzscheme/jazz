;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Combo Row
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.designer.row.Combo-Row jazz


(import (jazz.designer))


(class undocumented Combo-Row extends Value-Row)


@old
(class undocumented Combo-Row extends Value-Row


  (property condensed?     accessors explicit)
  (property choices        accessors explicit)
  (property kind    <void> accessors explicit)


  ;;;
  ;;;; Initialization
  ;;;


  (method override (initialize . rest)
    (bind-keywords ((choices '()) (kind 'pick) (entry-test #f) (condensed? #f) . others) rest
      (apply nextmethod others)
      (set! editor (new (editor-class) value-row: self nullable?: (getf rest nullable?: not-found: #f) entry-test: entry-test))
      (set-condensed?~ editor condensed?)
      (set-choices choices)
      (set-kind kind)))
  
  
  (method override (editor-class)
    Combo-Row-Editor)
  
  
  ;;;
  ;;;; Access
  ;;;


  (method public (get-condensed?)
    (get-condensed?~ editor))


  (method public (set-condensed? value)
    (set-condensed?~ editor value))


  (method public (get-choices)
    (get-choices~ editor))


  (method public (set-choices value)
    (when value
      (set-choices~ editor value)))
  
  
  (method public (set-choices-updater value)
    (set-choices-updater~ editor value))


  (method public (get-kind)
    (get-kind~ editor))


  (method public (set-kind value)
    (set-kind~ editor value))
  
  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method (enter-combo-choice)
    (enter-edited-value)
    (focus-editor))
  
  
  ;;;
  ;;;; Presentation
  ;;;
  
  
  (method override (present value)
    (present-value~ editor value))
  
  
  ;;;
  ;;;; Value
  ;;;
  
  
  (method override (default-value)
    (caar (get-choices)))
  
  
  ;;;
  ;;;; Edition
  ;;;
  
  
  (method override (close-editor?)
    #f)
  
  
  (method override (get-edited-value)
    (let ((string (get-content~ editor)))
      (if (and nullable? (or (empty-string? string) (= string "{}")))
          #f
        (if limit-to-list?
            (get-value~ editor)
          string))))
  
  
  (method override (set-edited-value value)
    (set-value~ editor value))
  
  
  (method override (get-edited-modified?)
    (get-modified?~ editor))
  
  
  (method override (set-edited-modified? flag)
    (set-modified?~ editor flag))
  
  
  (method override (show-cursor)
    (show-text-cursor~ (get-body~ editor)))
  
  
  (method override (focused-editor)
    (get-body~ editor))
  
  
  (method protected virtual (combo-choose)
    #f)))
