;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Composite Row
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.designer.row.Composite-Row jazz


(import (jazz.designer)
        (jazz.graphic)
        (jazz.jml)
        (jazz.library)
        (jazz.platform)
        (jazz.system)
        (jazz.ui))


(class undocumented Composite-Row extends String-Row
  
  
  ;;;
  ;;;; Editor
  ;;;
  
  
  (method override (editor-class)
    Composite-Text-View)
  
  
  ;;;
  ;;;; Edition
  ;;;
  
  
  (method override (get-edited-value)
    (let ((string (get-string-content~ editor)))
      (if (or (empty-string? string) (= string "{}"))
          #f
        (parse-entries (current-entries)))))
  
  
  ;;;
  ;;;; Parse
  ;;;
  
  
  (method protected virtual (accepts-spaces?)
    #t)
  
  
  (method protected virtual (parse-entries entries)
    (map parse-entry entries))
  
  
  (method protected virtual (parse-entry entry)
    )
  
  
  (method (parse-error (message: message #f) (start: start #f) (end: end #f) (part: part #f))
    (let ((message (or message (syntax-message)))
          (start (or start (and part (get-start~ part))))
          (end (or end (and part (get-end~ part)))))
      (signal (new Parse-Error message: message start: (and start (new Cell 0 start)) end: (and end (new Cell 0 end))))))
  
  
  (method protected virtual (syntax-message)
    "Invalid value")
  
  
  ;;;
  ;;;; Presentation
  ;;;
  
  
  (method override (present value)
    (if (not value)
        "{}"
      (format "{l detail: :human separator: \", \"}"
              (present-value value))))
  
  
  (method protected virtual (present-value value)
    (map present-entry value))
  
  
  (method protected virtual (present-entry entry)
    )
  
  
  ;;;
  ;;;; Navigation
  ;;;
  
  
  (method (navigate-backward)
    (let* ((entries (current-entries))
           (pos (get-col~ (get-start~ editor)))
           (part (pos->part entries pos)))
      (if (not part)
          (bell)
        (let ((previous (- (get-rank~ part) 1)))
          (for-each-part entries
            (lambda (part)
              (when (= (get-rank~ part) previous)
                (select-part part))))))))
  
  
  (method (navigate-forward)
    (let* ((entries (current-entries))
           (pos (get-col~ (get-end~ editor)))
           (part (pos->part entries pos)))
      (if (not part)
          (bell)
        (let ((next (+ (get-rank~ part) 1)))
          (for-each-part entries
            (lambda (part)
              (when (= (get-rank~ part) next)
                (select-part part))))))))
  
  
  (method (current-entries)
    (determine-entries (get-string-content~ editor)))
  
  
  (method (current-part entries)
    (let ((pos (get-col~ (get-start~ editor))))
      (pos->part entries pos)))
  
  
  (method (current-position entries)
    (let ((pos (get-col~ (get-start~ editor))))
      (pos->position entries pos)))
  
  
  (method (pos->part entries pos)
    (continuation-capture
      (lambda (return)
        (for-each-part entries
          (lambda (part)
            (when (and (>= pos (get-start~ part)) (<= pos (get-end~ part)))
              (continuation-return return part))))
        #f)))
  
  
  (method (pos->position entries pos)
    (continuation-capture
      (lambda (return)
        (let ((string (get-string-content~ editor)))
          (for-each-part entries
            (lambda (part)
              (if (between? pos (get-start~ part) (get-end~ part))
                  (continuation-return return (get-position~ part))
                (let* ((n (get-end~ part))
                       (end (find-entry-end string n)))
                  (when (and end (between? pos (+ n 1) end))
                    (continuation-return return (+ (get-position~ part) 1)))))))
          (decrease! pos)
          (while #t
            (if (< pos 0)
                (continuation-return return 0)
              (let ((c (element string pos)))
                (cond ((and (accepts-spaces?) (eqv? c #\space)) (decrease! pos))
                      ((eqv? c #\comma) (continuation-return return 0))
                      (else (continuation-return return #f))))))))))
  
  
  (method (find-entry-end string n)
    (let ((len (cardinality string)))
      (continuation-capture
        (lambda (return)
          (while #t
            (if (>= n len)
                (continuation-return return n)
              (let ((c (element string n)))
                (cond ((and (accepts-spaces?) (eqv? c #\space)) (increase! n))
                      ((eqv? c #\comma) (continuation-return return n))
                      (else (continuation-return return #f))))))))))
  
  
  (definition (for-each-part entries proc)
    (for-each (lambda (entry)
                (for-each proc entry))
              entries))
  
  
  ;;;
  ;;;; Completion
  ;;;
  
  
  (method (view-completions)
    (define (find-to-complete)
      (let* ((entries (current-entries))
             (part (current-part entries)))
        (if (not part)
            (let ((position (current-position entries)))
              (when position
                (values position #f (get-col~ (get-start~ editor)) (get-col~ (get-end~ editor)))))
          (values (get-position~ part) (get-text~ part) (get-start~ part) (get-end~ part)))))
    
    (let ((info (find-to-complete)))
      (if (not info)
          (bell)
        (receive (position text start end) info
          (let ((domain (part-domain position)))
            (if (not domain)
                (bell)
              (let* ((height (* (length domain) 17))
                     (border (new Border-View name: 'border border-type: 'solid border-color: {Color red: 128 green: 128 blue: 128}))
                     (scroller (new Scroller-View size: (new Dimension 150 (max 50 (min height 250))) style: 'tool vscroll?: #t))
                     (content (get-content~ scroller))
                     (tree (new Completion-Tree value-row: self selected: (get-selection~ editor) start: start end: end)))
                (set-layout-type~ content 'fill)
                (set-parent~ tree content)
                (set-client~ scroller tree)
                (let ((sorted (sort ci<? domain)))
                  (for-each (lambda (name)
                              (add-row~ tree children: (list (new Tree-Node image: {Image-Resource "DesignColumn"} title: name)) user-data: name))
                            sorted))
                (let* ((start (get-start~ editor))
                       (par (get-paragraph~ editor (get-row~ start)))
                       (view (text->view~ editor start))
                       (pos (+ view (new Dimension -10 (+ (get-height~ par) 2))))
                       (alternate (+ view (new Dimension -10 -2))))
                  (popup~ editor scroller pos alternate-position: alternate border: border)
                  (if (not text)
                      (set-selection~ tree (list 0))
                    (locate-prefix~ tree text))
                  (acquire-focus~ tree)))))))))
  
  
  (method (complete-part start end tree)
    (let ((rank (get-single-selection~ tree)))
      (if (not rank)
          (bell)
        (let ((string (get-user-data~ (get-row~ tree rank))))
          (close-popups~ (get-player~ parent) all?: #t)
          (set-selection~ editor (new Range$Cell$ (new Cell 0 start) (new Cell 0 end)))
          (insert-string~ editor string)))))
  
  
  ;;;
  ;;;; Structure
  ;;;
  
  
  (method (determine-entries string)
    (define (determine-entry string rank offset)
      (let* ((parts (new List-Factory))
             (position 0)
             (start #f)
             (end #f)
             (end-part
               (lambda ()
                 (when start
                   (put~ parts (new Part rank position (subseq string start (+ end 1)) (+ offset start) (+ offset end 1)))
                   (increase! rank)
                   (increase! position)
                   (set! start #f)
                   (set! end #f)))))
        (loop (for c in-sequence string)
              (for n from 0)
              (if (and (accepts-spaces?) (eqv? c #\space))
                  (end-part)
                (if (not start)
                    (begin
                      (set! start n)
                      (set! end n))
                  (set! end n))))
        (end-part)
        (get-output~ parts)))
    
    (let ((entries (new List-Factory))
          (rank 0)
          (offset 0))
      (for-each (lambda (string)
                  (let ((parts (determine-entry string rank offset)))
                    (put~ entries parts)
                    (increase! rank (length parts))
                    (increase! offset (+ (cardinality string) 1))))
                (split string ","))
      (get-output~ entries)))
  
  
  ;;;
  ;;;; Text
  ;;;
  
  
  (method protected virtual (part-domain position)
    #f)
  
  
  (method (select-part part)
    (set-selection~ editor (new Range$Cell$ (new Cell 0 (get-start~ part)) (new Cell 0 (get-end~ part))))))


;;;
;;;; Part
;;;


(class Part extends Object
  
  
  (slot rank     getter generate)
  (slot position getter generate)
  (slot text     getter generate)
  (slot start    getter generate)
  (slot end      getter generate)
  
  
  (method override (initialize rank position text start end)
    (nextmethod)
    (set! rank~self rank)
    (set! position~self position)
    (set! text~self text)
    (set! start~self start)
    (set! end~self end))
  
  
  (method override (print output readably)
    (print-unreadable self output
      (lambda (output)
        (format output "{a} {a} {a}" text start end)))))


;;;
;;;; Composite-Text-View
;;;


(class Composite-Text-View extends Value-Text-View
  
  
  (method override (tab-press key modifiers)
    (cond ((has-completion?) (end-completion))
          ((control-key? modifiers) (view-completions~ value-row))
          ((shift-key? modifiers) (navigate-backward~ value-row))
          (else (navigate-forward~ value-row))))
  
  
  (method override (get-context-menu)
    (new Composite-Menu))
  
  
  (method (on-navigate-backward evt)
    (navigate-backward~ value-row))
  
  
  (method (on-navigate-forward evt)
    (navigate-forward~ value-row))
  
  
  (method (on-view-completions evt)
    (view-completions~ value-row))
  
  
  ;;;
  ;;;; Actions
  ;;;
  

  (method override (focus-actions)
    (cons (find-actions 'composite-text)
          (nextmethod)))
  
  
  ;;;
  ;;;; Completion
  ;;;
  
  
  (method override (complete-name? size)
    (>= size 1))
  
  
  (method override (favorite-completions)
    '())
  
  
  (method override (symbol-completions name)
    (let* ((entries (current-entries~ value-row))
           (position (current-position~ value-row entries)))
      (when position
        (let ((domain (part-domain~ value-row position)))
          (when domain
            (let ((completer (new Symbol-Completer domain)))
              (complete~ completer name))))))))


;;;
;;;; Composite-Menu
;;;


(class Composite-Menu extends Text-Context-Menu
  
  
  (form
    (<install>
      (<Separator-Item>)
      (<Label-Item>     name: navigate-backward title: "Move Backward" icon: {Image-Resource "Backward"} action-handler: {Action composite-text navigate-backward})
      (<Label-Item>     name: navigate-forward  title: "Move Forward" icon: {Image-Resource "Forward"} action-handler: {Action composite-text navigate-forward})
      (<Separator-Item>)
      (<Label-Item>     name: view-completions  title: "View Completions" icon: {Image-Resource "Edit"} action-handler: {Action composite-text view-completions}))))


;;;
;;;; Completion-Tree
;;;


(class Completion-Tree extends Tree-View
  
  
  (form
    (<install>            portfolio: :images selection-mode: node
      (<Tree-Node-Column> width: 200 toplevel-controls?: #f)))


  (property value-row initialize #f accessors generate)
  (property selected  initialize #f accessors generate)
  (property start     initialize #f accessors generate)
  (property end       initialize #f accessors generate)
  
  
  (method override (return-press key)
    (complete-part~ value-row start end self))
  
  
  (method override (tab-press key modifiers)
    (complete-part~ value-row start end self))
  
  
  (method override (double-click pos)
    (complete-part~ value-row start end self))))
