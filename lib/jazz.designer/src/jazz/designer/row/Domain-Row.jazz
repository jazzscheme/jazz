;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Domain Row
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.designer.row.Domain-Row jazz


(import (jazz.designer)
        (jazz.graphic)
        (jazz.jml)
        (jazz.library)
        (jazz.ui))


(class undocumented Domain-Row extends Value-Row
  
  
  (property domain initialize #f accessors generate)
  (property violation initialize #f accessors generate)


  ;;;
  ;;;; Initialization
  ;;;


  (method override (initialize . rest)
    (bind-keywords ((domain #f) . others) rest
      (apply nextmethod others)
      (set! domain~self domain)))
  
  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method override (double-click pos)
    (if (is? domain Boolean-Domain)
        (begin
          (enter-edited-value)
          (set-edited-value (not value))
          (enter-edited-value)
          (focus-editor))
      (nextmethod pos)))
  
  
  ;;;
  ;;;; Presentation
  ;;;
  
  
  (method override (present value)
    (present~ domain value))
  
  
  (method (get-entry)
    (first-child~ editor))
  
  
  ;;;
  ;;;; Drawing
  ;;;
  
  
  (method override (draw-data surface context value column row data width height)
    (draw-data~ domain surface context value column row data width height))
  
  
  ;;;
  ;;;; Edition
  ;;;
  
  
  (method override (save-edition)
    (when (get-edited-modified?)
      (let* ((string (and (is? domain Text-Domain)
                          (get-string-content~ (tab-view~ (get-entry)))))
             (violation (and string (validate-text~ domain string))))
        (let ((label (get-preserved-data~ (get-cell-editor~ (get-parent)))))
          (set! violation~self (and violation (cons string violation)))
          (set-frame-color~ label (and violation {Color Red}))
          (if violation
              (set-title~ label string)
            (enter-edited-value))
          (set-edited-modified? #f)
          (invalidate-cell~ (get-parent) (new Cell (row->line~ parent self) 1))))))
  
  
  (method override (new-editor)
    (let ((editor (new Domain-Editor value-row: self)))
      (setup-entry~ domain editor #f)
      editor))
  
  
  (method override (get-edited-value)
    (get-value~ (get-entry)))
  
  
  (method override (get-edited-import)
    (get-import~ (get-entry)))
  
  
  (method (set-edited-violation)
    (set-string-content~ (tab-view~ (get-entry)) (car violation)))
  
  
  (method override (set-edited-value value)
    (if violation
        (set-edited-violation)
      (set-value~ (get-entry) value)))
  
  
  (method override (get-edited-modified?)
    (get-modified?~ (get-entry)))
  
  
  (method override (set-edited-modified? flag)
    (set-modified?~ (get-entry) flag))
  
  
  (method override (focus-editor . rest)
    (let* ((entry (get-entry))
           (view (tab-view~ entry)))
      (when view
        (set-arrow-press-handler~ view (new Event-Handler target: self method-name: 'on-editor-arrow))
        (set-tab-press-handler~ view (new Event-Handler target: self method-name: 'on-editor-tab))
        (set-return-press-handler~ view (new Event-Handler target: self method-name: 'on-editor-return))
        (when (is? (get-entry) Enumeration-Entry)
          (set-action-handler~ (locate~ entry 'combo) (new Event-Handler target: self method-name: 'on-editor-action)))
        (acquire-focus~ view)
        (select-all~ view))))
  
  
  (method (on-editor-tab evt)
    (editor-tab))
  
  
  (method (on-editor-return evt)
    (editor-return))
  
  
  (method (on-editor-arrow evt)
    (let ((direction (get-property~ evt direction:))
          (view (tab-view~ (get-entry))))
      (case direction
        ((up) (editor-up-arrow))
        ((down) (editor-down-arrow))
        (else
         (typecase view
           ((Text-View) (arrow-move~ view evt))
           (else (arrow-press~ view evt)))))))
  
  
  (method (on-editor-action evt)
    (let ((combo (locate~ (get-entry) 'combo)))
      (on-action~ combo evt)
      (editor-return)))
            
  
  (method override (show-cursor)
    @w
    (show-text-cursor~ (locate~ editor 'body)))
  
  
  (method override (focused-editor)
    #f
    @w
    (locate~ editor 'body)))


;;;
;;;; Editor
;;;


(class Domain-Editor extends Layout-View
  
  
  (form
    (<install> layout-type: fill))
  
  
  (property value-row initialize #f accessors generate)))
