;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Editor Row
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.designer.row.Editor-Row jazz


(import (jazz.ui))


(class undocumented Editor-Row extends Tree-Row
    
  
  (slot editor initialize #f accessors generate)
  
  
  ;;;
  ;;;; Auto
  ;;;
  
  
  (method override (auto-in-place?)
    #t)
  
  
  ;;;
  ;;;; Layout
  ;;;
  
  
  (method override (layout)
    (when editor
      (let* ((tree (get-tree))
             (size (get-size))
             (width (+ 12 (* level (+ (get-indentation~ tree) 1)))))
        (set-position~ editor (new Point (+ 12 (* level (+ (get-indentation~ tree) 1))) 0))
        (set-size~ editor (new Dimension (- (get-width~ size) width) (get-height~ size))))))
  
  
  ;;;
  ;;;; Drawing
  ;;;
  
  
  (method override (draw surface context lh lv)
    (let* ((tree (get-tree))
           (column (get-node-column~ tree)))
      (draw-level~ column surface self #f (get-width) (get-height))))))
