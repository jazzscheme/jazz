;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Handler Row
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.designer.row.Handler-Row jazz


(import (jazz.designer))


(class undocumented Handler-Row extends Value-Row)


@old
(class undocumented Handler-Row extends Value-Row
  
   
  ;;;
  ;;;; Events
  ;;;
  
  
  (method override (double-click evt)
    (edit-definitions))
                                   
 
  ;;;
  ;;;; Presentation
  ;;;
  
  
  (method override (present value)
    (define (present-handler handler)
      (if (not handler)
          "{}"
        (let ((target (get-target-name~ handler))
              (method (get-method-name~ handler)))
          (if (eq? target :form)
              (->string method)
            (format "{s} {s}" target method)))))
    
    (present-handler (if (is? value Surrogate-Handler) (get-preserved~ value) value)))
  
  
  ;;;
  ;;;; Edition
  ;;;
  
  
  (method override (get-edited-value)
    (let ((content (get-string-content~ editor)))
      (if (string=? content "{}")
          #f
        (let ((list (read-string-content content)))
          (case (length list)
            ((1) (new Event-Handler target-name: :form method-name: (first list)))
            ((2) (new Event-Handler target-name: (first list) method-name: (second list))))))))
  
  
  ;;;
  ;;;; Definition
  ;;;
  
  
  (method override (edit-definitions)
    (unimplemented 'edit-definitions)
    @need-completion
    (let* ((client (car (get-client)))
           (handler (read-property client property)))
      (if (not handler)
          (bell)
        (let* ((target (find-target~ handler client))
               (class (find-target-type~ handler client))
               (field (category-field class (get-method-name~ handler))))
          (if (not field)
              (let ((location (new Jazz-Code-Location (get-category-location~ Jazz-Entry class))))
                (edit~ location workspace: (designer-source-workspace)))
            (let ((entry (new Jazz-Field-Entry field)))
              (edit~ entry)))))))))
