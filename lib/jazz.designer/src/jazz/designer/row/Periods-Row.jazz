;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Periods Row
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library protected jazz.designer.row.Periods-Row jazz


(import (jazz.designer)
        (jazz.library)
        (jazz.system)
        (jazz.ui.view)
        (jazz.utilities)
        (time))


(class undocumented Periods-Row extends Combo-Row)


@convert-date


(class undocumented Periods-Row extends Combo-Row


  ;;;
  ;;;; Initialization
  ;;;


  (method (initialize . rest)
    (apply nextmethod rest)
    (set-kind 'choose))
  
  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method (combo-choose)
    (let ((value (get-modal Periods-Chooser periods: value)))
      (set-edited-value value)
      (enter-edited-value)
      (focus-editor)
      #t))
  
  
  ;;;
  ;;;; Presentation
  ;;;
  
  
  (method (present value)
    (if (and nullable? (not value))
        "{}"
      (join (map (function (period)
                   (format "{a} {a}"
                           (present-date-day (get-start~ period))
                           (present-date-day (get-end~ period))))
                 value)
            ", ")))
  
  
  ;;;
  ;;;; Edition
  ;;;
  
  
  (method (get-edited-value)
    (let ((string (get-string-content~ (get-body~ editor))))
      (if (and nullable? (or (empty-string? string) (= string "{}")))
          {}
        (map (function (string)
               (bind (start end) (parse-strings string separator: " ")
                 (new Period (parse-date~ Date start) (parse-date~ Date end))))
             (parse-strings string)))))
  
  
  (method (set-edited-value value)
    (set-string-content~ (get-body~ editor) (present value)))))
