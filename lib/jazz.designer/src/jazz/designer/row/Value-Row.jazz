;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Value Row
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.designer.row.Value-Row jazz


(import (jazz.designer)
        (jazz.graphic)
        (jazz.system)
        (jazz.ui)
        (jazz.ui.view))


(class undocumented Value-Row extends Tree-Row


  ;; quick fix. should not be necessary to add a _ suffix
  (property property_      initialize #f getter get-property setter set-property)
  (property value          initialize #f accessors generate)
  (property nullable?      initialize #f accessors generate)
  (property modified?      initialize #f accessors generate)
  (property limit-to-list? initialize #t accessors generate)
  
  
  (slot editor  initialize #f accessors generate)
  (slot edited? initialize #f)


  ;;;
  ;;;; Initialization
  ;;;


  (method override (initialize . rest)
    (bind-keywords ((property #f) (value #f) (nullable? #f) (limit-to-list? #t) . others) rest
      (apply nextmethod others)
      (set! property_~self property)
      (set! value~self value)
      (set! nullable?~self nullable?)
      (set! limit-to-list?~self limit-to-list?)))
  
  
  ;;;
  ;;;; Access
  ;;;


  (method public (get-property)
    property_)


  (method public (set-property prop)
    (set! property_ prop))
  
  
  (method public (get-title)
    (let ((node (car children)))
      (get-title~ node)))
  
  
  (method public (set-title title)
    (let ((node (car children)))
      (set-title~ node title)))


  (method public (get-client)
    (get-client~ (get-tree)))
  
  
  ;;;
  ;;;; Auto
  ;;;
  
  
  (method override (auto-in-place?)
    #t)

  
  (method override (auto-expand)
    (nextmethod)
    (when (editable?)
      (edit-row)))
  
  
  (method override (auto-select)
    (nextmethod)
    (if (editable?)
        (select-editor)
      (acquire-focus~ (get-tree))))
  
  
  (method override (auto-collapse)
    (nextmethod)
    (when (in-edition?)
      (end-row-edition)))
  
  
  (method override (auto-collapsable?)
    (in-edition?))
  
  
  ;;;
  ;;;; Value
  ;;;
  
  
  (method public virtual (enter-value v (imports: imports #f))
    (set! value v)
    (set-modified? #t)
    (if (not property_)
        (update value)
      (enter-value~ (get-card~ (get-tree)) property_ value imports: imports)))
  
  
  (method public (enter-edited-value)
    (if (validate-value)
        (enter-value (get-edited-value) imports: (get-edited-imports))
      (throw-cancel)))
  
  
  (method public virtual (default-value)
    #f)
  
  
  ;;;
  ;;;; Presentation
  ;;;
  
  
  (method public virtual (present value)
    (if (not value)
        "{}"
      (->string value :reader)))
  
  
  ;;;
  ;;;; Edition
  ;;;
  
  
  (method public virtual (editable?)
    (or (not property_)
        (property-setter property_)))
  
  
  (method public virtual (get-edited-value)
    (read-string-element (get-string-content~ editor)))
  
  
  (method public virtual (set-edited-value value)
    (set-string-content~ editor (present value)))
  
  
  (method public virtual (get-edited-modified?)
    (get-modified?~ (get-document-controller~ editor)))
  
  
  (method public virtual (set-edited-modified? flag)
    (set-modified?~ (get-document-controller~ editor) flag))
  
  
  (method public virtual (show-cursor)
    (show-text-cursor~ editor))
  
  
  (method public (validate-value)
    (catch (Parse-Error err
             (case (message-box (exception-reason err) type: 'question yes: "Change It" no: "Revert")
               ((yes)
                (focus-editor start: (get-start~ err) end: (get-end~ err))
                #f)
               ((no)
                (revert-property)
                #f)))
      (get-edited-value)
      #t))
  
  
  (method public (edit-row)
    (edit)
    (set! edited? #t))
  
  
  (method public (end-row-edition)
    (end-edition)
    (set! edited? #f))
  
  
  (method public virtual (in-edition?)
    edited?)
  
  
  (method public virtual (edit)
    (edit-in-cell))
  
  
  (method public virtual (end-edition)
    (save-edition)
    (close-editor))
  
  
  (method public virtual (save-edition)
    (when (get-edited-modified?)
      (enter-edited-value)
      (set-edited-modified? #f)))
  
  
  (method public virtual (close-editor)
    (close-in-cell-editor))
  
  
  (method public virtual (close-editor?)
    #t)
  
  
  (method public virtual (select-editor)
    (let ((tree (get-tree)))
      (when (not (in-cell-edition?))
        (edit-in-cell))
      (focus-editor)))
  
  
  (method public (in-cell-edition?)
    (let ((tree (get-tree)))
      (and (in-edition?~ tree)
           (let ((line (row->line~ tree self)))
             (nu=? (get-edited-cell~ tree) (new Cell line 1))))))
  
  
  (method public virtual (get-edited-imports)
    #f)
  
  
  ;;;
  ;;;; Editor
  ;;;
  
  
  (method public (editor-up-arrow)
    (up-arrow-press~ (get-tree) NoModifiers))
  
  
  (method public (editor-down-arrow)
    (down-arrow-press~ (get-tree) NoModifiers))
  
  
  (method public (editor-tab)
    (let ((modifiers NoModifiers))
      (if (shift-down?)
          (up-arrow-press~ (get-tree) modifiers)
        (down-arrow-press~ (get-tree) modifiers))))
  
  
  (method public (editor-return)
    (show-cursor)
    (with-cursor :wait
      (lambda ()
        (set-edited-modified? #t)
        (save-edition))
      duration: .150))
  
  
  (method public (editor-focus-delegate)
    (when (and (auto-in-place?) (not (in-edition?)))
      (auto-expand/collapse~ (get-tree) self))
    (focus-editor select-all?: #f)
    (invalidate-drawing))
  
  
  (method public (editor-focus-lose)
    (close-auto-expanded~ (get-tree))
    (invalidate-drawing))
  
  
  ;;;
  ;;;; Cell
  ;;;
  
  
  (method public virtual (edit-in-cell)
    (let* ((tree (get-tree))
           (cell (new Cell (row->line~ tree self) 1))
           (border (new Border-View border-type: 'solid border-color: {Color Dark-Red}))
           (scroller (new Scroller-View parent: border vscroll?: #f hscroll?: #f))
           (content (get-content~ scroller)))
      (set-layout-type~ content 'fill)
      (unless editor
        (set! editor (new-editor)))
      (set-parent~ editor content)
      (set-edited-value value)
      (edit-cell~ tree cell editor: border close-editor?: (close-editor?))
      ;; the focusing has to be done after the edit-cell that will install the editor in a player
      (focus-editor)
      (set-client~ scroller editor)))
  
  
  (method protected virtual (new-editor)
    )
  
  
  (method protected virtual (editor-class)
    )
  
  
  (method public (close-in-cell-editor)
    (let ((tree (get-tree)))
      (end-edition~ tree))
    (when (close-editor?)
      (set! editor #f)))
  
  
  (method public virtual (focus-editor (start: start #f) (end: end #f) (select-all?: select-all? #t))
    (let ((editor (focused-editor)))
      (when editor
        (acquire-focus~ editor)
        (cond ((not start) (when select-all? (select-all~ editor)))
              ((not end) (set-caret~ editor start))
              (else (set-selection~ editor (new Range start end)))))))
  
  
  (method public virtual (focused-editor)
    editor)

  
  ;;;
  ;;;; Update
  ;;;
  
  
  (definition Modified-Color
    {Color Dark-Red})
  
  
  (method public virtual (update value)
    (update-in-cell value))
  
  
  (method (update-in-cell value)
    (let* ((tree     (get-tree))
           (title    (present value))
           (line     (row->line~ tree self))
           (cell     (new Cell line 1))
           (edited?  (in-edition?))
           (data     (if edited?
                         (get-preserved-data~ (get-cell-editor~ tree))
                       (get-cell-data~ tree cell))))
      (set-value value)
      (set-property-modified? #t)
      (set-title~ data title)
      (if edited?
          (set-edited-modified? #t)
        (invalidate-cell~ tree cell))))
  
  
  (method (set-property-modified? flag)
    (when property_
      (let* ((tree (get-tree))
             (line (row->line~ tree self))
             (cell (new Cell line 0))
             (node (get-cell-data~ tree cell))
             (color (if flag Modified-Color #f)))
        (set-color~ node color)
        (invalidate-cell~ tree cell))))

  
  ;;;
  ;;;; Definition
  ;;;
  
  
  (method public virtual (edit-definitions)
    (bell))
  
  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method override (double-click pos)
    (let ((tree (get-tree)))
      (auto-expand/collapse~ tree self)))
  
  
  (method public (show-property)
    (let* ((client (get-client))
           (surrogate (get-surrogate~ client)))
      (if (not surrogate)
          (bell)
        (let ((editor (get-editor~ surrogate)))
          (if (is-not? editor View-Editor)
              (bell)
            (set-showed-property~ editor (field-name property_)))))))
  
  
  (method public (revert-property)
    (set-edited-value value)
    (set-edited-modified? #f)
    (set-property-modified? #f)
    (set-modified? #f)
    (focus-editor))
  
  
  ;;;
  ;;;; Drawing
  ;;;
  
  
  (method public virtual (draw-data surface context value column row data width height)
    (draw-at~ column surface context row data 1 0 width height))))
