;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; View Surrogate
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.designer.surrogate.View-Surrogate jazz


(import (jazz.designer)
        (jazz.designer.menu)
        (jazz.designer.view)
        (jazz.geometry)
        (jazz.graphic)
        (jazz.jml)
        (jazz.library)
        (jazz.platform)
        (jazz.system)
        (jazz.ui)
        (jazz.ui.clipboard)
        (jazz.ui.resizer)
        (jazz.ui.view)
        (jazz.ui.window))


(class undocumented View-Surrogate extends Component-Surrogate implements Renderer

  
  (slot protected client-renderer                initialize #f)
  (slot protected client-focus-gained-handler    initialize #f)
  (slot protected client-focus-lose-handler      initialize #f)
  (slot protected client-cursor-update-handler   initialize #f)
  (slot protected client-mouse-down-handler      initialize #f)
  (slot protected client-mouse-up-handler        initialize #f)
  (slot protected client-drag-move-handler       initialize #f)
  (slot protected client-drag-up-handler         initialize #f)
  (slot protected client-double-click-handler    initialize #f)
  (slot protected client-current-drop-handler    initialize #f)
  (slot protected client-receive-drop-handler    initialize #f)
  (slot protected client-context-menu-handler    initialize #f)
  (slot protected client-key-press-handler       initialize #f)
  (slot protected client-arrow-press-handler     initialize #f)
  (slot protected client-backspace-press-handler initialize #f)
  (slot protected client-return-press-handler    initialize #f)
  
  
  (slot state            initialize #f)
  (slot current-part     initialize #f)
  (slot start-mouse      initialize #f)
  (slot start-positions  initialize #f)
  (slot start-position   initialize #f)
  (slot start-size       initialize #f)
  (slot atomic-preserved initialize #f)


  ;;;
  ;;;; Installation
  ;;;
  
  
  (method override (install-handlers)
    (nextmethod)
    (set! client-renderer                (get-renderer~ client))
    (set! client-focus-gained-handler    (get-focus-gained-handler~ client))
    (set! client-focus-lose-handler      (get-focus-lose-handler~ client))
    (set! client-cursor-update-handler   (get-cursor-update-handler~ client))
    (set! client-mouse-down-handler      (get-mouse-down-handler~ client))
    (set! client-mouse-up-handler        (get-mouse-up-handler~ client))
    (set! client-drag-move-handler       (get-drag-move-handler~ client))
    (set! client-drag-up-handler         (get-drag-up-handler~ client))
    (set! client-double-click-handler    (get-double-click-handler~ client))
    (set! client-current-drop-handler    (get-current-drop-handler~ client))
    (set! client-receive-drop-handler    (get-receive-drop-handler~ client))
    (set! client-context-menu-handler    (get-context-menu-handler~ client))
    (set! client-key-press-handler       (get-key-press-handler~ client))
    (set! client-arrow-press-handler     (get-arrow-press-handler~ client))
    (set! client-backspace-press-handler (get-backspace-press-handler~ client))
    (set! client-return-press-handler    (get-return-press-handler~ client))
    (set-renderer~ client                self)
    (set-focus-gained-handler~ client    (new Surrogate-Handler target: self method-name: 'on-focus-gained    preserved: client-focus-gained-handler))
    (set-focus-lose-handler~ client      (new Surrogate-Handler target: self method-name: 'on-focus-lose      preserved: client-focus-lose-handler))
    (set-cursor-update-handler~ client   (new Surrogate-Handler target: self method-name: 'on-cursor-update   preserved: client-cursor-update-handler))
    (set-mouse-down-handler~ client      (new Surrogate-Handler target: self method-name: 'on-mouse-down      preserved: client-mouse-down-handler))
    (set-mouse-up-handler~ client        (new Surrogate-Handler target: self method-name: 'on-mouse-up        preserved: client-mouse-up-handler))
    (set-drag-move-handler~ client       (new Surrogate-Handler target: self method-name: 'on-drag-move       preserved: client-drag-move-handler))
    (set-drag-up-handler~ client         (new Surrogate-Handler target: self method-name: 'on-drag-up         preserved: client-drag-up-handler))
    (set-double-click-handler~ client    (new Surrogate-Handler target: self method-name: 'on-double-click    preserved: client-double-click-handler))
    (set-current-drop-handler~ client    (new Surrogate-Handler target: self method-name: 'on-current-drop    preserved: client-current-drop-handler))
    (set-receive-drop-handler~ client    (new Surrogate-Handler target: self method-name: 'on-receive-drop    preserved: client-receive-drop-handler))
    (set-context-menu-handler~ client    (new Surrogate-Handler target: self method-name: 'on-context-menu    preserved: client-context-menu-handler))
    (set-key-press-handler~ client       (new Surrogate-Handler target: self method-name: 'on-key-press       preserved: client-key-press-handler))
    (set-arrow-press-handler~ client     (new Surrogate-Handler target: self method-name: 'on-arrow-press     preserved: client-key-press-handler))
    (set-backspace-press-handler~ client (new Surrogate-Handler target: self method-name: 'on-backspace-press preserved: client-key-press-handler))
    (set-return-press-handler~ client    (new Surrogate-Handler target: self method-name: 'on-return-press    preserved: client-key-press-handler))
    (invalidate-border))
  
  
  (method override (remove-handlers)
    (nextmethod)
    (set-renderer~ client                client-renderer)
    (set-focus-gained-handler~ client    client-focus-gained-handler)
    (set-focus-lose-handler~ client      client-focus-lose-handler)
    (set-cursor-update-handler~ client   client-cursor-update-handler)
    (set-mouse-down-handler~ client      client-mouse-down-handler)
    (set-mouse-up-handler~ client        client-mouse-up-handler)
    (set-drag-move-handler~ client       client-drag-move-handler)
    (set-drag-up-handler~ client         client-drag-up-handler)
    (set-double-click-handler~ client    client-double-click-handler)
    (set-current-drop-handler~ client    client-current-drop-handler)
    (set-receive-drop-handler~ client    client-receive-drop-handler)
    (set-context-menu-handler~ client    client-context-menu-handler)
    (set-key-press-handler~ client       client-key-press-handler)
    (set-arrow-press-handler~ client     client-arrow-press-handler)
    (set-backspace-press-handler~ client client-backspace-press-handler)
    (set-return-press-handler~ client    client-return-press-handler)
    (invalidate-border))


  ;;;
  ;;;; Drawing
  ;;;
  
  
  (definition Focused-Background
    {Color Dark-Purple alpha: 0.15})
  
  (definition Unfocused-Background
    {Color Dark alpha: 0.15})
    
  
  (definition Selected-Colors
    '({Color Red} {Color Orange} {Color Yellow}))

  (definition Unselected-Outer-Color
    {Color Blue})

  (definition Unselected-Inner-Color
    {Color Gray})


  (method override (render drawing surface draw-self? nodes context lh lv sh sv sc sc?)
    (define (default-render)
      (let ((content? (get-show-content?~ editor)))
        (when (eq? client (get-client~ editor)) @w (is? (get-parent~ client) View-Workbench)
          (fill-rect~ surface (get-bounds~ client) {Color White} @w {Color Medium}))
        (when content?
          (draw-background~ drawing surface context))
        (when content?
          (draw-content~ drawing surface context lh lv))
        (when (or content? (is-not? drawing Outline-View))
          (draw-children~ drawing surface nodes context lh lv sh sv sc sc?))))
    (default-render)
    (draw surface))
  
  
  (method public virtual (draw surface)
    (let ((reference (get-reference~ editor))
          (selection (get-selection~ editor)))
      (define (draw-selected-background surface)
        (when (and (neq? client reference)
                   (memq client selection)
                   (not (editing?)))
          (let ((color (if (selection-focused?) Focused-Background Unfocused-Background)))
            (fill-rect~ surface (get-bounds~ client) color))))
      
      (define (draw-surrogate-frame surface)
        (define (outer-component view)
          (outer-client~ (get-surrogate~ view)))
        
        (define (frame-color)
          (let ((rank (find selection client key: outer-component)))
            (if (not rank)
                (if (eq? (outer-client) client)
                    Unselected-Outer-Color
                  Unselected-Inner-Color)
              (element Selected-Colors (min rank 2)))))
        
        (when (get-show-frames?~ editor)
          (let ((color (frame-color))
                (outside (get-bounds~ client)))
            (define (draw-frame)
              (frame-rect~ surface outside color))
            
            (define (draw-handles)
              ;; todo
              #f)
            
            (draw-frame)
            (draw-handles))))
  
      (define (draw-information surface)
        (define (parse-info info)
          (if (string? info)
              (values info (parse-font #f))
            (values (car info) (parse-font (cadr info)))))
        
        (define (parse-font info)
          (case info
            ((#f small) {Font font-name: "Times New Roman" point-size: 12})
            ((medium)   {Font font-name: "Times New Roman" point-size: 18})
            ((large)    {Font font-name: "Times New Roman" point-size: 28})
            (else info)))
        
        (let ((info (get-information)))
          (when (and info (draw-information?))
            (receive (text font) (parse-info info)
              (set-font~ surface font)
              (let* ((extent (get-text-extent~ surface text))
                     (pos (center extent (get-size~ client))))
                (set-text-color~ surface {Color Medium-Gray})
                (draw-text~ surface (get-h~ pos) (get-v~ pos) text #t))))))
      
      (draw-showed-property surface)
      (draw-selected-background surface)
      (draw-surrogate-frame surface)
      (draw-information surface)))
  
  
  (method public (draw-showed-property surface)
    (let ((property (get-showed-property~ editor)))
      (when (and property (property? (category-field (class-of client) property)))
        (let* ((value (read-property client property))
               (string (->string value))
               (extent (get-text-extent~ surface string))
               (size (nu+ extent {Dimension 7 4}))
               (pos (center size (get-size~ client)))
               (rect (position/size->rect pos size)))
          (frame-rect~ surface rect {Color Black})
          (fill-rect~ surface (inflate-rect rect -1 -1) {Color White})
          (set-font~ surface {Font Label})
          (set-text-color~ surface {Color Dark-Red})
          (draw-text~ surface (+ (get-h~ pos) 3) (+ (get-v~ pos) 2) string)))))
  
  
  (method public virtual (draw-selected surface rank)
    (let ((outside (acquire~ editor client (get-bounds~ client))))
      (let ((l (get-left~ outside))
            (t (get-top~ outside))
            (r (- (get-right~ outside) 1))
            (b (- (get-bottom~ outside) 1)))
        (set-style~ surface 'alternate)
        (set-color~ surface (selected-color rank))
        (set-line-width~ surface 1)
        (line~ surface l t r t)
        (line~ surface r t r b)
        (line~ surface l t l b)
        (line~ surface l b r b)
        (set-color~ surface {Color Black})
        (set-style~ surface 'solid))))
  
  
  (method protected virtual (get-information)
    #f)
  
  
  (method protected virtual (draw-information?)
    (null? (get-visible-children~ client)))
  
  
  (method (with-information-update thunk)
    (let ((before (draw-information?)))
      (prog1 (thunk)
        (let ((after (draw-information?)))
          (unless (eqv? before after)
            (invalidate-view~ client))))))
  
  
  (method (border-region)
    (border-region~ (outer-client) insets: {Rect 2 2 2 2}))
  
  
  (method override (invalidate-border)
    (invalidate-border~ (outer-client) insets: {Rect 2 2 2 2}))
  
  
  (method override (redraw-border)
    (redraw-border~ (outer-client) insets: {Rect 2 2 2 2}))
  
  
  (method public (selected-color rank)
    (let ((colors Selected-Colors))
      (element colors (min rank (- (length colors) 1)))))


  ;;;
  ;;;; Focus
  ;;;


  (method (on-focus-gained evt)
    (focus-gained))
  
  
  (method protected virtual (focus-gained)
    (invalidate-selection)
    (focus-update-actions))


  (method (on-focus-lose evt)
    (focus-lose))
  
  
  (method protected virtual (focus-lose)
    (invalidate-selection))
  
  
  (method override (focus-actions)
    (cons (find-actions 'view-surrogate)
          (focus-actions~ client)))
  
  
  (method (selection-focused?)
    (some? (lambda (component)
             (and (is? component View)
                  (has-focus?~ component)))
           (get-selection~ editor)))
  
  
  ;; This is an ugly hack. We enable the components tree actions
  ;; even tough we use the surrogate-view actions because they
  ;; are the ones that are checked in update-component-menu
  (method virtual (focus-update-actions)
    (set-action-enabled? {Action components-tree edit} #t)
    (set-action-enabled? {Action components-tree new} #f)
    (set-action-enabled? {Action components-tree add} #f)
    (set-action-enabled? {Action components-tree open-grid} #f))


  ;;;
  ;;;; Cursor
  ;;;


  (method (on-cursor-update evt)
    (cursor-update (get-position~ evt)))
  
  
  (method public virtual (cursor-update pos)
    (let ((mode (get-mode~ editor)))
      (case mode
        ((rect)
         (set-cursor :cross))
        (else
         (let ((outer (outer-client~ (get-surrogate~ client))))
           (let ((part (and (memq? client (get-selection))
                            (or (not (memq? state '(tolerance process))) current-part)
                            (or current-part (if (size-client?~ (get-surrogate~ outer))
                                                 (let ((part (find-resize-part (acquire~ outer client pos) (get-size~ outer) full?: #t)))
                                                   (and (or (neq? outer (get-client~ editor))
                                                            (member? part '((1 . 0) (0 . 1) (1 . 1))))
                                                        part))
                                               #f)))))
             (cond (part
                    (set-cursor (get-resize-cursor part)))
                   ((and (move-client?) (neq? outer (get-client~ editor)))
                    (set-cursor :opened-hand))
                   (else
                    (set-cursor :arrow)))))))))


  ;;;
  ;;;; Mouse
  ;;;
  
  
  (definition Drag-Tolerance
    3)

  
  (method (on-mouse-down evt)
    (let ((mode (get-mode~ editor))
          (pos (get-position~ evt)))
      (case mode
        ((select)
         (if #t @wait (neq? client (get-client~ editor))
             (mouse-down pos)
           (when (select?)
             (select-in-editor))
           (start-rubber-band~ editor client (acquire~ (get-client~ editor) client pos))))
        ((rect)
         (start-rubber-band~ editor client (acquire~ (get-client~ editor) client pos))))))

  
  (method (on-mouse-up evt)
    (let ((pos (get-position~ evt)))
      (mouse-up pos)))
  
  
  (method (on-drag-move evt)
    (let ((pos (get-position~ evt)))
      (if (get-rubber-band?~ editor)
          (process-rubber-band~ editor (acquire~ (get-client~ editor) client pos))
        (drag-move pos))))
  
  
  (method (on-drag-up evt)
    (let ((pos (get-position~ evt)))
      (if (get-rubber-band?~ editor)
          (end-rubber-band~ editor (acquire~ (get-client~ editor) client pos))
        (drag-up pos))))
  
  
  (method (on-double-click evt)
    (double-click (get-position~ evt)))


  (method (on-current-drop evt)
    (current-drop (get-position~ evt) (get-drag-drop~ evt)))


  (method (on-receive-drop evt)
    (receive-drop (get-position~ evt) (get-sender~ evt) (get-drag-drop~ evt)))


  (method (on-context-menu evt)
    (context-menu (get-position~ evt)))
  
  
  (method protected virtual (select?)
    #t)
  
  
  (method public virtual (select-in-editor)
    (select~ editor (outer-client)))
  
  
  (method protected virtual (move-client?)
    #t)
  
  
  (method protected virtual (size-client?)
    #t)
  
  
  (method public virtual (mouse-down pos)
    (define (some-movable? selection)
      (some? (lambda (client)
               (move-client?~ (get-surrogate~ client)))
             selection))
    
    (define (select)
      (when (select?)
        (select-in-editor)))
    
    (if #f @until-fully-debugged (alt-down?)
        (begin
          (select)
          (edit-client))
      @wait
      (begin
        (set! state 'scroll)
        (set! start-position pos)
        (acquire-capture~ client))
      (let ((outer (outer-client))
            (previous-selection (get-selection)))
        (select)
        (when (and (move-client?~ (get-surrogate~ outer)) (some-movable? (get-selection~ editor)))
          (let ((part (if (and (memq? client previous-selection) (size-client?~ (get-surrogate~ outer))) (find-resize-part (acquire~ outer client pos) (get-size~ outer) full?: #t) #f)))
            (when (or (neq? outer (get-client~ editor))
                      (member? part '((1 . 0) (0 . 1) (1 . 1))))
              (let ((selection (get-selection)))
                (set! state 'tolerance)
                (set! current-part part)
                (set! start-mouse (to-desktop~ client pos))
                (set! start-positions (map (lambda (view) (get-position~ (outer-client~ (get-surrogate~ view))))
                                           selection))
                (set! start-position (get-position~ client))
                (set! start-size (get-size~ client))
                (set! atomic-preserved (start-atomic-undo~ (get-undoer)))
                (acquire-capture~ client)))))))
    (acquire-focus~ client))
  
  
  (method public virtual (mouse-up pos)
    )
  
  
  (method public virtual (drag-move pos)
    (case state
      ((scroll)
       (let ((delta (nu- pos start-position)))
         (scroll~ client delta)))
      ((tolerance process)
       (let ((desktop-pos (to-desktop~ client pos)))
         (when (or current-part (not start-position) (eq? state 'process) (>= (distance desktop-pos start-mouse) Drag-Tolerance))
           (set! state 'process)
           (let* ((start (from-desktop~ client start-mouse))
                  (delta (nu- pos start))
                  (dh (get-h~ delta))
                  (dv (get-v~ delta)))
             (if (not current-part)
                 (let ((selection (get-selection)))
                   (for-each (lambda (view start-position)
                               (let ((outer-view (outer-client~ (get-surrogate~ view))))
                                 (let ((actual-delta (nu- (nu+ start-position delta) (get-position~ outer-view))))
                                   (move-client~ (get-surrogate~ view) (get-h~ actual-delta) (get-v~ actual-delta)))))
                             selection
                             start-positions))
               (resize-client dh dv current-part
                 (lambda (dh dv dwidth dheight)
                   (let ((max-position (nu+ start-position (nu- start-size {Dimension 16 16})))
                         (new-position (nu+ start-position (new Dimension dh dv)))
                         (new-size (nu+ start-size (new Dimension dwidth dheight))))
                     (let ((effective-position (new Point
                                                 (min (get-h~ new-position) (get-h~ max-position))
                                                 (min (get-v~ new-position) (get-v~ max-position))))
                           (effective-size (new Dimension
                                             (max (get-width~ new-size) 16)
                                             (max (get-height~ new-size) 16))))
                       (let ((actual-delta (nu- effective-position (get-position~ client))))
                         (move-client (get-h~ actual-delta) (get-v~ actual-delta)))
                       (let ((actual-delta (nu- effective-size (get-size~ client))))
                         (size-client (get-width~ actual-delta) (get-height~ actual-delta))))))))
             (update-window~ (get-player~ client))))))))
  
  
  (method public virtual (drag-up pos)
    ;; a temporary solution until this validation is done live while dragging
    (define (verify-position/size)
      (let ((min-size (minimal-size~ client)))
        (when min-size
          (let ((rect (get-rect~ client))
                (outer (get-size~ (get-parent~ client)))
                (designer (get-designer~ editor)))
            (receive (new-position new-size) (fit-within outer rect minimum-size: min-size)
              (set-property~ designer client 'size new-size)
              (set-property~ designer client 'position new-position))))))
    
    (case state
      ((scroll)
       (release-capture~ client)
       (set! current-part #f)
       (set! state #f))
      ((tolerance process)
       (release-capture~ client)
       (set! current-part #f)
       (set! state #f)
       (verify-position/size)
       (end-atomic-undo~ (get-undoer) atomic-preserved))))
  
  
  (method public virtual (double-click pos)
    (edit-default-property))


  (method public virtual (current-drop pos drag-drop)
    (let ((sender (get-view~ (get-source~ drag-drop))))
      (typecase sender
        ((Toolbox-Tree)
         (let ((addable (selected-addable~ sender)))
           (let ((class (selected-class~ sender)))
             (and class
                  (addable-class?~ client class)
                  (new Drop-Target view: client user-data: (selected-component~ sender))))))
        ((Properties-Tree)
         (let ((row (get-row~ (get-source~ drag-drop))))
           (and (is? row Value-Row)
                (new Drop-Target view: client user-data: row))))
        (else #f))))


  (method public virtual (receive-drop pos sender drag-drop)
    (let ((data (get-user-data~ (get-target~ drag-drop))))
      (typecase sender
        ((Toolbox-Tree)
         (typecase data
           ((Toolbox-Model)
            (add-new (get-class~ data) pos import: (get-unit~ data)))
           ((Toolbox-Form)
            (add-new-form (require-form (get-locator~ data)) pos imports: (get-imports~ data)))))
        ((Properties-Tree)
         (set-selection~ sender '())
         (let* ((property (get-property~ data))
                (name (field-name property)))
           (if (eq? name (get-showed-property~ editor))
               (set-showed-property~ editor #f)
             (set-showed-property~ editor (field-name property))))))))
  
  
  (method public (add-new model pos (centered?: centered? #t) (name: name #f) (properties: properties '()) (import: import #f))
    (with-information-update
      (lambda ()
        (let ((preferences (get-preferences 'designer))
              (designer (get-designer~ editor))
              (view? (subclass? model View)))
          (let ((child (if view?
                           (new model parent: client visible?: #f)
                         (new model parent: client))))
            (if view?
                (add-view~ designer child client position: pos centered?: centered? name: name import: import properties: properties)
              (add-child~ designer child client import: import name: name properties: properties))
            (layout-view~ client)
            (layout-view~ child)
            (set-selection~ editor (list child) origin: self)
            (when (and (not name) (xor (get-new-requests-name?~ preferences) (shift-down?)))
              (let ((presentation (request-component-presentation model (get-children~ client))))
                (when presentation
                  (let ((name (presentation->name~ model presentation)))
                    (set-name~ designer child name)))))
            (when (get-default-property~ child)
              (select-docked Properties-Manager focus?: #t)))))))
  
  
  ;; this should probably be unified with add-new above
  (method public (add-new-form form pos (centered?: centered? #t) (name: name #f) (imports: imports '()))
    (with-information-update
      (lambda ()
        (let ((preferences (get-preferences 'designer))
              (designer (get-designer~ editor)))
          (let ((child (add-form~ designer form client imports: imports name: name)))
            (let ((model (class-of child)))
              (layout-view~ client)
              (layout-view~ child)
              (set-selection~ editor (list child) origin: self)
              (when (and (not name) (xor (get-new-requests-name?~ preferences) (shift-down?)))
                (let ((presentation (request-component-presentation model (get-children~ client))))
                  (when presentation
                    (let ((name (presentation->name~ model presentation)))
                      (set-name~ designer child name)))))
              (when (get-default-property~ child)
                (select-docked Properties-Manager focus?: #t))))))))


  (method public virtual (context-menu pos)
    (when (select?)
      (select-in-editor))
    ;; the select should do the acquire-focus... this is a quick fix
    (acquire-focus~ client)
    (let ((menu (get-context-menu)))
      (when menu
        (update-context-menu menu)
        (layout-menu~ menu)
        (track-popup-menu~ client menu pos))))
  
  
  (method public virtual (get-context-menu)
    (let ((components (get-selection) )
          (menu (new (context-menu-class))))
      (define (categorized-addable-classes)
        (let ((component (car components)))
          (if (is? component Component)
              (or (component-categorized-toolbox-addable-classes component)
                  (component-categorized-addable-classes component (get-parent~ component)))
            '())))
      
      (update-component-menu menu (get-selection) (categorized-addable-classes)
        (lambda (model)
          (add-new (resolve-runtime-reference model) {Point 0 0} centered?: #f)))
      menu))
  
  
  (method public virtual (context-menu-class)
    Surrogate-Menu)
  
  
  (method public virtual (update-context-menu menu)
    )


  ;;;
  ;;;; Client
  ;;;


  (method (move-client dh dv)
    (when (or (/= dh 0) (/= dv 0))
      (let ((selection (get-selection~ editor))
            (designer (get-designer~ editor))
            (outer (outer-client~ (get-surrogate~ client))))
        (when (move-client?~ (get-surrogate~ outer))
          (let ((pos (get-position~ outer)))
            (safe-set-property~ designer outer position: (new Point (+ (get-h~ pos) dh) (+ (get-v~ pos) dv))))
          (update-focus-actions~ (get-application))))))


  (method (size-client dwidth dheight)
    (when (or (/= dwidth 0) (/= dheight 0))
      (let* ((outer (outer-client))
             (size (get-size~ outer))
             (new-size (new Dimension (+ (get-width~ size) dwidth) (+ (get-height~ size) dheight))))
        (with ((region (border-region)))
          (safe-set-property~ (get-designer~ editor) outer size: new-size)
          (invalidate-region~ outer region))
        (with ((region (border-region)))
          (invalidate-region~ outer region))
        (when (eq? client (get-reference~ editor))
          (update-scrollbars~ client)))
      (update-focus-actions~ (get-application))))
  
  
  (method protected virtual (edit-client)
    (edit-component~ editor client))


  ;;;
  ;;;; Keyboard
  ;;;
  
  
  (method (on-key-press evt)
    (key-press (get-key~ evt)))
  
  
  (method protected virtual (key-press key)
    )
  
  
  (method (on-arrow-press evt)
    (unless (eq? (outer-client) (get-client~ editor))
      (let ((modifiers (get-modifiers~ evt)))
        (case (get-property~ evt direction:)
          ((left)  (move-selection -1  0 modifiers))
          ((up)    (move-selection  0 -1 modifiers))
          ((right) (move-selection  1  0 modifiers))
          ((down)  (move-selection  0  1 modifiers))))))
  
  
  (method (on-backspace-press evt)
    (backspace-press (get-key~ evt)))
  
  
  (method protected virtual (backspace-press key)
    (delete-selection~ editor))
  
  
  (method (on-return-press evt)
    (return-press (get-key~ evt)))
  
  
  (method protected virtual (return-press key)
    (edit-default-property))


  ;;;
  ;;;; Move
  ;;;
  
  
  (method (move-selection dh dv modifiers)
    (define (move-quantum shift?)
      (if shift?
          8
        1))
    
    (let* ((shift? (shift-key? modifiers))
           (control? (control-key? modifiers))
           (single? (and shift? control?))
           (quantum (move-quantum shift?))
           (selection (get-selection)))
      (for-each (lambda (view)
                  (move-client~ (get-surrogate~ view) (* dh quantum) (* dv quantum)))
                (if single? (list (car selection)) selection))))
  

  ;;;
  ;;;; Save
  ;;;


  (method public (save-form)
    (let ((selection (get-selection)))
      (when selection
        (save~ selection))))
  

  ;;;
  ;;;; Design
  ;;;
  
  
  (method protected virtual (try-out)
    #f)
  

  ;;;
  ;;;; Edit
  ;;;
  
  
  (method protected virtual (editing?)
    #f)
  

  ;;;
  ;;;; Edition
  ;;;
  
  
  (method public virtual (can-undo?)
    (can-undo?~ (get-undoer)))
  
  
  (method public virtual (can-redo?)
    (can-redo?~ (get-undoer)))
  
  
  (method public virtual (can-cut?)
    (can-cut-component?~ client))
  
  
  (method public virtual (can-copy?)
    (can-copy-component?~ client))
  
  
  (method public virtual (can-paste?)
    (can-paste-component?~ client))
  
  
  (method public virtual (can-paste-properties?)
    (can-paste-properties-component?~ client))
  
  
  (method public virtual (can-delete?)
    (can-delete-component?~ client))
  
  
  (method public virtual (can-rename?)
    (can-rename-component?~ client))
  
  
  (method public virtual (can-select-all?)
    (can-select-all-component?~ client))
  
  
  (method public virtual (undo)
    (undo~ (get-undoer))
    (update-focus-actions~ (get-application)))
  
  
  (method public virtual (redo)
    (redo~ (get-undoer))
    (update-focus-actions~ (get-application)))
  
  
  (method public virtual (cut-selection)
    (let ((selection (outer-selection~ editor))
          (designer (get-designer~ editor)))
      (let ((parent (components-parent~ editor selection)))
        (cut-components~ designer selection)
        (set-selection (if parent (list parent) '())))))
  
  
  (method public virtual (copy-selection)
    (let ((selection (outer-selection~ editor))
          (designer (get-designer~ editor)))
      (copy-components~ designer selection)))
  
  
  (method public virtual (paste-clipboard)
    (let ((selection (get-selection)))
      (if (/= (length selection) 1)
          (bell)
        (let* ((designer (get-designer~ editor))
               (parent (car selection))
               (views (paste-clipboard~ designer parent)))
          (for-each (lambda (view)
                      (set-property~ designer view 'position {Point 0 0}))
                    views)
          (set-selection views)))))
  
  
  (method public virtual (paste-properties)
    )
  
  
  (method public virtual (delete-selection)
    (delete-selection~ editor))
  
  
  (method public virtual (rename-selection)
    )
  
  
  (method public virtual (select-all . rest)
    (set-selection (collect-type View (get-children~ client))))
  
  
  (method (get-undoer)
    (get-undoer~ (get-designer~ editor)))
  

  ;;;
  ;;;; Selection
  ;;;
  
  
  (method override (select rank focus?)
    (when (= rank 0)
      @i-am-not-so-sure-about-this
      (bring-to-front~ client)
      (when focus?
        (acquire-focus~ client)))
    ;; temp for client apps
    ;; commented as this creates flicker because it uses update-view internaly
    ;; (user-message "{a} selected" client)
    (invalidate-border)
    (invalidate-view~ client))
  
  
  (method override (unselect)
    (invalidate-border)
    (invalidate-view~ client))
  
  
  (method (invalidate-selection)
    (invalidate-selection~ editor))
  

  ;;;
  ;;;; Properties
  ;;;
  
  
  (method (edit-default-property)
    (let ((default-property (get-default-property~ client)))
      (if (not default-property)
          (bell)
        (let ((manager (select-docked Properties-Manager focus?: #t)))
          (select-property~ (get-tree~ manager) default-property))))))


;;;
;;;; Surrogate-Menu
;;;


(class Surrogate-Menu extends Context-Menu
  
  
  (form
    (<install>
      (<Label-Item>     name: add-item          title: "Add" icon: {Image-Resource "Add"}
        (<Add-Menu>     name: add-menu))
      (<Separator-Item> name: end-add-group)
      (<Label-Item>     name: cut              title: "Cut" icon: {Image-Resource "Cut"} action-handler: {Action view cut})
      (<Label-Item>     name: copy             title: "Copy" icon: {Image-Resource "Copy"} action-handler: {Action view copy})
      (<Label-Item>     name: paste            title: "Paste" icon: {Image-Resource "Paste"} action-handler: {Action view paste})
      (<Label-Item>     name: paste-properties title: "Paste Properties" action-handler: {Action view paste-properties})
      (<Separator-Item> name: end-edition)
      (<Label-Item>     name: bring-to-front   title: "Bring To Front" action-handler: {Action view-surrogate bring-to-front})
      (<Label-Item>     name: send-to-back     title: "Send To Back" action-handler: {Action view-surrogate send-to-back})
      (<Separator-Item> name: end-layer)
      (<Label-Item>     name: delete-selection title: "Delete" icon: {Image-Resource "Remove"} action-handler: {Action view-surrogate delete-selection})
      (<Label-Item>     name: rename-selected  title: "Rename" action-handler: {Action view-surrogate rename-selected})
      (<Label-Item>     name: select-all       title: "Select All" action-handler: {Action view-surrogate select-all})
      (<Separator-Item> name: before-designer)
      (<Label-Item>     name: new              title: "New" action-handler: {Action view-surrogate new})
      (<Label-Item>     name: edit             title: "Edit" action-handler: {Action view-surrogate edit})
      (<Label-Item>     name: add              title: "Add" action-handler: {Action view-surrogate add})
      (<Label-Item>     name: open-grid        title: "Grid" action-handler: {Action view-surrogate open-grid})
      (<Separator-Item> name: end-close/rename)
      (<Label-Item>     name: properties       title: "Properties" action-handler: {Action view-surrogate properties})))))
