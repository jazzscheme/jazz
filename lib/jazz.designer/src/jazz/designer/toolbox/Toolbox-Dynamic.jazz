;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Toolbox Dynamic
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.designer.toolbox.Toolbox-Dynamic jazz


(import (jazz.designer)
        (jazz.jml)
        (jazz.library))


(class undocumented Toolbox-Dynamic extends Toolbox-Group
  
  
  (property module-name initialize #f accessors generate)
  
  
  ;;;
  ;;;; Classes
  ;;;
  
  
  (method (find-class-model class-name)
    (find-key (lambda (child)
                (list (get-unit~ child) (get-model~ child)))
              (list module-name class-name)))
  
  
  (method public (get-module-classes)
    (if module-name
        (let* ((module (require-module module-name))
               (exports (table-keys (get-exports~ module))))
          (sort string<? (collect-if (lambda (export-name)
                                       (let ((obj (module-ref module-name export-name)))
                                         (and (class? obj) (subclass? obj Component))))
                                     exports)
            key: symbol->string))
      '()))
  
  
  (method public (get-missing-classes)
    (collect-if (lambda (class-name)
                  (not (find-class-model class-name)))
                (get-module-classes)))
  
  
  (method public (get-removed-classes)
    (collect-if (lambda (tool)
                  (not (get-class~ tool)))
                (get-children)))
  
  
  ;;;
  ;;;; Descriptor
  ;;;
  
  
  (method meta override (get-class-descriptor)
    (new Toolbox-Dynamic-Descriptor)))


;;;
;;;; Design
;;;


(submodule design


(import (jazz.designer))


(class Toolbox-Dynamic-Descriptor extends Toolbox-Group-Descriptor
  
  
  (form
    (<install>                 title: "Module" image: {Image-Resource "Library"}
      (<properties~>           categorized: (class-info name-info module-name)
        (<Property-Descriptor> name: module-name))))
  
  
  (method override (component-get-categorized-addable-classes component)
    '()))))

