;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Toolbox Manager
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.designer.toolbox.Toolbox-Manager jazz


(import (jazz.designer)
        (jazz.designer.view)
        (jazz.io)
        (jazz.graphic)
        (jazz.jml)
        (jazz.library)
        (jazz.library.component)
        (jazz.system)
        (jazz.system.process)
        (jazz.ui)
        (jazz.ui.view))


;;;
;;;; Read
;;;


(definition (read-toolbox toolbox)
  (define (load-toolbox file)
    (if (exists?~ file)
        (instantiate~ (read-form file))
      (new Toolbox)))
  
  (with-safe-execution "loading the toolbox"
    (lambda ()
      (let ((appl (get-application)))
        (let ((toolbox (load-toolbox (toolbox-file~ appl toolbox))))
          (install-context~ appl toolbox)
          toolbox)))
    continue-handler:
    (lambda (err)
      )))


;;;
;;;; Toolbox
;;;


(class undocumented Toolbox-Manager extends Component-Editor implements Exit-Listener
  
  
  (property toolbox initialize #f accessors explicit)
  
  
  (form
    (<install>                             layout-type: border
      (<Layout-View>     name: tools
        (<Push-Tool>     name: synchronize size: {Dimension 22 22} location: tail tooltip?: #t tooltip-text: "Synchronize" resource: {Image-Resource "Refresh"} portfolio: :images action-handler: {Event-Handler :guest on-synchronize}))
      (<Toolbox-Editor>  name: descendants location: center
        (<!>             name: border
          (<!>           name: scroller    style: tool
            (<!>         name: content
              (<!>       name: header
                (<!>     name: content
                  (<!>   name: tree        highlight-edited?: #f auto-expand/collapse?: #t double-click-handler: {Event-Handler :self on-double-click}
                    (<!> name: descendant  title: "Model" width: 291))))))))))
  
  
  (method override (finish rest)
    (nextmethod rest)
    (set-application-select?~ (locate '(descendants tree)) application-select?))
  
  
  (method meta override (external-name . rest)
    'toolbox-manager)
  
  
  ;;;
  ;;;; Aliases
  ;;;
  
  
  (method override (component-alias name)
    (case name
      ((tree) (get-tree))
      (else (nextmethod name))))
  
  
  ;;;
  ;;;; Host
  ;;;
  
  
  (method meta override (host-icon)
    {Image-Resource "Toolbox"})
  
  
  (method meta override (host-title)
    "Toolbox")
  
  
  ;;;
  ;;;; Docked
  ;;;
  
  
  (method override (get-tools-view)
    (locate 'tools))
  
  
  (method override (focus-default)
    (let ((tree (locate '(descendants tree))))
      (acquire-focus~ tree)))
  
  
  ;;;
  ;;;; Controller
  ;;;
  
  
  (method override (new-document-controller)
    (new Toolbox-Manager-Controller self))
  
  
  ;;;
  ;;;; Toolbox
  ;;;
  
  
  (method public (get-toolbox)
    toolbox)
  
  
  (method public (set-toolbox tlb)
    (set! toolbox tlb)
    (set-client (and toolbox (read-toolbox toolbox))))
  
  
  ;;;
  ;;;; Component
  ;;;
  
  
  (method override (install rest)
    (nextmethod rest)
    (set-shown?~ (locate-component '(descendants header)) #f)
    (set-editor~ (locate 'descendants) self)
    (add-exit-listener~ (get-application) self))
  
  
  (method override (prepare-exit)
    (when (and designer (file? (get-origin~ (get-form~ designer))))
      (save~ designer)))
  
  
  ;;;
  ;;;; Tree
  ;;;
  
  
  (method (get-tree)
    (locate '(descendants tree)))
  
  
  ;;;
  ;;;; Document
  ;;;
  
  
  (method (document-status)
    "Toolbox")
  
  
  ;;;
  ;;;; Modules
  ;;;
  
  
  (method public (get-module-names)
    (map get-module-name~ (get-toolbox-modules)))
  
  
  (method public (get-toolbox-modules)
    (collect-descendants~ (get-client) Toolbox-Module))
  
  
  (method public (get-toolbox-models)
    (collect-descendants~ (get-client) Toolbox-Model))
  
  
  (method public (get-addable-models-refs component)
    (let ((tools (collect-if (lambda (tool)
                               (let ((class (get-class~ tool)))
                                 (and (is? class Class) (addable-class?~ component class))))
                             (get-toolbox-models))))
      (map get-reference~ tools)))
  
  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method (on-synchronize evt)
    (let ((tree (get-tree)))
      (with-cursor :wait
        (lambda ()
          (with-preserved-selection~ tree
            (lambda ()
              (with-preserved-expand-state~ tree
                (lambda ()
                  (with-safe-design
                    (lambda ()
                      (with-update-locked
                        (lambda ()
                          (with-design-locked client
                            (lambda ()
                              (for-each (lambda (module)
                                          (for-each (~ remove-child designer) (get-children~ module))
                                          (add-module-elements~ module (lambda (class properties)
                                                                         (install-new-component~ tree designer (new class) module #f '() properties descendant?: #t))))
                                        (get-toolbox-modules)))))))))))
            use: 'text
            ensure-expanded?: #t))))))


;;;
;;;; Dialog
;;;


(class Dialog-Toolbox-Manager extends Toolbox-Manager
  
  
  (property toolbox-title initialize #f accessors generate)
  
  
  (form
    (<install>                        application-select?: #f size: {Dimension 500 500}
      (<!>               name: tools  visible?: #f)
      (<Layout-View>     name: south  location: south layout-type: border size: {Dimension 500 30}
        (<Layout-View>                location: south size: {Dimension 500 30} layout-type: flow
          (<Push-Button> name: ok     title: "OK" location: tail size: {Dimension 80 24} action-handler: {Event-Handler :host on-ok} default?: #t position: {Point 9 3})
          (<Separator>                location: tail size: {Dimension 3 0} location: tail)
          (<Push-Button> name: cancel title: "Cancel" location: tail size: {Dimension 80 24} action-handler: {Event-Handler :host on-cancel} position: {Point 97 3})
          (<Separator>                size: {Dimension 5 0} location: tail)))))
  
  
  (method override (form-model form)
    (case (get-name~ form)
      ((descendants) Dialog-Toolbox-Editor)
      (else (nextmethod form))))
  
  
  (method public virtual (filter-model model)
    #t)
  
  
  ;; This might be flaky. We need to ignore the designer.
  (method (filter-toolbox toolbox)
    (for-each filter-toolbox (get-children~ toolbox))
    (unless (or (and (is? toolbox Toolbox-Model)
                     (filter-model toolbox))
                (> (length (get-children~ toolbox)) 0)
                (is? toolbox Toolbox))
      (child-remove~ (get-tree) toolbox)
      (set-parent~ toolbox #f)))
  
  
  (method override (finish rest)
    (nextmethod rest)
    (let* ((forms (map (lambda (manager)
                         (copy-object~ (get-form~ (get-designer~ manager)) #t))
                       (get-toolbox-managers)))
           (locators (map get-locator~ forms)))
      (let ((new-form (parse-form
                        `(data jazz.ide.data.toolbox
                         (form
                           (<Toolbox> title: ,(or toolbox-title "")))))))
        (set-children~ new-form forms)
        (let ((old-locator (get-locator~ new-form)))
          (set-locator~ new-form (lambda (sym)
                                   (let (loop (locators (cons old-locator locators)))
                                     (and (not-null? locators)
                                          (or ((car locators) sym)
                                              (loop (cdr locators))))))))
        (setup-context~ new-form new-form)
        (let ((toolbox (instantiate~ new-form)))
          (set-client toolbox)
          (filter-toolbox toolbox))))
    (let ((tree (get-tree)))
      (expand-all~ tree (get-root-row~ tree))))
  
  
  ;;;
  ;;;; Result
  ;;;
  
  
  (method override (get-modal-result)
    (let ((model (selected-addable~ (get-tree))))
      (if (not model)
          (designer-error "Select a valid model")
        (list (get-model~ model) (get-unit~ model))))))


;;;
;;;; Controller
;;;


(class Toolbox-Manager-Controller extends Component-Editor-Controller
  
  
  (method override (update-caption)
    )
  
  
  (method override (document-status)
    "Toolbox")))
