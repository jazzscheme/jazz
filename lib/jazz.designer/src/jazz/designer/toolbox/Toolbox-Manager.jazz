;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Toolbox Manager
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.designer.toolbox.Toolbox-Manager jazz


(import (jazz.designer)
        (jazz.designer.view)
        (jazz.io)
        (jazz.jml)
        (jazz.library)
        (jazz.library.component)
        (jazz.system)
        (jazz.system.process)
        (jazz.ui)
        (jazz.ui.view)
        (uranos.metadata))


;;;
;;;; Read
;;;


(definition (read-toolbox)
  (define (load-toolbox file)
    (if (exists?~ file)
        (instantiate~ (read-form file))
      (new Toolbox)))
  
  (with-safe-execution "loading the toolbox"
    (lambda ()
      (let ((appl (get-application)))
        (let ((toolbox (load-toolbox (toolbox-file~ appl))))
          (install-context~ appl toolbox)
          toolbox)))
    continue-handler:
    (lambda (err)
      )))


;;;
;;;; Toolbox
;;;


(class undocumented Toolbox-Manager extends Component-Editor implements Exit-Listener
  
  
  (form
    (<install>                            layout-type: border
      (<Layout-View>    name: tools
        (<Push-Tool>    name: add         size: {Dimension 22 22} location: tail tooltip?: #t tooltip-text: "Add" resource: {Image-Resource "Added"} portfolio: :images action-handler: {Event-Handler (:guest tree) on-add})
        (<Push-Tool>    name: edit        size: {Dimension 22 22} location: tail tooltip?: #t tooltip-text: "Edit Class" resource: {Image-Resource "EditResult"} portfolio: :images action-handler: {Event-Handler (:guest tree) on-edit})
        (<Push-Tool>    name: new         size: {Dimension 22 22} location: tail tooltip?: #t tooltip-text: "New Subclass" resource: {Image-Resource "NewTrait"} portfolio: :images action-handler: {Event-Handler (:guest tree) on-new})
        (<Separator>                      size: {Dimension 4 0})
        (<Push-Tool>    name: synchronize size: {Dimension 22 22} location: tail tooltip?: #t tooltip-text: "Synchronize" resource: {Image-Resource "Refresh"} portfolio: :images action-handler: {Event-Handler :guest on-synchronize})
        (<Push-Tool>    name: generate-sql size: {Dimension 22 22} location: tail tooltip?: #t tooltip-text: "Generate SQL" resource: {Image-Resource "Refresh"} portfolio: :images action-handler: {Event-Handler :guest on-sql-generate}))
      
      (<Toolbox-Editor> name: descendants location: center
        (<!>            name: scroller    style: tool
          (<!>          name: content
            (<!>        name: header
              (<!>      name: content
                (<!>    name: tree        highlight-edited?: #f auto-expand/collapse?: #t double-click-handler: {Event-Handler :self on-double-click}
                  (<!>  name: descendant  title: "Model" width: 291)))))))))
  
  
  (method meta override (external-name . rest)
    'toolbox-manager)
  
  
  ;;;
  ;;;; Aliases
  ;;;
  
  
  (method override (component-alias name)
    (case name
      ((tree) (get-tree))
      (else (nextmethod name))))
  
  
  ;;;
  ;;;; Host
  ;;;
  
  
  (method meta override (host-icon)
    {Image-Resource "Toolbox"})
  
  
  (method meta override (host-title)
    "Toolbox")
  
  
  ;;;
  ;;;; Docked
  ;;;
  
  
  (method override (get-tools-view)
    (locate 'tools))
  
  
  (method override (focus-default)
    (let ((tree (locate '(descendants tree))))
      (acquire-focus~ tree)))
  
  
  ;;;
  ;;;; Controller
  ;;;
  
  
  (method override (new-controller)
    (new Toolbox-Manager-Controller self))
  
  
  ;;;
  ;;;; Component
  ;;;
  
  
  (method override (install rest)
    (nextmethod rest)
    (set-shown?~ (locate-component '(descendants header)) #f)
    (set-editor~ (locate 'descendants) self)
    (set-client (read-toolbox))
    (add-exit-listener~ (get-application) self))
  
  
  (method override (prepare-exit)
    (when (and designer (file? (get-origin~ (get-form~ designer))))
      (save~ designer)))
  
  
  ;;;
  ;;;; Tree
  ;;;
  
  
  (method (get-tree)
    (locate '(descendants tree)))
  
  
  ;;;
  ;;;; Document
  ;;;
  
  
  (method (document-status)
    "Toolbox")
  
  
  ;;;
  ;;;; Modules
  ;;;
  
  
  (method public (get-dynamic-toolboxes)
    (collect-if (lambda (cp) (is? cp Toolbox-Dynamic))
                (collect-family~ (get-client))))
  
  
  (method public (get-module-names)
    (map get-module-name~ (get-dynamic-toolboxes)))
  
  
  (method public (get-toolbox-models)
    (collect-if (lambda (cp) (is? cp Toolbox-Model))
                (collect-family~ (get-client))))
  
  
  (method public (get-addable-models-refs component)
    (let ((tools (collect-if (lambda (tool)
                               (let ((class (get-class~ tool)))
                                 (and class (addable-class?~ component class))))
                             (get-toolbox-models))))
      (map get-reference~ tools)))
  
  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method (on-synchronize evt)
    (with-update-locked
      (lambda ()
        (for-each (lambda (toolbox)
                    (let ((module-name (get-module-name~ toolbox)))
                      (for-each (lambda (class-name)
                                  (let ((model (new Toolbox-Model parent: toolbox name: class-name))
                                        (props (list unit: module-name model: class-name)))
                                    (install-new-component~ (get-tree) designer model toolbox (symbol->string class-name) '() props)))
                                (get-missing-classes~ toolbox))
                      (for-each (lambda (tool)
                                  (remove-child~ designer tool))
                                (get-removed-classes~ toolbox))))
                  (get-dynamic-toolboxes)))))

  
  (method (on-sql-generate evt)                   
    
    ;; Load the modules
    (define (get-module-table-classes module-name)
      (let* ((module (require-module module-name))
             (exports (table-keys (get-exports~ module))))
        (collect-if (lambda (export-name)
                      (let ((obj (module-ref module-name export-name)))
                        (and (class? obj) (subclass? obj Table-Metadata))))
                    exports)))
    
    ;; Helper function which recursively prints table data
    (define (print-table-design form port)
      (when (not-null? form)
        (case (get-action~ form)
          ((install) 
           (format port "~{ Form (new Design-Table \"{a}\")(:description nil)\n~{Form (modify \"Columns\")()\n" 
             (get-property~ form 'sql-name))
           (for-each (lambda (child)
                       (print-table-design child port))
                     (get-children~ form))                 
           (display "}\n" port))
          ((new)
           (let ((inner-child (car (get-children~ form)))
                 (name (symbol->string (get-name~ form))))
             (format port "~{ Form (new Design-Column \"{a}\")(:physical-name {a} :nullable? {a} :identity? {a} ) " 
               name name
               (if (get-property~ inner-child 'nullable?) "true" "false")
               (if (get-property~ form 'identity?) "true" "false"))
             )))
        (display "}\n" port)))
    
    ;; Helper function which recursively converts a literal as well as it's arguments
    ;; into a string.
    (define (build-literal-string value)
      (cond ((null? value) " ")
            ((symbol? value) (symbol->string value))
            ((string? value) (format "\"{a}\"" value))
            ((number? value) (number->string value))
            ((instance-of? value Literal)
             (format " ~{{a} {a}~}"
                     (symbol->string (get-name~ value))
                     (build-literal-string (get-arguments~ value))))
            ((list? value)
             (let (iterate (scan value) (result ""))
               (if (null? scan)
                   result
                 (iterate (cdr scan) (format "{a} {a}{a}{a}"
                                             result 
                                             (if (list? (car scan)) "(" "")
                                             (build-literal-string (car scan))
                                             (if (list? (car scan)) ")" "" ))))))))
    
    (let* ((db-name "Database-Name")
           (module-name 'uranos.showcase.requests)
           (module-classes (get-module-table-classes module-name))
           (out-path (string-append "/" db-name ".dsg"))
           (existing-layout #f))
      
      ;; Check if there is pre-existing :layout data, and if so fetch it before overwriting the file
      (when (file-exists? out-path)
        (with-jazz-readtable
          (lambda ()
            (parameterize ((walk-for 'eval))
              (call-with-input-file out-path
                (lambda (port)
                  (let ((content (read-all port read)))
                    (set! existing-layout (getf content ':layout)))))))))
      
      (call-with-output-file out-path
        (lambda (port)
          (format port ":version ~{Version 1 1 0 23~}\n\n :properties (:schemas ((\"{a}\" sqlserver)))\n\n :architecture\n~{ Form (new Design-Architecture \"{a}\" )() \n ~{ Form (modify \"Tables\") ()\n"
                           db-name db-name )
          (for-each (lambda (current-class)
                      (print-table-design (get-class-form~ 
                                            (table-ref (get-entries~ 
                                                         (require-module module-name)) current-class)) 
                                          port))
                    module-classes)      
          (display " }}\n " port)
          (when existing-layout
            (format port "\n:layout \n\n {a}" (build-literal-string existing-layout))))))))


;;;
;;;; Controller
;;;


(class Toolbox-Manager-Controller extends Component-Editor-Controller
  
  
  (method override (document-status)
    "Toolbox")))
