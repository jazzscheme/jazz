;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Toolbox Module
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.designer.toolbox.Toolbox-Module jazz


(import (jazz.designer)
        (jazz.designer.view)
        (jazz.jml)
        (jazz.library))


(class undocumented Toolbox-Module extends Toolbox-Group
  
  
  (property module-name        initialize #f accessors generate)
  (property addable-references initialize #f accessors generate)
  
  
  (method override (copy-object deep?)
    (new Toolbox-Module name: name title: title module-name: module-name addable-refs: addable-refs))
  
  
  ;;;
  ;;;; Elements
  ;;;
  
  
  (method virtual (collect-valid-names names)
    (collect-if (lambda (name)
                  (let ((object (module-ref module-name name)))
                    (and (class? object)
                         (subclass? object Component))))
                names))
  
  
  (method virtual (collect-valid-elements-properties names)
    (let ((valid-names (collect-valid-names names)))
      (map (lambda (name)
             (list unit: module-name model: name title: (symbol->string name)))
           valid-names)))
  
  
  (method virtual (get-element-class plist)
    Toolbox-Model)
  
  
  (method public (add-module-elements add)
    (define (sort-by-title plists)
      (sort string<? plists key: (lambda (plist)
                                   (getf plist title:))))
    
    (when module-name
      (let* ((module (with-exception-catcher
                       (lambda (exc)
                         (designer-error "Module {a} does not exist" module-name))
                       (lambda ()
                         (require-module module-name))))
             (valid-names (collect-valid-names (table-keys (get-exports~ module))))
             (plists (sort-by-title (collect-valid-elements-properties valid-names))))
        (for-each add (map get-element-class plists) plists))))
  
  
  ;;;
  ;;;; Descriptor
  ;;;
  
  
  (method meta override (get-class-descriptor)
    (new Toolbox-Module-Descriptor)))


;;;
;;;; Design
;;;


(submodule design


(import (jazz.designer))


(class Toolbox-Module-Descriptor extends Toolbox-Group-Descriptor
  
  
  (form
    (<install>                 title: "Module" image: {Image-Resource "Library"}
      (<properties~>           categorized: (class-info name-info module-name)
        (<Property-Descriptor> name: module-name))))
  
  
  (method override (component-get-categorized-addable-classes component)
    (let ((references (get-addable-references~ component)))
      (cond ((or (not references) (null? references))
             '())
            ((symbol? references)
             (list (require-symbolic-addable-references references)))
            (else
             (list (map get-runtime-reference~ references)))))))))
