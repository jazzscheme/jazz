;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Toolbox Module
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.designer.toolbox.Toolbox-Module jazz


(import (jazz.component)
        (jazz.debugger)
        (jazz.descriptor)
        (jazz.designer)
        (jazz.designer.view)
        (jazz.domain)
        (jazz.editor)
        (jazz.editor.jazz)
        (jazz.locale.components)
        (jazz.markup)
        (jazz.reference)
        (jazz.resource)
        (jazz.runtime))


(class undocumented Toolbox-Module extends Toolbox-Group
  
  
  (property module-name        initialize #f accessors generate)
  (property addable-references initialize #f accessors generate)
  (property locale-tree-class  initialize #f getter generate setter explicit)
  
  
  (slot locale-tree initialize #f getter generate)
  
  
  ;;;
  ;;;; Accessors etc.
  ;;;
  
  
  (method public (set-locale-tree-class self locale-tree-class)
    (set! self.locale-tree-class locale-tree-class)
    (let ((tree-class (and (is? locale-tree-class Class-Reference)
                           (reference-resolve locale-tree-class))))
      (when (and tree-class (subtype? tree-class Locale-Tree))
        (set! locale-tree (new tree-class)))))
  
  
  (method override (finish self rest)
    (nextmethod self rest)
    (set-locale-tree-class self locale-tree-class))
  
  
  (method override (copy-object self deep?)
    (new Toolbox-Module name: name title: title module-name: module-name addable-references: addable-references locale-tree-class: locale-tree-class))
  
  
  ;;;
  ;;;; Elements
  ;;;
  
  
  (method virtual (collect-valid-names self names)
    (collect-if (lambda (name)
                  (let ((object (module-ref module-name name)))
                    (and (class? object)
                         (subclass? object Component))))
                names))
  
  
  (method virtual (collect-valid-elements-properties self names)
    (let ((valid-names (collect-valid-names self names)))
      (map (lambda (name)
             (list unit: module-name model: name title: (symbol->string name)))
           valid-names)))
  
  
  (method virtual (get-element-class self plist)
    Toolbox-Model)
  
  
  (method virtual (sort-elements self plists)
    (sort string<? plists key: (lambda (plist)
                                 (getf plist title:))))
  
  
  (method (require-toolbox-module self)
    (with-exception-filter
      (lambda (exception)
        (is? exception Error))
      (lambda (error)
        (designer-error (get-message error)))
      (lambda ()
        (require-module module-name))))
  
  
  (method public (collect-module-elements self)
    (map (lambda (name)
           (module-ref module-name name))
         (table-keys (get-exports (require-toolbox-module self)))))
  
  
  (method public (add-module-elements self add)
    (when module-name
      (let* ((module (require-toolbox-module self))
             (valid-names (collect-valid-names self (table-keys (get-exports module))))
             (plists (sort-elements self (collect-valid-elements-properties self valid-names))))
        (for-each add (map (~ get-element-class self) plists) plists))))
  
  
  (method public (add-element self runtime-reference class-name)
    (bind (unit model) (parse-runtime-reference runtime-reference)
      (call-with-saved-text (find-unit-source module-name)
        (lambda (text)
          (let ((imports (cons 'jazz.markup (if (eq? module-name unit) '() (list unit)))))
            (insert-imports text imports)
            (insert-class text class-name model)
            (insert-new-form text class-name)
            (evaluate-range text (location-range text (list class-name))))))))
  
  
  ;;;
  ;;;; Delete
  ;;;
  
  
  (method public (remove-text-location self symbol)
    (call-with-saved-text (find-unit-source module-name)
      (lambda (text)
        (let* ((range (location-range text (list symbol) toplevel-location: (list module-name)))
               (explorer (new Jazz-Explorer (get-model text) range: range)))
          (backward-expr explorer)
          (set-selection text (new Range$Cell$ (get-end explorer) (get-end range)))
          (delete-selection text)))))
  
  
  (method public (remove-from-runtime self symbol)
    (let* ((run-module 'jazz.runtime)
           (str (object->string
                  `(module ,run-module jazz
                   (let ((module (require-module ',module-name)))
                     (table-set! (get-exports module) ',symbol)
                     (table-set! (get-entries module) ',symbol)
                     (module-undefine ',module-name ',symbol)
                     #!void)))))
      (evaluate-filename-expressions (get-debugger-manager) (parse (find-unit-source run-module)) 'jazz str #f #f #f)))
  
  
  (method public (remove-element self symbol)
    (remove-text-location self symbol)
    (remove-from-runtime self symbol))
  
  
  ;;;
  ;;;; Descriptor
  ;;;
  
  
  (method meta override (get-class-descriptor self (context: context #f))
    (new Toolbox-Module-Descriptor)))


;;;
;;;; Design
;;;


(submodule design


(import (jazz.clipboard)
        (jazz.designer))


(class Toolbox-Module-Descriptor extends Toolbox-Group-Descriptor
  
  
  (form
    (<install>                                          title: "Module" image: {Image-Resource "Library"}
      (<properties~>
        (<Property-Descriptor> name: module-name
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: addable-references
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: locale-tree-class
          (<Literal-Domain>    name: domain             nullable?: #t is: {Class-Reference Class-Reference})))))
  
  
  (method override (component-determine-paster self component (try-parent? #t))
    (and (can-paste-component? component)
         (clipboard-format-available? 'jazz-tool)
         component))
  
  
  (method override (component-get-categorized-addable-classes self component)
    (let ((references (get-addable-references component)))
      (cond ((or (not references) (null? references))
             '())
            ((symbol? references)
             (list (require-symbolic-addable-references references)))
            (else
             (list (map get-runtime-reference references)))))))))
