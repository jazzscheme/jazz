;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Toolbox Traits Module
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.designer.toolbox.Toolbox-Traits-Module jazz


(import (jazz.designer)
        (jazz.jml)
        (jazz.library))


(class Toolbox-Traits-Module extends Toolbox-Objects-Module
  
  
  (property class initialize #f accessors generate)
  
  
  (form
    (<install> models: ({Class-Reference Trait})))
  
  
  (method (collect-descendants-locators trait locator)
    (let* ((subtraits (get-children~ trait))
           (sublocators (map (lambda (subname)
                               (append locator (list subname)))
                             (map get-name~ subtraits))))
      (cons locator (append-map collect-descendants-locators subtraits sublocators))))
  
  
  (method override (collect-valid-elements-properties names)
    (let* ((valid-names (collect-valid-names names))
           (locators (append-map collect-descendants-locators
                                 (map (lambda (name)
                                        (module-ref module-name name))
                                      valid-names)
                                 (map list valid-names))))
      (map (lambda (locator)
             (list unit: module-name model: locator title: (join (map symbol->string locator) ".")))
           locators)))
  
  
  (method override (collect-valid-names names)
    (collect-if (lambda (name)
                  (let ((trait (module-ref module-name name)))
                    (or (not class)
                        (subclass? class (get-client-type~ trait)))))
                (nextmethod names)))
  )
)
