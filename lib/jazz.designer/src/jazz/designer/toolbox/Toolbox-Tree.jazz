;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Toolbox Tree
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.designer.toolbox.Toolbox-Tree jazz


(import (jazz.designer)
        (jazz.designer.view)
        (jazz.library)
        (jazz.library.component)
        (jazz.jml)
        (jazz.ui)
        (jazz.ui.view))


(class undocumented Toolbox-Tree extends Descendants-Tree
  
  
  (form
    (<install> portfolio: :images draggable?: #t reorderable?: #t multiple-selection?: #f selection-mode: row))
  
  
  (method override (addable-root-classes)
    (list
     (reference Toolbox-Group)
     #f
     (reference Toolbox-Model)))
  
  
  (method (call-with-selected-toolbox-model func)
    (let ((selected-toolbox-model (get-single-selected-data)))
      (and (is? selected-toolbox-model Toolbox-Model)
           (func selected-toolbox-model))))
  
  
  (method public (find-model-if pred)
    (find-if pred (collect-descendants client Toolbox-Model)))
  
  
  (method public (selected-class)
    (call-with-selected-toolbox-model get-class~))
  
  
  (method public (selected-model)
    (call-with-selected-toolbox-model get-model~))
  
  
  (method public (selected-unit)
    (call-with-selected-toolbox-model get-unit~))
  
  
  (method public (selected-toolbox)
    (call-with-selected-toolbox-model (lambda (model) (find-ascendant~ model Toolbox))))
  
  
  (method override (update-selection expand-state selected-components)
    )
  
  
  (method override (focus-update-actions)
    (nextmethod)
    (when (is? (get-single-selected-data) Toolbox-Model)
      (set-action-enabled? {Action components-tree edit} #t)
      (set-action-enabled? {Action components-tree new} #t)
      (set-action-enabled? {Action components-tree add} #t)))
  
  
  (method (on-double-click evt)
    (let ((kind (get-kind~ (selected-toolbox))))
      (if (eq? kind 'user)
          (on-edit evt)
        (on-add evt))))
  
  
  (method override (on-edit evt)
    (when (or (eq? (get-kind~ (selected-toolbox)) 'user)
              (eq? (message-box "Are you sure you want to edit this non-user class?" type: 'question) 'yes))
      (let ((class (selected-class)))
        (and class (edit-class class)))))
  
  
  (method (on-new evt)
    (let ((model (or (selected-model) 'View))
          (unit (or (selected-unit) 'jazz.ui)))
      (edit-new model unit)))
  
  
  (method (edit-new model unit (size: size #f))
    (let* ((model-name (string->symbol (string-append "<" (symbol->string model) ">")))
           (form-data (new Data 'jazz `((,unit)) #f))
           (form (construct-form
                   (list model-name)
                   (let ((imports (effective-imports~ form-data)))
                     (imports-locator imports))
                   form-data))
           (target (instantiate~ form)))
      (when size
        (set-size~ target size))
      (edit-component target)))
  
  
  (method (on-add evt)
    (let ((class (selected-class))
          (unit (selected-unit))
          (editor (current-document)))
      (if (and class (is? editor View-Editor))
          (add-new~ (get-surrogate~ (get-client~ editor)) class {Point 0 0} centered?: #f import: unit)
        (bell))))
  
  
  (method override (row-state component update? level)
    (if update?
        (if (< level 1) 'expanded 'collapsed)
      'collapsed))))
