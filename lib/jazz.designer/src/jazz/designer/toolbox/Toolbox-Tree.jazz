;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Toolbox Tree
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.designer.toolbox.Toolbox-Tree jazz


(import (jazz.designer)
        (jazz.designer.view)
        (jazz.library)
        (jazz.library.component)
        (jazz.jml)
        (jazz.runtime)
        (jazz.ui)
        (jazz.ui.clipboard)
        (jazz.ui.view))


(class undocumented Toolbox-Tree extends Descendants-Tree
  
  
  (form
    (<install> portfolio: :images draggable?: #t reorderable?: #t multiple-selection?: #f selection-mode: row))
  
  
  (method override (add-component-class ref)
    (let ((parent (selected-component)))
      (if (is? parent Toolbox-Module)
          (bind (unit model) (parse-runtime-reference ref)
            (let* ((name (request-name accepts-empty?: #f))
                   (editor (new-class model unit))
                   (designer (get-designer~ editor))
                   (destination (set-class-destination~ designer (get-module-name~ parent) name)))
              (save-to-class~ designer destination)
              (reset-client~ editor destination)
              (nextmethod (reference Toolbox-Model) presentation: (symbol->string name) properties: (list unit: (get-module-name~ parent) model: name))))
          (nextmethod ref))))
  
  
  (method public (call-with-selected-addable func)
    (let ((selected (get-single-selected-data)))
      (and (is? selected Toolbox-Addable)
           (func selected))))
  
  
  (method (call-with-selected-toolbox-model func)
    (let ((selected-toolbox-model (get-single-selected-data)))
      (and (is? selected-toolbox-model Toolbox-Model)
           (func selected-toolbox-model))))
  
  
  (method public (find-model-if pred)
    (find-if pred (collect-descendants client Toolbox-Model)))
  
  
  (method public (selected-addable)
    (call-with-selected-addable identity))
  
  
  (method public (selected-class)
    (call-with-selected-toolbox-model get-class~))
  
  
  (method public (selected-model)
    (call-with-selected-toolbox-model get-model~))
  
  
  (method public (selected-unit)
    (call-with-selected-toolbox-model get-unit~))
  
  
  (method public (selected-toolbox)
    (call-with-selected-addable (lambda (addable) (find-ascendant~ addable Toolbox))))
  
  
  (method virtual (paste-tool tool parent)
    (let* ((name (request-name accepts-empty?: #f))
           (editor (open-model tool))
           (designer (get-designer~ editor))
           (module-name (get-module-name~ parent))
           (destination (if (is? tool Toolbox-Trait)
                            (deserialize-runtime-reference `(module-public ,module-name ,name))
                          (set-class-destination~ designer (get-module-name~ parent) name))))
      (if (is? tool Toolbox-Trait)
          (save-to-trait~ designer module-name name #t)
        (save-to-class~ designer destination))
      (reset-client~ editor destination)
      (add-child~ (get-designer) (new (class-of tool)) parent properties: (list title: (symbol->string name) model: name unit: (get-module-name~ parent)))))
  
  
  (method override (paste-clipboard)
    (let ((parent (or (selected-component) client))
          (parcels (get-jazz-parcels)))
      (if (is? parent Toolbox-Module)
          (for-each (lambda (parcel)
                      (let ((form (car (get-content~ parcel))))
                        (set-locator~ form (imports-locator (get-imports~ parcel)))
                        (setup-context~ form form)
                        (let ((tool (instantiate~ form)))
                          (paste-tool tool parent))))
                    parcels)
        (nextmethod))))
  
  
  (method override (update-selection expand-state selected-components)
    )
  
  
  (method override (focus-update-actions)
    (nextmethod)
    (let ((data (get-single-selected-data)))
      (when (is? data Toolbox-Addable)
        (let ((model? (is? data Toolbox-Model))
              (trait? (is? data Toolbox-Trait)))
          (set-action-enabled? {Action components-tree new} (not trait?))
          (set-action-enabled? {Action components-tree open} model?)
          (set-action-enabled? {Action components-tree add} (not trait?))))))
  
  
  (method (on-double-click evt)
    (let ((selected (selected-toolbox)))
      (when selected
        (if (eq? (get-kind~ selected) 'user)
            (on-open evt)
          (on-add evt)))))
  
  
  (method (on-new evt)
    (new-addable (selected-addable)))
  
  
  (method virtual (open-model model)
    (typecase model
      ((Toolbox-Trait)
       (open-trait (get-unit~ model) (get-model~ model)))
      ((Toolbox-Model)
       (let ((class (get-class~ model)))
         (and class (open-class class))))
      (else
       #f)))
  
  
  (method override (on-open evt)
    (when (or (eq? (get-kind~ (selected-toolbox)) 'user)
              (eq? (message-box "Are you sure you want to open this non-user class?" type: 'question) 'yes))
      (let ((model (selected-addable)))
        (open-model model))))
  
  
  (method (open-trait unit sym)
    (let ((form (make-trait-edition-form unit sym)))
      (when form
        (open-component form))))
  
  
  (method (new-addable addable)
    (typecase addable
      ((Toolbox-Form)
       (new-form (resolve-runtime-reference (get-reference~ addable))))
      ((Toolbox-Model)
       (new-class (get-model~ addable) (get-unit~ addable)))))
  
  
  (method (new-class model unit (size: size #f))
    (let* ((model-name (string->symbol (string-append "<" (symbol->string model) ">")))
           (form-data (new Data #f 'jazz `((,unit)) #f))
           (form (construct-form
                   (list model-name)
                   (let ((imports (effective-imports~ form-data)))
                     (imports-locator imports))
                   form-data))
           (target (instantiate~ form))
           (editor (open-component target)))
      (when size
        (safe-set-property~ (get-designer~ editor) target 'size size undoable?: #f))
      editor))
  
  
  (method (new-form form (size: size #f))
    (let ((target (instantiate~ form)))
      (when size
        (set-size~ target size))
      (open-component target)))
  
  
  (method (on-add evt)
    (let ((addable (selected-addable))
          (editor (current-document)))
      (if (and addable (is? editor View-Editor))
          (with-atomic-undo~ (get-undoer~ (get-designer~ editor))
            (lambda ()
              (let* ((surrogate (get-surrogate~ (get-client~ editor)))
                     (component (typecase addable
                                  ((Toolbox-Model)
                                   (add-new~ surrogate (get-class~ addable) {Point 0 0} centered?: #f import: (get-unit~ addable)))
                                  ((Toolbox-Form)
                                   (add-new-form~ surrogate (locate-form~ addable) {Point 0 0} centered?: #f imports: (get-imports~ addable))))))
                (cascade-view-position~ (get-designer~ editor) component {Point 0 0}))))
        (bell))))
  
  
  (method override (row-state component update? level)
    (if update?
        (if (< level 1) 'expanded 'collapsed)
      'collapsed))))
