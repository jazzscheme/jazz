;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Designer Validation
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module jazz.designer.validate jazz


(import (jazz.debuggee)
        (jazz.jml)
        (jazz.runtime)
        (jazz.validation))


;; test that all components and properties have descriptors and domains
;; also test that property descriptors are only on our own properties

(class Designer-Descriptors-Tester extends Tester
  
  
  (property repositories initialize #f accessors generate)
  
  
  (form
    (<install> title: "Descriptors"))
  
  
  (method override (test)
    (let ((component-declaration (find-declaration (walk-unit 'jazz.library.component.Component) 'Component))
          (descriptor-declaration (find-declaration (walk-unit 'jazz.designer.descriptor.Component-Descriptor) 'Component-Descriptor))
          (total 0)
          (missing 0))
      (define (walk-with-catch unit-name)
        (catch (Walk-Problems exc
                 (debug exc))
          (let ((namespace-declaration (walk-unit unit-name)))
            (when (is? namespace-declaration Module-Declaration)
              (for-each (lambda (declaration)
                          (when (and (subtype? declaration component-declaration)
                                     (not (subtype? declaration descriptor-declaration))
                                     (some? (lambda (child)
                                              (is? child Property-Declaration))
                                            (queue-list (get-children~ declaration))))
                            (increase! total)
                            (let ((metaclass-declaration (get-metaclass~ declaration)))
                              (unless (find-declaration-child metaclass-declaration 'get-class-descriptor)
                                (debug (get-name~ declaration))
                                (increase! missing)))))
                        (queue-list (get-children~ namespace-declaration)))))))
      
      (iterate-units walk-with-catch repositories: repositories)
      (debug total: total missing: missing)))
  )
)
