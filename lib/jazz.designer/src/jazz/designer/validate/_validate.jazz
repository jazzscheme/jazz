;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Designer Validation
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module jazz.designer.validate jazz


(import (jazz.component)
        (jazz.markup)
        (jazz.runtime)
        (jazz.validation))


;; test that all components and properties have descriptors and domains
;; also test that property descriptors are only on our own properties

(class Designer-Descriptors-Tester extends Tester
  
  
  (property repositories initialize #f accessors generate)
  
  
  (form
    (<install> title: "Descriptors"))
  
  
  (method override (test self)
    (let ((component-declaration (find-declaration (walk-unit 'jazz.component.Component) 'Component))
          (descriptor-declaration (find-declaration (walk-unit 'jazz.descriptor.Component-Descriptor) 'Component-Descriptor)))
      (define (validate-unit unit-name)
        (catch (Walk-Problems exc)
          (let ((namespace-declaration (outline-unit unit-name)))
            (when (is? namespace-declaration Module-Declaration)
              (validate-module unit-name namespace-declaration)))))
      
      (define (validate-module module-name module-declaration)
        (for-each (lambda (declaration)
                    (when (and (subtype? declaration component-declaration)
                               (not (subtype? declaration descriptor-declaration))
                               (some? (lambda (child)
                                        (is? child Property-Declaration))
                                      (queue-list (get-children declaration))))
                      (validate-component module-name declaration)))
                  (queue-list (get-children module-declaration))))
      
      (define (validate-component module-name declaration)
        (define (collect-component-property-names)
          (collect (lambda (child)
                     (when (is? child Property-Declaration)
                       (get-name child)))
                   (queue-list (get-children declaration))))
        
        (define (collect-descriptor-property-names descriptor)
          (map get-name (collect-descriptor-properties descriptor)))
        
        (define (collect-descriptor-properties descriptor)
          (let ((form (get-form descriptor)))
            (if (not form)
                '()
              (let ((properties-form (find-child form 'properties)))
                (if (not properties-form)
                    '()
                  (collect-if (lambda (property-form)
                                (eq? (get-action property-form) 'new))
                              (get-children properties-form)))))))
        
        (let ((metaclass-declaration (get-metaclass declaration)))
          (if (not (find-declaration-child metaclass-declaration 'get-class-descriptor))
              (let ((locator (get-locator declaration)))
                (validation-failed self (format "Class {a} has no descriptor" locator) location: locator))
            (let ((metaclass (module-ref module-name (get-name declaration))))
              (let ((descriptor (get-class-descriptor metaclass)))
                (let ((component-properties (collect-component-property-names))
                      (descriptor-properties (collect-descriptor-property-names descriptor)))
                  (let ((removed (difference component-properties descriptor-properties test: equal?))
                        (added (difference descriptor-properties component-properties test: equal?)))
                    (when (or (not-null? removed)
                              (not-null? added))
                      (let ((locator (get-name (class-of descriptor))))
                        (validation-failed self (format "Descriptor {a} is inconsistent:{?: removed {a}~}{?: added {a}~}" locator (not-null? removed) removed (not-null? added) added) location: locator))))
                  (for-each (lambda (property-form)
                              (when (not (find-child property-form 'domain))
                                (let ((locator (get-name (class-of descriptor))))
                                  (validation-failed self (format "Descriptor {a} property {a} has no domain" locator (get-name property-form)) location: locator))))
                            (collect-descriptor-properties descriptor))))))))
      
      (iterate-units validate-unit repositories: repositories)))
  )
)
