;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Designer View
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module jazz.designer.view jazz


(import (jazz.designer)
        (jazz.io)
        (jazz.library)
        (jazz.library.component)
        (jazz.locale)
        (jazz.platform)
        (jazz.ui.picker)
        (jazz.ui)
        (jazz.ui.view))


;;;
;;;; Component
;;;


(definition package (request-component-presentation class brothers (initial-value: initial-value #f) (validator: validator #f))
  (if (get-name-prohibited?~ class)
      #f
    (let* ((name-mandatory? (get-name-mandatory?~ class))
           (name-unicity? (get-name-unicity?~ class))
           (unicity-domain (and name-unicity? brothers (remove "{}" (map get-presentation-property~ brothers) test: equal?)))
           (pres (localize (get-class-presentation~ class)))
           (presentation (request-string title: (new Locales english: (format "Enter {a} Name" pres) french: "Entrez le nom") prefix: "Name:" initial-value: initial-value accepts-empty?: (not name-mandatory?) unicity-domain: unicity-domain validator: validator)))
      presentation)))


(definition package (component-addable-classes component)
  (flatten (or (component-categorized-toolbox-addable-classes component)
               (get-categorized-addable-classes~ component))))


(definition package (component-categorized-toolbox-addable-classes component)
  (let ((toolbox (find-docked Toolbox-Manager)))
    (and toolbox
         (is? component Component)
         (list (get-addable-models-refs~ toolbox component)))))


(definition package (component-categorized-addable-classes component parent)
  (let ((parent-classes (and parent (get-addable-classes~ parent)))
        (classes (get-addable-classes~ component))
        (categorized (get-categorized-addable-classes~ component))
        (model (class-of component)))
    (let ((model-ref (and parent-classes
                          (not (find classes model test: eq? key: resolve-runtime-reference return: 'item))
                          (find parent-classes model test: eq? key: resolve-runtime-reference return: 'item))))
      (if model-ref
          (cons (list model-ref) categorized)
        categorized))))


(definition public (redundant-descendant? component components)
    (some? (lambda (target)
             (and (neq? component target)
                  (has-parent?~ component target)))
           components))


(definition (can-modify-components? components pred)
  (every? (lambda (component)
            (and (is? component Component)
                 (pred component)
                 (not (redundant-descendant? component components))))
          components))


(definition public (can-copy-components? components)
  (can-modify-components? components can-copy-component?~))


(definition public (can-cut-components? components)
  (can-modify-components? components can-cut-component?~))


(definition public (can-delete-components? components)
  (can-modify-components? components can-delete-component?~))


(definition public (can-paste-components? components)
  (and (every? (lambda (component)
                 (is? component Component))
               components)
       (determine-unique-paster components)))


;;;
;;;; Edit
;;;


(definition public (edit-class class)
  (define (find-editor)
    (find-frame-if-guest
      (lambda (guest)
        (and (is? guest Component-Editor)
             (let* ((client (get-client~ guest))
                    (origin (get-origin~ (get-form~ client))))
               (eq? class origin))))))
  
  (if (class? class)
      (let ((frame (find-editor)))
        (if frame
            (focus-host~ frame)
          (let* ((component (new class))
                 (editor-class (typecase component
                                 ((View) View-Editor)
                                 ((Component) Grid-Component-Editor))))
            (new-frame editor-class client: component))))
    (error "Unable to edit: {s}" class)))


(definition public (edit-component target (editor-class: editor-class #f))
  (let ((component (parameterize ((designing? #t))
                     (cond ((class? target) (new target))
                           ((is? target Form) (instantiate~ target))
                           ((is? target Component) target)
                           ((is? target File) (instantiate~ (read-form target)))
                           (else (error "Unable to edit: {s}" target))))))
    (let ((editor-class (or editor-class
                            (typecase component
                              ((View) View-Editor)
                              ((Component) Grid-Component-Editor)))))
      (new-frame editor-class client: component))))


;;;
;;;; Design
;;;


(definition *view-editors*
  (make-table test: eq?))

(definition package (get-view-editor view)
  (table-ref *view-editors* view #f))

(definition package (set-view-editor view editor)
  (table-set! *view-editors* view editor))


(definition (view-editor-client view)
  (define (determine-client guest)
    (typecase guest
      (else
       guest)))
  
  (determine-client (get-guest~ view)))


(definition public (design-client)
  (pick-figure
    click: (lambda (view pos) (design-view view))
    highlight: #t
    highlight-root-only?: #t
    obscure-unhighlighted?: #f
    report-figure?: #f
    tooltips?: #f))


(definition public (design-mouse-client)
  (design-view (mouse-view)))


(definition (design-view view)
  (let ((client (view-editor-client view)))
    (if (not client)
        (bell)
      (let ((view (parameterize ((designing? #t)) (new (class-of client)))))
        (new-frame View-Editor client: view)))))


@w
(definition (design-view view)
  (let ((client (view-editor-client view)))
    (if (not client)
        (bell)
      (let ((editor (get-view-editor client)))
        (if (not editor)
            (set-view-editor client (get-guest~ (new-frame View-Editor host-visible?: #f client: client)))
          (close~ editor)
          (set-view-editor client #f))))))


(definition public (save-mouse-client)
  (let ((client (view-editor-client (mouse-view))))
    (if (not client)
        (bell)
      (let ((editor (get-view-editor client)))
        (if (not editor)
            (bell)
          (with-cursor :wait
            (lambda ()
              (save~ editor))))))))


;;;
;;;; Safety
;;;


(definition public (designer-error . rest)
  (signal (new Designer-Error message: (apply format rest))))

(definition public (with-safe-design thunk)
  (with-catched-exception
    (lambda (obj)
      (and (object? obj)
           (is? obj Designer-Error)))
    thunk)))
