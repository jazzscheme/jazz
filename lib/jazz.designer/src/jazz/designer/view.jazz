;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Designer View
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module jazz.designer.view jazz


(import (jazz.designer)
        (jazz.locale)
        (jazz.ui.view))


;;;
;;;; Component
;;;


(definition package (request-component-presentation class brothers (initial-value: initial-value {}) (validator: validator {}))
  (if (get-name-prohibited?~ class)
      {}
    (let* ((name-mandatory? (get-name-mandatory?~ class))
           (name-unicity? (get-name-unicity?~ class))
           (unicity-domain (essay name-unicity? (remove "{}" (map get-presentation-property~ brothers) test: equal?)))
           (pres (localize (get-class-presentation~ class)))
           (presentation (request-string title: (new Locales english: (format "Enter {a} Name" pres) french: "Entrez le nom") prefix: "Name:" initial-value: initial-value accepts-empty?: (not name-mandatory?) unicity-domain: unicity-domain validator: validator)))
      presentation)))


(definition package (component-addable-classes component parent)
  (let ((parent-classes (essay parent (get-addable-classes~ parent)))
        (classes (get-addable-classes~ component))
        (model (class-of component)))
    (when (and parent-classes
               (memq? model parent-classes)
               (not (memq? model classes)))
      (set! classes (cons model (cons {} classes))))
    classes))


;;;
;;;; Safety
;;;


(definition public (with-safe-design thunk)
  (with-catched-exception
    (lambda (obj)
      (and (object? obj)
           (is? obj Designer-Error)))
    thunk)))
