;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Deterministic Profiler
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module jazz.detprof jazz


(export (jazz.detprof.syntax (phase syntax)))
(import (jazz.detprof.syntax (phase syntax))
        (jazz.jml)
        (jazz.syntax (phase syntax))
        (profiler))


;;;
;;;; Advice
;;;


(definition public (profiling-advice profile (time?: time? #f))
  (lambda (field locator original set)
    (let ((original (original)))
      (when (procedure? original)
        (set (lambda rest
               (define (call-original)
                 (with-profiling profile
                   (lambda ()
                     (apply original rest))))
               
               (if time?
                   (time (call-original))
                 (call-original))))))))


(definition public (profile-advice field locator original set)
  (let ((original (original)))
    (when (procedure? original)
      (set (lambda rest
             (profile-code original
               (lambda ()
                 (apply original rest))))))))


;;;
;;;; Profile
;;;


(define time-spent-in-children
  (make-parameter 0))


(definition public (profile-code original proc)
  (let ((profile (active-profile))
        (original-call (and original (list original (locat->container/line/col (procedure-locat original))))))
    (define (profile-stack)
      (continuation-capture
        (lambda (cont)
          (if original-call
              (cons original-call (get-continuation-stack-for-profile cont
                                                                      (- (profile-depth profile) 1)
                                                                      (profile-profiler profile)))
            (get-continuation-stack-for-profile cont
                                                (profile-depth profile)
                                                (profile-profiler profile))))))
    
    (if profile
        (let ((outer-start-time (profiler-real-time)))
          (let ((result (parameterize ((time-spent-in-children 0))
                          (let ((inner-start-time (profiler-real-time)))
                            (let ((result (proc)))
                              (let ((total-elapsed-time (- (profiler-real-time) inner-start-time (get-inner-overhead))))
                                (profile-register-call profile (profile-stack) (- total-elapsed-time (time-spent-in-children))))
                              result)))))
            (let ((total-elapsed-time (- (profiler-real-time) outer-start-time (get-outer-overhead))))
              (time-spent-in-children (+ (time-spent-in-children) total-elapsed-time)))
            result))
      (proc))))


;;;
;;;; Overhead
;;;


(define outer-overhead
  #f)

(define inner-overhead
  #f)


(define (get-outer-overhead)
  (when (not outer-overhead)
    (setup-overhead))
  outer-overhead)

(define (get-inner-overhead)
  (when (not inner-overhead)
    (setup-overhead))
  inner-overhead)


(define (setup-overhead)
  (define (estimate-outer-overhead)
    (let ((outer-start-time (profiler-real-time)))
      (time-spent-in-children (+ (time-spent-in-children) 1))
      (unroll 99
              (profiler-real-time)
              (time-spent-in-children (+ (time-spent-in-children) 1)))
      (fxfloor/ (- (profiler-real-time) outer-start-time) 100)))
  
  (define (estimate-inner-overhead)
    (let ((inner-start-time (profiler-real-time)))
      (apply test-proc '(1 2 3))
      (unroll 99
              (profiler-real-time)
              (apply test-proc '(1 2 3)))
      (fxfloor/ (- (profiler-real-time) inner-start-time) 100)))
  
  (parameterize ((time-spent-in-children 0))
    (set! outer-overhead (estimate-outer-overhead))
    (set! inner-overhead (estimate-inner-overhead))))


(define (test-proc . rest)
  rest)


;;;
;;;; JML
;;;


(definition public (profile->jml profile)
  (map (lambda (profile)
         (bind (name count . duration) profile
           (new JML-Element #f 'profile properties: (list 'name name 'count count 'duration duration))))
       (sort > (table->list profile) key: cddr)))


;;;
;;;; Detprof
;;;


(definition public detprof
  (make-profiler 'detprof #f #f 1))


(profiler-ignore-module detprof 'jazz.detprof)


(register-service 'detprof (lambda () detprof)))
