;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Component Catalogs
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.doc.catalog.Component-Catalog jazz


(import (jazz.catalog)
        (jazz.component))


(class Component-Catalog extends Catalog
  

  (slot client            getter generate)
  (slot definitions-index getter generate)
  (slot references-index  getter generate)


  (method override (initialize self name client)
    (nextmethod self name)
    (set! self.client client)
    (set! self.definitions-index (make-table test: eq?))
    (set! self.references-index (make-table test: eq?))
    (update-catalog-indexes self))


  ;;;
  ;;;; Access
  ;;;
  
  
  (method public (get-statistics self)
    (let ((d (table-length definitions-index))
          (r (table-length references-index)))
      (format "{a} definition{a}, {a} reference{a}"
              d (format-plural d)
              r (format-plural r))))


  ;;;
  ;;;; Update
  ;;;

  
  (method (update-catalog-indexes self)
    (set-catalog client self)
    (for-each-descendant client
      (lambda (child level)
        (let ((name (get-name child)))
          (when name
            (table-add definitions-index name child))))))


  ;;;
  ;;;; Definitions
  ;;;
  
  
  (method override (get-definitions self name)
    (table-ref definitions-index name #f))
  
  
  (method override (get-references self name)
    (table-ref references-index name #f))))
