;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Definition Docs
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.doc.doc.Definition-Doc jazz


(import (jazz.designer)
        (jazz.doc)
        (jazz.jml))


(class Definition-Doc extends Element-Doc
  
  
  (property parameters initialize '() accessors generate)
  
  
  ;;;
  ;;;; Catalog
  ;;;
  
  
  @convert
  (method (print-catalog level output)
    (format output "{%}{_ :v}~{{s} {s} {s} {s}}"
            (* level 2)
            (category-name (class-of self))
            name parameters doc))


  ;;;
  ;;;; Presentation
  ;;;
  
  
  (method override (present)
    (format "{a}" (cons name parameters)))


  ;;;
  ;;;; Text
  ;;;
  
  
  (method override (present-text)
    (if (not parameters)
        `(<span> class: "definition" ,(get-effective-title))
      `(<pre>
         "("
         (<span> class: "definition" ,(get-effective-title))
         (<span> class: "parameter" ,(present-parameters parameters))
         ")"))
    @wait
    (when description
      (bind (tag . paragraphs) (->jml~ (form->node description))
        `(<span>
           (<p> ,(->string (cons name parameters)))
           (<p>)
           ,@paragraphs
           ,@(if (null? examples)
                 #f
               `((<p>)
                 "Examples"
                 ,@(map (lambda (example)
                          (bind (tag . paragraphs) (->jml~ (form->node example))
                            `(<node> ,@paragraphs)))
                        (get-children~ examples))))
           ,@(if (not package-name)
                 #f
               `((<p>)
                 (<p> "Defined In: " (<a> ,(->string package-name)))))))))
  
  
  ;;;
  ;;;; Descriptor
  ;;;
  
  
  (method meta override (get-class-descriptor)
    (new Definition-Doc-Descriptor)))


;;;
;;;; Design
;;;


(submodule design


(import (jazz.designer))


(class Definition-Doc-Descriptor extends Element-Doc-Descriptor
  
  
  (form
    (<install>
      (<properties~>
        (<Property-Descriptor> name: parameters title: "Parameters"
          (<String-Domain>     name: domain))))))))
