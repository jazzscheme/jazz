;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Jazz Documentation Entry
;;;
;;;  Filename: Doc.jazz
;;;  Copyright: Guillaume Cartier
;;;


(module protected jazz.doc.doc.Doc jazz


(import (jazz.component)
        (jazz.catalog)
        (jazz.markup))


(class Doc extends Component
  
  
  (property title       initialize #f accessors generate)
  (property description initialize #f accessors generate)
  
  
  (method override (install-child self form creator creator-branch restore-form)
    (case (get-model form)
      ((description) (set-description self form))
      (else (nextmethod self form creator creator-branch restore-form))))


  ;;;
  ;;;; Access
  ;;;
  
  
  (method public virtual (get-catalog self)
    (get-catalog parent))
  
  
  (method public virtual (set-catalog self cat)
    )


  ;;;
  ;;;; Title
  ;;;
  
  
  (method public (get-effective-title self)
    (or title (->string name)))


  ;;;
  ;;;; Catalog
  ;;;
  
  
  (method public virtual (update-indexes self definitions-index references-index)
    (when (not-null? name)
      (table-add definitions-index name self)))
  
  
  (method public virtual (print-catalog self level output)
    (format output "{%}{_ :v}~{{s} {s} {s}}"
            (* level 2)
            (category-name (class-of self))
            name description))


  ;;;
  ;;;; Documentation
  ;;;
  
  
  (method public (get-documentation self symbol)
    (let ((catalog (get-catalog self)))
      (find-if (lambda (doc)
                 (eq? (get-parent doc) self))
               (get-definitions catalog symbol))))


  ;;;
  ;;;; Presentation
  ;;;
  
  
  (method public virtual (present self)
    description)
  
  
  (method public virtual (present-text self)
    (when description
      (bind (tag . paragraphs) (->markup (form->node description))
        `(<span>
           ,@(if (null? paragraphs)
                 '()
               paragraphs)))))
  
  
  (method protected (present-parameters self parameters)
    (define (present-parameter parameter)
      (if (symbol? parameter)
          (->string parameter)
        (format "{a} {a}" (car parameter) (cadr parameter))))
    
    (cond ((null? parameters)
           "")
          ((string? parameters)
           parameters)
          (else
           (let ((positional (getf parameters positional: not-found: '()))
                 (optional (getf parameters optional: not-found: '()))
                 (named (getf parameters named: not-found: '()))
                 (rest (getf parameters rest: not-found: #f)))
             (let ((all
                     (append (map (lambda (parameter)
                                    (present-parameter parameter))
                                  positional)
                             (map (lambda (parameter)
                                    (format "[{a}]" (present-parameter parameter)))
                                  optional)
                             (map (lambda (parameter)
                                    (format "~{{a}~}" (present-parameter parameter)))
                                  named)
                             (if rest
                                 (list (format ". {a}" (present-parameter rest)))
                               '()))))
               (if (null? all)
                   ""
                 (join all " ")))))))
  
  
  (method protected (present-result-type self result-type)
    (if result-type
        `(" "
          (<span> class: "parameter" ,(->string result-type)))
      '()))


  ;;;
  ;;;; HTML
  ;;;
  
  
  (constant Red-Ball
    "images/red-ball.gif")
  
  
  ;;;
  ;;;; Descriptor
  ;;;
  
  
  (method meta override (get-class-descriptor self (context: context #f))
    (new jazz.doc.descriptors:Doc-Descriptor))))
