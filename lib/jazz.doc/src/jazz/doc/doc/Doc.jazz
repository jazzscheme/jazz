;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Jazz Documentation Entry
;;;
;;;  Filename: Doc.jazz
;;;  Copyright: Guillaume Cartier
;;;


(module protected jazz.doc.doc.Doc jazz


(import (jazz.designer)
        (jazz.doc)
        (jazz.jml)
        (jazz.library))


(class Doc extends Component
  
  
  (property title       initialize #f accessors generate)
  (property description initialize #f accessors generate)
  
  
  (method override (install-child form creator creator-branch restore-form)
    (case (get-model~ form)
      ((description) (set-description form))
      (else (nextmethod form creator creator-branch restore-form))))


  ;;;
  ;;;; Access
  ;;;
  
  
  (method public virtual (get-catalog)
    (get-catalog~ parent))
  
  
  (method public virtual (set-catalog cat)
    )


  ;;;
  ;;;; Title
  ;;;
  
  
  (method public (get-effective-title)
    (or title (->string name)))


  ;;;
  ;;;; Catalog
  ;;;
  
  
  (method public virtual (update-indexes definitions-index references-index)
    (when (not-null? name)
      (table-add definitions-index name self)))
  
  
  (method public virtual (print-catalog level output)
    (format output "{%}{_ :v}~{{s} {s} {s}}"
            (* level 2)
            (category-name (class-of self))
            name description))


  ;;;
  ;;;; Documentation
  ;;;
  
  
  (method public (get-documentation symbol)
    (let ((catalog (get-catalog)))
      (find-if (lambda (doc)
                 (eq? (get-parent~ doc) self))
               (get-definitions~ catalog symbol))))


  ;;;
  ;;;; Presentation
  ;;;
  
  
  (method public virtual (present)
    description)
  
  
  (method public virtual (present-text)
    (when description
      (bind (tag . paragraphs) (->jml~ (form->node description))
        `(<span>
           ,@(if (null? paragraphs)
                 '()
               paragraphs)))))
  
  
  (method protected (present-parameters parameters)
    (define (present-parameter parameter)
      (if (symbol? parameter)
          (->string parameter)
        (format "{a} {a}" (car parameter) (cadr parameter))))
    
    (cond ((null? parameters)
           "")
          ((string? parameters)
           parameters)
          (else
           (let ((positional (getf parameters positional: not-found: '()))
                 (optional (getf parameters optional: not-found: '()))
                 (named (getf parameters named: not-found: '()))
                 (rest (getf parameters rest: not-found: #f)))
             (let ((all
                     (append (map (lambda (parameter)
                                    (present-parameter parameter))
                                  positional)
                             (map (lambda (parameter)
                                    (format "[{a}]" (present-parameter parameter)))
                                  optional)
                             (map (lambda (parameter)
                                    (format "~{{a}~}" (present-parameter parameter)))
                                  named)
                             (if rest
                                 (list (format ". {a}" (present-parameter rest)))
                               '()))))
               (if (null? all)
                   ""
                 (join all " ")))))))
  
  
  (method protected (present-result-type result-type)
    (if result-type
        `(" "
          (<span> class: "parameter" ,(->string result-type)))
      '()))


  ;;;
  ;;;; HTML
  ;;;
  
  
  (constant Red-Ball
    "images/red-ball.gif")
  
  
  ;;;
  ;;;; Descriptor
  ;;;
  
  
  (method meta override (get-class-descriptor (context: context #f))
    (new Doc-Descriptor)))


;;;
;;;; Design
;;;


(submodule design


(import (jazz.designer)
        (jazz.ui))


(class Doc-Descriptor extends Component-Descriptor
  
  
  (form
    (<install>
      (<properties~>
        (<Property-Descriptor> name: title
          (<Localized-Domain>  name: domain))
        (<Property-Descriptor> name: description
          (<Value-Domain>      name: domain)))))
  
  
  (method override (component-get-categorized-addable-classes component)
    (list
      (list
        (reference Section-Doc))
      (list
        (reference Concept-Doc))
      (list
        (reference Package-Doc)
        (reference Class-Doc)
        (reference Interface-Doc))
      (list
        (reference Constant-Doc)
        (reference Syntax-Doc)
        (reference Method-Doc)))))))
