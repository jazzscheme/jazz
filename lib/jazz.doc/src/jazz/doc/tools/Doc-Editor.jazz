;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Documentation Editor
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.doc.tools.Doc-Editor jazz


(import (jazz.designer.ui)
        (jazz.doc)
        (jazz.jml)
        (jazz.library)
        (jazz.ui)
        (jazz.ui.view))


(class Doc-Editor extends Component-Editor


  (property entry initialize #f accessors explicit)
  
  
  (slot type          initialize #f)
  (slot _location     initialize #f)
  (slot expression    initialize #f)
  (slot text-object   initialize #f)
  (slot text-location initialize #f)
  
  
  (form
    (<install>                                                 title: "Documentation Editor" size: {Dimension 650 400} layout-type: border layout-insets: {Rect 2 0 2 2}
      (<Layout-View>                  name: toolbar            size: {Dimension 300 33} location: north layout-type: flow layout-insets: {Rect 0 6 0 0}
        (<Push-Tool>                  name: save               size: {Dimension 22 22} tooltip?: #t tooltip-text: "Save" resource: {Image-Resource "Save"} portfolio: :images action-handler: {Event-Handler :form on-save-doc})
        @wait
        (<Separator>)
        @wait
        (<Push-Tool>                  name: reload             size: {Dimension 22 22} tooltip?: #t tooltip-text: "Reload" resource: {Image-Resource "Refresh"} portfolio: :images action-handler: {Event-Handler :form on-reload-doc})
        @wait
        (<Separator>                                           size: {Dimension 32 0})
        @wait
        (<Push-Tool>                  name: build              size: {Dimension 22 22} tooltip?: #t tooltip-text: "Build" resource: {Image-Resource "Build"} portfolio: :images action-handler: {Event-Handler :form on-build-doc})
        (<Separator>                                           size: {Dimension 32 0})
        (<Push-Tool>                  name: edit               size: {Dimension 22 22} location: tail tooltip?: #t tooltip-text: "Edit" resource: {Image-Resource "Edit"} portfolio: :images action-handler: {Event-Handler :form on-edit-doc}))
      (<Splitter-View>                name: splitter           size: {Dimension 650 367} location: center orientation: horz mode: absolute division: 250 style: document
        (<Border-View>                name: descendants-border size: {Dimension 255 366} location: first border-type: edge style: entry
          (<Scroller-View>            name: scroller           style: document hscroll?: #t vscroll?: #t
            (<!>                      name: content            layout-type: fill
              (<Tree-Header>          name: header             style: document
                (<!>                  name: content
                  (<Descendants-Tree> name: descendants
                    (<!>              name: descendant         width: 183)))))))
        (<Layout-View>                name: card-contour       size: {Dimension 390 366} location: second layout-type: fill
          (<Border-View>              name: card-border        border-type: edge style: entry
            (<Properties-Card>        name: card))))))

  
  (method override (form-model form)
    (case (get-name~ form)
      ((descendants) Docs-Tree)
      (else (nextmethod form))))
  
  
  (method override (install rest)
    (nextmethod rest)
    (set-title~ (child~ (locate 'descendants) 'descendant) "Doc")
    (set-filter~ (get-tree~ (locate 'card)) 'standard)
    (set-editor~ (locate 'descendants) self)
    (set-editor~ (locate 'card) self))

  
  (method override (focus-document)
    (acquire-focus~ (child~ (locate 'descendants) 'descendant)))

  
  ;;;
  ;;;; Access
  ;;;
  
  
  (method public (get-tree)
    (locate '(descendants tree)))
  
  
  ;;;
  ;;;; Host
  ;;;
  
  
  (method meta override (host-icon)
    {Image-Resource "Doc"})

  
  (method meta override (host-title)
    "Documentation Editor")
  
  
  (method meta override (host-position)
    {Point 52 59})
  
  
  (method meta override (host-size)
    {Dimension 800 500})
  
  
  (method override (host-workspaces)
    '(home))
  
  
  ;;;
  ;;;; Controller
  ;;;


  @convert
  (method override (new-document-controller)
    (new Doc-Editor-Controller self))
  
  
  @convert
  (class Doc-Editor-Controller extends Component-Editor-Controller
    
    
    (method override (name-status)
      (editor-title~ document)))

  
  ;;;
  ;;;; Events
  ;;;


  (method (resize-center dh dv)
    (size-figure~ (locate 'descendants-border) 0 dv)
    (size-figure~ (locate 'card-contour) dh dv))
  
  
  (method (on-save-doc evt)
    (with-cursor :wait
      (lambda ()
        (parameterize ((printing-doc? #t))
          (save)))))
  
  
  @w
  (method (on-reload-doc evt)
    (let ((appl (get-application)))
      (let ((skins (load-skins~ appl)))
        (set-skins-designer~ appl skins)
        (set-skin (child~ skins (get-active~ skins)))
        (skin-update)
        (redraw-window~ (get-toplevel)))))
  
  
  (method (on-build-doc evt)
    (if (null? client)
        (bell)
      (build-doc)))
  
  
  (method (build-doc)
    (unimplemented)
    @w (
    (define JazzWebsite-Site
      {File Jazz "lib" "jazz.website" "site" "JazzWebsite.jml"})
    
    (define JazzWebsite-Content
      {Directory Jazz "lib" "jazz.website" "content"})
    
    (define (render-jazzwebsite-page page)
      (let* ((content JazzWebsite-Content)
             (file (new-file~ content (format "{a}.htm" (get-property~ page 'path))))
             (preferences (new JML-Preferences))
             (renderer (new XHTML-Renderer preferences))
             (html (first-child~ page)))
        ;; why does using UTF-8 char-encoding not work with accents in the generated HTML page
        (call-with-output-file (path-settings file char-encoding: 'ISO-8859-1)
          (lambda (output)
            (render~ renderer html output)))))
    
    (user-feedback "Generating...")
    (reload-documentation~ (get-application))
    (let ((transformation (new JazzWebsite-Transformation))
          (projects (list (get-client~ (find-active-catalog~ (get-documentation-cataloguer~ (get-application)) 'jazz)))))
      (let ((title "Jazz")
            (content (standalone-manual-output~ transformation projects)))
        (let ((page `(<page> path: "test"
                       (<html>
                         (<head>
                           (<link> href: "css/master.css" rel: "stylesheet" type: "text/css")
                           (<title> ,title))
                         (<body>
                           (<div> id: "page"
                             (<h1> id: "title" "JazzScheme")
                             (<div> id: "content"
                               ,@content
                               (<div> id: "footer"
                                 (<p> "Copyright &copy; 1996-2015 Guillaume Cartier")))))))))
          (render-jazzwebsite-page (parse-jml (transform-jml~ (new DocToHTML-Transformation) (parse-jml page))))
          (user-message "Done"))))))
  
  
  (method (on-edit-doc evt)
    (edit-form))
  
  
  ;;;
  ;;;; Entry
  ;;;


  (method public (get-entry)
    entry)

 
  (method public (set-entry info)
    (set! entry info)
    (bind (location object text text-location) info
      (setup location object text text-location)))
  
  
  (method (setup loc object text text-loc)
    (set! _location loc)
    (set! expression object)
    (set! text-object text)
    (set! text-location text-loc))
  
  
  ;;;
  ;;;; Presentation
  ;;;
  
  
  (method override (editor-title)
    (let ((reference (get-reference)))
      (if (null? reference)
          "Doc Editor"
        (format "Doc Editor - {a}" (get-base~ (get-origin~ (get-form~ reference)))))))))
