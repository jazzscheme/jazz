;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Doc to HTML Transformation
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.doc.transformation.DocToHTML-Transformation jazz


(import (jazz.doc)
        (jazz.markup))


(class DocToHTML-Transformation extends Doc-Transformation
  
  
  ;;;
  ;;;; Code
  ;;;
  
  
  (pattern (parameter self node)
    (let ((text (get-child-text node)))
      `(<i> ,text)))
  
  
  (pattern (code self node)
    (let ((text (get-child-text node)))
      `(<code> ,text)))
  
  
  (pattern (blue self node)
    `(<span> class: "blue" ,@(children->markup node)))
  
  (pattern (green self node)
    `(<span> class: "green" ,@(children->markup node)))
  
  (pattern (red self node)
    `(<span> class: "red" ,@(children->markup node)))
  
  (pattern (purple self node)
    `(<span> class: "purple" ,@(children->markup node)))
  
  (pattern (ochre self node)
    `(<span> class: "ochre" ,@(children->markup node)))
  
  (pattern (orange self node)
    `(<span> class: "orange" ,@(children->markup node)))
  
  (pattern (gray self node)
    `(<span> class: "gray" ,@(children->markup node)))
  
  
  ;;;
  ;;;; Others
  ;;;
  
  
  (pattern (example self node)
    `(<pre> class: "code"
       ,@(loop (for child in (get-children node) remainder r)
               (collect
                 (if (not (eq? (get-tag child) 'line))
                     (->markup child)
                   (if (not-null? r)
                       `(<span> ,@(children->markup child) "\n")
                     `(<span> ,@(children->markup child))))))))
  
  
  (pattern (line self node)
    (error "Usage of obsolete tag: <line>"))
  
  
  (pattern (reference self node)
    (let* ((href (get-property node 'href))
           (name (format "manual.htm#{a}" href))
           (child (first-child node))
           (text (if child (get-text child) (->string href))))
      `(<a> href: ,name ,text)))
  
  
  (pattern (header self node)
    (let ((text (get-child-text node)))
      `(<i> ,text)))
  
  
  (pattern (node self node)
    (define (expand node)
      (if (and (is? node Markup-Element)
               (eq? (get-tag node) 'node))
          `(<ul> ,@(map expand (get-children node)))
        `(<li> ,(->markup node))))
    (expand node))
  
  
  (pattern (ordered self node)
    (define (expand node)
      (if (and (is? node Markup-Element)
               (eq? (get-tag node) 'ordered))
          `(<ol> ,@(map expand (get-children node)))
        `(<li> ,(->markup node))))
    (expand node))
  
  
  (pattern (definition self node)
    (let ((title (or (get-property node 'title) (->string (get-property node 'name)))))
      `(<div>
         (<p> class: "definition" (<b> ,title))
         ,@(children->markup node))))
  
  
  (pattern (properties self node)
    `(<table> class: "properties"
       ,@(map (lambda (prop)
                (bind (property value) (get-children prop)
                  `(<tr>
                     (<td> ,(get-text property))
                     (<td> ,(if (is? value Markup-Text) (get-text value) value)))))
              (get-children node))))
  
  
  (pattern (terminology self node)
    (let ((term (get-property node 'term #f))
          (text (get-property node 'text #f)))
      `(<table> class: "terminology"
         ,@(if term `((<th> ,term)) '())
         ,@(if text `((<th> ,text)) '())
         ,@(map (lambda (definition)
                  (bind (term text) (get-children definition)
                    `(<tr>
                       (<td> ,(get-text term))
                       (<td> ,(if (is? text Markup-Text) (get-text text) text)))))
                (get-children node)))))
  
  
  (pattern (styled-table self node)
    (let ((style (format "border-style: {a}; border-width: {a}; border-color: {a};" 'solid 1 'red)))
      `(<table> style: ,style ,@(properties->markup node)
         ,@(children->markup node))))))
