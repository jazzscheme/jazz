;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Doc to Text Transformation
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.doc.transformation.DocToText-Transformation jazz


(import (jazz.doc)
        (jazz.markup))


(class DocToText-Transformation extends Doc-Transformation
  
  
  ;;;
  ;;;; Code
  ;;;
  
  
  (pattern (p self node)
    `(<paragraph> ,@(children->markup node)))
  
  
  (pattern (blue self node)
    `(<text> color: Blue ,@(children->markup node)))
  
  (pattern (green self node)
    `(<text> color: Green ,@(children->markup node)))
  
  (pattern (red self node)
    `(<text> color: Red ,@(children->markup node)))
  
  (pattern (purple self node)
    `(<text> color: Purple ,@(children->markup node)))
  
  (pattern (ochre self node)
    `(<text> color: Ochre ,@(children->markup node)))
  
  (pattern (orange self node)
    `(<text> color: Orange ,@(children->markup node)))
  
  (pattern (gray self node)
    `(<text> color: Gray ,@(children->markup node)))
  
  
  (pattern (parameter self node)
    (let ((text (get-child-text node)))
      `(<text> color: Dark-Red ,text)))
  
  
  (pattern (code self node)
    (let ((text (get-child-text node)))
      `(<text> color: Dark-Red ,text)))
  
  
  ;;;
  ;;;; Others
  ;;;
  
  
  (pattern (example self node)
    `(<span>
       ,@(map (lambda (child)
                (if (not (eq? (get-tag child) 'line))
                    (->markup child)
                  `(<span> ,@(children->markup child))))
              (get-children node))))
  
  
  (pattern (line self node)
    (error "Usage of obsolete tag: <line>"))
  
  
  (pattern (link self node)
    (let ((text (get-child-text node)))
      `(<text> color: Dark-Blue ,text)))
  
  
  (pattern (node self node)
    `(<paragraph> bulleted?: #t
       ,@(children->markup node)))
  
  
  (pattern (definition self node)
    `(<paragraph>
       ,@(children->markup node)))
  
  
  (pattern (properties self node)
    `(<styled-table>
       ,@(map (lambda (prop)
                (bind (property value) (get-children prop)
                  `(<tr>
                     (<td> ,(get-text property))
                     (<td> ,(get-text value)))))
              (get-children node))))
  
  
  (pattern (styled-table self node)
    (let ((style (format "border-style: {a}; border-width: {a}; border-color: {a};" 'solid 1 'red)))
      `(<table> style: ,style ,@(properties->markup node)
         ,@(children->markup node))))))
