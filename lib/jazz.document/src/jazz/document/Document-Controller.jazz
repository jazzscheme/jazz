;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Document Controller
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.document.Document-Controller jazz


(import (jazz.application)
        (jazz.component)
        (jazz.document)
        (jazz.io)
        (jazz.locale)
        (jazz.preferences)
        (jazz.time)
        (jazz.ui)
        (jazz.ui.dialog)
        (jazz.view))


(class Document-Controller extends Object
  

  (slot document       initialize #f)
  (slot newname        initialize #f accessors generate)
  (slot moniker        initialize #f)
  (slot tool?          initialize #f)
  (slot console?       initialize #f)
  (slot modified?      initialize #f)
  (slot read-only?     initialize #f getter generate)
  (slot moniker-digest initialize #f getter generate)
  (slot moniker-time   initialize #f getter generate)


  (method override (initialize self document (tool?: tool? #f) (console?: console? #f))
    (nextmethod self)
    (set! self.document document)
    (set! self.tool? tool?)
    (set! self.console? console?))
  
  
  ;;;
  ;;;; Host
  ;;;
  
  
  (method public (install-in-host self host)
    (install-container self)
    (position-host self host)
    (update-status self)
    (when (get-visible? host)
      (focus-document document)))
  
  
  (method protected virtual (install-container self)
    (when (install-scroller? document)
      (install-scroller self)))
  
  
  (method protected (install-scroller self)
    (let* ((host (get-host document))
           (scroller (new Scroller-View parent: host vscroll?: #t hscroll?: #t)))
      (set-parent document (get-content scroller))
      (set-client scroller document)
      (set-content host scroller)))

  
  (method (position-host self host)
    (when (is? host Internal-Frame-Host)
      (let* ((parent-size (get-size (get-parent host)))
             (width (get-default-width (current-preferences 'documents)))
             (size (new Dimension width (- (get-height parent-size) 100))))
        (set-size host size))))


  ;;;
  ;;;; Events
  ;;;
    
  
  (method public virtual (confirm-close self)
    (when (get-modified? self)
      (let ((code (message-box (format "Save changes to {a}?" (name-status self))
                               type: 'confirmation)))
        (case code
          ((yes) (save-all self))
          ((no))
          ((cancel) (signal-cancel))))))
  
  
  (method public (close-on-close-all? self)
    (not (get-tool? self)))


  ;;;
  ;;;; Input/Output
  ;;;
  
  
  (method (effective-newname self)
    (or newname (localize "New")))
  
  
  (method public (get-moniker self)
    moniker)


  (method public (set-moniker self mnk)
    (when #t @parameterized-fix-me (/= mnk moniker)
      (set! moniker mnk)
      (load-content document moniker)))
  
  
  (method public (change-moniker self mnk)
    (set! moniker mnk))
  
  
  (method public virtual (save self)
    (if (not moniker)
        (save-as self)
      (when (write-allowed? self)
        (save-content self moniker))))
  
  
  (method public virtual (save-as self)
    (let* ((extension (default-extension document))
           (extensions (extensions document))
           (moniker (choose-new-file initial-filename: (if (not moniker) (effective-newname self) (get-name moniker)) default-extension: extension extensions: extensions)))
      (when (and (exists? moniker) (jazz.io:read-only? moniker))
        (set-read/write moniker))
      (save-to self moniker)))
  
  
  (method public (save-to self mnk)
    (save-content self mnk)
    (set! moniker mnk)
    (update-status self))
  
  
  (method public (save-all self)
    (save self))
  
  
  (method package (save-content self moniker)
    (save-content document moniker))
  
  
  (method public (revert-saved self)
    (if (not moniker)
        (bell)
      (let ((code (message-box "Resert to saved and lose changes?"
                               type: 'confirmation)))
        (case code
          ((yes) (reload-moniker document moniker))
          ((no))
          ((cancel) (signal-cancel))))))
  
  
  (method public (compare-saved self)
    (if (not moniker)
        (bell)
      (compare-moniker document moniker)))


  ;;;
  ;;;; Modified State
  ;;;


  (method public virtual (get-modified? self)
    (if console?
        #f
      modified?))


  (method public virtual (set-modified? self state)
    (when (neq? state modified?)
      (set! modified? state)
      (update-status self)))


  ;;;
  ;;;; Document
  ;;;
  
  
  (method public virtual (dependent-document? self)
    #f)


  ;;;
  ;;;; Caption
  ;;;
  
  
  (method public (set-caption self title)
    (let ((host (get-host document)))
      (set-title host title)
      (when (get-visible? host)
        (if (and (is? host Internal-Frame-Host) (get-maximized? host))
            (when (front-view? host)
              (set-caption (current-toplevel) title))
          (invalidate-caption host)))))


  ;;;
  ;;;; Status
  ;;;


  (method public virtual (update-status self)
    (update-state self)
    (update-caption self))
  
  
  (method public virtual (update-caption self)
    (let ((host (get-host document)))
      (when (and (is? host Host-View) (eq? (get-guest host) document))
        (set-caption self (document-status self)))))
  
  
  (method public virtual (document-status self)
    (format "{a}{a}{a}{a}"
            (name-status self)
            (modified-status self)
            (directory-status self)
            (read/write-status self)))
  
  
  (method public virtual (name-status self)
    (if (not moniker)
        (effective-newname self)
      (if tool?
          (get-base moniker)
        (get-name moniker))))
    
  
  (method (modified-status self)
    (if (get-modified? self)
        " *"
      ""))
  
  
  (method (directory-status self)
    (if (or (not moniker) tool?)
        ""
      (let ((parent (get-parent moniker)))
        (if (not parent)
            ""
          (format " ~{{a}}" (present-location parent))))))

  
  (method (read/write-status self)
    (if (or (not moniker) tool?)
        ""
      (if read-only?
          " [Read-Only]"
        " [Read/Write]")))


  ;;;
  ;;;; State
  ;;;
  
  
  (method public (update-state self)
    (if (or (not moniker) (not (exists? moniker)))
        (set! read-only? #f)
      (set! read-only? (jazz.io:read-only? moniker))))
  
  
  (method public virtual (update-moniker-time self moniker)
    (set! moniker-digest (digest-file (parse moniker) 'SHA-1))
    (set! moniker-time (get-last-modification-time moniker)))
  
  
  (method public (verify-reload self (delay-event?: delay-event? #f) (propose-reload?: propose-reload? #t) (cancel-edition?: cancel-edition? #f))
    (define (propose)
      (propose-reload self propose-reload?: propose-reload? cancel-edition?: cancel-edition?))
    
    (when (needs-reload? self)
      (propose)
      @until-this-very-hard-to-debug-crash-is-solved
      (if delay-event?
          (delay-event propose)
        (propose))))
  
  
  (method public virtual (needs-reload? self)
    (and moniker moniker-time
         (exists? moniker)
         (/= (time->seconds (get-last-modification-time moniker)) (time->seconds moniker-time))
         (not (equal? (digest-file (parse moniker) 'SHA-1) moniker-digest))))

  
  (method meta public virtual (propose-multiple-reloads self)
    (message-box (format "Files have been modified. Do you want to reload them?")
                 title: "File Status"
                 type: 'question))
  
  
  (method public virtual (propose-reload self (propose-reload?: propose-reload? #t) (cancel-edition?: cancel-edition? #f))
    (let ((code (if (not propose-reload?)
                    'yes
                  (message-box (format "File {s} has been modified. Do you want to reload it?" (get-moniker self))
                               title: "File Status"
                               type: 'question))))
      (propose-reload-action self code cancel-edition?: cancel-edition?)))
  
  
  (method package virtual (propose-reload-action self code (cancel-edition?: cancel-edition? #f))
    (case code
      ((yes)
       (reload-moniker document moniker)
       (when cancel-edition?
         (signal-cancel)))
      ((no)
       (update-moniker-time self moniker)
       (update-status self))))
  

  ;;;
  ;;;; Read-Only
  ;;;
  
  
  (method public (write-allowed? self)
    (not (get-read-only? self)))
  
  
  (method (in-write-allowed? self moniker)
    (let ((code (ensure-read/write moniker)))
      (case code
        ((read/write) (update-status self) #t)
        ((read-only) #f)
        ((no-action) #t))))
  
  
  (method (out-write-allowed? self moniker)
    (let ((code (message-box
                  (format "File {s} is read-only. Overwrite read-only status?" (get-name moniker))
                  title: "File Status"
                  type: 'confirmation)))
      (case code
        ((yes)
         (set-read/write moniker)
         (update-status self)
         #t)
        ((no))
        ((cancel)
         (signal-cancel)))))

  
  ;;;
  ;;;; Tool
  ;;;


  (method public (get-tool? self)
    tool?)


  (method public (set-tool? self flag)
    (when (neq? flag tool?)
      (set! tool? flag)
      (tool-update document tool?)))


  (method public (get-console? self)
    console?)


  (method public (set-console? self flag)
    (when (neq? flag console?)
      (set! console? flag)
      (console-update document console?)))
  
  
  ;;;
  ;;;; Expression
  ;;;
  
  
  (method public virtual (select-next self search-context . rest)
    )
  
  
  (method public virtual (select-previous self search-context . rest)
    )


  (method public virtual (select-expr self search-context)
    )


  (method public virtual (select-expr-backward self search-context)
    )))
