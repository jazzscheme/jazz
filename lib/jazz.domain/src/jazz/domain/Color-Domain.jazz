;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Color Domain
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.domain.Color-Domain jazz


(import (jazz.domain)
        (jazz.geometry)
        (jazz.graphic)
        (jazz.jml)
        (jazz.library))


(class Color-Domain extends Literal-Domain
  
  
  (form
    (<install> is: {Class-Reference Color}))
  
  
  ;;;
  ;;;; Presentation
  ;;;
  
  
  (method override (present-value color)
    (present~ color))
  
  
  ;;;
  ;;;; Drawing
  ;;;
  
  
  (method override (draw-data surface context value column row data width height)
    (when value
      (draw-at~ column surface context row data 15 0 width height))
    (let* ((outer {Rect 2 3 13 14})
           (inner (inflate-rect outer -1 -1)))
      (frame-rect~ surface outer {Color Black})
      (if value
          (fill-rect~ surface inner value)
        (set-color~ surface {Color Black})
        (set-line-width~ surface 1)
        (line~ surface (- (get-right~ outer) 1) (+ (get-top~ outer) 1) (+ (get-left~ outer) 1) (- (get-bottom~ outer) 1)))))
  
  
  ;;;
  ;;;; Entry
  ;;;
  
  
  (method override (setup-entry view client)
    (new jazz.designer.ui:Color-Entry parent: view size: (get-size~ view) domain: self))))
