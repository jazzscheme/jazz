;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Domains
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.domain.Domain jazz


(import (jazz.component)
        (jazz.domain)
        (jazz.locale)
        (jazz.reference)
        (jazz.tree))


(class Domain extends Component
  
  
  (property nullable?                   initialize #f                  accessors generate)
  (property nil-presentation            initialize {Locales all: "{}"} setter generate getter explicit)
  (property value->presentation-handler initialize #f                  accessors generate)
  (property presentation->value-handler initialize #f                  accessors generate)
  
  
  (slot data-violations initialize '())
  
  
  ;;;
  ;;;; Validation
  ;;;
  

  (method public (valid? self text)
    (null? (collect-violations self text)))
  

  (method public (valid-presentation? self text)
    (boolean (presentation-violation self text)))
  
  
  (method public (valid-value? self value)
    (null? (collect-value-violations self value #f)))
  
  
  (method public (collect-violations self text (validation-context #f))
    (receive (value violation) (strict-parse self text)
      (if violation
          (list violation)
        (collect-value-violations self value validation-context))))
  
  
  (method public (collect-value-violations self value (validation-context #f))
    (set! data-violations '())
    (validate-value self value validation-context)
    (prog1 data-violations
      (set! data-violations '())))
  
  
  (method public (presentation-violation self text)
    (receive (value violation) (strict-parse self text)
      violation))
  
  
  (method package virtual (validate-value self value (validation-context #f))
    (and (not value)
         (or nullable?
             (add-violation self (localize {Locales english: "Value required" french: "Valeur requise"})))))
  
  
  (method package (add-violation self format-string . rest)
    (let ((violation (new Violation message: (apply format (cons format-string rest)))))
      (set! data-violations (cons violation data-violations))
      violation))
  
  
  ;;;
  ;;;; Multi-Domains
  ;;;
  
  
  (method public virtual (get-multi-domains self client)
    #f)
  
  
  ;;;
  ;;;; Presentation
  ;;; 
  
  
  (method public virtual (get-nil-presentation self)
    nil-presentation)
  
  
  (method public (present self value)
    (localize (cond ((not value)
                     (get-nil-presentation self))
                    ((not value->presentation-handler)
                     (present-value self value))
                    (else
                     ((reference-resolve value->presentation-handler) value)))))
  
  
  (method virtual (present-value self value)
    (error "{t} class does not define a present-value method" (category-name (class-of self))))
  
  
  ;;;
  ;;;; Properties
  ;;;
 
  
  (method virtual (gather-properties self)
    `((category-name ,@(category-name (class-of self)))
      (nullable? ,@nullable?)))
  
  
  ;;;
  ;;;; Parse
  ;;;
  

  (method virtual (parse-presentation self text)
    (error "{t} class does not define a parse-presentation method" (category-name (class-of self))))
  
  
  (method virtual (make-parse-error-message self exception)
    #f)
  
  
  (method public (parse self text)
    (receive (value violation) (parse-with self text #f (lambda (exception) #f))
      value))
  
  
  (method (parse-with self text <String> nullable-violation exception-catcher)
    (let ((value #f))
      (let ((violation (if (and (get-nil-presentation self)
                                (string=? text (localize (get-nil-presentation self))))
                           (and (not nullable?)
                                nullable-violation)
                         (with-exception-catcher
                           exception-catcher
                           (lambda ()
                             (set! value (if presentation->value-handler
                                             ((reference-resolve presentation->value-handler) text)
                                           (parse-presentation self text)))
                             #f)))))
        (values value violation))))
  
  
  (method (strict-parse self text)
    (parse-with self text
                (new Violation message: "This field is not nullable")
                (lambda (exception)
                  (new Violation message: (or (make-parse-error-message self exception)
                                              (and (is? exception Exception)
                                                   (get-message exception))
                                              (->string exception))))))
  
  
  ;;;
  ;;;; Drawing
  ;;;
  
  
  (method public virtual (draw-data self surface context value column row data width height)
    (draw-at column surface context row data 0 0 width height))
  
  
  ;;;
  ;;;; Entry
  ;;;
  
  
  (method public virtual (setup-entry self view client)
    (new jazz.designer.ui:Text-Entry parent: view size: (get-size view) domain: self)))


;;;
;;;; Integrity
;;;


@fix-creates-a-dependency-to-designer
(specific (validate-component (<Domain> domain) validation-context)
  (nextmethod domain validation-context)
  (when (and nullable? (not (get-nil-presentation domain)))
    (add-violation validation-context message: (format "Nil presentation must be set in a nullable domain")))))
