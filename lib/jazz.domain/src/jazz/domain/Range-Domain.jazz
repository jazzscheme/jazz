;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Range Domains
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.domain.Range-Domain jazz


(import (jazz.domain)
        (jazz.markup)
        (jazz.reference))


(class Range-Domain extends Literal-Domain
  
  
  (form
    (<install> is: {Class-Reference Range}))
  
  
  ;;;
  ;;;; Validation
  ;;;

  
  (method override (validate-value self value (validation-context #f))
    (or (nextmethod self value validation-context)
        (cond ((is-not? (get-start value) Cell)
               (add-violation self "Range start must be a Cell object"))
              ((is-not? (get-end value) Cell)
               (add-violation self "Range end must be a Cell object")))))
  
  
  ;;;
  ;;;; Presentation
  ;;;
  
  
  (method override (present-value self range)
    (let ((start (get-start range))
          (end (get-end range)))
      (format "{a}, {a}, {a}, {a}" (get-line start) (get-col start) (get-line end) (get-col end))))
  
  
  ;;;
  ;;;; Parse
  ;;;
  
  
  (method override (parse-presentation self text)
    (bind (start-line start-col end-line end-col) (read-composite-value text expected: 4)
      (assert (integer? start-line)
        (assert (integer? start-col)
          (assert (integer? end-line)
            (assert (integer? end-col)
              (new Range (new Cell start-line start-col) (new Cell end-line end-col))))))))))
