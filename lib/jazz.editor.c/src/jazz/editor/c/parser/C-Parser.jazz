;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; C Parser
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library protected jazz.editor.c.parser.C-Parser jazz


(import (jazz.catalog)
        (jazz.editor.c))


(class C-Parser extends File-Parser
  
  
  (method (parse file time)
    (new C-File-Entry catalog file time (parse-definitions file)))
  
  
  (method (parse-definitions file)
    (let ((lines (list->vector (load-lines~ file char-encoding: char-encoding char-encoding-errors: #f)))
          (fact (new List-Factory))
          (find-function (if (eq? (get-heuristic 'c-function) 'gambit)
                             find-gambit-function
                           find-open-brace-function)))
      (when (member? (get-extension~ file) '("c" "cpp"))
        (put~ fact (new C-Category-Entry (get-base~ file))))
      (loop (for n from 0 below (cardinality lines))
            (do
              (let* ((line (vector-ref lines n))
                     (item (or (find-define line n)
                               (find-include line n)
                               (find-function lines line n))))
                (when item (put~ fact item)))))
      (get-output~ fact)))
  

  ;;;
  ;;;; Define
  ;;;
  
  
  (constant define
    "#define")
  
  
  (method (find-define line n)
    (let ((len (string-length line))
          (col (skip-whitespace line)))
      (when (and (> len (+ col (string-length define)))
                 (string=? define (substring line col (+ col (string-length define)))))
        (let* ((start (+ col (string-length define)))
               (col (skip-whitespace line start: start)))
          (when (and (> col start) (< col len))
            (let* ((start col)
                   (col (skip (function (c) (or (c-constituent? c))) line start: start)))
              (when (and (> col start) (<= col len))
                (new C-Define-Entry (subseq line start col) n start n col))))))))
  

  ;;;
  ;;;; Include
  ;;;
  
  
  (constant include
    "#include")
  
  
  (method (find-include line n)
    (let ((len (string-length line))
          (col (skip-whitespace line)))
      (when (and (> len (+ col (string-length include)))
                 (string=? include (substring line col (+ col (string-length include)))))
        (let* ((start (+ col (string-length include)))
               (col (skip-whitespace line start: start)))
          (when (and (> col start) (< col len) (eqv? (element line col) #\double-quote))
            (let* ((start (+ col 1))
                   (col (skip (function (c) (or (c-constituent? c) (eqv? c #\period))) line start: start)))
              (when (and (> col start) (< col len) (eqv? (element line col) #\double-quote))
                (new C-Include-Entry (subseq line start col) n start n col))))))))
  

  ;;;
  ;;;; Open-Brace Heuristic
  ;;;
  
  
  (method (find-open-brace-function lines line n)
    (let ((len (string-length line)))
      (when (and (> len 0)
                 (eqv? (string-ref line 0) #\{))
        (continuation-capture
          (function (return)
            (loop (for i from (- n 1) downto 0)
                  (do
                    (let ((line (vector-ref lines i)))
                      (let ((end (skip c-constituent? line)))
                        (when (> end 0)
                          (continuation-return return
                            (new C-Export-Entry (subseq line 0 end) i 0 i end)))))))
            {})))))
  

  ;;;
  ;;;; Gambit Heuristic
  ;;;
  
  
  (constant gambit-function
    "___EXP_FUNC")
  
  
  (method (find-gambit-function lines line n)
    (let ((len (string-length line))
          (col (skip-whitespace line)))
      (when (and (> len (+ col (string-length gambit-function)))
                 (string=? gambit-function (substring line col (+ col (string-length gambit-function)))))
        (let* ((start (+ col (string-length gambit-function)))
               (col (skip (function (c) (not (eqv? c #\comma))) line start: start)))
          (when (and col (< col len))
            (let* ((start (skip-whitespace line start: (+ col 1)))
                   (end (skip c-constituent? line start: start)))
              (when (> end start)
                (new C-Export-Entry (subseq line start end) n start n end))))))))))
