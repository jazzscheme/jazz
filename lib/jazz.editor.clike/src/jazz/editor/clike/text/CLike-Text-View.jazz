;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; CLike Text View
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.editor.clike.text.CLike-Text-View jazz


(import (jazz.editor)
        (jazz.editor.clike))


(class CLike-Text-View extends Code-Text-View
  
  
  (method override (install self rest)
    (nextmethod self rest)
    (let ((pref (preferences self)))
      (add-style self 'Title            (get-title-style pref))
      (add-style self 'Definition       (get-definition-style pref))
      (add-style self 'Line-Comment     (get-line-comment-style pref))
      (add-style self 'Balanced-Comment (get-balanced-comment-style pref))
      (add-style self 'Keyword          (get-keyword-style pref))
      (add-style self 'Profile-Macro    (get-profile-macro-style pref))
      (add-style self 'Profile-Keyword  (get-profile-keyword-style pref))
      (add-style self 'Profile-Type     (get-profile-type-style pref))))
  
  
  (method override (new-syntax self)
    (new CLike-Syntax model))

  
  ;;;
  ;;;; Tabulation
  ;;;


  (method override (return-press self evt)
    (nextmethod self evt)
    (tabulate-return self))

  
  ;;;
  ;;;; Mouse Copy
  ;;;

  
  (method override (mouse-insert self copy)
    (let ((start (get-start self))
          (end (get-end self)))
      @implement-with-c-logic-ie-capitalized-variables
      (when (/= start (text-beginning))
        (let ((sc (get-char (previous-cell start))))
          (when (and (text-constituent? syntax (element copy 0)) (text-constituent? syntax sc) (not (memq? sc '(#\minus #\colon))))
            (set! copy (concatenate " " copy)))))
      @implement-with-c-logic-ie-capitalized-variables
      (when (and (/= end (text-ending)) (text-constituent? syntax (last copy)) (text-constituent? syntax (get-char end)))
        (set! copy (concatenate copy " ")))
      (insert-string self copy)))

  
  ;;;
  ;;;; Chapters
  ;;;
  
  
  (constant headers
    (list
      (concatenate "///" (string #\tab))
      (concatenate "///" (string #\space))))
  
  
  (method override (get-headers self)
    headers)))
