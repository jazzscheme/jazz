;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Project
;;;


(data jazz.ide.data.project


(import (jazz.editor.jazz))


(form
  (<Project>                     name: jazz.editor.commonlisp
    (<Project-Directory>                                           directory: {Directory :context "src"}
      (<Project-Directory>                                         directory: {Directory :context "src" "jazz"}
        (<Project-Directory>                                       directory: {Directory :context "src" "jazz" "editor"}
          (<Project-Directory>                                     directory: {Directory :context "src" "jazz" "editor" "commonlisp"}
            (<Project-Directory>                                   directory: {Directory :context "src" "jazz" "editor" "commonlisp" "parser"}
              (<Jazz-File>       name: CommonLisp-Parser           source: {File :context "src" "jazz" "editor" "commonlisp" "parser" "CommonLisp-Parser.jazz"}))
            (<Project-Directory>                                   directory: {Directory :context "src" "jazz" "editor" "commonlisp" "text"}
              (<Jazz-File>       name: CommonLisp-Explorer         source: {File :context "src" "jazz" "editor" "commonlisp" "text" "CommonLisp-Explorer.jazz"})
              (<Jazz-File>       name: CommonLisp-Text-Preferences source: {File :context "src" "jazz" "editor" "commonlisp" "text" "CommonLisp-Text-Preferences.jazz"})
              (<Jazz-File>       name: CommonLisp-Text-View        source: {File :context "src" "jazz" "editor" "commonlisp" "text" "CommonLisp-Text-View.jazz"}))
            (<Jazz-File>         name: _commonlisp                 source: {File :context "src" "jazz" "editor" "commonlisp" "_commonlisp.jazz"})
            (<Jazz-File>         name: autoload                    source: {File :context "src" "jazz" "editor" "commonlisp" "autoload.jazz"})
            (<Jazz-File>         name: forms                       source: {File :context "src" "jazz" "editor" "commonlisp" "forms.jazz"}))))))))
