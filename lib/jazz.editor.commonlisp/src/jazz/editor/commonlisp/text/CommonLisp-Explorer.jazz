;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Exploring CommonLisp Code
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.editor.commonlisp.text.CommonLisp-Explorer jazz


(require (jazz.editor.commonlisp.forms))

(import (jazz.editor.lisp))


(class CommonLisp-Explorer extends Lisp-Explorer


  ;;;
  ;;;; Declarations
  ;;;
  
  
  (method override (find-named-walker self name)
    (case name
      ((:define)          (~ walk-define self))
      ((:define-macro)    (~ walk-define-macro self))
      ((:define-variable) (~ walk-define-variable self))
      ((:eval-when)       (~ walk-eval-when self))
      (else               (nextmethod self name))))

  
  (method (walk-define self context symbol form declaration keyword expression doc)
    (let ((entry context))
      (keyword context start end)
      (forward-whites self)
      (let ((list? (eqv? (char-forward self 0) #\open-parenthesis)))
        (when list?
          (enter-list self))
        (when (and (forward-expr self) (eq? kind 'symbol))
          (set! entry (declaration context 'define '() symbol '() #f start end (get-marked self) #f)))
        (when list?
          (walk-parameters self entry declaration keyword expression doc))
        (when list?
          (exit-list self)))
      (walk-expressions self entry expression 'code #f)
      entry))
  
  
  (method (walk-define-macro self context symbol form declaration keyword expression doc)
    (let ((entry context))
      (keyword context start end)
      (forward-whites self)
      (let ((list? (eqv? (char-forward self 0) #\open-parenthesis)))
        (when list?
          (enter-list self))
        (when (and (forward-expr self) (eq? kind 'symbol))
          (set! entry (declaration context 'define-macro '() symbol '() #f start end (get-marked self) #f)))
        (when list?
          (walk-expressions self entry expression 'code #f))
        (when list?
          (exit-list self)))
      (walk-expressions self entry expression 'code #f)
      entry))
    
  
  (method (walk-define-variable self context symbol form declaration keyword expression doc)
    (let ((entry context))
      (keyword context start end)
      (forward-whites self)
      (let ((list? (eqv? (char-forward self 0) #\open-parenthesis)))
        (when list?
          (enter-list self))
        (when (and (forward-expr self) (eq? kind 'symbol))
          (set! entry (declaration context 'define-variable '() symbol '() #f start end (get-marked self) #f)))
        (when list?
          (walk-parameters self entry declaration keyword expression doc))
        (when list?
          (exit-list self)))
      (walk-expressions self entry expression 'code #f)
      entry))
    
  
  (method (walk-eval-when self context symbol form declaration keyword expression doc)
    (walk-declarations self context declaration keyword expression doc))))
