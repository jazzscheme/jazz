;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Diff Syntax
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.editor.diff.text.Diff-Syntax jazz


(import (jazz.system)
        (jazz.ui))


(class Diff-Syntax extends Code-Syntax
  
  
  ;;;
  ;;;; Preferences
  ;;;
  
  
  (method override (preferences)
    (get-preferences '(documents diff-text)))

  
  ;;;
  ;;;; Chapters
  ;;;
  
  
  (constant headers
    (list
      "diff "))
  
  
  (method override (get-headers)
    headers)
  
  
  (method override (get-chapter-label string col from to)
    (let ((pos (find string #\/ reversed?: #t)))
      (if pos
          (subseq string (+ pos 1))
        (nextmethod string col from to))))
  
  
  (method override (get-first-special?)
    #f)

  
  ;;;
  ;;;; Coloring
  ;;;
  
  
  (method override (colorize-syntax (recoloring?: recoloring? #f) (entries?: entries? #t))
    (define (colorize-diff colorizer)
      (for-each-paragraph~ model
        (lambda (line paragraph)
          (let ((str (get-string~ paragraph)))
            (let ((len (cardinality str)))
              (cond ((or (starts-with? str "From")
                         (starts-with? str "Date")
                         (starts-with? str "Subject")
                         (starts-with? str "diff ")
                         (starts-with? str "index "))
                     (apply-coloring colorizer (new Cell line 0) (new Cell line len) 'File))
                    ((starts-with? str "@@")
                     (apply-coloring colorizer (new Cell line 0) (new Cell line len) 'Diff))
                    ((starts-with? str "+")
                     (apply-coloring colorizer (new Cell line 0) (new Cell line len) 'Add))
                    ((starts-with? str "-")
                     (apply-coloring colorizer (new Cell line 0) (new Cell line len) 'Remove))
                    (else
                     #f)))))))
    
    (let ((colorizer (new-colorizer~ model)))
      (colorize-diff colorizer)
      (finish-current~ colorizer)))))
