;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Diff Text View
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library protected jazz.editor.diff.text.Diff-Text-View jazz


(import (jazz.system)
        (jazz.ui))


(class Diff-Text-View extends Code-Text-View
  
  
  (method meta override (external-name . rest)
    'diff)
  
  
  (method override (preferences)
    (get-preferences '(documents diff-text)))
  
  
  (method override (install rest)
    (nextmethod rest)
    (let ((pref (preferences))
          (default (get-name~ default-style)))
      (add-style-preference 'File   default (get-file-style~ pref))
      (add-style-preference 'Diff   default (get-diff-style~ pref))
      (add-style-preference 'Add    default (get-add-style~ pref))
      (add-style-preference 'Remove default (get-remove-style~ pref))))

  
  ;;;
  ;;;; Host
  ;;;
  
  
  (method override (host-workspaces)
    '(text))

  
  ;;;
  ;;;; Chapters
  ;;;
  
  
  (constant headers
    (list
      "diff "))
  
  
  (method override (get-headers)
    headers)
  
  
  (method override (get-chapter-label string col from to)
    (let ((pos (find string #\/ reversed?: #t)))
      (if pos
          (subseq string (+ pos 1))
        (nextmethod string col from to))))
  
  
  (method override (get-first-special?)
    #f)

  
  ;;;
  ;;;; Coloring
  ;;;
  
  
  (method override (colorize-syntax (recoloring?: recoloring? #f) (entries?: entries? #t))
    (let ((colorizer (new-colorizer self)))
      (colorize-diff colorizer)
      (finish-current~ colorizer)))
  
  
  (method (colorize-diff colorizer)
    (for-each-paragraph
      (lambda (row paragraph)
        (let ((line (get-string~ paragraph)))
          (let ((len (cardinality line)))
            (cond ((or (starts-with? line "From")
                       (starts-with? line "Date")
                       (starts-with? line "Subject")
                       (starts-with? line "diff ")
                       (starts-with? line "index "))
                   (apply-coloring colorizer (new Cell row 0) (new Cell row len) 'File))
                  ((starts-with? line "@@")
                   (apply-coloring colorizer (new Cell row 0) (new Cell row len) 'Diff))
                  ((starts-with? line "+")
                   (apply-coloring colorizer (new Cell row 0) (new Cell row len) 'Add))
                  ((starts-with? line "-")
                   (apply-coloring colorizer (new Cell row 0) (new Cell row len) 'Remove))
                  (else
                   #f)))))))))
