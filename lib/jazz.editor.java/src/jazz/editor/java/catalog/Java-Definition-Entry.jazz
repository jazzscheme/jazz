;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Java Definition Entry
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.editor.java.catalog.Java-Definition-Entry jazz


(import (jazz.catalog.edit)
        (jazz.editor.java)
        (jazz.resource))


(class Java-Definition-Entry extends Java-Entry
  
  
  (slot kind            getter explicit)
  (slot parameters      getter generate)
  (slot body-line       getter generate)
  (slot body-column     getter generate)
  (slot body-end-line   getter generate)
  (slot body-end-column getter generate)
  
  
  (method override (initialize name kind parameters line column end-line end-column body-line body-column body-end-line body-end-column references)
    (nextmethod name line column end-line end-column '() references)
    (set! kind~self kind)
    (set! parameters~self parameters)
    (set! body-line~self body-line)
    (set! body-column~self body-column)
    (set! body-end-line~self body-end-line)
    (set! body-end-column~self body-end-column))
  
  
  (method override (print-catalog level output)
    (format output "{%}{_ :v}~{{s} {s} {s} {s} {s} {s} {s} {s} {s} {s} {s} {s} {s}}"
            (* level 2)
            (category-name (class-of self))
            name kind parameters
            line column end-line end-column
            body-line body-column body-end-line body-end-column
            references))
  
  
  ;;;
  ;;;; Present
  ;;;
  
  
  (method override (get-image)
    {Image-Resource "Method"})


  (method override (present)
    ;; use the fact that classes are stored in files with same name
    (format "{a}.{a}" (get-base~ (get-file~ file-definition)) name))
  
  
  ;;;
  ;;;; Indexes
  ;;;
  
  
  (method override (update-indexes definitions-index references-index)
    (update-index definitions-index name)
    (for-each (lambda (key)
                (update-index references-index key))
              references)))


;;;
;;;; Edit
;;;


(specific (edit-reference (<Java-Definition-Entry> entry) direction search-result . rest)
  (receive (frame new?) (apply edit-entry entry return-new?: #t rest)
    (let ((text (get-guest~ frame)))
      (let ((start (new Cell (get-body-line~ entry) (get-body-column~ entry)))
            (end (new Cell (get-body-end-line~ entry) (get-body-end-column~ entry))))
        (let ((range (new Range$Cell$ start end)))
          (set-beginning~ search-result start)
          (set-ending~ search-result end)
          (let ((direction (or direction 'forward)))
            (highlight-reference~ text direction range search-result)))))
    (values frame new?))))
