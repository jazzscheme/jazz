;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Java Parser
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.editor.java.parser.Java-Parser jazz


(import (jazz.catalog)
        (jazz.editor.java))


(class Java-Parser extends File-Parser
  
  
  ;;;
  ;;;; Constituent
  ;;;
  
  
  (method meta override (get-constituent-test)
    c-constituent?)
  
  
  ;;;
  ;;;; Parse
  ;;;
  
  
  (method override (parse file digest dialect)
    (define (parse-definitions)
      (let ((lines (list->vector (load-lines~ file char-encoding: char-encoding char-encoding-errors: #f)))
            (fact (new List-Factory)))
      (loop (for n from 0 below (cardinality lines))
            (do
              (let* ((line (vector-ref lines n))
                     (item (or (find-package line n)
                               (find-import line n)
                               (find-definition line n))))
                (when item (put~ fact item)))))
      (get-output~ fact)))
    
    ;;;
    ;;;; Package
    ;;;
    
    (define package
      "package")
    
    (define (find-package line n)
      (let ((len (string-length line))
            (col (skip-whitespace line)))
        (when (and (> len (+ col (string-length package)))
                   (string=? package (substring line col (+ col (string-length package)))))
          (let* ((start (+ col (string-length package)))
                 (col (skip-whitespace line start: start)))
            (when (and (> col start) (< col len))
              (let* ((start col)
                     (col (skip (lambda (c) (or (c-constituent? c) (eqv? c #\period))) line start: start)))
                (when (and (> col start) (< col len))
                  (new Java-Package-Entry (subseq line start col) n start n col))))))))
    
    ;;;
    ;;;; Import
    ;;;
    
    (define import
      "import")
    
    (define (find-import line n)
      (let ((len (string-length line))
            (col (skip-whitespace line)))
        (when (and (> len (+ col (string-length import)))
                   (string=? import (substring line col (+ col (string-length import)))))
          (let* ((start (+ col (string-length import)))
                 (col (skip-whitespace line start: start)))
            (when (and (> col start) (< col len))
              (let* ((start col)
                     (col (skip (lambda (c) (or (c-constituent? c) (eqv? c #\period))) line start: start)))
                (when (and (> col start) (< col len))
                  (new Java-Import-Entry (subseq line start col) n start n col))))))))
    
    ;;;
    ;;;; Definition
    ;;;
    
    (define visibilities
      '("private"
        "protected"
        "public"))
    
    (define modifiers
      '())
    
    (define (find-definition line n)
      (let ((len (string-length line))
            (col (skip-whitespace line))
            (visibility #f))
        (when (some? (lambda (vis)
                       (when (and (> len (+ col (string-length vis)))
                                  (string=? vis (substring line col (+ col (string-length vis)))))
                         (set! visibility (+ col (string-length vis)))
                         #t))
                     visibilities)
          (let ((col (search line " = ")))
            (if col
                (let ((start (skip c-constituent? line reversed?: #t start: col)))
                  (new Java-Definition-Entry (subseq line start col) n start n col))
              (let ((last (string-ref line (- len 1))))
                (define (constructor?)
                  (let ((pos (skip c-constituent? line start: (+ visibility 1))))
                    (and (< pos len)
                         (eqv? (string-ref line pos) #\())))
                
                (cond ((constructor?)
                       #f)
                      ((search line " throws ")
                       =>
                        (lambda (pos)
                          (let ((start (search line "(" reversed?: #t start: pos)))
                            (when start
                              (let ((col start))
                                (let ((start (skip c-constituent? line reversed?: #t start: col)))
                                  (new Java-Definition-Entry (subseq line start col) n start n col)))))))
                      ((eqv? last #\))
                       (let ((start (search line "(" reversed?: #t start: len)))
                         (when start
                           (let ((col start))
                             (let ((start (skip c-constituent? line reversed?: #t start: col)))
                               (new Java-Definition-Entry (subseq line start col) n start n col))))))
                      ((eqv? last #\;)
                       (let ((col (- len 1)))
                         (let ((start (skip c-constituent? line reversed?: #t start: col)))
                           (new Java-Definition-Entry (subseq line start col) n start n col))))
                      ((let ((try (lambda (str)
                                    (let ((pos (search line str)))
                                      (and pos (+ pos (string-length str)))))))
                         (or (try " class ")
                             (try " interface ")
                             (try " enum ")))
                       => (lambda (start)
                            (let ((col (skip c-constituent? line start: start)))
                              (new Java-Definition-Entry (subseq line start col) n start n col))))
                      (else
                       #f))))))))
    
    (new Java-File-Entry catalog file digest dialect (parse-definitions)))))
