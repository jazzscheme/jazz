;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Exploring Java Code
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.editor.java.text.Java-Explorer jazz


(import (jazz.editor))


(class Java-Explorer extends Code-Explorer
  
  
  (method private (forward-single-line-comment self)
    (next-paragraph self))
  
  
  (method private (forward-multi-line-comment self)
    (forward self)
    (forward self)
    (let (iterate)
      (let ((c (char-forward self 0)))
        (when c
          (if (and (eqv? c #\times)
                   (eqv? (char-forward self 1) #\slash))
              (begin
                (forward self)
                (forward self))
            (forward self)
            (iterate))))))
  
  
  (method public (forward-comments self)
    (let (iterate)
      (let ((c (char-forward self 0)))
        (when c
          (cond ((eqv? c #\slash)
                 (case (char-forward self 1)
                   ((#\slash)
                    (forward-single-line-comment self)
                    (iterate))
                   ((#\times)
                    (forward-multi-line-comment self)
                    (iterate)))))))))
  
  
  (method public (forward-whites self)
    (let (iterate)
      (let ((c (char-forward self 0)))
        (when c
          (cond ((eqv? c #\slash)
                 (case (char-forward self 1)
                   ((#\slash)
                    (forward-single-line-comment self)
                    (iterate))
                   ((#\times)
                    (forward-multi-line-comment self)
                    (iterate))))
                ((whitespace? c)
                 (forward self)
                 (iterate)))))))
  
  
  (method public (forward-identifier-or-number self)
    (let (iterate)
      (forward-word self)
      (when (eqv? (char-forward self 0) #\period)
        (forward self)
        (iterate))))))
