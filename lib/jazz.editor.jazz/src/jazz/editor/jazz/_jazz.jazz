;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Jazz Language
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module jazz.editor.jazz jazz


(hub activate)
(hub analyse)
(hub browse)
(hub edit-location)
(hub enter-import)
(hub find-import)
(hub find-namespace-insertion-point)
(hub find-namespace-insertion-range)
(hub find-source)
(hub focus-class-name)
(hub focus-method-name)
(hub forward-location)
(hub forward-namespace)
(hub get-client)
(hub get-clients)
(hub get-documented-declaration-style)
(hub get-filter)
(hub get-inspector)
(hub get-kind)
(hub get-literal-style)
(hub get-location)
(hub get-method-name)
(hub get-moniker)
(hub get-ordering)
(hub get-process)
(hub get-tree)
(hub get-undocumented-declaration-style)
(hub incoming-event)
(hub insert-import-invoice)
(hub location-range)
(hub namespace-declaration-range)
(hub on-backward)
(hub on-clear)
(hub on-edit)
(hub on-forward)
(hub on-open)
(hub on-refresh)
(hub on-selection-change)
(hub open-log)
(hub remove-import-invoice)
(hub retrieve-all)
(hub set-class-name)
(hub set-client)
(hub set-filter)
(hub set-method-name)
(hub set-moniker)
(hub set-ordering)
(hub set-process)
(hub toplevel-expr)
(hub update-moniker-time)
(hub update-status)
(hub update-title)


(export (jazz.editor.jazz.autoload))

(import (jazz.application)
        (jazz.editor.jazz.autoload)
        (jazz.runtime)
        (jazz.text)
        (jazz.view))


(definition public (call-with-saved-text file func (verify-reload?: verify-reload? #t))
  (call-with-text file
    (lambda (text)
      (let ((result (func text)))
        (save text)
        (when verify-reload?
          (verify-reload (get-application) file))
        result))))


(definition public (call-with-text file func)
  (let ((text (new Jazz-Text-View)))
    (set-colorize? (get-syntax text) #f)
    (set-moniker text file)
    (func text)))


(definition public (class-has-form? text symbol)
  (with-exception-filter
    (lambda (exc)
      (is? exc Location-Error))
    (lambda (exc)
      #f)
    (lambda ()
      (location-range text (list symbol :form))
      #t)))


(definition public (get-module-imports module)
  (call-with-text (find-unit-source module)
    (lambda (text)
      (let ((explorer (new Jazz-Explorer (get-model text))))
        (forward-namespace explorer)
        (find-import explorer)
        (cdr (read-marked explorer))))))


(definition public (insert-imports text imports (insert-empty? #f))
  (define (insert-import-declaration)
    (let ((explorer (new Jazz-Explorer (get-model text))))
      (forward-namespace explorer)
      (unless (enter-import explorer)
        (let ((explorer (new Jazz-Explorer (get-model text))))
          (forward-namespace explorer)
          (set-caret text (get-end explorer))
          (insert-string text (format "{%}{%}{%}(import)"))))))
  
  (define (insert-import invoice)
    (let ((explorer (new Jazz-Explorer (get-model text))))
      (if (list? invoice)
          (bind (unit . rest) invoice
            (insert-import-invoice explorer unit (if (null? rest) #f (car rest))))
        (insert-import-invoice explorer invoice))))
  
  (unless (and (null? imports) (not insert-empty?))
    (insert-import-declaration))
  (for-each insert-import (remove-duplicates imports))))
