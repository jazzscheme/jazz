;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Jazz Forms
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module jazz.editor.jazz.forms jazz


(import (jazz.editor.lisp))


;;;
;;;; Category
;;;


(define-expression class
  namespace?: #t
  declaration?: #t
  modifiers: (private protected package public abstract concrete deprecated undocumented uptodate primitive native)
  keywords: (metaclass extends implements attributes)
  tabulate: 0
  walk: :class)


(define-expression interface
  namespace?: #t
  declaration?: #t
  modifiers: (private protected package public deprecated undocumented uptodate primitive native)
  keywords: (metaclass extends attributes)
  tabulate: 0
  walk: :interface)


(define-expression remotable-stub
  namespace?: #t
  declaration?: #t
  modifiers: (private protected package public)
  keywords: (extends)
  tabulate: 0
  walk: :remotable-stub
  name-mangler: "~stub")


(define-expression submodule
  namespace?: #t
  declaration?: #t
  modifiers: (private protected package public)
  tabulate: -1
  walk: :submodule)


;;;
;;;; Declaration
;;;


(define-expression constant
  declaration?: #t
  modifiers: (meta private protected package public deprecated undocumented uptodate inline onsite)
  tabulate: 1
  walk: :constant)

(define-expression datacontainer
  declaration?: #t
  tabulate: 1
  walk: :datacontainer)

(define-expression definition
  declaration?: #t
  modifiers: (meta private protected package public deprecated undocumented uptodate inline onsite)
  tabulate: 1
  walk: :definition)

(define-expression define-emit
  declaration?: #t
  tabulate: 1
  walk: :define-emit
  name-mangler: ("emit")
  signature-mangler: "")

(define-expression define-expression
  declaration?: #t
  tabulate: 1
  walk: :define
  name-mangler: ("expression"))

(define-expression define-setting
  declaration?: #t
  tabulate: 1
  walk: :define-macro
  name-mangler: ("setting"))

(define-expression defoptimize
  declaration?: #t
  modifiers: (meta private protected package public deprecated undocumented uptodate inline onsite)
  tabulate: 1
  walk: :definition)

(define-expression enumeration
  declaration?: #t
  tabulate: 1
  walk: :enumeration)

(define-expression form
  declaration?: #t
  anonymous?: #t
  tabulate: 0
  walk: :form)

(define-expression generic
  declaration?: #t
  modifiers: (meta private protected package public deprecated undocumented uptodate)
  tabulate: 1
  walk: :generic/specific)

@too-much
(define-expression hub
  declaration?: #t
  modifiers: (meta private protected package public deprecated undocumented uptodate)
  tabulate: 1
  walk: :hub
  name-mangler: ("hub"))

(define-expression node
  declaration?: #t
  tabulate: 1
  walk: :node
  name-mangler: ("node"))

(define-expression global
  declaration?: #t
  walk: :global)

(define-expression macro
  declaration?: #t
  modifiers: (meta private protected package public deprecated undocumented uptodate)
  tabulate: 1
  walk: :macro
  name-mangler: ("macro"))

(define-expression local-macro
  declaration?: #t
  modifiers: ()
  tabulate: 1
  walk: :macro
  name-mangler: ("macro"))

(define-expression method
  declaration?: #t
  modifiers: (meta private protected package public deprecated undocumented uptodate final virtual chained override abstract concrete core inline onsite remote notremote synchronized notsynchronized post exec call value)
  tabulate: 1
  walk: :method)

(define-expression optimize
  tabulate: 0)

(define-expression pattern
  declaration?: #t
  modifiers: (meta private protected package public deprecated undocumented uptodate final virtual chained override abstract concrete inline onsite remote notremote synchronized notsynchronized)
  tabulate: 1
  walk: :method
  name-mangler: ("pattern"))

(define-expression property
  declaration?: #t
  modifiers: (private protected package public deprecated undocumented uptodate)
  walk: :property)

(define-expression slot
  declaration?: #t
  modifiers: (meta private protected package public deprecated undocumented uptodate)
  walk: :slot)

(define-expression jazzdoc
  declaration?: #t
  walk: :jazzdoc
  tabulate: 0)

(define-expression special
  declaration?: #t
  walk: :define-macro)

(define-expression specialize
  declaration?: #t
  modifiers: (inline)
  walk: :specialize)

(define-expression specific
  declaration?: #t
  tabulate: 1
  walk: :generic/specific)

(define-expression syntax
  declaration?: #t
  modifiers: (meta private protected package public deprecated undocumented uptodate)
  tabulate: 1
  walk: :syntax
  name-mangler: ("syntax"))

(define-expression define-local-syntax
  declaration?: #t
  modifiers: ()
  tabulate: 1
  walk: :define-macro)

(define-expression %macro
  declaration?: #t
  walk: :macro)

(define-expression define-color
  declaration?: #t
  tabulate: 1
  walk: :define
  name-mangler: ("color"))

(define-expression define-font
  declaration?: #t
  tabulate: 1
  walk: :define
  name-mangler: ("font"))

(define-expression define-format
  declaration?: #t
  walk: :define
  name-mangler: ("format"))

(define-expression define-style
  declaration?: #t
  walk: :define
  name-mangler: ("style"))

(define-expression define-text-style
  declaration?: #t
  walk: :define
  name-mangler: ("style"))

(define-expression define-form
  declaration?: #t
  tabulate: 1
  walk: :define)

(define-expression define-trait
  declaration?: #t
  tabulate: 2
  walk: :define)

(define-expression define-symbolic-addable-references
  declaration?: #t
  tabulate: 1
  walk: :define
  name-mangler: ("symbolic-addable-references"))


;;;
;;;; Syntax
;;;


(define-expression allege
  tabulate: 1)

(define-expression assert
  tabulate: 1)

(define-expression attributes
  tabulate: 1
  walk: :attributes)

(define-expression bind
  tabulate: 2)

(define-expression bind-vector
  tabulate: 2)

(define-expression call-with-catch
  tabulate: 2)

(define-expression catch
  tabulate: 1)

(define-expression cotry
  tabulate: 1)

(define-expression ecase
  tabulate: 1
  clauses?: #t)

(define-expression ccase
  tabulate: 1
  clauses?: #t)

(define-expression <form>
  tabulate: 0)

(define-expression markup
  tabulate: 0)

(define-expression <markup>
  tabulate: 0)

(define-expression match
  tabulate: 1)

(define-expression match-regexp
  tabulate: 1)

(define-expression new
  tabulate: 1)

(define-expression state
  tabulate: 1
  walk: :state)

(define-expression proclaim
  walk: :proclaim)

(define-expression prog1
  tabulate: 1)

(define-expression properties
  tabulate: 1
  walk: :state)

(define-expression synchronize
  tabulate: 1)

(define-expression typecase
  tabulate: 1
  clauses?: #t)

(define-expression unless
  tabulate: 1)

(define-expression unwind-protect
  tabulate: 1)

(define-expression when
  tabulate: 1)

(define-expression while
  tabulate: 1)

(define-expression with
  tabulate: 1)


;;;
;;;; C Foreign
;;;


(define-expression c-constant
  declaration?: #t
  tabulate: 1
  walk: :c-constant)

(define-expression c-declare
  walk: :c-declare)

(define-expression c-definition
  declaration?: #t
  modifiers: (private protected package public)
  tabulate: 5
  walk: :c-definition)

(define-expression c-callback
  declaration?: #t
  modifiers: (private protected package public)
  tabulate: 6
  walk: :c-definition)

(define-expression c-enumeration
  declaration?: #t
  tabulate: 1
  walk: :c-enumeration)

(define-expression c-external
  declaration?: #t
  walk: :c-external)

(define-expression c-callable
  declaration?: #t
  walk: :c-external)

(define-expression c-include
  walk: :c-include)

(define-expression c-initialize
  walk: :c-initialize)

(define-expression c-named-declare
  walk: :c-named-declare)

(define-expression c-structure
  declaration?: #t
  tabulate: 1
  walk: :c-structure)

(define-expression c-enumerant
  declaration?: #t
  walk: :c-type)

(define-expression c-type
  declaration?: #t
  walk: :c-type)


;;;
;;;; COM Foreign
;;;


(define-expression com-external
  declaration?: #t
  walk: :com-external)


;;;
;;;; Git Foreign
;;;


(define-expression git-external
  declaration?: #t
  walk: :c-external)


;;;
;;;; Gst Foreign
;;;


(define-expression gst-external
  declaration?: #t
  walk: :c-external))
