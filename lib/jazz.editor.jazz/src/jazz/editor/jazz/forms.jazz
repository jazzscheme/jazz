;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Jazz Forms
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.editor.jazz.forms jazz


(import (jazz.editor.jazz)
        (jazz.editor.lisp)
        (jazz.editor.scheme))


;;;
;;;; Repository
;;;


(define-form repository
  dialect: repository
  tabulate: 0
  walk: :category)


;;;
;;;; Package
;;;


(define-form package
  dialect: package
  walk: :category)


(define-form root
  walk: :keyword)

(define-form install
  walk: :keyword)

(define-form project
  walk: :keyword)

(define-form products
  walk: :keyword)

(define-form profiles
  walk: :keyword)


;;;
;;;; Module
;;;


(define-form module
  dialect: jazz
  declaration?: #t
  tabulate: -1
  walk: :category)


;;;
;;;; Library
;;;


(define-form library
  declaration?: #t
  modifiers: #t
  tabulate: -1
  walk: :category)


(define-form import
  walk: :keyword)

(define-form export
  walk: :keyword)

(define-form require
  walk: :keyword)


;;;
;;;; Category
;;;


(define-form class
  declaration?: #t
  modifiers: #t
  tabulate: 0
  walk: :category)


(define-form interface
  declaration?: #t
  modifiers: #t
  tabulate: 0
  walk: :category)


(define-form remotable-stub
  declaration?: #t
  modifiers: #t
  tabulate: 0
  walk: :category)


;;;
;;;; Declaration
;;;


(define-form constant
  modifiers: #t
  tabulate: 1
  walk: :constant)

(define-form datacontainer
  tabulate: 1
  walk: :datacontainer)

(define-form definition
  modifiers: #t
  tabulate: 1
  walk: :definition)

(define-form define-form
  tabulate: 1
  walk: :define)

(define-form enumeration
  modifiers: #t
  tabulate: 1
  walk: :enumeration)

(define-form form
  tabulate: 0
  walk: :form)

(define-form generic
  modifiers: #t
  tabulate: 1
  walk: :generic)

(define-form global
  walk: :global)

(define-form inline
  modifiers: #t
  tabulate: 1
  walk: :method)

(define-form macro
  modifiers: #t
  tabulate: 1
  walk: :macro)

(define-form method
  modifiers: #t
  tabulate: 1
  walk: :method)

(define-form pattern
  modifiers: #t
  tabulate: 1
  walk: :method)

(define-form property
  walk: :property)

(define-form slot
  walk: :slot)

(define-form special
  walk: :define-macro)

(define-form specialize
  walk: :specialize)

(define-form specific
  modifiers: #t
  tabulate: 1
  walk: :specific)

(define-form syntax
  tabulate: 1
  walk: :macro)

(define-form %macro
  walk: :macro)


;;;
;;;; Syntax
;;;


(define-form assert
  tabulate: 1)

(define-form attributes
  tabulate: 1
  walk: :attributes)

(define-form bind
  tabulate: 2)

(define-form call-with-catch
  tabulate: 2)

(define-form catch
  tabulate: 1)

(define-form cotry
  tabulate: 1)

(define-form ecase
  tabulate: 1)

(define-form form>>
  tabulate: 0)

(define-form function
  modifiers: #t
  tabulate: 1)

(define-form jml
  tabulate: 0)

(define-form jml>>
  tabulate: 0)

(define-form native
  walk: :native)

(define-form native-syntax
  walk: :native)

(define-form new
  tabulate: 1)

(define-form proclaim
  walk: :proclaim)

(define-form prog1
  tabulate: 1)

(define-form properties
  walk: :properties)

(define-form synchronize
  tabulate: 1)

(define-form typecase
  tabulate: 1)

(define-form unless
  tabulate: 1)

(define-form unwind-protect
  tabulate: 1)

(define-form when
  tabulate: 1)

(define-form while
  tabulate: 1)

(define-form with
  tabulate: 1)

(define-form with-closed
  tabulate: 1)


;;;
;;;; C Foreign
;;;


(define-form c-constant
  tabulate: 1
  walk: :c-constant)

(define-form c-declare
  walk: :c-declare)

(define-form c-definition
  tabulate: 5
  walk: :c-definition)

(define-form c-enumeration
  tabulate: 1
  walk: :c-enumeration)

(define-form c-external
  walk: :c-external)

(define-form c-include
  walk: :c-include)

(define-form c-initialize
  walk: :c-initialize)

(define-form c-named-declare
  walk: :c-named-declare)

(define-form c-structure
  tabulate: 1
  walk: :c-structure)

(define-form c-type
  walk: :c-type)


;;;
;;;; COM Foreign
;;;


(define-form com-external
  walk: :com-external))
