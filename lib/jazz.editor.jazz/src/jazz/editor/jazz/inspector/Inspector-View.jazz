;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Inspector View
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.editor.jazz.inspector.Inspector-View jazz


(import (jazz.debugger)
        (jazz.editor.jazz)
        (jazz.graphic)
        (jazz.jml)
        (jazz.library)
        (jazz.ui))


(class Inspector-View extends Layout-View
  
  
  (property process initialize #f accessors explicit)
  (property client  initialize #f accessors explicit)
  
  
  (form
    (<install>                                         layout-type: border
      (<Layout-View>                name: toolbar      size: {Dimension 300 25} location: north layout-type: flow layout-insets: {Rect 0 1 0 0}
        (<Separator>                                   size: {Dimension 2 0})
        (<Label-View>               name: filter-label justification: (head -2) title: "Filter:" size: {Dimension 31 20} font: {Font Label})
        (<Separator>                                   size: {Dimension 4 0})
        (<Border-View>                                 size: {Dimension 170 21} border-type: fill border-insets: {Rect 0 2 0 0}
          (<Border-View>                               border-type: edge style: entry
            (<Scroller-View>                           hscroll?: #f vscroll?: #f
              (<!>                  name: content      layout-type: fill
                (<Filter-Text-View> name: filter-text  target-name: actions content-change-handler: {Event-Handler :form on-filter-text-change})))))
        (<Toggle-Tool>                                 location: tail size: {Dimension 22 22} tooltip?: #t tooltip-text: "Order by Class" resource: {Image-Resource "PageFilename"} portfolio: :images action-handler: {Event-Handler :form on-toggle-class}))
      (<Scroller-View>              name: scroller     location: center vscroll?: #t hscroll?: #t style: tool
        (<!>                        name: content      layout-type: fill
          (<Tree-Header>            name: header       style: tool
            (<!>                    name: content
              (<Inspector>          name: inspector    selection-mode: row return-press-handler: {Event-Handler :form on-drill-down} double-click-handler: {Event-Handler :form on-drill-down}
                (<!>                name: name         width: 170)
                (<!>                name: value        width: 261))))))))
  
  
  ;;;
  ;;;; Host
  ;;;
  
  
  (method meta override (host-title)
    "Inspector")
  
  
  (method meta override (host-size)
    {Dimension 446 641})
  
  
  ;;;
  ;;;; Access
  ;;;
  
  
  (method public (get-inspector)
    (locate 'inspector))
  
  
  (method public (get-process)
    (get-process~ (get-inspector)))
  
  
  (method public (set-process process)
    (set-process~ (get-inspector) process))
  
  
  (method public (get-client)
    (get-client~ (get-inspector)))
  
  
  (method public (set-client client)
    (update-title client)
    (set-client~ (get-inspector) client))
  
  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method (on-filter-text-change evt)
    @w
    (filter-target~ (get-filter-text)))
  
  
  (method (on-toggle-class evt)
    )
  
  
  (method (on-drill-down evt)
    (let ((tree (get-sender~ evt)))
      (set-client (cons (cdr (get-single-selected-data~ tree)) :remote))))
  
  
  ;;;
  ;;;; Filter
  ;;;
  
  
  (method (get-filter-text)
    (locate 'filter-text))
  
  
  ;;;
  ;;;; Update
  ;;;
  
  
  (definition Max-Title
    50)
  
  
  (method (update-title client)
    (define (get-presentation)
      (bind (data . kind) client
        (if (eq? :remote kind)
            (bind (serial class presentation more? mutable? kind) data
              presentation)
          data)))
    
    (let ((title (format "Inspector for {a}" (get-presentation))))
      (if (< (cardinality title) Max-Title)
          (set-title title)
        (set-title (format "{a} ..." (subseq title 0 Max-Title))))))))
