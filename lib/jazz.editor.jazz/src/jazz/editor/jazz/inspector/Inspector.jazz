;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Object Inspector
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.editor.jazz.inspector.Inspector jazz


(import (jazz.editor.jazz)
        (jazz.editor.jazz.inspector)
        (jazz.debuggee)
        (jazz.debugger)
        (jazz.jml)
        (jazz.library)
        (jazz.system)
        (jazz.ui))


(class Inspector extends Tree-View
  
  
  (property process initialize #f accessors generate)
  (property client  initialize #f accessors explicit)
  (property sort?   initialize #t accessors generate)
  
  
  (form
    (<install>                         filled-column: value multiple-selection?: #f selection-mode: row portfolio: :images context-menu-handler: {Event-Handler :form on-context-menu}
      (<Tree-Node-Column>  name: name  title: "Name")
      (<Tree-Label-Column> name: value title: "Value")))
  
  
  ;;;
  ;;;; Access
  ;;;
  
  
  (method public (get-client)
    client)
  
  
  (method public (set-client clt)
    (when (neq? clt client)
      (set! client clt)
      (inspect-client client)))
  
  
  ;;;
  ;;;; Tree
  ;;;
  
  
  (method override (update-row row)
    (bind (name serial class presentation more? mutable? kind) (get-user-data~ row)
      (with-jrm-exception-handler
        (lambda ()
          (inspect-content row (inspect-serial~ process serial))))))
  
  
  ;;;
  ;;;; Present
  ;;;
  
  
  (method (inspect-client client)
    (remove-every-row)
    (with-update-locked
      (lambda ()
        (when client
          (bind (data . kind) client
            (inspect-content root-row (inspect data kind)))))))
  
  
  (method (inspect-content row values)
    (with-update-locked
      (lambda ()
        (for-each (lambda (info)
                    (bind (name serial class presentation more? mutable? kind) info
                      (let ((state (if more? 'dynamic 'collapsed)))
                        (add-row father: row state: state
                          children: (list (new Tree-Node title: name image: {Image-Resource "Variable"}) (new Tree-Label title: presentation))
                          user-data: info))))
                  values))))
  
  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method (on-context-menu evt)
    (let* ((sender (get-sender~ evt))
           (pos (get-position~ evt))
           (cell (view->tree pos))
           (acquired (acquire sender pos)))
      (with-context-click~ sender pos
        (lambda ()
          (let ((menu (and cell (new Inspector-Menu client: self))))
            (when menu
              (track-popup-menu menu acquired)))))))
  
  
  (method (on-open evt)
    (let ((info (get-single-selected-data)))
      (when info
        (inspect-info~ (get-local-debugger~ (get-application)) process (cdr info)))))
  
  
  (method (on-refresh evt)
    (let ((row (get-selected-row)))
      (when row
        (let ((actual-state (get-state~ row)))
          (collapse row)
          (remove-every-son~ row)
          (set-state~ row 'dynamic)
          (when (eq? actual-state 'expanded)
            (expand/collapse row))))))
  
  
  ;;;
  ;;;; Inspect
  ;;;
  
  
  (method public virtual (inspect data kind)
    (case kind
      ((:value)
       (inspect-value data))
      ((:remote)
       (bind (serial class presentation more? mutable? kind) data
         (if more?
             (with-jrm-exception-handler
               (lambda ()
                 (inspect-serial~ process serial)))
           '()))))))

;;;
;;;; Inspector-Menu
;;;


(class Inspector-Menu extends Context-Menu
  
  
  (form
    (<install>
      (<Label-Item>     name: open    title: "Open in new window" icon: {Image-Resource "Window"} action-handler: {Event-Handler (:form :client) on-open})
      (<Separator-Item>)
      (<Label-Item>     name: refresh title: "Refresh" icon: {Image-Resource "Refresh"} action-handler: {Event-Handler (:form :client) on-refresh})))))
