;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Object Inspector
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.editor.jazz.inspector.Inspector jazz


(import (jazz.editor.jazz)
        (jazz.editor.jazz.inspector)
        (jazz.debuggee)
        (jazz.debugger)
        (jazz.jml)
        (jazz.library)
        (jazz.ui))


(class Inspector extends Tree-View
  
  
  (property process initialize {} accessors generate)
  (property client  initialize {} accessors explicit)
  (property sort?   initialize #t accessors generate)
  
  
  (form
    (<install>                         filled-column: value multiple-selection?: #f selection-mode: row portfolio: :images
      (<Tree-Node-Column>  name: name  title: "Name")
      (<Tree-Label-Column> name: value title: "Value")))
  
  
  ;;;
  ;;;; Access
  ;;;
  
  
  (method public (get-client)
    client)
  
  
  (method public (set-client clt)
    (when (neq? clt client)
      (set! client clt)
      (present-client client)))
  
  
  ;;;
  ;;;; Tree
  ;;;
  
  
  (method override (update-row row)
    (bind (serial . kind) (get-user-data~ row)
      (present row (inspect-serial~ process serial))))
  
  
  ;;;
  ;;;; Present
  ;;;
  
  
  (method (present-client client)
    (with-update-locked
      (lambda ()
        (remove-every-row)
        (when client
          (bind (data . kind) client
            (present root-row (inspect data kind)))))))
  
  
  (method (present row values)
    (with-update-locked
      (lambda ()
        (for-each (lambda (info)
                    (bind (name serial presented more? mutable? kind) info
                      (let ((state (if more? 'dynamic 'collapsed)))
                        (add-row father: row state: state
                          children: (list (new Tree-Node title: name image: {Image-Resource "Variable"}) (new Tree-Label title: presented))
                          user-data: (cons serial kind)))))
                  values))))
  
  
  ;;;
  ;;;; Inspect
  ;;;
  
  
  (method public virtual (inspect data kind)
    (case kind
      ((:value)
       (inspect-value data))
      ((:remote)
        (bind (serial presented more? mutable? kind) data
          (if more?
              (inspect-serial~ process serial)
            '())))))))
