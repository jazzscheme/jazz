;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Object Inspector
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.editor.jazz.inspector.Inspector jazz


(import (jazz.application)
        (jazz.debugger)
        (jazz.feedback)
        (jazz.inspector)
        (jazz.jml)
        (jazz.library)
        (jazz.resource)
        (jazz.ui)
        (jazz.ui.clipboard)
        (jazz.ui.view))


(constant inspector-max-content
  256)


(class Inspector extends Tree-View
  
  
  (property process  initialize #f          accessors generate)
  (property client   initialize #f          accessors explicit)
  (property filter   initialize #f          accessors explicit)
  (property ordering initialize 'alphabetic accessors generate)
  
  
  (form
    (<install>                         filled-column: value multiple-selection?: #f selection-mode: row portfolio: :images context-menu-handler: {Event-Handler :form on-context-menu}
      (<Tree-Node-Column>  name: name  title: "Name")
      (<Tree-Label-Column> name: value title: "Value")))
  
  
  ;;;
  ;;;; Client
  ;;;
  
  
  (method public (get-client)
    client)
  
  
  (method public (set-client clt (force?: force? #f))
    (when (or force? (neq? clt client))
      (set! client clt)
      (inspect-client client)))
  
  
  ;;;
  ;;;; Filter
  ;;;
  
  
  (method public (get-filter)
    filter)
  
  
  (method public (set-filter flt)
    (set! filter flt)
    (filter-update))
  
  
  (method protected (filter-update)
    (when filter
      (filter-rows
        (lambda (title)
          (search title filter)))))
  
  
  ;;;
  ;;;; Tree
  ;;;
  
  
  (method override (update-row row)
    (bind (name serial class presentation more? mutable? kind) (get-user-data~ row)
      (inspect-content row (safe-inspect-serial serial inspector-max-content) (calculate-forced-ordering class))))
  
  
  ;;;
  ;;;; Present
  ;;;
  
  
  (method protected (safe-calculate-forced-ordering data)
    (when (pair? data)
      (bind (serial class presentation more? mutable? kind) data
        (calculate-forced-ordering class))))
  
  
  (method protected (calculate-forced-ordering class-symbol)
    (when (or (eq? class-symbol (category-identifier Pair))
              (eq? class-symbol (category-identifier Vector))
              (eq? class-symbol (category-identifier Axis)))
      'natural))
  
  
  (method protected (inspect-client client)
    (remove-every-row)
    (with-update-locked
      (lambda ()
        (when client
          (bind (data . kind) client
            (inspect-content #f (inspect data kind inspector-max-content) (safe-calculate-forced-ordering data)))))))
  
  
  (method (inspect-content row values forced-ordering)
    (define (insert-info father info)
      (bind (key serial class presentation more? mutable? kind) info
        (bind (category name rank) (backward-compatible-key key)
          (let ((title (or name "..."))
                (state (if more? 'dynamic 'collapsed)))
            (add-row father: father state: state
              children: (list (new Tree-Node title: title image: {Image-Resource "Variable"}) (new Tree-Label title: presentation))
              user-data: info)))))
    
    (with-update-locked
      (lambda ()
        (case (or forced-ordering ordering)
          ((alphabetic)
           (for-each (lambda (info)
                       (insert-info row info))
                     (sort di<? values key: (lambda (info) (->string (second (car info)))))))
          ((natural)
           (let ((partition (partition values key: caar)))
             (if (and (= 1 (length partition))
                      (not (caar partition)))
                 (for-each (lambda (info)
                             (insert-info row info))
                           values)
               (for-each (lambda (partition rank)
                           (bind (key . elements) partition
                             (let ((father (add-row father: row state: 'expanded children: (list (new Tree-Node title: key image: {Image-Resource "BlueRed"}) (new Tree-Label title: "")) user-data: key)))
                               (for-each (lambda (info)
                                           (insert-info father info))
                                         elements))))
                         partition
                         (naturals 0 (length partition)))))))
        (filter-update))))
  
  
  ;;;
  ;;;; Actions
  ;;;
  

  (method override (focus-actions)
    (cons (find-actions 'inspector)
          (nextmethod)))
  
  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method (on-context-menu evt)
    (let* ((sender (get-sender~ evt))
           (pos (get-position~ evt))
           (cell (view->tree pos))
           (acquired (acquire sender pos)))
      (with-context-click~ sender pos
        (lambda ()
          (when cell
            (let ((info (get-single-selected-data)))
              (when (pair? info)
                (bind (key serial class presentation more? mutable? kind) info
                  (bind (category name rank) (backward-compatible-key key)
                    (if (not name)
                        (let ((menu (new Missing-Menu client: self)))
                          (track-popup-menu menu acquired))
                      (let ((menu (new Value-Menu client: self)))
                        (when (and (eq? class 'jazz:Continuation)
                                   (neq? kind :raw))
                          (set-visible?~ (locate~ menu 'inspect) #t))
                        (when (not more?)
                          (set-visible?~ (locate~ menu 'refresh) #f))
                        (layout-menu~ menu)
                        (track-popup-menu menu acquired))))))))))))
  
  
  (method (on-copy-text evt)
    (let ((row (get-selected-row)))
      (let ((data (get-child~ row 1)))
        (set-clipboard-text (get-title~ data))
        (user-message "Text copied to clipboard"))))
  
  
  (method (on-copy-content evt)
    (let ((info (get-single-selected-data)))
      (if (not (pair? info))
          (bell)
        (bind (key serial class presentation more? mutable? kind) info
          (let ((presentation (present-serial~ process serial)))
            (set-clipboard-text presentation)))
        (user-message "Content copied to clipboard"))))
  
  
  (method (on-inspect evt)
    (let ((info (get-single-selected-data)))
      (if (not (pair? info))
          (bell)
        (bind (key serial class presentation more? mutable? kind) info
          (when (eq? class 'jazz:Continuation)
            (inspect-continuation~ (get-local-debugger~ (get-application)) process serial))))))
  
  
  (method (on-open evt)
    (let ((info (get-single-selected-data)))
      (if (not (pair? info))
          (bell)
        (inspect-info~ (get-local-debugger~ (get-application)) process (cdr info)))))
  
  
  (method (on-refresh evt)
    (let ((row (get-selected-row)))
      (if (or (not row) (not (pair? (get-user-data~ row))))
          (bell)
        (let ((actual-state (get-state~ row)))
          (collapse row)
          (remove-every-son~ row)
          (set-state~ row 'dynamic)
          (when (eq? actual-state 'expanded)
            (expand/collapse row))))))
  
  
  (method (on-retrieve-all evt)
    (with-cursor :wait
      (lambda ()
        (retrieve-all))))
  
  
  (method protected (retrieve-all)
    (define (determine-father)
      (let ((father (get-father~ (get-selected-row))))
        (if (eq? father root-row)
            #f
          father)))
    
    (let ((father (determine-father)))
      (if (not father)
          (begin
            (remove-every-row)
            (bind (data . kind) client
              (inspect-content #f (inspect data kind #f) (safe-calculate-forced-ordering data))))
        (remove-every-son~ father)
        (bind (name serial class presentation more? mutable? kind) (get-user-data~ father)
          (inspect-content father (safe-inspect-serial serial #f) (calculate-forced-ordering class))))))
  
  
  ;;;
  ;;;; Inspect
  ;;;
  
  
  (method public virtual (inspect data kind max-content)
    (case kind
      ((:value)
       (inspect-value data))
      ((:remote)
       (bind (serial class presentation more? mutable? kind) data
         (if more?
             (safe-inspect-serial serial max-content)
           '())))))
  
  
  (method (safe-inspect-serial serial max-content)
    (with-jrm-exception-handler process
      (lambda ()
        (inspect-serial~ process serial max-content)))))


;;;
;;;; Missing-Menu
;;;


(class Missing-Menu extends Context-Menu
  
  
  (form
    (<install>
      (<Label-Item> name: retrieve-all title: "Retrieve All" icon: {Image-Resource "Import"} action-handler: {Event-Handler (:form :client) on-retrieve-all}))))

;;;
;;;; Value-Menu
;;;


(class Value-Menu extends Context-Menu
  
  
  (form
    (<install>
      (<Label-Item>     name: copy       title: "Copy" icon: {Image-Resource "Copy"} action-handler: {Event-Handler (:form :client) on-copy-text})
      (<Label-Item>     name: copy-value title: "Copy Content" action-handler: {Event-Handler (:form :client) on-copy-content})
      (<Label-Item>     name: inspect    title: "Inspect Continuation" action-handler: {Event-Handler (:form :client) on-inspect} visible?: #f)
      (<Separator-Item>)
      (<Label-Item>     name: open       title: "Open in New Window" icon: {Image-Resource "Window"} action-handler: {Event-Handler (:form :client) on-open})
      (<Separator-Item>)
      (<Label-Item>     name: refresh    title: "Refresh" icon: {Image-Resource "Refresh"} action-handler: {Event-Handler (:form :client) on-refresh})))))
