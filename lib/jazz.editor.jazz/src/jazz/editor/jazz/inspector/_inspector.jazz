;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Inspector
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library protected jazz.editor.jazz.inspector jazz


(import (jazz.editor.jazz))


;;;
;;;; Package
;;;


(definition presented-limit
  128)


(definition Unbound
  (cons {} {}))


(definition public (package-unbound)
  Unbound)


(definition public (package-info value (kind :value))
  (define (more-value? value)
    (cond ((pair? value) #t)
          ((table? value) (> (table-length value) 0))
          ((structure? value) (> (kind-length (structure-kind value)) 0))
          ((sequence? value) (> (cardinality value) 0))
          ((object? value) (not-null? (all-slots (class-of value))))
          (else #f)))
  
  (let* ((unbound? (eq? value Unbound))
         (raw? (eq? kind :raw))
         (serial (object->serial value))
         (presented (cond (unbound? "<unbound>")
                          (raw? (->string value))
                          (else (present-object value))))
         (more? (if (or unbound? raw?) #f (or (memq? kind '(frame: context:)) (more-value? value)))))
    (when (> (cardinality presented) presented-limit)
      (set! presented (concatenate (subseq presented 0 presented-limit) "...")))
    (list serial presented more? kind)))


;;;
;;;; Inspect
;;;


(constant inspect-rank-limit
  100)


(definition public (inspect-value value)
  (define (inspect-structure struct)
    (let ((kind (structure-kind struct)))
      (let (iter (kind kind)
                 (fields '()))
        (if (not kind)
            fields
          (iter (kind-super kind)
                (append (map (function (info)
                               (bind (name index) info
                                 (cons name (package-info (structure-ref struct index kind)))))
                             (kind-fields kind))
                        fields))))))
  
  (define (inspect-list lst)
    (let (iter (scan lst)
               (rank 0))
      (cond ((>= rank inspect-rank-limit)
             (list (inspect-limit rank (+ rank (length scan)))))
            ((pair? scan)
             (cons (cons rank (package-info (car scan)))
                   (iter (cdr scan) (+ rank 1))))
            ((not (null? scan))
             (list (cons 'rest (package-info scan))))
            (else
             '()))))
  
  (define (inspect-table table)
    (let ((fact (new List-Factory))
          (rank 0))
      (continuation-capture
        (function (return)
          (iterate-table table
                         (function (key value)
                           (when (>= rank inspect-rank-limit)
                             (put~ fact (inspect-limit rank (table-length table)))
                             (continuation-return return))
                           (increase! rank)
                           (put~ fact (cons key (package-info value)))))))
      (get-output~ fact)))
  
  (define (inspect-slots object)
    (let* ((class (class-of object))
           (slots (all-slots class))
           (infos
             (collect (function (slot)
                        ;; not redefined core classes have symbols as slots
                        (unless (symbol? slot)
                          (cons (field-name slot)
                                (package-info (cond ((property? slot)
                                                     (read-property object slot))
                                                    (else
                                                     (slot-value object (field-name slot))))))))
                      slots)))
      (if #t
          infos
        (sort < infos key: car))))
  
  (define (inspect-limit displayed total)
    (let ((missing (- total displayed)))
      (cons "..." (package-info (format "{a} missing of {a}" missing total) :raw))))
  
  (cond ((null/pair? value) (inspect-list value))
        ((table? value) (inspect-table value))
        ((structure? value) (inspect-structure value))
        ((sequence? value) (inspect-list (coerce value List)))
        ((object? value) (inspect-slots value))
        (else '()))))
