;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Inspector
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module jazz.editor.jazz.inspector jazz


(import (jazz.editor.jazz))


;;;
;;;; Package
;;;


(definition presentation-limit
  256)


(definition Unbound
  (cons #f #f))


(definition public (package-unbound)
  Unbound)


(definition public (package-info value (kind: kind :value) (mutable?: mutable? #t) (max-width: max-width #f) (cache: cache #f))
  (define (more-value? value)
    (cond ((pair? value) #t)
          ((table? value) (> (table-length value) 0))
          ((structure? value) (> (kind-length (structure-kind value)) 0))
          ((string? value) #f)
          ((sequence? value) (> (cardinality value) 0))
          ((object? value) (not-null? (get-instance-slots~ (class-of value))))
          (else #f)))
  
  (define (truncate str)
    (let ((limit (or max-width presentation-limit)))
      (if (> (cardinality str) limit)
          (concatenate (subseq str 0 limit) "...")
        str)))
  
  (let ((serial (object->serial value)))
    (or (and cache (table-ref cache serial #f))
        (let* ((unbound? (eq? value Unbound))
               (raw? (eq? kind :raw))
               (class (category-identifier (class-of value)))
               (presentation (cond (unbound? "<unbound>")
                                   (raw? (truncate (->string value)))
                                   (else (present-object value (or max-width presentation-limit)))))
               (more? (if (or unbound? raw?) #f (or (memq? kind '(frame: context:)) (more-value? value))))
               (info (list serial class presentation more? mutable? kind)))
          (when cache
            (table-set! cache serial info))
          info))))


;;;
;;;; Inspect
;;;


(constant inspect-rank-limit
  100)


(definition public (inspect-value value (max-width: max-width #f) (max-content: max-content inspect-rank-limit) (packager: packager package-info))
  (define (inspect-structure struct)
    (let ((kind (structure-kind struct)))
      (let (iter (kind kind)
                 (fields '()))
        (if (not kind)
            fields
          (iter (kind-super kind)
                (append (map (lambda (info)
                               (bind (name index) info
                                 (cons name (packager (structure-ref struct index kind)))))
                             (kind-fields kind))
                        fields))))))
  
  (define (inspect-list lst)
    (let (iter (scan lst)
               (rank 0))
      (cond ((>= rank max-content)
             (list (inspect-limit rank (+ rank (proper-length scan)))))
            ((pair? scan)
             (cons (cons rank (packager (car scan)))
                   (iter (cdr scan) (+ rank 1))))
            ((not (null? scan))
             (list (cons 'rest (packager scan))))
            (else
             '()))))
  
  (define (inspect-table table)
    (define (sort-content lst)
      (sort string<=? lst key: (lambda (pair) (present-object (car pair) max-width))))
    
    (map (lambda (pair)
           (bind (key . value) pair
             (cons (present-object key max-width)
                   (packager value))))
         (let ((lst (table->list table)))
           (if (> (table-length table) max-content)
               (append (sort-content (subseq lst 0 max-content))
                       (list (inspect-limit max-content (table-length table))))
             (sort-content lst)))))
  
  (define (inspect-object object)
    (define (class-slots class)
      (if (not class)
          '()
        (append (get-slots~ class) (class-slots (get-ascendant~ class)))))
    
    (let ((infos (collect (lambda (slot)
                            ;; when we forget to redefine core classes in jazz, slots are symbols
                            (if (symbol? slot)
                                (cons slot (packager "<core slot>" kind: :raw))
                              (let ((value (slot-value object (field-name slot))))
                                (if (and (unspecified? value) (property? slot))
                                    (cons (field-name slot)
                                          (packager (read-property object slot) kind: :raw))
                                  (cons (field-name slot)
                                        (packager value))))))
                          (class-slots (class-of object)))))
      @when-we-have-sorting-through-the-ui
      infos
      (sort string-ci<? infos key: (lambda (info) (symbol->string (car info))))))
  
  (define (inspect-limit displayed total)
    (let ((missing (- total displayed)))
      (cons "..." (packager (format "{a} missing of {a}" missing total) kind: :raw))))
  
  (cond ((null/pair? value) (inspect-list value))
        ((table? value) (inspect-table value))
        ((structure? value) (inspect-structure value))
        ((sequence? value) (inspect-list (coerce value List)))
        ((object? value) (inspect-object value))
        (else '()))))
