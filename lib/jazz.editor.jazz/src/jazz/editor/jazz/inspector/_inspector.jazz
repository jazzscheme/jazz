;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Inspector
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library protected jazz.editor.jazz.inspector jazz


(import (jazz.editor.jazz))


;;;
;;;; Package
;;;


(definition Unbound
  (cons {} {}))


(definition public (package-unbound)
  Unbound)


(definition public (package-info value (kind :value))
  (let* ((unbound? (eq? value Unbound))
         (serial (object->serial value))
         (presented (cond (unbound? "<unbound>") (else (->string value :reader))))
         (more? (if unbound? #f (or (memq? kind '(frame: context:)) (more-value? value)))))
    (when (> (cardinality presented) 512)
      (set! presented (concatenate (subseq presented 0 128) "...")))
    (list serial presented more? kind)))


(definition public (more-value? value)
  (and (not (null? value))
       (not (empty-string? value))
       (is-not? value Symbol)
       (is-not? value Boolean)
       (is-not? value Char)
       (is-not? value Number)
       (cond ((object? value)
              (not (null? (all-slots (class-of value)))))
             ((category? value)
              #f)
             (else
              #t))))


;;;
;;;; Inspect
;;;


(constant inspect-rank-limit 128)


(definition public (inspect-value value)
  (typecase value
    ((List) (inspect-list value))
    ((Table) (inspect-table value))
    ((Sequence) (inspect-list (coerce value List)))
    (else (inspect-slots value))))


(definition (inspect-limit displayed total)
  (cons "..." (package-info (format "{a} of {a} elements" displayed total))))


(definition (inspect-list lst)
  (let (iter (scan lst)
             (rank 0))
    (cond ((>= rank inspect-rank-limit)
           (list (inspect-limit rank (+ rank (length scan)))))
          ((pair? scan)
           (cons (cons rank (package-info (car scan)))
                 (iter (cdr scan) (+ rank 1))))
          ((not (null? scan))
           (list (cons 'rest (package-info scan))))
          (else
           '()))))


(definition (inspect-table table)
  (let ((fact (new List-Factory))
        (rank 0))
    (continuation-capture
      (function (return)
        (iterate-table table
          (function (key value)
            (when (>= rank inspect-rank-limit)
              (put~ fact (inspect-limit rank (table-length table)))
              (continuation-return return))
            (increase! rank)
            (put~ fact (cons key (package-info value)))))))
    (get-output~ fact)))


(definition package (inspect-slots object)
  (let* ((class (class-of object))
         (slots (all-slots class))
         (infos
           (collect (function (slot)
                      ;; not redefined core classes have symbols as slots
                      (unless (symbol? slot)
                        (cons (field-name slot)
                              (package-info (cond ((property? slot)
                                                   (read-property object slot))
                                                  (else
                                                   (slot-value object (field-name slot))))))))
                    slots)))
    (if #t
        infos
      (sort < infos key: car)))))
