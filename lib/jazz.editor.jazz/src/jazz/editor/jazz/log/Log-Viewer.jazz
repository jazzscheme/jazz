;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Log Viewer
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.editor.jazz.log.Log-Viewer jazz


(import (jazz.debuggee.view)
        (jazz.document)
        (jazz.geometry)
        (jazz.graphic)
        (jazz.handler)
        (jazz.jml)
        (jazz.layout)
        (jazz.locale)
        (jazz.resource)
        (jazz.ui))


(class Log-Viewer extends Layout-View implements Document

  
  (method meta override (external-name . rest)
    'log-viewer)


  (slot document-controller initialize #f)
  (slot data-viewer         initialize #f)


  (form
    (<install>                                   title: "Log Viewer" layout-type: border layout-insets: {Rect 2 2 2 2}
      (<Layout-View>        name: tools          size: {Dimension 300 33} location: north layout-type: flow layout-insets: {Rect 2 6 2 0}
        (<Push-Tool>        name: open           size: {Dimension 22 22} tooltip?: #t tooltip-text: "Open..." resource: {Image-Resource "Open"} portfolio: :images action-handler: {Event-Handler :form on-open})
        (<Separator>                             size: {Dimension 32 0})
        (<Push-Tool>        name: edit           size: {Dimension 22 22} tooltip?: #t tooltip-text: "Edit" resource: {Image-Resource "Edit"} portfolio: :images action-handler: {Event-Handler :form on-edit})
        @wait
        (<Push-Tool>        name: clear          size: {Dimension 22 22} location: tail tooltip?: #t tooltip-text: "Clear" resource: {Image-Resource "Clear"} portfolio: :images action-handler: {Event-Handler :form on-clear})
        @wait
        (<Separator>                             size: {Dimension 6 0} location: tail)
        (<Push-Tool>        name: refresh        size: {Dimension 22 22} location: tail tooltip?: #t tooltip-text: "Refresh" resource: {Image-Resource "Refresh"} portfolio: :images action-handler: {Event-Handler :form on-refresh}))
      (<Splitter-View>      name: vertical       location: center orientation: vert mode: relative division: 50 style: document
        (<Border-View>      name: log-border     location: first border-type: edge style: entry
          (<Log-View>       name: log-view))
        (<Layout-View>      name: data-container location: second layout-type: fill
          (<No-Data-Viewer>)))))
  
  
  (method override (save-content moniker));;abstract
  (method override (default-extension));;abstract
  (method override (extensions));;abstract
  (method override (focus-document));;abstract
  (method override (current-history-item));;abstract
  (method override (compare-moniker moniker));;abstract
  
  
  (method override (finish rest)
    (nextmethod rest)
    ;; selection-handler: {Event-Handler :form on-selection-change}
    )
  
  
  ;;;
  ;;;; Host
  ;;;
  

  (method meta override (host-icon)
    {Image-Resource "Log"})
  
  
  (method meta override (host-title)
    "Log Viewer")
  
  
  (method meta override (host-size)
    {Dimension 850 500})


  ;;;
  ;;;; Controller
  ;;;


  (method override (get-document-controller)
    (unless document-controller
      (set! document-controller (new-document-controller)))
    document-controller)


  (method override (new-document-controller)
    (new Document-Controller self))
  
  
  (method override (install-scroller?)
    #t)
  
  
  (method (get-moniker)
    (get-moniker~ (get-document-controller)))
  
  
  (method (set-moniker moniker)
    (set-moniker~ (get-document-controller) moniker))
  
  
  (method override (verify-reload)
    )
  
  
  (method override (reload-moniker moniker)
    )


  (method override (get-modified?)
    (get-modified?~ (get-document-controller)))


  (method override (set-modified? state)
    (set-modified?~ (get-document-controller) state))
  
  
  (method (update-status)
    (update-status~ (get-document-controller)))
  
  
  (method (update-moniker-time moniker)
    (update-moniker-time~ (get-document-controller) moniker))


  (method override (tool-update tool?)
    )


  (method override (console-update console?)
    )
  
  
  ;;;
  ;;;; Input/Output
  ;;;
  
  
  (method override (load-content moniker)
    (open-file~ (get-tree) moniker)
    (invalidate-view))
  
  
  ;;;
  ;;;; Access
  ;;;
  
  
  (method (get-tree)
    (get-tree~ (locate 'log-view)))
  
  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method (on-open evt)
    (on-open~ (get-tree) evt))
  
  
  (method (on-edit evt)
    (on-edit~ (get-tree) evt))


  (method (on-clear evt)
    (on-clear~ (get-tree) evt))


  (method (on-refresh evt)
    (let ((log-view (locate 'log-view)))
      (update~ log-view)))


  (method (on-selection-change evt)
    (let ((sender (get-sender~ evt)))
      (case (get-name~ sender)
        ((log-tree)
         (let ((selection (get-single-selection~ sender)))
           (when selection
             (let ((node (get-user-data~ (get-row~ sender selection))))
               (view-data node))))))))
  
  
  ;;;
  ;;;; Viewer
  ;;;


  (method protected virtual (view-data node)
    (define (data-viewer-class data)
      (if (and data (is? data Viewable))
          (or (get-viewer-class~ data) No-Data-Viewer)
        No-Data-Viewer))
    
    (close-data-viewer)
    (when (is? node JML-Node)
      (let* ((data (get-property~ node 'data))
             (class (data-viewer-class data))
             (container (locate 'data-container)))
        (set! data-viewer
              (new class
                client: data
                parent: container))
        (layout-view~ container))))
  
  
  (method (close-data-viewer)
    (when data-viewer
      (close~ data-viewer)
      (set! data-viewer #f))))


;;;
;;;; No-Data
;;;


(class No-Data-Viewer extends Border-View
  
  
  (property client accessors generate)
  
  
  (form
    (<install> border-type: edge style: entry))
  
  
  (method override (draw surface context)
    (define Background-Font
      {Font Heading2})
    
    (define (draw-no-data surface)
      (set-font~ surface Background-Font)
      (let* ((title (localize "No Data"))
             (extent (get-text-extent~ surface title))
             (pos (center extent (get-display-size))))
        (draw-text~ surface (get-h~ pos) (get-v~ pos) title {Color Medium-Gray})))
    
    (nextmethod surface context)
    (draw-no-data surface))))
