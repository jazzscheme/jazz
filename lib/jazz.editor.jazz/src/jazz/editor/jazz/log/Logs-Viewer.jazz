;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Logs Viewer
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.editor.jazz.log.Logs-Viewer jazz


(import (jazz.debuggee.ui)
        (jazz.debuggee.view)
        (jazz.event)
        (jazz.geometry)
        (jazz.graphic)
        (jazz.handler)
        (jazz.io)
        (jazz.layout)
        (jazz.locale)
        (jazz.log)
        (jazz.markup)
        (jazz.outline)
        (jazz.resource)
        (jazz.tree)
        (jazz.ui)
        (jazz.ui.dialog))


(class Logs-Viewer extends Layout-View

  
  (method meta override (external-name self . rest)
    'logs-viewer)


  (slot logs-directory initialize #f)
  (slot data-viewer    initialize #f)


  (form
    (<install>                                                   title: "Logs Viewer" layout-type: border layout-insets: {Rect 2 2 2 2}
      (<Layout-View>                       name: tools           size: {Dimension 300 33} location: north layout-type: flow layout-insets: {Rect 2 6 2 0}
        (<Push-Tool>                       name: memory-logs     size: {Dimension 22 22} tooltip?: #t tooltip-text: "Browse Memory Logs" resource: {Image-Resource "Trait"} portfolio: :images action-handler: {Event-Handler :form on-memory-logs})
        (<Separator>)
        (<Push-Tool>                       name: directory-logs  size: {Dimension 22 22} tooltip?: #t tooltip-text: "Browse Logs..." resource: {Image-Resource "Open"} portfolio: :images action-handler: {Event-Handler :form on-directory-logs})
        (<Separator>)
        (<Push-Tool>                       name: refresh-logs    size: {Dimension 22 22} tooltip?: #t tooltip-text: "Refresh Logs" resource: {Image-Resource "Refresh"} portfolio: :images action-handler: {Event-Handler :form on-refresh-logs})
        (<Push-Tool>                       name: open            size: {Dimension 22 22} location: tail tooltip?: #t tooltip-text: "Open..." resource: {Image-Resource "Open"} portfolio: :images action-handler: {Event-Handler :form on-open})
        (<Separator>                                             size: {Dimension 10 0} location: tail)
        (<Push-Tool>                       name: clear           size: {Dimension 22 22} location: tail tooltip?: #t tooltip-text: "Clear" resource: {Image-Resource "Clear"} portfolio: :images action-handler: {Event-Handler :form on-clear})
        (<Separator>                                             size: {Dimension 6 0} location: tail)
        (<Push-Tool>                       name: refresh         size: {Dimension 22 22} location: tail tooltip?: #t tooltip-text: "Refresh" resource: {Image-Resource "Refresh"} portfolio: :images action-handler: {Event-Handler :form on-refresh}))
      (<Splitter-View>                     name: vertical        location: center orientation: vert mode: relative division: 50 style: document
        (<Splitter-View>                   name: horizontal      location: first orientation: horz mode: relative division: 20 style: document
          (<Border-View>                   name: logs-border     location: first border-type: edge style: entry
            (<Scroller-View>                                     style: document vscroll?: #t
              (<!>                         name: content         layout-type: fill
                (<Tree-Header>                                   style: document
                  (<!>                     name: content
                    (<Tree-View>           name: logs-tree       filled-column: log portfolio: :images selection-handler: {Event-Handler :form on-selection-change} double-click-handler: {Event-Handler :form on-double-click} return-press-handler: {Event-Handler :form on-return-press}
                      (<Tree-Node-Column>  name: log             title: "Log" toplevel-controls?: #f width: 200)))))))
          (<Border-View>                   name: log-border      location: second border-type: edge style: entry
            (<Log-View>                    name: log-view
              (<!>                         name: scroller
                (<!>                       name: content
                  (<!>                     name: header
                    (<!>                   name: content
                      (<!>                 name: log-tree        selection-handler: {Event-Handler :form on-selection-change} double-click-handler: {Event-Handler :form on-double-click} return-press-handler: {Event-Handler :form on-return-press}))))))))
        (<Layout-View>                     name: data-container  location: second layout-type: fill
          (<No-Data-Viewer>)))))


  (method override (finish self initargs)
    (nextmethod self initargs)
    (refresh-logs self))
  
  
  ;;;
  ;;;; Host
  ;;;
  

  (method meta override (host-icon self)
    {Image-Resource "Log"})
  
  
  (method meta override (host-title self)
    "Logs Viewer")
  
  
  (method meta override (host-size self)
    {Dimension 850 500})
  
  
  (method override (client-activate self)
    (perserving-refresh-logs self))
  
  
  ;;;
  ;;;; Access
  ;;;
  
  
  (method package (get-tree self)
    (locate self 'logs-tree))
  
  
  ;;;
  ;;;; Events
  ;;;
  
  
  (definition Logs-Directory
    {Directory Settings "logs"})
  
  
  (definition (with-directory default? proc)
    (if (and default? (exists? Logs-Directory))
        (with-preserved-current-directory
         (lambda ()
           (proc Logs-Directory)))
      (proc #f)))
  
  
  (method (on-memory-logs self evt)
    (set! logs-directory #f)
    (refresh-logs self))
  
  
  (method (on-directory-logs self evt)
    (with-directory (get-shift? evt)
      (lambda (dir)
        (let ((directory (choose-directory directory: dir)))
          (set! logs-directory directory)
          (refresh-logs self)))))
  
  
  (method (on-refresh-logs self evt)
    (refresh-logs self))
  
  
  (method (perserving-refresh-logs self)
    (let ((tree (get-tree self)))
      (with-preserved-selection tree
        (lambda ()
          (refresh-logs self))
        use: 'data
        generate-event?: #t)))
  
  
  (method public (refresh-logs self)
    (close-data-viewer self)
    (view-log (locate self 'log-view) #f)
    (view-logs self))
  
  
  (method package (on-open self evt)
    (with-directory (get-shift? evt)
      (lambda (dir)
        (let* ((tree (get-tree self))
               (file (choose-file extensions: '(("Log Files" . "jlog")) directory: dir))
               (log (new Log file: file load?: #t))
               (log-view (locate self 'log-view)))
          (set-selection tree '())
          (view-log log-view log)))))


  (method package (on-clear self evt)
    (on-refresh self evt))


  (method package (on-refresh self evt)
    (let ((log-view (locate self 'log-view)))
      (update log-view)))


  (method package (on-selection-change self evt)
    (let ((sender (get-sender evt)))
      (case (get-name sender)
        ((logs-tree)
         (let ((selection (get-single-selection sender)))
           (let ((log-view (locate self 'log-view))
                 (log (and selection (get-user-data (get-row sender selection)))))
             (close-data-viewer self)
             (when (and log (get-file log))
               (reload log))
             (view-log log-view log))))
        ((log-tree)
         (let ((selection (get-single-selection sender)))
           (when selection
             (let ((node (get-user-data (get-row sender selection))))
               (view-data self node))))))))


  (method (on-double-click self evt)
    (let ((sender (get-sender evt)))
      (case (get-name sender)
        ((log-tree)
         (let ((selection (get-single-selection sender)))
           (when selection
             (let ((failure (get-user-data (get-row sender selection))))
               (edit-location self failure))))))))
  
  
  (method override (on-return-press self evt)
    (on-double-click self evt))
  
  
  ;;;
  ;;;; Update
  ;;;


  (method (view-logs self)
    (define (insert-log tree log)
      (let ((name (->string (get-name log)))
            (image (if (get-file log) {Image-Resource "Document"} {Image-Resource "Script"})))
        (add-row tree children: (list (new Tree-Node title: name image: image)) user-data: log)))
    
    (define (insert-file tree file)
      (let ((name (get-base file)))
        (add-row tree children: (list (new Tree-Node title: name image: {Image-Resource "Document"})) user-data: (new Log file: file))))
    
    (let ((tree (get-tree self)))
      (remove-every-row tree)
      (with-update-locked tree
        (lambda ()
          (if (not logs-directory)
              (for-each (lambda (log)
                          (insert-log tree log))
                        (get-logs))
            (iterate-directory logs-directory
              (lambda (file)
                (let ((extension (get-extension file)))
                  (when (extension=? extension "jlog")
                    (insert-file tree file))))))))))
  
  
  ;;;
  ;;;; Viewer
  ;;;


  (method protected virtual (view-data self node)
    (define (data-viewer-class data)
      (if (and data (is? data Viewable))
          (or (get-viewer-class data) No-Data-Viewer)
        No-Data-Viewer))
    
    (close-data-viewer self)
    (when (is? node Markup-Node)
      (let* ((data (get-property node 'data))
             (class (data-viewer-class data))
             (container (locate self 'data-container)))
        (set! data-viewer
              (new class
                client: data
                parent: container))
        (layout-view container))))
  
  
  (method (close-data-viewer self)
    (when data-viewer
      (close data-viewer)
      (set! data-viewer #f)))

  
  ;;;
  ;;;; Edit
  ;;;
  
  
  (method package virtual (edit-location self failure)
    ))


;;;
;;;; No-Data
;;;


(class No-Data-Viewer extends Border-View
  
  
  (property client accessors generate)
  
  
  (form
    (<install> border-type: edge style: entry))
  
  
  (method override (draw self surface context)
    (define Background-Font
      {Font Heading2})
    
    (define (draw-no-data surface)
      (set-font surface Background-Font)
      (let* ((title (localize "No Data"))
             (extent (get-text-extent surface title))
             (pos (center extent (get-display-size self))))
        (draw-text surface (get-h pos) (get-v pos) title {Color Medium-Gray})))
    
    (nextmethod self surface context)
    (draw-no-data surface))))
