;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; User Log
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2012
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.editor.jazz.log.User-Log jazz


(import (jazz.debuggee)
        (jazz.library))


(class User-Log extends Log-View
  
  
  (method meta override (external-name . rest)
    'user-log)


  (method override (finish initargs)
    (nextmethod initargs)
    (zoom~ (locate 'splitter) (locate 'log-border))
    (set-border-type~ (locate 'log-border) 'none)
    (close~ (locate 'separator1))
    (set-size~ (locate 'separator2) {Dimension 8 0})
    (close~ (locate 'separator3)))
  
  
  ;;;
  ;;;; Host
  ;;;
  

  (method meta override (host-icon)
    {Image-Resource "Log"})
  
  
  (method meta override (host-title)
    "User Log")
  
  
  ;;;
  ;;;; Docked
  ;;;
  
  
  (method override (get-tools-view)
    (locate 'tools))
  
  
  (method override (focus-default)
    (let ((tree (locate 'log-tree)))
      (acquire-focus~ tree)))
  
  
  ;;;
  ;;;; View
  ;;;


  (method (view-entry node)
    )
  
  
  ;;;
  ;;;; Edit
  ;;;
  
  
  (method (edit-entry node)
    @convert-schema-package
    (let ((entry (get-entry~ node)))
      (when entry
        (typecase entry
          ((Data-Table) (output-table entry))
          (else
           (user-message "No editor available for {s}" entry)
           (bell))))))
  
  
  ;; temp copy/paste of code
  @convert-sql-package
  (method (output-tables tables (name: name #f) (select?: select? #t))
    (let ((text (get-sql-console-text)))
      (output-tables~ text tables name))
    (when select?
      (let ((appl (get-application)))
        (select-workspace~ appl 'sql))))
  
  
  ;; temp copy/paste of code
  @convert-sql-package
  (method (output-table table (name: name #f) (select?: select? #t))
    (output-tables (list table) name: name select?: select?))))
