;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Jazz Parser
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.editor.jazz.parser.Jazz-Parser jazz


(import (jazz.editor.jazz)
        (jazz.editor.lisp))


(class Jazz-Parser extends Lisp-Parser
  
  
  (method override (text-view-class)
    Jazz-Text-View)
  
  
  (method override (explorer-class file)
    Jazz-Explorer)
  
  
  (method override (add-references name <string> adder)
    (define (parse-composite-colon)
      (when (string-find-reversed name #\:)
        (adder name)
        (for-each adder (split-string name #\:))
        #t))
    
    (define (parse-composite-period)
      (parse-composite #\.))
    
    (define (parse-composite-tilde)
      (parse-composite #\~))
    
    (define (parse-composite separator)
      (let ((pos (string-find-reversed name separator)))
        (when pos
          (adder name)
          (adder (substring name 0 pos))
          (adder (substring name (+ pos 1) (string-length name)))
          #t)))
    
    (or (parse-composite-colon)
        (parse-composite-period)
        (parse-composite-tilde)
        (nextmethod name adder)))))
