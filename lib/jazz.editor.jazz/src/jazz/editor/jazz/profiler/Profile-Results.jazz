;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Profile Results
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.editor.jazz.profiler.Profile-Results jazz


(import (jazz.debugger)
        (jazz.feedback)
        (jazz.graphic)
        (jazz.handler)
        (jazz.jml)
        (jazz.jrm)
        (jazz.layout)
        (jazz.resource)
        (jazz.tree)
        (jazz.ui)
        (jazz.view))


(class Profile-Results extends Layout-View
  
  
  (form
    (<install>                               size: {Dimension 600 400} layout-type: border position: {Point 1 0}
      (<Layout-View>          name: tools
        (<Push-Tool>          name: start    size: {Dimension 22 22} location: tail tooltip?: #t tooltip-text: "Start Profile" resource: {Image-Resource "Run"} portfolio: :images action-handler: {Event-Handler :guest on-start-profiler})
        (<Push-Tool>          name: stop     size: {Dimension 22 22} location: tail tooltip?: #t tooltip-text: "Stop Profile" resource: {Image-Resource "Stop"} portfolio: :images action-handler: {Event-Handler :guest on-stop-profiler})
        (<Separator>                         size: {Dimension 6 0})
        (<Push-Tool>          name: refresh  size: {Dimension 22 22} tooltip?: #t tooltip-text: "Refresh Profile" resource: {Image-Resource "Refresh"} portfolio: :images action-handler: {Event-Handler :guest on-refresh-profile})
        (<Separator>                         size: {Dimension 4 0})
        (<Push-Tool>          name: reset    size: {Dimension 22 22} tooltip?: #t tooltip-text: "Reset Profile" resource: {Image-Resource "Clear"} portfolio: :images action-handler: {Event-Handler :guest on-reset-profile}))
      (<Layout-View>                         layout-type: border location: center background: {Color Medium}
        (<Layout-View>                       size: {Dimension 100 24} location: north layout-type: box layout-insets: {Rect 0 1 0 0} layout-padding: 2
          (<Push-Tool>        name: view     size: {Dimension 22 22} tooltip?: #t tooltip-text: "View Profile..." resource: {Image-Resource "Edit"} portfolio: :images action-handler: {Event-Handler :form on-choose-profile})
          (<Separator>                       size: {Dimension 4 0})
          (<Label-View>       name: profile  size: {Dimension 250 23} location: center)
          (<Label-View>                      title: "Kind:" size: {Dimension 31 23} location: tail)
          (<Layout-View>                     size: {Dimension 85 22} layout-type: fill layout-insets: {Rect 0 2 0 2} location: tail
            (<Border-View>                   border-color: {Color Dark}
              (<Combo-Box>    name: profiler content-change-handler: {Event-Handler :form on-change-profiler})))
          (<Separator>                       size: {Dimension 12 0} location: tail)
          (<Label-View>                      title: "Depth:" size: {Dimension 40 23} location: tail)
          (<Layout-View>                     size: {Dimension 30 22} layout-type: fill layout-insets: {Rect 0 2 0 2} location: tail
            (<Border-View>                   border-color: {Color Dark}
              (<Combo-Box>    name: depth    content-change-handler: {Event-Handler :form on-change-depth})))
          (<Separator>                       size: {Dimension 12 0} location: tail)
          (<Label-View>                      title: "Shown:" size: {Dimension 40 23} location: tail)
          (<Layout-View>                     size: {Dimension 30 22} layout-type: fill layout-insets: {Rect 0 2 0 2} location: tail
            (<Border-View>                   border-color: {Color Dark}
              (<Combo-Box>    name: shown    content-change-handler: {Event-Handler :form on-change-shown}))))
        (<Scroller-View>                     location: center style: document hscroll?: #t vscroll?: #t
          (<content~>                        layout-type: fill
            (<Tree-Header>                   style: document
              (<content~>
                (<Calls-Tree> name: calls    selection-handler: {Selection-Handler :form on-select-location} return-press-handler: {Event-Handler :form on-return-press}))))))))
  
  
  (method meta override (external-name . rest)
    'Profiles)
  
  
  (method override (finish initargs)
    (nextmethod initargs)
    (set-choices~ (locate 'profiler)
      '((statprof "Statistical")
        (detprof "Deterministic")))
    (set-value~ (locate 'profiler) 'statprof)
    (set-choices~ (locate 'depth)
      (loop (for d from 0 to 8)
            (collect (list d (->string d)))))
    (set-value~ (locate 'depth) 4)
    (set-choices~ (locate 'shown)
      (loop (for d from 0 to 8)
            (collect (list d (->string d)))))
    (set-value~ (locate 'shown) 1))
  
  
  ;;;
  ;;;; Host
  ;;;
  
  
  (method meta override (host-icon)
    {Image-Resource "Constructor"})
  
  
  (method meta override (host-title)
    "Profiles")
  
  
  (method meta override (host-position)
    {Point 28 14})
  
  
  (method meta override (host-size)
    {Dimension 408 608})
  
  
  ;;;
  ;;;; Docked
  ;;;
  
  
  (method override (get-tools-view)
    (locate 'tools))
  
  
  (method override (focus-default)
    (acquire-focus~ (get-tree)))
  
  
  ;;;
  ;;;; Access
  ;;;
  
  
  (method (get-tree)
    (locate 'calls))
  
  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method (on-start-profiler evt)
    (user-feedback "Profiler started")
    (profiler-start~ (require-focused-process~ (get-debugger-manager))))
  
  
  (method (on-stop-profiler evt)
    (profiler-stop~ (require-focused-process~ (get-debugger-manager)))
    (view-profile)
    (user-message "Profiler stopped"))
  
  
  (method (on-choose-profile evt)
    (define (present-profile profile)
      (if profile
          (->string profile)
        "<default>"))
    
    (let ((process (require-focused-process~ (get-debugger-manager))))
      (let ((profiles (profiler-profiles~ process))
            (profile (profiler-selected-profile~ process)))
        (profiler-selected-profile-set!~ process (request-list (sort string<? profiles key: present-profile) title: "Choose Profile" invite: "Select a profile from the list" present: present-profile selected: profile))
        (view-profile))))
  
  
  (method (on-change-profiler evt)
    (reset-profile (get-value~ (get-sender~ evt)) #f #f))
  
  
  (method (on-change-depth evt)
    (reset-profile #f (get-value~ (get-sender~ evt)) #f))
  
  
  (method (on-change-shown evt)
    (view-profile))
  
  
  (method (on-reset-profile evt)
    (let ((all? (get-shift?~ evt)))
      (reset-profile #f #f all?)))
  
  
  (method (reset-profile profiler depth all?)
    (profile-reset~ (require-focused-process~ (get-debugger-manager)) profiler depth all?)
    (view-profile))
  
  
  (method (on-refresh-profile evt)
    (view-profile))
  
  
  (method (on-select-location evt)
    (let ((user-origin (get-user-origin~ evt)))
      (edit-source)
      ;; as a quick solution we let the previous call give the focus to the document
      ;; because a lot of framework behavior depends on a new document gaining focus
      (when user-origin
        (acquire-focus~ (locate 'calls)))))
  
  
  ;;;
  ;;;; Edition
  ;;;
  
  
  (definition *frame-indicator*
    (new Location-Indicator {Color red: 255 green: 146 blue: 94}))
  
  
  (method (edit-source)
    (edit-location~ *frame-indicator* (selected-location)))
  
  
  ;;;
  ;;;; Selection
  ;;;
  
  
  (method (selected-frame)
    (let ((tree (get-tree)))
      (let ((rank (get-single-selection~ tree)))
        (if (not rank)
            #f
          (get-user-data~ (get-row~ tree rank))))))
  
  
  (method (selected-location)
    (let ((frame (selected-frame)))
      (if (not frame)
          #f
        (second frame))))
  
  
  ;;;
  ;;;; Update
  ;;;
  
  
  (method (view-profile)
    (with-cursor :wait
      (lambda ()
        (let ((tree (get-tree))
              (profile (parameterize ((receive-timeout 30))
                         (profiler-profile~ (require-focused-process~ (get-debugger-manager))))))
          (when profile
            (bind (label profiler depth frames-count frames-duration calls-count calls-duration process-info calls) profile
              (bind (user-time sys-time real-time gc-time bytes-allocated) process-info
                (define (make-children frame count duration)
                  (let ((duration (cond ((and (not (and duration calls-duration (> calls-duration 0)))
                                              (and count calls-count (> calls-count 0) frames-duration))
                                         (/ (cast <fl> (* frames-duration count)) calls-count))
                                        (else
                                         duration))))
                    (let ((fraction (cond ((and duration calls-duration (> calls-duration 0))
                                           (/ (cast <fl> duration) calls-duration))
                                          ((and count calls-count (> calls-count 0) frames-duration)
                                           (/ (cast <fl> count) calls-count))
                                          (else
                                           #f))))
                      (list (new Tree-Node title: (present-frame frame)
                                 image: {Image-Resource "Link"})
                            (new Tree-Label title: (if count (->string count) ""))
                            (new Tree-Label title: (if duration (format "{r precision: 0}" duration) ""))
                            (new Tree-Label title: (if fraction (format "{r precision: 2}" (* fraction 100)) ""))))))
                
                (define (present-frame frame)
                  (if (string? frame)
                      frame
                    (let ((name (and frame (car frame))))
                      (if name
                          (present-reference name)
                        "(interaction)"))))
                
                (define (calculate-fps)
                  (format ", count: {a}{?, average: {a} ms~}{?, fps: {a}~}"
                          frames-count
                          (and (/= frames-count 0) (inexact->exact (truncate (exact->inexact (/ frames-duration frames-count)))))
                          (and (/= frames-duration 0) (inexact->exact (truncate (/ frames-count (milliseconds->seconds frames-duration)))))))
                
                (define (add-call-rows call (father #f))
                  (bind (stack count duration) call
                    (if (null? stack)
                        (add-row~ tree father: father children: (make-children "<nostack>" count duration) user-data: #f)
                      (bind (head-frame . frames) stack
                        (let ((row (add-row~ tree father: father children: (make-children head-frame count duration) user-data: head-frame)))
                          (for-each (lambda (frame)
                                      (add-row~ tree father: row children: (make-children frame #f #f) user-data: frame))
                                    frames))))))
                
                (set-value~ (locate 'profiler) profiler)
                (set-value~ (locate 'depth) depth)
                (let ((shown (min depth (get-value~ (locate 'shown)))))
                  (set-value~ (locate 'shown) shown)
                  (remove-every-row~ tree)
                  (let ((alloc (fxfloor/ bytes-allocated 1024))
                        (fps (calculate-fps)))
                    (let ((title (format "{?{a}: ~}program: {a} ms, kernel: {a} ms, gc: {a} ms, allocation: {a} kb{? {a}~}" label user-time sys-time gc-time alloc fps)))
                      (set-title~ (locate 'profile) title)
                      (set-tooltip?~ (locate 'profile) #t)
                      (set-tooltip-text~ (locate 'profile) title)))
                  (if (= shown 0)
                      (with-update-locked~ tree
                        (lambda ()
                          (for-each add-call-rows calls)))
                    (let ((locator-table (make-table test: eq?))
                          (null-stack "<nostack>"))
                      (for-each (lambda (call)
                                  (bind (stack count duration) call
                                    (if (null? stack)
                                        (bind (total-count calls) (table-ref locator-table null-stack '(0 ()))
                                          (table-set! locator-table null-stack (list (+ total-count count) (cons call calls))))
                                      (for-each (lambda (frame)
                                                  (let ((locator (car frame)))
                                                    (bind (total-count calls) (table-ref locator-table locator '(0 ()))
                                                      (table-set! locator-table locator (list (+ total-count count) (cons call calls))))))
                                                (if (= shown depth)
                                                    stack
                                                  (subseq stack 0 shown))))))
                                calls)
                      (with-update-locked~ tree
                        (lambda ()
                          (for-each (lambda (kv)
                                      (bind (locator total-count calls) kv
                                        (let ((locator-name (if (string? locator) locator (list locator))))
                                          (let ((father (add-row~ tree children: (make-children locator-name total-count #f) user-data: #f)))
                                            (for-each (lambda (call)
                                                        (add-call-rows call father))
                                                      (sort > calls key: second))))))
                                    (sort > (table->list locator-table) key: second)))))))))))))))


;;;
;;;; Calls-Tree
;;;


(class Calls-Tree extends Tree-View
  
  
  (form
    (<install>                              portfolio: :images filled-column: procedure
      (<Tree-Node-Column>  name: procedure  title: "Procedure" width: 250)
      (<Tree-Label-Column> name: count      title: "Count" width: 50 justification: tail)
      (<Tree-Label-Column> name: duration   title: "Milliseconds" width: 75 justification: tail)
      (<Tree-Label-Column> name: percentage title: "Percentage" width: 75 justification: tail)))))
