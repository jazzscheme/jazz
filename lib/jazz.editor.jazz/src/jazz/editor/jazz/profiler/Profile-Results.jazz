;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Profile Results
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.editor.jazz.profiler.Profile-Results jazz


(import (jazz.debugger)
        (jazz.editor.jazz)
        (jazz.graphic)
        (jazz.jml)
        (jazz.library)
        (jazz.system)
        (jazz.ui)
        (jazz.ui.view)
        (statprof))


(class Profile-Results extends Layout-View
  
  
  (form
    (<install>                                      size: {Dimension 412 612} layout-type: border
      (<Layout-View>          name: tools
        (<Push-Tool>          name: start           size: {Dimension 22 22} location: tail tooltip?: #t tooltip-text: "Start Profile" resource: {Image-Resource "Run"} portfolio: :images action-handler: {Event-Handler :form on-start-profile})
        (<Push-Tool>          name: stop            size: {Dimension 22 22} location: tail tooltip?: #t tooltip-text: "Stop Profile" resource: {Image-Resource "Stop"} portfolio: :images action-handler: {Event-Handler :form on-stop-profile})
        (<Separator>)
        (<Push-Tool>          name: reset           size: {Dimension 22 22} location: tail tooltip?: #t tooltip-text: "Reset" resource: {Image-Resource "Clear"} portfolio: :images action-handler: {Event-Handler :form on-reset-profile})
        (<Separator>                                size: {Dimension 6 0})
        (<Push-Tool>          name: refresh         size: {Dimension 22 22} tooltip?: #t tooltip-text: "Refresh" resource: {Image-Resource "Refresh"} portfolio: :images action-handler: {Event-Handler :form on-refresh-profile}))
      (<Scroller-View>                              location: center style: document hscroll?: #t vscroll?: #t
        (<content!>                                 layout-type: fill
          (<Tree-Header>                            style: document
            (<content!>
              (<Calls-Tree>   name: calls           selection-handler: {Selection-Handler :form on-select-location} return-press-handler: {Event-Handler :form on-return-press})))))))
  
  
  ;;;
  ;;;; Host
  ;;;
  
  
  (method meta override (host-icon)
    {Image-Resource "Constructor"})
  
  
  (method meta override (host-title)
    "Profile Results")
  
  
  (method meta override (host-position)
    {Point 28 14})
  
  
  (method meta override (host-size)
    {Dimension 408 608})
  
  
  ;;;
  ;;;; Docked
  ;;;
  
  
  (method override (get-tools-view)
    (locate 'tools))
  
  
  (method override (focus-default)
    (acquire-focus~ (get-tree)))
  
  
  ;;;
  ;;;; Access
  ;;;
  
  
  (method (get-tree)
    (locate 'calls))
  
  
  (method (get-active-process)
    (or (get-focused-process~ (get-debugger-manager))
        (begin
          (message-box "There is no focused process")
          (throw-cancel))))
  
  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method (on-start-profile evt)
    (user-feedback "Profile started")
    (profiler-start~ (get-active-process)))
  
  
  (method (on-stop-profile evt)
    (profiler-stop~ (get-active-process))
    (view-profile)
    (user-message "Profile stopped"))
  
  
  (method (on-reset-profile evt)
    (profiler-reset~ (get-active-process))
    (view-profile)
    (user-message "Profile reset"))
  
  
  (method (on-refresh-profile evt)
    (view-profile))
  
  
  (method (on-select-location evt)
    (edit-source))
  
  
  ;;;
  ;;;; Edition
  ;;;
  
  
  (definition *frame-indicator*
    (new Frame-Indicator color: {Color red: 255 green: 146 blue: 94}))
  
  
  (method (edit-source)
    (edit~ *frame-indicator* (selected-location)))
  
  
  ;;;
  ;;;; Selection
  ;;;
  
  
  (method (selected-frame)
    (let ((tree (get-tree)))
      (let ((rank (get-single-selection~ tree)))
        (if (not rank)
            #f
          (get-user-data~ (get-row~ tree rank))))))
  
  
  (method (selected-location)
    (let ((frame (selected-frame)))
      (if (not frame)
          #f
        (second frame))))
  
  
  ;;;
  ;;;; Update
  ;;;
  
  
  (method (view-profile)
    (view-profile~ (get-tree) (profiler-result~ (get-active-process)))))


;;;
;;;; Calls-Tree
;;;


(class Calls-Tree extends Tree-View
  
  
  (form
    (<install>                              portfolio: :images filled-column: procedure
      (<Tree-Node-Column>  name: procedure  title: "Procedure" width: 250)
      (<Tree-Label-Column> name: count      title: "Time" width: 75)
      (<Tree-Label-Column> name: percentage title: "Percentage" width: 75)))
  
  
  ;;;
  ;;;; Update
  ;;;
  
  
  (method (view-profile profiler-result)
    (remove-every-row)
    (with-update-locked
      (lambda ()
        (bind (total unknown calls) profiler-result
          (define (calculate-percentage count)
            (let ((precision 100.))
              (/ (round (* (/ count total) 100 precision)) precision)))
          
          (define (make-children frame count)
            (let ((procedure (if (string? frame) frame (or (when frame (car frame)) "(interaction)")))
                  (count (if count (->string count) ""))
                  (percentage (if count (->string (calculate-percentage count)) "")))
              (list (new Tree-Node title: procedure image: {Image-Resource "Link"}) (new Tree-Label title: count) (new Tree-Label title: percentage))))
          
          (when (> unknown 0)
            (add-row children: (make-children "<unknown>" unknown) user-data: {}))
          (for-each (lambda (call)
                      (bind (stack . count) call
                        (if (null? stack)
                            (add-row children: (make-children "(interaction)" count) user-data: {})
                          (bind (head-frame . frames) (reverse stack)
                            (let ((row (add-row children: (make-children head-frame count) user-data: head-frame)))
                              (for-each (lambda (frame)
                                          (add-row father: row children: (make-children frame #f) user-data: frame))
                                        frames))))))
                    (sort > calls key: cdr)))))))


(register-autoclass Calls-Tree))
