;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Profile Results
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.editor.jazz.profiler.Profile-Results jazz


(import (jazz.debugger)
        (jazz.detprof)
        (jazz.editor.jazz)
        (jazz.graphic)
        (jazz.jml)
        (jazz.library)
        (jazz.system)
        (jazz.ui)
        (jazz.ui.view)
        (profiler)
        (statprof))


(class Profile-Results extends Layout-View
  
  
  (slot profile initialize #f)
  
  
  (form
    (<install>                               size: {Dimension 600 400} layout-type: border position: {Point 1 0}
      (<Layout-View>          name: tools
        (<Push-Tool>          name: start    size: {Dimension 22 22} location: tail tooltip?: #t tooltip-text: "Start Profile" resource: {Image-Resource "Run"} portfolio: :images action-handler: {Event-Handler :form on-start-profiler})
        (<Push-Tool>          name: stop     size: {Dimension 22 22} location: tail tooltip?: #t tooltip-text: "Stop Profile" resource: {Image-Resource "Stop"} portfolio: :images action-handler: {Event-Handler :form on-stop-profiler})
        (<Separator>                         size: {Dimension 6 0})
        (<Push-Tool>          name: refresh  size: {Dimension 22 22} tooltip?: #t tooltip-text: "Refresh Profile" resource: {Image-Resource "Refresh"} portfolio: :images action-handler: {Event-Handler :form on-refresh-profile})
        (<Separator>                         size: {Dimension 4 0})
        (<Push-Tool>          name: reset    size: {Dimension 22 22} tooltip?: #t tooltip-text: "Reset Profile" resource: {Image-Resource "Clear"} portfolio: :images action-handler: {Event-Handler :form on-reset-profile}))
      (<Layout-View>                         layout-type: border location: center background: {Color name: Medium}
        (<Layout-View>                       size: {Dimension 100 22} location: north layout-type: flow
          (<Push-Tool>        name: view     size: {Dimension 22 22} tooltip?: #t tooltip-text: "View Profile..." resource: {Image-Resource "Edit"} portfolio: :images action-handler: {Event-Handler :form on-choose-profile})
          (<Separator>                       size: {Dimension 4 0})
          (<Label-View>       name: profile  size: {Dimension 180 23} mouse-down-handler: {Event-Handler :form on-view-profile})
          (<Label-View>                      title: "Kind:" size: {Dimension 31 23} location: tail)
          (<Layout-View>                     size: {Dimension 85 22} layout-type: fill layout-insets: {Rect 0 2 0 2} location: tail
            (<Border-View>                   border-color: {Color name: Dark}
              (<Combo-Box>    name: profiler content-change-handler: {Event-Handler :form on-change-profiler})))
          (<Separator>                       size: {Dimension 12 0} location: tail)
          (<Label-View>                      title: "Depth:" size: {Dimension 40 23} location: tail)
          (<Layout-View>                     size: {Dimension 30 22} layout-type: fill layout-insets: {Rect 0 2 0 2} location: tail
            (<Border-View>                   border-color: {Color name: Dark}
              (<Combo-Box>    name: depth    content-change-handler: {Event-Handler :form on-change-depth}))))
        (<Scroller-View>                     location: center style: document hscroll?: #t vscroll?: #t
          (<content!>                        layout-type: fill
            (<Tree-Header>                   style: document
              (<content!>
                (<Calls-Tree> name: calls    selection-handler: {Selection-Handler :form on-select-location} return-press-handler: {Event-Handler :form on-return-press}))))))))
  
  
  (method override (finish initargs)
    (nextmethod initargs)
    (set-choices~ (locate 'profiler)
      '((statprof "Statistical")
        (detprof "Deterministic")))
    (set-value~ (locate 'profiler) 'statprof)
    (set-choices~ (locate 'depth)
      (loop (for d from 0 to 8)
            (collect (list d (->string d)))))
    (set-value~ (locate 'depth) 2))
  
  
  ;;;
  ;;;; Host
  ;;;
  
  
  (method meta override (host-icon)
    {Image-Resource "Constructor"})
  
  
  (method meta override (host-title)
    "Profile Results")
  
  
  (method meta override (host-position)
    {Point 28 14})
  
  
  (method meta override (host-size)
    {Dimension 408 608})
  
  
  ;;;
  ;;;; Docked
  ;;;
  
  
  (method override (get-tools-view)
    (locate 'tools))
  
  
  (method override (focus-default)
    (acquire-focus~ (get-tree)))
  
  
  ;;;
  ;;;; Access
  ;;;
  
  
  (method (get-tree)
    (locate 'calls))
  
  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method (on-start-profiler evt)
    (user-feedback "Profiler started")
    (profiler-start~ (require-focused-process~ (get-debugger-manager)) profile))
  
  
  (method (on-stop-profiler evt)
    (profiler-stop~ (require-focused-process~ (get-debugger-manager)) profile)
    (view-profile)
    (user-message "Profiler stopped"))
  
  
  (method (on-choose-profile evt)
    (define (present-profile profile)
      (or profile "<default>"))
    
    (let ((profiles (profiler-profiles~ (require-focused-process~ (get-debugger-manager)))))
      (set! profile (request-list (sort string<? profiles key: present-profile) title: "Choose Profile" invite: "Select a profile from the list" present: present-profile selected: profile))
      (view-profile)))
  
  
  (method (on-change-profiler evt)
    (reset-profile (get-value~ (get-sender~ evt)) #f))
  
  
  (method (on-change-depth evt)
    (reset-profile #f (get-value~ (get-sender~ evt))))
  
  
  (method (on-reset-profile evt)
    (reset-profile #f #f))
  
  
  (method (reset-profile profiler depth)
    (profile-reset~ (require-focused-process~ (get-debugger-manager)) profile profiler depth)
    (view-profile))
  
  
  (definition public (track-history sender initiator)
    )
  
  
  (method (on-refresh-profile evt)
    (view-profile))
  
  
  (method (on-select-location evt)
    (edit-source))
  
  
  ;;;
  ;;;; Edition
  ;;;
  
  
  (definition *frame-indicator*
    (new Frame-Indicator color: {Color red: 255 green: 146 blue: 94}))
  
  
  (method (edit-source)
    (edit~ *frame-indicator* (selected-location)))
  
  
  ;;;
  ;;;; Selection
  ;;;
  
  
  (method (selected-frame)
    (let ((tree (get-tree)))
      (let ((rank (get-single-selection~ tree)))
        (if (not rank)
            #f
          (get-user-data~ (get-row~ tree rank))))))
  
  
  (method (selected-location)
    (let ((frame (selected-frame)))
      (if (not frame)
          #f
        (second frame))))
  
  
  ;;;
  ;;;; Update
  ;;;
  
  
  (method (view-profile)
    (let ((profile (profiler-profile~ (require-focused-process~ (get-debugger-manager)) profile))
          (tree (get-tree)))
      (when profile
        (bind (profiler label depth frame-duration frame-count total-count total-duration unknown-count unknown-duration calls) profile
          (let ((frequency (profiler-performance-frequency)))
            (let ((seconds (/ total-duration frequency)))
              (define (present-profile)
                (if (= seconds 0)
                    (format "{?{a}~}" label)
                  (format "{?{a}: ~}{a} frame{a}, average {a} ms, {r precision: 2} fps"
                          label
                          frame-count (format-plural frame-count)
                          (seconds->milliseconds (/ seconds frame-count))
                          (/ frame-count seconds))))
              
              (define (calculate-time duration)
                (seconds->microseconds (/ duration frequency frame-count)))
              
              (define (make-children frame count duration)
                (let ((procedure (if (string? frame) frame (or (when frame (car frame)) "(interaction)")))
                      (count (if count (->string count) ""))
                      (time (if duration (->string (calculate-time duration)) ""))
                      (percentage (if duration (format "{r precision: 2}" (percentage duration total-duration)) "")))
                  (list (new Tree-Node title: procedure image: {Image-Resource "Link"}) (new Tree-Label title: count) (new Tree-Label title: time) (new Tree-Label title: percentage))))
              
              (set-title~ (locate 'profile) (present-profile))
              (set-value~ (locate 'profiler) profiler)
              (set-value~ (locate 'depth) depth)
              (remove-every-row~ tree)
              (with-update-locked~ tree
                (lambda ()
                  (for-each (lambda (call)
                              (bind (stack count . duration) call
                                (if (null? stack)
                                    (add-row~ tree children: (make-children "(interaction)" count duration) user-data: #f)
                                  (bind (head-frame . frames) stack
                                    (let ((row (add-row~ tree children: (make-children head-frame count duration) user-data: head-frame)))
                                      (for-each (lambda (frame)
                                                  (add-row~ tree father: row children: (make-children frame #f #f) user-data: frame))
                                                frames))))))
                            (sort > calls key: cddr))
                  (when (> unknown-count 0)
                    (add-row~ tree children: (make-children "<unknown>" unknown-count unknown-duration) user-data: #f)))))))))))


;;;
;;;; Calls-Tree
;;;


(class Calls-Tree extends Tree-View
  
  
  (form
    (<install>                              portfolio: :images filled-column: procedure
      (<Tree-Node-Column>  name: procedure  title: "Procedure" width: 250)
      (<Tree-Label-Column> name: count      title: "Calls" width: 50)
      (<Tree-Label-Column> name: duration   title: "Microseconds" width: 75)
      (<Tree-Label-Column> name: percentage title: "Percentage" width: 75))))


(register-autoclass Calls-Tree))
