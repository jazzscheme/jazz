;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Profile Results
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.editor.jazz.profiler.Profile-Results jazz


(import (jazz.debugger)
        (jazz.editor.jazz)
        (jazz.graphic)
        (jazz.jml)
        (jazz.library)
        (jazz.system)
        (jazz.ui)
        (jazz.ui.view)
        (profiler))


(class Profile-Results extends Layout-View
  
  
  (form
    (<install>                                      size: {Dimension 412 612} layout-type: border
      (<Layout-View>          name: tools
        (<Label-View>         name: fps             size: {Dimension 120 23} location: tail justification: tail)
        (<Separator>                                size: {Dimension 14 0})
        (<Push-Tool>          name: start           size: {Dimension 22 22} location: tail tooltip?: #t tooltip-text: "Start Profile" resource: {Image-Resource "Run"} portfolio: :images action-handler: {Event-Handler :form on-start-profiler})
        (<Push-Tool>          name: stop            size: {Dimension 22 22} location: tail tooltip?: #t tooltip-text: "Stop Profile" resource: {Image-Resource "Stop"} portfolio: :images action-handler: {Event-Handler :form on-stop-profiler})
        (<Separator>)
        (<Push-Combo>         name: backward        action-handler: {Event-Handler :form on-reset-profile}
          (<!>                name: body            resource: {Image-Resource "Clear"} tooltip-text: "Reset" action-handler: {Event-Handler :form on-reset-profile})
          (<!>                name: pick            action-handler: {Event-Handler :form on-reset-menu}))
        (<Separator>                                size: {Dimension 6 0})
        (<Push-Tool>          name: refresh         size: {Dimension 22 22} tooltip?: #t tooltip-text: "Refresh" resource: {Image-Resource "Refresh"} portfolio: :images action-handler: {Event-Handler :form on-refresh-profile}))
      (<Scroller-View>                              location: center style: document hscroll?: #t vscroll?: #t
        (<content!>                                 layout-type: fill
          (<Tree-Header>                            style: document
            (<content!>
              (<Calls-Tree>   name: calls           selection-handler: {Selection-Handler :form on-select-location} return-press-handler: {Event-Handler :form on-return-press})))))))
  
  
  ;;;
  ;;;; Host
  ;;;
  
  
  (method meta override (host-icon)
    {Image-Resource "Constructor"})
  
  
  (method meta override (host-title)
    "Profile Results")
  
  
  (method meta override (host-position)
    {Point 28 14})
  
  
  (method meta override (host-size)
    {Dimension 408 608})
  
  
  ;;;
  ;;;; Docked
  ;;;
  
  
  (method override (get-tools-view)
    (locate 'tools))
  
  
  (method override (focus-default)
    (acquire-focus~ (get-tree)))
  
  
  ;;;
  ;;;; Access
  ;;;
  
  
  (method (get-tree)
    (locate 'calls))
  
  
  (method (get-active-process)
    (or (get-focused-process~ (get-debugger-manager))
        (begin
          (message-box "There is no focused process")
          (throw-cancel))))
  
  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method (on-start-profiler evt)
    (user-feedback "Profiler started")
    (profiler-start~ (get-active-process)))
  
  
  (method (on-stop-profiler evt)
    (profiler-stop~ (get-active-process))
    (view-profile)
    (user-message "Profiler stopped"))
  
  
  (method (on-reset-profile evt)
    (let ((depth (get-property~ evt depth:)))
      (profiler-reset~ (get-active-process) depth)
      (view-profile)
      (user-message "Profile reset{? to depth {a}~}" depth)))
  
  
  (method (on-reset-menu evt)
    (let ((depth (profiler-depth~ (get-active-process)))
          (sender (get-sender~ evt)))
      (let ((initiator (get-combo~ sender))
            (pos (new Point 0 (get-height~ (get-size~ sender)))))
        (let ((menu (new Reset-Menu client: self)))
          (for-each (lambda (child)
                      (when (eqv? (get-name~ child) depth)
                        (set-selected?~ child #t)))
                    (get-children~ menu))
          (layout-menu~ menu)
          (track-popup-menu~ sender menu pos initiator: initiator)))))
  
  
  (definition public (track-history sender initiator)
    )
  
  
  (method (on-refresh-profile evt)
    (view-profile))
  
  
  (method (on-select-location evt)
    (edit-source))
  
  
  ;;;
  ;;;; Edition
  ;;;
  
  
  (definition *frame-indicator*
    (new Frame-Indicator color: {Color red: 255 green: 146 blue: 94}))
  
  
  (method (edit-source)
    (edit~ *frame-indicator* (selected-location)))
  
  
  ;;;
  ;;;; Selection
  ;;;
  
  
  (method (selected-frame)
    (let ((tree (get-tree)))
      (let ((rank (get-single-selection~ tree)))
        (if (not rank)
            #f
          (get-user-data~ (get-row~ tree rank))))))
  
  
  (method (selected-location)
    (let ((frame (selected-frame)))
      (if (not frame)
          #f
        (second frame))))
  
  
  ;;;
  ;;;; Update
  ;;;
  
  
  (method (view-profile)
    (view-profile~ (get-tree) (profiler-result~ (get-active-process)))))


;;;
;;;; Calls-Tree
;;;


(class Calls-Tree extends Tree-View
  
  
  (form
    (<install>                              portfolio: :images filled-column: procedure
      (<Tree-Node-Column>  name: procedure  title: "Procedure" width: 250)
      (<Tree-Label-Column> name: count      title: "Calls" width: 50)
      (<Tree-Label-Column> name: duration   title: "Microseconds" width: 75)
      (<Tree-Label-Column> name: percentage title: "Percentage" width: 75)))
  
  
  ;;;
  ;;;; Update
  ;;;
  
  
  (method (view-profile profiler-result)
    (remove-every-row)
    (with-update-locked
      (lambda ()
        (bind (frames total-count total-duration unknown-count unknown-duration calls) profiler-result
          (let ((frequency (profiler-performance-frequency)))
            (let ((seconds (/ total-duration frequency)))
              (define (calculate-time duration)
                (seconds->microseconds (/ duration frequency frames)))
              
              (define (calculate-fps)
                (if (= seconds 0)
                    ""
                  (format "{a} ms, {r precision: 2} fps"
                          (seconds->milliseconds (/ seconds frames))
                          (/ frames seconds))))
              
              (define (make-children frame count duration)
                (let ((procedure (if (string? frame) frame (or (when frame (car frame)) "(interaction)")))
                      (count (if count (->string count) ""))
                      (time (if duration (->string (calculate-time duration)) ""))
                      (percentage (if duration (format "{r precision: 2}" (percentage duration total-duration)) "")))
                  (list (new Tree-Node title: procedure image: {Image-Resource "Link"}) (new Tree-Label title: count) (new Tree-Label title: time) (new Tree-Label title: percentage))))
              
              (set-title~ (locate~ creator 'fps) (calculate-fps))
              (for-each (lambda (call)
                          (bind (stack count . duration) call
                            (if (null? stack)
                                (add-row children: (make-children "(interaction)" count duration) user-data: #f)
                              (bind (head-frame . frames) (reverse stack)
                                (let ((row (add-row children: (make-children head-frame count duration) user-data: head-frame)))
                                  (for-each (lambda (frame)
                                              (add-row father: row children: (make-children frame #f #f) user-data: frame))
                                            frames))))))
                        (sort > calls key: cddr))
              (when (> unknown-count 0)
                (add-row children: (make-children "<unknown>" unknown-count unknown-duration) user-data: #f)))))))))


(register-autoclass Calls-Tree)


;;;
;;;; Reset-Menu
;;;


(class Reset-Menu extends Context-Menu
  
  
  (form
    (<install>
      (<Radio-Item> name: 0 title: "0" action-handler: {Event-Handler (:form :client) on-reset-profile depth: 0})
      (<Radio-Item> name: 1 title: "1" action-handler: {Event-Handler (:form :client) on-reset-profile depth: 1})
      (<Radio-Item> name: 2 title: "2" action-handler: {Event-Handler (:form :client) on-reset-profile depth: 2})
      (<Radio-Item> name: 3 title: "3" action-handler: {Event-Handler (:form :client) on-reset-profile depth: 3})
      (<Radio-Item> name: 4 title: "4" action-handler: {Event-Handler (:form :client) on-reset-profile depth: 4})
      (<Radio-Item> name: 5 title: "5" action-handler: {Event-Handler (:form :client) on-reset-profile depth: 5})
      (<Radio-Item> name: 6 title: "6" action-handler: {Event-Handler (:form :client) on-reset-profile depth: 6})
      (<Radio-Item> name: 7 title: "7" action-handler: {Event-Handler (:form :client) on-reset-profile depth: 7})
      (<Radio-Item> name: 8 title: "8" action-handler: {Event-Handler (:form :client) on-reset-profile depth: 8})))))
