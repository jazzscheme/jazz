;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Registry Viewer
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2012
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.editor.jazz.registry.Registry-Viewer jazz


(import (jazz.ui))


(class Registry-Viewer extends Layout-View)


@windows-specific


(class Registry-Viewer extends Layout-View


  (form
    (<install>                                              size: {Dimension 436 639} layout-type: border
      (<Layout-View>                  name: toolbar         size: {Dimension 300 33} location: north layout-type: flow layout-insets: {Rect 0 6 0 0}
        (<Radio-Button>               name: type-libs       title: "TypeLibs" size: {Dimension 70 22} selected?: #t action-handler: {Event-Handler :form on-view-type-libs}))
      (<Border-View>                  name: registry-border location: center border-type: edge style: entry
        (<Scroller-View>                                    style: document hscroll?: #t vscroll?: #t
          (<!>                        name: content         layout-type: fill
            (<Tree-Header>                                  style: document
              (<!>                    name: content
                (<Tree-View>          name: registry        selection-handler: {Event-Handler :form on-selection-change} portfolio: :images
                  (<Tree-Node-Column>                       title: "Registry" width: 419)))))))))


  (method (conclude initargs)
    (nextmethod initargs)
    (view-type-libs))
  
  
  ;;;
  ;;;; Host
  ;;;
    
  
  (method meta (host-icon)
    {Image-Resource "Reference"})
  
  
  (method meta (host-title)
    "Registry Viewer")
  
  
  (method meta (host-position)
    {Point 28 14})
  
  
  (method meta (host-size)
    {Dimension 416 635})
  
  
  (method (host-workspaces)
    '(home))
  
  
  ;;;
  ;;;; Events
  ;;;


  (method (on-view-type-libs evt)
    (view-type-libs))


  (method (view-type-libs)
    (with ((type-lib (open-type-lib~ Registry)))
      (user-message "Gathering Keys...")
      (let* ((tree (locate 'registry))
             (all (iterate-subkeys~ type-lib))
             (guid-names (gather all))
             (informations (new List-Factory)))
        (for-each (lambda (guid-name)
                    (user-message "Processing {a}" guid-name)
                    (let ((info (get-information~ type-lib guid-name)))
                      (when info
                        (put~ informations (cons guid-name info)))))
                  guid-names)
        (with-update-locked~ tree
          (lambda ()
            (for-each (lambda (info)
                        (bind (guid-name desc major-version minor-version language-id pathname) info
                          (when (not (empty-string? desc))
                            (add-row~ tree children: (list (new Tree-Node title: desc image: {Image-Resource "TypeLib"})) user-data: info))))
                      (sort < (get-output~ informations) key: second)))))
      (user-message "Done")))


  (method (on-selection-change evt)
    (let* ((sender (get-sender~ evt))
           (selection (get-single-selection~ sender)))
      (when selection
        (let ((info (get-user-data~ (get-row~ sender selection))))
          (when info
            (bind (guid-name desc major-version minor-version language-id pathname) info
              (let ((frame (singleton Type-Viewer))
                    (guid (new GUID (subseq guid-name 1 (- (cardinality guid-name) 1)))))
                @wait (view-registered-typelib~ (get-guest~ frame) guid major-version minor-version language-id)
                (view-file~ (get-guest~ frame) pathname)
                (focus-host~ frame))))))))))
