;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Spy View
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.editor.jazz.spy.Spy-View jazz


(import (jazz.jml)
        (jazz.library)
        (jazz.ui)
        (jazz.ui.picker))


(class Spy-View extends View


  (property clients initialize '() accessors explicit)


  (slot active?          initialize #f)
  (slot slowdown?        initialize #f)
  (slot slowdown-quantum initialize 1.)
  (slot category         initialize 'all)
  (slot old-consumer)


  (form
    (<install>                                   size: {Dimension 736 339} location: east
      (<Radio-Tool>          name: all           position: {Point 4 6} size: {Dimension 22 22} tooltip?: #t tooltip-text: "All" resource: {Image-Resource "MsgGeneral"} action-handler: {Event-Handler :form on-category} portfolio: :images selected?: #t)
      (<Radio-Tool>          name: paint         position: {Point 28 6} size: {Dimension 22 22} tooltip?: #t tooltip-text: "Paint" resource: {Image-Resource "MsgPaint"} action-handler: {Event-Handler :form on-category} portfolio: :images)
      (<Radio-Tool>          name: mouse         position: {Point 52 6} size: {Dimension 22 22} tooltip?: #t tooltip-text: "Mouse" resource: {Image-Resource "MsgMouse"} action-handler: {Event-Handler :form on-category} portfolio: :images)
      (<Radio-Tool>          name: keyboard      position: {Point 76 6} size: {Dimension 22 22} tooltip?: #t tooltip-text: "Keyboard" resource: {Image-Resource "MsgKeyboard"} action-handler: {Event-Handler :form on-category} portfolio: :images)
      (<Push-Tool>           name: spy           position: {Point 156 6} size: {Dimension 22 22} tooltip?: #t tooltip-text: "Spy" resource: {Image-Resource "Window"} action-handler: {Event-Handler :form on-spy} portfolio: :images)
      (<Push-Tool>           name: spy-family    position: {Point 180 6} size: {Dimension 22 22} tooltip?: #t tooltip-text: "Spy Family" resource: {Image-Resource "Layout"} action-handler: {Event-Handler :form on-spy-family} portfolio: :images)
      (<Push-Tool>           name: clear         position: {Point 605 6} size: {Dimension 22 22} tooltip?: #t tooltip-text: "Clear" resource: {Image-Resource "Clear"} portfolio: :images action-handler: {Event-Handler :form on-clear})
      (<Toggle-Tool>         name: slowdown      position: {Point 686 6} size: {Dimension 22 22} tooltip?: #t tooltip-text: "Slowdown" resource: {Image-Resource "SpySlowdown"} portfolio: :images action-handler: {Event-Handler :form on-slowdown})
      (<Toggle-Tool>         name: on/off        position: {Point 710 6} size: {Dimension 22 22} tooltip?: #t tooltip-text: "On/Off" resource: {Image-Resource "Spy"} portfolio: :images action-handler: {Event-Handler :form on-on/off})
      (<Border-View>         name: tree-border   position: {Point 0 33} size: {Dimension 736 306} border-type: edge
        (<Scroller-View>     name: tree-scroller vscroll?: #t
          (<!>               name: content       layout-type: fill
            (<Tree-Header>   name: tree-header
              (<!>           name: content
                (<Tree-View> name: tree          selection-mode: row portfolio: :images))))))))

  
  ;;;
  ;;;; Access
  ;;;
  
  
  (method public (get-tree)
    (locate 'tree))

  
  ;;;
  ;;;; Clients
  ;;;


  (method public (get-clients)
    clients)


  (method public (set-clients list)
    (when active?
      (for-each unspy clients))
    (set! clients list)
    (activate))


  (method (activate)
    (set! active? #t)
    (for-each spy clients)
    (set-selected?~ (locate 'on/off) #t))

  
  ;;;
  ;;;; Events
  ;;;


  (method override (destroy)
    (set-clients '())
    (nextmethod))


  (method override (resize dh dv)
    (nextmethod dh dv)
    (move-figure~ (locate 'clear) dh 0)
    (move-figure~ (locate 'slowdown) dh 0)
    (move-figure~ (locate 'on/off) dh 0)
    (size-figure~ (locate 'tree-border) dh dv))


  (method (on-category evt)
    (set! category (get-name~ (get-sender~ evt))))
  
  
  (method (on-spy evt)
    (pick-client
      (lambda (view pos)
        (let ((figure (case (spy-domain)
                        ((windows) (get-player~ view))
                        ((views) view))))
          (set-clients (list figure))))))
  
  
  (method (on-spy-family evt)
    (pick-client
      (lambda (view pos)
        (let ((figure (case (spy-domain)
                        ((windows) (get-player~ view))
                        ((views) view))))
          (set-clients (collect-descendants~ figure))))))
  
  
  (method (pick-client action)
    (let ((domain (spy-domain)))
      (pick-figure
       exclude: (list (get-player))
       click: action
       highlight: #t
       highlight-root-only?: (neq? domain 'views)
       obscure-unhighlighted?: #t
       report-figure?: #f
       tooltips?: #f)))
  
  
  (method (on-clear evt)
    (remove-every-row~ (get-tree)))


  (method (on-slowdown evt)
    (set! slowdown? (not slowdown?)))


  (method (on-on/off evt)
    (set! active? (not active?))
    (if active?
        (for-each spy clients)
      (for-each unspy clients)))

  
  ;;;
  ;;;; Spying
  ;;;
  
  
  (method protected virtual (spy-domain)
    )


  (method protected virtual (spy client)
    )


  (method protected virtual (unspy client)
    )))
