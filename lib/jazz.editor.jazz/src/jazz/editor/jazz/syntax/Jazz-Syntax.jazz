;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Jazz Syntax
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.editor.jazz.syntax.Jazz-Syntax jazz


(import (jazz.clipboard)
        (jazz.component)
        (jazz.editor)
        (jazz.editor.jazz)
        (jazz.editor.lisp)
        (jazz.feedback)
        (jazz.graphic)
        (jazz.markup)
        (jazz.outline)
        (jazz.preferences)
        (jazz.resource)
        (jazz.runtime)
        (jazz.settings)
        (jazz.text)
        (jazz.tree)
        (jazz.ui)
        (jazz.view))


(class Jazz-Syntax extends Lisp-Syntax

  
  ;;;
  ;;;; Preferences
  ;;;

  
  (method override (preferences self)
    (current-preferences '(documents jazz-text)))

  
  ;;;
  ;;;; IO
  ;;;
  
  
  (method override (default-extension self)
    "jazz")
  
  
  (method override (extensions self)
    '(("Jazz Texts" . "jazz")))

  
  ;;;
  ;;;; Parser
  ;;;
  
  
  (method override (parser-class self)
    Jazz-Parser)

  
  ;;;
  ;;;; Translation
  ;;;
  
  
  (method override (translate-key self key)
    (if (or (find-setting 'jazz.translate-keys? #f) (get-translate-keys? (current-preferences '(documents jazz-text))))
        (translate-lisp-key self key)
      key))
  
  
  ;;;
  ;;;; Constituent
  ;;;
  
  
  (method override (get-constituent-test self)
    jazz-constituent?)
   

  ;;;
  ;;;; Explorer
  ;;;


  (method override (explorer-class self)
    Jazz-Explorer)
  
  
  ;;;
  ;;;; Reading
  ;;;
  
  
  (method override (get-readtable self)
    jazz-readtable)
  
  
  ;;;
  ;;;; Coloring
  ;;;
  
  
  (method override (declaration-style self documented?)
    (if documented?
        'Documented-Declaration
      'Undocumented-Declaration))
  
  
  (method override (colorize-tag self colorizer start end)
    (apply-coloring self colorizer start end 'Tag))
  
  
  (method override (colorize-specifier self colorizer start end)
    (apply-coloring self colorizer start end 'Specifier))
  
  
  (method (recolorize-named-comments self line)
    (let* ((str (paragraph-string model line))
           (len (cardinality str))
           (col 0)
           (done? #f))
      (while (not done?)
        (let ((comment (search str "@" start: col)))
          (if (not comment)
              (set! done? #t)
            (unless (and (> comment 0) (eqv? (element str (- comment 1)) #\,))
              (let* ((pos (new Cell line (+ comment 1)))
                     (expl <Text-Explorer> (new (explorer-class self) model start: pos end: pos))
                     (kind (forward-expr expl))
                     (end (get-end expl)))
                (when (and (eq? kind 'symbol) (= (get-line end) line))
                  (apply-style model 'Named-Comment (- (get-start expl) 1) (get-end expl)))))
            (set! col (+ comment 1)))))))


  ;;;
  ;;;; Imports
  ;;;
  
  
  (method override (find-imports self symbol)
    (define (present-imports imports)
      (let* ((border (new Imports-Border size: {Dimension 450 150}))
             (tree (locate border 'tree))
             (count (length imports)))
        (for-each (lambda (import)
                    (let ((title (symbol->string import)))
                      (add-row tree children: (list (new Tree-Node title: title image: {Image-Resource "Import"})))))
                  imports)
        (message-box (format "Found {a} import{a}" (format-cardinality count) (format-plural count))
                     type: 'confirmation
                     yes: "Copy"
                     no: "Insert"
                     content: border
                     sound: (if (= count 0) 'default #f))))
    
    (let ((imports (collect-imports symbol feedback: (lambda (unit-name)
                                                       (user-feedback "Outlining {a}..." unit-name)))))
      (case (present-imports imports)
        ((yes)
         (unless (null? imports)
           (set-clipboard-text (join (map symbol->string imports) " "))))
        ((no)
         (unless (null? imports)
           (let ((expl (new (explorer-class self) model)))
             (for-each (lambda (import)
                         (unless (eq? import 'jazz)
                           (set-start expl (text-beginning model))
                           (set-end expl (text-beginning model))
                           (insert-import-invoice expl import)))
                       imports))))
        ((cancel)
         (signal-cancel))))))


;;;
;;;; Imports-Border
;;;


(class Imports-Border extends Border-View
  
  
  (form
    (<install>                                    border-type: solid border-color: {Color Outline-Border}
      (<Scroller-View>                            style: tool hscroll?: #t vscroll?: #t
        (<!>                        name: content layout-type: fill
          (<Tree-Header>                          style: tool
            (<!>                    name: content
              (<Tree-View>          name: tree    portfolio: :images selection-mode: row
                (<Tree-Node-Column>               title: "Import" width: 300 toplevel-controls?: #f display-images?: #f))))))))))
