;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Exploring Jazz Code
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.editor.jazz.text.Jazz-Explorer jazz


(require (jazz.editor.scheme.forms))
(require (jazz.editor.jazz.forms))

(import (jazz.editor.jazz)
        (jazz.editor.lisp)
        (jazz.editor.scheme)
        (jazz.outline)
        (jazz.text)
        (jazz.undoer))


(proclaim (warn optimizations))


(class Jazz-Explorer extends Scheme-Explorer
  
  
  (method override (expression-comment? self mark <Explorer-Mark>)
    (define (get-first-char range <Range$Cell$>)
      (get-char self (get-start range)))
    
    (or (char=? (get-first-char (get-range mark)) #\at)
        (nextmethod self mark)))


  ;;;
  ;;;; Location
  ;;;
  
  
  (method public (forward-location self location <Object> (toplevel-location: toplevel-location #f))
    (define (forward-category-keywords)
      (let ((keyword #f)
            (previous (get-end self)))
        (while (and (forward-expr self)
                    (begin
                      (set! keyword (find-marked-symbol self))
                      (or (expression-syntax-namespace? keyword)
                          (memq? keyword '(unit module class interface))
                          (memq? keyword '(metaclass extends implements))))
                    (forward-expr self))
          (set! previous (get-end self)))
        (set-start self previous)
        (set-end self previous)))
    
    (define (forward-new-form (toplevel-location: toplevel-location #f))
      (forward-category-keywords)
      (set-end self (get-start self)))
    
    (define (forward-form (toplevel-location: toplevel-location #f))
      (while (not (memq? (form-expr self) '(form)))
        (when (not (forward-valid-expr))
          (signal (new Location-Error kind: 'unknown location: (or toplevel-location 'form))))))
    
    (define (forward-declaration name <Object> (toplevel-location: toplevel-location #f))
      (while (or (not (declaration-expr? self))
                 (neq? (declaration-name self) name))
        (when (not (forward-valid-expr))
          (signal (new Location-Error kind: 'unknown location: (or toplevel-location name))))))
    
    (define (forward-numeric n <fx> (toplevel-location: toplevel-location #f))
      (while (>= n 0)
        (when (not (forward-valid-expr))
          (signal (new Location-Error kind: 'unknown location: (or toplevel-location n))))
        (decrease! n)))
    
    (define (forward-valid-expr)
      (let ((kind (forward-expr self)))
        (cond ((eq? kind 'named-comment)
               (forward-expr self)
               (forward-expr self))
              (else
               kind))))
    
    (let ((scan location))
      (while (not-null? scan)
        (let ((ref (car scan)))
          (set-end self (get-start self))
          (forward-whites self)
          (let ((c0 (char-forward self 0)))
            (cond ((eqv? c0 #\backquote)
                   (forward self)
                   (forward-expr self)
                   (set! scan (cdr scan)))
                  ((and (eqv? c0 #\comma) (eqv? (char-forward self 1) #\at))
                   (forward self)
                   (forward self)
                   (forward-expr self)
                   (set! scan (cdr scan)))
                  ((eqv? c0 #\comma)
                   (forward self)
                   (forward-expr self)
                   (set! scan (cdr scan)))
                  ((not (enter-composite self))
                   (signal (new Location-Error kind: 'bad location: (or toplevel-location location))))
                  (else
                   (and (neq? ref 'meta)
                        (cond ((eq? ref :new-form)
                               (forward-new-form toplevel-location: toplevel-location))
                              ((eq? ref :form)
                               (forward-form toplevel-location: toplevel-location))
                              ((symbol? ref)
                               (forward-declaration ref toplevel-location: toplevel-location))
                              (else
                               (forward-numeric ref toplevel-location: toplevel-location))))
                   (set! scan (cdr scan)))))))))


  ;;;
  ;;;; Namespace
  ;;;


  (method public (namespace-declaration-range self (include-invoices?: include-invoices? #f))
    (let ((s (copy start))
          (e (copy end)))
      (forward-namespace self include-invoices?: include-invoices?)
      (prog1 (new Range$Cell$ s (copy end))
        (set-start self s)
        (set-end self e))))
  
  
  (method public (forward-namespace self (include-invoices?: include-invoices? #f))
    (set-end self start)
    (enter-list self)
    (forward-expr self)
    (let ((type (intern-marked-symbol self)))
      (case type
        ((unit) (forward-unit self))
        ((module) (forward-module self include-invoices?))
        ((submodule) (forward-submodule self include-invoices?))
        ((script) (forward-script self include-invoices?))
        ((class) (forward-class self))
        ((interface) (forward-interface self)))))
  
  
  (method (forward-unit self)
    (list 'unit
          (forward-modifiers self (expression-syntax-modifiers 'unit))
          (forward-name self)))
  
  
  (method (forward-module self include-invoices?)
    (list 'module
          (forward-modifiers self (expression-syntax-modifiers 'module))
          (forward-name self)
          (forward-name self)
          (and include-invoices?
               (forward-invoices self))))
  
  
  (method (forward-submodule self include-invoices?)
    (list 'submodule
          (forward-modifiers self (expression-syntax-modifiers 'submodule))
          (forward-name self)
          (and include-invoices?
               (forward-invoices self))))
  
  
  (method (forward-script self include-invoices?)
    (list 'script
          (forward-modifiers self (expression-syntax-modifiers 'module))
          (forward-name self)
          (and include-invoices?
               (forward-invoices self))))
  
  
  (method (forward-class self)
    (list 'class
          (forward-modifiers self (expression-syntax-modifiers 'class))
          (forward-name self)
          (forward-keywords self (expression-syntax-keywords 'class))))
  
  
  (method (forward-interface self)
    (list 'interface
          (forward-modifiers self (expression-syntax-modifiers 'interface))
          (forward-name self)
          (forward-keywords self (expression-syntax-keywords 'interface))))
  
  
  (method (forward-name self)
    (forward-expr self)
    (intern-marked-symbol self))
  
  
  (method (forward-keywords self keywords)
    (let (iterate (finish (copy end))
                  (result '()))
      (define (done)
        (set-end self finish)
        result)
      
      (forward-expr self)
      (if (eq? kind 'symbol)
          (let ((expr (intern-marked-symbol self)))
            (if (memq? expr keywords)
                (begin
                  (forward-expr self)
                  (let ((value (read-marked self)))
                    (iterate (copy end) (append result (list expr value)))))
              (done)))
        (done))))
  
  
  (method (forward-invoices self)
    (while (forward-invoice self)
      ))
  
  
  (method (forward-invoice self)
    (let ((s (copy start))
          (e (copy end)))
      (define (reset)
        (set-start self s)
        (set-end self e))
      
      (define (forward)
        (and (enter-list self)
             (forward-expr self)
             (and (eq? kind 'symbol)
                  (memq? (intern-marked-symbol self) '(export import))
                  (begin
                    (exit-list self)
                    (read-marked self)))))
      
      (let ((invoices (forward)))
        (or invoices
            (begin
              (reset)
              #f)))))
  
  
  (method package (find-namespace-insertion-range self)
    (let ((point (find-namespace-insertion-point self)))
      (new Range$Cell$ (get-end self) (get-end self))))
  
  
  (method package (find-namespace-insertion-point self)
    (forward-namespace self)
    (let (loop)
      (let* ((last-expression? (not (forward-expr self)))
             (composite? (and (not last-expression?)
                              (enter-composite self)))
             (submodule? (and composite?
                              (eq? (get-kind self) 'list)
                              (forward-expr self)
                              (eq? (read-marked self) 'submodule))))
        (when last-expression?
          (backward-expr self))
        (when composite?
          (exit-composite self))
        (when submodule?
          (forward-expr self)
          (backward-expr self)
          (backward-expr self))
        (unless (or last-expression? submodule?)
          (loop))))
    (get-end self))
  
  
  ;;;
  ;;;; Imports
  ;;;
  
  
  (method (filter-existing-import-invoices self units)
    (collect-if (lambda (unit)
                  (goto-beginning self)
                  (forward-namespace self)
                  (enter-import self)
                  (receive (found? first? none?) (find-import-invoice self unit #f)
                    (not found?)))
                units))
  
  
  (method package (find-import self)
    (enter-import self)
    (exit-list self)
    (set-start self (get-end self))
    (backward-expr self))
  
  
  (method package (enter-import self)
    (let (iterate)
      (and (forward-expr self)
           (let ((pos (copy (get-end self))))
             (if (eq? kind 'list)
                 (let ((s (get-start self))
                       (e (get-end self)))
                   (set-end self s)
                   (enter-list self)
                   (forward-expr self)
                   (if (eq? kind 'symbol)
                       (let ((expr (intern-marked-symbol self)))
                         (if (eq? expr 'import)
                             #t
                           (set-end self pos)
                           (iterate)))
                     (set-end self pos)
                     (iterate)))
               (iterate))))))
  
  
  (method (find-import-invoice self unit ordered-insert? (parameter #f))
    (let ((target (symbol->string unit))
          (target-parameter (if parameter (object->string parameter) "")))
      (let (iterate (first? #t))
        (let ((pos (copy (get-end self))))
          (if (forward-expr self)
              (begin
                (set-end self start)
                (enter-list self)
                (forward-expr self)
                (let ((name (get-marked self))
                      (parameter (if (forward-expr self) (get-marked self) "")))
                  (cond ((and (string=? name target)
                              (string=? parameter target-parameter))
                         (exit-list self)
                         (set-start self pos)
                         (values #t first? #f))
                        ((and ordered-insert? (string>? name target))
                         (set-end self pos)
                         (values #f first? #f))
                        (else
                         (set-end self pos)
                         (forward-expr self)
                         (iterate #f)))))
            (values #f first? first?))))))
  
  
  (method public (insert-import-invoice self unit (parameter #f))
    (forward-namespace self)
    (let ((pos (copy (get-end self))))
      (if (not (enter-import self))
          (with-atomic-undo (get-undoer model)
            (lambda ()
              (let ((text <Lisp-Text-View+> (single-client model)))
                (set-caret text pos)
                (insert-newline text)
                (insert-newline text)
                (insert-newline text)
                (insert-string text (format "(import ({a}{? {a}~}))" unit parameter)))))
        (receive (found? first? none?) (find-import-invoice self unit #t parameter)
          (unless found?
            (with-atomic-undo (get-undoer model)
              (lambda ()
                (let ((text <Lisp-Text-View+> (single-client model)))
                  (allege text
                    (set-caret text (get-end self))
                    (cond (first?
                           (insert-string text (format " ({a}{? {a}~})" unit parameter))
                           (unless none?
                             (insert-newline text))
                           (tabulate text))
                          (else
                           (insert-newline text)
                           (tabulate text)
                           (insert-string text (format "({a}{? {a}~})" unit parameter)))))))))))))
  
  
  (method public (remove-import-invoice self unit)
    (forward-namespace self)
    (if (not (enter-import self))
        (error "Unable to find import declaration")
      (receive (found? first? none?) (find-import-invoice self unit #f)
        (and found?
             (begin
               (with-atomic-undo (get-undoer model)
                 (lambda ()
                   (let ((text <Lisp-Text-View+> (single-client model)))
                     (allege text
                       (delete-range model (get-range self))
                       (when first?
                         (remove-spaces text (get-start self) keep: 'one))))))
               #t)))))


  ;;;
  ;;;; Declarations
  ;;;
  
  
  (method override (find-named-walker self name)
    (case name
      ((:proclaim)        (~ walk-proclaim self))
      ((:properties)      (~ walk-properties self))
      ((:state)           (~ walk-state self))
      ((:attributes)      (~ walk-attributes self))
      ((:native)          (~ walk-native self))
      ((:definition)      (~ walk-definition self))
      ((:specialize)      (~ walk-specialize self))
      ((:class)           (~ walk-class self))
      ((:interface)       (~ walk-interface self))
      ((:remotable-stub)  (~ walk-remotable-stub self))
      ((:submodule)       (~ walk-submodule self))
      ((:method)          (~ walk-method self))
      ((:slot)            (~ walk-slot self))
      ((:jazzdoc)         (~ walk-jazzdoc self))
      ((:property)        (~ walk-property self))
      ((:form)            (~ walk-form self))
      ((:global)          (~ walk-global self))
      ((:constant)        (~ walk-constant self))
      ((:enumeration)     (~ walk-enumeration self))
      ((:c-constant)      (~ walk-c-constant self))
      ((:c-enumeration)   (~ walk-c-enumeration self))
      ((:c-named-declare) (~ walk-c-named-declare self))
      ((:c-include)       (~ walk-c-include self))
      ((:c-type)          (~ walk-c-type self))
      ((:c-structure)     (~ walk-c-structure self))
      ((:c-definition)    (~ walk-c-define self))
      ((:c-external)      (~ walk-c-external self))
      ((:com-external)    (~ walk-com-external self))
      ((:datacontainer)   (~ walk-datacontainer self))
      ((:define-handler)  (~ walk-define-handler self))
      (else               (nextmethod self name))))
  
  
  (method (walk-proclaim self context symbol form <Expression-Syntax> declaration keyword expression doc)
    (walk-anonymous self context 'proclaim symbol form declaration keyword expression doc))

  
  (method (walk-properties self context symbol form <Expression-Syntax> declaration keyword expression doc)
    (keyword context start end)
    (walk-expressions self context expression))
  
  
  (method (walk-attributes self context symbol form <Expression-Syntax> declaration keyword expression doc)
    (keyword context start end)
    (walk-expression self context expression 'code #f)
    (forward-expr self)
    (let (iterate)
      (when (enter-list self)
        (forward-expr self)
        (keyword context start end)
        (walk-specifier self context expression 'code)
        (forward-expr self)
        (when (eq? kind 'symbol)
          (let ((marked (get-marked self)))
            (let ((entry <Lisp-Entry+> (declaration context 'definition '() symbol '() #f start end marked (symbol-documented? self (find-marked-symbol self) doc))))
              (declaration context 'accessor '() 'getter '() #f start end (string-append "get-" marked) #f)
              (declaration context 'accessor '() 'setter '() #f start end (string-append "set-" marked) #f)
              (let ((keywords '()))
                (define (add-keyword keyword value)
                  (set! keywords (cons (cons keyword value) keywords)))
                
                (walk-keywords/properties self context expression
                  (lambda (symbol)
                    (case symbol
                      ((initialize test)
                       (keyword context start end)
                       (when (forward-expr self)
                         (add-keyword symbol (get-marked self)))
                       #f)
                      (else
                       #f))))
                (when entry
                  (set-parameters entry (reverse! keywords))))
              (walk-expressions self context expression))))
        (exit-list self)
        (iterate))))
  
  
  (method (walk-state self context symbol form <Expression-Syntax> declaration keyword expression doc)
    (keyword context start end)
    (walk-expression self context expression 'code #f)
    (forward-expr self)
    (let (iterate)
      (when (enter-list self)
        (forward-expr self)
        (keyword context start end)
        (walk-specifier self context expression 'code)
        (forward-expr self)
        (when (eq? kind 'symbol)
          (let ((marked (get-marked self)))
            (let ((entry <Lisp-Entry+> (declaration context 'definition '() symbol '() #f start end marked (symbol-documented? self (find-marked-symbol self) doc))))
              (let ((keywords '()))
                (define (add-keyword keyword value)
                  (set! keywords (cons (cons keyword value) keywords)))
                
                (walk-keywords/properties self context expression
                  (lambda (symbol)
                    (case symbol
                      ((initialize test)
                       (keyword context start end)
                       (when (forward-expr self)
                         (add-keyword symbol (get-marked self)))
                       #f)
                      ((getter setter accessors)
                       (keyword context start end)
                       (when (forward-expr self)
                         (let ((accessor (get-marked self)))
                           (add-keyword symbol accessor)
                           (walk-slot-accessor self context marked declaration doc symbol accessor))))
                      (else
                       #f))))
                (when entry
                  (set-parameters entry (reverse! keywords))))
              (walk-expressions self context expression))))
        (exit-list self)
        (iterate))))

  
  (method (walk-definition self context symbol form <Expression-Syntax> declaration keyword expression doc)
    (let ((entry context))
      (keyword context start end)
      (let ((modifiers (walk-modifiers self context declaration keyword (get-modifiers form))))
        (forward-whites self)
        (let ((list? (eqv? (char-forward self 0) #\open-parenthesis)))
          (cond ((not list?)
                 (when (and (forward-expr self) (eq? kind 'symbol))
                   (set! entry (declaration context 'definition modifiers symbol '() #f start end (get-marked self) (symbol-documented? self (find-marked-symbol self) doc)))))
                (else
                 (enter-list self)
                 (when (and (forward-expr self) (eq? kind 'symbol))
                   (set! entry (declaration context 'definition modifiers symbol '() #f start end (get-marked self) (symbol-documented? self (find-marked-symbol self) doc))))
                 (walk-parameters self entry declaration keyword expression doc)
                 (exit-list self))))
        (walk-specifier self entry expression 'code)
        (walk-expressions self entry expression 'code #f)
        entry)))
  
  
  (method (walk-specialize self context symbol form <Expression-Syntax> declaration keyword expression doc)
    (let ((entry context)
          (as #f))
      (keyword context start end)
      (let ((modifiers (walk-modifiers self context declaration keyword (get-modifiers form))))
        (forward-whites self)
        (when (not (eqv? (char-forward self 0) #\open-parenthesis))
          (when (and (forward-expr self) (eq? kind 'symbol) (eq? (find-marked-symbol self) 'as))
            (keyword context start end)
            (forward-expr self)
            (set! as (get-marked self))
            (declaration context 'specialize modifiers symbol '() #f start end (get-marked self) (symbol-documented? self (find-marked-symbol self) doc))
            (forward-whites self)))
        (let ((list? (eqv? (char-forward self 0) #\open-parenthesis)))
          (define (mangle-as marked)
            (if as
                (list marked as)
              marked))
          
          (cond ((not list?)
                 (when (and (forward-expr self) (eq? kind 'symbol))
                   (set! entry (declaration context 'specialize modifiers symbol '() #f start end (mangle-as (get-marked self)) (symbol-documented? self (find-marked-symbol self) doc)))))
                (else
                 (enter-list self)
                 (when (and (forward-expr self) (eq? kind 'symbol))
                   (set! entry (declaration context 'specialize modifiers symbol '() #f start end (mangle-as (get-marked self)) (symbol-documented? self (find-marked-symbol self) doc))))
                 (walk-parameters self entry declaration keyword expression doc)
                 (exit-list self))))
        (walk-expressions self entry expression 'code #f)
        entry)))

  
  (method (walk-class self context symbol form <Expression-Syntax> declaration keyword expression doc)
    (walk-namespace self context 'class symbol form declaration keyword expression doc))

  (method (walk-interface self context symbol form <Expression-Syntax> declaration keyword expression doc)
    (walk-namespace self context 'interface symbol form declaration keyword expression doc))

  (method (walk-remotable-stub self context symbol form <Expression-Syntax> declaration keyword expression doc)
    (walk-namespace self context 'remotable-stub symbol form declaration keyword expression doc))

  (method (walk-submodule self context symbol form <Expression-Syntax> declaration keyword expression doc)
    (walk-namespace self context 'submodule symbol form declaration keyword expression doc))
  
  
  (method public (walk-method self context symbol form <Expression-Syntax> declaration keyword expression doc)
    (let ((entry context))
      (keyword context start end)
      (let ((modifiers (walk-modifiers self context declaration keyword (get-modifiers form))))
        (enter-list self)
        (when (and (forward-expr self) (eq? kind 'symbol))
          (set! entry (declaration context 'method modifiers symbol '() #f start end (get-marked self) (symbol-documented? self (find-marked-symbol self) doc)))
          (forward-whites self)
          (walk-parameters self entry declaration keyword expression doc)
          (exit-list self)
          (walk-specifier self entry expression 'code)
          (walk-expressions self entry expression 'code #f))
        entry)))
  
  
  (method (walk-keywords/properties self context expression proc)
    (while (forward-expr self)
      (unless (and (eq? kind 'symbol)
                   (let ((marked-symbol (find-marked-symbol self)))
                     (if marked-symbol
                         (proc marked-symbol)
                       #f)))
        (walk-expression self context expression 'code #f))))
  
  
  (method (walk-slot-accessor self context slot-name declaration doc symbol accessor)
    (define (declare-accessor accessor)
      (let ((name (string-append (case accessor ((getter) "get-") ((setter) "set-")) slot-name)))
        (declaration context 'accessor '() accessor '() #f start end name (symbol-documented? self (find-marked-symbol self) doc))
        #t))
    
    (when (and (eq? kind 'symbol) (string=? accessor "generate"))
      (case symbol
        ((getter)
         (declare-accessor 'getter))
        ((setter)
         (declare-accessor 'setter))
        ((accessors)
         (declare-accessor 'getter)
         (declare-accessor 'setter)))))
  
  
  (method (walk-slot/property-accessors self context entry <Lisp-Entry+> slot-name declaration keyword expression doc)
    (walk-specifier self entry expression 'code)
    (let ((keywords '()))
      (define (add-keyword keyword value)
        (set! keywords (cons (cons keyword value) keywords)))
      
      (walk-keywords/properties self context expression
        (lambda (symbol)
          (case symbol
            ((initialize)
             (keyword context start end)
             (when (forward-expr self)
               (add-keyword symbol (get-marked self)))
             #f)
            ((getter setter accessors)
             (keyword context start end)
             (if (enter-list self)
                 (let ((form <Expression-Syntax> (find-expression-syntax self 'method)))
                   (let ((modifiers (walk-modifiers self context declaration keyword (get-modifiers form))))
                     (forward-whites self)
                     (when (forward-expr self)
                       (let ((accessor (get-marked self)))
                         (add-keyword symbol accessor)
                         (walk-slot-accessor self context slot-name declaration doc symbol accessor)))
                     (exit-list self)))
               (when (forward-expr self)
                 (let ((accessor (get-marked self)))
                   (add-keyword symbol accessor)
                   (walk-slot-accessor self context slot-name declaration doc symbol accessor)))))
            (else
             #f))))
      (when entry
        (set-parameters entry (reverse! keywords)))))
  
  
  (method (walk-slot self context symbol form <Expression-Syntax> declaration keyword expression doc)
    (let ((entry context))
      (keyword context start end)
      (let ((modifiers (walk-modifiers self context declaration keyword (get-modifiers form))))
        (forward-whites self)
        (when (and (forward-expr self) (eq? kind 'symbol))
          (let ((marked (get-marked self)))
            (set! entry (declaration context 'slot modifiers symbol '() #f start end marked (symbol-documented? self (find-marked-symbol self) doc)))
            (walk-slot/property-accessors self context entry marked declaration keyword expression doc)))
        (walk-expressions self entry expression)
        entry)))
  
  
  (method (walk-jazzdoc self context symbol form <Expression-Syntax> declaration keyword expression doc)    
    (let ((entry <Lisp-Entry+> (declaration context 'jazzdoc '() symbol '() #f start end (get-marked self) #f)))
      (expression context start end 'code
        (if (specifier-marked? self)
            'tag
          'jazzdoc))
      (let ((l (new List-Factory)))
        (while (forward-expr self)
          (expression context start end 'code 'jazzdoc-body)
          (put l (get-constant self)))
        (when entry
          (set-modifiers entry (get-output l))))
      entry))
  
  
  (method (walk-property self context symbol form <Expression-Syntax> declaration keyword expression doc)
    (let ((entry context))
      (keyword context start end)
      (let ((modifiers (walk-modifiers self context declaration keyword (get-modifiers form))))
        (when (and (forward-expr self) (eq? kind 'symbol))
          (let ((marked (get-marked self)))
            (set! entry (declaration context 'property modifiers symbol '() #f start end marked (symbol-documented? self (find-marked-symbol self) doc)))
            (walk-slot/property-accessors self context entry marked declaration keyword expression doc)))
        (walk-expressions self entry expression)
        entry)))
  
  
  (method (walk-form self context symbol form <Expression-Syntax> declaration keyword expression doc)
    (walk-anonymous self context 'form symbol form declaration keyword expression doc))
        
  
  (method (walk-global self context symbol form <Expression-Syntax> declaration keyword expression doc)
    (let ((entry context))
      (keyword context start end)
      (let ((modifiers (walk-modifiers self context declaration keyword (get-modifiers form))))
        (when (and (forward-expr self) (eq? kind 'symbol))
          (set! entry (declaration context 'global modifiers symbol '() #f start end (get-marked self) (symbol-documented? self (find-marked-symbol self) doc))))
        entry)))
    
  
  (method (walk-constant self context symbol form <Expression-Syntax> declaration keyword expression doc)
    (let ((entry context))
      (keyword context start end)
      (let ((modifiers (walk-modifiers self context declaration keyword (get-modifiers form))))
        (when (and (forward-expr self) (eq? kind 'symbol))
          (set! entry (declaration context 'constant modifiers symbol '() #f start end (get-marked self) (symbol-documented? self (find-marked-symbol self) doc))))
        (walk-expressions self entry expression 'code #f)
        entry)))
  
  
  (method (walk-enumeration self context symbol form <Expression-Syntax> declaration keyword expression doc)
    (let ((entry context))
      (keyword context start end)
      (let ((modifiers (walk-modifiers self context declaration keyword (get-modifiers form))))
        (when (and (forward-expr self) (eq? kind 'symbol))
          (set! entry (declaration context 'enumeration modifiers symbol '() #f start end (get-marked self) (symbol-documented? self (find-marked-symbol self) doc))))
        (walk-expressions self entry expression)
        entry)))
  
  
  (method (walk-c-enumeration self context symbol form <Expression-Syntax> declaration keyword expression doc)
    (let ((entry context))
      (keyword context start end)
      (let ((modifiers (walk-modifiers self context declaration keyword (get-modifiers form))))
        (when (and (forward-expr self) (eq? kind 'symbol))
          (set! entry (declaration context 'c-enumeration modifiers symbol '() #f start end (get-marked self) (symbol-documented? self (find-marked-symbol self) doc))))
        (walk-expressions self entry expression)
        entry)))

  
  (method (walk-c-named-declare self context symbol form <Expression-Syntax> declaration keyword expression doc)
    (keyword context start end)
    (walk-expressions self context expression))

  
  (method (walk-c-include self context symbol form <Expression-Syntax> declaration keyword expression doc)
    (keyword context start end)
    (walk-expressions self context expression))

  
  (method (walk-com-external self context symbol form <Expression-Syntax> declaration keyword expression doc)
    (let ((entry context))
      (keyword context start end)
      (let ((modifiers (walk-modifiers self context declaration keyword (get-modifiers form))))
        (let ((entered? (enter-list self)))
          (when (and (forward-expr self) (eq? kind 'symbol))
            (set! entry (declaration context 'com-external modifiers symbol '() #f start end (get-marked self) (symbol-documented? self (find-marked-symbol self) doc))))
          (when entered?
            (walk-parameters self entry declaration keyword expression doc))
          (when entered?
            (exit-list self)))
        (walk-specifier self entry expression 'code)
        (walk-expressions self entry expression 'code #f)
        entry)))
  
  
  (method (walk-datacontainer self context symbol form <Expression-Syntax> declaration keyword expression doc)
    (let ((entry context))
      (keyword context start end)
      (when (forward-expr self)
        (set! entry (declaration context 'datacontainer '() symbol '() #f start end (get-marked self) (symbol-documented? self (find-marked-symbol self) doc))))
      (walk-expressions self entry expression)
      entry))
  
  
  (method (walk-define-handler self context symbol form <Expression-Syntax> declaration keyword expression doc)
    (let ((entry context))
      (keyword context start end)
      (let ((modifiers (walk-modifiers self context declaration keyword (get-modifiers form))))
        (forward-whites self)
        (let ((list? (eqv? (char-forward self 0) #\open-parenthesis)))
          (cond ((not list?)
                 (when (and (forward-expr self) (eq? kind 'symbol))
                   (set! entry (declaration context 'definition modifiers symbol '() #f start end (get-marked self) (symbol-documented? self (find-marked-symbol self) doc)))))
                (else
                 (enter-list self)
                 (when (and (forward-expr self) (eq? kind 'symbol))
                   (set! entry (declaration context 'definition modifiers symbol '() #f start end (get-marked self) (symbol-documented? self (find-marked-symbol self) doc))))
                 (walk-parameters self entry declaration keyword expression doc)
                 (exit-list self))))
        (walk-expressions self entry expression 'code #f)
        entry)))))
