;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Jazz Plain Syntax
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2012
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.editor.jazz.text.Jazz-Plain-Syntax jazz


(import (jazz.editor.jazz)
        (jazz.ui))


(class Jazz-Plain-Syntax extends Text-Syntax
  
  
  ;;;
  ;;;; Comment
  ;;;
  
  
  (definition Comment
    (make-string 1 #\semi-colon))
  
  
  (definition Title-Comment
    (string-append (make-string 4 #\semi-colon) " "))
  
  
  (method override (comment-string)
    Comment)
  
  
  (method override (title-comment-string)
    Title-Comment)
  
  
  ;;;
  ;;;; Coloring
  ;;;
  
  
  (method override (colorize-syntax (colorizer?: colorizer? #t))
    (define (colorize proc)
      (let ((expl <Text-Explorer> (new (explorer-class) model start: (text-beginning~ model) end: (text-beginning~ model)))
            (colorizer (and colorizer? (new-colorizer~ model))))
        (proc expl colorizer)
        (when colorizer
          (finish-current~ colorizer))))
    
    (nextmethod)
    (colorize colorize-comments))

  
  (method override (colorize-comments . rest)
    (when (eq? (type-heuristic) 'jazz)
      (let ((expl (new Jazz-Explorer model end: (text-beginning~ model))))
        (for-each-comment~ expl
          (lambda (start <Cell> end <Cell> title?)
            (if (not title?)
                (stylize~ model 'Comment start)
              (stylize~ model 'Comment start (+ start 4))
              (stylize~ model 'Title (+ start 4))))))))


  (method override (recolorize-text syntax-style start end-line)
    (define (recolorize-row line)
      (recolorize-comments line))
    
    (define (recolorize-comments line)
      (let* ((str (paragraph-string~ model line))
             (len (cardinality str))
             (title-comment-str (title-comment-string))
             (title-comment-size (string-length title-comment-str))
             (comment-str (comment-string))
             (comment (search str comment-str)))
        (when (and comment (<= comment 20))
          (let ((title-end (+ comment title-comment-size)))
            (if (and (< title-end len) (nu=? (subseq str comment title-end) title-comment-str))
                (begin
                  (stylize~ model 'Comment (new Cell line comment) (new Cell line title-end))
                  (stylize~ model 'Title (new Cell line title-end)))
              (stylize~ model 'Comment (new Cell line comment)))))))
    
    (when (eq? (type-heuristic) 'jazz)
      (let ((range (naturals (get-line~ start) (+ end-line 1))))
        (for-each recolorize-row range))))
  
  
  (method (type-heuristic)
    (let ((first-line (paragraph-string~ model 0)))
      (if (starts-with? first-line ";;;")
          'jazz
        'c)))))
