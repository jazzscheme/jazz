;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Jazz Text-View
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.editor.jazz.text.Jazz-Text-View jazz


(import (jazz.action)
        (jazz.application)
        (jazz.clipboard)
        (jazz.component)
        (jazz.designer)
        (jazz.doc)
        (jazz.editor.jazz)
        (jazz.editor.lisp)
        (jazz.feedback)
        (jazz.graphic)
        (jazz.jml)
        (jazz.locale)
        (jazz.menu)
        (jazz.preferences)
        (jazz.resource)
        (jazz.text)
        (jazz.ui)
        (jazz.workspace))


(class Jazz-Text-View extends Lisp-Text-View

  
  (form
    (<install> tooltip?: #t))

  
  (method override (install rest)
    (nextmethod rest)
    (let ((pref (preferences)))
      (add-style 'Documented-Declaration   (get-documented-declaration-style~ pref))
      (add-style 'Undocumented-Declaration (get-undocumented-declaration-style~ pref))
      (add-style 'Literal                  (get-literal-style~ pref))))
  
  
  (method meta override (external-name . rest)
    'jazz-text)

  
  (method override (preferences)
    (get-preferences '(documents jazz-text)))
    
  
  (method override (new-syntax)
    (new Jazz-Syntax model))


  ;;;
  ;;;; Actions
  ;;;
  

  (method override (focus-actions)
    (cons (find-actions 'jazz-text)
          (nextmethod)))
  
  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method override (get-context-menu)
    (let* ((menu (new Jazz-Text-Menu))
           (controller (get-document-controller))
           (moniker (get-moniker~ controller)))
      @waiting
      (when (or (not moniker) (read/write?~ moniker))
        (set-visible?~ (locate~ menu 'set-read/write) #f))
      (layout-menu~ menu)
      menu))
    
  
  ;;;
  ;;;; Design
  ;;;

  
  (method (on-design-form evt)
    (define (find-editor form)
      (continuation-capture
        (lambda (return)
          (for-each (lambda (frame)
                      (when (is? frame Host-View)
                        (let ((guest (get-guest~ frame)))
                          (when (is? guest jazz.designer:Component-Editor)
                            (let ((designer (get-designer~ guest)))
                              (when (and designer (eq? form (get-form~ designer)))
                                (continuation-return return frame)))))))
                    (all-frames include-invisibles?: #t))
          #f)))
    
    (unimplemented 'on-design-form)
    @convert
    (let* ((name (current-category-name))
           (class (autoload name)))
      (if (not (subtype? class Component))
          (error "Only Component classes can be designed")
        (let* ((form (get-class-form~ class))
               (frame (and form (find-editor form))))
            (if frame
                (focus-host~ frame)
              (let* ((component (new class))
                     (editor-class (if (is? component View) jazz.designer:View-Editor jazz.designer:Manager-View)))
                (new-frame editor-class client: component)))))))
  
  
  (method (on-copy-list evt)
    (let ((appl (get-application))
          (list (map (lambda (object) (new Clipboard (->string object :reader) 'unicode-text)) (read-string-content (get-selected-string)))))
      (push-clipboard-list~ appl list)
      (user-message "Pushed {a} elements onto the clipboard stack" (length list))))

  
  ;;;
  ;;;; Tooltip
  ;;;
  

  (method override (get-tooltip-context view)
    #f
    @convert
    (let* ((pos (view->text view))
           (expl (new Jazz-Explorer model start: pos end: pos)))
      (catch (Explore-Error err #f)
        (when (outer-expr~ expl atomic?: #t explore-whitespace?: #f)
          (let ((kind (get-kind~ expl)))
            (when (eq? kind 'symbol)
              (let* ((range (get-range~ expl))
                     (location (range-location range))
                     (text (and location (present-location location))))
                (when text
                  (let ((bounds (line-range-rect (get-line~ (get-start~ range)) (get-col~ (get-start~ range)) (get-col~ (get-end~ range)))))
                    (when (in-rect? view bounds)
                      (new Tooltip-Context
                        view: self
                        text: text
                        position: (+ (rect-position bounds) (new Point -10 (rect-height bounds)))
                        bounds: bounds
                        font: {Font Label})))))))))))
  
  
  ;;;
  ;;;; Evaluation
  ;;;
  
  
  (method override (prepare-expressions range)
    (define (collect-namespaces)
      (let ((namespaces '())
            (expl (new Jazz-Explorer model range: range)))
        (while (outer-expr~ expl)
          (when (namespace-expr?~ expl)
            (let ((namespace (namespace-declaration-range~ expl include-invoices?: #t)))
              (set! namespaces (cons namespace namespaces)))))
        namespaces))
    
    (define (package-expressions namespaces expressions)
      (let ((first (if (not-null? namespaces) (car namespaces) range)))
        (let ((first-line (get-line~ (get-start~ first)))
              (first-col (get-col~ (get-start~ first))))
          (let ((line first-line)
                (col first-col)
                (output (open-output-string)))
            (define (fill rng)
              (let ((l (get-line~ (get-start~ rng)))
                    (c (get-col~ (get-start~ rng))))
                (when (>= l line)
                  (let (iterate)
                    (if (= l line)
                        (when (>= c col)
                          (display (make-string (- c col) #\space) output)
                          (set! col c))
                      (display #\newline output)
                      (set! line (+ line 1))
                      (set! col 0)
                      (iterate))))))
            
            (for-each (lambda (range)
                        (let ((namespace (get-string range)))
                          (fill range)
                          (for-each-pair (lambda (pair)
                                           (let ((str (car pair))
                                                 (last? (null? (cdr pair))))
                                             (display str output)
                                             (if (not last?)
                                                 (begin
                                                   (newline output)
                                                   (set! line (+ line 1))
                                                   (set! col 0))
                                               (set! col (+ col (cardinality str))))))
                                         (split namespace (string #\newline)))))
                      namespaces)
            (fill range)
            (display expressions output)
            (display (make-string (length namespaces) #\)) output)
            (values (get-output-string output) first-line first-col)))))
    
    (let ((container (get-locat-container))
          (namespaces (collect-namespaces))
          (string (get-string range)))
      (receive (str line col) (package-expressions namespaces string)
        (list 'jazz str container line col))))


  ;;;
  ;;;; Breaks
  ;;;
  
  
  (method package (on-add-break evt)
    @convert
    (let* ((range (current-expr-range))
           (loc (range-location range)))
      (receive (resolved? in-context? toplevel-closure object) (resolve-location~ Interpreter loc)
        (if (not resolved?)
            (error "Unable to resolve location: {t}" loc)
          (add-break~ Interpreter object)
          (apply-style 'Break (get-start~ range) (+ (get-start~ range) 1))))))
  
  
  (method package (on-remove-break evt)
    @convert
    (let* ((range (current-expr-range))
           (loc (range-location range)))
      (receive (resolved? in-context? toplevel-closure object) (resolve-location~ Interpreter loc)
        (if (not resolved?)
            (bell)
          (remove-break~ Interpreter object)
          (let ((run (get-run-at (+ (get-start~ range) 1))))
            (when run
              (set-style~ run default-style)
              (invalidate-paragraph (get-paragraph (get-line~ (get-start~ range))))))))))

  
  ;;;
  ;;;; Presentation
  ;;;
  
  
  ;; todo: code from old jazz was not portable
  (definition (present-location location)
    )
  

  ;;;
  ;;;; Location
  ;;;
  
  
  @unused
  (method (current-location)
    (position->location (get-start)))
  
  
  @unused
  (method (position->location pos)
    (let ((expl (new Jazz-Explorer model start: pos end: pos)))
      (when (outer-expr~ expl outer-composite?: #f)
        (let ((range (get-range~ expl)))
          (range-location range)))))
  
  
  (method (location-class loc (load?: load? #f))
    @convert
    (let* ((class-name (car loc))
           (class (global-ref~ class-name load?)))
      (if (not class)
          (error "Unable to find class: {t}" class-name)
        (let ((meta? #f))
          (for-each (lambda (name)
                      (if (eq? name 'meta)
                          (set! meta? #t)
                        (set! class (definition-value (category-field (if meta? (class-of class) class) name)))
                        (set! meta? #f)))
                    (cdr loc)))
        class)))
  
  
  (method (declaration-name-info object)
    (unimplemented 'declaration-name-info)
    @convert
    (cond ((category? object)
           (values 1 #f))
          ((slot? object)
           (values (+ 1 (field-modifiers-count object)) #f))
          ((field? object)
           (let ((value (definition-value object)))
             (cond ((procedure? value) (values (+ 1 (field-modifiers-count object)) #t))
                   ((external? value) (values (+ 2 (field-modifiers-count object) 1) #t))
                   (else #f))))
          (else
           #f)))
  
  
  (method (declaration-name-location? object internal-location)
    (let ((info (declaration-name-info object)))
      (when info
        (receive (skip inside-allowed?) info
          (or (= internal-location (list skip))
              (and inside-allowed? (= internal-location (list skip 0))))))))


  (method (range-location range)
    (let ((expl (new Jazz-Explorer model start: (get-start~ range) end: (get-end~ range)))
          (location #f)
          (previous-def? #f)
          (done? #f))
      (while (not done?)
        (let ((rank (outer-expr~ expl)))
          (if (not rank)
              (set! done? #t)
            (let ((def? (declaration-expr?~ expl)))
              (if def?
                  (receive (modifiers name) (declaration-modifiers/name~ expl)
                    (let ((loc (if previous-def? location (cons rank location))))
                      (if (memq? 'meta modifiers)
                          (set! location (cons 'meta (cons name loc)))
                        (set! location (cons name loc)))))
                (set! location (cons rank location)))
              (set! previous-def? def?)))))
      location))


  (method public (location-range location (toplevel-location: toplevel-location #f))
    (let ((expl (new Jazz-Explorer model end: (text-beginning))))
      (forward-location~ expl location toplevel-location: toplevel-location)
      (get-range~ expl)))


  ;;;
  ;;;; Documentation
  ;;;
  
  
  (method (on-edit-documentation evt)
    (let ((symbol (current-symbol)))
      (if (not symbol)
          (bell)
        (let ((appl (get-application)))
          (edit-documentation~ appl symbol)))))
  
  
  (method (on-present-documentation evt)
    (present-documentation (current-symbol)))

  
  (method (present-documentation symbol)
    (define (doc-jml)
      (when symbol
        (let ((doc (get-documentation~ (get-application) symbol)))
          (when doc
            (present-text~ doc)))))
    
    (let ((jml (doc-jml)))
      (if (not jml)
          (bell)
        (let* ((view (new Documentation-View size: {Dimension 600 300}))
               (text (locate~ view 'text))
               (pos {Point 100 100})
               (alternate {Point 100 100})
               (border (new Border-View border-type: 'solid))
               (display (get-display)))
          (set-text~ (get-model~ text) (transform-jml (parse-jml jml) (new DocToText-Transformation)))
          (popup~ display view pos alternate-position: alternate border: border)))))
  
  
  ;;;
  ;;;; Arguments
  ;;;
  
  
  ;; todo
  ;;   make work in console
  ;;   support for { [ ...

  
  (method override (show-arguments)
    (define (show-declaration-arguments expl)
      @convert
      (let ((name (get-marked~ expl))
            (info (current-toplevel-info)))
        (when info
          (receive (in category-info) info
            (bind (category kind meta? name keywords) category-info
              (when category
                (let ((symbol (find-symbol name)))
                  (when symbol
                    (let ((imports (getf keywords 'uses)))
                      (show-symbol-arguments symbol category imports))))))))))
    
    (define (show-symbol-arguments symbol class packages)
      (unimplemented 'show-symbol-arguments)
      @convert
      (let ((field (find-in symbol class packages)))
        (when field
          (let ((value (definition-value field)))
            (typecase value
              ((External)
               (show-external-arguments symbol value))
              ((%function)
               (show-function-arguments symbol value))
              ((Closure)
               (show-function-arguments symbol (closure-function~ Interpreter value))))))))
    
    (define (show-external-arguments symbol external)
      @convert
      (user-message "({s} {l}{a}) {s}"
                    symbol
                    (map category-identifier (accumulate (proxy-parameters~ Interpreter external) get-type~ List))
                    (if (proxy-rest?~ Interpreter external) " . rest" "")
                    (category-identifier (get-type~ (proxy-result~ Interpreter external)))))
    
    (define (show-function-arguments symbol function)
      @convert
      (let* ((parameters (function-parameters~ Interpreter function))
             (output (open-output-string))
             ;; convert
             (rest 'rest))
        (present-parameters parameters rest output)
        (user-message "({a} {a})" symbol (get-output-string output))))
    
    (define (present-parameters parameters bind output)
      (define (present-parameter parameter output)
        @convert
        (typecase parameter
          ((Variable) (format output "{s}" (variable-symbol~ Interpreter parameter)))
          (else (format output "{s}" parameter))))
      
      (when parameters
        (cond ((pair? parameters)
               (present-parameter (car parameters) output)
               (format output " ")
               (present-parameters (cdr parameters) bind output))
              (bind
                    (format output "{a}" bind))
              (else
               (format output ". {a}" parameters)))))
    
    (when (empty-selection?)
      (let ((expl (new Jazz-Explorer model start: (get-start) end: (get-end))))
        (when (and (backward-expr~ expl)
                   (= (get-kind~ expl) 'symbol))
          (case (char-backward~ expl 0)
            ((#\open-parenthesis) (show-declaration-arguments expl)))))))

  
  ;;;
  ;;;; Category
  ;;;
  
  
  (method (current-category-name)
    @convert
    (receive (in category-info) (current-toplevel-info)
      (bind (category kind meta? name keywords) category-info
        name)))
  
  
  (method (toplevel-expr pos)
    (let ((expl (new Jazz-Explorer model start: pos end: pos))
          (range #f))
      (while (outer-expr~ expl)
        (set! range (get-range~ expl)))
      range))
  
  
  ;;;
  ;;;; Edit
  ;;;
    
  
  (method override (edit-symbol-class symbol)
    @convert
    (when (in-manifest? symbol)
      (edit-class~ (get-application) symbol)
      #t))
  
  
  ;;;
  ;;;; Reprint Form
  ;;;
  
  
  (method public (on-reprint-current-form evt)
    (reprint-current-form))
  
  
  (method public (reprint-current-form (space-tag?: space-tag? #t) (space-name?: space-name? #t))
    (let ((range (declaration-range (get-end))))
      (if range
          (let ((str (get-string range)))
            (let ((expr (parameterize ((walk-for #f))
                          (with-jazz-readtable
                            (lambda ()
                              (read-string-element str))))))
              (if (and (pair? expr)
                       (eq? (car expr) 'form)
                       (pair? (cdr expr))
                       (pair? (cadr expr))
                       (eq? (car (cadr expr)) '<install>))
                  (let ((form (jml->form (cadr expr))))
                    (if (is? form Form)
                        (let* ((designer (new Former form: form))
                               (output (saved-form~ designer 2 space-tag?: space-tag? space-name?: space-name?)))
                          (if (string=? str output)
                              (user-message "No changes to current form")
                            (with-update-locked
                              (lambda ()
                                (set-selection range)
                                (insert-string output)
                                (user-message "Current form reprinted")))))
                      (bell)))
                (bell))))
        (bell)))))


;;;
;;;; Documentation-View
;;;


(class Documentation-View extends Layout-View
  
  
  (form
    (<install>                                     layout-type: fill
      (<Scroller-View>                             hscroll?: #f vscroll?: #t style: tool
        (<!>                         name: content layout-type: fill
          (<Documentation-Text-View> name: text    background: {Color Tooltip} editable?: #f))))))


;;;
;;;; Jazz-Text-Menu
;;;


(class Jazz-Text-Menu extends Context-Menu
  
  
  (form
    (<install>
      @waiting
      (<Separator-Item>)
      @waiting
      (<Label-Item>     name: design-form          title: "Design Form" icon: {Image-Resource "Designer"} action-handler: {Action jazz-text design-form})
      (<Separator-Item>)
      (<Label-Item>     name: browse-class         title: "Browse Class" icon: {Image-Resource "Class"} action-handler: {Action ide browse-class})
      (<Label-Item>     name: browse-method        title: "Browse Method" icon: {Image-Resource "Method"} action-handler: {Action ide browse-method})
      (<Separator-Item>)
      (<Label-Item>     name: edit-definitions     title: "Find Definitions" icon: {Image-Resource "Edit"} action-handler: {Action code-text edit-definitions})
      (<Label-Item>     name: edit-references      title: "Find References" action-handler: {Action code-text edit-references})
      (<Separator-Item>)
      (<Label-Item>     name: evaluate             title: "Evaluate" icon: {Image-Resource "Execute"} action-handler: {Action code-text evaluate})
      @waiting
      (<Label-Item>     name: edit-documentation   title: "Edit Documentation" action-handler: {Action jazz-text edit-documentation})
      @waiting
      (<Separator-Item>)
      @waiting
      (<Label-Item>     name: add-break            title: "Add Break" icon: {Image-Resource "AddBreak"} action-handler: {Action jazz-text add-break})
      @waiting
      (<Label-Item>     name: remove-break         title: "Remove Break" icon: {Image-Resource "RemoveBreak"} action-handler: {Action jazz-text remove-break})
      @waiting
      (<Separator-Item>)
      @waiting
      (<Label-Item>     name: set-read/write       title: "Set Read/Write" action-handler: {Action jazz-text set-read/write})
      (<Separator-Item>)
      (<Label-Item>     name: cut                  title: {Locales english: "Cut" french: "Couper"} icon: {Image-Resource "Cut"} action-handler: {Action view cut})
      (<Label-Item>     name: copy                 title: {Locales english: "Copy" french: "Copier"} icon: {Image-Resource "Copy"} action-handler: {Action view copy})
      (<Label-Item>     name: paste                title: {Locales english: "Paste" french: "Coller"} icon: {Image-Resource "Paste"} action-handler: {Action view paste})
      (<Separator-Item>)
      (<Label-Item>     name: column               title: "Column"
        (<Column-Menu>))
      (<Label-Item>     name: format               title: "Format"
        (<Format-Menu>))))))
