;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Class Browser
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2012
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.editor.jazz.tools.Class-Browser jazz


(import (jazz.catalog)
        (jazz.catalog.entry)
        (jazz.graphic)
        (jazz.ide)
        (jazz.jml)
        (jazz.library)
        (jazz.system)
        (jazz.ui)
        (jazz.ui.view))


(class Class-Browser extends Layout-View


  (form
    (<install>                                             size: {Dimension 395 599} layout-type: border
      (<Layout-View>                  name: toolbar        size: {Dimension 300 33} location: north layout-type: flow layout-insets: {Rect 0 6 0 0}
        (<Separator>                                       size: {Dimension 2 0})
        (<Label-View>                 name: class-label    justification: (head -2) title: "Class:" size: {Dimension 31 20} font: {Font Label})
        (<Separator>                                       size: {Dimension 4 0})
        (<Border-View>                                     size: {Dimension 150 21} border-type: fill border-insets: {Rect 0 2 0 0}
          (<Border-View>                                   border-type: edge style: entry
            (<Scroller-View>                               hscroll?: #f vscroll?: #f
              (<!>                    name: content        layout-type: fill
                (<IDE-Text-View>      name: class          left-padding: 2 top-padding: 2 accepts-returns?: #f show-unfocused-selection?: #f focus-selects-all?: #t return-press-handler: {Event-Handler :form on-return-press})))))
        (<Separator>                                       size: {Dimension 12 0})
        (<Label-View>                 name: method-label   justification: (head -2) title: "Method:" size: {Dimension 41 20} font: {Font Label})
        (<Separator>                                       size: {Dimension 4 0})
        (<Border-View>                                     size: {Dimension 150 21} border-type: fill border-insets: {Rect 0 2 0 0}
          (<Border-View>                                   border-type: edge style: entry
            (<Scroller-View>                               hscroll?: #f vscroll?: #f
              (<!>                    name: content        layout-type: fill
                (<IDE-Text-View>      name: method         left-padding: 2 top-padding: 2 accepts-returns?: #f show-unfocused-selection?: #f focus-selects-all?: #t return-press-handler: {Event-Handler :form on-return-press})))))
        (<Push-Button>                name: browse         location: tail title: "Browse" size: {Dimension 100 22} action-handler: {Event-Handler :form on-browse}))
      (<Border-View>                  name: classes-border location: center border-type: edge style: entry
        (<Scroller-View>                                   style: document hscroll?: #t vscroll?: #t
          (<!>                        name: content        layout-type: fill
            (<Tree-Header>                                 style: document
              (<!>                    name: content
                (<Tree-View>          name: classes        multiple-selection?: #t portfolio: :images double-click-handler: {Event-Handler :form on-double-click}
                  (<Tree-Node-Column>                      title: "Name" display-images?: #f width: 419)))))))))
  
  
  (method meta override (external-name . rest)
    'class-browser)

  
  ;;;
  ;;;; Host
  ;;;
    

  (method meta override (host-icon)
    {Image-Resource "Class"})
  
  
  (method meta override (host-title)
    "Class Browser")
  
  
  (method meta override (host-size)
    {Dimension 800 600})
  
  
  (method override (host-workspaces)
    '(home))

  
  (method override (focus-default)
    (acquire-focus~ (locate 'class)))
  
  
  ;;;
  ;;;; Access
  ;;;
  
  
  (method public (get-class-name)
    (let ((str (get-string-content~ (locate 'class))))
      (and (not (empty-string? str))
           str)))
  
  
  (method public (set-class-name value)
    (let ((name-view (locate 'class)))
      (when value
        (set-string-content~ name-view value))
      (select-all~ name-view)))
  
  
  (method public (focus-class-name)
    (acquire-focus~ (locate 'class)))
  
  
  (method public (get-method-name)
    (let ((str (get-string-content~ (locate 'method))))
      (and (not (empty-string? str))
           str)))
  
  
  (method public (set-method-name value)
    (let ((name-view (locate 'method)))
      (when value
        (set-string-content~ name-view value))
      (select-all~ name-view)))
  
  
  (method public (focus-method-name)
    (acquire-focus~ (locate 'method)))
  
  
  ;;;
  ;;;; Actions
  ;;;
  
  
  
  (method override (guest-actions)
    (cons (find-actions 'class-browser)
          (nextmethod)))

  
  ;;;
  ;;;; Events
  ;;;


  (method override (resize dh dv)
    (nextmethod dh dv)
    (move-figure~ (locate 'browse) dh 0)
    (size-figure~ (locate 'classes-border) dh dv))
  
  
  (method (on-browse evt)
    (browse))
  
  
  (method override (on-return-press evt)
    (on-browse evt))
  
  
  (method (on-double-click evt)
    (let ((tree (get-sender~ evt)))
      (for-each edit~ (get-selected-data~ tree))))
  
  
  ;;;
  ;;;; Tab
  ;;;
  
  
  (method override (get-tab-stops)
    (list
      (locate 'class)
      (locate 'method)
      (locate 'classes)))

  
  ;;;
  ;;;; Browse
  ;;;
  
  
  (method protected (browse)
    (define (get-class-entry)
      (let ((class-name (get-class-name)))
        (if (not class-name)
            (find-entry "Object" 'class)
          (find-entry class-name 'class))))
    
    (let ((entry (get-class-entry)))
      (if (not entry)
          (message-box (format "Unable to find class: {a}" (or (get-class-name) "")))
        (let ((kind (get-kind~ entry)))
          (if (neq? kind 'class)
              (message-box (format "Can only browse classes: {s}" kind))
            (with-cursor :wait
              (lambda ()
                (let ((method-name (get-method-name)))
                  (browse-inheritance-tree entry method-name)))))))))
  
  
  (method (browse-inheritance-tree entry method-name)
    (let* ((tree (locate 'classes))
           (methods (and method-name (method-entries method-name)))
           (method-ascendants (and method-name (remove-duplicates (apply append! (map class-entry-ascendants (map method-entry-class methods)))))))
      (define class-ascendant-cache
        (make-table test: eq?))
      
      (define (find-class-ascendant class)
        (or (table-ref class-ascendant-cache class #f)
            (let ((ascendant (class-entry-ascendant class)))
              (table-set! class-ascendant-cache class ascendant)
              ascendant)))
      
      (define (upward type)
        (let* ((ascendant (find-class-ascendant type))
               (father (and ascendant (upward ascendant))))
          (insert-class type father)))
      
      (define (downward type father)
        (let ((father (insert-class type father))
              (descendants (if method-ascendants (collect-if (lambda (class) (eq? (find-class-ascendant class) type)) method-ascendants) (class-entry-descendants type))))
          (for-each (lambda (subtype)
                      (downward subtype father))
                    (sort string<? descendants key: get-name~))))
      
      (define (insert-class type father)
        (let* ((state 'expanded)
               (title (->string (get-name~ type)))
               (method (and methods (find methods type key: method-entry-class return: 'item)))
               (font (and method {Font Label-Bold}))
               (color (and method
                           (cond ((or (memq? 'virtual (get-modifiers~ method))
                                      (memq? 'chained (get-modifiers~ method)))
                                  {Color Dark-Red})
                                 (else
                                  {Color Dark-Green})))))
          (add-row~ tree father: father state: state children: (list (new Tree-Node title: title font: font color: color image: {Image-Resource "Class"})) user-data: (or method type))))
      
      (remove-every-row~ tree)
      (with-update-locked~ tree
        (lambda ()
          (let ((ascendant (class-entry-ascendant entry)))
            (downward entry (and ascendant (upward ascendant))))))))))
