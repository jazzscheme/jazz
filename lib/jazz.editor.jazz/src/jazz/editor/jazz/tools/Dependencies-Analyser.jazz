;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Dependencies Analyser
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.editor.jazz.tools.Dependencies-Analyser jazz


(import (jazz.event)
        (jazz.feedback)
        (jazz.ide)
        (jazz.jml)
        (jazz.jrm)
        (jazz.library)
        (jazz.network)
        (jazz.process)
        (jazz.resource)
        (jazz.system)
        (jazz.ui)
        (jazz.ui.view))


(class Dependencies-Analyser extends View
  
  
  (property kernel initialize #f accessors generate)


  (form
    (<install>                                                   size: {Dimension 495 599}
      (<Border-View>                   name: name-border         position: {Point 2 9} size: {Dimension 250 19} border-type: edge style: entry
        (<Scroller-View>                                         hscroll?: #f vscroll?: #f
          (<!>                         name: content             layout-type: fill
            (<IDE-Text-View>           name: package             left-padding: 2 top-padding: 2 accepts-returns?: #f show-unfocused-selection?: #f focus-selects-all?: #t return-press-handler: {Event-Handler :form on-return-press}))))
      (<Push-Button>                   name: analyse             title: "Analyse" position: {Point 372 7} size: {Dimension 120 22} action-handler: {Event-Handler :form on-analyse})
      (<Border-View>                   name: declarations-border position: {Point 2 35} size: {Dimension 491 562} border-type: edge style: entry
        (<Scroller-View>                                         style: document hscroll?: #t vscroll?: #t
          (<!>                         name: content             layout-type: fill
            (<Tree-Header>                                       style: document
              (<!>                     name: content
                (<Tree-View>           name: declarations        filled-column: declaration multiple-selection?: #t portfolio: :images double-click-handler: {Event-Handler :form on-double-click}
                  (<Tree-Node-Column>  name: declaration         title: "Name" width: 500)
                  (<Tree-Label-Column> name: references          title: "References" width: 100)))))))))
  
  
  (method meta override (external-name . rest)
    'dependencies-analyser)

  
  ;;;
  ;;;; Host
  ;;;
    

  (method meta override (host-icon)
    {Image-Resource "Class"})
  
  
  (method meta override (host-title)
    "Dependencies Analyser")
  
  
  (method meta override (host-size)
    {Dimension 495 600})

  
  (method override (focus-default)
    (acquire-focus~ (locate 'package)))

  
  ;;;
  ;;;; Events
  ;;;


  (method override (resize dh dv)
    (nextmethod dh dv)
    (move-figure~ (locate 'analyse) dh 0)
    (size-figure~ (locate 'declarations-border) dh dv))
  
  
  (method (on-analyse evt)
    (with-cursor :wait
      (lambda ()
        (analyse))))
  
  
  (method override (on-return-press evt)
    (on-analyse evt))
  
  
  (method (on-double-click evt)
    )

  
  ;;;
  ;;;; Analyse
  ;;;
  
  
  (definition debug-analysis?
    #f)
  
  
  (method (analyse)
    (define (feedback . rest)
      (execute-event
        (lambda ()
          (apply user-message rest))))
    
    (define (jazz=>scheme lst)
      (if (memq? 'jazz lst)
          (remove 'scheme lst)
        lst))
    
    (define (present-all explicit implicit)
      (execute-event
        (lambda ()
          (let ((e (jazz=>scheme explicit))
                (i (jazz=>scheme (table-keys implicit)))
                (tree (locate 'declarations)))
            (remove-every-row~ tree)
            (with-update-locked~ tree
              (lambda ()
                (present tree implicit (intersection e i) {Image-Resource "Green"})
                (present tree implicit (difference i e) {Image-Resource "Red"})
                (present tree implicit (difference e i) {Image-Resource "Blue"})))))))
    
    (define (present tree implicit keys image)
      (let ((package-names (sort ci<? keys)))
        (for-each (lambda (package-name)
                    (let ((declarations (table-ref implicit package-name #f)))
                      (let ((father (add-row~ tree children: (list (new Tree-Node title: (format "{a}" package-name) image: image)
                                                                   (new Tree-Label title: "")))))
                        (when declarations
                          (let ((locators (sort ci<? (table-keys declarations) key: present-reference)))
                            (for-each (lambda (locator)
                                        (let ((references (table-ref declarations locator))
                                              (count 0))
                                          (for-each (lambda (references)
                                                      (let ((references (cdr references)))
                                                        (increase! count (if (null? references)
                                                                             1
                                                                           (length references)))))
                                                    references)
                                          (let ((father (add-row~ tree father: father children: (list (new Tree-Node title: (present-reference locator) image: {Image-Resource "Link"})
                                                                                                      (new Tree-Label title: (number->string count))))))
                                            (for-each (lambda (reference)
                                                        (add-row~ tree father: father children: (list (new Tree-Node title: (->string reference :reader) image: {Image-Resource "Green"})
                                                                                                      (new Tree-Label title: ""))))
                                                      references))))
                                      locators))))))
                  package-names)))
    
    (assert kernel
      (when debug-analysis?
        (let ((ide (get-process)))
          (start-remote-server~ ide)
          (start-debuggers~ ide)))
      (thread-start!
        (new-thread
          (lambda ()
            (let ((server-port (open-tcp-server 0)))
              (let ((debugger-args (if debug-analysis? (list "-debugger" (encode-host/port (listening-host~ (get-remote-listener)) (listening-port~ (get-remote-listener)))) '()))
                    (port-args (list "-port" (number->string (socket-info-port-number (tcp-server-socket-info server-port)))))
                    (package-arg (get-string-content~ (locate 'package))))
                (open-process
                  (list
                    path: (parse~ kernel)
                    arguments: `("-:daqQ-" ,@debugger-args "-run" "jam" "dependencies" "-analysis" ,@port-args ,package-arg)
                    stdin-redirection: #f
                    stdout-redirection: #f
                    stderr-redirection: #f
                    show-console: #f)))
              (let ((port (read server-port)))
                (let (analysing)
                  (let ((unit-name #f @wait (read port)))
                    (if unit-name
                        (begin
                          (feedback "Analysing {a}..." unit-name)
                          (analysing))
                      (let ((explicit (read-binary port))
                            (implicit (read-binary port)))
                        (present-all explicit implicit)
                        @wait
                        (feedback "Done"))))))))
          'analyse))))

  
  ;;;
  ;;;; Selection
  ;;;
  
  
  (method (selected-declarations)
    (let* ((tree (locate 'declarations))
           (selection (get-selection~ tree)))
      (map (lambda (rank)
             (get-user-data~ (get-row~ tree rank)))
           selection)))))
