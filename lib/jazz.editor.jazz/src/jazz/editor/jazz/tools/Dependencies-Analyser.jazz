;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Dependencies Analyser
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.editor.jazz.tools.Dependencies-Analyser jazz


(import (jazz.application)
        (jazz.clipboard)
        (jazz.debugger.jazz)
        (jazz.event)
        (jazz.feedback)
        (jazz.graphic)
        (jazz.handler)
        (jazz.ide)
        (jazz.io)
        (jazz.markup)
        (jazz.menu)
        (jazz.outline)
        (jazz.project)
        (jazz.resource)
        (jazz.text)
        (jazz.tree)
        (jazz.ui)
        (jazz.view))


(class Dependencies-Analyser extends Navigable-Results
  
  
  (property kernel initialize #f accessors generate)


  (form
    (<install>                                            size: {Dimension 495 599} layout-type: border
      (<!>                           name: tools
        (<Layout-View>                                    size: {Dimension 150 20} layout-type: fill layout-insets: {Rect 0 1 0 0} before: edit
          (<Border-View>             name: name-border    border-color: {Color Dark}
            (<Scroller-View>                              hscroll?: #f vscroll?: #f
              (<!>                   name: content        layout-type: fill
                (<IDE-Text-View>     name: package        left-padding: 2 top-padding: 2 accepts-returns?: #f show-unfocused-selection?: #f focus-selects-all?: #t return-press-handler: {Event-Handler :guest on-analyse}))))))
      (<!>                           name: scroller
        (<!>                         name: content
          (<!>                       name: header
            (<!>                     name: content
              (<!>                   name: results        filled-column: declaration multiple-selection?: #t portfolio: :images context-menu-handler: {Event-Handler :form on-context-menu}
                (<Tree-Node-Column>  name: declaration    title: "Name"))))))))
  
  
  (method meta override (external-name self . rest)
    'Dependencies)

  
  ;;;
  ;;;; Host
  ;;;
    

  (method meta override (host-icon self)
    {Image-Resource "Info"})
  
  
  (method meta override (host-title self)
    "Dependencies")
  
  
  (method meta override (host-size self)
    {Dimension 495 600})
  
  
  (method override (get-tools-view self)
    (locate self 'tools))

  
  (method override (focus-default self)
    (acquire-focus (locate self 'package)))

  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method (on-context-menu self evt)
    (let* ((sender (get-sender evt))
           (pos (get-position evt))
           (acquired (acquire self sender pos))
           (menu (get-context-menu self)))
      (when menu
        (with-context-click sender pos
          (lambda ()
            (track-popup-menu self menu acquired))))))
  
  
  (method override (get-context-menu self)
    (new Dependencies-Menu))
  
  
  (method (on-dependencies self evt)
    (let ((tree (get-tree self))
          (text (locate self 'package)))
      (let ((info (get-single-selected-data tree)))
        (when (symbol? info)
          (set-string-content text (->string info))
          (analyse self)))))
  
  
  (method (on-analyse self evt)
    (with-cursor :wait
      (lambda ()
        (analyse self))))
  
  
  (method override (edit-selection self select)
    (let ((tree (get-tree self)))
      (let ((info (get-single-selected-data tree)))
        (when (pair? info)
          (bind (name . locat) info
            (bind (filename line col) locat
              (let ((file (new File (tokenise-filename filename)))
                    (start (new Cell line col))
                    (end (new Cell line (+ col (cardinality (symbol->string name))))))
                (edit-document (current-application) file selection: (new Range$Cell$ start end)))))))))
  
  
  (method override (next-editable self current)
    (let ((tree (get-tree self)))
      (define (target-row)
        (let ((current (get-selected-row tree)))
          (or current
              (let ((count (get-visible-count tree)))
                (and (> count 0)
                     (get-row tree 0))))))
        
      (define (find-editable row)
        (let ((next (next-row tree row)))
          (cond ((not next)
                 #f)
                ((editable-row? self (get-user-data next))
                 next)
                (else
                 (find-editable next)))))
      
      (let ((target (target-row)))
        (when target
          (let ((row (find-editable target)))
            (when row
              (ensure-expanded tree row)
              (row->line tree row)))))))
  
  
  (method override (previous-editable self current)
    (let ((tree (get-tree self)))
      (define (target-row)
        (let ((current (get-selected-row tree)))
          (or current
              (let ((count (get-visible-count tree)))
                (and (> count 0)
                     (get-row tree (- count 1)))))))
        
      (define (find-editable row)
        (let ((previous (previous-row tree row)))
          (cond ((not previous)
                 #f)
                ((editable-row? self (get-user-data previous))
                 previous)
                (else
                 (find-editable previous)))))
      
      (let ((target (target-row)))
        (when target
          (let ((row (find-editable target)))
            (when row
              (ensure-expanded tree row)
              (row->line tree row)))))))

  
  ;;;
  ;;;; Analyse
  ;;;
  
  
  (definition debug-analysis?
    #f)
  
  
  (method package (analyse self)
    (define (feedback . rest)
      (synchronize-event
        (lambda ()
          (apply user-message rest))))
    
    (define (jazz=>scheme lst)
      (if (memq? 'jazz lst)
          (remove 'scheme lst)
        lst))
    
    (define (determine-kernel)
      (or kernel (project-kernel (current-project (get-workbench-manager (current-application))))))
    
    (define (present-all explicit implicit)
      (synchronize-event
        (lambda ()
          (let ((e (jazz=>scheme explicit))
                (i (jazz=>scheme (table-keys implicit)))
                (tree (get-tree self)))
            (remove-every-row tree)
            (with-update-locked tree
              (lambda ()
                (present tree implicit (intersection e i) {Image-Resource "Green"})
                (present tree implicit (difference i e) {Image-Resource "Red"})
                (present tree implicit (difference e i) {Image-Resource "Blue"})))))))
    
    (define (present tree implicit keys image)
      (let ((package-names (sort ci<? keys)))
        (for-each (lambda (package-name)
                    (let ((declarations (table-ref implicit package-name #f)))
                      (let ((father (add-row tree children: (list (new Tree-Node title: (format "{a}" package-name) image: image)) user-data: package-name)))
                        (when declarations
                          (let ((locators (sort ci<? (table-keys declarations) key: present-reference)))
                            (for-each (lambda (locator)
                                        (let ((name (last (split-reference locator)))
                                              (references (table-ref declarations locator)))
                                          (let ((father (add-row tree father: father children: (list (new Tree-Node title: (present-reference locator) image: {Image-Resource "Info"})))))
                                            (for-each (lambda (references)
                                                        (bind (unit . locations) references
                                                          (let ((father (add-row tree father: father children: (list (new Tree-Node title: (->string unit) image: {Image-Resource "Document"})))))
                                                            (for-each (lambda (locat)
                                                                        (if (pair? locat)
                                                                            (bind (filename line col) locat
                                                                              (add-row tree father: father children: (list (new Tree-Node title: (format "{a}.{a}" line col) image: {Image-Resource "Link"})) user-data: (cons name locat)))
                                                                          (add-row tree father: father children: (list (new Tree-Node title: (->string locat) image: {Image-Resource "Execute"})))))
                                                                      (sort < locations key: (lambda (info) (if (pair? info) (second info) -1)))))))
                                                      references))))
                                      locators))))))
                  package-names)))
    
    (thread-start!
      (new-thread
        (lambda ()
          (let ((server-port (open-tcp-server 0)))
            (let ((port-args (list "-port" (number->string (socket-info-port-number (tcp-server-socket-info server-port)))))
                  (package-arg (get-string-content (locate self 'package))))
              (if debug-analysis?
                  (let ((command (format "{s} {l}"
                                         (parse (determine-kernel))
                                         `("-run" "jam" "dependencies" "-analysis" ,@port-args ,package-arg))))
                    (set-clipboard-text command)
                    (user-message "Clipboard set to shell command"))
                (open-process
                  (list
                    path: (parse (determine-kernel))
                    arguments: `("-:daqQ-" "-run" "jam" "dependencies" "-analysis" ,@port-args ,package-arg)
                    stdin-redirection: #f
                    stdout-redirection: #f
                    stderr-redirection: #f
                    show-console: #f))))
            (let ((port (read server-port)))
              (let ((explicit (read-binary port))
                    (implicit (read-binary port)))
                (present-all explicit implicit)))))
        'analyse)))

  
  ;;;
  ;;;; Selection
  ;;;
  
  
  (method (selected-declarations self)
    (let* ((tree (get-tree self))
           (selection (get-selection tree)))
      (map (lambda (rank)
             (get-user-data (get-row tree rank)))
           selection))))


;;;
;;;; Dependencies-Menu
;;;


(class Dependencies-Menu extends Context-Menu
  
  
  (form
    (<install>
      (<Label-Item> name: copy title: "Dependencies" icon: {Image-Resource "Info"} action-handler: {Event-Handler :focus-guest on-dependencies})))))
