;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Tracking Results
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.editor.jazz.tracker.Tracking-Results jazz


(import (jazz.catalog)
        (jazz.debugger)
        (jazz.debugger.jazz)
        (jazz.event)
        (jazz.feedback)
        (jazz.graphic)
        (jazz.handler)
        (jazz.io)
        (jazz.layout)
        (jazz.markup)
        (jazz.outline)
        (jazz.presence)
        (jazz.resource)
        (jazz.tree)
        (jazz.ui)
        (jazz.view))


(class Tracking-Results extends Layout-View
  
  
  (slot aggregate initialize 'location)
  
  
  (form
    (<install>                                        size: {Dimension 600 400} layout-type: border position: {Point 1 0}
      (<Layout-View>                name: tools
        (<Push-Tool>                name: start       size: {Dimension 22 22} location: tail tooltip?: #t tooltip-text: "Start Tracking" resource: {Image-Resource "Run"} portfolio: :images action-handler: {Event-Handler :guest on-start-tracker})
        (<Push-Tool>                name: stop        size: {Dimension 22 22} location: tail tooltip?: #t tooltip-text: "Stop Tracking" resource: {Image-Resource "Stop"} portfolio: :images action-handler: {Event-Handler :guest on-stop-tracker})
        (<Separator>                                  size: {Dimension 6 0})
        (<Push-Tool>                name: refresh     size: {Dimension 22 22} tooltip?: #t tooltip-text: "Refresh Tracking" resource: {Image-Resource "Refresh"} portfolio: :images action-handler: {Event-Handler :guest on-refresh-tracking})
        (<Separator>                                  size: {Dimension 4 0})
        (<Push-Tool>                name: reset       size: {Dimension 22 22} tooltip?: #t tooltip-text: "Reset Tracking" resource: {Image-Resource "Clear"} portfolio: :images action-handler: {Event-Handler :guest on-reset-tracking}))
      (<Layout-View>                                  layout-type: border location: center background: {Color Medium}
        (<Layout-View>                                size: {Dimension 100 24} location: north layout-type: box layout-insets: {Rect 0 1 0 0} layout-padding: 2
          (<Label-View>             name: tracking    size: {Dimension 250 23} location: center)
          (<Label-View>                               title: "Aggregate:" size: {Dimension 75 23} location: tail)
          (<Layout-View>                              size: {Dimension 90 22} layout-type: fill layout-insets: {Rect 0 2 0 2} location: tail
            (<Border-View>                            border-color: {Color Dark}
              (<Combo-Box>          name: aggregate   content-change-handler: {Event-Handler :form on-change-aggregate}))))
        (<Scroller-View>                              location: center style: document hscroll?: #t vscroll?: #t
          (<content~>                                 layout-type: fill
            (<Tree-Header>                            style: document
              (<content~>
                (<Allocations-Tree> name: allocations selection-handler: {Selection-Handler :form on-select-location} double-click-handler: {Event-Handler :form on-inspect-data} return-press-handler: {Event-Handler :form on-return-press}))))))))
  
  
  (method meta override (external-name self . rest)
    'Trackings)
  
  
  (method override (finish self initargs)
    (nextmethod self initargs)
    (set-choices (locate self 'aggregate)
      '((location "Location")
        (class "Class")
        (entry "Entry")
        (none "None")))
    (set-value (locate self 'aggregate) 'location))
  
  
  ;;;
  ;;;; Host
  ;;;
  
  
  (method meta override (host-icon self)
    {Image-Resource "Grab"})
  
  
  (method meta override (host-title self)
    "Trackings")
  
  
  (method meta override (host-position self)
    {Point 28 14})
  
  
  (method meta override (host-size self)
    {Dimension 408 608})
  
  
  ;;;
  ;;;; Docked
  ;;;
  
  
  (method override (get-tools-view self)
    (locate self 'tools))
  
  
  (method override (focus-default self)
    (acquire-focus (get-tree self)))
  
  
  ;;;
  ;;;; Access
  ;;;
  
  
  (method package (get-tree self)
    (locate self 'allocations))
  
  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method (on-start-tracker self evt)
    (start-tracker self))
  
  
  (method (on-stop-tracker self evt)
    (stop-tracker self))
  
  
  (method (start-tracker self)
    (user-feedback "Tracking started")
    (tracker-start (require-focused-process (get-debugger-manager))))
  
  
  (method (stop-tracker self)
    (tracker-stop (require-focused-process (get-debugger-manager)))
    (view-tracking self)
    (user-message "Tracking stopped"))
  
  
  (method (on-reset-tracking self evt)
    (reset-tracking self))
  
  
  (method (reset-tracking self)
    (tracking-reset (require-focused-process (get-debugger-manager)))
    (view-tracking self))
  
  
  (method (on-refresh-tracking self evt)
    (view-tracking self))
  
  
  (method (on-change-aggregate self evt)
    (set! aggregate (get-value (get-sender evt)))
    (view-tracking self))
  
  
  (method (on-select-location self evt)
    (let ((user-origin (get-user-origin evt)))
      (edit-source self)
      ;; as a quick solution we let the previous call give the focus to the document
      ;; because a lot of framework behavior depends on a new document gaining focus
      (when user-origin
        (acquire-focus (locate self 'allocations)))))
  
  
  (method (on-inspect-data self evt)
    (inspect-data self))
  
  
  ;;;
  ;;;; Edition
  ;;;
  
  
  (definition *frame-indicators*
    '())
  
  
  (method (edit-source self)
    (for-each (lambda (indicator)
                (edit-location indicator #f))
              *frame-indicators*)
    (set! *frame-indicators*
          (let ((locations (selected-locations self)))
            (if (not locations)
                '()
              (let ((highest .4)
                    (lowest .8))
                (map (lambda (info)
                       (bind (location value minimum maximum) info
                         (let ((value (+ highest (* (if (= minimum maximum) .5 (/ (- maximum value) (- maximum minimum))) (- lowest highest)))))
                           (let ((indicator (new Location-Indicator (new Color red: 1. green: value blue: value))))
                             (edit-location indicator location)
                             indicator))))
                     locations))))))
  
  
  ;;;
  ;;;; Inspection
  ;;;
  
  
  (method (inspect-data self)
    (let ((data (get-single-selected-data (get-tree self))))
      (if (and data (pair? (car data)))
          (bind (entry line value info) (car data)
            ;; process should be cached by view-tracking
            (let ((process (require-focused-process (get-debugger-manager))))
              (let ((debugger (get-debugger process)))
                (inspect-info debugger process info))))
        (bell))))
  
  
  ;;;
  ;;;; Selection
  ;;;
  
  
  (method (selected-locations self)
    (let ((data (get-single-selected-data (get-tree self))))
      (cond ((not data)
             #f)
            ((pair? (car data))
             (collect (lambda (info)
                        (bind (entry line value minimum maximum) info
                          (and entry
                               (list (list (get-file (get-file-definition entry)) line #f) value minimum maximum))))
                      data))
            (else
             (list (list data 0 0 0))))))
  
  
  ;;;
  ;;;; Update
  ;;;
  
  
  (method package (view-tracking self)
    (define (add-entry allocation)
      (bind (info rank size container line stack) allocation
        (define (determine-entry)
          (and container
               (let ((file-entry (cache-container-entry container)))
                 (and file-entry
                      (or (line->entry file-entry (- line 1))
                          (get-root-definition file-entry))))))
        
        (cons (determine-entry) allocation)))
    
    (define (add-stack tree father stack)
      (for-each (lambda (frame)
                  (bind (creator locat) frame
                    ;; quick try
                    (when locat
                      (bind (container line col) locat
                        (let ((title (if (not creator) "<none>" (->string (reference-name creator)))))
                          (add-row tree
                                   father: father
                                   children: (list (new Tree-Node title: title)
                                                   (new Tree-Label title: "")
                                                   (new Tree-Label title: "")
                                                   (new Tree-Label title: "")
                                                   (new Tree-Label title: ""))
                                   user-data: locat))))))
                stack))
    
    (define (sort-allocations partition)
      (sort > (map (lambda (info)
                     (bind (key . allocations) info
                       (list key allocations (length allocations))))
                   partition)
        key: third))
    
    (define (update-header all count total-size)
      (let ((title (format "all: {a}, count: {a}, size: {a}" all count (present-bytes total-size))))
        (set-title (locate self 'tracking) title)
        (set-tooltip? (locate self 'tracking) #t)
        (set-tooltip-text (locate self 'tracking) title)))
    
    (define (present-location allocation)
      (bind (entry info rank size container line) allocation
        (if entry
            (get-name entry)
          (format "{a}:{a}" container line))))
    
    (define (present-class allocation)
      (bind (entry info) allocation
        (reference-name (second info))))
    
    (define (present-object allocation)
      (bind (entry info) allocation
        (third info)))
    
    (define (allocation-data allocation)
      (bind (entry info rank size file line) allocation
        (list (and entry (get-file (get-file-definition entry))) (- line 1) 0)))
    
    (define (sample-data allocation value minimum maximum)
      (bind (entry info rank size container line) allocation
        (list entry (- line 1) value minimum maximum info)))
    
    (define (aggregate-location tree father all total-size allocations)
      (let ((partition (partition allocations key: (lambda (allocation)
                                                     (bind (entry info rank size file line stack) allocation
                                                       (cons file (cons line stack))))
                         test: equal?)))
        (let ((partition (map (lambda (partition)
                                (bind (key . allocations) partition
                                  (let ((count 0)
                                        (size 0))
                                    (for-each (lambda (allocation)
                                                (increase! count)
                                                (increase! size (fourth allocation)))
                                              allocations)
                                    (cons count (cons size allocations)))))
                              partition)))
          (when (not father)
            (update-header all (length partition) total-size))
          (for-each (lambda (partition)
                      (bind (count size . allocations) partition
                        (let ((allocation (car allocations)))
                          (bind (entry info rank sz file line stack) allocation
                            (let ((father
                                    (add-row tree
                                             father: father
                                             children: (list (new Tree-Node title: (present-location allocation))
                                                             (new Tree-Label title: (present-class allocation))
                                                             (new Tree-Label title: (present-object allocation))
                                                             (new Tree-Label title: (number->string count))
                                                             (new Tree-Label title: (number->string size)))
                                             user-data: (allocation-data allocation))))
                              (when stack
                                (add-stack tree father stack)))))))
                    (sort > partition key: car)))))
    
    (define (aggregate-class tree father all total-size allocations)
      (let ((partition (partition allocations key: present-class test: equal?)))
        (let ((partition (map (lambda (partition)
                                (bind (key . allocations) partition
                                  (let ((count 0)
                                        (size 0))
                                    (for-each (lambda (allocation)
                                                (increase! count)
                                                (increase! size (fourth allocation)))
                                              allocations)
                                    (cons count (cons size allocations)))))
                              partition)))
          (update-header all (length partition) total-size)
          (for-each (lambda (partition)
                      (bind (count size . allocations) partition
                        (let ((allocation (car allocations)))
                          (bind (entry info rank sz file line stack) allocation
                            (let ((father
                                    (add-row tree
                                             father: father
                                             children: (list (new Tree-Node title: (present-location allocation))
                                                             (new Tree-Label title: (present-class allocation))
                                                             (new Tree-Label title: (present-object allocation))
                                                             (new Tree-Label title: (number->string count))
                                                             (new Tree-Label title: (number->string size)))
                                             user-data: (allocation-data allocation))))
                              (aggregate-location tree father #f #f allocations))))))
                    (sort > partition key: car)))))
    
    (define (aggregate-entry tree father all total-size allocations)
      (let ((entry-set (sort-allocations (partition allocations key: car))))
        (update-header all (length entry-set) total-size)
        (for-each (lambda (info)
                    (bind (entry allocations cardinality) info
                      (let ((line-set (sort-allocations (partition allocations key: sixth))))
                        (let ((line-samples (map (lambda (info) (car (second info))) line-set))
                              (line-cardinalities (map third line-set)))
                          (let ((sample (car line-samples))
                                (type-samples (partition line-samples key: cadadr))
                                (minimum (minimum line-cardinalities))
                                (maximum (maximum line-cardinalities))
                                (size (sum fourth allocations)))
                            (let ((father
                                    (add-row tree
                                             father: father
                                             children: (list (new Tree-Node title: (present-location sample))
                                                             (new Tree-Node title: (join-strings (map present-class (map cadr type-samples)) " "))
                                                             (new Tree-Label title: (join-strings (map present-object (map cadr type-samples)) " "))
                                                             (new Tree-Label title: (->string cardinality))
                                                             (new Tree-Node title: (->string size)))
                                             user-data: (map (lambda (sample cardinality)
                                                               (sample-data sample cardinality minimum maximum))
                                                             line-samples
                                                             line-cardinalities))))
                              (for-each (lambda (info)
                                          (bind (line allocations cardinality) info
                                            (let ((stack-set (sort-allocations (partition allocations key: seventh test: equal?))))
                                              (for-each (lambda (info)
                                                          (bind (stack allocations cardinality) info
                                                            (let ((sample (car allocations))
                                                                  (size (sum fourth allocations)))
                                                              (let ((father
                                                                      (add-row tree
                                                                               father: father
                                                                               children: (list (new Tree-Node title: (->string line))
                                                                                               (new Tree-Node title: (present-class sample))
                                                                                               (new Tree-Label title: (present-object sample))
                                                                                               (new Tree-Label title: (->string cardinality))
                                                                                               (new Tree-Node title: (->string size)))
                                                                               user-data: (list (sample-data sample cardinality minimum maximum)))))
                                                                (when stack
                                                                  (add-stack tree father stack))))))
                                                        stack-set))))
                                        line-set)))))))
                  entry-set)))
    
    (define (aggregate-none tree father all total-size allocations)
      (update-header all (length allocations) total-size)
      (for-each (lambda (allocation)
                  (bind (entry info rank size file line stack) allocation
                    (let ((father
                            (add-row tree
                                     father: father
                                     children: (list (new Tree-Node title: (present-location allocation))
                                                     (new Tree-Label title: (present-class allocation))
                                                     (new Tree-Label title: (present-object allocation))
                                                     (new Tree-Label title: "1")
                                                     (new Tree-Label title: (number->string size)))
                                     user-data: (allocation-data allocation))))
                      (when stack
                        (add-stack tree father stack)))))
                (sort < allocations key: third)))
    
    (with-cursor :wait
      (lambda ()
        (let ((tree (get-tree self))
              (tracking (tracker-tracking (require-focused-process (get-debugger-manager)))))
          (if (not tracking)
              (remove-every-row tree)
            (bind (all allocations) tracking
              (let ((allocations (map add-entry allocations)))
                (let ((total-size (sum fourth allocations)))
                  (remove-every-row tree)
                  (with-update-locked tree
                    (lambda ()
                      (case aggregate
                        ((location)
                         (aggregate-location tree #f all total-size allocations))
                        ((class)
                         (aggregate-class tree #f all total-size allocations))
                        ((entry)
                         (aggregate-entry tree #f all total-size allocations))
                        (else
                         (aggregate-none tree #f all total-size allocations))))))))))))))


;;;
;;;; Allocations-Tree
;;;


(class Allocations-Tree extends Tree-View
  
  
  (form
    (<install>                            portfolio: :images filled-column: object
      (<Tree-Node-Column>  name: location title: "Location" width: 250 display-images?: #f)
      (<Tree-Label-Column> name: class    title: "Class" width: 150)
      (<Tree-Label-Column> name: object   title: "Object" width: 200)
      (<Tree-Label-Column> name: count    title: "Count" width: 75 justification: tail)
      (<Tree-Label-Column> name: size     title: "Size" width: 75 justification: tail)))))
