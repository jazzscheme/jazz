;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Tracking Results
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.editor.jazz.tracker.Tracking-Results jazz


(import (jazz.catalog)
        (jazz.debugger)
        (jazz.feedback)
        (jazz.graphic)
        (jazz.handler)
        (jazz.io)
        (jazz.jml)
        (jazz.jrm)
        (jazz.layout)
        (jazz.resource)
        (jazz.tree)
        (jazz.ui)
        (jazz.view))


(class Tracking-Results extends Layout-View
  
  
  (slot hierarchical? initialize #t)
  
  
  (form
    (<install>                                        size: {Dimension 600 400} layout-type: border position: {Point 1 0}
      (<Layout-View>                name: tools
        (<Push-Tool>                name: start       size: {Dimension 22 22} location: tail tooltip?: #t tooltip-text: "Start Tracking" resource: {Image-Resource "Run"} portfolio: :images action-handler: {Event-Handler :guest on-start-tracker})
        (<Push-Tool>                name: stop        size: {Dimension 22 22} location: tail tooltip?: #t tooltip-text: "Stop Tracking" resource: {Image-Resource "Stop"} portfolio: :images action-handler: {Event-Handler :guest on-stop-tracker})
        (<Separator>                                  size: {Dimension 6 0})
        (<Push-Tool>                name: refresh     size: {Dimension 22 22} tooltip?: #t tooltip-text: "Refresh Tracking" resource: {Image-Resource "Refresh"} portfolio: :images action-handler: {Event-Handler :guest on-refresh-tracking})
        (<Separator>                                  size: {Dimension 4 0})
        (<Push-Tool>                name: reset       size: {Dimension 22 22} tooltip?: #t tooltip-text: "Reset Tracking" resource: {Image-Resource "Clear"} portfolio: :images action-handler: {Event-Handler :guest on-reset-tracking}))
      (<Layout-View>                                  layout-type: border location: center background: {Color Medium}
        (<Layout-View>                                size: {Dimension 100 24} location: north layout-type: box layout-insets: {Rect 0 1 0 0} layout-padding: 2
          (<Push-Tool>              name: view        size: {Dimension 22 22} tooltip?: #t tooltip-text: "View Tracking..." resource: {Image-Resource "Edit"} portfolio: :images action-handler: {Event-Handler :form on-choose-tracking})
          (<Separator>                                size: {Dimension 4 0})
          (<Label-View>             name: tracking    size: {Dimension 250 23} location: center)
          (<Toggle-Tool>                              size: {Dimension 22 22} tooltip?: #t tooltip-text: "Flatten" resource: {Image-Resource "Flatten"} portfolio: :images action-handler: {Event-Handler :form on-flat/hierarchical} location: tail))
        (<Scroller-View>                              location: center style: document hscroll?: #t vscroll?: #t
          (<content~>                                 layout-type: fill
            (<Tree-Header>                            style: document
              (<content~>
                (<Allocations-Tree> name: allocations selection-handler: {Selection-Handler :form on-select-location} double-click-handler: {Event-Handler :form on-inspect-data} return-press-handler: {Event-Handler :form on-return-press}))))))))
  
  
  (method meta override (external-name . rest)
    'Trackings)
  
  
  ;;;
  ;;;; Host
  ;;;
  
  
  (method meta override (host-icon)
    {Image-Resource "Grab"})
  
  
  (method meta override (host-title)
    "Trackings")
  
  
  (method meta override (host-position)
    {Point 28 14})
  
  
  (method meta override (host-size)
    {Dimension 408 608})
  
  
  ;;;
  ;;;; Docked
  ;;;
  
  
  (method override (get-tools-view)
    (locate 'tools))
  
  
  (method override (focus-default)
    (acquire-focus~ (get-tree)))
  
  
  ;;;
  ;;;; Access
  ;;;
  
  
  (method (get-tree)
    (locate 'allocations))
  
  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method (on-start-tracker evt)
    (user-feedback "Tracking started")
    (tracker-start~ (require-focused-process~ (get-debugger-manager))))
  
  
  (method (on-stop-tracker evt)
    (tracker-stop~ (require-focused-process~ (get-debugger-manager)))
    (view-tracking)
    (user-message "Tracking stopped"))
  
  
  (method (on-flat/hierarchical evt)
    (set-hierarchical? (not hierarchical?))
    (view-tracking))
  
  
  (method (set-hierarchical? flag)
    (set! hierarchical? flag))
  
  
  (method (on-choose-tracking evt)
    (define (present-tracking tracking)
      (if tracking
          (->string tracking)
        "<default>"))
    
    (let ((process (require-focused-process~ (get-debugger-manager))))
      (let ((trackings (tracker-trackings~ process))
            (tracking (tracker-selected-tracking~ process)))
        (tracker-selected-tracking-set!~ process (request-list (sort string<? trackings key: present-tracking) title: "Choose Tracking" invite: "Select a tracking from the list" present: present-tracking selected: tracking))
        (view-tracking))))
  
  
  (method (on-reset-tracking evt)
    (let ((all? (get-shift?~ evt)))
      (reset-tracking all?)))
  
  
  (method (reset-tracking all?)
    (tracking-reset~ (require-focused-process~ (get-debugger-manager)) all?)
    (view-tracking))
  
  
  (method (on-refresh-tracking evt)
    (view-tracking))
  
  
  (method (on-select-location evt)
    (let ((user-origin (get-user-origin~ evt)))
      (edit-source)
      ;; as a quick solution we let the previous call give the focus to the document
      ;; because a lot of framework behavior depends on a new document gaining focus
      (when user-origin
        (acquire-focus~ (locate 'allocations)))))
  
  
  (method (on-inspect-data evt)
    (inspect-data))
  
  
  ;;;
  ;;;; Edition
  ;;;
  
  
  (definition *frame-indicators*
    '())
  
  
  (method (edit-source)
    (for-each (lambda (indicator)
                (edit-location~ indicator #f))
              *frame-indicators*)
    (set! *frame-indicators*
          (let ((locations (selected-locations)))
            (if (not locations)
                '()
              (let ((from .4)
                    (to .9))
                (map (lambda (info)
                       (bind (location rank count) info
                         (let ((delta (/ (- to from) (+ count 1))))
                           (let ((value (+ from (* delta (+ rank 1)))))
                             (let ((indicator (new Location-Indicator (new Color red: 1. green: value blue: value))))
                               (edit-location~ indicator location)
                               indicator)))))
                     locations))))))
  
  
  ;;;
  ;;;; Inspection
  ;;;
  
  
  (method (inspect-data)
    (let ((data (get-single-selected-data~ (get-tree))))
      (if (and data (pair? (car data)))
          (bind (entry line rank count info) (car data)
            ;; process should be cached by view-tracking
            (let ((process (require-focused-process~ (get-debugger-manager))))
              (let ((debugger (get-debugger~ process)))
                (inspect-info~ debugger process info))))
        (bell))))
  
  
  ;;;
  ;;;; Selection
  ;;;
  
  
  (method (selected-locations)
    (let ((data (get-single-selected-data~ (get-tree))))
      (cond ((not data)
             #f)
            ((pair? (car data))
             (collect (lambda (info)
                        (bind (entry line rank count) info
                          (when entry
                            (list (list (get-file~ (get-file-definition~ entry)) line #f) rank count))))
                      data))
            (else
             (list (list data 0 1))))))
  
  
  ;;;
  ;;;; Update
  ;;;
  
  
  (method (view-tracking)
    (define (add-entry allocation)
      (bind (info container line) allocation
        (define (determine-entry)
          (when container
            (let ((file-entry (cache-container-entry container)))
              (when file-entry
                (or (line->entry~ file-entry (- line 1))
                    (get-root-definition~ file-entry))))))
        
        (cons (determine-entry) allocation)))
    
    (define (present-location allocation)
      (bind (entry info container line) allocation
        (if entry
            (get-name~ entry)
          (format "{a}:{a}" container line))))
    
    (define (present-object allocation)
      (bind (entry info) allocation
        (third info)))
    
    (define (allocation-data allocation rank count)
      (bind (entry info container line) allocation
        (list entry (- line 1) rank count info)))
    
    (with-cursor :wait
      (lambda ()
        (let ((tree (get-tree))
              (tracking (parameterize ((receive-timeout 30))
                          (tracker-tracking~ (require-focused-process~ (get-debugger-manager))))))
          (when tracking
            (bind (label all allocations) tracking
              (let ((allocations (map add-entry allocations)))
                (remove-every-row~ tree)
                (let ((title (format "{a}: all: {a}, count: {a}" (or label '<default>) all (length allocations))))
                  (set-title~ (locate 'tracking) title)
                  (set-tooltip?~ (locate 'tracking) #t)
                  (set-tooltip-text~ (locate 'tracking) title))
                (if hierarchical?
                    (with-update-locked~ tree
                      (lambda ()
                        (let ((entry-set (sort > (partition allocations key: car) key: (lambda (info) (length (cdr info))))))
                          (for-each (lambda (info)
                                      (bind (entry . allocations) info
                                        (let ((line-set (sort > (partition allocations key: fourth) key: (lambda (info) (length (cdr info))))))
                                          (let ((line-count (length line-set))
                                                (line-samples (map cadr line-set)))
                                            (let ((sample (car line-samples))
                                                  (type-samples (partition line-samples key: cadadr)))
                                              (let ((father
                                                      (add-row~ tree
                                                        children: (list (new Tree-Node title: (present-location sample))
                                                                        (new Tree-Label title: (join-strings (map present-object (map cadr type-samples)) " "))
                                                                        (new Tree-Label title: (->string (length allocations))))
                                                        user-data: (map (lambda (sample rank)
                                                                          (allocation-data sample rank line-count))
                                                                        line-samples
                                                                        (naturals 0 line-count)))))
                                                (for-each (lambda (info rank)
                                                            (bind (line . allocations) info
                                                              (let ((sample (car allocations)))
                                                                (add-row~ tree
                                                                  father: father
                                                                  children: (list (new Tree-Node title: (->string line))
                                                                                  (new Tree-Label title: (present-object sample))
                                                                                  (new Tree-Label title: (->string (length allocations))))
                                                                  user-data: (list (allocation-data sample rank line-count))))))
                                                          line-set
                                                          (naturals 0 line-count))))))))
                                    entry-set))))
                  (with-update-locked~ tree
                    (lambda ()
                      (for-each (lambda (allocation)
                                  (let ((father
                                          (add-row~ tree
                                            children: (list (new Tree-Node title: (present-location allocation))
                                                            (new Tree-Label title: (present-object allocation))
                                                            (new Tree-Label title: "1"))
                                            user-data: (list (allocation-data allocation 0 1)))))
                                    (bind (entry info file line stack) allocation
                                      (when stack
                                        (for-each (lambda (frame)
                                                    (bind (creator locat) frame
                                                      (bind (container line col) locat
                                                        (add-row~ tree
                                                          father: father
                                                          children: (list (new Tree-Node title: (->string container))
                                                                          (new Tree-Label title: "")
                                                                          (new Tree-Label title: ""))
                                                          user-data: locat))))
                                                  stack)))))
                                allocations))))))))))))


;;;
;;;; Allocations-Tree
;;;


(class Allocations-Tree extends Tree-View
  
  
  (form
    (<install>                            portfolio: :images filled-column: object
      (<Tree-Node-Column>  name: location title: "Location" width: 250 display-images?: #f)
      (<Tree-Label-Column> name: object   title: "Object" width: 200)
      (<Tree-Label-Column> name: count    title: "Count" width: 75 justification: tail)))))
