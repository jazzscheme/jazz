;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Lisp Entry
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.editor.lisp.catalog.Lisp-Entry jazz


(import (jazz.catalog)
        (jazz.library)
        (jazz.platform))


(class Lisp-Entry extends Indexed-Entry
  
  
  (slot kind      getter generate)
  (slot signature getter generate)
  
  
  (method override (initialize name kind signature line column end-line end-column definitions references)
    (nextmethod name line column end-line end-column definitions references)
    (set! kind~self kind)
    (set! signature~self signature))
  
  
  (method override (print-catalog level printer)
    (format printer "{%}{_ :v}~{{s} {s} {s} {s} {s} {s} {s} {s} {s}"
            (* level 2)
            (identifier-name (category-name (class-of self)))
            name kind signature line column end-line end-column
            references)
    (print-definitions level printer)
    (format printer "}"))
  
  
  (method override (get-image)
    {Bitmap-Resource "Method"})


  ;;;
  ;;;; Present
  ;;;


  (method override (present)
    (present-identifier))


  (method override (present-name)
    (let ((name (get-name)))
      (cond ((not name)
             (present-noname))
            ((string? signature)
             (string-append name signature))
            (else
             name))))


  (method override (present-identifier)
    (let ((name (get-name)))
      (if (not name)
          (present-noname)
        (if (pair? signature)
            (format :string "{a} {a}" (present-name) signature)
          (compose-name (present-name))))))
  
  
  (method (compose-name name)
    (if (and (is? parent Lisp-Entry) (get-name~ parent))
        (let ((parent-name (present-name~ parent)))
          (format :string "{a}.{a}" parent-name name))
      name))
  
  
  (method override (present-noname)
    "<toplevel>")
  
  
  (method public (->locator)
    (define (locator-name entry)
      (let ((parent (get-parent~ entry))
            (name (get-name~ entry)))
        (if (is-not? parent Lisp-Entry)
            name
          (format :string "{a}.{a}" (locator-name parent) name))))
    
    (string->symbol (locator-name self)))


  ;;;
  ;;;; Edit
  ;;;


  (method override (edit-reference target . rest)
    (define (find-declaration-range text)
      (when (equal? (get-string~ text (get-selection~ text)) name)
        (declaration-range~ text (get-start~ text))))
    
    (let ((text (get-guest~ (apply edit rest))))
      (let ((range (find-declaration-range text)))
        (if range
            (let ((reference-range (find-expression~ text range target)))
              (if (not reference-range)
                  (bell)
                (set-selection~ text reference-range ensure-displayed?: 'center-caret)))
          (let ((search-context (list (make-search-context (->string target) whole-words?: #t))))
            (unless (or (select-next~ text search-context)
                        (select-previous~ text search-context))
              (bell)))))))
  
  
  ;;;
  ;;;; Indexes
  ;;;
  
  
  (method override (update-indexes definitions-index references-index)
    (update-index definitions-index name)
    (for-each (lambda (key)
                (update-index references-index key))
              references)
    (for-each (lambda (definition)
                (update-indexes~ definition definitions-index references-index))
              definitions))))
