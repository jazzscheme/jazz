;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Lisp Entry
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.editor.lisp.catalog.Lisp-Entry jazz


(import (jazz.catalog)
        (jazz.catalog.edit)
        (jazz.editor.lisp)
        (jazz.feedback)
        (jazz.resource)
        (jazz.search)
        (jazz.text)
        (jazz.view))


(class Lisp-Entry extends Indexed-Entry
  
  
  (slot kind       getter explicit)
  (slot modifiers  getter generate)
  (slot parameters getter generate)
  (slot signature  getter generate)
  (slot type       getter generate)
  
  
  (method override (initialize self name kind modifiers parameters signature type line column end-line end-column definitions references)
    (nextmethod self name line column end-line end-column definitions references)
    (set! self.kind kind)
    (set! self.modifiers modifiers)
    (set! self.parameters parameters)
    (set! self.signature signature)
    (set! self.type type))
  
  
  (method override (get-kind self)
    kind)

  
  (method public (set-modifiers self m)
    (set! self.modifiers m))

  
  (method override (print self output readably)
    (print-unreadable self output
      (lambda (output)
        (format output "{a} {a}" name kind))))
  
  
  (method override (print-catalog self level output)
    (format output "{%}{_ :v}~{{s} {s} {s} {s} {s} {s} {s} {s} {s} {s} {s} {s}"
            (* level 2)
            (category-name (class-of self))
            name kind modifiers parameters signature type line column end-line end-column
            references)
    (print-definitions self level output)
    (format output "}"))
  
  
  (method override (get-image self)
    {Image-Resource "Method"})


  ;;;
  ;;;; Access
  ;;;
  
  
  (method public (set-parameters self lst)
    (set! parameters lst))
  
  
  (method public (set-type self t)
    (set! type t))


  ;;;
  ;;;; Present
  ;;;


  (method override (present self)
    (present-identifier self))


  (method override (present-name self)
    (let ((name (get-name self)))
      (cond ((not name)
             (present-noname self))
            ((string? signature)
             (string-append name signature))
            (else
             name))))


  (method override (present-identifier self)
    (let ((name (get-name self)))
      (if (not name)
          (present-noname self)
        (if (pair? signature)
            (format :string "{a} {a}" (present-name self) signature)
          (compose-name self (present-name self))))))
  
  
  (method (compose-name self name)
    (if (and (is? parent Lisp-Entry) (get-name parent))
        (let ((parent-name (present-name parent)))
          (format :string "{a}:{a}" parent-name name))
      name))
  
  
  (method override (present-noname self)
    "<toplevel>")
  
  
  (method public (->locator self)
    (define (locator-name entry)
      (let ((parent (get-parent entry))
            (name (get-name entry)))
        (if (is-not? parent Lisp-Entry)
            name
          (format :string "{a}:{a}" (locator-name parent) name))))
    
    (string->symbol (locator-name self)))
  
  
  ;;;
  ;;;; Indexes
  ;;;
  
  
  (method override (update-indexes self definitions-index references-index)
    (update-index self definitions-index name)
    (for-each (lambda (key)
                (update-index self references-index key))
              references)
    (for-each (lambda (definition)
                (update-indexes definition definitions-index references-index))
              definitions)))


;;;
;;;; Edit
;;;


(specific (edit-reference (<Lisp-Entry> entry) direction search-result . rest)
  (define (find-declaration-range text)
    (and (equal? (reference->name (get-string text (get-selection text))) (get-name entry))
         (declaration-range text (get-start text))))
  
  (define (fallback-find text)
    (user-message "Unable to find definition")
    (let ((target (get-find (get-search search-result))))
      (or (select-next text target)
          (select-previous text target))))
  
  (receive (frame new?) (apply edit-entry entry return-new?: #t rest)
    (let ((text (get-guest frame)))
      (let ((range (find-declaration-range text)))
        (if range
            (let ((start (get-start range))
                  (end (get-end range)))
              (set-beginning search-result start)
              (set-ending search-result end)
              (let ((direction (or direction 'forward)))
                (let ((range (case direction
                               ((forward) (new Range$Cell$ start start))
                               ((backward) (new Range$Cell$ end end)))))
                  (highlight-reference text direction range search-result))))
          (fallback-find text))))
    (values frame new?))))
