;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Lisp Parser
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.editor.lisp.parser.Lisp-Parser jazz


(import (jazz.catalog)
        (jazz.editor.lisp)
        (jazz.jml))


(class Lisp-Parser extends File-Parser
  
  
  ;;;
  ;;;; Iterate
  ;;;
  
  
  (method meta protected virtual (iterate-references name <string> proc <procedure>)
    (define (parse-tag)
      (when (tag-string? name)
        (call-proc name 0)
        (call-proc (tag->name name) 1)
        #t))
    
    (define (parse-composite-colon)
      (let ((parts (split-string name #\:)))
        (when (and (not (null? (cdr parts)))
                   (not (empty-string? (first parts)))
                   (not (empty-string? (last parts))))
          (call-proc name 0)
          (let ((pos 0))
            (when (equal? (first parts) "jazz")
              (set! parts (cdr parts))
              (set! pos (+ (cardinality "jazz") 1)))
            (for-each (lambda (part)
                        (call-proc part pos)
                        (increase! pos (+ (cardinality part) 1)))
                      parts))
          #t)))
    
    (define (call-proc ref pos)
      (unless (or (empty-string? ref) (eqv? (string-ref ref 0) #\'))
        (proc ref pos)))
    
    (or (parse-tag)
        (parse-composite-colon)
        (call-proc name 0)))
  
  
  ;;;
  ;;;; Constituent
  ;;;
  
  
  (method meta override (get-match-test)
    (lambda (seq whole-words? constituent-test from to)
      (or (not whole-words?)
          (let ((card (cardinality seq)))
            (define (extend-before from)
              (let ((previous (- from 1)))
                (if (and (>= previous 0) (constituent-test (element seq previous)))
                    (extend-before previous)
                  from)))
            
            (define (extend-after to)
              (let ((after (+ to 1)))
                (if (and (<= after card) (constituent-test (element seq (- after 1))))
                    (extend-after after)
                  to)))
            
            (let ((before (extend-before from))
                  (after (extend-after to)))
              (or (and (= from before)
                       (= to after))
                  (let ((found (subseq seq from to)))
                    (continuation-capture
                      (lambda (return)
                        (iterate-references (subseq seq before after)
                          (lambda (ref pos)
                            (when (and (= from (+ before pos)) (equal? ref found))
                              (continuation-return return #t))))
                        #f)))))))))
  
  
  ;; first approximation
  (method meta override (get-constituent-test)
    scheme-constituent?)
  
  
  ;;;
  ;;;; Parse
  ;;;
  
  
  (method override (parse file time dialect)
    (new Lisp-File-Entry catalog file time dialect (parse-definitions file)))
  
  
  (method (parse-definitions file)
    ;; until it is cleanly processed in the Lisp explorer
    (define Lisp-Period
      ".")
    
    (let ((text (new (text-view-class))))
      (let ((model (get-model~ text))
            (syntax (get-syntax~ text)))
        (set-char-encoding~ model char-encoding)
        (set-colorize?~ syntax #f)
        (set-moniker~ text file)
        (let* ((beginning (text-beginning~ model))
               (expl (new (explorer-class file) model start: beginning end: beginning))
               (fact (new List-Factory)))
          (walk-declarations~ expl
            #f
            ;; declaration
            (lambda (parent kind modifiers symbol start end marked documented?)
              (define (mangle-name name)
                (expression-syntax-name-mangler symbol))
              
              (define (mangle-signature signature)
                (let ((mangler (expression-syntax-signature-mangler symbol)))
                  (if mangler
                      (cons (string-append (car signature) mangler) (cdr signature))
                    signature)))
              
              (define (mangle-declaration name signature)
                (let ((name-mangle (mangle-name name))
                      (signature-mangle (and signature (mangle-signature signature))))
                  (when (or name-mangle signature-mangle)
                    (cond ((and name-mangle signature-mangle)
                           (append name-mangle signature-mangle))
                          (else
                           (or signature-mangle
                               name-mangle))))))
              
              (let* ((name (reference->name (if (pair? marked) (car marked) marked)))
                     (signature (mangle-declaration name (if (pair? marked) (cdr marked) #f))))
                (let ((entry (new Lisp-Entry name kind modifiers signature (get-line~ start) (get-col~ start) (get-line~ end) (get-col~ end) '() '())))
                  (if (not parent)
                      (put~ fact entry)
                    (set-parent~ entry parent)
                    (add-definition~ parent entry))
                  entry)))
            ;; keyword
            (lambda (parent start end)
              #f)
            ;; expression
            (lambda (parent start end mode kind)
              (when (and parent (memq? kind '(symbol specifier tag keyword)))
                (let ((name (get-marked~ expl)))
                  (unless (or (empty-string? name)
                              (eqv? (string-ref name 0) #\')
                              (string=? name Lisp-Period))
                    (iterate-references~ (class-of self) name
                      (lambda (ref pos)
                        (unless (empty-string? ref)
                          (add-reference~ parent ref)))))))
              parent)
            #f)
          (get-output~ fact)))))
  
  
  ;;;
  ;;;; Explorer
  ;;;
  
  
  (method protected virtual (text-view-class)
    )
  
  
  (method protected virtual (explorer-class file)
    )))
