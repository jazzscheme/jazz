;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Lisp Syntax
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.editor.lisp.text.Lisp-Syntax jazz


(import (jazz.application)
        (jazz.automata)
        (jazz.editor)
        (jazz.editor.lisp)
        (jazz.text)
        (jazz.view))


(class Lisp-Syntax extends Code-Syntax

  
  ;;;
  ;;;; Parser
  ;;;
  
  
  (method override (parser-class)
    Lisp-Parser)

  
  ;;;
  ;;;; Translation
  ;;;
  
  
  ;; `~!()=[]:;',/?
  ;; :`,[]!~/;()'?=
  (method (translate-lisp-key key)
    (case key
      ((#\backquote)         #\colon)
      ((#\tilde)             #\backquote)
      ((#\exclamation-mark)  #\comma)
      ((#\open-parenthesis)  #\open-bracket)
      ((#\close-parenthesis) #\close-bracket)
      ((#\equal)             #\exclamation-mark)
      ((#\open-bracket)      #\tilde)
      ((#\close-bracket)     #\slash)
      ((#\colon)             #\semi-colon)
      ((#\semi-colon)        #\open-parenthesis)
      ((#\quote)             #\close-parenthesis)
      ((#\comma)             #\quote)
      ((#\slash)             #\question-mark)
      ((#\question-mark)     #\equal)
      (else                  key)))
  
  
  ;; `~!()=[];',/?
  ;; ;`=[]!()~',?/
  @new-translation
  (method (translate-lisp-key key)
    (case key
      ((#\backquote)         #\semi-colon)
      ((#\tilde)             #\backquote)
      ((#\exclamation-mark)  #\equal)
      ((#\open-parenthesis)  #\open-bracket)
      ((#\close-parenthesis) #\close-bracket)
      ((#\equal)             #\exclamation-mark)
      ((#\open-bracket)      #\open-parenthesis)
      ((#\close-bracket)     #\close-parenthesis)
      ((#\semi-colon)        #\tilde)
      ((#\slash)             #\question-mark)
      ((#\question-mark)     #\slash)
      (else                  key)))
  
  
  ;;;
  ;;;; Expression
  ;;;
  
  
  (method override (range-expr range)
    (with-readtable (get-readtable)
      (lambda ()
        (read-string-element (get-string~ model range)))))
  
  
  (method override (expr-at pos)
    (let ((range (expr-range pos)))
      (and range
           (let ((string (get-string~ model range)))
             (with-readtable (get-readtable)
               (lambda ()
                 (read-string-element string)))))))
  
  
  (method override (supports-expr?)
    #t)
  
  
  ;;;
  ;;;; Syntax
  ;;;
  
  
  (definition Syntax-Classes
    (list
      (cons (cons "clojure" 'Clojure-Syntax) (lambda () jazz.editor.clojure:Clojure-Syntax))
      (cons (cons "commonlisp" 'CommonLisp-Syntax) (lambda () jazz.editor.commonlisp:CommonLisp-Syntax))
      (cons (cons "c" 'C-Syntax) (lambda () jazz.editor.c:C-Syntax))
      (cons (cons "c++" 'C-Syntax) (lambda () jazz.editor.c:C-Syntax))
      (cons (cons "objective-c" 'C-Syntax) (lambda () jazz.editor.c:C-Syntax))
@wait (cons (cons "css" 'CSS-Syntax) (lambda () jazz.editor.css:CSS-Syntax))
      (cons (cons "jazz" 'Jazz-Syntax) (lambda () jazz.editor.jazz:Jazz-Syntax))
@wait (cons (cons "java" 'Java-Syntax) (lambda () jazz.editor.java:Java-Syntax))
      (cons (cons "javascript" 'JavaScript-Syntax) (lambda () jazz.editor.javascript:JavaScript-Syntax))
@wait (cons (cons "lua" 'Lua-Syntax) (lambda () jazz.editor.lua:Lua-Syntax))
@wait (cons (cons "properties" 'Properties-Syntax) (lambda () jazz.editor.properties:Properties-Syntax))
@wait (cons (cons "python" 'Python-Syntax) (lambda () jazz.editor.python:Python-Syntax))
      (cons (cons "scheme" 'Scheme-Syntax) (lambda () jazz.editor.scheme:Scheme-Syntax))))
  
  
  (definition (get-syntax-info dialect)
    (associate dialect Syntax-Classes key: car test: ci=?))
  
  
  (definition (get-syntax-style-info style-name)
    (associate style-name Syntax-Classes key: cdr))
  
  
  ;;;
  ;;;; Coloring
  ;;;
  
  
  (method override (colorize-syntax (colorizer?: colorizer? #t))
    (define (colorize proc)
      (let ((expl <Text-Explorer> (new (explorer-class) model start: (text-beginning~ model) end: (text-beginning~ model)))
            (colorizer (and colorizer? (new-colorizer~ model))))
        (proc expl colorizer)
        (when colorizer
          (finish-current~ colorizer))))
    
    (nextmethod entries?: #f)
    (with-safe-explore
      (lambda ()
        (colorize colorize-declarations)
        (colorize colorize-comments))))
  
  
  (definition Syntax-Targets
    #f)
  
  (definition Syntax-Automata
    #f)
  
  
  (method override (syntax-targets)
    (unless Syntax-Targets
      (set! Syntax-Targets (compute-syntax-targets)))
    Syntax-Targets)
  
  
  (method override (syntax-automata)
    (unless Syntax-Automata
      (set! Syntax-Automata (compute-syntax-automata)))
    Syntax-Automata)
  
  
  (method override (compute-syntax-targets)
    (and (get-colorize-keywords?~ (preferences))
         (map (lambda (info)
                (list (->string (car info)) 'keyword))
              (table->list (get-expression-syntaxes)))))
  
  
  (method override (compute-syntax-automata)
    (let ((targets (syntax-targets)))
      (and targets
           (build-search-automata targets #t #f text-constituent?))))
  
  
  (method override (colorize-type found type start end colorizer recolorize?)
    (case type
      ((keyword) (colorize-keyword found start end colorizer 'Keyword))))
  
  
  (method override (colorize-declarations expl colorizer)
    (define (anonymous-kind? kind)
      (memq? kind '(script proclaim require import export form jazzdoc)))
    
    (walk-declarations~ expl
      #f
      ;; declaration
      (lambda (context kind modifiers symbol parameters type start end marked documented?)
        (when (eq? kind 'jazzdoc)
          (apply-coloring colorizer start end 'Jazzdoc))
        (when (and marked (neq? kind 'jazzdoc) (not (anonymous-kind? kind)) (not (memq? symbol '(getter setter))))
          (apply-coloring colorizer start end (declaration-style documented?)))
        #f)
      ;; keyword
      (lambda (context start end)
        (apply-coloring colorizer start end 'Declaration-Keyword))
      ;; expression
      (lambda (context start end mode kind)
        (case kind
          ((symbol)
           @wait-no-easy-way-to-recolorize-when-on-multiple-lines
           (when (memq? mode '(quote quasiquote))
             (apply-coloring #f start end 'Quotation)))
          ((keyword)
           ;; This test doesn't work because of our use of a Colorizer
           @wait-fix
           (when (eq? (get-name~ (get-style-at start)) 'Base)
             (apply-coloring colorizer start end 'Keyword)))
          ((tag)
           (colorize-tag colorizer start end))
          ((specifier)
           (colorize-specifier colorizer start end))
          ((char)
           (apply-coloring colorizer start end 'Char))
          ((number)
           @wait-this-is-too-much
           (apply-coloring colorizer start end 'Number))
          ((boolean)
           (apply-coloring colorizer start end 'Boolean))
          ((string)
           (apply-coloring colorizer start end 'String))
          ((delimited-string)
           (apply-coloring colorizer start end 'Delimited-String))
          ((syntax-string)
           (colorize-syntax-string colorizer start end))
          ((named-string)
           (apply-coloring colorizer start end 'Named-String))
          ((expr-comment multiline-comment)
           (apply-coloring colorizer start end 'Expr-Comment))
          ((named-comment)
           (apply-coloring colorizer start end 'Named-Comment))
          ((literal)
           @wait-buggy-because-of-coloring-within-coloring
           (apply-coloring colorizer start end 'Literal))
          ((feature)
           (apply-coloring colorizer start end 'Feature))
          ((metadata)
           (apply-coloring colorizer start end 'Metadata))
          ((jazzdoc-body)
           (apply-coloring colorizer start end 'Jazzdoc-Body))))
      (get-documentation-cataloguer~ (get-application))))
  
  
  (method protected virtual (colorize-tag colorizer start end)
    )
  
  
  (method protected virtual (colorize-specifier colorizer start end)
    )
  
  
  (method protected virtual (declaration-style documented?)
    )
  
  
  (method (colorize-syntax-string colorizer start end)
    (define (find-open)
      (let ((line (paragraph-string~ model (get-line~ start)))
            (from (get-col~ start)))
        (let ((len (string-length line)))
          (and (and (<= (+ from 2) len) (equal? (substring line from (+ from 2)) "#/"))
               (let ((to (search line "/" start: (+ from 2))))
                 (and to
                      (new Range$Cell$ (new Cell (get-line~ start) from) (new Cell (get-line~ start) (+ to 1)))))))))
    
    (define (find-close)
      (let ((line (paragraph-string~ model (get-line~ end)))
            (to (get-col~ end)))
        (let ((len (string-length line)))
          (and (>= (- to 3) 0) (equal? (substring line (- to 3) to) "//#")
            (new Range$Cell$ (new Cell (get-line~ end) (- to 3)) (new Cell (get-line~ end) to))))))
    
    (define (find-dialect open)
      (substring open 2 (- (string-length open) 1)))
    
    (let ((open (find-open))
          (close (find-close)))
      (when (and open close)
        (apply-coloring colorizer (get-start~ open) (get-end~ open) 'Named-String)
        (let ((dialect (find-dialect (get-string~ model open)))
              (start (get-end~ open))
              (end (get-start~ close)))
          (let ((info (get-syntax-info dialect)))
            (if info
                (let ((name (cdar info))
                      (proc (cdr info)))
                  (let ((class (proc)))
                    (colorize-range~ (new class model) start end)
                    (push-style~ model (new Range$Cell$ start end) name)))
              (apply-coloring colorizer start end 'Named-String))))
        (apply-coloring colorizer (get-start~ close) (get-end~ close) 'Named-String))))
  
  
  (method override (colorize-comments expl colorizer (start: start #f) (end: end #f))
    (for-each-comment~ expl
      (lambda (start <Cell> end <Cell> title?)
        (let* ((line (get-line~ start))
               (len (paragraph-length~ model line))
               (end (new Cell line len)))
          (if (not title?)
              (apply-coloring colorizer start end 'Comment)
            (apply-coloring colorizer start (+ start 4) 'Comment)
            (apply-coloring colorizer (+ start 4) end 'Title))))
      start-line: start
      end-line: end))
  
  
  (method (info-at pos <Cell>) <Text-Syntax+>
    (let ((style (get-style-at*~ model pos)))
      (and (inherits?~ style 'Syntax-String)
           (let ((base (get-base~ style)))
             (and (not-null? base)
                  (let ((style-name (car base)))
                    (get-syntax-style-info style-name)))))))
  
  
  (method override (syntax-at pos <Cell>) <Text-Syntax>
    (let ((info (or (info-at pos)
                    (let ((next (next-cell~ model pos)))
                      (and next (info-at next))))))
      (if info
          (let ((proc (cdr info)))
            (let ((class (proc)))
              (new class model)))
        self)))
  
  
  (method override (syntax-at-range range <Range$Cell$>) <Text-Syntax>
    ;; quicky. should validate that the style is uniform throughout range
    (receive (syntax syntax-style) (replace-syntax range)
      syntax))
  
  
  (method override (replace-syntax range <Range$Cell$>)
    (define (determine-info)
      (let ((start (get-start~ range))
            (end (get-end~ range)))
        (if (= start end)
            (or (info-at start)
                (let ((next (next-cell~ model start)))
                  (and next (info-at next))))
          (let ((start-info (info-at (next-cell~ model start)))
                (end-info (info-at end)))
            (if (and start-info (eq? start-info end-info))
                start-info
              #f)))))
    
    (let ((info (determine-info)))
      (if info
          (let ((name (cdar info))
                (proc (cdr info)))
            (let ((class (proc)))
              (values (new class model) name)))
        (values self #f))))

  
  (method override (recolorize-text syntax-style start end-line)
    (define (recolorize-declarations start-line end-line)
      (define (explorer)
        (let* ((str (paragraph-string~ model start-line))
               (col (skip-whitespace str))
               (pos (new Cell start-line col)))
          (new (explorer-class) model start: pos end: pos)))
      
      (catch Explore-Error
        (let ((expl <Text-Explorer> (explorer))
              (colorizer (new-colorizer~ model)))
          (continuation-capture
            (lambda (exit)
              (set-line-hook~ expl
                (lambda (expl)
                  (when (> (get-line~ (get-end~ expl)) end-line)
                    (continuation-return exit))))
              (let (iterate)
                (colorize-declarations expl colorizer)
                (when (exit-list~ expl)
                  (iterate)))))
          (finish-current~ colorizer))))
    
    (define (recolorize-comments start-line end-line)
      (define (explorer)
        (let* ((str (paragraph-string~ model start-line))
               (col (skip-whitespace str))
               (pos (new Cell start-line col)))
          (new (explorer-class) model start: pos end: pos)))
      
      (catch Explore-Error
        (let ((expl <Text-Explorer> (explorer))
              (colorizer (new-colorizer~ model)))
          (continuation-capture
            (lambda (exit)
              (set-line-hook~ expl
                (lambda (expl)
                  (when (> (get-line~ (get-end~ expl)) end-line)
                    (continuation-return exit))))
              (colorize-comments expl colorizer start: start-line end: end-line)))
          (finish-current~ colorizer))))
    
    (nextmethod syntax-style start end-line)
    (recolorize-declarations (get-line~ start) end-line)
    (recolorize-comments (get-line~ start) end-line))
  
  
  ;;;
  ;;;; Comment
  ;;;
  
  
  (definition Comment
    (make-string 1 #\semi-colon))
  
  
  (definition Title-Comment
    (string-append (make-string 4 #\semi-colon) " "))
  
  
  (method override (comment-string)
    Comment)
  
  
  (method override (title-comment-string)
    Title-Comment)
  
  
  ;;;
  ;;;; Constituent
  ;;;
  
  
  ;; first approximation
  (method override (get-constituent-test)
    scheme-constituent?)
  
  
  (method override (get-match-test)
    (get-match-test~ (parser-class)))
  
  
  ;;;
  ;;;; Completion
  ;;;
  
  
  (definition Auto-Complete-Characters
    '(#\minus #\question-mark #\exclamation-mark #\period #\colon #\tilde #\>))
  
  
  (method override (auto-complete-characters)
    Auto-Complete-Characters)


  (method override (favorite-completions)
    (get-completions~ (preferences)))
  
  
  ;;;
  ;;;; Styles
  ;;;
  
  
  (definition Comment-Styles
    '(Title Comment))
  
  (definition String-Styles
    '(String Delimited-String Syntax-String Named-String))
  
  
  (method override (comment-style? style)
    (some? (lambda (style-name)
             (inherits?~ style style-name))
           Comment-Styles))
  
  
  (method override (string-style? style)
    (some? (lambda (style-name)
             (inherits?~ style style-name))
           String-Styles))
  
  
  (method override (textual-style? style)
    (or (comment-style? style)
        (string-style? style)))))
