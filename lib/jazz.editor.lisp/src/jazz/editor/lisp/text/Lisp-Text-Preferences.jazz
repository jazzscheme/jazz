;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Lisp Text Preferences
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2012
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.editor.lisp.text.Lisp-Text-Preferences jazz


(import (jazz.editor.lisp)
        (jazz.jml)
        (jazz.ui))


(class Lisp-Text-Preferences extends Code-Text-Preferences
  
  
  (property title-style               initialize #f  accessors generate)
  (property comment-style             initialize #f  accessors generate)
  (property expr-comment-style        initialize #f  accessors generate)
  (property named-comment-style       initialize #f accessors generate)
  (property declaration-keyword-style initialize #f  accessors generate)
  (property declaration-style         initialize #f  accessors generate)
  (property keyword-style             initialize #f  accessors generate)
  (property tag-style                 initialize #f  accessors generate)
  (property specifier-style           initialize #f  accessors generate)
  (property char-style                initialize #f  accessors generate)
  (property number-style              initialize #f  accessors generate)
  (property boolean-style             initialize #f  accessors generate)
  (property string-style              initialize #f  accessors generate)
  (property delimited-string-style    initialize #f  accessors generate)
  (property named-string-style        initialize #f  accessors generate)
  (property quotation-style           initialize #f  accessors generate)
  (property feature-style             initialize #f  accessors generate)
  (property reference-style           initialize #f  accessors generate)
  (property warning-style             initialize #f  accessors generate)
  (property fatal-style               initialize #f  accessors generate)
  (property break-style               initialize #f  accessors generate)
  (property completions               initialize '() accessors generate)
  (property translate-keys?           initialize #f  accessors generate)
  (property colorize-keywords?        initialize #f  accessors generate)
  
  
  (form
    (<install>
      title-style:               {Text-Style Base Text-Title}
      comment-style:             {Text-Style Base Text-Comment}
      expr-comment-style:        {Text-Style Base Text-Expr-Comment}
      named-comment-style:       {Text-Style Base Text-Named-Comment}
      declaration-keyword-style: {Text-Style Base Text-Declaration-Keyword}
      declaration-style:         {Text-Style Base Text-Declaration}
      keyword-style:             {Text-Style Base Text-Keyword}
      tag-style:                 {Text-Style Base Text-Tag}
      specifier-style:           {Text-Style Base Text-Specifier}
      char-style:                {Text-Style Base Text-Char}
      number-style:              {Text-Style Base Text-Number}
      boolean-style:             {Text-Style Base Text-Boolean}
      string-style:              {Text-Style Base Text-String}
      delimited-string-style:    {Text-Style Base Text-Delimited-String}
      named-string-style:        {Text-Style Base Text-Named-String}
      quotation-style:           {Text-Style Base Text-Quotation}
      feature-style:             {Text-Style Base Text-Feature}
      reference-style:           {Text-Style Base Text-Reference}
      warning-style:             {Text-Style Base Text-Warning}
      fatal-style:               {Text-Style Base Text-Fatal}
      break-style:               {Text-Style Base Text-Break}))
  
  
  ;;;
  ;;;; Descriptor
  ;;;
  
  
  (method meta override (get-class-descriptor (context: context #f))
    (new Lisp-Text-Preferences-Descriptor)))


;;;
;;;; Design
;;;


(submodule design


(import (jazz.designer))


(class Lisp-Text-Preferences-Descriptor extends Code-Text-Preferences-Descriptor
  
  
  (form
    (<install>
      (<properties~>
        (<Property-Descriptor>  name: title-style
          (<Value-Domain>       name: domain))
        (<Property-Descriptor>  name: comment-style
          (<Value-Domain>       name: domain))
        (<Property-Descriptor>  name: expr-comment-style
          (<Value-Domain>       name: domain))
        (<Property-Descriptor>  name: declaration-keyword-style
          (<Value-Domain>       name: domain))
        (<Property-Descriptor>  name: declaration-style
          (<Value-Domain>       name: domain))
        (<Property-Descriptor>  name: keyword-style
          (<Value-Domain>       name: domain))
        (<Property-Descriptor>  name: tag-style
          (<Value-Domain>       name: domain))
        (<Property-Descriptor>  name: specifier-style
          (<Value-Domain>       name: domain))
        (<Property-Descriptor>  name: char-style
          (<Value-Domain>       name: domain))
        (<Property-Descriptor>  name: number-style
          (<Value-Domain>       name: domain))
        (<Property-Descriptor>  name: boolean-style
          (<Value-Domain>       name: domain))
        (<Property-Descriptor>  name: string-style
          (<Value-Domain>       name: domain))
        (<Property-Descriptor>  name: delimited-string-style
          (<Value-Domain>       name: domain))
        (<Property-Descriptor>  name: named-string-style
          (<Value-Domain>       name: domain))
        (<Property-Descriptor>  name: quotation-style
          (<Value-Domain>       name: domain))
        (<Property-Descriptor>  name: feature-style
          (<Value-Domain>       name: domain))
        (<Property-Descriptor>  name: completions
          (<Completions-Domain> name: domain))
        (<Property-Descriptor>  name: translate-keys?
          (<Boolean-Domain>     name: domain))
        (<Property-Descriptor>  name: colorize-keywords?
          (<Boolean-Domain>     name: domain))))))))
