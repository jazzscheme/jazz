;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Lua Parser
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.editor.lua.parser.Lua-Parser jazz


(import (jazz.catalog)
        (jazz.editor.c)
        (jazz.editor.clike)
        (jazz.editor.java)
        (jazz.editor.lua)
        (jazz.io))


(class Lua-Parser extends File-Parser
  
  
  ;;;
  ;;;; Constituent
  ;;;
  
  
  (method meta override (get-constituent-test self)
    c-constituent?)
  
  
  ;;;
  ;;;; Parse
  ;;;
  
  
  (method override (parse self file digest dialect)
    (define (parse-definitions)
      (let ((lines (list->vector (load-lines file char-encoding: char-encoding char-encoding-errors: #f)))
            (fact (new List-Factory)))
      (loop (for n from 0 below (cardinality lines))
            (do
              (let* ((line (vector-ref lines n))
                     (item (or (find-heuristic "function" line n)
                               (find-heuristic "local function" line n)
                               (find-heuristic "local" line n))))
                (when item (put fact item)))))
      (get-output fact)))
    
    (define (find-heuristic header line n)
      (let ((len (string-length line))
            (col 0))
        (and (and (> len (+ col (string-length header)))
                  (string=? header (substring line col (+ col (string-length header)))))
             (let* ((start (+ col (string-length header)))
                    (col (skip-whitespace line start: start)))
               (and (> col start)
                    (let (iter (start col))
                      (let ((end (skip c-constituent? line start: start)))
                        (and (> end start)
                             (if (and (< end len)
                                      (memv? (string-ref line end) '(#\: #\.)))
                                 (iter (+ end 1))
                               (new C-Define-Entry (subseq line start end) n start n end))))))))))
    
    (new C-File-Entry catalog file digest dialect (parse-definitions)))))
