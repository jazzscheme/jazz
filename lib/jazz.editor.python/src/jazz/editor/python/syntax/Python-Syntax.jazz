;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Python Syntax
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.editor.python.syntax.Python-Syntax jazz


(import (jazz.catalog)
        (jazz.digest)
        (jazz.document)
        (jazz.editor.clike)
        (jazz.editor.python)
        (jazz.exemplar)
        (jazz.io)
        (jazz.outline)
        (jazz.platform)
        (jazz.preferences)
        (jazz.text))


(class Python-Syntax extends CLike-Syntax
  
  
  (method override (preferences self)
    (current-preferences '(documents python-text)))
  
  
  ;;;
  ;;;; Constituents
  ;;;
  
  
  (method override (get-constituent-test self)
    c-constituent?)
  
  
  ;;;
  ;;;; Completion
  ;;;
  
  
  (method override (auto-complete-char? self key last)
    (or (eqv? key #\_)
        (and (upper-case? key)
             (and last (lower-case? last)))
        (not (text-constituent? self key))))


  (method override (favorite-completions self)
    (get-completions (preferences self)))


  ;;;
  ;;;; Explorer
  ;;;


  (method override (explorer-class self)
    Python-Explorer)

  
  ;;;
  ;;;; Tabulation
  ;;;
  
  
  (method override (supports-tabs? self)
    #f)


  (method override (tabulate self text)
    (if (has-selection? text)
        (nextmethod self text)
      (let ((pos (get-start text)))
        (let ((line (get-line pos))
              (proc (if (shift-down?) (~ untabulate-line self) (~ tabulate-line self))))
          (let ((delta (proc text line)))
            (define (adjust pos inc)
              (if (not inc)
                  pos
                (cond ((> inc 0) (next-pos model pos inc))
                      ((< inc 0) (previous-pos model pos (- inc)))
                      (else pos))))
            
            (let ((pos (adjust pos delta)))
              (set-selection-safe text (new Range$Cell$ pos pos))))))))
  
  
  (method override (tabulate-line self text line)
    (replace-text text
                  (new Range$Cell$ (new Cell line 0) (new Cell line 0))
                  (list "    "))
    4)
  
  
  (method override (untabulate-line self text line)
    (and (>= (paragraph-length model line) 4)
         (eqv? (get-char model (new Cell line 0)) #\space)
         (eqv? (get-char model (new Cell line 1)) #\space)
         (eqv? (get-char model (new Cell line 2)) #\space)
         (eqv? (get-char model (new Cell line 3)) #\space)
         (begin
           (replace-text text
                         (new Range$Cell$ (new Cell line 0) (new Cell line 4))
                         (list ""))
           -4)))

  
  ;;;
  ;;;; Definitions
  ;;;
  
  
  (constant Definitions
    '())
  
  
  (method (get-definitions self)
    Definitions)

  
  ;;;
  ;;;; Keywords
  ;;;
  
  
  (constant Keywords
    '("import"
      "from"
      "class"
      "new"
      "is"
      "def"
      "if"
      "else"
      "elif"
      "not"
      "for"
      "in"
      "while"
      "return"
      "with"
      "as"
      "try"
      "catch"
      "except"
      "finally"
      "lambda"
      "raise"
      "and"
      "or"
      "None"
      "True"
      "False"))
  
  
  (method override (get-keywords self)
    Keywords)

  
  ;;;
  ;;;; Coloring
  ;;;
  
  
  (definition Syntax-Targets
    #f)
  
  (definition Syntax-Automata
    #f)
  
  
  (method override (syntax-targets self)
    (unless Syntax-Targets
      (set! Syntax-Targets (compute-syntax-targets self)))
    Syntax-Targets)
  
  
  (method override (syntax-automata self)
    (unless Syntax-Automata
      (set! Syntax-Automata (compute-syntax-automata self)))
    Syntax-Automata)
  
  
  (method override (compute-syntax-targets self)
    (append (list (list "#" 'line-comment #f))
            (map (lambda (str) (list str 'definition)) (get-definitions self))
            (map (lambda (str) (list str 'keyword)) (get-keywords self))))
  
  
  (method override (colorize-type self found type start end colorizer recolorize?)
    (case type
      ((line-comment) (colorize-line-comment self found start end colorizer 'Line-Comment 'Title #\slash))
      ((definition)   (colorize-definition self   found start end colorizer 'Definition))
      ((keyword)      (colorize-keyword self      found start end colorizer 'Keyword))))
  
  
  (method (colorize-definition self found start end colorizer style)
    (apply-coloring self colorizer start end style)
    (cdr found))
  
  
  ;;;
  ;;;; Styles
  ;;;
  
  
  (definition Comment-Styles
    '(Title Line-Comment))
  
  
  (method override (comment-style? self style)
    (some? (lambda (style-name)
             (inherits? style style-name))
           Comment-Styles))))
