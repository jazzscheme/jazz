;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Scheme Forms
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module jazz.editor.scheme.forms jazz


(import (jazz.editor.lisp)
        (jazz.editor.scheme))


;;;
;;;; Repository
;;;


(define-expression repository
  dialect: repository
  tabulate: 1
  walk: :repository)


;;;
;;;; Package
;;;


(define-expression package
  dialect: package
  tabulate: 1
  walk: :package)


(define-expression root
  dialect: scheme
  walk: :keyword)

(define-expression library
  dialect: scheme
  walk: :keyword)

(define-expression install
  dialect: scheme
  walk: :keyword)

(define-expression binary?
  dialect: scheme
  walk: :keyword)

(define-expression char-encoding
  dialect: scheme
  walk: :keyword)

(define-expression project
  dialect: scheme
  walk: :keyword)

(define-expression products
  dialect: scheme
  walk: :keyword)

(define-expression profiles
  dialect: scheme
  walk: :keyword)


;;;
;;;; Manifest
;;;


(define-expression manifest
  dialect: manifest
  tabulate: 1
  walk: :manifest)


;;;
;;;; Digest
;;;


(define-expression digest
  dialect: digest
  tabulate: 0
  walk: :digest)


;;;
;;;; Block
;;;


(define-expression block
  dialect: scheme
  namespace?: #t
  declaration?: #t
  tabulate: -1
  walk: :block)


;;;
;;;; Unit
;;;


(define-expression unit
  dialect: scheme
  namespace?: #t
  declaration?: #t
  modifiers: (protected public)
  tabulate: -1
  walk: :unit)


;;;
;;;; Module
;;;


(define-expression module
  dialect: scheme
  namespace?: #t
  declaration?: #t
  modifiers: (protected public)
  tabulate: -1
  walk: :module)


(define-expression import
  dialect: scheme
  walk: :keyword)

(define-expression export
  dialect: scheme
  walk: :keyword)

(define-expression require
  dialect: scheme
  walk: :keyword)


;;;
;;;; Define
;;;


(define-expression define
  dialect: scheme
  declaration?: #t
  inner?: #t
  tabulate: 1
  walk: :define)

(define-expression define-macro
  dialect: scheme
  declaration?: #t
  inner?: #t
  tabulate: 1
  walk: :define-macro)

(define-expression define-syntax
  dialect: scheme
  declaration?: #t
  inner?: #t
  modifiers: (private protected package public deprecated undocumented uptodate)
  tabulate: 1
  walk: :define-syntax)

(define-expression syntax-rules
  tabulate: 1)


;;;
;;;; Declaration
;;;


(define-expression native
  declaration?: #t
  modifiers: (private protected package public deprecated undocumented uptodate)
  walk: :native)

(define-expression native-syntax
  declaration?: #t
  modifiers: (private protected package public deprecated undocumented uptodate)
  walk: :native)


;;;
;;;; Syntax
;;;


(define-expression begin
  dialect: scheme
  tabulate: 0
  walk: :begin)

(define-expression call/cc
  dialect: scheme
  tabulate: 0)

(define-expression case
  dialect: scheme
  tabulate: 1)

(define-expression cond-expand
  dialect: scheme
  walk: :cond-expand)

(define-expression do
  dialect: scheme
  tabulate: 2)

(define-expression if
  dialect: scheme
  tabulate: 2)

(define-expression lambda
  dialect: scheme
  tabulate: 1)

(define-expression let
  dialect: scheme
  tabulate: 1)

(define-expression let*
  dialect: scheme
  tabulate: 1)

(define-expression letrec
  dialect: scheme
  tabulate: 1)

(define-expression let-syntax
  dialect: scheme
  tabulate: 1)

(define-expression letrec-syntax
  dialect: scheme
  tabulate: 1)

(define-expression let-syntax
  dialect: scheme
  tabulate: 1)

(define-expression letrec-syntax
  dialect: scheme
  tabulate: 1)

(define-expression parameterize
  dialect: scheme
  tabulate: 1)

(define-expression receive
  dialect: scheme
  tabulate: 2)


;;;
;;;; Gambit
;;;


(define-expression c-define
  dialect: gambit
  declaration?: #t
  tabulate: 5
  walk: :c-define)

(define-expression c-define-type
  dialect: gambit
  walk: :type)

(define-expression c-lambda
  dialect: gambit
  tabulate: 1
  walk: :type)

(define-expression declare
  dialect: gambit
  walk: :declare)

(define-expression define-check-type
  dialect: gambit
  declaration?: #t
  tabulate: 2
  walk: :define)

(define-expression define-fail-check-type
  dialect: gambit
  declaration?: #t
  tabulate: 1
  walk: :define)

(define-expression define-library-type
  dialect: gambit
  declaration?: #t
  walk: :define)

(define-expression define-library-type-of-exception
  dialect: gambit
  declaration?: #t
  tabulate: 1
  walk: :define)

(define-expression define-prim
  dialect: gambit
  declaration?: #t
  tabulate: 1
  walk: :define)

(define-expression define-runtime-macro
  dialect: gambit
  declaration?: #t
  tabulate: 1
  walk: :define-macro)

(define-expression define-runtime-syntax
  dialect: gambit
  declaration?: #t
  tabulate: 1
  walk: :define-macro)

(define-expression define-type
  dialect: gambit
  declaration?: #t
  tabulate: 1
  walk: :define)

(define-expression ##define-macro
  dialect: gambit
  declaration?: #t
  tabulate: 1
  walk: :define-macro)

(define-expression ##include
  dialect: gambit
  walk: :keyword)


;;;
;;;; Chicken
;;;


(define-expression ##core#lambda
  dialect: chicken
  tabulate: 1)


;;;
;;;; Jazz Declaration
;;;


(define-expression jazz.define
  dialect: scheme
  declaration?: #t
  tabulate: 1
  walk: :define)

(define-expression jazz.define-check-macro
  dialect: scheme
  declaration?: #t
  tabulate: 1
  walk: :define-macro
  name-mangler: ("check-macro"))

(define-expression jazz.define-class
  dialect: scheme
  declaration?: #t
  walk: :define-class
  name-mangler: ("class"))

(define-expression jazz.define-class-runtime
  dialect: scheme
  declaration?: #t
  walk: :define-class
  name-mangler: ("class runtime"))

(define-expression jazz.define-feature
  dialect: scheme
  declaration?: #t
  walk: :define)

(define-expression jazz.define-generic
  dialect: scheme
  declaration?: #t
  walk: :generic/specific)

(define-expression jazz.define-global
  dialect: scheme
  declaration?: #t
  walk: :define-macro
  name-mangler: ("global"))

(define-expression jazz.define-literal
  dialect: scheme
  declaration?: #t
  walk: :define
  name-mangler: ("literal"))

(define-expression jazz.define-macro
  dialect: scheme
  declaration?: #t
  tabulate: 1
  walk: :define-macro
  name-mangler: ("macro"))

(define-expression jazz.define-method
  dialect: scheme
  declaration?: #t
  tabulate: 1
  walk: :generic/specific)

(define-expression jazz.define-remote
  dialect: scheme
  declaration?: #t
  walk: :define)

(define-expression jazz.define-setting
  dialect: scheme
  declaration?: #t
  tabulate: 1
  walk: :define-macro
  name-mangler: ("setting"))

(define-expression jazz.define-special
  dialect: scheme
  declaration?: #t
  walk: :define-macro)

(define-expression jazz.define-specific
  dialect: scheme
  declaration?: #t
  walk: :generic/specific)

(define-expression jazz.define-syntax
  dialect: scheme
  declaration?: #t
  tabulate: 1
  walk: :define-macro
  name-mangler: ("syntax"))

(define-expression jazz.define-variable
  dialect: scheme
  declaration?: #t
  walk: :define-macro
  name-mangler: ("variable"))

(define-expression jazz.define-virtual
  dialect: scheme
  declaration?: #t
  walk: :generic/specific
  signature-mangler: "~virtual")

(define-expression jazz.define-virtual-runtime
  dialect: scheme
  declaration?: #t
  walk: :generic/specific
  signature-mangler: "~virtual-runtime")

(define-expression jazz.define-virtual-syntax
  dialect: scheme
  declaration?: #t
  walk: :generic/specific)

(define-expression jazz.define-dialect
  dialect: scheme
  declaration?: #t
  tabulate: 1
  walk: :define
  name-mangler: ("dialect"))

(define-expression jazz.define-walker-special
  dialect: scheme
  declaration?: #t
  walk: :define
  name-mangler: ("special"))

(define-expression jazz.define-walker-syntax
  dialect: scheme
  declaration?: #t
  walk: :define
  name-mangler: ("syntax"))

(define-expression jazz.define-walker-macro
  dialect: scheme
  declaration?: #t
  walk: :define
  name-mangler: ("macro"))


;;;
;;;; Jazz Syntax
;;;


(define-expression instantiate
  dialect: scheme
  walk: :define-macro)

(define-expression specialize
  dialect: scheme
  walk: :define-macro)

(define-expression template
  dialect: scheme
  tabulate: 1
  walk: :define-macro)

(define-expression %%assert
  dialect: scheme
  tabulate: 1)

(define-expression %%assertion
  dialect: scheme
  tabulate: 2)

(define-expression %%core-assert
  dialect: scheme
  tabulate: 1)

(define-expression %%core-assertion
  dialect: scheme
  tabulate: 2)

(define-expression %%debug-assert
  dialect: scheme
  tabulate: 1)

(define-expression %%debug-assertion
  dialect: scheme
  tabulate: 2)

(define-expression %%force-uniqueness
  dialect: scheme
  tabulate: 1)

(define-expression %%when
  dialect: scheme
  tabulate: 1)

(define-expression jazz.iterate-table
  dialect: scheme
  tabulate: 1)

(define-expression jazz.iterate-table-safe
  dialect: scheme
  tabulate: 1))
