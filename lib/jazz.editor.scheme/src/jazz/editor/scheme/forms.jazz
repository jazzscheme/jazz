;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Scheme Forms
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module jazz.editor.scheme.forms jazz


(import (jazz.editor.lisp)
        (jazz.editor.scheme))


;;;
;;;; Repository
;;;


(define-form repository
  dialect: repository
  tabulate: 0
  walk: :repository)


;;;
;;;; Package
;;;


(define-form package
  dialect: package
  tabulate: 1
  walk: :package)


(define-form root
  dialect: scheme
  walk: :keyword)

(define-form library
  dialect: scheme
  walk: :keyword)

(define-form install
  dialect: scheme
  walk: :keyword)

(define-form char-encoding
  dialect: scheme
  walk: :keyword)

(define-form project
  dialect: scheme
  walk: :keyword)

(define-form products
  dialect: scheme
  walk: :keyword)

(define-form profiles
  dialect: scheme
  walk: :keyword)


;;;
;;;; Unit
;;;


(define-form unit
  dialect: scheme
  namespace?: #t
  declaration?: #t
  modifiers: (protected public)
  tabulate: -1
  walk: :unit)


;;;
;;;; Module
;;;


(define-form module
  dialect: scheme
  namespace?: #t
  declaration?: #t
  modifiers: (protected public)
  tabulate: -1
  walk: :module)


(define-form import
  dialect: scheme
  walk: :keyword)

(define-form export
  dialect: scheme
  walk: :keyword)

(define-form require
  dialect: scheme
  walk: :keyword)


;;;
;;;; Define
;;;


(define-form define
  dialect: scheme
  declaration?: #t
  inner?: #t
  tabulate: 1
  walk: :define)

(define-form define-macro
  dialect: scheme
  declaration?: #t
  inner?: #t
  tabulate: 1
  walk: :define-macro)

(define-form define-syntax
  dialect: scheme
  declaration?: #t
  inner?: #t
  modifiers: (private protected package public deprecated undocumented uptodate)
  tabulate: 1
  walk: :define-syntax)

(define-form syntax-rules
  tabulate: 1)


;;;
;;;; Declaration
;;;


(define-form native
  declaration?: #t
  modifiers: (private protected package public deprecated undocumented uptodate)
  walk: :native)

(define-form native-syntax
  declaration?: #t
  modifiers: (private protected package public deprecated undocumented uptodate)
  walk: :native)


;;;
;;;; Syntax
;;;


(define-form begin
  dialect: scheme
  tabulate: 0
  walk: :begin)

(define-form call/cc
  dialect: scheme
  tabulate: 0)

(define-form case
  dialect: scheme
  tabulate: 1)

(define-form cond-expand
  dialect: scheme
  walk: :cond-expand)

(define-form do
  dialect: scheme
  tabulate: 2)

(define-form if
  dialect: scheme
  tabulate: 2)

(define-form lambda
  dialect: scheme
  tabulate: 1)

(define-form let
  dialect: scheme
  tabulate: 1)

(define-form let*
  dialect: scheme
  tabulate: 1)

(define-form letrec
  dialect: scheme
  tabulate: 1)

(define-form parameterize
  dialect: scheme
  tabulate: 1)

(define-form receive
  dialect: scheme
  tabulate: 2)


;;;
;;;; Gambit
;;;


(define-form c-define
  dialect: gambit
  declaration?: #t
  tabulate: 5
  walk: :c-define)

(define-form c-define-type
  dialect: gambit
  walk: :type)

(define-form c-lambda
  dialect: gambit
  tabulate: 1
  walk: :type)

(define-form declare
  dialect: gambit
  walk: :declare)

(define-form define-check-type
  dialect: gambit
  declaration?: #t
  tabulate: 2
  walk: :define)

(define-form define-fail-check-type
  dialect: gambit
  declaration?: #t
  tabulate: 1
  walk: :define)

(define-form define-library-type
  dialect: gambit
  declaration?: #t
  walk: :define)

(define-form define-library-type-of-exception
  dialect: gambit
  declaration?: #t
  tabulate: 1
  walk: :define)

(define-form define-prim
  dialect: gambit
  declaration?: #t
  tabulate: 1
  walk: :define)

(define-form define-runtime-macro
  dialect: gambit
  declaration?: #t
  tabulate: 1
  walk: :define-macro)

(define-form define-runtime-syntax
  dialect: gambit
  declaration?: #t
  tabulate: 1
  walk: :define-macro)

(define-form define-type
  dialect: gambit
  declaration?: #t
  tabulate: 1
  walk: :define)

(define-form ##define-macro
  dialect: gambit
  declaration?: #t
  tabulate: 1
  walk: :define-macro)

(define-form ##include
  dialect: gambit
  walk: :keyword)


;;;
;;;; Chicken
;;;


(define-form ##core#lambda
  dialect: chicken
  tabulate: 1)


;;;
;;;; Jazz Declaration
;;;


(define-form jazz.define
  dialect: scheme
  declaration?: #t
  tabulate: 1
  walk: :define)

(define-form jazz.define-check-macro
  dialect: scheme
  declaration?: #t
  tabulate: 1
  walk: :define-macro
  name-mangler: ("check-macro"))

(define-form jazz.define-class
  dialect: scheme
  declaration?: #t
  walk: :define-class
  name-mangler: ("class"))

(define-form jazz.define-class-runtime
  dialect: scheme
  declaration?: #t
  walk: :define-class
  name-mangler: ("class runtime"))

(define-form jazz.define-feature
  dialect: scheme
  declaration?: #t
  walk: :define)

(define-form jazz.define-generic
  dialect: scheme
  declaration?: #t
  walk: :generic/specific)

(define-form jazz.define-global
  dialect: scheme
  declaration?: #t
  walk: :define-macro
  name-mangler: ("global"))

(define-form jazz.define-literal
  dialect: scheme
  declaration?: #t
  walk: :define
  name-mangler: ("literal"))

(define-form jazz.define-macro
  dialect: scheme
  declaration?: #t
  tabulate: 1
  walk: :define-macro
  name-mangler: ("macro"))

(define-form jazz.define-method
  dialect: scheme
  declaration?: #t
  tabulate: 1
  walk: :generic/specific)

(define-form jazz.define-remote
  dialect: scheme
  declaration?: #t
  walk: :define)

(define-form jazz.define-setting
  dialect: scheme
  declaration?: #t
  tabulate: 1
  walk: :define-macro
  name-mangler: ("setting"))

(define-form jazz.define-special
  dialect: scheme
  declaration?: #t
  walk: :define-macro)

(define-form jazz.define-specific
  dialect: scheme
  declaration?: #t
  walk: :generic/specific)

(define-form jazz.define-syntax
  dialect: scheme
  declaration?: #t
  tabulate: 1
  walk: :define-macro
  name-mangler: ("syntax"))

(define-form jazz.define-variable
  dialect: scheme
  declaration?: #t
  walk: :define-macro
  name-mangler: ("variable"))

(define-form jazz.define-virtual
  dialect: scheme
  declaration?: #t
  walk: :generic/specific
  signature-mangler: "~virtual")

(define-form jazz.define-virtual-runtime
  dialect: scheme
  declaration?: #t
  walk: :generic/specific
  signature-mangler: "~virtual-runtime")

(define-form jazz.define-virtual-syntax
  dialect: scheme
  declaration?: #t
  walk: :generic/specific)

(define-form jazz.define-dialect
  dialect: scheme
  declaration?: #t
  tabulate: 1
  walk: :define
  name-mangler: ("dialect"))

(define-form jazz.define-walker-special
  dialect: scheme
  declaration?: #t
  walk: :define
  name-mangler: ("special"))

(define-form jazz.define-walker-syntax
  dialect: scheme
  declaration?: #t
  walk: :define
  name-mangler: ("syntax"))

(define-form jazz.define-walker-macro
  dialect: scheme
  declaration?: #t
  walk: :define
  name-mangler: ("macro"))


;;;
;;;; Jazz Syntax
;;;


(define-form instantiate
  dialect: scheme
  walk: :define-macro)

(define-form specialize
  dialect: scheme
  walk: :define-macro)

(define-form template
  dialect: scheme
  tabulate: 1
  walk: :define-macro)

(define-form %%assert
  dialect: scheme
  tabulate: 1)

(define-form %%assertion
  dialect: scheme
  tabulate: 2)

(define-form %%core-assert
  dialect: scheme
  tabulate: 1)

(define-form %%core-assertion
  dialect: scheme
  tabulate: 2)

(define-form %%debug-assert
  dialect: scheme
  tabulate: 1)

(define-form %%debug-assertion
  dialect: scheme
  tabulate: 2)

(define-form %%force-uniqueness
  dialect: scheme
  tabulate: 1)

(define-form %%iterate-table
  dialect: scheme
  tabulate: 1)

(define-form %%when
  dialect: scheme
  tabulate: 1))
