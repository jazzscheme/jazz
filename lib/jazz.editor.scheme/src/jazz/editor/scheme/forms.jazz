;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Scheme Forms
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.editor.scheme.forms jazz


(import (jazz.editor.lisp)
        (jazz.editor.scheme))


;;;
;;;; Define
;;;


(define-form define
  dialect: scheme
  tabulate: 1
  walk: :define)

(define-form define-macro
  dialect: scheme
  tabulate: 1
  walk: :define-macro)

(define-form define-syntax
  dialect: scheme
  tabulate: 1
  walk: :define-macro)


;;;
;;;; Syntax
;;;


(define-form begin
  dialect: scheme
  tabulate: 0
  walk: :begin)

(define-form call/cc
  dialect: scheme
  tabulate: 0)

(define-form case
  dialect: scheme
  tabulate: 1)

(define-form cond-expand
  dialect: scheme
  walk: :cond-expand)

(define-form do
  dialect: scheme
  tabulate: 2)

(define-form if
  dialect: scheme
  tabulate: 2)

(define-form lambda
  dialect: scheme
  tabulate: 1)

(define-form let
  dialect: scheme
  tabulate: 1)

(define-form let*
  dialect: scheme
  tabulate: 1)

(define-form letrec
  dialect: scheme
  tabulate: 1)

(define-form parameterize
  dialect: scheme
  tabulate: 1)

(define-form receive
  dialect: scheme
  tabulate: 2)


;;;
;;;; Gambit
;;;


(define-form c-define-type
  dialect: gambit
  walk: :type)

(define-form c-lambda
  dialect: gambit
  tabulate: 1
  walk: :type)

(define-form declare
  dialect: gambit
  walk: :declare)

(define-form define-check-type
  dialect: gambit
  tabulate: 2
  walk: :define)

(define-form define-fail-check-type
  dialect: gambit
  tabulate: 1
  walk: :define)

(define-form define-library-type
  dialect: gambit
  walk: :define)

(define-form define-library-type-of-exception
  dialect: gambit
  tabulate: 1
  walk: :define)

(define-form define-prim
  dialect: gambit
  tabulate: 1
  walk: :define)

(define-form define-runtime-macro
  dialect: gambit
  tabulate: 1
  walk: :define-macro)

(define-form define-runtime-syntax
  dialect: gambit
  tabulate: 1
  walk: :define-macro)

(define-form define-type
  dialect: gambit
  tabulate: 1
  walk: :define)

(define-form ##define-macro
  dialect: gambit
  tabulate: 1
  walk: :define-macro)

(define-form ##include
  dialect: gambit
  walk: :keyword)


;;;
;;;; Chicken
;;;


(define-form ##core#lambda
  dialect: chicken
  tabulate: 1))
