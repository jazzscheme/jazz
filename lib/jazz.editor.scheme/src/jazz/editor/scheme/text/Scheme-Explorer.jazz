;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Exploring Scheme Code
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2012
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.editor.scheme.text.Scheme-Explorer jazz


(require (jazz.editor.scheme.forms))

(import (jazz.editor.lisp))


(proclaim (warn optimizations))


(class Scheme-Explorer extends Lisp-Explorer
  
  
  (method override (expression-comment? mark)
    (define (get-string range)
      (get-range-string (get-start~ range) (get-end~ range)))
    
    (or (string=? (get-string (get-range~ mark)) "#;")
        (nextmethod mark)))


  ;;;
  ;;;; Definitions
  ;;;


  (method override (declaration-name? name)
    (or (define-type-of-symbol? name)
        (nextmethod name)))
  
  
  (method override (find-expression-syntax symbol)
    (if (define-type-of-symbol? symbol)
        (nextmethod 'define-type-of-)
      (nextmethod symbol)))
  
  
  (definition (define-type-of-symbol? symbol)
    (and (symbol? symbol)
         (starts-with? (symbol->string symbol) "define-type-of-")))


  ;;;
  ;;;; Declarations
  ;;;
  
  
  (method override (find-named-walker name)
    (case name
      ((:cond-expand)      walk-cond-expand)
      ((:include)          walk-c-declare)
      ((:begin)            walk-begin)
      ((:repository)       walk-repository)
      ((:package)          walk-package)
      ((:manifest)         walk-manifest)
      ((:digest)           walk-digest)
      ((:configuration)    walk-configuration)
      ((:block)            walk-block)
      ((:unit)             walk-unit)
      ((:module)           walk-module)
      ((:script)           walk-script)
      ((:require)          walk-require)
      ((:import)           walk-import)
      ((:export)           walk-export)
      ((:include)          walk-c-declare)
      ((:data)             walk-data)
      ((:keyword)          walk-keyword)
      ((:declare)          walk-declare)
      ((:define)           walk-define)
      ((:generic/specific) walk-generic/specific)
      ((:define-macro)     walk-define-macro)
      ((:define-syntax)    walk-define-syntax)
      ((:syntax)           walk-syntax)
      ((:macro)            walk-macro)
      ((:define-class)     walk-define-class)
      ((:type)             walk-type)
      ((:native)           walk-native)
      ((:unknown)          walk-unknown)
      ((:c-type)           walk-type)
      ((:c-declare)        walk-c-declare)
      ((:c-initialize)     walk-c-initialize)
      ((:c-define)         walk-c-define)
      (else                (nextmethod name))))

  
  (method (walk-modifiers context declaration keyword modifiers)
    (let ((old (copy end))
          (result '()))
      (let (iterate)
        (forward-whites)
        (set-start end)
        (let ((c0 (char-forward 0)))
          (when (and c0 (text-constituent? c0))
            (forward-constituent)
            (let ((symbol (find-marked-symbol)))
              (when (memq? symbol modifiers)
                (keyword context start end)
                (set! old (copy end))
                (set! result (cons symbol result))
                (iterate))))))
      (set! end old)
      (reverse! result)))
  
  
  (method (walk-keywords context declaration keyword expression keywords)
    (let ((old (copy end))
          (result '()))
      (let (iterate)
        (forward-whites)
        (set-start end)
        (let ((c0 (char-forward 0)))
          (when (and c0 (text-constituent? c0))
            (forward-constituent)
            (let ((marked-keyword (find-marked-symbol)))
              (when (memq? marked-keyword keywords)
                (keyword context start end)
                (forward-expr)
                (let ((expr (get-marked)))
                  (set! result (cons (cons marked-keyword expr) result))
                  (walk-expression context expression 'code #f)
                  (set! old (copy end))
                  (iterate)))))))
      (set! end old)
      (when context
        (set-parameters~ context (reverse! result)))))
    
  
  (method (walk-begin context symbol form declaration keyword expression doc)
    (walk-declarations context declaration keyword expression doc))

  
  (method (walk-cond-expand context symbol form declaration keyword expression doc)
    (let ((done? #f))
      (while (not done?)
        (let ((enter? (enter-list)))
          (if (not enter?)
              (set! done? #t)
            (forward-expr)
            (when (eq? (get-kind) 'symbol)
              (expression context start end 'code 'feature))
            (walk-declarations context declaration keyword expression doc)
            (exit-list))))))
  
  
  (method (walk-repository context symbol form declaration keyword expression doc)
    (walk-namespace context 'repository symbol form declaration keyword expression doc))
  
  (method (walk-package context symbol form declaration keyword expression doc)
    (walk-namespace context 'package symbol form declaration keyword expression doc))
  
  (method (walk-manifest context symbol form declaration keyword expression doc)
    (walk-namespace context 'manifest symbol form declaration keyword expression doc))
  
  (method (walk-digest context symbol form declaration keyword expression doc)
    (walk-namespace context 'digest symbol form declaration keyword expression doc))
    
  (method (walk-configuration context symbol form declaration keyword expression doc)
    (walk-namespace context 'configuration symbol form declaration keyword expression doc))

  (method (walk-block context symbol form declaration keyword expression doc)
    (walk-namespace context 'block symbol form declaration keyword expression doc))
  
  (method (walk-unit context symbol form declaration keyword expression doc)
    (walk-namespace context 'unit symbol form declaration keyword expression doc))
  
  (method (walk-module context symbol form declaration keyword expression doc)
    (walk-namespace context 'module symbol form declaration keyword expression doc))
  
  (method (walk-script context symbol form declaration keyword expression doc)
    (let ((entry context))
      (keyword context start end)
      (set! entry (declaration context 'script '() symbol '() #f start end (get-marked) (symbol-documented? (find-marked-symbol) doc)))
      (walk-modifiers context declaration keyword (get-modifiers~ form))
      (walk-declarations entry declaration keyword expression doc)
      entry))
  
  
  (method (walk-namespace context namespace-kind symbol form declaration keyword expression doc)
    (let ((entry context))
      (keyword context start end)
      (let ((modifiers (walk-modifiers context declaration keyword (get-modifiers~ form))))
        (when (and (forward-expr) (eq? kind 'symbol))
          (set! entry (declaration context namespace-kind modifiers symbol '() #f start end (get-marked) (symbol-documented? (find-marked-symbol) doc)))
          (walk-keywords entry declaration keyword expression (get-keywords~ form))
          (walk-declarations entry declaration keyword expression doc))
        entry)))
  
  
  (method (walk-require context symbol form declaration keyword expression doc)
    (walk-invoices context 'require symbol form declaration keyword expression doc))

  (method (walk-import context symbol form declaration keyword expression doc)
    (walk-invoices context 'import symbol form declaration keyword expression doc))
  
  (method (walk-export context symbol form declaration keyword expression doc)
    (walk-invoices context 'export symbol form declaration keyword expression doc))
  
  
  (method (walk-invoices context invoices-kind symbol form declaration keyword expression doc)
    (walk-anonymous context invoices-kind symbol form declaration keyword expression doc))
  
  
  (method (walk-anonymous context anonymous-kind symbol form declaration keyword expression doc)
    (let ((entry context))
      (keyword context start end)
      (set! entry (declaration context anonymous-kind '() symbol '() #f start end (get-marked) #f))
      (walk-expressions entry expression 'code #f)
      entry))
  
  
  (method (walk-data context symbol form declaration keyword expression doc)
    (walk-namespace context 'module symbol form declaration keyword expression doc))
  
  
  (method (walk-keyword context symbol form declaration keyword expression doc)
    (keyword context start end))
  
  
  (method (walk-declare context symbol form declaration keyword expression doc)
    (keyword context start end))
  
  
  (method (walk-define-type-of context symbol form declaration keyword expression doc)
    (walk-define context symbol (get-expression-syntax 'define) declaration keyword expression doc))
  
  
  (method (walk-define context symbol form declaration keyword expression doc)
    (let ((entry context))
      (keyword context start end)
      (forward-whites)
      (let ((list? (eqv? (char-forward 0) #\open-parenthesis)))
        (when list?
          (enter-list))
        (when (and (forward-expr) (eq? kind 'symbol))
          (set! entry (declaration context 'define '() symbol '() #f start end (get-marked) #f)))
        (when list?
          (walk-parameters entry declaration keyword expression doc))
        (when list?
          (exit-list)))
      (walk-expressions entry expression 'code #f)
      entry))
  
  
  (method (walk-generic/specific context symbol form declaration keyword expression doc)
    (let ((entry context))
      (keyword context start end)
      (forward-whites)
      (enter-list)
      (when (and (forward-expr) (eq? kind 'symbol))
        (let ((start (get-start))
              (end (get-end))
              (name (get-marked)))
          (forward-whites)
          (enter-list)
          (forward-expr)
          (let ((typename (get-marked)))
            (set! entry (declaration context 'generic/specific '() symbol '() #f start end (list name typename) #f))
            (expression context (get-start) (get-end) 'code 'tag))
          (exit-list)))
      (walk-parameters entry declaration keyword expression doc)
      (exit-list)
      (walk-expressions entry expression 'code #f)
      entry))

  
  (method (walk-macro context symbol form declaration keyword expression doc)
    (let ((entry context))
      (keyword context start end)
      (let ((modifiers (walk-modifiers context declaration keyword (get-modifiers~ form))))
        (enter-list)
        (when (and (forward-expr) (eq? kind 'symbol))
          (set! entry (declaration context 'macro modifiers symbol '() #f start end (get-marked) (symbol-documented? (find-marked-symbol) doc)))
          (walk-parameters entry declaration keyword expression doc)
          (exit-list)
          (walk-expressions entry expression))
        entry)))
  
  
  (method (walk-define-macro context symbol form declaration keyword expression doc)
    (let ((entry context))
      (keyword context start end)
      (forward-whites)
      (let ((list? (eqv? (char-forward 0) #\open-parenthesis)))
        (when list?
          (enter-list))
        (when (and (forward-expr) (eq? kind 'symbol))
          (set! entry (declaration context 'define-macro '() symbol '() #f start end (get-marked) #f)))
        (when list?
          (walk-expressions entry expression 'code #f))
        (when list?
          (exit-list)))
      (walk-expressions entry expression 'code #f)
      entry))
  
  
  (method (walk-define-syntax context symbol form declaration keyword expression doc)
    (let ((entry context))
      (keyword context start end)
      (let ((modifiers (walk-modifiers context declaration keyword (get-modifiers~ form))))
        (forward-whites)
        (let ((list? (eqv? (char-forward 0) #\open-parenthesis)))
          (when list?
            (enter-list))
          (when (and (forward-expr) (eq? kind 'symbol))
            (set! entry (declaration context 'define-macro modifiers symbol '() #f start end (get-marked) #f)))
          (when list?
            (walk-expressions entry expression 'code #f))
          (when list?
            (exit-list)))
        (walk-expressions entry expression 'code #f)
        entry)))
  
  
  (method (walk-syntax context symbol form declaration keyword expression doc)
    (let ((entry context))
      (keyword context start end)
      (let ((modifiers (walk-modifiers context declaration keyword (get-modifiers~ form))))
        (forward-whites)
        (let ((list? (eqv? (char-forward 0) #\open-parenthesis)))
          (when list?
            (enter-list))
          (when (and (forward-expr) (eq? kind 'symbol))
            (set! entry (declaration context 'define-macro modifiers symbol '() #f start end (get-marked) #f)))
          (when list?
            (walk-expressions entry expression 'code #f))
          (when list?
            (exit-list)))
        (walk-expressions entry expression 'code #f)
        entry)))
  
  
  (method (walk-define-class context symbol form declaration keyword expression doc)
    (let ((entry context))
      (keyword context start end)
      (forward-whites)
      (when (and (forward-expr) (eq? kind 'symbol))
        (set! entry (declaration context 'define-class '() symbol '() #f start end (get-marked) #f)))
      (walk-expressions entry expression)
      entry))
  
  
  (method (walk-native context symbol form declaration keyword expression doc)
    (define (parse-identifier str)
      (let ((pos (find str #\. reversed?: #t)))
        (if (not pos)
            str
          (substring str (+ pos 1) (string-length str)))))
    
    (let ((entry context))
      (keyword context start end)
      (let ((modifiers (walk-modifiers context declaration keyword (get-modifiers~ form))))
        (forward-whites)
        (when (and (forward-expr) (eq? kind 'symbol))
          (let ((name (parse-identifier (get-marked))))
            (set! entry (declaration context 'native modifiers symbol '() #f start end name (symbol-documented? name doc)))))
        (walk-specifier entry expression 'code)
        (walk-expressions entry expression 'code #f)
        entry)))
  
  
  (method (walk-type context symbol form declaration keyword expression doc)
    (let ((entry context))
      (keyword context start end)
      (when (and (forward-expr) (eq? kind 'symbol))
        (set! entry (declaration context 'type '() symbol '() #f start end (get-marked) #f)))
      (walk-expressions entry expression)
      entry))

  
  (method (walk-c-declare context symbol form declaration keyword expression doc)
    (keyword context start end)
    (walk-expressions context expression))

  
  (method (walk-c-initialize context symbol form declaration keyword expression doc)
    (keyword context start end)
    (walk-expressions context expression))

  
  (method (walk-c-define context symbol form declaration keyword expression doc)
    (let ((entry context))
      (keyword context start end)
      (let ((modifiers (walk-modifiers context declaration keyword (get-modifiers~ form))))
        (forward-whites)
        (let ((list? (eqv? (char-forward 0) #\open-parenthesis)))
          (when list?
            (enter-list))
          (when (and (forward-expr) (eq? kind 'symbol))
            (set! entry (declaration context 'c-definition modifiers symbol '() #f start end (get-marked) (symbol-documented? (find-marked-symbol) doc))))
          (when list?
            (exit-list)))
        (walk-expressions entry expression)
        entry)))
  
  
  (method package (symbol-documentation symbol doc)
    (when (and symbol doc)
      (get-definition~ doc symbol)))
  
  
  (method package (symbol-documented? symbol doc)
    (symbol-documentation symbol doc))))
