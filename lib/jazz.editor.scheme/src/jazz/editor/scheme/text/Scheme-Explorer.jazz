;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Exploring Scheme Code
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.editor.scheme.text.Scheme-Explorer jazz


(require (jazz.editor.scheme.forms))

(import (jazz.editor.lisp)
        (jazz.catalog)
        (jazz.outline)
        (jazz.text))


(proclaim (warn optimizations))


(class Scheme-Explorer extends Lisp-Explorer
  
  
  (method override (expression-comment? self mark)
    (define (get-string range)
      (get-range-string self (get-start range) (get-end range)))
    
    (or (string=? (get-string (get-range mark)) "#;")
        (nextmethod self mark)))


  ;;;
  ;;;; Definitions
  ;;;


  (method override (declaration-name? self name)
    (or (define-type-of-symbol? name)
        (nextmethod self name)))
  
  
  (method override (find-expression-syntax self symbol)
    (if (define-type-of-symbol? symbol)
        (nextmethod self 'define-type-of-)
      (nextmethod self symbol)))
  
  
  (definition (define-type-of-symbol? symbol)
    (and (symbol? symbol)
         (starts-with? (symbol->string symbol) "define-type-of-")))


  ;;;
  ;;;; Declarations
  ;;;
  
  
  (method override (find-named-walker self name)
    (case name
      ((:cond-expand)      (~ walk-cond-expand self))
      ((:include)          (~ walk-c-declare self))
      ((:begin)            (~ walk-begin self))
      ((:repository)       (~ walk-repository self))
      ((:package)          (~ walk-package self))
      ((:manifest)         (~ walk-manifest self))
      ((:digest)           (~ walk-digest self))
      ((:configuration)    (~ walk-configuration self))
      ((:block)            (~ walk-block self))
      ((:unit)             (~ walk-unit self))
      ((:module)           (~ walk-module self))
      ((:script)           (~ walk-script self))
      ((:require)          (~ walk-require self))
      ((:import)           (~ walk-import self))
      ((:export)           (~ walk-export self))
      ((:include)          (~ walk-c-declare self))
      ((:data)             (~ walk-data self))
      ((:keyword)          (~ walk-keyword self))
      ((:declare)          (~ walk-declare self))
      ((:define)           (~ walk-define self))
      ((:generic/specific) (~ walk-generic/specific self))
      ((:hub)              (~ walk-hub self))
      ((:node)             (~ walk-node self))
      ((:define-emit)      (~ walk-define-emit self))
      ((:define-macro)     (~ walk-define-macro self))
      ((:define-syntax)    (~ walk-define-syntax self))
      ((:syntax)           (~ walk-syntax self))
      ((:macro)            (~ walk-macro self))
      ((:define-class)     (~ walk-define-class self))
      ((:type)             (~ walk-type self))
      ((:native)           (~ walk-native self))
      ((:unknown)          (~ walk-unknown self))
      ((:c-type)           (~ walk-type self))
      ((:c-declare)        (~ walk-c-declare self))
      ((:c-initialize)     (~ walk-c-initialize self))
      ((:c-define)         (~ walk-c-define self))
      ((:c-constant)       (~ walk-c-constant self))
      ((:c-structure)      (~ walk-c-structure self))
      ((:c-external)       (~ walk-c-external self))
      (else                (nextmethod self name))))

  
  (method (walk-modifiers self context declaration keyword modifiers)
    (let ((old (copy end))
          (result '()))
      (let (iterate)
        (forward-whites self)
        (set-start self end)
        (let ((c0 (char-forward self 0)))
          (when (and c0 (text-constituent? self c0))
            (forward-constituent self)
            (let ((symbol (find-marked-symbol self)))
              (when (memq? symbol modifiers)
                (keyword context start end)
                (set! old (copy end))
                (set! result (cons symbol result))
                (iterate))))))
      (set! end old)
      (reverse! result)))
  
  
  (method (walk-keywords self context declaration keyword expression keywords)
    (let ((old (copy end))
          (result '()))
      (let (iterate)
        (forward-whites self)
        (set-start self end)
        (let ((c0 (char-forward self 0)))
          (when (and c0 (text-constituent? self c0))
            (forward-constituent self)
            (let ((marked-keyword (find-marked-symbol self)))
              (when (memq? marked-keyword keywords)
                (keyword context start end)
                (forward-expr self)
                (let ((expr (get-marked self)))
                  (set! result (cons (cons marked-keyword expr) result))
                  (walk-expression self context expression 'code #f)
                  (set! old (copy end))
                  (iterate)))))))
      (set! end old)
      (when context
        (set-parameters context (reverse! result)))))
    
  
  (method (walk-begin self context symbol form declaration keyword expression doc)
    (walk-declarations self context declaration keyword expression doc))

  
  (method (walk-cond-expand self context symbol form declaration keyword expression doc)
    (let ((done? #f))
      (while (not done?)
        (let ((enter? (enter-list self)))
          (if (not enter?)
              (set! done? #t)
            (forward-expr self)
            (when (eq? (get-kind self) 'symbol)
              (expression context start end 'code 'feature))
            (walk-declarations self context declaration keyword expression doc)
            (exit-list self))))))
  
  
  (method (walk-repository self context symbol form declaration keyword expression doc)
    (walk-namespace self context 'repository symbol form declaration keyword expression doc))
  
  (method (walk-package self context symbol form declaration keyword expression doc)
    (walk-namespace self context 'package symbol form declaration keyword expression doc))
  
  (method (walk-manifest self context symbol form declaration keyword expression doc)
    (walk-namespace self context 'manifest symbol form declaration keyword expression doc))
  
  (method (walk-digest self context symbol form declaration keyword expression doc)
    (walk-namespace self context 'digest symbol form declaration keyword expression doc))
    
  (method (walk-configuration self context symbol form declaration keyword expression doc)
    (walk-namespace self context 'configuration symbol form declaration keyword expression doc))

  (method (walk-block self context symbol form declaration keyword expression doc)
    (walk-namespace self context 'block symbol form declaration keyword expression doc))
  
  (method (walk-unit self context symbol form declaration keyword expression doc)
    (walk-namespace self context 'unit symbol form declaration keyword expression doc))
  
  (method (walk-module self context symbol form declaration keyword expression doc)
    (walk-namespace self context 'module symbol form declaration keyword expression doc))
  
  (method (walk-script self context symbol form declaration keyword expression doc)
    (define (determine-name)
      (let ((moniker (get-moniker (single-client model))))
        (if moniker
            (get-base moniker)
          "script")))
    
    (let ((entry context))
      (keyword context start end)
      (set! entry (declaration context 'script '() symbol '() #f start end (determine-name) #f))
      (walk-modifiers self context declaration keyword (get-modifiers form))
      (walk-declarations self entry declaration keyword expression doc)
      entry))
  
  
  (method (walk-namespace self context namespace-kind symbol form declaration keyword expression doc)
    (let ((entry context))
      (keyword context start end)
      (let ((modifiers (walk-modifiers self context declaration keyword (get-modifiers form))))
        (when (and (forward-expr self) (eq? kind 'symbol))
          (set! entry (declaration context namespace-kind modifiers symbol '() #f start end (get-marked self) (symbol-documented? self (find-marked-symbol self) doc)))
          (walk-keywords self entry declaration keyword expression (get-keywords form))
          (walk-declarations self entry declaration keyword expression doc))
        entry)))
  
  
  (method (walk-require self context symbol form declaration keyword expression doc)
    (walk-invoices self context 'require symbol form declaration keyword expression doc))

  (method (walk-import self context symbol form declaration keyword expression doc)
    (walk-invoices self context 'import symbol form declaration keyword expression doc))
  
  (method (walk-export self context symbol form declaration keyword expression doc)
    (walk-invoices self context 'export symbol form declaration keyword expression doc))
  
  
  (method (walk-invoices self context invoices-kind symbol form declaration keyword expression doc)
    (walk-anonymous self context invoices-kind symbol form declaration keyword expression doc))
  
  
  (method (walk-anonymous self context anonymous-kind symbol form declaration keyword expression doc)
    (let ((entry context))
      (keyword context start end)
      (set! entry (declaration context anonymous-kind '() symbol '() #f start end (get-marked self) #f))
      (walk-expressions self entry expression 'code #f)
      entry))
  
  
  (method (walk-data self context symbol form declaration keyword expression doc)
    (walk-namespace self context 'module symbol form declaration keyword expression doc))
  
  
  (method (walk-keyword self context symbol form declaration keyword expression doc)
    (keyword context start end))
  
  
  (method (walk-declare self context symbol form declaration keyword expression doc)
    (keyword context start end))
  
  
  (method (walk-define-type-of self context symbol form declaration keyword expression doc)
    (walk-define self context symbol (get-expression-syntax 'define) declaration keyword expression doc))
  
  
  (method (walk-define self context symbol form declaration keyword expression doc)
    (let ((entry context)
          (recolorizing-inner? (and line-hook (> (get-col start) 1))))
      (when (not recolorizing-inner?)
        (keyword context start end))
      (forward-whites self)
      (let ((list? (eqv? (char-forward self 0) #\open-parenthesis)))
        (when list?
          (enter-list self))
        (when (and (forward-expr self) (eq? kind 'symbol) (not recolorizing-inner?))
          (set! entry (declaration context 'define '() symbol '() #f start end (get-marked self) #f)))
        (when list?
          (walk-parameters self entry declaration keyword expression doc))
        (when list?
          (exit-list self)))
      (walk-expressions self entry expression 'code #f)
      entry))
  
  
  (method (walk-generic/specific self context symbol form declaration keyword expression doc)
    (let ((entry context))
      (keyword context start end)
      (forward-whites self)
      (enter-list self)
      (when (and (forward-expr self) (eq? kind 'symbol))
        (let ((start (get-start self))
              (end (get-end self))
              (name (get-marked self)))
          (forward-whites self)
          (enter-list self)
          (forward-expr self)
          (let ((typename (get-marked self)))
            (set! entry (declaration context 'generic/specific '() symbol '() #f start end (list name typename) #f))
            (expression context (get-start self) (get-end self) 'code 'tag))
          (exit-list self)))
      (walk-parameters self entry declaration keyword expression doc)
      (exit-list self)
      (walk-expressions self entry expression 'code #f)
      entry))


  (method (walk-hub self context symbol form declaration keyword expression doc)
    (let ((entry context))
      (keyword context start end)
      (forward-whites self)
      (when (and (forward-expr self) (eq? kind 'symbol))
        (let ((start (get-start self))
              (end (get-end self))
              (name (get-marked self)))
          (set! entry (declaration context 'hub '() symbol '() #f start end (list name) #f))))
      entry))
  
  
  (method (walk-node self context symbol form declaration keyword expression doc)
    (let ((entry context))
      (keyword context start end)
      (forward-whites self)
      (enter-list self)
      (when (and (forward-expr self) (eq? kind 'symbol))
        (let ((start (get-start self))
              (end (get-end self))
              (name (get-marked self)))
          (forward-whites self)
          (enter-list self)
          (forward-expr self)
          (let ((typename (get-marked self)))
            (set! entry (declaration context 'node '() symbol '() #f start end (list name typename) #f))
            (expression context (get-start self) (get-end self) 'code 'tag))
          (exit-list self)))
      (walk-parameters self entry declaration keyword expression doc)
      (exit-list self)
      (walk-expressions self entry expression 'code #f)
      entry))


  (method (walk-define-emit self context symbol form declaration keyword expression doc)
    (let ((entry context))
      (keyword context start end)
      (forward-whites self)
      (enter-list self)
      (when (and (forward-expr self) (eq? kind 'symbol))
        (let ((start (get-start self))
              (end (get-end self))
              (name (get-marked self)))
          (forward-whites self)
          (enter-list self)
          (forward-expr self)
          (let ((backend (get-marked self)))
            (set! entry (declaration context 'emit '() symbol '() #f start end (list name backend) #f)))
          (exit-list self)))
      (walk-parameters self entry declaration keyword expression doc)
      (exit-list self)
      (walk-expressions self entry expression 'code #f)
      entry))

  
  (method (walk-macro self context symbol form declaration keyword expression doc)
    (let ((entry context))
      (keyword context start end)
      (let ((modifiers (walk-modifiers self context declaration keyword (get-modifiers form))))
        (enter-list self)
        (when (and (forward-expr self) (eq? kind 'symbol))
          (set! entry (declaration context 'macro modifiers symbol '() #f start end (get-marked self) (symbol-documented? self (find-marked-symbol self) doc)))
          (walk-parameters self entry declaration keyword expression doc)
          (exit-list self)
          (walk-expressions self entry expression))
        entry)))
  
  
  (method (walk-define-macro self context symbol form declaration keyword expression doc)
    (let ((entry context)
          (recolorizing-inner? (and line-hook (> (get-col start) 1))))
      (when (not recolorizing-inner?)
        (keyword context start end))
      (forward-whites self)
      (let ((list? (eqv? (char-forward self 0) #\open-parenthesis)))
        (when list?
          (enter-list self))
        (when (and (forward-expr self) (eq? kind 'symbol) (not recolorizing-inner?))
          (set! entry (declaration context 'define-macro '() symbol '() #f start end (get-marked self) #f)))
        (when list?
          (walk-expressions self entry expression 'code #f))
        (when list?
          (exit-list self)))
      (walk-expressions self entry expression 'code #f)
      entry))
  
  
  (method (walk-define-syntax self context symbol form declaration keyword expression doc)
    (let ((entry context)
          (recolorizing-inner? (and line-hook (> (get-col start) 1))))
      (when (not recolorizing-inner?)
        (keyword context start end))
      (let ((modifiers (walk-modifiers self context declaration keyword (get-modifiers form))))
        (forward-whites self)
        (let ((list? (eqv? (char-forward self 0) #\open-parenthesis)))
          (when list?
            (enter-list self))
          (when (and (forward-expr self) (eq? kind 'symbol) (not recolorizing-inner?))
            (set! entry (declaration context 'define-macro modifiers symbol '() #f start end (get-marked self) #f)))
          (when list?
            (walk-expressions self entry expression 'code #f))
          (when list?
            (exit-list self)))
        (walk-expressions self entry expression 'code #f)
        entry)))
  
  
  (method (walk-syntax self context symbol form declaration keyword expression doc)
    (let ((entry context))
      (keyword context start end)
      (let ((modifiers (walk-modifiers self context declaration keyword (get-modifiers form))))
        (forward-whites self)
        (let ((list? (eqv? (char-forward self 0) #\open-parenthesis)))
          (when list?
            (enter-list self))
          (when (and (forward-expr self) (eq? kind 'symbol))
            (set! entry (declaration context 'define-macro modifiers symbol '() #f start end (get-marked self) #f)))
          (when list?
            (walk-expressions self entry expression 'code #f))
          (when list?
            (exit-list self)))
        (walk-expressions self entry expression 'code #f)
        entry)))
  
  
  (method (walk-define-class self context symbol form declaration keyword expression doc)
    (let ((entry context))
      (keyword context start end)
      (forward-whites self)
      (when (and (forward-expr self) (eq? kind 'symbol))
        (set! entry (declaration context 'define-class '() symbol '() #f start end (get-marked self) #f)))
      (walk-expressions self entry expression)
      entry))
  
  
  (method (walk-native self context symbol form declaration keyword expression doc)
    (define (parse-identifier str)
      (let ((pos (find str #\. reversed?: #t)))
        (if (not pos)
            str
          (substring str (+ pos 1) (string-length str)))))
    
    (let ((entry context))
      (keyword context start end)
      (let ((modifiers (walk-modifiers self context declaration keyword (get-modifiers form))))
        (forward-whites self)
        (when (and (forward-expr self) (eq? kind 'symbol))
          (let ((name (parse-identifier (get-marked self))))
            (set! entry (declaration context 'native modifiers symbol '() #f start end name (symbol-documented? self name doc)))))
        (walk-specifier self entry expression 'code)
        (walk-expressions self entry expression 'code #f)
        entry)))
  
  
  (method (walk-type self context symbol form declaration keyword expression doc)
    (let ((entry context))
      (keyword context start end)
      (when (and (forward-expr self) (eq? kind 'symbol))
        (set! entry (declaration context 'type '() symbol '() #f start end (get-marked self) #f)))
      (walk-expressions self entry expression)
      entry))

  
  (method (walk-c-declare self context symbol form declaration keyword expression doc)
    (keyword context start end)
    (walk-expressions self context expression))

  
  (method (walk-c-initialize self context symbol form declaration keyword expression doc)
    (keyword context start end)
    (walk-expressions self context expression))

  
  (method (walk-c-define self context symbol form declaration keyword expression doc)
    (let ((entry context))
      (keyword context start end)
      (let ((modifiers (walk-modifiers self context declaration keyword (get-modifiers form))))
        (forward-whites self)
        (let ((list? (eqv? (char-forward self 0) #\open-parenthesis)))
          (when list?
            (enter-list self))
          (when (and (forward-expr self) (eq? kind 'symbol))
            (set! entry (declaration context 'c-definition modifiers symbol '() #f start end (get-marked self) (symbol-documented? self (find-marked-symbol self) doc))))
          (when list?
            (exit-list self)))
        (walk-expressions self entry expression)
        entry)))
  
  
  (method (walk-c-type self context symbol form declaration keyword expression doc)
    (let ((entry context))
      (keyword context start end)
      (let ((modifiers (walk-modifiers self context declaration keyword (get-modifiers form))))
        (when (and (forward-expr self) (eq? kind 'symbol))
          (set! entry (declaration context 'c-type modifiers symbol '() #f start end (get-marked self) (symbol-documented? self (find-marked-symbol self) doc))))
        (walk-expressions self entry expression)
        entry)))

  
  (method (walk-c-constant self context symbol form declaration keyword expression doc)
    (let ((entry context))
      (keyword context start end)
      (let ((modifiers (walk-modifiers self context declaration keyword (get-modifiers form))))
        (when (and (forward-expr self) (eq? kind 'symbol))
          (set! entry (declaration context 'c-constant modifiers symbol '() #f start end (get-marked self) (symbol-documented? self (find-marked-symbol self) doc))))
        (walk-expressions self entry expression)
        entry)))
  
  
  (method (walk-c-structure self context symbol form declaration keyword expression doc)
    (let ((entry context))
      (keyword context start end)
      (let ((modifiers (walk-modifiers self context declaration keyword (get-modifiers form))))
        (forward-whites self)
        (let ((list? (eqv? (char-forward self 0) #\open-parenthesis)))
          (when list?
            (enter-list self))
          (when (and (forward-expr self) (eq? kind 'symbol))
            (set! entry (declaration context 'c-structure modifiers symbol '() #f start end (get-marked self) (symbol-documented? self (find-marked-symbol self) doc))))
          (when list?
            (exit-list self)))
        (walk-expressions self entry expression)
        entry)))

  
  (method (walk-c-external self context symbol form declaration keyword expression doc)
    (let ((entry context))
      (keyword context start end)
      (let ((modifiers (walk-modifiers self context declaration keyword (get-modifiers form))))
        (let ((entered? (enter-list self)))
          (when (and (forward-expr self) (eq? kind 'symbol))
            (set! entry (declaration context 'external modifiers symbol '() #f start end (get-marked self) (symbol-documented? self (find-marked-symbol self) doc))))
          (when entered?
            (walk-parameters self entry declaration keyword expression doc))
          (when entered?
            (exit-list self)))
        (walk-specifier self entry expression 'code)
        (walk-expressions self entry expression 'code #f)
        entry)))
  
  
  (method package (symbol-documentation self symbol doc)
    (when (and symbol doc)
      (get-definition doc symbol)))
  
  
  (method package (symbol-documented? self symbol doc)
    (symbol-documentation self symbol doc))))
