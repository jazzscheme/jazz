;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; SQL Language
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module jazz.editor.sql jazz


(hub add-history)
(hub clear-table)
(hub display-tables)
(hub evaluate)
(hub evaluate-statements)
(hub get-completions)
(hub get-current-request)
(hub get-definition-style)
(hub get-keyword-style)
(hub get-keywords)
(hub get-line-comment-style)
(hub get-max-display)
(hub get-max-load)
(hub get-tabulate-text?)
(hub get-text)
(hub get-title-style)
(hub get-tree)
(hub new-connections-menu)
(hub next-table)
(hub on-clear)
(hub on-open)
(hub open-selection)
(hub previous-table)
(hub process-sql)
(hub recordsets-update)
(hub resize-center)
(hub set-current-request)


(export (jazz.editor.sql.autoload))
(import (jazz.component)
        (jazz.database)
        (jazz.io)
        (jazz.process)
        (jazz.schema)
        (jazz.view))


;;;
;;;; Data Source
;;;


(definition Active-Data-Source
  #f)


(definition public (get-active-data-source)
  Active-Data-Source)


(definition public (set-active-data-source data-source)
  (set! Active-Data-Source data-source)
  @convert-this-is-gui
  (let ((guest (get-sql-connections)))
    (when guest
      (set-property (get-designer guest) (get-client guest) 'default-source (and data-source (get-name data-source)))
      (invalidate-view (get-tree guest))
      (get-active-connection))))


(definition public (get-active-connection)
  (when Active-Data-Source
    (let* ((name (get-name Active-Data-Source))
           (connection (require-connection name data-source: Active-Data-Source)))
      ;; In case an external source closed the connection
      (when (eq? (get-state connection) 'closed)
        (open connection Active-Data-Source))
      connection)))


;;;
;;;; Connections
;;;


(definition Active-Connections
  '())


;; private because of import conflict
(definition (find-connection name)
  (assoc-value name Active-Connections #f))


;; private because of import conflict
(definition (require-connection name (data-source: data-source #f))
  (or (find-connection name)
      (when data-source
        (let ((connection (new-connection data-source)))
          (set! Active-Connections (cons (cons name connection) Active-Connections))
          connection))))


(definition public (close-connections)
  (for-each (lambda (info)
              (bind (name . connection) info
                (close connection)))
            Active-Connections)
  (set! Active-Connections '())
  (set-active-data-source #f))


(definition Connections-File
  {File Profile "settings" "Connections.jml"})


(definition package (read-connections)
  (define (load-connections)
    (let ((file Connections-File))
      (if (exists? file)
          (let ((connections (instantiate (read-form file))))
            (validate-duplicates connections (get-name file))
            connections)
        (new Data-Sources))))
  
  (with-safe-execution "loading the connections"
    (lambda ()
      (let ((process (current-process))
            (connections (load-connections)))
        (install-context process connections)
        connections))
    continue-handler:
    (lambda (err)
      )))


;;;
;;;; Utilities
;;;


(definition public (select-statement? statement)
  (let ((stm (trim-whitespace statement)))
    (let ((pos (find-if whitespace? stm return: 'position)))
      (string-ci=? (if (not pos)
                       stm
                     (subseq stm 0 pos))
                   "select")))))
