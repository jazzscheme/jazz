;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Inventory Browser
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.editor.sql.inventory.Inventory-Browser jazz


(class Inventory-Browser extends Object)


@convert (


(import (jazz.markup)
        (jazz.menu)
        (jazz.resource)
        (jazz.tree)
        (jazz.ui))


(class Inventory-Browser extends Layout-View


  (property connection initialize #f accessors explicit)


  (form
    (<install>                                      layout-type: fill
      (<Layout-View>                name: tools
        (<Push-Tool>                name: refresh   size: {Dimension 22 22} location: tail tooltip?: #t tooltip-text: "Refresh" resource: {Image-Resource "Refresh"} portfolio: :images @convert action-handler: @convert {Event-Handler :form on-refresh}))
      (<Scroller-View>              name: scroller  vscroll?: #t hscroll?: #t style: tool
        (<!>                        name: content   layout-type: fill
          (<Tree-Header>            name: header    shown?: #f
            (<!>                    name: content
              (<Tree-View> @convert <Inventory-Tree>     name: inventory portfolio: :images show-header?: #f @convert selection-handler: @convert {Event-Handler :form on-selection-change} @convert context-menu-handler: @convert {Event-Handler :form on-context-menu}
                (<Tree-Node-Column>                 title: "Elements" width: 329))))))))
  
  
  (method meta (external-name . rest)
    'inventory-browser)


  ;;;
  ;;;; Host
  ;;;
  
  
  (method meta (host-icon)
    {Image-Resource "Database"})
  
  
  (method meta (host-title)
    "Inventory")
 

  ;;;
  ;;;; Docked
  ;;;
  
  
  (method (get-tools-view)
    (locate 'tools))

  
  ;;;
  ;;;; Access
  ;;;


  (method public (get-connection)
    connection)


  (method public (set-connection value)
    (when (neq? value connection)
      (set! connection value)
      (insert-inventory (locate 'inventory) (and connection (get-inventory connection)))))
  
  
  ;;;
  ;;;; Events
  ;;;


  (method (on-refresh)
    (let ((inventory-tree (locate 'inventory)))
      (with-preserved-selection inventory-tree
        (lambda ()
          (let ((state (get-expand-state inventory-tree)))
            (insert-inventory inventory-tree (and connection (get-inventory connection)))
            (set-expand-state inventory-tree state)))
        use: 'rank)
      (let* ((selection (get-single-selection inventory-tree))
             (item (when selection (get-user-data (get-row inventory-tree selection)))))
        (if (null? item)
            (clear-output)
          (describe-item item)))))
  
  
  (method (on-selection-change evt)
    (let* ((sender (get-sender evt))
           (selection (get-single-selection sender)))
      (if (null? selection)
          (clear-output)
        (describe-item (get-user-data (get-row sender selection))))))
  
  
  (method (on-context-menu evt)
    (let ((sender (get-sender evt))
          (pos (get-position evt)))
      (with-context-click sender pos
        (lambda ()
          (let ((element (selected-element)))
            (when element
              (let ((menu (typecase element
                            ((Inventory-Table) (new-table-menu))
                            ((Inventory-Column) (new Column-Menu))
                            ((Inventory-Index) (new Index-Menu))
                            ((Inventory-Trigger) (new Trigger-Menu))
                            @w ((Inventory-Constraint) (new Constraint-Menu))
                            ((Inventory-View) (new View-Menu))
                            ((Inventory-Procedure) (new Procedure-Menu))
                            ((Inventory-Relation) (new Relation-Menu))
                            ((Pair) (let ((section (car element)))
                                      (cond ((= section 'tables) (new-tables-menu))
                                            ((= section 'views) (new Views-Menu))
                                            ((= section 'procedures) (new Procedures-Menu))
                                            ((= section 'relations) (new Relations-Menu))
                                            (else #f))))
                            (else #f))))
                (when menu
                  (track-popup-menu sender menu pos)))))))))
  
  
  (method (new-tables-menu)
    (let ((menu (new Tables-Menu)))
      (set-visible? (locate menu 'add-linked-table) (is? (get-data-source connection) Access-Data-Source))
      (set-visible? (locate menu 'add-table-by-script) (is? (get-data-source connection) SQLServer-Data-Source))
      (layout-menu menu)
      menu))
  
  
  (method (new-table-menu)
    (let ((menu (new Table-Menu))
           (access? (is? (get-data-source connection)  Access-Data-Source))
           (sqlserver? (is? (get-data-source connection)  SQLServer-Data-Source)))
      (set-visible? (locate menu 'modify-description) access?)
      (set-visible? (locate menu 'modify-validation-rule) access?)
      (set-visible? (locate menu 'modify-validation-text) access?)
      (set-visible? (locate menu 'modify-owner) sqlserver?)
      (layout-menu menu)
      menu))
  
  
  (method (add-table)
    (let* ((table-name (request-string title: "Enter table name"))
           (database (get-inventory connection))
           (table (create-table database table-name))
           (column (create-column table (request-string title: "Enter field name")))
           (datatype (get-datatype (get-provider (get-data-source connection))))
           (systype #f)
           (size #f))
      (while (null? systype)
        (set! systype (find-systype datatype (request-string title: "Enter field type" initial-value: "char"))))
      (when (get-sizeable? systype)
        (set! size (parse-integer (request-string title: "Enter field size" initial-value: "12"))))
      (set-datatype column (new Datatype (get-name systype) size))
      (append-column table column)
      (append-table database table)))
  
  
  (method (add-table-by-script)
    (let ((table-name (request-string title: "Enter table name"))
           (column-name (request-string title: "Enter field name"))
           (datatype (get-datatype (get-provider (get-data-source connection))))
           (systype #f)
           (size #f))
      (while (null? systype)
        (set! systype (find-systype datatype (request-string title: "Enter field type" initial-value: "char"))))
      (when (get-sizeable? systype)
        (set! size (parse-integer (request-string title: "Enter field size" initial-value: "12"))))
      (execute-sql-commit-preserve
       (lambda ()
         (generate-sql-header-script)))
      (execute-sql-commit-preserve
       (lambda ()
         (generate-sql-create-table table-name (list column-name (new Datatype (get-name systype) size) "NULL")))
       reload-inventory?: #t)))
  
  
  (method (add-linked-table)
    (let* ((table-name (request-string title: "Enter table name"))
           (database (get-inventory connection))
           (table (create-table database table-name))
           (connect (request-string title: "Enter connect"))
           (source-table-name (request-string title: "Enter source table name")))
      (set-connect table connect)
      (set-source-table-name table source-table-name)
      (append-table database table)))
  

  (method (remove-table)
    (let* ((row (selected-row))
           (element (selected-element))
           (table-name (get-title element))
           (database (get-parent element)))
      (remove-table database table-name)))
  
  
  (method (add-column)
    (let* ((row (selected-row))
           (table (selected-element))
           (datatype (get-datatype (get-provider (get-data-source connection))))
           (column (create-column table (request-string title: "Enter field name")))
           (systype #f)
           (size #f))
      (while (null? systype)
        (set! systype (find-systype datatype (request-string title: "Enter field type" initial-value: "Text"))))
      (when (get-sizeable? systype)
        (set! size (parse-integer (request-string title: "Enter field size" initial-value: "12"))))
      (set-datatype column (new datatype (get-name systype) size))
      (set-nullable? column (parse-boolean (request-string title: "Enter nullable?" initial-value: "True")))
      (append-column table column)))
  
  
  (method (insert-column)
    (let* ((row (selected-row))
           (table (selected-element))
           (datatype (get-datatype (get-provider (get-data-source connection))))
           (column (create-column table (request-string title: "Enter field name")))
           (systype #f)
           (size #f))
      (while (null? systype)
        (set! systype (find-systype datatype (request-string title: "Enter field type" initial-value: "Text"))))
      (when (get-sizeable? systype)
        (set! size (parse-integer (request-string title: "Enter field size" initial-value: "12"))))
      (set-datatype column (new datatype (get-name systype) size))
      (set-nullable? column (parse-boolean (request-string title: "Enter nullable?" initial-value: "True")))
      (append-column table column)))
  
  
  (method (remove-column)
    (let* ((element (selected-element))
           (column-name (get-title element))
           (table (get-parent element)))
      (remove-column table column-name)))
                             

  (method (add-index)
    (let* ((table (selected-element))
           (index (create-index table (request-string title: "Enter index name")))
           (fields/orders (read-delimited-string (request-string title: "Enter field names/orders") #\,)))
      (set-fields/orders index fields/orders)
      (append-index table index)))
  
  
  (method (remove-index)
    (let* ((element (selected-element))
           (index-name (get-title element))
           (table (get-parent element)))
      (remove-index table index-name)))
  
  
  (method (add-trigger)
    (let* ((table (selected-element))
           (trigger (create-trigger table (request-string title: "Enter trigger name")))
           (text (request-string title: "Enter text")))
      (set-text trigger text)
      (append-trigger table trigger)))
  
  
  (method (remove-trigger)
    (let* ((element (selected-element))
           (trigger-name (get-title element))
           (table (get-parent element)))
      (remove-trigger table trigger-name)))
  
  
  (method (add-view)
    )
  
  
  (method (remove-view)
    (let* ((row (selected-row))
           (element (selected-element))
           (view-name (get-title element))
           (database (get-parent element)))
      (remove-view database view-name)))
  
  
  (method (add-procedure)
    (let* ((procedure-name (request-string title: "Enter procedure name"))
           (database (get-inventory connection))
           (procedure (create-procedure database procedure-name))
           (text (request-string title: "Enter le corps de la procedure")))
      (set-text procedure text)
      (append-procedure database procedure)))
  
  
  (method (remove-procedure)
    (let* ((row (selected-row))
           (element (selected-element))
           (procedure-name (get-title element))
           (database (get-parent element)))
      (remove-procedure database procedure-name)))
  
  
  (method (add-relation)
    )
  
  
  (method (remove-relation)
    (let* ((row (selected-row))
           (element (selected-element))
           (relation-name (get-title element))
           (database (get-parent element)))
      (remove-relation database relation-name)))
                           

  ;;;
  ;;;; Insert
  ;;;


  (method (insert-inventory tree inventory)
    (remove-every-row tree)
    (when inventory
      (let ((tables (get-tables inventory))
             (views (get-views inventory))
             (procedures (get-procedures inventory))
             (relations (get-relations inventory)))
        (insert-tables tree tables)
        (insert-views tree views)
        (insert-relations tree relations)
        (insert-procedures tree procedures))))
  
  
  (method (insert-tables tree tables)
    (add-row tree state: 'dynamic children: (list (new Tree-Node title: "Tables" image: {Image-Resource "DesignTables"})) user-data: (cons 'tables tables)))
  
  
  (method (update-tables tree row tables)
    (for-each (lambda (table)
                (let ((title (get-title table)))
                  (add-row tree father: row state: 'dynamic children: (list (new Tree-Node title: title image: {Image-Resource "DesignTable"})) user-data: table)))
              (sort ci<? tables key: get-title~)))
  
  
  (method (update-table tree row table)
    (insert-primary-key tree row table)
    (insert-columns tree row table)
    (insert-indexes tree row table)
    (insert-triggers tree row table)
    (insert-constraints tree row table))
  
 
 (method (insert-constraints tree row table)
    (when (is? table SQLServer-Inventory-Table)
      (let ((constraints (get-constraints table)))
        (for-each (lambda (constraint)
                    (let ((title (get-title constraint)))
                      (add-row tree father: row state: 'collapsed children: (list (new Tree-Node title: title image: {Image-Resource "DesignConstraint"})) user-data: constraint)))
                  constraints))))
    
  
  (method (insert-primary-key tree row table)
    (let ((primary-key (get-primary-key table)))
      (when primary-key
        (let ((title (get-title primary-key)))
          (add-row tree father: row state: 'collapsed children: (list (new Tree-Node title: title image: {Image-Resource "Red"})) user-data: primary-key)))))
  
  
  (method (insert-columns tree row table)
    (let ((columns (get-columns table)))
      (for-each (lambda (column)
                  (let ((title (get-title column)))
                    (add-row tree father: row state: 'collapsed children: (list (new Tree-Node title: title image: {Image-Resource "DesignColumn"})) user-data: column)))
                columns)))
  
  
  (method (insert-indexes tree row table)
    (let ((indexes (get-indexes table)))
      (for-each (lambda (index)
                  (let ((title (get-title index)))
                    (add-row tree father: row state: 'collapsed children: (list (new Tree-Node title: title image: {Image-Resource "DesignIndex"})) user-data: index)))
                indexes)))
  
  
  (method (insert-triggers tree row table)
    (let ((triggers (get-triggers table)))
      (for-each (lambda (trigger)
                  (let ((title (get-title trigger)))
                    (add-row tree father: row state: 'collapsed children: (list (new Tree-Node title: title image: {Image-Resource "DesignTrigger"})) user-data: trigger)))
                triggers)))
  
  
  (method (insert-views tree views)
    (add-row tree state: 'dynamic children: (list (new Tree-Node title: "Views" image: {Image-Resource "DesignViews"})) user-data: (cons 'views views)))
  
  
  (method (update-views tree row views)
    (for-each (lambda (view)
                (let ((title (get-title view)))
                  (add-row tree father: row children: (list (new Tree-Node title: title image: {Image-Resource "DesignView"})) user-data: view)))
              (sort ci<? views key: get-title~)))
  
  
  (method (insert-relations tree relations)
    (add-row tree state: 'dynamic children: (list (new Tree-Node title: "Relations" image: {Image-Resource "DesignRelations"})) user-data: (cons 'relations relations)))

  
  (method (update-relations tree row relations)
    (for-each (lambda (relation)
                (let ((title (get-title relation)))
                  (add-row tree father: row children: (list (new Tree-Node title: title image: {Image-Resource "DesignRelation"})) user-data: relation)))
              (sort ci<? relations key: get-title~)))
  
  
  (method (insert-procedures tree procedures)
    (add-row tree state: 'dynamic children: (list (new Tree-Node title: "Procedures" image: {Image-Resource "DesignProcedures"})) user-data: (cons 'procedures procedures)))
  
  
  (method (update-procedures tree row procedures)
    (for-each (lambda (procedure)
                (let ((title (get-title procedure)))
                  (add-row tree father: row children: (list (new Tree-Node title: title image: {Image-Resource "DesignProcedure"})) user-data: procedure)))
              (sort ci<? procedures key: get-title~)))


  (method (update-info-row row)
    (let ((tree (get-parent row))
          (info (get-user-data row)))
      (if (pair? info)
          (bind (what . elements) info
            (case what
              ((tables)     (update-tables     tree row elements))
              ((views)      (update-views      tree row elements))
              ((relations)  (update-relations  tree row elements))
              ((procedures) (update-procedures tree row elements))))
        (typecase info
          ((Inventory-Table) (update-table tree row info))))))


  ;;;
  ;;;; Properties Table
  ;;;


  (method (modify-table-description)
    (let ((table (selected-element))
          (value (request-string title: "Enter description")))
      (set-description table value)))
  
  
  (method (remove-table-description)
    (let ((table (selected-element)))
      (set-description table #f)))
  
  
  (method (modify-table-validation-rule)
    (let ((table (selected-element))
          (value (request-string title: "Enter validation rule")))
      (set-validation-rule table value)))
  
  
  (method (modify-table-validation-text)
    (let ((table (selected-element))
          (value (request-string title: "Enter validation text")))
      (set-validation-text table value)))
  
  
  (method (modify-table-text-file-group)
    (let ((table (selected-element))
          (value (request-string title: "Enter text file group")))
      (set-text-file-group table value)))
  
  
  (method (modify-table-file-group)
    (let ((table (selected-element))
          (value (request-string title: "Enter file group")))
      (set-file-group table value)))
  

  (method (modify-table-owner)
    (let ((table (selected-element))
          (value (request-string title: "Enter owner")))
      (set-owner table value)))
  
  
  ;;;
  ;;;; Properties Column
  ;;;
  
  
  (method (modify-datatype)
    (let ((column (selected-element))
          (datatype Access-Datatype)
          (systype #f)
          (size #f))
      (while (null? systype)
        (set! systype (find-systype datatype (request-string title: "Enter field type" initial-value: "Text"))))
      (when (get-sizeable? systype)
        (set! size (parse-integer (request-string title: "Enter field size"))))
      (set-datatype column (new datatype (get-name systype) size))
      @wait(set-nullable? column #t)))
  
  
  (method (modify-nullable?)
    (let ((column (selected-element))
          (value (parse-boolean (request-string title: "Enter nullable?" initial-value: "True"))))
      (set-nullable? column value)))
  
  
  (method (modify-column-description)
    (let ((column (selected-element))
          (description (request-string title: "Enter description")))
      (set-description column description)))
  
  
  (method (remove-column-description)
    (let ((column (selected-element)))
      (set-description column #f)))
  
  
  (method (modify-default-value)
    (let ((column (selected-element))
          (value (request-string title: "Enter default value")))
      (when (or (ci=? value "#f")
                (= value ""))
        (set! value #f))
      (set-default-value column value)))
  
  
  (method (modify-column-validation-rule)
    (let ((column (selected-element))
          (value (request-string title: "Enter validation rule")))
      (set-validation-rule column value)))
  
  
  (method (modify-column-validation-text)
    (let ((column (selected-element))
          (value (request-string title: "Enter validation text")))
      (set-validation-text column value)))
  
  
  (method (modify-ordinal-position)
    (let ((column (selected-element))
          (value (parse-integer (request-string title: "Enter ordinal position"))))
      (set-ordinal-position column value)))
  
  
  (method (remove-display-format)
    (let ((column (selected-element)))
      (set-display-format column #f)))
  
  
  (method (modify-display-format)
    (let ((column (selected-element))
          (value (request-string)))
      (set-display-format column value)))
  
  
  (method (modify-auto-increment?)
    (let ((column (selected-element))
          (value (parse-boolean (request-string title: "Enter auto increment" initial-value: "False"))))
      (set-auto-increment? column value)))
  
  
  ;;;
  ;;;; Properties Index
  ;;;
  
  
  (method (modify-fields/orders)
    )
  
  
  (method (modify-primary?)
    )
  
  
  (method (modify-index-unique?)
    )
   

  ;;;
  ;;;; Properties relation
  ;;;
  
  
  (method (modify-foreign-columns)
    )
  
  
  (method (modify-foreign-table)
    )
  
  
  (method (modify-primary-columns)
    )
  
  
  (method (modify-primary-table)
    )
  
  
  (method (modify-right?)
    )
  
  
  (method (modify-left?)
    )
  
  
  (method (modify-relation-unique?)
    )
  
  
  (method (modify-delete-cascade?)
    )
  
  
  (method (modify-update-cascade?)
    )
  
  
  ;;;
  ;;;; Properties procedure
  ;;;
  
  
  (method (modify-procedure-text)
    )
  
  
  ;;;
  ;;;; Properties view
  ;;;
  
  
  (method (modify-view-text)
    )
  
  
  ;;;
  ;;;; Properties trigger
  ;;;
  
  
  (method (modify-trigger-text)
    )
  
  
  ;;;
  ;;;; Script SQL for SQLServer
  ;;;
  
  
  (method (generate-sql-header-script)
    (tie "SET QUOTED_IDENTIFIER ON~{%}"
         "SET TRANSACTION ISOLATION LEVEL SERIALIZABLE~{%}"
         "SET ARITHABORT ON~{%}"
         "SET NUMERIC_ROUNDABORT OFF~{%}"
         "SET CONCAT_NULL_YIELDS_NULL ON~{%}"
         "SET ANSI_NULLS ON~{%}"
         "SET ANSI_PADDING ON~{%}"
         "SET ANSI_WARNINGS ON~{%}"))
  
  
  (method (generate-sql-create-table table-name column)
    (let* ((user "dbo")
           (partition "PRIMARY")
           @tempo(fields-list (join (create-fields-list (sort < (get-columns object)
                                                              key: (lambda (column)
                                                                     (or (third (get-property column ordinal-position:)) -1)))) ", "))
           (field-name (first column))
           (datatype (get-native (second column)))
           (nullable-string (third column))
           (fields-list (tie "~{&}[{field-name}] {datatype} {nullable-string}~{%}"))
           (def-table (tie "~{&}CREATE TABLE [{user}].[{table-name}]~{%}"
                           "~{&}(~{%}"
                           "{fields-list}"
                           "~{&}) ON [{partition}]~{%}")))
      def-table))

  
  (method (execute-sql-commit-preserve proc (reload-inventory?: reload-inventory? #f))
    (let* ((instructions (proc))
           (script (tie "BEGIN TRANSACTION~{%}"
                        "{instructions}"
                        "COMMIT~{%}")))
      (execute connection script))
    (when reload-inventory?
      (reload-inventory connection)))
  
  
  (method (identity-string)
    )
  
  
  (method (create-fields-list list)
    (map (lambda (field)
           (let ((field-name (get-name field))
                  (datatype (get-native (third (get-datatype field))))
                  (ordinal-position (third (get-property field ordinal-position:)))
                  (nullable-string (if (third (get-property field nullable?:))
                                       "NULL"
                                     "NOT NULL"))
                  (identity-string (if (third (get-property field identity?:))
                                       (let ((id-seed (third (get-property field identity-seed:)))
                                              (id-inc  (third (get-property field identity-increment:)))
                                              (id-repl (if (third (get-property field identity-replication:))
                                                           ""
                                                         "NOT FOR REPLICATION")))
                                         (tie "IDENTITY ({id-seed}, {id-inc}) {id-repl}"))
                                     "")))
             (when (>= ordinal-position 0)
               (tie "~{%}~{&}[{field-name}] {datatype} {nullable-string} {identity-string}"))))
         list))
      
  
  ;;;
  ;;;; Describe
  ;;;


  (method (describe-item item)
    (when item
      (typecase item
        ((Inventory-Table) (output-tables (list (describe-table item)(describe-table-properties item))))
        ((Inventory-Constraint) (output-table (describe-constraint item)))
        ((Inventory-Primary-Key) (output-table (describe-primary-key item)))
        ((Inventory-Column) (output-table (describe-column item)))
        ((Inventory-Index) (output-table (describe-index item)))
        ((Inventory-Relation) (output-table (describe-relation item)))
        (else (clear-output)))))

  
  (method (describe-table-properties table)
    (let* ((c1 (new Data-Column name: "Property" datatype: {Datatype "text" 5}))
           (c2 (new Data-Column name: "Value" datatype: {Datatype "text" 5}))
           (output (new Data-Table name: "Properties" columns: (list c1 c2)))
           (title (get-title table))
           (text-file-group (get-text-file-group table))
           (file-group (get-file-group table))
           (owner (get-owner table))
           (description (get-description table))
           (validation-rule (get-validation-rule table))
           (validation-text (get-validation-text table)))
      (when (is? table SQLServer-Inventory-Table) (append-row output (new Data-Row output (list "Name" title))))
      (when (is? table SQLServer-Inventory-Table) (append-row output (new Data-Row output (list "TextFileGroup" text-file-group))))
      (when (is? table SQLServer-Inventory-Table) (append-row output (new Data-Row output (list "FileGroup" file-group))))
      (when (is? table SQLServer-Inventory-Table) (append-row output (new Data-Row output (list "Owner" owner))))
      (append-row output (new Data-Row output (list "Description" description)))
      (when (is? table Access-Inventory-Table) (append-row output (new Data-Row output (list "ValidationRule" validation-rule))))
      (when (is? table Access-Inventory-Table) (append-row output (new Data-Row output (list "ValidationText" validation-text))))
      output))
  
  
  (method (describe-table table)
    (let* ((c1 (new Data-Column name: "Name" datatype: {Datatype "text" 3}))
           (c2 (new Data-Column name: "Type" datatype: {Datatype "text" 3}))
           (c3 (new Data-Column name: "Length" datatype: {Datatype "text" 1}))
           (c4 (new Data-Column name: "Nullable" datatype: {Datatype "text" 1}))
           (c5 (new Data-Column name: "Fixed" datatype: {Datatype "text" 1}))
           (c6 (when (is? table SQLServer-Inventory-Table) (new Data-Column name: "Identity" datatype: {Datatype "text" 1})))
           (c7 (when (is? table SQLServer-Inventory-Table) (new Data-Column name: "IdentityReplication" datatype: {Datatype "text" 1})))
           (c8 (when (is? table SQLServer-Inventory-Table) (new Data-Column name: "IdentitySeed" datatype: {Datatype "text" 1})))
           (c9 (when (is? table SQLServer-Inventory-Table) (new Data-Column name: "IdentityIncrement" datatype: {Datatype "text" 1})))
           (c10(when (is? table SQLServer-Inventory-Table) (new Data-Column name: "RowGuidCol" datatype: {Datatype "text" 1})))
           (c11 (when (is? table SQLServer-Inventory-Table) (new Data-Column name: "Computed" datatype: {Datatype "text" 1})))
           (c12 (when (is? table SQLServer-Inventory-Table) (new Data-Column name: "ComputedText" datatype: {Datatype "text" 1})))
           (c13 (when (is? table SQLServer-Inventory-Table) (new Data-Column name: "Collation" datatype: {Datatype "text" 1})))
           (c14 (new Data-Column name: "Description" datatype: {Datatype "text" 1}))
           (c15 (new Data-Column name: "DefaultValue" datatype: {Datatype "text" 1}))
           (c16 (when (is? table SQLServer-Inventory-Table) (new Data-Column name: "DefaultValueName" datatype: {Datatype "text" 1})))
           (c17 (when (is? table Access-Inventory-Table) (new Data-Column name: "ValidationRule" datatype: {Datatype "text" 1})))
           (c18 (when (is? table Access-Inventory-Table) (new Data-Column name: "ValidationText" datatype: {Datatype "text" 1})))
           (output (new Data-Table name: "Fields" columns: (remove-false (list c1 c2 c3 c4 c5 c6 c7 c8 c9 c10 c11 c12 c13 c14 c15 c16 c17 c18)))))
      (with ((columns (get-columns table)))
        (for-each (lambda (column)
                    (let ((title (get-title column))
                          (datatype (present (get-datatype column)))
                          (length (get-size column))
                          (nullable? (get-nullable? column))
                          (fixed? (get-fixed? column))
                          (identity? (when (is? table SQLServer-Inventory-Table) (or (get-identity? column) "#f")))
                          (identity-replication? (when (is? table SQLServer-Inventory-Table) (or (get-identity-replication? column) "#f")))
                          (identity-seed (when (is? table SQLServer-Inventory-Table) (get-identity-seed column)))
                          (identity-increment (when (is? table SQLServer-Inventory-Table) (get-identity-increment column)))
                          (row-guid-col? (when (is? table SQLServer-Inventory-Table) (or (get-row-guid-col? column) "#f")))
                          (computed? (when (is? table SQLServer-Inventory-Table) (or (get-computed? column) "#f")))
                          (computed-text (when (is? table SQLServer-Inventory-Table) (or (get-computed-text column) "")))
                          (collation (when (is? table SQLServer-Inventory-Table) (or (get-collation column) "")))
                          (description (or (get-description column) ""))
                          (default-value (or (get-default-value column) ""))
                          (default-value-name (when (is? table SQLServer-Inventory-Table) (or (get-default-value-name column) "")))
                          (validation-rule (when (is? table Access-Inventory-Table) (or (get-validation-rule column) "")))
                          (validation-text (when (is? table Access-Inventory-Table) (or (get-validation-text column) ""))))
                      (append-row output (new Data-Row output (remove-false (list title datatype length nullable? fixed? identity? identity-replication? identity-seed identity-increment row-guid-col? computed? computed-text collation description default-value default-value-name validation-rule validation-text))))))
                  columns))
      output))
  

  (method (describe-constraint constraint)
    (let* ((c1 (new Data-Column name: "Property" datatype: {Datatype "text" 5}))
           (c2 (new Data-Column name: "Value" datatype: {Datatype "text" 5}))
           (output (new Data-Table name: "Properties" columns: (list c1 c2)))
           (title (get-title constraint))
           (text (get-text constraint))
           (checked? (get-checked? constraint))
           (exclude-replication? (get-exclude-replication? constraint)))
      (append-row output (new Data-Row output (list "Name" title)))
      (append-row output (new Data-Row output (list "Text" text)))
      (append-row output (new Data-Row output (list "Checked?" checked?)))
      (append-row output (new Data-Row output (list "ExcludeReplication?" exclude-replication?)))
      output))


  (method (describe-primary-key primary-key)
    (let* ((c1 (new Data-Column name: "Property" datatype: {Datatype "text" 5}))
           (c2 (new Data-Column name: "Value" datatype: {Datatype "text" 5}))
           (output (new Data-Table name: "Properties" columns: (list c1 c2)))
           (title (get-title primary-key))
           (fields/orders (get-fields/orders primary-key))
           (fields/orders-list (map (lambda (field/order)
                                      (bind (field order) field/order
                                        (format "{a} {a}" field (case order ((ascending) "asc") ((descending) "desc")))))
                                    fields/orders))
           (clustered? (get-clustered? primary-key))
           (fill-factor (get-fill-factor primary-key)))
      (append-row output (new Data-Row output (list "Name" title)))
      (append-row output (new Data-Row output (list "Fields" (format "{l detail: :human separator: \", \"}" fields/orders-list))))
      (append-row output (new Data-Row output (list "Clustered?" clustered?)))
      (append-row output (new Data-Row output (list "FillFactor" fill-factor)))
      output))

  
  (method (describe-column column)
    (let* ((c1 (new Data-Column name: "Property" datatype: {Datatype "text" 5}))
           (c2 (new Data-Column name: "Value" datatype: {Datatype "text" 5}))
           (output (new Data-Table name: "Properties" columns: (list c1 c2)))
           (title (get-title column))
           (datatype (present (get-datatype column)))
           (length (get-size column))
           (nullable? (get-nullable? column))
           (fixed? (get-fixed? column))
           (identity? (get-identity? column))
           (identity-replication? (get-identity-replication? column))
           (identity-seed (get-identity-seed column))
           (identity-increment (get-identity-increment column))
           (row-guid-col? (get-row-guid-col? column))
           (computed? (get-computed? column))
           (computed-text (get-computed-text column))
           (collation (get-collation column))
           (description (get-description column))
           (default-value (get-default-value column))
           (default-value-name (get-default-value-name column))
           (validation-rule (get-validation-rule column))
           (validation-text (get-validation-text column))
           (ordinal-position (get-ordinal-position column))
           (display-format (get-display-format column))
           (auto-increment? (get-auto-increment? column)))
      (append-row output (new Data-Row output (list "Name" title)))
      (append-row output (new Data-Row output (list "Type" datatype)))
      (append-row output (new Data-Row output (list "Length" length)))
      (append-row output (new Data-Row output (list "Nullable?" nullable?)))
      (append-row output (new Data-Row output (list "Fixed?" fixed?)))
      (when (is? column SQLServer-Inventory-Column) (append-row output (new Data-Row output (list "identity?" identity?))))
      (when (is? column SQLServer-Inventory-Column) (append-row output (new Data-Row output (list "identity-replication?" identity-replication?))))
      (when (is? column SQLServer-Inventory-Column) (append-row output (new Data-Row output (list "identitySeed" identity-seed))))
      (when (is? column SQLServer-Inventory-Column) (append-row output (new Data-Row output (list "identityIncrement" identity-increment))))
      (when (is? column SQLServer-Inventory-Column) (append-row output (new Data-Row output (list "RowGuidCol?" row-guid-col?))))
      (when (is? column SQLServer-Inventory-Column) (append-row output (new Data-Row output (list "Computed?" computed?))))
      (when (is? column SQLServer-Inventory-Column) (append-row output (new Data-Row output (list "ComputedText" computed-text))))
      (when (is? column SQLServer-Inventory-Column) (append-row output (new Data-Row output (list "Collation" collation))))
      (append-row output (new Data-Row output (list "Description" description)))
      (append-row output (new Data-Row output (list "DefaultValue" default-value)))
      (when (is? column SQLServer-Inventory-Column) (append-row output (new Data-Row output (list "DefaultValueName" default-value-name))))
      (when (is? column Access-Inventory-Column) (append-row output (new Data-Row output (list "ValidationText" validation-text))))
      (append-row output (new Data-Row output (list "OrdinalPosition" ordinal-position)))
      (when (is? column Access-Inventory-Column) (append-row output (new Data-Row output (list "DisplayFormat" display-format))))
      (when (is? column Access-Inventory-Column) (append-row output (new Data-Row output (list "AutoIncrement?" auto-increment?))))
      output))


  (method (describe-index index)
    (let* ((c1 (new Data-Column name: "Property" datatype: {Datatype "text" 5}))
           (c2 (new Data-Column name: "Value" datatype: {Datatype "text" 5}))
           (output (new Data-Table name: "Properties" columns: (list c1 c2)))
           (title (get-title index))
           (ignore-duplicates? (get-ignore-duplicates? index))
           (unique? (get-unique? index))
           (clustered? (get-clustered? index))
           (fill-factor (get-fill-factor index))
           (pad-index? (get-pad-index? index))
           (recompute-statistics? (get-recompute-statistics? index))
           (required? (get-required? index))
           (ignore-nulls? (get-ignore-nulls? index))
           (fields (get-fields index))
           (fields-list (map (lambda (field)
                               (let ((order (get-order field)))
                                 (format "{a} {a}" (get-title field) (case order ((ascending) "asc") ((descending) "desc")))))
                             fields)))
      (append-row output (new Data-Row output (list "Name" title)))
      (append-row output (new Data-Row output (list "Fields" (format "{l detail: :human separator: \", \"}" fields-list))))
      (when (is? index SQLServer-Inventory-Index) (append-row output (new Data-Row output (list "IgnoreDuplicates" ignore-duplicates?))))
      (append-row output (new Data-Row output (list "Unique" unique?)))
      (when (is? index SQLServer-Inventory-Index) (append-row output (new Data-Row output (list "Clustered" clustered?))))
      (when (is? index SQLServer-Inventory-Index) (append-row output (new Data-Row output (list "FillFactor" fill-factor))))
      (when (is? index SQLServer-Inventory-Index) (append-row output (new Data-Row output (list "PadIndex" pad-index?))))
      (when (is? index SQLServer-Inventory-Index) (append-row output (new Data-Row output (list "RecomputeStatistics" recompute-statistics?))))
      (when (is? index Access-Inventory-Index) (append-row output (new Data-Row output (list "Required" required?))))
      (when (is? index Access-Inventory-Index) (append-row output (new Data-Row output (list "IgnoreNulls" ignore-nulls?))))
      output))


  (method (describe-relation relation)
    (let* ((c1 (new Data-Column name: "Property" datatype: {Datatype "text" 5}))
           (c2 (new Data-Column name: "Value" datatype: {Datatype "text" 5}))
           (output (new Data-Table name: "Properties" columns: (list c1 c2)))
           (title (get-title relation))
           (primary-table (get-primary-table relation))
           (primary-field-names (get-primary-field-names relation))
           (foreign-table (get-foreign-table relation))
           (foreign-field-names (get-foreign-field-names relation))
           (attributes-list (describe-relation-attributes relation))
           (checked? (get-checked? relation))
           (exclude-replication? (get-exclude-replication? relation))
           (update-cascade? (get-update-cascade? relation))
           (delete-cascade? (get-delete-cascade? relation)))
      (append-row output (new Data-Row output (list "Name" title)))
      (append-row output (new Data-Row output (list "PrimaryTable" primary-table)))
      (append-row output (new Data-Row output (list "PrimaryFields" (format "{l detail: :human separator: \", \"}" primary-field-names))))
      (append-row output (new Data-Row output (list "ForeignTable" foreign-table)))
      (append-row output (new Data-Row output (list "ForeignFields" (format "{l detail: :human separator: \", \"}" foreign-field-names))))
      (when (is? relation Access-Inventory-Relation) (append-row output (new Data-Row output (list "Attributes" (format "{l detail: :human separator: \", \"}" attributes-list)))))
      (when (is? relation SQLServer-Inventory-Relation) (append-row output (new Data-Row output (list "Checked" checked?))))
      (when (is? relation SQLServer-Inventory-Relation) (append-row output (new Data-Row output (list "ExcludeReplication" exclude-replication?))))
      (when (is? relation SQLServer-Inventory-Relation) (append-row output (new Data-Row output (list "UpdateCascade" update-cascade?))))
      (when (is? relation SQLServer-Inventory-Relation) (append-row output (new Data-Row output (list "DeleteCascade" delete-cascade?))))
      output))
  
  
  (method (describe-relation-attributes relation)
    (map cdr (collect-if car (list (cons (get-unique? relation) "unique")
                                   (cons (get-dont-enforce? relation) "dont-enforce")
                                   (cons (get-inherited? relation) "inherited")
                                   (cons (get-update-cascade? relation) "update-cascade")
                                   (cons (get-delete-cascade? relation) "delete-cascade")
                                   (cons (get-left? relation) "left")
                                   (cons (get-right? relation) "right")))))


  ;;;
  ;;;; Output
  ;;;
  
  
  (method (output-table table)
    (let ((text (get-sql-console-text)))
      (output-tables text (list table))))
  
  
  (method (output-tables tables)
    (let ((text (get-sql-console-text)))
      (output-tables text tables)))
 
 
  (method (clear-output)
    (let ((text (get-sql-console-text)))
      (clear-output text)))


  ;;;
  ;;;; External
  ;;;
  
  
  (method public (describe-connection-table connection name)
    (let ((inventory (get-inventory connection read-only?: #t)))
      (describe-table (get-table inventory name))))
  
  
  ;;;
  ;;;; Selection
  ;;;
  
  
  (method (selected-row)
    (let* ((tree (locate 'inventory))
           (selection (get-single-selection tree)))
      (when selection
        (get-row tree selection))))
  
  
  (method (selected-element)
    (let ((tree (locate 'inventory))
          (row (selected-row)))
      (when row
        (get-user-data row))))))


@convert (


;;;
;;;; Tables-Menu
;;;


(class Tables-Menu extends Context-Menu
  
  
  (form
    (<install>
      (<Label-Item> name: add-table           title: "&Add Table" icon: {Image-Resource "Add"} action-handler: {Event-Handler :form on-add-table})
      (<Label-Item> name: add-table-by-script title: "&Add Table by Script" icon: {Image-Resource "Add"} action-handler: {Event-Handler :form on-add-table-by-script})
      (<Label-Item> name: add-linked-table    title: "&Add Linked Table" icon: {Image-Resource "Add"} action-handler: {Event-Handler :form on-add-linked-table})))
  
  
  (method (on-add-table evt)
    (add-table))
  
  
  (method (on-add-table-by-script evt)
    (add-table-by-script))
  
  
  (method (on-add-linked-table evt)
    (add-linked-table)))


;;;
;;;; Table-Menu
;;;


(class Table-Menu extends Context-Menu
  
  
  (form
    (<install>
      (<Label-Item>     name: remove-table           title: "&Remove Table" icon: {Image-Resource "Remove"} action-handler: {Event-Handler :form on-remove-table})
      (<Separator-Item>)
      (<Label-Item>     name: add-column             title: "&Add Column" icon: {Image-Resource "Add"} action-handler: {Event-Handler :form on-add-column})
      (<Label-Item>     name: add-index              title: "&Add Index" icon: {Image-Resource "Add"} action-handler: {Event-Handler :form on-add-index})
      (<Label-Item>     name: add-trigger            title: "&Add Trigger" icon: {Image-Resource "Add"} action-handler: {Event-Handler :form on-add-trigger})
      (<Separator-Item>)
      (<Label-Item>     name: delete-description     title: "&Remove Description" icon: {Image-Resource "Remove"} action-handler: {Event-Handler :form on-remove-description})
      (<Separator-Item>)
      (<Label-Item>     name: modify-description     title: "&Modify Description" icon: {Image-Resource "Action"} action-handler: {Event-Handler :form on-modify-description})
      (<Label-Item>     name: modify-validation-rule title: "&Modify Validation-Rule" icon: {Image-Resource "Action"} action-handler: {Event-Handler :form on-modify-validation-rule})
      (<Label-Item>     name: modify-validation-text title: "&Modify Validation-Text" icon: {Image-Resource "Action"} action-handler: {Event-Handler :form on-modify-validation-text})
      (<Label-Item>     name: modify-owner           title: "&Modify Owner" icon: {Image-Resource "Action"} action-handler: {Event-Handler :form on-modify-owner})))
  
  
  (method (on-remove-table evt)
    (remove-table))
  
  
  (method (on-add-column evt)
    (add-column))
  
  
  (method (on-add-index evt)
    (add-index))
  
  
  (method (on-add-trigger evt)
    (add-trigger))
  
  
  (method (on-remove-description evt)
    (remove-table-description))
  
  
  (method (on-modify-description evt)
    (modify-table-description))
  
  
  (method (on-modify-validation-rule evt)
    (modify-table-validation-rule))
  
  
  (method (on-modify-validation-text evt)
    (modify-table-validation-text))
  
  
  (method (on-modify-owner evt)
    (modify-table-owner)))


;;;
;;;; Column-Menu
;;;


(class Column-Menu extends Context-Menu
  
  
  (form
    (<install>
      (<Label-Item>     name: remove-column           title: "&Remove Column" icon: {Image-Resource "Remove"} action-handler: {Event-Handler :form on-remove-column})
      (<Separator-Item>)
      (<Label-Item>     name: insert-column           title: "&Insert Column" icon: {Image-Resource "Add"} action-handler: {Event-Handler :form on-insert-column})
      (<Separator-Item>)
      (<Label-Item>     name: remove-description      title: "&Remove Description" icon: {Image-Resource "Remove"} action-handler: {Event-Handler :form on-remove-description})
      (<Label-Item>     name: remove-display-format   title: "&Remove Display-Format" icon: {Image-Resource "Remove"} action-handler: {Event-Handler :form on-remove-display-format})
      (<Separator-Item>)
      (<Label-Item>     name: modify-datatype         title: "&Modify Datatype" icon: {Image-Resource "Action"} action-handler: {Event-Handler :form on-modify-datatype})
      (<Label-Item>     name: modify-nullable?        title: "&Modify Nullable?" icon: {Image-Resource "Action"} action-handler: {Event-Handler :form on-modify-nullable?})
      (<Label-Item>     name: modify-description      title: "&Modify Description" icon: {Image-Resource "Action"} action-handler: {Event-Handler :form on-modify-description})
      (<Label-Item>     name: modify-default-value    title: "&Modify Default-Value" icon: {Image-Resource "Action"} action-handler: {Event-Handler :form on-modify-default-value})
      (<Label-Item>     name: modify-validation-rule  title: "&Modify Validation-Rule" icon: {Image-Resource "Action"} action-handler: {Event-Handler :form on-modify-validation-rule})
      (<Label-Item>     name: modify-validation-text  title: "&Modify Validation-Text" icon: {Image-Resource "Action"} action-handler: {Event-Handler :form on-modify-validation-text})
      (<Label-Item>     name: modify-ordinal-position title: "&Modify Ordinal-Position" icon: {Image-Resource "Action"} action-handler: {Event-Handler :form on-modify-ordinal-position})
      (<Label-Item>     name: modify-display-format   title: "&Modify Format" icon: {Image-Resource "Action"} action-handler: {Event-Handler :form on-modify-display-format})
      (<Label-Item>     name: modify-auto-increment?  title: "&Modify Auto-Increment?" icon: {Image-Resource "Action"} action-handler: {Event-Handler :form on-modify-auto-increment?})))
  
  
  (method (on-remove-column evt)
    (remove-column))
  
  
  (method (on-insert-column evt)
    (insert-column))
  
  
  (method (on-remove-description evt)
    (remove-column-description))
  
  
  (method (on-remove-display-format evt)
    (remove-display-format))
  
  
  (method (on-modify-datatype evt)
    (modify-datatype))
  
  
  (method (on-modify-nullable? evt)
    (modify-nullable?))
  
  
  (method (on-modify-description evt)
    (modify-column-description))
  
  
  (method (on-modify-default-value evt)
    (modify-default-value))
  
  
  (method (on-modify-validation-rule evt)
    (modify-column-validation-rule))
  
  
  (method (on-modify-validation-text evt)
    (modify-column-validation-text))
  
  
  (method (on-modify-ordinal-position evt)
    (modify-ordinal-position))
  
  
  (method (on-modify-display-format evt)
    (modify-display-format))
  
  
  (method (on-modify-auto-increment? evt)
    (modify-auto-increment?)))


;;;
;;;; Index-Menu
;;;


(class Index-Menu extends Context-Menu
  
  
  (form
    (<install>
      (<Label-Item>     name: remove-index         title: "&Remove Index" icon: {Image-Resource "Remove"} action-handler: {Event-Handler :form on-remove-index})
      (<Separator-Item>)
      (<Label-Item>     name: modify-fields/orders title: "&Modify Fields/Orders" icon: {Image-Resource "Action"} action-handler: {Event-Handler :form on-modify-fields/orders})
      (<Label-Item>     name: modify-primary?      title: "&Modify Primary?" icon: {Image-Resource "Action"} action-handler: {Event-Handler :form on-modify-primary?})
      (<Label-Item>     name: modify-unique?       title: "&Modify Unique?" icon: {Image-Resource "Action"} action-handler: {Event-Handler :form on-modify-unique?})))
  
  
  (method (on-remove-index evt)
    (remove-index))
  
  
  (method (on-modify-fields/orders)
    (modify-fields/orders))
  
  
  (method (on-modify-primary?)
    (modify-primary?))
  
  
  (method (on-modify-unique?)
    (modify-index-unique?)))


;;;
;;;; Trigger-Menu
;;;


(class Trigger-Menu extends Context-Menu
  
  
  (form
    (<install>
      (<Label-Item>     name: remove-trigger title: "&Remove Trigger" icon: {Image-Resource "Remove"} action-handler: {Event-Handler :form on-remove-trigger})
      (<Separator-Item>)
      (<Label-Item>     name: modify-text    title: "&Modify Text" icon: {Image-Resource "Action"} action-handler: {Event-Handler :form on-modify-text})))
  
  
  (method (on-remove-trigger evt)
    (remove-trigger))
  
  
  (method (on-modify-text)
    (modify-trigger-text)))


;;;
;;;; Views-Menu
;;;


(class Views-Menu extends Context-Menu
  
  
  (form
    (<install>
      (<Label-Item> name: add-view title: "&Add View" icon: {Image-Resource "Add"} action-handler: {Event-Handler :form on-add-view})))
  
  
  (method (on-add-view evt)
    (add-view)))


;;;
;;;; View-Menu
;;;


(class View-Menu extends Context-Menu
  
  
  (form
    (<install>
      (<Label-Item>     name: remove-view title: "&Remove View" icon: {Image-Resource "Remove"} action-handler: {Event-Handler :form on-remove-view})
      (<Separator-Item>)
      (<Label-Item>     name: modify-text title: "&Modify Text" icon: {Image-Resource "Action"} action-handler: {Event-Handler :form on-modify-text})))
  
  
  (method (on-remove-view evt)
    (remove-view))
  
  
  (method (on-modify-text)
    (modify-view-text)))


;;;
;;;; Procedures-Menu
;;;


(class Procedures-Menu extends Context-Menu
  
  
  (form
    (<install>
      (<Label-Item> name: add-procedure title: "&Add Procedure" icon: {Image-Resource "Add"} action-handler: {Event-Handler :form on-add-procedure})))
  
  
  (method (on-add-procedure evt)
    (add-procedure)))


;;;
;;;; Procedure-Menu
;;;


(class Procedure-Menu extends Context-Menu
  
  
  (form
    (<install>
      (<Label-Item>     name: remove-procedure title: "&Remove Procedure" icon: {Image-Resource "Remove"} action-handler: {Event-Handler :form on-remove-procedure})
      (<Separator-Item>)
      (<Label-Item>     name: modify-text      title: "&Modify Text" icon: {Image-Resource "Action"} action-handler: {Event-Handler :form on-modify-text})))
  
  
  (method (on-remove-procedure evt)
    (remove-procedure))
  
  
  (method (on-modify-text)
    (modify-procedure-text)))


;;;
;;;; Relations-Menu
;;;


(class Relations-Menu extends Context-Menu
  
  
  (form
    (<install>
      (<Label-Item> name: add-relation title: "&Add Relation" icon: {Image-Resource "Add"} action-handler: {Event-Handler :form on-add-relation})))
  
  
  (method (on-add-relation evt)
    (add-relation)))


;;;
;;;; Relation-Menu
;;;


(class Relation-Menu extends Context-Menu
  
  
  (form
    (<install>
      (<Label-Item>     name: remove-relation        title: "&Remove Relation" icon: {Image-Resource "Remove"} action-handler: {Event-Handler :form on-remove-relation})
      (<Separator-Item>)
      (<Label-Item>     name: modify-foreign-columns title: "&Modify Foreign-Columns" icon: {Image-Resource "Action"} action-handler: {Event-Handler :form on-modify-foreign-columns})
      (<Label-Item>     name: modify-foreign-table   title: "&Modify Foreign-Table" icon: {Image-Resource "Action"} action-handler: {Event-Handler :form on-modify-foreign-table})
      (<Label-Item>     name: modify-primary-columns title: "&Modify Primary-Columns" icon: {Image-Resource "Action"} action-handler: {Event-Handler :form on-modify-primary-columns})
      (<Label-Item>     name: modify-primary-table   title: "&Modify Primary-Table" icon: {Image-Resource "Action"} action-handler: {Event-Handler :form on-modify-primary-table})
      (<Label-Item>     name: modify-right?          title: "&Modify Right?" icon: {Image-Resource "Action"} action-handler: {Event-Handler :form on-modify-right?})
      (<Label-Item>     name: modify-left?           title: "&Modify Left?" icon: {Image-Resource "Action"} action-handler: {Event-Handler :form on-modify-left?})
      (<Label-Item>     name: modify-unique?         title: "&Modify Unique?" icon: {Image-Resource "Action"} action-handler: {Event-Handler :form on-modify-unique?})
      (<Label-Item>     name: modify-delete-cascade? title: "&Modify Delete-Cascade?" icon: {Image-Resource "Action"} action-handler: {Event-Handler :form on-modify-delete-cascade?})
      (<Label-Item>     name: modify-update-cascade? title: "&Modify Update-Cascade?" icon: {Image-Resource "Action"} action-handler: {Event-Handler :form on-modify-update-cascade?})))
  
  
  (method (on-remove-relation evt)
    (remove-relation))
  
  
  (method (on-modify-foreign-columns)
    (modify-foreign-columns))
  
  
  (method (on-modify-foreign-table)
    (modify-foreign-table))
  
  
  (method (on-modify-primary-columns)
    (modify-primary-columns))
  
  
  (method (on-modify-primary-table)
    (modify-primary-table))
  
  
  (method (on-modify-right?)
    (modify-right?))
  
  
  (method (on-modify-left?)
    (modify-left?))
  
  
  (method (on-modify-unique?)
    (modify-relation-unique?))
  
  
  (method (on-modify-delete-cascade?)
    (modify-delete-cascade?))
  
  
  (method (on-modify-update-cascade?)
    (modify-update-cascade?)))


;;;
;;;; Inventory-Tree
;;;


(class Inventory-Tree extends Tree-View
  
  
  (method (update-row row)
    (update-info-row row)))))
