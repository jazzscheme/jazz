;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; SQL-Text Preferences
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.editor.sql.preference.SQL-Text-Preferences jazz


(import (jazz.designer)
        (jazz.editor.sql)
        (jazz.graphic)
        (jazz.jml)
        (jazz.ui))


(class SQL-Text-Preferences extends Code-Text-Preferences


  (property title-style        initialize {}  accessors generate)
  (property line-comment-style initialize {}  accessors generate)
  (property definition-style   initialize {}  accessors generate)
  (property keyword-style      initialize {}  accessors generate)
  (property keywords           initialize '() accessors generate)
  (property completions        initialize '() accessors generate)
  
  
  (form
    (<install>
      title: "SQL Text"
      title-style:        {Text-Style-Preference color: Dark-Red}
      line-comment-style: {Text-Style-Preference color: Purple}
      definition-style:   {Text-Style-Preference color: Dark-Red}
      keyword-style:      {Text-Style-Preference color: Dark-Blue}
      completions: (("co" . "count(*)")
                    ("de" . "delete")
                    ("di" . "distinct")
                    ("ex" . "exec")
                    ("fr" . "from")
                    ("in" . "in")
                    ("ins" . "insert")
                    ("or" . "order")
                    ("se" . "select")
                    ("wh" . "where")
                    ("CO" . "COUNT(*)")
                    ("DE" . "DESC")
                    ("DEL" . "DELETE")
                    ("FR" . "FROM")
                    ("IN" . "IN")
                    ("INS" . "INSERT")
                    ("OR" . "ORDER")
                    ("SE" . "SELECT")
                    ("WH" . "WHERE"))))
  
  
  ;;;
  ;;;; Descriptor
  ;;;
  
  
  (method meta override (get-class-descriptor)
    (new SQL-Text-Preferences-Descriptor)))


;;;
;;;; Design
;;;


(submodule design


(import (jazz.designer))


(class SQL-Text-Preferences-Descriptor extends Document-Preferences-Descriptor
  
  
  (method override (component-get-categorized-properties component)
    '(keywords completions
      title-style line-comment-style definition-style keyword-style))
  
  
  (method override (class-property-presentation class property)
    (case (field-name property)
      ((title-style)   "Title Style")
      ((line-comment-style) "Line Comment Style")
      ((definition-style) "Definition Style")
      ((keyword-style) "Keyword Style")
      ((keywords) "Keywords")
      ((completions) "Completions")
      (else (nextmethod class property))))
    
  
  (method override (class-get-domain class property)
    (case (field-name property)
      @wait
      ((title-style line-comment-style definition-style keyword-style) (new Style-Row))
      ((completions) (new Completion-List-Domain))
      (else (nextmethod class property)))))))
