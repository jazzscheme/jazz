;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; SQL Connections Manager
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.editor.sql.sql.SQL-Connections-Manager jazz


(import (jazz.designer)
        (jazz.designer.menu)
        (jazz.editor.sql)
        (jazz.io)
        (jazz.jml)
        (jazz.library)
        (jazz.schema)
        (jazz.system)
        (jazz.system.process)
        (jazz.ui))


(class SQL-Connections-Manager extends Component-Editor implements Exit-Listener


  (form
    (<install>                                    size: {Dimension 650 400} layout-type: border
      (<Layout-View>            name: tools
        (<Push-Tool>            name: open        size: {Dimension 22 22} location: tail tooltip?: #t tooltip-text: "Open" resource: {Image-Resource "Edit"} portfolio: :images action-handler: {Event-Handler :guest on-open})
        (<Push-Tool>            name: close-all   size: {Dimension 22 22} location: tail tooltip?: #t tooltip-text: "Close All" resource: {Image-Resource "Empty"} portfolio: :images action-handler: {Event-Handler :guest on-close-all-connections}))
      (<SQL-Connections-Editor> name: descendants location: center
        (<!>                    name: scroller    style: tool)
        (<!>                    name: tree        show-header?: #f highlight-edited?: #f
          (<!>                  name: descendant  title: "Connection" width: 291)))))
               
  
  (method meta override (external-name . rest)
    'sql-connections)

  
  ;;;
  ;;;; Host
  ;;;
  
  
  (method meta override (host-icon)
    {Image-Resource "Databases"})
  
  
  (method meta override (host-title)
    "Connections")
  
  
  ;;;
  ;;;; Docked
  ;;;
  
  
  (method override (get-tools-view)
    (locate 'tools))
  
  
  (method override (focus-default)
    (let ((tree (get-tree)))
      (acquire-focus~ tree)))
  
  
  ;;;
  ;;;; Access
  ;;;
  
  
  (method public (get-tree)
    (locate '(descendants tree)))
  
  
  ;;;
  ;;;; Controller
  ;;;


  (method override (new-document-controller)
    (new SQL-Connections-Controller self))
  
  
  ;;;
  ;;;; Inventory
  ;;;
  
  
  (method (browse-inventory (focus?: focus? #t))
    (define (selected-data-source)
      (let* ((tree (get-tree))
             (selection (get-single-selection~ tree))
             (row (get-row~ tree selection))
             (data-source (get-user-data~ row)))
        data-source))
    
    #f
    @w
    (let* ((data-source (selected-data-source))
           (connection (get-connection (get-name~ data-source) data-source: data-source))
           (browser (select-docked Inventory-Browser workspace: #f focus?: focus?)))
      (set-connection~ browser connection)))

  
  ;;;
  ;;;; Component
  ;;;
  
  
  (method override (install rest)
    (nextmethod rest)
    (set-shown?~ (locate-component '(descendants header)) #f)
    (set-editor~ (locate 'descendants) self)
    (set-client (read-connections))
    (add-exit-listener~ (get-application) self)
    (let ((default (get-default-source~ client)))
      (when default
        (continuation-capture
          (lambda (break)
            (for-each-source
              (lambda (source)
                (when (equal? (get-name~ source) default)
                  (set-active-data-source source)
                  (continuation-return break)))))))))
  
  
  (method (for-each-source proc)
    (for-each-descendant~ client
      (lambda (component level)
        (when (is? component Data-Source)
          (proc component)))))

  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method (resize-center dh dv)
    (size-figure~ (locate 'descendants) dh dv))

  
  (method package (on-open evt)
    (open-selection))
  
  
  (method package (on-close-all-connections evt)
    (close-connections)
    @convert
    (let ((browser (select-docked Inventory-Browser workspace: #f)))
        (set-connection~ browser #f)))
  
  
  (method override (prepare-exit)
    (when (and (get-modified?) (file? (get-origin~ (get-form~ designer))))
      (save))
    (close-connections))
  
  
  ;;;
  ;;;; Open
  ;;;
  
  
  (method public (open-selection)
    (let* ((tree (get-tree))
           (component (selected-component~ tree)))
      (if (not component)
          (bell)
        (when (is? component Data-Source)
          (set-active-data-source component)
          (browse-inventory focus?: #f)))))
  
  
  ;;;
  ;;;; Menu
  ;;;
  
  
  (method public (new-connections-menu)
    (let* ((tree (get-tree))
           (menu (new Connections-Menu client: tree))
           (selection (get-single-selection~ tree)))
      (with-update-locked~ menu
        (lambda ()
          (update-component-menu menu (selected-components~ tree) (categorized-addable-classes~ tree (selected-component~ tree)) add-component-class~)
          @convert
          (if selection
              (let* ((row (get-row~ tree selection))
                     (data (get-user-data~ row)))
                (when (is? data Group)
                  (set-visible?~ (locate~ menu 'browse-inventory) #f)
                  (set-visible?~ (locate~ menu 'browse-separator) #f)))
            (set-visible?~ (locate~ menu 'browse-inventory) #f)
            (set-visible?~ (locate~ menu 'browse-separator) #f))))
      menu)))


;;;
;;;; Controller
;;;


(class SQL-Connections-Controller extends Component-Editor-Controller
  
  
  (method override (document-status)
    "Connections"))


;;;
;;;; Connections-Menu
;;;


(class Connections-Menu extends Component-Menu
  
  
  @convert
  (form
    (<install>
      (<Label-Item>     name: browse-inventory before: add-item title: "Browse Inventory" default?: #t icon: {Image-Resource "Database"} action-handler: {Event-Handler :form on-browse-inventory})
      (<Separator-Item> name: browse-separator before: add-item)))
  
  
  @convert
  (method (on-browse-inventory evt)
    (open-selection))))
