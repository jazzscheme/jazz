;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; SQL Console Text View
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.editor.sql.sql.SQL-Console-Text-View jazz


(import (jazz.application)
        (jazz.console)
        (jazz.database)
        (jazz.editor.sql)
        (jazz.editor.sql.view)
        (jazz.feedback)
        (jazz.graphic)
        (jazz.platform)
        (jazz.preferences)
        (jazz.schema)
        (jazz.text)
        (jazz.time)
        (jazz.tree)
        (jazz.view))


(class SQL-Console-Text-View extends Console-Text-View
  
  
  (slot current-request initialize #f accessors generate)
  (slot current-table   initialize #f)
  (slot current-tables  initialize '())

  
  (definition (sql-tool-preferences)
    (current-preferences '(tools sql)))
  
  
  (method override (finish self rest)
    (nextmethod self rest)
    (set! banner (determine-banner self))
    (set! banner-prompt "> ")
    (display-banner self banner)
    (display-prompt self))
  
  
  (method override (new-syntax self)
    (new SQL-Syntax model))
    

  ;;;
  ;;;; Banner
  ;;;

  
  (method override (determine-banner self)
    (format "SQL Console{%}{%}"))
    

  ;;;
  ;;;; Prompt
  ;;;
  
  
  (method (display-prompt self)
    (insert-styled self "> " 'Prompt))
  
  
  (method (evaluation-break self)
    (set-caret self (text-ending self))
    (insert-newline self))


  ;;;
  ;;;; Eval
  ;;;
  
  
  (definition Header-Font
    {Font Code})
  
  (definition Header-Font-Plain
    {Font Code-Bold})
  
  (definition Header-Color
    {Color Dark-Blue})
  
  (definition Header-Style
    (new Text-Style font: Header-Font color: Header-Color))
  
  (definition Header-Style-Plain
    (new Text-Style font: Header-Font-Plain color: Header-Color))
  
  (definition Overflow-Style
    {Text-Style font: {Font Code} color: {Color Dark-Red}})

  
  (method override (eval-from-prompt self)
    (let ((range (current-command self)))
      (let ((command (get-string self range)))
        (unless (empty-string? command)
          (stylize-range model range (locate-style self 'Input))
          (reset inserted)
          (evaluate-statements self (list command) #t))))
    (display-prompt self))
  
  
  (method public (evaluate-statements self statements console?)
    (let ((length (length statements)))
      (case length
        ((0) (bell))
        ((1) (evaluate self (car statements) console?))
        (else
         (with-cursor :wait
           (lambda ()
             (let ((connection (get-connection))
                   (affected 0)
                   (timer (new Timer)))
               (with-transaction connection
                 (lambda ()
                   (for-each (lambda (statement)
                               (cond ((select-statement? statement)
                                      (let ((table (load-request connection statement)))
                                        (increase! affected (get-count table))))
                                     (else
                                      (increase! affected (execute connection statement)))))
                             statements)))
               (let ((duration (real-duration timer)))
                 (clear-table self)
                 (when console?
                   (evaluation-break self))
                 (display-result self (format "{a} row{a} affected ({a} statements)" affected (format-plural affected) length) duration console?)))))))))
  
  
  (method public (evaluate self command console?)
    (define (eval-command)
      (with-cursor :wait
        (lambda ()
          (let ((connection (get-connection)))
            (set! current-request command)
            (let ((timer (new Timer)))
              (let ((result (process-command connection)))
                (values result (real-duration timer))))))))
    
    (define (process-command connection)
      (if (and console? (not (shift-down?)))
          (process-sql self connection command)
        (load-sql self connection command)))
  
    (define (display-evaluation tables duration)
      (when console?
        (evaluation-break self))
      (cond ((null? tables)
             (clear-table self)
             (display-result self "0 rows affected" duration console?))
            ((integer? tables)
             (display-result self (format "{a} row{a} affected" tables (format-plural tables)) duration console?))
            (else
             (let ((max-display (get-max-display self))
                   (first-table (car tables)))
               (if (not first-table)
                   (display-result self "0 rows affected" duration console?)
                 (let* ((count (get-count first-table))
                        (missing? (get-missing? first-table))
                        (displayed (min count max-display))
                        (not-displayed (- count displayed)))
                   (display-tables self tables max-display not-displayed)
                   (display-affected count missing? not-displayed duration)))))))
    
    (define (display-affected count missing? not-displayed duration)
      (display-result self (format "{a} row{a} retrieved{a}{a}"
                              count
                              (format-plural count)
                              (if (not missing?)
                                  ""
                                (format " with some missing"))
                              (if (= not-displayed 0)
                                  ""
                                (format ", {a} not displayed" not-displayed)))
                      duration
                      console?))
    
    (receive (tables duration) (eval-command)
      (display-evaluation tables duration)))
  
  
  (definition (get-connection)
    (or (get-active-connection)
        (error "No active connection")))
  
  
  (method package (process-sql self connection command)
    (let* ((appl (current-application))
           (profile (get-profile appl))
           (table (process-sql profile connection command)))
      (if table
          (list table)
        (load-sql self connection command))))
  
  
  (method (load-sql self connection command)
    (let* ((pref (sql-tool-preferences))
           (max-load (get-max-load pref))
           (sql (expand-sql self command)))
      (if (select-statement? sql)
          (load-multirequest connection sql max-load: max-load)
        (execute connection sql))))
  
  
  (method (expand-sql self command)
    (let* ((appl (current-application))
           (profile (get-profile appl)))
      (expand-sql profile command)))
  
  
  (method (get-max-display self)
    (let ((pref (sql-tool-preferences)))
      (get-max-display pref)))
  
  
  (method (display-result self string duration console?)
    (let ((effective-string (format "{a} ({r precision: 3}s)" string duration)))
      (if (not console?)
          (user-message "{a}" effective-string)
        (clear-user-message)
        (let ((start (get-start self)))
          (insert-styled self effective-string 'Output)
          (insert-newline self)))))
  
  
  (definition (present-value value)
    (if (not value)
        "NULL"
      (->string value)))
  
  
  (method public (clear-table self)
    (let ((text (get-sql-output-text))
          (tree (get-sql-output-tree)))
      (clear-all text)
      (remove-columns tree)
      (clear-tables self)))
  
  
  (method public (output-tables self tables (name #f))
    (set! current-request name)
    (display-tables self tables (get-max-display self) 0)
    tables)
  
  
  (method public (clear-output self)
    (clear-all (get-sql-output-text))
    (remove-columns (get-sql-output-tree))
    (clear-tables self))
  
  
  (method public (previous-table self)
    (decrease! current-table)
    (display-current-table self (get-max-display self) 0))
  
  
  (method public (next-table self)
    (increase! current-table)
    (display-current-table self (get-max-display self) 0))
  
  
  (method (clear-tables self)
    (set! current-table 0)
    (set! current-tables '())
    (let ((output (get-sql-tree-output)))
      (recordsets-update output current-table current-tables #f)))
  
  
  (method package (display-tables self tables max-display not-displayed)
    (set! current-table 0)
    (set! current-tables tables)
    (display-current-table self max-display not-displayed))
  
  
  (method (display-current-table self max-display not-displayed)
    (display-table self (element current-tables current-table) max-display not-displayed)
    (let ((output (get-sql-tree-output)))
      (recordsets-update output current-table current-tables not-displayed)))
  
  
  (method (display-table self table max-display not-displayed)
    (define (compute-widths columns font max-char)
      (map (lambda (column)
             (min 250 (+ (max (text-width font (get-name column)) (* (get-prefered-width column) max-char)) 24)))
           columns))
    
    (define (display-text columns rows affected max-display not-displayed widths)
      (define (determine-max-list headers data)
        (map (lambda (n)
               (let ((max (length (element headers n))))
                 (for-each (lambda (row)
                             (let* ((data (element row n))
                                    (count (length data)))
                               (when (> count max)
                                 (set! max count))))
                           data)
                 max))
             (naturals 0 (length headers))))
      
      (define Spacing
        3)
      
      (define (join-data row max-list)
        (let ((output (open-output-string)))
          (while row
            (let ((data (car row))
                  (max (+ (car max-list) Spacing))
                  (last? (null? (cdr row))))
              (format output "{a}" data)
              (unless last?
                (format output "{_ :v}" (- max (length data))))
              (set! row (cdr row))
              (set! max-list (cdr max-list))))
          (get-output-string output)))
      
      (let* ((pref (sql-tool-preferences))
             (tabulate? (get-tabulate-text? pref))
             (output (get-sql-output-text))
             (style (intern-style model (if tabulate? Header-Style Header-Style-Plain)))
             (stop 0))
        (when (= current-table 0)
          (clear-all output))
        (cond (tabulate?
                (let ((stops (map (lambda (width)
                                    (increase! stop width)
                                    stop)
                                  widths)))
                  (set-tabs (get-model output) (append! stops (make-tabs-from model stop 32 256))))
                (insert-styled output (join (map get-name columns) (string #\tab)) style)
                (insert-line output "")
                (insert-line output "")
                (for-each (lambda (row)
                            (insert-line output (join (map present-value (get-values row)) (string #\tab))))
                          (if (> affected max-display) (subseq rows 0 max-display) rows)))
              (else
               (let* ((headers (map get-name columns))
                      (data (map (lambda (row) (map present-value (get-values row))) rows))
                      (max-list (determine-max-list headers data)))
                 (insert-styled output (join-data headers max-list) style)
                 (insert-line output "")
                 (insert-line output "")
                 (for-each (lambda (row)
                             (insert-line output (join-data row max-list)))
                           (if (> affected max-display) (subseq data 0 max-display) data)))))
        (when (> not-displayed 0)
          (insert-line output "")
          (insert-styled output (format "{a} row{a} not displayed" not-displayed (format-plural not-displayed)) (intern-style model Overflow-Style))
          (insert-line output ""))
        (scroll-to output {Point 0 0})))
    
    (define (display-tree columns rows affected max-display not-displayed widths)
      (let ((output (get-sql-output-tree)))
        (remove-columns output)
        (let ((first-column (car columns)))
          (for-each (lambda (column width)
                      (let* ((node? (eq? column first-column))
                             (column (if node?
                                         (add-column output class: Tree-Node-Column toplevel-controls?: #f title: (get-name column) width: width)
                                       (add-column output class: Tree-Label-Column title: (get-name column) width: width))))
                        (when node?
                          (set-display-images? column #f))))
                    columns
                    widths))
        (for-each (lambda (row)
                    (let* ((values (get-values row))
                           (first (car values))
                           (rest (cdr values)))
                      (add-row output children: (cons (new Tree-Node title: (present-value first)) (map (lambda (value) (new Tree-Label title: (present-value value))) rest)))))
                  (if (> affected max-display) (subseq rows 0 max-display) rows))))
    
    (let* ((columns (get-columns table))
           (rows (get-rows table))
           (affected (length rows))
           (text-max-char (get-max-char-width (get-metrics {Font Code})))
           (text-widths (compute-widths columns Header-Font text-max-char))
           (tree (get-sql-output-tree))
           (tree-font (effective-font tree))
           (tree-max-char (get-max-char-width (get-metrics tree-font)))
           (tree-widths (compute-widths columns tree-font tree-max-char)))
      (set-?t table)
      (set-?c columns)
      (set-?r rows)
      (display-text columns rows affected max-display not-displayed text-widths)
      (display-tree columns rows affected max-display not-displayed tree-widths)))))
