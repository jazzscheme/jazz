;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; SQL Syntax
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.editor.sql.sql.SQL-Syntax jazz


(import (jazz.automata)
        (jazz.editor)
        (jazz.editor.sql)
        (jazz.exemplar)
        (jazz.preferences))


(class SQL-Syntax extends Code-Syntax
  
  
  ;;;
  ;;;; Preferences
  ;;;

  
  (method override (preferences self)
    (current-preferences '(documents sql-text)))
  
  
  ;;;
  ;;;; Constituent
  ;;;
  
  
  (method override (get-constituent-test self)
    sql-constituent?)

  
  ;;;
  ;;;; Completion
  ;;;


  (method override (favorite-completions self)
    (get-completions (preferences self)))


  ;;;
  ;;;; Explorer
  ;;;


  (method override (explorer-class self)
    SQL-Explorer)
 
  
  ;;;
  ;;;; Expression
  ;;;
  
  
  (method override (name-at self range)
    (when range
      (let ((name (get-string model range)))
        (when (> (cardinality name) 0)
          (if (eqv? (element name 0) #\open-brace)
              (read-string-element name)
            name)))))

  
  ;;;
  ;;;; Chapters
  ;;;
  
  
  (constant headers
    (list
      "--- "))
  
  
  (method override (get-headers self)
    headers)
  
  
  (method override (get-first-special? self)
    #f)

  
  ;;;
  ;;;; Definitions
  ;;;
  
  
  (constant Definitions
    '("*"))
  
  
  (definition (get-definitions)
    Definitions)

  
  ;;;
  ;;;; Keywords
  ;;;
  
  
  (constant Keywords
    '(;"="
      ;"<>"
      ;"<"
      ;"<="
      ;">"
      ;">="
      ;"("
      ;")"
      ;";"
      "ACTION"
      "ADD"
      "ALL"
      "ALTER"
      "AND"
      "ANY"
      "APPLY"
      "AS"
      "ASC"
      "BEGIN"
      "BETWEEN"
      "BY"
      "CASCADE"
      "CASE"
      "CAST"
      "CHECK"
      "CLUSTERED"
      "COLLATE"
      "COMMIT"
      "CONSTRAINT"
      "CONTAINS"
      "COUNT"
      "CREATE"
      "CROSS"
      "CURSOR"
      "DECLARE"
      "DEFAULT"
      "DEFINE"
      "DELETE"
      "DESC"
      "DISTINCT"
      "DROP"
      "ELSE"
      "END"
      "EXEC"
      "EXECUTE"
      "EXISTS"
      "FILLFACTOR"
      "FOR"
      "FOREIGN"
      "FROM"
      "FULL"
      "GROUP"
      "HAVING"
      "IN"
      "INNER"
      "INSENSITIVE"
      "INSERT"
      "INTO"
      "IS"
      "JOIN"
      "KEY"
      "LEFT"
      "LIKE"
      "MAX"
      "MIN"
      "MODIFY"
      "NO"
      "NOCHECK"
      "NONCLUSTERED"
      "NOT"
      "NULL"
      "OF"
      "ON"
      "OR"
      "ORDER"
      "OUTER"
      "PARAMETERS"
      "PIVOT"
      "PRIMARY"
      "PRINT"
      "PROC"
      "PROCEDURE"
      "REFERENCES"
      "REPLICATION"
      "RETURN"
      "RIGHT"
      "ROWGUIDCOL"
      "SELECT"
      "SET"
      "SOME"
      "SUM"
      "TABLE"
      "TEXTIMAGE_ON"
      "THEN"
      "TOP"
      "TRANSACTION"
      "TRANSFORM"
      "TRIGGER"
      "TRUNCATE"
      "UNION"
      "UNIQUE"
      "UPDATE"
      "VALUES"
      "VIEW"
      "WHEN"
      "WHERE"
      "WITH"))
  
  
  (method package virtual (get-keywords self)
    Keywords)

  
  ;;;
  ;;;; Coloring
  ;;;
  
  
  (definition Syntax-Targets
    #f)
  
  (definition Syntax-Automata
    #f)
  
  
  (method override (syntax-targets self)
    (unless Syntax-Targets
      (set! Syntax-Targets (compute-syntax-targets self)))
    Syntax-Targets)
  
  
  (method override (syntax-automata self)
    (unless Syntax-Automata
      (set! Syntax-Automata (compute-syntax-automata self)))
    Syntax-Automata)
  
  
  (method override (compute-syntax-targets self)
    (append (list (list "--" 'line-comment #f))
            (map (lambda (str) (list str 'definition)) (get-definitions))
            (map (lambda (str) (list str 'keyword)) (get-keywords self))))
        
  
  (method override (compute-syntax-automata self)
    (build-search-automata (syntax-targets self) #t #t sql-constituent?))
  
  
  (method override (colorize-type self found type start end colorizer recolorize?)
    (case type
      ((line-comment) (colorize-line-comment self found start end colorizer 'Line-Comment 'Title #\minus))
      ((definition)   (colorize-keyword self      found start end colorizer 'Definition))
      ((keyword)      (colorize-keyword self      found start end colorizer 'Keyword))
      (else (nextmethod self found type start end colorizer recolorize?))))
  
  
  ;;;
  ;;;; Styles
  ;;;
  
  
  (definition Comment-Styles
    '(Title Line-Comment))
  
  
  (method override (comment-style? self style)
    (some? (lambda (style-name)
             (inherits? style style-name))
           Comment-Styles))))
