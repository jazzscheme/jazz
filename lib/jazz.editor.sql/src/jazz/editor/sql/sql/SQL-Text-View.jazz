;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; SQL Text View
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.editor.sql.sql.SQL-Text-View jazz


(import (jazz.editor.sql)
        (jazz.editor.sql.view)
        (jazz.jml)
        (jazz.library)
        (jazz.library.automata)
        (jazz.locale)
        (jazz.system)
        (jazz.ui))


(class SQL-Text-View extends Code-Text-View
  
  
  (method override (install rest)
    (nextmethod rest)
    (let ((pref (preferences))
          (default (get-name~ default-style)))
      (add-style-preference 'Title        default (get-title-style~ pref))
      (add-style-preference 'Line-Comment default (get-line-comment-style~ pref))
      (add-style-preference 'Definition   default (get-definition-style~ pref))
      (add-style-preference 'Keyword      default (get-keyword-style~ pref))))
  
  
  (method meta override (external-name . rest)
    'sql-text)

  
  (method override (preferences)
    (get-preferences '(documents sql-text)))

  
  ;;;
  ;;;; Host
  ;;;
  
  
  (method override (host-workspaces)
    '(sql))
  
  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method override (get-context-menu)
    (new SQL-Text-Menu))

  
  ;;;
  ;;;; Completion
  ;;;


  (method override (favorite-completions)
    (get-completions~ (get-preferences '(documents sql-text))))
  
  
  (method override (commented? pos)
    (let ((style (get-style-at pos)))
      (and style
           (or (inherits?~ style 'Title)
               (inherits?~ style 'Line-Comment)))))

  
  ;;;
  ;;;; Tabulation
  ;;;


  (method override (return-press key)
    (nextmethod key)
    (tabulate))


  ;;;
  ;;;; Explorer
  ;;;


  (method override (explorer-class)
    SQL-Explorer)
 
  
  ;;;
  ;;;; Expr
  ;;;
  
  
  (method override (get-context)
    '(sql))


  (method override (current-name)
    (name-at (current-expr-range)))
  
  
  (method (name-at range)
    (when range
      (let ((name (get-string range)))
        (when (> (cardinality name) 0)
          (if (eqv? (element name 0) #\open-brace)
              (read-string-element name)
            name)))))


  (method override (current-expr)
    (current-name))
  
  
  (method override (current-expr-range)
    (if (and (not completion-active?) (has-selection?))
        (get-selection)
      (expr-range (get-end))))
  
  
  (method override (expr-at pos)
    (name-at (expr-range pos)))

  
  ;;;
  ;;;; Chapters
  ;;;
  
  
  (constant headers
    (list
      "--- "))
  
  
  (method override (get-headers)
    headers)
  
  
  (method override (get-first-special?)
    #f)

  
  ;;;
  ;;;; Definitions
  ;;;
  
  
  (constant Definitions
    '("*"))
  
  
  (definition (get-definitions)
    Definitions)

  
  ;;;
  ;;;; Keywords
  ;;;
  
  
  (constant Keywords
    '(;"="
      ;"<>"
      ;"<"
      ;"<="
      ;">"
      ;">="
      ;"("
      ;")"
      ;";"
      "ACTION"
      "ADD"
      "ALL"
      "ALTER"
      "AND"
      "ANY"
      "AS"
      "ASC"
      "BEGIN"
      "BETWEEN"
      "BY"
      "CASCADE"
      "CASE"
      "CHECK"
      "CLUSTERED"
      "COLLATE"
      "COMMIT"
      "CONSTRAINT"
      "CONTAINS"
      "COUNT"
      "CREATE"
      "CURSOR"
      "DECLARE"
      "DEFAULT"
      "DEFINE"
      "DELETE"
      "DESC"
      "DISTINCT"
      "DROP"
      "END"
      "EXEC"
      "EXECUTE"
      "EXISTS"
      "FILLFACTOR"
      "FOR"
      "FOREIGN"
      "FROM"
      "FULL"
      "GROUP"
      "HAVING"
      "IN"
      "INNER"
      "INSENSITIVE"
      "INSERT"
      "INTO"
      "IS"
      "JOIN"
      "KEY"
      "LEFT"
      "LIKE"
      "MAX"
      "MIN"
      "MODIFY"
      "NO"
      "NOCHECK"
      "NONCLUSTERED"
      "NOT"
      "NULL"
      "OF"
      "ON"
      "OR"
      "ORDER"
      "OUTER"
      "PARAMETERS"
      "PIVOT"
      "PRIMARY"
      "PRINT"
      "PROC"
      "PROCEDURE"
      "REFERENCES"
      "REPLICATION"
      "RETURN"
      "RIGHT"
      "ROWGUIDCOL"
      "SELECT"
      "SET"
      "SOME"
      "SUM"
      "TABLE"
      "TEXTIMAGE_ON"
      "THEN"
      "TOP"
      "TRANSACTION"
      "TRANSFORM"
      "TRIGGER"
      "TRUNCATE"
      "UNION"
      "UNIQUE"
      "UPDATE"
      "VALUES"
      "VIEW"
      "WHEN"
      "WHERE"
      "WITH"))
  
  
  (method protected virtual (get-keywords)
    Keywords)

  
  ;;;
  ;;;; Coloring
  ;;;
  
  
  (definition Syntax-Targets
    {})
  
  (definition Syntax-Automata
    {})
  
  
  (method override (syntax-targets)
    (unless Syntax-Targets
      (set! Syntax-Targets (compute-syntax-targets)))
    Syntax-Targets)
  
  
  (method override (syntax-automata)
    (unless Syntax-Automata
      (set! Syntax-Automata (compute-syntax-automata)))
    Syntax-Automata)
  
  
  (method override (compute-syntax-targets)
    (append (list (list "--" 'line-comment #f))
            (map (lambda (str) (list str 'definition)) (get-definitions))
            (map (lambda (str) (list str 'keyword)) (get-keywords))))
        
  
  (method override (compute-syntax-automata)
    (build-search-automata (syntax-targets) #t #t sql-constituent?))
  
  
  (method override (colorize-type found type start end colorizer recolorize?)
    (case type
      ((line-comment) (colorize-line-comment found start end colorizer 'Line-Comment 'Title #\minus))
      ((definition)   (colorize-keyword      found start end colorizer 'Definition))
      ((keyword)      (colorize-keyword      found start end colorizer 'Keyword))
      (else (nextmethod found type start end colorizer recolorize?))))
  
  
  ;;;
  ;;;; Evaluation
  ;;;
  
  
  (method override (evaluate-selection)
    (define (statement-range)
      (let* ((pos (statement-pos))
             (start (text-search ";" start: pos reversed?: #t))
             (end (text-search ";" start: pos)))
        (new Range$Cell$
          (if start (next-pos start 1) (text-beginning))
          (if end end (text-ending)))))
    
    
    (define (statement-pos)
      (let* ((start (get-start))
             (previous (previous-pos start 1)))
        (if (and previous (eqv? (get-char previous) #\semi-colon))
            previous
          start)))
    
    
    (define (uncommented-string range)
      (define (uncommented-line line)
        (let ((pos (search line "--")))
          (if (not pos)
              line
            (subseq line 0 pos))))
      
      (let ((lines (range-strings range)))
        (join-lines (map uncommented-line lines))))
    
    (let* ((range (if (has-selection?) (get-selection) (statement-range)))
           (string (uncommented-string range))
           (statements (collect-if (lambda (statement) (not (whitespace? statement))) (split string ";")))
           (console (get-sql-console-text)))
      (evaluate-statements~ console statements #f))))


;;;
;;;; SQL-Text-Menu
;;;


(class SQL-Text-Menu extends Context-Menu
  
  
  (form
    (<install>
      (<Label-Item>     name: evaluate title: "Evaluate" icon: {Image-Resource "Execute"} action: {Action code-text evaluate})
      (<Separator-Item>)
      (<Label-Item>     name: cut      title: {Locales english: "Cut" french: "Couper"} icon: {Image-Resource "Cut"} action: {Action view cut})
      (<Label-Item>     name: copy     title: {Locales english: "Copy" french: "Copier"} icon: {Image-Resource "Copy"} action: {Action view copy})
      (<Label-Item>     name: paste    title: {Locales english: "Paste" french: "Coller"} icon: {Image-Resource "Paste"} action: {Action view paste})))))
