;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; SQL Text View
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.editor.sql.sql.SQL-Text-View jazz


(import (jazz.action)
        (jazz.editor)
        (jazz.editor.sql)
        (jazz.editor.sql.view)
        (jazz.locale)
        (jazz.markup)
        (jazz.menu)
        (jazz.preferences)
        (jazz.resource)
        (jazz.text))


(class SQL-Text-View extends Code-Text-View
  
  
  (method override (install self rest)
    (nextmethod self rest)
    (let ((pref (preferences self)))
      (add-style self 'Title        (get-title-style pref))
      (add-style self 'Line-Comment (get-line-comment-style pref))
      (add-style self 'Definition   (get-definition-style pref))
      (add-style self 'Keyword      (get-keyword-style pref))))
  
  
  (method override (new-syntax self)
    (new SQL-Syntax model))
  
  
  (method meta override (external-name self . rest)
    'sql-text)

  
  (method override (preferences self)
    (current-preferences '(documents sql-text)))

  
  ;;;
  ;;;; Host
  ;;;
  
  
  (method override (host-workspaces self)
    '(sql))
  
  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method override (get-context-menu self)
    (new SQL-Text-Menu))

  
  ;;;
  ;;;; Tabulation
  ;;;


  (method override (return-press self evt)
    (nextmethod self evt)
    (tabulate self))
  
  
  ;;;
  ;;;; Evaluation
  ;;;
  
  
  (method override (evaluate-selection self)
    (define (statement-range)
      (let* ((pos (statement-pos))
             (start (text-search model ";" start: pos reversed?: #t))
             (end (text-search model ";" start: pos)))
        (new Range$Cell$
          (if start (next-pos self start 1) (text-beginning self))
          (if end end (text-ending self)))))
    
    (define (statement-pos)
      (let* ((start (get-start self))
             (previous (previous-pos self start 1)))
        (if (and previous (eqv? (get-char self previous) #\semi-colon))
            previous
          start)))
    
    (define (uncommented-string range)
      (define (uncommented-line line)
        (let ((pos (search line "--")))
          (if (not pos)
              line
            (subseq line 0 pos))))
      
      (let ((lines (range-strings self range)))
        (join-lines (map uncommented-line lines))))
    
    (let* ((range (if (has-selection? self) (get-selection self) (statement-range)))
           (string (uncommented-string range))
           (statements (collect-if (lambda (statement) (not (whitespace? statement))) (split string ";")))
           (console (get-sql-console-text)))
      (evaluate-statements console statements #f))))


;;;
;;;; SQL-Text-Menu
;;;


(class SQL-Text-Menu extends Context-Menu
  
  
  (form
    (<install>
      (<Label-Item>     name: evaluate title: "Evaluate" icon: {Image-Resource "Execute"} action-handler: {Action code-text evaluate})
      (<Separator-Item>)
      (<Label-Item>     name: cut      title: {Locales english: "Cut" french: "Couper"} icon: {Image-Resource "Cut"} action-handler: {Action view cut})
      (<Label-Item>     name: copy     title: {Locales english: "Copy" french: "Copier"} icon: {Image-Resource "Copy"} action-handler: {Action view copy})
      (<Label-Item>     name: paste    title: {Locales english: "Paste" french: "Coller"} icon: {Image-Resource "Paste"} action-handler: {Action view paste})))))
