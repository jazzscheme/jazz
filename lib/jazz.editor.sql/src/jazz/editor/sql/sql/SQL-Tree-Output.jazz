;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; SQL Tree Output
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.editor.sql.sql.SQL-Tree-Output jazz


(import (jazz.editor.sql)
        (jazz.editor.sql.view)
        (jazz.graphic)
        (jazz.jml)
        (jazz.library)
        (jazz.ui)
        (jazz.ui.history))


(class SQL-Tree-Output extends Layout-View implements History-Provider
  
  
  (slot history-manager initialize (new History-Manager self))


  (form
    (<install>                                   size: {Dimension 650 400} layout-type: border
      (<Layout-View>             name: tools
        @convert
        (<Layout-View>                           size: {Dimension 200 22} location: tail layout-type: border layout-insets: {Rect 0 1 0 0}
          (<Label-View>          name: current   location: center font: {Font font-name: "Tahoma" point-size: 9} justification: tail))
        @convert
        (<Separator>                             size: {Dimension 2 0} location: tail)
        @convert
        (<Push-Tool>             name: previous  size: {Dimension 22 22} location: tail enabled?: #f tooltip?: #t tooltip-text: "Previous Recordset" resource: {Image-Resource "AddLeft"} portfolio: :images action-handler: {Event-Handler :form on-previous-recordset})
        @convert
        (<Push-Tool>             name: next      size: {Dimension 22 22} location: tail enabled?: #f tooltip?: #t tooltip-text: "Next Recordset" resource: {Image-Resource "AddRight"} portfolio: :images action-handler: {Event-Handler :form on-next-recordset})
        @convert
        (<Separator>                             size: {Dimension 2 0} location: tail)
        @convert
        (<Push-Combo>            name: backward  location: tail
          (<!>                   name: body      resource: {Image-Resource "Backward"} portfolio: :images tooltip?: #t tooltip-text: "Backward in History" action-handler: {Event-Handler :form on-backward-history})
          (<!>                   name: pick      action-handler: {Event-Handler :form on-backward-menu}))
        @convert
        (<Separator>                             size: {Dimension 1 0} location: tail)
        @convert
        (<Push-Combo>            name: forward   location: tail
          (<!>                   name: body      resource: {Image-Resource "Forward"} portfolio: :images tooltip?: #t tooltip-text: "Forward in History" action-handler: {Event-Handler :form on-forward-history})
          (<!>                   name: pick      action-handler: {Event-Handler :form on-forward-menu}))
        @convert
        (<Separator>                             size: {Dimension 4 0} location: tail)
        (<Push-Tool>             name: clear     size: {Dimension 22 22} location: tail tooltip?: #t tooltip-text: "Clear" resource: {Image-Resource "Clear"} portfolio: :images action-handler: {Event-Handler :form on-clear})
        (<Push-Tool>             name: displayed size: {Dimension 22 22} location: tail tooltip?: #t resource: {Image-Resource "Gray"} portfolio: :images action-handler: {Event-Handler :form on-settings}))
      (<Scroller-View>           name: scroller  location: center vscroll?: #t hscroll?: #t flat?: #t
        (<!>                     name: content   layout-type: fill
          (<Tree-Header>         name: header    flat?: #t
            (<!>                 name: content
              (<SQL-Output-Tree> name: tree      background: {Color name: Dark} filled-column: {} selection-mode: cell multiple-selection?: #t row-spacing: 1 column-spacing: 1)))))))
  
  
  (method meta override (external-name . rest)
    'sql-tree-output)

  
  ;;;
  ;;;; Host
  ;;;
  
  
  (method meta override (host-icon)
    {Image-Resource "Info"})
  
  
  (method meta override (host-title)
    "Tree Output")

  
  ;;;
  ;;;; Docked
  ;;;
  
  
  (method override (get-tools-view)
    (locate 'tools))
  
  
  (method override (focus-default)
    (let ((tree (get-tree)))
      (acquire-focus~ tree)))
  
  
  ;;;
  ;;;; Access
  ;;;

  
  (method public (get-tree)
    (locate 'tree))
  
  
  ;;;
  ;;;; Edition
  ;;;


  (method override (delete-selection)
    (let ((tree (get-tree)))
      (remove-every-row~ tree)))
  
  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method (on-previous-recordset evt)
    (let ((console (get-sql-console-text)))
      (previous-table~ console)))
  
  
  (method (on-next-recordset evt)
    (let ((console (get-sql-console-text)))
      (next-table~ console)))
  
  
  (method public (recordsets-update current tables not-displayed)
    (let* ((count (length tables))
           (table (essay (not-null? tables) (element tables current)))
           (name (essay table (get-name~ table)))
           (count (essay table (get-count~ table)))
           (missing? (essay table (get-missing?~ table))))
      @convert
      (set-title~ (locate 'current) (if (= count 0) "" (format "{?{a} ~}{a} of {a}" name (+ current 1) count)))
      @convert
      (set-enabled?~ (locate 'previous) (> current 0))
      @convert
      (set-enabled?~ (locate 'next) (< current (- count 1)))
      (let ((displayed-view (locate 'displayed))
            (resource (cond ((not not-displayed) {Image-Resource "Gray"})
                            ((and (not missing?) (= not-displayed 0)) {Image-Resource "Green"})
                            (else {Image-Resource "Red"})))
            (tooltip-text (cond ((not not-displayed) {})
                                ((and (not missing?) (= not-displayed 0)) (format "{a} rows retrieved and displayed" count))
                                (else (format "{a}{a}{a}"
                                              (if missing? "Some rows not retrieved" "")
                                              (if (and missing? (/= not-displayed 0)) ", " "")
                                              (if (/= not-displayed 0) (format "{a}{a} not displayed" not-displayed (if missing? "" " rows")) ""))))))
        (set-resource~ displayed-view resource)
        (set-tooltip-text~ displayed-view tooltip-text))))
  
  
  (method (on-clear evt)
    (let ((console (get-sql-console-text)))
      (clear-table~ console)))
  
  
  (method (on-settings evt)
    @convert
    (new-frame Preferences-Manager host-workspace: 'sql))
  
  
  ;;;
  ;;;; History
  ;;;
  
  
  (method package (on-add-history evt)
    (add-current~ history-manager))
  
  
  (method package (on-backward-history evt)
    (go-backward-history~ history-manager))
  
  
  (method package (on-forward-history evt)
    (go-forward-history~ history-manager))

  
  (method (on-backward-menu evt)
    (let* ((sender (get-sender~ evt))
           (initiator (get-combo~ sender)))
      (track-history sender initiator history-manager 'backward)))
  
  
  (method (on-forward-menu evt)
    (let* ((sender (get-sender~ evt))
           (initiator (get-combo~ sender)))
      (track-history sender initiator history-manager 'forward)))
  
  
  (method public (add-history item)
    (add-history~ history-manager item))
  
  
  (method override (current-history-item)
    (let* ((console (get-sql-console-text))
           (request (get-current-request~ console)))
      (when request
        (new History-Request-Item request))))))
