;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Tex Syntax
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.editor.tex.text.Tex-Syntax jazz


(import (jazz.editor.tex)
        (jazz.library.automata)
        (jazz.system)
        (jazz.ui))


(class Tex-Syntax extends Code-Syntax
  
  
  ;;;
  ;;;; Preferences
  ;;;

  
  (method override (preferences)
    (get-preferences '(documents tex-text)))
  
  
  ;;;
  ;;;; Constituent
  ;;;
      
  
  (method override (get-constituent-test)
    tex-constituent?)

  
  ;;;
  ;;;; Completion
  ;;;
  
  
  (method override (favorite-completions)
    '(("\\be" . "\\begin")
      ("\\en" . "\\end")
      ("\\pa" . "\\paragraph")
      ("\\se" . "\\section")
      ("\\sub" . "\\subsection")
      ("\\subs" . "\\subsubsection")))
  
  
  (method override (symbol-completions name)
    '())


  ;;;
  ;;;; Explorer
  ;;;


  (method override (explorer-class)
    Tex-Explorer)
 
  
  ;;;
  ;;;; Expression
  ;;;
  
  
  (method override (name-at range)
    (when range
      (let ((name (get-string~ model range)))
        (when (> (cardinality name) 0)
          (if (eqv? (element name 0) #\open-brace)
              (read-string-element name)
            name)))))

  
  ;;;
  ;;;; Chapters
  ;;;
  
  
  (constant headers
    (list
      "%%% "))
  
  
  (method override (get-headers)
    headers)
  
  
  (method override (get-first-special?)
    #f)

  
  ;;;
  ;;;; Definitions
  ;;;
  
  
  (constant Definitions
    '("\\authorinfo"
      "\\begin"
      "\\conferenceinfo"
      "\\end"
      "\\paragraph"
      "\\section"
      "\\section*"
      "\\subparagraph"
      "\\subsection"
      "\\subsection*"
      "\\subsubsection"
      "\\subsubsection*"
      "\\title"))
  
  
  (method (get-definitions)
    Definitions)

  
  ;;;
  ;;;; Keywords
  ;;;
  
  
  (constant Keywords
    '("\\bibliography"
      "\\bibliographystyle"
      "\\caption"
      "\\documentclass"
      "\\hyphenation"
      "\\includegraphics"
      "\\item"
      "\\label"
      "\\listoffigures"
      "\\maketitle"
      "\\newcommand"
      "\\onecolumn"
      "\\pngfigure"
      "\\setcounter"
      "\\tableofcontents"
      "\\usepackage"))
  
  
  (method protected virtual (get-keywords)
    Keywords)

  
  ;;;
  ;;;; Coloring
  ;;;
  
  
  (definition Syntax-Targets
    #f)
  
  (definition Syntax-Automata
    #f)
  
  
  (method override (syntax-targets)
    (unless Syntax-Targets
      (set! Syntax-Targets (compute-syntax-targets)))
    Syntax-Targets)
  
  
  (method override (syntax-automata)
    (unless Syntax-Automata
      (set! Syntax-Automata (compute-syntax-automata)))
    Syntax-Automata)
  
  
  (method override (compute-syntax-targets)
    (append (list (list "%" 'line-comment #f))
            (map (lambda (str) (list str 'definition)) (get-definitions))
            (map (lambda (str) (list str 'keyword)) (get-keywords))))
        
  
  (method override (compute-syntax-automata)
    (build-search-automata (syntax-targets) #t #t tex-constituent?))
  
  
  (method override (colorize-type found type start end colorizer recolorize?)
    (case type
      ((line-comment) (colorize-line-comment found start end colorizer 'Line-Comment 'Title #\%))
      ((definition)   (colorize-definition   found start end colorizer 'Keyword 'Definition))
      ((keyword)      (colorize-keyword      found start end colorizer 'Keyword))))
  
  
  (method (colorize-definition found start end colorizer keyword-style definition-style)
    (apply-coloring colorizer start end keyword-style)
    (let* ((line (get-line~ end))
           (col (get-col~ end))
           (str (paragraph-string~ model line))
           (len (paragraph-length~ model line))
           (open (search str "{" start: col))
           (close (search str "}" start: col)))
      (when (and open close (> close open))
        (apply-coloring colorizer (new Cell line (+ open 1)) (new Cell line close) definition-style)))
    (cdr found))
  
  
  ;;;
  ;;;; Styles
  ;;;
  
  
  (definition Comment-Styles
    '(Title Line-Comment))
  
  
  (method override (comment-style? style)
    (some? (lambda (style-name)
             (inherits?~ style style-name))
           Comment-Styles))))
