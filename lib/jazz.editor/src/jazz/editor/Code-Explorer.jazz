;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Exploring Code
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.editor.Code-Explorer jazz


(import (jazz.outline)
        (jazz.text))


(proclaim (warn optimizations))


(class undocumented Code-Explorer extends Text-Explorer
  
  
  (constant Composites
    '((#\open-parenthesis #\close-parenthesis list)
      (#\open-bracket     #\close-bracket     reference)
      (#\open-brace       #\close-brace       literal)))
  
  
  (constant Open-Composites
    '(#\open-parenthesis
      #\open-bracket
      #\open-brace))
  
  
  (constant Close-Composites
    '(#\close-parenthesis
      #\close-bracket
      #\close-brace))
  
  
  (method package (explore-error self message start end)
    (let ((source (get-moniker (single-client model)))
          (start (or start (text-beginning model)))
          (end (or end (text-ending model))))
      (signal (new Explore-Error source start: start end: end message: message))))
  
  
  (method package (present-char self c)
    (cond ((not c)
           "EOF")
          ((memv? c '(#\space #\tab #\return #\linefeed))
           (char-symbol c))
          (else
           (string c))))

  
  (method public virtual (backward-expr self)
    (and (backward-constituent self)
         (begin
           (set! kind 'string)
           kind)))

  
  (method public virtual (forward-expr self)
    (and (forward-constituent self)
         (begin
           (set! kind 'string)
           kind)))

  
  (method public (backward-all-expr self)
    (let ((initial-start (copy start)))
      (while (backward-expr self)
        )
      (set! end initial-start)))

  
  (method public (forward-all-expr self)
    (let ((initial-end (copy end)))
      (while (forward-expr self)
        )
      (set! start initial-end)))


  (method public (collect-backward-exprs self) <list>
    (let ((list '()))
      (while (backward-expr self)
        (set! list (cons (get-mark self) list)))
      list))


  (method public (collect-forward-exprs self n <fx>) <list>
    (let ((fact (new List-Factory)))
      (while (and (>= n 0) (forward-expr self))
        (put fact (get-mark self))
        (decrease! n))
      (get-output fact)))
  
  
  (method virtual (expression-comment? self mark)
    #f)
  
  
  (method public (remove-expression-comments self list)
    (if (some? (~ expression-comment? self) list)
        (let (iterate (scan list))
          (if (pair? scan)
              (let ((mark (car scan)))
                (if (expression-comment? self mark)
                    (if (pair? (cdr scan))
                        (iterate (cddr scan))
                      '())
                  (cons mark (iterate (cdr scan)))))
            '()))
      list))
  

  ;;;
  ;;;; Utilities
  ;;;


  (method public (open-composite? self char)
    (memv? char Open-Composites))


  (method public (close-composite? self char)
    (memv? char Close-Composites))
  
  
  (method public (composite-kind? self kind)
    (memq? kind '(list reference literal)))))
