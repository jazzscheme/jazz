;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Code Syntax
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.editor.Code-Syntax jazz


(import (jazz.automata)
        (jazz.catalog)
        (jazz.editor)
        (jazz.event)
        (jazz.io)
        (jazz.outline)
        (jazz.platform)
        (jazz.text))


(class undocumented Code-Syntax extends Text-Syntax
  

  ;;;
  ;;;; Explorer
  ;;;


  (method override (explorer-class self)
    Code-Explorer)

  
  ;;;
  ;;;; Reading
  ;;;
  
  
  (method package virtual (get-readtable self)
    (current-readtable))
  
  
  (method package (read-text-form self range (string: string #f) (readtable: readtable (get-readtable self)))
    (let ((string (or string (get-string model range))))
      (call-with-input-string (list init: string readtable: readtable)
        read)))
  
  
  (method package (read-text-forms self range (string: string #f) (readtable: readtable (get-readtable self)))
    (let ((string (or string (get-string model range))))
      (call-with-input-string (list init: string readtable: readtable)
        read-all)))

  
  ;;;
  ;;;; Tabulation
  ;;;


  (method override (tabulate self text)
    (if (has-selection? text)
        (let ((selection (get-selection text))
              (lines (selected-lines text))
              (proc (if (shift-down?) (~ untabulate-line self) (~ tabulate-line self))))
          (let ((first-line (first lines))
                (last-line (last lines)))
            (let ((first-delta #f)
                  (last-delta #f))
              (for-each (lambda (line)
                          (let ((delta (proc text line)))
                            (cond ((eq? line first-line) (set! first-delta delta))
                                  ((eq? line last-line) (set! last-delta delta)))))
                        lines)
              (let ((start (get-start selection))
                    (end (get-end selection)))
                (define (adjust pos inc)
                  (if (not inc)
                      pos
                    (let ((adjusted (cond ((> inc 0) (next-pos model pos inc))
                                          ((< inc 0) (previous-pos model pos (- inc)))
                                          (else pos))))
                      (if (= (get-line adjusted) (get-line pos))
                          adjusted
                        pos))))
                
                (set-selection-safe text (new Range$Cell$ (adjust start first-delta) (adjust end last-delta)))))))
      (let* ((pos (get-start text))
             (line (get-line pos))
             (col (get-col pos)))
        (when (and (> line 0) (= col 0))
          (let* ((str (paragraph-string model (- line 1)))
                 (rank (find-if (lambda (c) (not (whitespace? c))) str return: 'position)))
            (if (not rank)
                (insert-string text str)
              (insert-string text (subseq str 0 rank))))))))
  
  
  (method override (tabulate-line self text line)
    (replace-text text
      (new Range$Cell$ (new Cell line 0) (new Cell line 0))
      (list (string #\tab)))
    1)
  
  
  (method override (untabulate-line self text line)
    (define (space/tab? c)
      (memq? c '(#\space #\tab)))
    
    (when (space/tab? (get-char model (new Cell line 0)))
      (replace-text text
        (new Range$Cell$ (new Cell line 0) (new Cell line 1))
        (list ""))
      -1))

  
  ;;;
  ;;;; Coloring
  ;;;
  
  
  (method public (recolorize-syntax self)
    (uncolorize-all self)
    (colorize-syntax self colorizer?: #f))


  (method (uncolorize-all self)
    (for-each (~ uncolorize-row self) (naturals 0 (get-length model))))
  
  
  (method protected virtual (syntax-targets self)
    #f)
  
  
  (method protected virtual (syntax-automata self)
    #f)
  
  
  (method protected virtual (compute-syntax-targets self)
    )
  
  
  (method protected virtual (compute-syntax-automata self)
    (let ((targets (syntax-targets self)))
      (when targets
        (build-search-automata targets #t #f c-constituent?))))
  
  
  (method override (colorize-syntax self (colorizer?: colorizer? #t) (entries?: entries? #t))
    (colorize-range self (text-beginning model) (text-ending model) colorizer?: colorizer?)
    (when entries?
      (colorize-entries self)))

  
  (method override (colorize-range self start end (colorizer?: colorizer? #t))
    (let ((automata (syntax-automata self)))
      (when automata
        (let ((colorizer (and colorizer? (new-colorizer model))))
          (let (iter (found (automata-search automata (new TextTape (get-paragraphs model) start end))))
            (when (not-null? found)
              (let ((info (car found)))
                (bind ((target type) line col) info
                  (let ((start (new Cell line col))
                        (end (new Cell line (+ col (string-length target)))))
                    (iter (colorize-type self found type start end colorizer #f)))))))
          (when colorizer
            (finish-current colorizer))))))
  
  
  (method protected (apply-coloring self colorizer start end style-name)
    (if (not colorizer)
        (apply-style model style-name start end)
      (apply-style colorizer start end style-name)))
  
  
  (method protected virtual (colorize-type self found type start end colorizer recolorize?)
    (error "Unknown type: {s}" type))
  
  
  (method protected virtual (colorize-balanced-comment self found start end colorizer style)
    (continuation-capture
      (lambda (return)
        (while (not-null? found)
          (let ((info (car found)))
            (bind ((target type) line col) info
              (if (eq? type 'balanced-comment-backward)
                  (let ((end (new Cell line (+ col 2))))
                    (apply-coloring self colorizer start end style)
                    (continuation-return return (cdr found)))
                (set! found (cdr found))))))
        found)))
  
  
  (method protected (colorize-balanced-comment-backward self found start end colorizer style recolorize? (open: open "/*") (close: close "*/"))
    (cdr found)
    @irregex-to-convert
    (when recolorize?
      (let ((found (text-regular-search (list (make-search-context close user-data: 'close) (make-search-context open user-data: 'open)) position: start reversed?: #t)))
        (when found
          (bind (pos . (target type)) found
            (when (eq? type 'open)
              (apply-coloring colorizer pos end style)
              (cdr found)))))))
  
  
  (method protected (colorize-line-comment self found start end colorizer line-style title-style title-char)
    (let ((title? (and title-char (eqv? (get-char model (next-pos model start 2)) title-char))))
      (if (not title?)
          (apply-coloring self colorizer start (new Cell (get-line start) (paragraph-length model (get-line start))) line-style)
        (apply-coloring self colorizer start (nu+ start 3) line-style)
        (apply-coloring self colorizer (nu+ start 3) (new Cell (get-line start) (paragraph-length model (get-line start))) title-style))
      (let ((line (get-line start)))
        (set! found (cdr found))
        (while (and (not-null? found) (= (second (car found)) line))
          (set! found (cdr found)))
        found)))
  
  
  (method protected (colorize-keyword self found start end colorizer style)
    (apply-coloring self colorizer start end style)
    (cdr found))
  
  
  (method (find-specifier-end self start)
    (let* ((line (get-line start))
           (col (get-col start))
           (str (paragraph-string model line)))
      (unless (>= (+ col 1) (cardinality str))
        (let ((nxt (element str (+ col 1))))
          (unless (or (eqv? nxt #\space) (eqv? nxt #\=))
            (let ((col (find-balanced #\< #\> str start: (+ col 1) return: 'position)))
              (when col
                (new Cell line (+ col 1)))))))))
  
  
  (method override (recolorize-range self syntax-style start end)
    (let ((range (new Range$Cell$ start end)))
      (stylize-range model range (get-default-style model) #f)
      (colorize-range self start end)
      (when syntax-style
        (push-style model range syntax-style))))

  
  (method override (recolorize-text self syntax-style start end-line)
    (let ((start (new Cell (get-line start) 0))
          (end (new Cell end-line (paragraph-length model end-line))))
      (recolorize-range self syntax-style start end)))
  
  
  (method public virtual (colorize-entries self)
    (let ((entries (get-parsed-entries self)))
      (when entries
        (for-each (~ colorize-entry self) entries))))
  
  
  (method protected virtual (get-parsed-entries self)
    #f)

  
  (method (colorize-entry self entry)
    (let* ((name (get-name entry))
           (line (get-line entry))
           (column (get-column entry))
           (start (new Cell line column))
           (end (new Cell line (+ column (string-length name)))))
      ;; until the time test of the previous method becomes functional
      (when (<= line (get-limit model))
        (stylize model 'Definition start end)
        @cannot-work-yet
        (when (equal? Class-Entry (class-of entry))
          (colorize-entry (get-extends entry))
          (colorize-entry (get-implements entry)))
        (for-each (~ colorize-entry self) (get-definitions entry)))))
  
  
  (method public (recolorize-entries self)
    (let ((entries (get-parsed-entries self)))
      (when entries
        (uncolorize-all self)
        (colorize-syntax self entries?: #f)
        (for-each (~ colorize-entry self) entries))))))
