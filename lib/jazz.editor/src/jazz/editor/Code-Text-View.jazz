;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Code Text View
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.editor.Code-Text-View jazz


(import (jazz.action)
        (jazz.application)
        (jazz.catalog)
        (jazz.catalog.edit)
        (jazz.editor)
        (jazz.editor.lisp)
        (jazz.event)
        (jazz.feedback)
        (jazz.handler)
        (jazz.history)
        (jazz.io)
        (jazz.markup)
        (jazz.menu)
        (jazz.project)
        (jazz.text)
        (jazz.ui)
        (jazz.view))


(class undocumented Code-Text-View extends Text-View
  
  
  (slot matching-highlights initialize '())
  
  
  (method override (new-model self)
    (new Text-Model base-style: {Text-Style Code-Base} left-padding: 12))
  
  
  (method override (new-syntax self)
    (new Code-Syntax model))
  
  
  (method override (preferences self)
    (new Code-Text-Preferences))
  
  
  (method override (install self rest)
    (nextmethod self rest)
    (let ((pref (preferences self)))
      (when pref
        (add-style self 'Match (get-match-style pref)))))

  
  ;;;
  ;;;; Host
  ;;;
  
  
  (method override (host-workspaces self)
    '(text debugger test reference emacs empty live))
  
  
  ;;;
  ;;;; Access
  ;;;
  
  
  (method override (tab-press self evt)
    (if (or (has-completion? self)
            (not accepts-returns?))
        (nextmethod self evt)
      (if (and (supports-tabs? syntax)
               (or (empty-selection? self) (= (get-line (get-start self)) (get-line (get-end self)))))
          (insert-char self #\tab)
        (tabulate self))))


  (method override (char-press self key)
    (nextmethod self key)
    (when (eqv? key #\space)
      (show-arguments self)))


  (method override (context-menu self evt)
    (let ((pos (get-position evt)))
      (receive (shift? control? alt? meta?) (get-down evt)
        (let ((move-caret
                (cond ((and (not control?) (not shift?) (not alt?)) 'outside-selection)
                      ((and (not control?) shift? (not alt?)) 'never)
                      ((and control? shift? (not alt?)) 'never)
                      (else 'always))))
          (context-menu-click self pos move-caret: move-caret))
        (cond ((and (not control?) shift? (not alt?)) (edit-definitions self pos))
              ((and control? shift? (not alt?)) (edit-references self pos))
              (else (track-popup-menu self (get-context-menu self) pos))))))

  
  ;;;
  ;;;; Actions
  ;;;
  
  
  (method override (focus-actions self)
    (cons (find-actions 'code-text)
          (nextmethod self)))
  
  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method (on-find-imports self evt)
    (let ((expr (current-expr self)))
      (if (symbol? expr)
          (with-cursor :wait
            (lambda ()
              (find-imports (get-syntax self) expr)))
        (message-box "Please select the symbol that will be searched for imports"))))
  
  
  (method (on-find-all-imports self evt)
    )

  
  ;;;
  ;;;; Moving
  ;;;
  
  
  (method override (backward-compound self (extend?: extend? #f))
    (backward-expr self extend?: extend?))
  
  
  (method override (forward-compound self (extend?: extend? #f))
    (forward-expr self extend?: extend?))
  
  
  (method override (upward-compound self)
    (exit-composite self))
  
  
  (method override (downward-compound self)
    (enter-composite self))
  
  
  (method package (on-backward-composite self evt)
    (backward-expr self))
  
  
  (method package (on-forward-composite self evt)
    (forward-expr self))
  
  
  (method package (on-backward-outline self evt)
    (let ((extend? (get-property evt extend?:))
          (expl <Text-Explorer> (new (explorer-class self) model end: (get-start self))))
      (when (backward-expr expl)
        (if extend?
            (change-selection self (get-start expl))
          (set-selection self (get-range expl))))))
  
  
  (method package (on-forward-outline self evt)
    (let ((extend? (get-property evt extend?:))
          (expl <Text-Explorer> (new (explorer-class self) model end: (get-end self))))
      (when (forward-expr expl)
        (if extend?
            (change-selection self (get-end expl))
          (set-selection self (get-range expl))))))
  
  
  (method package (on-enter-composite self evt)
    (enter-composite self))
  
  
  (method package (on-exit-composite self evt)
    (exit-composite self))
  
  
  (method package virtual (backward-expr self (extend?: extend? locked-anchor?))
    (let ((expl <Text-Explorer> (new (explorer-class self) model start: (get-start self))))
      (when (backward-expr expl)
        (if extend?
            (change-selection self (get-start expl))
          (set-caret self (get-start expl))))))


  (method package virtual (forward-expr self (extend?: extend? locked-anchor?))
    (let ((expl <Text-Explorer> (new (explorer-class self) model end: (get-end self))))
      (when (forward-expr expl)
        (if extend?
            (change-selection self (get-end expl))
          (set-caret self (get-end expl))))))
  
  
  (method package virtual (enter-composite self)
    (let ((expl <Text-Explorer> (new (explorer-class self) model start: (get-start self) end: (get-end self))))
      (when (enter-composite expl)
        (set-caret self (get-end expl)))))
  
  
  (method package virtual (exit-composite self)
    (let ((expl <Text-Explorer> (new (explorer-class self) model start: (get-end self) end: (get-end self))))
      (when (exit-list expl)
        (set-caret self (get-end expl)))))
  
  
  (method override (move-caret self pos direction shift?)
    (nextmethod self pos direction shift?)
    (end-completion self))
  
  
  (method (on-transpose-expr self evt)
    (transpose-expr self))
  
  
  (method public (transpose-expr self)
    (transpose-movements self forward-expr backward-expr))

  
  ;;;
  ;;;; Definitions
  ;;;
  
  
  (method package virtual (get-context self)
    #f)
  
  
  (method protected virtual (edition-workspace self)
    #f)

  
  (method (on-edit-definitions self evt)
    (let ((form (current-expr self))
          (appl (current-application)))
      (when form
        (cond ((and (supports-expr? syntax) (string? form))
               (edit-file appl (new File (tokenise-filename form))))
              ((file? form)
               (edit-file appl form workspace: (edition-workspace self)))
              (else
               (let ((item (current-history-item self)))
                 (if (and (has-effective-selection? self) (composite-reference? form))
                     (edit-composite-reference appl item form)
                   (let ((target (standardize-form self form #t)))
                     (if (not target)
                         (bell)
                       (edit-definitions appl target workspace: (edition-workspace self) context: (get-context self) history-item: item))))))))))

  
  (method (on-edit-references self evt)
    (let ((form (current-expr self))
          (appl (current-application)))
      (when form
        (let ((target (standardize-form self form (empty-effective-selection? self))))
          (if (not target)
              (bell)
            (edit-references appl target context: (get-context self) history-item: (current-history-item self)))))))
  
  
  (method package (standardize-form self form extract?)
    (let ((target (cond ((string? form) form)
                        ((symbol? form) (symbol->string form))
                        ((keyword? form) (string-append (keyword->string form) ":"))
                        (else #f))))
      (if (or (not target) (not extract?))
          target
        (cond ((tag-string? target) (tag->name target))
              ((dispatch-string? target) (dispatch->name target))
              ((reference-string? target) (reference->name target))
              (else target)))))
    
  
  (method protected virtual (edit-symbol-class self symbol)
    #f)


  (method package (edit-definitions self pos)
    (let ((form (expr-at self (view->text self pos))))
      (when form
        (cond ((and (supports-expr? syntax) (string? form))
               (edit-file (current-application) (new File (tokenise-filename form))))
              ((file? form)
               (edit-file (current-application) form workspace: (edition-workspace self)))
              (else
               (let ((appl (current-application))
                     (cataloguer (get-cataloguer)))
                 (when cataloguer
                   (let ((item (current-history-item self))
                         (target (standardize-form self form #t)))
                     (if (not target)
                         (bell)
                       (let ((definitions (get-coalesced-definitions cataloguer target context: (get-context self))))
                         (case (length definitions)
                           ((0) (bell))
                           ((1) (add-history appl item) (edit-entry (car definitions)))
                           (else (track-popup-menu self (new Definitions-Menu definitions: definitions history-item: item) pos)))))))))))))


  (method package (edit-references self pos)
    (let ((form (expr-at self (view->text self pos))))
      (when form
        (let ((appl (current-application))
              (cataloguer (get-cataloguer)))
          (when cataloguer
            (let ((item (current-history-item self))
                  (target (standardize-form self form #t)))
              (if (not target)
                  (bell)
                (let ((references (get-references cataloguer target context: (get-context self))))
                  (case (length references)
                    ((0) (bell))
                    ((1) (add-history appl item) (edit-textual-reference (car references) target))
                    (else (track-popup-menu self (new References-Menu target: target definitions: references history-item: item) pos)))))))))))
  
  
  (definition (edit-composite-reference appl item form)
    (let ((entry (locator->entry form)))
      (if (not entry)
          (bell)
        (add-history appl item)
        (edit-entry entry))))

  
  ;;;
  ;;;; History
  ;;;
  
  
  (method override (current-history-item self)
    (let ((selection (get-selection self))
          (moniker (get-moniker self)))
      (if (not moniker)
          (let ((frame (get-frame self)))
            (and frame
                 (new History-Document-Item frame selection)))
        (new History-File-Item moniker selection))))

  
  ;;;
  ;;;; Save
  ;;;
  
  
  (method override (save-content self moniker)
    (nextmethod self moniker)
    (update-catalog self))

  
  ;;;
  ;;;; Catalog
  ;;;
  
  
  (method (update-catalog self)
    (let ((moniker (get-moniker self)))
      (when moniker
        (let ((catalog (find-catalog self)))
          (when catalog
            (post-catalog
              (lambda ()
                (update-file catalog moniker))))))))
  
  
  (method (find-catalog self)
    (let ((moniker (get-moniker self)))
      (and moniker
           (let ((cataloguer (get-cataloguer)))
             (and cataloguer
                  (let ((file-entry (cache-file-entry moniker)))
                    (and file-entry
                         (get-catalog file-entry))))))))

  
  ;;;
  ;;;; Evaluation
  ;;;
  
  
  (method (on-evaluate self evt)
    (evaluate-selection self))
  
  
  (method (on-evaluate-delayed self evt)
    (parameterize ((delay-evaluate? #t))
      (evaluate-selection self)))
  
  
  (method (on-evaluate-buffer self evt)
    (evaluate-buffer self))
  
  
  (method package virtual (evaluate-selection self)
    )
  
  
  (method package virtual (evaluate-buffer self)
    )
  
  
  (method package virtual (evaluate-range self range . rest)
    )

  
  ;;;
  ;;;; Tabulation
  ;;;


  (method public virtual (tabulate self)
    (tabulate syntax self))


  (method public virtual (tabulate-return self)
    (tabulate-return syntax self))


  ;;;
  ;;;; Completion
  ;;;
  
  
  (method override (auto-complete? self)
    #t)


  (method override (completion-name self pos)
    (and (not (text-constituent? syntax (get-char self (if (has-selection? self) (get-end self) pos))))
         (let ((prev (previous-cell self pos)))
           (and prev
                (let ((c (get-char self prev)))
                  (and (not (string-delimiter? c))
                       (and (text-constituent? syntax c)
                            (let ((expl <Text-Explorer> (new (explorer-class self) model start: pos end: pos)))
                              (and (and (backward-expr expl) (memq? (get-kind expl) '(symbol specifier tag keyword string)))
                                   (let ((c (char-backward expl 0)))
                                     (and (or (not c) (not (string-delimiter? c)))
                                          (get-symbol-string expl))))))))))))
  
  
  (method override (symbol-completions self name)
    (if (numeric? name)
        '()
      (let ((cataloguer (get-cataloguer)))
        (if (not cataloguer)
            '()
          (let ((table (make-table test: equal?))
                (len (string-length name)))
            (add-completions cataloguer table name context: (get-context self))
            (for-each-alias (get-root-alias)
              (lambda (alias)
                (let ((anchor (get-anchor alias)))
                  (when anchor
                    (let ((anchor-name (symbol->string anchor)))
                      (when (compare-n anchor-name name len)
                        (table-set! table anchor-name #t)))))))
            (table-keys table))))))

  
  ;;;
  ;;;; Coloring
  ;;;


  (method package (on-recolorize-syntax self evt)
    (with-cursor :wait
      (lambda ()
        (recolorize-syntax self))))
  
  
  (method package (recolorize-syntax self)
    (recolorize-syntax syntax))
    
  
  ;;;
  ;;;; Arguments
  ;;;
  
  
  (method protected virtual (show-arguments self)
    )
  
  
  ;;;
  ;;;; Arrow Keys
  ;;;
  
  
  (method override (left-arrow-move self extend? word?)
    (convert-completion self)
    (nextmethod self extend? word?))
  
  
  (method override (right-arrow-move self extend? word?)
    (convert-completion self)
    (nextmethod self extend? word?))
  
  
  (method override (up-arrow-move self extend? scroll?)
    (convert-completion self)
    (nextmethod self extend? scroll?))
  
  
  (method override (down-arrow-move self extend? scroll?)
    (convert-completion self)
    (nextmethod self extend? scroll?))
  
  
  ;;;
  ;;;; Tabify
  ;;;
  
  
  (method (on-tabify self evt)
    (tabify self))
  
  
  (method (tabify self)
    (define (tabify-line line)
      @to-convert-to-outline-text
      (let* ((str (paragraph-string line))
             (char (find-if (lambda (c) (not (whitespace? c))) str return: 'position)))
        (when (and char (> char 0))
          (let* ((column (char->column line char))
                 (tabs   (fxfloor/ column tab-size))
                 (spaces (modulo column tab-size)))
            (replace-text (new Range$Cell$ (new Cell line 0) (new Cell line char))
                          (list (append! (make-string tabs #\tab)
                                         (make-string spaces #\space))))))))
    
    (for-each tabify-line (naturals (get-line (get-start self)) (+ (get-line (get-end self)) 1))))
  

  ;;;
  ;;;; Match
  ;;;
  
  
  (method protected virtual (match-backwards? self char)
    #f)
  
  
  (method protected virtual (match-forwards? self char)
    #f)


  (method (flash-matching-character self pref)
    (define flash-delay
      (if (eq? (event-type) 'keyboard)
          0
        (get-flash-delay pref)))
    
    (define flash-duration
      (get-flash-duration pref))
    
    (define (flash-character highlight)
      (let ((start (get-start (get-range highlight)))
            (add (lambda () (add-matching-highlight self highlight)))
            (remove (lambda () (remove-matching-highlights self))))
        (add-text-action self add)
        (add-text-action self remove)
        (if (cell-displayed? self start)
            (thread-start!
              (new-thread
                (lambda ()
                  (sleep flash-delay)
                  (send-event
                    (lambda ()
                      (run-text-action self add)))
                  (sleep flash-duration)
                  (send-event
                    (lambda ()
                      (run-text-action self remove))))
                'flash))
          (let ((expl <Text-Explorer> (new (explorer-class self) model start: (nu+ start 1) end: (nu+ start 1))))
            (user-message "{l detail: :human}" (map (lambda (mark)
                                                      (get-string self (get-range mark)))
                                                    (collect-forward-exprs expl 3)))))))
    
    (let ((type (event-type))
          (pref (preferences self)))
      (when (and pref (eq? (get-match-action pref) 'flash))
        (remove-all-text-actions self)
        (remove-matching-highlights self)
        (when type
          (let ((highlight (find-matching-highlight self (neq? type 'keyboard))))
            (when (and highlight (neq? flash-delay 'infinity))
              (flash-character (car highlight))))))))
  
  
  (method (highlight-matching-character self pref)
    (define (highlight-character)
      (let ((highlight (find-matching-highlight self)))
        (when highlight
          (add-matching-highlight self (car highlight))
          (when (eq? (get-highlight-mode pref) 'both)
            (add-matching-highlight self (cdr highlight))))))
    
    (remove-matching-highlights self)
    (highlight-character))
  
  
  (method (find-matching-highlight self (forward? #t))
    (define (find-backward pos)
      (and (not (at-beginning? self))
           (let ((previous (previous-cell self pos)))
             (and (match-backwards? self (get-char self previous))
                  (catch (Explore-Error err
                           (bell)
                           #f)
                    (let ((expl <Text-Explorer> (new (explorer-class self) model start: pos)))
                      (and (backward-expr expl)
                           (let ((start (get-start expl)))
                             (cons (new-highlight start (next-cell self start))
                                   (new-highlight previous pos))))))))))
    
    (define (find-forward pos)
      (and (not (at-end? self))
           (and (match-forwards? self (get-char self pos))
                (catch (Explore-Error err
                         (bell)
                         #f)
                  (let ((expl <Text-Explorer> (new (explorer-class self) model start: pos)))
                    (and (forward-expr expl)
                         (let ((end (get-end expl)))
                           (cons (new-highlight (previous-cell self end) end)
                                 (new-highlight pos (next-cell self pos))))))))))
    
    (define (new-highlight start end)
      (let ((range (new-range self start end))
            (style (locate-style self 'Match)))
        (new Text-Highlight self range style show-unfocused?: #f)))
    
    (and (not (macro-playing? (current-application)))
         (and (empty-selection? self)
              (let ((pos (get-caret self)))
                (or (find-backward pos)
                    (and forward? (find-forward pos)))))))
  
  
  (method (add-matching-highlight self highlight)
    (add-highlight self highlight)
    (invalidate-highlight self highlight)
    (set! matching-highlights (cons highlight matching-highlights)))
  
  
  (method (remove-matching-highlights self)
    (for-each (lambda (highlight)
                (remove-highlight self highlight)
                (invalidate-highlight self highlight))
              matching-highlights)
    (set! matching-highlights '()))
  
  
  (method override (selection-change self)
    (let ((pref (preferences self)))
      (when pref
        (case (get-match-action pref)
          ((flash) (flash-matching-character self pref))
          ((highlight) (highlight-matching-character self pref))))))
  
  
  ;;;
  ;;;; Java
  ;;;
    
  
  (method (on-browse-java self evt)
    (browse-java self))
  
  
  (method (browse-java self)
    @wait
    (let ((expr (current-expr)))
      (if (is-not? expr Symbol)
          (bell)
        (let* ((classname (->string expr))
               (javaClass (lookupClass org.apache.bcel.Repository classname)))
          (if (not javaClass)
              (error "Unable to find java class: {a}" classname)
            (let* ((host (new-frame Java-Manager))
                   (manager (get-guest host)))
              (browse-classes manager (list classname))))))))


  ;;;
  ;;;; Read/Write
  ;;;
  
  
  (method (on-set-read/write self evt)
    (let ((moniker (get-moniker (get-document-controller self))))
      (set-read/write moniker)
      (update-status self))))


;;;
;;;; Definitions-Menu
;;;


(class Definitions-Menu extends Context-Menu
  
  
  (property definitions  accessors generate)
  (property history-item accessors generate)
  
  
  (method override (finish self rest)
    (nextmethod self rest)
    (if (< (length definitions) 20)
        (for-each (lambda (definition)
                    (let ((title (present definition)))
                      (new Label-Item parent: self title: title action-handler: (new Event-Handler target: self method-name: 'on-action properties: (list definition: definition)))))
                  (sort string<? definitions key: present))
      (let* ((menu self)
             (create-item (lambda (user-data title parent)
                            (new Label-Item parent: parent title: title action-handler: (new Event-Handler target: menu method-name: 'on-action properties: (list definition: user-data)))))
             (get-string present))
        (make-condensed-menu self definitions create-item key: get-string))))
  
  
  (method package (on-action self evt)
    (add-history (current-application) history-item)
    (edit-entry (get-property evt definition:))))


;;;
;;;; References-Menu
;;;


(class References-Menu extends Context-Menu
  
  
  (property target       accessors generate)
  (property definitions  accessors generate)
  (property history-item accessors generate)
  
  
  (method override (finish self rest)
    (nextmethod self rest)
    (if (< (length definitions) 20)
        (for-each (lambda (definition)
                    (let ((title (->string (present definition))))
                      (new Label-Item parent: self title: title action-handler: (new Event-Handler target: self method-name: 'on-action properties: (list definition: definition)))))
                  (sort string<? definitions key: present))
      (let* ((menu self)
             (create-item (lambda (user-data title parent)
                            (new Label-Item parent: parent title: title action-handler: (new Event-Handler target: menu method-name: 'on-action properties: (list definition: user-data)))))
             (get-string present))
        (make-condensed-menu self definitions create-item key: get-string))))
  
  
  (method package (on-action self evt)
    (add-history (current-application) history-item)
    (edit-textual-reference (get-property evt definition:) target))))
