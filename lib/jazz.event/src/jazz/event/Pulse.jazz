;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Pulses
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.event.Pulse jazz


(import (jazz.event))


(class Pulse extends Object
  
  
  (property name    initialize #f accessors generate)
  (property delay   initialize #f accessors generate)
  (property period  initialize #f accessors generate)
  (property repeat? initialize #f accessors generate)
  (property execute initialize #f accessors generate)
  
  
  (slot thread initialize #f)
  
  
  (method override (initialize self name period execute . rest)
    (bind-keywords ((delay #f) (repeat? #t)) rest
      (nextmethod self)
      (set! self.name name)
      (set! self.period period)
      (set! self.delay delay)
      (set! self.repeat? repeat?)
      (set! self.execute execute)
      (set! self.thread (start-loop self))))
  
  
  (method override (destroy self)
    (when thread
      (let ((thread self.thread))
        (set! self.thread #f)
        (exit-thread thread)))
    (nextmethod self))
  
  
  (method (terminated? self)
    (not thread))
  
  
  ;;;
  ;;;; Loop
  ;;;
  
  
  (method (start-loop self)
    (thread-start!
      (new-thread
        (lambda ()
          (declare (proper-tail-calls))
          (let (loop (timeout (or delay period)))
            (sleep timeout)
            (unless (terminated? self)
              (synchronize-event
                (lambda ()
                  (unless (terminated? self)
                    (execute)))))
            (when repeat?
              (loop period))))
        name)))))
