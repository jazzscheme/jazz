;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Events
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module jazz.event jazz


(hub deliver-event)
(hub get-alt?)
(hub get-control?)
(hub get-delay)
(hub get-down)
(hub get-event-consumer)
(hub get-kind)
(hub get-meta?)
(hub get-modifiers)
(hub get-name)
(hub get-period)
(hub get-properties)
(hub get-property)
(hub get-sender)
(hub get-shift?)
(hub has-property?)
(hub set-delay)
(hub set-event-consumer)
(hub set-name)
(hub set-property)


(export (jazz.event.autoload))
(import (jazz.event.autoload))


;;;
;;;; Event-Consumer
;;;


(interface undocumented Event-Consumer
  
  
  (method public virtual abstract (get-event-consumer self))
  (method public virtual abstract (set-event-consumer self consumer))
  (method public virtual abstract (deliver-event self handler target proc evt)))


;;;
;;;; Event
;;;

;; delay platform references to not introduce a compilation
;; dependency for modules containing event or handler literals


(definition package (construct-event kind . rest)
  (jazz.platform:parse-event-modifiers rest
    (lambda (modifiers properties)
      (apply new Event kind #f modifiers properties))))


(definition public (make-event class kind sender . properties)
  (apply new class kind sender (jazz.platform:modifiers-mask) properties))


(definition public (clone-event evt . properties)
  (let ((event (copy evt)))
    (for-each-property (lambda (keyword value)
                         (set-property event keyword value))
                       properties)
    event))


;;;
;;;; Hooks
;;;


(definition *event-hooks*
  '())


(definition public (register-event-hook hook)
  (set! *event-hooks* (append *event-hooks* (list hook))))

(definition public (unregister-event-hook hook)
  (set! *event-hooks* (remove! hook *event-hooks*)))


(definition public (hook-event event)
  (let ((hooks *event-hooks*))
    (when (not-null? hooks)
      (for-each (lambda (hook)
                  (hook event))
                hooks))))


(definition *event-access-hooks*
  '())


(definition public (register-event-access-hook hook)
  (set! *event-access-hooks* (append *event-access-hooks* (list hook))))

(definition public (unregister-event-access-hook hook)
  (set! *event-access-hooks* (remove! hook *event-access-hooks*)))


(definition public (hook-event-access event)
  (let ((hooks *event-access-hooks*))
    (when (not-null? hooks)
      (for-each (lambda (hook)
                  (hook event))
                hooks))))


;;;
;;;; Thread
;;;


(definition public (event-thread)
  (primordial-thread))


(definition public (event-thread?)
  (eq? (current-thread) (event-thread)))


;; delayed events are part of the current event and
;; are thus processed in priority before other events
(definition public (delay-event thunk)
  (write-delayed-event thunk)
  ;; to unblock thread-process
  (thread-write (event-thread) (lambda ())))


(definition public (post-event thunk)
  (thread-post (event-thread) 'post-event
    thunk))


(definition public (block-event thunk)
  (thread-block (event-thread) 'block-event
    thunk))


(definition public (send-event thunk)
  (thread-execute (event-thread) 'send-event
    thunk))


(definition public (call-event thunk)
  (thread-call (event-thread) 'call-event
    thunk))


;;;
;;;; Synchronize
;;;


(definition protected event-synchronizer
  send-event)

(definition protected (set-event-synchronizer proc)
  (set! event-synchronizer proc))


(definition public (synchronize-event thunk)
  (event-synchronizer thunk)))
