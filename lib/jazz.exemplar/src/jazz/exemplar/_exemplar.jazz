
;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Exemplars
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module jazz.exemplar jazz


;;;
;;;; Exemplar
;;;


(class Exemplar extends Object
  
  
  (slot protected domain)
  (slot protected base)
  (slot protected ascendants initialize #f)
  
  
  (method override (initialize . rest)
    (bind-keywords ((domain #f) (base '()) . others) rest
      (nextmethod)
      (set! domain~self (or domain (default-domain)))
      (set! base~self (listify base))
      (initialize-attributes others)))
  
  
  (method protected virtual (initialize-attributes attributes)
    (for-each-property (lambda (key value)
                         (set-attribute (keyword->symbol key) value))
                       attributes))
  
  
  (method override (copy-object deep?)
    (let ((exemplar (new (class-of self))))
      (set-domain~ exemplar domain)
      (set-base~ exemplar base)
      (for-each (lambda (attribute)
                  (set-attribute~ exemplar attribute (get-attribute attribute)))
                (get-attributes))
      exemplar))


  (method override (compare-object target)
    (cond ((is-not? target (class-of self))
           :incompatible)
          ((and (equal? base (get-base~ target))
                (every? (lambda (attribute)
                          (equal? (get attribute) (get~ target attribute)))
                        (get-attributes)))
           :equal)
          (else
           :not-equal)))

  
  (method override (print output readably)
    (let ((presentation (present)))
      (format output "~{{a}{?: {a}~}}"
        (reference-name (category-name (class-of self)))
        (not (empty-string? presentation)) presentation)))
  
  
  (method public (present)
    (define (owned-attributes)
      (let ((fact (new List-Factory)))
        (for-each (lambda (attribute)
                    (let ((value (get-attribute attribute)))
                      (when (specified? value)
                        (put~ fact (format "{s}" (symbol->keyword attribute)))
                        (put~ fact (present-attribute attribute value)))))
                  (get-attributes))
        (get-output~ fact)))
    
    (let ((attributes (owned-attributes)))
      (let ((has-base? (not-null? base))
            (has-attributes? (not-null? attributes)))
        (format "{?:{l}~}{a}{?:{l detail: :human}~}"
                has-base? base
                (if (and has-base? has-attributes?) " " "")
                has-attributes? attributes))))
  
  
  (method protected virtual (present-attribute attribute value)
    (->string value :reader))
  
  
  ;;;
  ;;;; Inheritance
  ;;;
  
  
  (method public (inherits? name/target)
    (define (inherits-exemplar? target)
      (if (eq? self target)
          #t
        (continuation-capture
          (lambda (return)
            (for-each-ascendant
              (lambda (ascendant)
                (when (eq? ascendant target)
                  (continuation-return return #t))))
            #f))))
    
    (if (is? name/target Exemplar)
        (inherits-exemplar? name/target)
      (let ((target (locate~ domain name/target error?: #f)))
        (when target
          (inherits-exemplar? target)))))
  
  
  (method public (for-each-ascendant proc)
    (for-each (lambda (ascendant)
                (proc ascendant)
                (for-each-ascendant~ ascendant proc))
              (get-ascendants)))
  
  
  (method public (extend . rest)
    (let ((exemplar (new (class-of self))))
      (set-domain~ exemplar domain)
      (modify-from~ exemplar self)
      (for-each-property (lambda (keyword value)
                           (set-attribute~ exemplar (keyword->symbol keyword) value))
                         rest)
      exemplar))
  
  
  ;;;
  ;;;; Modify
  ;;;
  
  
  (method public (modify-from from)
    (unless (eq? self from)
      (set-base (get-base~ from))
      (for-each (lambda (attribute)
                  (set-attribute attribute (get-attribute~ from attribute)))
                (get-attributes))))
  
  
  ;;;
  ;;;; Domain
  ;;;
  
  
  (method protected virtual (default-domain)
    #f)
  
  
  (method public (get-domain)
    domain)
  
  
  (method public (set-domain d)
    (set! domain d)
    (reset-ascendants))
  
  
  (method public (intern)
    (intern~ domain self))
  
  
  ;;;
  ;;;; Base
  ;;;
  
  
  (method public (get-base)
    base)
  
  
  (method public (set-base b)
    (set! base (listify b))
    (reset-ascendants))
  
  
  ;;;
  ;;;; Ascendants
  ;;;
  
  
  (method public (get-ascendants)
    (when (not ascendants)
      (set! ascendants (map (lambda (name)
                              (locate~ domain name))
                            (reverse base))))
    ascendants)
  
  
  (method (reset-ascendants)
    (set! ascendants #f))
  
  
  ;;;
  ;;;; Attributes
  ;;;
  
  
  (method public (supports? attribute)
    (memq? attribute (get-attributes)))
  
  
  (method protected virtual (get-attributes)
    '())
  
  
  (method protected virtual (get-attribute-default attribute)
    (unspecified))
  
  
  (method protected virtual (get-attribute-no-default attribute)
    (unspecified))
  
  
  (method protected virtual (get-attribute attribute)
    (unknown-attribute attribute))
  
  
  (method protected virtual (set-attribute attribute value)
    (unknown-attribute attribute))
  
  
  (method protected virtual (attribute=? attribute x y)
    (eqv? x y))
  
  
  (method protected (attribute/unspecified=? attribute x y)
    (or (and (unspecified? x) (unspecified? y))
        (and (specified? x) (specified? y) (attribute=? attribute x y))))
  
  
  (definition (unknown-attribute attribute)
    (error "Unknown attribute: {s}" attribute))
  
  
  ;;;
  ;;;; Access
  ;;;
  
  
  (method public virtual (get attribute)
    (unspecified))
  
  
  (method public virtual (set attribute value)
    (error "Unknown attribute: {t}" attribute)))


(definition public (construct-exemplar class rest)
  (let (iterate (base '()) (scan rest))
    (if (or (null? scan) (not (symbol? (car scan))))
        (apply new class base: base scan)
      (iterate (append base (list (car scan))) (cdr scan)))))


(definition public (parse-exemplar class string)
  (construct-exemplar class (read-string-content string)))


(definition public (register-exemplar name exemplar domain)
  (let ((actual (locate-own~ domain name error?: #f)))
    (cond (actual
           (modify-from~ actual exemplar)
           actual)
          (else
           (set-domain~ exemplar domain)
           (register~ domain name exemplar)
           exemplar))))


(definition public (exemplar+=? x y)
  (or (and (not x) (not y))
      (and x y (exemplar=? x y))))


(specialize inline as exemplar=? (= e1 <Exemplar> e2 <Exemplar>) <bool>
  (and (eq? (class-of e1) (class-of e2))
       (equal? (get-base~ e1) (get-base~ e2))
       (every? (lambda (attribute)
                 (attribute/unspecified=?~ e1 attribute (get-attribute~ e1 attribute) (get-attribute~ e2 attribute)))
               (get-attributes~ e1))))


;; should be possible to do a generic hash function by adding the class, the base and the attributes
(definition public (exemplar-hash e <Exemplar>)
  ;; fixme
  0)


;;;
;;;; Exemplar-Domain
;;;


(class undocumented Exemplar-Domain extends Object
  
  
  (slot name)
  (slot initer)
  (slot index)
  (slot interned)
  (slot chained)
  
  
  (method override (initialize (name: name #f) (initer: initer #f) (intern?: intern? #f) (chained: chained '()))
    (nextmethod)
    (set! name~self name)
    (set! initer~self initer)
    (set! index~self (make-table test: eq?))
    (set! interned~self (and intern? (new Axis 0)))
    (set! chained~self chained))
  
  
  (method override (print output readably)
    (print-unreadable self output
      (lambda (output)
        (format output "{?{a}~}" name))))
  
  
  ;;;
  ;;;; Exemplar
  ;;;
  
  
  (method public (register name exemplar)
    (table-set! index name exemplar))
  
  
  (method public (reference rank/name)
    (if (integer? rank/name)
        (element (get-interned) rank/name)
      (locate rank/name)))
  
  
  ;;;
  ;;;; Initer
  ;;;
  
  
  (method (init)
    (when initer
      (let ((thunk initer))
        (set! initer #f)
        (thunk))))
  
  
  ;;;
  ;;;; Index
  ;;;
  
  
  (method public (get-index)
    (init)
    index)
  
  
  (method public (locate-own name (error?: error? #t))
    (or (table-ref (get-index) name #f)
        (when error?
          (error "Unable to locate: {t}" name))))
  
  
  (method public (locate name (error?: error? #t))
    (or (table-ref (get-index) name #f)
        (find-object (lambda (domain) (locate~ domain name error?: #f)) chained)
        (when error?
          (error "Unable to locate: {t}" name))))
  
  
  (method public (symbolize target (test: test #f))
    (let ((test (or test exemplar=?)))
      (continuation-capture
        (lambda (return)
          (iterate-table (get-index)
            (lambda (name exemplar)
              (when (test target exemplar)
                (continuation-return return (new (class-of target) base: name)))))
          target))))
  
  
  ;;;
  ;;;; Interned
  ;;;
  
  
  (method public (get-interned)
    (init)
    interned)
  
  
  (method public (set-interned value)
    (set! interned (coerce value Axis)))
  
  
  (method public (empty-interned)
    (set! interned (new Axis 0)))
  
  
  (method public (intern exemplar)
    (init)
    (if (not interned)
        exemplar
      (or (find-in interned exemplar test: exemplar=?)
          (begin
            (set-domain~ exemplar self)
            (axis-add interned exemplar)
            exemplar))))
  
  
  (method public (get-rank exemplar)
    (find (get-interned) exemplar))
  
  
  ;;;
  ;;;; Chained
  ;;;
  
  
  (method public (get-chained)
    chained)))
