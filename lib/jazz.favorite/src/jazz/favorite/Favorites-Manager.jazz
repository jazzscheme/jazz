;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Favorites Manager
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.favorite.Favorites-Manager jazz


(import (jazz.application)
        (jazz.component)
        (jazz.designer)
        (jazz.designer.menu)
        (jazz.favorite)
        (jazz.feedback)
        (jazz.handler)
        (jazz.io)
        (jazz.markup)
        (jazz.menu)
        (jazz.process)
        (jazz.resource)
        (jazz.ui)
        (jazz.ui.dialog)
        (jazz.view))


;;;
;;;; Reading
;;;


(definition Favorites-File
  {File Profile "settings" "Favorites.jml"})


(definition (read-favorites)
  (with-safe-execution "loading the favorites"
    (lambda ()
      (let ((file Favorites-File))
        (and (is-alias? 'Profile)
             (exists? file)
             (let ((process (current-process))
                   (favorites (instantiate (read-form file))))
               (install-context process favorites)
               favorites))))
    continue-handler:
    (lambda (err)
      )))


(class Favorites-Manager extends Component-Editor implements Quit-Listener


  (form
    (<install>                              size: {Dimension 650 400} layout-type: border
      (<Layout-View>      name: tools
        (<Push-Tool>      name: reload      size: {Dimension 22 22} tooltip?: #t tooltip-text: "Reload Favorites" resource: {Image-Resource "Refresh"} portfolio: :images action-handler: {Event-Handler :guest on-reload-favorites}))
      (<Favorites-Editor> name: descendants location: center
        (<!>              name: scroller    style: tool)
        (<!>              name: tree        show-header?: #f highlight-edited?: #f
          (<!>            name: descendant  title: "Favorite" width: 291)))))
      
  
  (method meta override (external-name self . rest)
    'Favorites)

  
  ;;;
  ;;;; Host
  ;;;
  
  
  (method meta override (host-icon self)
    {Image-Resource "Favorites"})
  
  
  (method meta override (host-title self)
    "Favorites")
  
  
  ;;;
  ;;;; Docked
  ;;;
  
  
  (method override (get-tools-view self)
    (locate self 'tools))
  
  
  (method override (focus-default self)
    (let ((tree (get-tree self)))
      (acquire-focus tree)))

  
  ;;;
  ;;;; Component
  ;;;
  
  
  (method package (get-tree self)
    (locate self '(descendants tree)))
  
  
  ;;;
  ;;;; Controller
  ;;;


  (method override (new-document-controller self)
    (new Favorites-Manager-Controller self))

  
  ;;;
  ;;;; Component
  ;;;
  
  
  (method override (install self rest)
    (nextmethod self rest)
    (set-shown? (locate-component self '(descendants header)) #f)
    (set-editor (locate self 'descendants) self)
    (add-quit-listener (get-application) self)
    (set-client self (read-favorites)))

  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method package (resize-center self dh dv)
    (size-figure (locate self 'descendants) dh dv))
  
  
  (method public (on-reload-favorites self evt)
    (set-client self (read-favorites)))

  
  (method public (on-launch self evt)
    (launch-selection self))
  
  
  (method override (prepare-quit self)
    (when (and (get-modified? self) (file? (get-origin (get-form designer))))
      (save self)))
  
  
  ;;;
  ;;;; Launch
  ;;;
  
  
  (method public (launch-selection self)
    (let* ((tree (get-tree self))
           (favorite (selected-component tree)))
      (if (null? favorite)
          (bell)
        (launch favorite))))
  
  
  ;;;
  ;;;; Add
  ;;;
  
  
  (method public (add-to-favorites self class title initargs)
    (receive (title parent) (get-modal Favorites-Adder default-title: title default-root: client)
      (when parent
        (let ((favorite (apply new class title: title initargs)))
          (add-child designer favorite parent)
          (set-property designer favorite title: title)
          (for-each-property (lambda (property value)
                               (set-property designer favorite property value))
                             initargs)))))
  
  
  ;;;
  ;;;; Import
  ;;;
  
  
  (method (import-favorites self)
    (let* ((tree (get-tree self))
           (component (selected-component tree))
           (directory (choose-directory title: "Choose favorites folder"))
           (bad '()))
      (define (iter component directory)
        (iterate-directory directory
          (lambda (pathname)
            (user-message "Importing {a}..." (get-base pathname))
            (let ((title (get-base pathname)))
              (if (directory? pathname)
                  (let ((set (new Group title: title visible?: #f)))
                    (add-child designer set component)
                    (set-property designer set title: title)
                    (iter set pathname))
                (bell))))
          directories?: #t
          recursive?: #f))
      
      (with-update-locked tree
        (lambda ()
          (iter component directory)))
      (user-message "Done")))
  
  
  (method (extract-url self file)
    (let ((lines (load-lines file))
          (found {}))
      (while (and (not-null? lines) (not found))
        (let ((line (car lines)))
          (when (and (>= (length line) 4) (= (subseq line 0 4) "URL="))
            (set! found (subseq line 4)))
          (set! lines (cdr lines))))
      found))
  
  
  ;;;
  ;;;; Menu
  ;;;
  
  
  (method public (new-favorites-menu self)
    (let* ((menu (new Favorites-Menu client: self))
           (tree (get-tree (locate self 'descendants)))
           (components (selected-components tree)))
      (update-component-menu menu components '() #f '() #f)
      (when (or (/= (length components) 1) (is-not? (car components) Favorite))
        (set-visible? (locate menu 'open) #f)
        (set-visible? (locate menu 'end-open-group) #f))
      @convert
      (when (not (in-manifest? 'Browser-View))
        (set-visible? (locate menu 'import-separator) #f)
        (set-visible? (locate menu 'import-favorites) #f))
      (layout-menu menu)
      menu)))


;;;
;;;; Controller
;;;


(class Favorites-Manager-Controller extends Component-Editor-Controller
  
  
  (method override (document-status self)
    "Favorites"))


;;;
;;;; Favorites-Menu
;;;


(class Favorites-Menu extends Component-Menu
  
  
  (form
    (<install>
      (<Label-Item>     name: launch           title: "Launch" before: add-item default?: #t action-handler: {Event-Handler :form on-launch})
      (<Separator-Item> name: end-launch-group before: add-item)))
  
  
  (method (on-launch self evt)
    (launch-selection client))
  
  
  (method (on-import-favorites self evt)
    @convert
    (import-favorites))
  
  
  (method (on-properties self evt)
    @convert
    (show-properties))))
