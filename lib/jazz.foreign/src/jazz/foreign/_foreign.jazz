;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Foreign Function Interface
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module jazz.foreign jazz


(export (jazz.foreign.syntax (phase syntax)))
(import (jazz.syntax))


;;;
;;;; Callable
;;;


(definition current-callable
  (make-parameter #f))


(definition callable-exception
  #f)


(definition public (with-callable name thunk)
  ;(terminal 'CALLABLE name)
  (let ((result (parameterize ((current-callable name))
                  (thunk))))
    (when callable-exception
      (terminal 'RETHROW callable-exception))
    (if callable-exception
        (throw callable-exception)
      result)))


;;;
;;;; Callback
;;;


(define-setting log-callbacks?
  #f)

(define-setting log-callback-unwinds?
  #f)


(definition public (with-callback name debugging thunk)
  ;(terminal 'CALLBACK (cons name debugging))
  (cond ((current-callable)
         (when (log-callbacks?)
           (terminal name))
         (let ((returned? #f))
           (set! callable-exception #f)
           (set-exit-callable #f)
           (unwind-protect
               (prog1 (catch (Exception exc
                               (set! callable-exception exc)
                               (set-exit-callable #t)
                               ;; quick try
                               0)
                        (parameterize ((current-callable #f))
                          (thunk)))
                 (set! returned? #t))
             (when (and (not returned?) (log-callback-unwinds?))
               (terminal name 'did 'not 'return)))))
        (else
         (call-with-output-file "~/foo"
           (lambda (output)
             (continuation-capture
               (lambda (cont)
                 (display-continuation-backtrace cont output #t #f 0 1000)))
             (force-output output)
             (exit)))
         (error "Callback called outside callable: {s}" name)))))
