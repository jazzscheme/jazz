;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Foreign Function Interface
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module jazz.foreign jazz


(hub get-arguments)
(hub get-body)
(hub get-c-type)
(hub get-expansion)
(hub get-form)
(hub get-inclusions)
(hub get-kind)
(hub get-name)
(hub get-pointer-types)
(hub get-signature)
(hub set-body)
(hub set-pointer-types)
(hub set-signature)


(export (jazz.foreign.syntax (phase syntax)))
(import (jazz.foreign.syntax (phase syntax)))
(import (jazz.syntax (phase syntax)))


;;;
;;;; Features
;;;


(definition protected c-features
  (make-table test: eq?))

(definition public (c-feature? name)
  (table-ref c-features name))


;; language
(c-feature __cplusplus)

;; os
(c-feature USE_POSIX)
(c-feature USE_WIN32)

;; threads
(c-feature ___USE_POSIX_THREAD_SYSTEM)
(c-feature ___USE_WIN32_THREAD_SYSTEM)
(c-feature ___USE_NO_THREAD_SYSTEM)

;; pumps
(c-feature USE_PUMPS)

;; real time
(c-feature USE_clock_gettime_realtime)
(c-feature USE_getclock)
(c-feature USE_GetSystemTimeAsFileTime)
(c-feature USE_gettimeofday)
(c-feature USE_ftime)
(c-feature USE_time)
(c-feature USE_CLASSIC_MACOS)

;; monotonic time
(c-feature USE_mach_absolute_time)
(c-feature USE_QueryPerformanceCounter)
(c-feature USE_clock_gettime_monotonic)

;; sleep
(c-feature USE_nanosleep)
(c-feature USE_Sleep)
(c-feature USE_sleep)

;; heartbeat
(c-feature USE_setitimer)
(c-feature USE_dos_setvect)
(c-feature USE_DosStartTimer)
(c-feature USE_VInstall)
(c-feature USE_CreateThread)

;; select
(c-feature USE_MsgWaitForMultipleObjects)
(c-feature USE_poll)
(c-feature USE_ppoll)
(c-feature USE_select)


;;;
;;;; Callable
;;;


;; to discover non callable-wrapped callbacks
(definition current-callable
  (make-parameter #f))


(definition callback-exception
  #f)


(definition public (with-callable name thunk)
  (set! callback-exception #f)
  (let ((result (parameterize ((current-callable name))
                  (thunk))))
    (let ((exception callback-exception))
      (set! callback-exception #f)
      (if exception
          (throw exception)
        result))))


;;;
;;;; Callback
;;;


(definition debug-non-callable-wrapped-callbacks?
  #f)


(definition public (with-callback name exit-value thunk)
  (when (and debug-non-callable-wrapped-callbacks? (current-callable))
    (call-with-output-file "~/callback"
      (lambda (port)
        (continuation-capture
          (lambda (cont)
            (display-continuation-backtrace cont port #t #f 100 100)))))
    (quit))
  (set-exit-callable #f)
  (catch-exception-filter
    (lambda (exc)
      (capture-exception-context exc)
      (set! callback-exception exc)
      (set-exit-callable #t)
      #t)
    (lambda (exc)
      exit-value)
    (lambda ()
      (parameterize ((current-callable #f))
        (thunk))))))
