;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Gambit C Features
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module jazz.foreign.features jazz


(import (jazz.foreign))


(c-include "<config.h>")
(c-include "<gambit.h>")
(c-include "<os_setup.h>")
(c-include "<os_base.h>")
(c-include "<os_time.h>")
(c-include "<os_thread.h>")


(definition protected c-features
  (make-table test: eq?))

(definition public (c-feature? name)
  (table-ref c-features name))


(definition public (present-c-features)
  (let ((features '()))
    (table-iterate c-features
      (lambda (feature flag)
        (when flag
          (set! features (cons feature features)))))
    (for-each tell (sort ci<? features))))


;; language
(c-feature __cplusplus)

;; os
(c-feature USE_POSIX)
(c-feature USE_WIN32)
(c-feature USE_GENERIC_OS)

;; threads
(c-feature ___USE_POSIX_THREAD_SYSTEM)
(c-feature ___USE_WIN32_THREAD_SYSTEM)
(c-feature ___USE_NO_THREAD_SYSTEM)

;; pumps
(c-feature USE_PUMPS)

;; real time
(c-feature USE_clock_gettime_realtime)
(c-feature USE_getclock)
(c-feature USE_GetSystemTimeAsFileTime)
(c-feature USE_gettimeofday)
(c-feature USE_ftime)
(c-feature USE_time)
(c-feature USE_CLASSIC_MACOS)

;; monotonic time
(c-feature USE_mach_absolute_time)
(c-feature USE_QueryPerformanceCounter)
(c-feature USE_clock_gettime_monotonic)

;; sleep
(c-feature USE_nanosleep)
(c-feature USE_Sleep)
(c-feature USE_sleep)

;; heartbeat
(c-feature USE_setitimer)
(c-feature USE_dos_setvect)
(c-feature USE_DosStartTimer)
(c-feature USE_VInstall)
(c-feature USE_CreateThread)

;; select
(c-feature USE_MsgWaitForMultipleObjects)
(c-feature USE_poll)
(c-feature USE_ppoll)
(c-feature USE_select))
