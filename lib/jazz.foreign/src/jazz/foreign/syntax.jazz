;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Foreign Function Syntax
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.foreign.syntax jazz


(import (jazz.core (phase syntax))
        (jazz.dialect.classes.foundation))


;;;
;;;; C-Include
;;;


(class C-Include extends Expression
  
  
  (slot name getter generate)
  
  
  (method override (initialize name . rest)
    (apply nextmethod rest)
    (set! name~self name))
  
  
  (method override (emit-expression declaration environment backend)
    (new-code
      `(c-include ,name)
      Any
      #f)))


(special-form (c-include walker resume declaration environment form-src)
  (let ((form (strip-syntactic-closures form-src)))
    (bind (name) (cdr form)
      (new C-Include name))))


;;;
;;;; C-Initialize
;;;


(class C-Initialize extends Expression
  
  
  (slot name getter generate)
  (slot code getter generate)
  
  
  (method override (initialize name code . rest)
    (apply nextmethod rest)
    (set! name~self name)
    (set! code~self code))
  
  
  (method override (emit-expression declaration environment backend)
    (new-code
      `(c-initialization ,name ,code)
      Any
      #f)))


(special-form (c-initialize walker resume declaration environment form-src)
  (let ((form (strip-syntactic-closures form-src)))
    (bind (name code) (cdr form)
      (new C-Initialize name code))))


;;;
;;;; C-Declare
;;;


(class C-Declare extends Expression
  
  
  (slot name getter generate)
  (slot code getter generate)
  
  
  (method override (initialize name code . rest)
    (apply nextmethod rest)
    (set! name~self name)
    (set! code~self code))
  
  
  (method override (emit-expression declaration environment backend)
    (new-code
      `(c-declaration ,name ,code)
      Any
      #f)))


(special-form (c-declare walker resume declaration environment form-src)
  (let ((form (cdr (strip-syntactic-closures form-src))))
    (assert (>= (length form) 2)
      (bind (name code) form
        (assert (symbol? name)
          (new C-Declare name code))))))


;;;
;;;; C-Named-Declare
;;;


(class C-Named-Declare-Declaration extends Declaration
  
  
  (slot code getter generate)
  
  
  (method override (initialize . rest)
    (bind-keywords ((code #f) . others) rest
      (apply nextmethod others)
      (set! code~self code)))
  
  
  (method override (emit-declaration environment backend)
    `(begin))
  
  
  (method override (expand-referenced-declaration)
    `(c-declaration ,code))
  
  
  (method override (outline-extract meta)
    `(c-named-declare ,name ,code)))


(define c-named-declare-modifiers
  '(((private protected package public) . public)
    ((deprecated undocumented uptodate) . uptodate)))


(define (parse-c-named-declare walker resume declaration rest)
  (receive (access compatibility rest) (parse-modifiers walker resume declaration c-named-declare-modifiers rest)
    (bind (name code) rest
      (let ((type Any))
        (values name type access compatibility code)))))


(define (resolve-c-named-declare-reference walker resume declaration environment symbol)
  (let ((c-named-declare-declaration (lookup-reference walker resume declaration environment symbol)))
    (if (is? c-named-declare-declaration C-Named-Declare-Declaration)
        c-named-declare-declaration
      (walk-error walker resume declaration #f "{s} did not resolve to a c-named-declare: {s}" symbol (get-locator~ c-named-declare-declaration)))))


(define (walk-c-named-declare-declaration walker resume declaration environment form-src)
  (receive (name type access compatibility code) (parse-c-named-declare walker resume declaration (cdr (strip-syntactic-closures form-src)))
    (let ((new-declaration (or (find-declaration-child declaration name)
                               (new C-Named-Declare-Declaration name: name type: type access: access compatibility: compatibility attributes: '() parent: declaration code: code))))
        (let ((effective-declaration (add-declaration-child walker resume declaration new-declaration)))
          effective-declaration))))


(define (walk-c-named-declare walker resume declaration environment form-src)
  (let ((form (strip-syntactic-closures form-src)))
    (receive (name type access compatibility code) (parse-c-named-declare walker resume declaration (cdr form))
      (let ((new-declaration (require-declaration declaration name)))
        new-declaration))))


(define-walker-declaration c-named-declare jazz walk-c-named-declare-declaration walk-c-named-declare)


;;;
;;;; C-Type
;;;


(class C-Type-Declaration extends Declaration
  
  
  (slot form          getter generate)
  (slot kind          getter generate)
  (slot c-type        getter generate)
  (slot expansion     getter generate)
  (slot base-type     getter generate)
  (slot pointer-types accessors generate)
  (slot inclusions    getter generate)
  (slot c-to-scheme   getter generate)
  (slot scheme-to-c   getter generate)
  (slot cleanup       getter generate)
  (slot declare-name  getter generate)

  
  (method override (initialize form . rest)
    (bind-keywords ((kind #f) (c-type #f) (expansion #f) (base-type #f) (inclusions #f) (c-to-scheme #f) (scheme-to-c #f) (cleanup #t) (declare-name #f) . others) rest
      (apply nextmethod others)
      (set! form~self form)
      (set! kind~self kind)
      (set! c-type~self c-type)
      (set! expansion~self expansion)
      (set! base-type~self base-type)
      (set! pointer-types~self '())
      (set! inclusions~self inclusions)
      (set! c-to-scheme~self c-to-scheme)
      (set! scheme-to-c~self scheme-to-c)
      (set! cleanup~self cleanup)
      (set! declare-name~self declare-name)))
  
  
  (method override (get-declaration-inclusions)
    inclusions)
  
  
  (method override (emit-declaration environment backend)
    `(begin))
  
  
  (method override (expand-referenced-declaration)
    `(c-define-type ,locator ,expansion ,@(if (and c-to-scheme scheme-to-c)
                                              (list c-to-scheme scheme-to-c cleanup)
                                            '())))
  
  
  (method override (outline-extract meta)
    form))


(define c-type-modifiers
  '(((private protected package public) . public)
    ((deprecated undocumented uptodate) . uptodate)))


(define (parse-c-type walker resume declaration rest)
  (receive (access compatibility rest) (parse-modifiers walker resume declaration c-type-modifiers rest)
    (bind (name c-type . conversions) rest
      (let ((type Any))
        (if (null? conversions)
            (values name type access compatibility c-type #f #f #f #f)
          (bind (c-to-scheme scheme-to-c cleanup . rest) conversions
            (let ((declare-name (if (null? rest) #f (car rest))))
              (values name type access compatibility c-type c-to-scheme scheme-to-c cleanup declare-name))))))))


(define (walk-c-type-declaration walker resume declaration environment form-src)
  (receive (name type access compatibility c-type c-to-scheme scheme-to-c cleanup declare-name) (parse-c-type walker resume declaration (cdr (strip-syntactic-closures form-src)))
    (if (is? declaration Module-Declaration)
        (receive (kind expansion base-type-declaration inclusions) (resolve-c-type walker resume declaration environment c-type)
          (let ((inclusions (if declare-name
                                (if (string? expansion)
                                    (cons (resolve-c-named-declare-reference walker resume declaration environment declare-name) inclusions)
                                  (walk-error walker resume declaration form-src "{s} defined with c-to-scheme and scheme-to-c but expansion is not a string: {s}" name expansion))
                              inclusions)))
            (let ((new-declaration (or (find-declaration-child declaration name)
                                       (new C-Type-Declaration (desourcify-all form-src) name: name type: type access: access compatibility: compatibility attributes: '() parent: declaration kind: kind c-type: c-type expansion: expansion base-type: base-type-declaration inclusions: inclusions c-to-scheme: c-to-scheme scheme-to-c: scheme-to-c cleanup: cleanup declare-name: declare-name))))
              (when base-type-declaration
                (set-pointer-types~ base-type-declaration (cons new-declaration (get-pointer-types~ base-type-declaration))))
              (let ((effective-declaration (add-declaration-child walker resume declaration new-declaration)))
                effective-declaration))))
      (walk-error walker resume declaration form-src "C types can only be defined at the module level: {s}" name))))


(define (walk-c-type walker resume declaration environment form-src)
  (let ((form (strip-syntactic-closures form-src)))
    (receive (name type access compatibility c-type c-to-scheme scheme-to-c cleanup declare-name) (parse-c-type walker resume declaration (cdr form))
      (require-declaration declaration name))))


(define (resolve-c-type walker resume declaration environment type)
  (let ((queue (new-queue)))
    (define (resolve type)
      (cond ((symbol? type)
             (if (eq? type 'enum)
                 (values 'native 'int #f)
               (let ((c-type-declaration (resolve-c-type-reference walker resume declaration environment type)))
                 (enqueue queue c-type-declaration)
                 (values 'alias (get-locator~ c-type-declaration) #f))))
            ((string? type)
             (values 'type type #f))
            ((pair? type)
             (case (car type)
               ((native)
                (values 'native (cadr type) #f))
               ((type)
                (bind (c-string . tag-rest) (cdr type)
                  (values 'type `(type ,c-string ,@tag-rest) #f)))
               ((pointer)
                (bind (base-type . tag-rest) (cdr type)
                  (values 'pointer `(pointer ,(resolve-expansion base-type) ,@tag-rest)
                    (and (symbol? base-type) (resolve-c-type-reference walker resume declaration environment base-type)))))
               ((function)
                (bind (parameter-types result-type) (cdr type)
                  (values 'function `(function ,(map resolve-expansion parameter-types) ,(resolve-expansion result-type)) #f)))
               ((struct)
                (bind (c-string . tag-rest) (cdr type)
                  (values 'struct `(struct ,c-string ,@tag-rest) #f)))
               ((union)
                (bind (c-string . tag-rest) (cdr type)
                  (values 'union `(union ,c-string ,@tag-rest) #f)))
               ((cast)
                (bind (type) (cdr type)
                  (values 'cast type #f)))
               (else
                (walk-error walker resume declaration #f "Ill-formed c-type: {s}" type))))
            (else
             (walk-error walker resume declaration #f "Ill-formed c-type: {s}" type))))
    
    (define (resolve-expansion type)
      (receive (kind expansion base-type-declaration) (resolve type)
        expansion))
    
    (receive (kind expansion base-type-declaration) (resolve type)
      (values kind expansion base-type-declaration (queue-list queue)))))


(definition public (resolve-c-type-reference walker resume declaration environment symbol)
  (let ((c-type-declaration (lookup-reference walker resume declaration environment symbol)))
    (if (is? c-type-declaration C-Type-Declaration)
        c-type-declaration
      (walk-error walker resume declaration #f "{s} did not resolve to a c-type: {s}" symbol (get-locator~ c-type-declaration)))))


(define (expand-c-type-reference walker resume declaration environment type)
  (receive (kind expansion base-type-declaration inclusions) (resolve-c-type walker resume declaration environment type)
    (let ((module-declaration (get-toplevel~ declaration)))
      (set-inclusions~ module-declaration (append (get-inclusions~ module-declaration) inclusions))
      expansion)))


(define-walker-declaration c-type jazz walk-c-type-declaration walk-c-type)
(define-walker-declaration c-define-type jazz walk-c-type-declaration walk-c-type)


;;;
;;;; C-Structure
;;;


(define (build-pointer-symbol type)
  (string->symbol (string-append (symbol->string type) "*")))


(define (build-method-symbol struct . rest)
  (string->symbol (apply string-append (symbol->string struct) "-" (map symbol->string rest))))


(define (expand-accessor walker resume declaration environment clause struct)
  (define (kind+type type)
    (let loop ((declaration (resolve-c-type-reference walker resume declaration environment type)))
         (let ((kind (get-kind~ declaration))
               (expansion (get-expansion~ declaration))
               (inclusions (get-inclusions~ declaration)))
           (if (eq? kind 'alias)
               (loop (car inclusions))
             (values kind expansion)))))
  
  (bind (type id . rest) clause
    (bind-optionals ((size #f) (getter-cast #f) (setter-cast #f)) rest
      (when (and size (not (integer? size)) (not (symbol? size)))
        (walk-error walker resume declaration #f "Illegal clause size in {a}: {a}" struct clause))
      (if (eq? size 'none)
          (values #f #f)
        (receive (kind expansion) (kind+type type)
          (let ((id-string (symbol->string id))
                (getter-cast-string (if getter-cast (format "({a}) " getter-cast) ""))
                (setter-cast-string (if setter-cast (format "({a}) " setter-cast) "")))
            (let ((getter-string
                    (if size
                        (cond ((or (eq? expansion 'char)
                                   (eq? expansion 'wchar_t))
                               (string-append "___return(" getter-cast-string "___arg1->" id-string ");"))
                              (else
                               (string-append "___return(" getter-cast-string "___arg1->" id-string ");")))
                      (case kind
                        ((native)
                         (string-append "___return(" getter-cast-string "___arg1->" id-string ");"))
                        ((pointer function)
                         (string-append "___return(" getter-cast-string "___arg1->" id-string ");"))
                        ((type struct union)
                         (string-append "___return(" getter-cast-string "&___arg1->" id-string ");")))))
                  (setter-string
                    (cond (size
                           (let ((size-string (if (integer? size)
                                                  (number->string size)
                                                (symbol->string size))))
                             (cond ((eq? expansion 'char)
                                    (string-append "strncpy(___arg1->" id-string ", ___arg2, " size-string ");"))
                                   ((eq? expansion 'wchar_t)
                                    (string-append "wcsncpy(___arg1->" id-string ", ___arg2, " size-string ");"))
                                   (else
                                    ;; We need to adjust this to get the real c-type in the expansion
                                    (string-append "memcpy(___arg1->" id-string ", ___arg2, " size-string "*" "sizeof(" (symbol->string type) "));")))))
                          ((or (eq? kind 'struct)
                               (eq? kind 'union)
                               (eq? kind 'type))
                           (string-append "___arg1->" id-string " = " setter-cast-string "*___arg2;"))
                          (else
                           (string-append "___arg1->" id-string " = " setter-cast-string "___arg2;")))))
              (let* ((struct* (build-pointer-symbol struct))
                     (type* (build-pointer-symbol type))
                     (type (cond ((and size (eq? expansion 'char)) '(native char-string))
                                 ((and size (eq? expansion 'wchar_t)) '(native wchar_t-string))
                                 (size type*)
                                 ((memq kind '(type struct union)) type*)
                                 (else type))))
                (let ((getter (and getter-string
                                   (let ((name (build-method-symbol struct id '-ref)))
                                     `(definition public ,name
                                        (c-function ,name (,struct*) ,type ,getter-string)))))
                      (setter (and setter-string
                                   (let ((name (build-method-symbol struct id '-set!)))
                                     `(definition public ,name
                                        (c-function ,name (,struct* ,type) (native void) ,setter-string))))))
                  (values getter setter))))))))))


(define (expand-structure/union walker resume declaration environment name clauses)
  (define (parse-structure-name name)
    (if (symbol? name)
        (values name (symbol->string name) '())
      (values (car name) (cadr name) (cddr name))))
  
  (receive (struct c-struct-string tag-rest) (parse-structure-name name)
    (let ((struct* (build-pointer-symbol struct))
          (sizeof (string-append "sizeof(" c-struct-string ")"))
          (tag*-rest (if (null? tag-rest) '() (cons (build-pointer-symbol (car tag-rest)) (cdr tag-rest)))))
      (define (expand-acc clause)
        (receive (getter setter) (expand-accessor walker resume declaration environment clause struct)
          (cond ((and getter setter) (list getter setter))
                (getter (list getter))
                (setter (list setter))
                (else '()))))
      
      (let ((make-name (build-method-symbol struct 'make))
            (free-name (build-method-symbol struct 'free))
            (sizeof-name (build-method-symbol struct 'sizeof)))
        `(begin
           (c-type ,struct (type ,c-struct-string ,@tag-rest))
           (c-type ,struct* (pointer ,struct ,@tag*-rest))
           (definition public ,make-name
             (c-function ,make-name () ,struct* ,(string-append "___return(calloc(1," sizeof "));")))
           (definition public ,free-name
             (c-function ,free-name (,struct*) (native void) "free(___arg1);"))
           (definition public ,sizeof-name
             (c-function ,sizeof-name () (native unsigned-int) ,(string-append "___return(" sizeof ");")))
           ,@(apply append (map expand-acc clauses)))))))


(define (expand-c-structure-array name . rest)
  (let* ((struct name)
         (struct* (build-pointer-symbol struct))
         (c-struct-string (if (not (null? rest)) (car rest) (symbol->string struct))))
    (let ((make-name (build-method-symbol struct 'array-make))
          (element-name (build-method-symbol struct 'array-element)))
      `(begin
         (definition public ,make-name
           (c-function ,make-name (int) ,struct* ,(string-append "___return(calloc(___arg1,sizeof(" c-struct-string ")));")))
         (definition public ,element-name
           (c-function ,element-name (,struct* int) ,struct* ,(string-append "___return(___arg1+___arg2);")))))))


(syntax public c-structure
  (lambda (form environment macro-environment)
    (bind (name . clauses) (cdr (strip-syntactic-closures form))
      (expand-structure/union (current-walker) (current-resume) (current-declaration) environment name clauses))))


(syntax public c-union
  (lambda (form environment macro-environment)
    (bind (name . clauses) (cdr (strip-syntactic-closures form))
      (expand-structure/union (current-walker) (current-resume) (current-declaration) environment name clauses))))


;;;
;;;; C-Enumerant
;;;


(macro public (c-enumerant name (type #f))
  (let ((box (if type (string-append "___" type "BOX") "___U32BOX")))
    `(definition public ,name
       (let ()
         (declare (extended-bindings))
         (c-code ,(string-append "___RESULT = "
                                 box
                                 "("
                                 (symbol->string name)
                                 ");"))))))


;;;
;;;; C-Code
;;;


(class C-Code extends Expression
  
  
  (slot code      getter generate)
  (slot arguments getter generate)
  
  
  (method override (initialize code arguments . rest)
    (apply nextmethod rest)
    (set! code~self code)
    (set! arguments~self arguments))
  
  
  (method override (emit-expression declaration environment backend)
    (new-code
      `(##c-code ,code ,@(map (lambda (argument)
                                (sourcified-form (emit-expression~ argument declaration environment backend)))
                              arguments))
      Any
      #f)))


(special-form (c-code walker resume declaration environment form-src)
  (let ((form (cdr (source-code form-src))))
    (new C-Code
      (car form)
      (walk-list walker resume declaration environment (cdr form)))))


;;;
;;;; C-Function
;;;


(class C-Function extends Expression
  
  
  (slot expansion getter generate)
  
  
  (method override (initialize expansion . rest)
    (apply nextmethod rest)
    (set! expansion~self expansion))
  
  
  (method override (emit-expression declaration environment backend)
    (new-code
      expansion
      Any
      #f)))


(define (c-function-special-form walker resume declaration environment form-src)
  (let ((form (strip-syntactic-closures form-src)))
    (assertion (and (list? form) (= 5 (length form))) (walk-error walker resume declaration form-src "Ill-formed c-function")
      (bind (name types result-type c-name-or-code) (cdr form)
        (define (resolve-reference type)
          (cond ((or (literal-type? type)
                     (homogeneous-type? type))
                 type)
                ((call-type? type)
                 (resolve-c-type-reference walker resume declaration environment (third type)))
                (else
                 (resolve-c-type-reference walker resume declaration environment type))))
        
        (define (resolve-access type)
          (expand-c-type-reference walker resume declaration environment type))
        
        (define literal-types
          '(NULL
            FALSE
            TRUE))
        
        (define homogeneous-types
          '(u8vector
            s8vector
            u16vector
            s16vector
            u32vector
            s32vector
            s64vector
            u64vector
            f32vector
            f64vector))
        
        (define (enum-type? resolved-type)
          (and (is? resolved-type C-Type-Declaration)
               (eq? (get-c-type~ resolved-type) 'enum)))
        
        (define (literal-type? type)
          (memq? type literal-types))
        
        (define (homogeneous-type? type)
          (memq? type homogeneous-types))
        
        (define (call-type? type)
          (and (pair? type)
               (eq? (car type) 'call)))
        
        (define (cast-type? type)
          (and (pair? type)
               (eq? (car type) 'cast)))
        
        (define (c-identifier? str)
          (every? c-constituent? str))
        
        (define (convert-types special-types? types resolved-types)
          (if (not special-types?)
              types
            (remove-false
              (map (lambda (type resolved-type)
                     (cond ((enum-type? resolved-type)
                            'int)
                           ((literal-type? type)
                            #f)
                           ((homogeneous-type? type)
                            'scheme-object)
                           ((call-type? type)
                            (third type))
                           (else
                            type)))
                   types
                   resolved-types))))
        
        (define (convert-code special-types? types resolved-types c-name-or-code)
          (define (convert-type type resolved-type arg)
            (cond ((enum-type? resolved-type)
                   (let ((name (get-name~ resolved-type)))
                     (string-append "(" (symbol->string name) ")" arg)))
                  ((literal-type? type)
                   type)
                  ((call-type? type)
                   (let ((func (second type))
                         (type (third type)))
                     (string-append (symbol->string func) "(" arg ")")))
                  (else
                   (case type
                     ((u8vector) (string-append "(unsigned char*)___BODY(" arg ")"))
                     ((s8vector) (string-append "(signed char*)___BODY(" arg ")"))
                     ((u16vector) (string-append "(unsigned short*)___BODY(" arg ")"))
                     ((s16vector) (string-append "(short*)___BODY(" arg ")"))
                     ((u32vector) (string-append "(unsigned int*)___BODY(" arg ")"))
                     ((s32vector) (string-append "(int*)___BODY(" arg ")"))
                     ((u64vector) (string-append "(unsigned long long*)___BODY(" arg ")"))
                     ((s64vector) (string-append "(long long*)___BODY(" arg ")"))
                     ((f32vector) (string-append "(float*)___BODY(" arg ")"))
                     ((f64vector) (string-append "(double*)___BODY(" arg ")"))
                     (else arg)))))
          
          (if (or (not special-types?)
                  (not (c-identifier? c-name-or-code)))
              c-name-or-code
            (let ((output (open-output-string))
                  (first? #t)
                  (void? (eq? result-type 'void)))
              (format output "{a}" (if void? "" "___return("))
              (when (cast-type? result-type)
                (format output "({a}) " (case (cadr result-type)
                                                ((char-string) "char*")
                                                (else (error "Unknown cast: {a}" result-type)))))
              (format output "{a}(" c-name-or-code)
              (for-each (lambda (type resolved-type n)
                          (let ((rank (+ n 1)))
                            (if first?
                                (set! first? #f)
                              (format output ", "))
                            (let ((arg (format "___arg{a}" rank)))
                              (format output "{a}" (convert-type type resolved-type arg)))))
                        types
                        resolved-types
                        (naturals 0 (length types)))
              (format output "{a}" (if void? "" ")"))
              (format output ");")
              (get-output-string output))))
        
        (let ((resolved-types (map resolve-reference types)))
          (let ((special-types? (or (some? enum-type? resolved-types)
                                    (some? literal-type? types)
                                    (some? homogeneous-type? types)
                                    (some? call-type? types)))
                (special-result? (cast-type? result-type)))
            (let ((converted-types (convert-types special-types? types resolved-types)))
              (let ((final-code (convert-code (or special-types? special-result?) types resolved-types c-name-or-code)))
                (new C-Function
                  `(c-function ,name ,(map resolve-access converted-types) ,(resolve-access result-type) ,final-code))))))))))


(special-form (c-function walker resume declaration environment form-src)
  (c-function-special-form walker resume declaration environment form-src))

(special-form (c-lambda walker resume declaration environment form-src)
  (c-function-special-form walker resume declaration environment form-src))


;;;
;;;; C-Definition
;;;


(class C-Definition-Declaration extends Declaration
  
  
  (slot signature       accessors generate)
  (slot parameter-types getter generate)
  (slot result-type     getter generate)
  (slot c-name          getter generate)
  (slot scope           getter generate)
  (slot body            accessors generate)
  
  
  (method override (initialize . rest)
    (bind-keywords ((signature #f) (parameter-types #f) (result-type #f) (c-name #f) (scope #f) . others) rest
      (apply nextmethod others)
      (set! signature~self signature)
      (set! parameter-types~self parameter-types)
      (set! result-type~self result-type)
      (set! c-name~self c-name)
      (set! scope~self scope)
      (set! body~self #f)))
  
  
  (method override (walk-binding-validate-call walker resume source-declaration operator arguments form-src)
    (if signature
        (validate-arguments walker resume source-declaration self signature arguments form-src)))
  
  
  (method override (emit-declaration environment backend)
    (with-annotated-frame (annotate-signature signature)
      (lambda (frame)
        (let ((augmented-environment (cons frame environment)))
          (sourcify-if
            `(c-definition ,(cons locator (emit-signature signature self augmented-environment backend)) ,parameter-types ,result-type ,c-name ,scope
               ,@(sourcified-form (emit-expression body self augmented-environment backend)))
            source)))))
  
  
  (method override (emit-binding-reference source-declaration environment backend)
    (new-code
      (emit backend 'c-definition-reference self)
      Any
      #f))
  
  
  (method override (outline-extract meta)
    #f)
  
  
  (method override (tree-fold down up here seed environment)
    (tree-fold~ body down up here seed environment)))


(define c-definition-modifiers
  '(((private protected package public) . public)
    ((deprecated undocumented uptodate) . uptodate)))


(define (parse-c-definition walker resume declaration rest)
  (receive (access compatibility rest) (parse-modifiers walker resume declaration c-definition-modifiers rest)
    (bind (signature parameter-types result-type c-name scope . body) rest
      (let ((signature (desourcify signature))
            (parameter-types (desourcify parameter-types))
            (result-type (desourcify result-type))
            (c-name (desourcify c-name))
            (scope (desourcify scope)))
        (let ((name (car signature))
              (type Any)
              (parameters (cdr signature)))
          (values name type access compatibility parameters parameter-types result-type c-name scope body))))))


(define (walk-c-definition-declaration walker resume declaration environment form-src)
  (receive (name type access compatibility parameters parameter-types result-type c-name scope body) (parse-c-definition walker resume declaration (cdr (source-code form-src)))
    (define (resolve-access type)
      (expand-c-type-reference walker resume declaration environment type))
    
    (let ((signature (walk-parameters walker resume declaration environment parameters #f #f)))
      (let ((new-declaration (or (find-declaration-child declaration name)
                                 (new C-Definition-Declaration name: name type: type access: access compatibility: compatibility attributes: '() parent: declaration signature: signature parameter-types: (map resolve-access parameter-types) result-type: (resolve-access result-type) c-name: c-name scope: scope))))
        (set-source~ new-declaration form-src)
        (let ((effective-declaration (add-declaration-child walker resume declaration new-declaration)))
          effective-declaration)))))


(define (walk-c-definition walker resume declaration environment form-src)
  (receive (name type access compatibility parameters parameter-types result-type c-name scope body) (parse-c-definition walker resume declaration (cdr (source-code form-src)))
    (let ((new-declaration (require-declaration declaration name)))
      (receive (signature augmented-environment) (walk-parameters walker resume declaration environment parameters #f #t)
        (set-signature~ new-declaration signature)
        (set-body~ new-declaration (walk-body walker resume new-declaration augmented-environment body))
        (set-source~ new-declaration form-src)
        new-declaration))))


(define-walker-declaration c-definition jazz walk-c-definition-declaration walk-c-definition)


;;;
;;;; C-Callback
;;;


(macro public (c-callback signature parameter-types result-type c-name scope exit-value . body)
  `(c-definition ,signature ,parameter-types ,result-type ,c-name ,scope
     (with-callback ',(car signature) ,exit-value
       (lambda ()
         ,@body))))


;;;
;;;; C-Constant
;;;


(syntax public c-constant
  (lambda (form-src usage-environment macro-environment)
    (let ((name (cadr (source-code form-src)))
          (value (caddr (source-code form-src))))
      (sourcify-if
        `(definition public ,name ,value)
        form-src))))


;;;
;;;; C-Enumeration
;;;


(syntax public c-enumeration
  (lambda (form-src usage-environment macro-environment)
    (let ((name (cadr (source-code form-src)))
          (declarations (cddr (source-code form-src))))
      (sourcify-if
        (let ((definitions (map (lambda (declaration) `(definition public ,@(source-code declaration))) declarations)))
          `(begin ,@definitions))
        form-src))))


;;;
;;;; C-External
;;;


(macro public (c-external signature result-type . rest)
  (define (parse-specifier proc)
    (if (and (not-null? rest)
             (specifier? (car rest)))
        (proc (car rest) (cdr rest))
      (proc #f rest)))
  
  (parse-specifier
    (lambda (specifier rest)
      (let ((name (car signature))
            (types (cdr signature)))
        (define (specifier->function-type)
          (let ((str (symbol->string specifier)))
            (let ((len (string-length str)))
              (string->symbol (string-append "<:" (substring str 1 (- len 1)) ">")))))
        
        (let ((c-name-or-code (if (null? rest) (symbol->string name) (car rest))))
          `(definition public ,name ,@(if specifier (list (specifier->function-type)) '())
             (c-function ,name ,types ,result-type ,c-name-or-code)))))))


;;;
;;;; C-Callable
;;;


(macro public (c-callable signature result-type (c-name-or-code #f))
  (let ((name (car signature))
        (parameters (cdr signature)))
    (let ((c-name (string->symbol (string-append (symbol->string name) "$c"))))
      `(begin
         (c-external ,(cons c-name parameters) ,result-type ,(or c-name-or-code (symbol->string name)))
         (definition public (,name . rest)
           (with-callable ',name
             (lambda ()
               (apply ,c-name rest)))))))))
