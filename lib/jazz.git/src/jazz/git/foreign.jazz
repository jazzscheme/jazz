;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Libgit2 Bindings
;;;


(module jazz.git.foreign jazz


;; until we port to non-windows platforms
(cond-expand
  (windows
(import (jazz.foreign)
        (jazz.platform.types)
        (jazz.platform.types-syntax (phase syntax)))


;;;; Error Handling
;;;


(definition private git-error-handler
  (lambda (error-code)
    (error "Libgit2 Error: {a}" 
           (let ((err (git-error)))
             (if err
                 (git-error-message err)
               error-code)))))

(definition public (set-git-error-handler! error-handler)
  (set! git-error-handler error-handler))

(c-definition (git-call-error-handler error) (int) int "git_call_error_handler" ""
  (git-error-handler error))


(c-include "<time.h>")
(c-include "<git2.h>")


;;;
;;;; Constants
;;;


(c-constant GIT_IDXENTRY_NAMEMASK #x0fff)
(c-constant GIT_IDXENTRY_STAGEMASK #x3000)
(c-constant GIT_IDXENTRY_EXTENDED #x4000)
(c-constant GIT_IDXENTRY_VALID #x8000)
(c-constant GIT_IDXENTRY_STAGESHIFT 12)
(c-constant GIT_OID_RAWSZ 20)
(c-constant GIT_OID_HEXSZ (* GIT_OID_RAWSZ 2))
(c-constant GIT_SORT_NONE 0)
(c-constant GIT_SORT_TOPOLOGICAL 1)
(c-constant GIT_SORT_TIME 2)
(c-constant GIT_SORT_REVERSE 4)


;;;
;;;; Error Constants
;;;


(c-constant GIT_SUCCESS 0)
(c-constant GIT_ERROR -1)
(c-constant GIT_ENOTOID (- GIT_ERROR 1))
(c-constant GIT_ENOTFOUND (- GIT_ERROR 2))
(c-constant GIT_ENOMEM (- GIT_ERROR 3))
(c-constant GIT_EOSERR (- GIT_ERROR 4))
(c-constant GIT_EOBJTYPE (- GIT_ERROR 5))
(c-constant GIT_EOBJCORRUPTED (- GIT_ERROR 6))
(c-constant GIT_ENOTAREPO (- GIT_ERROR 7))
(c-constant GIT_EINVALIDTYPE (- GIT_ERROR 8))
(c-constant GIT_EMISSINGOBJDATA (- GIT_ERROR 9))
(c-constant GIT_EPACKCORRUPTED (- GIT_ERROR 10))
(c-constant GIT_EFLOCKFAIL (- GIT_ERROR 11))
(c-constant GIT_EZLIB (- GIT_ERROR 12))
(c-constant GIT_EBUSY (- GIT_ERROR 13))
(c-constant GIT_EBAREINDEX (- GIT_ERROR 14))
(c-constant GIT_EVALIDREFNAME (- GIT_ERROR 15))
(c-constant GIT_EREFCORRUPTED (- GIT_ERROR 16))
(c-constant GIT_ETOONESTEDSYMREF (- GIT_ERROR 17))
(c-constant GIT_EPACKEDREFSCORRUPTED (- GIT_ERROR 18))
(c-constant GIT_EINVALIDPATH (- GIT_ERROR 19))


;;;
;;;; Enumerations
;;;


(c-enumeration git_otype
  (GIT_OBJ_ANY      -2)
  (GIT_OBJ_BAD      -1)
  (GIT_OBJ_EXT1      0)
  (GIT_OBJ_COMMIT    1)
  (GIT_OBJ_TREE      2)
  (GIT_OBJ_BLOB      3)
  (GIT_OBJ_TAG       4)
  (GIT_OBJ_EXT2      5)
  (GIT_OBJ_OFS_DELTA 6)
  (GIT_OBJ_REF_DELTA 7))


(c-enumeration git_branch_t
  (GIT_BRANCH_LOCAL 1)
  (GIT_BRANCH_REMOTE 2))


(c-enumeration git_reset_type
  (GIT_RESET_SOFT 1)
  (GIT_RESET_MIXED 2))


(c-type char** (pointer char*))
(define-pointer-to-pointer char* "char*")


;;;
;;;; Types
;;;


(c-type uint32_t (native "uint32_t"))
(c-type uint32_t* (pointer uint32))
(c-type int32_t (native "int32_t"))
(c-type int32_t* (pointer int32_t))
(c-type int64_t (native "int64_t"))
(c-type int64_t* (pointer int64_t))
(c-type time_t (native "time_t"))
(c-type git_time (native "git_time"))
(c-type git_reset_type int)
(c-type git_otype int)
(c-type git_otype* (pointer git_otype))
(c-type git_oid (native "git_oid"))
(c-type git_oid* (pointer git_oid))
(c-type git_odb (native "git_odb"))
(c-type git_odb* (pointer git_odb))
(c-type git_odb** (pointer git_odb*))
(c-type git_odb_backend (native "git_odb_backend"))
(c-type git_odb_backend* (pointer git_odb_backend))
(c-type git_repository (native "git_repository"))
(c-type git_repository* (pointer git_repository))
(c-type git_repository** (pointer git_repository*))
(c-type git_reference (native "git_reference"))
(c-type git_reference* (pointer git_reference))
(c-type git_reference** (pointer git_reference*))
(c-type git_object (native "git_object"))
(c-type git_object* (pointer git_object))
(c-type git_object** (pointer git_object*))
(c-type git_revwalk (native "git_revwalk"))
(c-type git_revwalk* (pointer git_revwalk))
(c-type git_revwalk** (pointer git_revwalk*))
(c-type git_tag (native "git_tag"))
(c-type git_tag* (pointer git_tag))
(c-type git_tag** (pointer git_tag*))
(c-type git_blob (native "git_blob"))
(c-type git_blob* (pointer git_blob))
(c-type git_blob** (pointer git_blob*))
(c-type git_commit (native "git_commit"))
(c-type git_commit* (pointer git_commit))
(c-type git_commit** (pointer git_commit*))
(c-type git_tree_entry (native "git_tree_entry"))
(c-type git_tree_entry* (pointer git_tree_entry))
(c-type git_tree_entry** (pointer git_tree_entry*))
(c-type git_tree (native "git_tree"))
(c-type git_tree* (pointer git_tree))
(c-type git_tree** (pointer git_tree*))
(c-type git_index (native "git_index"))
(c-type git_index* (pointer git_index))
(c-type git_index** (pointer git_index*))
(c-type git_signature (native "git_signature"))
(c-type git_signature* (pointer git_signature))
(c-type git_signature** (pointer git_signature*))
(c-type git_person (native "git_person"))
(c-type git_person* (pointer git_person))
(c-type git_person** (pointer git_person*))
(c-type git_index_entry (native "git_index_entry"))
(c-type git_index_entry* (pointer git_index_entry))
(c-type git_transfer_progress (native "git_transfer_progress"))
(c-type git_transfer_progress* (pointer git_transfer_progress))
(c-type git_ref_t (native "git_ref_t"))
(c-type size_t* (pointer size_t))
(c-type git_off_t (native "git_off_t"))
(c-type git_off_t* (pointer git_off_t))
(c-type git_odb_object (native "git_odb_object"))
(c-type git_odb_object* (pointer git_odb_object))
(c-type git_odb_object** (pointer git_odb_object*))
(c-type git_time_t (native "git_time_t"))
(c-type git_odb_backend (native "git_odb_backend"))
(c-type git_odb_backend* (pointer git_odb_backend))
(c-type git_odb_backend** (pointer git_odb_backend*))
(c-type git_odb_stream (native "git_odb_stream"))
(c-type git_odb_stream* (pointer git_odb_stream))
(c-type git_odb_stream** (pointer git_odb_stream*))
(c-type git_treebuilder (native "git_treebuilder"))
(c-type git_treebuilder* (pointer git_treebuilder))
(c-type git_treebuilder** (pointer git_treebuilder*))
(c-type git_reflog_entry (native "git_reflog_entry"))
(c-type git_reflog_entry* (pointer git_reflog_entry))
(c-type git_reflog_entry** (pointer git_reflog_entry*))
(c-type git_reflog (native "git_reflog"))
(c-type git_reflog* (pointer git_reflog))
(c-type git_reflog** (pointer git_reflog*))
(c-type git_strarray (native "git_strarray"))
(c-type git_strarray* (pointer git_strarray))
(c-type git_strarray** (pointer git_strarray*))
(c-type git_time_t (native "git_time_t"))
(c-type git_config (native "git_config"))
(c-type git_config* (pointer git_config))
(c-type git_config** (pointer git_config*))
(c-type git_config_file (native "git_config_file"))
(c-type git_config_file* (pointer git_config_file))
(c-type git_config_file** (pointer git_config_file*))
(c-type git_cvar_map (native "git_cvar_map"))
(c-type git_cvar_map* (pointer git_cvar_map))
(c-type git_cvar_map** (pointer git_cvar_map*))
(c-type git_diff_options (native "git_diff_options"))
(c-type git_diff_options* (pointer git_diff_options))
(c-type git_diff_options** (pointer git_diff_options*))
(c-type git_diff_file_fn (native "git_diff_file_fn"))
(c-type git_diff_file_fn* (pointer git_diff_file_fn))
(c-type git_diff_file_fn** (pointer git_diff_file_fn*))
(c-type git_diff_hunk_fn (native "git_diff_hunk_fn"))
(c-type git_diff_hunk_fn* (pointer git_diff_hunk_fn))
(c-type git_diff_hunk_fn** (pointer git_diff_hunk_fn*))
(c-type git_diff_data_fn (native "git_diff_data_fn"))
(c-type git_diff_data_fn* (pointer git_diff_data_fn))
(c-type git_diff_data_fn** (pointer git_diff_data_fn*))
(c-type git_diff_list (native "git_diff_list"))
(c-type git_diff_list* (pointer git_diff_list))
(c-type git_diff_list** (pointer git_diff_list*))
(c-type git_error (native "git_error"))
(c-type git_error* (pointer git_error))
(c-type git_error** (pointer git_error*))
(c-type git_branch_t (native "git_branch_t"))
(c-type git_branch_t* (pointer git_branch_t))
(c-type git_branch_t** (pointer git_branch_t*))
(c-type git_index_entry_unmerged (native "git_index_entry_unmerged"))
(c-type git_index_entry_unmerged* (pointer git_index_entry_unmerged))
(c-type git_index_entry_unmerged** (pointer git_index_entry_unmerged*))
(c-type git_indexer (native "git_indexer"))
(c-type git_indexer* (pointer git_indexer))
(c-type git_indexer** (pointer git_indexer*))
(c-type git_indexer_stats (native "git_indexer_stats"))
(c-type git_indexer_stats* (pointer git_indexer_stats))
(c-type git_indexer_stats** (pointer git_indexer_stats*))
(c-type git_indexer_stream (native "git_indexer_stream"))
(c-type git_indexer_stream* (pointer git_indexer_stream))
(c-type git_indexer_stream** (pointer git_indexer_stream*))
(c-type git_note (native "git_note"))
(c-type git_note* (pointer git_note))
(c-type git_note** (pointer git_note*))
(c-type git_note_data (native "git_note_data"))
(c-type git_note_data* (pointer git_note_data))
(c-type git_note_data** (pointer git_note_data*))
(c-type git_oid_shorten (native "git_oid_shorten"))
(c-type git_oid_shorten* (pointer git_oid_shorten))
(c-type git_oid_shorten** (pointer git_oid_shorten*))
(c-type git_refspec (native "git_refspec"))
(c-type git_refspec* (pointer git_refspec))
(c-type git_refspec** (pointer git_refspec*))
(c-type git_remote (native "git_remote"))
(c-type git_remote* (pointer git_remote))
(c-type git_remote** (pointer git_remote*))
(c-type git_remote_callbacks (native "git_remote_callbacks"))
(c-type git_remote_callbacks* (pointer git_remote_callbacks))
(c-type git_remote_callbacks** (pointer git_remote_callbacks*))
(c-type git_headlist_cb (native "git_headlist_cb"))
(c-type git_headlist_cb* (pointer git_headlist_cb))
(c-type git_headlist_cb** (pointer git_headlist_cb*))
(c-type git_status_options (native "git_status_options"))
(c-type git_status_options* (pointer git_status_options))
(c-type git_status_options** (pointer git_status_options*))
(c-type git_submodule (native "git_submodule"))
(c-type git_submodule* (pointer git_submodule))
(c-type git_submodule** (pointer git_submodule*))
(c-type git_treewalk_cb (native "git_treewalk_cb"))
(c-type char-string* (pointer char-string))


;;;
;;;; Pointers
;;;


(define-pointer-to-pointer git_odb* "git_odb*")
(define-pointer-to-pointer git_odb_backend* "git_odb_backend*")
(define-pointer-to-pointer git_odb_object* "git_odb_object*")
(define-pointer-to-pointer git_odb_stream* "git_odb_stream*")
(define-pointer-to-pointer git_repository* "git_repository*")
(define-pointer-to-pointer git_object* "git_object*");
(define-pointer-to-pointer git_revwalk* "git_revwalk*")
(define-pointer-to-pointer git_tag* "git_tag*")
(define-pointer-to-pointer git_blob* "git_blob*")
(define-pointer-to-pointer git_commit* "git_commit*")
(define-pointer-to-pointer git_tree_entry* "git_tree_entry*")
(define-pointer-to-pointer git_tree* "git_tree*")
(define-pointer-to-pointer git_treebuilder* "git_treebuilder*")
(define-pointer-to-pointer git_index* "git_index*")
(define-pointer-to-pointer git_config* "git_config*")
(define-pointer-to-pointer git_reflog_entry* "git_reflog_entry*")
(define-pointer-to-pointer git_reflog* "git_reflog*")
(define-pointer-to-pointer git_reference* "git_reference*")
(define-pointer-to-pointer git_signature* "git_signature*")
(define-pointer-to-pointer git_strarray* "git_strarray*")


;;;
;;;; Structures
;;;


(c-structure git_index_time
  (time_t seconds)
  (uint nanoseconds))


(c-structure git_index_entry
  (git_index_time ctime)
  (git_index_time mtime)
  (uint dev)
  (uint ino)
  (uint mode)
  (uint uid)
  (uint gid)
  (git_off_t file_size)
  (git_oid oid)
  (ushort flags)
  (ushort flags_extended)
  (char-string path))


(c-structure git_transfer_progress
  (uint total_objects)
  (uint indexed_objects)
  (uint received_objects)
  (size_t received_bytes))


(c-structure git_strarray
  (char** strings)
  (uint count))


;;;
;;;; Attr
;;;


(definition public git_attr_add_macro (c-function (git_repository* char-string char-string) int "git_attr_add_macro"))
(definition public git_attr_cache_flush (c-function (git_repository*) void "git_attr_cache_flush"))
@callback(definition public git_attr_foreach (c-function (git_repository* unsigned-int32 char-string  void* void*) int "git_attr_foreach"))
(definition public git_attr_get (c-function (char** git_repository* unsigned-int32 char-string char-string) int "git_attr_get"))
(definition public git_attr_get_many (c-function (char** git_repository* unsigned-int32 char-string size_t char**) int "git_attr_get_many"))


;;;
;;;; Blobs
;;;


(definition public git_blob_create_frombuffer (c-function (git_oid* git_repository* void* size_t) int "git_blob_create_frombuffer"))
(definition public git_blob_create_fromdisk (c-function (git_oid* git_repository* char-string) int "git_blob_create_fromdisk"))
@removed18!?(definition public git_blob_create_fromfile (c-function (git_oid* git_repository* char-string) int "git_blob_create_fromfile"))
@wait18(definition public git_blob_free (c-function (git_blob*) void "git_blob_free"))
(definition public git_blob_lookup (c-function (git_blob** git_repository* git_oid*) int  "git_blob_lookup"))
(definition public git_blob_lookup_prefix (c-function (git_blob** git_repository* git_oid* size_t) int "git_blob_lookup_prefix"))
(definition public git_blob_rawcontent (c-function (git_blob*) void* "git_blob_rawcontent"))
(definition public git_blob_rawsize (c-function (git_blob*) size_t "git_blob_rawsize"))


;;;
;;;; Branch
;;;


(definition public git_branch_create (c-function (git_reference** git_repository* char-string git_object* int) int "git_branch_create"))
(definition public git_branch_delete (c-function (git_reference*) int "git_branch_delete"))
@removed18!?(definition public git_branch_list (c-function (git_strarray* git_repository* uint) int "git_branch_list"))
(definition public git_branch_move (c-function (git_reference** git_reference* char-string int) int "git_branch_move"))


;;;
;;;; Commits
;;;


(definition public git_commit_author (c-function (git_commit*) git_signature* "git_commit_author"))
(definition public git_commit_committer (c-function (git_commit*) git_signature* "git_commit_committer"))
(definition public git_commit_create (c-function (git_oid* git_repository* char-string git_signature* git_signature* char-string char-string git_tree* int git_commit**) int "git_commit_create"))
(definition public git_commit_create_v (c-function (git_oid* git_repository* char-string git_signature* git_signature* char-string char-string git_tree* int) int "git_commit_create_v"))
(definition public git_commit_free (c-function (git_commit*) void "git_commit_free"))
(definition public git_commit_id (c-function (git_commit*) git_oid* "git_commit_id"))
(definition public git_commit_lookup (c-function (git_commit** git_repository* git_oid*) int "git_commit_lookup"))
(definition public git_commit_lookup_prefix (c-function (git_commit** git_repository* git_oid* size_t) int "git_commit_lookup_prefix"))
(definition public git_commit_message (c-function (git_commit*) char-string "git_commit_message"))
(definition public git_commit_message_encoding (c-function (git_commit*) char-string "git_commit_message_encoding"))
(definition public git_commit_parent (c-function (git_commit** git_commit* uint) int "git_commit_parent"))
(definition public git_commit_parent_id (c-function (git_commit* uint) git_oid* "git_commit_parent_id"))
(definition public git_commit_parentcount (c-function (git_commit*) uint "git_commit_parentcount"))
(definition public git_commit_time (c-function (git_commit*) git_time_t "git_commit_time"))
(definition public git_commit_time_offset (c-function (git_commit*) int "git_commit_time_offset"))
(definition public git_commit_tree (c-function (git_tree** git_commit*) int "git_commit_tree"))
(definition public git_commit_tree_id (c-function (git_commit*) git_oid* "git_commit_tree_id"))


;;;
;;;; Config
;;;


@wait18(definition public git_config_add_file (c-function (git_config* git_config_file* int) int "git_config_add_file"))
@wait18(definition public git_config_add_file_ondisk (c-function (git_config* char-string int) int "git_config_add_file_ondisk"))
(definition public git_config_delete_entry (c-function (git_config* char-string) int "git_config_delete_entry"))
@wait18(definition public git_config_file__ondisk (c-function (git_config_file** char-string) int "git_config_file__ondisk"))
(definition public git_config_find_global (c-function (char-string size_t) int "git_config_find_global"))
(definition public git_config_find_system (c-function (char-string size_t) int "git_config_find_system"))
@callback(definition public git_config_foreach (c-function (git_config* void* void*) int "git_config_foreach"))
@callback(definition public git_config_foreach_match (c-function (git_config* char-string void* void*) int "git_config_foreach_match"))
(definition public git_config_free (c-function (git_config*) void "git_config_free"))
(definition public git_config_get_bool (c-function (int* git_config* char-string) int "git_config_get_bool"))
(definition public git_config_get_int32 (c-function (int32_t* git_config* char-string) int "git_config_get_int32"))
(definition public git_config_get_int64 (c-function (int64_t* git_config* char-string) int "git_config_get_int64"))
(definition public git_config_get_mapped (c-function (int* git_config* char-string git_cvar_map* size_t) int "git_config_get_mapped"))
@callback(definition public git_config_get_multivar (c-function (git_config* char-string char-string void* void*) int "git_config_get_multivar"))
(definition public git_config_get_string (c-function (char** git_config* char-string) int "git_config_get_string"))
(definition public git_config_new (c-function (git_config**) int "git_config_new"))
@wait18(definition public git_config_open_global (c-function (git_config**) int "git_config_open_global"))
@wait18(definition public git_config_open_ondisk (c-function (git_config** char-string) int "git_config_open_ondisk"))
(definition public git_config_set_bool (c-function (git_config* char-string int) int "git_config_set_bool"))
(definition public git_config_set_int32 (c-function (git_config* char-string int32_t) int "git_config_set_int32"))
(definition public git_config_set_int64 (c-function (git_config* char-string int64_t) int "git_config_set_int64"))
(definition public git_config_set_multivar (c-function (git_config* char-string char-string char-string) int "git_config_set_multivar"))
(definition public git_config_set_string (c-function (git_config* char-string char-string) int "git_config_set_string"))


;;;
;;;; Diff
;;;


@wait18 (
(definition public git_diff_blobs (c-function (git_blob* git_blob* git_diff_options* void* git_diff_file_fn git_diff_hunk_fn git_diff_data_fn) int "git_diff_blobs"))
(definition public git_diff_foreach (c-function (git_diff_list* void* git_diff_file_fn git_diff_hunk_fn git_diff_data_fn) int "git_diff_foreach"))
(definition public git_diff_index_to_tree (c-function (git_repository* git_diff_options* git_tree* git_diff_list**) int "git_diff_index_to_tree"))
(definition public git_diff_list_free (c-function (git_diff_list*) void "git_diff_list_free"))
(definition public git_diff_merge (c-function (git_diff_list* git_diff_list*) int "git_diff_merge"))
(definition public git_diff_print_compact (c-function (git_diff_list* void* git_diff_data_fn) int "git_diff_print_compact"))
(definition public git_diff_print_patch (c-function (git_diff_list* void* git_diff_data_fn) int "git_diff_print_patch"))
(definition public git_diff_tree_to_tree (c-function (git_repository* git_diff_options* git_tree* git_tree* git_diff_list**) int "git_diff_tree_to_tree"))
(definition public git_diff_workdir_to_index (c-function (git_repository* git_diff_options* git_diff_list**) int "git_diff_workdir_to_index"))
(definition public git_diff_workdir_to_tree (c-function (git_repository* git_diff_options* git_tree* git_diff_list**) int "git_diff_workdir_to_tree"))
)

;;;
;;;; Error
;;;


(definition public giterr_clear (c-function () void "giterr_clear"))
(definition public giterr_last (c-function () git_error* "giterr_last"))


(definition public git-error
  giterr_last)


(definition public git-error-message
  (c-function (git_error*) char-string
    "___result = ___arg1->message;"))


;;;
;;;; Windows
;;;


@removed18!?(definition public gitwin_get_codepage (c-function () uint "gitwin_get_codepage"))
@removed18!?(definition public gitwin_set_codepage (c-function (uint) void "gitwin_set_codepage"))
@removed18!?(definition public gitwin_set_utf8 (c-function () void "gitwin_set_utf8"))


;;;
;;;; Indexes
;;;


(definition public git_index_add (c-function (git_index* git_index_entry*) int "git_index_add"))
(definition public git_index_add_bypath (c-function (git_index* char-string) int "git_index_add_bypath"))
@removed18!?(definition public git_index_append (c-function (git_index* char-string int) int "git_index_append"))
@removed18!?(definition public git_index_append2 (c-function (git_index* git_index_entry*) int "git_index_append2"))
(definition public git_index_clear (c-function (git_index*) void "git_index_clear"))
(definition public git_index_entry_stage (c-function (git_index_entry*) int "git_index_entry_stage"))
(definition public git_index_entrycount (c-function (git_index*) uint "git_index_entrycount"))
@removed18!?(definition public git_index_entrycount_unmerged (c-function (git_index*) uint "git_index_entrycount_unmerged"))
(definition public git_index_find (c-function (size_t* git_index* char-string) int "git_index_find"))
(definition public git_index_free (c-function (git_index*) void "git_index_free"))
(definition public git_index_get_byindex (c-function (git_index* int) git_index_entry* "git_index_get_byindex"))
@removed18!?(definition public git_index_get_unmerged_byindex (c-function (git_index* size_t) git_index_entry_unmerged* "git_index_get_unmerged_byindex"))
@removed18!?(definition public git_index_get_unmerged_bypath (c-function (git_index* char-string) git_index_entry_unmerged* "git_index_get_unmerged_bypath"))
(definition public git_index_open (c-function (git_index** char-string) int "git_index_open"))
(definition public git_index_read (c-function (git_index*) int "git_index_read"))
(definition public git_index_read_tree (c-function (git_index* git_tree*) int "git_index_read_tree"))
(definition public git_index_remove (c-function (git_index* char-string int) int "git_index_remove"))
@removed18!?(definition public git_index_uniq (c-function (git_index*) void "git_index_uniq"))
(definition public git_index_write (c-function (git_index*) int "git_index_write"))


(definition public git-index-free
  git_index_free)


(definition public git-index-entrycount
  git_index_entrycount)


(definition public git-index-get
  git_index_get_byindex)


(definition public (git-index-list index)
  (let ((count (git-index-entrycount index)))
    (loop (for n from 0 below count)
          (collect (git-index-get index n)))))


(definition public (git-index-entry-ctime entry)
  (git_index_time-seconds-ref (git_index_entry-ctime-ref entry)))

(definition public (git-index-entry-mtime entry)
  (git_index_time-seconds-ref (git_index_entry-mtime-ref entry)))

(definition public (git-index-entry-path entry)
  (git_index_entry-path-ref entry))


;;;
;;;; Indexer
;;;


(definition public git_indexer_stream_add (c-function (git_indexer_stream* void* size_t git_transfer_progress*) int "git_indexer_stream_add"))
(definition public git_indexer_stream_finalize (c-function (git_indexer_stream* git_transfer_progress*) int "git_indexer_stream_finalize"))
(definition public git_indexer_stream_free (c-function (git_indexer_stream*) void "git_indexer_stream_free"))
(definition public git_indexer_stream_hash (c-function (git_indexer_stream*) git_oid* "git_indexer_stream_hash"))
@wait18(definition public git_indexer_stream_new (c-function (git_indexer_stream** char-string) int "git_indexer_stream_new"))


;;;
;;;; Version
;;;


(definition public git_libgit2_version (c-function (int* int* int*) void "git_libgit2_version"))


(definition public git-version
  (c-function () scheme-object
    "int major, minor, rev;
     git_libgit2_version(&major, &minor, &rev);
     ___SCMOBJ version = ___EXT(___make_pair) (___FIX(major), ___FIX(minor), ___STILL);
     ___result = version;"))


;;;
;;;; Merge
;;;


(definition public git_merge_base (c-function (git_oid* git_repository* git_oid* git_oid*) int "git_merge_base"))


;;;
;;;; Message
;;;


(definition public git_message_prettify (c-function (char* size_t char-string int) int "git_message_prettify"))


;;;
;;;; Note
;;;


@wait18(definition public git_note_create (c-function (git_oid* git_repository* git_signature* git_signature* char-string git_oid* char-string) int "git_note_create"))
(definition public git_note_default_ref (c-function (char** git_repository*) int "git_note_default_ref"))
@callback(definition public git_note_foreach (c-function (git_repository* char-string void* void*) int "git_note_foreach"))
(definition public git_note_free (c-function (git_note*) void "git_note_free"))
(definition public git_note_message (c-function (git_note*) char-string "git_note_message"))
(definition public git_note_oid (c-function (git_note*) git_oid* "git_note_oid"))
(definition public git_note_read (c-function (git_note** git_repository* char-string git_oid*) int "git_note_read"))
(definition public git_note_remove (c-function (git_repository* char-string git_signature* git_signature* git_oid*) int "git_note_remove"))


;;;
;;;; Object
;;;


(definition public git_object__size (c-function (git_otype) size_t "git_object__size"))
(definition public git_object_free (c-function (git_object*) void "git_object_free"))
(definition public git_object_id (c-function (git_object*) git_oid* "git_object_id"))
(definition public git_object_lookup (c-function (git_object** git_repository* git_oid* git_otype) int "git_object_lookup"))
(definition public git_object_lookup_prefix (c-function (git_object** git_repository* git_oid* size_t git_otype) int "git_object_lookup_prefix"))
(definition public git_object_owner (c-function (git_object*) git_repository* "git_object_owner"))
(definition public git_object_string2type (c-function (char-string) git_otype "git_object_string2type"))
(definition public git_object_type (c-function (git_object*) git_otype "git_object_type"))
(definition public git_object_type2string (c-function (git_otype) char-string "git_object_type2string"))
(definition public git_object_typeisloose (c-function (git_otype) int "git_object_typeisloose"))


;;;
;;;; Object Database
;;;


(definition public git_odb_add_alternate (c-function (git_odb* git_odb_backend* int) int "git_odb_add_alternate"))
(definition public git_odb_add_backend (c-function (git_odb* git_odb_backend* int) int "git_odb_add_backend"))
(definition public git_odb_exists (c-function (git_odb* git_oid*) int "git_odb_exists"))
@callback(definition public git_odb_foreach (c-function (git_odb* void* void*) int "git_odb_foreach"))
(definition public git_odb_free (c-function (git_odb*) void "git_odb_free"))
(definition public git_odb_hash (c-function (git_oid* void* size_t git_otype) int "git_odb_hash"))
(definition public git_odb_hashfile (c-function (git_oid* char-string git_otype) int "git_odb_hashfile"))
(definition public git_odb_new (c-function (git_odb**) int "git_odb_new"))
(definition public git_odb_object_data (c-function (git_odb_object*) void* "git_odb_object_data"))
(definition public git_odb_object_free (c-function (git_odb_object*) void "git_odb_object_free"))
(definition public git_odb_object_id (c-function (git_odb_object*) git_oid* "git_odb_object_id"))
(definition public git_odb_object_size (c-function (git_odb_object*) size_t "git_odb_object_size"))
(definition public git_odb_object_type (c-function (git_odb_object*) git_otype "git_odb_object_type"))
(definition public git_odb_open (c-function (git_odb** char-string) int "git_odb_open"))
(definition public git_odb_open_rstream (c-function (git_odb_stream** git_odb* git_oid*) int "git_odb_open_rstream"))
(definition public git_odb_open_wstream (c-function (git_odb_stream** git_odb* size_t git_otype) int "git_odb_open_wstream"))
(definition public git_odb_read (c-function (git_odb_object** git_odb* git_oid*) int "git_odb_read"))
(definition public git_odb_read_header (c-function (size_t* git_otype* git_odb* git_oid*) int "git_odb_read_header"))
(definition public git_odb_read_prefix (c-function (git_odb_object** git_odb* git_oid* size_t) int "git_odb_read_prefix"))
(definition public git_odb_write (c-function (git_oid* git_odb* void* size_t git_otype) int "git_odb_write"))


;;;
;;;; Object ID
;;;


(definition public git_oid_allocfmt (c-function (git_oid*) char* "git_oid_allocfmt"))
(definition public git_oid_cmp (c-function (git_oid* git_oid*) int "git_oid_cmp"))
(definition public git_oid_cpy (c-function (git_oid* git_oid*) void "git_oid_cpy"))
(definition public git_oid_fmt (c-function (char-string git_oid*) void "git_oid_fmt"))
(definition public git_oid_fromraw (c-function (git_oid* uchar*) void "git_oid_fromraw"))
(definition public git_oid_fromstr (c-function (git_oid* char-string) int "git_oid_fromstr"))
(definition public git_oid_fromstrn (c-function (git_oid* char-string size_t) int "git_oid_fromstrn"))
(definition public git_oid_iszero (c-function (git_oid*) int "git_oid_iszero"))
(definition public git_oid_ncmp (c-function (git_oid* git_oid* size_t) int "git_oid_ncmp"))
(definition public git_oid_pathfmt (c-function (char-string git_oid*) void "git_oid_pathfmt"))
(definition public git_oid_shorten_add (c-function (git_oid_shorten* char-string) int "git_oid_shorten_add"))
(definition public git_oid_shorten_free (c-function (git_oid_shorten*) void "git_oid_shorten_free"))
(definition public git_oid_shorten_new (c-function (size_t) git_oid_shorten* "git_oid_shorten_new"))
(definition public git_oid_streq (c-function (git_oid* char-string) int "git_oid_streq"))
(definition public git_oid_tostr (c-function (char-string size_t git_oid*) char-string "git_oid_tostr"))


;;;
;;;; References
;;;


(definition public git_reference_cmp (c-function (git_reference* git_reference*) int "git_reference_cmp"))
(definition public git_reference_create (c-function (git_reference** git_repository* char-string git_oid* int) int "git_reference_create"))
(definition public git_reference_delete (c-function (git_reference*) int "git_reference_delete"))
@callback(definition public git_reference_foreach (c-function (git_repository* uint void* void*) int "git_reference_foreach"))
@callback(definition public git_reference_foreach_glob (c-function (git_repository* char-string uint void* void*) int "git_reference_foreach_glob"))
(definition public git_reference_free (c-function (git_reference*) void "git_reference_free"))
@removed18!?(definition public git_reference_is_packed (c-function (git_reference*) int "git_reference_is_packed"))
(definition public git_reference_lookup (c-function (git_reference** git_repository* char-string) int "git_reference_lookup"))
(definition public git_reference_name (c-function (git_reference*) char-string "git_reference_name"))
(definition public git_reference_name_to_id (c-function (git_oid* git_repository* char-string) int "git_reference_name_to_id"))
@removed18!?(definition public git_reference_oid (c-function (git_reference*) git_oid* "git_reference_oid"))
(definition public git_reference_owner (c-function (git_reference*) git_repository* "git_reference_owner"))
@removed18!?(definition public git_reference_packall (c-function (git_repository*) int "git_reference_packall"))
@removed18!?(definition public git_reference_reload (c-function (git_reference*) int "git_reference_reload"))
(definition public git_reference_rename (c-function (git_reference** git_reference* char-string int) int "git_reference_rename"))
(definition public git_reference_resolve (c-function (git_reference** git_reference*) int "git_reference_resolve"))
@removed18!?(definition public git_reference_set_oid (c-function (git_reference* git_oid*) int "git_reference_set_oid"))
(definition public git_reference_set_target (c-function (git_reference** git_reference* char-string) int "git_reference_set_target"))
(definition public git_reference_target (c-function (git_reference*) char-string "git_reference_target"))
(definition public git_reference_type (c-function (git_reference*) git_ref_t "git_reference_type"))


;;;
;;;; Reflog
;;;


(definition public git_reflog_delete (c-function (git_reference*) int "git_reflog_delete"))
(definition public git_reflog_entry_byindex (c-function (git_reflog* size_t) git_reflog_entry* "git_reflog_entry_byindex"))
(definition public git_reflog_entry_committer (c-function (git_reflog_entry*) git_signature* "git_reflog_entry_committer"))
(definition public git_reflog_entry_message (c-function (git_reflog_entry*) char* "git_reflog_entry_message"))
(definition public git_reflog_entry_id_new (c-function (git_reflog_entry*) git_oid* "git_reflog_entry_id_new"))
(definition public git_reflog_entry_id_old (c-function (git_reflog_entry*) git_oid* "git_reflog_entry_id_old"))
(definition public git_reflog_entrycount (c-function (git_reflog*) uint "git_reflog_entrycount"))
(definition public git_reflog_free (c-function (git_reflog*) void "git_reflog_free"))
(definition public git_reflog_read (c-function (git_reflog** git_reference*) int "git_reflog_read"))
(definition public git_reflog_rename (c-function (git_reference* char-string) int "git_reflog_rename"))
(definition public git_reflog_write (c-function (git_reflog*) int "git_reflog_write"))


;;;
;;;; Refspec
;;;


(definition public git_refspec_dst (c-function (git_refspec*) char-string "git_refspec_dst"))
@removed18!?(definition public git_refspec_parse (c-function (git_refspec* char-string) int "git_refspec_parse"))
(definition public git_refspec_src (c-function (git_refspec*) char-string "git_refspec_src"))
(definition public git_refspec_src_matches (c-function (git_refspec* char-string) int "git_refspec_src_matches"))
(definition public git_refspec_transform (c-function (char* size_t git_refspec* char-string) int "git_refspec_transform"))


;;;
;;;; Remote
;;;


@removed18!?(definition public git_remote_add (c-function (git_remote** git_repository* char-string char-string) int "git_remote_add"))
(definition public git_remote_connect (c-function (git_remote* int) int "git_remote_connect"))
(definition public git_remote_connected (c-function (git_remote*) int "git_remote_connected"))
(definition public git_remote_disconnect (c-function (git_remote*) void "git_remote_disconnect"))
@wait18(definition public git_remote_download (c-function (git_remote* git_off_t* git_indexer_stats*) int "git_remote_download"))
@wait18(definition public git_remote_fetchspec (c-function (git_remote*) git_refspec* "git_remote_fetchspec"))
(definition public git_remote_free (c-function (git_remote*) void "git_remote_free"))
(definition public git_remote_list (c-function (git_strarray* git_repository*) int "git_remote_list"))
(definition public git_remote_load (c-function (git_remote** git_repository* char-string) int "git_remote_load"))
(definition public git_remote_ls (c-function (git_remote* git_headlist_cb void*) int "git_remote_ls"))
(definition public git_remote_name (c-function (git_remote*) char-string "git_remote_name"))
@removed18!?(definition public git_remote_new (c-function (git_remote** git_repository* char-string char-string char-string) int "git_remote_new"))
@wait18(definition public git_remote_pushspec (c-function (git_remote*) git_refspec* "git_remote_pushspec"))
(definition public git_remote_save (c-function (git_remote*) int "git_remote_save"))
@callback(definition public git_remote_set_callbacks (c-function (git_remote* git_remote_callbacks*) void "git_remote_set_callbacks"))
@wait18(definition public git_remote_set_fetchspec (c-function (git_remote* char-string) int "git_remote_set_fetchspec"))
@wait18(definition public git_remote_set_pushspec (c-function (git_remote* char-string) int "git_remote_set_pushspec"))
(definition public git_remote_supported_url (c-function (char-string) int "git_remote_supported_url"))
(definition public git_remote_update_tips (c-function (git_remote*) int "git_remote_update_tips"))
(definition public git_remote_url (c-function (git_remote*) char-string "git_remote_url"))
(definition public git_remote_valid_url (c-function (char-string) int "git_remote_valid_url"))


(definition public git-remote-load
  (c-function (git_repository* char-string) git_remote*
    #<<end-of-c-code
    git_remote* remote;
    int result = git_remote_load(&remote, ___arg1, ___arg2);
    if (result != 0) git_call_error_handler(result);
    ___result_voidstar = remote;
end-of-c-code
))


(definition public (git-remote-connect remote direction)
  (let ((err (git_remote_connect remote direction)))
    (when (/= err 0)
      (git-error-handler err))))

(definition public git-remote-disconnect
  git_remote_disconnect)


(definition public (git-remote-download remote)
  (c-function (git_remote*) void
    #<<end-of-c-code
    int result = git_remote_download(___arg1, NULL, NULL);
    if (result != 0) git_call_error_handler(result);
end-of-c-code
))


(definition public git-remote-update-tips
  git_remote_update_tips)


;;;
;;;; Repository
;;;


(definition public git_repository_config (c-function (git_config** git_repository*) int "git_repository_config"))
(definition public git_repository_discover (c-function (char* size_t char-string int char-string) int "git_repository_discover"))
(definition public git_repository_free (c-function (git_repository*) void "git_repository_free"))
(definition public git_repository_head (c-function (git_reference** git_repository*) int "git_repository_head"))
(definition public git_repository_head_detached (c-function (git_repository*) int "git_repository_head_detached"))
(definition public git_repository_head_orphan (c-function (git_repository*) int "git_repository_head_orphan"))
(definition public git_repository_index (c-function (git_index** git_repository*) int "git_repository_index"))
(definition public git_repository_init (c-function (git_repository** char-string uint) int "git_repository_init"))
(definition public git_repository_is_bare (c-function (git_repository*) int "git_repository_is_bare"))
(definition public git_repository_is_empty (c-function (git_repository*) int "git_repository_is_empty"))
(definition public git_repository_odb (c-function (git_odb** git_repository*) int "git_repository_odb"))
(definition public git_repository_open (c-function (git_repository** char-string) int "git_repository_open"))
(definition public git_repository_open_ext (c-function (git_repository** char-string uint32_t char-string) int "git_repository_open_ext"))
(definition public git_repository_path (c-function (git_repository*) char-string "git_repository_path"))
(definition public git_repository_set_config (c-function (git_repository* git_config*) void "git_repository_set_config"))
(definition public git_repository_set_index (c-function (git_repository* git_index*) void "git_repository_set_index"))
(definition public git_repository_set_odb (c-function (git_repository* git_odb*) void "git_repository_set_odb"))
(definition public git_repository_set_workdir (c-function (git_repository* char-string int) int "git_repository_set_workdir"))
(definition public git_repository_workdir (c-function (git_repository*) char-string "git_repository_workdir"))


(definition public git-repository-open
  (c-function (char-string) git_repository*
    #<<end-of-c-code
    git_repository* repo;
    int result = git_repository_open(&repo, ___arg1);
    if (result != 0) git_call_error_handler(result);
    ___result_voidstar = repo;
end-of-c-code
))


(definition public (git-repository-init dir)
  ((c-function (char-string uint) git_repository*
     #<<end-of-c-code
     git_repository* repo;
     int result = git_repository_init(&repo, ___arg1, ___arg2);
     if (result != 0) git_call_error_handler(result);
     ___result_voidstar = repo;
end-of-c-code
)
   (parse~ dir)
   0))


(definition public (git-repository-bare? repo)
  (= 1 (git_repository_is_bare repo)))


(definition public (git-repository-empty? repo)
  (= 1 (git_repository_is_empty repo)))


(definition public git-repository-path
  git_repository_path)


(definition public git-repository-index
  (c-function (git_repository*) git_index*
    #<<end-of-c-code
    git_index* index;
    int result = git_repository_index(&index, ___arg1);
    if (result != 0) git_call_error_handler(result);
    ___result_voidstar = index;
end-of-c-code
))


(definition public git-repository-fetch
  (c-function (git_repository* char-string) void
    #<<end-of-c-code
    git_remote* remote;
    git_remote_load(&remote, ___arg1, ___arg2);
    
    int error;
    git_error* err;
    
    error = git_remote_connect(remote, GIT_DIRECTION_FETCH);
    if (error < 0)
        goto cleanup;

    error = git_remote_download(remote, NULL, NULL);
    if (error < 0) {
        git_remote_disconnect(remote);
        goto cleanup;
    }
    
    git_remote_disconnect(remote);
    
    error = git_remote_update_tips(remote);
    if (error < 0) 
        goto cleanup;
    
    cleanup:
        git_remote_free(remote);
        
        if (error != 0) 
            git_call_error_handler(error);
end-of-c-code
))


(definition public git-repository-free
  git_repository_free)


(definition public (with-repository path proc)
  (let ((repo #f))
    (unwind-protect
        (begin
          (set! repo (git-repository-open path))
          (proc repo))
      (when repo
        (git-repository-free repo)))))


;;;
;;;; Revision traversal
;;;


(definition public git_revwalk_free (c-function (git_revwalk*) void "git_revwalk_free"))
(definition public git_revwalk_hide (c-function (git_revwalk* git_oid*) int "git_revwalk_hide"))
(definition public git_revwalk_hide_ref (c-function (git_revwalk* char-string) int "git_revwalk_hide_ref"))
(definition public git_revwalk_new (c-function (git_revwalk** git_repository*) int "git_revwalk_new"))
(definition public git_revwalk_next (c-function (git_oid* git_revwalk*) int "git_revwalk_next"))
(definition public git_revwalk_push (c-function (git_revwalk* git_oid*) int "git_revwalk_push"))
(definition public git_revwalk_push_glob (c-function (git_revwalk* char-string) int "git_revwalk_push_glob"))
(definition public git_revwalk_push_head (c-function (git_revwalk*) int "git_revwalk_push_head"))
(definition public git_revwalk_push_ref (c-function (git_revwalk* char-string) int "git_revwalk_push_ref"))
(definition public git_revwalk_repository (c-function (git_revwalk*) git_repository* "git_revwalk_repository"))
(definition public git_revwalk_reset (c-function (git_revwalk*) void "git_revwalk_reset"))
(definition public git_revwalk_sorting (c-function (git_revwalk* uint) void "git_revwalk_sorting"))


;;;
;;;; Signature
;;;


(definition public git_signature_dup (c-function (git_signature*) git_signature* "git_signature_dup"))
(definition public git_signature_free (c-function (git_signature*) void "git_signature_free"))
(definition public git_signature_new (c-function (git_signature** char-string char-string git_time_t int) int "git_signature_new"))
(definition public git_signature_now (c-function (git_signature** char-string char-string) int "git_signature_now"))


;;;
;;;; Status
;;;


(definition public git_status_file (c-function (uint* git_repository* char-string) int "git_status_file"))
@callback(definition public git_status_foreach (c-function (git_repository* void* void*) int "git_status_foreach"))
@callback(definition public git_status_foreach_ext (c-function (git_repository* git_status_options* void* voiod*) int "git_status_foreach_ext"))
(definition public git_status_should_ignore (c-function (int* git_repository* char-string) int "git_status_should_ignore"))


;;;
;;;; Submodule
;;;


@callback(definition public git_submodule_foreach (c-function (git_repository* void* void*) int "git_submodule_foreach"))
(definition public git_submodule_lookup (c-function (git_submodule** git_repository* char-string) int "git_submodule_lookup"))


;;;
;;;; Tag
;;;


(definition public git_tag_create (c-function (git_oid* git_repository* char-string git_object* git_signature* char-string int) int "git_tag_create"))
(definition public git_tag_create_frombuffer (c-function (git_oid* git_repository* char-string int) int "git_tag_create_frombuffer"))
(definition public git_tag_create_lightweight (c-function (git_oid* git_repository* char-string git_object* int) int "git_tag_create_lightweight"))
(definition public git_tag_delete (c-function (git_repository* char-string) int "git_tag_delete"))
(definition public git_tag_free (c-function (git_tag*) void "git_tag_free"))
(definition public git_tag_id (c-function (git_tag*) git_oid* "git_tag_id"))
(definition public git_tag_list (c-function (git_strarray* git_repository*) int "git_tag_list"))
(definition public git_tag_list_match (c-function (git_strarray* char-string git_repository*) int "git_tag_list_match"))
(definition public git_tag_lookup (c-function (git_tag** git_repository* git_oid*) int "git_tag_lookup"))
(definition public git_tag_lookup_prefix (c-function (git_tag** git_repository* git_oid* size_t) int "git_tag_lookup_prefix"))
(definition public git_tag_message (c-function (git_tag*) char-string "git_tag_message"))
(definition public git_tag_name (c-function (git_tag*) char-string "git_tag_name"))
(definition public git_tag_peel (c-function (git_object** git_tag*) int "git_tag_peel"))
(definition public git_tag_tagger (c-function (git_tag*) git_signature* "git_tag_tagger"))
(definition public git_tag_target (c-function (git_object** git_tag*) int "git_tag_target"))
(definition public git_tag_target_id (c-function (git_tag*) git_oid* "git_tag_target_id"))
(definition public git_tag_target_type (c-function (git_tag*) git_otype "git_tag_target_type"))


;;;
;;;; Threads
;;;


; Note - These should always be called before and after working with libgit2.
; If compiled with GIT_THREADS, they will setup / shutdown the thread system.
; If not, they are a no-op. Therefore better be safe then sorry.

(definition public git_threads_init (c-function () void "git_threads_init"))
(definition public git_threads_shutdown (c-function () void "git_threads_shutdown"))


;;;
;;;; Trees
;;;


@removed18!?(definition public git_tree_create_fromindex (c-function (git_oid* git_index*) int "git_tree_create_fromindex"))
@removed18!?(definition public git_tree_entry_attributes (c-function (git_tree_entry*) uint "git_tree_entry_attributes"))
(definition public git_tree_entry_byindex (c-function (git_tree* size_t) git_tree_entry* "git_tree_entry_byindex"))
(definition public git_tree_entry_byname (c-function (git_tree* char-string) git_tree_entry* "git_tree_entry_byname"))
(definition public git_tree_entry_id (c-function (git_tree_entry*) git_oid* "git_tree_entry_id"))
(definition public git_tree_entry_name (c-function (git_tree_entry*) char-string "git_tree_entry_name"))
(definition public git_tree_entry_to_object (c-function (git_object** git_repository* git_tree_entry*) int "git_tree_entry_to_object"))
(definition public git_tree_entry_type (c-function (git_tree_entry*) git_otype "git_tree_entry_type"))
(definition public git_tree_entrycount (c-function (git_tree*) uint "git_tree_entrycount"))
(definition public git_tree_free (c-function (git_tree*) void "git_tree_free"))
(definition public git_tree_id (c-function (git_tree*) git_oid* "git_tree_id"))
(definition public git_tree_lookup (c-function (git_tree** git_repository* git_oid*) int "git_tree_lookup"))
(definition public git_tree_lookup_prefix (c-function (git_tree** git_repository* git_oid* size_t) int "git_tree_lookup_prefix"))
@wait18(definition public git_tree_walk (c-function (git_tree* git_treewalk_cb int void*) int "git_tree_walk"))


;;;
;;;; Tree Builder
;;;


(definition public git_treebuilder_clear (c-function (git_treebuilder*) void "git_treebuilder_clear"))
(definition public git_treebuilder_create (c-function (git_treebuilder** git_tree*) int "git_treebuilder_create"))
@callback(definition public git_treebuilder_filter (c-function (git_treebuilder* void* void*) int "git_treebuilder_filter"))
(definition public git_treebuilder_free (c-function (git_treebuilder*) void "git_treebuilder_free"))
(definition public git_treebuilder_get (c-function (git_treebuilder* char-string) git_tree_entry* "git_treebuilder_get"))
(definition public git_treebuilder_insert (c-function (git_tree_entry** git_treebuilder* char-string git_oid* uint) int "git_treebuilder_insert"))
(definition public git_treebuilder_remove (c-function (git_treebuilder* char-string) int "git_treebuilder_remove"))
(definition public git_treebuilder_write (c-function (git_oid* git_repository* git_treebuilder*) int "git_treebuilder_write"))


;;;
;;;; Array
;;;


(definition public git_strarray_free (c-function (git_strarray*) void "git_strarray_free"))

)
  (else))
)
