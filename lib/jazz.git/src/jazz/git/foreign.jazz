;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Libgit2 Jazz Bindings
;;;


(module protected jazz.git.foreign jazz

(import (jazz.platform.types))
(import (jazz.platform.types-syntax (phase syntax)))



(c-include "<time.h>")
(c-include "<git2.h>")

;;;
;;;; Constants
;;;

(c-constant GIT_IDXENTRY_NAMEMASK #x0fff)
(c-constant GIT_IDXENTRY_STAGEMASK #x3000)
(c-constant GIT_IDXENTRY_EXTENDED #x4000)
(c-constant GIT_IDXENTRY_VALID #x8000)
(c-constant GIT_IDXENTRY_STAGESHIFT 12)
(c-constant GIT_OID_RAWSZ 20)
(c-constant GIT_OID_HEXSZ (* GIT_OID_RAWSZ 2))
(c-constant GIT_SORT_NONE 0)
(c-constant GIT_SORT_TOPOLOGICAL 1)
(c-constant GIT_SORT_TIME 2)
(c-constant GIT_SORT_REVERSE 4)

;;;
;;;; Error Constants
;;;

(c-constant GIT_SUCCESS 0)
(c-constant GIT_ERROR -1)
(c-constant GIT_ENOTOID (- GIT_ERROR 1))
(c-constant GIT_ENOTFOUND (- GIT_ERROR 2))
(c-constant GIT_ENOMEM (- GIT_ERROR 3))
(c-constant GIT_EOSERR (- GIT_ERROR 4))
(c-constant GIT_EOBJTYPE (- GIT_ERROR 5))
(c-constant GIT_EOBJCORRUPTED (- GIT_ERROR 6))
(c-constant GIT_ENOTAREPO (- GIT_ERROR 7))
(c-constant GIT_EINVALIDTYPE (- GIT_ERROR 8))
(c-constant GIT_EMISSINGOBJDATA (- GIT_ERROR 9))
(c-constant GIT_EPACKCORRUPTED (- GIT_ERROR 10))
(c-constant GIT_EFLOCKFAIL (- GIT_ERROR 11))
(c-constant GIT_EZLIB (- GIT_ERROR 12))
(c-constant GIT_EBUSY (- GIT_ERROR 13))
(c-constant GIT_EBAREINDEX (- GIT_ERROR 14))
(c-constant GIT_EVALIDREFNAME (- GIT_ERROR 15))
(c-constant GIT_EREFCORRUPTED (- GIT_ERROR 16))
(c-constant GIT_ETOONESTEDSYMREF (- GIT_ERROR 17))
(c-constant GIT_EPACKEDREFSCORRUPTED (- GIT_ERROR 18))
(c-constant GIT_EINVALIDPATH (- GIT_ERROR 19))


;;;
;;;; Enumerations
;;;

(c-enumeration git_otype
  (GIT_OBJ_ANY      -2)
  (GIT_OBJ_BAD      -1)
  (GIT_OBJ_EXT1      0)
  (GIT_OBJ_COMMIT    1)
  (GIT_OBJ_TREE      2)
  (GIT_OBJ_BLOB      3)
  (GIT_OBJ_TAG       4)
  (GIT_OBJ_EXT2      5)
  (GIT_OBJ_OFS_DELTA 6)
  (GIT_OBJ_REF_DELTA 7))


(c-enumeration git_rtype
  (GIT_REF_INVALID  -1)
  (GIT_REF_OID       1)
  (GIT_REF_SYMBOLIC  2))


(c-type char** (pointer char*))
(define-pointer-to-pointer char* "char*")


;;;
;;;; Types
;;;

(c-type time_t (native "time_t"))
(c-type git_time (native "git_time"))
(c-type git_otype int)
(c-type git_otype* (pointer git_otype))
(c-type git_oid (native "git_oid"))
(c-type git_oid* (pointer git_oid))
(c-type git_odb (native "git_odb"))
(c-type git_odb* (pointer git_odb))
(c-type git_odb** (pointer git_odb*))
(c-type git_odb_backend (native "git_odb_backend"))
(c-type git_odb_backend* (pointer git_odb_backend))
(c-type git_repository (native "git_repository"))
(c-type git_repository* (pointer git_repository))
(c-type git_repository** (pointer git_repository*))
(c-type git_reference (native "git_reference"))
(c-type git_reference* (pointer git_reference))
(c-type git_reference** (pointer git_reference*))
(c-type git_object (native "git_object"))
(c-type git_object* (pointer git_object))
(c-type git_object** (pointer git_object*))
(c-type git_revwalk (native "git_revwalk"))
(c-type git_revwalk* (pointer git_revwalk))
(c-type git_revwalk** (pointer git_revwalk*))
(c-type git_tag (native "git_tag"))
(c-type git_tag* (pointer git_tag))
(c-type git_tag** (pointer git_tag*))
(c-type git_blob (native "git_blob"))
(c-type git_blob* (pointer git_blob))
(c-type git_blob** (pointer git_blob*))
(c-type git_commit (native "git_commit"))
(c-type git_commit* (pointer git_commit))
(c-type git_commit** (pointer git_commit*))
(c-type git_tree_entry (native "git_tree_entry"))
(c-type git_tree_entry* (pointer git_tree_entry))
(c-type git_tree_entry** (pointer git_tree_entry*))
(c-type git_tree (native "git_tree"))
(c-type git_tree* (pointer git_tree))
(c-type git_tree** (pointer git_tree*))
(c-type git_index (native "git_index"))
(c-type git_index* (pointer git_index))
(c-type git_index** (pointer git_index*))
(c-type git_signature (native "git_signature"))
(c-type git_signature* (pointer git_signature))
(c-type git_signature** (pointer git_signature*))
(c-type git_person (native "git_person"))
(c-type git_person* (pointer git_person))
(c-type git_person** (pointer git_person*))
(c-type git_index_entry (native "git_index_entry"))
(c-type git_index_entry* (pointer git_index_entry))
(c-type git_rtype (native "git_rtype"))
(c-type size_t* (pointer size_t))
(c-type git_off_t (native "git_off_t"))
(c-type git_odb_object (native "git_odb_object"))
(c-type git_odb_object* (pointer git_odb_object))
(c-type git_odb_object** (pointer git_odb_object*))
(c-type git_time_t (native "git_time_t"))
(c-type git_odb_backend (native "git_odb_backend"))
(c-type git_odb_backend* (pointer git_odb_backend))
(c-type git_odb_backend** (pointer git_odb_backend*))
(c-type git_odb_stream (native "git_odb_stream"))
(c-type git_odb_stream* (pointer git_odb_stream))
(c-type git_odb_stream** (pointer git_odb_stream*))
(c-type git_treebuilder (native "git_treebuilder"))
(c-type git_treebuilder* (pointer git_treebuilder))
(c-type git_treebuilder** (pointer git_treebuilder*))
(c-type git_config (native "git_config"))
(c-type git_config* (pointer git_config))
(c-type git_config** (pointer git_config*))
(c-type git_config_file (native "git_config_file"))
(c-type git_config_file* (pointer git_config_file))
(c-type git_reflog_entry (native "git_reflog_entry"))
(c-type git_reflog_entry* (pointer git_reflog_entry))
(c-type git_reflog_entry** (pointer git_reflog_entry*))
(c-type git_reflog (native "git_reflog"))
(c-type git_reflog* (pointer git_reflog))
(c-type git_reflog** (pointer git_reflog*))
(c-type git_strarray (native "git_strarray"))
(c-type git_strarray* (pointer git_strarray))
(c-type git_strarray** (pointer git_strarray*))

;;;
;;;; Pointers
;;;

(define-pointer-to-pointer git_odb* "git_odb*")
(define-pointer-to-pointer git_odb_backend* "git_odb_backend*")
(define-pointer-to-pointer git_odb_object* "git_odb_object*")
(define-pointer-to-pointer git_odb_stream* "git_odb_stream*")
(define-pointer-to-pointer git_repository* "git_repository*")
(define-pointer-to-pointer git_object* "git_object*");
(define-pointer-to-pointer git_revwalk* "git_revwalk*")
(define-pointer-to-pointer git_tag* "git_tag*")
(define-pointer-to-pointer git_blob* "git_blob*")
(define-pointer-to-pointer git_commit* "git_commit*")
(define-pointer-to-pointer git_tree_entry* "git_tree_entry*")
(define-pointer-to-pointer git_tree* "git_tree*")
(define-pointer-to-pointer git_treebuilder* "git_treebuilder*")
(define-pointer-to-pointer git_index* "git_index*")
(define-pointer-to-pointer git_config* "git_config*")
(define-pointer-to-pointer git_reflog_entry* "git_reflog_entry*")
(define-pointer-to-pointer git_reflog* "git_reflog*")
(define-pointer-to-pointer git_reference* "git_reference*")
(define-pointer-to-pointer git_signature* "git_signature*")
(define-pointer-to-pointer git_strarray* "git_strarray*")

;;;
;;;; Structures
;;;
  
(c-structure git_index_time
  (time_t seconds)
  (uint nanoseconds))

(c-structure git_index_entry
  (git_index_time ctime)
  (git_index_time mtime)
  (uint dev)
  (uint ino)
  (uint mode)
  (uint uid)
  (uint gid)
  (git_off_t file_size)
  (git_oid oid)
  (ushort flags)
  (ushort flags_extended)
  (UTF-8-string path))

(c-structure git_strarray
  (char** strings)
  (uint count))

;;;
;;;; Blobs
;;;

(c-external (git_blob_lookup git_blob** git_repository* git_oid*) int )
(c-external (git_blob_rawcontent git_blob*) void*)
(c-external (git_blob_rawsize git_blob*) int)

;;;
;;;; Commits
;;;

(c-external (git_commit_lookup git_commit** git_repository* git_oid*) int)
(c-external (git_commit_id git_commit*) git_oid*)
(c-external (git_commit_message git_commit*) UTF-8-string)
(c-external (git_commit_time git_commit*) time_t)
(c-external (git_commit_time_offset git_commit*) int)
(c-external (git_commit_committer git_commit*) git_signature*)
(c-external (git_commit_author git_commit*) git_signature*)
(c-external (git_commit_tree git_tree** git_commit*) int)
(c-external (git_commit_parentcount git_commit*) uint)
(c-external (git_commit_parent git_commit** git_commit* uint) int)

;;;
;;;; Errors
;;;

(c-external (git_strerror int) UTF-8-string)

;;;
;;;; Indexes
;;;

(c-external (git_index_clear git_index*) void)
(c-external (git_index_free git_index*) void)
(c-external (git_index_read git_index*) int)
(c-external (git_index_write git_index*) int)
(c-external (git_index_find git_index* UTF-8-string) int)
(c-external (git_index_add git_index* UTF-8-string int) int)
(c-external (git_index_remove git_index* int) int)
(c-external (git_index_get git_index* int) git_index_entry*)
(c-external (git_index_entrycount git_index*) uint)

;;;
;;;; Object Management
;;;

(c-external (git_object_id git_object*) git_oid*)
(c-external (git_object_type git_object*) git_otype)
(c-external (git_object_owner git_object*) git_repository*)
(c-external (git_object_free git_object*) void)
(c-external (git_object_type2string git_otype) UTF-8-string)
(c-external (git_object_string2type UTF-8-string) git_otype)
(c-external (git_object_typeisloose git_otype) int)
(c-external (git_object__size git_otype) size_t)

;;;
;;;; Object Database Routines
;;;

(c-external (git_odb_new git_odb**) int)
(c-external (git_odb_open git_odb** UTF-8-string) int)
(c-external (git_odb_add_backend git_odb* git_odb_backend* int) int) 
(c-external (git_odb_read git_odb_object** git_odb* git_oid*) int)
(c-external (git_odb_read_header size_t* git_otype* git_odb* git_oid*) int)
(c-external (git_odb_write git_oid* git_odb* void* size_t git_otype) int)
(c-external (git_odb_exists git_odb* git_oid*) int)
(c-external (git_odb_object_data git_odb_object*) void*)
(c-external (git_odb_open_wstream git_odb_stream** git_odb* size_t git_otype) int)

;;;
;;;; Object ID routines
;;;

(c-external (git_oid_fmt UTF-8-string git_oid*) void)
(c-external (git_oid_pathfmt UTF-8-string git_oid*) void)
(c-external (git_oid_allocfmt git_oid*) UTF-8-string)
(c-external (git_oid_to_string UTF-8-string size_t git_oid*) UTF-8-string)
(c-external (git_oid_cpy git_oid* git_oid*) void)
(c-external (git_oid_cmp git_oid* git_oid*) int)

;;;
;;;; References
;;;

(c-external (git_reference_oid git_reference*) git_oid*)
(c-external (git_reference_target git_reference*) UTF-8-string)
(c-external (git_reference_type git_reference*) git_rtype)
(c-external (git_reference_name git_reference*) UTF-8-string)
(c-external (git_reference_resolve git_reference** git_reference*) int)
(c-external (git_reference_owner git_reference*) git_repository*)
(c-external (git_reference_set_target git_reference* UTF-8-string) void)
(c-external (git_reference_set_oid git_reference* git_oid*) void)

;;;
;;;; Repository management
;;;

(c-external (git_repository_open git_repository** UTF-8-string) int)
(c-external (git_repository_index git_index** git_repository*) int)
(c-external (git_repository_free git_repository*) void)
(c-external (git_repository_init git_repository** UTF-8-string uint) int)
(c-external (git_repository_workdir git_repository*) UTF-8-string)
(c-external (git_repository_is_empty git_repository*) int)

;;;
;;;; Revision traversal
;;;

(c-external (git_revwalk_new git_revwalk** git_repository*) int)
(c-external (git_revwalk_reset git_revwalk*) void)
(c-external (git_revwalk_push git_revwalk* git_oid*) int)
(c-external (git_revwalk_hide git_revwalk* git_oid*) int)
(c-external (git_revwalk_next git_oid* git_revwalk*) int)
(c-external (git_revwalk_sorting git_revwalk* uint) void)
(c-external (git_revwalk_free git_revwalk*) void)
(c-external (git_revwalk_repository git_revwalk*) git_repository*)

;;;
;;;; Signature
;;;

(c-external (git_signature_new git_signature** UTF-8-string UTF-8-string git_time_t int) int)
(c-external (git_signature_dup git_signature*) git_signature*)
(c-external (git_signature_free git_signature*) void)

;;;
;;;; Tag management
;;;

(c-external (git_tag_lookup git_tag** git_repository* git_oid*) int)
(c-external (git_tag_id git_tag*) git_oid*)
(c-external (git_tag_target git_object** git_tag*) int)
(c-external (git_tag_target git_object** git_tag*) int)
(c-external (git_tag_type git_tag*) git_otype)
(c-external (git_tag_name git_tag*) UTF-8-string)
(c-external (git_tag_tagger git_tag*) git_signature*)
(c-external (git_tag_message git_tag*) UTF-8-string)

;;;
;;;; Tree parsing and loading
;;;

(c-external (git_tree_lookup git_tree** git_repository* git_oid*) int)
(c-external (git_tree_id git_tree*) git_oid*)
(c-external (git_tree_entrycount git_tree*) size_t)
(c-external (git_tree_entry_attributes git_tree_entry*) uint)
(c-external (git_tree_entry_name git_tree_entry*) UTF-8-string)
(c-external (git_tree_entry_id git_tree_entry*) git_oid*)
(c-external (git_tree_entry_2object git_object** git_repository* git_tree_entry*) int)
(c-external (git_treebuilder_create git_treebuilder** git_tree*) int)

;;;
;;;; Common
;;;

(c-external (git_strarray_free git_strarray*) void)
(c-external (git_libgit2_version int* int* int*) void)

;;;
;;;; Git custom backend functions
;;;

(c-external (git_odb_backend_pack git_odb_backend** UTF-8-string) int)
(c-external (git_odb_backend_loose git_odb_backend** UTF-8-string int int) int)

;;;
;;;; Git config management routines
;;;

(c-external (git_config_open_global git_config**) int)
(c-external (git_config_add_file_ondisk git_config* UTF-8-string int) int)
(c-external (git_config_find_global UTF-8-string) int)

;;;
;;;; Git reflog management routines
;;;

(c-external (git_reflog_read git_reflog** git_reference*) int)
(c-external (git_reflog_write git_reference* git_oid* git_signature* UTF-8-string) int)

;;;
;;;; Git reference management routines
;;;

;; @param reference_out pointer to the looked-up reference
;; @param repo the repository to look up the reference
;; @param name the long name for the reference (e.g. HEAD, ref/heads/master, refs/tags/v0.1.0, ...)
;; @return GIT_SUCCESS or an error code

(c-external (git_reference_lookup git_reference** git_repository* UTF-8-string) int)
(c-external (git_reference_listall git_strarray* git_repository* unsigned-int) int)

)
