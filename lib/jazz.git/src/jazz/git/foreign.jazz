;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Libgit2 Bindings
;;;


(module jazz.git.foreign jazz


(import (jazz.foreign)
        (jazz.git.syntax (phase syntax))
        (jazz.library)
        (jazz.platform.types)
        (jazz.platform.types-syntax (phase syntax)))


(c-include "<git2.h>")


;;;
;;;; Error
;;;


(class Git-Exception extends Exception
  
  
  (slot code)
  (slot message)
  
  
  (method override (initialize code message)
    (set! code~self code)
    (set! message~self message))
  
  
  (method override (print output readably)
    (print-unreadable self output
      (lambda (output)
        (format output "{a}{? {a}~}" code message))))
  
  
  (method (get-code)
    code)
  
  
  (method override (get-message)
    (or message (format "Git exception (#x{x})" code))))


(definition private git-error-handler
  (lambda (error-code)
    (throw (let ((err (giterr-last)))
             (if err
                 (new Git-Exception error-code (git-error-message err))
               (new Git-Exception error-code #f))))))

(definition public (set-git-error-handler! error-handler)
  (set! git-error-handler error-handler))

(c-definition (git-call-error-handler error) (int) int "git_call_error_handler" ""
  (git-error-handler error))


;;;
;;;; Trace
;;;


(define-setting trace-git?
  #f)

(define-setting trace-git
  debug)


;;;
;;;; Constants
;;;


(c-enumerant GIT_IDXENTRY_NAMEMASK)
(c-enumerant GIT_IDXENTRY_STAGEMASK)
(c-enumerant GIT_IDXENTRY_EXTENDED)
(c-enumerant GIT_IDXENTRY_VALID)
(c-enumerant GIT_IDXENTRY_STAGESHIFT)
(c-enumerant GIT_OID_RAWSZ)
(c-enumerant GIT_OID_HEXSZ)
(c-enumerant GIT_SORT_NONE)
(c-enumerant GIT_SORT_TOPOLOGICAL)
(c-enumerant GIT_SORT_TIME)
(c-enumerant GIT_SORT_REVERSE)


;;;
;;;; Error Codes
;;;


;; git_error_code
(c-enumerant GIT_OK)
(c-enumerant GIT_ERROR)
(c-enumerant GIT_ENOTFOUND)
(c-enumerant GIT_EEXISTS)
(c-enumerant GIT_EAMBIGUOUS)
(c-enumerant GIT_EBUFS)
(c-enumerant GIT_EUSER)
(c-enumerant GIT_EBAREREPO)
(c-enumerant GIT_EUNMERGED)
(c-enumerant GIT_ENONFASTFORWARD)
(c-enumerant GIT_EINVALIDSPEC)
(c-enumerant GIT_EMERGECONFLICT)
(c-enumerant GIT_PASSTHROUGH)
(c-enumerant GIT_ITEROVER)


;;;
;;;; Enumerations
;;;


;; git_otype
(c-enumerant GIT_OBJ_ANY)
(c-enumerant GIT_OBJ_BAD)
(c-enumerant GIT_OBJ_COMMIT)
(c-enumerant GIT_OBJ_TREE)
(c-enumerant GIT_OBJ_BLOB)
(c-enumerant GIT_OBJ_TAG)
(c-enumerant GIT_OBJ_OFS_DELTA)
(c-enumerant GIT_OBJ_REF_DELTA)


;; git_branch_t
(c-enumerant GIT_BRANCH_LOCAL)
(c-enumerant GIT_BRANCH_REMOTE)


;; git_delta_t
(c-enumerant GIT_DELTA_UNMODIFIED)
(c-enumerant GIT_DELTA_ADDED)
(c-enumerant GIT_DELTA_DELETED)
(c-enumerant GIT_DELTA_MODIFIED)
(c-enumerant GIT_DELTA_RENAMED)
(c-enumerant GIT_DELTA_COPIED)
(c-enumerant GIT_DELTA_IGNORED)
(c-enumerant GIT_DELTA_UNTRACKED)
(c-enumerant GIT_DELTA_TYPECHANGE)


;; git_direction
(c-enumerant GIT_DIRECTION_FETCH)
(c-enumerant GIT_DIRECTION_PUSH)


;; git_indexcap_t
(c-enumerant GIT_INDEXCAP_IGNORE_CASE)
(c-enumerant GIT_INDEXCAP_NO_FILEMODE)
(c-enumerant GIT_INDEXCAP_NO_SYMLINKS)
(c-enumerant GIT_INDEXCAP_FROM_OWNER)


;; git_reset_t
(c-enumerant GIT_RESET_SOFT)
(c-enumerant GIT_RESET_MIXED)
(c-enumerant GIT_RESET_HARD)


;; git_treewalk_mode
(c-enumerant GIT_TREEWALK_PRE)
(c-enumerant GIT_TREEWALK_POST)


(definition public (git-type->symbol type)
  (ecase type
    ((GIT_OBJ_ANY) 'any)
    ((GIT_OBJ_BAD) 'bad)
    ((GIT_OBJ_COMMIT) 'commit)
    ((GIT_OBJ_TREE) 'tree)
    ((GIT_OBJ_BLOB) 'blob)
    ((GIT_OBJ_TAG) 'tag)
    (else (error "Unknown git type: {s}" type))))


;;;
;;;; Types
;;;


(c-type char** (pointer char*))
(c-type char-string* (pointer char-string))
(c-type uint32_t (native "uint32_t"))
(c-type uint32_t* (pointer uint32))
(c-type int32_t (native "int32_t"))
(c-type int32_t* (pointer int32_t))
(c-type int64_t (native "int64_t"))
(c-type int64_t* (pointer int64_t))
(c-type time_t (native "time_t"))
(c-type git_time (native "git_time"))
(c-type git_branch_t int)
(c-type git_delta_t int)
(c-type git_reset_t int)
(c-type git_treewalk_mode int)
(c-type git_otype int)
(c-type git_otype* (pointer git_otype))
(c-type git_oid (native "git_oid"))
(c-type git_oid* (pointer git_oid))
(c-type git_odb (native "git_odb"))
(c-type git_odb* (pointer git_odb))
(c-type git_odb** (pointer git_odb*))
(c-type git_odb_backend (native "git_odb_backend"))
(c-type git_odb_backend* (pointer git_odb_backend))
(c-type git_packbuilder (native "git_packbuilder"))
(c-type git_packbuilder* (pointer git_packbuilder))
(c-type git_packbuilder** (pointer git_packbuilder*))
(c-type git_push (native "git_push"))
(c-type git_push* (pointer git_push))
(c-type git_push** (pointer git_push*))
(c-type git_repository (native "git_repository"))
(c-type git_repository* (pointer git_repository))
(c-type git_repository** (pointer git_repository*))
(c-type git_reference (native "git_reference"))
(c-type git_reference* (pointer git_reference))
(c-type git_reference** (pointer git_reference*))
(c-type git_object (native "git_object"))
(c-type git_object* (pointer git_object))
(c-type git_object** (pointer git_object*))
(c-type git_revspec (native "git_revspec"))
(c-type git_revspec* (pointer git_revspec))
(c-type git_revspec** (pointer git_revspec*))
(c-type git_revwalk (native "git_revwalk"))
(c-type git_revwalk* (pointer git_revwalk))
(c-type git_revwalk** (pointer git_revwalk*))
(c-type git_tag (native "git_tag"))
(c-type git_tag* (pointer git_tag))
(c-type git_tag** (pointer git_tag*))
(c-type git_blob (native "git_blob"))
(c-type git_blob* (pointer git_blob))
(c-type git_blob** (pointer git_blob*))
(c-type git_checkout_options (native "git_checkout_options"))
(c-type git_checkout_options* (pointer git_checkout_options))
(c-type git_checkout_options** (pointer git_checkout_options*))
(c-type git_clone_options (native "git_clone_options"))
(c-type git_clone_options* (pointer git_clone_options))
(c-type git_clone_options** (pointer git_clone_options*))
(c-type git_commit (native "git_commit"))
(c-type git_commit* (pointer git_commit))
(c-type git_commit** (pointer git_commit*))
(c-type git_tree_entry (native "git_tree_entry"))
(c-type git_tree_entry* (pointer git_tree_entry))
(c-type git_tree_entry** (pointer git_tree_entry*))
(c-type git_tree (native "git_tree"))
(c-type git_tree* (pointer git_tree))
(c-type git_tree** (pointer git_tree*))
(c-type git_index (native "git_index"))
(c-type git_index* (pointer git_index))
(c-type git_index** (pointer git_index*))
(c-type git_signature (native "git_signature"))
(c-type git_signature* (pointer git_signature))
(c-type git_signature** (pointer git_signature*))
(c-type git_person (native "git_person"))
(c-type git_person* (pointer git_person))
(c-type git_person** (pointer git_person*))
(c-type git_index_entry (native "git_index_entry"))
(c-type git_index_entry* (pointer git_index_entry))
(c-type git_index_entry** (pointer git_index_entry*))
(c-type git_transfer_progress (native "git_transfer_progress"))
(c-type git_transfer_progress* (pointer git_transfer_progress))
(c-type git_ref_t (native "git_ref_t"))
(c-type size_t* (pointer size_t))
(c-type git_off_t (native "git_off_t"))
(c-type git_off_t* (pointer git_off_t))
(c-type git_odb_object (native "git_odb_object"))
(c-type git_odb_object* (pointer git_odb_object))
(c-type git_odb_object** (pointer git_odb_object*))
(c-type git_time_t (native "git_time_t"))
(c-type git_odb_backend (native "git_odb_backend"))
(c-type git_odb_backend* (pointer git_odb_backend))
(c-type git_odb_backend** (pointer git_odb_backend*))
(c-type git_odb_stream (native "git_odb_stream"))
(c-type git_odb_stream* (pointer git_odb_stream))
(c-type git_odb_stream** (pointer git_odb_stream*))
(c-type git_treebuilder (native "git_treebuilder"))
(c-type git_treebuilder* (pointer git_treebuilder))
(c-type git_treebuilder** (pointer git_treebuilder*))
(c-type git_reflog_entry (native "git_reflog_entry"))
(c-type git_reflog_entry* (pointer git_reflog_entry))
(c-type git_reflog_entry** (pointer git_reflog_entry*))
(c-type git_reflog (native "git_reflog"))
(c-type git_reflog* (pointer git_reflog))
(c-type git_reflog** (pointer git_reflog*))
(c-type git_strarray (native "git_strarray"))
(c-type git_strarray* (pointer git_strarray))
(c-type git_strarray** (pointer git_strarray*))
(c-type git_time_t (native "git_time_t"))
(c-type git_config (native "git_config"))
(c-type git_config* (pointer git_config))
(c-type git_config** (pointer git_config*))
(c-type git_config_file (native "git_config_file"))
(c-type git_config_file* (pointer git_config_file))
(c-type git_config_file** (pointer git_config_file*))
(c-type git_cred (native "git_cred"))
(c-type git_cred* (pointer git_cred))
(c-type git_cred** (pointer git_cred*))
(c-type git_cvar_map (native "git_cvar_map"))
(c-type git_cvar_map* (pointer git_cvar_map))
(c-type git_cvar_map** (pointer git_cvar_map*))
(c-type git_diff (native "git_diff"))
(c-type git_diff* (pointer git_diff))
(c-type git_diff** (pointer git_diff*))
(c-type git_diff_delta (native "git_diff_delta"))
(c-type git_diff_delta* (pointer git_diff_delta))
(c-type git_diff_delta** (pointer git_diff_delta*))
(c-type git_diff_options (native "git_diff_options"))
(c-type git_diff_options* (pointer git_diff_options))
(c-type git_diff_options** (pointer git_diff_options*))
(c-type git_diff_find_options (native "git_diff_find_options"))
(c-type git_diff_find_options* (pointer git_diff_find_options))
(c-type git_diff_find_options** (pointer git_diff_find_options*))
(c-type git_diff_file_cb (native "git_diff_file_cb"))
(c-type git_diff_file_cb* (pointer git_diff_file_cb))
(c-type git_diff_file_cb** (pointer git_diff_file_cb*))
(c-type git_diff_hunk_cb (native "git_diff_hunk_cb"))
(c-type git_diff_hunk_cb* (pointer git_diff_hunk_cb))
(c-type git_diff_hunk_cb** (pointer git_diff_hunk_cb*))
(c-type git_diff_line_cb (native "git_diff_line_cb"))
(c-type git_diff_line_cb* (pointer git_diff_line_cb))
(c-type git_diff_line_cb** (pointer git_diff_line_cb*))
(c-type git_diff_hunk (native "git_diff_hunk"))
(c-type git_diff_hunk* (pointer git_diff_hunk))
(c-type git_diff_hunk** (pointer git_diff_hunk*))
(c-type git_patch (native "git_patch"))
(c-type git_patch* (pointer git_patch))
(c-type git_patch** (pointer git_patch*))
(c-type git_error (native "git_error"))
(c-type git_error* (pointer git_error))
(c-type git_error** (pointer git_error*))
(c-type git_index_entry_unmerged (native "git_index_entry_unmerged"))
(c-type git_index_entry_unmerged* (pointer git_index_entry_unmerged))
(c-type git_index_entry_unmerged** (pointer git_index_entry_unmerged*))
(c-type git_indexer (native "git_indexer"))
(c-type git_indexer* (pointer git_indexer))
(c-type git_indexer** (pointer git_indexer*))
(c-type git_indexer_stats (native "git_indexer_stats"))
(c-type git_indexer_stats* (pointer git_indexer_stats))
(c-type git_indexer_stats** (pointer git_indexer_stats*))
(c-type git_merge_options (native "git_merge_options"))
(c-type git_merge_options* (pointer git_merge_options))
(c-type git_merge_options** (pointer git_merge_options*))
(c-type git_note (native "git_note"))
(c-type git_note* (pointer git_note))
(c-type git_note** (pointer git_note*))
(c-type git_note_data (native "git_note_data"))
(c-type git_note_data* (pointer git_note_data))
(c-type git_note_data** (pointer git_note_data*))
(c-type git_oid_shorten (native "git_oid_shorten"))
(c-type git_oid_shorten* (pointer git_oid_shorten))
(c-type git_oid_shorten** (pointer git_oid_shorten*))
(c-type git_refspec (native "git_refspec"))
(c-type git_refspec* (pointer git_refspec))
(c-type git_refspec** (pointer git_refspec*))
(c-type git_remote (native "git_remote"))
(c-type git_remote* (pointer git_remote))
(c-type git_remote** (pointer git_remote*))
(c-type git_remote_callbacks (native "git_remote_callbacks"))
(c-type git_remote_callbacks* (pointer git_remote_callbacks))
(c-type git_remote_callbacks** (pointer git_remote_callbacks*))
(c-type git_headlist_cb (native "git_headlist_cb"))
(c-type git_headlist_cb* (pointer git_headlist_cb))
(c-type git_headlist_cb** (pointer git_headlist_cb*))
(c-type git_status_options (native "git_status_options"))
(c-type git_status_options* (pointer git_status_options))
(c-type git_status_options** (pointer git_status_options*))
(c-type git_submodule (native "git_submodule"))
(c-type git_submodule* (pointer git_submodule))
(c-type git_submodule** (pointer git_submodule*))
(c-type git_treewalk_cb (native "git_treewalk_cb"))


;;;
;;;; Pointers
;;;


(define-pointer-to-pointer char* "char*")
(define-pointer-to-pointer git_odb* "git_odb*")
(define-pointer-to-pointer git_odb_backend* "git_odb_backend*")
(define-pointer-to-pointer git_odb_object* "git_odb_object*")
(define-pointer-to-pointer git_odb_stream* "git_odb_stream*")
(define-pointer-to-pointer git_repository* "git_repository*")
(define-pointer-to-pointer git_object* "git_object*");
(define-pointer-to-pointer git_revwalk* "git_revwalk*")
(define-pointer-to-pointer git_tag* "git_tag*")
(define-pointer-to-pointer git_blob* "git_blob*")
(define-pointer-to-pointer git_commit* "git_commit*")
(define-pointer-to-pointer git_tree_entry* "git_tree_entry*")
(define-pointer-to-pointer git_tree* "git_tree*")
(define-pointer-to-pointer git_treebuilder* "git_treebuilder*")
(define-pointer-to-pointer git_index* "git_index*")
(define-pointer-to-pointer git_config* "git_config*")
(define-pointer-to-pointer git_cred* "git_cred*")
(define-pointer-to-pointer git_reflog_entry* "git_reflog_entry*")
(define-pointer-to-pointer git_reflog* "git_reflog*")
(define-pointer-to-pointer git_reference* "git_reference*")
(define-pointer-to-pointer git_signature* "git_signature*")
(define-pointer-to-pointer git_strarray* "git_strarray*")


;;;
;;;; Structures
;;;


(c-structure git_index_time
  (time_t seconds)
  (uint nanoseconds))


(c-structure git_index_entry
  (git_index_time ctime)
  (git_index_time mtime)
  (uint dev)
  (uint ino)
  (uint mode)
  (uint uid)
  (uint gid)
  (git_off_t file_size)
  (git_oid id)
  (ushort flags)
  (ushort flags_extended)
  (char-string path))


(c-structure git_signature
  (char-string name)
  (char-string email)
  (git_time when))


(c-structure git_transfer_progress
  (uint total_objects)
  (uint indexed_objects)
  (uint received_objects)
  (uint local_objects)
  (uint total_deltas)
  (uint indexed_deltas)
  (size_t received_bytes))


(c-structure git_strarray
  (char** strings)
  (uint count))


;;;
;;;; Interrupts
;;;


(definition protected (without-gambit-interrupts thunk)
  (let ((enabled? (interrupts-enabled?)))
    (unwind-protect
        (begin
          (disable-interrupts!)
          (thunk))
      (if enabled?
          (enable-interrupts!)
        (disable-interrupts!)))))


;;;
;;;; OS Interrupts
;;;


(cond-expand
  (windows
(c-declare git.foreign #/C/
#define gambit_disable_os_interrupts()
#define gambit_enable_os_interrupts()
//#)

(definition public (with-gambit-os-interrupts thunk)
  (thunk)))
  (else
(c-declare git.foreign #/C/
void ___disable_os_interrupts();
void ___enable_os_interrupts();

void gambit_disable_os_interrupts()
{
    ___disable_os_interrupts();
}

void gambit_enable_os_interrupts()
{
    ___enable_os_interrupts();
}
//#)

(c-external (gambit-disable-os-interrupts) void "gambit_disable_os_interrupts")
(c-external (gambit-enable-os-interrupts) void "gambit_enable_os_interrupts")

(definition public (with-gambit-os-interrupts thunk)
  (dynamic-wind gambit-enable-os-interrupts
                thunk
                gambit-disable-os-interrupts))))


;;;
;;;; Attr
;;;


(git-external (git-attr-add-macro git_repository* char-string char-string) :error "git_attr_add_macro")
(git-external (git-attr-cache-flush git_repository*) void "git_attr_cache_flush")
(git-external (git-attr-foreach git_repository* unsigned-int32 char-string void* void*) :error "git_attr_foreach")
(git-external (git-attr-get char** git_repository* unsigned-int32 char-string char-string) :error "git_attr_get")
(git-external (git-attr-get-many char** git_repository* unsigned-int32 char-string size_t char**) :error "git_attr_get_many")


;;;
;;;; Blobs
;;;


(git-external (git-blob-create-frombuffer git_oid* git_repository* void* size_t) :error "git_blob_create_frombuffer")
(git-external (git-blob-create-fromchunks git_oid* git_repository* char-string void* void*) :error "git_blob_create_fromchunks")
(git-external (git-blob-create-fromdisk git_oid* git_repository* char-string) :error "git_blob_create_fromdisk")
(git-external (git-blob-create-fromworkdir git_oid* git_repository* char-string) :error "git_blob_create_fromworkdir")
(git-external (git-blob-free git_blob*) void "git_blob_free")
(git-external (git-blob-id git_blob*) git_oid* "git_blob_id")
(git-external (git-blob-is-binary git_blob*) int "git_blob_is_binary")
(git-external (git-blob-lookup (out git_blob*) git_repository* git_oid*) :lookup "git_blob_lookup")
(git-external (git-blob-lookup-prefix (out git_blob*) git_repository* git_oid* size_t) :lookup "git_blob_lookup_prefix")
(git-external (git-blob-owner git_blob*) git_repository* "git_blob_owner")
(git-external (git-blob-rawcontent git_blob*) void* "git_blob_rawcontent")
(git-external (git-blob-rawsize git_blob*) size_t "git_blob_rawsize")


(definition public (git-blob-binary? blob)
  (= 1 (git-blob-is-binary blob)))


(git-external (git-blob-text git_blob*) char-string
  #/C/
    void* text = git_blob_rawcontent(___arg1);
    ___result = text;
//#)


;;;
;;;; Branch
;;;


(git-external (git-branch-create (out git_reference*) git_repository* char-string git_object* int) :error "git_branch_create")
(git-external (git-branch-delete git_reference*) :error "git_branch_delete")
@convert (git-external (git-branch-foreach git_repository* uint void* void*) :error "git_branch_foreach")
(git-external (git-branch-is-head git_reference*) int "git_branch_is_head")
(git-external (git-branch-lookup (out git_reference*) git_repository* char-string git_branch_t) :lookup "git_branch_lookup")
(git-external (git-branch-move (out git_reference*) git_reference* char-string int) :error "git_branch_move")
(git-external (git-branch-name char** git_reference*) :error "git_branch_name")
@removed (git-external (git-branch-remote-name char-string size_t git_repository* char-string) :error "git_branch_remote_name")
(git-external (git-branch-upstream (out git_reference*) git_reference*) :error "git_branch_upstream")
@removed (git-external (git-branch-upstream-name char-string size_t git_repository* char-string) :error "git_branch_upstream_name")


(definition public (git-branch-head? ref)
  (= 1 (git-branch-is-head ref)))


(c-definition (branch-foreach-procedure proc branch_name branch_type) (scheme-object char-string git_branch_t) int "branch_foreach_procedure" ""
  (if (proc branch_name branch_type)
      1
    0))

(c-declare git.foreign #/C/
static int branch_foreach_cb(const char *branch_name, git_branch_t branch_type, void *payload)
{
    return branch_foreach_procedure(___EXT(___data_rc)(payload), branch_name, branch_type);
}
//#)

@convert
(git-external (git-branch-for-each-stoppable git_repository* uint scheme-object) int
  #/C/
    void* p = ___EXT(___alloc_rc)(0);
    ___EXT(___set_data_rc)(p, ___arg3);
    int result = git_branch_foreach(___arg1, ___arg2, &branch_foreach_cb, p);
    ___EXT(___release_rc)(p);
    ___result = result;
//#)

@convert
(definition public (git-branch-for-each repo flags proc)
  (git-branch-for-each-stoppable repo flags
    (lambda (branch_name branch_type)
      (proc branch_name branch_type)
      #f)))


;;;
;;;; Callbacks
;;;


(class Git-Callbacks extends Object
  
  
  (slot credentials-callback getter generate)
  (slot download-callback    getter generate)
  (slot checkout-callback    getter generate)
  
  
  (method override (initialize (credentials-callback: credentials-callback #f) (download-callback: download-callback #f) (checkout-callback: checkout-callback #f))
    (set! credentials-callback~self credentials-callback)
    (set! download-callback~self download-callback)
    (set! checkout-callback~self checkout-callback)))


;;;
;;;; Checkout
;;;


(git-external (git-checkout-head git_repository* git_checkout_options*) :error "git_checkout_head")
(git-external (git-checkout-index git_repository* git_index* git_checkout_options*) :error "git_checkout_index")
(git-external (git-checkout-tree git_repository* git_object* git_checkout_options*) :error "git_checkout_tree")


(git-external (git-checkout-head-force git_repository*) void
  #/C/
    git_checkout_options options = GIT_CHECKOUT_OPTIONS_INIT;
    options.checkout_strategy = GIT_CHECKOUT_FORCE;
    int result = git_checkout_head(___arg1, &options);
    if (result != 0) git_call_error_handler(result);
//#)


;;;
;;;; Clone
;;;


(git-external (git-clone (out git_repository*) char-string char-string git_clone_options*) :error "git_clone")


;;;
;;;; Commits
;;;


(git-external (git-commit-author git_commit*) git_signature* "git_commit_author")
(git-external (git-commit-committer git_commit*) git_signature* "git_commit_committer")
(git-external (git-commit-create git_oid* git_repository* char-string git_signature* git_signature* char-string char-string git_tree* int git_commit**) :error "git_commit_create")
(git-external (git-commit-create-v git_oid* git_repository* char-string git_signature* git_signature* char-string char-string git_tree* int) :error "git_commit_create_v")
(git-external (git-commit-free git_commit*) void "git_commit_free")
(git-external (git-commit-id git_commit*) git_oid* "git_commit_id")
(git-external (git-commit-lookup (out git_commit*) git_repository* git_oid*) :lookup "git_commit_lookup")
(git-external (git-commit-lookup-prefix (out git_commit*) git_repository* git_oid* size_t) :lookup "git_commit_lookup_prefix")
(git-external (git-commit-message git_commit*) char-string "git_commit_message")
(git-external (git-commit-message-encoding git_commit*) char-string "git_commit_message_encoding")
(git-external (git-commit-owner git_commit*) git_repository* "git_commit_owner")
(git-external (git-commit-parent (out git_commit*) git_commit* uint) :error "git_commit_parent")
(git-external (git-commit-parent-id git_commit* uint) git_oid* "git_commit_parent_id")
(git-external (git-commit-parentcount git_commit*) uint "git_commit_parentcount")
(git-external (git-commit-time git_commit*) git_time_t "git_commit_time")
(git-external (git-commit-time-offset git_commit*) int "git_commit_time_offset")
(git-external (git-commit-tree (out git_tree*) git_commit*) :error "git_commit_tree")
(git-external (git-commit-tree-id git_commit*) git_oid* "git_commit_tree_id")


;;;
;;;; Config
;;;


(git-external (git-config-add-file-ondisk git_config* char-string uint int) :error "git_config_add_file_ondisk")
(git-external (git-config-delete-entry git_config* char-string) :error "git_config_delete_entry")
@convert (git-external (git-config-find-global char-string size_t) :error "git_config_find_global")
@convert (git-external (git-config-find-system char-string size_t) :error "git_config_find_system")
(git-external (git-config-foreach git_config* void* void*) :error "git_config_foreach")
(git-external (git-config-foreach-match git_config* char-string void* void*) :error "git_config_foreach_match")
(git-external (git-config-free git_config*) void "git_config_free")
(git-external (git-config-get-bool int* git_config* char-string) :error "git_config_get_bool")
(git-external (git-config-get-int32 int32_t* git_config* char-string) :error "git_config_get_int32")
(git-external (git-config-get-int64 int64_t* git_config* char-string) :error "git_config_get_int64")
(git-external (git-config-get-mapped int* git_config* char-string git_cvar_map* size_t) :error "git_config_get_mapped")
@convert (git-external (git-config-get-multivar git_config* char-string char-string void* void*) :error "git_config_get_multivar")
(git-external (git-config-get-string char** git_config* char-string) :error "git_config_get_string")
(git-external (git-config-new (out git_config*)) :error "git_config_new")
(git-external (git-config-set-bool git_config* char-string int) :error "git_config_set_bool")
(git-external (git-config-set-int32 git_config* char-string int32_t) :error "git_config_set_int32")
(git-external (git-config-set-int64 git_config* char-string int64_t) :error "git_config_set_int64")
(git-external (git-config-set-multivar git_config* char-string char-string char-string) :error "git_config_set_multivar")
(git-external (git-config-set-string git_config* char-string char-string) :error "git_config_set_string")


;;;
;;;; Cred
;;;


@ssh (git-external (git-cred-ssh-keyfile-passphrase-new (out git_cred*) char-string char-string char-string) :error "git_cred_ssh_keyfile_passphrase_new")
@ssh (git-external (git-cred-ssh-publickey-new (out git_cred*) char-string size_t void*) :error "git_cred_ssh_publickey_new")
@convert (git-external (git-cred-userpass git_cred** char-string char-string uint void*) :error "git_cred_userpass")
(git-external (git-cred-userpass-plaintext-new char-string char-string) git_cred*
  #/C/
    gambit_disable_os_interrupts();
    git_cred* cred;
    int result = git_cred_userpass_plaintext_new(&cred, ___arg1, ___arg2);
    gambit_enable_os_interrupts();
    if (result != 0) git_call_error_handler(result);
    ___result_voidstar = cred;
//#)


;;;
;;;; Diff
;;;


@changed (git-external (git-diff-blobs git_blob* git_blob* git_diff_options* void* git_diff_file_cb git_diff_hunk_cb git_diff_line_cb) :error "git_diff_blobs")
(git-external (git-diff-find-similar git_diff* git_diff_find_options*) :error "git_diff_find_similar")
(git-external (git-diff-foreach git_diff* void* git_diff_file_cb git_diff_hunk_cb git_diff_line_cb) :error "git_diff_foreach")
@convert (git-external (git-diff-get-patch (out git_patch*) git_diff_delta** git_diff* size_t) :error "git_diff_get_patch")
(git-external (git-diff-index-to-workdir (out git_diff*) git_repository* git_index* git_diff_options*) :error "git_diff_index_to_workdir")
(git-external (git-diff-free git_diff*) void "git_diff_free")
(git-external (git-diff-merge git_diff* git_diff*) :error "git_diff_merge")
(git-external (git-diff-num-deltas git_diff*) size_t "git_diff_num_deltas")
(git-external (git-diff-num-deltas-of-type git_diff* git_delta_t) size_t "git_diff_num_deltas_of_type")
@convert (git-external (git-diff-print-compact git_diff* void* git_diff_line_cb) :error "git_diff_print_compact")
@convert (git-external (git-diff-print-patch git_diff* void* git_diff_line_cb) :error "git_diff_print_patch")
(git-external (git-diff-tree-to-index (out git_diff*) git_repository* git_tree* git_index* git_diff_options*) :error "git_diff_tree_to_index")
(git-external (git-diff-tree-to-tree (out git_diff*) git_repository* git_tree* git_tree* git_diff_options*) :error "git_diff_tree_to_tree")
(git-external (git-diff-tree-to-workdir (out git_diff*) git_repository* git_tree* git_diff_options*) :error "git_diff_tree_to_workdir")


;;;
;;;; Git Error
;;;


(git-external (giterr-clear) void "giterr_clear")
(git-external (giterr-last) git_error* "giterr_last")


(git-external (git-error-message git_error*) char-string
  #/C/
    ___result = ___arg1->message;
//#)


;;;
;;;; Graph
;;;


(git-external (git-graph-ahead-behind git_repository* git_oid* git_oid*) scheme-object
  #/C/
    int ahead, behind;
    int result = git_graph_ahead_behind(&ahead, &behind, ___arg1, ___arg2, ___arg3);
    if (result != 0) git_call_error_handler(result);
    ___SCMOBJ pair = ___EXT(___make_pair) (___ps, ___FIX(ahead), ___FIX(behind));
    ___result = pair;
//#)


(definition public (git-graph-fast-forward? repo local upstream)
  (bind (ahead . behind) (git-graph-ahead-behind repo local upstream)
    (= 0 behind)))


;;;
;;;; Ignore
;;;


(git-external (git-ignore-add-rule git_repository* char-string) :error "git_ignore_add_rule")
(git-external (git-ignore-clear-internal-rules git_repository*) :error "git_ignore_clear_internal_rules")
(git-external (git-ignore-path-is-ignored int* git_repository* char-string) :error "git_ignore_path_is_ignored")


;;;
;;;; Index
;;;


(git-external (git-index-add git_index* git_index_entry*) :error "git_index_add")
(git-external (git-index-add-bypath git_index* char-string) :error "git_index_add_bypath")
(git-external (git-index-caps git_index*) uint "git_index_caps")
(git-external (git-index-clear git_index*) void "git_index_clear")
(git-external (git_index_conflict_add git_index* git_index_entry* git_index_entry* git_index_entry*) :error "git_index_conflict_add")
(git-external (git_index_conflict_cleanup git_index*) void "git_index_conflict_cleanup")
(git-external (git_index_conflict_get git_index_entry** git_index_entry** git_index_entry** git_index* char-string) :error "git_index_conflict_get")
(git-external (git_index_conflict_remove git_index* char-string) :error "git_index_conflict_remove")
(git-external (git-index-entry-stage git_index_entry*) int "git_index_entry_stage")
(git-external (git-index-entrycount git_index*) uint "git_index_entrycount")
(git-external (git-index-find size_t* git_index* char-string) :error "git_index_find")
(git-external (git-index-free git_index*) void "git_index_free")
(git-external (git-index-get-byindex git_index* int) git_index_entry* "git_index_get_byindex")
(git-external (git-index-get-bypath git_index* char-string int) git_index_entry* "git_index_get_bypath")
(git-external (git-index-has-conflicts git_index*) int "git_index_has_conflicts")
@convert (git-external (git_index_name_add git_index* char-string char-string char-string) :error "git_index_name_add")
@convert (git-external (git_index_name_clear git_index*) void "git_index_name_clear")
@convert (git-external (git_index_name_entrycount git_index*) uint "git_index_name_entrycount")
@convert (git-external (git_index_name_get_byindex git_index* size_t) git_index_entry* "git_index_name_get_byindex")
(git-external (git-index-new (out git_index*)) :error "git_index_new")
(git-external (git-index-open (out git_index*) char-string) :error "git_index_open")
@convert (git-external (git-index-read git_index*) :error "git_index_read")
(git-external (git-index-read-tree git_index* git_tree*) :error "git_index_read_tree")
(git-external (git-index-remove git_index* char-string int) :error "git_index_remove")
(git-external (git_index_remove_bypath git_index* char-string) :error "git_index_remove_bypath")
(git-external (git_index_remove_directory git_index* char-string int) :error "git_index_remove_directory")
(git-external (git-index-write git_index*) :error "git_index_write")
(git-external (git-index-write-tree git_oid* git_index*) :error "git_index_write_tree")
(git-external (git-index-write-tree-to git_oid* git_index* git_repository*) :error "git_index_write_tree_to")


(definition public (git-index-has-conflicts? index)
  (= 1 (git-index-has-conflicts index)))


(definition public (git-index-list index)
  (let ((count (git-index-entrycount index)))
    (loop (for n from 0 below count)
          (collect (git-index-get-byindex index n)))))


(definition public (git-index-entry-ctime entry)
  (git_index_time-seconds-ref (git_index_entry-ctime-ref entry)))

(definition public (git-index-entry-mtime entry)
  (git_index_time-seconds-ref (git_index_entry-mtime-ref entry)))

(definition public (git-index-entry-path entry)
  (git_index_entry-path-ref entry))


;;;
;;;; Indexer
;;;


@convert (git-external (git-indexer-add git_indexer* void* size_t git_transfer_progress*) :error "git_indexer_add")
@convert (git-external (git-indexer-finalize git_indexer* git_transfer_progress*) :error "git_indexer_finalize")
(git-external (git-indexer-free git_indexer*) void "git_indexer_free")
(git-external (git-indexer-hash git_indexer*) git_oid* "git_indexer_hash")
@convert (git-external (git-indexer-new (out git_indexer*) char-string void* void*) :error "git_indexer_new")


;;;
;;;; Library
;;;


(git-external (git-libgit2-init) int "git_libgit2_init")
(git-external (git-libgit2-shutdown) int "git_libgit2_shutdown")
(git-external (git-libgit2-features) int "git_libgit2_features")
(git-external (git_libgit2_opts int) int "git_libgit2_opts")
(git-external (git-libgit2-version int* int* int*) void "git_libgit2_version")


(git-external (git-version) scheme-object
  #/C/
    int major, minor, rev;
    git_libgit2_version(&major, &minor, &rev);
    ___SCMOBJ version = ___EXT(___make_pair) (___ps, ___FIX(major), ___FIX(minor));
    ___result = version;
//#)


;;;
;;;; Merge
;;;


(git-external (git-merge-base git_oid* git_repository* git_oid* git_oid*) :error "git_merge_base")
(git-external (git_merge_trees (out git_index*) git_repository* git_tree* git_tree* git_tree* git_merge_options*) :error "git_merge_trees")


;;;
;;;; Message
;;;


(git-external (git-message-prettify char* size_t char-string int) :error "git_message_prettify")


;;;
;;;; Note
;;;


(git-external (git-note-create git_oid* git_repository* git_signature* git_signature* char-string git_oid* char-string int) :error "git_note_create")
(git-external (git-note-default-ref char** git_repository*) :error "git_note_default_ref")
(git-external (git-note-foreach git_repository* char-string void* void*) :error "git_note_foreach")
(git-external (git-note-free git_note*) void "git_note_free")
(git-external (git-note-message git_note*) char-string "git_note_message")
(git-external (git-note-id git_note*) git_oid* "git_note_id")
(git-external (git-note-read (out git_note*) git_repository* char-string git_oid*) :error "git_note_read")
(git-external (git-note-remove git_repository* char-string git_signature* git_signature* git_oid*) :error "git_note_remove")


;;;
;;;; Object
;;;


(git-external (git-object--size git_otype) size_t "git_object__size")
(git-external (git_object_dup (out git_object*) git_object*) :error "git_object_dup")
(git-external (git-object-free git_object*) void "git_object_free")
(git-external (git-object-id git_object*) git_oid* "git_object_id")
(git-external (git-object-lookup (out git_object*) git_repository* git_oid* git_otype) :lookup "git_object_lookup")
(git-external (git-object-lookup-prefix (out git_object*) git_repository* git_oid* size_t git_otype) :lookup "git_object_lookup_prefix")
(git-external (git-object-owner git_object*) git_repository* "git_object_owner")
(git-external (git-object-string2type char-string) git_otype "git_object_string2type")
(git-external (git-object-type git_object*) git_otype "git_object_type")
(git-external (git-object-type2string git_otype) char-string "git_object_type2string")
(git-external (git-object-typeisloose git_otype) int "git_object_typeisloose")


;;;
;;;; Object Database
;;;


(git-external (git-odb-add-alternate git_odb* git_odb_backend* int) :error "git_odb_add_alternate")
(git-external (git-odb-add-backend git_odb* git_odb_backend* int) :error "git_odb_add_backend")
(git-external (git-odb-exists git_odb* git_oid*) int "git_odb_exists")
(git-external (git-odb-foreach git_odb* void* void*) :error "git_odb_foreach")
(git-external (git-odb-free git_odb*) void "git_odb_free")
(git-external (git-odb-hash git_oid* void* size_t git_otype) :error "git_odb_hash")
(git-external (git-odb-hashfile git_oid* char-string git_otype) :error "git_odb_hashfile")
(git-external (git-odb-new (out git_odb*)) :error "git_odb_new")
(git-external (git-odb-object-data git_odb_object*) void* "git_odb_object_data")
(git-external (git-odb-object-free git_odb_object*) void "git_odb_object_free")
(git-external (git-odb-object-id git_odb_object*) git_oid* "git_odb_object_id")
(git-external (git-odb-object-size git_odb_object*) size_t "git_odb_object_size")
(git-external (git-odb-object-type git_odb_object*) git_otype "git_odb_object_type")
(git-external (git-odb-open (out git_odb*) char-string) :error "git_odb_open")
(git-external (git-odb-open-rstream (out git_odb_stream*) git_odb* git_oid*) :error "git_odb_open_rstream")
(git-external (git-odb-open-wstream (out git_odb_stream*) git_odb* size_t git_otype) :error "git_odb_open_wstream")
(git-external (git-odb-read (out git_odb_object*) git_odb* git_oid*) :error "git_odb_read")
(git-external (git-odb-read-header size_t* git_otype* git_odb* git_oid*) :error "git_odb_read_header")
(git-external (git-odb-read-prefix git_odb_object** git_odb* git_oid* size_t) :error "git_odb_read_prefix")
(git-external (git-odb-write git_oid* git_odb* void* size_t git_otype) :error "git_odb_write")


(c-definition (odb-foreach-procedure proc oid) (scheme-object git_oid*) int "odb_foreach_procedure" ""
  (if (proc oid)
      1
    0))

(c-declare git.foreign #/C/
static int odb_foreach_cb(git_oid* oid, void *payload)
{
    return odb_foreach_procedure(___EXT(___data_rc)(payload), oid);
}
//#)

(git-external (git-odb-for-each-stoppable git_odb* scheme-object) int
  #/C/
    void* p = ___EXT(___alloc_rc)(0);
    ___EXT(___set_data_rc)(p, ___arg2);
    int result = git_odb_foreach(___arg1, &odb_foreach_cb, p);
    ___EXT(___release_rc)(p);
    ___result = result;
//#)

(definition public (git-odb-for-each db proc)
  (git-odb-for-each-stoppable db
    (lambda (oid)
      (proc oid)
      #f)))


;;;
;;;; Object ID
;;;


@convert (git-external (git-oid-allocfmt git_oid*) char* "git_oid_allocfmt")
(git-external (git-oid-cmp git_oid* git_oid*) int "git_oid_cmp")
(git-external (git-oid-cpy git_oid* git_oid*) void "git_oid_cpy")
(git-external (git-oid-fmt char-string git_oid*) void "git_oid_fmt")
(git-external (git-oid-fromraw git_oid* uchar*) void "git_oid_fromraw")
(git-external (git-oid-fromstr git_oid* char-string) :error "git_oid_fromstr")
(git-external (git-oid-fromstrn git_oid* char-string size_t) :error "git_oid_fromstrn")
(git-external (git-oid-iszero git_oid*) int "git_oid_iszero")
(git-external (git-oid-ncmp git_oid* git_oid* size_t) int "git_oid_ncmp")
(git-external (git-oid-pathfmt char-string git_oid*) void "git_oid_pathfmt")
(git-external (git-oid-shorten-add git_oid_shorten* char-string) :error "git_oid_shorten_add")
(git-external (git-oid-shorten-free git_oid_shorten*) void "git_oid_shorten_free")
(git-external (git-oid-shorten-new size_t) git_oid_shorten* "git_oid_shorten_new")
(git-external (git-oid-streq git_oid* char-string) int "git_oid_streq")
(git-external (git-oid-tostr char-string size_t git_oid*) char-string "git_oid_tostr")


(git-external (git-string->id char-string) git_oid*
  #/C/
    git_oid* oid = calloc(1, sizeof(git_oid));
    git_oid_fromstr(oid, ___arg1);
    ___result_voidstar = oid;
//#)


(git-external (git-id->string git_oid*) char-string
  #/C/
    char oidstr[GIT_OID_HEXSZ + 1];
    git_oid_tostr(oidstr, sizeof(oidstr), ___arg1);
    ___result = oidstr;
//#)


(git-external (git-free-id git_oid*) void
  #/C/
    free(___arg1);
//#)


;;;
;;;; Pack Builder
;;;


(git-external (git-packbuilder-new (out git_packbuilder*) git_repository*) :error "git_packbuilder_new")


;;;
;;;; Patch
;;;


(git-external (git-patch-get-delta git_patch*) git_diff_delta* "git_patch_get_delta")
(git-external (git-patch-free git_patch*) void "git_patch_free")
@convert (git-external (git-patch-get-hunk (out git_diff_hunk*) char** size_t* size_t* git_patch* size_t) :error "git_patch_get_hunk")
@convert (git-external (git-patch-get-line-in-hunk char* char** size_t* int* int* git_patch* size_t size_t) :error "git_patch_get_line_in_hunk")
(git-external (git-patch-line_stats size_t* size_t* size_t* git_patch*) int "git_patch_line_stats")
(git-external (git-patch-num-hunks git_patch*) size_t "git_patch_num_hunks")
(git-external (git-patch-num-lines-in-hunk git_patch* size_t) int "git_patch_num_lines_in_hunk")


;;;
;;;; Push
;;;


@convert (git-external (git_push_finish git_push*) :error "git_push_finish")
@convert (git-external (git-push-free git_push*) void "git_push_free")
@convert (git-external (git-push-new (out git_push*) git_remote*) :error "git_push_new")
@convert (git-external (git_push_status_foreach git_push* void* void*) :error "git_push_status_foreach")
@convert (git-external (git_push_unpack_ok git_push*) int "git_push_unpack_ok")
@convert (git-external (git_push_update_tips git_push*) :error "git_push_update_tips")


;;;
;;;; References
;;;


(git-external (git-reference-cmp git_reference* git_reference*) int "git_reference_cmp")
@convert (git-external (git-reference-create (out git_reference*) git_repository* char-string git_oid* int) :error "git_reference_create")
(git-external (git-reference-delete git_reference*) :error "git_reference_delete")
(git-external (git-reference-foreach git_repository* void* void*) :error "git_reference_foreach")
(git-external (git-reference-foreach-glob git_repository* char-string void* void*) :error "git_reference_foreach_glob")
(git-external (git-reference-free git_reference*) void "git_reference_free")
@convert (git-external (git_reference_has_log git_reference*) int "git_reference_has_log")
(git-external (git_reference_is_branch git_reference*) int "git_reference_is_branch")
(git-external (git_reference_is_remote git_reference*) int "git_reference_is_remote")
(git-external (git_reference_is_valid_name char-string) int "git_reference_is_valid_name")
(git-external (git-reference-lookup (out git_reference*) git_repository* char-string) :lookup "git_reference_lookup")
(git-external (git-reference-name git_reference*) char-string "git_reference_name")
(git-external (git-reference-name-to-id git_oid* git_repository* char-string) :error "git_reference_name_to_id")
(git-external (git-reference-owner git_reference*) git_repository* "git_reference_owner")
@convert (git-external (git-reference-rename (out git_reference*) git_reference* char-string int) :error "git_reference_rename")
(git-external (git-reference-resolve (out git_reference*) git_reference*) :error "git_reference_resolve")
@convert (git-external (git-reference-set-target (out git_reference*) git_reference* git_oid*) :error "git_reference_set_target")
(git-external (git-reference-target git_reference*) git_oid* "git_reference_target")
(git-external (git-reference-type git_reference*) git_ref_t "git_reference_type")


(git-external (git-reference-name->id git_repository* char-string) git_oid*
  #/C/
    git_oid* oid = calloc(1, sizeof(git_oid));
    int result = git_reference_name_to_id(oid, ___arg1, ___arg2);
    if (result != 0) git_call_error_handler(result);
    ___result_voidstar = oid;
//#)


(definition public (git-reference->id repo ref)
  (git-reference-name->id repo (git-reference-name ref)))


(c-definition (reference-foreach-procedure proc reference_name) (scheme-object char-string) int "reference_foreach_procedure" ""
  (if (proc reference_name)
      1
    0))

(c-declare git.foreign #/C/
static int reference_foreach_cb(const char *reference_name, void *payload)
{
    return reference_foreach_procedure(___EXT(___data_rc)(payload), reference_name);
}
//#)

(git-external (git-reference-for-each-stoppable git_repository* scheme-object) int
  #/C/
    void* p = ___EXT(___alloc_rc)(0);
    ___EXT(___set_data_rc)(p, ___arg2);
    int result = git_reference_foreach(___arg1, &reference_foreach_cb, p);
    ___EXT(___release_rc)(p);
    ___result = result;
//#)

(definition public (git-reference-for-each repo proc)
  (git-reference-for-each-stoppable repo
    (lambda (reference_name)
      (proc reference_name)
      #f)))


;;;
;;;; Reflog
;;;


@convert (git-external (git-reflog-delete git_reference*) :error "git_reflog_delete")
(git-external (git-reflog-entry-byindex git_reflog* size_t) git_reflog_entry* "git_reflog_entry_byindex")
(git-external (git-reflog-entry-committer git_reflog_entry*) git_signature* "git_reflog_entry_committer")
(git-external (git-reflog-entry-message git_reflog_entry*) char* "git_reflog_entry_message")
(git-external (git-reflog-entry-id-new git_reflog_entry*) git_oid* "git_reflog_entry_id_new")
(git-external (git-reflog-entry-id-old git_reflog_entry*) git_oid* "git_reflog_entry_id_old")
(git-external (git-reflog-entrycount git_reflog*) uint "git_reflog_entrycount")
(git-external (git-reflog-free git_reflog*) void "git_reflog_free")
@convert (git-external (git-reflog-read (out git_reflog*) git_reference*) :error "git_reflog_read")
@convert (git-external (git-reflog-rename git_reference* char-string) :error "git_reflog_rename")
(git-external (git-reflog-write git_reflog*) :error "git_reflog_write")


;;;
;;;; Refspec
;;;


(git-external (git-refspec-dst git_refspec*) char-string "git_refspec_dst")
(git-external (git-refspec-src git_refspec*) char-string "git_refspec_src")
(git-external (git-refspec-src-matches git_refspec* char-string) int "git_refspec_src_matches")
@convert (git-external (git-refspec-transform char* size_t git_refspec* char-string) :error "git_refspec_transform")


;;;
;;;; Remote
;;;


(git-external (git-remote-add-fetch git_remote* char-string) :error "git_remote_add_fetch")
(git-external (git-remote-add-push git_remote* char-string) :error "git_remote_add_push")
(git-external (git-remote-clear-refspecs git_remote*) void "git_remote_clear_refspecs")
(git-external (git-remote-connected git_remote*) int "git_remote_connected")
(git-external (git-remote-create (out git_remote*) git_repository* char-string char-string) :error "git_remote_create")
(git-external (git-remote-create-anonymous (out git_remote*) git_repository* char-string NULL) :error "git_remote_create_anonymous")
(git-external (git-remote-disconnect git_remote*) void "git_remote_disconnect")
(git-external (git-remote-free git_remote*) void "git_remote_free")
(git-external (git-remote-list git_strarray* git_repository*) :error "git_remote_list")
(git-external (git-remote-lookup (out git_remote*) git_repository* char-string) :error "git_remote_lookup")
(git-external (git-remote-ls git_remote* git_headlist_cb void*) :error "git_remote_ls")
(git-external (git-remote-name git_remote*) char-string "git_remote_name")
(git-external (git-remote-rename git_remote* char-string void* void*) :error "git_remote_rename")
(git-external (git-remote-save git_remote*) :error "git_remote_save")
(git-external (git-remote-set-callbacks git_remote* git_remote_callbacks*) void "git_remote_set_callbacks")
@convert (git-external (git-remote-supported-url char-string) int "git_remote_supported_url")
(git-external (git-remote-update-tips git_remote* NULL) :error "git_remote_update_tips")
(git-external (git-remote-url git_remote*) char-string "git_remote_url")
@convert (git-external (git-remote-valid-url char-string) int "git_remote_valid_url")


(git-external (git-remote-connect git_remote* int) void
  #/C/
    gambit_disable_os_interrupts();
    int result = git_remote_connect(___arg1, ___arg2);
    gambit_enable_os_interrupts();
    if (result != 0) git_call_error_handler(result);
//#)


(git-external (git-remote-fetch git_remote*) void
  #/C/
    gambit_disable_os_interrupts();
    int result = git_remote_fetch(___arg1, NULL, NULL);
    gambit_enable_os_interrupts();
    if (result != 0) git_call_error_handler(result);
//#)


(c-definition (credentials-acquire-procedure callbacks) (scheme-object) git_cred* "credentials_acquire_procedure" ""
  (when callbacks
    (let ((credentials-callback (get-credentials-callback~ callbacks)))
      (when credentials-callback
        (credentials-callback)))))

(c-declare git.foreign #/C/
    int credentials_cb(git_cred **out, const char * url, const char * username_from_url, unsigned int allowed_types, void * payload)
    {
        git_cred* cred;
        cred = credentials_acquire_procedure(___EXT(___data_rc)(payload));
        if (cred)
        {
            *out = cred;
            return 0;
        }
        else
            return GIT_PASSTHROUGH;
    }
//#)

(c-definition (remote-download-procedure callbacks total_objects indexed_objects received_objects received_bytes) (scheme-object unsigned-int unsigned-int unsigned-int unsigned-int) void "remote_download_procedure" ""
  (when callbacks
    (let ((download-callback (get-download-callback~ callbacks)))
      (when download-callback
        (download-callback total_objects indexed_objects received_objects received_bytes)))))

(c-declare git.foreign #/C/
    int transfer_progress_cb(const git_transfer_progress *stats, void *payload)
    {
        remote_download_procedure(___EXT(___data_rc)(payload), stats->total_objects, stats->indexed_objects, stats->received_objects, stats->received_bytes);
        return 0;
    }
//#)

(git-external (git-remote-setup-callbacks git_remote* scheme-object) void
  #/C/
    void* p = ___EXT(___alloc_rc)(0);
    ___EXT(___set_data_rc)(p, ___arg2);
    git_remote_callbacks callbacks = GIT_REMOTE_CALLBACKS_INIT;
    callbacks.credentials = credentials_cb;
    callbacks.transfer_progress = transfer_progress_cb;
    callbacks.payload = p;
    int result = git_remote_set_callbacks(___arg1, &callbacks);
    if (result != 0) git_call_error_handler(result);
    // to free the memory
    // ___EXT(___release_rc)(p);
//#)

(git-external (git-remote-download git_remote*) void
  #/C/
    int result = git_remote_download(___arg1, NULL);
    if (result != 0) git_call_error_handler(result);
//#)


;;;
;;;; Repository
;;;


(git-external (git-repository-config (out git_config*) git_repository*) :error "git_repository_config")
@convert (git-external (git-repository-discover char* size_t char-string int char-string) :error "git_repository_discover")
(git-external (git-repository-free git_repository*) void "git_repository_free")
(git-external (git-repository-head (out git_reference*) git_repository*) :error "git_repository_head")
(git-external (git-repository-head-detached git_repository*) int "git_repository_head_detached")
@convert (git-external (git-repository-head-orphan git_repository*) int "git_repository_head_orphan")
(git-external (git-repository-index (out git_index*) git_repository*) :error "git_repository_index")
(git-external (git-repository-init_ (out git_repository*) char-string uint) :error "git_repository_init")
(git-external (git-repository-is-bare git_repository*) int "git_repository_is_bare")
(git-external (git-repository-is-empty git_repository*) int "git_repository_is_empty")
(git-external (git-repository-odb (out git_odb*) git_repository*) :error "git_repository_odb")
(git-external (git-repository-open (out git_repository*) char-string) :error "git_repository_open")
(git-external (git-repository-open-ext (out git_repository*) char-string uint32_t char-string) :error "git_repository_open_ext")
(git-external (git-repository-path git_repository*) char-string "git_repository_path")
(git-external (git-repository-set-head git_repository* char-string) void "git_repository_set_head")
@convert (git-external (git-repository-set-config git_repository* git_config*) void "git_repository_set_config")
@convert (git-external (git-repository-set-index git_repository* git_index*) void "git_repository_set_index")
@convert (git-external (git-repository-set-odb git_repository* git_odb*) void "git_repository_set_odb")
(git-external (git-repository-set-workdir git_repository* char-string int) :error "git_repository_set_workdir")
(git-external (git-repository-workdir git_repository*) char-string "git_repository_workdir")


(definition public (git-repository-init dir)
  (git-repository-init_
    dir
    0))


(definition public (git-repository-bare? repo)
  (= 1 (git-repository-is-bare repo)))


(definition public (git-repository-empty? repo)
  (= 1 (git-repository-is-empty repo)))


(definition public (with-repository path proc)
  (let ((repo #f))
    (unwind-protect
        (begin
          (set! repo (git-repository-open path))
          (proc repo))
      (when repo
        (git-repository-free repo)))))


;;;
;;;; Reset
;;;


(git-external (git-reset git_repository* git_object* git_reset_t NULL) :error "git_reset")


(c-definition (checkout-progress-procedure callbacks path completed_steps total_steps) (scheme-object char-string unsigned-int unsigned-int) void "checkout_progress_procedure" ""
  (when callbacks
    (let ((checkout-callback (get-checkout-callback~ callbacks)))
      (when checkout-callback
        (checkout-callback path completed_steps total_steps)))))

(c-declare git.foreign #/C/
    int checkout_progress_cb(const char *path, size_t completed_steps, size_t total_steps, void *payload)
    {
        checkout_progress_procedure(___EXT(___data_rc)(payload), path, completed_steps, total_steps);
        return 0;
    }
//#)

(git-external (git-reset-hard git_repository* git_object* scheme-object) void
  #/C/
    void* p = ___EXT(___alloc_rc)(0);
    ___EXT(___set_data_rc)(p, ___arg3);
    git_checkout_options options = GIT_CHECKOUT_OPTIONS_INIT;
    options.checkout_strategy = GIT_CHECKOUT_FORCE;
    options.progress_cb = checkout_progress_cb;
    options.progress_payload = p;
    git_reset(___arg1, ___arg2, GIT_RESET_HARD, &options);
    // to free the memory
    // ___EXT(___release_rc)(p);
//#)


;;;
;;;; Revision Parse
;;;


(git-external (git-revparse git_revspec* git_repository* char-string) :error "git_revparse")


;;;
;;;; Revision Walk
;;;


(git-external (git-revwalk-free git_revwalk*) void "git_revwalk_free")
(git-external (git-revwalk-hide git_revwalk* git_oid*) :error "git_revwalk_hide")
(git-external (git-revwalk-hide-ref git_revwalk* char-string) :error "git_revwalk_hide_ref")
(git-external (git-revwalk-new (out git_revwalk*) git_repository*) :error "git_revwalk_new")
(git-external (git-revwalk-next git_oid* git_revwalk*) :error "git_revwalk_next")
(git-external (git-revwalk-push git_revwalk* git_oid*) :error "git_revwalk_push")
(git-external (git-revwalk-push-glob git_revwalk* char-string) :error "git_revwalk_push_glob")
(git-external (git-revwalk-push-head git_revwalk*) :error "git_revwalk_push_head")
(git-external (git-revwalk-push-ref git_revwalk* char-string) :error "git_revwalk_push_ref")
(git-external (git-revwalk-repository git_revwalk*) git_repository* "git_revwalk_repository")
(git-external (git-revwalk-reset git_revwalk*) void "git_revwalk_reset")
(git-external (git-revwalk-sorting git_revwalk* uint) void "git_revwalk_sorting")


;;;
;;;; Signature
;;;


@convert (git-external (git-signature-dup git_signature*) git_signature* "git_signature_dup")
(git-external (git-signature-free git_signature*) void "git_signature_free")
(git-external (git-signature-new (out git_signature*) char-string char-string git_time_t int) :error "git_signature_new")
(git-external (git-signature-now (out git_signature*) char-string char-string) :error "git_signature_now")


;;;
;;;; Status
;;;


(git-external (git-status-file uint* git_repository* char-string) :error "git_status_file")
(git-external (git-status-foreach git_repository* void* void*) :error "git_status_foreach")
(git-external (git-status-foreach-ext git_repository* git_status_options* void* void*) :error "git_status_foreach_ext")
(git-external (git-status-should-ignore int* git_repository* char-string) :error "git_status_should_ignore")


(c-definition (status-foreach-procedure proc path status_flags) (scheme-object char-string uint) int "status_foreach_procedure" ""
  (if (proc path status_flags)
      1
    0))
      

(c-declare git.foreign #/C/
static int status_foreach_cb(const char *path, unsigned int status_flags, void *payload)
{
    return status_foreach_procedure(___EXT(___data_rc)(payload), path, status_flags);
}
//#)

(git-external (git-status-for-each-stoppable git_repository* scheme-object) int
  #/C/
    void* p = ___EXT(___alloc_rc)(0);
    ___EXT(___set_data_rc)(p, ___arg2);
    int result = git_status_foreach(___arg1, &status_foreach_cb, p);
    ___EXT(___release_rc)(p);
    ___result = result;
//#)

(definition public (git-status-for-each repo proc)
  (git-status-for-each-stoppable repo
    (lambda (path status_flags)
      (proc path status_flags)
      #f)))


;;;
;;;; StrArray
;;;


(git-external (git-strarray-free git_strarray*) void "git_strarray_free")


;;;
;;;; Submodule
;;;


(git-external (git-submodule-foreach git_repository* void* void*) :error "git_submodule_foreach")
(git-external (git-submodule-lookup (out git_submodule*) git_repository* char-string) :lookup "git_submodule_lookup")


;;;
;;;; Tag
;;;


(git-external (git-tag-create git_oid* git_repository* char-string git_object* git_signature* char-string int) :error "git_tag_create")
(git-external (git-tag-create-frombuffer git_oid* git_repository* char-string int) :error "git_tag_create_frombuffer")
(git-external (git-tag-create-lightweight git_oid* git_repository* char-string git_object* int) :error "git_tag_create_lightweight")
(git-external (git-tag-delete git_repository* char-string) :error "git_tag_delete")
(git-external (git-tag-free git_tag*) void "git_tag_free")
(git-external (git-tag-id git_tag*) git_oid* "git_tag_id")
(git-external (git-tag-list git_strarray* git_repository*) :error "git_tag_list")
(git-external (git-tag-list-match git_strarray* char-string git_repository*) :error "git_tag_list_match")
(git-external (git-tag-lookup (out git_tag*) git_repository* git_oid*) :lookup "git_tag_lookup")
(git-external (git-tag-lookup-prefix (out git_tag*) git_repository* git_oid* size_t) :lookup "git_tag_lookup_prefix")
(git-external (git-tag-message git_tag*) char-string "git_tag_message")
(git-external (git-tag-name git_tag*) char-string "git_tag_name")
(git-external (git-tag-peel (out git_object*) git_tag*) :error "git_tag_peel")
(git-external (git-tag-tagger git_tag*) git_signature* "git_tag_tagger")
(git-external (git-tag-target (out git_object*) git_tag*) :error "git_tag_target")
(git-external (git-tag-target-id git_tag*) git_oid* "git_tag_target_id")
(git-external (git-tag-target-type git_tag*) git_otype "git_tag_target_type")


;;;
;;;; Threads
;;;


; Note - These should always be called before and after working with libgit2.
; If compiled with GIT_THREADS, they will setup / shutdown the thread system.
; If not, they are a no-op. Therefore better be safe then sorry.

@convert (git-external (git-threads-init) void "git_threads_init")
@convert (git-external (git-threads-shutdown) void "git_threads_shutdown")


;;;
;;;; Trace
;;;


@convert (git-external (git-trace-set int void*) :error "git_trace_set")


;;;
;;;; Tree
;;;


(git-external (git-tree-entry-byindex git_tree* size_t) git_tree_entry* "git_tree_entry_byindex")
(git-external (git-tree-entry-byname git_tree* char-string) git_tree_entry* "git_tree_entry_byname")
(git-external (git-tree-entry-id git_tree_entry*) git_oid* "git_tree_entry_id")
(git-external (git-tree-entry-name git_tree_entry*) char-string "git_tree_entry_name")
(git-external (git-tree-entry-to-object (out git_object*) git_repository* git_tree_entry*) :error "git_tree_entry_to_object")
(git-external (git-tree-entry-type git_tree_entry*) git_otype "git_tree_entry_type")
(git-external (git-tree-entrycount git_tree*) uint "git_tree_entrycount")
(git-external (git-tree-free git_tree*) void "git_tree_free")
(git-external (git-tree-id git_tree*) git_oid* "git_tree_id")
(git-external (git-tree-lookup (out git_tree*) git_repository* git_oid*) :lookup "git_tree_lookup")
(git-external (git-tree-lookup-prefix (out git_tree*) git_repository* git_oid* size_t) :lookup "git_tree_lookup_prefix")
(git-external (git-tree-walk git_tree* git_treewalk_mode void* void*) :error "git_tree_walk")


;;;
;;;; Tree Builder
;;;


(git-external (git-treebuilder-clear git_treebuilder*) void "git_treebuilder_clear")
@convert (git-external (git-treebuilder-create (out git_treebuilder*) git_tree*) :error "git_treebuilder_create")
(git-external (git-treebuilder-filter git_treebuilder* void* void*) void "git_treebuilder_filter")
(git-external (git-treebuilder-free git_treebuilder*) void "git_treebuilder_free")
(git-external (git-treebuilder-get git_treebuilder* char-string) git_tree_entry* "git_treebuilder_get")
(git-external (git-treebuilder-insert (out git_tree_entry*) git_treebuilder* char-string git_oid* uint) :error "git_treebuilder_insert")
(git-external (git-treebuilder-remove git_treebuilder* char-string) :error "git_treebuilder_remove")
@convert (git-external (git-treebuilder-write git_oid* git_repository* git_treebuilder*) :error "git_treebuilder_write")


;;;
;;;; Init
;;;


(git-libgit2-init))
