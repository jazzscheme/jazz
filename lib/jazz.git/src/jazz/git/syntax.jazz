;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Git Syntax
;;;


(module jazz.git.syntax jazz


(macro public (git-external signature type . rest)
  (define (out-parameter? obj)
    (and (pair? obj)
         (eq? (car obj) 'out)))
  
  (define (expand-args count initial-comma?)
    (let ((out ""))
      (loop (for n from 1 to count)
            (set! out (string-append out (if (or initial-comma? (/= n 1)) ", " "") (format "___arg{a}" n))))
      out))
  
  (let* ((s-name (car signature))
         (params (cdr signature))
         (c-name-or-code (if (null? rest) (symbol->string s-name) (car rest))))
    (if (or (null? params)
            (not (out-parameter? (car params))))
        (if (eq? type :error)
            (let ((c-code
                    (string-append (format "int result = {a}({a});{%}" c-name-or-code (expand-args (length params) #f))
                                   (format "if (result != 0) git_call_error_handler(result);{%}"))))
              `(definition public ,s-name
                 (c-function ,params void ,c-code)))
          `(definition public ,s-name
             (c-function ,params ,type ,c-name-or-code)))
      (let ((out-type (cadr (car params)))
            (parameters (cdr params)))
        (let ((c-code
                (string-append (format "{a} out;{%}" out-type)
                               (format "int result = {a}(&out{a});{%}" c-name-or-code (expand-args (length parameters) #t))
                               (format "if (result == 0) ___result_voidstar = out;{%}")
                               (if (eq? type :lookup)
                                   (format "else if (result == GIT_ENOTFOUND) ___result_voidstar = NULL;{%}")
                                 "")
                               (format "else git_call_error_handler(result);"))))
          `(definition public ,s-name
             (c-function ,parameters ,out-type ,c-code))))))))
