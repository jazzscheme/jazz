;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Git Syntax
;;;


(module jazz.git.syntax jazz


(definition tracable?
  #t)


(macro public (git-external signature type . rest)
  (define (out-parameter? obj)
    (and (pair? obj)
         (eq? (car obj) 'out)))
  
  (define (expand-args parameters initial-comma?)
    (let ((last (length parameters))
          (params (new-queue))
          (args ""))
      (let (iter (n 1) (parameters parameters))
        (when (not-null? parameters)
          (let ((parameter (car parameters)))
            (cond ((eq? parameter 'NULL)
                   (set! args (string-append args (if (or initial-comma? (/= n 1)) ", " "")  "NULL"))
                   (iter n (cdr parameters)))
                  (else
                   (enqueue params parameter)
                   (set! args (string-append args (if (or initial-comma? (/= n 1)) ", " "")  (format "___arg{a}" n)))
                   (iter (+ n 1) (cdr parameters)))))))
      (values (queue-list params) args)))
  
  ;; hack around C calling Scheme potentially crashing due to interleaved C frames
  ;; this can happen for example when git-remote-connect requests credentials and
  ;; at the same time call-process-hwnd-message gets called from the message thread
  ;; but the resulting call-event can't happen immediately as the primordial thread
  ;; is currently blocked in the git call... the git-current-error functions are a
  ;; hack around Gambit crashing when throwing an exception from inside a c-definition
  (define (wrap-hack c-name)
    (let ((rest (generate-symbol "rest")))
      `(lambda ,rest
         (without-gambit-interrupts
           (lambda ()
             (clear-git-current-error)
             (prog1 (apply ,c-name ,rest)
               (check-git-current-error)))))))
  
  (define (wrap-trace name expr)
    (if (not tracable?)
        expr
      (let ((fn (generate-symbol "fn"))
            (rest (generate-symbol "rest")))
        `(let ((,fn ,expr))
           (lambda ,rest
             (when (trace-git?)
               ((trace-git) (cons ',name ,rest)))
             (apply ,fn ,rest))))))
  
  (let* ((s-name (car signature))
         (params (cdr signature))
         (c-name-or-code (if (null? rest) (symbol->string s-name) (car rest)))
         (c-name (string->symbol (string-append (symbol->string (car signature)) "$c")))
         (t-name (string->symbol (string-append (symbol->string (car signature)) "$t"))))
    (if (or (null? params)
            (not (out-parameter? (car params))))
        (receive (params args) (expand-args params #f)
          (define (parse-type proc)
            (if (eq? type :error)
                (proc 'void (string-append (format "int result = {a}({a});{%}" c-name-or-code args)
                                           (format "if (result != 0) git_call_error_handler(result);{%}")))
              (proc type c-name-or-code)))
          
          (parse-type
            (lambda (type c-name-or-code)
              `(begin
                 (definition ,c-name
                   (c-function anonymous ,params ,type ,c-name-or-code))
                 
                 (definition ,t-name
                   ,(wrap-trace s-name c-name))
                 
                 (definition public ,s-name
                   ,(wrap-hack t-name))))))
      (let ((out-type (cadr (car params)))
            (parameters (cdr params)))
        (receive (parameters args) (expand-args parameters #t)
          (let ((c-code
                  (string-append (format "{a} out;{%}" out-type)
                                 (format "int result = {a}(&out{a});{%}" c-name-or-code args)
                                 (format "if (result == 0) ___result_voidstar = out;{%}")
                                 (if (eq? type :lookup)
                                     (format "else if (result == GIT_ENOTFOUND) ___result_voidstar = NULL;{%}")
                                   "")
                                 (format "else ~{ git_call_error_handler(result); ___result_voidstar = NULL; ~}"))))
             `(begin
                (definition ,c-name
                  (c-function anonymous ,parameters ,out-type ,c-code))
                
                (definition ,t-name
                  ,(wrap-trace s-name c-name))
                
                (definition public ,s-name
                  ,(wrap-hack t-name))))))))))
