;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Git Test
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module jazz.git.test jazz


(import (jazz.event)
        (jazz.git.foreign)
        (jazz.listener))


(definition public (test-pull-repository url dir)
  (let ((title "test")
        (id 0)
        (name "test")
        (branch "master")
        (download-task #f)
        (checkout-task #f)
        (listener (open-stream-listener)))
    (define (open/init-repository proc)
      (let ((existing? (file-exists? dir)))
        (cond (existing?
               (let ((repo (git-repository-open dir)))
                 (proc repo (git-remote-lookup repo "origin"))))
              (else
               (let ((repo (git-repository-init dir)))
                 (proc repo (git-remote-create repo "origin" url)))))))
    
    (define (remote-connect remote listener)
      (let ((fd (get-write-file listener))
            (callbacks
              (new Git-Callbacks
                credentials-callback: (lambda ()
                                        (git-cred-userpass-plaintext-new "yownubeta" "world123")))))
        (git-remote-connect remote GIT_DIRECTION_FETCH id fd callbacks)))
    
    (define (process-listener name listener progress done)
      (declare (proper-tail-calls))
      (let (loop)
        (let ((c (wait listener)))
          (case c
            ((#\.)
             (progress #f)
             (loop))
            ((#\@)
             (close-stream-listener listener)
             (done #f))
            ((#\!)
             (close-stream-listener listener)
             (done #t))))))
    
    (define (set-status task str)
      (terminal-string str))
    
    (define (set-range task range)
      )
    
    (define (set-downloaded task downloaded)
      )
    
    (define (set-remaining task remaining)
      )
    
    (define (set-pos task pos)
      (terminal-string "."))
    
    (define (set-done task)
      (terminal-newline))
    
    (set-status download-task (string-append "Downloading " title))
    (open/init-repository
      (lambda (repo remote)
        (define download-progress
          (let ((inited? #f))
            (lambda (error?)
              (git-download-state id
                (lambda (total-objects received-objects received-bytes)
                  (let ((downloaded (fxfloor (/ (exact->inexact received-bytes) (* 1024. 1024.))))
                        (remaining (- total-objects received-objects)))
                    (set-downloaded download-task downloaded)
                    (set-remaining download-task remaining))
                  (when (not inited?)
                    (set-range download-task (new Range 0 total-objects))
                    (set! inited? #t))
                  (set-pos download-task received-objects))))))
        
        (define download-done
          (lambda (error?)
            (when error?
              (check-git-current-error))
            (set-done download-task)
            (set-status checkout-task (string-append "Installing " title))
            (git-remote-disconnect remote)
            (git-remote-update-tips remote)
            (git-remote-free remote)
            (git-repository-set-head repo (string-append "refs/heads/" branch))
            (let ((upstream (git-reference-lookup repo (string-append "refs/remotes/origin/" branch))))
              (let ((commit (git-object-lookup repo (git-reference->id repo upstream) GIT_OBJ_COMMIT)))
                (define (checkout-cleanup)
                  (git-reference-free upstream)
                  (git-object-free commit)
                  (git-repository-free repo))
                
                (unless (git-branch-lookup repo branch GIT_BRANCH_LOCAL)
                  (git-branch-create repo branch commit 1))
                (let ((new-content? #f))
                  (define checkout-progress
                    (let ((inited? #f))
                      (lambda (error?)
                        (git-checkout-state id
                          (lambda (completed-steps total-steps)
                            (when (> total-steps 0)
                              (set! new-content? #t)
                              (let ((remaining (- total-steps completed-steps)))
                                (set-remaining checkout-task remaining))
                              (when (not inited?)
                                (set-range checkout-task (new Range 0 total-steps))
                                (set! inited? #t))
                              (set-pos checkout-task completed-steps)))))))
                  
                  (define checkout-done
                    (lambda (error?)
                      (when error?
                        (check-git-current-error))
                      (set-done checkout-task)
                      (checkout-cleanup)))
                  
                  (set-range checkout-task (new Range 0 1))
                  (let ((listener (open-stream-listener)))
                    (git-reset-hard-threaded id (get-write-file listener) repo commit)
                    (process-listener 'checkout listener checkout-progress checkout-done)))))))
        
        (remote-connect remote listener)
        (set-range download-task (new Range 0 1))
        (git-remote-download-threaded id)
        (process-listener 'download listener download-progress download-done)))))


(test-pull-repository "https://github.com/gcartier/together-sirius-test-mac.git" "/Users/cartier/Devel/aaa"))
