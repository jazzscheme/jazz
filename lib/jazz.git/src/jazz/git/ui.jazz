;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Git UI
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module jazz.git.ui jazz


(import (jazz.application)
        (jazz.editor.diff)
        (jazz.feedback)
        (jazz.git)
        (jazz.graphic)
        (jazz.handler)
        (jazz.jml)
        (jazz.menu)
        (jazz.resource)
        (jazz.tree)
        (jazz.ui)
        (jazz.ui.view))


;;;
;;;; Git-Explorer
;;;


(class Git-Explorer extends Layout-View implements Filterable
  
  
  (property depot initialize #f accessors generate)
  
  
  (slot history)
  
  
  (form
    (<install>                                             layout-type: border
      (<Layout-View>                  name: toolbar        size: {Dimension 300 33} location: north layout-type: flow layout-insets: {Rect 0 6 0 0}
        (<Separator>                                       size: {Dimension 2 0})
        (<Label-View>                 name: depot-label    justification: (head -3) title: "Depot:" size: {Dimension 37 20} font: {Font Label})
        (<Border-View>                                     size: {Dimension 300 20} border-type: fill border-insets: {Rect 0 1 0 0}
          (<Border-View>              name: depot-border   border-type: edge style: entry
            (<Moniker-Widget>         name: depot          protocol: dir display-protocol?: #f display-logical?: #f return-press-handler: {Event-Handler :form on-return-press} moniker-update-handler: {Event-Handler :form on-moniker-update})))
        (<Separator>                                       size: {Dimension 24 0})
        (<Label-View>                 name: filter-label   justification: (head -3) title: "Filter:" size: {Dimension 37 20} font: {Font Label})
        (<Border-View>                                     size: {Dimension 250 20} border-type: fill border-insets: {Rect 0 1 0 0}
          (<Border-View>                                   border-type: edge style: entry
            (<Scroller-View>                               hscroll?: #f vscroll?: #f
              (<!>                    name: content        layout-type: fill
                (<Filter-Text-View>   name: filter-text)))))
        (<Separator>                                       size: {Dimension 4 0})
        (<Push-Tool>                  name: filter         size: {Dimension 22 22} tooltip?: #t tooltip-text: "Filter" resource: {Image-Resource "Spy"} portfolio: :images action-handler: {Event-Handler :form on-filter})
        (<Push-Tool>                  name: conflicts      location: tail size: {Dimension 22 22} tooltip?: #t tooltip-text: "Find Conflicts" resource: {Image-Resource "Clone"} portfolio: :images action-handler: {Event-Handler :form on-conflicts}))
      (<Splitter-View>                                     location: center orientation: vert mode: relative division: 50 style: document
        (<Border-View>                name: diff-border    location: first border-type: edge style: entry
          (<Scroller-View>                                 style: document hscroll?: #t vscroll?: #t
            (<!>                      name: content        layout-type: fill
              (<Tree-Header>                               style: document
                (<!>                  name: content
                  (<Git-History-Tree> name: history-tree   selection-handler: {Event-Handler :form on-selection-change} context-menu-handler: {Event-Handler :form on-context-menu}))))))
        (<Border-View>                name: history-border location: second border-type: edge style: entry
          (<Scroller-View>                                 style: document hscroll?: #t vscroll?: #t
            (<!>                      name: content        layout-type: fill
              (<Diff-Text-View>       name: diff-text)))))))
  
  
  (method override (finish initargs)
    (nextmethod initargs)
    (when depot
      (set-moniker~ (locate 'depot) (get-directory~ depot))))
  
  
  ;;;
  ;;;; Host
  ;;;
  
  
  (method meta override (host-icon)
    {Image-Resource "Configure"})
  
  
  (method meta override (host-title)
    "Git Explorer")
  
  
  (method meta override (host-position)
    {Point 28 14})
  
  
  (method meta override (host-size)
    {Dimension 800 500})
  
  
  (method override (host-workspaces)
    '(home))
  
  
  (method override (focus-default)
    (acquire-focus~ (locate 'filter-text)))
  
  
  ;;;
  ;;;; Filter
  ;;;
  
  
  (method override (filter filter-search)
    (filter-rows~ (locate 'history-tree)
      (lambda (title)
        (search title filter-search))))
  
  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method (on-context-menu evt)
    (let* ((sender (get-sender~ evt))
           (pos (get-position~ evt))
           (acquired (acquire sender pos))
           (menu (get-context-menu)))
      (when menu
        (with-context-click~ sender pos
          (lambda ()
            (track-popup-menu menu acquired))))))
  
  
  (method override (get-context-menu)
    (new Git-Commit-Menu))
  
  
  (method (on-moniker-update evt)
    (update-depot))
  
  
  (method override (on-return-press evt)
    (update-depot))
  
  
  (method (on-selection-change evt)
    (update-diff))
  
  
  (method (on-filter evt)
    (filter-target~ (locate 'filter-text)))
  
  
  (method (on-generate-patch evt)
    (define (generate-patch commit rank)
      (let ((digest (first commit))
            (number (+ rank 1)))
        (receive (input output) (open-string-pipe)
          (user-message "Generating patch {a}" number)
          (git~ depot (list "format-patch" "--start-number" (->string number) "-1" digest) output))))
    
    (let ((tree (locate 'history-tree)))
      (let ((data (get-selected-data~ tree)))
        (when (not-null? data)
          (with-cursor :wait
            (lambda ()
              (for-each generate-patch (reverse data) (naturals 0 (length data)))
              (user-message "Done")))))))
  
  
  (method (on-conflicts evt)
    (let* ((appl (get-application))
           (manager (get-search-manager~ appl))
           (player (get-player~ manager)))
      (set-selection-name~ (locate~ manager 'tab) 'directories)
      (let ((search (locate~ manager 'directories-search)))
        (set-string-content~ (locate~ search 'directories) (format "{l}" (get-list~ (get-directory~ depot))))
        (set-string-content~ (locate~ search 'extensions) "")
        (set-search-targets~ search
          (list (list (make-string 7 #\>) "")
                (list (make-string 7 #\<) "")))
        (set-whole-words?~ search #f)
        (set-ignore-case?~ search #f)
        (set-regexp?~ search #f)
        (set-preserve-case?~ search #f)
        (set-play-recording?~ search #f)
        (set-expression?~ search #f)
        (bring-to-front~ player)
        (set-visible?~ player #t)
        (select-search~ search))))
  
  
  ;;;
  ;;;; Update
  ;;;
  
  
  (method (update-depot)
    (set! depot (new Git-Depot (get-moniker~ (locate 'depot))))
    (update))
  
  
  (method (update)
    (define (read-history input)
      (let ((queue (new-queue)))
        (let (iterate)
          (input-port-timeout-set! input 0)
          (let ((info (read-line input)))
            (unless (eof-object? info)
              (bind (digest date author message) (split info ";")
                (enqueue queue (list digest date author message)))
              (iterate))))
        (queue-list queue)))
    
    (define (update-history)
      (let ((tree (locate 'history-tree)))
        (remove-every-row~ tree)
        (with-update-locked~ tree
          (lambda ()
            (for-each (lambda (info)
                        (bind (digest date author message) info
                          (add-row~ tree children: (list (new Tree-Node title: digest)
                                                         (new Tree-Label title: date)
                                                         (new Tree-Label title: author)
                                                         (new Tree-Label title: message))
                            user-data: info)))
                      history)))))
    
    (with-cursor :wait
      (lambda ()
        (receive (input output) (open-string-pipe)
          (git~ depot (list "log" "--pretty=format:%H;%ai;%an;%s") output)
          (set! history (read-history input))
          (update-history)
          (set-string-content~ (locate 'diff-text) "")))))
  
  
  (method (update-diff)
    (let ((commit (get-single-selected-data~ (locate 'history-tree))))
      (when commit
        (with-cursor :wait
          (lambda ()
            (let ((digest (first commit)))
              (receive (input output) (open-string-pipe)
                (git-show~ depot digest output)
                (input-port-timeout-set! input 0)
                (let ((content (read-content-string input)))
                  (set-string-content~ (locate 'diff-text) content))))))))))


;;;
;;;; Git-History-Tree
;;;


(class Git-History-Tree extends Tree-View
  
  
  (form
    (<install>                           filled-column: message multiple-selection?: #t
      (<Tree-Node-Column>  name: digest  title: "Digest" width: 250 toplevel-controls?: #f display-images?: #f)
      (<Tree-Label-Column> name: date    title: "Date" width: 150)
      (<Tree-Label-Column> name: author  title: "Author" width: 150)
      (<Tree-Label-Column> name: message title: "Message" width: 300))))


;;;
;;;; Git-Commit-Menu
;;;


(class Git-Commit-Menu extends Context-Menu
  
  
  (form
    (<install>
      (<Label-Item> name: copy title: "Generate Patch" icon: {Image-Resource "CompareFiles"} action-handler: {Event-Handler :focus-guest on-generate-patch})))))
