;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Git Tester
;;;


(module protected jazz.git.validate.Git-Tester jazz


(import (jazz.io)
        (jazz.jml)
        (jazz.git.interface)
        (jazz.validation))


(class Git-Tester extends Tester
  
  
  (form
    (<install> title: "Git-Tester"))


  (method override (test)
    (initialize-aliases)
    (let ((url "https://github.com/gcartier/jiri.git")
          (dir {Directory Home "aaa" "test"}))
      (when (exists?~ dir)
        (delete-directory~ dir))
      (create-directories~ dir)
      (let ((repo (git-repository-init dir)))
        (debug repo)
        (let ((remote (git-remote-create repo "origin" url)))
          (debug remote)
          (let ((callbacks (new Git-Remote-Callbacks
                             credentials-callback: (lambda ()
                                                     (debug 'credentials)
                                                     (git-cred-userpass-plaintext-new "user" "password"))
                             download-callback: (lambda (total-objects indexed-objects received-objects received-bytes)
                                                  (debug 'download total-objects indexed-objects received-objects received-bytes)))))
            (git-remote-setup-callbacks remote callbacks)
            (git-pull repo remote)
            (git-remote-free remote)
            (git-repository-free repo)))))
    @w
    (test-pull)
    @w
    (describe-repository)
    @w (
    (invoke "Version" test-version)
    (invoke "OID" test-oid)
    (invoke "Signature" test-signature)
    (invoke "Repository" test-repository)
    (invoke "Remote" test-remote)
    (invoke "Config" test-config)
    (invoke "Index" test-index)
    (invoke "Commit" test-commit)
    (invoke "Branch" test-branch)
    (invoke "Reference" test-reference)
    (invoke "Tag" test-tag)
    (invoke "Blob" test-blob)
    (invoke "Tree" test-tree)
    (invoke "ODB" test-odb)))
  
  
  ;;;
  ;;;; Pull
  ;;;
  
  
  @convert (
  ;; Todo
  ;; - Progress feedback
  ;; - Authentication
  (method (test-pull)
    (let ((dir {Directory Home "foo"}))
      (with-repository (parse~ dir)
        (lambda (repo)
          (let ((remote (git-remote-load repo "origin")))
            (debug remote: remote)
            (debug name: (git-remote-name remote) url: (git-remote-url remote))
            (git-remote-fetch remote)
            (let ((local (git-branch-lookup repo "master" GIT_BRANCH_LOCAL))
                  (upstream (git-reference-lookup repo "refs/remotes/origin/master")))
              (if (not (git-graph-fast-forward? repo (git-reference->id repo local) (git-reference->id repo upstream)))
                  (debug 'not-fast-forward)
                (if (not (git-workdir-clean? repo))
                    (debug 'workdir-not-clean)
                  (let ((commit (git-object-lookup repo (git-reference->id repo upstream) GIT_OBJ_COMMIT)))
                    (git-reset repo commit GIT_RESET_HARD)))))
            (git-remote-free remote))))))
  
  
  ;;;
  ;;;; Describe
  ;;;
  
  
  (method (describe-repository)
    (let ((dir {Directory Home "foo"}))
      (with-repository (parse~ dir)
        (lambda (repo)
          ;; Repository
          (debug bare?: (git-repository-bare? repo))
          (debug empty?: (git-repository-empty? repo))
          (debug path: (git-repository-path repo))
          (debug workdir: (git-repository-workdir repo))
          ;; Branch
          (let ((iterate-branches
                  (lambda (kind)
                    (git-branch-for-each repo kind
                      (lambda (branch-name branch-type)
                        (let ((ref (git-branch-lookup repo branch-name branch-type)))
                          (let ((head? (git-branch-head? ref)))
                            (debug branch-name: branch-name branch-type: branch-type id: (git-id->string (git-reference->id repo ref)) head?: head?))))))))
            (iterate-branches GIT_BRANCH_LOCAL)
            (iterate-branches GIT_BRANCH_REMOTE))
          ;; Reference
          (git-reference-for-each repo
            (lambda (reference-name)
              (debug reference-name: reference-name)))
          ;; Graph
          (let ((head (git-reference->id repo (git-reference-lookup repo "HEAD")))
                (master (git-reference->id repo (git-reference-lookup repo "refs/heads/master")))
                (br (git-reference->id repo (git-branch-lookup repo "br" GIT_BRANCH_LOCAL)))
                (xp (git-reference->id repo (git-branch-lookup repo "xp" GIT_BRANCH_LOCAL)))
                (nw (git-reference->id repo (git-branch-lookup repo "nw" GIT_BRANCH_LOCAL))))
            (debug head: (git-id->string head))
            (debug master: (git-id->string master))
            (debug xp: (git-id->string xp))
            (debug nw: (git-id->string nw))
            (debug br-xp: (git-graph-ahead-behind repo br xp) (git-graph-fast-forward? repo br xp))
            (debug xp-br: (git-graph-ahead-behind repo xp br) (git-graph-fast-forward? repo xp br))
            (debug xp-nw: (git-graph-ahead-behind repo xp nw) (git-graph-fast-forward? repo xp nw))
            (debug nw-xp: (git-graph-ahead-behind repo nw xp) (git-graph-fast-forward? repo nw xp)))
          ;; Index
          (let ((index (git-repository-index repo)))
            (debug index-count: (git-index-entrycount index) has-conflicts?: (git-index-has-conflicts? index) caps: (git-index-caps index))
            (debug index-list: (git-index-list index))
            (for-each (lambda (entry)
                        @crashes
                        (debug (git-index-entry-ctime entry))
                        @crashes
                        (debug (git-index-entry-mtime entry))
                        (debug entry: (git-index-entry-path entry)))
                      (git-index-list index))
            (git-index-free index))
          ;; Diff
          (let ((diff (git-diff-index-to-workdir repo #f #f)))
            (debug diff: diff))
          ;; Commit
          (let ((head (git-repository-head repo)))
            (let ((name (git-reference-name head))
                  (target (git-reference-target head)))
              (debug head: head name: name target: target)
              (let ((commit (git-commit-lookup repo target)))
                (define (describe-signature prefix sig)
                  (debug prefix (git_signature-name-ref sig) (git_signature-email-ref sig)))
                
                (debug commit: commit)
                (describe-signature author: (git-commit-author commit))
                (describe-signature committer: (git-commit-committer commit))
                (debug id: (git-id->string (git-commit-id commit)))
                (debug message: (git-commit-message commit))
                (debug message-encoding: (git-commit-message-encoding commit))
                (let ((count (git-commit-parentcount commit)))
                  (debug parentcount: count)
                  (loop (for n from 0 below count)
                        (debug parent: (git-commit-parent commit 0))
                        (debug parent-id: (git-commit-parent-id commit 0))))
                (debug time: (git-commit-time commit))
                (debug time-offset: (git-commit-time-offset commit))
                (debug tree: (git-commit-tree commit))
                (debug tree-id: (git-commit-tree-id commit))
                ;; Tree
                (let ((tree (git-commit-tree commit)))
                  (define (describe-tree tree)
                    (debug tree: tree)
                    (loop (for n from 0 below (git-tree-entrycount tree))
                          (let ((entry (git-tree-entry-byindex tree n)))
                            (describe-entry entry))))
                  
                  ;; Entry
                  (define (describe-entry entry)
                    (let ((id (git-tree-entry-id entry))
                          (name (git-tree-entry-name entry))
                          (type (git-tree-entry-type entry)))
                      (debug entry: entry id: (git-id->string id) name: name type: (git-type->symbol type))
                      (ecase type
                        ((GIT_OBJ_BLOB) (describe-blob (git-blob-lookup repo id)))
                        ((GIT_OBJ_TREE) (describe-tree (git-tree-lookup repo id))))))
                  
                  ;; Blob
                  (define (describe-blob blob)
                    (let ((binary? (git-blob-binary? blob)))
                      (debug blob: blob binary?: binary? id: (git-blob-id blob) rawsize: (git-blob-rawsize blob))
                      (unless binary?
                        (debug text: (git-blob-text blob)))))
                  
                  (describe-tree tree)))))
          ;; OID
          (let ((id (git-string->id "1385f264afb75a56a5bec74243be9b367ba4ca08")))
            (debug id: id string: (git-id->string id))
            (git-free-id id))
          ;; ODB
          (let ((odb (git-repository-odb repo)))
            (debug odb: odb)
            (git-odb-for-each odb
              (lambda (id)
                (debug id: (git-id->string id))))
            (git-odb-free odb))
          ;; Diff
          (let ((diff (git-diff-index-to-workdir repo #f #f)))
            (debug diff: diff))
          ;; Status
          (debug 'status)
          (git-status-for-each repo
            (lambda (path flags)
              (debug path: path flags: flags)))))))
  
  
  ;;;
  ;;;; Version
  ;;;


  (method (test-version)
    (validate (equal? '(0 . 18) (git-version))))
  
  
  ;;;
  ;;;; OID
  ;;;
  
  
  (method (test-oid)
    )
  
  
  ;;;
  ;;;; Signature
  ;;;
  
  
  (method (test-signature)
    )
  
  
  ;;;
  ;;;; Repository
  ;;;


  (method (test-repository)
    @comment
    (let ((dir {Directory Home "zoo"}))
      (create-directories~ dir)
      (let ((repo (git-repository-init dir)))
        (debug repo)
        (git-repository-free repo)))
    (let ((dir {Directory Home "foo"}))
      (with-repository (parse~ dir)
        (lambda (repo)
          (debug bare?: (git-repository-bare? repo))
          (debug empty?: (git-repository-empty? repo))
          (validate (filename=? (git-repository-path repo) (format "{a}.git/" (parse~ dir))))))))
  
  
  ;;;
  ;;;; Remote
  ;;;


  (method (test-remote)
    )
  
  
  ;;;
  ;;;; Config
  ;;;


  (method (test-config)
    )
  
  
  ;;;
  ;;;; Index
  ;;;


  (method (test-index)
    (let ((dir {Directory Home "foo"}))
      (with-repository (parse~ dir)
        (lambda (repo)
          (let ((index (git-repository-index repo)))
            (debug index-count: (git-index-entrycount index))
            (debug index-list: (git-index-list index))
            (for-each (lambda (entry)
                        @crashes
                        (debug (git-index-entry-ctime entry))
                        @crashes
                        (debug (git-index-entry-mtime entry))
                        (debug entry: (git-index-entry-path entry)))
                      (git-index-list index))
            (git-index-free index))))))
  
  
  ;;;
  ;;;; Commit
  ;;;


  (method (test-commit)
    )
  
  
  ;;;
  ;;;; Branch
  ;;;


  (method (test-branch)
    )
  
  
  ;;;
  ;;;; Reference
  ;;;


  (method (test-reference)
    )
  
  
  ;;;
  ;;;; Tag
  ;;;


  (method (test-tag)
    )
  
  
  ;;;
  ;;;; Blob
  ;;;


  (method (test-blob)
    )
  
  
  ;;;
  ;;;; Tree
  ;;;


  (method (test-tree)
    )
  
  
  ;;;
  ;;;; ODB
  ;;;


  (method (test-odb)
    ))))
