(module protected jazz.graphic.opengl.foreign.glew-syntax jazz


(export define-c-enumerant
        define-c-wrap)


;; This macro makes each of the enumerants available to the scheme
;; environment as a variable w/ the same name
;; GL_VERTEX_SHADER becomes GL_VERTEX_SHADER
(macro (define-c-enumerant symb (prefix: prefix #f) (signed: signed #f))
  `(define ,(if prefix (string->symbol (string-append (symbol->string prefix)
													  "_"
													  (symbol->string symb)))
				symb)
     (c-code ,(string-append "___RESULT = ___" (if signed "S" "U") "32BOX("
                (symbol->string symb)
                ");"))))


;; This macro will schemify the names of each C function
;; glGetBooleanv becomes gl-get-booleanv
(macro (define-c-wrap c-name args return (c-body: c-body #f))
  (define (foreign-c-identifier->scheme symb)
	((lambda (str)
	   (letrec 
		   ((str-length (string-length str))
			(case-changed?
			 (lambda (i)
			   (let ((h (- i 1)))
				 (cond ((< h 0) #f)
					   ((and (char-lower-case? (string-ref str h))
							 (char-upper-case? (string-ref str i)))
						#t)
					   (else #f)))))
			(char-loop
			 (lambda (i out)
			   (cond ((>= i str-length) out)
					 ((char=? (string-ref str i) #\_)
					  (char-loop (+ i 1) (cons #\- out)))
					 ((and (char=? (string-ref str i) #\:)
						   (< (+ i 1) str-length)
						   (char=? (string-ref str (+ i 1)) #\:))
					  (char-loop (+ i 2) (cons #\- out)))
					 ((case-changed? i)
					  (char-loop (+ i 1)
								 (cons (char-downcase
										(string-ref str i))
									   (cons #\-
											 out))))
					 (else (char-loop (+ i 1)
									  (cons
									   (char-downcase
										(string-ref str i))
									   out)))))))
		 (list->string (reverse (char-loop 0 '())))))
	 (symbol->string symb)))
  (let ((scheme-name (string->symbol (foreign-c-identifier->scheme c-name))))
	`(define ,scheme-name (c-lambda ,args ,return ,(if c-body c-body (symbol->string c-name)))))))
