(library protected jazz.graphic.opengl.foreign.glu jazz


(export (jazz.graphic.opengl.foreign.glu-header))
(import (jazz.graphic.opengl.foreign.glu-header)
        (jazz.platform.types))


(c-include "<GL/gl.h>")
(c-include "<GL/glu.h>")


(define gluBeginCurve (c-function (GLUnurbs*) void "gluBeginCurve"))
(define gluBeginPolygon (c-function (GLUtesselator*) void "gluBeginPolygon"))
(define gluBeginSurface (c-function (GLUnurbs*) void "gluBeginSurface"))
(define gluBeginTrim (c-function (GLUnurbs*) void "gluBeginTrim"))
;(define gluBuild1DMipmapLevels (c-function (GLenum GLint GLsizei GLenum GLenum GLint GLint GLint void*) GLint "gluBuild1DMipmapLevels"))
;(define gluBuild1DMipmaps (c-function (GLenum GLint GLsizei GLenum GLenum void*) GLint "gluBuild1DMipmaps"))
;(define gluBuild2DMipmapLevels (c-function (GLenum GLint GLsizei GLsizei GLenum GLenum GLint GLint GLint void*) GLint "gluBuild2DMipmapLevels"))
;(define gluBuild2DMipmaps (c-function (GLenum GLint GLsizei GLsizei GLenum GLenum void*) GLint "gluBuild2DMipmaps"))
;(define gluBuild3DMipmapLevels (c-function (GLenum GLint GLsizei GLsizei GLsizei GLenum GLenum GLint GLint GLint void*) GLint "gluBuild3DMipmapLevels"))
;(define gluBuild3DMipmaps (c-function (GLenum GLint GLsizei GLsizei GLsizei GLenum GLenum void*) GLint "gluBuild3DMipmaps"))
;(define gluCheckExtension (c-function (GLubyte* GLubyte*) GLboolean "gluCheckExtension"))
(define gluCylinder (c-function (GLUquadric* GLdouble GLdouble GLdouble GLint GLint) void "gluCylinder"))
(define gluDeleteNurbsRenderer (c-function (GLUnurbs*) void "gluDeleteNurbsRenderer"))
(define gluDeleteQuadric (c-function (GLUquadric*) void "gluDeleteQuadric"))
(define gluDeleteTess (c-function (GLUtesselator*) void "gluDeleteTess"))
(define gluDisk (c-function (GLUquadric* GLdouble GLdouble GLint GLint) void "gluDisk"))
(define gluEndCurve (c-function (GLUnurbs*) void "gluEndCurve"))
(define gluEndPolygon (c-function (GLUtesselator*) void "gluEndPolygon"))
(define gluEndSurface (c-function (GLUnurbs*) void "gluEndSurface"))
(define gluEndTrim (c-function (GLUnurbs*) void "gluEndTrim"))
(define gluErrorString (c-function (GLenum) char-string "gluErrorString"))
(define gluGetNurbsProperty (c-function (GLUnurbs* GLenum GLfloat*) void "gluGetNurbsProperty"))
(define gluGetString (c-function (GLenum) GLubyte* "gluGetString"))
(define gluGetTessProperty (c-function (GLUtesselator* GLenum GLdouble*) void "gluGetTessProperty"))
(define gluLoadSamplingMatrices (c-function (GLUnurbs* GLfloat* GLfloat* GLint*) void "gluLoadSamplingMatrices"))
(define gluLookAt (c-function (GLdouble GLdouble GLdouble GLdouble GLdouble GLdouble GLdouble GLdouble GLdouble) void "gluLookAt"))
(define gluNewNurbsRenderer (c-function () GLUnurbs* "gluNewNurbsRenderer"))
(define gluNewQuadric (c-function () GLUquadric* "gluNewQuadric"))
(define gluNewTess (c-function () GLUtesselator* "gluNewTess"))
(define gluNextContour (c-function (GLUtesselator* GLenum) void "gluNextContour"))
(define gluNurbsCallback (c-function (GLUnurbs* GLenum _GLUfuncptr) void "gluNurbsCallback"))
;(define gluNurbsCallbackData (c-function (GLUnurbs* GLvoid*) void "gluNurbsCallbackData"))
;(define gluNurbsCallbackDataEXT (c-function (GLUnurbs* GLvoid*) void "gluNurbsCallbackDataEXT"))
(define gluNurbsCurve (c-function (GLUnurbs* GLint GLfloat* GLint GLfloat* GLint GLenum) void "gluNurbsCurve"))
(define gluNurbsProperty (c-function (GLUnurbs* GLenum GLfloat) void "gluNurbsProperty"))
(define gluNurbsSurface (c-function (GLUnurbs* GLint GLfloat* GLint GLfloat* GLint GLint GLfloat* GLint GLint GLenum) void "gluNurbsSurface"))
(define gluOrtho2D (c-function (GLdouble GLdouble GLdouble GLdouble) void "gluOrtho2D"))
(define gluPartialDisk (c-function (GLUquadric* GLdouble GLdouble GLint GLint GLdouble GLdouble) void "gluPartialDisk"))
(define gluPerspective (c-function (GLdouble GLdouble GLdouble GLdouble) void "gluPerspective"))
(define gluPickMatrix (c-function (GLdouble GLdouble GLdouble GLdouble GLint*) void "gluPickMatrix"))
(define gluProject (c-function (GLdouble GLdouble GLdouble GLdouble* GLdouble* GLint* GLdouble* GLdouble* GLdouble*) GLint "gluProject"))
(define gluPwlCurve (c-function (GLUnurbs* GLint GLfloat* GLint GLenum) void "gluPwlCurve"))
(define gluQuadricCallback (c-function (GLUquadric* GLenum _GLUfuncptr) void "gluQuadricCallback"))
(define gluQuadricDrawStyle (c-function (GLUquadric* GLenum) void "gluQuadricDrawStyle"))
(define gluQuadricNormals (c-function (GLUquadric* GLenum) void "gluQuadricNormals"))
(define gluQuadricOrientation (c-function (GLUquadric* GLenum) void "gluQuadricOrientation"))
(define gluQuadricTexture (c-function (GLUquadric* GLboolean) void "gluQuadricTexture"))
(define gluScaleImage (c-function (GLenum GLsizei GLsizei GLenum void* GLsizei GLsizei GLenum GLvoid*) GLint "gluScaleImage"))
(define gluSphere (c-function (GLUquadric* GLdouble GLint GLint) void "gluSphere"))
(define gluTessBeginContour (c-function (GLUtesselator*) void "gluTessBeginContour"))
(define gluTessBeginPolygon (c-function (GLUtesselator* GLvoid*) void "gluTessBeginPolygon"))
(define gluTessCallback (c-function (GLUtesselator* GLenum _GLUfuncptr) void "gluTessCallback"))
(define gluTessEndContour (c-function (GLUtesselator*) void "gluTessEndContour"))
(define gluTessEndPolygon (c-function (GLUtesselator*) void "gluTessEndPolygon"))
(define gluTessNormal (c-function (GLUtesselator* GLdouble GLdouble GLdouble) void "gluTessNormal"))
(define gluTessProperty (c-function (GLUtesselator* GLenum GLdouble) void "gluTessProperty"))
(define gluTessVertex (c-function (GLUtesselator* GLdouble* GLvoid*) void "gluTessVertex"))
;(define gluUnProject (c-function (GLdouble GLdouble GLdouble GLdouble* GLdouble* GLint* GLdouble* GLdouble* GLdouble*) GLint "gluUnProject"))
;(define gluUnProject4 (c-function (GLdouble GLdouble GLdouble GLdouble GLdouble* GLdouble* GLint* GLdouble GLdouble GLdouble* GLdouble* GLdouble* GLdouble*) GLint "gluUnProject4"))
)
