;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; GLEW Foreign
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2012
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.graphic.opengl.glew.foreign jazz


(export (jazz.graphic.opengl.glew.header))
(import (jazz.graphic.opengl.glew.header)
        (jazz.foreign)
        (jazz.platform)
        (jazz.platform.types))


(c-include "<GL/glew.h>")


;; quick hack until glu has its own independant module
(definition package gluLookAt (c-function (GLdouble GLdouble GLdouble GLdouble GLdouble GLdouble GLdouble GLdouble GLdouble) void "gluLookAt"))
(definition package gluPerspective (c-function (GLdouble GLdouble GLdouble GLdouble) void "gluPerspective"))


(definition public gl-generate-texture
  (c-function () GLuint
    "GLuint texture;
     glGenTextures( 1, &texture );
     ___result = texture;"))


(definition public gl-light-model
  (c-function (GLenum GLfloat GLfloat GLfloat GLfloat) void
    "GLfloat param[] = {___arg2, ___arg3, ___arg4, ___arg5};
     glLightModelfv(___arg1, param);"))


(definition public gl-light
  (c-function (GLenum GLenum GLfloat GLfloat GLfloat GLfloat) void
    "GLfloat param[] = {___arg3, ___arg4, ___arg5, ___arg6};
     glLightfv(___arg1, ___arg2, param);"))


(definition public gl-material-specular
  (c-function (GLenum GLfloat GLfloat GLfloat GLfloat) void
    "GLfloat param[] = {___arg2, ___arg3, ___arg4, ___arg5};
     glMaterialfv(___arg1, GL_SPECULAR, param);"))


(definition public gl-material-shininess
  (c-function (GLenum GLfloat) void
    "GLfloat param[] = {___arg2};
     glMaterialfv(___arg1, GL_SHININESS, param);"))


(definition public glFog4f
  (c-function (GLenum GLfloat GLfloat GLfloat GLfloat) void
    "GLfloat param[] = {___arg2, ___arg3, ___arg4, ___arg5};
     glFogfv(___arg1, param);"))


(definition public glMultMatrixv
  (c-function (GLfloat GLfloat GLfloat GLfloat GLfloat GLfloat GLfloat GLfloat GLfloat GLfloat GLfloat GLfloat GLfloat GLfloat GLfloat GLfloat) void
    #<<end-of-c-code
    GLfloat m[16];
    m[0] = ___arg1;
    m[1] = ___arg5;
    m[2] = ___arg9;
    m[3] = ___arg13;
    m[4] = ___arg2;
    m[5] = ___arg6;
    m[6] = ___arg10;
    m[7] = ___arg14;
    m[8] = ___arg3;
    m[9] = ___arg7;
    m[10] = ___arg11;
    m[11] = ___arg15;
    m[12] = ___arg4;
    m[13] = ___arg8;
    m[14] = ___arg12;
    m[15] = ___arg16;
    glMultMatrixf(m);
end-of-c-code
))


(definition public glGetBoolean*
  (c-function (GLenum) GLboolean
    #<<end-of-c-code
    GLboolean ptr[1];
    glGetBooleanv(___arg1, ptr);
    ___result = ptr[0];
end-of-c-code
))


(definition public glGetInteger*
  (c-function (GLenum) GLint
    #<<end-of-c-code
    GLint ptr[1];
    glGetIntegerv(___arg1, ptr);
    ___result = ptr[0];
end-of-c-code
))


(definition public glGetFloat*
  (c-function (GLenum int) scheme-object
    #<<end-of-c-code
    ___SCMOBJ r = ___EXT(___alloc_scmobj) (___sF32VECTOR, ___arg2*sizeof(___F32), ___STILL);
    float *ptr = ___CAST(float*,___BODY(r));
    
    glGetFloatv(___arg1, ptr);
    ___result = r;
end-of-c-code
))


(definition public glUniform4fv*
  (c-function (GLint GLsizei scheme-object) void
    "glUniform4fv(___arg1, ___arg2, ___CAST(float*,___BODY(___arg3)));"))


(definition public glUniform3d*
  (c-function (GLint scheme-object) void
    #<<end-of-c-code
    double *src = ___CAST(double*,___BODY(___arg2));
    glUniform3f(___arg1, src[0], src[1], src[2]);
end-of-c-code
))


(definition public glUniform4d*
  (c-function (GLint scheme-object) void
    #<<end-of-c-code
    double *src = ___CAST(double*,___BODY(___arg2));
    glUniform4f(___arg1, src[0], src[1], src[2], src[3]);
end-of-c-code
))


(definition public glUniformMatrix4fv*
  (c-function (GLint GLsizei GLboolean scheme-object) void
    "glUniformMatrix4fv(___arg1, ___arg2, ___arg3, ___CAST(float*,___BODY(___arg4)));"))


(definition public glUniformMatrix4dv*
  (c-function (GLint GLsizei GLboolean scheme-object) void
    #<<end-of-c-code
    double *src = ___CAST(double*,___BODY(___arg4));
    GLfloat m[16];
    m[0] = src[0];
    m[1] = src[1];
    m[2] = src[2];
    m[3] = src[3];
    m[4] = src[4];
    m[5] = src[5];
    m[6] = src[6];
    m[7] = src[7];
    m[8] = src[8];
    m[9] = src[9];
    m[10] = src[10];
    m[11] = src[11];
    m[12] = src[12];
    m[13] = src[13];
    m[14] = src[14];
    m[15] = src[15];
    glUniformMatrix4fv(___arg1, ___arg2, ___arg3, m);
end-of-c-code
))


(c-external (glGetUniformLocation* GLint char-string) GLint "glGetUniformLocation")
(c-external (glGetAttribLocation* GLuint char-string) GLint "glGetAttribLocation")


(c-external (glGenVertexArrays GLsizei GLuint*) void)
(c-external (glBindVertexArray GLuint) void)


(c-external (glBindFragDataLocation GLuint GLuint char-string) void)


(definition public glGetShaderiv*
  (c-function (GLuint GLenum) GLint
    "GLint result;
     glGetShaderiv(___arg1, ___arg2, &result);
     ___result = result;"))


(definition public glGetProgramiv*
  (c-function (GLuint GLenum) GLint
    "GLint result;
     glGetProgramiv(___arg1, ___arg2, &result);
     ___result = result;"))


(definition public glVertexAttribPointer*
  (c-function (GLuint GLint GLenum GLboolean GLsizei int) void
    "glVertexAttribPointer(___arg1, ___arg2, ___arg3, ___arg4, ___arg5, ___CAST(void*, ___arg6));"))


(definition public glGenVertexArrays*
  (c-function () GLuint
    "GLuint handle;
     glGenVertexArrays(1, &handle);
     ___result = handle;"))


(definition public glGenBuffers*
  (c-function () GLuint
    "GLuint buffer;
     glGenBuffers(1, &buffer);
     ___result = buffer;"))


(definition public glBufferDataFloat*
  (c-function (GLenum GLsizeiptr scheme-object GLenum) void
    "glBufferData(___arg1, ___arg2 * sizeof(float), ___CAST(float*,___BODY(___arg3)), ___arg4);")))
