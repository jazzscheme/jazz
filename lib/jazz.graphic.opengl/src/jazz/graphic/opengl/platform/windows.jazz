;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Platform-dependant OpenGL (Windows)
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2012
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.graphic.opengl.platform.windows jazz


(export (jazz.graphic.opengl.platform.WinOpenGL))

(import (jazz.graphic.opengl.autoload)
        (jazz.graphic.opengl.platform.WinOpenGL)
        (jazz.graphic.opengl.glew)
        (jazz.geometry)
        (jazz.platform)
        (jazz.ui.window))


(definition OPENGL_CLASS_ATOM
  #f)


(definition public opengl-fullscreen?
  (make-parameter #f))


(definition (register-window-class)
  (let ((instance (current-instance))
        (background (class-background))
        (wc (WNDCLASSEX-make)))
    (WNDCLASSEX-cbSize-set! wc         (WNDCLASSEX-sizeof))
    (WNDCLASSEX-style-set! wc          (bitwise-ior CS_HREDRAW CS_VREDRAW CS_OWNDC))
    (WNDCLASSEX-lpfnWndProc-set! wc    call-process-hwnd-message)
    (WNDCLASSEX-cbClsExtra-set! wc     0)
    (WNDCLASSEX-cbWndExtra-set! wc     0)
    (WNDCLASSEX-hInstance-set! wc      instance)
    (WNDCLASSEX-hIcon-set! wc          (load-product-icon 32 32))
    (WNDCLASSEX-hCursor-set! wc        NULL)
    (WNDCLASSEX-hbrBackground-set! wc  NULL)
    (WNDCLASSEX-lpszMenuName-set! wc   NULL)
    (WNDCLASSEX-lpszClassName-set! wc  "JOpenGLWindow")
    (WNDCLASSEX-hIconSm-set! wc        (load-product-icon 16 16))
    (set! OPENGL_CLASS_ATOM (RegisterClassEx wc))))


(register-window-class)


(specific (window-class (<OpenGL-Window> window))
  OPENGL_CLASS_ATOM)


(specific (window-style (<OpenGL-Window> window) rest)
  (if (opengl-fullscreen?)
      WS_POPUP
    (bitwise-ior WS_CLIPSIBLINGS
                 WS_CLIPCHILDREN
                 WS_POPUP
                 WS_OVERLAPPEDWINDOW
                 WS_MINIMIZEBOX
                 WS_SYSMENU)))


(specific (window-ex-style (<OpenGL-Window> window) rest)
  WS_EX_APPWINDOW)


(specific (create-handle (<OpenGL-Window> window) rest)
  (CreateWindowEx
    (window-ex-style window rest)
    CLASS_ATOM
    NULL
    (window-style window rest)
    0 0 1280 1024
    (window-parent window)
    NULL
    (current-instance)
    NULL))


(definition package (swap-buffers window)
  (SwapBuffers (get-device~ window)))


(definition package (make-context-current window context)
  (wglMakeCurrent (get-device~ window) context))


(definition public (new-opengl-window (class: class #f) (width: width #f) (height: height #f) (fullscreen?: fullscreen? #f))
  (let ((class (or class OpenGL-Window))
        (width (or width 640))
        (height (or height 480)))
    (let ((window (parameterize ((opengl-fullscreen? fullscreen?)) (new (or class OpenGL-Window) fullscreen?: fullscreen? visible?: #f)))
          (pfd (PIXELFORMATDESCRIPTOR-make)))
      (PIXELFORMATDESCRIPTOR-nSize-set! pfd (PIXELFORMATDESCRIPTOR-sizeof))
      (PIXELFORMATDESCRIPTOR-nVersion-set! pfd 1)
      (PIXELFORMATDESCRIPTOR-dwFlags-set! pfd (bitwise-ior PFD_DRAW_TO_WINDOW PFD_SUPPORT_OPENGL PFD_DOUBLEBUFFER))
      (PIXELFORMATDESCRIPTOR-iPixelType-set! pfd PFD_TYPE_RGBA)
      (PIXELFORMATDESCRIPTOR-cColorBits-set! pfd 24)
      (PIXELFORMATDESCRIPTOR-cDepthBits-set! pfd 32)
      (PIXELFORMATDESCRIPTOR-iLayerType-set! pfd PFD_MAIN_PLANE)
      (let ((hdc (GetDC (get-handle~ window))))
        (let ((pixel-format (ChoosePixelFormat hdc pfd)))
          (SetPixelFormat hdc pixel-format pfd)
          (let ((temp-context (wglCreateContext hdc)))
            (wglMakeCurrent hdc temp-context)
            (let ((success (glewInit)))
              (unless (= success GLEW_OK)
                (system-message "Unable to initialize GLEW")
                (exit 1)))
            (set-device~ window hdc)
            (if (wglewIsSupported "WGL_ARB_create_context")
                (let ((context (wglCreateContextAttribsARB* hdc NULL)))
                  (wglMakeCurrent NULL NULL)
                  (wglDeleteContext temp-context)
                  (wglMakeCurrent hdc context)
                  (set-context~ window context))
              (set-context~ window temp-context))
            (set-title~ window "OpenGL")
            (if fullscreen?
                (let ((area (get-display-area~ (primary-monitor))))
                  (let ((left (get-left~ area))
                        (top (get-top~ area))
                        (width (rect-width area))
                        (height (rect-height area)))
                    (set-position~ window (new Point left top))
                    (set-size~ window (new Dimension width height))
                    (initialize-opengl~ window)
                    (resize-scene~ window width height)))
              (set-position~ window {Point 50 50})
              (set-size~ window (new Dimension width height))
              (initialize-opengl~ window)
              (resize-scene~ window width height))
            (SetTimer (get-handle~ window) 0 10 NULL)
            (set-visible?~ window #t)
            window)))))))
