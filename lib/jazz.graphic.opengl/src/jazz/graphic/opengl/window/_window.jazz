;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; OpenGL Windows
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2012
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module jazz.graphic.opengl.window jazz


(export (jazz.graphic.opengl.window.cocoa   (cond cocoa))
        (jazz.graphic.opengl.window.windows (cond windows))
        (jazz.graphic.opengl.window.x11     (cond x11)))

(import (jazz.debuggee)
        (jazz.geometry)
        (jazz.graphic.opengl.glew)
        (jazz.graphic.opengl.window.cocoa   (cond cocoa))
        (jazz.graphic.opengl.window.windows (cond windows))
        (jazz.graphic.opengl.window.x11     (cond x11))
        (jazz.library)
        (jazz.platform)
        (jazz.system)
        (jazz.ui)
        (jazz.ui.window))


(definition public (new-opengl-window (class: class #f) (position: position #f) (size: size #f) (fullscreen?: fullscreen? #f) (render?: render? #t) (visible?: visible? #t))
  (let ((window (create-opengl-window class: class position: position size: size fullscreen?: fullscreen? render?: render?)))
    (initialize-glew)
    (adjust-opengl-context window)
    (setup-opengl~ window)
    (when visible?
      (set-visible?~ window #t)
      (select-foreground~ window))
    window))


(cond-expand
  (mac
   (definition (init-glew)
     (glewExperimental)
     (glewInit)))
  (else
   (definition (init-glew)
     (glewInit))))


(definition package initialize-glew
  (let ((initialized? #f))
    (lambda ()
      (unless initialized?
        (let ((success (init-glew)))
          (if (= success GLEW_OK)
              (set! initialized? #t)
            (error "Unable to initialize GLEW")))))))


(class OpenGL-Window extends Toplevel
  
  
  (slot device             initialize #f accessors generate)
  (slot context            initialize #f accessors generate)
  (slot previous-placement initialize #f getter generate)
  (slot window-mode        initialize #f getter generate)


  (method override (opengl?)
    #t)
  
  
  (method override (prepare rest)
    (nextmethod rest)
    (set! window-mode (if (request-fullscreen?) 'fullscreen 'windowed)))
  
  
  (method override (size-change state size)
    (nextmethod state size)
    (when (opened?)
      (let ((width (get-width~ size))
            (height (get-height~ size)))
        (resize-scene (cast <fl> width) (cast <fl> height)))
      @interesting-but-can-get-called-too-early
      (render-scene)))
  
  
  (method protected virtual (resize-scene width <fl> height <fl>)
    (glViewport 0 0 (fxround width) (fxround height))
    (glMatrixMode GL_PROJECTION)
    (glLoadIdentity)
    (gluPerspective 45.0 (/ width height) 0.1 100.0)
    (glMatrixMode GL_MODELVIEW)
    (glLoadIdentity))
  
  
  (method protected virtual (setup-opengl)
    (glShadeModel GL_SMOOTH)
    (glClearColor 0.0 0.0 0.0 0.5)
    (glClearDepth 1.0)
    (glEnable GL_LINE_SMOOTH)
    (glEnable GL_POLYGON_SMOOTH)
    (glEnable GL_COLOR_MATERIAL)
    (glEnable GL_DEPTH_TEST)
    (glDepthFunc GL_LEQUAL)
    (glPolygonMode GL_FRONT_AND_BACK GL_FILL)
    (glHint GL_PERSPECTIVE_CORRECTION_HINT GL_NICEST))
  
  
  (cond-expand
    (windows
     (method (pulse-scene)
       (when (and (get-visible?)
                  (= (current-repl-level) 0))
         (render-scene))))
    (else))
  
  
  ;;;
  ;;;; Fullscreen
  ;;;
  
  
  ;; quicky
  (cond-expand
    (cocoa
     (method public (toggle-windowed-mode)
       (platform-set-fullscreen-windowed-mode handle)))
    (else
     (method public (toggle-windowed-mode)
       (case window-mode
         ((fullscreen)
          (restore-from-fullscreen))
         ((windowed)
          (set-fullscreen-windowed-mode))
         (else
          (restore-windowed-mode))))))


  (method public (set-fullscreen-windowed-mode)
    (set! previous-placement (get-placement))
    (platform-set-fullscreen-windowed-mode handle)
    (set! window-mode 'fullscreen-windowed))
  
  
  (method public (restore-from-fullscreen)
    (platform-restore-from-fullscreen handle)
    (set! window-mode 'windowed))
  
  
  (method public (restore-windowed-mode)
    (when previous-placement
      (set-window-placement handle previous-placement))
    (platform-restore-windowed-mode handle)
    (set! window-mode 'windowed))
  
  
  (method public (set-fullscreen-mode)
    (platform-set-fullscreen-mode handle))
  
  
  ;;;
  ;;;; Render
  ;;;
  
  
  (method override (paint update-region . platform-data)
    (with-platform-painting self platform-data
      (lambda (surface)
        (when (get-visible?)
          (render-scene)))))


  (method override (scroll-window delta rect clip-rect)
    (assert handle)
    (invalidate-rect clip-rect))
  
  
  (method protected virtual (render-scene)
    (draw-scene)
    (render-sync))
  
  
  (method protected virtual (draw-scene)
    )
  
  
  (method public (render-sync)
    (when (get-visible?)
      (swap-buffers handle device)))
  
  
  (method override (close-window)
    (close-requested))))
