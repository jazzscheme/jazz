;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Cairo Regions
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.graphic.Cairo-Region jazz


(import (jazz.graphic)
        (jazz.platform.cairo))


(class Cairo-Region extends Base-Region
  
  
  (slot handle getter generate)
  
  
  (method override (initialize (rect: rect #f))
    (set! handle (if rect
                     (begin
                       @pixman-will-output-an-error-message-if-passed-a-bad-rectangle
                       (let ((l (get-left~ rect))
                             (t (get-top~ rect))
                             (r (get-right~ rect))
                             (b (get-bottom~ rect)))
                         (assert (and (>= r l) (>= b t))))
                       (with-cairo-rectangle rect
                         (lambda (rectangle)
                           (cairo_region_create_rectangle rectangle))))
                   (cairo_region_create)))
    ;; not sure if this is necessary
    (cairo_region_reference handle)
    (destroy-mandatory))

  
  (method override (destroy)
    (cairo_region_destroy handle)
    (nextmethod))
  
  
  (method public (->platform-region)
    (new Region rect: (get-box)))


  (method override (get-box) <Rect>
    (with-cairo-rectangle #f
      (lambda (rectangle)
        (cairo_region_get_extents handle rectangle)
        (cairo-rectangle->rect rectangle))))
  
  
  (method override (iterate-rectangles proc)
    (with-cairo-rectangle #f
      (lambda (rectangle)
        (loop (for n from 0 below (cairo_region_num_rectangles handle))
              (cairo_region_get_rectangle handle n rectangle)
              (proc (cairo-rectangle->rect rectangle))))))
  
  
  (method override (offset! h v)
    (cairo_region_translate handle h v))
  
  
  (method override (combine-and! region)
    (cairo_region_intersect handle (get-handle~ region)))


  (method override (combine-or! region)
    (cairo_region_union handle (get-handle~ region)))
  
  
  (method override (combine-xor! region)
    (cairo_region_xor handle (get-handle~ region)))
  
  
  (method override (combine-diff! region)
    (cairo_region_subtract handle (get-handle~ region)))
  
  
  (method override (empty!)
    (cairo_region_subtract handle handle))
  
  
  (method override (empty?) <bool>
    (/= (cairo_region_is_empty handle) 0))
  
  
  (method override (intersects-rect? rect) <bool>
    (/= (cairo_region_contains_rectangle handle rect) CAIRO_REGION_OVERLAP_OUT))))
