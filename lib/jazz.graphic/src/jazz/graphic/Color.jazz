;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Color
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.graphic.Color jazz


(import (jazz.graphic)
        (jazz.library.exemplar))


(class Color extends Exemplar
  
  
  (attributes ()
    (red   initialize 0)
    (green initialize 0)
    (blue  initialize 0)
    (alpha initialize #f))
  
  
  (method override (default-domain)
    (colors-domain))


  ;;;
  ;;;; Present
  ;;;
  
  
  (definition meta public Constants
    '(Black White
      Light-Gray Gray Dark-Gray
      Light-Red Red Dark-Red
      Light-Orange Orange Dark-Orange
      Ochre Soft-Yellow Light-Yellow Yellow Dark-Yellow
      Light-Green Green Dark-Green
      Light-Blue Blue Dark-Blue
      Light-Purple Purple Dark-Purple
      Light Medium Dark))

  
  (method meta public (parse-string string)
    (if (empty-string? string)
        #f
      (let* ((lst (read-string-content string))
             (len (length lst))
             (err (lambda () (signal (new Conversion-Error object: string type: self)))))
        (if (and (= len 1) (symbol? (car lst)) (memq? (car lst) Constants))
            (registered-color (car lst))
          (if (= len 3)
              (bind (red green blue) lst
                (if (and (integer? red)
                         (integer? green)
                         (integer? blue))
                    (new self red: red green: green blue: blue)
                  (err)))
            (err))))))
  
  
  (method public (present)
    (let* ((sym (symbolize-color self))
           (name (get-name~ sym)))
      (if name
          (->string name)
        (format "{a} {a} {a}{? {a}~}"
                (get-red)
                (get-green)
                (get-blue)
                (get-alpha)))))


  ;;;
  ;;;; Conversions
  ;;;
  
  
  (method public (white?)
    (and (= (get-red) 255)
         (= (get-green) 255)
         (= (get-blue) 255)
         (not (get-alpha))))
  
  
  (method public (determine-color enabled? selected?)
    (cond
      ((not enabled?) (registered-color 'Dark))
      (selected? (get-opposite))
      (else self)))
  
  
  (method public (get-opposite)
    (cond ((color=? self (registered-color 'Dark-Red)) (registered-color 'Yellow))
          ((color=? self (registered-color 'Dark-Gray)) (registered-color 'Gray))
          (else #f)))))
