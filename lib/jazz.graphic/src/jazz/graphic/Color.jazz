;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Color
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.graphic.Color jazz


(import (jazz.exemplar)
        (jazz.graphic))


(class Color extends Exemplar
  
  
  (attributes ()
    (slot red   <fl> initialize 0.)
    (slot green <fl> initialize 0.)
    (slot blue  <fl> initialize 0.)
    (slot alpha <fl> initialize 1.))
  
  
  (method override (initialize-attributes attributes)
    (for-each-property (lambda (key value)
                         (let ((symbol (keyword->symbol key)))
                           (set-attribute symbol
                             (if (or (flonum? value)
                                     (eq? symbol 'alpha))
                                 value
                               (/ (cast <fl> value) 255.)))))
                       attributes))
  
  
  (method override (present-attribute attribute value)
    (format "{r precision: 3}" value))
  
  
  (method override (default-domain)
    (colors-domain))


  ;;;
  ;;;; Conversions
  ;;;
  
  
  (method public (white?)
    (and (= (get-red) 1.)
         (= (get-green) 1.)
         (= (get-blue) 1.)
         (= (get-alpha) 1.)))
  
  
  (method public (->rbg)
    (format "#{x width: 2 justify: :right padding: :v}{x width: 2 justify: :right padding: :v}{x width: 2 justify: :right padding: :v}"
            (fxround (* (get-red) 255.)) #\0
            (fxround (* (get-green) 255.)) #\0
            (fxround (* (get-blue) 255.)) #\0))
  
  
  (method public (->red/green/blue)
    (format "red: {a} green: {a} blue: {a}"
            (fxround (* (get-red) 255.))
            (fxround (* (get-green) 255.))
            (fxround (* (get-blue) 255.))))
  
  
  (method public (determine-color enabled? selected?)
    (cond ((not enabled?) (registered-color 'Dark))
          (selected? (get-opposite))
          (else self)))
  
  
  (method public (get-opposite)
    (cond ((color-similar? self (registered-color 'Dark-Red)) (registered-color 'Yellow))
          ((color-similar? self (registered-color 'Dark-Gray)) (registered-color 'Gray))
          (else #f)))))
