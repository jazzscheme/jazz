;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Rectangles Regions
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2012
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.graphic.Rectangles-Region jazz


(import (jazz.geometry))


(class Rectangles-Region extends Object
  
  
  (slot keep-rectangles?)
  (slot rectangles               initialize '())
  (slot bounding-box     <Rect+> initialize #f)
  
  
  (method override (initialize (keep-rectangles?: keep-rectangles? (needs-rectangles?)) (rect: rect #f))
    (nextmethod)
    (set! keep-rectangles?~self keep-rectangles?)
    (when (and keep-rectangles? rect)
      (set! rectangles (list rect))
      (set! bounding-box rect)))
  
  
  (method protected virtual (needs-rectangles?)
    #t)
  
  
  (method public virtual (get-rectangles)
    (assert keep-rectangles?)
    rectangles)


  (method public (get-bounding-box) <Rect+>
    (assert keep-rectangles?)
    bounding-box)


  (method public virtual (get-box) <Rect>
    (assert keep-rectangles?)
    (or bounding-box {Rect 0 0 0 0}))
  
  
  (method public virtual (offset! h v)
    (when keep-rectangles?
      (for-each (lambda (rect)
                  (offset-rect! rect h v))
                rectangles)
      (when bounding-box
        (offset-rect! bounding-box h v))))
  
  
  (method public virtual (combine-and! region)
    )


  (method public virtual (combine-or! region)
    (when keep-rectangles?
      (let ((region-bounding-box (get-bounding-box~ region)))
        (when region-bounding-box
          (set! rectangles (append rectangles (get-rectangles~ region)))
          (set! bounding-box (if bounding-box
                                 (rect-union bounding-box region-bounding-box)
                               region-bounding-box))))))
  
  
  (method public virtual (combine-xor! region)
    (combine-or! region))
  
  
  (method public virtual (combine-diff! region)
    )
  
  
  (method public virtual (empty?) <bool>
    (assert keep-rectangles?)
    (not bounding-box))
  
  
  (method public virtual (intersects-rect? rect) <bool>
    (assert keep-rectangles?)
    (and bounding-box (rect-intersect? bounding-box rect)))))
