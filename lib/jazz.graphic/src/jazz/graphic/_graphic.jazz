;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Graphic
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module jazz.graphic jazz


(export (jazz.graphic.syntax)
        (jazz.graphic.autoload))

(import (jazz.graphic.autoload))


;;;
;;;; Register
;;;


(definition (registered-object table name)
  (let ((procedure/object (table-ref table name #f)))
    (if (procedure? procedure/object)
        (let ((object (procedure/object)))
          (table-set! table name object)
          object)
      procedure/object)))


(definition (for-each-object table proc)
  (iterate-table table
    (lambda (name value)
      (proc name (if (procedure? value)
                     (value)
                   value)))))


;;;
;;;; Color
;;;


(definition *colors*
  (make-table test: eq?))


(definition package (register-color name color)
  (table-set! *colors* name color))


(definition package (registered-color name (alpha #f))
  (load-unit 'jazz.graphic.literals.colors)
  (let ((color (or (registered-object *colors* name)
                   (error "Unknown color: {s}" name))))
    (if alpha
        (let ((color (copy (registered-color name))))
          (set-alpha~ color alpha)
          color)
      color)))


(definition public (symbolic-colors)
  (map-table *colors*
             (lambda (name value)
               name)))


(definition public (symbolic-color color)
  (if (symbol? color)
      (registered-color color)
    color))


(definition public (symbolize-color color)
  (continuation-capture
    (lambda (return)
      (iterate-table *colors*
        (lambda (name col)
          (when (color=? color col)
            (continuation-return return col))))
      color)))


(definition public (for-each-color proc)
  (for-each-object *colors* proc))


(definition public (color=? x y)
  (and (= (get-red~ x) (get-red~ y))
       (= (get-green~ x) (get-green~ y))
       (= (get-blue~ x) (get-blue~ y))
       (eqv? (get-alpha~ x) (get-alpha~ y))))


;;;
;;;; Font
;;;


(definition *fonts*
  (make-table test: eq?))


(definition package (register-font name font)
  (table-set! *fonts* name font))


(definition package (registered-font name)
  (load-unit 'jazz.graphic.literals.fonts)
  (or (registered-object *fonts* name)
      (error "Unknown font: {s}" name)))


(definition public (symbolic-fonts)
  (map-table *fonts*
             (lambda (name value)
               name)))


(definition public (symbolic-font font)
  (if (symbol? font)
      (registered-font font)
    font))


(definition public (for-each-font proc)
  (for-each-object *fonts* proc))


;;;
;;;; Region
;;;


(definition public (copy-region region <Region>) <Region>
  (let ((copy (new Region)))
    (combine!~ copy region 'or)
    copy))


(definition public (region-union x <Region> y <Region>) <Region>
  (let ((region (copy-region x)))
    (combine!~ region y 'or)
    region))


(definition public (region-intersection x <Region> y <Region>) <Region>
  (let ((region (copy-region x)))
    (combine!~ region y 'and)
    region))


(definition public (region-difference x <Region> y <Region>) <Region>
  (let ((region (copy-region x)))
    (combine!~ region y 'diff)
    region))


;;;
;;;; Debug
;;;


(definition public debug-paint?
  (make-parameter #f))

(definition public debug-painting?
  (make-parameter #f)))
