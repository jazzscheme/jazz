;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Graphic
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2012
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module jazz.graphic jazz


(export (jazz.graphic.syntax)
        (jazz.graphic.autoload))

(import (jazz.graphic.autoload)
        (jazz.geometry)
        (jazz.library.exemplar))


(definition public validate-transform?
  (make-parameter #t))


;;;
;;;; Register
;;;


(definition (registered-object table name)
  (let ((procedure/object (table-ref table name #f)))
    (if (procedure? procedure/object)
        (let ((object (procedure/object)))
          (table-set! table name object)
          object)
      procedure/object)))


(definition (for-each-object table proc)
  (iterate-table table
    (lambda (name value)
      (proc name (if (procedure? value)
                     (value)
                   value)))))


;;;
;;;; Resolution
;;;


;; widgets on screen are 50% larger than print resolution
(definition public default-resolution
  (* 72 3/2))


;;;
;;;; Color
;;;


(definition *colors*
  (new Exemplar-Domain
    name: 'Colors
    initer: (lambda ()
              (load-unit 'jazz.graphic.literals.colors))))


(definition public (colors-domain)
  *colors*)


(definition public (register-color name color)
  (register-exemplar name color *colors*))


(definition public (registered-color name (alpha #f))
  (locate~ *colors* name))


(definition public (symbolic-colors)
  (accumulate (get-content~ *colors*)
              get-name~))


(definition public (symbolic-color color)
  (if (symbol? color)
      (registered-color color)
    color))


(definition public (symbolize-color color (epsilon: epsilon 0))
  (symbolize~ *colors* color
    test: (lambda (x y)
            (color-epsilon-similar? x y epsilon))))


(definition public (for-each-color proc)
  (iterate (get-content~ *colors*) proc))


(definition public (color=? x y)
  (exemplar=? x y))


(definition public (color-similar? x y)
  (and (= (get-red~ x) (get-red~ y))
       (= (get-green~ x) (get-green~ y))
       (= (get-blue~ x) (get-blue~ y))
       (= (get-alpha~ x) (get-alpha~ y))))


(definition public (color-epsilon-similar? x y epsilon)
  (and (near? (get-red~ x) (get-red~ y) epsilon)
       (near? (get-green~ x) (get-green~ y) epsilon)
       (near? (get-blue~ x) (get-blue~ y) epsilon)
       (near? (get-alpha~ x) (get-alpha~ y) epsilon)))


(definition public (rgb->hsv r g b)
  (define (hsv h s v)
    (values (cast <fl> h)
            (cast <fl> s)
            (cast <fl> v)))
  
  (let ((min (min r g b))
        (max (max r g b)))
    (let ((v max)
          (delta (- max min)))
      (if (/= max 0)
          (let ((s (/ (cast <fl> delta) max)))
            (let ((h (cond ((= r max) (/ (cast <fl> (- g b)) delta))
                           ((= g max) (+ 2 (/ (cast <fl> (- b r)) delta)))
                           (else (+ 4 (/ (cast <fl> (- r g)) delta))))))
              (set! h (* h 60))
              (when (< h 0)
                (increase! h 360))
              (hsv h s v)))
        (hsv -1 0 v)))))


(definition public (hsv->rgb h s v)
  (let ((h (flmodulo h 360))
        (s (cast <fl> s))
        (v (cast <fl> v)))
    (if (= s 0)
        (values v v v)
      (let* ((h (/ (cast <fl> h) 60))
             (i (fxfloor h))
             (f (- h i))
             (p (* v (- 1 s)))
             (q (* v (- 1 (* s f))))
             (t (* v (- 1 (* s (- 1 f))))))
        (case i
          ((0) (values v t p))
          ((1) (values q v p))
          ((2) (values p v t))
          ((3) (values p q v))
          ((4) (values t p v))
          ((5) (values v p q)))))))


(definition public (color->rgb color)
  (values (get-red~ color)
          (get-green~ color)
          (get-blue~ color)))


(definition public (color->hsv color)
  (rgb->hsv (get-red~ color)
            (get-green~ color)
            (get-blue~ color)))


(definition public (rgb->color r g b)
  (new Color red: r green: g blue: b))


(definition public (hsv->color h s v)
  (receive (r g b) (hsv->rgb h s v)
    (new Color red: r green: g blue: b)))


(definition public (lighten color percentage)
  (receive (h s v) (color->hsv color)
    (hsv->color h s (* v (+ 1. (/ percentage 100.))))))


(definition public (darken color percentage)
  (receive (h s v) (color->hsv color)
    (hsv->color h s (/ v (+ 1. (/ percentage 100.))))))


(definition public (soften color percentage)
  (receive (h s v) (color->hsv color)
    (hsv->color h (/ s (+ 1. (/ percentage 100.))) v)))


(definition public (harden color percentage)
  (receive (h s v) (color->hsv color)
    (hsv->color h (* s (+ 1. (/ percentage 100.))) v)))


(definition public (color-cycle base cycle subcycle)
  (let ((seq (naturals-cycle cycle subcycle))
        (cardinality (* cycle subcycle)))
    (let ((inc (/ 360. cardinality)))
      (receive (h s v) (color->hsv base)
        (map (lambda (n)
               (let ((h (+ h (round (* inc n)))))
                 (hsv->color (fxround h) s v)))
             seq)))))


;;;
;;;; Font
;;;


(definition *fonts*
  (new Exemplar-Domain
    name: 'Fonts
    initer: (lambda ()
              (load-unit 'jazz.graphic.literals.fonts))))


(definition public (fonts-domain)
  *fonts*)


(definition public (register-font name font)
  (register-exemplar name font *fonts*))


(definition public (registered-font name)
  (locate~ *fonts* name))


(definition public (symbolic-fonts)
  (table-keys (get-index~ *fonts*)))


(definition public (symbolic-font font)
  (if (symbol? font)
      (registered-font font)
    font))


(definition public (for-each-font proc)
  (iterate (get-content~ *fonts*) proc))


(definition public (font=? x y)
  (exemplar=? x y))


;;;
;;;; Region
;;;


(definition public (copy-region region <Region>) <Region>
  (let ((copy (new Region)))
    (combine-or!~ copy region)
    copy))


(definition public (region-union x <Region> y <Region>) <Region>
  (let ((region (copy-region x)))
    (combine-or!~ region y)
    region))


(definition public (region-intersection x <Region> y <Region>) <Region>
  (let ((region (copy-region x)))
    (combine-and!~ region y)
    region))


(definition public (region-difference x <Region> y <Region>) <Region>
  (let ((region (copy-region x)))
    (combine-diff!~ region y)
    region))


;;;
;;;; Debug
;;;


(definition public debug-paint?
  (make-parameter #f))

(definition public debug-painting?
  (make-parameter #f)))
