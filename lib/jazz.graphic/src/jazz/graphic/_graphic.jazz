;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Graphic
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module jazz.graphic jazz


(export (jazz.graphic.syntax)
        (jazz.graphic.autoload))

(import (jazz.graphic.autoload)
        (jazz.library.exemplar))


;;;
;;;; Register
;;;


(definition (registered-object table name)
  (let ((procedure/object (table-ref table name #f)))
    (if (procedure? procedure/object)
        (let ((object (procedure/object)))
          (table-set! table name object)
          object)
      procedure/object)))


(definition (for-each-object table proc)
  (iterate-table table
    (lambda (name value)
      (proc name (if (procedure? value)
                     (value)
                   value)))))


;;;
;;;; Color
;;;


(definition package *colors*
  (new Exemplar-Domain))


(definition package (register-color color)
  (set-domain~ color *colors*)
  (register~ color))


(definition package (registered-color name (alpha #f))
  (load-unit 'jazz.graphic.literals.colors)
  (let ((color (locate~ *colors* name)))
    (if alpha
        (let ((color (copy (registered-color name))))
          (set-alpha~ color alpha)
          color)
      color)))


(definition public (symbolic-colors)
  (accumulate (get-content~ *colors*)
              get-name~))


(definition public (symbolic-color color)
  (if (symbol? color)
      (registered-color color)
    color))


(definition public (symbolize-color color (epsilon: epsilon 1))
  (continuation-capture
    (lambda (return)
      (iterate (get-content~ *colors*)
               (lambda (col)
                 (when (color-epsilon=? color col epsilon)
                   (continuation-return return col))))
      color)))


(definition public (for-each-color proc)
  (iterate (get-content~ *colors*) proc))


(definition public (color=? x y)
  (and (= (get-red~ x) (get-red~ y))
       (= (get-green~ x) (get-green~ y))
       (= (get-blue~ x) (get-blue~ y))
       (eqv? (get-alpha~ x) (get-alpha~ y))))


(definition public (color-epsilon=? x y epsilon)
  (and (near? (get-red~ x) (get-red~ y) epsilon)
       (near? (get-green~ x) (get-green~ y) epsilon)
       (near? (get-blue~ x) (get-blue~ y) epsilon)
       (eqv? (get-alpha~ x) (get-alpha~ y))))


(definition public (rgb->hsv r g b)
  (define (hsv h s v)
    (values (exact->inexact h)
            (exact->inexact s)
            (exact->inexact v)))
  
  (let ((r (exact->inexact (/ r 255)))
        (g (exact->inexact (/ g 255)))
        (b (exact->inexact (/ b 255))))
    (let ((min (min r g b))
          (max (max r g b)))
      (let ((v max)
            (delta (- max min)))
        (if (/= max 0)
            (let ((s (/ delta max)))
              (let ((h (cond ((= r max) (/ (- g b) delta))
                             ((= g max) (+ 2 (/ (- b r) delta)))
                             (else (+ 4 (/ (- r g) delta))))))
                (set! h (* h 60))
                (when (< h 0)
                  (increase! h 360))
                (hsv h s v)))
          (hsv -1 0 v))))))


(definition public (hsv->rgb h s v)
  (define (rgb r g b)
    (values (fxround (* r 255))
            (fxround (* g 255))
            (fxround (* b 255))))
  
  ;; quicky to fix
  (when (>= h 360)
    (set! h 359))
  (let ((h (exact->inexact h))
        (s (exact->inexact s))
        (v (exact->inexact v)))
    (if (= s 0)
        (rgb v v v)
      (let* ((h (/ h 60))
             (i (fxfloor h))
             (f (- h i))
             (p (* v (- 1 s)))
             (q (* v (- 1 (* s f))))
             (t (* v (- 1 (* s (- 1 f))))))
        (case i
          ((0) (rgb v t p))
          ((1) (rgb q v p))
          ((2) (rgb p v t))
          ((3) (rgb p q v))
          ((4) (rgb t p v))
          ((5) (rgb v p q)))))))


(definition public (color->hsv color)
  (rgb->hsv (get-red~ color)
            (get-green~ color)
            (get-blue~ color)))


(definition public (hsv->color h s v)
  (receive (r g b) (hsv->rgb h s v)
    (new Color red: r green: g blue: b)))


@to-be-redone
(definition public (color-cycle base cycle subcycle)
  (let* ((seq (cycle-naturals cycle subcycle))
         (cardinality (* cycle subcycle))
         (inc (/ 240 cardinality))
         (ref (get-colorref~ (rgb->hls~ base)))
         (hue (red-part ref))
         (lig (green-part ref))
         (sat (blue-part ref)))
    (map (lambda (n)
           (let* ((hue (+ hue (round (* inc n))))
                  (hls (new Color red: (round hue) green: lig blue: sat)))
             (hls->rgb~ hls)))
         seq)))


;;;
;;;; Font
;;;


(definition *fonts*
  (make-table test: eq?))


(definition package (register-font name font)
  (table-set! *fonts* name font))


(definition package (registered-font name)
  (load-unit 'jazz.graphic.literals.fonts)
  (or (registered-object *fonts* name)
      (error "Unknown font: {s}" name)))


(definition public (symbolic-fonts)
  (map-table *fonts*
             (lambda (name value)
               name)))


(definition public (symbolic-font font)
  (if (symbol? font)
      (registered-font font)
    font))


(definition public (for-each-font proc)
  (for-each-object *fonts* proc))


;;;
;;;; Region
;;;


(definition public (copy-region region <Region>) <Region>
  (let ((copy (new Region)))
    (combine!~ copy region 'or)
    copy))


(definition public (region-union x <Region> y <Region>) <Region>
  (let ((region (copy-region x)))
    (combine!~ region y 'or)
    region))


(definition public (region-intersection x <Region> y <Region>) <Region>
  (let ((region (copy-region x)))
    (combine!~ region y 'and)
    region))


(definition public (region-difference x <Region> y <Region>) <Region>
  (let ((region (copy-region x)))
    (combine!~ region y 'diff)
    region))


;;;
;;;; Debug
;;;


(definition public debug-paint?
  (make-parameter #f))

(definition public debug-painting?
  (make-parameter #f)))
