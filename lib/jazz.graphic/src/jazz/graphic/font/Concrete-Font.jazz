;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Concrete Fonts
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.graphic.font.Concrete-Font jazz


(import (jazz.cairo)
        (jazz.graphic)
        (jazz.settings))


(class Concrete-Font extends Object
  
  
  (slot font        getter generate)
  (slot local?      getter generate)
  (slot handle      getter generate)
  (slot font-face   getter generate)
  (slot scaled-font getter generate)
  (slot metrics     initialize #f)
  (slot all-widths  initialize #f)
  (slot glyph-cache initialize #f)
  
  
  (method override (initialize self font)
    (define (create-cairo-scaled-font font-face point-size bold? antialias subpixel hint-style hint-metrics)
      (define (cairo-antialias antialias)
        (case antialias
          ((default) CAIRO_ANTIALIAS_DEFAULT)
          ((none) CAIRO_ANTIALIAS_NONE)
          ((gray) CAIRO_ANTIALIAS_GRAY)
          ((subpixel) CAIRO_ANTIALIAS_SUBPIXEL)))
      
      (define (cairo-subpixel subpixel)
        (case subpixel
          ((default) CAIRO_SUBPIXEL_ORDER_DEFAULT)
          ((rgb) CAIRO_SUBPIXEL_ORDER_RGB)
          ((bgr) CAIRO_SUBPIXEL_ORDER_BGR)
          ((vrgb) CAIRO_SUBPIXEL_ORDER_VRGB)
          ((vbgr) CAIRO_SUBPIXEL_ORDER_VBGR)))
      
      (define (cairo-hint-style style)
        (case style
          ((default) CAIRO_HINT_STYLE_DEFAULT)
          ((none) CAIRO_HINT_STYLE_NONE)
          ((slight) CAIRO_HINT_STYLE_SLIGHT)
          ((medium) CAIRO_HINT_STYLE_MEDIUM)
          ((full) CAIRO_HINT_STYLE_FULL)))
      
      (define (cairo-hint-metrics metrics)
        (case metrics
          ((default) CAIRO_HINT_METRICS_DEFAULT)
          ((off) CAIRO_HINT_METRICS_OFF)
          ((on) CAIRO_HINT_METRICS_ON)))
      
      (let ((height (and point-size (calculate-height self point-size)))
            (matrix (cairo_matrix_t-make))
            (ctm (cairo_matrix_t-make))
            (options (cairo_font_options_create)))
        (cairo_font_options_set_antialias options (cairo-antialias (or antialias (find-setting 'cairo.antialias (default-antialias self)))))
        (cairo_font_options_set_subpixel_order options (cairo-subpixel (or subpixel (find-setting 'cairo.subpixel (default-subpixel self)))))
        (cairo_font_options_set_hint_style options (cairo-hint-style (or hint-style (find-setting 'cairo.hint-style (default-hint-style self)))))
        (cairo_font_options_set_hint_metrics options (cairo-hint-metrics (or hint-metrics (find-setting 'cairo.hint-metrics (default-hint-metrics self)))))
        (if height
            (cairo_matrix_init_scale matrix height height)
          (cairo_matrix_init_identity matrix))
        (cairo_matrix_init_identity ctm)
        (prog1 (cairo_scaled_font_create font-face matrix ctm options)
          (cairo_matrix_t-free matrix)
          (cairo_matrix_t-free ctm)
          (cairo_font_options_destroy options))))
    
    (nextmethod self)
    (let ((font-name (get-font-name font))
          (point-size (get-point-size font))
          (bold? (get-bold? font))
          (italic? (get-italic? font))
          (underline? (get-underline? font))
          (shadow (get-shadow font))
          (antialias (get-antialias font))
          (subpixel (get-subpixel font))
          (hint-style (get-hint-style font))
          (hint-metrics (get-hint-metrics font)))
      (set! self.font font)
      (set! self.local? (symbol? font-name))
      (set! self.handle (create-font self local? font-name: font-name point-size: point-size bold?: bold? italic?: italic? underline?: underline?))
      (set! self.font-face (create-cairo-font-face self local? self.handle))
      (set! self.scaled-font (create-cairo-scaled-font font-face point-size bold? antialias subpixel hint-style hint-metrics))
      (set! self.glyph-cache (make-vector 256 #f))))


  (method override (destroy self)
    (cairo_scaled_font_destroy scaled-font)
    (destroy-cairo-font-face self font-face)
    (destroy-font self local? handle)
    (nextmethod self))
  
  
  (method protected virtual (calculate-height self point-size) <fl>
    (cast <fl> point-size))
  
  (method protected virtual (adjust-height-hack self height)
    (+ 1 (fxceiling height)))
  
  
  (method protected virtual (default-antialias self)
    'default)
  
  (method protected virtual (default-subpixel self)
    'default)

  (method protected virtual (default-hint-style self)
    'slight)

  (method protected virtual (default-hint-metrics self)
    'default)
  
  
  (method protected virtual (create-font self . rest)
    )
  
  
  (method protected virtual (destroy-font self . rest)
    )
  
  
  (method protected virtual (create-cairo-font-face self . rest)
    )
  
  
  (method protected virtual (destroy-cairo-font-face self . rest)
    )
  
  
  (method protected virtual (cairo-glyph-index self font char)
    )
  
  
  ;;;
  ;;;; Text
  ;;;
  
  
  (definition *font-surface*
    #f)
  
  
  (definition (font-surface)
    (unless *font-surface*
      (set! *font-surface* (new Memory-Surface #f {Dimension 0 0} retina?: #t)))
    *font-surface*)

  
  (method public (text-extent self text)
    (set-font (font-surface) font)
    (get-text-extent (font-surface) text))

  
  (method public (text-width self text)
    (and text
         (begin
           (set-font (font-surface) font)
           (get-text-width (font-surface) text))))
  

  (method public (font-height self)
    (set-font (font-surface) font)
    (get-font-height (font-surface)))
  
  
  (method public (glyph-index self char)
    (if (> char 255)
        (cairo-glyph-index self font char)
      (or (vector-ref glyph-cache char)
          (let ((index (cairo-glyph-index self font char)))
            (vector-set! glyph-cache char index)
            index))))
  

  ;;;
  ;;;; Metrics
  ;;;
  
  
  (method public (get-metrics self)
    (unless metrics
      (set! metrics
            (begin
              (set-font (font-surface) font)
              (new Font-Metrics (get-text-metrics (font-surface)) (lambda (height) (adjust-height-hack self height))))))
    metrics)

  
  (method public (get-all-widths self)
    (unless all-widths
      (set! all-widths
            (begin
              (set-font (font-surface) font)
              (get-char-widths (font-surface)))))
    all-widths)
  
  
  (method public (get-widths self . rest)
    (set-font (font-surface) font)
    (get-char-widths (font-surface)))
  
  
  (method public (get-char-width self c)
    (let ((n (char->integer c)))
      (if (< n 256)
          (vector-ref (get-all-widths self) n)
        (set-font (font-surface) font)
        (get-char-width (font-surface) n))))))
