;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Fonts
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.graphic.font.Font jazz


(import (jazz.exemplar)
        (jazz.graphic))


(class Font extends Exemplar
  
  
  (attributes ()
    (slot font-name    initialize #f test equal?)
    (slot point-size   initialize #f)
    (slot bold?        initialize #f)
    (slot italic?      initialize #f)
    (slot underline?   initialize #f)
    (slot shadow       initialize #f)
    (slot antialias    initialize #f)
    (slot subpixel     initialize #f)
    (slot hint-style   initialize #f)
    (slot hint-metrics initialize #f))
  
  
  (slot concrete initialize #f)
  
  
  (method override (default-domain self)
    (fonts-domain))


  (method override (destroy self)
    (when concrete
      (close concrete)
      (set! concrete #f))
    (nextmethod self))
  
  
  ;;;
  ;;;; Concrete
  ;;;
  
  
  (definition concrete-font-cache
    (make-table test: exemplar=? hash: exemplar-hash))
  
  
  (method (cached-concrete-font self font)
    (or (table-ref concrete-font-cache font #f)
        (let ((concrete-font (new (concrete-font-class self) font)))
          (table-set! concrete-font-cache font concrete-font)
          concrete-font)))
  
  
  (method (concrete-font self)
    (unless concrete
      (set! concrete (cached-concrete-font self self)))
    concrete)
  
  
  (cond-expand
    (ios
     (method (concrete-font-class)
       CGFont-Font))
    (cocoa
     (method (concrete-font-class self)
       (case (get-font-engine)
         ((cgfont) CGFont-Font)
         (else Freetype-Font))))
    (windows
     (method (concrete-font-class)
       (case (get-font-engine)
         ((logfont) Logfont-Font)
         (else Freetype-Font))))
    (else
     (method (concrete-font-class)
       Freetype-Font)))
  
  
  (method public (get-handle self)
    (get-handle (concrete-font self)))
  
  
  (method public (get-scaled-font self)
    (get-scaled-font (concrete-font self)))
  
  
  ;;;
  ;;;; Text
  ;;;

  
  (method public (text-extent self text)
    (text-extent (concrete-font self) text))

  
  (method public (text-width self text)
    (text-width (concrete-font self) text))
  

  (method public (font-height self)
    (font-height (concrete-font self)))
  
  
  (method public (glyph-index self c)
    (glyph-index (concrete-font self) c))
  

  ;;;
  ;;;; Metrics
  ;;;
  
  
  (method public (get-metrics self)
    (get-metrics (concrete-font self)))

  
  (method public (get-all-widths self)
    (get-all-widths (concrete-font self)))
  
  
  (method public (get-widths self)
    (get-widths (concrete-font self)))
  
  
  (method public (get-char-width self c)
    (get-char-width (concrete-font self) c))))
