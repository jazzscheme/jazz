;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Fonts
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.graphic.font.Font jazz


(import (jazz.graphic)
        (jazz.graphic.font)
        (jazz.library.exemplar)
        (jazz.platform.cairo))


(class Font extends Exemplar
  
  
  (attributes ()
    (font-name   initialize #f)
    (point-size  initialize #f)
    (bold?       initialize #f)
    (italic?     initialize #f)
    (underline?  initialize #f)
    (antialias   initialize #f)
    (hint-style  initialize #f))
  
  
  (slot concrete initialize #f)
  
  
  (method override (default-domain)
    (fonts-domain))


  (method override (destroy)
    (when concrete
      (close~ concrete)
      (set! concrete #f))
    (nextmethod))
  
  
  ;;;
  ;;;; Concrete
  ;;;
  
  
  (method (concrete-font)
    (unless concrete
      (set! concrete (new Concrete-Font self)))
    concrete)
  
  
  (method public (get-handle)
    (get-handle~ (concrete-font)))
  
  
  (method public (get-scaled-font)
    (get-scaled-font~ (concrete-font)))
  
  
  ;;;
  ;;;; Text
  ;;;

  
  (method public (text-extent text)
    (text-extent~ (concrete-font) text))

  
  (method public (text-width text)
    (text-width~ (concrete-font) text))
  

  (method public (font-height)
    (font-height~ (concrete-font)))
  
  
  (method public (glyph-index c)
    (glyph-index~ (concrete-font) c))
  

  ;;;
  ;;;; Metrics
  ;;;
  
  
  (method public (get-metrics)
    (get-metrics~ (concrete-font)))

  
  (method public (get-all-widths)
    (get-all-widths~ (concrete-font)))
  
  
  (method public (get-widths)
    (get-widths~ (concrete-font)))
  
  
  (method public (get-char-width c)
    (get-char-width~ (concrete-font) c))
  
  
  ;;;
  ;;;; Extend
  ;;;
  
  
  (method public (extend-font-name name)
    (new Font
      font-name: name
      point-size: (get-point-size)
      bold?: (get-bold?)
      italic?: (get-italic?)
      underline?: (get-underline?)))
  
  
  (method public (extend-point-size point-size)
    (new Font
      font-name: (get-font-name)
      point-size: point-size
      bold?: (get-bold?)
      italic?: (get-italic?)
      underline?: (get-underline?)))
  
  
  (method public (toggle-bold)
    (new Font
      font-name: (get-font-name)
      point-size: (get-point-size)
      bold?: (not (get-bold?))
      italic?: (get-italic?)
      underline?: (get-underline?)))
  
  
  (method public (toggle-italic)
    (new Font
      font-name: (get-font-name)
      point-size: (get-point-size)
      bold?: (get-bold?)
      italic?: (not (get-italic?))
      underline?: (get-underline?)))
  
  
  (method public (toggle-underline)
    (new Font
      font-name: (get-font-name)
      point-size: (get-point-size)
      bold?: (get-bold?)
      italic?: (get-italic?)
      underline?: (not (get-underline?))))))
