;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Freetype Fonts
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2012
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.graphic.font.platform.freetype jazz


(import (jazz.platform.cairo)
        (jazz.platform.freetype))


;;;
;;;; Paths
;;;


(definition freetype-font-table
  (make-table))


(definition (get-freetype-font name)
  (or (table-ref freetype-font-table name #f)
      (error "Unknown freetype font: {s}" name)))

(definition (set-freetype-font name paths)
  (table-set! freetype-font-table name paths))


(cond-expand
  (mac
   (table-set! freetype-font-table 'tahoma   '("/Library/Fonts/Tahoma.ttf" "/Library/Fonts/Tahoma Bold.ttf" #f #f)))
  (else))

(table-set! freetype-font-table 'vera-sans   '("vera/Vera.ttf" "vera/VeraBd.ttf" "vera/VeraIt.ttf" "vera/VeraBI.ttf"))
(table-set! freetype-font-table 'vera-mono   '("vera/VeraMono.ttf" "vera/VeraMoBd.ttf" "vera/VeraMoIt.ttf" "vera/VeraMoBI.ttf"))
(table-set! freetype-font-table 'vera-serif  '("vera/VeraSe.ttf" "vera/VeraSeBd.ttf" "vera/VeraSe.ttf" "vera/VeraSeBd.ttf"))
(table-set! freetype-font-table 'droid-sans  '("droid/DroidSans.ttf" "droid/DroidSans-Bold.ttf" #f #f))
(table-set! freetype-font-table 'droid-mono  '("droid/DroidSansMono.ttf" #f #f #f))
(table-set! freetype-font-table 'droid-serif '("droid/DroidSerif-Regular.ttf" "droid/DroidSerif-Bold.ttf" "droid/DroidSerif-Italic.ttf" "droid/DroidSerif-BoldItalic.ttf"))
(table-set! freetype-font-table '10x20       '("x11/10x20.pcf" #f #f #f))


;;;
;;;; Font
;;;


(definition public (create-font-handle local?
                                       (font-name: font-name #f)
                                       (point-size: point-size #f)
                                       (bold?: bold? #f)
                                       (italic?: italic? #f)
                                       (underline?: underline? #f))
  (assert local?)
  (if local?
      (let* ((paths (get-freetype-font font-name))
             (index (cond ((and bold? italic?) 3)
                          (italic? 2)
                          (bold? 1)
                          (else 0)))
             (path  (or (list-ref paths index) (list-ref paths 0))))
        (let ((face (make-FT_Face))
              (path (if (starts-with? path "/") path (string-append kernel-source "etc/fonts/" path))))
          (when (/= 0 (FT_New_Face ft-library path 0 face))
            (error "Unable to create freetype font face: {a}" path))
          face))
    (Fc-font-match (Fc-make-pattern font-name point-size bold? italic? underline?))))


;;;
;;;; Cairo
;;;


(definition public (create-cairo-font-face local? handle)
  (if local?
      (cairo_ft_font_face_create_for_ft_face handle 0)
    (cairo_ft_font_face_create_for_pattern handle)))


(definition public (destroy-font-handle local? handle)
  (if local?
      (free-FT_Face handle)
    (FcPatternDestroy handle)))


(definition public (destroy-cairo-font-face handle)
  (cairo_font_face_destroy handle)))
