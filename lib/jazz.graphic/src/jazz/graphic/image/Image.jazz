;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Images
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.graphic.image.Image jazz


(import (jazz.geometry)
        (jazz.graphic)
        (jazz.graphic.image)
        (jazz.io)
        (jazz.platform.cairo))


(class Image extends Object


  (slot position   initialize {Point 0 0} accessors generate)
  (slot size       initialize #f          accessors generate)
  (slot background initialize #f          accessors generate)
  (slot portfolio  initialize #f          accessors generate)
  (slot resource   initialize #f          accessors generate)
  (slot moniker    initialize #f)
  (slot handle     initialize #f          accessors generate)
  
  
  (method override (initialize
                     (position: position {Point 0 0})
                     (size: size #f)
                     (background: background #f)
                     (portfolio: portfolio #f)
                     (resource: resource #f)
                     (moniker: moniker #f)
                     (handle: handle #f))
    (nextmethod)
    (set! position~self position)
    (set! size~self size)
    (set! background~self background)
    (set! portfolio~self portfolio)
    (set! resource~self resource)
    (cond (moniker (set-moniker moniker))
          (handle (set-handle handle))))
  
  
  (method override (destroy)
    (when handle
      (cairo_surface_destroy handle)
      (set! handle #f))
    (nextmethod))


  ;;;
  ;;;; Drawing
  ;;;


  (method public (draw surface context h v)
    (define (draw-image h v)
      (when resource
        (if background
            (draw-opaque-image~ portfolio surface context resource background h v)
          (draw-image~ portfolio surface context resource h v))))
    
    (define (draw-handle h v)
      (draw-image~ surface handle h v))
    
    (let ((h (+ (get-h~ position) h))
          (v (+ (get-v~ position) v)))
      (cond (portfolio (draw-image h v))
            (handle (draw-handle h v)))))


  ;;;
  ;;;; Access
  ;;;
  
  
  (method public (get-moniker)
    moniker)
  
  
  (method public (set-moniker mnk)
    (set! moniker mnk)
    (when moniker
      (set! handle (load-image 'image mnk))))


  ;;;
  ;;;; Image
  ;;;
  
  
  (method public (image-size)
    (cond (handle
           (get-cairo-image-surface-size handle))
          (else
           #f)))))
