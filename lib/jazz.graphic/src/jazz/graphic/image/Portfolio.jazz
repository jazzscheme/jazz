;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Image Portfolios
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.graphic.image.Portfolio jazz


(import (jazz.cairo)
        (jazz.component)
        (jazz.geometry)
        (jazz.graphic)
        (jazz.graphic.image)
        (jazz.resource))


(class Portfolio extends Component


  (slot images        initialize (make-table test: equal?))
  (slot opaque-images initialize (make-table test: equal?))
  
  
  ;;;
  ;;;; Initialization
  ;;;


  (method override (finish self initargs)
    (nextmethod self initargs)
    (allocated self))
  
  
  ;;;
  ;;;; Destruction
  ;;;


  (method override (destroy self)
    (define (destroy-image image)
      (cairo_surface_destroy image))
    
    (define (destroy-opaque-image image)
      (close image))
    
    (for-each destroy-image (table-values images))
    (for-each destroy-opaque-image (table-values opaque-images))
    (freed self)
    (nextmethod self))
  
  
  ;;;
  ;;;; Image
  ;;;


  (method public (get-image self resource)
    (define (add-resource resource)
      (typecase resource
        ((Icon-Resource) (add-icon resource))
        ((Image-Resource) (add-image resource))))
    
    (define (add-icon resource)
      (let ((image (load-image resource 'icon)))
        (table-set! images (get-name resource) image)
        image))
    
    (define (add-image resource)
      (let ((image (load-image resource 'image)))
        (table-set! images (get-name resource) image)
        image))
    
    (let ((name (get-name resource)))
      (or (table-ref images name #f)
          (add-resource resource))))
  
  
  (method public (get-opaque-image self resource background)
    (define (add-opaque-image key)
      (let ((image (get-image self resource)))
        (let ((size (get-cairo-image-surface-size image)))
          (let ((surface (new Memory-Surface #f size)))
            (fill-rect surface (size-rect size) background)
            (draw-surface surface image 0 0)
            (table-set! opaque-images key surface)
            surface))))
    
    (let ((key (cons (get-name resource) background)))
      (or (table-ref opaque-images key #f)
          (add-opaque-image key))))
  
  
  ;;;
  ;;;; Drawing
  ;;;


  (method public (draw-image self surface context resource h v)
    (let ((image (get-image self resource)))
      (draw-surface surface image h v)))
  
  
  (method public (draw-opaque-image self surface context resource background h v)
    (let ((image (get-opaque-image self resource background)))
      (draw-surface surface (get-handle image) h v)))))
