;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Image Definitions
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Stephane Le Cornec.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module jazz.graphic.image jazz


(import (jazz.application (cond (not ios)))
        (jazz.cairo)
        (jazz.io)
        (jazz.resource))


(cond-expand
  (ios
    (definition (current-application)
      #f))
  (else))


;;;
;;;; Load
;;;


(definition public (load-image image (type #f))
  (define (find-icon-file resource)
    (get-resource (current-application) 'icon (get-name resource)))
  
  (define (find-image-file resource)
    (get-resource (current-application) 'image (get-name resource)))
  
  (define (create-cairo-surface-from-file file)
    (assert (file? file)
      (if (exists? file)
          (let ((ext (get-extension file)))
            (let ((loader (registered-image-loader ext)))
              (if loader
                  (loader file)
                (error "Unable to create image from {a}" ext))))
        (error "Unable to find image: {a}" (parse file)))))
  
  (if (not type)
      (create-cairo-surface-from-file image)
    (case type
      ((icon)
       (create-cairo-surface-from-file
         (if (resource? image)
             (find-icon-file image)
           image)))
      ((image)
       (create-cairo-surface-from-file
         (if (resource? image)
             (find-image-file image)
           image))))))


(definition public (load-image-from-u8vector u8vector)
  (let ((handle (load-png-image-from-u8vector u8vector)))
    (if (/= (cairo_surface_status handle) 0)
        (error "Error loading image file from u8vector")
      handle)))


;;;
;;;; Loaders
;;;


(definition protected image-loaders
  (make-table test: extension=? hash: equal?-hash))


(definition public (register-image-loader extensions loader)
  (for-each (lambda (extension)
              (table-set! image-loaders extension loader))
            (listify extensions)))

(definition public (registered-image-loader extension)
  (table-ref image-loaders extension #f))


;;;
;;;; PNG
;;;


(definition public (create-cairo-surface-from-png file)
  (let ((handle (cairo_image_surface_create_from_png (parse file))))
    (if (/= (cairo_surface_status handle) 0)
        (error "Error loading image file: {a}" (parse file))
      handle)))


(register-image-loader "png"
  create-cairo-surface-from-png)


;;;
;;;; Portfolio
;;;


(definition protected image-portfolio-size
  16)

(definition protected (set-image-portfolio-size size)
  (set! image-portfolio-size size))


;;;
;;;; Resize
;;;


(definition public (resize-image handle new-width new-height (filter: filter #f))
  (let ((new-handle (cairo_surface_create_similar handle CAIRO_CONTENT_COLOR_ALPHA new-width new-height)))
    (let ((context (cairo_create new-handle))
          (width (cairo_image_surface_get_width handle))
          (height (cairo_image_surface_get_height handle)))
      (cairo_scale context
                   (/ (cast <fl> new-width) width)
                   (/ (cast <fl> new-height) height))
      (cairo_set_source_surface context handle 0. 0.)
      (if (not filter)
          (cairo_paint context)
        (let ((pattern (cairo_get_source context)))
          (let ((preserved (cairo_pattern_get_filter pattern)))
            (cairo_pattern_set_filter pattern filter)
            (cairo_paint context)
            (cairo_pattern_set_filter pattern preserved))))
      (cairo_destroy context)
      new-handle))))
