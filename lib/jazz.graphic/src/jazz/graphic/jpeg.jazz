;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; JPEG Images
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Stephane Le Cornec.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module jazz.graphic.jpeg jazz


(import (jazz.cairo)
        (jazz.io)
        (jazz.stream)
        (jazz.syntax (phase syntax)))


(definition public (determine-jpeg-size file)
  (declare (proper-tail-calls))
  (assert (exists? file))
  (startup-gstreamer)
  (let ((location (parse file)))
    (let ((pipeline (gst-launch (tie "filesrc name=src")
                                "typefind name=typefind"
                                "fakesink")))
      (gst_object_set_name pipeline "pipeline")
      (let ((src (gst_bin_get_by_name pipeline "src")))
        (g_object_set_string src "location" location))
      (gst_element_set_state pipeline GST_STATE_PAUSED)
      (gst_element_wait_state pipeline)
      (let ((pad (gst_element_get_static_pad (gst_bin_get_by_name pipeline "typefind") "src")))
        (let ((caps (let (loop)
                      (or (gst_pad_get_current_caps pad)
                          (begin
                            (sleep .001)
                            (loop))))))
          (assert (= (gst_caps_is_fixed caps) 1)
            (let ((struc (gst_caps_get_structure caps 0)))
              (values (gst_structure_get_int struc "width")
                      (gst_structure_get_int struc "height")))))))))


(definition public (read-jpeg file)
  (declare (proper-tail-calls))
  (startup-gstreamer)
  (receive (width height) (determine-jpeg-size file)
    (let ((location (parse file))
          (size (* width height 4)))
      (let ((buffer (make-u8vector size))
            (info (make-u64vector 2)))
        (let ((pipeline (gst-launch (tie "filesrc name=src")
                                    "jpegdec"
                                    "videoscale"
                                    "videoconvert"
                                    (tie "video/x-raw, format=BGRA, width={width}, height={height}")
                                    "appsink name=sink")))
          (gst_object_set_name pipeline "pipeline")
          (let ((src (gst_bin_get_by_name pipeline "src"))
                (sink (gst_bin_get_by_name pipeline "sink")))
            (g_object_set_string src "location" location)
            (gst_element_set_state pipeline GST_STATE_PLAYING)
            (let (loop (count 0))
              (let ((read (gst_app_sink_read sink buffer info)))
                ;; quick hack to some jpeg never returning frames
                ;; running the same jpeg on the command line says
                ;; that the decoder never returned any frame, so
                ;; how can we know that correctly in gstreamer?
                (if (> count 500)
                    (error "Unable to decode jpeg: {a}" location)
                  (if (/= read -1)
                      (assert (= read size)
                        (values width height buffer))
                    (sleep .001)
                    (loop (+ count 1)))))))))))))
