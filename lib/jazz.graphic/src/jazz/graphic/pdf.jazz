;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; PDF Surfaces
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Jeremie Lasalle Ratelle.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module jazz.graphic.pdf jazz


(import (jazz.cairo)
        (jazz.graphic)
        (jazz.io)
        (jazz.print)
        (jazz.view))


(definition pdf-dpi
  72.)


(definition public (with-pdf-job view file proc (page-setup: page-setup #f) (scaling: scaling #f))
  (let ((page-setup (or page-setup (new Page-Setup))))
    (let ((width (fxceiling (* (/ (get-width page-setup) default-resolution) pdf-dpi)))
          (height (fxceiling (* (/ (get-height page-setup) default-resolution) pdf-dpi))))
      (with ((surface (new PDF-Surface #f (new Dimension width height) (parse file))))
        (with-update-locked view
          (lambda ()
            (proc (new PDF-Job surface view page-setup pdf-dpi scaling: scaling))))))))


(definition public (document->pdf view file (page-setup: page-setup #f) (scaling: scaling #f))
  (with-pdf-job view file
    (lambda (job)
      (print-job job))
    page-setup: page-setup
    scaling: scaling))


;;;
;;;; PDF-Job
;;;
    

(class PDF-Job extends Print-Job
  
  
  (slot page-no initialize 0)
  
  
  (method public (emit-page self page)
    (with-page self page-no
      (lambda ()
        (print-page self surface page page-no)))
    (increase! page-no))
  
  
  (method override (end-page self no)
    (show-page surface))
  
  
  (method override (print-orientation self)
    'portrait))


;;;
;;;; PDF-Surface
;;;


(class PDF-Surface extends Surface
  
  
  (slot size getter generate)
  
  
  (method override (initialize self _ size filename)
    (cond-expand
      (ios
        (unimplemented))
      (else
    (let ((handle (cairo_pdf_surface_create filename (fixnum->flonum (get-width size)) (fixnum->flonum (get-height size)))))
      (nextmethod self handle)
      (set! self.size size)))))
  
  
  ;; PDF surfaces are in 72 floating point DPI while windows regions are in integer
  (method override (painting-tree-algorithm self)
    'toplevel)
  
  
  (method override (frame-rect self rect <Rect> color)
    (set-line-width self 1)
    (set-color self color)
    (draw-rectangle self rect)
    (stroke self))
  
  
  (method override (show-page self)
    (cairo_show_page context))))
