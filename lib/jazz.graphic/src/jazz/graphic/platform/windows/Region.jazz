;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Regions
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.graphic.platform.windows.Region jazz


(import (jazz.graphic)
        (jazz.geometry)
        (jazz.platform))


(class Region extends Rectangles-Region
  
  
  (slot handle getter generate)
  
  
  (method override (initialize (keep-rectangles?: keep-rectangles? (needs-rectangles?)) (handle: handle #f) (rect: rect #f))
    (nextmethod keep-rectangles?: keep-rectangles? rect: rect)
    (cond (handle
           (set! handle~self handle))
          (rect
           (set! handle~self (CreateRectRgn (get-left~ rect) (get-top~ rect) (get-right~ rect) (get-bottom~ rect))))
          (else
           (set! handle~self (CreateRectRgn 0 0 0 0))))
    (destroy-mandatory))
  
  
  (method override (needs-rectangles?)
    #f)

  
  (method override (destroy)
    (DeleteObject handle)
    (nextmethod))
  
  
  (method override (offset! h v)
    (OffsetRgn handle h v)
    (nextmethod h v))


  (method override (combine! region mode)
    (define (get-combine-mode mode)
      (case mode
        ((and)  RGN_AND)
        ((or)   RGN_OR)
        ((xor)  RGN_XOR)
        ((diff) RGN_DIFF)
        (else (error "Unknown combine mode: {t}" mode))))
    
    (CombineRgn handle handle (get-handle~ region) (get-combine-mode mode))
    (nextmethod region mode))
  
  
  (method override (empty?) <bool>
    (= (get-box) {Rect 0 0 0 0}))
  
  
  (method override (intersects-rect? rect) <bool>
    (with ((region (new Region rect: rect)))
      (combine!~ region self 'and)
      (not (empty?~ region))))


  (method override (get-box) <Rect>
    (let ((rect (RECT-make)))
      (GetRgnBox handle rect)
      (prog1 (RECT->rect rect)
        (RECT-free rect))))))
