;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Regions
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.graphic.platform.x11.Region jazz


(import (jazz.library))


(class Region extends Object
  
  
  (slot rectangles getter generate)
  (slot box)
    
    
  (method override (initialize (rect: rect {}) (left: left {}) (top: top {}) (right: right {}) (bottom: bottom {}))
    (nextmethod)
    (cond (rect
           (set! rectangles (list rect)))
          (left
           (set! rectangles (list (new Rect left top right bottom))))
          (else
           (set! rectangles (list (new Rect 0 0 0 0)))))
    (set! box (car rectangles))
    (destroy-mandatory))

  
  (method override (destroy)
    (nextmethod))
  
  
  (method public (offset! h v)
    (set! rectangles (map (lambda (rect)
                            (new Rect
                              (+ (get-left~ rect) h)
                              (+ (get-top~ rect) v)
                              (+ (get-right~ rect) h)
                              (+ (get-bottom~ rect) v)))
                          rectangles)))


  (method public (combine! region mode)
    (assert (eq? mode 'or))
    (set! rectangles (append rectangles (get-rectangles~ region)))
    (set! box (rect-union box (get-box~ region))))


  (method public (get-box)
    box)))
