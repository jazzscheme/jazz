;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Comparing Directories
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;    Alain Marcotte
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.groupware.compare.Compare-Directories jazz


(import (jazz.calendar)
        (jazz.event)
        (jazz.feedback)
        (jazz.groupware)
        (jazz.io)
        (jazz.markup)
        (jazz.resource)
        (jazz.time)
        (jazz.ui)
        (jazz.view)
        (jazz.workspace))


(class Compare-Directories extends Compare-Trees
  
  
  (slot scanned-date initialize #f)


  (form
    (<install>
      (<!>       name: trees        title: "Directories"
        (<!>     name: content
          (<!>   name: green-border
            (<!> name: green        protocol: dir))
          (<!>   name: blue-border
            (<!> name: blue         protocol: dir))))
      (<!>       name: left-value   title: "Left Date")
      (<!>       name: right-value  title: "Right Date")))
  
  
  (method meta override (external-name self . rest)
    'compare-directories)
  
  
  ;;;
  ;;;; Host
  ;;;

  
  (method meta override (host-icon self)
    {Image-Resource "CompareDirectories"})
  
  
  (method meta override (host-title self)
    "Compare Directories")
  
  
  (method meta override (host-position self)
    {Point 120 110})
  
  
  (method meta override (host-size self)
    {Dimension 795 500})
  
  
  (method override (host-workspaces self)
    '(groupware))

  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method (on-scan-date self evt)
    (when scanned-date
      (set-base-date self (date-universal->local (get-date scanned-date)))))

  
  ;;;
  ;;;; Compare
  ;;;
  
  
  (method override (new-comparer self)
    (new Directory-Comparer))
  
  
  (method override (get-merge-date self mode)
    #f
    @cant-find-get-time
    ; the date is used even in backup mode
    (let ((date (get-base-date self)))
      (and date
           (get-time date))))
  
  
  (method override (scan-feedback self left right)
    (user-feedback "Scanning {l detail: :human}..." (trim-left self left)))
  
  
  ;;;
  ;;;; Results
  ;;;
  
  
  (method override (present-root self left right)
    (cond ((not left)
           (present-item self right))
          ((not right)
           (present-item self left))
          (else
           (let ((l (present-item self left))
                 (r (present-item self right)))
             (if (string=? l r)
                 l
               (format "{a} / {a}" l r))))))
  
  
  (method override (present-item self item)
    (get-name item))
  
  
  (method override (present-value self kind date)
    (if (not date)
        ""
      (present-date (time-utc->date (date-universal->local date)))))
  
  
  (method override (backup-action self local-date left left-date right right-date)
    (if local-date
        (let ((base-date (date-local->universal local-date)))
          (if (> left-date base-date)
              'copy-right
            #f))
      'copy-right))
  
  
  (method override (merge-action self local-date left left-date right right-date)
    (and local-date
         (let ((base-date (date-local->universal local-date)))
           (cond ((and (not left) right)
                  (if (> right-date base-date)
                      'copy-left
                    'copy-right))
                 ((and left (not right))
                  (if (> left-date base-date)
                      'copy-right
                    'copy-left))
                 (else
                  (let ((l (compare left-date base-date))
                        (r (compare right-date base-date)))
                    (cond ((and (eq? l :greater) (eq? r :greater))
                           'merge)
                          ((and (eq? l :greater) (memq? r '(:less :equal)))
                           'copy-right)
                          ((and (memq? l '(:less :equal)) (eq? r :greater))
                           'copy-left)
                          @convert/wait
                          ((and (is? left Depot-Moniker) (eq? l :not-equal))
                           'copy-right)
                          (else
                           (debug-line (format "File {s} was modified before the base date on both sides!" (get-name left)))
                           'merge))))))))

  
  ;;;
  ;;;; Actions
  ;;;
  
  
  (method protected virtual (overwrite-read-only? self)
    #t)
  
  
  (method override (add-item self src dst)
    (cond ((and (is? src Directory) (is? dst Directory))
           (duplicate src dst copy?: (lambda (path) (add-path? self path))
            feedback: (lambda (dir) (user-message "Copying {l detail: :human}..." (get-list dir)))))
          (else
           (nextmethod self src dst))))
  
  
  (method protected virtual (add-path? self path)
    (let ((name (get-name path))
          (ignored (typecase path
                     ((Directory) ignored-nodes)
                     ((File) ignored-leaves)
                     (else '()))))
      (and (not (member? name ignored))
           (or (is-not? path File)
               (null? ignored-extensions)
               (not (member? (get-extension path) ignored-extensions))))))

  
  (method override (copy-item self src dst)
    (if (and (is? src File) (is? dst File))
        (duplicate src dst overwrite-read-only?: (overwrite-read-only? self))
      (error "Unable to copy {t} to {t}" src dst))
    (user-message "Done"))

  
  (method override (delete-item self item)
    (typecase item
      ((File)
       (delete item overwrite-read-only?: (overwrite-read-only? self)))
      ((Directory)
       (delete item overwrite-read-only?: (overwrite-read-only? self) feedback: (lambda (dir) (user-message "Deleting {l detail: :human}..." (get-list dir))))
       (user-message "Done"))
      (else
       (unimplemented 'delete-item))))
    
  
  ;;;
  ;;;; Compare
  ;;;
  
  
  (method override (on-compare self evt)
    (with-cursor :wait
      (lambda ()
        (set! scanned-date (compare-trees self)))))
  
  
  (method override (compare-leaves self left right user-data)
    (let ((ext (get-extension left)))
      (cond @wait-fully-debugged ((member? ext '("dbs" "jdi")) (compare-forms left right user-data))
            ((member? ext '("exe" "pdb")) (message-box (format "Unable to compare .{a} files" ext)))
            (else (compare-files self left right user-data)))))
  
  
  (method (compare-files self left right user-data)
    (with-cursor :wait
      (lambda ()
        (let* ((frame (new-frame Compare-Files host-visible?: #f))
               (comparer (get-guest frame))
               (has-differences? (compare-monikers self comparer left right user-data)))
          (if has-differences?
              (focus-host frame)
            (close frame)
            (message-box "No differences"))))))
  
  
  (method package virtual (compare-monikers self comparer left right user-data)
    (let ((ignore-whitespace? (eq? (get-check-algorithm self) 'whitespace)))
      (compare-monikers comparer left right ignore-whitespace?: ignore-whitespace? compare-directory: self compare-directory-cookie: user-data)))
  
  
  (definition (compare-forms left right user-data)
    (with-cursor :wait
      (lambda ()
        (let ((frame (new-frame Compare-Forms host-visible?: #f left-moniker: left right-moniker: right)))
          (compare-trees (get-guest frame))
          (focus-host frame)))))

  
  ;;;
  ;;;; Utilities
  ;;;
  
  
  (method override (make-item self item root father)
    (let ((list (append (get-list father) (list (get-name item)))))
      (typecase item
        ((File)
         (new File list)
         @convert/wait
          (if (is? root Depot-Moniker)
              (new Depot-Moniker (join list "/"))
            (new File list)))
        ((Directory)
         (new Directory list)
         @convert/wait
          (if (is? root Depot-Moniker)
              (new Depot-Moniker (join list "/"))
            (new Directory list)))
        (else
          (error "Unable to make item from {t}" item)
          @convert/wait
          (if (is? item Depot-Moniker)
              (if (is? root Depot-Moniker)
                  (new Depot-Moniker (join list "/"))
                (if (get-project? item)
                    (new Directory list)
                  (new File list)))
            (error "Unable to make item from {t}" item))))))
  
  
  (method override (tree-base self tree)
    (length (get-list tree)))
  
  
  (method override (trim-left self item)
    (tail (get-list item) left-base))
  
  
  (method override (trim-right self item)
    (tail (get-list item) right-base))
  

  ;;;
  ;;;; Compare-Directories-Menu
  ;;;
  
  
  (method override (get-compare-menu self)
    (new Compare-Directories-Menu)))


(class Compare-Directories-Menu extends Compare-Menu
  
  
  @wait
  (form
    (<install>
      (<Label-Item> name: scanned-date title: "Use Scanned Date" before: reset-actions action-handler: {Event-Handler :document on-scan-date})))))
