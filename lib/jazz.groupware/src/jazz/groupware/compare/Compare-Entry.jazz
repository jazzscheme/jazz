;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Tree-Comparer Entry
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2012
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.groupware.compare.Compare-Entry jazz


(class Compare-Entry extends Object
  
  
  (slot protected parent      getter generate)
  (slot protected kind        getter generate)
  (slot protected left        accessors generate)
  (slot protected left-value  accessors generate)
  (slot protected right       accessors generate)
  (slot protected right-value accessors generate)
  (slot protected action      accessors generate)
  (slot protected children    accessors generate)
  
  
  (method override (initialize parent kind left left-value right right-value)
    (nextmethod)
    (set! parent~self parent)
    (set! kind~self kind)
    (set! left~self left)
    (set! left-value~self left-value)
    (set! right~self right)
    (set! right-value~self right-value)
    (set! action~self #f)
    (set! children~self '()))
  
  
  (method override (print output readably)
    (print-unreadable self output
      (lambda (output)
        (format output "{s} {s} {s}" left right action))))))
