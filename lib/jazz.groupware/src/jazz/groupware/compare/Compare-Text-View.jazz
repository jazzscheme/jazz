;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Compare Files Text View
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library protected jazz.groupware.compare.Compare-Text-View jazz


(import (jazz.graphic)
        (jazz.groupware)
        (jazz.ide)
        (jazz.jml)
        (jazz.library)
        (jazz.platform)
        (jazz.system)
        (jazz.ui)
        (jazz.utilities))


(class Compare-Text-View extends IDE-Text-View
    

  (form
    (<install> default-style: {Text-Style name: Default font: {Font name: Code}}))
    

  ;;;
  ;;;; Actions
  ;;;
  

  (method override (focus-actions)
    (cons (find-actions 'compare-text)
          (nextmethod)))

    
  ;;;
  ;;;; Events
  ;;;
  

  (method override (context-menu pos)
    (receive (shift? control? alt?) (modifiers-down)
      (let ((move-caret
             (cond ((and (not control?) (not shift?) (not alt?)) 'outside-selection)
                   ((and (not control?) shift? (not alt?)) 'never)
                   ((and control? shift? (not alt?)) 'never)
                   (else 'always))))
        (context-menu-click pos move-caret: move-caret))
      (track-popup-menu (get-context-menu) pos)))
  
  
  (method override (edition-workspace)
    'groupware)
    
    
  ;;;
  ;;;; Coloring
  ;;;

  
  (method override (colorize-syntax . rest)
    )
  
  
  (method override (recolorize-text start end-row)
    )
    
    
  ;;;
  ;;;; Navigation
  ;;;
  
  
  (method override (mouse-down pos)
    (nextmethod pos)
    (user-message "Color: {s}" (line-color (get-row~ (get-start)))))
  
  
  (method (line-color row)
    (when (and (>= row 0) (<= row (get-limit)))
      (let* ((paragraph (get-paragraph row))
             (runs (get-runs~ paragraph)))
        (when (= 1 (length runs))
          (let* ((frame (get-frame))
                 (guest (get-guest~ frame))
                 (run (first runs))
                 (style (get-style~ run)))
            (when (is? style Text-Style)
              (let ((color (get-color~ style)))
                (cond ((eq? color Green-Color) 'green)
                      ((eq? color Blue-Color) 'blue)
                      (else {})))))))))
  
  
  (method (get-run row)
    (let ((color (line-color row)))
      (when color
        (let* ((start row)
               (end row)
               (limit (get-limit))
               (frame (get-frame))
               (guest (get-guest~ frame)))
          (while (eq? (line-color (- start 1)) color)
            (decrease! start))
          (while (eq? (line-color (+ end 1)) color)
            (increase! end))
          (new Compare-Run color start end)))))
  
  
  (method (get-diff row)
    (let* ((frame (get-frame))
           (guest (get-guest~ frame))
           (run (get-run row)))
      (when run
        (case (get-color~ run)
          ((green) (new Compare-Diff run (get-run (+ (get-end~ run) 1))))
          ((blue)  (new Compare-Diff (get-run (- (get-start~ run) 1)) run))))))
  
  
  (method protected (select-diff diff default-selection)
    (let ((new-selection (essay diff
                                (new Range$Cell$ (new Cell (get-start~ diff) 0)
                                           (next-line-or-end-of-text (get-end~ diff))))))
      (if new-selection
          (set-selection new-selection)
        (set-selection default-selection)
        (bell))))
  
  
  (method protected (goto-next-diff)
    (let ((old-selection selection))
      (set-caret (move-forward (get-end) #f))
      (select-diff (if (nu=? old-selection selection) {} (next-diff (get-row~ (get-end)))) old-selection)))
  
  
  (method protected (goto-previous-diff)
    (let ((old-selection selection))
      (set-caret (move-backward (get-start) #f))
      (select-diff (if (nu=? old-selection selection) {} (previous-diff (get-row~ (get-start)))) old-selection)))
  
  
  (method protected (goto-first-diff)
    (select-diff (next-diff (get-row~ (text-beginning))) selection))
  
  
  (method protected (goto-last-diff)
    (select-diff (previous-diff (get-row~ (text-ending))) selection))
  
  
  (method (next-diff row)
    (let ((diff (get-diff row))
          (len (get-length)))
      (while (and (< row len) (not (line-color row)))
        (increase! row))
      (get-diff row)))
  
  
  (method (previous-diff row)
    (let ((diff (get-diff row)))
      (while (and (>= row 0) (not (line-color row)))
        (decrease! row))
      (get-diff row)))
  
  
  (method protected (previous-end-of-line row)
    (if (= row 0)
        (new Cell 0 0)
      (new Cell (- row 1) (paragraph-length (- row 1)))))
  
  
  (method protected (next-line-or-end-of-text row)
    (if (= row (get-limit))
        (new Cell row (paragraph-length row))
      (new Cell (+ row 1) 0)))
  
  
  (method protected (keep-green)
    (let* ((pos (get-start))
           (diff (get-diff (get-row~ pos))))
      (if (not diff)
          (bell)
        (when (get-blue~ diff)
          (replace-text (get-range~ (get-blue~ diff) self) '("")))
        (when (get-green~ diff)
          (for-each (lambda (n)
                      (uncolorize-row n))
                    (naturals (get-start~ (get-green~ diff)) (+ (get-end~ (get-green~ diff)) 1))))
        (if (not (get-green~ diff))
            (set-caret (previous-end-of-line (get-row~ pos)))
          (let ((range (get-range~ (get-green~ diff) self)))
            (set-selection (new Range$Cell$ (get-start~ range) (previous-end-of-line (get-row~ (get-end~ range))))))))))
  
  
  (method protected (keep-blue)
    (let* ((pos (get-start))
           (diff (get-diff (get-row~ pos))))
      (if (not diff)
          (bell)
        (when (get-blue~ diff)
          (for-each (lambda (n)
                      (uncolorize-row n))
                    (naturals (get-start~ (get-blue~ diff)) (+ (get-end~ (get-blue~ diff)) 1))))
        (when (get-green~ diff)
          (replace-text (get-range~ (get-green~ diff) self) '("")))
        (if (not (get-blue~ diff))
            (set-caret pos)
          (let ((range (get-range~ (get-blue~ diff) self))
                (row-count (if (not (get-green~ diff)) 0 (get-height~ (get-green~ diff) self))))
            (set-selection (new Range$Cell$ (new Cell (- (get-row~ (get-start~ range)) row-count) 0)
                                      (previous-end-of-line (- (get-row~ (get-end~ range)) row-count)))))))))
  
  
  (method protected (keep-both)
    (let* ((pos (get-start))
           (diff (get-diff (get-row~ pos))))
      (if (not diff)
          (bell)
        (for-each (lambda (n)
                    (uncolorize-row n))
                  (naturals (get-start~ diff) (+ (get-end~ diff) 1))))))
  
  
  (method override (get-context-menu)
    (new Compare-Text-Menu)))


;;;
;;;; Menu
;;;


(class Compare-Text-Menu extends Context-Menu
  
  
  (form
    (<install>
      (<Label-Item>     name: open-green    title: "Open Green" action: {Action compare-text open-green})
      (<Label-Item>     name: open-blue     title: "Open Blue" action: {Action compare-text open-blue})
      (<Separator-Item>)
      (<Label-Item>     name: save          title: "Save" icon: {Bitmap-Resource "Save"} action: {Action compare-text save})
      (<Label-Item>     name: save-as       title: "Save As..." action: {Action compare-text save-as})
      (<Separator-Item>)
      (<Label-Item>     name: save-to-green title: "Save To Green" action: {Action compare-text save-to-green})
      (<Label-Item>     name: save-to-blue  title: "Save To Blue" action: {Action compare-text save-to-blue})
      (<Label-Item>     name: save-to-both  title: "Save To Both" action: {Action compare-text save-to-both})
      (<Separator-Item>)
      (<Label-Item>     name: edit-definitions title: "Find Definitions" icon: {Bitmap-Resource "Edit"} action: {Action code-text edit-definitions})
      (<Label-Item>     name: edit-references  title: "Find References" action: {Action code-text edit-references})))))
