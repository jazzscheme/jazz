;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Compare Files Text View
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.groupware.compare.Compare-Text-View jazz


(import (jazz.action)
        (jazz.event)
        (jazz.feedback)
        (jazz.graphic)
        (jazz.groupware)
        (jazz.ide)
        (jazz.markup)
        (jazz.menu)
        (jazz.preferences)
        (jazz.resource)
        (jazz.text))


(class Compare-Text-View extends IDE-Text-View
  
  
  (method override (preferences self)
    (current-preferences '(documents compare-text)))
  
  
  (method override (new-model self)
    (new Text-Model base-style: {Text-Style Code-Base}))
  
  
  (method override (new-syntax self)
    (new Compare-Syntax model))
    

  ;;;
  ;;;; Actions
  ;;;
  

  (method override (focus-actions self)
    (cons (find-actions 'compare-text)
          (nextmethod self)))

    
  ;;;
  ;;;; Events
  ;;;
  

  (method override (context-menu self evt)
    (let ((pos (get-position evt)))
      (receive (shift? control? alt? meta?) (get-down evt)
        (let ((move-caret
                (cond ((and (not control?) (not shift?) (not alt?)) 'outside-selection)
                      ((and (not control?) shift? (not alt?)) 'never)
                      ((and control? shift? (not alt?)) 'never)
                      (else 'always))))
          (context-menu-click self pos move-caret: move-caret))
        (track-popup-menu self (get-context-menu self) pos))))
  
  
  (method override (edition-workspace self)
    'groupware)
  
  
  ;;;
  ;;;; Compare
  ;;;
  
  
  (method public (compare-monikers self compare green-moniker blue-moniker)
    (define (colorize-output output)
      (let* ((model (get-model self))
             (formats (list (locate-format model 'Base)))
             (font {Font Code})
             (plain (intern-style model (new Text-Style base: 'Base font: font)))
             (green (intern-style model (new Text-Style base: 'Base font: font color: Green-Color)))
             (blue (intern-style model (new Text-Style base: 'Base font: font color: Blue-Color)))
             (styles (list plain green blue))
             (has-differences? #f)
             (paragraphs (map (lambda (info)
                                (bind (rank1 rank2 line color) info
                                  (let ((style (case color ((green) 1) ((blue) 2) (else 0))))
                                    (when (/= style 0)
                                      (set! has-differences? #t))
                                    (list 0 (list (get-string line) style)))))
                              output)))
        (set-formatted-content model (new Formatted-Text formats: formats styles: styles paragraphs: paragraphs))
        has-differences?))
    
    (clear-all self)
    (let* ((output (compare-monikers compare green-moniker blue-moniker))
           (has-differences? (colorize-output output)))
      (layout-scrollee self)
      (when has-differences?
        (goto-first-diff self))
      has-differences?))
    
    
  ;;;
  ;;;; Navigation
  ;;;
  
  
  (method override (mouse-down self evt)
    (nextmethod self evt)
    (user-message "Color: {s}" (line-color self (get-line (get-start self)))))
  
  
  (method (line-color self row)
    (and (and (>= row 0) (<= row (get-limit self)))
         (let* ((paragraph (get-paragraph self row))
                (runs (get-runs paragraph)))
           (and (= 1 (length runs))
                (let* ((frame (get-frame self))
                       (guest (get-guest frame))
                       (run (first runs))
                       (style (get-style run)))
                  (and (is? style Text-Style)
                       (let ((color (get-color style)))
                         (cond ((eq? color Green-Color) 'green)
                               ((eq? color Blue-Color) 'blue)
                               (else #f)))))))))
  
  
  (method package (get-run self row)
    (let ((color (line-color self row)))
      (and color
           (let* ((start row)
                  (end row)
                  (limit (get-limit self))
                  (frame (get-frame self))
                  (guest (get-guest frame)))
             (while (eq? (line-color self (- start 1)) color)
               (decrease! start))
             (while (eq? (line-color self (+ end 1)) color)
               (increase! end))
             (new Compare-Run color start end)))))
  
  
  (method (get-diff self row)
    (let* ((frame (get-frame self))
           (guest (get-guest frame))
           (run (get-run self row)))
      (and run
           (case (get-color run)
             ((green) (new Compare-Diff run (get-run self (+ (get-end run) 1))))
             ((blue)  (new Compare-Diff (get-run self (- (get-start run) 1)) run))))))
  
  
  (method protected (select-diff self diff default-selection)
    (let ((new-selection (and diff
                              (new Range$Cell$ (new Cell (get-start diff) 0)
                                   (next-line-or-end-of-text self (get-end diff))))))
      (if new-selection
          (set-selection self new-selection)
        (set-selection self default-selection)
        (bell))))
  
  
  (method package (goto-next-diff self)
    (let ((old-selection (get-selection self)))
      (set-caret self (move-forward self (get-end self) #f))
      (select-diff self (if (nu=? old-selection (get-selection self)) #f (next-diff self (get-line (get-end self)))) old-selection)))
  
  
  (method package (goto-previous-diff self)
    (let ((old-selection (get-selection self)))
      (set-caret self (move-backward self (get-start self) #f))
      (select-diff self (if (nu=? old-selection (get-selection self)) #f (previous-diff self (get-line (get-start self)))) old-selection)))
  
  
  (method protected (goto-first-diff self)
    (select-diff self (next-diff self (get-line (text-beginning self))) (get-selection self)))
  
  
  (method protected (goto-last-diff self)
    (select-diff self (previous-diff self (get-line (text-ending self))) (get-selection self)))
  
  
  (method (next-diff self row)
    (let ((diff (get-diff self row))
          (len (get-length self)))
      (while (and (< row len) (not (line-color self row)))
        (increase! row))
      (get-diff self row)))
  
  
  (method (previous-diff self row)
    (let ((diff (get-diff self row)))
      (while (and (>= row 0) (not (line-color self row)))
        (decrease! row))
      (get-diff self row)))
  
  
  (method protected (previous-end-of-line self line)
    (if (= line 0)
        (new Cell 0 0)
      (new Cell (- line 1) (paragraph-length self (- line 1)))))
  
  
  (method protected (next-line-or-end-of-text self line)
    (if (= line (get-limit self))
        (new Cell line (paragraph-length self line))
      (new Cell (+ line 1) 0)))
  
  
  (method package (keep-green self)
    (let* ((pos (get-start self))
           (diff (get-diff self (get-line pos))))
      (if (not diff)
          (bell)
        (when (get-green diff)
          (for-each (lambda (n)
                      (uncolorize-row syntax n))
                    (naturals (get-start (get-green diff)) (+ (get-end (get-green diff)) 1))))
        (when (get-blue diff)
          (replace-text self (get-range (get-blue diff) self) '(""))))))
  
  
  (method package (keep-blue self)
    (let* ((pos (get-start self))
           (diff (get-diff self (get-line pos))))
      (if (not diff)
          (bell)
        (when (get-blue diff)
          (for-each (lambda (n)
                      (uncolorize-row syntax n))
                    (naturals (get-start (get-blue diff)) (+ (get-end (get-blue diff)) 1))))
        (when (get-green diff)
          (replace-text self (get-range (get-green diff) self) '(""))))))
  
  
  (method package (keep-both self)
    (let* ((pos (get-start self))
           (diff (get-diff self (get-line pos))))
      (if (not diff)
          (bell)
        (for-each (lambda (n)
                    (uncolorize-row syntax n))
                  (naturals (get-start diff) (+ (get-end diff) 1))))))
  
  
  (method override (get-context-menu self)
    (new Compare-Text-Menu)))


;;;
;;;; Menu
;;;


(class Compare-Text-Menu extends Context-Menu
  
  
  (form
    (<install>
      (<Label-Item>     name: open-green       title: "Open Green" action-handler: {Action compare-text open-green})
      (<Label-Item>     name: open-blue        title: "Open Blue" action-handler: {Action compare-text open-blue})
      (<Separator-Item>)
      (<Label-Item>     name: save-compare     title: "Save" icon: {Image-Resource "Save"} action-handler: {Action compare-text save-compare})
      (<Label-Item>     name: save-compare-as  title: "Save As..." action-handler: {Action compare-text save-compare-as})
      (<Separator-Item>)
      (<Label-Item>     name: save-to-green    title: "Save To Green" action-handler: {Action compare-text save-to-green})
      (<Label-Item>     name: save-to-blue     title: "Save To Blue" action-handler: {Action compare-text save-to-blue})
      (<Label-Item>     name: save-to-both     title: "Save To Both" action-handler: {Action compare-text save-to-both})
      (<Separator-Item>)
      (<Label-Item>     name: edit-definitions title: "Find Definitions" icon: {Image-Resource "Edit"} action-handler: {Action code-text edit-definitions})
      (<Label-Item>     name: edit-references  title: "Find References" action-handler: {Action code-text edit-references})))))
