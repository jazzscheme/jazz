;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Comparing Trees
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;    Alain Marcotte
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.groupware.compare.Compare-Trees jazz


(import (jazz.action)
        (jazz.application)
        (jazz.descriptor)
        (jazz.event)
        (jazz.feedback)
        (jazz.graphic)
        (jazz.groupware)
        (jazz.handler)
        (jazz.io)
        (jazz.markup)
        (jazz.menu)
        (jazz.outline)
        (jazz.preferences)
        (jazz.resource)
        (jazz.text)
        (jazz.tree)
        (jazz.ui)
        (jazz.ui.dialog)
        (jazz.view))


(class Compare-Trees extends Layout-View
  
  
  (property mode                                         accessors explicit)
  (property base-date                                    accessors explicit)
  (property left-moniker       initialize :uninitialized accessors explicit)
  (property right-moniker      initialize :uninitialized accessors explicit)
  (property left-content       initialize #t             accessors generate)
  (property right-content      initialize #t             accessors generate)
  (property ignored-nodes      initialize '()            accessors generate)
  (property ignored-leaves     initialize '()            accessors generate)
  (property ignored-extensions initialize '()            accessors generate)
  (property check-algorithm    initialize #f             accessors explicit)
  
  
  (slot left-root)
  (slot left-base)
  (slot right-root)
  (slot right-base)
  (slot root-entry)
  (slot installed-configuration initialize #f)


  (form
    (<install>                                               size: {Dimension 895 455}
      (<Group-Box>                     name: mode            title: "Mode" position: {Point 5 5} size: {Dimension 210 76} flat?: #t border-color: {Color Group-Border}
        (<content~>
          (<Radio-Button>              name: backup          title: "Backup" position: {Point 13 15} size: {Dimension 60 16})
          (<Radio-Button>              name: merge           title: "Merge" position: {Point 13 35} size: {Dimension 60 16} selected?: #t)
          (<Border-View>                                     position: {Point 81 32} size: {Dimension 111 19} border-type: edge style: entry
            (<Scroller-View>                                 hscroll?: #f vscroll?: #f
              (<!>                     name: content         layout-type: fill
                (<Text-View>           name: base-date       font: {Font Label} accepts-returns?: #f left-padding: 2 top-padding: 2 return-press-handler: {Event-Handler :form on-return-press}))))))
      (<Group-Box>                     name: trees           title: "Trees" position: {Point 222 5} size: {Dimension 375 76} flat?: #t border-color: {Color Group-Border}
        (<content~>
          (<Label-View>                name: green-label     title: "Green:" position: {Point 6 9} size: {Dimension 37 16} font: {Font Label})
          (<Border-View>               name: green-border    position: {Point 46 7} size: {Dimension 320 19} border-type: edge style: entry
            (<Moniker-Widget>          name: green           return-press-handler: {Event-Handler :form on-return-press}))
          (<Label-View>                name: blue-label      title: "Blue:" position: {Point 6 34} size: {Dimension 32 16} font: {Font Label})
          (<Border-View>               name: blue-border     position: {Point 46 32} size: {Dimension 320 19} border-type: edge style: entry
            (<Moniker-Widget>          name: blue            return-press-handler: {Event-Handler :form on-return-press}))))
      (<Group-Box>                     name: check-algorithm title: "Check" position: {Point 603 4} size: {Dimension 111 78} flat?: #t border-color: {Color Group-Border}
        (<content~>
          (<Radio-Button>              name: timestamp       title: "Timestamp" position: {Point 13 5} size: {Dimension 82 16} selected?: #t)
          (<Radio-Button>              name: content         title: "Content" position: {Point 13 25} size: {Dimension 82 16})
          (<Radio-Button>              name: whitespace      title: "Whitespace" position: {Point 13 45} size: {Dimension 82 16})))
      (<Push-Button>                   name: compare         title: "Compare" position: {Point 810 7} size: {Dimension 80 24} action-handler: {Event-Handler :form on-compare} default?: #t)
      (<Push-Tool>                     name: copy-right      position: {Point 723 57} size: {Dimension 22 22} tooltip?: #t tooltip-text: "Mark Left -> Right" resource: {Image-Resource "CopyRight"} portfolio: :images action-handler: {Event-Handler :form on-copy-right})
      (<Push-Tool>                     name: merge-leaves    position: {Point 745 57} size: {Dimension 22 22} tooltip?: #t tooltip-text: "Merge Files" resource: {Image-Resource "Merge"} portfolio: :images action-handler: {Event-Handler :form on-merge-leaves})
      (<Push-Tool>                     name: copy-left       position: {Point 767 57} size: {Dimension 22 22} tooltip?: #t tooltip-text: "Mark Left <- Right" resource: {Image-Resource "CopyLeft"} portfolio: :images action-handler: {Event-Handler :form on-copy-left})
      (<Push-Tool>                     name: no-action       position: {Point 789 57} size: {Dimension 22 22} tooltip?: #t tooltip-text: "No Action" resource: {Image-Resource "Empty"} portfolio: :images action-handler: {Event-Handler :form on-no-action})
      (<Push-Tool>                     name: transfer        position: {Point 869 57} size: {Dimension 22 22} tooltip?: #t tooltip-text: "Transfer" resource: {Image-Resource "Execute"} portfolio: :images action-handler: {Event-Handler :form on-transfer})
      (<Border-View>                   name: results-border  position: {Point 2 90} size: {Dimension 891 363} border-type: edge style: outline
        (<Scroller-View>                                     style: document vscroll?: #t
          (<!>                         name: content         layout-type: fill
            (<Tree-Header>                                   style: document
              (<!>                     name: content
                (<Tree-View>           name: results         filled-column: name multiple-selection?: #t double-click-handler: {Event-Handler :form on-double-click} return-press-handler: {Event-Handler :form on-return-press} context-menu-handler: {Event-Handler :form on-context-menu} selection-mode: row portfolio: :images
                  (<Tree-Node-Column>  name: name            title: "Name" width: 235)
                  (<Tree-Label-Column> name: left-value      title: "Left Value" width: 200)
                  (<Tree-Label-Column> name: right-value     title: "Right Value" width: 200)
                  (<Left-Column>                             title: "Left" width: 80 justification: center)
                  (<Action-Column>                           title: "Action" width: 75 justification: center)
                  (<Right-Column>                            title: "Right" width: 80 justification: center)))))))))

  
  ;;;
  ;;;; Constants
  ;;;
  
  
  (constant $Left-Value-Column  1)
  (constant $Right-Value-Column 2)
  (constant $Left-Column        3)
  (constant $Action-Column      4)
  (constant $Right-Column       5)
  
  
  ;;;
  ;;;; Initialization
  ;;;
  
  
  (method override (install self rest)
    (nextmethod self rest)
    (load-session))
  
  
  ;;;
  ;;;; Host
  ;;;
  
  
  (method override (host-workspaces self)
    '(groupware))
  
  
  (method override (focus-default self)
    (acquire-focus (locate self 'results)))
  
  
  ;;;
  ;;;; Actions
  ;;;
  

  (method override (guest-actions self)
    (cons (find-actions 'compare-trees)
          (nextmethod self)))

  
  ;;;
  ;;;; Events
  ;;;


  (method override (resize self dh dv)
    (nextmethod self dh dv)
    (size-figure (locate self 'trees) dh 0)
    (move-figure (locate self 'check-algorithm) dh 0)
    (size-figure (locate self 'green-border) dh 0)
    (size-figure (locate self 'blue-border) dh 0)
    (move-figure (locate self 'compare) dh 0)
    (move-figure (locate self 'copy-right) dh 0)
    (move-figure (locate self 'merge-leaves) dh 0)
    (move-figure (locate self 'copy-left) dh 0)
    (move-figure (locate self 'no-action) dh 0)
    @wait
    (move-figure (locate 'build-updater) dh 0)
    (move-figure (locate self 'transfer) dh 0)
    (size-figure (locate self 'results-border) dh dv)
    (invalidate-header (locate self 'results)))
  
  
  (method (on-copy-right self evt)
    (copy-right self)
    (when (get-property evt next?:)
      (unless (goto-next-comparable self)
        (bell))))
  
  
  (method package (copy-right self)
    (let ((tree (locate self 'results)))
      (with-update-locked tree
        (lambda ()
          (for-each (lambda (n)
                      (let ((entry (get-user-data (get-row tree n))))
                        (unless (and (eq? (get-kind entry) 'node) (get-left entry) (get-right entry))
                          (set-action entry 'copy-right)
                          (let ((cell (new Cell n $Action-Column)))
                            (invalidate-cell tree cell)))))
                    (get-selection tree))))))
  
  
  (method (on-copy-left self evt)
    (copy-left self)
    (when (get-property evt next?:)
      (unless (goto-next-comparable self)
        (bell))))
  
  
  (method package (copy-left self)
    (let ((tree (locate self 'results)))
      (with-update-locked tree
        (lambda ()
          (for-each (lambda (n)
                      (let ((entry (get-user-data (get-row tree n))))
                        (unless (and (eq? (get-kind entry) 'node) (get-left entry) (get-right entry))
                          (let ((cell (new Cell n $Action-Column)))
                            (set-action entry 'copy-left)
                            (invalidate-cell tree cell)))))
                    (get-selection tree))))))
  
  
  (method (on-merge-leaves self evt)
    (merge-leaves self))
  
  
  (method package (merge-leaves self)
    (let* ((tree (locate self 'results))
           (selection (get-selection tree)))
      (when (not-null? selection)
        (if (> (length selection) 1)
            (bell)
          (let ((entry (get-user-data (get-row tree (car selection)))))
            (when (and (eq? (get-kind entry) 'leaf) (get-left entry) (get-right entry))
              (compare-leaves self (get-left entry) (get-right entry) entry)))))))
  
  
  (method (on-no-action self evt)
    (let ((tree (locate self 'results)))
      (with-update-locked tree
        (lambda ()
          (for-each (lambda (n)
                      (let ((entry (get-user-data (get-row tree n))))
                        (unless (and (eq? (get-kind entry) 'node) (get-left entry) (get-right entry))
                          (set-action entry #f)
                          (let ((cell (new Cell n $Action-Column)))
                            (invalidate-cell tree cell)))))
                    (get-selection tree))))))
  
  
  (method (on-compare-next self evt)
    (compare-next self))
  
  
  (method (on-compare-previous self evt)
    (compare-previous self))
  
  
  (method package (compare-next self)
    (if (not (goto-next-comparable self))
        (bell)
      (merge-leaves self)))
  
  
  (method package (compare-previous self)
    (if (not (goto-previous-comparable self))
        (bell)
      (merge-leaves self)))
  
  
  @old-code
  (method (on-build-updater evt)
    (let ((file (choose-updater)))
      (build-updater file)
      (updater-built file)))
  
  
  (method protected virtual (choose-updater self)
    (choose-new-file))
  
  
  (method (on-transfer self evt)
    (transfer self evt))
  
  
  (method protected virtual (transfer self evt)
    (let* ((tree (locate self 'results))
           (count (get-visible-count tree))
           (n 0))
      (with-update-locked tree
        (lambda ()
          (while (< n count)
            (let* ((row (get-row tree n))
                   (entry (get-user-data row))
                   (entry-father (get-user-data (get-father row)))
                   (left (get-left entry))
                   (right (get-right entry))
                   (action (get-action entry)))
              (when (memq? action '(copy-right copy-left))
                (case action
                  ((copy-right)
                   (if right
                       (if left
                           (copy-item self left right)
                         (delete-item self right))
                     (let ((new-right (make-item self left right-root (get-right entry-father))))
                       (set-right entry new-right)
                       (add-item self left new-right))))
                  ((copy-left)
                   (if left
                       (if right
                           (copy-item self right left)
                         (delete-item self left))
                     (let ((new-left (make-item self right left-root (get-left entry-father))))
                       (set-left entry new-left)
                       (add-item self right new-left)))))
                ;; When copying nodes, treatment is a bit different because they stay showed...
                (if (and (eq? (get-kind entry) 'node)
                         (or (and (eq? action 'copy-right) left (not right))
                             (and (eq? action 'copy-left) right (not left))))
                    (begin
                      (case action
                        ((copy-right)
                         (let ((cell (new Cell n $Left-Column)))
                           (invalidate-cell tree cell)))
                        ((copy-left)
                         (let ((cell (new Cell n $Right-Column)))
                           (invalidate-cell tree cell))))
                      (set-action entry #f)
                      (let ((cell (new Cell n $Action-Column)))
                        (invalidate-cell tree cell)))
                  (remove-row tree row)
                  (decrease! count)
                  (decrease! n))))
            (increase! n))))))
  
  
  (method (on-double-click self evt)
    (let ((sender (get-sender evt)))
      (case (get-name sender)
        ((results)
          (on-merge-leaves self evt)))))
  
  
  (method override (on-return-press self evt)
    (let ((sender (get-sender evt)))
      (case (get-name sender)
        ((results)
          (on-merge-leaves self evt))
        (else
          (on-compare self evt)))))
  
  
  (method protected virtual (on-compare self evt)
    (with-cursor :wait
      (lambda ()
        (compare-trees self))))
    
  
  (method (on-context-menu self evt)
    (let* ((sender (get-sender evt))
           (pos (get-position evt))
           (acquired (acquire self sender pos)))
      (with-context-click sender pos
        (lambda ()
          (track-popup-menu self (get-compare-menu self) acquired)))))
  
  
  (method (on-next-comparable self evt)
    (unless (goto-next-comparable self)
      (bell)))
  
  
  (method (on-previous-comparable self evt)
    (unless (goto-previous-comparable self)
      (bell)))
  
  
  (method (on-next-uncomparable self evt)
    (unless (goto-next-uncomparable self)
      (bell)))
  
  
  (method (on-previous-uncomparable self evt)
    (unless (goto-previous-uncomparable self)
      (bell)))
  

  ;;;
  ;;;; Tab
  ;;;
  
  
  (method override (get-tab-stops self)
    (list
      (locate self 'base-date)
      (locate (locate self 'green) 'body)
      (locate (locate self 'blue) 'body)))
  

  ;;;
  ;;;; Session
  ;;;
  
  
  (definition (load-session)
    (let ((pref (current-preferences '(tools compare-directories))))
      (set! Base-Dates (get-base-dates pref))))
  
  
  (method override (save-guest self designer session)
    (add-guest-preferences self designer session
      mode:          (get-mode self)
      base-date:     (get-base-date self)
      left-moniker:  (get-left-moniker self)
      right-moniker: (get-right-moniker self)
      base-dates:    Base-Dates))
  

  ;;;
  ;;;; Configure
  ;;;
  
  
  (definition Base-Dates
    '())
  
  
  (method package (on-configure self evt)
    (install-configuration self (get-property evt configuration:)))
  
  
  (method package (on-register-base-date self evt)
    (unimplemented)
    @convert-date
    (if (not installed-configuration)
        (error "You need an installed configuration to register a base date")
      (bind (name mode) installed-configuration
        (if (/= mode 'merge)
            (error "Base dates can only be registered in merge mode")
          (let ((date (present (universal-date)))
                (pair (assq name Base-Dates)))
            (if (not pair)
                (set! Base-Dates (cons (cons name date) Base-Dates))
              (set-cdr! pair date))
            (set-base-date date))))))
  
  
  (method package (on-reset-actions self evt)
    (reset-actions self))
  
  
  (method public (configure self name)
    (install-configuration self (child (current-preferences '(tools compare-directories)) name)))
  
  
  (method public (install-configuration self config)
    (define (find-base-date name)
      (assq-value name Base-Dates #f))
    
    (define (install-monikers)
      (let ((left (get-left config))
            (right (get-right config)))
        (set-protocol (locate self 'green) (determine-protocol left))
        (set-left-moniker self left)
        (set-protocol (locate self 'blue) (determine-protocol right))
        (set-right-moniker self right)))
    
    (define (determine-protocol moniker)
      (cond ((is? moniker Directory-Group)
             'group)
            ((is? moniker Manifest)
             'manifest)
            (else
             'dir)))
    
    (set! installed-configuration config)
    (set-mode self (get-mode config))
    (set-base-date self (and (eq? (get-mode config) 'merge) (find-base-date (get-name config))))
    (install-monikers)
    (set-ignored-nodes self (get-ignored-nodes config))
    (set-ignored-leaves self (get-ignored-leaves config))
    (set-ignored-extensions self (get-ignored-extensions config))
    (set-check-algorithm self (get-check-algorithm config))
    (remove-every-row (locate self 'results)))
  
  
  (method (on-open-green self evt)
    (let* ((tree (locate self 'results))
           (selection (get-single-selection tree)))
      (when selection
        (let ((entry (get-user-data (get-row tree selection))))
          (if (or (eq? (get-kind entry) 'node) (not (get-left entry)))
              (bell)
            (let ((appl (get-application)))
              (edit-document appl (get-left entry) workspace: 'groupware)))))))
  
  
  (method (on-open-blue self evt)
    (let* ((tree (locate self 'results))
           (selection (get-single-selection tree)))
      (when selection
        (let ((entry (get-user-data (get-row tree selection))))
          (if (or (eq? (get-kind entry) 'node) (not (get-right entry)))
              (bell)
            (let ((appl (get-application)))
              (edit-document appl (get-right entry) workspace: 'groupware)))))))
  
  
  ;;;
  ;;;; Interface
  ;;;
  
  
  (method package (get-mode self)
    (get-selected-element (get-content (locate self 'mode))))
  
  
  (method package (set-mode self mode)
    (set-selected-element (get-content (locate self 'mode)) mode))
  
  
  (method package (get-check-algorithm self)
    (get-selected-element (get-content (locate self 'check-algorithm))))
  
  
  (method (set-check-algorithm self algorithm)
    (set-selected-element (get-content (locate self 'check-algorithm)) (or algorithm 'timestamp)))
  
  
  (method (get-base-date self)
    #f
    @convert-date
    (let ((text (get-string-content (locate 'base-date))))
      (if (empty-string? text)
          #f
        (parse-string Date text))))
  
  
  (method (set-base-date self date)
    @convert-date
    (let ((text (cond ((not date) "") ((is? date Date) (present date)) (else date))))
      (set-string-content (locate 'base-date) text)))
  
  
  (method protected virtual (get-left-moniker self)
    (let ((browser (locate self 'green)))
      (if (not (get-editable? browser))
          left-moniker
        (set! left-moniker (get-moniker browser))
        left-moniker)))
  
  
  (method protected virtual (set-left-moniker self moniker)
    (set! left-moniker moniker)
    (set-moniker (locate self 'green) moniker))
  
  
  (method protected virtual (get-right-moniker self)
    (let ((browser (locate self 'blue)))
      (if (not (get-editable? browser))
          right-moniker
        (set! right-moniker (get-moniker browser))
        right-moniker)))
  
  
  (method protected virtual (set-right-moniker self moniker)
    (set! right-moniker moniker)
    (set-moniker (locate self 'blue) moniker))
  
  
  (method override (select-all self . rest)
    (select-all (locate self 'results) user-origin: #t))
  
  
  ;;;
  ;;;; Compare
  ;;;
  
  
  (method protected virtual (new-comparer self)
    (new Tree-Comparer))
  
  
  (method package virtual (get-trees self)
    (define (require-left-moniker)
      (or (get-left-moniker self)
          (error "Unable to get green moniker")))
    
    (define (require-right-moniker)
      (or (get-right-moniker self)
          (error "Unable to get blue moniker")))
    
    (values (moniker->tree self (require-left-moniker))
            (moniker->tree self (require-right-moniker))))
  
  
  (method protected virtual (moniker->tree self moniker)
    moniker)
  
  
  (method public (compare-trees self)
    (define (display-results entry)
      (let* ((mode (get-mode self))
             (date (get-merge-date self mode))
             (tree (locate self 'results)))
        (set! root-entry entry)
        (remove-every-row tree)
        (with-update-locked tree
          (lambda ()
            (display-entry mode date tree #f entry 0)
            (set-selection tree '())))))
    
    (define (display-entry mode date tree father entry level)
      (let* ((kind (get-kind entry))
             (left (get-left entry))
             (right (get-right entry))
             (action (get-action entry))
             (ref (or left right))
             (lvl? (and (eq? kind 'node) left right))
             (name (if (< level 2) (present-root self left right) (present-item self ref)))
             (image (entry-image self entry ref))
             (c0 (new Tree-Node title: name image: image))
             (c1 (new Tree-Label title: (present-value self kind (get-left-value entry))))
             (c2 (new Tree-Label title: (present-value self kind (get-right-value entry))))
             (c3 entry)
             (c4 entry)
             (c5 entry)
             (row (add-row tree father: father state: (if lvl? 'collapsed 'expanded) children: (list c0 c1 c2 c3 c4 c5) user-data: entry)))
        (when (not lvl?)
          (setup-action self mode date entry)
          (ensure-expanded tree row))
        (for-each (lambda (child)
                    (display-entry mode date tree row child (+ level 1)))
                  (get-children entry))))
    
    (receive (left-tree right-tree) (get-trees self)
      (set! left-root  left-tree)
      (set! right-root right-tree)
      (set! left-base  (tree-base self left-tree))
      (set! right-base (tree-base self right-tree))
      (let ((comparer (new-comparer self)))
        (receive (entry has-differences? scanned-values)
            (compare-nodes comparer #f left-tree right-tree
              left-content: left-content
              right-content: right-content
              ignored-nodes: ignored-nodes
              ignored-leaves: ignored-leaves
              ignored-extensions: ignored-extensions
              check-algorithm: (get-check-algorithm self)
              feedback: (lambda (left right) (scan-feedback self left right)))
          (display-results entry)
          (user-feedback "Done")
          (and has-differences? scanned-values)))))
  
  
  (method protected virtual (scan-feedback self left right)
    (user-feedback "Scanning {a}..." left))
  
  
  ;;;
  ;;;; Results
  ;;;
  
  
  (method package (setup-action self mode base-date entry)
    (define (setup-backup base-date entry)
      (let ((left        (get-left entry))
            (left-value  (get-left-value entry))
            (right       (get-right entry))
            (right-value (get-right-value entry)))
        (set-action entry (backup-action self base-date left left-value right right-value))))
    
    (define (setup-merge base-date entry)
      (when (eq? (get-kind entry) 'leaf)
        (let ((left        (get-left entry))
              (left-value  (get-left-value entry))
              (right       (get-right entry))
              (right-value (get-right-value entry)))
          (set-action entry (merge-action self base-date left left-value right right-value)))))
    
    (case mode
      ((backup) (setup-backup base-date entry))
      ((merge) (setup-merge base-date entry))))
  
  
  (method (reset-actions self)
    (let* ((mode (get-mode self))
           (base-date (get-merge-date self mode))
           (tree (locate self 'results))
           (comparer self)
           (proc (lambda (row)
                   (let ((entry (get-user-data row)))
                     (when (is? entry Compare-Entry)
                       (setup-action comparer mode base-date entry))))))
      (for-each (lambda (n)
                  (let ((row (get-row tree n)))
                    (proc row)))
                (get-selection tree))
      (invalidate-view tree)))
  
  
  (method protected virtual (backup-action self base-date left left-value right right-value)
    'copy-right)
  
  
  (method protected virtual (merge-action self base-date left left-value right right-value)
    #f)
  
  
  (method protected virtual (get-merge-date self mode)
    #f
    @cant-find-get-time
    (and (eq? mode 'merge)
         (let ((date (get-base-date self)))
           (and date
                (get-time date)))))

  
  ;;;
  ;;;; Actions
  ;;;
  
  
  (method protected virtual (add-item self src dst)
    (copy-item self src dst))
  
  
  (method protected virtual (copy-item self src dst)
    (error "Unable to copy {t} to {t}" src dst))

  
  (method protected virtual (delete-item self item)
    (error "Unable to delete {t}" item))
  
  
  (method protected virtual (compare-leaves self left right user-data)
    )
  
  
  (method public (merge-done self user-data)
    (let* ((tree (locate self 'results))
           (n (user-data-index tree user-data)))
      (when n
        (let ((row (get-row tree n)))
          (remove-row tree row))
        (goto-next-comparable self n))))
  
  
  (method package (goto-next-comparable self (rank #f))
    (goto-next self comparable? rank))
  
  
  (method protected (goto-previous-comparable self (rank #f))
    (goto-previous self comparable? rank))
  
  
  (method protected (goto-next-uncomparable self (rank #f))
    (goto-next self uncomparable? rank))
  
  
  (method protected (goto-previous-uncomparable self (rank #f))
    (goto-previous self uncomparable? rank))
  
  
  (method protected (goto-next self predicate (rank #f))
    (define (find-next tree rank predicate)
      (continuation-capture
        (lambda (return)
          (loop (for n from rank below (get-visible-count tree))
                (do (let* ((row (get-row tree n))
                           (entry (get-user-data row)))
                      (when (predicate entry)
                        (continuation-return return n)))))
          #f)))
    
    (let* ((tree (locate self 'results))
           (selection (get-selection tree))
           (rank (or rank (if (null? selection) 0 (+ (apply max selection) 1))))
           (next (find-next tree rank predicate)))
      (and next
           (begin
             (set-selection tree (list next))
             next))))
  
  
  (method protected (goto-previous self predicate (rank #f))
    (define (find-previous tree rank predicate)
      (continuation-capture
        (lambda (return)
          (loop (for n from rank downto 0)
                (do (let* ((row (get-row tree n))
                           (entry (get-user-data row)))
                      (when (predicate entry)
                        (continuation-return return n)))))
          #f)))
    
    (let* ((tree (locate self 'results))
           (selection (get-selection tree))
           (rank (or rank (if (null? selection) (- (get-visible-count tree) 1) (- (apply min selection) 1))))
           (previous (find-previous tree rank predicate)))
      (and previous
           (begin
             (set-selection tree (list previous))
             previous))))
  
  
  (definition (comparable? entry)
    (and (eq? (get-kind entry) 'leaf) (get-left entry) (get-right entry)))
  
  
  (definition (uncomparable? entry)
    (xor (get-left entry) (get-right entry)))
  
  
  ;;;
  ;;;; Utilities
  ;;;
  
  
  (method protected virtual (make-item self item root father)
    item)
  
  
  (method protected virtual (tree-base self tree)
    #f)
  
  
  (method protected virtual (trim-left self item)
    item)
  
  
  (method protected virtual (trim-right self item)
    item)
  
  
  (method protected virtual (present-root self left right)
    (present-item self (or left right)))
  
  
  (method protected virtual (present-item self item)
    )
  
  
  (method protected virtual (present-value self kind value)
    )
  
  
  (method protected virtual (entry-image self entry ref)
    (case (get-kind entry)
      ((node) {Image-Resource "TypeFolder"})
      ((leaf) {Image-Resource "TypeFile"})))
  
  
  (method package virtual (action-image self action left right)
    (case action
      ((copy-right)
       (cond ((not left) {Image-Resource "DeleteRight"})
             ((not right) {Image-Resource "AddRight"})
             (else {Image-Resource "CopyRight"})))
      ((merge)
       {Image-Resource "Merge"})
      ((copy-left)
       (cond ((not left) {Image-Resource "AddLeft"})
             ((not right) {Image-Resource "DeleteLeft"})
             (else {Image-Resource "CopyLeft"})))))
  
  
  (method protected virtual (get-compare-menu self)
    (new Compare-Menu)))


;;;
;;;; Item-Column
;;;


(class Item-Column extends Tree-Column
  
  
  (method override (draw-data self surface context row data width height)
    (draw-background self surface context row data width height)
    (let ((lvl? (and (eq? (get-kind data) 'node) (get-left data) (get-right data))))
      (when (and (not lvl?) (present? self data))
        (let ((image (present-image self data)))
          (draw-image (get-images-portfolio (get-application)) surface context image (quotient (- width 16) 2) 0)))))
  
  
  (method abstract protected virtual (present? self data)
    )
  
  
  (method abstract protected virtual (present-image self data)
    ))


;;;
;;;; Left-Column
;;;


(class Left-Column extends Item-Column
  
  
  (method override (present? self data)
    (get-left data))
  
  
  (method override (present-image self data)
    {Image-Resource "Green"}))


;;;
;;;; Action-Column
;;;


(class Action-Column extends Tree-Column
  
  
  (method override (draw-data self surface context row data width height)
    (draw-background self surface context row data width height)
    (let ((action (get-action data)))
      (when action
        (let ((appl (get-application))
              (image (action-image creator action (get-left data) (get-right data))))
          (draw-image (get-images-portfolio appl) surface context image (+ (quotient (- width 16) 2) 1) 0))))))


;;;
;;;; Right-Column
;;;


(class Right-Column extends Item-Column
  
  
  (method override (present? self data)
    (get-right data))
  
  
  (method override (present-image self data)
    {Image-Resource "Blue"}))


;;;
;;;; Compare-Menu
;;;


(class Compare-Menu extends Context-Menu
  
  
  (form
    (<install>
      (<Label-Item>                                title: "Configure" icon: {Image-Resource "All"}
        (<Configure-Menu>))
      (<Separator-Item>   name: action-group)
      @wait
      (<Label-Item>       name: register-base-date title: "Register Base Date" action-handler: {Event-Handler :document on-register-base-date})
      (<Label-Item>       name: reset-actions      title: "Reset Actions" action-handler: {Event-Handler :document on-reset-actions})
      (<Separator-Item>   name: open-group)
      (<Label-Item>       name: open-green         title: "Open Green" icon: {Image-Resource "Green"} action-handler: {Event-Handler :document on-open-green})
      (<Label-Item>       name: open-blue          title: "Open Blue" icon: {Image-Resource "Blue"} action-handler: {Event-Handler :document on-open-blue}))))


;;;
;;;; Configure-Menu
;;;


(class Configure-Menu extends Context-Menu
  
  
  (method override (finish self rest)
    (nextmethod self rest)
    (update-menu self))
  
  
  (method public (update-menu self)
    (for-each (lambda (config)
                (let ((title (get-presentation-property config)))
                  (new Label-Item parent: self title: title action-handler: (new Event-Handler target-name: :document method-name: 'on-configure properties: (list configuration: config)))))
              (get-children (current-preferences '(tools compare-directories)))))))
