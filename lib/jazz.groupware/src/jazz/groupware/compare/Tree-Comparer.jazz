;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Comparing Trees
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Alain Marcotte.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;    Guillaume Cartier
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.groupware.compare.Tree-Comparer jazz


(import (jazz.groupware)
        (jazz.io))


(class Tree-Comparer extends Object
  
  
  (method public (compare-nodes self parent left-node right-node (left-content: left-content #t) (right-content: right-content #t) (ignored-nodes: ignored-nodes '()) (ignored-leaves: ignored-leaves '()) (ignored-extensions: ignored-extensions '()) (check-algorithm: check-algorithm #f) (feedback: feedback #f))
    (let* ((has-differences? (list #f))
           (entry (compare-node-contents self parent (create-item self left-node) left-content (create-item self right-node) right-content ignored-nodes ignored-leaves ignored-extensions check-algorithm feedback has-differences?)))
      (values entry (car has-differences?) (scanned-values self))))
  
  
  (method (compare-node-contents self parent node1 content1 node2 content2 ignored-nodes ignored-leaves ignored-extensions check-algorithm feedback has-differences?)
    (node-feedback self node1 node2 feedback)
    (let* ((fact    (new List-Factory))
           (entry   (new-entry self parent 'node node1 #f node2 #f))
           (nodes1  (collect-items self parent node1 content1 ignored-nodes ignored-leaves ignored-extensions 'nodes))
           (nodes2  (collect-items self parent node2 content2 ignored-nodes ignored-leaves ignored-extensions 'nodes))
           (leaves1 (collect-items self parent node1 content1 ignored-nodes ignored-leaves ignored-extensions 'leaves))
           (leaves2 (collect-items self parent node2 content2 ignored-nodes ignored-leaves ignored-extensions 'leaves))
           (n       (lambda () (compare-items self entry 'node nodes1 content1 nodes2 content2 ignored-nodes ignored-leaves ignored-extensions (~ compare-node-contents self) check-algorithm feedback fact has-differences?)))
           (l       (lambda () (compare-items self entry 'leaf leaves1 #t leaves2 #t ignored-nodes ignored-leaves ignored-extensions (~ compare-leaf-values self) check-algorithm feedback fact has-differences?))))
      (compare-nodes/leaves self n l)
      (set-children entry (get-output fact))
      entry))
  
  
  (method protected virtual (compare-nodes/leaves self nodes leaves)
    (nodes)
    (leaves))
  
  
  (method protected virtual (compare-leaf-values self parent leaf1 content1 leaf2 content2 ignored-nodes ignored-leaves ignored-extensions check-algorithm feedback has-differences?)
    (leaf-feedback self leaf1 leaf2 feedback)
    (let ((value1 (get-value leaf1))
          (value2 (get-value leaf2)))
      (and (and leaf1 leaf2 (different? self leaf1 leaf2 check-algorithm))
           (begin
             (set-car! has-differences? #t)
             (new-entry self parent 'leaf leaf1 value1 leaf2 value2)))))
  
  
  (method (compare-items self parent kind items1 content1 items2 content2 ignored-nodes ignored-leaves ignored-extensions proc check-algorithm feedback fact has-differences?)
    (define (content-find item content)
      (if (eq? content #t)
          #t
        (cdr (find-in content (item-name self item) key: (~ item-name self) test: equal?))))
    
    (merge-ordered (lambda (what key left right)
                     (when (or left right)
                       (case what
                         ((:left)  (set-car! has-differences? #t) (put fact (new-entry self parent kind left (and (eq? kind 'leaf) (get-value left)) #f #f)))
                         ((:right) (set-car! has-differences? #t) (put fact (new-entry self parent kind #f #f right (and (eq? kind 'leaf) (get-value right)))))
                         ((:same)  (let ((result (proc parent left (content-find left content1) right (content-find right content2) ignored-nodes ignored-leaves ignored-extensions check-algorithm feedback has-differences?)))
                                   (when result
                                     (put fact result)))))))
                   items1 items2
                   key: (~ item-name self)))
  
  
  ;;;
  ;;;; Feedback
  ;;;
  
  
  (method protected virtual (node-feedback self node1 node2 feedback)
    (feedback (get-moniker node1) (get-moniker node2)))
  
  
  (method protected virtual (leaf-feedback self leaf1 leaf2 feedback)
    )
  
  
  ;;;
  ;;;; Item
  ;;;
  
  
  (method (make-item self moniker name value)
    (new Compare-Item moniker name value))
  
  
  (method (item-name self item)
    (get-name item))
  
  
  (method protected virtual (create-item self moniker)
    )
  
  
  (method protected virtual (get-item-type self item)
    )
  
  
  (method protected virtual (get-item-content self item kind)
    )
  
  
  (method protected virtual (different? self leaf1 leaf2 check-algorithm)
    )
  
  
  ;;;
  ;;;; Utilities
  ;;;
  
  
  (method package virtual (new-entry self parent kind left left-value right right-value)
    (new Compare-Entry parent kind (and left (get-moniker left)) left-value (and right (get-moniker right)) right-value))
  
  
  (method (collect-items self parent node content ignored-nodes ignored-leaves ignored-extensions kind)
    (collect-if (lambda (item)
                  (collect-item? self parent item content ignored-nodes ignored-leaves ignored-extensions))
                (sort string<? (get-item-content self node kind) key: (~ item-name self))))
  
  
  (method protected virtual (collect-item? self parent item content ignored-nodes ignored-leaves ignored-extensions)
    (let* ((name (item-name self item))
           (type (get-item-type self item))
           (ignored (case type ((node) ignored-nodes) ((leaf) ignored-leaves) (else '())))
           (toplevel? (or (not parent) (and (is? (get-left parent) Directory-Group) (not (get-parent parent))))))
      (and (or (and (eq? content #t)
                    (not (member? name ignored))
                    (or (not toplevel?) (not (member? (string-append "/" name) ignored))))
               (and (neq? content #t)
                    (member? name content key: (~ item-name self))))
           (or (neq? type 'leaf)
               (null? ignored-extensions)
               (not (member? (get-extension (get-moniker item)) ignored-extensions))))))
  
  
  (method protected virtual (scanned-values self)
    #t)))
