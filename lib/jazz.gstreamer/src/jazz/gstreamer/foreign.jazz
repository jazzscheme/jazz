;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; GStreamer Foreign
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.gstreamer.foreign jazz


(import (jazz.foreign)
        (jazz.platform.types))


(c-include "<glib.h>")
(c-include "<gst/gst.h>")


;;;
;;;; GLib
;;;


(c-type gint     int)
(c-type guint    uint)
(c-type gulong   ulong)
(c-type gboolean gint)
(c-type gpointer void*)


(c-type GstValue  (native "GstValue"))
(c-type GstValue* (pointer GstValue GstValue*))


(c-external (g_value_new) GstValue*
  #/C/
    GValue* value = (GValue*) malloc(sizeof(GValue));
    ___return(value);
//#)

(c-external (g_object_set_string (call G_OBJECT GstElement*) char-string char-string NULL) void "g_object_set")
(c-external (g_object_get_boolean (call G_OBJECT GstElement*) char-string) bool
  #/C/
    gboolean value;
    g_object_get(___arg1,
        ___arg2, &value,
        NULL);
    ___return((value != 0));
//#)


;;;
;;;; GStreamer
;;;


(c-enumerant GST_STATE_NULL)
(c-enumerant GST_STATE_READY)
(c-enumerant GST_STATE_PAUSED)
(c-enumerant GST_STATE_PLAYING)
(c-enumerant GST_CLOCK_TIME_NONE)
(c-enumerant GST_MESSAGE_ERROR)
(c-enumerant GST_MESSAGE_EOS)
(c-enumerant GST_MESSAGE_STATE_CHANGED)


(c-type GstClockTime         int64)
(c-type GstStateChangeReturn enum)
(c-type GstState             enum)
(c-type GstMessageType       enum)


(c-type GstElement   (native "GstElement"))
(c-type GstElement*  (pointer GstElement GstElement*))
(c-type GstBin       (native "GstBin"))
(c-type GstBin*      (pointer GstBin GstBin*))
(c-type GstPipeline  (native "GstPipeline"))
(c-type GstPipeline* (pointer GstPipeline GstPipeline*))
(c-type GstBus       (native "GstBus"))
(c-type GstBus*      (pointer GstBus GstBus*))
(c-type GstClock     (native "GstClock"))
(c-type GstClock*    (pointer GstClock GstClock*))
(c-type GstMessage   (native "GstMessage"))
(c-type GstMessage*  (pointer GstMessage GstMessage*))
(c-type GstIterator  (native "GstIterator"))
(c-type GstIterator* (pointer GstIterator GstIterator*))


(c-declare jazz.gstreamer.foreign #/C/
static GstStateChangeReturn gst_element_set_state_aux(GstElement* elem, GstState state)
{
    GstStateChangeReturn state_change;
  
    ___mask_heartbeat_interrupts_state heartbeat_interrupts;
    ___mask_heartbeat_interrupts_begin (&heartbeat_interrupts);
    state_change = gst_element_set_state(elem, state);
    ___mask_heartbeat_interrupts_end (&heartbeat_interrupts);
  
    return state_change;
}

static GstElement* gst_iterator_next_element(GstIterator *it)
{
    GValue elem = G_VALUE_INIT;
    GstIteratorResult result = gst_iterator_next(it, &elem);
    if (result == GST_ITERATOR_DONE)
        return NULL;
    else
        return (GstElement*) g_value_get_object(&elem);
}

static GstElement* gst_test(GstElement *bin)
{
    GstIterator *it;
    GValue elem = G_VALUE_INIT;
    it = gst_bin_iterate_elements(GST_BIN(bin));
    GstIteratorResult result = gst_iterator_next(it, &elem);
    printf("%d \n", G_VALUE_TYPE(&elem));
    if (result == GST_ITERATOR_OK)
        return (GstElement*) g_value_get_object(&elem);
    else
        return NULL;
}

static void on_pad_added (GstElement *element, GstPad *pad, gpointer data)
{
    GstPad *sinkpad;
    GstElement *decoder = (GstElement *) data;

    sinkpad = gst_element_get_static_pad (decoder, "sink");

    gst_pad_link (pad, sinkpad);

    gst_object_unref (sinkpad);
}

static gulong gst_signal_connect_to(gpointer instance, char* signal, gpointer data)
{
    return g_signal_connect(instance, signal, G_CALLBACK(on_pad_added), data);
}

static void gst_print_error(GstMessage *msg)
{
    gchar  *debug;
    GError *error;

    gst_message_parse_error (msg, &error, &debug);
    g_free (debug);

    g_printerr ("Error: %s\n", error->message);
    g_error_free (error);
}
//#)


(c-external (gst_init NULL NULL) void)
(c-external (gst_parse_launch char-string NULL) GstElement*)
(c-external (gst_object_get_name (call GST_OBJECT GstElement*)) char-string)
(c-external (gst_object_set_name (call GST_OBJECT GstElement*) char-string) gboolean)
(c-external (gst_object_unref gpointer) void)
(c-external (gst_element_set_state GstElement* GstState) GstStateChangeReturn "gst_element_set_state_aux")
(c-external (gst_element_get_bus GstElement*) GstBus*)
(c-external (gst_element_get_base_time GstElement*) GstClockTime)
(c-external (gst_element_factory_make char-string char-string) GstElement*)
(c-external (gst_element_link GstElement* GstElement*) gboolean)
(c-external (gst_iterator_next_element GstIterator*) GstElement*)
(c-external (gst_signal_connect_to gpointer char-string gpointer) gulong)
(c-external (gst_bus_timed_pop_filtered GstBus* GstClockTime GstMessageType) GstMessage*)
(c-external (gst_bus_pop GstBus*) GstMessage*)
(c-external (gst_bin_add (call GST_BIN GstElement*) GstElement*) gboolean)
(c-external (gst_bin_get_by_name (call GST_BIN GstElement*) char-string) GstElement*)
(c-external (gst_bin_iterate_elements (call GST_BIN GstElement*)) GstIterator*)
(c-external (gst_test GstElement*) GstElement*)
(c-external (gst_pipeline_new char-string) GstElement*)
(c-external (gst_pipeline_get_bus (call GST_PIPELINE GstElement*)) GstBus*)
(c-external (gst_pipeline_get_clock (call GST_PIPELINE GstElement*)) GstClock*)
(c-external (gst_pipeline_get_latency (call GST_PIPELINE GstElement*)) GstClockTime)
(c-external (gst_pipeline_set_latency (call GST_PIPELINE GstElement*) GstClockTime) void)
;(c-external (gst_caps_set_value GstCaps* char-string
(c-external (gst_message_unref GstMessage*) void)
(c-external (gst_clock_get_time GstClock*) GstClockTime)
(c-external (gst_print_error GstMessage*) void)
(c-external (GST_MESSAGE_TYPE GstMessage*) GstMessageType)
(c-external (GST_MESSAGE_SRC GstMessage*) GstElement*))
