;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; GStreamer Test
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module jazz.gstreamer.test jazz


(import (jazz.gstreamer))


(startup-gstreamer)

@playbin
(let ((pipeline (gst_parse_launch "playbin uri=https://www.freedesktop.org/software/gstreamer-sdk/data/media/sintel_trailer-480p.webm")))
  (gst_element_set_state pipeline GST_STATE_PLAYING)
  (let ((bus (gst_element_get_bus pipeline)))
    (gst_bus_timed_pop_filtered bus GST_CLOCK_TIME_NONE (bitwise-ior GST_MESSAGE_ERROR GST_MESSAGE_EOS))))

@wav
(begin
(define (play-explosion)
  (let ((pipeline (gst_pipeline_new "audio-player")))
    (let ((source  (gst_element_factory_make "filesrc"       "file-source"))
          (decoder (gst_element_factory_make "wavparse"      "wavparse"))
          (conv    (gst_element_factory_make "audioconvert"  "converter"))
          (sink    (gst_element_factory_make "autoaudiosink" "audio-output")))
      (g_object_set source "location" "/Users/cartier/Devel/media/test.wav")
      (let ((bus (gst_pipeline_get_bus pipeline)))
        (gst_bin_add pipeline source)
        (gst_bin_add pipeline decoder)
        (gst_bin_add pipeline conv)
        (gst_bin_add pipeline sink)
        (gst_element_link source decoder)
        (gst_element_link decoder conv)
        (gst_element_link conv sink)
        (gst_element_set_state pipeline GST_STATE_PLAYING)))))
(loop (repeat 100)
      (play-explosion)
      (sleep .1))
(sleep 5))

@ogg
(let ((pipeline (gst_pipeline_new "audio-player")))
  (let ((source  (gst_element_factory_make "filesrc"       "file-source"))
        (demuxer (gst_element_factory_make "oggdemux"      "ogg-demuxer"))
        (decoder (gst_element_factory_make "vorbisdec"     "vorbis-decoder"))
        (conv    (gst_element_factory_make "audioconvert"  "converter"))
        (sink    (gst_element_factory_make "autoaudiosink" "audio-output")))
    (g_object_set source "location" "/Users/cartier/Devel/media/test.ogg")
    (let ((bus (gst_pipeline_get_bus pipeline)))
      (gst_bin_add pipeline source)
      (gst_bin_add pipeline demuxer)
      (gst_bin_add pipeline decoder)
      (gst_bin_add pipeline conv)
      (gst_bin_add pipeline sink)
      (gst_element_link source demuxer)
      (gst_element_link demuxer decoder)
      (gst_element_link decoder conv)
      (gst_element_link conv sink)
      (gst_signal_connect_to demuxer "pad-added" decoder)
      (gst_element_set_state pipeline GST_STATE_PLAYING)
      (let (loop)
        (let ((msg (gst_bus_pop bus)))
          (if (not msg)
              (loop)
            (let ((type (GST_MESSAGE_TYPE msg)))
              (unless (= type GST_MESSAGE_EOS)
                (sleep .01)
                (loop))))))))))
