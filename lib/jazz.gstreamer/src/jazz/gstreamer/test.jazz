;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; GStreamer Test
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


;; GST_DEBUG="*:2" cache/release/jazz -test gstreamer
;; G_DEBUG=fatal-criticals ...
;; G_DEBUG=fatal-warnings ...


(module jazz.gstreamer.test jazz


(import (jazz.gstreamer)
        (jazz.io)
        (jazz.syntax)
        (world.foreign.gstreamer))


(startup-gstreamer)


;;;
;;;; App
;;;


; try with different output pipelines
; why is it now ok with a high framerate when before it wasnt


;@app
(let ((width 1280 @w 320)
      (height 720 @w 180)
      (framerate 30)
      (debug? #t))
  (let ((input-pipeline (gst_parse_launch (pipeline "avfvideosrc name=src" "videoscale name=scale" "videoconvert name=convert" (tie "video/x-raw, format=I420, width={width}, height={height}, framerate={framerate}/1") @w "x264enc pass=qual quantizer=20 tune=zerolatency" "appsink name=sink")))
        (output-pipeline (gst_parse_launch (pipeline "appsrc name=src" "videoconvert name=convert" @w "avdec_h264" (tie "video/x-raw, format=UYVY, width={width}, height={height}, framerate={framerate}/1") "osxvideosink name=sink"))))
    (gst_object_set_name input-pipeline "input")
    (gst_object_set_name output-pipeline "output")
    (let ((input-sink (gst_bin_get_by_name input-pipeline "sink"))
          (output-src (gst_bin_get_by_name output-pipeline "src"))
          (output-sink (gst_bin_get_by_name output-pipeline "sink"))
          (process-input (pipeline-messages-processor input-pipeline debug?))
          (process-output (pipeline-messages-processor output-pipeline debug?)))
      (define (process-messages)
        (process-input)
        (process-output))
      
      (when debug?
        (gst_monitor input-pipeline "src" "sink")
        (gst_monitor output-pipeline "src" "convert" "sink"))
      (when debug?
        (debug 'INFO 'latency (gst_pipeline_get_latency output-pipeline)))
      (gst_app_src_set_caps output-src
        (gst_caps "video/x-raw"
          "format"    (g_value_string "I420")
          "width"     (g_value_int width)
          "height"    (g_value_int height)
          "framerate" (g_value_fraction framerate 1)))
      (g_object_set output-src
        "stream-type" (g_value_int GST_APP_STREAM_TYPE_STREAM)
        "format"      (g_value_int GST_FORMAT_TIME))
      (gst_element_set_state input-pipeline GST_STATE_PAUSED)
      (gst_element_set_state output-pipeline GST_STATE_PAUSED)
      (gst_element_set_state input-pipeline GST_STATE_PLAYING)
      (gst_element_set_state output-pipeline GST_STATE_PLAYING)
      (process-messages)
      (let ((buffer (make-u8vector (* width height 4)))
            (info (make-u64vector 2)))
        (let (loop)
          (let ((size (gst_app_sink_read input-sink buffer info))
                (timestamp (u64vector-ref info 0))
                (duration (u64vector-ref info 1)))
            (when (/= size -1)
              (gst_app_src_write output-src buffer size timestamp duration)))
          (process-messages)
          (sleep .001)
          (loop))))))


;;;
;;;; OGG
;;;


@ogg
(let ((pipeline (gst_pipeline_new "audio-player")))
  (let ((source  (gst_element_factory_make "filesrc"       "file-source"))
        (demuxer (gst_element_factory_make "oggdemux"      "ogg-demuxer"))
        (decoder (gst_element_factory_make "vorbisdec"     "vorbis-decoder"))
        (conv    (gst_element_factory_make "audioconvert"  "converter"))
        (sink    (gst_element_factory_make "autoaudiosink" "audio-output")))
    (g_object_set_string source "location" "/Users/cartier/Devel/gstreamer/media/test.ogg")
    (let ((bus (gst_pipeline_get_bus pipeline)))
      (gst_bin_add pipeline source)
      (gst_bin_add pipeline demuxer)
      (gst_bin_add pipeline decoder)
      (gst_bin_add pipeline conv)
      (gst_bin_add pipeline sink)
      (gst_element_link source demuxer)
      (gst_element_link demuxer decoder)
      (gst_element_link decoder conv)
      (gst_element_link conv sink)
      (gst_signal_connect_to demuxer "pad-added" decoder)
      (gst_element_set_state pipeline GST_STATE_PLAYING)
      (let (loop)
        (let ((msg (gst_bus_pop bus)))
          (if (not msg)
              (loop)
            (let ((type (GST_MESSAGE_TYPE msg)))
              (unless (= type GST_MESSAGE_EOS)
                (sleep .01)
                (loop)))))))))


;;;
;;;; WAV
;;;


@wav
(begin
(define (play-explosion)
  (let ((pipeline (gst_pipeline_new "audio-player")))
    (let ((source  (gst_element_factory_make "filesrc"       "file-source"))
          (decoder (gst_element_factory_make "wavparse"      "wavparse"))
          (conv    (gst_element_factory_make "audioconvert"  "converter"))
          (sink    (gst_element_factory_make "autoaudiosink" "audio-output")))
      (g_object_set_string source "location" "/Users/cartier/Devel/media/test.wav")
      (let ((bus (gst_pipeline_get_bus pipeline)))
        (gst_bin_add pipeline source)
        (gst_bin_add pipeline decoder)
        (gst_bin_add pipeline conv)
        (gst_bin_add pipeline sink)
        (gst_element_link source decoder)
        (gst_element_link decoder conv)
        (gst_element_link conv sink)
        (gst_element_set_state pipeline GST_STATE_PLAYING)))))
(loop (repeat 100)
      (play-explosion)
      (sleep .1))
(sleep 5)))
