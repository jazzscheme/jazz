;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Handlers
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module jazz.handler jazz


(hub get-form)
(hub get-method-name)
(hub get-parameters)
(hub get-properties)
(hub get-property)
(hub get-target)
(hub get-target-name)
(hub invoke)


(import (jazz.action)
        (jazz.component)
        (jazz.event)
        (jazz.reference))


;;;
;;;; Notify
;;;


(definition public (notify-handler component handler sender properties)
  (typecase handler
    ((Procedure)
     (handler (apply make-event Event :action sender (or properties '()))))
    ((Handler)
     (let ((properties (or properties (get-properties handler))))
       (let ((event (apply make-event Event :action sender properties)))
         (invoke handler component event))))
    ((Action)
     (call-action handler sender properties))
    (else
     (error "Unknown handler type: {s}" handler))))


(definition public (invoke-handler component handler event)
  (typecase handler
    ((Procedure)
     (handler event))
    ((Handler)
     (invoke handler component event))
    ((Action)
     (call-action handler component #f event: event))
    (else
     (error "Unknown handler type: {s}" handler))))


;;;
;;;; Handler
;;;


(class Handler extends Object
  
  
  (slot execute     getter generate)
  (slot target      getter generate)
  (slot target-name getter generate)
  (slot method-name getter generate)
  (slot form        getter generate)
  
  
  (method override (initialize self (execute: execute #f) (target: target #f) (target-name: target-name #f) (method-name: method-name #f))
    (nextmethod self)
    (set! self.execute execute)
    (set! self.target target)
    (set! self.target-name target-name)
    (set! self.method-name method-name))
  
  
  (method override (print self output readably)
    (format output "~{{a} {s} {s}}"
            (category-name (class-of self))
            target-name
            method-name))

  
  ;;;
  ;;;; Context
  ;;;
  
  
  (method override (walk-references self proc)
    (when (eq? target-name :reference)
      (proc method-name)))


  (method override (setup-context self context)
    (set! form context))
  
  
  ;;;
  ;;;; Invoke
  ;;;
  
  
  (method public virtual (invoke self sender . rest)
    (if execute
        (execute)
      (let* ((target (or target (find-target self sender)))
             (proc (dispatch (class-of target) method-name)))
        (apply (~ proc target) rest))))
  
  
  (method public (find-target self sender)
    (define (find-form component)
      (cond ((not component)
             #f)
            ((memq? form (get-class-forms (class-of component)))
             component)
            (else
             (find-form (get-parent component)))))
    
    (if (is-not? sender Component)
        (resolve-nickname target-name)
      (cond ((eq? target-name :form)
             (find-form sender))
            ((and (pair? target-name) (eq? (car target-name) :form))
             (child (find-form sender) (cdr target-name)))
            (else
             (child sender target-name))))))


;;;
;;;; Event-Handler
;;;


(definition package (walk-event-handler arguments proc)
  (when (eq? (source-code (car arguments)) :reference)
    (proc (source-code (cadr arguments)))))


(definition package (construct-event-handler target-name method-name . properties)
  (new Event-Handler target-name: target-name method-name: method-name properties: properties))


(class Event-Handler extends Handler
  
  
  (method meta override (marshall-object self obj)
    (serialize-literal obj))
  
  
  (method meta override (unmarshall-object self content)
    (deserialize-literal content))
  
  
  (slot properties getter generate)
  
  
  (method override (initialize self . rest)
    (bind-keywords ((properties '()) . others) rest
      (apply nextmethod self others)
      (set! self.properties properties)))
  
  
  (method override (print self output readably)
    (format output "~{{a} {s} {s}{a}}"
            (category-name (class-of self))
            (or target target-name)
            method-name
            (if (null? properties)
                ""
              (format " {l detail: :reader}" properties))))
  
  
  ;;;
  ;;;; Access
  ;;;


  (method public (get-property self keyword)
    (getf properties keyword))
  
  
  ;;;
  ;;;; Invoke
  ;;;
  
  
  ;; Receiving an optional action is a temporary solution until
  ;; a big cleanup between event handlers and actions...

  
  (method override (invoke self sender event (action: action #f))
    (cond (execute
           (execute event))
          ((eq? target-name :reference)
           (let ((handler (locate-reference form method-name)))
             (handler event)))
          (else
           (let ((target (or target (find-target self sender))))
             (if target
                 (invoke-target self target event action: action)
               (error "Unable to find event handler target: {t}" target-name))))))
  
  
  (method public (invoke-target self target event (action: action #f))
    (let ((proc (dispatch (class-of target) method-name)))
      (cond ((not proc)
             (error "Unable to find event handler method: {t}" method-name))
            ((is? target Event-Consumer)
             (hook-action self event
               (lambda ()
                 (let ((consumer (get-event-consumer target)))
                   (deliver-event consumer self target proc event)))))
            (else
             (hook-action self event
               (lambda ()
                 (proc target event))))))))


;;;
;;;; Handler-Reference
;;;


(definition package (walk-handler-reference arguments proc)
  (proc (source-code (car arguments))))


(definition package (construct-handler-reference symbol . parameters)
  (new Handler-Reference symbol parameters))


(class Handler-Reference extends Reference
  
  
  (slot parameters getter generate)
    
  
  (method override (initialize self symbol parameters)
    (nextmethod self symbol)
    (set! self.parameters parameters))
  
  
  (method override (print self output readably)
    (format output "~{{a} {a}{?: {l}~}}"
            (category-name (class-of self))
            symbol
            (not-null? parameters)
            parameters))
  
  
  (method override (parameters-resolve self)
    @cant-find
    (generate (reference-resolve self) parameters)))


;;;
;;;; Listener
;;;


(definition public (add-listener listener lst)
  (cons listener lst))


(definition public (remove-listener listener lst)
  (if (is? listener Handler)
      (remove! listener lst)
    (remove! listener lst test: listener-target?)))


(definition public (listener? object lst)
  (member? object lst test: listener-target?))


(definition (listener-target? object listener)
  (eq? object (get-target listener))))
