;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Handlers
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module jazz.handler jazz


(import (jazz.action)
        (jazz.component)
        (jazz.event)
        (jazz.process))


;;;
;;;; Handler
;;;


(class Handler extends Object
  
  
  (slot execute     getter generate)
  (slot target      getter generate)
  (slot target-name getter generate)
  (slot method-name getter generate)
  (slot form        getter generate)
  
  
  (method override (initialize (execute: execute #f) (target: target #f) (target-name: target-name #f) (method-name: method-name #f))
    (nextmethod)
    (set! execute~self execute)
    (set! target~self target)
    (set! target-name~self target-name)
    (set! method-name~self method-name))
  
  
  (method override (print output readably)
    (format output "~{{a} {s} {s}}"
            (category-name (class-of self))
            target-name
            method-name))

  
  ;;;
  ;;;; Context
  ;;;
  
  
  (method override (walk-references proc)
    (when (eq? target-name :reference)
      (proc method-name)))


  (method override (setup-context context)
    (set! form context))
  
  
  ;;;
  ;;;; Invoke
  ;;;
  
  
  (method public virtual (invoke sender . rest)
    (if execute
        (execute)
      (let* ((target (or target (find-target sender)))
             (proc (dispatch (class-of target) method-name)))
        (apply (~ proc target) rest))))
  
  
  (method public (find-target sender)
    (define (find-form component)
      (cond ((not component)
             #f)
            ((memq? form (get-class-forms~ (class-of component)))
             component)
            (else
             (find-form (get-parent~ component)))))
    
    (if (is-not? sender Component)
        (process-alias~ (get-process) target-name)
      (cond ((eq? target-name :form)
             (find-form sender))
            ((and (pair? target-name) (eq? (car target-name) :form))
             (child~ (find-form sender) (cdr target-name)))
            (else
             (child~ sender target-name))))))


;;;
;;;; Event-Handler
;;;


(definition package (walk-event-handler arguments proc)
  (when (eq? (source-code (car arguments)) :reference)
    (proc (source-code (cadr arguments)))))


(definition package (construct-event-handler target-name method-name . properties)
  (new Event-Handler target-name: target-name method-name: method-name properties: properties))


(class Event-Handler extends Handler
  
  
  (slot properties getter generate)
  
  
  (method override (initialize . rest)
    (bind-keywords ((properties '()) . others) rest
      (apply nextmethod others)
      (set! properties~self properties)))
  
  
  (method override (print output readably)
    (format output "~{{a} {s} {s}{a}}"
            (category-name (class-of self))
            (or target target-name)
            method-name
            (if (null? properties)
                ""
              (format " {l detail: :reader}" properties))))
  
  
  ;;;
  ;;;; Access
  ;;;


  (method public (get-property keyword)
    (getf properties keyword))
  
  
  ;;;
  ;;;; Invoke
  ;;;
  
  
  ;; Receiving an optional action is a temporary solution until
  ;; a big cleanup between event handlers and actions...

  
  (method override (invoke sender event (action: action #f))
    (cond (execute
           (execute event))
          ((eq? target-name :reference)
           (let ((handler (locate-reference~ form method-name)))
             (handler event)))
          (else
           (let ((target (or target (find-target sender))))
             (if target
                 (invoke-target target event action: action)
               (error "Unable to find event handler target: {t}" target-name))))))
  
  
  (method public (invoke-target target event (action: action #f))
    (let ((proc (dispatch (class-of target) method-name)))
      (cond ((not proc)
             (error "Unable to find event handler method: {t}" method-name))
            ((is? target Event-Consumer)
             (hook-action self event
               (lambda ()
                 (let ((consumer (get-event-consumer~ target)))
                   (deliver-event~ consumer self target proc event)))))
            (else
             (hook-action self event
               (lambda ()
                 (proc target event)))))))))
