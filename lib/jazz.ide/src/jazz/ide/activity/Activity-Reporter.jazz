;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Activity Reporter
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.ide.activity.Activity-Reporter jazz


(import (jazz.handler)
        (jazz.ide)
        (jazz.jml)
        (jazz.resource)
        (jazz.ui)
        (jazz.view))


(class undocumented Activity-Reporter extends View
  
  
  (property rank initialize #f accessors explicit)
  
  
  (slot cancelled? initialize #f)
  (slot done?      initialize #f)
    
  
  (form
    (<install>                       size: {Dimension 180 37}
      (<Label-View>   name: message  position: {Point 0 0} size: {Dimension 150 16})
      (<Progress-Bar> name: progress position: {Point 0 16} size: {Dimension 150 20})
      (<Push-Tool>    name: cancel   position: {Point 157 15} size: {Dimension 22 22} tooltip?: #t tooltip-text: "Cancel" resource: {Image-Resource "Cancel"} portfolio: :images action-handler: {Event-Handler :form on-cancel})))

  
  (method override (install self rest)
    (nextmethod self rest)
    (let ((progress (locate self 'progress)))
      (set-pos progress 0)))
  
  
  ;;;
  ;;;; Access
  ;;;
  
  
  (method public (get-rank self)
    rank)
  
  
  (method public (set-rank self r)
    (when (or (not rank) (/= r rank))
      (set! rank r)
      (let ((size (get-size self)))
        (set-position self (new Point 10 (+ 10 (* rank (+ (get-height size) 8))))))))
  
  
  (method public (cancel-requested? self)
    cancelled?)
  
  
  (method public (get-done self)
    done?)


  ;;;
  ;;;; Events
  ;;;


  (method override (resize self dh dv)
    (nextmethod self dh dv)
    (size-figure (locate self 'message) dh 0)
    (size-figure (locate self 'progress) dh 0)
    (move-figure (locate self 'cancel) dh 0))
  
  
  (method (on-cancel self evt)
    (if done?
        (let ((frame (get-frame self)))
          (close self)
          (update-rectangle frame))
      (set! cancelled? #t)
      (set-message self "Cancelled")))
  
  
  ;;;
  ;;;; Reporting
  ;;;
  
  
  (method public (set-message self msg)
    (set-title (locate self 'message) msg))


  (method public (report-message self fmt . rest)
    (set-message self (apply format fmt rest)))
  
  
  (method public (set-done self)
    (set! done? #t)
    (set-resource (locate self 'cancel) {Image-Resource "Done"})
    (update-title (get-frame self)))
  
  
  (method public (set-infinite? self flag)
    (set-infinite? (locate self 'progress) flag))
  
  
  (method public (set-range self range)
    (set-range (locate self 'progress) range))
  
  
  (method public (set-pos self pos)
    (set-pos (locate self 'progress) pos))
  
  
  (method public (delta-pos self increment)
    (delta-pos (locate self 'progress) increment))
  
  
  (method public (set-step self increment)
    (set-step (locate self 'progress) increment))
  
  
  (method public (step-it self)
    (step-it (locate self 'progress)))))
