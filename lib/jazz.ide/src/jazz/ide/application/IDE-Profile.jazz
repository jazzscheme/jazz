;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; IDE Profile
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.ide.application.IDE-Profile jazz


(import (jazz.component)
        (jazz.designer)
        (jazz.editor.jazz)
        (jazz.io)
        (jazz.jml)
        (jazz.library)
        (jazz.profile)
        (jazz.project)
        (jazz.runtime)
        (jazz.system)
        (jazz.ui)
        (jazz.ui.activity)
        (jazz.ui.view)
        (time))


(class IDE-Profile extends Profile
  
  
  ;;;
  ;;;; Imports
  ;;;
  
  
  (method (add-missing-imports import)
    (let ((units (call-with-input-file "~/walk-unresolved.jazz"
                   (lambda (port)
                     (read port)
                     (read port))))
          (cataloguer (get-cataloguer~ (get-application))))
      (for-each (lambda (unit)
                  (let ((definitions (get-definitions~ cataloguer unit)))
                    (if (> (length definitions) 1)
                        (debug 'ambiguous unit)
                      (let ((text (get-guest~ (edit~ (car definitions)))))
                        (let ((expl (new (explorer-class~ text) text)))
                          (insert-import-invoice~ expl import))))))
                units)))
  
  
  (method (remove-unreferenced-imports (unit: unit #f) (targets: targets #f))
    (let ((cataloguer (get-cataloguer~ (get-application))))
      (define (remove-import unit import)
        (let ((definitions (get-definitions~ cataloguer unit)))
          (case (length definitions)
            ((0)
             (debug 'cant 'find unit))
            ((1)
             (let ((text (get-guest~ (edit~ (car definitions)))))
               (let ((expl (new (explorer-class~ text) (get-model~ text))))
                 (unless (remove-import-invoice~ expl import)
                   (debug 'unable 'to 'remove import)))))
            (else
             (debug 'ambiguous unit)))))
      
      (let ((all (call-with-input-file "~/walk-unreferenced.jazz" read)))
        (for-each (lambda (info)
                    (bind (unit-name . unreferenced) info
                      (when (or (not unit) (eq? unit-name unit))
                        (for-each (lambda (import)
                                    (when (or (not targets) (memq? import targets))
                                      (remove-import unit-name import)))
                                  unreferenced))))
                  all))))
  
  
  ;;;
  ;;;; Recent Files
  ;;;
  
  
  (definition protected minute
    60)
  
  (definition protected hour
    (* 60 minute))
  
  (definition protected day
    (* 24 hour))
  
  (definition protected week
    (* 7 day))
  
  
  (method (recent-files . rest)
    (bind-keywords ((directory {Directory Jazz}) (elapse #f)) rest
      (let ((results (get-search-results~ (get-application)))
            (resultset (new Search-Resultset (new Search '() #f)))
            (from (subtract-duration (current-time) (make-time time-duration 0 (or elapse 3600))))
            (ignored-toplevel-dirnames '("Crashes" "Debug" "Release" "Work" "bin" "build" "bootstrap" "deploy" "gambit" ".git"))
            (ignored-extensions Binary-Extensions)
            (directory-feedback (make-directory-feedback)))
        (iterate-directory~ directory
          (lambda (file)
            (directory-feedback file)
            (when (and (not (member? (get-extension~ file) ignored-extensions test: extension=?))
                       (time>? (get-modification-time~ file) from))
              (add-result~ resultset (new File-Search-Result resultset file))))
          ignored-toplevel-dirnames: ignored-toplevel-dirnames)
        (let ((count (length (get-results~ resultset))))
          (user-feedback "Found {a} file{a}" count (format-plural count))
          (select-results~ results resultset)))))
  
  
  (method (search-licenseless-files)
    (let ((results (get-search-results~ (get-application)))
          (resultset (new Search-Resultset (new Search '() #f)))
          (directory-feedback (make-directory-feedback)))
      (iterate-directory~ {Directory Jazz}
        (lambda (file)
          (let ((ext (get-extension~ file)))
            (when (member? ext '("jazz") test: extension=?)
              (directory-feedback file)
              (call-with-input-file (path-settings file eol-encoding: 'cr-lf readtable: jazz-readtable)
                (lambda (port)
                  (let ((line (read-line port)))
                    (when (and (not (eof-object? line))
                               (not (equal? line ";;;==============")))
                      (add-result~ resultset (new File-Search-Result resultset file))))))))))
      (let ((count (length (get-results~ resultset))))
        (user-feedback "Found {a} file{a}" count (format-plural count))
        (select-results~ results resultset))))
  
  
  (method (search-trailing-whitespace . rest)
    (bind-keywords ((directory {Directory Jazz})) rest
      (let ((results (get-search-results~ (get-application)))
            (resultset (new Search-Resultset (new Search '() #f)))
            (ignored-toplevel-dirnames '("Crashes" "Debug" "Release" "Work" "bin" "build" "bootstrap" "deploy" "gambit" ".git"))
            (ignored-extensions Binary-Extensions)
            (extensions (effective-extensions :textual))
            (directory-feedback (make-directory-feedback)))
        (iterate-directory~ directory
          (lambda (file)
            (let ((extension (get-extension~ file)))
              (when (and (member? extension extensions test: extension=?)
                         (not (member? extension ignored-extensions test: extension=?)))
                (directory-feedback file)
                (let ((lines (load-lines~ file char-encoding-errors: #f)))
                  (for-each (lambda (line rank)
                              (continuation-capture
                                (lambda (done)
                                  (let ((trailing-whitespace #f))
                                    (loop (for n from (- (cardinality line) 1) downto 0)
                                          (do (let ((c (element line n)))
                                                (if (whitespace? c)
                                                    (set! trailing-whitespace #t)
                                                  (when trailing-whitespace
                                                    (let ((pos (new Cell rank (+ n 1))))
                                                      (add-result~ resultset (new File-Search-Result resultset file position: pos))))
                                                  (continuation-return done #f)))))))))
                            lines
                            (naturals 0 (length lines)))))))
          ignored-toplevel-dirnames: ignored-toplevel-dirnames)
        (let ((count (length (get-results~ resultset))))
          (user-feedback "Found {a} file{a}" count (format-plural count))
          (select-results~ results resultset)))))
  
  
  (method (inspect-binary file)
    (call-with-input-file (path-settings file)
      (lambda (port)
        (debug (read-all port read-u8)))))

  
  ;;;
  ;;;; Console
  ;;;
  
  
  (method override (console-command command arguments)
    (case command
      ;; Documentation
      ((:doc) (edit-documentation (car arguments)))
      ;; Macro
      ((:expand) (expand (car arguments)))
      ((:expand-scheme) (expand-scheme (car arguments)))
      ;; Various
      ((:compile) (compile arguments))
      ((:exit) (exit) #t)
      (else (nextmethod command arguments))))
  
  
  (method (edit-documentation name)
    (let ((appl (get-application)))
      (edit-documentation~ appl name)))

  
  (method (expand form)
    (unimplemented)
    @convert
    (bind (name . arguments) form
      (let* ((try (lambda (object) (category-field (class-of object) name)))
             (definition (or (try Language) (try Java))))
        (if (null? definition)
            (begin
              (debug form)
              #t)
          (let ((macro (definition-value definition)))
            (cond ((syntax-macro? macro) (debug (apply macro arguments)))
                  ((macro? macro) (debug (macro arguments)))
                  (else (debug (apply macro arguments))))
            #t)))))
  
  
  (method (expand-scheme form)
    (unimplemented)
    @convert
    (bind (name . arguments) form
      (let* ((try (lambda (package) (category-field (class-of package) name)))
             (macro (definition-value (or (try Kernel)))))
        (cond ((syntax-macro? macro) (debug (apply macro arguments)))
              ((macro? macro) (debug (macro arguments))))
        #t)))
  
  
  (method (compile classes)
    (unimplemented)
    @convert
    (compile-classes classes))
    
  
  ;;;
  ;;;; Text
  ;;;
  
  
  (method (utf8 text)
    (let ((count 1))
      (for-each (lambda (line)
                  (when (some? (lambda (char)
                                 (>= (char->integer char) 128))
                               line)
                    (debug count line (map char->integer (coerce line List))))
                  (increase! count))
                (get-content~ text))))
    
  
  (method (remove-trailing-whitespace text)
    (let ((count 0))
      (for-each-paragraph~ text
        (lambda (line row)
          (let ((str (paragraph-string~ text line)))
            (unless (whitespace? str)
              (let ((trailer (extract-trailer str whitespace?)))
                (unless (empty-string? trailer)
                  (let ((end (cardinality str)))
                    (delete-range~ text (new Range$Cell$ (new Cell line (- end (cardinality trailer))) (new Cell line end)))
                    (increase! count))))))))
      (user-feedback "Removed {a} trailing whitespace" (format-cardinality count))))
    
  
  ;;;
  ;;;; Units
  ;;;
  
  
  (method (package-units package)
    (define (package-product package)
      (assq (package-name package) (package-products package)))
    
    (let ((fact (new List-Factory)))
      (let ((product (package-product package)))
        (if product
            (let ((pair (assq 'update (cdr product))))
              (if (not pair)
                  '()
                (cdr pair)))
          (debug "Unable to find package product for" (package-name package))
          '()))))
  
  
  (method (unit-subunits unit-name)
    (load-runtime)
    (let ((subunits '()))
      (for-each-subunit unit-name
        (lambda (subunit-name declaration phase)
          (set! subunits (cons subunit-name subunits))))
      subunits))


  ;;;
  ;;;; Tabulate
  ;;;
  
  
  (method override (test9)
    (let ((text (get-focus)))
      (if (is-not? text Jazz-Text-View)
          (bell)
        (internal-tabulate text))))
  
  
  (method (internal-tabulate text)
    (define (collect-maxes explorer)
      (let* ((maxes '())
             (update-maxes
               (lambda (sizes)
                 (set! maxes (if (null? maxes)
                                 sizes
                               (map max maxes sizes))))))
        (while (enter-composite~ explorer)
          (let ((sizes (new List-Factory)))
            (while (forward-expr~ explorer)
              (let ((size (- (get-col~ (get-end~ explorer)) (get-col~ (get-start~ explorer)))))
                (put~ sizes size)))
            (update-maxes (get-output~ sizes)))
          (exit-composite~ explorer))
        maxes))
    
    (define (tabulate-columns text explorer maxes)
      (let ((undoer (get-undoer~ text)))
        (with-atomic-undo~ undoer
          (lambda ()
            (while (enter-composite~ explorer)
              (let ((maxes maxes))
                (while (forward-expr~ explorer)
                  (let* ((max (car maxes))
                         (size (- (get-col~ (get-end~ explorer)) (get-col~ (get-start~ explorer))))
                         (diff (- max size)))
                    (when (> diff 0)
                      (let ((end (get-end~ explorer)))
                        (replace-text~ text (new Range$Cell$ end end)
                          (list (make-string diff #\space)))))
                    (set! maxes (cdr maxes)))))
              (exit-composite~ explorer))))))
    
    (let* ((pos (get-start~ text))
           (range (new Range$Cell$ pos pos))
           (explorer (new Jazz-Explorer text range: range))
           (maxes (collect-maxes explorer)))
      (set-range~ explorer range)
      (tabulate-columns text explorer maxes)))
  
  
  ;;;
  ;;;; Reprint Form
  ;;;
  
  
  (method (reprint-toplevel-form (text: text #f) (space-tag?: space-tag? #t) (space-name?: space-name? #t))
    (let ((text (or text (current-document))))
      (if (is-not? text Jazz-Text-View)
          (bell)
        (let* ((range (toplevel-expr~ text (get-end~ text)))
               (str (get-string~ text range))
               (form (jml->form (with-jazz-readtable (lambda () (read-string-element str))))))
          (if (is-not? form Form)
              (bell)
            (let* ((designer (new Designer form: form))
                   (output (saved-form~ designer 0 space-tag?: space-tag? space-name?: space-name?)))
              (if (string=? str output)
                  (user-message "No changes to toplevel form")
                (with-update-locked~ text
                  (lambda ()
                    (set-selection~ text range)
                    (insert-string~ text output)
                    (user-message "Toplevel form reprinted"))))))))))
  
  
  (method (reprint-selected-form (text: text #f) (space-tag?: space-tag? #t) (space-name?: space-name? #t))
    (let ((text (or text (current-document))))
      (if (is-not? text Jazz-Text-View)
          (bell)
        (let* ((range (get-selection~ text))
               (str (get-string~ text range))
               (form (jml->form (with-jazz-readtable (lambda () (read-string-element str))))))
          (if (is-not? form Form)
              (bell)
            (let* ((designer (new Designer form: form))
                   (output (saved-form~ designer 0 include-form?: #f space-tag?: space-tag? space-name?: space-name?)))
              (if (string=? str output)
                  (user-message "No changes to selected form")
                (with-update-locked~ text
                  (lambda ()
                    (set-selection~ text range)
                    (insert-string~ text output)
                    (user-message "Selected form reprinted"))))))))))
  
  
  (method (reprint-form (space-tag?: space-tag? #t) (space-name?: space-name? #t))
    (define (form-range text)
      (let ((expl (new (explorer-class~ text) text range: (get-selection~ text))))
        (with-safe-explore
          (lambda ()
            (outer-expr~ expl)
            (let (iterate)
              (let ((range (get-range~ expl))
                    (marked (get-marked~ expl)))
                (when (or (starts-with? marked "(<")
                          (starts-with? marked "<"))
                  (outer-expr~ expl)
                  (or (when (> (get-col~ (get-start~ range)) 0)
                        (iterate))
                      range))))))))
    
    (let ((text (current-document)))
      (let ((range (and (is? text Jazz-Text-View) (form-range text))))
        (if (not range)
            (bell)
          (let ((string (get-string~ text range))
                (level (quotient (get-col~ (get-start~ range)) 2)))
            (let ((form (jml->form (with-jazz-readtable (lambda () (read-string-element string))))))
              (if (is-not? form Form)
                  (bell)
                (let* ((designer (new Designer form: form))
                       (output (saved-form~ designer level space-tag?: space-tag? space-name?: space-name? indent-first?: #f)))
                  (with-update-locked~ text
                    (lambda ()
                      (set-selection~ text range)
                      (insert-string~ text output)
                      (user-message "Selected form reprinted")))))))))))

  
  ;;;
  ;;;; Activities
  ;;;
  
  
  (method (clear-activities)
    (let* ((manager (get-activity-manager))
           (reporters (get-reporters~ manager)))
      (for-each (lambda (reporter)
                  (unregister-activity~ manager reporter))
                reporters)))

  
  ;;;
  ;;;; Dead Code
  ;;;
  
  
  (method (determine-dead-code project-names)
    (define (collect-potentials)
      (let ((workbench (get-workbench))
            (cataloguer (get-cataloguer~ (get-application)))
            (potentials '()))
        (define (process-project project-name)
          (user-feedback "Processing {a}..." project-name)
          (let ((catalog (get-catalog~ (require-project~ workbench project-name))))
            (iterate-definitions~ catalog
              (lambda (name entries)
                (let ((references (get-references~ cataloguer name)))
                  (let ((count (length references)))
                    (when (= count 0)
                      (for-each (lambda (entry)
                                  (let ((locator (->locator~ entry)))
                                    (when (consider-declaration? locator)
                                      (set! potentials (cons (cons (get-kind~ entry) locator) potentials)))))
                                entries))))))))
        
        (define (consider-declaration? locator)
          (and (not (search (symbol->string locator) "cocoa"))
               (not (search (symbol->string locator) "x11"))
               (let ((declaration (locator->declaration locator)))
                 (and declaration
                      (or (is? declaration Define-Declaration)
                          (is? declaration Definition-Declaration)
                          (is? declaration Method-Declaration)
                          (is? declaration Category-Declaration))))))
        
        (for-each process-project project-names)
        potentials))
    
    (define (output-potentials potentials)
      (call-with-output-file (path-settings {File Home "potentials.jazz"})
        (lambda (output)
          (let ((first? #t))
            (define (output-parts parts)
              (for-each output-part (sort string<? parts key: (lambda (part) (symbol->string (car part))))))
            
            (define (output-part part)
              (bind (key . elements) part
                (if (eq? key 'accessor)
                    (output-parts (partition elements key: (lambda (element)
                                                             (let ((name (symbol->string (reference-name (cdr element)))))
                                                               (cond ((starts-with? name "get-") 'get)
                                                                     ((starts-with? name "set-") 'set)
                                                                     (else 'accessor))))))
                  (if first?
                      (set! first? #f)
                    (format output "{%}{%}"))
                  (format output ";;;{%}")
                  (format output ";;;; {a}{%}" key)
                  (format output ";;;{%}")
                  (format output "{%}{%}")
                  (for-each (lambda (potential)
                              (bind (kind . locator) potential
                                (format output "{a} {a}{%}" kind locator)))
                            (sort string<? elements key: (lambda (element) (symbol->string (cdr element))))))))
            
            (output-parts (partition potentials key: car))))))
    
    (let ((potentials (collect-potentials)))
      (output-potentials potentials)
      (let ((count (length potentials)))
        (user-feedback "Found {a} potential dead code" count)
        (when (> count 0)
          (edit-document~ (get-application) {File Home "potentials.jazz"})))))

  
  ;;;
  ;;;; SQL
  ;;;
  
  
  @wait
  (method (format-sql value)
    (cond ((string? value) (format "'{a}'" value))
          (else (error "Unable to format SQL value: {s}" value))))
  
  
  @wait
  (method (output-tables tables (name: name #f) (select?: select? #t))
    (let ((text (get-sql-console-text)))
      (output-tables~ text tables name))
    (when select?
      (let ((appl (get-application)))
        (select-workspace~ appl 'sql))))
  
  
  @wait
  (method (output-table table (name: name #f) (select?: select? #t))
    (output-tables (list table) name: name select?: select?))
  
  
  @wait
  (method (log-tables tables)
    (for-each log-table tables))
  
  
  @wait
  (method (log-table table)
    (log-entry name: (get-name~ table) data: table))
  
  
  ;;;
  ;;;; Glue
  ;;;
  
  
  @wait
  (method (glue n (kind 1))
    (let* ((appl (get-application))
           (stack (get-clipboard-ring~ appl))
           (lst (map get-text~ (cons (get-clipboard) (subseq stack 0 (- n 1)))))
           (glued (case kind
                    ((1) (format "{l}" lst))
                    ((2) (join lst ", ")))))
      (set-clipboard-text glued)
      (user-message "Clipboard set to {a}" glued)))


  ;;;
  ;;;; Directory
  ;;;
  
  
  (method (collect-extensions dir)
    (let ((extensions '()))
      (iterate-directory~ dir
        (lambda (file)
          (let ((ext (get-extension~ file)))
            (when (and ext (not (member? ext extensions test: extension=?)))
              (set! extensions (cons (downcase ext) extensions))))))
      (sort string<? extensions)))
  
  
  ;;;
  ;;;; Aliases
  ;;;
  
  
  (method (report-aliases)
    (let* ((table (get-aliases))
           (aliases (table-keys/values table)))
      (newline)
      (for-each (lambda (info)
                  (bind (key . value) info
                    (format :console "{s} : {l}{%}" key value)))
                (sort < aliases key: car)))
    (fresh-prompt~ (get-application)))


  ;;;
  ;;;; Source
  ;;;
  
  
  @wait
  (method (get-source class-name)
    (or (find-document class-name)
        (find-file class-name)))


  @wait
  (method (find-document class-name)
    (unless (get-manifest-source class-name)
      (let ((target (->string class-name)))
        (continuation-capture
          (lambda (return)
            (for-each (lambda (frame)
                        (when (is? frame Frame-Host)
                          (let ((guest (get-guest~ frame)))
                            (when (is? guest Document)
                              (let ((moniker (get-moniker~ (get-document-controller~ guest))))
                                (when moniker
                                  (let ((base (get-base~ moniker))
                                        (ext (get-extension~ moniker)))
                                    (when (and (= base target)
                                               (extension=? ext "jazz"))
                                      (continuation-return return moniker)))))))))
                      (all-frames include-invisibles?: #t))
            #f)))))
  
  
  @wait
  (method (find-file class-name)
    (let ((name (tie "{class-name}.jazz")))
      (continuation-capture
        (lambda (return)
          (for-each (lambda (dir)
                      (let ((file (new-file~ dir name)))
                        (when (exists?~ file)
                          (continuation-return return file))))
                    (source-directories))
          #f))))
  
  
  @wait
  (method protected virtual (source-directories)
    '())))
