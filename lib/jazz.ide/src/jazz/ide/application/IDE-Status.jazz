;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; IDE Status
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.ide.application.IDE-Status jazz


(import (jazz.application)
        (jazz.debugger)
        (jazz.ide)
        (jazz.jml)
        (jazz.library)
        (jazz.ui)
        (jazz.ui.activity)
        (jazz.ui.skin)
        (jazz.ui.workspace))


(class IDE-Status extends Status-Toolbar


  (form
    (<install>
      (<Status-Label> name: message       size: {Dimension 782 20} location: center)
      (<Status-Label> name: search-result title: "" size: {Dimension 200 20} location: tail mouse-down-handler: {Event-Handler :form on-mouse-down} context-menu-handler: {Event-Handler :form on-context-menu})
      (<Status-Label> name: process       size: {Dimension 150 20} location: tail mouse-down-handler: {Event-Handler :form on-mouse-down} context-menu-handler: {Event-Handler :form on-context-menu})
      (<Status-Label> name: workspace     title: "Default" size: {Dimension 150 20} location: tail icon: {Image-Resource "Workspace"} mouse-down-handler: {Event-Handler :form on-mouse-down} context-menu-handler: {Event-Handler :form on-context-menu})
      (<Status-Label> name: activities    visible?: #f title: "No registered activities" size: {Dimension 250 20} location: tail icon: {Image-Resource "Task"} mouse-down-handler: {Event-Handler :form on-mouse-down} context-menu-handler: {Event-Handler :form on-context-menu})
      @wait
      (<Status-Label> name: locales       title: "English" size: {Dimension 100 20} location: tail icon: {Image-Resource "Trait"} mouse-down-handler: {Event-Handler :form on-mouse-down} context-menu-handler: {Event-Handler :form on-context-menu})
      (<Status-Label> name: skin          title: "Skin" size: {Dimension 100 20} location: tail icon: {Image-Resource "Grab"} mouse-down-handler: {Event-Handler :form on-mouse-down} context-menu-handler: {Event-Handler :form on-context-menu})))

  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method protected virtual (on-mouse-down evt)
    (let* ((sender (get-sender~ evt))
           (name (get-name~ sender))
           (pos (acquire sender (get-position~ evt))))
      (case name
        ((process) (popup-processes-menu self pos))
        ((workspace) (popup-workspaces-menu self pos))
        @wait
        ((activities) (toggle-visible?~ (get-activity-manager)))
        @wait
        ((locales) (track-popup-menu (new Locales-Menu) pos))
        ((skin) (track-popup-menu (new Skin-Menu) pos)))))


  (method protected virtual (on-context-menu evt)
    (let* ((sender (get-sender~ evt))
           (name (get-name~ sender))
           (pos (acquire sender (get-position~ evt))))
      (case name
        ((process) (popup-processes-menu self pos))
        ((workspace) (popup-workspaces-menu self pos))
        @wait
        ((activities) (track-popup-menu (new Activities-Menu) pos))
        @wait
        ((locales) (track-popup-menu (new Locales-Menu) pos))
        ((skin) (track-popup-menu (new Skin-Menu) pos)))))

  
  ;;;
  ;;;; Host
  ;;;
  
  
  (method meta override (host-icon)
    {Image-Resource "Document"})

  
  ;;;
  ;;;; Component
  ;;;


  (method override (install rest)
    (nextmethod rest)
    (update-focused-process))


  ;;;
  ;;;; Focused
  ;;;


  (method public (update-focused-process)
    (let ((label (locate 'process))
          (manager (get-debugger-manager)))
      (let ((focused-mode? (get-focused-mode?~ manager))
            (focused (get-focused-process~ manager)))
        (cond (focused-mode?
               (set-icon~ label (if focused {Image-Resource "Script"} #f))
               (set-title~ label (if focused (present~ focused) "")))
              (else
               (set-icon~ label #f)
               (set-title~ label "")))))))


;;;
;;;; Processes
;;;


(definition (popup-processes-menu view pos)
  (track-popup-menu~ view (new Processes-Menu) pos))


(class Processes-Menu extends Context-Menu
  
  
  (method override (install rest)
    (nextmethod rest)
    (insert-processes))
  
  
  (method (insert-processes)
    (define (process-image manager process live?) ;; dup from processes update
      (cond ((not live?)
             {Image-Resource "ProcessDead"})
            ((not (process-received-filenames?~ manager process))
             {Image-Resource "Link"})
            (else
             {Image-Resource "Script"})))
    
    (let ((manager (get-debugger-manager)))
      (for-each-process~ manager
        (lambda (debugger process live? focused?)
          (let ((title (present~ process))
                (icon (process-image manager process live?)))
            (let ((item (new Radio-Item parent: self title: title icon: icon action-handler: (new Event-Handler target: self method-name: 'on-action properties: (list process: process)))))
              (set-enabled?~ item live?)
              (set-selected?~ item focused?)))))))
  
  
  (method (on-action evt)
    (let ((manager (get-debugger-manager))
          (process (get-property~ evt process:)))
      (focus-process~ manager process))))


;;;
;;;; Workspaces
;;;


(definition (popup-workspaces-menu view pos)
  (let ((preferences (get-workspaces-preferences error?: #f)))
    (when preferences
      (let ((workspaces (get-visible-children~ preferences)))
        (when (>= (length workspaces) 1)
          (track-popup-menu~ view (new Workspaces-Menu) pos))))))


(class Workspaces-Menu extends Context-Menu
  
  
  (method override (install rest)
    (define (insert-workspaces)
      (let* ((selected (selected-workspace))
             (preferences (get-workspaces-preferences))
             (workspaces (get-visible-children~ preferences))
             (default (find-component~ preferences 'default)))
        (when default
          (insert-workspace default (eq? default selected))
          (new Separator-Item parent: self))
        (for-each (lambda (workspace)
                    (unless (eq? workspace default)
                      (if (is? workspace Separator)
                          (new Separator-Item parent: self)
                        (insert-workspace workspace (eq? workspace selected)))))
                  workspaces)))
    
    (define (insert-workspace workspace selected?)
      (let* ((title (if workspace (get-presentation-property~ workspace) "None"))
             (icon (if workspace (get-icon~ workspace) {Image-Resource "Empty"}))
             (item (new Radio-Item parent: self title: title icon: icon action-handler: (new Event-Handler target: self method-name: 'on-action properties: (list workspace: workspace)))))
        (when selected?
          (set-selected?~ item #t))))
    
    (nextmethod rest)
    (insert-workspaces))
  
  
  (method (on-action evt)
    (let ((workspace (get-property~ evt workspace:)))
      (apply-preferences~ workspace))))


;;;
;;;; Activities-Menu
;;;


(class Activities-Menu extends Context-Menu
  
  
  (form
    (<install>                           title: "Activities"
      (<Label-Item>     name: open       title: "Open" action-handler: {Event-Handler :form on-open})
      (<Label-Item>     name: close      title: "Close" action-handler: {Event-Handler :form on-close})
      (<Separator-Item>)
      (<Label-Item>     name: clear-done title: "Clear Done" icon: {Image-Resource "Done"} action-handler: {Event-Handler :form on-clear-done})))
  
  
  (method (on-open evt)
    (show~ (get-activity-manager)))
  
  
  (method (on-close evt)
    (hide~ (get-activity-manager)))
  
  
  (method (on-clear-done evt)
    (clear-done~ (get-activity-manager))))


;;;
;;;; Skin-Menu
;;;


(class Skin-Menu extends Context-Menu
  
  
  (method override (install rest)
    (define (insert-skins)
      (let ((current (current-skin))
            (skins (get-children~ (get-skins))))
        (for-each (lambda (skin)
                    (insert-skin skin (eq? skin current)))
                  skins)))
    
    (define (insert-skin skin checked?)
      (let* ((title (present~ skin))
             (item (new Check-Item parent: self title: title action-handler: (new Event-Handler target: self method-name: 'on-action properties: (list skin: skin)))))
        (when checked?
          (set-checked?~ item #t))))
    
    (nextmethod rest)
    (insert-skins))
  
  
  (method (on-action evt)
    (set-skin (get-property~ evt skin:))
    (redraw-window~ (get-toplevel)))))
