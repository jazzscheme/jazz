;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Integrated Development Environment
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.ide.application.IDE jazz


(import (jazz.catalog)
        (jazz.console)
        (jazz.debuggee)
        (jazz.debugger)
        (jazz.debugger.jazz)
        (jazz.debugger.jazz.stub)
        (jazz.designer)
        (jazz.editor.jazz)
        (jazz.editor.lisp)
        (jazz.editor.sql)
        (jazz.editor.sql.view)
        (jazz.git.ui)
        (jazz.groupware)
        (jazz.ide)
        (jazz.ide.login)
        (jazz.io)
        (jazz.jml)
        (jazz.jrm)
        (jazz.library)
        (jazz.library.component)
        (jazz.locale)
        (jazz.project)
        (jazz.recorder)
        (jazz.system)
        (jazz.system.application)
        (jazz.ui)
        (jazz.ui.clipboard)
        (jazz.ui.dialog)
        (jazz.ui.view)
        (jazz.ui.window)
        (jazz.ui.workspace))


(class IDE extends Application


  (slot local-debugger    initialize #f)
  (slot snapshot-debugger initialize #f)
  (slot cataloguer        initialize (new Workbench-Cataloguer))
  (slot recorder          initialize (new Macro-Recorder))
  
  
  (method override (install-process)
    (nextmethod)
    (start-debuggers))


  (method override (prepare-workbench)
    (nextmethod)
    (setup-workbench))
  
  
  (method override (finalize-process)
    (nextmethod)
    (add-application-listener 'workspace (new Event-Handler target: self method-name: 'on-workspace)))
  
  
  (method override (finish-process)
    (define (setup-caption-base)
      (let ((toplevel-title (toplevel-title)))
        (cond (toplevel-title (set-caption-base~ toplevel toplevel-title))
              ((not (get-caption-base~ toplevel)) (set-caption-base~ toplevel "Application")))))
    
    (define (toplevel-title)
      (if profile
          (toplevel-title~ profile)
        (get-toplevel-title~ (get-preferences #f))))
    
    (set-debugger-manager (new Debugger-Manager)) ;; hack!!!!!
    (nextmethod)
    (setup-caption-base)
    (preload-catalogs))
  
  
  (method protected virtual (preload-catalogs)
    ;; doing this after the run loop is started ensures
    ;; that the null? test on the load-stack is correct
    (delay-event
      (lambda ()
        (load-catalogs-threaded~ (get-workbench)))))

  
  (method override (conclude-environment)
    (nextmethod)
    ;; toggle terminal is windows only at the moment
    (let ((menu (find-menu 'debug)))
      (when menu
        (let ((label (find-component~ menu 'toggle-terminal)))
          (when (and label (neq? kernel-platform 'windows))
            (set-visible?~ label #f)
            (layout-menu~ menu)))))
    ;; do this at the last moment possible because any error beyond this point
    ;; will be handled by the IDE itself which must thus be fully functional
    (when (and (use-local-debugger?) (not (get-controller-debugger)))
      (add-debugger-release 'modal
        (lambda ()
          (enable-window~ (get-toplevel))
          (set-current-modal #f)
          (update-modal-actions)))
      (attach-to-controller (get-local-register) #t)
      (with-system-exception-debugger
        (lambda ()
          (ready-to-controller #f)
          (current-input-port (console-input-port))
          (current-output-port (console-output-port))))))


  (method override (close-environment)
    (unless (reloading-process?)
      (detach-debugger-processes))
    (nextmethod))

  
  ;;;
  ;;;; Access
  ;;;
  
  
  (method public (get-backward-history)
    (get-backward-history~ history-manager))
  
  
  (method public (get-forward-history)
    (get-forward-history~ history-manager))


  ;;;
  ;;;; Recording
  ;;;
  
  
  (method override (get-recorder)
    recorder)


  ;;;
  ;;;; Profile
  ;;;
  
  
  (method override (use-profile?)
    #t)
  
  
  (cond-expand
    ;; quicky to test carbon as dialogs are not yet implemented
    (carbon
      (method (use-profile-logging?)
        #f))
    (else
      (method override (use-profile-logging?)
        #t)))
  
  
  (method override (choose-profile-login)
    (choose-login invite: (process-name)))

  
  ;;;
  ;;;; Frames
  ;;;


  (method override (default-frame-class)
    Plain-Text-View)


  (method override (known-extension-frame-class ext)
    (cond ((member? ext '("txt" "text") test: extension=?) Plain-Text-View)
          ((member? ext '("ftx") test: extension=?) Plain-Formatted-Text-View)
          ((member? ext '("c" "cc" "cp" "cpp" "cxx" "h" "hpp" "rc" "i") test: extension=?) jazz.editor.c:C-Text-View)
    @wait ((member? ext '("prop") test: extension=?) jazz.editor.prop:Prop-Text-View)
    @wait ((member? ext '("java") test: extension=?) jazz.editor.java:Java-Text-View)
    @wait ((member? ext '("cs") test: extension=?) jazz.editor.csharp:CSharp-Text-View)
    @wait ((member? ext '("html" "htm")) jazz.editor.html:HTML-Text-View)
    @wait ((member? ext '("xml")) Plain-Text-View @wait XML-Text-View)
          ((member? ext '("sql")) jazz.editor.sql:SQL-Text-View)
    @wait ((member? ext '("css")) jazz.editor.css:CSS-Text-View)
    @wait ((member? ext '("properties")) jazz.editor.properties:Properties-Text-View)
    @wait ((member? ext '("js")) jazz.editor.javascript:JavaScript-Text-View)
    @wait ((member? ext '("lua")) jazz.editor.lua:Lua-Text-View)
    @wait ((member? ext '("py")) jazz.editor.python:Python-Text-View)
          ((member? ext '("tex")) jazz.editor.tex:Tex-Text-View)
    @wait ((member? ext '("bmp" "wmf" "emf" "jpg" "jpeg" "png" "tif" "tiff") test: extension=?) jazz.ui:Image-View)
          ((member? ext '("diff" "patch") test: extension=?) jazz.editor.diff:Diff-Text-View)
    @wait ((member? ext '("tpl") test: extension=?) jazz.editor.java:Java-Text-View)
          ((member? ext Scheme-Extensions test: extension=?) jazz.editor.scheme:Scheme-Text-View)
          ((member? ext CommonLisp-Extensions test: extension=?) jazz.editor.commonlisp:CommonLisp-Text-View)
          ((member? ext Jazz-Extensions test: extension=?) Jazz-Text-View)
          ((member? ext '("jmf") test: extension=?) View-Editor)
          (else (nextmethod ext))))
  
  
  (method override (unknown-extension-frame-class)
    Plain-Text-View)


  ;;;
  ;;;; Files
  ;;;
  
  
  (method override (edit-file file)
    (let ((ext (get-extension~ file)))
      (cond ((extension=? ext "snapshot") (edit-snapshot file))
            (else (nextmethod file)))))
  
  
  ;;;
  ;;;; Snapshot
  ;;;
  
  
  (method (edit-snapshot file)
    (open-snapshot~ (get-processes-view) file)
    (select-workspace 'debugger))
  
  
  ;;;
  ;;;; Cataloguer
  ;;;


  (method override (get-cataloguer)
    cataloguer)
  
  
  ;;;
  ;;;; History
  ;;;


  (method public (get-history-manager)
    history-manager)


  ;;;
  ;;;; Stage
  ;;;


  (method override (stage-class)
    Wallpaper-Stage)

  
  ;;;
  ;;;; Search
  ;;;


  (method public (set-search-result icon msg)
    (let ((status-bar (find-status-bar)))
      (when status-bar
        (let ((label (find-component~ status-bar 'search-result)))
          (set-icon~ label icon)
          (set-title~ label (cond ((not msg) "")
                                  ((is? msg Locales) msg)
                                  (else (->string msg))))))))


  ;;;
  ;;;; Actions
  ;;;
  

  (method override (class-actions)
    (cons (find-actions 'ide)
          (nextmethod)))
  
  
  ;;;
  ;;;; Termination
  ;;;
  
  
  (method override (terminate-process)
    (nextmethod)
    (when (use-local-debugger?)
      (unregister-object~ (get-local-register) 'debugger error?: #f)))


  ;;;
  ;;;; Environment
  ;;;
  
  
  (method override (save-environment)
    (nextmethod)
    (when (use-profile?)
      (save-catalogs~ cataloguer)))
  
  
  ;;;
  ;;;; Exit
  ;;;
  

  (method override (reload-process)
    (message-box "An IDE cannot be reloaded yet."))


  ;;;
  ;;;; Session
  ;;;

  
  @convert-to-session
  (method (load-session)
    (let ((dir (get-current-directory~ (get-preferences '(application session)))))
      (when dir
        (set-current-directory dir))))
  
  
  @convert-to-session
  (method (reload-opened-windows)
    @convert-to-session
    (for-each (lambda (info)
                (bind (class . properties) info
                  (bind-keywords ((file #f) . others) properties
                    (when (or (not file) (exists?~ file))
                      (reload-component class properties)))))
              (get-opened-windows~ (get-preferences '(application session)))))
    
  
  (method override (reload-component class properties)
    @to-convert
    (case class
      ((plain-text)          (apply new Plain-Text-Frame          properties))
      ((c-text)              (apply new C-Text-Frame              properties))
      ((java-text)           (apply new Java-Text-Frame           properties))
      ((prop-text)           (apply new Prop-Text-Frame           properties))
      ((html-text)           (apply new HTML-Text-Frame           properties))
      ((java-palette)        (apply new Java-Text-Palette         properties))
      ((image-frame)         (apply new Image-Frame               properties))
      ((browser-frame)       (apply new Browser-Frame             properties))
      ((projects-manager)    (apply new Projects-Manager          properties))
      @to-convert
      ((compare-directories) (apply new Compare-Directories-Frame properties))
      @to-convert
      ((compare-files)       (apply new Compare-Files-Frame       properties))
      (else                (nextmethod class properties))))

  
  ;;;
  ;;;; Workbench
  ;;;
  
  
  (definition Workbench-File
    {File Profile "settings" "Workbench.jml"})
  
  
  (method protected virtual (default-workbench)
    (new Workbench))
  
  
  (method public (setup-workbench)
    (define (load-workbench)
      (let ((file Workbench-File))
        (if (and (is-alias? 'Profile) (exists?~ file))
            (parameterize ((tag-reference-not-found-handler not-found-handler))
              (instantiate~ (read-form file)))
          (default-workbench))))
    
    (define (not-found-handler ref)
      (let ((form
              (<form>
                (<Project-Not-Found>))))
        (set-property~ form 'title (format "{a} not found" (parse~ ref)))
        form))
    
    (with-safe-execution "loading the workbench"
      (lambda ()
        (with-execution-context
          (lambda ()
            (set-workbench (load-workbench)))
          title: "Load Workbench"))
      continue-handler:
      (lambda (err)
        (set-workbench (default-workbench)))))
  
  
  (method public (update-project-actions)
    (let ((project (get-active-project))
          @wait
          (project-file (let ((guest (current-document)))
                          (when (and guest (is? guest Document))
                            (let ((moniker (get-moniker~ (get-document-controller~ guest))))
                              (when moniker
                                (let ((workbench (get-workbench)))
                                  (find-source~ workbench moniker)))))))
          ;; quicky as this should probably be a test on the above project-file
          ;; so files from different languages can be build in their own ways
          (unit-name (let ((guest (current-document)))
                       (when (and guest (is? guest Document))
                         (let ((moniker (get-moniker~ (get-document-controller~ guest))))
                           (when moniker
                             (find-pathname-unit (parse~ moniker))))))))
      @wait (set-action-enabled? {Action ide edit-project} project)
      @wait (set-action-enabled? {Action ide compile-file} (and project unit-name @wait project-file))
      (set-action-enabled? {Action ide build-project} project)
      @wait (set-action-enabled? {Action ide view-project-log} project)
      (set-action-enabled? {Action ide test-project} project)
      (set-action-enabled? {Action ide run-project} project)
      (set-action-enabled? {Action ide debug-project} project)
      (set-action-enabled? {Action ide debug-project-with} project)))
  
  
  (method public (run-project project (profile: profile #f) (command-action: command-action #f) (command-arguments: command-arguments #f) (show-console?: show-console? #f) (wait?: wait? #f))
    (project-run~ project
      profile: profile
      command-action: command-action
      command-arguments: command-arguments
      show-console?: show-console?
      wait?: wait?))


  (method public (debug-project project (executable: executable #f) (debugger-interactive?: debugger-interactive? #f) (profile: profile #f) (command-action: command-action #f) (command-arguments: command-arguments #f) (show-console?: show-console? #f) (wait?: wait? #f))
    (project-debug~ project
      executable: executable
      debugger-interactive?: debugger-interactive?
      profile: profile
      command-action: command-action
      command-arguments: command-arguments
      show-console?: show-console?
      wait?: wait?))


  ;;;
  ;;;; Console
  ;;;


  (method public (fresh-prompt (text: text #f))
    (let ((text (or text (get-console-text))))
      (when text
        (fresh-prompt~ text))))
  
  
  (method package (on-console evt)
    (let ((focus (get-focus))
          (text (show-console)))
      (when (and text (eq? text focus))
        (cond ((or (not (at-end?~ text))
                   (extended?~ (last-block~ text)))
               (fresh-prompt~ text))
              ((not (cell-displayed?~ text (get-end~ text)))
               (ensure-displayed~ text))
              (else
               (select-next-console~ (get-console-manager)))))))
  
  
  (method public (show-console (class: class Lisp-Console-Manager)
                               (workspace: workspace 'home)
                               (focus?: focus? #t))
    (let ((manager (select-docked class workspace: workspace)))
      (when (and manager focus?)
        (let ((text (get-text~ manager)))
          (if (not text)
              (bell)
            (acquire-focus~ text))
          text))))
  
  
  (method package (on-clear-console evt)
    (clear-console~ (get-console-text)))
  
  
  (method package (on-sql-console evt)
    (let ((had-focus? (is? (get-focus) SQL-Console-Text-View)))
      (show-console class: SQL-Console-Manager workspace: 'sql)
      (when had-focus?
        (fresh-prompt text: (get-sql-console-text)))))
  
  
  (method (on-sql-connections evt)
    (select-docked SQL-Connections-Manager workspace: 'sql focus?: #t))
  
  
  @convert
  (method (on-sql-inventory evt)
    (select-docked Inventory-Browser workspace: 'sql focus?: #t))
  
  
  (method (on-sql-tree-output evt)
    (select-docked SQL-Tree-Output 'sql focus?: #t))
  
  
  ;;;
  ;;;; Log
  ;;;
  
  
  (method override (get-output-log)
    (get-guest~ (singleton-docked Output-Log #f)))
    
  
  ;;;
  ;;;; Profiling
  ;;;
  
  
  (method public (get-profiling-results)
    (get-guest~ (singleton-docked Profile-Results #f)))

  
  ;;;
  ;;;; Register
  ;;;
  
  
  (method override (register-base-objects)
    (nextmethod)
    (when (use-local-debugger?)
      (register-object~ (get-local-register) 'debugger (new Jazz-Debugger-Local-Proxy local-debugger))))
  
  
  ;;;
  ;;;; Runtime
  ;;;
  
  
  (method override (evaluation-processes)
    (list (get-local-process)))

  
  ;;;
  ;;;; Debugger
  ;;;
  
  
  (method protected virtual (use-local-debugger?)
    #t)
    
  
  (method override (get-local-debugger)
    local-debugger)
    
  
  (method override (get-snapshot-debugger)
    snapshot-debugger)

  
  (method (start-debuggers)
    (when (use-local-debugger?)
      (when (not local-debugger)
        (set! local-debugger (new Jazz-Debugger))
        (start-debugger~ local-debugger)
        (register-debugger local-debugger)
        (set-current-debugger local-debugger))
      (when (not snapshot-debugger)
        (set! snapshot-debugger (new Snapshot-Debugger))
        (start-debugger~ snapshot-debugger)
        (register-debugger snapshot-debugger))))
  
  
  (method (detach-debugger-processes)
    (when (use-local-debugger?)
      (for-each detach-processes~ (get-debuggers))))
  
  
  ;;;
  ;;;; Debuggee
  ;;;
  
  
  (method override (initial-console-context)
    (let ((pref (get-preferences '(tools console) error?: #f)))
      (if (not pref)
          :process
        (get-context~ pref))))


  ;;;
  ;;;; Alias
  ;;;
  
  
  (method override (process-alias name)
    (case name
      ((:debugger) (current-debugger))
      ((:view-debugger) (current-view-debugger))
      ((:recorder) recorder)
      ((:workbench-manager) (get-workbench-manager))
      ((:repositories-manager) (get-repositories-manager))
      (else (nextmethod name))))
  

  ;;;
  ;;;; Favorites
  ;;;

  
  (method (on-open-favorite evt)
    (define (find-favorite char)
      (let ((pref (get-preferences 'favorites error?: #f)))
        (when pref
          (let ((favorites (get-children~ pref)))
            (find-if (lambda (favorite)
                       (eqv? (get-shortcut~ favorite) char))
                     favorites)))))
    
    (let* ((char (get-property~ evt char:))
           (favorite (find-favorite char)))
      (if (not favorite)
          (error "No favorite defined for {t}" char)
        (let ((target (get-target~ favorite)))
          (cond ((file? target)
                 (edit-document target))
                ((symbol? target)
                 (edit-definitions target))
                ((is? target Event-Handler)
                 (invoke~ target self (apply new Event :launch self (get-properties~ target))))
                ((is? target Action)
                 (call-action target self '() event: evt))
                (else
                 (error "Unable to open favorite target: {s}" target)))))))


  ;;;
  ;;;; Definitions
  ;;;

  
  (method override (edit-definitions object (class: class #f) (context: context #f) (workspace: workspace #f) (history-item: history-item #f))
    ;; todo: show only entries belonging to class
    (define (filter-entries entries class)
      entries)
    
    (if (and (symbol? object)
             (composite-reference? object))
        (let ((entry (locator->entry object)))
          (if (not entry)
              (bell)
            (edit~ entry)))
      (let ((name (->string object)))
        (let ((definitions (filter-entries (get-coalesced-definitions~ (get-cataloguer) name context: context) class)))
          (if (null? definitions)
              (bell)
            (add-history history-item)
            (case (length definitions)
              ((1) (edit~ (car definitions) workspace: workspace))
              (else (edit-definitions~ (get-search-manager) (new Projects-Search 'definitions name #f) definitions))))))))

  
  (method override (edit-references object (context: context #f) (history-item: history-item #f))
    (let ((name (->string object)))
      (let ((definitions (get-references~ (get-cataloguer) name context: context)))
        (if (null? definitions)
            (bell)
          (add-history history-item)
          (case (length definitions)
            ((1) (edit-textual-reference~ (car definitions) name))
            (else (edit-references~ (get-search-manager) (new Projects-Search 'references (make-search-context name whole-words?: #t) #f) definitions)))))))


  ;;;
  ;;;; Designer
  ;;;
  
  
  (method public virtual (view-editor-class)
    View-Editor)
  
  
  (method public virtual (component-editor-class)
    Grid-Component-Editor)
  
  
  (method public virtual (default-designer-imports)
    '(jazz.jml))
  
  
  (method public virtual (make-traits-toolbox class)
    (instantiate~
      (parse-form
        `(data jazz.ide.data.toolbox
         (form
           (<Toolbox> title: "Traits"))))))
  
  
  ;;;
  ;;;; Documentation
  ;;;
  
  
  (method public (get-documentation symbol)
    (when symbol
      (let ((cataloguer (get-documentation-cataloguer)))
        (when cataloguer
          (get-definition~ cataloguer symbol)))))
  
  
  (method public (edit-documentation symbol)
    (let ((doc (get-documentation symbol)))
      (if (not doc)
          (bell)
        (let* ((form (get-form~ doc))
               (moniker (get-origin~ (get-toplevel~ form)))
               (frame (edit-document moniker visible?: #f))
               (text (get-guest~ frame))
               (location (append (get-location~ form) (list 0)))
               (range (location-range~ text location)))
          (set-selection~ text range)
          (focus-host~ frame)))))


  @old-doc-editor
  (method public (edit-documentation location object text text-location)
    (let* ((class Doc-Editor)
           (editor (find-frame-guest class))
           (info (list location object text text-location)))
      (if (not editor)
          (new-frame class client: (get-documentation-catalog) entry: info)
        (set-entry~ editor info)
        (bring-to-front~ (get-host~ editor)))))
  
  
  ;;;
  ;;;; Results
  ;;;
  
  
  (method override (navigable-results)
    (list
      (get-guest~ (singleton-docked Search-Results #f))
      @wait
      (get-guest~ (singleton-docked Output-Log #f))
      (get-guest~ (singleton-docked Violations-Manager #f))))


  ;;;
  ;;;; Events
  ;;;
  
  
  (method (on-new-project evt)
    (add-project-to~ (get-workbench-manager) (get-workbench)))
  

  (method package (on-open-text evt)
    (receive (files char-encoding) (choose-file multiple-selection?: #t text?: #t)
      (for-each (lambda (file)
                  (edit-document file class: Jazz-Plain-Text-View char-encoding: char-encoding))
                (sort string>? files key: get-name~))))


  (method package (on-open-jazz-text evt)
    (receive (files char-encoding) (choose-file title: "Choose Jazz Text File" multiple-selection?: #t text?: #t)
      (for-each (lambda (file)
                  (edit-document file class: Jazz-Text-View char-encoding: char-encoding))
                (sort string>? files key: get-name~))))
  
  
  (method package (on-terminal-repl evt)
    (terminal-repl))
  
  
  (method package (on-toggle-terminal evt)
    (toggle-terminal))
  
  
  (method package (on-clear-terminal evt)
    (clear-terminal))


  (method package virtual (on-test evt)
    (test~ (get-profile)))


  (method package virtual (on-test-shift evt)
    (test-shift~ (get-profile)))


  (method (on-test-no evt)
    (let ((profile (get-profile)))
      (case (get-property~ evt no:)
        ((0) (test0~ profile))
        ((1) (test1~ profile))
        ((2) (test2~ profile))
        ((3) (test3~ profile))
        ((4) (test4~ profile))
        ((5) (test5~ profile))
        ((6) (test6~ profile))
        ((7) (test7~ profile))
        ((8) (test8~ profile))
        ((9) (test9~ profile)))))
  
  
  (method package (on-focus-next-process evt)
    (let ((focused (get-focused-process~ (get-debugger-manager)))
          (processes (collect-processes)))
      (define (next-process rank)
        (if (not rank)
            (first processes)
          (let ((next-rank (modulo (+ rank 1) (length processes))))
            (element processes next-rank))))
      
      (unless (null? processes)
        (focus-process~ (get-debugger-manager) (next-process (find processes focused test: debugged=?))))))
  
  
  (method package (on-focus-previous-process evt)
    (let ((focused (get-focused-process~ (get-debugger-manager)))
          (processes (collect-processes)))
      (define (previous-process rank)
        (if (not rank)
            (last processes)
          (let ((previous-rank (modulo (- rank 1) (length processes))))
            (element processes previous-rank))))
      
      (unless (null? processes)
        (focus-process~ (get-debugger-manager) (previous-process (find processes focused test: debugged=?))))))


  (method package (on-reload-process evt)
    (let ((debugged (get-focused-process~ (get-debugger-manager))))
      (if (not debugged)
          (bell)
        (reload-process~ debugged))))
  

  (method package (on-debug-views evt)
    (debug-views~ (current-view-debugger)))
  
  
  (method package (on-explore-views evt)
    (explore-views~ (current-view-debugger)))
  
  
  (method package (on-processes evt)
    (select-docked Processes-View workspace: 'debugger focus?: #t))
  
  
  (method package (on-threads evt)
    (select-docked Threads-View workspace: 'debugger focus?: #t))
  
  
  (method package (on-frames evt)
    (select-docked Frames-View workspace: 'debugger focus?: #t))
  
  
  (method package (on-restarts evt)
    (select-docked Restarts-View workspace: 'debugger focus?: #t))
  
  
  (method package (on-exception evt)
    (select-docked Exception-View workspace: 'debugger focus?: #t))
  
  
  (method package (on-variables evt)
    (select-docked Variables-View workspace: 'debugger focus?: #t))
  
  
  (method (on-resources-monitor evt)
    (show-palette Resources-Monitor))


  (method package (on-logs-viewer evt)
    (show-palette Logs-Viewer))
  
  
  (method (on-class-browser evt)
    (let* ((focus (get-focus))
           (text (if (is? focus Text-View) (get-selected-string~ focus) #f)))
      (show-palette Class-Browser initialize: (lambda (palette view)
                                                (when text
                                                  (set-text~ view text))))))
  
  
  (method (on-references-analyser evt)
    (show-palette References-Analyser))

  
  (method package (on-edit-clipboard evt)
    (let ((clipboard (get-clipboard-text)))
      (if (string? clipboard)
          (edit-definitions clipboard)
        (bell))))
  
  
  (method public (get-workbench-manager)
    (get-guest~ (singleton-docked Workbench-Manager #f)))
  
  
  (method package (on-select-project evt)
    (select-current~ (get-workbench-manager)))
  
  
  (method package (on-edit-project evt)
    (edit-current~ (get-workbench-manager)))
  
  
  (method package (on-compile-file evt)
    (compile-current~ (get-workbench-manager)))
  
  
  (method package (on-preprocess-file evt)
    (preprocess-current~ (get-workbench-manager)))
  
  
  (method package (on-build-project evt)
    (build-current~ (get-workbench-manager)))
  
  
  (method package (on-clean-project evt)
    (clean-current~ (get-workbench-manager)))
  
  
  (method package (on-view-project-log evt)
    (view-log~ (get-workbench-manager)))
  
  
  (method package (on-configure-project evt)
    (configure-current~ (get-workbench-manager)))
  
  
  (method package (on-test-project evt)
    (test-current~ (get-workbench-manager)))
  
  
  (method package (on-run-project evt)
    (run-current~ (get-workbench-manager)))
  
  
  (method package (on-debug-project evt)
    (debug-current~ (get-workbench-manager)))
  
  
  (method package (on-debug-project-with evt)
    (debug-current~ (get-workbench-manager) executable: :choose))
  
  
  (method package (on-distribute-project evt)
    (distribute-current~ (get-workbench-manager)))
  
  
  (method (on-toolbox evt)
    (select-docked Toolbox-Manager workspace: 'designer focus?: #t))
  
  
  (method (on-traits evt)
    (select-docked Traits-Editor workspace: 'designer focus?: #t))
  
  
  (method (on-descendants evt)
    (select-docked Descendants-Editor workspace: 'designer focus?: #t))
  
  
  (method (on-showcase evt)
    (new-frame Showcase))


  ;;;
  ;;;; Tools-Menu
  ;;;
  
  
  (method package (on-properties evt)
    (select-docked Properties-Manager focus?: #t))

  
  (method package (on-search-results evt)
    (select-docked Search-Results focus?: #t))

  
  (method package (on-profile-results evt)
    (select-docked Profile-Results focus?: #t))
  
  
  (method package (on-servers evt)
    (select-docked Servers-Manager focus?: #t))

  
  (method package (on-output-log evt)
    (select-docked Output-Log focus?: #t))

  
  (method package (on-user-log evt)
    (let ((user-log (select-docked User-Log focus?: #t)))
      (refresh~ user-log)))

  
  (method package (on-activities evt)
    (select-docked Activities-Manager focus?: #t))

  
  (method package (on-workbench evt)
    (select-docked Workbench-Manager focus?: #t))
  
  
  (method package (get-repositories-manager)
    (get-guest~ (singleton-docked Repositories-Manager #f)))

  
  (method package (on-repositories evt)
    (select-docked Repositories-Manager focus?: #t))
  
  
  (method package (on-favorites evt)
    (select-docked Favorites-Manager focus?: #t))

  
  (method package (on-chapters evt)
    (select-docked Chapters-Browser workspace: 'text focus?: #t))

  
  (method package (on-hierarchy evt)
    (select-docked Hierarchy-Browser workspace: 'text focus?: #t))
  
  
  (method package (on-bindings-manager evt)
    (let ((frame (find-frame-host Bindings-Manager)))
      (if frame
          (focus-host~ frame)
        (new-frame Bindings-Manager))))
  
  
  (method package (on-view-bindings evt)
    (get-modal Shortcut-Viewer))
  
  
  (method package (on-skins-manager evt)
    (let ((frame (find-frame-host Skins-Manager)))
      (if frame
          (focus-host~ frame)
        (new-frame Skins-Manager))))
  
  
  (method package (on-preferences evt)
    (new-frame Preferences-Manager))
  
  
  (method package (on-save-profile evt)
    (with-cursor :wait
      (lambda ()
        (user-message "Saving profile...")
        (call-save-environment-listeners)
        (call-exit-listeners)
        (persist-preferences)
        (save-bindings)
        (save-workspaces)
        (user-message "Done"))))
  
  
  (method package (on-exit-without-save evt)
    (when (eq? (message-box "Are you sure you want to exit without saving?" type: 'question) 'yes)
      (exit)))
  
  
  (method package (on-compare-directories evt)
    (if (get-shift?~ evt)
        (let ((default (get-active-configuration~ (get-preferences '(tools compare-directories)))))
          (if (not default)
              (new-frame Compare-Directories)
            (let ((frame (new-frame Compare-Directories host-visible?: #f)))
              (with-cursor :wait
                (lambda ()
                  (configure~ (get-guest~ frame) default)
                  (compare-trees~ (get-guest~ frame))
                  (focus-host~ frame))))))
      (new-frame Compare-Directories)))
  
  
  (method package (on-compare-files evt)
    (new-frame Compare-Files))

  
  (method package (on-compare-databases evt)
    @convert/wait
    (new-frame Compare-Databases))
  
  
  (method package (on-git-explorer evt)
    (new-frame Git-Explorer))
  

  ;;;
  ;;;; Catalogs
  ;;;
  
  
  (method (on-projects-manager evt)
    (let ((frame (find-frame-host Projects-Manager)))
      (if frame
          (focus-host~ frame)
        (new-frame Projects-Manager))))

  
  (method (on-update-catalogs evt)
    (with-cursor :wait
      (lambda ()
        (for-each-project~ (get-workbench)
          (lambda (project)
            (let ((catalog (get-catalog~ project)))
              (when catalog
                (post-catalog
                  (lambda ()
                    (update~ catalog)
                    (user-feedback "Done"))))))))))))
