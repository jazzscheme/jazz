;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Bindings Manager
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.ide.binding.Bindings-Manager jazz


(import (jazz.action)
        (jazz.application)
        (jazz.designer)
        (jazz.graphic)
        (jazz.handler)
        (jazz.ide)
        (jazz.jml)
        (jazz.layout)
        (jazz.preferences)
        (jazz.process)
        (jazz.resource)
        (jazz.text)
        (jazz.tree)
        (jazz.ui)
        (jazz.view))


(class undocumented Bindings-Manager extends Layout-View implements Filterable
  
  
  (slot categorized? initialize #f)
  (slot shortcuts?   initialize #f)

  
  (form
    (<install>                                                       size: {Dimension 420 639} layout-type: border
      (<Layout-View>                        name: toolbar            size: {Dimension 300 33} location: north layout-type: flow layout-insets: {Rect 0 6 0 0}
        (<Toggle-Tool>                                               size: {Dimension 22 22} tooltip?: #t tooltip-text: "View by Actions / Shortcuts" resource: {Image-Resource "Link"} portfolio: :images action-handler: {Event-Handler :form on-shortcuts})
        (<Separator>                                                 size: {Dimension 4 0})
        (<Toggle-Tool>                                               size: {Dimension 22 22} tooltip?: #t tooltip-text: "Display Flat / Categorized" resource: {Image-Resource "Tree"} portfolio: :images action-handler: {Event-Handler :form on-categorize})
        (<Separator>                                                 size: {Dimension 16 0})
        (<Border-View>                                               size: {Dimension 140 22} border-type: none border-insets: {Rect 2 2 2 1}
          (<Border-View>                                             border-color: {Color Entry-Border}
            (<Traits-Combo>                 name: traits)))
        (<Separator>                                                 size: {Dimension 16 0})
        (<Label-View>                       name: filter-label       justification: (head -2) title: "Filter:" size: {Dimension 31 20} font: {Font Label})
        (<Separator>                                                 size: {Dimension 4 0})
        (<Border-View>                                               size: {Dimension 170 21} border-type: fill border-insets: {Rect 0 2 0 0}
          (<Border-View>                                             border-type: edge style: entry
            (<Scroller-View>                                         hscroll?: #f vscroll?: #f
              (<!>                          name: content            layout-type: fill
                (<Filter-Text-View>         name: filter-text        content-change-handler: {Event-Handler :form on-filter-text-change})))))
        @waiting
        (<Separator>                                                 size: {Dimension 16 0})
        @waiting
        (<Push-Tool>                        name: unbind-shortcut    size: {Dimension 22 22} tooltip?: #t tooltip-text: "Make Shortcut Unbound" resource: {Image-Resource "Empty"} portfolio: :images action-handler: {Event-Handler :form on-unbind-shortcut})
        @waiting
        (<Separator>                                                 size: {Dimension 2 0})
        @waiting
        (<Push-Tool>                        name: restore-shortcut   size: {Dimension 22 22} tooltip?: #t tooltip-text: "Restore to Default" resource: {Image-Resource "FindBackward"} portfolio: :images action-handler: {Event-Handler :form on-restore-shortcut})
        @waiting
        (<Separator>                                                 size: {Dimension 16 0})
        @waiting
        (<Push-Tool>                        name: edit-action        size: {Dimension 22 22} tooltip?: #t tooltip-text: "Edit Action" resource: {Image-Resource "Edit"} portfolio: :images action-handler: {Event-Handler :form on-edit-action})
        @waiting
        (<Push-Button>                      name: bind-shortcut      location: tail title: "Bind Shortcut " size: {Dimension 100 22} action-handler: {Event-Handler :form on-bind-shortcut} default?: #t)
        (<Push-Button>                      name: edit-action        location: tail title: "Edit Action" size: {Dimension 120 22} action-handler: {Event-Handler :form on-edit-action} default?: #t))
      (<Border-View>                        name: actions-border     location: center border-type: edge style: entry
        (<Scroller-View>                                             style: document hscroll?: #t vscroll?: #t
          (<content~>                                                layout-type: fill
            (<Tree-Header>                                           style: document
              (<content~>
                (<BindingsByActions-Tree>   name: actions            selection-handler: {Event-Handler :form on-selection-change} double-click-handler: {Event-Handler :form on-double-click} return-press-handler: {Event-Handler :form on-return-press}))))))
      (<Border-View>                        name: shortcuts-border   location: center border-type: edge style: entry visible?: #f
        (<Scroller-View>                                             style: document hscroll?: #t vscroll?: #t
          (<content~>                                                layout-type: fill
            (<Tree-Header>                                           style: document
              (<content~>
                (<BindingsByShortcuts-Tree> name: shortcuts          selection-handler: {Event-Handler :form on-selection-change} double-click-handler: {Event-Handler :form on-double-click} return-press-handler: {Event-Handler :form on-return-press}))))))))


  (method override (conclude self initargs)
    (nextmethod self initargs)
    (view-bindings self)
    (update-traits self)
    (update-buttons self))
  
  
  ;;;
  ;;;; Host
  ;;;
    
  
  (method meta override (host-icon self)
    {Image-Resource "EditLink"})
  
  
  (method meta override (host-title self)
    "Bindings Manager")
  
  
  (method meta override (host-position self)
    {Point 28 14})
  
  
  (method meta override (host-size self)
    {Dimension 595 635})
  
  
  (method override (host-workspaces self)
    '(home))
  
  
  (method override (focus-default self)
    (acquire-focus (locate self 'filter-text)))
  
  
  ;;;
  ;;;; Filter
  ;;;
  
  
  (method override (filter self filter-search)
    (filter-rows (get-tree self)
      (lambda (title)
        (search title filter-search))))
  
  
  ;;;
  ;;;; Access
  ;;;
  
  
  (method package (get-tree self)
    (if shortcuts?
        (locate self 'shortcuts)
      (locate self 'actions)))
  
  
  (method (get-filter-text self)
    (locate self 'filter-text))
  
  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method (on-shortcuts self evt)
    (set! shortcuts? (not shortcuts?))
    (set-visible? (locate self 'actions-border) (not shortcuts?))
    (set-visible? (locate self 'shortcuts-border) shortcuts?)
    (set-toplevel-controls? (get-node-column (get-tree self)) categorized?)
    (layout-view self)
    (view-bindings self)
    (filter-target (get-filter-text self)))
  
  
  (method (on-categorize self evt)
    (set! categorized? (not categorized?))
    (set-toplevel-controls? (get-node-column (get-tree self)) categorized?)
    (view-bindings self)
    (filter-target (get-filter-text self)))
  
  
  (method (on-show-all self evt)
    )
  
  
  (method (on-double-click self evt)
    (edit-action self)
    @waiting
    (bind-shortcut))
  
  
  (method override (on-return-press self evt)
    (edit-action self)
    @waiting
    (bind-shortcut))
  
  
  (method (on-unbind-shortcut self evt)
    (unbind-shortcut self))
  
  
  (method (on-restore-shortcut self evt)
    (restore-shortcut self))
  
  
  (method (on-bind-shortcut self evt)
    (bind-shortcut self))
  
  
  (method (on-edit-action self evt)
    (edit-action self))
  
  
  (method package (on-selection-change self evt)
    (update-buttons self))
  
  
  (method package (trait-change self trait)
    (let ((appl (get-application))
          (bindings (current-bindings)))
      (when (neq? trait (get-active-trait bindings))
        (with-cursor :wait
          (lambda ()
            (set-active-trait bindings trait)
            (set-preferences-property appl (current-preferences #f) 'active-bindings (get-name trait))
            (view-bindings self)
            (filter-target (get-filter-text self))
            (update-buttons self))))))
  
  
  (method (on-filter-text-change self evt)
    (filter-target (get-filter-text self)))
  
  
  ;;;
  ;;;; Binding
  ;;;
  
  
  (method (unbind-shortcut self)
    (let ((appl (get-application))
          (tree (get-tree self)))
      (receive (action-item rank) (selected-action-item/rank self)
        (let ((designer (get-bindings-designer appl))
              (old (get-shortcut action-item)))
          (set-property designer action-item 'shortcut #f)
          (update-shortcut appl action-item old (get-shortcut action-item))
          (update-action-item tree designer action-item rank)))))
  
  
  (method (restore-shortcut self)
    (let ((appl (get-application))
          (tree (get-tree self)))
      (receive (action-item rank) (selected-action-item/rank self)
        (let ((designer (get-bindings-designer appl))
              (old (get-shortcut action-item)))
          (remove-property designer action-item 'shortcut #f)
          (update-shortcut appl action-item old (get-shortcut action-item))
          (update-action-item tree designer action-item rank)))))
  
  
  (method (bind-shortcut self)
    (let ((appl (get-application))
          (tree (get-tree self)))
      (receive (action-item rank) (selected-action-item/rank self)
        (let ((designer (get-bindings-designer appl))
              (old (get-shortcut action-item)))
          (set-property designer action-item 'shortcut (get-modal Shortcut-Chooser))
          (update-shortcut appl action-item old (get-shortcut action-item))
          (update-action-item tree designer action-item rank)))))
  
  
  (definition (update-action-item tree designer action-item rank)
    (let ((shortcut-cell (new Cell rank 1))
          (owner-cell (new Cell rank 2)))
      (set-cell-data tree shortcut-cell (new Tree-Label title: (present-shortcut tree (get-shortcut action-item))))
      (set-cell-data tree owner-cell (new Tree-Image image: (owner-image tree designer action-item 'shortcut)))
      (invalidate-cell tree shortcut-cell)
      (invalidate-cell tree owner-cell)))
  
  
  ;;;
  ;;;; Edit
  ;;;
  
  
  (method (edit-action self)
    (let ((action-handler (get-action-handler (selected-action-item self))))
      (if (not action-handler)
          (bell)
        (edit-definitions (get-application) (get-method-name action-handler)))))
  
  
  ;;;
  ;;;; Selection
  ;;;
  
  
  (method (selected-action-item/rank self)
    (let* ((tree (get-tree self))
           (rank (get-single-selection tree)))
      (and rank
           (let ((data (get-user-data (get-row tree rank))))
             (values data rank)))))
  
  
  (method (selected-action-item self)
    (let ((info (selected-action-item/rank self)))
      (if (not info)
          #f
        (receive (action-item rank) info
          action-item))))
  
  
  ;;;
  ;;;; Update
  ;;;
  
  
  (method package (view-bindings self)
    (let ((appl (get-application)))
      (let ((designer (get-bindings-designer appl))
            (bindings (current-bindings))
            (what (if shortcuts? 'shortcuts 'actions))
            (kind (if categorized? 'categorized 'flat))
            (tree (get-tree self)))
        (view-bindings tree designer bindings what kind))))
  
  
  (method (update-traits self)
    (let ((bindings (current-bindings))
          (combo (locate self 'traits)))
      (set-choices combo (map (lambda (trait)
                                 (list trait (->string (get-name trait))))
                               (child-traits bindings)))
      (let ((branch (get-branch bindings)))
        (when branch
          (set-value combo (get-trait branch))))))
  
  
  (method package (update-buttons self)
    (let ((action-item (selected-action-item self)))
      @waiting
      (set-enabled? (locate 'unbind-shortcut) action-item)
      @waiting
      (set-enabled? (locate 'restore-shortcut) action-item)
      (set-enabled? (locate self 'edit-action) action-item)
      @waiting
      (set-enabled? (locate 'bind-shortcut) action-item))))


;;;
;;;; Traits
;;;


(class Traits-Combo extends Combo-Box
  
  
  (method override (content-change self origin)
    (trait-change (get-guest (get-host self)) (get-value self)))))
