;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Shortcut Viewer
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.ide.binding.Shortcut-Viewer jazz


(import (jazz.action)
        (jazz.application)
        (jazz.event)
        (jazz.graphic)
        (jazz.handler)
        (jazz.ide)
        (jazz.jml)
        (jazz.menu)
        (jazz.outline)
        (jazz.resource)
        (jazz.tree)
        (jazz.ui)
        (jazz.ui.dialog)
        (jazz.view))


(class undocumented Shortcut-Viewer extends Layout-View
  
  
  (slot selected-shortcut initialize #f)
  
  
  (form
    (<install>                                                    layout-type: border
      (<Shortcut-Header>                    name: header          size: {Dimension 100 56} location: north
        (<Label-View>                       name: title           title: "View bindings" position: {Point 10 9} size: {Dimension 350 16} font: {Font Caption})
        (<Label-View>                       name: description     position: {Point 30 27} size: {Dimension 350 16} font: {Font Label}))
      (<Horizontal-Line>                                          position: {Point 0 54} size: {Dimension 448 2})
      (<View>                               name: bindings-view   location: center
        (<Label-View>                       name: title           title: "Bindings:" position: {Point 6 6} size: {Dimension 350 16})
        (<Border-View>                      name: bindings-border position: {Point 6 24} size: {Dimension 436 124} border-type: edge style: entry
          (<Scroller-View>                                        style: document hscroll?: #t vscroll?: #t
            (<!>                            name: content         layout-type: fill
              (<Tree-Header>                                      style: document
                (<!>                        name: content
                  (<BindingsByActions-Tree> name: bindings        return-press-handler: {Event-Handler :form on-return-press} escape-press-handler: {Event-Handler :form on-escape-press} double-click-handler: {Event-Handler :form on-double-click} context-menu-handler: {Event-Handler :form on-context-menu})))))))
      (<Horizontal-Line>                                          position: {Point 0 210} size: {Dimension 448 2})
      (<View>                               name: buttons         size: {Dimension 100 40} location: south
        (<Push-Button>                      name: choose          title: "Choose Again" position: {Point 7 9} size: {Dimension 120 24} enabled?: #f action-handler: {Event-Handler :form on-choose})
        (<Push-Button>                      name: ok              title: "OK" position: {Point 255 9} size: {Dimension 90 24} enabled?: #f default?: #t action-handler: {Event-Handler :host on-ok})
        (<Push-Button>                      name: cancel          title: "Cancel" position: {Point 351 9} size: {Dimension 90 24} action-handler: {Event-Handler :host on-cancel}))))
  
  
  (method override (finish self rest)
    (nextmethod self rest)
    (setup-description self)
    (setup-chooser self))
  
  
  (method override (destroy self)
    (set-shortcut-hook (get-application) #f)
    (nextmethod self))
  
  
  (method override (focus-default self)
    (acquire-focus (get-tree self)))
    
  
  ;;;
  ;;;; Host
  ;;;

  
  (method meta override (host-title self)
    "Bindings")
  
  
  (method meta override (host-size self)
    {Dimension 448 249})
  
  
  ;;;
  ;;;; Setup
  ;;;
  
  
  (method virtual (setup-description self)
    (set-title (locate self 'description)
      "Please press the shortcut whose bindings who wish to view"))
  
  
  (method (setup-chooser self)
    (set-shortcut-hook (get-application)
      (lambda (shortcut)
        (set-shortcut-hook (get-application) #f)
        (choose self shortcut)
        #t)))
  
  
  ;;;
  ;;;; Access
  ;;;
  
  
  (method package (get-tree self)
    (locate self 'bindings))
  
  
  ;;;
  ;;;; Actions
  ;;;
  

  (method override (guest-actions self)
    (cons (find-actions 'shortcut-viewer)
          (nextmethod self)))
    
  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method (on-choose self evt)
    (set! selected-shortcut #f)
    (remove-every-row (get-tree self))
    (set-enabled? (locate self 'choose) #f)
    (set-enabled? (locate self 'ok) #f)
    (setup-chooser self))
  
  
  (method (on-double-click self evt)
    (edit-action self)
    (close-modal-dialog))
  
  
  (method (on-context-menu self evt)
    (let* ((sender (get-sender evt))
           (pos (get-position evt))
           (acquired (acquire self sender pos)))
      (with-context-click sender pos
        (lambda ()
          (let ((menu (new-menu self)))
            (when menu
              (track-popup-menu self menu acquired)))))))
  
  
  (method (on-edit-action self evt)
    (edit-action self)
    (close-modal-dialog))
  
  
  (method override (on-return-press self evt)
    (when (get-enabled? (locate self 'ok))
      (let ((dialog (get-host self)))
        (end-modal dialog (get-modal-result self)))))
  
  
  (method override (on-escape-press self evt)
    (let ((dialog (get-host self)))
      (cancel-modal dialog)))
  
  
  (method override (get-modal-result self)
    selected-shortcut)
    
  
  ;;;
  ;;;; Choose
  ;;;
  
  
  (method (choose self shortcut)
    (define (gather-bindings)
      (let ((fact (new List-Factory)))
        (for-each (lambda (actions)
                    (for-each (lambda (action)
                                (when (member? shortcut (all-shortcuts action) test: shortcut=?)
                                  (put fact action)))
                              (get-children actions)))
                  (get-children (current-bindings)))
        (get-output fact)))
    
    (let ((bindings (gather-bindings)))
      (when (choose-hook self shortcut bindings)
        (set! selected-shortcut shortcut)
        (let ((designer (get-bindings-designer (get-application)))
              (tree (get-tree self)))
          (view-bindings tree designer bindings 'actions 'list))
        (set-enabled? (locate self 'choose) #t)
        (set-enabled? (locate self 'ok) #t))))
  
  
  (method protected virtual (choose-hook self shortcut bindings)
    #t)
    
  
  ;;;
  ;;;; Edit
  ;;;
  
  
  (method (edit-action self)
    (let ((action (get-single-selected-data (get-tree self))))
      (when action
        (let ((action-handler (get-action-handler action)))
          (if (not action-handler)
              (bell)
            (edit-definitions (get-application) (get-method-name action-handler)))))))
    
  
  ;;;
  ;;;; Menu
  ;;;
  
  
  (method package (new-menu self)
    (let ((action (get-single-selected-data (get-tree self))))
      (when action
        (new Action-Menu client: self)))))


;;;
;;;; Shortcut-Header
;;;


(class Shortcut-Header extends View
  
  
  (definition Header-Color
    (new Color red: 120 green: 120 blue: 255))
  
  
  (method override (draw self surface context)
    (gradient-fill-rect surface (get-bounds self) (list (list 0 {Color White}) (list 1 Header-Color)))))


;;;
;;;; Action-Menu
;;;


(class Action-Menu extends Context-Menu
  
  
  (form
    (<install>
      (<Label-Item> name: edit-action title: "Edit Action" icon: {Image-Resource "Edit"} action-handler: {Action shortcut-viewer edit-action})))))
