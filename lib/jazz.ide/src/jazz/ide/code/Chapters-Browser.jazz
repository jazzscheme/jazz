;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Chapters Browser
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.ide.code.Chapters-Browser jazz


(import (jazz.jml)
        (jazz.library)
        (jazz.ui)
        (jazz.ui.view))


(class Chapters-Browser extends Layout-View


  (property client initialize #f accessors explicit)
  
  
  (slot client-selection initialize #f)
  (slot client-position  initialize #f)
  
  
  (slot preserved-states initialize (make-table test: eq? weak-keys: #t))


  (form
    (<install>                                       layout-type: fill
      (<Layout-View>                name: tools
        (<Toggle-Tool>              name: occurence? size: {Dimension 22 22} location: tail tooltip?: #t tooltip-text: "Order by Occurence" resource: {Image-Resource "FindNext"} portfolio: :images action-handler: {Event-Handler :guest on-toggle-occurence})
        (<Push-Tool>                name: update     size: {Dimension 22 22} location: tail tooltip?: #t tooltip-text: "Refresh" resource: {Image-Resource "Refresh"} portfolio: :images action-handler: {Event-Handler :guest on-update}))
      (<Scroller-View>              name: scroller   vscroll?: #t hscroll?: #t style: tool
        (<!>                        name: content    layout-type: fill
          (<Tree-Header>            name: header     shown?: #f
            (<!>                    name: content
              (<Chapters-Tree>      name: chapters   portfolio: :images show-header?: #f always-select?: #t selection-handler: {Selection-Handler :form on-selection-change} double-click-handler: {Event-Handler :form on-double-click} return-press-handler: {Event-Handler :form on-return-press} escape-press-handler: {Event-Handler :form on-escape-press}
                (<Tree-Node-Column>                  title: "Chapters" width: 329))))))))
  
  
  (method meta override (external-name . rest)
    'Chapters)


  ;;;
  ;;;; Host
  ;;;
  
  
  (method meta override (host-icon)
    {Image-Resource "Traits"})
  
  
  (method meta override (host-title)
    "Chapters")
  
  
  (method override (client-activate)
    (let ((guest (current-document)))
      (if (is? guest Text-View)
          (set-client guest)
        (set-client #f))))
  
  
  (method override (client-deactivate)
    (set-client #f))
  
  
  (method (tree-focus-gained)
    (when client
      (set! client-selection (get-selection~ client))
      (set! client-position (get-scrolled-position~ client))))
 

  ;;;
  ;;;; Docked
  ;;;
  
  
  (method override (get-tools-view)
    (locate 'tools))
  
  
  (method override (focus-default)
    (let ((tree (locate 'chapters)))
      (acquire-focus~ tree)))
 

  ;;;
  ;;;; Access
  ;;;
  
  
  (method (get-occurence?)
    (get-selected?~ (locate 'occurence?)))
  
  
  ;;;
  ;;;; Actions
  ;;;
  

  (method override (guest-actions)
    (cons (find-actions 'chapters-browser)
          (nextmethod)))
 

  ;;;
  ;;;; Events
  ;;;
  
  
  (method (on-toggle-occurence evt)
    (update))
  
  
  (method (on-update evt)
    (update))


  (method (on-selection-change evt)
    (let ((sender (get-sender~ evt)))
      (case (get-name~ sender)
        ((chapters)
         (let ((selection (get-single-selection~ sender)))
           (when selection
             (select-chapter~ client (get-user-data~ (get-row~ sender selection)))))))))
  
  
  (method (on-double-click evt)
    (finish-focus))
  
  
  (method override (on-return-press key)
    (finish-focus))
  
  
  (method override (on-escape-press key)
    (cancel-focus))
  
  
  (method (on-cancel evt)
    (cancel-focus))
  
  
  (method (finish-focus)
    (when client
      (acquire-focus~ client)))
  
  
  (method (cancel-focus)
    (when client
      (when client-selection
        (set-selection-safe~ client client-selection)
        (scroll-to~ client client-position))
      (acquire-focus~ client)))
  
  
  ;;;
  ;;;; Client
  ;;;


  (method public (get-client)
    client)

 
  (method public (set-client clt)
    (when (neq? clt client)
      (when client
        (preserve-state client))
      (set! client clt)
      (update)
      (when client
        (restore-state client))))
  
  
  (method (update)
    (define (build-tree client)
      (let ((lst (get-chapters~ client)))
        (let ((first (get-first-chapter~ client lst))
              (remaining (get-remaining-chapters~ client lst))
              (root (new JML-Element #f 'root)))
          (let ((previous (if first (insert-element root first #t) root)))
            (for-each (lambda (info)
                        (bind (level pos header title) info
                          (let ((father (find-father root previous level)))
                            (let ((element (insert-element father info #f)))
                              (set! previous element)))))
                      remaining))
          root)))
    
    (define (insert-element father info first?)
      (bind (level pos header title) info
        (let ((image (cond (first? {Image-Resource "Present"}) ((= level 1) {Image-Resource "Item"}) ((= level 2) {Image-Resource "Constant"}) (else {Image-Resource "Link"})))
              (level (if first? 0 level))
              (data (nu+ pos (cardinality header))))
          (new JML-Element father #f properties: (list 'title title 'image image 'level level 'data data)))))
    
    (define (find-father root previous level)
      (continuation-capture
        (lambda (return)
          (for-each-ancestor~ previous
            (lambda (element)
              (if (eq? element root)
                  (continuation-return return root)
                (when (< (get-property~ element level:) level)
                  (continuation-return return element))))))))
    
    (define (insert-item tree father element)
      (let ((title (get-property~ element 'title))
            (image (get-property~ element 'image))
            (data (get-property~ element 'data)))
        (let ((row (add-row~ tree father: father state: 'expanded row-height: 17 children: (list (new Tree-Node title: title image: image)) user-data: data)))
          (insert-children tree row element))))
    
    (define (insert-children tree father element)
      (let ((children (get-children~ element)))
        (let ((effective (if (get-occurence?) children (sort string<? children key: (lambda (child) (get-property~ child 'title))))))
          (for-each (lambda (child)
                      (insert-item tree father child))
                    effective))))
    
    (let ((tree (locate 'chapters)))
      (remove-every-row~ tree)
      (when client
        (with-update-locked~ tree
          (lambda ()
            (insert-children tree #f (build-tree client)))))))
  
  
  ;;;
  ;;;; State
  ;;;
  
  
  (method (preserve-state client)
    (table-set! preserved-states client (get-view-state~ (locate 'chapters) use: 'text)))
  
  
  (method (restore-state client)
    (let ((state (table-ref preserved-states client #f)))
      (when state
        (set-view-state~ (locate 'chapters) state)))))


;;;
;;;; Chapters-Tree
;;;


(class Chapters-Tree extends Tree-View
  
  
  (method override (focus-gained)
    (nextmethod)
    (tree-focus-gained~ (get-guest)))))
