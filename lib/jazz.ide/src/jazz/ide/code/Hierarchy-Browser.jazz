;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Hierarchy Browser
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.ide.code.Hierarchy-Browser jazz


(import (jazz.action)
        (jazz.application)
        (jazz.catalog)
        (jazz.catalog.browse)
        (jazz.catalog.edit)
        (jazz.catalog.entry)
        (jazz.component)
        (jazz.descriptor)
        (jazz.designer)
        (jazz.document)
        (jazz.editor)
        (jazz.editor.jazz)
        (jazz.event)
        (jazz.handler)
        (jazz.ide)
        (jazz.io)
        (jazz.markup)
        (jazz.outline)
        (jazz.preferences)
        (jazz.resource)
        (jazz.text)
        (jazz.tree)
        (jazz.ui)
        (jazz.workspace))


(class Hierarchy-Browser extends Layout-View


  (property client initialize #f accessors generate)
  
  
  (slot client-root      initialize #f)
  (slot client-selection initialize #f)
  (slot client-position  initialize #f)
  (slot client-entry     initialize #f)
  (slot displayed-line   initialize #f)
  (slot preserved-states initialize (make-table test: eq? weak-keys: #t))
  

  (form
    (<install>                                        layout-type: fill
      (<Layout-View>                name: tools
        (<Toggle-Tool>              name: occurence?  size: {Dimension 22 22} location: tail tooltip?: #t tooltip-text: "Order by Occurence" resource: {Image-Resource "FindNext"} portfolio: :images action-handler: {Event-Handler :guest on-toggle-occurence})
        (<Push-Tool>                name: update      size: {Dimension 22 22} location: tail tooltip?: #t tooltip-text: "Refresh" resource: {Image-Resource "Refresh"} portfolio: :images action-handler: {Event-Handler :guest on-update}))
      (<Scroller-View>              name: scroller    vscroll?: #t hscroll?: #t style: tool
        (<!>                        name: content     layout-type: fill
          (<Tree-Header>            name: header      shown?: #f
            (<!>                    name: content
              (<Hierarchy-Tree>     name: definitions portfolio: :images show-header?: #f always-select?: #t selection-handler: {Event-Handler :form on-selection-change} double-click-handler: {Event-Handler :form on-double-click} return-press-handler: {Event-Handler :form on-return-press} escape-press-handler: {Event-Handler :form on-escape-press}
                (<Tree-Node-Column>                   title: "Hierarchy" width: 329))))))))
  
  
  (method meta override (external-name self . rest)
    'Hierarchy)


  ;;;
  ;;;; Host
  ;;;
  
  
  (method meta override (host-icon self)
    {Image-Resource "Components"})
  
  
  (method meta override (host-title self)
    "Hierarchy")
  
  
  (method override (client-activate self)
    (define (client-root guest)
      (and (is? guest Code-Text-View)
           (let ((moniker (get-moniker (get-document-controller guest))))
             (and moniker
                  (let ((ext (get-extension moniker)))
                    (if (extension=? ext "jml")
                        (safe-read-form moniker)
                      (cache-file-entry moniker)))))))
    
    (let ((guest (current-document)))
      (let ((root (client-root guest)))
        (if (not root)
            (set-client/root self #f #f)
          (set-client/root self guest root)))))
  
  
  (method override (client-deactivate self)
    (set-client/root self #f #f))
  
  
  (method package (tree-focus-gained self)
    (when client
      (set! client-selection (get-selection client))
      (set! client-position (get-scrolled-position client))))
 

  ;;;
  ;;;; Docked
  ;;;
  
  
  (method override (get-tools-view self)
    (locate self 'tools))
  
  
  (method override (focus-default self)
    (let ((tree (locate self 'definitions)))
      (acquire-focus tree)))
 

  ;;;
  ;;;; Access
  ;;;
  
  
  (method (get-occurence? self)
    (get-selected? (locate self 'occurence?)))
  
  
  (method (get-sorted? self)
    (not (get-occurence? self)))
  
  
  ;;;
  ;;;; Actions
  ;;;
  

  (method override (guest-actions self)
    (cons (find-actions 'hierarchy-browser)
          (nextmethod self)))
 

  ;;;
  ;;;; Events
  ;;;
  
  
  (method (on-toggle-occurence self evt)
    (set-sort? (locate self 'definitions) (get-sorted? self))
    (update self))
  
  
  (method (on-update self evt)
    (define (reload-markup)
      (let ((moniker (get-moniker (get-document-controller client))))
        (if moniker
            (set! client-root (safe-read-form moniker))
          (set! client-root #f))))
    
    (when (or (is? client-root Exception) (is? client-root Form))
      (reload-markup))
    (update self)
    (highlight-selection self))


  (method package (on-selection-change self evt)
    (let ((sender (get-sender evt)))
      (case (get-name sender)
        ((definitions)
         (selection-change self sender #f)))))


  (method (on-double-click self evt)
    (let ((sender (get-sender evt)))
      (case (get-name sender)
        ((definitions)
         (selection-change self sender #t)))))
  
  
  (method override (on-return-press self key)
    (finish-focus self))
  
  
  (method override (on-escape-press self key)
    (cancel-focus self))
  
  
  (method (on-cancel self evt)
    (cancel-focus self))
  
  
  (method (finish-focus self)
    (when client
      (acquire-focus client)))
  
  
  (method (cancel-focus self)
    (when client
      (when client-selection
        (set-selection-safe client client-selection ensure-displayed?: #f)
        (scroll-to client client-position))
      (acquire-focus client)))
  
  
  ;;;
  ;;;; Client
  ;;;

 
  (method public (set-client/root self clt root)
    (when (neq? root client-root)
      (when client
        (preserve-state self client)
        (remove-text-listener client self))
      (set! client clt)
      (set! client-root root)
      (update self)
      (when client
        (restore-state self client)
        (when (get-highlight-hierarchy? (current-preferences 'documents))
          (add-text-listener client (new Event-Handler execute: (lambda (evt) (highlight-selection self))))))))
  
  
  (method package (update self)
    (define (get-entry-title entry)
      (if (is? entry Markup-Node)
          "Markup"
        (get-title entry)))
    
    ;; All this should be abstracted into an Hierarchy-Client class
    ;; with Hierarchy-Catalog-Client and Hierarchy-Markup-Client subclasses
    
    (define (insert-entry-definition tree entry)
      (if (is? entry Markup-Node)
          (insert-markup-definition tree #f 0 entry (get-sorted? self))
        (insert-definition entry tree #f 0 (get-sorted? self))))
    
    (define (insert-markup-definition tree father level node sort?)
      (define (insert-definition father level node sort?)
        (let ((row (insert-markup-self father level node)))
          (insert-markup-self-definitions row level node sort?)))
      
      (define (insert-markup-self father level node)
        (let* ((model (get-markup-model father node))
               (image (if (and model (subtype? model Component)) (get-class-image model) {Image-Resource "Slot"}))
               (title (cond ((get-property node 'title)) ((get-name node) => ->string) (else (->string (get-model node)))))
               (state (if (< level 1) 'expanded 'collapsed)))
          (add-row tree father: father state: state children: (list (new Tree-Node title: title image: image)) user-data: node)))
      
      (define (get-markup-model father node)
        #f
        @convert-autoload
        (let ((model (get-model node)))
          (when (and model (get-autoload model))
            (autoload model))))
      
      (define (insert-markup-self-definitions father level node sort?)
        (insert-markup-definitions father level (get-markup-named-children node) sort?))
      
      (define (insert-markup-definitions father level definitions sort?)
        (let ((ordered (if sort? (sort-markup-definitions definitions) definitions)))
          (for-each (lambda (definition)
                      (insert-definition father (+ level 1) definition sort?))
                    ordered)))
      
      (define (get-markup-named-children node)
        (define (named? node)
          (and (is? node Markup-Element)
               (or (get-name node)
                   (get-property node 'title))))
        
        (and (is? node Markup-Element)
             (collect-if (lambda (child)
                           (and (is? child Markup-Element)
                                (or (named? child)
                                    (some? named? (get-children child)))))
                         (get-children node))))
      
      (define (sort-markup-definitions definitions)
        (sort string<? definitions key: (lambda (definition) (->string (get-name definition)))))
      
      (insert-definition father level node sort?))
    
    (let ((tree (locate self 'definitions)))
      (cond ((not client-root)
             (set-title self "Class Browser")
             (remove-every-row tree))
            ((is? client-root Exception)
             (remove-every-row tree)
             (add-row tree children: (list (new Tree-Node title: (exception-reason client-root) image: {Image-Resource "Debugger"})) user-data: client-root))
            (else
             (set-title self (format "Class {a}" (get-entry-title client-root)))
             (remove-every-row tree)
             (with-update-locked tree
               (lambda ()
                 (insert-entry-definition tree client-root)))))))

  
  ;;;
  ;;;; Highlight
  ;;;
  
  
  (method (highlight-selection self)
    (when (is? client-root File-Entry)
      (let ((start (get-start client)))
        (let ((line (get-line start))
              (col (get-col start)))
          (when (or (not displayed-line) (/= line displayed-line))
            (let ((tree (locate self 'definitions))
                  (file (get-file client-root)))
              (let ((entry (location->entry (list file line col))))
                (when (neq? entry client-entry)
                  (set! client-entry entry)
                  (if (not entry)
                      (set-selection tree '())
                    (let ((row (user-data-row tree entry include-invisibles?: #t)))
                      (when row
                        (ensure-expanded tree row)
                        (set-single-selection tree (row->line tree row) generate-event?: #f)))))))
            (set! displayed-line line))))))
  
  
  ;;;
  ;;;; Selection
  ;;;
  
  
  (method package (selection-change self tree double-click?)
    (define (same-file? definition moniker)
      (and moniker (pathname=? (get-file (get-file-definition definition)) moniker)))
    
    (let ((guest (current-document)))
      (when guest
        (let ((moniker (get-moniker (get-document-controller guest)))
              (selection (get-single-selection tree)))
          (when selection
            (let ((definition (get-user-data (get-row tree selection))))
              (unless (is? definition Exception)
                (when (and definition (or double-click? (is-not? definition Indexed-Entry) (same-file? definition moniker)))
                  (edit-definitions self definition double-click?)))))))))
  
  
  ;;;
  ;;;; Edit
  ;;;
  
  
  (method package (edit-definitions self definition double-click?)
    (define (edit-markup-definition definition)
      (let* ((appl (get-application))
             (moniker (get-origin client-root))
             (frame (edit-document appl moniker visible?: #f))
             (text (get-guest frame))
             (location (append (get-location definition) (list 0)))
             (range (location-range text location)))
        (set-selection-safe text range ensure-displayed?: 'center-caret)
        (focus-host frame)))
    
    (if (is? definition Markup-Node)
        (edit-markup-definition definition)
      (edit-entry definition activate-focus?: double-click?)))
  
  
  ;;;
  ;;;; State
  ;;;
  
  
  (method (preserve-state self client)
    (table-set! preserved-states client (get-view-state (locate self 'definitions) use: 'text)))
  
  
  (method package (restore-state self client)
    (let ((state (table-ref preserved-states client #f)))
      (when state
        (set-view-state (locate self 'definitions) state)))))


;;;
;;;; Hierarchy-Tree
;;;


(class Hierarchy-Tree extends Code-Tree
  
  
  (method override (focus-gained self)
    (nextmethod self)
    (tree-focus-gained (get-guest self)))))
