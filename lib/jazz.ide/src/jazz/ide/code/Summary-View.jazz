;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Summary View
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.ide.code.Summary-View jazz


(import (jazz.action)
        (jazz.application)
        (jazz.catalog)
        (jazz.catalog.edit)
        (jazz.catalog.entry)
        (jazz.designer)
        (jazz.document)
        (jazz.editor)
        (jazz.editor.jazz)
        (jazz.editor.lisp)
        (jazz.event)
        (jazz.graphic)
        (jazz.handler)
        (jazz.ide)
        (jazz.io)
        (jazz.markup)
        (jazz.menu)
        (jazz.outline)
        (jazz.resource)
        (jazz.search)
        (jazz.text)
        (jazz.tree)
        (jazz.ui)
        (jazz.view)
        (jazz.workspace))


(definition inhibit-summaries?
  (make-parameter #f))


(class Summary-View extends Layout-View


  (property client initialize #f accessors generate)
  
  
  (slot client-root      initialize #f)
  (slot client-selection initialize #f)
  (slot client-position  initialize #f)
  (slot client-entry     initialize #f)
  (slot displayed-line   initialize #f)
  

  (form
    (<install>                                     layout-type: fill
      (<Layout-View>                name: tools)
      (<Scroller-View>              name: scroller vscroll?: #t hscroll?: #t style: tool
        (<!>                        name: content  layout-type: fill
          (<Tree-Header>            name: header   shown?: #f
            (<!>                    name: content
              (<Summary-Tree>       name: summary  portfolio: :images show-header?: #f always-select?: #t selection-handler: {Event-Handler :form on-selection-change} double-click-handler: {Event-Handler :form on-double-click} return-press-handler: {Event-Handler :form on-return-press} escape-press-handler: {Event-Handler :form on-escape-press} context-menu-handler: {Event-Handler :form on-context-menu}
                (<Tree-Node-Column>                title: "Summary" width: 329))))))))
  
  
  (method meta override (external-name self . rest)
    'Summary)


  ;;;
  ;;;; Host
  ;;;
  
  
  (method meta override (host-icon self)
    {Image-Resource "AnalysisManager"})
  
  
  (method meta override (host-title self)
    "Summary")
  
  
  (method override (client-activate self)
    (define (client-root guest)
      (and (is? guest Code-Text-View)
           (let ((moniker (get-moniker (get-document-controller guest))))
             (and moniker
                  (let ((ext (get-extension moniker)))
                    (if (extension=? ext "jml")
                        (safe-read-form moniker)
                      (cache-file-entry moniker)))))))
    
    (unless (inhibit-summaries?)
      (let ((guest (current-document)))
        (let ((root (client-root guest)))
          (if (not root)
              (set-client/root self #f #f)
            (set-client/root self guest root))))))
  
  
  (method override (client-deactivate self)
    (set-client/root self #f #f))
 

  ;;;
  ;;;; Docked
  ;;;
  
  
  (method override (get-tools-view self)
    (locate self 'tools))
  
  
  (method override (focus-default self)
    (let ((tree (locate self 'summary)))
      (acquire-focus tree)))
  
  
  ;;;
  ;;;; Actions
  ;;;
  

  (method override (guest-actions self)
    (cons (find-actions 'summary-view)
          (nextmethod self)))
 

  ;;;
  ;;;; Events
  ;;;


  (method package (on-selection-change self evt)
    (let ((sender (get-sender evt)))
      (case (get-name sender)
        ((summary)
         (selection-change self sender 'select)))))


  (method (on-double-click self evt)
    (let ((sender (get-sender evt)))
      (case (get-name sender)
        ((summary)
         (selection-change self sender 'finish)))))
  
  
  (method override (on-return-press self key)
    (finish-focus self))
  
  
  (method override (on-escape-press self key)
    (cancel-focus self))
  
  
  (method (on-cancel self evt)
    (cancel-focus self))
  
  
  (method (on-context-menu self evt)
    (define (menu-class entry)
      (case (get-kind entry)
        ((class) Class-Menu)
        ((method) Method-Menu)
        (else #f)))
    
    (let* ((sender (get-sender evt))
           (pos (get-position evt))
           (acquired (acquire self sender pos)))
      (with-context-click sender pos
        (lambda ()
          (let ((row (get-selected-row sender)))
            (when row
              (let ((entry (get-user-data row)))
                (when (is? entry Lisp-Entry)
                  (let ((menu-class (menu-class entry)))
                    (when menu-class
                      (let ((menu (new menu-class client: self)))
                        (track-popup-menu self menu acquired))))))))))))
  
  
  (method (finish-focus self)
    (selection-change self (locate self 'summary) 'finish))
  
  
  (method (cancel-focus self)
    (when client
      (when client-selection
        (set-selection-safe client client-selection force?: #t ensure-displayed?: #f generate-event?: #f)
        (scroll-to client client-position))
      (acquire-focus client)))
  
  
  ;;;
  ;;;; Client
  ;;;

 
  (method public (set-client/root self clt root)
    (when (neq? root client-root)
      (when client
        (remove-text-listener client self))
      (set! client clt)
      (set! client-root root)
      (set! client-entry #f)
      (highlight-selection self)
      (when client
        (add-text-listener client (new Event-Handler execute: (lambda (evt) (highlight-selection self)))))))

  
  ;;;
  ;;;; Highlight
  ;;;
  
  
  (method (highlight-selection self)
    (define (insert-entry tree entry)
      (let ((parent (get-parent entry)))
        (when (and parent (is-not? parent File-Entry))
          (insert-entry tree parent)
          (add-row tree children: (list (new Tree-Node title: ""))))
        (typecase entry
          ((Lisp-Entry) (insert-lisp-entry tree entry))
          (else (insert-default-entry self tree entry)))))
    
    (define (insert-lisp-entry tree entry)
      (case (get-kind entry)
        ((block unit) (insert-unit-entry tree entry))
        ((module) (insert-module-entry tree entry))
        ((define definition) (insert-definition-entry tree entry))
        ((class) (insert-class-entry tree entry))
        ((method) (insert-method-entry tree entry))
        (else (insert-default-entry self tree entry))))
    
    (define (insert-unit-entry tree entry)
      (insert-default-entry self tree entry image: {Image-Resource "TypeInterface"}))
    
    (define (insert-module-entry tree entry)
      (insert-default-entry self tree entry image: {Image-Resource "Class"}))
    
    (define (insert-definition-entry tree entry)
      (insert-default-entry self tree entry image: {Image-Resource "Slot"}))
    
    (define (insert-class-entry tree entry)
      (let ((father (let ((ascendant (class-entry-ascendant entry)))
                      (and ascendant
                           (insert-class-ascendant tree ascendant))))
            (subdescendants (class-entry-descendants entry)))
        (let ((state (if (null? subdescendants) 'expanded 'dynamic)))
          (insert-class-node self tree entry father: father state: state))))
    
    (define (insert-class-ascendant tree entry)
      (let ((father (let ((ascendant (class-entry-ascendant entry)))
                      (and ascendant
                           (insert-class-ascendant tree ascendant)))))
        (insert-class-node self tree entry father: father)))
    
    (define (insert-method-entry tree entry)
      (insert-default-entry self tree entry image: {Image-Resource "Link"}))
    
    (unless (inhibit-summaries?)
      (let ((tree (locate self 'summary)))
        (if (not client)
            (remove-every-row tree)
          (let ((start (get-start client)))
            (let ((line (get-line start))
                  (col (get-col start)))
              (when (or (not displayed-line) (/= line displayed-line))
                (set! client-selection (get-selection client))
                (set! client-position (get-scrolled-position client))
                (if (is-not? client-root File-Entry)
                    (begin
                      (remove-every-row tree)
                      (set! client-entry #f))
                  (let ((file (get-file client-root)))
                    (let ((entry (location->entry (list file line col))))
                      (when (neq? entry client-entry)
                        (set! client-entry entry)
                        (remove-every-row tree)
                        (with-update-locked tree
                          (lambda ()
                            (when entry
                              (insert-entry tree entry))))))))
                (set! displayed-line line))))))))
  
  
  (method (insert-class-node self tree entry (father: father #f) (state: state #f) (font: font #f) (color: color #f) (image: image #f) (descendant?: descendant? #f))
    (let ((method-name (and client-entry (eq? (get-kind client-entry) 'method) (->string (get-name client-entry)))))
      (unless (or descendant? (not (class-entry? entry)))
        (let ((interfaces (class-entry-interfaces entry)))
          (for-each (lambda (interface)
                      (when (and method-name (find-definition interface method-name))
                        (insert-class-node self tree interface father: father image: {Image-Resource "Link"})))
                    interfaces)))
      (let ((method (and method-name (find-definition entry method-name))))
        (let ((font (if method {Font Label-Bold} #f))
              (color (if method
                         (cond ((eq? entry (get-parent client-entry))
                                {Color Dark-Green})
                               ((or (memq? 'virtual (get-modifiers method))
                                    (memq? 'chained (get-modifiers method)))
                                {Color Dark-Red})
                               (descendant?
                                {Color Dark-Purple})
                               (else
                                {Color Dark-Blue}))
                       #f))
              (image (or image {Image-Resource "BlueRed"})))
          (insert-default-entry self tree entry father: father state: state font: font color: color image: image user-data: (or method entry))))))
  
  
  (method (insert-default-entry self tree entry (father: father #f) (state: state #f) (title: title #f) (font: font #f) (color: color #f) (image: image #f) (user-data: user-data #f))
    (let* ((state (or state 'expanded))
           (title (or title (get-name entry)))
           (image (or image {Image-Resource "Slot"}))
           (user-data (or user-data entry)))
      (add-row tree father: father state: state children: (list (new Tree-Node title: title font: font color: color image: image)) user-data: user-data)))

  
  ;;;
  ;;;; Update
  ;;;
  
  
  (method package (tree-update-row self tree row)
    (define (insert-entry tree father entry)
      (case (get-kind entry)
        ((method)
         (insert-entry tree father (get-parent entry)))
        ((class)
         (insert-class-descendants tree father entry))))
    
    (define (insert-class-descendants tree father entry)
      (for-each (lambda (subclass)
                  (let ((subdescendants (class-entry-descendants subclass)))
                    (let ((state (if (null? subdescendants) 'expanded 'dynamic))
                          (title (->string (get-name subclass))))
                      (insert-class-node self tree subclass father: father state: state descendant?: #t))))
                (sort string<? (class-entry-descendants entry) key: get-name)))
    
    (let ((entry (get-user-data row)))
      (when (is? entry Lisp-Entry)
        (insert-entry tree row entry))))
  
  
  ;;;
  ;;;; Selection
  ;;;
  
  
  (method package (selection-change self tree origin)
    (let ((guest (current-document)))
      (when guest
        (let ((moniker (get-moniker (get-document-controller guest)))
              (selection (get-single-selection tree)))
          (when selection
            (let ((definition (get-user-data (get-row tree selection))))
              (unless (is? definition Exception)
                (when definition
                  (edit-definitions self definition origin)))))))))
  
  
  ;;;
  ;;;; Edit
  ;;;
  
  
  (method package (edit-definitions self definition origin)
    (define (edit-markup-definition definition)
      (let* ((appl (current-application))
             (moniker (get-origin client-root))
             (frame (edit-document appl moniker visible?: #f))
             (text (get-guest frame))
             (location (append (get-location definition) (list 0)))
             (range (location-range text location)))
        (set-selection-safe text range ensure-displayed?: 'center-caret)
        (focus-host frame)))
    
    (when (eq? origin 'select)
      (let ((appl (current-application)))
        (add-history appl (current-history-item appl))))
    (when (neq? origin 'select)
      (set! client-entry #f))
    (if (is? definition Markup-Node)
        (edit-markup-definition definition)
      (case origin
        ((select)
         (parameterize ((inhibit-summaries? #t))
           (edit-entry definition)
           (acquire-focus (locate self 'summary))))
        ((finish)
         (edit definition force-selection?: #t)
         (client-activate self))
        ((cancel)
         (edit definition force-selection?: #t)))))
  
  
  ;;;
  ;;;; Find
  ;;;
  
  
  (method package (find-classes self)
    (let ((tree (locate self 'summary)))
      (let ((entry (get-single-selected-data tree)))
        (let ((search (new Projects-Search 'definitions (->string (get-name entry)) #f))
              (classes (sort di<? (class-entry-descendants-recursive entry) key: get-name))
              (results (get-search-results)))
          (select-results results (make-definition-search-resultset search classes))))))
  
  
  (method package (find-classes-references self)
    (let ((tree (locate self 'summary)))
      (let ((entry (get-single-selected-data tree)))
        (let ((classes (class-entry-descendants-recursive entry)))
          (let ((names (map (lambda (entry) (->string (get-name entry))) classes)))
            (let ((search-set (->search-set (map (lambda (name) (make-search-context name whole-words?: #t)) names))))
              (let ((search (new Projects-Search 'references search-set #f))
                    (results (get-search-results))
                    (cataloguer get-cataloguer))
                (let ((references (search-references cataloguer search-set)))
                  (select-results results (make-reference-search-resultset search references))))))))))
  
  
  (method package (find-methods self)
    (let ((tree (locate self 'summary)))
      (let ((entry (get-single-selected-data tree)))
        (let ((search (new Projects-Search 'references (->string (get-name entry)) #f))
              (methods (sort di<? (method-entry-descendants entry) key: get-name))
              (results (get-search-results)))
          (select-results results (make-definition-search-resultset search methods)))))))


;;;
;;;; Summary-Tree
;;;


(class Summary-Tree extends Code-Tree
  
  
  (method override (update-row self row)
    (tree-update-row (get-guest self) self row)))


;;;
;;;; Class-Menu
;;;


(class Class-Menu extends Context-Menu
  
  
  (form
    (<install>
      (<Label-Item> name: find            title: "Find Classes" action-handler: {Event-Handler :form on-find-classes})
      (<Label-Item> name: find-references title: "Find Classes References" action-handler: {Event-Handler :form on-find-classes-references})))
  
  
  (method (on-find-classes self evt)
    (with-cursor :wait
      (lambda ()
        (find-classes client))))
  
  
  (method (on-find-classes-references self evt)
    (with-cursor :wait
      (lambda ()
        (find-classes-references client)))))


;;;
;;;; Method-Menu
;;;


(class Method-Menu extends Context-Menu
  
  
  (form
    (<install>
      (<Label-Item> name: find title: "Find Methods" action-handler: {Event-Handler :form on-find-methods})))
  
  
  (method (on-find-methods self evt)
    (with-cursor :wait
      (lambda ()
        (find-methods client))))))
