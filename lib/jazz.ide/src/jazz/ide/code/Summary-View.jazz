;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Summary View
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2012
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.ide.code.Summary-View jazz


(import (jazz.catalog)
        (jazz.catalog.entry)
        (jazz.editor.lisp)
        (jazz.graphic)
        (jazz.ide)
        (jazz.io)
        (jazz.jml)
        (jazz.library)
        (jazz.library.component)
        (jazz.system)
        (jazz.ui)
        (jazz.ui.view))


(definition inhibit-summaries?
  (make-parameter #f))


(class Summary-View extends Layout-View


  (property client initialize #f accessors generate)
  
  
  (slot client-entry     initialize #f)
  (slot client-selection initialize #f)
  (slot client-position  initialize #f)
  (slot displayed-entry  initialize #f)
  

  (form
    (<install>                                     layout-type: fill
      (<Layout-View>                name: tools)
      (<Scroller-View>              name: scroller vscroll?: #t hscroll?: #t style: tool
        (<!>                        name: content  layout-type: fill
          (<Tree-Header>            name: header   shown?: #f
            (<!>                    name: content
              (<Summary-Tree>       name: summary  portfolio: :images show-header?: #f always-select?: #t selection-handler: {Event-Handler :form on-selection-change} double-click-handler: {Event-Handler :form on-double-click} return-press-handler: {Event-Handler :form on-return-press} escape-press-handler: {Event-Handler :form on-escape-press}
                (<Tree-Node-Column>                title: "Summary" width: 329))))))))
  
  
  (method meta override (external-name . rest)
    'Summary)


  ;;;
  ;;;; Host
  ;;;
  
  
  (method meta override (host-icon)
    {Image-Resource "AnalysisManager"})
  
  
  (method meta override (host-title)
    "Summary")
  
  
  (method override (client-activate)
    (define (client-entry guest)
      (when (is? guest Code-Text-View)
        (let ((moniker (get-moniker~ (get-document-controller~ guest))))
          (when moniker
            (let ((ext (get-extension~ moniker)))
              (if (extension=? ext "jml")
                  (safe-read-form moniker)
                (let ((cataloguer (get-cataloguer~ (get-application))))
                  (get-file-entry~ cataloguer moniker context: (get-context~ guest)))))))))
    
    (unless (inhibit-summaries?)
      (let ((guest (current-document)))
        (let ((entry (client-entry guest)))
          (if (not entry)
              (set-client/entry #f #f)
            (set-client/entry guest entry))))))
  
  
  (method override (client-deactivate)
    (set-client/entry #f #f))
  
  
  (method (tree-focus-gained)
    (when client
      (set! client-selection (get-selection~ client))
      (set! client-position (get-scrolled-position~ client))))
 

  ;;;
  ;;;; Docked
  ;;;
  
  
  (method override (get-tools-view)
    (locate 'tools))
  
  
  (method override (focus-default)
    (let ((tree (locate 'summary)))
      (acquire-focus~ tree)))
  
  
  ;;;
  ;;;; Actions
  ;;;
  

  (method override (guest-actions)
    (cons (find-actions 'summary-view)
          (nextmethod)))
 

  ;;;
  ;;;; Events
  ;;;


  (method (on-selection-change evt)
    (let ((sender (get-sender~ evt)))
      (case (get-name~ sender)
        ((summary)
         (selection-change sender 'select)))))


  (method (on-double-click evt)
    (let ((sender (get-sender~ evt)))
      (case (get-name~ sender)
        ((summary)
         (selection-change sender 'finish)))))
  
  
  (method override (on-return-press key)
    (finish-focus))
  
  
  (method override (on-escape-press key)
    (cancel-focus))
  
  
  (method (on-cancel evt)
    (cancel-focus))
  
  
  (method (finish-focus)
    (selection-change (locate 'summary) 'finish))
  
  
  (method (cancel-focus)
    (when client
      (when client-selection
        (set-selection-safe~ client client-selection force?: #t ensure-displayed?: #f)
        (scroll-to~ client client-position))
      (acquire-focus~ client)))
  
  
  ;;;
  ;;;; Client
  ;;;

 
  (method public (set-client/entry clt entry)
    (when (neq? entry client-entry)
      (when client
        (remove-text-listener~ client self))
      (set! client clt)
      (set! client-entry entry)
      (set! displayed-entry #f)
      (highlight-selection)
      (when client
        (add-text-listener~ client (new Event-Handler execute: (lambda (evt) (highlight-selection)))))))

  
  ;;;
  ;;;; Highlight
  ;;;
  
  
  (method (highlight-selection)
    (define (insert-entry tree entry child)
      (let ((parent (get-parent~ entry)))
        (when (and parent (is-not? parent File-Entry))
          (insert-entry tree parent entry)
          (add-row~ tree children: (list (new Tree-Node title: ""))))
        (typecase entry
          ((Lisp-Entry) (insert-lisp-entry tree entry child))
          (else (insert-default-entry tree entry child)))))
    
    (define (insert-lisp-entry tree entry child)
      (case (get-kind~ entry)
        ((block unit) (insert-unit-entry tree entry child))
        ((module) (insert-module-entry tree entry child))
        ((define definition) (insert-definition-entry tree entry child))
        ((class) (insert-class-entry tree entry child))
        ((method) (insert-method-entry tree entry child))
        (else (insert-default-entry tree entry child))))
    
    (define (insert-unit-entry tree entry child)
      (insert-default-entry tree entry child image: {Image-Resource "TypeInterface"}))
    
    (define (insert-module-entry tree entry child)
      (insert-default-entry tree entry child image: {Image-Resource "Class"}))
    
    (define (insert-definition-entry tree entry child)
      (insert-default-entry tree entry child image: {Image-Resource "Slot"}))
    
    (define (insert-class-entry tree entry child)
      (let ((father (let ((ascendant (class-entry-ascendant entry)))
                      (when ascendant
                        (insert-class-ascendant tree ascendant child)))))
        (insert-class-node tree entry child father: father state: 'dynamic)))
    
    (define (insert-class-ascendant tree entry child)
      (let ((father (let ((ascendant (class-entry-ascendant entry)))
                      (when ascendant
                        (insert-class-ascendant tree ascendant child)))))
        (insert-class-node tree entry child father: father)))
    
    (define (insert-method-entry tree entry child)
      (insert-default-entry tree entry child image: {Image-Resource "Link"}))
    
    (unless (inhibit-summaries?)
      (let ((tree (locate 'summary)))
        (if (is-not? client-entry File-Entry)
            (begin
              (remove-every-row~ tree)
              (set! displayed-entry #f))
          (let ((file (get-file~ client-entry))
                (start (get-start~ client)))
            (let ((line (get-line~ start))
                  (col (get-col~ start)))
              (let ((entry (location->entry (list file line col))))
                (when (or (not displayed-entry) (neq? entry displayed-entry))
                  (remove-every-row~ tree)
                  (with-update-locked~ tree
                    (lambda ()
                      (if (not entry)
                          ;; put back when we display the file entry
                          #f;(insert-entry tree client-entry #f)
                        (insert-entry tree entry #f)))))
                (set! displayed-entry entry))))))))
  
  
  (method (insert-class-node tree entry child (father: father #f) (state: state #f) (font: font #f) (color: color #f))
    (let ((method (and child (eq? (get-kind~ child) 'method) (find-definition~ entry (->string (get-name~ child))))))
      (let ((font (if method {Font Label-Bold} #f))
            (color (if method
                       (cond ((eq? entry (get-parent~ child))
                              {Color Dark-Green})
                             ((or (memq? 'virtual (get-modifiers~ method))
                                  (memq? 'chained (get-modifiers~ method)))
                              {Color Dark-Red})
                             (else
                              {Color Dark-Blue}))
                     #f)))
        (insert-default-entry tree entry child father: father state: state font: font color: color image: {Image-Resource "BlueRed"} user-data: (or method entry)))))
  
  
  (method (insert-default-entry tree entry child (father: father #f) (state: state #f) (title: title #f) (font: font #f) (color: color #f) (image: image #f) (user-data: user-data #f))
    (let* ((state (or state 'expanded))
           (title (or title (get-name~ entry)))
           (image (or image {Image-Resource "Slot"}))
           (user-data (or user-data entry)))
      (add-row~ tree father: father state: state children: (list (new Tree-Node title: title font: font color: color image: image)) user-data: user-data)))

  
  ;;;
  ;;;; Update
  ;;;
  
  
  (method (tree-update-row tree row)
    (define (insert-entry tree father entry)
      (case (get-kind~ entry)
        ((method)
         (insert-entry tree father (get-parent~ entry)))
        ((class)
         (insert-class-descendants tree father entry))))
    
    (define (insert-class-descendants tree father entry)
      (for-each (lambda (subclass)
                  (let ((subdescendants (class-entry-descendants subclass)))
                    (let ((state (if (null? subdescendants) 'expanded 'dynamic))
                          (title (->string (get-name~ subclass))))
                      (insert-class-node tree subclass #f father: father state: state))))
                (sort string<? (class-entry-descendants entry) key: get-name~)))
    
    (let ((entry (get-user-data~ row)))
      (when (is? entry Lisp-Entry)
        (insert-entry tree row entry))))
  
  
  ;;;
  ;;;; Selection
  ;;;
  
  
  (method (selection-change tree origin)
    (let ((guest (current-document)))
      (when guest
        (let ((moniker (get-moniker~ (get-document-controller~ guest)))
              (selection (get-single-selection~ tree)))
          (when selection
            (let ((definition (get-user-data~ (get-row~ tree selection))))
              (unless (is? definition Exception)
                (when definition
                  (edit-definitions definition origin)))))))))
  
  
  ;;;
  ;;;; Edit
  ;;;
  
  
  (method (edit-definitions definition origin)
    (define (edit-jml-definition definition)
      (let* ((appl (get-application))
             (moniker (get-origin~ client-entry))
             (frame (edit-document~ appl moniker visible?: #f))
             (text (get-guest~ frame))
             (location (append (get-location~ definition) (list 0)))
             (range (location-range~ text location)))
        (set-selection-safe~ text range ensure-displayed?: 'center-caret)
        (focus-host~ frame)))
    
    (when (eq? origin 'select)
      (let ((appl (get-application)))
        (add-history~ appl (current-history-item~ appl))))
    (when (neq? origin 'select)
      (set! displayed-entry #f))
    (if (is? definition JML-Node)
        (edit-jml-definition definition)
      (case origin
        ((select)
         (parameterize ((inhibit-summaries? #t))
           (edit~ definition)
           (acquire-focus~ (locate 'summary))))
        ((finish)
         (edit~ definition force-selection?: #t)
         (client-activate))
        ((cancel)
         (edit~ definition force-selection?: #t))))))


;;;
;;;; Summary-Tree
;;;


(class Summary-Tree extends Code-Tree
  
  
  (method override (focus-gained)
    (nextmethod)
    (tree-focus-gained~ (get-guest)))
  
  
  (method override (update-row row)
    (tree-update-row~ (get-guest) self row))))
