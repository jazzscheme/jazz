;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Image Browser
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Stephane Le Cornec.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.ide.image.Image-Browser jazz


(import (jazz.handler)
        (jazz.io)
        (jazz.jml)
        (jazz.resource)
        (jazz.tree)
        (jazz.ui)
        (jazz.ui.dialog))


(class undocumented Image-Browser extends Layout-View
  
  
  (slot directory initialize #f)

  
  (form
    (<install>                                     layout-type: fill
      (<Layout-View>                name: tools
        (<Push-Tool>                name: select   size: {Dimension 22 22} tooltip?: #t tooltip-text: "Directory" resource: {Image-Resource "OpenedFolder"} portfolio: :images action-handler: {Event-Handler :guest on-select-directory}))
      (<Scroller-View>              name: scroller style: document hscroll?: #t vscroll?: #t
        (<!>                        name: content  layout-type: fill
          (<Tree-Header>            name: header   style: document
            (<!>                    name: content
              (<Tree-View>          name: tree     portfolio: :images
                (<Tree-Node-Column>                title: "View" width: 419 toplevel-controls?: #f))))))))
      
  
  (method meta override (external-name . rest)
    'images-browser)
  
  
  (method (on-select-directory evt)
    (set! directory (choose-directory))
    (update-images))
  
  
  (method (update-images)
    (let ((tree (get-tree)))
      (with-update-locked~ tree
        (lambda ()
          (iterate-directory~ directory
            (lambda (file)
              (when (image-file? file)
                (load-image tree file)))
            files?: #t
            directories?: #f
            recursive?: #f)))))
  
  
  (definition (image-file? file)
    (member? (get-extension~ file) '("bmp" "jpg" "jpeg" "png")
             test: extension=?))
  
  
  (definition (load-image tree file)
    (let* ((name (get-base~ file))
           (image (new Resource name)))
      (add-row~ tree children: (list (new Tree-Node title: name image: image)))))
  
  
  ;;;
  ;;;; Host
  ;;;
  
  
  (method meta override (host-icon)
    {Image-Resource "Image"})
  
  
  (method meta override (host-title)
    "Image")
  
  
  ;;;
  ;;;; Docked
  ;;;
  
  
  (method override (get-tools-view)
    (locate 'tools))
  
  
  (method override (focus-default)
    (let ((tree (get-tree)))
      (acquire-focus~ tree)))

  
  ;;;
  ;;;; Component
  ;;;
  
  
  (method (get-tree)
    (locate 'tree))

  
  ;;;
  ;;;; Component
  ;;;
  
  
  (method override (install rest)
    (nextmethod rest)
    (set-shown?~ (locate 'header) #f))))
