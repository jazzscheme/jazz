;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Output Log
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.ide.log.Output-Log jazz


(import (jazz.application)
        (jazz.feedback)
        (jazz.ide)
        (jazz.jml)
        (jazz.outline)
        (jazz.resource)
        (jazz.tree)
        (jazz.ui)
        (jazz.view))


(class undocumented Output-Log extends Navigable-Results


  (form
    (<install>
      (<!>                          name: scroller
        (<!>                        name: content
          (<!>                      name: header
            (<!>                    name: content
              (<!>                  name: locations
                (<Tree-Node-Column> name: message  title: "Message" width: 300))))))))
  
  
  (method meta override (external-name self . rest)
    'output-log)


  ;;;
  ;;;; Host
  ;;;
  
  
  (method meta override (host-icon self)
    {Image-Resource "Spy"})
  
  
  (method meta override (host-title self)
    "Output Log")
  
  
  ;;;
  ;;;; Interface
  ;;;
  
  
  (method public (log-line self line (father: father #f) (state: state 'collapsed) (image: image #f) (user-data: user-data #f))
    (let ((tree (get-tree self)))
      (add-row tree father: father state: state children: (list (new Tree-Node title: line image: image)) user-data: user-data)))

  
  ;;;
  ;;;; Navigation
  ;;;
  

  (method override (edit-selection self forward?)
    (let* ((tree (get-tree self))
           (selection (get-single-selection tree)))
      (when selection
        (let ((info (get-user-data (get-row tree selection))))
          (cond ((null? info)
                 (bell))
                ((is? info Loggable)
                 (edit info))
                ((and (pair? info) (is? (car info) Loggable))
                 (edit-child (car info) (cdr info)))
                (else
                 (bind (file line msg) info
                   (when msg
                     (user-message "{a}" msg))
                   (let ((frame (edit-document self file line forward? #t)))
                     (focus-host frame)))))))))


  (method package (edit-document self file line forward? focus?)
    (with-cursor :wait
      (lambda ()
        (let* ((selection (and line (new Range$Cell$ (new Cell line 0) (new Cell (+ line 1) 0))))
               (frame (edit-document (get-application) file selection: selection visible?: #f)))
          (focus-host frame)
          frame))))))
