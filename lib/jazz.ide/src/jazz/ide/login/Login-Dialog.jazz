;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Login Dialog
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.ide.login.Login-Dialog jazz


(import (jazz.component)
        (jazz.graphic)
        (jazz.ide.login)
        (jazz.io)
        (jazz.jml)
        (jazz.library)
        (jazz.system)
        (jazz.ui)
        (jazz.ui.view))


(class Login-Dialog extends View
  
  
  (property invite initialize #f accessors generate)


  (form
    (<install>                                              size: {Dimension 400 216} return-press-handler: {Event-Handler :form on-return-press} escape-press-handler: {Event-Handler :form on-escape-press}
      (<Label-View>                 name: title             position: {Point 10 9} size: {Dimension 350 16} font: {Font Caption})
      (<Label-View>                 name: description       title: "Please enter the profile that will be used for this session" position: {Point 30 27} size: {Dimension 350 16} font: {Font Label})
      (<Radio-Button>               name: new-button        title: "New" position: {Point 25 88} tooltip?: #t tooltip-text: "Create a new profile" action-handler: {Event-Handler :form on-new})
      (<Radio-Button>               name: existing-button   title: "Existing" position: {Point 25 114} tooltip?: #t tooltip-text: "Open an existing profile from the standard directories" action-handler: {Event-Handler :form on-existing})
      (<Horizontal-Line>                                    position: {Point 0 48} size: {Dimension 400 8})
      (<Vertical-Line>                                      position: {Point 110 59} size: {Dimension 8 101})
      (<Label-View>                 name: new-label         title: "Name:" position: {Point 136 88} size: {Dimension 40 16} visible?: #f font: {Font Label})
      (<Border-View>                name: new-border        position: {Point 196 85} size: {Dimension 171 19} visible?: #f border-type: edge style: entry
        (<Scroller-View>                                    hscroll?: #f vscroll?: #f
          (<!>                      name: content           layout-type: fill
            (<Name-Text-View>       name: new-profile       accepts-returns?: #f show-unfocused-selection?: #f tooltip?: #t tooltip-text: "Profile name. Can contain letters, digits, dashes, underscores and periods" return-press-handler: {Event-Handler :form on-return-press} escape-press-handler: {Event-Handler :form on-escape-press} content-change-handler: {Event-Handler :form on-content-change}))))
      (<Label-View>                 name: template-label    title: "Template:" position: {Point 136 114} size: {Dimension 60 16} visible?: #f font: {Font Label})
      (<Combo-Widget>               name: template          position: {Point 194 110} size: {Dimension 175 22} visible?: #f)
      (<Border-View>                name: existing-border   position: {Point 140 64} size: {Dimension 251 92} visible?: #f border-type: edge style: entry
        (<Scroller-View>                                    vscroll?: #t style: document
          (<!>                      name: content           layout-type: fill
            (<Tree-View>            name: profiles          show-header?: #f font: {Font Label} default-row-height: 15 selection-mode: row can-select-empty?: #f tooltip?: #t tooltip-text: "List of profiles found in the standard directories" double-click-handler: {Event-Handler :form on-double-click} return-press-handler: {Event-Handler :form on-return-press} escape-press-handler: {Event-Handler :form on-escape-press}
              (<Tree-Node-Column>                           title: "Profile" width: 176 toplevel-controls?: #f display-images?: #f)))))
      (<Horizontal-Line>                                    position: {Point 0 170} size: {Dimension 400 8})
      (<Check-Box>                  name: always-use        title: "Always use this profile" position: {Point 10 185} size: {Dimension 144 18})
      (<Push-Button>                name: login             title: "Login" position: {Point 225 182} size: {Dimension 80 24} default?: #t action-handler: {Event-Handler :host on-ok})
      (<Push-Button>                name: cancel            title: "Cancel" position: {Point 311 182} size: {Dimension 80 24} action-handler: {Event-Handler :host on-cancel})
      (<Trait>                      name: new
        (<install>
          (<!>                      name: new-label         visible?: #t)
          (<!>                      name: new-border        visible?: #t)
          (<!>                      name: template-label    visible?: #t)
          (<!>                      name: template          visible?: #t)))
      (<Trait>                      name: existing
        (<install>
          (<!>                      name: existing-border   visible?: #t)))))
  
  
  (method meta override (host-title)
    "Login")
  
  
  (method override (finish rest)
    (nextmethod rest)
    (setup-new-profile)
    (setup-existing-profiles)
    (set-title~ (locate 'title) (format "Welcome{? to {a}~}" invite)))
  
  
  (method (setup-new-profile)
    (set-string-content~ (locate 'new-profile) (user-name))
    (setup-templates))
  
  
  (method override (focus-default)
    (case (get-active-trait-name)
      ((new) (focus-new))
      ((existing) (focus-existing))))
  
  
  (method (setup-templates)
    (let ((kinds (parse-jml (get-profile-kinds)))
          (combo (locate '(template box))))
      (set-choices~ combo (map (lambda (kind)
                                 (list kind (get-property~ kind 'name)))
                               (get-children~ kinds)))
      (set-value~ combo (first-child~ kinds))))
  
  
  (method (setup-existing-profiles)
    (receive (profiles rank) (collect-profile-info)
      (set-checked?~ (locate 'always-use) (and rank (let ((profile (element profiles rank))
                                                          (settings (get-settings~ (get-application))))
                                                      (and settings (ci=? (profile-title profile)
                                                                          (get-setting~ settings 'profile))))))
      (cond ((some-user-profile?)
             (install-existing profiles rank)
             (set-selected?~ (locate 'existing-button) #t))
            (else
             (install-new)
             (set-selected?~ (locate 'new-button) #t)))))
  

  ;;;
  ;;;; Modal
  ;;;
  
  
  (method override (validate-dialog)
    (let ((message (validate-profile)))
      (when message
        (message-box message)
        (signal-cancel))))
  
  
  (method override (get-modal-result)
    (let ((template (get-property~ (get-value~ (locate '(template box))) 'template))
          (always-use? (get-checked?~ (locate 'always-use))))
      (case (get-active-trait-name)
        ((new)
         (let ((content (get-string-content~ (locate 'new-profile))))
           (let ((name (string->symbol (capitalize content)))
                 (unit (string->symbol (profile-unit-name content))))
             (values name unit template always-use?))))
        ((existing)
         (let* ((tree (locate 'profiles))
                (rank (get-single-selection~ tree)))
           (if (not rank)
               (values #f #f #f)
             (let ((profile (get-user-data~ (get-row~ tree rank))))
               (values (profile-name profile) (profile-unit profile) template always-use?))))))))
  
  
  (definition (profile-unit-name name)
    (format "profile.{a}" (downcase name)))
  

  ;;;
  ;;;; Keyboard
  ;;;
  
  
  (method override (get-tab-stops)
    (case (get-active-trait-name)
      ((new)
       '())
      ((existing)
       '())))
  

  ;;;
  ;;;; Events
  ;;;
  
  
  (method (on-new evt)
    (install-new))
  
  
  (method (on-existing evt)
    (receive (profiles rank) (collect-profile-info)
      (install-existing profiles rank)))
  
  
  (method (on-content-change evt)
    (update-login))
  
  
  (method (on-moniker-update evt)
    (update-login))
  
  
  (method (on-double-click evt)
    (when (get-enabled?~ (locate 'login))
      (validate-dialog)
      (let ((dialog (get-host)))
        (end-modal~ dialog (get-modal-result~ dialog)))))
  
  
  ;; Should really be generic in the Dialog class
  (method override (on-return-press evt)
    (when (get-enabled?~ (locate 'login))
      (validate-dialog)
      (let ((dialog (get-host)))
        (end-modal~ dialog (get-modal-result~ dialog)))))
  
  
  ;; Should really be generic in the Dialog class
  (method override (on-escape-press evt)
    (let ((dialog (get-host)))
      (cancel-modal~ dialog)))
  

  ;;;
  ;;;; Branches
  ;;;
  
  
  (method (install-new)
    (set-active-trait (locate 'new))
    (when player
      (focus-new))
    (update-login))
  
  
  (method (focus-new)
    (let ((text (locate 'new-profile)))
      (acquire-focus~ text)
      (select-all~ text)))
  
  
  (method (install-existing profiles rank)
    (set-active-trait (locate 'existing))
    (let ((tree (locate 'profiles))
          (rank (or rank (and (not-null? profiles) 0))))
      (remove-every-row~ tree)
      (for-each (lambda (profile)
                  (let ((title (profile-title profile)))
                    (add-row~ tree children: (list (new Tree-Node title: title)) user-data: profile)))
                profiles)
      (when (and rank (< rank (get-visible-count~ tree)))
        (set-single-selection~ tree rank)
        (ensure-displayed~ tree)))
    (when player
      (focus-existing))
    (update-login))
  
  
  (method (focus-existing)
    (acquire-focus~ (locate 'profiles)))
  
  
  (method (collect-profile-info)
    (define (collect-existing-profiles)
      (let ((jazz-repository (find-repository 'Jazz)))
        (let ((ranked-profiles (collect (lambda (info)
                                          (bind (package . profile) info
                                            (let ((jazz? (eq? (package-repository package) jazz-repository)))
                                              (when (or (not jazz?) (show-jazz-profiles?))
                                                (let ((show-appl (show-profiles-appl)))
                                                  (when (or (not show-appl)
                                                            (eq? (profile-appl profile) show-appl))
                                                    (cons (cons (if jazz? 2 1)
                                                                (downcase (profile-title profile)))
                                                          profile)))))))
                                        (gather-profiles))))
          (map cdr (sort nu<? ranked-profiles key: car)))))
    
    (let ((profiles (collect-existing-profiles))
          (default-profile (string-parameter "default-profile" 'profile #f)))
      (let ((rank (and default-profile (find profiles default-profile key: profile-title test: ci=?))))
        (values profiles rank))))
  
  
  (method (some-user-profile?)
    (let ((jazz-repository (find-repository 'Jazz)))
      (some? (lambda (info)
               (bind (package . profile) info
                 (neq? (package-repository package) jazz-repository)))
             (gather-profiles))))
  

  ;;;
  ;;;; Update
  ;;;
  
  
  (method (update-login)
    (case (get-active-trait-name)
      ((new)
       (set-enabled?~ (locate 'login) (not (empty-string? (get-string-content~ (locate 'new-profile))))))
      ((existing)
       (set-enabled?~ (locate 'login) (not-null? (get-selection~ (locate 'profiles)))))))
  

  ;;;
  ;;;; Validate
  ;;;
  
  
  (method (validate-profile)
    (case (get-active-trait-name)
      ((new)
       (let ((profile-name (get-string-content~ (locate 'new-profile))))
         (validate-new-profile profile-name)))
      (else
       #f)))
  
  
  (method (validate-new-profile profile-name)
    (let ((unit-name (profile-unit-name profile-name)))
      (let ((directory (new Directory (list 'Profiles "lib" unit-name))))
        (cond ((let ((first (first profile-name)))
                 (not (or (eqv? first #\_)
                          (alphabetic? first))))
               "Profile name must start with a letter or an underscore")
              ((not (every? (lambda (char)
                              (or (alphabetic? char)
                                  (numeric? char)
                                  (memv? char '(#\minus #\_))))
                            profile-name))
               "Profile name can only contain letters, digits, dashes and underscores")
              ((exists?~ directory)
               (format "Profile directory already exists: {a}" (parse~ directory)))
              (else
               #f)))))
  

  ;;;
  ;;;; Drawing
  ;;;
  
  
  (definition Header-Color
    (new Color red: 120 green: 120 blue: 255))

  
  (method override (draw surface context)
    (let ((size (get-size)))
      (gradient-fill-rect~ surface (new Rect 0 0 (get-width~ size) 50) (list (list 0 {Color White}) (list 1 Header-Color)))))))
