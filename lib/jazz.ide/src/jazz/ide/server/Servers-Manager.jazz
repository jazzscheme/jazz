;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Servers Manager
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.ide.server.Servers-Manager jazz


(import (jazz.action)
        (jazz.application)
        (jazz.component)
        (jazz.event)
        (jazz.handler)
        (jazz.ide)
        (jazz.io)
        (jazz.jml)
        (jazz.layout)
        (jazz.menu)
        (jazz.network)
        (jazz.outline)
        (jazz.process)
        (jazz.resource)
        (jazz.tree)
        (jazz.ui)
        (jazz.view))


(class undocumented Servers-Manager extends Layout-View
  
  
  (slot configurations initialize '())
  (slot servers        initialize (make-table test: eq?))


  (form
    (<install>                                            layout-type: border
      (<Layout-View>                 name: tools
        (<Push-Tool>                 name: edit           size: {Dimension 22 22} location: tail enabled?: #f tooltip?: #t tooltip-text: "Edit" resource: {Image-Resource "Edit"} portfolio: :images action-handler: {Event-Handler :guest on-edit-server})
        (<Separator>                 name: edit-separator location: tail)
        (<Push-Tool>                 name: start          size: {Dimension 22 22} location: tail enabled?: #f tooltip?: #t tooltip-text: "Start" resource: {Image-Resource "Run"} portfolio: :images action-handler: {Event-Handler :guest on-start-server})
        (<Push-Tool>                 name: stop           size: {Dimension 22 22} location: tail enabled?: #f tooltip?: #t tooltip-text: "Stop" resource: {Image-Resource "Stop"} portfolio: :images action-handler: {Event-Handler :guest on-stop-server})
        (<Push-Tool>                 name: restart        size: {Dimension 22 22} location: tail enabled?: #f tooltip?: #t tooltip-text: "Restart" resource: {Image-Resource "Restart"} portfolio: :images action-handler: {Event-Handler :guest on-restart-server})
        (<Separator>                                      location: tail)
        (<Toggle-Tool>               name: debug          size: {Dimension 22 22} location: tail enabled?: #f tooltip?: #t tooltip-text: "Debug" resource: {Image-Resource "Debugger"} portfolio: :images action-handler: {Event-Handler :guest on-debug-server})
        (<Separator>                                      location: tail)
        (<Push-Tool>                 name: refresh        size: {Dimension 22 22} location: tail enabled?: #t tooltip?: #t tooltip-text: "Refresh" resource: {Image-Resource "Refresh"} portfolio: :images action-handler: {Event-Handler :guest on-refresh}))
      (<Scroller-View>               name: scroller       location: center vscroll?: #t hscroll?: #t style: tool
        (<!>                         name: content        layout-type: fill
          (<Tree-Header>             name: header         shown?: #t style: tool
            (<!>                     name: content
              (<Tree-View>           name: servers        filled-column: description portfolio: :images selection-mode: row multiple-selection?: #f selection-handler: {Event-Handler :form on-selection-change} double-click-handler: {Event-Handler :form on-double-click} context-menu-handler: {Event-Handler :form on-context-menu}
                (<Tree-Node-Column>  name: name           title: "Name" width: 200 toplevel-controls?: #f)
                (<Tree-Label-Column> name: state          title: "State" width: 150)
                (<Tree-Label-Column> name: port           title: "Port" width: 75)
                (<Tree-Label-Column> name: description    title: "Description" width: 250)
                (<Tree-Label-Column> name: hits           title: "Hits" width: 100)
                (<Tree-Label-Column> name: debugged       title: "Debug" width: 100))))))))
  
  
  (method meta override (external-name self . rest)
    'servers-manager)

  
  ;;;
  ;;;; Host
  ;;;
  
  
  (method meta override (host-icon self)
    {Image-Resource "Model"})
  
  
  (method meta override (host-title self)
    "Servers")
  
  
  ;;;
  ;;;; Docked
  ;;;
  
  
  (method override (get-tools-view self)
    (locate self 'tools))
  
  
  (method override (focus-default self)
    (acquire-focus (get-tree self)))
  
  
  ;;;
  ;;;; Component
  ;;;

  
  (method override (install self rest)
    (nextmethod self rest)
    (setup-configurations self)
    (update-servers self))

  
  ;;;
  ;;;; Access
  ;;;
  
  
  (method package (get-tree self)
    (locate self 'servers))

  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method (on-edit-server self evt)
    (with-cursor :wait
      (lambda ()
        (edit-server self (selected-configuration self)))))
  
  
  (method (on-start-server self evt)
    (with-cursor :wait
      (lambda ()
        (start-server self (selected-configuration self))))
    (update-tools self)
    (update-states self))
  
  
  (method (on-stop-server self evt)
    (with-cursor :wait
      (lambda ()
        (stop-server self (selected-configuration self))))
    (update-tools self)
    (update-states self))
  
  
  (method (on-restart-server self evt)
    (with-cursor :wait
      (lambda ()
        (restart-server self (selected-configuration self))))
    (update-tools self)
    (update-states self))
  
  
  (method (on-debug-server self evt)
    (debug-server self (selected-configuration self))
    (update-tools self)
    (update-states self))
  
  
  (method package (on-selection-change self evt)
    (let ((sender (get-sender evt)))
      (case (get-name sender)
        ((servers)
         (update-tools self)))))
  
  
  (method package (on-refresh self evt)
    (update-servers self))
  
  
  (method (update-tools self)
    (let* ((config (selected-configuration self))
           (server (and config (find-server self (get-name config)))))
      (set-enabled? (locate self 'edit) config)
      (set-enabled? (locate self 'start) (and config (not server)))
      (set-enabled? (locate self 'stop) server)
      (set-enabled? (locate self 'restart) server)
      (set-enabled? (locate self 'debug) server)
      (set-selected? (locate self 'debug) (and config (get-debug? config)))))
  
  
  (method (on-double-click self evt)
    (with-cursor :wait
      (lambda ()
        (start/stop-server self (selected-configuration self))))
    (update-tools self)
    (update-states self))
  
  
  (method (on-context-menu self evt)
    (define (new-servers-menu config)
      (let* ((menu (new Server-Menu))
             (name (get-name config))
             (server (find-server self name)))
        (set-visible? (locate menu 'start) (not server))
        (set-visible? (locate menu 'stop) server)
        (set-visible? (locate menu 'restart) server)
        (set-visible? (locate menu 'debug) server)
        (layout-menu menu)
        menu))
    
    (let* ((sender (get-sender evt))
           (pos (get-position evt))
           (acquired (acquire self sender pos)))
      (with-context-click sender pos
        (lambda ()
          (let ((config (selected-configuration self)))
            (when config
              (let ((menu (new-servers-menu config)))
                (track-popup-menu self menu acquired))))))))

  
  ;;;
  ;;;; Setup
  ;;;
  
  
  (method (setup-configurations self)
    (define Servers-File
      {File Profile "settings" "Servers.jml"})
    
    (define (load-servers)
      (let ((file Servers-File))
        (and (is-alias? 'Profile)
             (exists? file)
             (instantiate (read-form file)))))
    
    (define (default-servers)
      (new Server-Configurations))
    
    (with-safe-execution "loading the servers"
      (lambda ()
        (set! configurations (load-servers)))
      continue-handler:
      (lambda (err)
        (set! configurations (default-servers)))))

  
  ;;;
  ;;;; Update
  ;;;
  
  
  (method (update-servers self)
    (let ((tree (get-tree self)))
      (remove-every-row tree)
      (with-update-locked tree
        (lambda ()
          (when configurations
            (for-each (lambda (config)
                        (let* ((name (get-name config))
                               (server (find-server self name))
                               (state (if (not server) 'stopped 'started))
                               (port (get-port config))
                               (image (case state ((stopped) {Image-Resource "ServerStopped"}) ((started) {Image-Resource "ServerRunning"})))
                               (title (->string name))
                               (state-text (case state ((stopped) "Stopped") ((started) "Started")))
                               (description (get-description config))
                               (hits (if (not server) 0 (get-hits server)))
                               (debug? (get-debug? config)))
                          (add-row tree state: 'dynamic children: (list (new Tree-Node title: title image: image) (new Tree-Label title: state-text) (new Tree-Label title: (->string port)) (new Tree-Label title: description) (new Tree-Label title: (->string hits)) (new Tree-Label title: (if debug? "True" "False"))) user-data: config)))
                      (get-children configurations)))))))
  
  
  (method (update-states self)
    (let ((tree (get-tree self)))
      (for-each-visible-row tree
       (lambda (row rank)
         (let* ((c0 (new Cell rank 0))
                (c1 (new Cell rank 1))
                (c5 (new Cell rank 5))
                (config (get-user-data row))
                (name (get-name config))
                (server (find-server self name))
                (state (if server 'started 'stopped))
                (image (case state ((stopped) {Image-Resource "ServerStopped"}) ((started) {Image-Resource "ServerRunning"}) (else "Document")))
                (state-text (case state ((stopped) "Stopped") ((started) "Started")))
                (debug? (get-debug? config)))
           (set-image (get-cell-data tree c0) image)
           (set-title (get-cell-data tree c1) state-text)
           (set-title (get-cell-data tree c5) (if debug? "True" "False"))
           (invalidate-cell tree c0)
           (invalidate-cell tree c1)
           (invalidate-cell tree c5))))))

  
  ;;;
  ;;;; Server
  ;;;
  
  
  (method (start-server self config)
    (stop-server self config)
    (let* ((name (get-name config))
           (unit (get-unit config))
           (class (get-class config))
           (port (get-port config))
           (debug? (get-debug? config))
           (server (new (module-ref unit class) port: port)))
      (start-process server)
      (table-set! servers name server)))
  
  
  (method (stop-server self config)
    (let* ((name (get-name config))
           (server (find-server self name)))
      (when server
        (stop server)
        (table-set! servers name #f))))
  
  
  (method (restart-server self config)
    (stop-server self config)
    (start-server self config))
  
  
  (method (start/stop-server self config)
    (let* ((name (get-name config))
           (server (find-server self name))
           (state (if (not server) 'stopped 'started)))
      (case state
        ((stopped) (start-server self config))
        ((started) (stop-server self config)))))
  
  
  (method (debug-server self config)
    (toggle-debug? config)
    (let* ((name (get-name config))
           (server (find-server self name)))
      (when server
        (set-debug? server (get-debug? config)))))
  
  
  (method (edit-server self config)
    (let ((appl (get-application))
          (class (get-class config)))
      (edit-definitions appl class context: 'jazz)))
  
  
  (method public (find-server self name)
    (table-ref servers name #f))

  
  ;;;
  ;;;; Selection
  ;;;
  
  
  (method (selected-object self)
    (let* ((tree (get-tree self))
           (rank (get-single-selection tree)))
      (and rank
           (get-user-data (get-row tree rank)))))
  
  
  (method (selected-configuration self)
    (let ((object (selected-object self)))
      (and (and object (is? object Server-Configuration))
           object))))


;;;
;;;; Server-Menu
;;;


(class Server-Menu extends Context-Menu
  
  
  (form
    (<install>
      (<Label-Item>     name: edit           title: "Edit Server" icon: {Image-Resource "Edit"} action-handler: {Action servers edit-server})
      (<Separator-Item>)
      (<Label-Item>     name: start          title: "Start Server" icon: {Image-Resource "Run"} action-handler: {Action servers start-server})
      (<Label-Item>     name: stop           title: "Stop Server" icon: {Image-Resource "Stop"} action-handler: {Action servers stop-server})
      (<Label-Item>     name: restart        title: "Restart Server" icon: {Image-Resource "Restart"} action-handler: {Action servers restart-server})
      (<Separator-Item>)
      (<Label-Item>     name: debug          title: "Debug Server" icon: {Image-Resource "Debugger"} action-handler: {Action servers debug-server})))))
