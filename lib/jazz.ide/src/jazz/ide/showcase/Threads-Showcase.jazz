;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Threads Showcase
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.ide.showcase.Threads-Showcase jazz


(import (jazz.audio)
        (jazz.event)
        (jazz.feedback)
        (jazz.handler)
        (jazz.markup)
        (jazz.resource)
        (jazz.ui)
        (jazz.view))


(class Threads-Showcase extends View
    
  
  (slot threads  initialize '())
  (slot slowdown initialize #f)
  (slot start    initialize #f)
  (slot count    initialize 0)
  (slot done?    initialize #f)

  
  (form
    (<install>
      (<Push-Button> name: add-threads     title: "Add Threads" position: {Point 4 4} size: {Dimension 100 22} action-handler: {Event-Handler :form on-add-threads})
      (<Push-Button> name: suspend-threads title: "Suspend" position: {Point 114 4} size: {Dimension 100 22} action-handler: {Event-Handler :form on-suspend-threads})
      (<Push-Button> name: resume-threads  title: "Resume" position: {Point 224 4} size: {Dimension 100 22} action-handler: {Event-Handler :form on-resume-threads})
      (<View>        name: area            position: {Point 2 32} size: {Dimension 776 470})))
  
  
  (method override (destroy-component self)
    (stop-showcase self)
    (nextmethod self))


  (method (start-showcase self)
    (set! start (current-monotonic))
    (set! count 0)
    (set! done? #f)
    (add-threads self))


  (method (stop-showcase self)
    (set! done? #t)
    (for-each thread-join! threads)
    (set! threads '()))
  
  
  (method (add-icon self n)
    (let* ((area (locate self 'area))
           (size (get-size area)))
      (new Showcase-Icon
        resource: {Image-Resource "Jedi"}
        parent: area
        position: (new Point (random (- (get-width size) 42)) (random (- (get-height size) 42)))
        size: {Dimension 32 32})))
  
  
  (method public (add-threaded-icon self n)
    (let* ((icon (add-icon self n))
           (thread (thread-start!
                     (new-thread
                       (lambda ()
                         (while (not done?)
                           (sleep slowdown)
                           (synchronize-event
                             (lambda ()
                               (animate-icon icon)))))
                       'showcase))))
      (set! threads (cons thread threads))
      (set! slowdown (* (length threads) .005))
      icon))
  
  
  (method (on-add-threads self evt)
    (add-threads self))
  
  
  (method (on-suspend-threads self evt)
    @cant-find
    (for-each suspend threads))
  
  
  (method (on-resume-threads self evt)
    (for-each resume threads))
  
  
  (method (add-threads self)
    (for-each (lambda (n)
                (add-threaded-icon self n))
              (naturals 0 5)))
  
  
  (method (report-timing self)
    (increase! count)
    (when (= (modulo count 100) 0)
      (user-message "{s}" (/ (cast <fl> count) (- (current-monotonic) start)))))
  
  
  (method override (print self output readably)
    (print-unreadable self output
      (lambda (output)
        (format output "{s}"
                (object->serial self))))))


;;;
;;;; Showcase-Icon
;;;


(class Showcase-Icon extends Action-Icon
  
  
  (slot direction-h)
  (slot direction-v)
  
  
  (method override (prepare self rest)
    (nextmethod self rest)
    (set! direction-h (- (random 11) 5))
    (set! direction-v (- (random 11) 5)))
  
  
  (method public (animate-icon self)
    (define (move-icon)
      (let ((pos (get-position self)))
        (set-position self (new Point (+ (get-h pos) direction-h) (+ (get-v pos) direction-v)))))
    
    (define (rebound-icon)
      (let ((rect (get-rect self))
            (area (get-size parent)))
        (when (or (< (get-left rect) 0) (> (get-right rect) (get-width area)))
          (set! direction-h (- direction-h)))
        (when (or (< (get-top rect) 0) (> (get-bottom rect) (get-height area)))
          (set! direction-v (- direction-v)))))
    
    (move-icon)
    (rebound-icon))))
