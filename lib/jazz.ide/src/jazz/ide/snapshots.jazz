;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; IDE Snapshots
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module jazz.ide.snapshots jazz


(import (jazz.application)
        (jazz.editor)
        (jazz.graphic)
        (jazz.handler)
        (jazz.io)
        (jazz.layout)
        (jazz.markup)
        (jazz.outline)
        (jazz.pack)
        (jazz.platform)
        (jazz.resource)
        (jazz.text)
        (jazz.tree)
        (jazz.ui)
        (jazz.view))


(class Snapshots-Explorer extends Layout-View implements Filterable
  
  
  (property directory initialize #f accessors generate)
  
  
  (slot show-moments? initialize #f getter generate)
  (slot snapshots     initialize (make-table test: pathname=? hash: pathname-hash))
  
  
  (form
    (<install>                                                  layout-type: border
      (<Layout-View>                    name: toolbar           size: {Dimension 300 33} location: north layout-type: flow layout-insets: {Rect 0 6 0 0}
        (<Separator>                                            size: {Dimension 2 0})
        (<Label-View>                   name: dir-label         justification: (head -3) title: "Dir:" size: {Dimension 37 20} font: {Font Label})
        (<Border-View>                                          size: {Dimension 300 20} border-type: fill border-insets: {Rect 0 1 0 0}
          (<Border-View>                name: dir-border        border-type: edge style: entry
            (<Moniker-Widget>           name: dir               protocol: dir display-protocol?: #f display-logical?: #f moniker-update-handler: {Event-Handler :form on-moniker-update})))
        (<Separator>                                            size: {Dimension 24 0})
        (<Label-View>                   name: filter-label      justification: (head -3) title: "Filter:" size: {Dimension 37 20} font: {Font Label})
        (<Border-View>                                          size: {Dimension 250 20} border-type: fill border-insets: {Rect 0 1 0 0}
          (<Border-View>                                        border-type: edge style: entry
            (<Scroller-View>                                    hscroll?: #f vscroll?: #f
              (<!>                      name: content           layout-type: fill
                (<Filter-Text-View>     name: filter-text)))))
        (<Separator>                                            size: {Dimension 4 0})
        (<Push-Tool>                    name: filter            size: {Dimension 22 22} tooltip?: #t tooltip-text: "Filter" resource: {Image-Resource "Spy"} portfolio: :images action-handler: {Event-Handler :form on-filter})
        (<Separator>                                            size: {Dimension 60 0})
        (<Toggle-Tool>                  name: show-moments      size: {Dimension 22 22} tooltip?: #t tooltip-text: "Show Moments" resource: {Image-Resource "Filter"} portfolio: :images action-handler: {Event-Handler :form on-show-moments})
        (<Push-Tool>                    name: delete            location: tail size: {Dimension 22 22} tooltip?: #t tooltip-text: "Delete Snapshots" resource: {Image-Resource "Delete"} portfolio: :images action-handler: {Event-Handler :form on-delete-snapshots})
        (<Separator>                                            size: {Dimension 30 0} location: tail)
        (<Push-Tool>                    name: watch             location: tail size: {Dimension 22 22} tooltip?: #t tooltip-text: "Watch Snapshots" resource: {Image-Resource "Spy"} portfolio: :images action-handler: {Event-Handler :form on-watch-snapshots})
        (<Separator>                                            size: {Dimension 30 0} location: tail)
        (<Push-Tool>                    name: update            location: tail size: {Dimension 22 22} tooltip?: #t tooltip-text: "Update" resource: {Image-Resource "Refresh"} portfolio: :images action-handler: {Event-Handler :form on-update-snapshots}))
      (<Splitter-View>                                          location: center orientation: vert mode: relative division: 50 style: document
        (<Border-View>                  name: tree-border       location: first border-type: edge style: entry
          (<Scroller-View>                                      style: document hscroll?: #t vscroll?: #t
            (<!>                        name: content           layout-type: fill
              (<Tree-Header>                                    style: document
                (<!>                    name: content
                  (<Snapshots-Tree>     name: snapshots-tree    selection-handler: {Event-Handler :form on-selection-change} double-click-handler: {Event-Handler :form on-double-click}))))))
        (<Splitter-View>                                        location: second orientation: horz mode: relative division: 60 style: document
          (<Layout-View>                name: details           location: first layout-type: fillall
            (<Border-View>              name: properties-border border-type: edge style: entry
              (<Scroller-View>                                  style: document hscroll?: #t vscroll?: #t
                (<!>                    name: content           layout-type: fill
                  (<Properties-Text>    name: properties-text))))
            (<Border-View>              name: moments-border    border-type: edge style: entry visible?: #f
              (<Scroller-View>                                  style: document hscroll?: #t vscroll?: #t
                (<!>                    name: content           layout-type: fill
                  (<Tree-Header>                                style: document
                    (<!>                name: content
                      (<Moments-Tree>   name: moments-tree      selection-handler: {Event-Handler :form on-selected-moment})))))))
          (<Border-View>                name: frames-border     location: second border-type: edge style: entry
            (<Scroller-View>                                    style: document hscroll?: #t vscroll?: #t
              (<!>                      name: content           layout-type: fill
                (<Frames-Text>          name: frames-text))))))))
  
  
  ;;;
  ;;;; Host
  ;;;
  
  
  (method meta override (host-icon self)
    {Image-Resource "Configure"})
  
  
  (method meta override (host-title self)
    "Snapshots Explorer")
  
  
  (method meta override (host-position self)
    {Point 28 14})
  
  
  (method meta override (host-size self)
    {Dimension 900 500})
  
  
  (method override (host-workspaces self)
    '(groupware))
  
  
  (method override (focus-default self)
    (acquire-focus (locate self 'filter-text)))
  
  
  ;;;
  ;;;; Filter
  ;;;
  
  
  (method override (filter self filter-search)
    (filter-rows (locate self 'snapshots-tree)
      (lambda (title)
        (search title filter-search))))
  
  
  ;;;
  ;;;; Events
  ;;;


  (method override (resize self dh dv)
    (nextmethod self dh dv)
    (move-figure (locate self 'delete) dh 0))
  
  
  (method (on-moniker-update self evt)
    (update-snapshots self))
  
  
  (method (on-double-click self evt)
    (open-snapshots self))
  
  
  (method (on-selection-change self evt)
    (update-details self)
    (update-frames self))
  
  
  (method (on-filter self evt)
    (filter-target (locate self 'filter-text)))
  
  
  (method (on-show-moments self evt)
    (set! show-moments? (not show-moments?))
    (set-visible? (locate self 'properties-border) (not show-moments?))
    (set-visible? (locate self 'moments-border) show-moments?)
    (update-details self)
    (update-frames self))
  
  
  (method (on-selected-moment self evt)
    (update-frames self))
  
  
  (method (on-delete-snapshots self evt)
    (delete-snapshots self)
    (update-details self)
    (update-frames self))
  
  
  (method (on-watch-snapshots self evt)
    (watch-snapshots self))
  
  
  (method (on-update-snapshots self evt)
    (if (not directory)
        (bell)
      (update-snapshots self)
      (update-details self)
      (update-frames self)))
  
  
  ;;;
  ;;;; Update
  ;;;
  
  
  (method (update-snapshots self)
    (set! directory (get-moniker (locate self 'dir)))
    (update self))
  
  
  (method package (update self)
    (define (split-name file)
      (let ((base (get-base file)))
        (let ((pos (search base "_2")))
          (if (not pos)
              (values base "")
            (values (substring base 0 pos)
                    (substring base (+ pos 1) (string-length base)))))))
    
    (define (extract-header file)
      (with-exception-catcher
        (lambda (exc)
          (cons exc #f))
        (lambda ()
          (let ((header (call-with-input-file (path-settings file) read-line)))
            (let ((output (open-output-string)))
              (format output "{a}){%}" header)
              (let ((snapshot (load-markup-string (get-output-string output))))
                (set-property snapshot 'file file)
                (cons snapshot #t)))))))
    
    (define (extract-snapshot file)
      (or (table-ref snapshots file #f)
          (let ((snapshot
                  (with-exception-catcher
                    (lambda (exc)
                      (extract-header file))
                    (lambda ()
                      (let ((snapshot (load-markup file)))
                        (set-property snapshot 'file file)
                        (cons snapshot #f))))))
            (table-set! snapshots file snapshot)
            snapshot)))
    
    (define (collect-snapshots)
      (let ((queue (new-queue)))
        (iterate-directory directory
          (lambda (dir)
            (iterate-directory dir
              (lambda (file)
                (let ((extension (get-extension file)))
                  (cond ((extension=? extension "snapshot")
                         (receive (name date) (split-name file)
                           (enqueue queue (list (get-name dir) name date file file))))
                        ((extension=? extension "report")
                         (let ((dir (new-directory dir (get-base file))))
                           (unpack-directory file dir)
                           (delete file))))))
              files?: #t
              directories?: #f
              recursive?: #f)
            (iterate-directory dir
              (lambda (subdir)
                (let ((dirname (get-name subdir)))
                  (when (starts-with? dirname "snapshot_")
                    (let ((snapshots (collect-files subdir (lambda (file) (extension=? (get-extension file) "snapshot")))))
                      (when (= (length snapshots) 1)
                        (let ((snapshot (car snapshots)))
                          (receive (name date) (split-name snapshot)
                            (let ((date (substring dirname (string-length "snapshot_") (string-length dirname))))
                              (enqueue queue (list (get-name dir) name date subdir snapshot))))))))))
              files?: #f
              directories?: #t
              recursive?: #f))
          files?: #f
          directories?: #t
          recursive?: #f)
        (queue-list queue)))
    
    (with-cursor :wait
      (lambda ()
        (let ((tree (locate self 'snapshots-tree)))
          (remove-every-row tree)
          (with-update-locked tree
            (lambda ()
              (for-each (lambda (info)
                          (bind (dirname name date root file) info
                            (bind (snapshot . corrupted?) (extract-snapshot file)
                              (if (is? snapshot Markup-Element)
                                  (add-row tree children: (list (new Tree-Node title: dirname)
                                                                (new Tree-Label title: name)
                                                                (new Tree-Label title: date)
                                                                (new Tree-Label title: (or (get-property snapshot 'kind)
                                                                                           (cond ((get-property snapshot 'exception) "Exception")
                                                                                                 ((get-property snapshot 'reason) "Crash")
                                                                                                 (else "Snapshot"))))
                                                                (new Tree-Label title: (if corrupted? "Corrupted" ""))
                                                                (new Tree-Label title: (or (get-property snapshot 'exception) (get-property snapshot 'reason) ""))
                                                                (new Tree-Label title: (or (get-property snapshot 'user) "")))
                                    user-data: (cons root (if corrupted? file snapshot)))
                                (add-row tree children: (list (new Tree-Node title: dirname)
                                                              (new Tree-Label title: name)
                                                              (new Tree-Label title: date)
                                                              (new Tree-Label title: "Invalid")
                                                              (new Tree-Label title: "")
                                                              (new Tree-Label title: (exception-reason snapshot))
                                                              (new Tree-Label title: ""))
                                  user-data: (cons root file))))))
                        (sort nu>? (collect-snapshots) key: third)))))
        (set-string-content (locate self 'properties-text) ""))))
  
  
  (method (update-details self)
    (if show-moments?
        (update-moments self)
      (update-properties self)))
  
  
  (method (update-properties self)
    (let ((text (locate self 'properties-text)))
      (bind (root . snapshot) (single-selected-data self)
        (if (is? snapshot Markup-Element)
            (let ((properties (find-node snapshot 'properties)))
              (if properties
                  (let ((output (open-output-string))
                        (first? #t))
                    (for-each (lambda (node)
                                (if first?
                                    (set! first? #f)
                                  (format output "{%}"))
                                (let ((name (get-property node 'name))
                                      (value (get-property node 'value)))
                                  (format output "{a} {s}" name value)))
                              (get-children properties))
                    (set-string-content text (get-output-string output)))
                (set-string-content text "")))
          (set-string-content text "")))))
  
  
  (method (update-moments self)
    (define moment-names
      #("" "FATAL_ERROR" "FATAL_CRITICAL" "FATAL_WARNING" "ERROR" "WARNING" "DEBUG" "LOG"))
    
    (let ((tree (locate self 'moments-tree)))
      (remove-every-row tree)
      (with-update-locked tree
        (lambda ()
          (bind (root . snapshot) (single-selected-data self)
            (when (is? snapshot Markup-Element)
              (let ((moments (find-node snapshot 'moments)))
                (when moments
                  (for-each (lambda (node)
                              (let ((time (get-property node 'time))
                                    (level (get-property node 'level))
                                    (category (get-property node 'category))
                                    (function (get-property node 'function))
                                    (message (get-property node 'message))
                                    (stack (find-node node 'stack)))
                                (define (present-level)
                                  (let ((str (vector-ref moment-names level)))
                                    (if (not stack)
                                        str
                                      (string-append str "+"))))
                                
                                (add-row tree children: (list (new Tree-Node title: (format "{r precision: 3}" time))
                                                              (new Tree-Label title: (present-level))
                                                              (new Tree-Label title: (->string message))
                                                              (new Tree-Label title: (or category ""))
                                                              (new Tree-Label title: (or function "")))
                                  user-data: node)))
                            (get-children moments))))))))))
  
  
  (method (update-frames self)
    (if show-moments?
        (update-moments-frames self)
      (update-snapshot-frames self)))
  
  
  (method (update-snapshot-frames self)
    (let ((text (locate self 'frames-text)))
      (bind (root . snapshot) (single-selected-data self)
        (if (is? snapshot Markup-Element)
            (let ((threads (find-node snapshot 'threads)))
              (if threads
                  (let ((thread (first-child threads)))
                    (if thread
                        (let ((output (open-output-string))
                              (first? #t))
                          (for-each (lambda (node)
                                      (if first?
                                          (set! first? #f)
                                        (format output "{%}"))
                                      (let ((name (get-property node 'name)))
                                        (format output "{a}" name)))
                                    (get-children thread))
                          (set-string-content text (get-output-string output)))
                      (set-string-content text "")))
                (set-string-content text "")))
          (set-string-content text "")))))
  
  
  (method (update-moments-frames self)
    (let ((text (locate self 'frames-text)))
      (let ((node (get-single-selected-data (locate self 'moments-tree))))
        (if node
            (let ((stack (find-node node 'stack)))
              (if stack
                  (let ((output (open-output-string))
                        (first? #t))
                    (for-each (lambda (node)
                                (if first?
                                    (set! first? #f)
                                  (format output "{%}"))
                                (let ((location (get-property node 'location)))
                                  (format output "{a}" location)))
                              (get-children stack))
                    (set-string-content text (get-output-string output)))
                (set-string-content text "")))
          (set-string-content text "")))))
  
  
  (method (single-selected-data self)
    (or (get-single-selected-data (locate self 'snapshots-tree))
        (cons #f #f)))
  
  
  ;;;
  ;;;; Manage
  ;;;
  
  
  (method (delete-snapshots self)
    (let ((tree (locate self 'snapshots-tree)))
      (let ((selected (get-selected-data tree)))
        (when (not-null? selected)
          (for-each (lambda (info)
                      (bind (root . snapshot) info
                        (let ((file (if (is? snapshot Markup-Element)
                                        (get-property snapshot 'file)
                                      snapshot)))
                          (if (directory? root)
                              (delete root)
                            (delete file))
                          (table-clear snapshots file))))
                    selected)
          (update-snapshots self)))))
  
  
  (method (watch-snapshots self)
    (let ((tree (locate self 'snapshots-tree)))
      (let ((selected (get-selected-data tree)))
        (when (not-null? selected)
          (for-each (lambda (info)
                      (bind (root . snapshot) info
                        (let ((file (if (is? snapshot Markup-Element)
                                        (get-property snapshot 'file)
                                      snapshot)))
                          (let ((dest-file (new-file directory (list "watched" (get-name file)))))
                            (create-directories dest-file)
                            (rename file dest-file)
                            (table-clear snapshots file)))))
                    selected)
          (update-snapshots self)
          (update-details self)
          (update-frames self)))))
  
  
  (method (open-snapshots self)
    (let ((appl (current-application))
          (tree (locate self 'snapshots-tree))
          (text (locate self 'properties-text)))
      (let ((selected (get-selected-data tree)))
        (for-each (lambda (info)
                    (bind (root . snapshot) info
                      (if (is? snapshot Markup-Element)
                          (if (shift-down?)
                              (edit-document appl (get-property snapshot 'file))
                            (edit-snapshot appl snapshot))
                        (edit-document appl snapshot))))
                  selected)))))


;;;
;;;; Snapshots-Tree
;;;


(class Snapshots-Tree extends Tree-View
  
  
  (form
    (<install>                               filled-column: exception multiple-selection?: #t
      (<Tree-Node-Column>  name: environment title: "Environment" width: 120 toplevel-controls?: #f display-images?: #f)
      (<Tree-Label-Column> name: name        title: "Name" width: 100)
      (<Tree-Label-Column> name: date        title: "Date" width: 175)
      (<Tree-Label-Column> name: kind        title: "Kind" width: 80)
      (<Tree-Label-Column> name: state       title: "State" width: 80)
      (<Tree-Label-Column> name: exception   title: "Exception" width: 300)
      (<Tree-Label-Column> name: user        title: "User" width: 150))))


;;;
;;;; Properties-Text
;;;


(class Properties-Text extends Code-Text-View
  
  
  (method override (new-model self)
    (new Text-Model base-style: {Text-Style Text-Base font: {Font font-name: vera-mono point-size: 14}} left-padding: 4)))


;;;
;;;; Moments-Tree
;;;


(class Moments-Tree extends Tree-View
  
  
  (form
    (<install>                               filled-column: message multiple-selection?: #f
      (<Tree-Node-Column>  name: time        title: "Time" width: 80 toplevel-controls?: #f display-images?: #f)
      (<Tree-Label-Column> name: level       title: "Level" width: 120)
      (<Tree-Label-Column> name: message     title: "Message" width: 300)
      (<Tree-Label-Column> name: category    title: "Category" width: 120)
      (<Tree-Label-Column> name: function    title: "Function" width: 150))))


;;;
;;;; Frames-Text
;;;


(class Frames-Text extends Code-Text-View
  
  
  (method override (new-model self)
    (new Text-Model base-style: {Text-Style Text-Base font: {Font font-name: vera-mono point-size: 14}} left-padding: 4))))
