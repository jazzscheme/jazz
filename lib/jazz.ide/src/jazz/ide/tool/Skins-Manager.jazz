;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Skins Manager
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.ide.tool.Skins-Manager jazz


(import (jazz.application)
        (jazz.designer.ui)
        (jazz.handler)
        (jazz.jml)
        (jazz.layout)
        (jazz.resource)
        (jazz.ui)
        (jazz.ui.skin)
        (jazz.view))


(class undocumented Skins-Manager extends Canvas-Manager
  
  
  (form
    (<install>
      (<!>           name: toolbar
        (<Push-Tool> name: save    size: {Dimension 22 22} tooltip?: #t tooltip-text: "Save Skins" resource: {Image-Resource "Save"} portfolio: :images action-handler: {Event-Handler :form on-save-skins})
        (<Separator>)
        (<Push-Tool> name: reload  size: {Dimension 22 22} tooltip?: #t tooltip-text: "Reload Skins" resource: {Image-Resource "Refresh"} portfolio: :images action-handler: {Event-Handler :form on-reload-skins})
        (<Separator>               size: {Dimension 32 0})
        (<Push-Tool> name: edit    size: {Dimension 22 22} tooltip?: #t tooltip-text: "Edit Skins" resource: {Image-Resource "Edit"} portfolio: :images action-handler: {Event-Handler :form on-edit-skins}))))
  
  
  (method override (form-model form)
    (case (get-name~ form)
      ((descendants) Skins-Editor)
      (else (nextmethod form))))
  
  
  (method meta override (external-name . rest)
    'skins-manager)
  
  
  ;;;
  ;;;; Host
  ;;;
    
  
  (method meta override (host-icon)
    {Image-Resource "Grab"})
  
  
  (method override (host-workspaces)
    '(home))
  
  
  ;;;
  ;;;; Docked
  ;;;
  
  
  (method override (focus-default)
    (let ((tree (locate '(descendants tree))))
      (acquire-focus~ tree)))
  
  
  ;;;
  ;;;; Component
  ;;;

  
  (method override (install rest)
    (nextmethod rest)
    (set-client (get-skins)))
  
  
  ;;;
  ;;;; Controller
  ;;;


  (method override (new-document-controller)
    (new Skins-Manager-Controller self))

  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method package (on-edit-skins evt)
    (let ((appl (get-application)))
      (edit-document~ appl (skins-file~ appl))))
  
  
  (method package (on-save-skins evt)
    (with-cursor :wait
      (lambda ()
        (save))))
  
  
  (method package (on-reload-skins evt)
    (let ((appl (get-application)))
      (let ((skins (load-skins~ appl)))
        (set-skins-designer~ appl skins)
        (set-skin (child~ skins (get-active~ skins)))
        (skin-update)
        (redraw-window~ (get-toplevel))))))


;;;
;;;; Controller
;;;


(class Skins-Manager-Controller extends Component-Editor-Controller
  
  
  (method override (document-status)
    (format "Skins{a}"
            (modified-status))))


;;;
;;;; Editor
;;;


(class Skins-Editor extends Descendants-Editor
  
  
  (method override (form-model form)
    (case (get-name~ form)
      ((tree) Skins-Tree)
      (else (nextmethod form)))))


;;;
;;;; Tree
;;;


(class Skins-Tree extends Descendants-Tree
  
  
  (form
    (<install> portfolio: :images draggable?: #t reorderable?: #t))
  
  
  (method override (update-selection expand-state selected-components)
    )
  
  
  (method override (row-state component update? level)
    (if update?
        (if (< level 1) 'expanded 'collapsed)
      'collapsed))))
