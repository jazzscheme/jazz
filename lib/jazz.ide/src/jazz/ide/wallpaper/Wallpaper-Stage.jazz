;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Wallpaper Stage
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.ide.wallpaper.Wallpaper-Stage jazz


(import (jazz.action)
        (jazz.graphic)
        (jazz.ide)
        (jazz.io)
        (jazz.jml)
        (jazz.locator)
        (jazz.menu)
        (jazz.platform)
        (jazz.preferences)
        (jazz.resource)
        (jazz.skin)
        (jazz.ui)
        (jazz.ui.dialog)
        (jazz.view))


(class undocumented Wallpaper-Stage extends Stage
  
  
  (slot image         initialize #f)
  (slot previous      initialize #f)
  (slot wallpapers    initialize '())
  (slot mode          initialize #f)
  (slot random?       initialize #f)
  (slot browse?       initialize #f)
  (slot configuration initialize #f)
  (slot choices       initialize '())
  (slot locator       initialize (new Wallpaper-Locator max-delay: 1.))
  (slot changer       initialize #f)
  (slot threads       initialize '())
  (slot paused?       initialize #f)
  (slot done?         initialize #f)
  
  
  (form
    (<install> tooltip?: #t))
  
  
  (method (preferences self)
    (current-preferences 'wallpaper error?: #f))


  (method override (install-wallpaper self)
    (let ((pref (preferences self)))
      (when pref
        (let ((active (get-active pref)))
          (when active
            (install-configuration self (child pref active)))))))
  
  
  (method package (install-configuration self config (brws? #f))
    (when (neq? config configuration)
      (set! browse? brws?)
      (set! configuration config)
      (if (not config)
          (begin
            (set! image #f)
            (set! wallpapers '())
            (invalidate-view self))
        (set! image (new Image cache?: #t))
        (set-mode self (get-mode config))
        (set-random? self (get-random? config))
        (set-size image (get-size self))
        (let ((wallpaper (get-directory config)))
          (when wallpaper
            (let ((dir? (is? wallpaper Directory)))
              (when dir?
                (setup-wallpapers self wallpaper (get-recursive? config))
                (setup-favorites self wallpaper (get-favorites config)))
              (set-source self (startup-file self dir? wallpaper (get-startup config)))
              (when (and dir? (not changer))
                (setup-changer self (get-period config)))))))))


  @convert ;; problem with Configure-Menu already used by Compare-Menu
  (method (context-menu evt)
    (define (new-stage-menu)
      (let* ((menu (new Stage-Menu))
             (manage-menu (get-content (locate menu 'manage)))
             (source (get-source)))
        (set-visible?~ (locate manage-menu 'favorite) source)
        (set-visible?~ (locate manage-menu 'favorite-separator) source)
        (when (and source configuration)
          (let* ((name (get-name source))
                 (favorites (get-favorites configuration))
                 (favorite? (member? name favorites)))
            (set-title (locate manage-menu 'favorite) (if favorite? "Remove from Favorites" "Add to Favorites"))))
        (layout-menu manage-menu)
        (layout-menu menu)
        menu))
    
    (if (null? (get-children (preferences)))
        (nextmethod evt)
      (let ((pos (get-position evt)))
        (acquire-focus)
        (track-popup-menu (new-stage-menu) pos))))
  
  
  (method (on-change self evt)
    (change-wallpaper self))
  
  
  (method (on-previous self evt)
    (show-previous self))
  
  
  (method (on-add-to-favorite self evt)
    (let ((source (get-source self)))
      (if (or (not source) (not configuration))
          (bell)
        (let* ((name (get-name source))
               (favorites (get-favorites configuration))
               (favorite? (member? name favorites))
               (new-favorites (if favorite? (remove! name favorites) (cons name favorites))))
          (set-preference configuration 'favorites new-favorites)
          (flash-message self (format "{a} {a} favorites" name (if favorite? "removed from" "added to")))))))
  
  
  (method (on-delete-file self evt)
    (when image
      (let ((source (get-source self)))
        (when source
          (delete-file source)
          (flash-message self (format "{a} deleted" (get-name source)))
          (set! wallpapers (remove! source wallpapers test: =))
          (set! choices (remove! source choices test: =))
          (change-wallpaper self)))))
  
  
  (method (on-change-mode self evt)
    (set-mode self (get-property evt mode:)))


  (method override (size-change self size)
    (nextmethod self size)
    (when image
      (set-size image size)
      (invalidate-view self)))
  
  
  (method override (get-tooltip-text self)
    (and (and image (control-down?) (alt-down?))
         (let ((source (get-source self)))
           (and source
                (let ((image-size (image-size image)))
                  (list
                    (format "File: {s}" source)
                    (format "Size: {a}x{a}, Mode: {a}"
                            (get-width image-size)
                            (get-height image-size)
                            (get-mode image))))))))
  
  
  (method package (get-source self)
    (and image
         (get-source image)))
  
  
  (method package (set-source self file)
    (set! previous (get-source self))
    (cond ((not file)
           (set-source image #f))
          ((exists? file)
           (set-source image file))
          (else
           (set-source image #f)
           (message-box (format "Wallpaper file {s} not found" file))))
    (invalidate-view self)
    (update-view self))
  
  
  (method package (set-mode self mode)
    (set! self.mode mode)
    (when image
      (set-mode image mode)
      (invalidate-view self)))
  
  
  (method (set-random? self flag)
    (set! random? flag))
  
  
  (method (setup-wallpapers self dir recursive?)
    (let ((files '()))
      (iterate-directory dir
        (lambda (file)
          (when (image-file? self file)
            (set! files (cons file files))))
        recursive?: recursive?)
      (set! wallpapers (sort ci<? files key: get-name))))
  
  
  (method (image-file? self file)
    (member? (get-extension file) '("bmp" "jpg" "jpeg" "png")
             test: extension=?))
  
  
  (method (setup-favorites self dir favorites)
    (set! choices (map (lambda (favorite)
                         (wallpaper-file dir favorite))
                       favorites)))
  
  
  (method (startup-file self dir? dir startup)
    (cond ((not dir?) background)
          (startup (if (eq? startup :empty) #f (wallpaper-file dir startup)))
          (else (next-wallpaper self))))


  (method (setup-changer self period)
    (unimplemented)
    @convert-thread
    (set! changer
          (thread-start!
            (new-thread
              (lambda ()
                (while (not done?)
                  (sleep period)
                  (unless paused?
                    (change-wallpaper))))
              'wallpaper-changer))))
  
  
  (definition (wallpaper-file dir name)
    (new-file dir name))


  (method public (change-wallpaper self)
    (when configuration
      (set-source self (next-wallpaper self))))
  
  
  (method (show-first self)
    (unless random?
      (when wallpapers
        (set-source self (car wallpapers)))))
  
  
  (method (show-last self)
    (unless random?
      (when wallpapers
        (set-source self (last wallpapers)))))
  
  
  (method (show-previous self)
    (let ((wallpaper (previous-wallpaper self)))
      (when wallpaper
        (set-source self wallpaper)
        (set! previous #f))))


  (method (next-wallpaper self)
    (if (not random?)
        (let ((source (get-source self)))
          (if (not source)
              (car wallpapers)
            (element wallpapers (modulo (+ (wallpaper-rank self source) 1) (length wallpapers)))))
      (when (null? choices)
        (set! choices (copy wallpapers)))
      (when choices
        (let ((wallpaper (random-element choices)))
          (set! choices (remove! wallpaper choices))
          wallpaper))))
  
  
  (method (previous-wallpaper self)
    (if (not random?)
        (let ((source (get-source self)))
          (if (not source)
              (and wallpapers (last wallpapers))
            (let ((count (length wallpapers))
                  (rank (wallpaper-rank self source)))
              (if (= rank 0)
                  (element wallpapers (- count 1))
                (element wallpapers (- rank 1))))))
      previous))
  
  
  (method (wallpaper-rank self wallpaper)
    (find wallpapers wallpaper test: =))
  

  ;;;
  ;;;; Actions
  ;;;
  
  
  @wait
  (method (focus-actions)
    (cons (find-actions 'wallpaper)
          (nextmethod)))

  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method (on-empty self evt)
    (install-configuration self #f))
  
  
  (method package (on-home self evt)
    (show-first self))
  
  
  (method package (on-end self evt)
    (show-last self))
  
  
  (method (on-prior self evt)
    (show-previous self))
  
  
  (method (on-next self evt)
    (change-wallpaper self))
  
  
  (method (on-random self evt)
    (set! random? (not random?))
    (when random?
      (change-wallpaper self))
    (flash-message self (if random? "Random" "Linear")))
  
  
  (method (on-paused self evt)
    (set! paused? (not paused?))
    (flash-message self (if paused? "Paused" "Running")))
  
  
  (method (on-display-info self evt)
    (let ((source (get-source self)))
      (flash-message self
        (if (not source)
            {Image-Resource "Empty"}
          (let* ((name (get-name source))
                 (favorites (get-favorites configuration))
                 (favorite? (member? name favorites)))
            (format "{a}{a}" name (if favorite? " (favorite)" ""))))
        delay: 2.)))
  
  
  (method (flash-message self message (delay: delay 1.))
    (unimplemented)
    @convert-thread
    (thread-start!
      (new-thread
        (lambda ()
          (user-message message)
          (sleep delay)
          (clear-user-message))
        'message-flasher)))
  
  
  ;;;
  ;;;; Keyboard
  ;;;
  
  
  (method override (key-press self evt)
    (let ((key (get-key evt)))
      (when (and (alphanumeric? key) wallpapers)
        (enter locator key))))
  
  
  ;;;
  ;;;; Drawing
  ;;;
  
  
  (method override (draw-background self surface context)
    (let ((skin (get-skin self)))
      (let ((background (get-background skin)))
        (if (not background)
            (nextmethod self surface context)
          (let ((bounds (get-bounds self)))
            (fill-background surface bounds background))))))


  (method override (draw self surface context)
    (nextmethod self surface context)
    (let ((size (get-size self)))
      (when image
        (draw image surface context 0 0 size: size))))
  
  
  ;;;
  ;;;; Skin
  ;;;
  
  
  (method override (get-skin self)
    (find-skin 'ui:stage))

  
  ;;;
  ;;;; Configure
  ;;;
  
  
  (method package (on-configure self evt)
    (define (browse-configuration)
      (install-configuration self
        (new Wallpaper-Configuration
          directory: (choose-directory)
          period: (and configuration (get-period configuration))
          mode: (and configuration (get-mode configuration)))
        #t))
    
    (let ((configuration (get-property evt configuration:)))
      (if (eq? configuration #t)
          (browse-configuration)
        (install-configuration self configuration)))))


;;;
;;;; Configure
;;;


(class Wallpaper-Locator extends Locator
  
  
  @convert
  (method (iterate-entries proc)
    (for-each (lambda (wallpaper rank)
                (let ((title (get-name wallpaper)))
                  (proc title rank)))
              wallpapers
              (naturals 0 (length wallpapers))))
  
  
  @convert
  (method (select-entry rank)
    (set-source (element wallpapers rank))))


;;;
;;;; Stage-Menu
;;;


(class Stage-Menu extends Context-Menu
  
  
  (form
    (<install>
      (<Label-Item>       name: configure        title: "Configure" icon: {Image-Resource "All"}
        (<Configure-Menu>))
      (<Separator-Item>)
      (<Radio-Item>       name: centered         title: "Center" icon: {Image-Resource "Center"} action-handler: {Action wallpaper centered-mode})
      (<Radio-Item>       name: tiled            title: "Tile" icon: {Image-Resource "Tile"} action-handler: {Action wallpaper tiled-mode})
      (<Radio-Item>       name: filled           title: "Fill" icon: {Image-Resource "Fill"} action-handler: {Action wallpaper filled-mode})
      (<Radio-Item>       name: stretched        title: "Stretch" icon: {Image-Resource "Stretch"} action-handler: {Action wallpaper stretched-mode})
      (<Separator-Item>   name: random-separator)
      (<Check-Item>       name: random           title: "Random" icon: {Image-Resource "Refresh"} action-handler: {Action wallpaper random})
      (<Separator-Item>   name: slide-separator)
      (<Check-Item>       name: paused           title: "Paused" icon: {Image-Resource "Pause"} action-handler: {Action wallpaper paused})
      (<Check-Item>       name: change           title: "Change" icon: {Image-Resource "Next"} action-handler: {Action wallpaper change})
      (<Check-Item>       name: previous         title: "Previous" icon: {Image-Resource "Previous"} action-handler: {Action wallpaper previous})
      (<Separator-Item>   name: manage-separator)
      (<Label-Item>       name: manage           title: "Manage" icon: {Image-Resource "Document"}
        (<Manage-Menu>))))
  
  
  @convert
  (method (finish rest)
    (nextmethod rest)
    (when mode
      (set-selected?~ (locate mode) #t))
    (let ((source (get-source)))
      (if (not source)
          (begin
            (set-visible?~ (locate 'random-separator) #f)
            (set-visible?~ (locate 'random) #f)
            (set-visible?~ (locate 'slide-separator) #f)
            (set-visible?~ (locate 'paused) #f)
            (set-visible?~ (locate 'change) #f)
            (set-visible?~ (locate 'previous) #f)
            (set-visible?~ (locate 'manage-separator) #f)
            (set-visible?~ (locate 'manage) #f))
        (set-checked?~ (locate 'random) random?)
        (set-checked?~ (locate 'paused) paused?)
        (set-visible?~ (locate 'previous) (or (not random?) previous))
        (set-title (locate 'manage) (get-name source))))))


;;;
;;;; Configure-Menu
;;;


(class Configure-Menu extends Context-Menu
  
  
  @convert
  (method (finish rest)
    (nextmethod rest)
    (update-menu))
  
  
  @convert
  (method public (update-menu)
    (insert-item "None" {Image-Resource "Empty"} #f #f)
    (let ((children (get-children (preferences))))
      (when children
        (new Separator-Item parent: self)
        (for-each (lambda (config)
                    (when (get-active?~ config)
                      (insert-item (get-presentation-property config) #f config #f)))
                  children)))
    (new Separator-Item parent: self)
    (insert-item "Browse..." {Image-Resource "Open"} #t #t))
  
  
  @convert
  (method (insert-item title icon config browse-item?)
    (let ((selected? (if browse-item?
                         browse?
                       (eq? config configuration))))
      (new Radio-Item parent: self title: title selected?: selected? icon: icon action-handler: (new Event-Handler target-name: :stage method-name: 'on-configure properties: (list configuration: config))))))


;;;
;;;; Manage-Menu
;;;


(class Manage-Menu extends Context-Menu
  
  
  (form
    (<install>
      (<Label-Item>     name: favorite           icon: {Image-Resource "Favorites"} action-handler: {Action wallpaper add-to-favorite})
      (<Separator-Item> name: favorite-separator)
      (<Label-Item>     name: delete-file        title: "Delete" icon: {Image-Resource "Remove"} action-handler: {Action wallpaper delete-file})))))
