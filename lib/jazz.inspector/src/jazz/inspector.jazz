;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Inspector
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module jazz.inspector jazz


(import (jazz.remote))


;;;
;;;; Package
;;;


(definition presentation-limit
  256)


(definition Unbound
  (cons #f #f))


(definition public (package-unbound)
  Unbound)


(definition public (package-info value (kind: kind :value) (mutable?: mutable? #t) (max-width: max-width #f))
  (let ((max-width (or max-width presentation-limit)))
    (define (more-value? value)
      (cond ((pair? value) #t)
            ((table? value) (> (table-length value) 0))
            ((structure? value) (> (kind-length (structure-kind value)) 0))
            ((string? value) #f)
            ((sequence? value) (> (cardinality value) 0))
            ((closure? value) #t)
            ((object? value) (not-null? (get-instance-slots (class-of value))))
            (else #f)))
    
    (define (truncate str)
      (if (> (cardinality str) max-width)
          (concatenate (subseq str 0 max-width) "...")
        str))
    
    (let ((serial (object->serial value)))
      (gc-protect value)
      (let* ((unbound? (eq? value Unbound))
             (raw? (eq? kind :raw))
             (class (category-identifier (class-of value)))
             (presentation (cond (unbound? "<unbound>")
                                 (raw? (truncate (->string value)))
                                 (else (safe-present-object value max-width))))
             (more? (cond ((or unbound? raw?) #f)
                          ((memq? kind '(frame: context:)) #t)
                          (else (more-value? value)))))
        (list serial class presentation more? mutable? kind)))))


;;;
;;;; Inspect
;;;


(constant inspect-max-width
  256)

(constant inspect-max-content
  256)


(definition public (inspect-value value (max-width: max-width #f) (max-content: max-content inspect-max-content) (packager: packager package-info))
  (let ((max-width (or max-width inspect-max-width)))
    (define (inspect-structure struct)
      (let ((kind (structure-kind struct)))
        (map (lambda (info)
               (bind (name rank) info
                 (cons (list #f name rank) (packager (structure-ref struct rank kind)))))
             (cached-kind-fields kind))))
    
    (define (inspect-list lst)
      (define (proper-length l n)
        (cond ((null? l) n)
              ((pair? l) (proper-length (cdr l) (+ n 1)))
              (else (+ n 1))))
      
      (let ((total (proper-length lst 0))
            (content (let (iter (scan lst)
                                (rank 0))
                       (cond ((or (null? scan) (and max-content (>= rank max-content)))
                              '())
                             ((pair? scan)
                              (cons (cons (list #f rank rank) (packager (car scan)))
                                    (iter (cdr scan) (+ rank 1))))
                             (else
                              (list (cons (list #f 'rest rank) (packager scan))))))))
        (add-missing total content)))
    
    (define (inspect-sequence seq)
      (inspect-list (coerce seq List)))
    
    (define (inspect-table table)
      (let ((total (table-length table))
            (content (let (iter (scan (table->list table))
                                (rank 0))
                       (if (or (null? scan) (and max-content (>= rank max-content)))
                           '()
                         (bind (key . value) (car scan)
                           (cons (cons (list #f (safe-present-object key max-width) rank) (packager value))
                                 (iter (cdr scan) (+ rank 1))))))))
        (let ((sorted (sort di<? content key: (lambda (info) (second (car info))))))
          (add-missing total sorted))))
    
    (define (inspect-closure value)
      (inspect-list (closure-environment value)))
    
    (define (inspect-object object)
      (define (class-slot-info class)
        (if (not class)
            '()
          (let ((class-name (category-name class)))
            (append (map (lambda (slot) (cons class-name slot)) (get-slots class))
                    (class-slot-info (get-ascendant class))))))
      
      (let ((slot-infos (class-slot-info (class-of object))))
        (map (lambda (slot-info rank)
               (bind (class . slot) slot-info
                 (if (symbol? slot)
                     (cons (list class slot rank) (packager "<core slot>" kind: :raw))
                   (cons (list class (field-name slot) rank)
                         (let ((offset (get-offset slot)))
                           (if (not offset)
                               (packager (safe-present-property object slot) kind: :raw)
                             (packager (get-object-slot object offset))))))))
             slot-infos
             (naturals 0 (length slot-infos)))))
    
    (define (add-missing total content)
      (let ((missing (- total (length content))))
        (if (> missing 0)
            (cons (cons (list #f #f -1) (packager (format "{a} missing of {a}" missing total) kind: :raw)) content)
          content)))
    
    (cond ((null/pair? value) (inspect-list value))
          ((table? value) (inspect-table value))
          ((structure? value) (inspect-structure value))
          ((sequence? value) (inspect-sequence value))
          ((closure? value) (inspect-closure value))
          ((object? value) (inspect-object value))
          (else '()))))


;;;
;;;; Kind
;;;


(definition kind-cache
  (make-table test: eq?))


(definition (cached-kind-fields kind)
  (or (table-ref kind-cache kind #f)
      (let ((fields (kind-fields kind)))
        (table-set! kind-cache kind fields)
        fields))))
