;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Path
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module jazz.io.Path jazz


(class undocumented Path extends Object
  
  
  (slot path accessors generate)
  
  
  (method override (initialize path)
    (nextmethod)
    (set! path~self path))
  

  (method override (compare-object target)
    (cond ((is-not? target (class-of self))
           :incompatible)
          ((= path (get-path~ target))
           :equal)
          (else
           :not-equal)))
  
  
  (method override (print output readably)
    (format output "~{{a}{?: {l}~}}"
            (category-name (class-of self))
            (not-null? path)
            path))
  
  
  ;;;
  ;;;; Parent
  ;;;
  
  
  (method public (get-parent)
    (new Path (butlast path)))
  
  
  ;;;
  ;;;; Presentation
  ;;;
  
  
  (method public (present)
    (format "{l detail: :human}" path))
  
  
  ;;;
  ;;;; Designer
  ;;;
  
  
  (method public virtual (follow-component root)
    (define (follow component path)
      (cond ((null? path)
             root)
            ((integer? path)
             (let ((children (get-children~ component)))
               (when (< path (length children))
                 (element children path))))
            ((pair? path)
             (let ((sub (follow component (car path))))
               (when sub
                 (let ((next (cdr path)))
                   (if (null? next)
                       sub
                     (follow sub next))))))
            (else
             (find-child~ component path))))
    
    (follow root path))
  
  
  (method public virtual (follow-form form)
    (for-each (lambda (name)
                (set! form (child~ form name)))
              path)
    form)))
