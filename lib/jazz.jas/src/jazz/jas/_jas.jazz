;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Jazz Associative Storage
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module jazz.jas jazz


(import (jazz.io)
        (jazz.settings)
        (jazz.time)
        (jazz.zlib)
        (time))


;;;
;;;; Interface
;;;


(definition public (jas-init working)
  (new JAS-Repository working init?: #t))


(definition public (jas-open working)
  (new JAS-Repository working))


(definition public (jas-config-get repo key)
  (config-get~ repo key))


(definition public (jas-config-set repo key value)
  (config-set~ repo key value))


(definition public (jas-staging-tree repo)
  (staging-tree~ repo))


(definition public (jas-commit repo author email message tree parent)
  (commit~ repo author email message tree parent))


(definition public (jas-branches repo)
  (branches~ repo))


(definition public (jas-checkout repo name (create?: create? #f))
  (checkout~ repo name create?: create?))


(definition public (jas-read-head repo)
  (read-head~ repo))


(definition public (jas-add repo path)
  (add~ repo path))


(definition public (jas-remove repo path)
  (remove~ repo path))


(definition public (jas-head-index repo)
  (head-index~ repo))


(definition public (jas-working-index repo)
  (working-index~ repo))


(definition public (jas-staging-index repo)
  (staging-index~ repo))


(definition public (jas-commit-index repo commit)
  (commit-index~ repo commit))


(definition public (jas-staging-status repo)
  (staging-status~ repo))


(definition public (jas-working-status repo)
  (working-status~ repo))


(definition public (jas-diff repo from to)
  (diff~ repo from to))


(definition public (jas-commit? repo ref)
  (commit?~ repo ref))


(definition public (jas-branch? repo ref)
  (branch?~ repo ref))

(definition public (jas-branch-name repo ref)
  (branch-name~ repo ref))


(definition public (jas-resolve repo ref)
  (resolve~ repo ref))


(definition public (jas-parse repo rev)
  (parse~ repo rev))


(definition public (jas-retrieve repo digest)
  (retrieve~ repo digest))


;;;
;;;; Repository
;;;


(class JAS-Repository extends Object
  
  
  (slot working         getter generate)
  (slot directory       getter generate)
  (slot global-settings getter generate)
  (slot local-settings  getter generate)
  (slot head            getter generate)
  (slot index           getter generate)
  (slot objects         getter generate)
  (slot heads           getter generate)
  
  
  (method override (initialize working (init?: init? #f))
    (define (jas-directory)
      (let ((dir (new-directory~ working ".jas")))
        (cond ((exists?~ dir)
               dir)
              (init?
               (create-directories~ dir)
               dir)
              (else
               (jas-exception "Not a jas repository")))))
    
    (initialize-aliases)
    (set! working~self working)
    (set! directory~self (jas-directory))
    (set! head (new-file~ directory "HEAD"))
    (set! index (new JAS-Index self working file: (new-file~ directory "index")))
    (set! objects (new-directory~ directory "objects"))
    (set! heads (new-directory~ directory '("refs" "heads")))
    (when init?
      (init))
    (register-configs))
  
  
  ;;;
  ;;;; Init
  ;;;
  
  
  (method (init)
    (create-directories~ objects)
    (create-directories~ heads))
  
  
  ;;;
  ;;;; Config
  ;;;
  
  
  (method (register-configs)
    (let ((global {File Home ".jas"})
          (local (new-file~ directory "config")))
      (define (new-settings file)
        (when (not (exists?~ file))
          (create~ file))
        (let ((settings (new File-Settings file: file)))
          (register-settings settings)
          settings))
      
      (set! global-settings (new-settings global))
      (set! local-settings (new-settings local))))
  
  
  (method (config-get key)
    (find-setting key))
  
  
  (method (config-set key value)
    (let ((settings local-settings))
      (set-setting~ settings key value)
      (save-content~ settings)))
  
  
  ;;;
  ;;;; Database
  ;;;
  
  
  (method (objects-file digest)
    (new-file~ objects digest))
  
  
  ;;;
  ;;;; Write
  ;;;
  
  
  (method (write-tree tree)
    (write-content tree))
  
  
  (method (write-content content)
    (let ((digest (digest-u8vector (object->u8vector content) 'SHA-1)))
      (call-with-output-file (path-settings (objects-file digest))
        (lambda (output)
          (pp content output)))
      digest))
  
  
  (method (write-file file digest)
    (write-blob (load-binary~ file) digest))
  
  
  (method (write-blob content digest)
    (let ((objects-file (objects-file digest)))
      (save-binary~ objects-file (zlib-deflate content))
      digest))
  
  
  ;;;
  ;;;; Retrieve
  ;;;
  
  
  (method (exists? digest)
    (exists?~ (objects-file digest)))
  
  
  (method (retrieve digest)
    (call-with-input-file (path-settings (objects-file digest))
      read))
  
  
  (method (retrieve-file digest file)
    (create-directories~ file)
    (save-binary~ file (retrieve-blob digest)))
  
  
  (method (retrieve-blob digest)
    (let ((objects-file (objects-file digest)))
      (zlib-inflate (load-binary~ objects-file))))
  
  
  ;;;
  ;;;; Commit
  ;;;
  
  
  (method (staging-tree)
    (index->tree index))
  
  
  (method (commit author email message tree parent)
    (let ((time (date->string (system-date) "~a ~b ~d ~H:~M:~S ~Y ~z")))
      (let ((content (list author email message tree parent time)))
        (let ((commit (write-content content))
              (head (read-head)))
          (cond ((branch? head)
                 (write-branch (branch-name head) commit))
                ((and (commit? head)
                      (equal? head parent))
                 (write-head commit))
                ((and (not head)
                      (not parent))
                 (write-branch "master" commit)
                 (write-head (make-branch "master"))))
          commit))))
  
  
  (method (commit-tree commit)
    (bind (author email message tree parent time) (retrieve commit)
      tree))
  
  
  (method (commit-parent commit)
    (bind (author email message tree parent time) (retrieve commit)
      parent))
  
  
  ;;;
  ;;;; Checkout
  ;;;
  
  
  (method (checkout name (create?: create? #f))
    (cond (create?
           (let ((commit (resolve (require-head))))
             (write-branch name commit)
             (write-head (make-branch name))
             commit))
          ((branch-exists? name)
           (let ((ref (make-branch name)))
             (checkout-commit (resolve ref))
             (write-head ref)
             ref))
          (else
           (let ((commit (resolve (parse name))))
             (if (exists? commit)
                 (begin
                   (checkout-commit commit)
                   (write-head commit)
                   commit)
               (jas-exception "Unable to checkout {a}" name))))))
  
  
  (method (checkout-commit commit)
    (let ((working-index (working-index))
          (staging-index (staging-index))
          (commit-index (commit-index commit)))
      (if (not-null? (get-changes~ (diff staging-index working-index)))
          (jas-exception "Please commit your changes before you can checkout")
        (let ((diff (diff staging-index commit-index)))
          (for-each (lambda (change)
                      (bind (what path . rest) change
                        (let ((file (new-file~ working (tokenise-filename path))))
                          (case what
                            ((added)
                             (retrieve-file (car rest) file)
                             (add-file~ staging-index path file))
                            ((removed)
                             (delete-file~ file)
                             (remove-file~ staging-index path file))
                            ((modified)
                             (retrieve-file (cadr rest) file)
                             (add-file~ staging-index path file))))))
                    (get-changes~ diff))
          (save~ staging-index)))))
  
  
  ;;;
  ;;;; Index
  ;;;
  
  
  (method (add path)
    (let ((path (normalize-path path)))
      (cond ((not path)
             (add-directory~ index #f working))
            ((ends-with? path "/")
             (add-directory~ index path (new-directory~ working path)))
            (else
             (add-file~ index path (new-file~ working path))))))
  
  
  (method (remove path)
    (let ((path (normalize-path path)))
      (cond ((not path)
             (remove-directory~ index #f working))
            ((ends-with? path "/")
             (remove-directory~ index path (new-directory~ working path)))
            (else
             (remove-file~ index path (new-file~ working path))))))
  
  
  (method (normalize-path path)
    (if (equal? path ".")
        #f
      (let ((pathname (string-append (parse~ working) path)))
        (if (file-exists? pathname)
            (case (pathname-type pathname)
              ((file) path)
              (else (normalize-directory path)))
          (jas-exception "Unable to find {a}" path)))))
  
  
  (method (head-index)
    (let ((head (read-head)))
      (if (not head)
          (new JAS-Index self #f)
        (commit-index (resolve head)))))
  
  
  (method (working-index)
    (prog1 (new JAS-Index self working entries: (scan-directory #f working base: index))
      (save~ index)))
  
  
  (method (staging-index)
    index)
  
  
  (method (commit-index commit)
    (tree->index (commit-tree commit)))
  
  
  (method (tree->index tree)
    (new JAS-Index self #f entries: (scan-tree tree)))
  
  
  (method (scan-file path file (base: base #f))
    (let ((seconds (get-modification-seconds~ file)))
      (or (and base (let ((entry (find-entry~ base path)))
                      (and entry
                           (bind (entry-path entry-digest entry-seconds) entry
                             (and entry-seconds
                                  (if (= entry-seconds seconds)
                                      (list path entry-digest seconds)
                                    (let ((digest (digest-file (parse~ file) 'SHA-1)))
                                      ;; update base entry seconds
                                      ;; we do not update the digest
                                      ;; we are only creating a fast test
                                      ;; path + seconds = correct digest
                                      (when (equal? entry-digest digest)
                                        (set-third! entry seconds))
                                      (list path digest seconds))))))))
          (list path (digest-file (parse~ file) 'SHA-1) seconds))))
  
  
  (method (scan-directory dirpath dir (base: base #f))
    (let ((entries (new-queue)))
      (iterate-directory~ dir
        (lambda (path kind)
          (let ((file (new-file~ dir path)))
            (let ((subpath (join path "/")))
              (enqueue entries (scan-file (if (not dirpath) subpath (string-append dirpath subpath)) file base: base)))))
        full?: #f
        files?: #t
        directories?: #f
        recursive?: #t
        ignored-toplevel-dirnames: '(".jas" ".git")
        sort?: #t
        sort-type?: #f
        sort-test: ci<?)
      (queue-list entries)))
  
  
  (method (scan-tree tree)
    (let ((entries (new-queue)))
      (define (scan prefix tree)
        (for-each (lambda (entry)
                    (bind (kind path digest) entry
                      (case kind
                        ((blob) (enqueue entries (list (string-append prefix path) digest #f)))
                        ((tree) (scan (string-append prefix path "/") digest)))))
                  (retrieve tree)))
      
      (scan "" tree)
      (queue-list entries)))
  
  
  (method (index->tree index)
    (let ((directory (get-directory~ index))
          (entries (get-entries~ index)))
      (define (gather prefix)
        (let ((len (string-length prefix))
              (queue (new-queue)))
          (define (prefix-change path)
            (let ((slash (search path "/" start: len)))
              (when slash
                (substring path 0 (+ slash 1)))))
          
          (let (iter)
            (if (null? entries)
                (write-tree (queue-list queue))
              (let ((entry (car entries)))
                (bind (path digest seconds) entry
                  (if (starts-with? path prefix)
                      (let ((slash (search path "/" start: len)))
                        (if (not slash)
                            (let ((file (new-file~ directory path)))
                              (write-file file digest)
                              (enqueue queue (list 'blob (get-name~ file) digest))
                              (set! entries (cdr entries))
                              (iter))
                          (let ((name (substring path len slash))
                                (new-prefix (substring path 0 (+ slash 1))))
                            (enqueue queue (list 'tree name (gather new-prefix)))
                            (iter))))
                    (write-tree (queue-list queue)))))))))
      
      (assert directory)
      (gather "")))
  
  
  ;;;
  ;;;; Diff
  ;;;
  
  
  (method (diff from to)
    (let ((queue (new-queue)))
      (merge-ordered (lambda (what key left right)
                       (case what
                         ((:left)
                          (enqueue queue (list 'removed key (second left))))
                         ((:right)
                          (enqueue queue (list 'added key (second right))))
                         ((:same)
                          (let ((from-digest (second (find-entry~ from key)))
                                (to-digest (second (find-entry~ to key))))
                            (unless (equal? from-digest to-digest)
                              (enqueue queue (list 'modified key from-digest to-digest)))))))
                     (get-entries~ from)
                     (get-entries~ to)
                     key: car)
      (new JAS-Diff (queue-list queue))))
  
  
  ;;;
  ;;;; Status
  ;;;
  
  
  (method (staging-status)
    (diff (head-index) (staging-index)))
  
  
  (method (working-status)
    (diff (staging-index) (working-index)))
  
  
  ;;;
  ;;;; Head
  ;;;
  
  
  (method (write-head ref)
    (call-with-output-file (path-settings head)
      (lambda (output)
        (write ref output)
        (newline output))))
  
  
  (method (read-head)
    (when (exists?~ head)
      (call-with-input-file (path-settings head)
        read)))
  
  
  (method (require-head)
    (let ((head (read-head)))
      (assert head)
      head))
  
  
  ;;;
  ;;;; Branches
  ;;;
  
  
  (method (write-branch branch commit)
    (let ((file (branch-file branch)))
      (call-with-output-file (path-settings file)
        (lambda (output)
          (write commit output)
          (newline output)))))
  
  
  (method (read-branch name)
    (let ((file (branch-file name)))
      (when (exists?~ file)
        (call-with-input-file (path-settings file)
          read))))
  
  
  (method (branch-file name)
    (new-file~ (branches-directory) name))
  
  
  (method (branches-directory)
    heads)
  
  
  (method (branch-exists? name)
    (exists?~ (branch-file name)))
  
  
  (method (branches)
    (map get-name~ (collect-files~ (branches-directory)
                     (lambda (file)
                       #t))))
  
  
  ;;;
  ;;;; References
  ;;;
  
  
  (method (commit? ref)
    (string? ref))
  
  
  (method (branch? ref)
    (and (pair? ref)
         (eq? (car ref) branch:)))
  
  (method (make-branch name)
    (list branch: name))
  
  (method (branch-name ref)
    (cadr ref))
  
  
  (method (resolve ref)
    (cond ((commit? ref)
           ref)
          ((branch? ref)
           (read-branch (branch-name ref)))
          (else
           (jas-exception "Invalid reference: {a}" ref))))
  
  
  ;;;
  ;;;; Revisions
  ;;;
  
  
  (method (parse rev)
    (cond ((starts-with? rev "HEAD" ignore-case?: #t)
           (let ((parents (substring rev (string-length "HEAD") (string-length rev))))
             (if (equal? parents (make-string (string-length parents) #\^))
                 (let (iter (commit (resolve (require-head))) (count (string-length parents)))
                   (if (<= count 0)
                       commit
                     (iter (commit-parent commit) (- count 1))))
               (jas-exception "Invalid revision: {a}" rev))))
          ((equal? rev "master")
           (make-branch "master"))
          (else
           rev))))


;;;
;;;; Index
;;;


(class JAS-Index extends Object
  
  
  (slot repository getter generate)
  (slot directory  getter generate)
  (slot file       getter generate)
  (slot paths      getter generate)
  (slot entries    getter generate)
  
  
  (method override (initialize repository directory (file: file #f) (entries: entries #f))
    (set! repository~self repository)
    (set! directory~self directory)
    (set! file~self file)
    (set! paths~self (make-table test: equal?))
    (set! entries~self (or entries (if (and file (exists?~ file))
                                       (load)
                                     '())))
    (setup-paths))
  
  
  (method override (print output readably)
    (print-unreadable self output
      (lambda (output)
        (let ((len (length entries)))
          (format output "with {a} entr{a}" (format-cardinality len) (format-y/ies len))))))
  
  
  (method (setup-paths)
    (for-each (lambda (entry)
                (table-set! paths (car entry) entry))
              entries))
  
  
  (method (load)
    (call-with-input-file (path-settings file)
      read-all))
  
  
  (method (save)
    (call-with-output-file (path-settings file)
      (lambda (output)
        (for-each (lambda (entry)
                    (format output "{s}{%}" entry))
                  entries))))
  
  
  (method (updating path test proc)
    (let (iter (prev #f) (scan entries))
      (if (null? scan)
          (proc prev scan)
        (let ((entry (car scan)))
          (let ((entry-path (car entry)))
            (if (test entry-path path)
                (iter prev (cdr scan))
              (case (ci-compare entry-path path)
                ((:less)
                 (iter scan (cdr scan)))
                ((:equal)
                 (proc prev (cdr scan)))
                ((:greater)
                 (proc prev scan)))))))))
  
  
  (method (update path test added)
    (updating path test
      (lambda (prev next)
        (cond ((not prev)
               (if (null? added)
                   (set! entries next)
                 (set-cdr! (last-pair added) next)
                 (set! entries added)))
              (else
               (if (null? added)
                   (set-cdr! prev next)
                 (set-cdr! prev added)
                 (set-cdr! (last-pair added) next))))))
    entries)
  
  
  (method (add-file path file)
    (update path ci=? (list (scan-file~ repository path file base: self)))
    (save))
  
  
  (method (add-directory path directory)
    (update path (directory-test path) (scan-directory~ repository path directory base: self))
    (save))
  
  
  (method (remove-file path file)
    (update path ci=? '())
    (save))
  
  
  (method (remove-directory path directory)
    (update path (directory-test path) '())
    (save))
  
  
  (method (directory-test path)
    (if (not path)
        (lambda (entry-path path)
          #t)
      (lambda (entry-path path)
        (starts-with? entry-path path ignore-case?: #t))))
  
  
  (method (find-entry path)
    (table-ref paths path #f)))


;;;
;;;; Diff
;;;


(class JAS-Diff extends Object
  
  
  (slot changes getter generate)
  
  
  (method override (initialize changes)
    (set! changes~self changes))
  
  
  (method override (print output readably)
    (print-unreadable self output
      (lambda (output)
        (let ((len (length changes)))
          (format output "with {a} change{a}" (format-cardinality len) (format-plural len)))))))


;;;
;;;; Exception
;;;


(definition protected (jas-exception format-string . rest)
  (throw (new JAS-Exception (apply format format-string rest))))


(class JAS-Exception extends Exception
  
  
  (slot message)
  
  
  (method override (initialize message)
    (nextmethod)
    (set! message~self message))
  
  
  (method override (get-message)
    message))


;;;
;;;; Describe
;;;
  
  
(definition public (jas-describe obj output)
  (define (describe-index index)
    (for-each (lambda (entry)
                (apply debug entry))
              (get-entries~ index)))
  
  (define (describe-diff diff)
    (for-each (lambda (change)
                (bind (what path) change
                  (case what
                    ((added)    (format output "    \033[32madded:    {a}\033[39;49m{%}" path))
                    ((removed)  (format output "    \033[31mremoved:  {a}\033[39;49m{%}" path))
                    ((modified) (format output "    \033[36mmodified: {a}\033[39;49m{%}" path)))))
              (get-changes~ diff)))
  
  (typecase obj
    ((JAS-Index)
     (describe-index obj))
    ((JAS-Diff)
     (describe-diff obj))
    (else
     (jas-exception "Unable to describe {a}" obj)))))
