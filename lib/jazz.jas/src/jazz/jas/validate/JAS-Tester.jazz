;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; JAS Tester
;;;


(module protected jazz.jas.validate.JAS-Tester jazz


(import (jazz.io)
        (jazz.jml)
        (jazz.jas)
        (jazz.validation))


(class JAS-Tester extends Tester
  
  
  (form
    (<install> title: "JAS-Tester"))


  (method override (test)
    (test-init))
  
  
  ;;;
  ;;;; Init
  ;;;
  
  
  (method (test-init)
    (initialize-aliases)
    (let ((dir {Directory Home "Devel" "jazz" "temp" "test"}))
      (define (create-file file content)
        (create-directories~ file)
        (call-with-output-file (path-settings file)
          (lambda (output)
            (display content output)
            (newline output))))
      
      (when (exists?~ dir)
        (delete-directory~ dir))
      ;; init repo
      (let ((repo (jas-init dir))
            (author "Guillaume Cartier")
            (email "gcartier@jazzscheme.org"))
        (jas-config-set repo 'user.name author)
        (jas-config-set repo 'user.email email)
        (let* ((a (new-file~ dir "a.txt"))
               (b (new-file~ dir "b.txt"))
               (c (new-directory~ dir "c"))
               (d (new-file~ c "d.txt"))
               (e (new-directory~ c "e"))
               (f (new-file~ e "f.txt"))
               (g (new-file~ dir "g.txt"))
               (h (new-file~ dir "h.txt")))
          (create-file a "aaa")
          (create-file b "bbb")
          (create-file d "ddd")
          (create-file g "ggg")
          (create-file h "hhh")
          ;; add commits
          (let ((c1 (jas-commit repo author email "c1" '() #f)))
            (debug 'c1 c1)
            (let ((c2 (jas-commit repo author email "c2" (jas-write-tree repo (list (jas-write repo a)
                                                                                    (jas-write repo b)))
                        c1)))
              (debug 'c2 c2)
              (let ((c3 (jas-commit repo author email "c3" (jas-write-directory repo dir) c2)))
                (debug 'c3 c3)
                (create-file f "fff")
                (let ((c4 (jas-commit repo author email "c4" (jas-write-directory repo dir) c3)))
                  (debug 'c4 c4)
                  (jas-update-index repo)))))))))))
