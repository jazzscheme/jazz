;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; JML
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2012
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module jazz.jml jazz


(export (jazz.jml.syntax (phase syntax))
        (jazz.jml.autoload)
        (jazz.jml.parse))
(import (jazz.jml.autoload)
        (jazz.io)
        (jazz.library))

;;;
;;;; Class Form
;;;


(definition public (get-class-form-with-origin form method-path)
  (define (determine-origin)
    (let* ((metaclass-path (butlast method-path))
           ;; hack. We assume that the metaclass name has the form X~Class
           (class-path (list (car metaclass-path)
                             (car (split-symbol (cadr metaclass-path) #\~))))
           (class-locator (apply compose-reference class-path)))
      (global-ref class-locator)))
    
  (unless (get-origin~ form)
    (set-origin~ form (determine-origin)))
  form)


;;;
;;;; Parse
;;;


(definition public (parse-jml jml (preferences-class: preferences-class #f) (parser-class: parser-class #f))
  (let* ((pref (new (or preferences-class JML-Preferences)))
         (parser (new (or parser-class JML-Parser) preferences: pref)))
    (parse~ parser jml)))


;;;
;;;; Transform
;;;


(definition public (transform-jml node transformation)
  (transform~ transformation node))


;;;
;;;; Render
;;;


(definition public (render-jml node output (preferences-class: preferences-class #f) (renderer-class: renderer-class #f))
  (let* ((pref (new (or preferences-class JML-Preferences)))
         (renderer (new (or renderer-class JML-Renderer) pref)))
    (render~ renderer node output)))


;;;
;;;; Iterate
;;;


(definition public (iterate-nodes node proc)
  (proc node)
  (for-each (lambda (child)
              (iterate-nodes child proc))
            (get-children~ node)))


;;;
;;;; Form
;;;


;; This is a very naive draft implementation that goes through
;; two passes of parsing to a node and then converting to a form


(definition public (jml->form expr (locator #f))
  (let* ((parser (new JML-Parser))
         (node (parse~ parser expr))
         (form (node->form node)))
    (set-locator~ form locator)
    form))


(definition package (node->form node)
  (define (extract-node-properties node)
    (let ((fact (new List-Factory)))
      (for-each-property (lambda (property value)
                           (when (not (memq? property '(name tag-symbolic? tag-reference)))
                             (put~ fact property)
                             (put~ fact value)))
                         (get-properties~ node))
      (get-output~ fact)))
  
  (define (node->form node parent)
    (if (is? node JML-Text)
        node
      (let* ((tag (get-tag~ node))
             (tag-name (symbol->string tag))
             (tag-modify? (and (neq? tag '!) (ends-with? tag-name "!")))
             (tag-locate? (and (neq? tag '~) (ends-with? tag-name "~")))
             (tag-symbolic? (or tag-modify? tag-locate?))
             (action (cond ((eq? tag '*) 'instantiate)
                           ((or (eq? tag '!) tag-modify?) 'modify)
                           ((or (eq? tag '~) tag-symbolic?) 'locate)
                           ((eq? tag 'install) 'install)
                           (else 'new)))
             (model (if (or (memq? tag '(* ! ~ install)) tag-symbolic?) #f tag))
             (name (if tag-symbolic? (string->symbol (butlast tag-name)) (get-property~ node 'name)))
             (form (new Form textual?: #f action: action model: model name: name tag-symbolic?: tag-symbolic? tag-reference: (get-property~ node 'tag-reference #f) properties: (extract-node-properties node)))
             (children (map (lambda (node)
                              (node->form node form))
                            (get-children~ node))))
        (set-parent-value~ form parent)
        (if (trait-tag? tag)
            ;; not 100% sure about this way of testing for a trait form with no install
            (if (null? children)
                (begin
                  (set-property~ form 'client-form (new Form action: 'new model: 'install))
                  (set-children~ form '()))
              (let ((client-form (car children))
                    (children (cdr children)))
                (assert (and (is? client-form Form) (eq? (get-action~ client-form) 'install))
                  (set-property~ form 'client-form client-form)
                  (set-children~ form children))))
          (set-children~ form children))
        form)))
  
    (node->form node #f))


(definition package (form->node form)
  (define (add-client-form form children)
    (let ((client-form (get-property~ form 'client-form)))
      (if (not client-form)
          children
        (cons (form->node client-form) children))))
  
  (define (extract-form-properties form symbolic?)
    (let ((fact (new List-Factory))
          (name (get-name~ form))
          (tag-reference (get-tag-reference~ form)))
      (when (and name (not symbolic?))
        (put~ fact 'name)
        (put~ fact name))
      (when tag-reference
        (put~ fact 'tag-reference)
        (put~ fact tag-reference))
      (for-each-property (lambda (property value)
                           (let ((name (if (property? property) (field-name property) property)))
                             (when (neq? name 'client-form)
                               (put~ fact name)
                               (put~ fact value))))
                         (get-properties~ form))
      (get-output~ fact)))
  
  (define (form/parent->node form parent)
    (if (is? form JML-Text)
        form
      (let* ((action (get-action~ form))
             (model (get-model~ form))
             (name (get-name~ form))
             (symbolic? (get-tag-symbolic?~ form))
             (tag (if symbolic?
                      (string->symbol (string-append (symbol->string name) (case action ((modify) "!") ((locate) "~"))))
                    (case action ((install) 'install) ((new) model) ((instantiate) '*) ((modify) '!) ((locate) '~))))
             (element (new JML-Element parent tag))
             (properties (extract-form-properties form symbolic?))
             (children (map (lambda (form)
                              (form/parent->node form element))
                            (get-children~ form))))
        (set-properties~ element properties)
        (set-children~ element (if (trait-tag? model) (add-client-form form children) children))
        element)))
  
    (form/parent->node form #f))


(definition public (construct-form expr locator (data #f))
  (let ((form (jml->form expr locator)))
    (set-data~ form data)
    (setup-context~ form form)
    form))


(definition public (locators-ref locators symbol)
  (table-ref locators symbol #f))


(define *trait-tags*
  '(Trait))


(definition public (register-trait-tag tag)
  (set! *trait-tags* (cons tag *trait-tags*)))


(definition (trait-tag? tag)
  (memq? tag *trait-tags*))


;;;
;;;; Print
;;;


(definition public (form->string form level (include-form?: include-form? #t) (space-properties?: space-properties? #t) (align-name?: align-name? #t) (indent-first?: indent-first? #t))
  (with-jazz-readtable
    (lambda ()
      (let ((output (open-output-string)))
        (print-file-form form level output include-form?: include-form? space-properties?: space-properties? align-name?: align-name? indent-first?: indent-first?)
        (get-output-string output)))))


(definition public (print-file-form form level output (include-form?: include-form? #t) (space-properties?: space-properties? #t) (align-name?: align-name? #t) (indent-first?: indent-first? #t))
  (when include-form?
    (format output "(form{%}"))
  (let ((node (form->node form))
        (base level))
    (pretty-print~ node output base: base space-properties?: space-properties? align-name?: align-name? indent-first?: indent-first?))
  (when include-form?
    (format output ")")))


(definition public (print-form form level output)
  (pretty-print~ (form->node form) output base: level))


;;;
;;;; Save
;;;


(definition public (save-jml jml file)
  (call-with-output-file (path-settings file)
    (lambda (port)
      (pretty-print~ jml port)
      (newline port))))


;;;
;;;; Load
;;;


(definition public (read-jml file)
  (parameterize ((walk-for #f))
    (call-with-input-file (path-settings file eol-encoding: 'cr-lf readtable: jazz-readtable)
      read)))


(definition public (load-jml file)
  (let ((parser (new JML-Parser preferences: (new JML-Preferences))))
    (parse~ parser (read-jml file)))))
