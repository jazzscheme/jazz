;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; JML Elements
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.jml.model.JML-Element jazz


(import (jazz.jml)
        (jazz.library))


(class JML-Element extends JML-Node
  
  
  (slot tag                       getter generate)
  (slot properties initialize '() accessors generate)
  (slot children   initialize '() accessors generate)
  
  
  (method override (initialize parent tag (properties: properties '()) (children: children '()))
    (nextmethod parent)
    (set! tag~self tag)
    (set! properties~self properties)
    (set! children~self children)
    (when (not-null? children)
      (for-each (lambda (child)
                  (set-parent-value~ child self))
                children)))
  
  
  (method override (print printer readably)
    (print-unreadable self printer
      (lambda (printer)
        (if (null? properties)
            (format printer "{s}" tag)
          (format printer "{s} {s}" tag properties)))))
  
  
  (method public (clone (parent: parent #f) (children: children '()))
    (let ((clone (new JML-Element parent tag)))
      (set-properties~ clone properties)
      (set-children~ clone children)
      clone))
  
  
  ;;;
  ;;;; Properties
  ;;;
  
  
  (method public (has-property? property)
    (let ((symbol (symbolize-property property))
          (not-found {Box}))
      (neq? (getf properties symbol key: symbolize-property not-found: not-found) not-found)))
  
  
  (method public (get-property property (not-found #f))
    (let ((symbol (symbolize-property property)))
      (let (iterate (scan properties))
        (if (null? scan)
            not-found
          (let ((property (car scan)))
            (if (eq? symbol (symbolize-property property))
                (cadr scan)
              (iterate (cddr scan))))))))
  
  
  (method public (set-property property value)
    (let ((symbol (symbolize-property property)))
      (let (iterate (scan properties))
        (if (null? scan)
            (set! properties (append properties (list symbol value)))
          (let ((property (car scan)))
            (if (eq? symbol (symbolize-property property))
                (set-car! (cdr scan) value)
              (iterate (cddr scan))))))))
  
  
  (method public (remove-property target)
    (let ((symbol (symbolize-property target))
          (fact (new List-Factory)))
      (for-each-property (lambda (property value)
                           (when (neq? symbol (symbolize-property property))
                             (put~ fact property)
                             (put~ fact value)))
                         properties)
      (set! properties (get-output~ fact))))
  
  
  (method public (rename-property old new)
    (let ((old (symbolize-property old))
          (new (symbolize-property new)))
      (let (iterate (scan properties))
        (when (not-null? scan)
          (let ((property (car scan)))
            (if (eq? old (symbolize-property property))
                (set-car! scan new)
              (iterate (cddr scan))))))))
  
  
  ;;;
  ;;;; Children
  ;;;
  
  
  (definition Flattened-Tags
    '(div img input span))
  
  
  (method public (first-child)
    (if (null? children)
        #f
      (car children)))
  
  
  (method public virtual (remove-child node)
    (set! children (remove! node children)))
  
  
  (method public virtual (add-child node)
    (set! children (append! children (list node))))
  
  
  (method public (composite?)
    (not (simple?)))
  
  
  (method public (simple?)
    (let ((children (effective-children)))
      (or (and (= 1 (length children))
               (let ((child (car children)))
                 (and (is? child JML-Element)
                      (memq? (get-tag~ child) Flattened-Tags)
                      (simple?~ child))))
          (every? (lambda (sub)
                    (is? sub JML-Text))
                  children))))
  
  
  (method (effective-children)
    children)
  
  
  (method public (find-by predicate)
    (find-if predicate children))
  
  
  (method public (find-node tag)
    (find-by
      (lambda (child)
        (and (is? child JML-Element)
             (eq? (get-tag~ child) tag)))))
  
  
  (method public virtual (find-name name)
    (find-by
      (lambda (child)
        (and (is? child JML-Element)
             (eq? (get-property~ child 'name) name)))))
  
  
  (method public (find-property property value)
    (find-by
      (lambda (child)
        (and (is? child JML-Element)
             (equal? (get-property~ child property) value)))))
  
  
  (method public (get-child-text)
    (get-text~ (first-child)))
  
  
  ;;;
  ;;;; Location
  ;;;
  
  
  (method override (get-child-location child)
    (list (+ 1
             (length properties)
             (get-rank child children))))
  
  
  ;;;
  ;;;; JML
  ;;;
  
  
  (method override (->jml)
    `(,(tag->jml) ,@(properties->jml) ,@(children->jml)))
  
  
  (method public (tag->jml)
    (string->symbol (format "<{a}>" tag)))
  
  
  (method public (properties->jml)
    (define (property->jml property)
      (symbol->keyword property))
    
    (let ((fact (new List-Factory)))
      (for-each-property (lambda (property value)
                           (put~ fact (property->jml property))
                           (put~ fact value))
                         properties)
      (get-output~ fact)))
  
  
  (method public (children->jml)
    (map (lambda (child)
           (->jml~ child))
         children))))
