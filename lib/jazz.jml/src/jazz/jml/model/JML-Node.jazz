;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; JML Nodes
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2012
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.jml.model.JML-Node jazz


(import (jazz.jml))


(class JML-Node extends Object
  
  
  (slot parent)
  
  
  (method override (initialize parent)
    (nextmethod)
    (set! parent~self parent)
    (when parent
      (add-child~ parent self)))
  
  
  ;;;
  ;;;; Access
  ;;;


  (method public (get-parent)
    parent)


  (method public (set-parent value)
    (when parent
      (remove-child~ parent self))
    (set! parent value)
    (when parent
      (add-child~ parent self)))


  (method public (append-parent value)
    (when parent
      (remove-child~ parent self))
    (set! parent value)
    (when parent
      (append-child~ parent self)))
  
  
  (method public (set-parent-value value)
    (set! parent value))
  
  
  ;;;
  ;;;; Parent
  ;;;
  
  
  (method public (get-toplevel)
    (if (not parent)
        self
      (get-toplevel~ parent)))
  
  
  (method public (for-each-parent proc <procedure>)
    (when parent
      (proc parent)
      (for-each-parent~ parent proc)))
  
  
  (method public (for-each-ancestor proc <procedure>)
    (proc self)
    (for-each-parent proc))
  
  
  ;;;
  ;;;; Location
  ;;;
  
  
  (method public (get-location)
    (if (not parent)
        '()
      (append (get-location~ parent)
              (get-child-location~ parent self))))
  
  
  (method public virtual (get-child-location child)
    )
  
  
  ;;;
  ;;;; JML
  ;;;
  
  
  (method public virtual abstract (->jml)
    )
  
  
  ;;;
  ;;;; Pretty Print
  ;;;
  
  
  (method public (pretty-print printer
                               (indent-first?: indent-first? #t)
                               (base: base 0)
                               (space-properties?: space-properties? #t)
                               (align-name?: align-name? #f)
                               (align-properties?: align-properties? #f)
                               (readably: readably :reader))
    (define (compute-maxes)
      (let ((max-tag #f)
            (max-name #f)
            (maxes (and align-properties? (make-table test: equal?))))
        (define (iter node path level)
          (when (is? node JML-Element)
            (let* ((tag (get-tag~ node))
                   (name (symbol->string tag))
                   (path (cons tag path)))
              (let ((width (+ (cardinality name) (* level 2))))
                (when (or (not max-tag) (> width max-tag))
                  (set! max-tag width)))
              (for-each-property (lambda (property value)
                                   (let ((width (cardinality (cast <string> (format "{s}" value)))))
                                     (when (eq? property 'name)
                                       (when (or (not max-name) (> width max-name))
                                         (set! max-name width)))
                                     (when align-properties?
                                       (let* ((path (cons property path))
                                              (max (table-ref maxes path #f)))
                                         (when (or (not max) (> width max))
                                           (table-set! maxes path width))))))
                                 (get-properties~ node))
              (for-each (lambda (child)
                          (iter child path (+ level 1)))
                        (get-children~ node)))))
        
        (iter self '() base)
        (values max-tag max-name maxes)))
    
    (when (printing-doc?)
      (set! align-name? #f)
      (set! space-properties? #f))
    (with-printer printer
      (lambda (output)
        (let ((first? #t))
          (receive (max-tag max-name maxes) (compute-maxes)
            (define (iter node path level return?)
              (when (not first?)
                (if return?
                    (format output "{%}")
                  (format output " ")))
              (when (and return? (or indent-first? (not first?)))
                (format output "{_ :v}" (* level 2)))
              (set! first? #f)
              (if (is? node JML-Text)
                  (let ((text (get-text~ node)))
                    (if (single-line?~ node)
                        (format output "{s}" text)
                      (format output "#\"{a}\"#" text)))
                (let* ((tag (get-tag~ node))
                       (name (symbol->string tag))
                       (path (cons tag path))
                       (properties (get-properties~ node)))
                  (case readably
                    ((:human) (format output "{a}" tag))
                    ((:reader) (format output "(<{a}>" tag)))
                  (when (and space-properties? (not-null? properties))
                    (let ((pad (- max-tag (cardinality name) (* level 2))))
                      (format output "{_ :v}" pad)))
                  (when (and align-name? max-name (not-null? properties))
                    (if (not (has-property?~ node 'name))
                        (format output "{_ :v}" (+ 7 max-name))
                      (let* ((value (get-property~ node 'name))
                             (pres <string> (format "{p}" value readably)))
                        (format output " name: {a}" pres)
                        (when (> (length properties) 2)
                          (format output "{_ :v}" (- max-name (cardinality pres)))))))
                  (let ((pad #f))
                    (for-each-property (lambda (property value)
                                         (when (or (not align-name?) (neq? property 'name))
                                           (let ((pres <string> (format "{p}" value readably)))
                                             (when (and align-properties? pad)
                                               (format output "{_ :v}" pad))
                                             (format output " {a}: {a}" property pres)
                                             (when align-properties?
                                               (let* ((path (cons property path))
                                                      (max (table-ref maxes path #f)))
                                                 (set! pad (- max (cardinality pres))))))))
                                       properties))
                  (let ((children (get-children~ node)))
                    (if (and (= 1 (length children))
                             (null? properties)
                             (let ((node (car children)))
                               (and (is? node JML-Text)
                                    (single-line?~ node))))
                        (let* ((node (car children))
                               (text (get-text~ node)))
                          (format output " {s}" text))
                      (let ((return? (not (memq? tag '(line a)))))
                        (for-each (lambda (child)
                                    (iter child path (+ level 1) return?))
                                  children))))
                  (case readably
                    ((:reader)
                     (format output ")"))))))
            
            (iter self '() base #t))))))))
