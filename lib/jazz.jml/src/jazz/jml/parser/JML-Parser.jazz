;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; JML Parser
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.jml.parser.JML-Parser jazz


(import (jazz.io)
        (jazz.jml)
        (jazz.library))


(class JML-Parser extends Object
  
  
  ;;;
  ;;;; Parser
  ;;;
  
  
  (slot preferences getter generate)
  
  
  (method override (initialize (preferences: preferences #f))
    (nextmethod)
    (set! preferences~self preferences))
  
  
  ;;;
  ;;;; Parse
  ;;;
  
  
  (method public (parse reader/expr)
    (define (parse-reader input)
      (parse-expr #f (read input)))
    
    (define (parse-expr parent expr)
      (parse-any parent expr))
    
    (define (parse-any parent object)
      (if (pattern-expr? object)
          (parse-pattern parent object)
        (parse-noexpand parent object)))
    
    (define (parse-noexpand parent object)
      (cond ((not object)
             #f)
            ((is? object JML-Node)
             (set-parent-value~ object parent)
             object)
            ((tagged-expr? object)
             (parse-node parent object))
            ((pair? object)
             (map (lambda (sub)
                    (parse-expr parent sub))
                  object))
            (else
             (error "Unable to parse: {s}" object))))
    
    (define (parse-pattern parent pattern)
      (let* ((first (car pattern))
             (tag (tag->name first))
             (expansion (expand-pattern pattern tag)))
        (if (and (pair? expansion) (eq? (car expansion) first))
            (parse-noexpand parent expansion)
          (parse-any parent expansion))))
    
    (define (parse-node parent expr)
      (bind (first . rest) expr
        (let ((tag (tag->name first)))
          (receive (properties-list children-list) (parse-attributes rest)
            (let* ((node (new JML-Element parent tag))
                   (properties (parse-properties properties-list))
                   (children (parse-children node children-list)))
              (set-properties~ node properties)
              (set-children~ node children)
              node)))))
    
    (define (parse-properties properties)
      (let ((queue (new-queue)))
        (for-each-property (lambda (property value)
                             (enqueue queue (keyword->symbol property))
                             (enqueue queue (parse-property value)))
                           properties)
        (queue-list queue)))
    
    (define (parse-children parent children)
      (let ((queue (new-queue)))
        (define (add-nodes nodes)
          (if (null/pair? nodes)
              (for-each add-nodes nodes)
            (enqueue queue nodes)))
        
        (for-each (lambda (element)
                    (if (string? element)
                        (enqueue queue (new JML-Text #f element))
                      (let ((jml (parse-expr #f element)))
                        (add-nodes jml))))
                  children)
        (let ((children (queue-list queue)))
          (for-each (lambda (child)
                      (set-parent-value~ child parent))
                    children)
          children)))
    
    (define (parse-property value)
      (if (and (pair? value) (eq? (car value) :string))
          (map parse-property value)
        (parse-value value)))
    
    (define (parse-value value)
      (if (is? value Path)
          (parse-path value)
        value))
    
    (define (parse-path value (use-generator?: use-generator? #t))
      (bind (alias . path) (get-path~ value)
        (apply append (cons (get-alias alias use-generator?: use-generator?) path))))
    
    (define (tagged-expr? expr)
      (and (pair? expr)
           (tag? (car expr))))
    
    (define (pattern-expr? expr)
      (and (pair? expr)
           (let ((first (car expr)))
             (and (tag? first)
                  (let ((tag (tag->name first)))
                    (find-dispatch (class-of self) tag))))))
    
    (define (expand-pattern tree tag)
      (let ((pattern (find-dispatch (class-of self) tag)))
        (pattern self tree)))
    
    (if (port? reader/expr)
        (parse-reader reader/expr)
      (parse-expr #f reader/expr)))
  
  
  ;;;
  ;;;; Validate
  ;;;
  
  
  (method protected virtual (tag-valid? tag)
    #t)
  
  
  (method protected virtual (validate-tag tag)
    (unless (tag-valid? tag)
      (error "Unknown tag: {a}" tag)))
  
  
  ;;;
  ;;;; Aliases
  ;;;
  
  
  (method protected virtual (get-alias name . rest)
    (error "Unknown alias: {s}" name))))
