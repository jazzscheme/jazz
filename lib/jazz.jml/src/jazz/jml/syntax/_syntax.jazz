;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; JML Syntax
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.jml.syntax jazz


;;;
;;;; Form
;;;


;; These macros should ideally go in jazz.library.
;; They are here to minimize code breaking for the moment.


(macro public (<form> form)
  (define (gather-references)
    (let ((references (make-table test: eq?)))
      (define (walk-reference reference)
        (table-set! references reference #t))
      
      (define (process-form form)
        (receive (tag properties children) (jazz.jml.parse.parse-jml-expr form)
          (unless (or (memq? tag '(install * ! ~))
                      (memv? (last (symbol->string tag)) '(#\! #\~)))
            (walk-reference tag))
          (for-each-property
            (lambda (name value)
              (process-value value))
            properties)
          (for-each process-form children)))
      
      (define (process-value value)
        (walk-references~ value
          walk-reference))
      
      (process-form form)
      references))
  
  (define (locators-builder references)
    (cons 'list (map (lambda (pair)
                       (let ((reference (car pair)))
                         `(cons ',reference (reference ,reference))))
                     (table->list references))))
  
  (let ((locators-code (locators-builder (gather-references))))
    `(construct-form ',form
                     (let ((locators (list->table ,locators-code)))
                       (lambda (symbol)
                         (locators-ref locators symbol))))))


(macro public (form form)
  `(begin
     (definition meta class-self
       #f)
     
     (definition meta class-form
       (<form> ,form))
     
     (method meta override (get-class-form)
       ,@(if (eq? (walk-for) 'eval)
             '((set-origin~ class-form class-self))
           '())
       class-form)
     
     (method meta override (get-class-forms)
       ,@(if (eq? (walk-for) 'eval)
             '((set-origin~ class-form class-self))
           '())
       (cons class-form (nextmethod)))
     
     (method meta override (initialize)
       (set! class-self self)
       (set-origin~ class-form self))))


;;;
;;;; Pattern
;;;


(macro public (pattern . rest)
  `(method ,@rest)))
