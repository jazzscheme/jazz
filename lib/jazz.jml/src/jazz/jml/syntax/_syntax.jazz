;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; JML Syntax
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.jml.syntax jazz


;;;
;;;; Form
;;;


;; These macros should ideally go in jazz.library.
;; They are here to minimize code breaking for the moment.


(macro public (form>> form)
  (define (compute-locators)
    (let ((tags (make-table test: eq?)))
      (define (process-expr expr)
        (receive (tag properties children) (jazz.jml.parse.parse-jml-expr expr)
          (unless (or (memq? tag '(install * ! ~))
                      (memv? (last (symbol->string tag)) '(#\! #\~)))
            (table-set! tags tag #t))
          (for-each process-expr children)))
      
      (process-expr form)
      (cons 'list (map (lambda (pair)
                         (let ((tag (car pair)))
                           `(cons ',tag (lambda () ,tag))))
                       (table->list tags)))))
  
  `(jml->form ',form (let ((table (list->table ,(compute-locators))))
                       (lambda (symbol)
                         (let ((locator (table-ref table symbol #f)))
                           (and locator (locator)))))))


(macro public (form form)
  `(begin
     (definition meta class-self
       #f)
     
     (definition meta class-form
       (let ((form (form>> ,form)))
         (setup-context~ form form)
         form))
     
     (method meta override (get-class-form)
       ,@(if (eq? (walk-for) 'eval)
             '((set-origin~ class-form class-self))
           '())
       class-form)
     
     (method meta override (get-class-forms)
       ,@(if (eq? (walk-for) 'eval)
             '((set-origin~ class-form class-self))
           '())
       (cons class-form (nextmethod)))
     
     (method meta override (initialize)
       (set! class-self self)
       (set-origin~ class-form self))))


;;;
;;;; Pattern
;;;


(macro public (pattern . rest)
  `(method ,@rest)))
