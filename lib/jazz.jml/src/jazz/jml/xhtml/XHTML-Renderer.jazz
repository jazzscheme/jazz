;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; XHTML Renderer
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


;; oh boy, all these simple, composite, mix, empty, separated, ... need big time simplification!


(module protected jazz.jml.xhtml.XHTML-Renderer jazz


(import (jazz.jml))


(class XHTML-Renderer extends JML-Renderer
  
  
  ;;;
  ;;;; Tags
  ;;;
  
  
  (definition Empty-Tags
    '(area base basefont br col frame hr img input link meta param))
  
  (definition Mix-Tags
    '(p td))
  
  (definition Pre-Tags
    '(pre))
  
  (definition Separated-Tags
    '(head body frameset))
  
  (definition Separated2-Tags
    '(html))
  
  
  ;;;
  ;;;; Render
  ;;;
  
  
  (method override (render jml output)
    (render-jml '() jml #f #f #f 0 output))
  
  
  (method (render-jml context jml simple? mix? inside-pre? level output)
    (typecase jml
      ((JML-Text)
       (render-text context jml output))
      (else
       (render-node context jml simple? mix? inside-pre? level output))))


  (method virtual (render-text context jml output)
    (let ((text (get-text~ jml)))
      (iterate text
               (lambda (c)
                 (let ((n (char->integer c)))
                   (if (> n 255)
                       (format output "&#{a};" n)
                     (format output "{c}" c)))))))
  
  
  (method override (render-node context jml simple? mix? inside-pre? level output)
    (if (is-not? jml JML-Node)
        (render~ jml self context simple? mix? inside-pre? level output)
      (let ((tag (get-tag~ jml)))
        (render-tag context jml tag simple? mix? inside-pre? level output))))
  
  
  (method (render-tag context jml tag simple? parent-mix? inside-pre? level output)
    (let* ((tab (get-tab-size~ preferences))
           (composite? (composite?~ jml))
           (mix? (memq? tag Mix-Tags))
           (pre? (memq? tag Pre-Tags))
           (inside-pre? (or pre? inside-pre?)))
      (when (and (memq? tag Separated-Tags) (not inside-pre?))
        (output context output "{%}"))
      (unless (or simple? parent-mix? inside-pre?)
        (output context output "{_ :v}" (* level tab)))
      (output context output "<{a}" tag)
      (for-each-property (lambda (property value)
                           (if (null? value)
                               (output context output " {a}" property)
                             (if (and (pair? value) (eq? (car value) :string))
                                 (render-string context output property value)
                               (render-value context output property value))))
                         (get-properties~ jml))
      (if (memq? tag Empty-Tags)
          (output context output "/>")
        (output context output ">")
        (when (and composite? (not inside-pre?))
          (output context output "{%}"))
        (let ((new-level
               (case tag
                 ((html body) level)
                 (else (+ level 1)))))
          (render-children context jml (not composite?) mix? inside-pre? new-level output))
        (when (and composite? (not mix?) (not inside-pre?))
          (output context output "{_ :v}" (* level tab)))
        (when (and (memq? tag Separated2-Tags) (not inside-pre?))
          (output context output "{%}"))
        (output context output "{a}" (end-tag tag)))
      (unless (or simple? parent-mix? inside-pre?)
        (output context output "{%}"))))
  
  
  (method virtual (render-string context output property value)
    (output context output " {a}=\"" property)
    (for-each (lambda (string)
                (output context output "{a}" string))
              (cdr value))
    (output context output "\""))
  
  
  (method virtual (render-value context output property value)
    (output context output " {a}=\"{a}\"" property value))
  
  
  (method (render-children context jml simple? mix? inside-pre? level output)
    (for-each (lambda (sub)
                (render-jml context sub simple? mix? inside-pre? level output))
              (get-children~ jml)))
  
  
  (method (output context output format-string . parameters)
    (let ((text (apply format format-string parameters)))
      (output-text context output text)))
  
  
  (method virtual (output-text context output text)
    (when output
      (format output "{a}" text)))


  (definition (end-tag tag)
    (format "</{a}>" tag))))
