;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Jazz Remote Method Invocation
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module jazz.jrm jazz


(export (jazz.jrm.autoload))
(import (jazz.jrm.autoload)
        (jazz.network))


(definition *debug?*
  #f)

(definition *debug-arguments?*
  #f)

(definition *debug-locally?*
  #f)


;;;
;;;; Server
;;;


(definition Remote-Listener-Host
  (host-name))

(definition Remote-Listener-Service
  'any)


(definition remote-listener
  #f)


(definition public (get-remote-listener)
  remote-listener)

(definition public (set-remote-listener server)
  (set! remote-listener server))


(definition public (require-remote-listener)
  (if (not remote-listener)
      (error "Unable to complete operation because the remote listener is not running")
    remote-listener))


(definition public (start-remote-listener (default-host: default-host #f) (default-service: default-service #f))
  (unless remote-listener
    (receive (host service) (command-host/service "listen")
      (let ((server (new Remote-Listener host: (or host default-host Remote-Listener-Host) service: (or service default-service Remote-Listener-Service))))
        (start~ server)
        (if (wait-started~ server error?: #f)
            (set! remote-listener server)
          (error "Unable to start remote listener"))))))


(definition public (stop-remote-listener)
  (when remote-listener
    (stop~ remote-listener)
    (set! remote-listener #f)))


;;;
;;;; Exception
;;;


(class Remote-Connection-Broke extends Exception)


(definition (throw-remote-connection-broke)
  (throw (new Remote-Connection-Broke)))


;;;
;;;; Liveliness
;;;


(definition live-timeout
  0.5)

(definition live-request
  'live?)

(definition live-response
  'alive)


(definition package (remote-proxy-live? remote-proxy)
  (catch (Remote-Connection-Broke exc
           #f)
    (let ((proxy-ior (marshall remote-proxy)))
      (let ((host (get-host~ proxy-ior))
            (service (get-service~ proxy-ior)))
        (when *debug?*
          (terminal '***client*** 'live? remote-proxy))
        (let ((port (open-tcp-client (list server-address: host port-number: service))))
          (with-exception-catcher
            (lambda (exc)
              #f)
            (lambda ()
              (parameterize ((send-timeout live-timeout)
                             (receive-timeout live-timeout))
                (send-remote-message live-request port)
                (let ((result (receive-remote-result port)))
                  (close-port port)
                  (eq? result live-response))))))))))


;;;
;;;; Client
;;;


(definition send-timeout
  (make-parameter 2))

(definition receive-timeout
  (make-parameter 10))


(definition public (post-remote method-name remote-proxy . arguments)
  (invoke-remote 'post method-name remote-proxy arguments))


(definition public (exec-remote method-name remote-proxy . arguments)
  (invoke-remote 'exec method-name remote-proxy arguments))


(definition public (call-remote method-name remote-proxy . arguments)
  (invoke-remote 'call method-name remote-proxy arguments))


(definition (invoke-remote kind method-name remote-proxy arguments)
  (let ((method-name (marshall method-name))
        (proxy-ior (marshall remote-proxy))
        (arguments (marshall arguments)))
    (let ((host (get-host~ proxy-ior))
          (service (get-service~ proxy-ior)))
      (when *debug?*
        (terminal '***client*** kind method-name remote-proxy (and *debug-arguments?* arguments)))
      (call-with-tcp-client (list server-address: host port-number: service)
        (lambda (port)
          (send-remote-message (list kind method-name proxy-ior arguments) port)
          (case kind
            ((post)
             (unspecified))
            ((exec)
             (let ((received (receive-remote-result port)))
               (when *debug?*
                 (terminal '***client*** 'received method-name '-> received))
               (bind (err result) received
                 (if err
                     (error "Remote error while executing {s}: {a}" method-name err)
                   (unspecified)))))
            ((call)
             (let ((received (receive-remote-result port)))
               (when *debug?*
                 (terminal '***client*** 'received method-name '-> received))
               (bind (err result) received
                 (if err
                     (error "Remote error while executing {s}: {a}" method-name err)
                   (unmarshall result)))))))))))


(definition (send-remote-message info port)
  (let ((timeout (send-timeout)))
    (when timeout
      (output-port-timeout-set! port timeout throw-remote-connection-broke)))
  (write-port port info))


(definition (receive-remote-result port)
  (let ((timeout (receive-timeout)))
    (when timeout
      (input-port-timeout-set! port timeout)))
  (let ((info (read-port port)))
    (if (eof-object? info)
        (throw-remote-connection-broke)
      info)))


;;;
;;;; Server
;;;


(definition package (process-remote port)
  (define (execute-remote method-name proxy-ior arguments)
    (if *debug-locally?*
        (values #f (dispatch-remote method-name proxy-ior arguments))
      (continuation-capture
        (lambda (return)
          (with-exception-handler
            (lambda (exc)
              (continuation-capture
                (lambda (cont)
                  (when *debug?*
                    (terminal '***server*** 'exception method-name)
                    (display-exception exc)
                    (display-continuation-backtrace cont))
                  (return (values (exception-reason exc) #f)))))
            (lambda ()
              (values #f (dispatch-remote method-name proxy-ior arguments))))))))
  
  (define (dispatch-remote method-name proxy-ior arguments)
    (let ((method-name (unmarshall method-name))
          (local-proxy (unmarshall proxy-ior))
          (arguments (unmarshall arguments)))
      (apply (dispatch local-proxy method-name) local-proxy arguments)))
  
  (define (receive-remote-message port)
    (let ((timeout (receive-timeout)))
      (when timeout
        (input-port-timeout-set! port timeout)))
    (let ((info (read-port port)))
      (if (eof-object? info)
          (throw-remote-connection-broke)
        info)))
  
  (define (send-remote-result info port)
    (let ((timeout (send-timeout)))
      (when timeout
        (output-port-timeout-set! port timeout throw-remote-connection-broke)))
    (write-port port info))
  
  (let ((message (receive-remote-message port)))
    (if (eq? message live-request)
        (send-remote-result live-response port)
      (bind (kind method-name proxy-ior arguments) message
        (when *debug?*
          (terminal '***server*** kind method-name proxy-ior (and *debug-arguments?* arguments)))
        (case kind
          ((post)
           (dispatch-remote method-name proxy-ior arguments))
          ((exec)
           (receive (err result) (execute-remote method-name proxy-ior arguments)
             (when *debug?*
               (terminal '***server*** 'return method-name err result))
             (send-remote-result (list err (marshall (unspecified))) port)))
          ((call)
           (receive (err result) (execute-remote method-name proxy-ior arguments)
             (when *debug?*
               (terminal '***server*** 'return method-name err result))
             (send-remote-result (list err (marshall result)) port))))))))


;;;
;;;; Proxy
;;;


(definition public (proxy? object)
  (is? object Proxy))


(definition public (proxy=? x y)
  (cond ((and (remote-proxy? x) (remote-proxy? y))
         (remote-proxy=? x y))
        ((and (local-proxy? x) (local-proxy? y))
         (local-proxy=? x y))
        (else
         #f)))


(definition public (proxy-server=? x y)
  (cond ((and (remote-proxy? x) (remote-proxy? y))
         (ior-server=? (get-ior~ x)
                       (get-ior~ y)))
        ((and (local-proxy? x) (local-proxy? y))
         #t)
        (else
         #f)))


(definition (marshall-proxy proxy)
  (define (marshall-local-proxy local-proxy)
    (define (local-proxy->reference local-proxy)
      (if (proxy=? local-proxy local-register)
          #f
        (let ((object (get-object~ local-proxy)))
          (set! *Temp-Mega-Patch* (cons object *Temp-Mega-Patch*))
          (object->serial object))))
    
    (let ((server (require-remote-listener)))
      (new IOR
        (listening-host~ server)
        (listening-port~ server)
        (identifier-name (get-name~ (stub-interface~ local-proxy)))
        (local-proxy->reference local-proxy)
        (marshall (proxy-values~ local-proxy)))))
  
  (define (marshall-remote-proxy proxy)
    (marshall (get-ior~ proxy)))
  
  (if (remote-proxy? proxy)
      (marshall-remote-proxy proxy)
    (marshall-local-proxy proxy)))


;;;
;;;; Local Proxy
;;;


(definition public (local-proxy? object)
  (is? object Local-Proxy))


(definition public (local-proxy=? x y)
  (eq? (get-object~ x)
       (get-object~ y)))


;;;
;;;; Remote Proxy
;;;


(definition public (remote-proxy? object)
  (is? object Remote-Proxy))


(definition public (remote-proxy=? x y)
  (ior=? (get-ior~ x)
         (get-ior~ y)))


;;;
;;;; Register
;;;


(definition local-register
  #f)


(definition public (get-local-register)
  (when (not local-register)
    (set! local-register (new-local-proxy~ Register)))
  local-register)


(definition public (new-remote-register host port)
  (unmarshall (new IOR host port 'Register-Stub #f '())))


;;;
;;;; IOR
;;;


;; Need to think about how the objects should be GC protected
(definition *Temp-Mega-Patch*
  '())


(definition public (ior? object)
  (is? object IOR))


(definition public (local-ior? ior)
  (let ((server (require-remote-listener)))
    (and (host=? (get-host~ ior) (listening-host~ server))
         (service=? (get-service~ ior) (listening-port~ server)))))


(definition public (ior=? x y)
  (and (host=? (get-host~ x) (get-host~ y))
       (service=? (get-service~ x) (get-service~ y))
       (reference=? (get-reference~ x) (get-reference~ y))))


(definition public (ior-server=? x y)
  (and (host=? (get-host~ x) (get-host~ y))
       (service=? (get-service~ x) (get-service~ y))))


(definition public (host=? x y)
  (equal? x y))


(definition public (service=? x y)
  (eqv? x y))


(definition public (reference=? x y)
  (eqv? x y))


(definition public (unmarshall-ior ior)
  (define (unmarshall-local-ior stub-interface ior)
    (define (reference->local-proxy stub-interface reference)
      (if (not reference)
          local-register
        (new (local-class~ stub-interface) (serial->object reference))))
    
    (reference->local-proxy stub-interface (get-reference~ ior)))
  
  (define (unmarshall-remote-ior stub-interface ior)
    (let ((remote-class (remote-class~ stub-interface)))
      (new remote-class ior (unmarshall (get-values~ ior)))))
  
  (let ((stub-interface (autoload (get-stub-interface~ ior))))
    (if (local-ior? ior)
        (unmarshall-local-ior stub-interface ior)
      (unmarshall-remote-ior stub-interface ior))))


;;;
;;;; Marshall
;;;


(definition (marshall object)
  (cond ((null? object)
         object)
        ((number? object)
         object)
        ((string? object)
         object)
        ((symbol? object)
         object)
        ((keyword? object)
         object)
        ((eq? object #f)
         object)
        ((eq? object #t)
         object)
        ((u8vector? object)
         object)
        ((unspecified? object)
         object)
        ((ior? object)
         object)
        ((is? object Exception-Detail)
         object)
        ((is? object Walk-Location)
         object)
        ((proxy? object)
         (marshall-proxy object))
        ((pair? object)
         (cons (marshall (car object))
               (marshall (cdr object))))
        (else
         (error "Unable to marshall: {s}" object))))


;;;
;;;; Unmarshall
;;;


(definition (unmarshall object)
  (cond ((null? object)
         object)
        ((number? object)
         object)
        ((string? object)
         object)
        ((symbol? object)
         object)
        ((keyword? object)
         object)
        ((eq? object #f)
         object)
        ((eq? object #t)
         object)
        ((u8vector? object)
         object)
        ((unspecified? object)
         object)
        ((is? object Exception-Detail)
         object)
        ((is? object Walk-Location)
         object)
        ((ior? object)
         (unmarshall-ior object))
        ((pair? object)
         (cons (unmarshall (car object))
               (unmarshall (cdr object))))
        (else
         (error "Unable to unmarshall: {s}" object))))


;;;
;;;; Port
;;;


(definition (write-port port info)
  (write (encode info) port)
  (newline port)
  (force-output port))


(definition (read-port port)
  (decode (read port)))


;;;
;;;; Encode
;;;


(definition (encode object)
  (define (encode-info kind . info)
    (cons encoded-marker (cons kind info)))
  
  (define (encode-ior ior)
    (encode-info 'IOR
                 (get-host~ ior)
                 (get-service~ ior)
                 (get-stub-interface~ ior)
                 (get-reference~ ior)
                 (encode (get-values~ ior))))
  
  (cond ((null? object)
         object)
        ((number? object)
         object)
        ((string? object)
         object)
        ((symbol? object)
         object)
        ((keyword? object)
         object)
        ((eq? object #f)
         (encode-info 'false))
        ((eq? object #t)
         (encode-info 'true))
        ((unspecified? object)
         (encode-info 'unspecified))
        ((ior? object)
         (encode-ior object))
        ((pair? object)
         (cons (encode (car object))
               (encode (cdr object))))
        (else
         (encode-info #f (->string object :reader)))))


(definition encoded-marker
  'ENCODED)


(definition (encoded? object)
  (and (pair? object)
       (eq? (car object) encoded-marker)))


;;;
;;;; Decode
;;;


(definition (decode object)
  (define (decode-info encoded)
    (values (cadr encoded) (cddr encoded)))
  
  (define (decode-ior info)
    (bind (host service stub-interface reference values) info
      (new IOR host service stub-interface reference (decode values))))
  
  (cond ((null? object)
         object)
        ((number? object)
         object)
        ((string? object)
         object)
        ((symbol? object)
         object)
        ((keyword? object)
         object)
        ((eof-object? object)
         object)
        ((encoded? object)
         (receive (kind info) (decode-info object)
           (if (not kind)
               (parameterize ((walk-for #f))
                 (with-jazz-readtable
                   (lambda ()
                     (read-string-element (car info)))))
             (case kind
               ((false) #f)
               ((true) #t)
               ((unspecified) (unspecified))
               ((IOR) (decode-ior info))))))
        ((pair? object)
         (cons (decode (car object))
               (decode (cdr object))))
        (else
         (error "Unable to decode: {s}" object)))))
