;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; JRM Transmission
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module jazz.jrm.transmission jazz


(import (jazz.version))


(definition package (global-setting name default)
  (if (global-bound? name)
      (global-ref name)
    default))


;; text communication is broken
(definition binary-communication?
  (global-setting 'binary-communication? #t))


(definition protected *debug?*
  (global-setting 'debug-jrm? #f))

(definition protected *debug-arguments?*
  (global-setting 'debug-jrm-arguments? #f))

(definition protected *debug-simplify?*
  (global-setting 'debug-jrm-simplify? #t))


;;;
;;;; Exception Handling
;;;


;; remote exception handling is a difficult
;; problem that will need more looking into
(definition protected transmit-exceptions?
  #f)

(definition (set-transmit-exceptions? flag)
  (set! transmit-exceptions? flag))


;;;
;;;; Connection Broke
;;;


(class Connection-Broke extends Exception)


;; be very carefull because at this moment quitting the debuggee ends up
;; throwing a connection broke that gets caught and everything works correctly
;; this is probably a bug that should be fixed at some point
(definition public (throw-connection-broke)
  (throw (new Connection-Broke)))


;;;
;;;; Connection Exception
;;;


(class Connection-Exception extends Exception
  
  
  (slot exception getter generate)
  
  
  (method override (initialize exc)
    (nextmethod)
    (set! exception exc))
  
  
  (method override (print printer readably)
    (print-unreadable self printer
      (lambda (printer)
        (format printer "{a}" (exception-reason exception))))))


(definition public (with-connection thunk)
  (if (not transmit-exceptions?)
      (thunk)
    (with-exception-filter
      (lambda (exc)
        (is-not? exc Connection-Broke))
      (lambda (exc)
        (throw (new Connection-Exception exc)))
      thunk)))


(definition public (connection-problem? exc)
  (or (os-exception? exc)
      (and (object? exc)
           (or (is? exc Connection-Exception)
               (is? exc Connection-Broke)))))


;;;
;;;; Protocol
;;;


(definition public (write-header application-code version port)
  (if binary-communication?
      (write-binary-header application-code version port)
    (write-text-header application-code version port)))


(definition public (read-header port)
  (if binary-communication?
      (read-binary-header port)
    (read-text-header port)))


(definition public (write-data data port)
  (define (write-chunk data)
    (if binary-communication?
        (write-binary-data data port)
      (write-text-data data port)))
  
  (if (pair? data)
      (begin
        (write-chunk (length data))
        (for-each write-chunk data))
    (write-chunk #f)
    (write-chunk data)))


(definition public (read-data port)
  (define (read-chunk)
    (if binary-communication?
        (read-binary-data port)
      (read-text-data port)))
  
  (let ((count (read-chunk)))
    (if count
        (map (lambda (n) (read-chunk)) (naturals 0 count))
      (read-chunk))))


;;;
;;;; Binary
;;;


(definition public (write-binary-data data port)
  (write-binary data port))


(definition public (write-binary-header application-code version port)
  (receive (b1 b2 b3 b4) (32-bit-integer->bytes application-code)
    (receive (b5 b6 b7 b8 b9 b10 b11 b12) (64-bit-integer->bytes (->64-bit-integer~ version))
      (write-u8 b1 port)
      (write-u8 b2 port)
      (write-u8 b3 port)
      (write-u8 b4 port)
      (write-u8 b5 port)
      (write-u8 b6 port)
      (write-u8 b7 port)
      (write-u8 b8 port)
      (write-u8 b9 port)
      (write-u8 b10 port)
      (write-u8 b11 port)
      (write-u8 b12 port)
      (force-output port))))


(definition public (read-binary-data port)
  (let ((data (read-binary port)))
    (if (eof-object? data)
        (throw-connection-broke)
      data)))


(definition public (read-binary-header port)
  (let* ((b1 (read-u8 port))
         (b2 (read-u8 port))
         (b3 (read-u8 port))
         (b4 (read-u8 port))
         (b5 (read-u8 port))
         (b6 (read-u8 port))
         (b7 (read-u8 port))
         (b8 (read-u8 port))
         (b9 (read-u8 port))
         (b10 (read-u8 port))
         (b11 (read-u8 port))
         (b12 (read-u8 port)))
    (if (eof-object? b12)
        (throw-connection-broke)
      (let ((application-code (bytes->32-bit-integer b1 b2 b3 b4))
            (version-code (bytes->64-bit-integer b5 b6 b7 b8 b9 b10 b11 b12)))
        (values application-code (64-bit-integer->version version-code))))))


;;;
;;;; Text
;;;


(definition public (write-text-header application-code version port)
  (write application-code port)
  (newline port)
  (write version port)
  (newline port))


(definition public (write-text-data data port)
  (write data port)
  (newline port))


(definition public (read-text-header port)
  (let ((application-code (read port))
        (version-code (read port)))
    (values application-code version-code)))


(definition public (read-text-data port)
  (read port))


;;;
;;;; Protocol-Exception
;;;


(class Protocol-Exception extends Exception
  
  
  (slot message-text)
  
  
  (method override (initialize text)
    (nextmethod)
    (set! message-text text))
  
  
  (method override (get-message)
    message-text))


@wait
(definition public (validate-application-code application-code code)
  (unless (= code application-code)
    (throw (new Protocol-Exception
             (format "Unknown application code: {a} (expected {a})."
                     code
                     application-code)))))


@wait
(definition public (validate-application-version remote-version (server-side?: server-side? #t))
  (let ((local-version (process-version~ (get-process))))
    (unless (compatible?~ local-version remote-version)
      (throw (new Protocol-Exception
               (format "Client version {a} is incompatible with server version {a}."
                       (present~ (if server-side? remote-version local-version))
                       (present~ (if server-side? local-version remote-version)))))))))
