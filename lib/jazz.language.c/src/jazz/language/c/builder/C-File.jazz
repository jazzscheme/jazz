;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; C Project Files
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library protected jazz.language.c.builder.C-File jazz


(import (jazz.library)
        (jazz.utilities)
        (jedi))


(class C-File extends Project-File)


@convert-build


(class C-File extends Project-File


  (property precompiled-headers initialize 'use accessors generate)
  (property warnings-as-errors? initialize #t   accessors generate)
  
  
  ;;;
  ;;;; Build
  ;;;
  
  
  (method (preprocess project reporter log output (force?: force? #f))
    (let ((catalog (project-c-catalog~ project))
          (object (get-object-file~ project (get-base~ source) #f)))
      (when (or force?
                (not (exists?~ object))
                (dependency-modified? object source catalog))
        (let ((compiler (new VC-Compiler project: project file: source warnings-as-errors?: warnings-as-errors?)))
          (compile~ compiler reporter: reporter log: log output: output preprocess?: #t)))))
  
  
  (method (build project reporter log output (force?: force? #f))
    (let ((catalog (project-c-catalog~ project))
          (object (get-object-file~ project (get-base~ source) #f)))
      (when (or force?
                (not (exists?~ object))
                (dependency-modified? object source catalog))
        (let* ((compiler (get-compiler-class))
               (vc (new compiler project: project file: source precompiled-headers: precompiled-headers warnings-as-errors?: warnings-as-errors?)))
          (compile~ vc reporter: reporter log: log output: output)))))
  

  ;;;
  ;;;; Dependencies
  ;;;
  
  
  (method (dependency-modified? object file catalog)
    (continuation-capture
      (function (return)
        (letrec ((object-time (get-modification-time~ object))
                 (verified '())
                 (proc
                   (function (def)
                     (unless (memq? def verified)
                       (if (> (get-time~ def) object-time)
                           (continuation-return return #t)
                         (set! verified (cons def verified))
                         (for-each (function (def)
                                     (let ((include (get-include-file~ def)))
                                       (when include
                                         (proc include))))
                                   (get-includes~ def)))))))
          (let ((file-def (essay catalog (get-file-entry~ catalog file))))
            (if (null? file-def)
                (> (get-modification-time~ file) object-time)
              (proc file-def)
              #f))))))


  ;;;
  ;;;; Designer
  ;;;
  
  
  (method meta (get-class-presentation)
    "C File")))
