;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; The Java Compiler
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.language.java.sdk.Java-Compiler jazz


(import (jazz.language.java)
        (jazz.library)
        (jazz.utilities))


@convert


(class Java-Compiler extends Object
  
  
  ;;;
  ;;;; Compile
  ;;;
  
  
  (method public (compile file (directory: directory {}) (classpath: classpath {}))
    (user-message "Compiling {a}..." (parse~ file))
    (let ((command (build-command file classpath)))
      (receive (code output-lines error-lines)
          (create-process command
                          directory: directory
                          capture-output?: #t
                          capture-error?: #t
                          visible?: #f)
        (if (/= code EXIT_SUCCESS)
            (report-errors error-lines)
          (user-message "Done")))))

  
  ;;;
  ;;;; Command
  ;;;
  
  
  (method (build-command file classpath)
    (format "javac -classpath \"{a}\" \"{a}\"" (parse-classpath~ Java classpath) (parse~ file)))

  
  ;;;
  ;;;; Errors
  ;;;
  
  
  (method (report-errors lines)
    (let ((printer (open-output-string)))
      (format printer "javac returned the following errors:{%}")
      (for-each (function (line)
                  (format printer "{%}{a}" line))
                lines)
      (let ((msg (get-output-string printer)))
        (error msg))))))
