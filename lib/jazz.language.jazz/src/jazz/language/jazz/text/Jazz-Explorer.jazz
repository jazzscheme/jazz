;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Exploring Jazz Code
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library protected jazz.language.jazz.text.Jazz-Explorer jazz


(import (jazz.language.jazz)
        (jazz.language.scheme)
        (jazz.library)
        (jazz.utilities))


(proclaim (warn optimizations))


(class Jazz-Explorer extends Scheme-Explorer
  
  
  (method (get-modifiers)
    '(dialect meta private package protected public primitive final virtual chained abstract inline synchronized unimplemented deprecated post exec call value))
  
  
  (method (get-keywords)
    '(metaclass extends implements has on library module dialect imports exports includes attributes))
  
  
  (method (get-syntax)
    'jazz)

  
  ;;;
  ;;;; Category
  ;;;
  
  
  (method public (forward-in)
    (let ((e (copy (get-end))))
      (if (and (enter-list)
               (skip-forward "in")
               (forward-expr))
          (let ((package (intern-marked-symbol)))
            (exit-list)
            package)
        (set-end e)
        {})))
  
  
  (method public (forward-category)
    (when (and (enter-list)
               (forward-expr)
               (memq? (find-marked-symbol) '(class interface remotable-stub)))
      (let ((kind (intern-marked-symbol))
            (meta? (forward-modifiers)))
        (when (and (forward-expr)
                   (eq? (get-kind) 'symbol))
          (let ((name (intern-marked-symbol)))
            @convert
            (when (or (not name) (not (in-manifest? name)))
              (signal (new Explore-Error message: (format "Unable to find category {a} in manifest" (get-marked)) start: (get-start) end: (get-end))))
            (let ((category (essay name (symbol-bound? name #f) (global-value~ name #f))))
              (list category kind meta? name (collect-categories-keywords))))))))
  
  
  (method (forward-category-keywords (proc {}))
    (let ((keyword {})
          (previous (get-end)))
      (while (and (forward-expr)
                  (begin
                    (set! keyword (find-marked-symbol))
                    (or (memq? keyword '(module library class interface remotable-stub))
                        (memq? keyword '(metaclass extends implements))))
                  (forward-expr))
        (set! previous (get-end))
        (when proc
          (proc keyword)))
      (set-start previous)
      (set-end previous)))
  
  
  (method (collect-categories-keywords)
    (let ((fact (new List-Factory)))
      (forward-category-keywords
        (function (keyword)
          (put~ fact keyword)
          (put~ fact (resolve-categories (read-string-element (get-marked))))))
      (get-output~ fact)))
  
  
  (method (resolve-categories names)
    (if (symbol? names)
        (autoload names)
      (map load names)))


  ;;;
  ;;;; Location
  ;;;
  
  
  (method public (forward-location location <Object> (toplevel-location: toplevel-location {}))
    (let ((scan location))
      (while (not-null? scan)
        (let ((ref (car scan)))
          (set-end (get-start))
          (forward-whites)
          (let ((c0 (char-forward 0)))
            (cond ((eqv? c0 #\backquote)
                   (forward)
                   (forward-expr)
                   (set! scan (cdr scan)))
                  ((and (eqv? c0 #\comma) (eqv? (char-forward 1) #\at))
                   (forward)
                   (forward)
                   (forward-expr)
                   (set! scan (cdr scan)))
                  ((eqv? c0 #\comma)
                   (forward)
                   (forward-expr)
                   (set! scan (cdr scan)))
                  ((not (enter-composite))
                   (signal (new Location-Error kind: 'bad location: (either toplevel-location location))))
                  (else
                   (unless (eq? ref 'meta)
                     (cond ((eq? ref :new-form)
                            (forward-new-form toplevel-location: toplevel-location))
                           ((eq? ref :form)
                            (forward-form toplevel-location: toplevel-location))
                           ((symbol? ref)
                            (forward-definition ref toplevel-location: toplevel-location))
                           (else
                            (forward-numeric ref toplevel-location: toplevel-location))))
                   (set! scan (cdr scan)))))))))
  
  
  (method (forward-new-form (toplevel-location: toplevel-location {}))
    (forward-category-keywords)
    (set-end (get-start)))
  
  
  (method (forward-form (toplevel-location: toplevel-location {}))
    (while (not (form-expr? '(form)))
      (when (not (forward-valid-expr))
        (signal (new Location-Error kind: 'unknown location: (either toplevel-location 'form))))))
  
  
  (method (forward-definition name <Object> (toplevel-location: toplevel-location {}))
    (while (or (not (definition-expr?))
               (neq? (definition-only-name) name))
      (when (not (forward-valid-expr))
        (signal (new Location-Error kind: 'unknown location: (either toplevel-location name))))))
  
  
  (method (forward-numeric n <fx> (toplevel-location: toplevel-location {}))
    (while (>= n 0)
      (when (not (forward-valid-expr))
        (signal (new Location-Error kind: 'unknown location: (either toplevel-location n))))
      (decrease! n)))
  
  
  (method (forward-valid-expr)
    (let ((kind (forward-expr)))
      (cond ((eq? kind 'named-comment)
             (forward-expr)
             (forward-expr))
            (else
             kind))))


  ;;;
  ;;;; Jazz
  ;;;


  (method public (jazz-declaration?)
    (form-expr? '(module library class interface remotable-stub)))

  
  (definition jazz-module-parameters
    '(require))
  
  (definition jazz-library-parameters
    '())
  
  (definition jazz-class-keywords
    '(metaclass extends implements attributes))
  
  (definition jazz-interface-keywords
    '(metaclass extends attributes))


  (method public (jazz-declaration)
    (let ((s (copy start))
          (e (copy end)))
      (jazz-forward-declaration)
      (prog1 (new Range$Cell$ s (copy end))
        (set-start s)
        (set-end e))))
  
  
  (method public (jazz-forward-declaration)
    (set-end start)
    (enter-list)
    (forward-expr)
    (let ((type (jazz-symbol)))
      (case type
        ((module) (jazz-forward-module-declaration))
        ((library) (jazz-forward-library-declaration))
        ((class) (jazz-forward-class-declaration))
        ((interface) (jazz-forward-interface-declaration)))))
  
  
  (method (jazz-forward-module-declaration)
    (forward-modifiers)
    (forward-expr)
    (jazz-forward-declaration-parameters jazz-module-parameters))
  
  
  (method (jazz-forward-library-declaration)
    (forward-modifiers)
    (forward-expr)
    (forward-expr)
    (jazz-forward-declaration-parameters jazz-library-parameters))
  
  
  (method (jazz-forward-class-declaration)
    (forward-modifiers)
    (forward-expr)
    (jazz-forward-declaration-keywords jazz-class-keywords))
  
  
  (method (jazz-forward-interface-declaration)
    (forward-modifiers)
    (forward-expr)
    (jazz-forward-declaration-keywords jazz-interface-keywords))
  
  
  (method (jazz-forward-declaration-parameters parameters)
    (let (iterate (finish (copy end)))
      (define (done)
        (set-end finish))
      
      (forward-expr)
      (if (eq? kind 'list)
          (let ((s (get-start))
                (e (get-end)))
            (set-end s)
            (enter-list)
            (forward-expr)
            (if (eq? kind 'symbol)
                (let ((expr (jazz-symbol)))
                  (if (memq? expr parameters)
                      (begin
                        (exit-list)
                        (iterate (copy end)))
                    (done)))
              (done)))
        (done))))
  
  
  (method (jazz-forward-declaration-keywords keywords)
    (let (iterate (finish (copy end)))
      (define (done)
        (set-end finish))
      
      (forward-expr)
      (if (eq? kind 'symbol)
          (let ((expr (jazz-symbol)))
            (if (memq? expr keywords)
                (begin
                  (forward-expr)
                  (iterate (copy end)))
              (done)))
        (done))))
  
  
  (method (jazz-symbol)
    (string->symbol (get-marked)))


  ;;;
  ;;;; Definitions
  ;;;
  
  
  (definition Jazz-Toplevels
    '(module library class interface remotable-stub require import export definition macro syntax method inline slot property form constant enumeration global c-constant c-enumeration c-include c-type structure c-structure c-definition c-external generic specific attributes datacontainer define-form pattern))


  (method (definition-name? name)
    (memq? name Jazz-Toplevels))


  ;;;
  ;;;; Declarations
  ;;;

  
  (method (walk-named-declaration context symbol declaration keyword expression doc walk-expressions?)
    (case symbol
      ((module)          (walk-category        context declaration keyword expression doc walk-expressions?))
      ((library)         (walk-category        context declaration keyword expression doc walk-expressions?))
      ((class)           (walk-category        context declaration keyword expression doc walk-expressions?))
      ((interface)       (walk-category        context declaration keyword expression doc walk-expressions?))
      ((remotable-stub)  (walk-category        context declaration keyword expression doc walk-expressions?))
      ((repository)      (walk-category        context declaration keyword expression doc walk-expressions?))
      ((package)         (walk-category        context declaration keyword expression doc walk-expressions?))
      ((root)            (walk-import          context declaration keyword expression doc walk-expressions?))
      ((install)         (walk-import          context declaration keyword expression doc walk-expressions?))
      ((project)         (walk-import          context declaration keyword expression doc walk-expressions?))
      ((products)        (walk-import          context declaration keyword expression doc walk-expressions?))
      ((profiles)        (walk-import          context declaration keyword expression doc walk-expressions?))
      ((require)         (walk-import          context declaration keyword expression doc walk-expressions?))
      ((export)          (walk-import          context declaration keyword expression doc walk-expressions?))
      ((import)          (walk-import          context declaration keyword expression doc walk-expressions?))
      ((declare)         (walk-declare         context declaration keyword expression doc walk-expressions?))
      ((proclaim)        (walk-proclaim        context declaration keyword expression doc walk-expressions?))
      ((properties)      (walk-properties      context declaration keyword expression doc walk-expressions?))
      ((native)          (walk-native          context declaration keyword expression doc walk-expressions?))
      ((attributes)      (walk-attributes      context declaration keyword expression doc walk-expressions?))
      ((define)          (walk-define          context declaration keyword expression doc walk-expressions?))
      ((definition)      (walk-definition      context declaration keyword expression doc walk-expressions?))
      ((define-form)     (walk-define          context declaration keyword expression doc walk-expressions?))
      ((specialize)      (walk-specialize      context declaration keyword expression doc walk-expressions?))
      ((method)          (walk-method          context declaration keyword expression doc walk-expressions?))
      ((pattern)         (walk-method          context declaration keyword expression doc walk-expressions?))
      ((inline)          (walk-method          context declaration keyword expression doc walk-expressions?))
      ((slot)            (walk-slot            context declaration keyword expression doc walk-expressions?))
      ((property)        (walk-property        context declaration keyword expression doc walk-expressions?))
      ((form)            (walk-form            context declaration keyword expression doc walk-expressions?))
      ((global)          (walk-global          context declaration keyword expression doc walk-expressions?))
      ((constant)        (walk-constant        context declaration keyword expression doc walk-expressions?))
      ((enumeration)     (walk-enumeration     context declaration keyword expression doc walk-expressions?))
      ((c-constant)      (walk-c-constant      context declaration keyword expression doc walk-expressions?))
      ((c-enumeration)   (walk-c-enumeration   context declaration keyword expression doc walk-expressions?))
      ((c-initialize)    (walk-c-initialize    context declaration keyword expression doc walk-expressions?))
      ((c-declare)       (walk-c-declare       context declaration keyword expression doc walk-expressions?))
      ((c-named-declare) (walk-c-named-declare context declaration keyword expression doc walk-expressions?))
      ((c-include)       (walk-c-include       context declaration keyword expression doc walk-expressions?))
      ((c-type)          (walk-c-type          context declaration keyword expression doc walk-expressions?))
      ((c-structure)     (walk-c-structure     context declaration keyword expression doc walk-expressions?))
      ((c-definition)    (walk-c-definition    context declaration keyword expression doc walk-expressions?))
      ((c-external)      (walk-external        context declaration keyword expression doc walk-expressions?))
      ((generic)         (walk-generic         context declaration keyword expression doc walk-expressions?))
      ((specific)        (walk-specific        context declaration keyword expression doc walk-expressions?))
      ((datacontainer)   (walk-datacontainer   context declaration keyword expression doc walk-expressions?))
      (else
       (nextmethod context symbol declaration keyword expression doc walk-expressions?))))
      
  
  (method (walk-declare context declaration keyword expression doc walk-expressions?)
    (keyword context start end))
      
  
  (method (walk-proclaim context declaration keyword expression doc walk-expressions?)
    (keyword context start end))

  
  (method (walk-properties context declaration keyword expression doc walk-expressions?)
    (keyword context start end)
    (when walk-expressions?
      (walk-expressions context expression)))
  
  
  (method (walk-attributes context declaration keyword expression doc walk-expressions?)
    (keyword context start end)
    (when walk-expressions?
      (walk-expressions context expression)))

  
  (method (walk-definition context declaration keyword expression doc walk-expressions?)
    (let ((entry context))
      (keyword context start end)
      (walk-modifiers context declaration keyword expression doc)
      (forward-whites)
      (let ((list? (eqv? (char-forward 0) #\open-parenthesis)))
        (cond ((not list?)
               (when (and (forward-expr) (eq? kind 'symbol))
                 (set! entry (declaration context start end (get-marked) (symbol-documented? (find-marked-symbol) doc)))))
              (else
               (enter-list)
               (when (and (forward-expr) (eq? kind 'symbol))
                 (set! entry (declaration context start end (get-marked) (symbol-documented? (find-marked-symbol) doc))))
               (walk-parameters entry declaration keyword expression doc)
               (exit-list))))
      (when walk-expressions?
        (walk-expressions entry expression 'code #f))
      entry))
  
  
  (method (walk-specialize context declaration keyword expression doc walk-expressions?)
    (let ((entry context))
      (keyword context start end)
      (walk-modifiers context declaration keyword expression doc)
      (forward-whites)
      (when (not (eqv? (char-forward 0) #\open-parenthesis))
        (when (and (forward-expr) (eq? kind 'symbol) (eq? (find-marked-symbol) 'as))
          (keyword context start end)
          (forward-expr)
          (declaration context start end (get-marked) (symbol-documented? (find-marked-symbol) doc))
          (forward-whites)))
      (let ((list? (eqv? (char-forward 0) #\open-parenthesis)))
        (cond ((not list?)
               (when (and (forward-expr) (eq? kind 'symbol))
                 (set! entry (declaration context start end (get-marked) (symbol-documented? (find-marked-symbol) doc)))))
              (else
               (enter-list)
               (when (and (forward-expr) (eq? kind 'symbol))
                 (set! entry (declaration context start end (get-marked) (symbol-documented? (find-marked-symbol) doc))))
               (walk-parameters entry declaration keyword expression doc)
               (exit-list))))
      (when walk-expressions?
        (walk-expressions entry expression 'code #f))
      entry))

  
  (method public (walk-method context declaration keyword expression doc walk-expressions?)
    (let ((entry context))
      (keyword context start end)
      (walk-modifiers context declaration keyword expression doc)
      (enter-list)
      (when (and (forward-expr) (eq? kind 'symbol))
        (set! entry (declaration context start end (get-marked) (symbol-documented? (find-marked-symbol) doc)))
        (forward-whites)
        (walk-parameters entry declaration keyword expression doc)
        (exit-list)
        (when walk-expressions?
          (walk-expressions entry expression 'code #f)))
      entry))
  
  
  (method (walk-slot context declaration keyword expression doc walk-expressions?)
    (let ((entry context))
      (keyword context start end)
      (walk-modifiers context declaration keyword expression doc)
      (forward-whites)
      (when (and (forward-expr) (eq? kind 'symbol))
        (set! entry (declaration context start end (get-marked) (symbol-documented? (find-marked-symbol) doc)))
        (while (forward-expr)
          (if (and (eq? kind 'symbol) (memq? (find-marked-symbol) '(initialize getter setter accessors)))
              (keyword entry start end)
            (walk-expression entry expression 'code #f))))
      (when walk-expressions?
        (walk-expressions entry expression))
      entry))
  
  
  (method (walk-property context declaration keyword expression doc walk-expressions?)
    (let ((entry context))
      (keyword context start end)
      (walk-modifiers context declaration keyword expression doc)
      (when (and (forward-expr) (eq? kind 'symbol))
        (set! entry (declaration context start end (get-marked) (symbol-documented? (find-marked-symbol) doc)))
        (while (forward-expr)
          (if (and (eq? kind 'symbol) (memq? (find-marked-symbol) '(initialize getter setter accessors)))
              (keyword entry start end)
            (walk-expression entry expression 'code #f))))
      (when walk-expressions?
        (walk-expressions entry expression))
      entry))
  
  
  (method (walk-form context declaration keyword expression doc walk-expressions?)
    (keyword context start end)
    (when walk-expressions?
      (walk-expressions context expression)))
        
  
  (method (walk-global context declaration keyword expression doc walk-expressions?)
    (let ((entry context))
      (keyword context start end)
      (walk-modifiers context declaration keyword expression doc)
      (when (and (forward-expr) (eq? kind 'symbol))
        (set! entry (declaration context start end (get-marked) (symbol-documented? (find-marked-symbol) doc))))
      entry))
    
  
  (method (walk-constant context declaration keyword expression doc walk-expressions?)
    (let ((entry context))
      (keyword context start end)
      (walk-modifiers context declaration keyword expression doc)
      (when (and (forward-expr) (eq? kind 'symbol))
        (set! entry (declaration context start end (get-marked) (symbol-documented? (find-marked-symbol) doc))))
      (when walk-expressions?
        (walk-expressions entry expression))
      entry))
  
  
  (method (walk-enumeration context declaration keyword expression doc walk-expressions?)
    (let ((entry context))
      (keyword context start end)
      (walk-modifiers context declaration keyword expression doc)
      (when (and (forward-expr) (eq? kind 'symbol))
        (set! entry (declaration context start end (get-marked) (symbol-documented? (find-marked-symbol) doc))))
      (when walk-expressions?
        (walk-expressions entry expression))
      entry))

  
  (method (walk-c-constant context declaration keyword expression doc walk-expressions?)
    (let ((entry context))
      (keyword context start end)
      (walk-modifiers context declaration keyword expression doc)
      (when (and (forward-expr) (eq? kind 'symbol))
        (set! entry (declaration context start end (get-marked) (symbol-documented? (find-marked-symbol) doc))))
      (when walk-expressions?
        (walk-expressions entry expression))
      entry))
  
  
  (method (walk-c-enumeration context declaration keyword expression doc walk-expressions?)
    (let ((entry context))
      (keyword context start end)
      (walk-modifiers context declaration keyword expression doc)
      (when (and (forward-expr) (eq? kind 'symbol))
        (set! entry (declaration context start end (get-marked) (symbol-documented? (find-marked-symbol) doc))))
      (when walk-expressions?
        (walk-expressions entry expression))
      entry))

  
  (method (walk-c-initialize context declaration keyword expression doc walk-expressions?)
    (keyword context start end)
    (when walk-expressions?
      (walk-expressions context expression)))

  
  (method (walk-c-declare context declaration keyword expression doc walk-expressions?)
    (keyword context start end)
    (when walk-expressions?
      (walk-expressions context expression)))

  
  (method (walk-c-named-declare context declaration keyword expression doc walk-expressions?)
    (keyword context start end)
    (when walk-expressions?
      (walk-expressions context expression)))

  
  (method (walk-c-include context declaration keyword expression doc walk-expressions?)
    (keyword context start end)
    (when walk-expressions?
      (walk-expressions context expression)))
  
  
  (method (walk-c-type context declaration keyword expression doc walk-expressions?)
    (let ((entry context))
      (keyword context start end)
      (walk-modifiers context declaration keyword expression doc)
      (when (and (forward-expr) (eq? kind 'symbol))
        (set! entry (declaration context start end (get-marked) (symbol-documented? (find-marked-symbol) doc))))
      (when walk-expressions?
        (walk-expressions entry expression))
      entry))
  
  
  (method (walk-c-structure context declaration keyword expression doc walk-expressions?)
    (let ((entry context))
      (keyword context start end)
      (walk-modifiers context declaration keyword expression doc)
      (forward-whites)
      (let ((list? (eqv? (char-forward 0) #\open-parenthesis)))
        (when list?
          (enter-list))
        (when (and (forward-expr) (eq? kind 'symbol))
          (set! entry (declaration context start end (get-marked) (symbol-documented? (find-marked-symbol) doc))))
        (when list?
          (exit-list)))
      (when walk-expressions?
        (walk-expressions entry expression))
      entry))

  
  (method (walk-c-definition context declaration keyword expression doc walk-expressions?)
    (let ((entry context))
      (keyword context start end)
      (walk-modifiers context declaration keyword expression doc)
      (forward-whites)
      (let ((list? (eqv? (char-forward 0) #\open-parenthesis)))
        (when list?
          (enter-list))
        (when (and (forward-expr) (eq? kind 'symbol))
          (set! entry (declaration context start end (get-marked) (symbol-documented? (find-marked-symbol) doc))))
        (when list?
          (exit-list)))
      (when walk-expressions?
        (walk-expressions entry expression))
      entry))
  
  
  (method (walk-generic context declaration keyword expression doc walk-expressions?)
    (let ((entry context))
      (keyword context start end)
      (walk-modifiers context declaration keyword expression doc)
      (forward-whites)
      (if (not (eqv? (char-forward 0) #\open-parenthesis))
          (when (and (forward-expr) (eq? kind 'symbol))
            (set! entry (declaration context start end (get-marked) (symbol-documented? (find-marked-symbol) doc))))
        (enter-list)
        (when (and (forward-expr) (eq? kind 'symbol))
          (set! entry (declaration context start end (get-marked) (symbol-documented? (find-marked-symbol) doc))))
        (walk-parameters entry declaration keyword expression doc)
        (exit-list))
      (when walk-expressions?
        (walk-expressions entry expression))
      entry))
  
  
  (method (walk-specific context declaration keyword expression doc walk-expressions?)
    (let ((entry context))
      (keyword context start end)
      (walk-modifiers context declaration keyword expression doc)
      (enter-list)
      (when (and (forward-expr) (eq? kind 'symbol))
        (declaration context start end (get-marked) (symbol-documented? (find-marked-symbol) doc)))
      (walk-parameters entry declaration keyword expression doc)
      (exit-list)
      (when walk-expressions?
        (walk-expressions entry expression))
      entry))

  
  (method (walk-intrinsic context declaration keyword expression doc walk-expressions?)
    (let ((entry context))
      (keyword context start end)
      (walk-modifiers context declaration keyword expression doc)
      (when (and (forward-expr) (forward-expr))
        (let ((entered? (enter-list)))
          (when (and (forward-expr) (eq? kind 'symbol))
            (declaration context start end (get-marked) (symbol-documented? (find-marked-symbol) doc)))
          (when entered?
            (walk-parameters entry declaration keyword expression doc))
          (when entered?
            (exit-list))))
      (when walk-expressions?
        (walk-expressions entry expression))
      entry))

  
  (method (walk-external context declaration keyword expression doc walk-expressions?)
    (let ((entry context))
      (keyword context start end)
      (walk-modifiers context declaration keyword expression doc)
      (when (forward-expr)
        (let ((entered? (enter-list)))
          (when (and (forward-expr) (eq? kind 'symbol))
            (declaration context start end (get-marked) (symbol-documented? (find-marked-symbol) doc)))
          (when entered?
            (walk-parameters entry declaration keyword expression doc))
          (when entered?
            (exit-list))))
      (when walk-expressions?
        (walk-expressions entry expression))
      entry))
  
  
  (method (walk-datacontainer context declaration keyword expression doc walk-expressions?)
    (let ((entry context))
      (keyword context start end)
      (when (forward-expr)
        (declaration context start end (get-marked) (symbol-documented? (find-marked-symbol) doc)))
      (when walk-expressions?
        (walk-expressions entry expression))
      entry))
  
  
  ;;;
  ;;;; Debugging
  ;;;
  
  
  (method public (highlight-range)
    (set-selection~ text (get-range))
    (update-view~ text)
    @convert
    (break edit?: #f))))
