;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Exploring Scheme Code
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library protected jazz.language.scheme.text.Scheme-Explorer jazz


(import (jazz.language.lisp)
        (jazz.language.scheme)
        (jazz.library)
        (jazz.utilities))


(proclaim (warn optimizations))


(class Scheme-Explorer extends Lisp-Explorer


  (method (get-modifiers)
    '(protected public))
  
  
  (method (get-syntax)
    'scheme)


  ;;;
  ;;;; Definitions
  ;;;
  
  
  (definition Scheme-Toplevels
    '(define define-macro jazz.define jazz.define-macro jazz.define-check-macro jazz.define-syntax jazz.define-generic jazz.define-specic jazz.define-virtual jazz.define-virtual-runtime jazz.define-method))
  
  
  (definition Gambit-Toplevels
    '(##define-macro
      define-prim
      define-check-type
      define-fail-check-type
      define-type
      define-type-of-port
      define-runtime-macro
      define-runtime-syntax
      define-library-type
      define-library-type-of-exception))


  (method (definition-name? name)
    (or (memq? name Scheme-Toplevels)
        (memq? name Gambit-Toplevels)
        (let ((form (get-lisp-form name)))
          (and form (get-declaration?~ form)))))


  ;;;
  ;;;; Declarations
  ;;;
  
  
  (method (walk-declaration context declaration keyword expression doc walk-expressions?)
    (let ((list? (enter-list)))
      (if (not list?)
          (when (forward-expr)
            (if (and (eq? kind 'symbol)
                     (memq? (find-marked-symbol) (get-keywords)))
                (keyword context start end)
              (expression context start end 'code kind))
            #t)
        (when (and (forward-expr) (eq? kind 'symbol))
          (let ((symbol (find-marked-symbol)))
            (walk-named-declaration context symbol declaration keyword expression doc walk-expressions?)))
        (exit-list)
        #t)))
  
  
  (method protected virtual (walk-named-declaration context symbol declaration keyword expression doc walk-expressions?)
    (case symbol
      ((begin)
       (walk-begin context declaration keyword expression doc walk-expressions?))
      ((cond-expand)
       (walk-cond-expand context declaration keyword expression doc walk-expressions?))
      ((library module)
       (walk-category context declaration keyword expression doc walk-expressions?))
      ((require import export)
       (walk-import context declaration keyword expression doc walk-expressions?))
      ((define
        jazz.define-feature
        jazz.define
        jazz.define-remote
        ;; Gambit
        define-prim
        define-library-type
        define-library-type-of-exception
        define-check-type
        define-fail-check-type
        define-type
        define-type-of-port)
       (walk-define context declaration keyword expression doc walk-expressions?))
      ((jazz.define-generic
        jazz.define-specific
        jazz.define-virtual-syntax
        jazz.define-virtual-runtime
        jazz.define-method)
       (walk-define-generic/specific context declaration keyword expression doc walk-expressions?))
      ((define-macro
        define-syntax
        jazz.define-macro
        jazz.define-check-macro
        jazz.define-syntax
        jazz.define-special
        jazz.define-setting
        jazz.define-variable
        jazz.define-global
        ;; Gambit
        ##define-macro
        define-runtime-macro
        define-runtime-syntax
        template
        instantiate
        specialize)
       (walk-define-macro context declaration keyword expression doc walk-expressions?))
      ((%macro
        macro
        syntax)
       (walk-macro context declaration keyword expression doc walk-expressions?))
      ((jazz.define-class jazz.define-class-runtime jazz.define-virtual)
       (walk-define-class context declaration keyword expression doc walk-expressions?))
      ((;; Gambit
        c-define-type)
       (walk-type context declaration keyword expression doc walk-expressions?))
      ((native)
       (walk-native context declaration keyword expression doc walk-expressions?))
      (else
       (let ((form (get-lisp-form symbol)))
         (if form
             (let ((walk (get-walk~ form)))
               (if walk
                   (if (symbol? walk)
                       (walk-named-declaration context walk declaration keyword expression doc walk-expressions?)
                     (walk self context declaration keyword expression doc walk-expressions?))
                 (walk-unknown context declaration keyword expression doc walk-expressions?)))
           (walk-unknown context declaration keyword expression doc walk-expressions?))))))
  
  
  (method (walk-modifiers context declaration keyword expression doc)
    (let ((old (copy end)))
      (let (iterate)
        (forward-whites)
        (set-start end)
        (let ((c0 (char-forward 0)))
          (when (and c0 (text-constituent? c0))
            (forward-constituent)
            (when (memq? (find-marked-symbol) (get-modifiers))
              (keyword context start end)
              (set! old (copy end))
              (iterate)))))
      (set! end old)))
    
  
  (method (walk-begin context declaration keyword expression doc walk-expressions?)
    (walk-declarations context declaration keyword expression doc walk-expressions?))

  
  (method (walk-cond-expand context declaration keyword expression doc walk-expressions?)
    (let ((done? #f))
      (while (not done?)
        (let ((enter? (enter-list)))
          (if (not enter?)
              (set! done? #t)
            (forward-expr)
            (when (eq? (get-kind) 'symbol)
              (expression context start end 'code 'feature))
            (walk-declarations context declaration keyword expression doc walk-expressions?)
            (exit-list))))))
  
  
  (method (walk-category context declaration keyword expression doc walk-expressions?)
    (let ((entry context))
      (keyword context start end)
      (walk-modifiers context declaration keyword expression doc)
      (when (and (forward-expr) (eq? kind 'symbol))
        (set! entry (declaration context start end (get-marked) (symbol-documented? (find-marked-symbol) doc)))
        (walk-declarations entry declaration keyword expression doc walk-expressions?))
      entry))
  
  
  (method (walk-import context declaration keyword expression doc walk-expressions?)
    (keyword context start end))
  
  
  (method (walk-define context declaration keyword expression doc walk-expressions?)
    (let ((entry context))
      (keyword context start end)
      (forward-whites)
      (let ((list? (eqv? (char-forward 0) #\open-parenthesis)))
        (when list?
          (enter-list))
        (when (and (forward-expr) (eq? kind 'symbol))
          (set! entry (declaration context start end (get-marked) #f)))
        (when list?
          (walk-parameters entry declaration keyword expression doc))
        (when list?
          (exit-list)))
      (when walk-expressions?
        (walk-declarations entry declaration keyword expression doc walk-expressions?))
      entry))
  
  
  (method (walk-define-generic/specific context declaration keyword expression doc walk-expressions?)
    (let ((entry context))
      (keyword context start end)
      (forward-whites)
      (enter-list)
      (when (and (forward-expr) (eq? kind 'symbol))
        (let ((start (get-start))
              (end (get-end))
              (name (get-marked)))
          (forward-whites)
          (enter-list)
          (forward-expr)
          (let ((typename (get-marked)))
            (set! entry (declaration context start end (list name typename) #f)))
          (exit-list)))
      (walk-parameters entry declaration keyword expression doc)
      (exit-list)
      (when walk-expressions?
        (walk-declarations entry declaration keyword expression doc walk-expressions?))
      entry))

  
  (method (walk-macro context declaration keyword expression doc walk-expressions?)
    (let ((entry context))
      (keyword context start end)
      (walk-modifiers context declaration keyword expression doc)
      (enter-list)
      (when (and (forward-expr) (eq? kind 'symbol))
        (set! entry (declaration context start end (get-marked) (symbol-documented? (find-marked-symbol) doc)))
        (walk-parameters entry declaration keyword expression doc)
        (exit-list)
        (when walk-expressions?
          (walk-expressions entry expression)))
      entry))
  
  
  (method (walk-define-macro context declaration keyword expression doc walk-expressions?)
    (let ((entry context))
      (keyword context start end)
      (forward-whites)
      (let ((list? (eqv? (char-forward 0) #\open-parenthesis)))
        (when list?
          (enter-list))
        (when (and (forward-expr) (eq? kind 'symbol))
          (set! entry (declaration context start end (get-marked) #f)))
        (when list?
          (walk-expressions entry expression 'code #f))
        (when list?
          (exit-list)))
      (when walk-expressions?
        (walk-declarations entry declaration keyword expression doc walk-expressions?))
      entry))
  
  
  (method (walk-define-class context declaration keyword expression doc walk-expressions?)
    (let ((entry context))
      (keyword context start end)
      (forward-whites)
      (when (and (forward-expr) (eq? kind 'symbol))
        (set! entry (declaration context start end (get-marked) #f)))
      (when walk-expressions?
        (walk-expressions entry expression))
      entry))
  
  
  (method (walk-native context declaration keyword expression doc walk-expressions?)
    (define (parse-identifier str)
      (let ((pos (find str #\. reversed?: #t)))
        (if (not pos)
            str
          (substring str (+ pos 1) (string-length str)))))
    
    (let ((entry context))
      (keyword context start end)
      (walk-modifiers context declaration keyword expression doc)
      (forward-whites)
      (when (and (forward-expr) (eq? kind 'symbol))
        (let ((name (parse-identifier (get-marked))))
          (set! entry (declaration context start end name (symbol-documented? name doc)))))
      (when walk-expressions?
        (walk-expressions entry expression))
      entry))
  
  
  (method (walk-type context declaration keyword expression doc walk-expressions?)
    (let ((entry context))
      (keyword context start end)
      (when (and (forward-expr) (eq? kind 'symbol))
        (set! entry (declaration context start end (get-marked) #f)))
      (when walk-expressions?
        (walk-expressions entry expression))
      entry))
  
  
  (method (walk-unknown context declaration keyword expression doc walk-expressions?)
    (when walk-expressions?
      (walk-expression context expression 'code #t)
      (walk-expressions context expression))
    context)
  
  
  (method (symbol-documentation symbol doc)
    (when (and symbol doc)
      (get-definition~ doc symbol)))
  
  
  (method (symbol-documented? symbol doc)
    (symbol-documentation symbol doc))))
