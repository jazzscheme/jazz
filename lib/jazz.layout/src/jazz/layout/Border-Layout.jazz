;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Border Layout
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.layout.Border-Layout jazz


(import (jazz.figure)
        (jazz.layout))


(class Border-Layout extends Layout
  
  
  (property insets  <Rect> initialize {Rect 0 0 0 0} accessors generate)
  (property padding <fx>   initialize 0              accessors generate)
  (property fit            initialize #f             accessors generate)
  (property justification  initialize #f             accessors generate)
  
  
  ;;;
  ;;;; Layout
  ;;;


  (method override (layout figures width height)
    (let* ((visibles       (collect-if (lambda (figure) (and (is? figure Figure) (get-visible?~ figure))) figures))
           (reversed       (reverse visibles))
           (left           0)
           (top            0)
           (right          width)
           (bottom         height)
           (left-padding   0)
           (top-padding    0)
           (right-padding  0)
           (bottom-padding 0))
      (for-each (lambda (figure)
                  (when (eq? (get-location~ figure) 'north)
                    (let ((height (get-height~ (get-size~ figure))))
                      (set-position~ figure (new Point 0 top))
                      (set-size~ figure (new Dimension right height))
                      (increase! top height))
                    (set! top-padding padding)))
                reversed)
      (for-each (lambda (figure)
                  (when (eq? (get-location~ figure) 'south)
                    (let ((height (get-height~ (get-size~ figure))))
                      (set-position~ figure (new Point 0 (- bottom height)))
                      (set-size~ figure (new Dimension right height))
                      (decrease! bottom height))
                    (set! bottom-padding padding)))
                reversed)
      (for-each (lambda (figure)
                  (when (eq? (get-location~ figure) 'west)
                    (let ((width (get-width~ (get-size~ figure))))
                      (set-position~ figure (new Point left top))
                      (set-size~ figure (new Dimension width (- bottom top)))
                      (increase! left width))
                    (set! left-padding padding)))
                reversed)
      (for-each (lambda (figure)
                  (when (eq? (get-location~ figure) 'east)
                    (let ((width (get-width~ (get-size~ figure))))
                      (set-position~ figure (new Point (- right width) top))
                      (set-size~ figure (new Dimension width (- bottom top)))
                      (decrease! right width))
                    (set! right-padding padding)))
                reversed)
      (case fit
        ((#f)
         (let ((left (+ left (get-left~ insets)))
               (top (+ top (get-top~ insets))))
           (let ((position (new Point (+ left left-padding) (+ top top-padding)))
                 (size (new Dimension (- right right-padding left-padding left (get-right~ insets)) (- bottom bottom-padding top-padding top (get-bottom~ insets))))
                 (op (case justification
                       ((horizontal) layout-fill-horizontal)
                       ((vertical) layout-fill-vertical)
                       (else layout-fill)))
                 (centered (collect-if (lambda (figure) (eq? (get-location~ figure) 'center)) visibles)))
             (op centered position size))))
        ((around)
         ))))))
