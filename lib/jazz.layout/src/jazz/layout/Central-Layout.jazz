;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Central Layout
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.layout.Central-Layout jazz


(import (jazz.figure)
        (jazz.geometry)
        (jazz.layout))


(class Central-Layout extends Layout
  
  
  (property insets        <Rect> initialize {Rect 0 0 0 0} accessors generate)
  (property justification        initialize 'horizontal    accessors generate)
  (property padding       <fx>   initialize 0              accessors generate)
  (property fill?         <bool> initialize #f             accessors generate)
  
  
  ;;;
  ;;;; Layout
  ;;;


  (method override (layout self figures width height)
    (let ((figures (collect-if get-visible? figures)))
      (let ((count (- (length figures) 1)))
        (define (determine-radius)
          80.
          @wait
          (if (<= count 4)
              120.
            (+ 120. (* (- count 4) 10.))))
        
        (let ((radius (determine-radius))
              (angle .2)
              (increment (/ PI*2 (cast <fl> count))))
          (set-position (car figures) (new Point
                                        (fxround radius)
                                        (- (fxround radius) 10)))
          (for-each (lambda (figure <Figure>)
                      (set-position figure (new Point
                                             (fxround (+ radius (* (cos angle) radius)))
                                             (fxround (+ radius (* (sin angle) radius)))))
                      (increase! angle increment))
                    (cdr figures))))))))
