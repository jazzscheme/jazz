;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Deterministic Profiler
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module jazz.detprof jazz


(export (jazz.detprof.syntax))


(import (jazz.jml)
        (jazz.system)
        (profiler))


;;;
;;;; Advice
;;;


(definition public (profile-advice field locator original set)
  (let ((original (original)))
    (when (procedure? original)
      (set (lambda rest
             (profile-code
               (lambda ()
                 (apply original rest))))))))


;;;
;;;; Profile
;;;


(define time-spent-in-children
  (make-parameter 0))


(definition public (profile-code proc)
  (let ((profile (active-profile)))
    (if profile
        (continuation-capture
          (lambda (cont)
            (let* ((start-time (profiler-performance-counter))
                   (total-elapsed-time 0)
                   (stack (identify-call cont (profile-depth profile) '(jazz.detprof.profile-advice jazz.detprof.profile-code)))
                   (result (parameterize ((time-spent-in-children 0))
                             (prog1 (proc)
                               (set! total-elapsed-time (- (profiler-performance-counter) start-time))
                               (let ((duration (- total-elapsed-time (time-spent-in-children))))
                                 (profile-register-call profile stack duration))))))
              (time-spent-in-children (+ (time-spent-in-children) total-elapsed-time))
              result)))
      (proc))))


;;;
;;;; JML
;;;


(definition public (profile->jml profile)
  (map (lambda (profile)
         (bind (name count . duration) profile
           (new JML-Element #f 'profile properties: (list 'name name 'count count 'duration duration))))
       (sort > (table->list profile) key: cddr)))


;;;
;;;; Detprof
;;;


(definition public detprof
  (make-profiler 'detprof #f #f)))
