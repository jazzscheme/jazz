;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Finite State Automata
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


;;
;; A search automata is made up of:
;;
;;   start state:   the automata is looking for a word beginning
;;   skip state:    the automata is skipping to the end of the current word
;;   letter states: these states make up the decomposed tree of searched words
;;   found states:  these states collect found strings without advancing the tape
;;
;; Note: No effort was made to generalize this code into a reusable automata class
;;       as this clearly requires usage of templates. I will rather wait for the fully
;;       optimized and typed Jazz compiler and make this automata class in Jazz!
;;
;; Todo: Implemented Listed and Lettered transitions.
;;       Find a clean solution to a whole word that ends the file (i.e. the non-constituent
;;       transition to the found state doesn't get called!).
;;


(module protected jazz.library.automata jazz


;;;
;;;; Automata
;;;


(class Automata extends Object
  
  
  (slot nb-vectored <fx> accessors generate)
  (slot nb-listed   <fx> accessors generate)
  (slot nb-lettered <fx> accessors generate)
  (slot start       getter generate)
  
  
  (method override (initialize s)
    (set! nb-vectored~self 0)
    (set! nb-listed~self 0)
    (set! nb-lettered~self 0)
    (set! start~self s))
  
  
  (method public (run tape)
    (declare (proper-tail-calls))
    (let (iter (state start))
      (when state
        (iter (transition~ state tape))))))


;;;
;;;; Tape
;;;


(class Tape extends Object
  
  
  (slot found)
  
  
  (method override (initialize)
    (set! found~self (new-queue)))
  
  
  (method virtual (get-next) <fx+>
    )
  
  
  (method virtual (save-start)
    )
  
  
  (method virtual (add-start found)
    )
  
  
  (method (add-found info)
    (enqueue found info))
  
  
  (method (get-found)
    (queue-list found)))


;;;
;;;; StringTape
;;;


(class StringTape extends Tape
  
  
  (slot string            getter generate)
  (slot limit        <fx> getter generate)
  (slot index        <fx> getter generate)
  (slot start-index  <fx> accessors generate)
  
  
  (method override (initialize s)
    (nextmethod)
    (set! string~self s)
    (set! limit~self (string-length s))
    (set! index~self 0)
    (set! start-index~self 0))
  
  
  (method override (get-next) <fx+>
    (if (< index limit)
        (prog1 (char->integer (element string index))
          (set! index (+ index 1)))
      #f))
  
  
  (method override (save-start)
    (set! start-index index))
  
  
  (method override (add-start found)
    (list found start-index)))


;;;
;;;; TextTape
;;;


(class TextTape extends Tape
  
  
  (slot paragraphs          getter generate)
  (slot limit      <fx>     getter generate)
  (slot line       <fx>     getter generate)
  (slot col        <fx>     getter generate)
  (slot scan       <string> getter generate)
  (slot start-line <fx>     accessors generate)
  (slot start-col  <fx>     accessors generate)
  
  
  (method override (initialize p l ln c)
    (nextmethod)
    (set! paragraphs~self p)
    (set! limit~self l)
    (set! line~self ln)
    (set! col~self c)
    (set! scan~self (get-string~ (element paragraphs line)))
    (set! start-line~self 0)
    (set! start-col~self 0))
  
  
  (method override (get-next) <fx+>
    (if (= col (cardinality scan))
        (if (< line limit)
            (begin
              (set! line (+ line 1))
              (set! col 0)
              (set! scan (get-string~ (element paragraphs line)))
              (char->integer #\newline))
          #f)
      (prog1 (char->integer (element scan col))
        (set! col (+ col 1)))))
  
  
  (method override (save-start)
    (set! start-line line)
    (set! start-col col))
  
  
  (method override (add-start found)
    (list found start-line start-col)))


;;;
;;;; Transitions
;;;


(class Transitions extends Object
  
  
  (method public virtual (add-transition i state))
  (method public virtual (follow i)))


;;;
;;;; VectoredTransitions
;;;


(definition NbAscii 256)
(definition EOFTransition NbAscii)
(definition NotAsciiTransition (+ NbAscii 1))
(definition NbTransitions (+ NbAscii 2))


(class VectoredTransitions extends Transitions
  
  
  (slot vector getter generate)
  
  
  (method override (initialize . rest)
    (set! vector (make-vector NbTransitions #f)))
  
  
  (method override (add-transition i <fx> state)
    (set-element! vector (if (> i NbAscii) NotAsciiTransition i) state))
  
  
  (method override (follow i <fx>)
    (element vector (if (> i NbAscii) NotAsciiTransition i))))


;;;
;;;; State
;;;
  

(class State extends Object
  
  
  (slot name        getter generate)
  (slot transitions getter generate)
  
  
  (method override (initialize n t)
    (set! name n)
    (set! transitions t))


  (method override (print output readably)
    (print-unreadable self output
      (lambda (output)
        (format output "{a}" name))))
  
  
  (method public (add-transition i <fx> state)
    (add-transition~ transitions i state))
  
  
  (method public virtual (transition tape)
    (let ((i (get-next~ tape)))
      (if i
          (follow i)
        (action~ (follow EOFTransition) tape)
        #f)))
  
  
  (method public (follow i <fx>)
    (follow~ transitions i))
  
  
  (method public virtual (action tape)))


;;;
;;;; StartState
;;;


(class StartState extends State
  
  
  (method override (initialize t)
    (nextmethod "start" t))
  
  
  (method override (print output detail)
    (print-unreadable self output
      (lambda (output)
        )))
  
  
  (method override (transition tape)
    (save-start~ tape)
    (nextmethod tape)))


;;;
;;;; FoundState
;;;


(class FoundState extends State
  
  
  (slot found      getter generate)
  (slot next-state getter generate)
  
  
  (method override (initialize f ns)
    (set! found f)
    (set! next-state ns)
    (nextmethod "found" #f))
  
  
  (method override (print output detail)
    (print-unreadable self output
      (lambda (output)
        )))
  
  
  (method override (transition tape)
    (action tape)
    next-state)
  
  
  (method override (action tape)
    (add-found~ tape (add-start~ tape found))))


;;;
;;;; Build
;;;


(definition public (build-search-automata targets whole-words ignore-case constituent-test)
  (let* ((start (new StartState (new VectoredTransitions)))
         (skip (new State "skip" (new VectoredTransitions)))
         (automata (new Automata start)))
    (set-nb-vectored~ automata (+ (get-nb-vectored~ automata) 2))
    (add-constituency-transitions start skip start start constituent-test)
    (add-constituency-transitions skip skip start start constituent-test)
    (for-each (lambda (target)
                (process-target target automata start skip whole-words ignore-case constituent-test))
              targets)
    automata))


(definition (add-constituency-transitions state c not-c eof constituent-test)
  (loop (for i from 0 below NbAscii)
        (add-transition~ state i (if (is-constituent constituent-test i)
                                     c
                                   not-c)))
  (add-transition~ state EOFTransition eof))


(definition (process-target target automata start skip whole-words ignore-case constituent-test)
  (let ((state start)
        (string (car target)))
    (iterate string
      (lambda (c)
        (let ((i (char->integer c))
              (iinv (char->integer (if (lower-case? c) (upcase c) (downcase c)))))
          (let ((new-state (follow~ state i)))
            (cond ((and new-state (neq? new-state start) (neq? new-state skip))
                   (set! state new-state)
                   (when (and ignore-case (is-constituent constituent-test i))
                     (set! new-state (follow~ state iinv))
                     (when (not new-state)
                       (set! new-state (new State string (new VectoredTransitions)))
                       (set-nb-vectored~ automata (+ (get-nb-vectored~ automata) 1))
                       (add-constituency-transitions new-state skip start start constituent-test)
                       (add-transition~ state iinv new-state))))
                  (else
                   (set! new-state (new State string (new VectoredTransitions)))
                   (set-nb-vectored~ automata (+ (get-nb-vectored~ automata) 1))
                   (add-constituency-transitions new-state skip start start constituent-test)
                   (add-transition~ state i new-state)
                   (when (and ignore-case (is-constituent constituent-test i))
                     (add-transition~ state iinv new-state))
                   (set! state new-state)))))))
    (let ((new-state (new FoundState target start)))
      (set-nb-vectored~ automata (+ (get-nb-vectored~ automata) 1))
      (loop (for i from 0 below NbAscii)
            (when (not (is-constituent constituent-test i))
              (add-transition~ state i new-state)))
      (add-transition~ state EOFTransition new-state))))


(definition (is-constituent constituent-test <procedure> i <fx>) <bool>
  (constituent-test (integer->char i)))


;;;
;;;; Search
;;;


(definition public (automata-search automata <Automata> tape <Tape>)
  (run~ automata tape)
  (get-found~ tape)))
