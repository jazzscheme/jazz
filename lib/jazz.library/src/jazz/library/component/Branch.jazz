;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Component Branches
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library protected jazz.library.component.Branch jazz


(import (jazz.library))


(class Branch extends Component
    
  
  (property client-form initialize {} accessors generate)
  
  
  (slot client       initialize {} accessors generate)
  (slot restore-form initialize {} getter generate)
  (slot restoreable? initialize #t accessors generate)

  
  (method override (install rest)
    (nextmethod rest)
    (set! client (default-client)))


  (method (default-client)
    (if (is? parent Branch)
        (get-client~ parent)
      parent))
  
  
  ;;;
  ;;;; Install
  ;;;
  
  
  (method override (install-branch br)
    (install-branch~ parent self)
    (nextmethod br))


  (method protected (configure-client)
    (when restoreable?
      (set! restore-form (new Restore-Form context: self action: 'install)))
    (let ((configured (configure-inherited)))
      (when (neq? client-form configured)
        (install-form~ client client-form creator self restore-form)))
    (set-branch~ parent self))
  
  
  ;; quicky to test
  (method (configure-inherited)
    (let ((form (get-class-form)))
      (when form
        (let ((client-form (get-property~ form client-form:)))
          (when client-form
            (install-form~ client client-form creator self restore-form)
            client-form)))))
  
  
  @convert
  (method (configure-inherited model)
    (when (subtype? model Branch)
      (let ((configured (configure-inherited (type-ascendant model)))
            (form (get-class-form~ model)))
        (when form
          (let ((client-form (get-property~ form client-form:)))
            (when client-form
              (when (neq? client-form configured)
                (install-form~ client client-form creator self restore-form))
              client-form))))))
  
  
  (method public (installed?)
    restore-form)
  
  
  ;;;
  ;;;; Uninstall
  ;;;
  
  
  (method protected (restore-client)
    (when branch
      (restore-client~ branch))
    (set-branch~ parent {})
    (install-form~ client restore-form client {} {})
    (set! restore-form {}))


  ;;;
  ;;;; Designer
  ;;;
  
  
  (method meta override (get-class-image)
    {Bitmap-Resource "Branch"})
  
  
  (method meta override (get-name-mandatory?)
    #t)
  
  
  (method meta override (get-name-unicity?)
    #t)
  
  
  (method override (set-presentation designer presentation)
    (set-name~ designer self (string->symbol presentation) branch: {}))
  
  
  (method override (display-property? property)
    (and (nextmethod property)
         (not (memq? (field-name property) '(client-form)))))))
