;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Component Forms
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.library.component.Form jazz


(import (jazz.jml)
        (jazz.library))


;;;
;;;; Header Formats
;;;


;; (new    model)       -> create a new unnamed instance of model
;; (new    model name)  -> create a new instance of model named name
;; (modify       name)  -> modify existing instance named name
;; (modify model name)  -> modify existing instance named name and override its class (work in progress)
;; (remove       name)  -> remove existing instance named name (used internally by branches)


;;;
;;;; Class Definition
;;;


(class Form extends JML-Element implements Environment-Provider


  (slot data          accessors generate)
  (slot origin        accessors generate)
  (slot context       accessors generate)
  (slot action        getter generate)
  (slot model         accessors generate)
  (slot locator       accessors generate)
  (slot name          accessors generate)
  (slot tag-symbolic? accessors generate)
  (slot tag-reference accessors generate)
  
  
  ;;;
  ;;;; Initialization
  ;;;


  (method override (initialize (textual?: textual? #t)
                               (data: data #f)
                               (origin: origin #f)
                               (context: context #f)
                               (action: action #f)
                               (model: model #f)
                               (locator: locator #f)
                               (name: name #f)
                               (tag-symbolic?: tag-symbolic? #f)
                               (tag-reference: tag-reference #f)
                               (properties: properties '())
                               (children: children '()))
    (define (canonicalize-properties lst)
      (while (not-null? lst)
        (set-car! lst (keyword->symbol (car lst)))
        (set! lst (cddr lst))))
    
    (nextmethod #f #f)
    (set! data~self data)
    (set! origin~self origin)
    (set! context~self context)
    (set! action~self action)
    (set! model~self model)
    (set! locator~self locator)
    (set! name~self name)
    (set! tag-symbolic?~self tag-symbolic?)
    (set! tag-reference~self tag-reference)
    (set! properties~self properties)
    (set! children~self children)
    (when textual?
      (canonicalize-properties properties)))
  
  
  (method override (copy-object deep?)
    (new Form textual?: #f data: data origin: origin context: context action: action model: model locator: locator name: name tag-symbolic?: tag-symbolic? tag-reference: tag-reference properties: (copy properties) children: (subcopy children deep?)))


  (method override (print output readably)
    (print-unreadable self output
      (lambda (output)
        (format output "({a}{a}{a}) {a} {a}"
          action
          (if model (format " {s}" model) "")
          (if name (format " {s}" name) "")
          (if properties (format "{s}" (keywordize-properties properties)) "()")
          (if children (format "[{a}]" (length children)) "()")))))

  
  ;;;
  ;;;; Context
  ;;;


  (method override (setup-context ctx)
    (set! context ctx)
    (setup-context~ tag-reference context)
    (for-each-property
      (lambda (name value)
        (setup-context~ value context))
      properties)
    (for-each (lambda (child)
                (setup-context~ child context))
              children))
  
  
  ;;;
  ;;;; Access
  ;;;
  
  
  (method public (resolve-model)
    (require-reference~ context model))
  
  
  (method override (locate-reference symbol)
    (let ((reference (locator symbol)))
      (and reference (resolve-runtime-reference reference))))
  
  
  (method override (require-reference symbol)
    (or (locate-reference symbol)
        (error "Unable to find reference: {s}" symbol)))
  
  
  (method public (get-reference symbol)
    (locator symbol))

  
  ;;;
  ;;;; Children
  ;;;
  
  
  (method public (child name)
    (or (find-child name)
        (error "Could not find child {t}" name)))


  (method public (find-child name)
    (find-by (lambda (child)
               (equal? (get-name~ child) name))))
  
  
  (method override (find-name name)
    (find-child name))
  
  
  (method public (find-type type)
    (find-by
      (lambda (child)
        (eq? (get-model~ child) type))))
  
  
  (method override (add-child child)
    (set! children (cons child children)))
    
  
  (method public (add-child-at child rank)
    (set! children (insert! children rank child)))
  
  
  (method public (append-child child)
    (set! children (append! children (list child))))
  
  
  (method public (send-child-before child target)
    (let* ((removed (remove! child children))
           (rank (and target (or (find removed target) (error "Unable to find: {t}" target)))))
      (set! children (insert! removed rank child))))
  
  
  (method public (sort-children test (key: key get-name~))
    (set! children (sort test children key: key)))
  
  
  ;;;
  ;;;; Presentation
  ;;;

  
  ;; This is a bit of a heuristic...
  (method public (get-presentation)
    (or (get-property 'title)
        (get-class-presentation~ (resolve-model))))

  
  ;;;
  ;;;; Remember
  ;;;
  

  (method public (remember-creation unused component)
    (set! children (cons (new Restore-Form action: 'remove component: component properties: '() children: '()) children)))


  (method public (remember-reference unused name)
    (let ((form (new Restore-Form action: 'modify model: #f name: name properties: '() children: '())))
      (set! children (cons form children))
      form))


  (method public (remember-property component property)
    (let ((actual-value (read-property component property)))
      (set-property property actual-value)))

  
  ;;;
  ;;;; Open
  ;;;
  
  
  (method public (instantiate . rest)
    (bind-keywords ((name #f) . others) rest
      (let ((model (resolve-model)))
        (apply new model form: self creator: #t name: (or name name~self) rest))))
  
  
  (method public (instantiate-component . rest)
    (let ((model (resolve-model)))
      (apply new model creator: #t name: name rest)))

  
  ;;;
  ;;;; Editor
  ;;;
  
  
  (method public (get-parts)
    (values
      (get-action)
      (get-model)
      (get-name)
      (keywordize-properties (get-properties))
      (get-children)))
  
  
  ;;;
  ;;;; Location
  ;;;
  
  
  (method override (get-child-location child)
    (list (+ 1
             (if name 2 0)
             (if tag-symbolic? 2 0)
             (if tag-reference 2 0)
             (length properties)
             (get-rank child children))))))
