;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Component Traits
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.library.component.Trait jazz


(import (jazz.jml)
        (jazz.library))


(class Trait extends Component
  
  
  (property client-form initialize #f accessors generate)
  
  
  (slot restoreable? initialize #t accessors generate)
  
  
  ;;;
  ;;;; Install
  ;;;


  (method protected (configure-client client)
    (let ((branch (new Branch client self)))
      (let ((restore-form (and restoreable? (new Restore-Form context: client action: 'install))))
        (when restore-form
          (set-restore-form~ branch restore-form))
        (install-form~ client client-form creator branch restore-form)
        branch)))
  
  
  @convert
  (method (configure-inherited)
    (let ((form (get-class-form)))
      (when form
        (let ((client-form (get-property~ form client-form:)))
          (when client-form
            (install-form~ client client-form creator self restore-form)
            client-form)))))
  
  
  @convert
  (method (configure-inherited model)
    (when (subtype? model Branch)
      (let ((configured (configure-inherited (class-ascendant model)))
            (form (get-class-form~ model)))
        (when form
          (let ((client-form (get-property~ form client-form:)))
            (when client-form
              (when (neq? client-form configured)
                (install-form~ client client-form creator self restore-form))
              client-form))))))
  
  
  ;; convert-trait quick hack
  (method public (installed?)
    #t)
  
  
  ;;;
  ;;;; Descriptor
  ;;;
  
  
  (method meta override (get-class-descriptor)
    (new Trait-Descriptor)))


;;;
;;;; Design
;;;


(submodule design


(import (jazz.designer))


(class Trait-Descriptor extends Component-Descriptor
  
  
  (form
    (<install>                 image: {Image-Resource "Trait"} name-mandatory?: #t name-unicity?: #t
      (<properties~>
        (<Property-Descriptor> name: client-form))))
  
  
  (method override (component-set-presentation component designer presentation)
    (set-name~ designer component (string->symbol presentation) trait: #f))
  
  
  (method override (component-display-property? component property)
    (and (nextmethod component property)
         (not (memq? (field-name property) '(client-form))))))))
