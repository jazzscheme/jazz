;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Component Traits
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.library.component.Trait jazz


(import (jazz.jml)
        (jazz.library))


(class Trait extends Component
  
  
  (property inherit     initialize '() accessors generate)
  (property client-type initialize #f  accessors generate)
  (property client-form initialize #f  accessors generate)
  
  
  (slot restoreable? initialize #t accessors generate)
  
  
  ;;;
  ;;;; Type
  ;;;
  
  
  (method protected (setup-client-type type)
    (set! client-type type)
    (for-each (lambda (child)
                (setup-client-type~ child type))
              children))
  
  
  ;;;
  ;;;; Effective
  ;;;
  
  
  (method protected (compute-effective-traits)
    (let ((parent-traits (if (is-not? parent Trait) '() (compute-effective-traits~ parent)))
          (inherited-traits (map compute-effective-traits~ (map (lambda (trait)
                                                                  (resolve-trait #f trait))
                                                                inherit)))
          (self-traits (list self)))
      (append parent-traits inherited-traits self-traits)))
  
  
  ;;;
  ;;;; Install
  ;;;


  (method protected (configure-client client parent)
    (assert (or (not client-type) (is? client client-type))
      (let ((branch (new Branch client self parent)))
        (let ((restore-form (and restoreable? (new Restore-Form action: 'install))))
          (when restore-form
            (set-restore-form~ branch restore-form))
          (install-form~ client client-form client branch restore-form)
          branch))))
  
  
  ;; convert-trait quick hack
  (method public (installed?)
    #t)
  
  
  ;;;
  ;;;; Descriptor
  ;;;
  
  
  (method meta override (get-class-descriptor (context: context #f))
    (new Trait-Descriptor)))


;;;
;;;; Design
;;;


(submodule design


(import (jazz.designer))


(class Trait-Descriptor extends Component-Descriptor
  
  
  (form
    (<install>                                   image: {Image-Resource "Trait"} name-mandatory?: #t name-unicity?: #t
      (<properties~>
        (<Property-Descriptor> name: client-form standard?: #f
          (<Value-Domain>      name: domain)))))
  
  
  (method override (component-set-presentation component designer presentation)
    (set-name~ designer component (string->symbol presentation) trait: #f)))))
