;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Components
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module jazz.library.component jazz


(import (jazz.jml)
        (jazz.library)
        (jazz.ui.dialog))


;;;
;;;; Form
;;;


(definition public (open-form)
  (read-form (choose-file multiple-selection?: #f)))


(definition public (read-form file)
  (define (parse expr proc)
    (if (and (pair? expr)
             (eq? (car expr) 'data))
        (parse-data expr proc)
      (parse-form expr proc)))
  
  (define (parse-data expr proc)
    (bind (data dialect . info) expr
      (let ((import (assq 'import info))
            (form (assq 'form info)))
        (assert form)
        (proc (new Data
                dialect
                (if import (cdr import) #f))
              (cadr form)))))
  
  (define (parse-form expr proc)
    (proc #f expr))
  
  (call-with-input-file (list path: (parse~ file) char-encoding: 'UTF eol-encoding: 'cr-lf readtable: jazz-readtable)
    (lambda (reader)
      (let ((expr (read reader)))
        (if (eof-object? expr)
            (error "No expression found in file: {a}" (parse~ file))
          (parse expr
            (lambda (data form)
              (set! form (construct-form form (if data (imports-locator (effective-imports~ data)) #f)))
              @wait (set! form (jml->form form (if data (imports-locator (effective-imports~ data)) #f)))
              (set-data~ form data)
              (set-origin~ form file)
              form)))))))


(definition public (safe-read-form file)
  ;; quick solution we should only catch reading and parsing errors
  (call-with-catch (lambda (obj)
                     (or (datum-parsing-exception? obj)
                         (error? obj)))
      (lambda (exc)
        (wrap-exception exc))
    (lambda ()
      (read-form file))))


(definition public (instantiate-file file . rest)
  (apply instantiate~ (read-form file) rest))


(definition public (imports-locator imports)
  (lambda (symbol)
    (continuation-capture
      (lambda (return)
        (for-each (lambda (import)
                    (let ((module-name (if (pair? import) (car import) import)))
                      (let ((object (module-get module-name symbol)))
                        (when object
                          (continuation-return return object)))))
                  imports)
        (error "Unable to find class: {s}" symbol)))))


;;;
;;;; Clipboard
;;;


(definition public (determine-unique-paster components)
  (case (length components)
    ((0) #f)
    ((1) (determine-paster~ (first components)))
    (else (let ((parents (remove-duplicates (map get-parent~ components))))
            (when (= 1 (length parents))
              (let ((parent (car parents)))
                (when parent
                  (determine-paster~ parent #f)))))))))
