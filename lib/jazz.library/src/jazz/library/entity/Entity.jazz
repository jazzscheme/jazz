;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Entities
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.library.entity.Entity jazz


(import (jazz.library))


;;;
;;;; Doc
;;;

; These classes are a first approximation at generalizing all the nice features
; of the Descendants-Tree that are only available for component hierarchies

; Entity                ;; every object in the tree must implement this interface
; Entity-Factory        ;; this factory class is necessary because interface relations are not propagated to the metaclass
; Entities-Controller   ;; all actions on entities will go trough this controller
; Entities-Tree
; Entity-Menu


;;;
;;;; Todo
;;;

; SLC - Unify all this with the component based framework
;       - Designer extends Entities-Controller
;       - Component-Factory extends Entity-Factory and delegates to a class slot that contains the class of the component
;       - Faut faire gaffe:
;         - Dans le Entities-Tree j'ai due permettre le clic dans le vide et le menu-add doit pouvoir deleguer
;           au parent de l'entite pour pouvoir faire un add meme si on est sur un schema...


;;;
;;;; Class
;;;


(interface undocumented Entity
  
  
  (method public virtual abstract (get-factory))
  (method public virtual abstract (get-factories))
  (method public virtual abstract (get-presentation))
  (method public virtual abstract (set-presentation controller presentation))
  (method public virtual abstract (can-cut-entity?))
  (method public virtual abstract (can-copy-entity?))
  (method public virtual abstract (can-paste-entity?))
  (method public virtual abstract (determine-paster . rest))
  (method public virtual abstract (can-rename-entity?))
  (method public virtual abstract (can-delete-entity?))
  (method public virtual abstract (can-relocate-entity?))
  (method public virtual abstract (can-view-properties?))
  (method public virtual abstract (get-categorized-properties))))
