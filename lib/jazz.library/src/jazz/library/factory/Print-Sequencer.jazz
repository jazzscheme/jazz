;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Printing In A Different Sequence
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.library.factory.Print-Sequencer jazz


(class undocumented Print-Sequencer extends Object)


@convert


(class undocumented Print-Sequencer extends Object
  
  
  (slot printer)
  (slot start)
  (slot sections initialize (new List-Factory))
  
  
  (method (initialize prt)
    (nextmethod)
    (set! printer prt)
    (start-section))
  
  
  (method public (start-section)
    (set! start (get-position)))
  
  
  (method public (end-section)
    (prog1 (cons start (get-position))
      (start-section)))
  
  
  (method (get-position)
    (get-position~ printer))
  
  
  ;;;
  ;;;; Sections
  ;;;
  
  
  (method public (put-section section)
    (put~ sections section))
  
  
  (method public (put-sections sections-list)
    (put-sequence~ sections sections-list))
  
  
  (method public (print-sections output)
    (for-each (lambda (section)
                (bind (start . end) section
                  (transfer start end output)))
              (get-output~ sections)))
  
  
  ;;;
  ;;;; Transfer
  ;;;
  
  
  (definition transfer-size
    1024)
  
  (definition transfer-buffer
    (new Heap-Block size: transfer-size))
  
  
  (method synchronized (transfer start end output)
    (let ((size (- end start)))
      (while (> size 0)
        (set-position~ printer start)
        (let ((subsize (min size transfer-size)))
          (ReadFile (get-handle~ printer) transfer-buffer subsize NULL)
          (WriteFile (get-handle~ output) transfer-buffer subsize NULL)
          (decrease! size subsize)
          (increase! start subsize)))))))
