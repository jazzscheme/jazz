;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Group
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.library.group.Group jazz


(import (jazz.jml)
        (jazz.designer)
        (jazz.library))


(class undocumented Group extends Component
  
  
  (property title   initialize #f  accessors generate)
  (property icon    initialize #f  accessors generate)
  (property classes initialize '() accessors generate)
  (property sort?   initialize #t  accessors explicit)
  
  
  (form
    (<install> title: "Group"))
  
  
  (method override (print output readably)
    (print-unreadable self output
      (lambda (output)
        (format output "{a}"
                title))))
  
  
  ;;;
  ;;;; Access
  ;;;
  
  
  (method public (get-sort?)
    sort?)


  (method public (set-sort? value)
    (when (neq? value sort?)
      (set! sort? value)
      (for-each (lambda (designer)
                  (process-refresh~ designer self 'descendants))
                designers)))
  
  
  ;;;
  ;;;; Descriptor
  ;;;
  
  
  (method meta override (get-class-descriptor)
    (new Group-Descriptor)))


;;;
;;;; Design
;;;


(submodule design


(import (jazz.designer))


(class Group-Descriptor extends Component-Descriptor
  
  
  (form
    (<install>                               title: "Group" image: {Image-Resource "OpenedFolder"} indexable?: #f
      (<properties~>                         categorized: (class-info name-info sort?)
        (<Property-Descriptor> name: title   title: "Title"
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: classes title: "Classes"
          (<Classes-Domain>    name: domain))
        (<Property-Descriptor> name: sort?   title: "Sort?"
          (<Boolean-Domain>    name: domain)))))
  
  
  (method override (component-get-component-image component)
    (or (get-icon~ component) (nextmethod component)))
  
  
  (method override (component-get-custom-card component)
    Group-Card)
  
  
  (method override (component-sort-components? component)
    (get-sort?~ component))
  
  
  (method override (component-display-property? component property)
    (not (memq? (field-name property) '(class-info name-info before children visible? title))))


  ;;;
  ;;;; Classes
  ;;;
  
  
  (method override (component-get-categorized-addable-classes component)
    '()
    @historical
    (map (lambda (model)
           (when model
             (resolve-reference~ model)))
         (get-component-classes)))
  
  
  (method override (component-get-classes component)
    (or (get-classes~ component)
        (when (get-parent~ component)
          (get-component-classes~ (get-parent~ component))))))


;;;
;;;; Classes-Domain
;;;


(class Classes-Domain extends List-Domain
  
  
  (method override (finish rest)
    (nextmethod rest)
    (set! domain (new Class-Domain))))


;;;
;;;; Class-Domain
;;;


(class Class-Domain extends Enumeration-Domain
  
  
  (method override (finish rest)
    (nextmethod rest)
    @convert
    (set-choices '((() "Separator") () (Group "Group") () (Note "Note") (Task "Task") (Calendar-Event "Event") (Anniversary "Anniversary") () (Company "Company") (Organism "Organism") (Person "Person") () (Password "Password") () (Apartment "Apartment") (Recipe "Recipe")))))))
