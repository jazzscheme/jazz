;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Event Handler
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.library.handler.Event-Handler jazz


(import (jazz.library)
        (jazz.system))


(class Event-Handler extends Handler
  
  
  (slot properties getter generate)
  
  
  (method override (initialize . rest)
    (bind-keywords ((properties '()) . others) rest
      (apply nextmethod others)
      (set! properties~self properties)))
  
  
  (method override (print printer readably)
    (format printer "~{{a} {s} {s}{a}}"
            (category-name (class-of self))
            (or target target-name)
            method-name
            (if (null? properties)
                ""
              (format " {l detail: :reader}" properties))))
  
  
  ;;;
  ;;;; Access
  ;;;


  (method public (get-property keyword)
    (getf properties keyword))
  
  
  ;;;
  ;;;; Invoke
  ;;;
  
  
  ;; Receiving an optional action is a temporary solution until
  ;; a big cleanup between event handlers and actions...

  
  (method override (invoke sender event (action: action #f))
    (if execute
        (execute event)
      (let ((target (or target (find-target sender))))
        (if (not target)
            (error "Unable to find event handler target: {t}" target-name)
          (invoke-target (redirect-handler~ target self sender) event action: action)))))
  
  
  (method public (invoke-target target event (action: action #f))
    (define (record-event)
      (let ((appl (get-application)))
        (when (and appl (macro-recording?~ appl))
          (let ((action/handler self)
                (recorder (get-recorder~ appl)))
            (record~ recorder action/handler event)))))
      
    (let ((proc (dispatch target method-name)))
      (cond ((not proc)
             (error "Unable to find event handler method: {t}" method-name))
            ((is? target Event-Consumer)
             (let ((consumer (get-event-consumer~ target)))
               (prog1 (deliver-event~ consumer self target proc event)
                 (record-event))))
            (else
             (prog1 (proc target event)
               (record-event))))))))
