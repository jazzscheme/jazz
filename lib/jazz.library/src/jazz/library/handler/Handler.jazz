;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Handlers
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.library.handler.Handler jazz


(import (jazz.library)
        (jazz.system))


(class Handler extends Object
  
  
  (slot execute     getter generate)
  (slot target      getter generate)
  (slot target-name getter generate)
  (slot method-name getter generate)
  (slot form-level  accessors generate)
  
  
  (method override (initialize (execute: execute #f) (target: target #f) (target-name: target-name #f) (method-name: method-name #f) (form-level: form-level #f))
    (nextmethod)
    (set! execute~self execute)
    (set! target~self target)
    (set! target-name~self target-name)
    (set! method-name~self method-name)
    (set! form-level~self form-level))
  
  
  (method override (print printer readably)
    (format printer "~{{a} {s} {s}}"
            (category-name (class-of self))
            target-name
            method-name))
  
  
  ;;;
  ;;;; Invoke
  ;;;
  
  
  (method public virtual (invoke sender . rest)
    (if execute
        (execute)
      (let* ((target (either target (find-target sender)))
             (proc (dispatch target method-name)))
        (apply (~ proc target) rest))))
  
  
  (method public (find-target sender)
    (if (is-not? sender Component)
        (process-alias~ (get-process) target-name)
      (cond ((eq? target-name :form)
             (child~ sender form-level))
            ((and (pair? target-name) (eq? (car target-name) :form))
             (child~ (child~ sender form-level) (cdr target-name)))
            (else
             (child~ sender target-name)))))))
