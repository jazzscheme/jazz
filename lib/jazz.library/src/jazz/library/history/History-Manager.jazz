;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; History Manager
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library protected jazz.library.history.History-Manager jazz


(import (jazz.platform)
        (jazz.system))


(class undocumented History-Manager extends Object

  
  (slot history-provider)
  (slot backward-history initialize '())
  (slot forward-history  initialize '())
  (slot max-history      initialize {})
  
  
  (method override (initialize provider . rest)
    (bind-keywords ((max-history {})) rest
      (nextmethod)
      (set! history-provider provider)
      (set! max-history~self max-history)))

  
  ;;;
  ;;;; Access
  ;;;
  
  
  (method public (get-backward-history)
    (cleanup-history backward-history))
  
  
  (method public (get-forward-history)
    (cleanup-history forward-history))

  
  ;;;
  ;;;; Management
  ;;;
  
  
  (method public (add-current)
    (let ((item (current-history-item~ history-provider)))
      (if (null? item)
          (bell)
        (add-history item)
        (user-message "Added {a} to history" (present~ item)))))
  
  
  (method public (add-history item)
    (when item
      (add-backward-history item)
      (when (and max-history (> (length backward-history) max-history))
        (set-cdr! (tail backward-history (- max-history 1)) '()))
      (set! forward-history '())
      (update-history-actions)))
  
  
  (method (add-backward-history item)
    (when item
      (set! backward-history (cons item backward-history))))
  
  
  (method (add-forward-history item)
    (when item
      (set! forward-history (cons item forward-history))))
  
  
  (method (append-forward-history item)
    (when item
      (set! forward-history (append forward-history (list item)))))
  
  
  (method public (go-backward-history (rank: rank 0))
    (cleanup-backward-history)
    (if (>= rank (length backward-history))
        (begin
          (bell)
          #f)
      (let ((item (current-history-item~ history-provider)))
        (while (>= rank 0)
          (add-forward-history item)
          (set! item (car backward-history))
          (set! backward-history (cdr backward-history))
          (decrease! rank))
        (open-item~ item)
        (update-history-actions)
        item)))
  
  
  (method public (go-forward-history (rank: rank 0))
    (cleanup-forward-history)
    (if (null? forward-history)
        (begin
          (bell)
          #f)
      (let ((item (current-history-item~ history-provider)))
        (while (>= rank 0)
          (add-backward-history item)
          (set! item (car forward-history))
          (set! forward-history (cdr forward-history))
          (decrease! rank))
        (open-item~ item)
        (update-history-actions)
        item)))
  
  
  (method (cleanup-history history)
    (collect-if (lambda (item)
                  (valid?~ item))
                history))
  
  
  (method (cleanup-backward-history)
    (set! backward-history (cleanup-history backward-history)))
  
  
  (method (cleanup-forward-history)
    (set! forward-history (cleanup-history forward-history)))

  
  ;;;
  ;;;; Actions
  ;;;
  
  
  ;; really not correct to always do this
  (method (update-history-actions)
    (let ((appl (get-application)))
      (when appl
        (update-history-actions~ appl))))))
