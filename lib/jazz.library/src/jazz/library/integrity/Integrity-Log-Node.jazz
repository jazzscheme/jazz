;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Integrity Log Nodes
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.library.integrity.Integrity-Log-Node jazz


(import (jazz.debuggee)
        (jazz.designer)
        (jazz.designer.view)
        (jazz.library)
        (jazz.ui)
        (jazz.ui.view))


(class undocumented Integrity-Log-Node extends Log-Node
  
  
  (method override (node-image)
    {Image-Resource "IntegrityError"})
  
  
  (method override (node-location)
    (let ((component (get-property~ node 'component)))
      (if (and component
               (pair? component)
               (eq? (car component) 'module-public))
          (->string (third component))
        "")))
  
  
  (method override (edit-location tree)
    (let ((editor (open-class (resolve-runtime-reference (deserialize-runtime-reference (get-property~ node 'component)))))
          (path (get-property~ node 'path))
          (property (get-property~ node 'property)))
      (let ((client (get-client~ editor)))
        (let ((component (follow-component~ (new Path (or path '())) client)))
          (if (not component)
              (begin
                (message-box (format "Unable to find component: {l}" path))
                (signal-cancel))
            (set-selection~ editor (list component) origin: self)
            (select-property~ editor property))))))))
