;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Integrity Manager
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.library.integrity.Integrity-Manager jazz


(import (jazz.library))


;;;
;;;; Validation-Context
;;;


(class undocumented Validation-Context extends Object
  
  
  (slot manager         initialize #f getter generate)
  (slot root            initialize #f getter generate)
  (slot editor          initialize #f getter generate)
  (slot context         initialize #f getter generate)
  (slot component       initialize #f getter generate)
  (slot property        initialize #f getter generate)
  (slot module-metadata initialize #f getter generate)
  
  
  (method override (initialize manager root module-metadata editor context component property)
    (set! manager~self manager)
    (set! root~self root)
    (set! editor~self editor)
    (set! context~self context)
    (set! component~self component)
    (set! property~self property)
    (set! module-metadata~self module-metadata))
  
  
  (method public (add-violation (message: message #f))
    (let ((violation (new Integrity-Violation
                       message: message
                       property: property)))
      (add-violation~ manager violation component root editor)))
  
  
  (method public (add-property-violation format-string . format-args)
    (add-violation message: (apply format (cons (concatenate "Property '{a}': " format-string) (cons (field-name property) format-args)))))
  
  
  (method public (refine (component: component #f) (property: property #f))
    (new Validation-Context manager root module-metadata editor context (or component component~self) (or property property~self)))
  )


;;;
;;;; Integrity-Manager
;;;


(class undocumented Integrity-Manager extends Object
  
  
  (slot violation-adder initialize #f)
  (slot constraints     initialize '())
  
  
  (method override (initialize (violation-adder: violation-adder #f))
    (define (setup-constraints)
      (set! constraints (new List-Factory))
      (register-constraints)
      (set! constraints (get-output~ constraints)))
    
    (nextmethod)
    (set! violation-adder~self violation-adder)
    (setup-constraints))
  
  
  (method override (print output readably)
    (print-unreadable self output
      (lambda (output)
        (let ((entries (length constraints)))
          (format output "with {a} constraint{a} registered"
                  (format-cardinality entries)
                  (format-plural entries))))))


  ;;;
  ;;;; Setup
  ;;;
  
  
  (method public virtual (register-constraints)
    )
  
  
  (method public (register-constraint constraint model (root?: root? #f))
    (put~ constraints (list constraint model root?)))
  
  
  ;;;
  ;;;; Constraints
  ;;;
  
  
  (method public (validate-integrity root module-metadata editor (context: context #f) (reporter: reporter #f))
    (validate-all root module-metadata editor context reporter))
  
  
  (method protected virtual (validate-all root module-metadata editor context reporter)
    (validate-hierarchy root root module-metadata editor context reporter))
  
  
  (method protected virtual (validate-hierarchy component root module-metadata editor context reporter)
    (when reporter
      (report-progress component root reporter))
    (unless (eq? (validate component root module-metadata editor context) 'stop-descent)
      (for-each (lambda (child)
                  (validate-hierarchy child root module-metadata editor context reporter))
                (get-children~ component))))
  
  
  (method public (validate component root module-metadata editor context)
    (let ((new-context (validation-context component root context)))
      (if (eq? (validate-component~ component (new Validation-Context self root module-metadata editor context component #f))
               'stop-descent)
          'stop-descent
        (continuation-capture
          (lambda (return)
            (for-each (lambda (info)
                        (bind (constraint model root?) info
                          (when (and (or (null? model) (is? component model))
                                     (or root? (branch-installed?~ root)))
                            (when (eq? (validate~ constraint component root editor context self) 'stop-descent)
                              (continuation-return return 'stop-descent)))))
                      constraints))))))
  
  
  (method protected virtual (validation-context component root context)
    context)
  
  
  (method protected virtual (report-progress component root reporter)
    (test-cancelled~ reporter)
    (user-message~ reporter "Validating {a}..." (get-name~ component)))
  
  
  ;;;
  ;;;; Violations
  ;;;
  
  
  (method public virtual (add-violation violation component root editor)
    (let* ((trait (get-active-trait~ root))
           (trait-name (and trait (get-name~ trait)))
           (trait-presentation (and trait (get-presentation-property~ trait))))
      (receive (path presentation) (present-path~ component root)
        (set-trait~ violation trait-name)
        (set-trait-presentation~ violation trait-presentation)
        (set-path~ violation path)
        (set-path-presentation~ violation (if trait (cons trait-presentation presentation) presentation))
        (if violation-adder
            (violation-adder violation component root editor)
          (add-violation~ editor violation)))))))
