;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Integrity Violations
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2012
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.library.integrity.Integrity-Violation jazz


(import (jazz.library))


(class undocumented Integrity-Violation extends Object
  
  
  (slot message)
  (slot trait               accessors generate)
  (slot trait-presentation  accessors generate)
  (slot path                accessors generate)
  (slot path-presentation   accessors generate)
  (slot property            accessors generate)
  
  
  (method override (initialize (message: message #f)
                               (trait: trait #f)
                               (trait-presentation: trait-presentation #f)
                               (path: path #f)
                               (path-presentation: path-presentation #f)
                               (property: property #f))
    (nextmethod)
    (set! message~self message)
    (set! trait~self trait)
    (set! trait-presentation~self trait-presentation)
    (set! path~self path)
    (set! path-presentation~self path-presentation)
    (set! property~self property))
  
  
  (method override (print output readably)
    (format output "~{{a} message: {s} trait: {s} :trait-presentation {s} :path {s} :path-presentation {s}}"
            (category-name (class-of self))
            message
            trait
            trait-presentation
            path
            path-presentation))


  ;;;
  ;;;; Message
  ;;;
  
  
  (method public virtual (get-message)
    message)


  ;;;
  ;;;; Presentation
  ;;;
  
  
  (method public virtual (get-image)
    {Image-Resource "IntegrityError"})
  
  
  (method public virtual (present-message)
    (get-message))
  
  
  (method public virtual (present-location)
    (let ((location (or path-presentation (get-path~ path))))
      (if (null? location)
          ""
        (join location " "))))))
