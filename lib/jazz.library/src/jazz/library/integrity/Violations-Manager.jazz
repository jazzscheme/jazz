;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Integrity Violations Manager
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.library.integrity.Violations-Manager jazz


(import (jazz.jml)
        (jazz.library)
        (jazz.system)
        (jazz.ui)
        (jazz.ui.view))


(class undocumented Violations-Manager extends Navigable-Results
  
  
  (slot editor initialize #f)


  (form
    (<install>
      (<!>                           name: scroller
        (<!>                         name: content
          (<!>                       name: header
            (<!>                     name: content
              (<!>                   name: results
                (<Tree-Node-Column>  name: violation title: "Violation" width: 300 toplevel-controls?: #f)
                (<Tree-Label-Column> name: location  title: "Location" width: 337))))))))
  
  
  (method meta override (external-name . rest)
    'violations-manager)


  ;;;
  ;;;; Host
  ;;;
  
  
  (method meta override (host-icon)
    {Image-Resource "IntegrityViolations"})
  
  
  (method meta override (host-title)
    "Integrity Violations")
  
  
  (method override (client-activate)
    (let ((guest (current-document)))
      (set-editor (and guest (get-component-editor~ guest)))))
  
  
  (method override (client-deactivate)
    (set-editor #f))
  
  
  ;;;
  ;;;; Access
  ;;;
  
  
  (method public virtual (get-editor)
    editor)
  
  
  (method public virtual (set-editor value)
    ;; Removing this test is the simple way for now of solving a tough bug that if I open a design
    ;; with violations and clear them and switch workspace then: if I switch back to the modeling
    ;; workspace every is fine but if I do so by reopening the same file, then the violations list
    ;; remains empty because the test below fails...
    (when #t @w (neq? value editor)
      (set! editor value)
      (update)))
  
  
  (method public (update)
    (let ((tree (get-tree)))
      (remove-every-row~ tree)
      (with-update-locked~ tree
        (lambda ()
          (when editor
            (for-each add-violation (get-violations~ editor)))))))
  
  
  ;;;
  ;;;; Interface
  ;;;

  
  (method (add-violation violation)
    (let ((tree (get-tree))
          (title (present-message~ violation))
          (location (present-location~ violation))
          (image (get-image~ violation)))
      (add-row~ tree children: (list (new Tree-Node title: title image: image) (new Tree-Label title: location)) user-data: violation)))

  
  ;;;
  ;;;; Navigation
  ;;;
  

  (method override (edit-selection forward?)
    (let* ((tree (get-tree))
           (selection (get-single-selection~ tree)))
      (when selection
        (let* ((violation (get-user-data~ (get-row~ tree selection)))
               (trait-name (get-trait~ violation))
               (trait-presentation (get-trait-presentation~ violation))
               (property (get-property~ violation))
               (editor (get-editor))
               (client (get-client~ editor))
               (active (get-active-trait-name~ client)))
          (if (not trait-name)
              ;; maybe some violations want to switch to the root
              ;; but others just want the current trait to stay the same
              #f
              @w
              (when active
                (set-active-trait~ client #f)
                (process-branch-changed~ editor client))
            (when (or (not active) (/= trait-name active))
              (let ((effective (find-component~ client trait-name)))
                (if (not effective)
                    (error "Unable to find component {a}" trait-presentation)
                  (set-active-trait~ client effective)
                  (process-branch-changed~ editor effective)))))
          (let ((component (follow-component~ (get-path~ violation) client)))
            (user-message (get-message~ violation))
            (set-selection~ editor (list component) origin: self)
            (select-property~ editor property))))))))
