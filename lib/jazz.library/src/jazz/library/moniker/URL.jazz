;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Uniform Resource Locators
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library protected jazz.library.moniker.URL jazz


(import (jazz.io))


(definition public (extract-url-name url)
  (let ((pos (find url #\slash reversed?: #t)))
    (if (null? pos)
        url
      (subseq url (+ pos 1)))))


(definition (tokenise-url filename)
  (split filename "/"))


(class URL-Class extends (:class Pathname))


(class URL metaclass URL-Class extends Pathname
  
  
  (slot title getter generate)
  
  
  (method override (initialize lst (title: title {}))
    (nextmethod lst)
    (set! title~self title))
  
  
  (method override (get-name)
    (extract-url-name (parse)))
  
  
  (method override (print printer readably)
    (let ((title (get-title)))
      (if (null? title)
          (nextmethod printer readably)
        (print-unreadable self printer
          (lambda (printer)
            (format printer "{a}" title))))))
  
  
  ;;;
  ;;;; Access
  ;;;


  ;;;
  ;;;; Split
  ;;;
  
  
  ;; For now, assumes a very standard "http://www.google.com/advanced_search" format
  (method public (split)
    (let* ((url (parse))
           (header (subseq url 0 7)))
      (if (/= header "http://")
          (error "Unable to split url {t}" self)
        (let* ((sub (subseq url 7))
               (pos (find sub #\slash)))
          (if (null? pos)
              (values sub {})
            (values (subseq sub 0 pos) (subseq sub (+ pos 1))))))))))
