;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Outlines
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.library.outline.Outline jazz


(import (jazz.library))


(class undocumented Outline extends Object
  
  
  (slot row-spacing <fx> accessors generate)
  (slot root-row         getter    generate)
  
  
  (method override (initialize row-spacing root-row)
    (nextmethod)
    (set! row-spacing~self row-spacing)
    (set! root-row~self root-row))
  
  
  (method public (first-row)
    (first (get-sons~ root-row)))
  
  
  (method public (first-visible-row)
    (get-next~ root-row))
  
  
  ;;;
  ;;;; Outline
  ;;;
  
  
  (method public virtual (get-row n)
    (get-row-from root-row (+ n 1)))
  
  
  (method protected (get-row-from row n)
    (while (and row (> n 0))
      (set! row (get-next~ row))
      (decrease! n))
    row)


  (method public virtual (call-with-v->row v scrolled proc)
    (let ((row (first-visible-row)))
      (let ((line 0)
            (top 0)
            (bottom (+ (get-height~ row) row-spacing)))
        (while (and row (or (< v top) (>= v bottom)))
          (increase! line)
          (set! row (get-next~ row))
          (when row
            (set! top bottom)
            (set! bottom (+ top (get-height~ row) row-spacing))))
        (if (and row (< v (- bottom row-spacing)))
            (proc line (- v top) (- bottom top))
          (proc #f #f #f)))))
  
  
  ;;;
  ;;;; Displayed
  ;;;
  
  
  (method protected virtual (update-displayed display-v)
    )
  
  
  (method protected virtual (follow display-v v)
    )))
