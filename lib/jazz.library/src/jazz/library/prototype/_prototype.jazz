;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Prototypes
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module jazz.library.prototype jazz


(import (jazz.library))


;;;
;;;; Prototype-Class
;;;


(class Prototype-Class extends (:class Component)
  
  
  (slot properties initialize (make-table test: eq?))
  
  
  (method (get-property field-name)
    (table-ref properties field-name #f))
  
  (method (set-property field-name property)
    (table-set! properties field-name property))
  
  
  (method override (mop-category-field field-name)
    (or (nextmethod field-name)
        (get-property field-name)
        (let ((property (new-property field-name #f #f
                          (lambda (prototype)
                            (get~ prototype field-name))
                          (lambda (prototype value)
                            (set~ prototype field-name value)))))
          (set-property field-name property)
          property)))
  
  
  (method override (mop-field-value property)
    )
  
  
  (method override (mop-instance-slots object)
    (map get-property (table-keys (get-table~ object)))))


;;;
;;;; Prototype
;;;


(class Prototype metaclass Prototype-Class extends Component
  
  
  (property facets getter generate setter set-facets)
  
  
  (slot table initialize (make-table test: eq?) getter generate)
  
  
  (method override (print output readably)
    (print-unreadable self output
      (lambda (output)
        (format output "{l}" (alist->plist (table->list table))))))
  
  
  (method (set-facets facets)
    (define (clone-facet facet)
      (let ((facet (if (symbol? facet)
                       (locate~ creator facet)
                     facet)))
        (iterate-table (get-table~ facet)
          set)))
    
    (set! facets~self facets)
    (for-each clone-facet (listify facets)))
  
  
  (method public (get name)
    (table-ref table name))
  
  
  (method public (set name value)
    (table-set! table name value))))
