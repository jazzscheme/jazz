;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Prototypes
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module jazz.library.prototype jazz


(import (jazz.jml) ;; for the register-autoclass (to remove)
        (jazz.library))


(class Prototype-Class extends (:class Component)
  
  
  (slot properties initialize (make-table test: eq?))
  
  
  (method (get-property field-name)
    (table-ref properties field-name {}))
  
  (method (set-property field-name property)
    (table-set! properties field-name property))
  
  
  (method override (mop-category-field field-name)
    (either (nextmethod field-name)
            (get-property field-name)
            (let ((property (new-property field-name #f #f 
                              (lambda (prototype)
                                (get~ prototype field-name))
                              (lambda (prototype value)
                                (set~ prototype field-name value)))))
              (set-property field-name property)
              property))
  
  
  (method override (mop-field-value property)
    ))
  
  
  (method override (mop-instance-slots object)
    (map get-property (table-keys (get-table~ object)))))


(class Prototype metaclass Prototype-Class extends Component
  
  
  (property traits getter generate setter set-traits)
  
  
  (slot table initialize (make-table test: eq?) getter generate)
  
  
  (method override (print printer readably)
    (print-unreadable self printer
      (lambda (printer)
        (format printer "{l}" (alist->plist (table->list table))))))
  
  
  (method (set-traits traits)
    (define (clone-trait trait)
      (let ((trait (if (symbol? trait)
                       (locate~ creator trait)
                     trait)))
        (iterate-table (get-table~ trait)
          set)))
    
    (set! traits~self traits)
    (for-each clone-trait (listify traits)))
  
  
  (method public (get name)
    (table-ref table name))
  
  
  (method public (set name value)
    (table-set! table name value))
  
  
  @wait (
  (slot data       <vector>)
  (slot properties <list>   initialize '())
  (slot ranks      <table>  initialize (make-table test: eq?))
  
  
  (method public (get name)
    (let ((rank (get-rank name)))
      (if rank
          (vector-ref data rank)
        (get-property name))))
  
  
  (method public (set name value)
    (let ((rank (get-rank name)))
      (if rank
          (vector-set! data rank value)
        (set-property name value))))
  
  
  (definition not-found
    '(not-found))
  
  
  (method (get-property name)
    (let (iterate (scan properties))
      (if (null? scan)
          not-found
        (let ((property (car scan)))
          (if (eq? name property)
              (cadr scan)
            (iterate (cddr scan)))))))
  
  
  (method (set-property name value)
    (let (iterate (scan properties))
      (if (null? scan)
          (set! properties (append properties (list name value)))
        (let ((property (car scan)))
          (if (eq? name (symbolize-property property))
              (set-car! (cdr scan) value)
            (iterate (cddr scan)))))))
  
  
  (method (get-rank name)
    {})))


(register-autoclass Prototype))
