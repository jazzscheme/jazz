;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Regular Expressions
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2012
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.library.regexp.Regular-Expression jazz


(class undocumented Regular-Expression extends Object
  
  
  (slot original)
  (slot expressions)
  
  
  (method override (initialize pattern)
    (nextmethod)
    (set! original pattern)
    (set! expressions (parse-expressions pattern)))
  
  
  (method (parse-expressions pattern)
    (define (parse-expression pattern)
      (define (find-star pattern)
        (let ((pos #f))
          (loop (for n from 0 below (cardinality pattern))
                (let ((c (element pattern n)))
                  (when (eqv? c #\times)
                    (if (not pos)
                        (set! pos n)
                      (error "Multiple stars are not supported in regular expressions")))))
          pos))
      
      (let ((pos (find-star pattern)))
        (if (not pos)
            (new Regular-Pattern pattern #t)
          (new Regular-Pattern pattern #f
               (subseq pattern 0 pos)
               (subseq pattern (+ pos 1))))))
    
    (map parse-expression (parse-strings pattern separator: "|")))
  
  
  ;;;
  ;;;; Match
  ;;;
  
  
  (method public (match string)
    (define (match-expression expression string)
      (cond ((get-exact?~ expression)
             (if (nu=? string (get-pattern~ expression))
                 string
               #f))
            (else
             (let ((prefix (get-prefix~ expression))
                   (suffix (get-suffix~ expression)))
               (if (and (starts-with? string prefix)
                        (ends-with? string suffix))
                   (subseq string (cast <fx> (cardinality prefix)) (- (cast <fx> (cardinality string)) (cast <fx> (cardinality suffix))))
                 #f)))))
    
    (continuation-capture
      (lambda (return)
        (for-each (lambda (expression)
                    (let ((match (match-expression expression string)))
                      (when match
                        (continuation-return return match))))
                  expressions)
        #f)))
  
  
  (method public (matches? string)
    (not-null? (match string)))
  
  
  ;;;
  ;;;; Replace
  ;;;
  
  
  (method public (replace string)
    (if (/= (length expressions) 1)
        (error "Regular expression must contain exactly one pattern to be used for replacements: {a}" original)
      (let ((expression (car expressions)))
        (if (get-exact?~ expression)
            (get-pattern~ expression)
          (concatenate (get-prefix~ expression) string (get-suffix~ expression)))))))


;;;
;;;; Regular-Pattern
;;;


(class Regular-Pattern extends Object
  
  
  (slot pattern getter generate)
  (slot exact?  getter generate)
  (slot prefix  getter generate)
  (slot suffix  getter generate)
  
  
  (method override (initialize pattern exact? (prefix #f) (suffix #f))
    (nextmethod)
    (set! pattern~self pattern)
    (set! exact?~self exact?)
    (set! prefix~self prefix)
    (set! suffix~self suffix))))
