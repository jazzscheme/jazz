;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Library Syntax
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.library.syntax jazz


;;;
;;;; Setting
;;;


(macro public (define-setting name . rest)
  (let ((expr (if (null? rest) #f (car rest)))
        (global (compose-identifier name 'setting) @wait-one-pass-walker (generate-symbol (symbol->string name))))
    `(begin
       (define ,global ,expr)
       (definition public (,name . rest)
         (if (null? rest)
             ,global
           (set! ,global (car rest)))))))


;;;
;;;; Environment
;;;


(macro public (<environment> data)
  (define (gather-references)
    (let ((references (make-table test: eq?)))
      (define (walk-reference reference)
        (table-set! references reference #t))
      
      (walk-references~ data walk-reference)
      references))
  
  (define (locators-builder references)
    (cons 'list (map (lambda (pair)
                       (let ((reference (car pair)))
                         `(cons ',reference (reference ,reference))))
                     (table->list references))))
  
  (let ((locators-code (locators-builder (gather-references))))
    `(construct-environment ',data
                            (let ((locators (list->table ,locators-code)))
                              (lambda (symbol)
                                (locators-ref locators symbol))))))


;;;
;;;; Form
;;;


(macro public (define-form name form)
  `(definition public ,name
     (<form> ,form)))


;;;
;;;; Trait
;;;


(macro public (define-trait name class trait)
  `(definition public ,name
     (instantiate-trait ,class (<form> ,trait)))))
