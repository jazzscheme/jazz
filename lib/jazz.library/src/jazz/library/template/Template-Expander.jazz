;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Template Expander
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2012
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.library.template.Template-Expander jazz


(import (jazz.io))


(class Template-Expander extends Object
  
  
  (slot delimiter-escape)
  (slot delimiter-start)
  (slot delimiter-end)
  
  
  (method override (initialize (delimiter-escape: delimiter-escape #\~) (delimiter-start: delimiter-start #\[) (delimiter-end: delimiter-end #\]))
    (nextmethod)
    (set! delimiter-escape~self delimiter-escape)
    (set! delimiter-start~self delimiter-start)
    (set! delimiter-end~self delimiter-end))
  
  
  (method public (expand template associations output (printer: printer #f))
    (define (template-reader template)
      (if (sequence? template)
          (open-input-string template)
        (open-input-file (list path: (parse~ template) eol-encoding: (get-eol-encoding)))))
    
    (define (process-variable input output associations printer)
      (let ((name (read-variable input)))
        (let ((info (assv name associations)))
          (if info
              (let ((value (cdr info)))
                (if printer
                    (printer name value output)
                  (format output "{a}" value)))
            (error "Unable to find variable {t} in association list" name)))))
    
    (define (read-variable input)
      (let ((name-output (open-output-string)))
        (let (iterate)
          (let ((c (read-char input)))
            (cond ((eof-object? c)
                   (error "Unexpected end of stream reached while reading template parameter"))
                  ((eqv? c delimiter-end)
                   (string->symbol (get-output-string name-output)))
                  (else
                   (write-char c name-output)
                   (iterate)))))))
    
    (with ((input (template-reader template)))
      (let (iterate)
        (let ((c (read-char input)))
          (when (not (eof-object? c))
            (if (eqv? c delimiter-start)
                (if (eqv? (peek-char input) delimiter-start)
                    (format output "{c}" (read-char input))
                  (process-variable input output associations printer))
              (format output "{c}" c))
            (iterate))))))))
