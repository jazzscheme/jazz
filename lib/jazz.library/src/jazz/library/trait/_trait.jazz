;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Component Traits
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.library.trait jazz


(import (jazz.jml)
        (jazz.library))


(define *traits*
  (make-table test: eq?))


(define (get-trait name)
  (table-ref *traits* name #f))


(definition public (register-trait name trait)
  (table-set! *traits* name trait))

(definition public (unregister-trait name)
  (table-clear *traits* name))


(definition public (load-trait name)
  (or (get-trait name)
      (error "Unable to load trait: {s}" name)))


(definition public (resolve-trait name/trait)
  (if (is? name/trait Trait)
      name/trait
    (bind (trait . path) (split-symbol name/trait "/")
      (let ((trait (load-trait trait)))
        (if (null? path)
            trait
          (child~ trait path)))))))
