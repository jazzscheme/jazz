;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Undo/Redo Management
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.library.utility.Undoer jazz


(import (jazz.library)
        (jazz.system))


(class Undoer extends Object
  
  
  (slot reset-modified)
  (slot undo-list      initialize '() getter generate)
  (slot redo-list      initialize '())
  (slot undoing?       initialize #f)
  (slot redoing?       initialize #f)
  (slot atomic?        initialize #f)
  (slot atomic-actions initialize '())
  (slot save-depth     initialize 0)
  
  
  (method override (initialize (reset-modified: reset-modified #f))
    (nextmethod)
    (set! reset-modified~self reset-modified))


  ;;;
  ;;;; Access
  ;;;
  
  
  (method public (reset-save-depth)
    (set! save-depth 0))
  
  
  (method public (reset)
    (set! undo-list      '())
    (set! redo-list      '())
    (set! undoing?       #f)
    (set! redoing?       #f)
    (set! atomic?        #f)
    (set! atomic-actions '()))


  ;;;
  ;;;; Undo/Redo
  ;;;


  (method public (register-undo action (reset #f))
    (cond (atomic?
           (register-atomic-action action))
          (undoing?
           (set! redo-list (cons action redo-list))
           (decrease! save-depth))
          (else
           (set! undo-list (cons action undo-list))
           (increase! save-depth)
           (unless redoing?
             (set! redo-list '()))))
    (when (and reset-modified (= save-depth 0) (not atomic?))
      (reset-modified)))
  
  
  (method public (can-undo?)
    (not-null? undo-list))
  
  
  (method public (can-redo?)
    (not-null? redo-list))


  (method public (undo)
    (when (not-null? undo-list)
      (let ((old undoing?)
            (action (car undo-list)))
        (unwind-protect
            (begin
              (set! undoing? #t)
              (play-action action)
              (set! undo-list (cdr undo-list)))
          (set! undoing? old)))))


  (method public (redo)
    (when (not-null? redo-list)
      (let ((old redoing?)
            (action (car redo-list)))
        (unwind-protect
            (begin
              (set! redoing? #t)
              (play-action action)
              (set! redo-list (cdr redo-list)))
          (set! redoing? old)))))


  ;;;
  ;;;; Action
  ;;;
  
  
  (method public virtual (play-action action)
    (action))


  ;;;
  ;;;; Atomic
  ;;;
  
  
  (method public (with-atomic-undo proc)
    (let ((preserved atomic?)
          (completed? #f))
      (unwind-protect
          (begin
            (start-atomic-undo)
            (proc)
            (set! completed? #t))
        (end-atomic-undo preserved completed?))))
  
  
  (method public (start-atomic-undo)
    (prog1 atomic?
      (unless atomic?
        (set! atomic-actions '()))
      (set! atomic? #t)))
  
  
  (method public (end-atomic-undo preserved (completed? #t))
    (define (register-atomic-actions actions)
      (when (not-null? actions)
        (register-undo
          (lambda ()
            (with-atomic-undo
              (lambda ()
                (for-each (lambda (action)
                            (play-action action))
                          actions)))))))
    
    (set! atomic? preserved)
    (unless atomic?
      (let ((actions atomic-actions))
        (set! atomic-actions '())
        (when (and completed? (not atomic?))
          (register-atomic-actions actions)
          (let ((appl (get-application)))
            (update-focus-actions~ appl))))))
  
  
  (method (register-atomic-action action)
    (set! atomic-actions (cons action atomic-actions)))))
