;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Version Numbers
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library protected jazz.library.utility.Version jazz


(import (jazz.library))


(class Version extends Object
  
  
  (slot major)
  (slot minor)
  (slot stage)
  (slot revision)
    
    
  (method (initialize major minor (revision 0) (stage {}))
    (nextmethod)
    (set! major~self major)
    (set! minor~self minor)
    (set! revision~self revision)
    (set! stage~self stage))


  (method (compare-object target)
    (if (is-not? target Version)
        :incompatible
      (let ((try
             (function (x y)
               (cond ((< x y) :less)
                     ((> x y) :greater)
                     (else {})))))
        (either (try major (get-major~ target))
                (try minor (get-minor~ target))
                (try revision (get-revision~ target))
                :equal))))
  
  
  (method (print printer readably)
    (format printer "~{{a} {a} {a}{?: {a}~}{?: {a}~}{?: {a}~}}"
            (identifier-name (type-name (class-of self)))
            major
            minor
            (/= revision 0) revision)
            stage stage)
  
  
  (method public (present)
    (format "{a}.{a}{a}{a}"
            major
            minor
            (if (= revision 0)
                ""
              (format ".{a}" revision))
            (if (not stage)
                ""
              (format " {a}"
                      (case stage
                        ((alpha) "alpha")
                        ((beta) "beta"))))))


  ;;;
  ;;;; Access
  ;;;
  
  
  (method public (get-major)
    major)
  
  
  (method public (get-minor)
    minor)
  
  
  (method public (get-revision)
    revision)
  
  
  (method public (get-stage)
    stage)))
