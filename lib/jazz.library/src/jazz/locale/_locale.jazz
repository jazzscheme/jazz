;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Localization
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library protected jazz.locale jazz


(import (jazz.system))


;;;
;;;; Locales
;;;


(class Locales extends Object
  
  
  (slot locales)
    
    
  (method (initialize . rest)
    (nextmethod)
    (set! locales rest))
  
  
  (method (fold-literal)
    `(new Locales ,@locales))
  
  
  (method (print printer readably)
    (format printer "~{{a}{a}{l}}"
            (identifier-name (type-name (class-of self)))
            (if locales " " "")
            locales))
  
  
  ;;;
  ;;;; Access
  ;;;
  
  
  (method public (get-locales)
    locales)
  
  
  (method public (get-locale locale)
    (getf locales locale))
  
  
  ;;;
  ;;;; Localize
  ;;;
  
  
  (method public (localize locale)
    (either (getf locales locale) (second locales))))


(definition Active-Locales
  '(english:))

(definition Active-Locale
  english:)


(definition public (get-locales)
  Active-Locales)


(definition public (get-locale)
  Active-Locale)


(definition public (set-locale loc (update?: update? #t))
  (let ((loc (standardize-locale loc)))
    (when (neq? loc Active-Locale)
      (set! Active-Locale loc)
      (let ((appl (get-application)))
        (select-locale~ appl loc)
        (when update?
          (locale-update~ appl))))))


(definition (standardize-locale loc)
  (cond ((keyword? loc) loc)
        ((enumerator? loc) (symbol->keyword (enumerator->symbol loc)))
        ((symbol? loc) (symbol->keyword loc))
        (else (error "Invalid locale: {s}" loc))))


(definition public (localize object)
  (if (is? object Locales)
      (localize~ object Active-Locale)
    object))


(definition public (localize-to object locale)
  (if (is? object Locales)
      (localize~ object locale)
    object))


(definition public (present-locale locale)
  (case locale
    ((english:) "English")))


;;;
;;;; Diacritic
;;;


;; putting the uppercase chars here is a quick fix until
;; we add diacritic awareness to upcase and downcase
(definition Diacritic-Equivalences
  '((#\a #\à #\â #\A #\À #\Â)
    (#\c #\ç #\C #\Ç)
    (#\e #\é #\è #\ê #\ë #\E #\É #\È #\Ê #\Ë)
    (#\i #\î #\ï #\I #\Î #\Ï)
    (#\o #\ô #\O #\Ô)
    (#\u #\ù #\û #\U #\Ù #\Û)))


(definition (make-diacritic-table equivalences)
  (let ((table (make-table test: eqv?)))
    (for-each (function (equivalences)
                (for-each (function (char)
                            (table-set! table char equivalences))
                          equivalences))
              equivalences)
    table))

(definition Diacritic-Table
  (make-diacritic-table Diacritic-Equivalences))


(definition public (di=? x y)
  (or (ci=? x y)
      (memv? y (table-ref Diacritic-Table x '()))))


(definition public (string-di=? x y)
  (and (= (string-length x) (string-length y))
       (loop (for a in-sequence x)
             (for b in-sequence y)
             (every (di=? a b))))))
