;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Localization
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module jazz.locale jazz


;;;
;;;; Locales
;;;


(class Locales extends Object
  
  
  (slot locales accessors generate)
    
    
  (method override (initialize . rest)
    (define (uniquify-locales remaining uniquified)
      (if (null? remaining)
          (reverse uniquified)
        (assert (not-null? (cdr remaining)))
        (bind (locale string . new-remaining) remaining
          (assert (keyword? locale))
          (uniquify-locales new-remaining (if (memq? locale uniquified)
                                              uniquified
                                            (cons string (cons locale uniquified)))))))
    
    (nextmethod)
    (set! locales (uniquify-locales rest '())))
  
  
  (method override (print output readably)
    (format output "~{{a}{a}{l}}"
            (category-name (class-of self))
            (if locales " " "")
            locales))
  
  
  (method override (compare-object target)
    (define (recursive-compare plist1 plist2 type)
      (cond ((and (null? plist1) (null? plist2))
             #t)
            ((not (eq? (null? plist1) (null? plist2)))
             #f)
            ((eq? type 'keyword)
             (let ((head1 (car plist1))
                   (head2 (car plist2)))
               (and (keyword? head1)
                    (eq? head1 head2)
                    (recursive-compare (cdr plist1) (cdr plist2) 'string))))
            (else 
             (let ((head1 (car plist1))
                   (head2 (car plist2)))
               (and (or (and (not head1) (not head2))
                        (and (string? head1)
                             (string? head2)
                             (string=? head1 head2)))
                    (recursive-compare (cdr plist1) (cdr plist2) 'keyword))))))
    
    (cond ((is-not? target Locales)
           :incompatible)
          ((recursive-compare locales (get-locales~ target) 'keyword)
           :equal)
          (else
           :not-equal)))
  
  ;;;
  ;;;; Access
  ;;;
  
  
  (method public (get-locale locale)
    (getf locales locale))
  
  
  ;;;
  ;;;; Localize
  ;;;
  
  
  (method public virtual (localize locale)
    (getf locales locale)))


;;;
;;;; Contextual-Locales
;;;


(class Contextual-Locales extends Locales
  
  
  (slot context getter generate)
    
    
  (method override (initialize locales context)
    (set! locales~self locales)
    (set! context~self context))
  
  
  (method override (print output readably)
    (print-unreadable self output
      (lambda (output)
        )))
  
  
  ;;;
  ;;;; Localize
  ;;;
  
  
  (method override (localize locale)
    (format "{^:~}" (localize~ locales locale) context)))


(definition public (contextual-locales locales context)
  (new Contextual-Locales locales context))


;;;
;;;; Locale
;;;


(class Locale extends Object
  
  
  (slot name        getter generate)
  (slot parent-name getter generate)
  (slot titles      getter generate)
  
  
  (method override (initialize name <Keyword> parent-name titles <Locales>)
    (nextmethod)
    (set! name~self name)
    (set! parent-name~self parent-name)
    (set! titles~self titles))
  
  
  (method override (print output readably)
    (print-unreadable self output
      (lambda (output)
        (format output "{a}" name))))
  
  
  (method public (present)
    (localize titles)))


;;;
;;;; Global
;;;


(definition *locale-table*
  (let ((table (make-table test: eq?)))
    (table-set! table root: (new Locale root: #f (new Locales english: "root" french: "racine")))
    table))

(definition *active-locale*
  english:)


(definition public (get-locales)
  (sort string<? (table-keys *locale-table*) key: keyword->string))


(definition public (registered-locale name)
  (or (table-ref *locale-table* name #f)
      (error "unregistered locale")))


(definition public (register-locale locale)
  (let ((name (get-name~ locale)))
    (cond ((table-ref *locale-table* name #f)
           (error "a locale has already been registered under this name"))
          ((not (table-ref *locale-table* (get-parent-name~ locale) #f))
           (error "locale parent name is not registered"))
          (else
           (table-set! *locale-table* name locale)))))


(definition public (unregister-locale locale)
  (let ((name (get-name~ locale)))
    (table-clear *locale-table* name)))


(definition public (get-locale)
  *active-locale*)


(definition public (standardize-locale loc)
  (cond ((keyword? loc) loc)
        ((enumerator? loc) (symbol->keyword (enumerator->symbol loc)))
        ((symbol? loc) (symbol->keyword loc))
        (else (error "Invalid locale: {s}" loc))))


(definition public (set-locale loc (update?: update? #t))
  (let ((loc (standardize-locale loc)))
    (assert (registered-locale loc))
    (unless (eq? loc *active-locale*)
      (set! *active-locale* loc)
      (for-each (lambda (proc)
                  (proc loc update?))
                locale-changes))))


(definition locale-changes
  '())


(definition public (register-locale-change proc)
  (set! locale-changes (cons proc locale-changes)))


(definition public (unregister-locale-change proc)
  (set! locale-changes (remove! proc locale-changes)))


(definition public (localize object (loc *active-locale*))
  (let ((locale (registered-locale loc)))
    (or (and (is? object Locales)
             (or (localize~ object loc)
                 (localize object (get-parent-name~ locale))))
        object)))


(definition public (present-locale loc)
  (present~ (registered-locale loc))))
