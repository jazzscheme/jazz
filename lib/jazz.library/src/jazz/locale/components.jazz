;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Localized Strings
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module jazz.locale.components jazz


(import (jazz.jml)
        (jazz.library)
        (jazz.locale)
        (jazz.ui))


;;;
;;;; Localized-String
;;;


(class Localized-String extends Component
  
  
  (property string initialize #f accessors generate)
  
  
  (method public (get-locale)
    (catch (Error err #f)
      (standardize-locale (get-name))))
  
  
  (method override (validate-component validation-context)
    (unless (get-name)
      (add-violation~ validation-context message: "Localized-String name must specify a language and cannot be #f"))
    (unless (null? children)
      (add-violation~ validation-context message: "Localized-String cannot have children"))
    (nextmethod validation-context))
  

  (method meta override (get-class-descriptor)
    (new Localized-String-Descriptor)))


;;;
;;;; Localized-String-Group
;;;


(class Localized-String-Group extends Component
   
  
  (method public (get-contents)
    (let ((strings (collect-if get-locale~ (collect-type Localized-String children))))
      (and (pair? strings)
           (apply new Locales (alist->plist (map (lambda (child <Localized-String>)
                                                   (cons (get-locale~ child) (get-string~ child)))
                                                 strings))))))
  
  
  (method override (validate-component validation-context)
    (define (get-duplicates locale remaining duplicates)
      (if (null? remaining)
          duplicates
        (get-duplicates (car remaining) (cdr remaining) (if (and (not (memq? locale duplicates))
                                                                 (memq? locale remaining))
                                                            (cons locale duplicates)
                                                          duplicates))))
    
    (when (pair? children)
      (let ((localized-strings (collect-type Localized-String children)))
        (when (< (length localized-strings) (length children))
          (add-violation~ validation-context message: "expects all children to be Localized-String"))
        (map (lambda (locale)
               (add-violation~ validation-context message: (format "expects unique child names: {a}" locale)))
             (get-duplicates #f (collect get-locale~ children) '()))))
    (nextmethod validation-context))
      
  
  (method meta override (get-class-descriptor)
    (new Localized-String-Group-Descriptor)))


;;;
;;;; Helper functions
;;;


(definition public (find-localized-string-group component <Component> group-name)
  (find-if (lambda (maybe-group) 
             (and (equal? group-name (get-name~ maybe-group)) 
                  (is? maybe-group Localized-String-Group)))
           (get-children~ component)))


(definition public (get-localized-strings component group-name)
  (let ((group (find-localized-string-group component group-name)))
    (and group
         (get-contents~ group))))


;;;
;;;; Locale-Node
;;;


(class Locale-Node extends Component
  
  
  (form
    (<install>
      (<Localized-String-Group> name: title)))
  
  
  (property title initialize #f accessors generate)
    
  
  (method public (register-locale override? recursive?)
    (register-locale (new Locale 
                       (symbol->keyword name) 
                       (and (is? parent Locale-Node)
                            (symbol->keyword (get-name~ parent)))
                       (get-contents~ (find-type Localized-String-Group)))
                     override?)
    (when recursive?
      (for-each (lambda (child)
                  (when (is? child Locale-Node)
                    (register-locale~ child override? #t)))
                children)))
  
  
  (method override (validate-component validation-context)
    (nextmethod validation-context)
    (unless (find-ascendant Locale-Tree include-self?: #t)
      (add-violation~ validation-context message: "Locale-Node must descend from Locale-Tree")))
  
  
  (method meta override (get-class-descriptor)
    (new Locale-Node-Descriptor)))


;;;
;;;; Locale-Tree
;;;


(class Locale-Tree extends Locale-Node
  
  (form
    (<install>                  name: root
      (<title~> name: root string: ""))))


;;;
;;;; Design
;;;


(submodule design


(import (jazz.designer))


(class Localized-String-Descriptor extends Component-Descriptor
  
  
  (form
    (<install>                              image: {Image-Resource "All"} can-rename?: #f
      (<properties~>
        (<Property-Descriptor> name: string
          (<String-Domain>     name: domain))))))


(class Localized-String-Group-Descriptor extends Component-Descriptor
  
  
  (method override (component-get-categorized-addable-classes component)
    `((,(reference Localized-String)))))


(class Locale-Node-Descriptor extends Component-Descriptor
  
  
  (form
    (<install>
      (<properties~>
        (<Property-Descriptor> name: title
          (<Localized-Domain>  name: domain)))
      (<children~>
        (<Child-Descriptor>                 target: title title: "Title" classes: ({Reference Localized-String-Group})))))
  
  
  (method override (component-get-categorized-addable-classes component)
    `((,(reference Locale-Node)))))))
