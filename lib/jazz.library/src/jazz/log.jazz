;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Highlevel Logger
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module jazz.log jazz


(import (jazz.io)
        (jazz.jml))


;;;
;;;; Log
;;;


(class Log extends Object
  
  
  (slot name           initialize #f getter generate)
  (slot file           initialize #f getter generate)
  (slot last-mark      initialize #f)
  (slot read-error?    initialize #f)
  (slot current-node   initialize #f getter generate)
  (slot toplevel-nodes initialize #f)
  (slot keep-nodes?    initialize #f)
  
  
  (method override (initialize (name: name #f) (file: file #f) (load?: load? #f) (keep-nodes?: keep-nodes? #f))
    (nextmethod)
    (set! name~self name)
    (set! file~self file)
    (when file
      (create-directories~ file))
    (set! current-node~self #f)
    (set! toplevel-nodes~self (new List-Factory))
    (set! keep-nodes?~self keep-nodes?)
    (when load?
      (load-toplevel-nodes)))
  
  
  (method override (print output readably)
    (print-unreadable self output
      (lambda (output)
        (format output "{?{s}~}"
          file))))
  
  
  ;;;
  ;;;; Access
  ;;;
  
  
  (method public (get-toplevel-nodes)
    (get-list~ toplevel-nodes))
  
  
  ;;;
  ;;;; I/O
  ;;;
  
  
  (method public (reload)
    (if (not file)
        (error "Log {s} has no associated file" name)
      (load-toplevel-nodes)))
  
  
  (method (load-toplevel-nodes)
    (reset~ toplevel-nodes)
    (call-with-input-file (path-settings file eol-encoding: 'cr-lf)
      (lambda (port)
        (let (iterate)
          (let ((expr (read port)))
            (when (not (eof-object? expr))
              (let ((node (parse-jml expr)))
                (put~ toplevel-nodes node))
              (iterate)))))))
  
  
  @convert
  (method (load-toplevel-nodes)
    (define (handle-read-error current-mark)
      ;; Should create a Mark class to encapsulate those four values
      (define (get-mark-position mark)
        (first mark))
      
      (define (get-mark-line mark)
        (third mark))
      
      (define (get-mark-column mark)
        (fourth mark))
      
      (if (and read-error? (= (get-mark-position last-mark)
                              (get-mark-position current-mark)))
          (let ((file-path (parse~ file))
                (line (+ 1 (get-mark-line current-mark)))
                (column (+ 1 (get-mark-column current-mark))))
            (message-box (format "Cannot process log file {a}{%}at line {a}, column {a}" file-path line column)))
        (set! read-error? #t)))
    
    (with ((input (new File-Reader file sharing: 'read/write)))
      (when last-mark
        (set-reader-file-mark input last-mark))
      (let ((done? #f)
            (current-mark last-mark))
        (catch (Error err
                      (handle-read-error current-mark))
          (while (not done?)
            (set! current-mark (reader-file-mark input))
            (let ((expr (read input)))
              (if (eof-object? expr)
                  (set! done? #t)
                (let ((node (parse-jml expr)))
                  (put~ toplevel-nodes node)))))
          (set! read-error? #f))
        (set! last-mark current-mark))))
  
  
  ;;;
  ;;;; Toplevel
  ;;;
  
  
  (method (add-toplevel-node node)
    (when (or keep-nodes? (not file))
      (put~ toplevel-nodes node)))
  
  
  (method (output-toplevel-node node)
    (when file
      (call-with-output-file (path-settings file append: #t @convert sharing: @convert 'read)
        (lambda (port)
          (pretty-print~ node port)
          (newline port)
          (force-output port)))))
  
  
  ;;;
  ;;;; Logging
  ;;;
  
  
  (method public (with-node node proc)
    (let ((parent current-node)
          (preserved current-node))
      (when (not parent)
        (add-toplevel-node node))
      (prog1 (unwind-protect
                 (begin
                   (set-parent~ node parent)
                   (set! current-node node)
                   (proc node))
               (set! current-node preserved))
        (when (not parent)
          (output-toplevel-node node)))))
  
  
  (method public (log-node node)
    (let ((parent current-node))
      (set-parent~ node parent)
      (when (not parent)
        (add-toplevel-node node)
        (output-toplevel-node node))
      node))
  
  
  (method public (log-entry tag name message data (location: location #f))
    (log-node (new-entry tag name message data location: location)))
  
  
  (method public (new-entry tag name message data (location: location #f))
    (let ((entry (new JML-Element #f (or tag 'entry))))
      (set-property~ entry 'name name)
      (set-property~ entry 'message message)
      (set-property~ entry 'data data)
      (set-property~ entry 'location location)
      entry))
  
  
  (method public (clear)
    ;; clear memory and file content
    (unimplemented 'clear)))


;;;
;;;; Logging
;;;


(definition Logs
  (new List-Factory))


(definition package (get-logs)
  (get-list~ Logs))


(definition package (timestamped-log (base #f))
  (timestamped-file {Directory Settings "logs"} base "jlog"))


(definition with-add-log-mutex
  (let ((mutex (make-mutex 'add-log)))
    (lambda (thunk)
      (mutex-lock! mutex)
      (prog1 (thunk)
        (mutex-unlock! mutex)))))


(definition package (add-log log)
  (with-add-log-mutex
    (lambda ()
      (unless (memq? log (get-logs))
        (put~ Logs log)))))


(definition package (effective-log)
  (or (current-log)
      (let ((log (default-log)))
        (current-log log)
        (add-log log)
        log)))


(definition (default-log)
  (new Log name: "Default"))


(definition public current-log
  (make-parameter #f))


(definition public (with-log log thunk (name: name #f) (file: file #f))
  (parameterize ((current-log log))
    (thunk))
  (let ((name (get-name~ log)))
    (when (and name (not file))
      (add-log log))))


(definition public (with-node proc (node: node #f) (tag: tag #f) (name: name #f) (message: message #f) (data: data #f) (log: log (effective-log)))
  (let ((node (or node (new-entry~ log tag name message data))))
    (with-node~ log node proc)))


(definition public (log-node node (log: log (effective-log)))
  (log-node~ log node))


(definition public (log-entry (tag: tag #f) (name: name #f) (message: message #f) (data: data #f) (log: log (effective-log)))
  (log-entry~ log tag name message data))


(definition public (log-properties properties (tag: tag #f) (name: name #f) (message: message #f) (data: data #f) (log: log (effective-log)))
  (let ((output (open-output-string))
        (first? #t))
    (for-each-property (lambda (property value)
                         (if first?
                             (set! first? #f)
                           (format output ", "))
                         (format output "{a}: {a}" (keyword->symbol property) value))
      properties)
    (let ((message (get-output-string output)))
      (log-entry tag: tag name: name message: message data: data log: log))))


(definition public (new-log-node (tag: tag #f) (name: name #f) (message: message #f) (data: data #f) (log: log (effective-log)))
  (new-entry~ log tag name message data))


;;;
;;;; Profiling
;;;


@wait
(definition public (with-profile proc (node: node #f) (tag: tag #f) (name: name #f) (message: message #f) (data: data #f) (log: log (effective-log)))
  (with-node
    (lambda (node)
      (let ((result #f))
        (log-profile name: 'before log: log)
        ;; this is ugly but necessary not to change stack depth
        (set! result (proc node))
        (log-profile name: 'after log: log)
        result))
    node: (or node (new-entry~ log tag name message data))))


@wait
(definition public (log-profile (name: name #f) (log: log (effective-log)))
  (gc)
  (log-node (resources-snapshot name: name) log: log))


@wait
(definition public (log-stack (tag: tag #f) (name: name #f) (message: message #f) (log: log (effective-log)))
  (let ((data (new Stack-Snapshot)))
    (log-entry tag: tag name: name message: message data: data log: log))))
