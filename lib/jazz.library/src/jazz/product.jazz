;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Jazz Products
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2012
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module jazz.product jazz


(import (jazz.io))


;;;
;;;; Install
;;;


(cond-expand
  (cocoa
    (definition public (install-application descriptor destination (name: name #f) (platform?: platform? #f) (git?: git? #f) (files: files #f))
      (let ((bundle (product-descriptor-build-bundle descriptor)))
        (when bundle
          (let ((src-root {Directory Build})
                (dst-root destination)
                (bundle-app (format "{a}.app" bundle)))
            (let ((src-app (new-directory~ src-root bundle-app))
                  (dst-app (new-directory~ dst-root (or name bundle-app)))
                  (platform-libraries '("libcairo.2.dylib"
                                        "libfontconfig.dylib"
                                        "libfreetype.dylib"
                                        "libpixman-1.0.dylib"
                                        "libpng15.15.dylib")))
              (let ((macos-dir (new-directory~ dst-app '("Contents" "MacOS")))
                    (libraries (if platform? platform-libraries '())))
                ;; bundle
                (install-directory~ src-app dst-app
                  filter: (lambda (action pathname)
                            (let ((parent-dir (get-parent~ pathname)))
                              (cond ((pathname=? parent-dir macos-dir)
                                     (not (and (eq? action 'delete)
                                               (let ((filename (get-name~ pathname)))
                                                 (or (filename=? filename "lib")
                                                     (filename=? filename ".repository")
                                                     (member? filename libraries test: filename=?))))))
                                    (else
                                     #t))))
                  feedback: (lambda (action pathname)
                              (build-feedback "; {a} {a}..." action (get-name~ pathname))))
                ;; repository
                (install-file~ (new-file~ src-root ".repository") (new-file~ macos-dir ".repository")
                  feedback: (lambda (action pathname)
                              (build-feedback "; {a} {a}..." action (get-name~ pathname))))
                ;; libraries
                (for-each (lambda (library)
                            (install-file~ (new-file~ src-root library) (new-file~ macos-dir library)
                              feedback: (lambda (action pathname)
                                          (build-feedback "; {a} {a}..." action (get-name~ pathname)))))
                          libraries)
                ;; lib
                (install-directory~ (new-directory~ src-root "lib") (new-directory~ macos-dir "lib")
                  filter: (lambda (action pathname)
                            (not (and (file? pathname)
                                      (member? (get-extension~ pathname) '("c" "m" "o" "dgs") test: extension=?))))
                  feedback: (lambda (action pathname)
                              (build-feedback "; {a} {a}..." action (get-name~ pathname)))))))))))
  (windows
    (definition public (install-application descriptor destination (name: name #f) (executable?: executable? #t) (platform?: platform? #f) (git?: git? #f) (files: files '()))
      (let ((descriptor-name (product-descriptor-name descriptor)))
        (let ((src-root {Directory Build})
              (dst-root (new-directory~ destination (or name (->string descriptor-name))))
              (platform-libraries '("libcairo-2.dll"
                                    "libfontconfig-1.dll"
                                    "libfreetype-6.dll"
                                    "libpixman-1-0.dll"
                                    "libexpat-1.dll"
                                    "libpng16-16.dll"
                                    "zlib1.dll"))
              (git-libraries '("libgit2.dll")))
          ;; appl
          (for-each (lambda (library)
                      (install-file~ (new-file~ src-root library) (new-file~ dst-root library)
                        feedback: (lambda (action pathname)
                                    (build-feedback "; {a} {a}..." action (get-name~ pathname)))))
                    (append (if executable? (list (format "{a}.exe" descriptor-name)) '())
                            (list ".repository")
                            files))
          ;; libraries
          (for-each (lambda (library)
                      (install-file~ (new-file~ src-root library) (new-file~ dst-root library)
                        feedback: (lambda (action pathname)
                                    (build-feedback "; {a} {a}..." action (get-name~ pathname)))))
                    (append (if platform? platform-libraries '())
                            (if git? git-libraries '())))
          ;; lib
          (install-directory~ (new-directory~ src-root "lib") (new-directory~ dst-root "lib")
            filter: (lambda (action pathname)
                      (not (and (file? pathname)
                                (member? (get-extension~ pathname) '("c" "m" "o" "dgs") test: extension=?))))
            feedback: (lambda (action pathname)
                        (build-feedback "; {a} {a}..." action (get-name~ pathname))))))))
  (else
    (definition (install-application descriptor destination (name: name #f))
      ))))
