;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Profiler
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module jazz.profiler jazz


(export (jazz.profiler.syntax))


(import (jazz.jml)
        (jazz.system))


(definition public profiler-on?
  (make-parameter #f))


(define *profiles*
  (make-table test: eq?))


(definition public (get-profiles)
  *profiles*)


(definition public (reset-profiles)
  (empty-table *profiles*))


(define time-spent-in-children
  (make-parameter 0))


(definition public (profile-code name proc)
  (if (profiler-on?)
      (let* ((start-time (get-performance-counter))
             (total-elapsed-time 0)
             (profile-record (or (table-ref *profiles* name #f)
                                 (let ((profile-record (cons 0 0)))
                                   (table-set! *profiles* name profile-record)
                                   profile-record)))
             (result (parameterize ((time-spent-in-children 0))
                       (prog1 (proc)
                         (set! total-elapsed-time (- (get-performance-counter) start-time))
                         (set-car! profile-record (+ (car profile-record) 1))
                         (set-cdr! profile-record (+ (cdr profile-record) (- total-elapsed-time (time-spent-in-children))))))))
        (time-spent-in-children (+ (time-spent-in-children) total-elapsed-time))
        result)
    (proc)))


(definition public (profiles->jml profiles)
  (map (lambda (profile)
         (bind (name count . duration) profile
           (new JML-Element #f 'profile properties: (list 'name name 'count count 'duration duration))))
       (sort > (table->list profiles) key: cddr))))
