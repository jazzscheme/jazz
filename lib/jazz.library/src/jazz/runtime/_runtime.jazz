;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Jazz Runtime
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module jazz.runtime jazz


(import (jazz.io))


;;;
;;;; Source
;;;


(definition public (find-unit-source unit-name)
  (define (find-unit-path unit-name)
    (let ((src (find-unit-src unit-name #f #f)))
      (if (not src)
          #f
        (resource-pathname src))))
  
  (let ((path (find-unit-path unit-name)))
    (if (not path)
        #f
      (anchorize~ (new File (tokenise-filename path))))))


;;;
;;;; Locator
;;;


(definition public (split-locator locator)
  (let (iterate (scan (reverse (split-reference locator)))
                (name '()))
    (if (not-null? scan)
        (let ((unit-name (apply compose-reference (reverse scan))))
          (if (find-unit-source unit-name)
              (values unit-name name)
            (iterate (cdr scan) (cons (car scan) name))))
      (values #f #f))))


(definition public (locator->declaration locator)
  (define (locate declaration path)
    (if (null? path)
        declaration
      (let ((subdeclaration (find-declaration declaration (car path))))
        (when subdeclaration
          (locate subdeclaration (cdr path))))))
  
  (receive (unit-name declaration-path) (split-locator locator)
    (when unit-name
      (let ((declaration (outline-unit unit-name)))
        (when (is? declaration Module-Declaration)
          (locate declaration declaration-path))))))


(definition public (determine-class-export class)
  (determine-locator-export (get-name~ class)))


(definition public (determine-locator-export locator)
  (let ((unit (reference-unit locator))
        (name (reference-name locator)))
    (let (iter (module-name unit))
      (let ((module (require-module module-name)))
        (if (and (eq? (get-access~ module) 'public)
                 (table-ref (get-exports~ module) name #f))
            module-name
          (let ((path (butlast (split-identifier module-name))))
            (if (null? path)
                #f
              (iter (apply compose-identifier path)))))))))


;;;
;;;; Runtime references
;;;


(definition public (publicize-runtime-reference runtime-reference)
  (let ((serialized (serialize-runtime-reference runtime-reference)))
    (if (eq? (first serialized) 'module-public)
        runtime-reference
      (let* ((locator (second serialized))
             (unit (determine-locator-export locator)))
        (deserialize-runtime-reference `(module-public ,unit ,(reference-name locator)))))))


(definition public (parse-runtime-reference runtime-reference)
  (cdr (serialize-runtime-reference (publicize-runtime-reference runtime-reference))))


;;;
;;;; Iteration
;;;


(definition public (repository-units repository)
  (load-build)
  (let ((table (make-table test: eq?)))
    (iterate-packages repository
      (lambda (package)
        (for-each (lambda (product)
                    (let ((pair (assq 'update (cdr product))))
                      (when pair
                        (let ((updated-names (cdr pair)))
                          (for-each (lambda (updated-name/cond)
                                      (define (process-updated-name updated-name)
                                        (for-each-subunit updated-name
                                          (lambda (unit-name declaration phase)
                                            (let ((actual-package (table-ref table unit-name #f)))
                                              (cond (actual-package (debug 'duplicate (package-name actual-package) (package-name package) updated-name unit-name))
                                                    (else (table-set! table unit-name package)))))))
                                      
                                      (if (symbol? updated-name/cond)
                                          (process-updated-name updated-name/cond)
                                        ;; this could possibly be used to be smarter about conditional inclusion of modules
                                        (for-each (lambda (clause)
                                                    (for-each process-updated-name (cdr clause)))
                                                  (cdr updated-name/cond))))
                                    updated-names)))))
                  (package-products package))))
    (sort string<? (table-keys table) key: symbol->string)))


(definition public (iterate-packages repository proc)
  (for-each proc (repository-packages repository)))


(definition public (iterate-units proc (repositories: repositories #f) (feedback: feedback #f))
  (let ((count 0)
        (repositories (or repositories (get-repositories))))
    (for-each (lambda (repository)
                (unless (repository-binary? repository)
                  (for-each (lambda (unit-name)
                              (when feedback
                                (feedback unit-name))
                              (proc unit-name)
                              (increase! count))
                            (repository-units repository))))
              repositories)))


(definition public (outline-all (feedback: feedback #f))
  (iterate-units outline-unit feedback: feedback))


(definition public (walk-all (feedback: feedback #f))
  (iterate-units walk-unit feedback: feedback))


(definition public (expand-all (feedback: feedback #f))
  (iterate-units expand-unit feedback: feedback))


(definition public (load-all (feedback: feedback #f))
  (iterate-units load-unit feedback: feedback))


;;;
;;;; Statistics
;;;


(definition public (load-statistics)
  (list image: image-load-counter object: object-load-counter interpreted: interpreted-load-counter)))
