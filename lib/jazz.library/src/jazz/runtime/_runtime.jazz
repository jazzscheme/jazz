;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Jazz Runtime
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.runtime jazz


(import (jazz.io))


(definition public (find-category-source category)
  (let ((name (type-name category)))
    (let ((path (split-identifier name)))
      ;; this is a bit of a heuristic before a better solution
      (let ((module-name (apply compose-name (butlast path))))
        (find-module-source module-name)))))


(definition public (find-module-source module-name)
  (let ((src (find-module-src module-name #f #f)))
    (if (not src)
        #f
      (anchorize~ (new File (tokenise-filename (resource-pathname src)))))))


(definition public (repository-modules repository)
  (load-module 'core.module.builder)
  (let ((table (make-table test: eq?)))
    (iterate-packages repository
      (function (package)
        (for-each (function (product)
                    (let ((pair (assq 'update (cdr product))))
                      (when pair
                        (let ((updated-names (cdr pair)))
                          (for-each (function (updated-name)
                                      (for-each-submodule updated-name
                                                          (function (module-name declaration phase)
                                                            (let ((actual-package (table-ref table module-name {})))
                                                              (cond (actual-package (debug 'duplicate (package-name actual-package) (package-name package) updated-name module-name))
                                                                    (else (table-set! table module-name package)))))))
                                    updated-names)))))
                  (package-products package))))
    (sort string<? (table-keys table) key: symbol->string)))


(definition public (iterate-packages repository proc)
  (for-each proc (repository-packages repository)))


(definition public (iterate-modules proc (repositories: repositories {}) (feedback: feedback {}))
  (let ((count 0)
        (repositories (either repositories (get-repositories))))
    (for-each (function (repository)
                (unless (repository-binary? repository)
                  (for-each (function (module-name)
                              (when feedback
                                (feedback module-name))
                              (proc module-name)
                              (increase! count))
                            (repository-modules repository))))
              repositories)
    (when feedback
      (feedback {}))))


(definition public (outline-all (feedback: feedback {}))
  (iterate-modules outline-module feedback: feedback))


(definition public (walk-all (feedback: feedback {}))
  (iterate-modules walk-module feedback: feedback))


(definition public (expand-all (feedback: feedback {}))
  (iterate-modules expand-module feedback: feedback))


(definition public (load-all (feedback: feedback {}))
  (iterate-modules load-module feedback: feedback)))
