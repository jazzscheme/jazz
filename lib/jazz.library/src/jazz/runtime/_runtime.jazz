;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Jazz Runtime
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module jazz.runtime jazz


(require (dialect.development))

(import (jazz.io)
        (jazz.library))


;;;
;;;; Source
;;;


(definition public (find-unit-source unit-name)
  (define (find-unit-path unit-name)
    (let ((src (find-unit-src unit-name #f #f)))
      (if (not src)
          #f
        (resource-pathname src))))
  
  (let ((path (find-unit-path unit-name)))
    (if (not path)
        #f
      (anchorize~ (new File (tokenise-filename path))))))


;;;
;;;; Locator
;;;


(definition public (split-locator locator)
  (let (iterate (scan (reverse (split-reference locator)))
                (name '()))
    (if (not-null? scan)
        (let ((unit-name (apply compose-reference (reverse scan))))
          (if (find-unit-source unit-name)
              (values unit-name name)
            (iterate (cdr scan) (cons (car scan) name))))
      (values #f #f))))


(definition public (locator->declaration locator)
  (define (locate declaration path)
    (if (null? path)
        declaration
      (let ((subdeclaration (find-declaration declaration (car path))))
        (when subdeclaration
          (locate subdeclaration (cdr path))))))
  
  (receive (unit-name declaration-path) (split-locator locator)
    (when unit-name
      (let ((declaration (outline-unit unit-name)))
        (when (is? declaration Module-Declaration)
          (locate declaration declaration-path))))))


;;;
;;;; Reference
;;;


(definition public (runtime-class-reference class)
  (deserialize-runtime-reference (serialize-class class)))


(definition public (publicize-runtime-reference runtime-reference)
  (let ((serialized (serialize-runtime-reference runtime-reference)))
    (if (eq? (first serialized) 'module-public)
        runtime-reference
      (let ((reference (second serialized)))
        (deserialize-runtime-reference (serialize-reference reference))))))


(definition public (parse-runtime-reference runtime-reference)
  (cdr (serialize-runtime-reference (publicize-runtime-reference runtime-reference))))


(definition public (runtime-reference->reference runtime-reference)
  (let ((ref (new Reference #f)))
    (setup-context~ ref (new Environment #f (lambda (sym) runtime-reference)))
    ref))


;;;
;;;; Repository
;;;


(definition public (repository-units repository)
  (load-runtime)
  (let ((table (make-table test: eq?)))
    (iterate-packages repository
      (lambda (package)
        (for-each (lambda (product)
                    (let ((pair (assq 'update (cdr product))))
                      (when pair
                        (let ((updated-names (cdr pair)))
                          (for-each (lambda (updated-name/cond)
                                      (define (process-updated-name updated-name)
                                        (for-each-subunit updated-name
                                          (lambda (unit-name declaration phase)
                                            @debug
                                            (let ((actual-package (table-ref table unit-name #f)))
                                              (when actual-package
                                                (debug 'duplicate (package-name actual-package) (package-name package) updated-name unit-name)))
                                            (table-set! table unit-name package))))
                                      
                                      (if (symbol? updated-name/cond)
                                          (process-updated-name updated-name/cond)
                                        ;; this could possibly be used to be smarter about conditional inclusion of modules
                                        (for-each (lambda (clause)
                                                    (for-each process-updated-name (cdr clause)))
                                                  (cdr updated-name/cond))))
                                    updated-names)))))
                  (package-products package))))
    (sort string<? (table-keys table) key: symbol->string)))


(definition public (iterate-packages repository proc)
  (for-each proc (repository-packages repository)))


(definition public (iterate-units proc (repositories: repositories #f) (feedback: feedback #f))
  (let ((repositories (or repositories (get-repositories))))
    (for-each (lambda (repository)
                (unless (repository-binary? repository)
                  (for-each (lambda (unit-name)
                              (when feedback
                                (feedback unit-name))
                              (proc unit-name))
                            (repository-units repository))))
              repositories)))


(definition public (outline-all (feedback: feedback #f))
  (iterate-units outline-unit feedback: feedback))


(definition public (walk-all (feedback: feedback #f))
  (iterate-units walk-unit feedback: feedback))


(definition public (expand-all (feedback: feedback #f))
  (iterate-units expand-unit feedback: feedback))


(definition public (load-all (feedback: feedback #f))
  (iterate-units load-unit feedback: feedback))


;;;
;;;; Product
;;;


(definition public (product-dependencies product-name)
  (load-runtime)
  (let ((queue (new-queue)))
    (define (add name)
      (unless (memq? name (queue-list queue))
        (enqueue queue name)))
    
    (define (iter name)
      (receive (package descriptor) (get-product-descriptor name)
        (add descriptor)
        (for-each iter (cond-expanded-product-descriptor-dependencies product-name descriptor))))
    
    (iter product-name)
    (queue-list queue)))


(definition public (product-units product-name)
  (load-runtime)
  (let ((queue (new-queue)))
    (for-each (lambda (descriptor)
                (for-each (lambda (unit-name)
                            (for-each-subunit unit-name
                              (lambda (unit-name declaration phase)
                                (enqueue queue unit-name))))
                          (cond-expanded-product-descriptor-update product-name descriptor)))
              (product-dependencies product-name))
    (queue-list queue)))


;;;
;;;; Module
;;;


(definition public (module-undefine module-name name)
  (let ((module-declaration (get-catalog-entry module-name)))
    (define (clean-metaclass)
      (let ((declaration (find-declaration-child module-declaration name)))
        (when (is? declaration Class-Declaration)
          (let ((metaclass-name (string->symbol (format "{a}~~Class" name))))
            (clean-entry metaclass-name)))))
    
    (define (clean-entry name)
      (define (clean-global)
        (let ((declaration (find-declaration-child module-declaration name)))
          (when declaration
            (let ((locator (get-locator~ declaration)))
              (when (global-bound? locator)
                (global-unbind! locator))))))
      
      (define (clean-lookup)
        (define (clean access)
          (let ((lookup (get-access-lookup module-declaration access)))
            (table-clear lookup name)))
        
        (clean jazz:private-access)
        (clean jazz:public-access))
      
      (define (clean-children)
        (remove-declaration-child module-declaration name))
      
      (clean-global)
      (clean-lookup)
      (clean-children))
  
    (assert module-declaration
      (clean-metaclass)
      (clean-entry name))))


;;;
;;;; Statistics
;;;


(definition public (load-statistics)
  (list image: image-load-counter object: object-load-counter interpreted: interpreted-load-counter)))
