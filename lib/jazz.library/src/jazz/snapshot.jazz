;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Process Snapshots
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module jazz.snapshot jazz


(import (jazz.debuggee)
        (jazz.editor.jazz.inspector)
        (jazz.io)
        (jazz.library)
        (jazz.locale)
        (jazz.platform)
        (jazz.system)
        (time))


(declare (proper-tail-calls))


;;;
;;;; Settings
;;;


(define-setting snapshots-directory
  {Directory Jazz-Settings "crashes"})

(define-setting snapshot-max-depth
  2)

(define-setting snapshot-max-width
  32768)

(define-setting snapshot-max-content
  100)

(define-setting snapshot-max-entries
  #f)


;;;
;;;; Snapshot
;;;


(definition public (snapshot-process . rest)
  (disable-interrupts!)
  (prog1 (continuation-capture
           (lambda (continuation)
             (bind-keywords ((directory #f) . others) rest
               (let ((file (timestamped-file (or directory (snapshots-directory)) (current-process-present) "snapshot")))
                 (create-directories~ file)
                 (call-with-output-file (path-settings file)
                   (lambda (output)
                     (apply print-process-snapshot continuation output others)))
                 file))))
    (enable-interrupts!)))


(definition (print-process-snapshot continuation output (reason: reason #f) (exception: exception #f) (max-depth: max-depth (snapshot-max-depth)) (max-width: max-width (snapshot-max-width)) (max-content: max-content (snapshot-max-content)) (max-entries: max-entries (snapshot-max-entries)))
  (let ((cache (make-table test: eqv?)))
    (define package-info-serial first)
    (define package-info-class second)
    (define package-info-presentation third)
    (define package-info-more? fourth)
    
    (define (print-process)
      (define (present-process-version)
        (let ((process (get-process)))
          (when process
            (present~ (process-version~ process)))))
      
      (let ((name (current-process-present))
            (version (present-process-version))
            (date (present-date (current-date)))
            (id (current-process-id)))
        (format output "(<process> name: {s}{? version: {s}~} date: {s} id: {s}" name version date id))
      (when reason
        (format output " reason: {s}" reason))
      (when exception
        (format output " exception: {s}" (exception-reason exception)))
      (force-output output)
      (print-threads)
      (force-output output)
      (print-values)
      (format output "){%}"))
    
    (define (print-threads)
      (format output "{%}")
      (format output "  (<threads>")
      (print-thread (current-thread) continuation)
      (for-each (lambda (thread)
                  (when (and (neq? thread (current-thread))
                             (thread-state-active? (thread-state thread)))
                    (let ((continuation (thread-cont thread)))
                      (print-thread thread continuation))))
                (top-threads))
      (format output ")"))
    
    (define (print-thread thread continuation)
      (define (stop-kind thread)
        (let ((stops (get-thread-stops thread)))
          (when (not-null? stops)
            (get-kind~ (last stops)))))
      
      (format output "{%}")
      (let ((name (thread-name thread))
            (state (present-thread-state (thread-state thread)))
            (stop (stop-kind thread)))
        (format output "    (<thread>")
        (when (and name (specified? name))
          (format output " name: {s}" name))
        (when state
          (format output " state: {s}" state))
        (when stop
          (format output " stop: {s}" stop)))
      (force-output output)
      (when continuation
        (print-stack continuation))
      (format output ")"))
    
    (define fo
      force-output)
    
    (define (print-stack continuation)
      (loop (for cont in (get-continuation-stack continuation #f))
            (do (let ((name (get-continuation-name cont))
                      (location (get-continuation-location cont))
                      (variables (get-continuation-lexical-environment cont)))
                  (format output "{%}")
                  (format output "      (<frame> name: {s}" name)
                  (when location
                    (format output " location: {s}" location))
                  (fo output)
                  (loop (for variable in variables)
                        (do (format output "{%}")
                            (bind (name value mutable?) variable
                              (let ((serial (object->serial value)))
                                (let ((info (or (table-ref cache serial #f)
                                                (let ((info (package-info value mutable?: mutable? max-width: max-width)))
                                                  (table-set! cache serial info)
                                                  info))))
                                  (let ((presentation (package-info-presentation info)))
                                    (let ((atomic? (and (atom? value)
                                                        ;; this test is necessary as object->string can return a truncated unreadable string
                                                        (< (string-length presentation) max-width))))
                                      (format output "        (<variable> name: {s} serial: {s}{?: presentation: {a}~})" name serial atomic? presentation)
                                      (fo output))))))))
                  (format output ")")
                  (force-output output)))))
    
    (define (print-values)
      (let ((content-cache (make-table test: eqv?)))
        (let ((depth-values (map (lambda (kv) (serial->object (second kv))) (table->list cache))))
          (loop (repeat max-depth)
                (let ((missed-values '()))
                  (define (packager value (kind: kind :value))
                    (let ((serial (object->serial value)))
                      (if (table-ref cache serial #f)
                          serial
                        (let ((info (package-info value kind: kind)))
                          (table-set! cache serial info)
                          (set! missed-values (cons value missed-values))
                          serial))))
                  
                  (for-each (lambda (value)
                              (unless (port? value) ; hack - boomsky with buffers
                                (let ((content (inspect-value value max-width: max-width max-content: max-content packager: packager)))
                                  (unless (null? content)
                                    (let ((serial (object->serial value)))
                                      (table-set! content-cache serial content))))))
                            depth-values)
                  (set! depth-values missed-values))))
        (format output "{%}")
        (format output "    (<values>")
        (for-each (lambda (info)
                    (bind (key serial class presentation more? mutable? kind) info
                      (format output "{%}")
                      (format output "      (<value> serial: {a} class: {s} presentation: {s}" serial class presentation)
                      (let ((content (table-ref content-cache serial '())))
                        (when (not-null? content)
                          (format output " content: {s}" content)))
                      (format output ")")))
                  (sort < (table->list cache) key: car))
        (format output ")")))
  
    (print-process)))


;;;
;;;; Exception
;;;


(definition public (snapshot-exception-debugger (feedback: feedback #f))
  (lambda (exception)
    (with-system-exception-debugger
      (lambda ()
        (let ((snapshot (snapshot-process exception: exception)))
          (when feedback
            (feedback exception snapshot)))
        (exit 1)))))


(definition public (application-exception-debugger)
  (snapshot-exception-debugger
    feedback: application-exception-feedback))


(definition public (application-exception-feedback exception snapshot)
  (let ((process (get-process)))
    (system-message (format "{a} {a}{%}{%}{a}.{%}{a}.{%}{%}{a}{%}    {a}{a}"
                            (localize {Locales english: "An unexpected problem occured while executing" french: "Une erreur imprévue s'est produite lors de l'exécution de"})
                            (current-process-present)
                            (localize {Locales english: "This will terminate the application immediately" french: "Ceci entraine la terminaision immédiate de l'application"})
                            (localize {Locales english: "Unsaved work currently in progress will be lost" french: "Tout travaux en cours non sauvegardés seront perdus"})
                            (localize {Locales english: "A log file has been generated at" french: "Un fichier de log a été généré à"})
                            (parse~ snapshot)
                            (if process
                                (let ((email (process-email~ process)))
                                  (if email
                                      (format "{%}{%}{a}{%}{a}: {a}."
                                              (localize {Locales english: "Help us fix this problem by sending the log file and any comments" french: "Aidez nous à corriger ce problème en fesant parvenir le fichier de log"})
                                              (localize {Locales english: "about how the problem occured to" french: "ainsi que tout commentaires explicatifs à"})
                                              email)
                                    ""))
                              ""))
                    title: (localize {Locales english: "Application Error" french: "Erreur d'application"})
                    type: 'problem))))
