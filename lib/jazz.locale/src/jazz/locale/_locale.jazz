;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Localization
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module jazz.locale jazz


(definition package (construct-locales . rest)
  (apply new Locales rest))


;;;
;;;; Locales-Provider
;;;


(interface Locales-Provider
  
  (method public virtual abstract (provide-locales)))


;;;
;;;; Locales
;;;


(class Locales extends Object implements Locales-Provider
  
  
  (slot locales accessors generate)
    
    
  (method override (initialize . rest)
    (define (uniquify-locales remaining uniquified)
      (if (null? remaining)
          (reverse uniquified)
        (assert (not-null? (cdr remaining)))
        (bind (locale string . new-remaining) remaining
          (assert (keyword? locale))
          (uniquify-locales new-remaining (if (memq? locale uniquified)
                                              uniquified
                                            (cons string (cons locale uniquified)))))))
    
    (nextmethod)
    (set! locales (uniquify-locales rest '())))
  
  
  (method override (print output readably)
    (format output "~{{a}{a}{l}}"
            (category-name (class-of self))
            (if locales " " "")
            locales))
  
  
  ;;;
  ;;;; Access
  ;;;
  
  
  (method override (provide-locales)
    (map-property (lambda (locale value) locale) locales))
  
  
  ;;;
  ;;;; Localize
  ;;;
  
  
  (method public virtual (localize locale)
    (getf locales (standardize-locale locale))))


;;;
;;;; Contextual-Locales
;;;


(class Contextual-Locales extends Locales
  
  
  (slot context getter generate)
    
    
  (method override (initialize locales context)
    (set! locales~self locales)
    (set! context~self context))
  
  
  (method override (print output readably)
    (print-unreadable self output
      (lambda (output)
        )))
  
  
  ;;;
  ;;;; Localize
  ;;;
  
  
  (method override (localize locale)
    (format "{^:~}" (localize~ locales locale) context)))


(definition public (contextual-locales locales context)
  (new Contextual-Locales locales context))


;;;
;;;; Locale
;;;


(class Locale extends Object implements Locales-Provider
  
  
  (slot name        getter generate)
  (slot parent-name getter generate)
  (slot titles      getter generate)
  
  
  (method override (initialize name <Symbol> parent-name titles <Locales>)
    (nextmethod)
    (set! name~self (standardize-locale name))
    (set! parent-name~self (and parent-name (standardize-locale parent-name)))
    (set! titles~self titles))
  
  
  (method override (print output readably)
    (print-unreadable self output
      (lambda (output)
        (format output "{a}" name))))
  
  
  (method override (provide-locales)
    (list (symbol->keyword name)))
  
  
  (method public (present)
    (localize titles)))


;;;
;;;; Locale-State
;;;


(class Locale-State extends Object implements Locales-Provider
  
  
  (slot table)
  (slot changes        initialize '() getter generate)
  (slot current-locale getter generate setter explicit)
  
  
  (method override (initialize)
    (nextmethod)
    (set! current-locale~self all:)
    (set! table~self (make-table))
    (table-set! table~self all: (new Locale 'all #f (new Locales all: ""))))
  

  (method public (localize object (name current-locale~self))
    (and name
         (if (is? object Locales)
             (let ((locale (registered-locale (standardize-locale name)) current-locale))
               (or (localize~ object (get-name~ locale))
                   (localize~ self object (get-parent-name~ locale))))
           object)))
  
  
  (method override (provide-locales)
    (sort string<? (table-keys table) key: keyword->string))
  
  
  (method public (register-locale locale)
    (let ((name (get-name~ locale)))
      (cond ((not (table-ref table (get-parent-name~ locale) #f))
             (signal (new Locale-Registration-Error message: (format "Locale parent name has not been registered: {s}" (get-parent-name~ locale)))))
            ((table-ref table name #f)
             (signal (new Locale-Registration-Error message: (format "A locale has already been registered under this name: {s}" name))))
            (else
             (table-set! table name locale)))))
  
  
  (method public (unregister-locale name)
    (table-clear table (standardize-locale name)))
  
  
  (method public (registered-locale name)
    (let ((locale-name (standardize-locale name)))
      (or (table-ref table locale-name #f)
          (signal (new Locale-Registration-Error message: (format "Unregistered locale: {s}" locale-name))))))
  
  
  (method public (present-locale name)
    (present~ (registered-locale (standardize-locale name))))
  
  
  (method public (set-current-locale name (apply-changes?: apply-changes? #f) (change-procs-arg: change-procs-arg #f))
    (let ((name (standardize-locale name)))     
      (unless (eq? name current-locale)
        (assert (registered-locale name))
        (set! current-locale name)
        (when apply-changes?
          (for-each (lambda (proc)
                      (proc name change-procs-arg))
                    changes)))))
  
  
  (method public (register-locale-change proc <Procedure>)
    (set! changes (cons proc changes)))
  
  
  (method public (unregister-locale-change proc <Procedure>)
    (set! changes (remove! proc changes))))


;;;
;;;; Global
;;;


(class Localization-Error extends Error)
(class Locale-Registration-Error extends Error)


(definition public (standardize-locale loc)
  (cond ((keyword? loc) loc)
        ((enumerator? loc) (symbol->keyword (enumerator->symbol loc)))
        ((symbol? loc) (symbol->keyword loc))
        (else (signal (new Localization-Error message: (format "Invalid locale: {s}" loc))))))


(definition *locale-state*
  (new Locale-State))


(definition public (get-locale-state)
  *locale-state*)


(definition public (localize object)
  (or (localize~ *locale-state* object) "")))
