;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Localized Strings
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module jazz.locale.components jazz


(import (jazz.component)
        (jazz.component.runtime)
        (jazz.designer.view)
        (jazz.jml)
        (jazz.locale))


;;;
;;;; Locale-Node
;;;


(class Locale-Node extends Component
  
  
  (property title initialize #f accessors generate)
    
  
  (method public (get-locale)
    (and name
         (symbol->keyword name)))
  
  
  (method protected (register-node-locale locale-state)
    (register-locale~ locale-state (new Locale name (and parent (get-name~ parent)) title))
    (for-each (lambda (child)
                (when (is? child Locale-Node)
                  (register-node-locale~ child locale-state)))
              children))
  
  
  (method meta override (get-class-descriptor (context: context #f))
    (new jazz.locale.descriptors:Locale-Node-Descriptor)))


;;;
;;;; Locale-Tree
;;;


(class Locale-Tree extends Locale-Node implements Locales-Provider
  
  
  (form
    (<install> name: all title: ""))
  
  
  (method override (default-name)
    'all)
  
  
  (method public (collect-missing-localizations object)
    (if (is-not? object Locales-Provider)
        (collect-if (lambda (locale) (neq? all: locale)) (provide-locales))
      (let ((object-locales (provide-locales~ object))
            (result '()))
        (unless (memq? all: object-locales)
          (for-each-descendant
            do-nothing
            stop-test: (lambda (locale-node)
                         (cond ((memq? (get-locale~ locale-node) object-locales) #t)
                               ((every? (lambda (remaining)
                                          (not (memq? (get-locale~ remaining) object-locales)))
                                        (collect-descendants~ locale-node))
                                (set! result (cons (get-locale~ locale-node) result))
                                #t)))))
        result)))
  

  (method public (register-locales locale-state)
    (for-each-descendant
      (lambda (component level)
        (when (is? component Locale-Node)
          (register-locale~ locale-state (new Locale (get-name~ component) (get-name~ (get-parent~ component)) (get-title~ component)))))
      include-self?: #f))
  
  
  (method override (provide-locales)
    (map (compose symbol->keyword get-name~) (collect-descendants Locale-Node))))


;;;
;;;; Validation
;;;


(definition public (validate-locales value locale-tree violation-adder)
  (if locale-tree
      (let ((missing-locales (collect-missing-localizations~ locale-tree value)))
        (if (null? missing-locales)
            #f
          (violation-adder "must be localized in: {a}" (join (map keyword->string missing-locales) ", "))
          #t))
    (if (or (string? value) (is? value Locales))
        #f
      (violation-adder "must be a string or a Locales object")
      #t)))


(definition public (get-locale-tree client)
  (let* ((unit (category-unit (class-of (root-creator client))))
         (toolbox-module (find (get-toolbox-modules) unit key: get-module-name~ test: eq? return: 'item)))
    (and toolbox-module (get-locale-tree~ toolbox-module)))))
