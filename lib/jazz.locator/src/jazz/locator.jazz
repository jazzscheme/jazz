;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Locator
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module jazz.locator jazz


(hub enter)
(hub locate)
(hub reset)
(hub select-entry)
(hub setup)
(hub validate)


(class undocumented Locator extends Object
  
  
  (slot prefix     initialize #f getter generate)
  (slot reset-time initialize #f)
  (slot max-delay)
  
  
  (method override (initialize self (max-delay: max-delay 0.5))
    (nextmethod self)
    (set! self.max-delay max-delay))
  
  
  ;;;
  ;;;; Setup
  ;;;
  
  
  (method public (setup self string)
    (set! prefix string)
    (set! reset-time (+ (current-seconds) max-delay)))
  
  
  ;;;
  ;;;; Enter
  ;;;
  
  
  (method public (enter self key)
    (let ((string (string key)))
      (validate self string)
      (let ((target (if (not prefix) string (concatenate prefix string))))
        (locate self target))))
  
  
  (method package (validate self string)
    (when (and prefix (or (> (current-seconds) reset-time)
                          (di=? string prefix)))
      (reset self)))
  
  
  (method public (locate self target)
    (let ((len (cardinality target)))
      (continuation-capture
        (lambda (return)
          (iterate-entries self
            (lambda (entry rank)
              (let ((prefix (and entry (>= (cardinality entry) len) (subseq entry 0 len))))
                (when (and prefix (di=? prefix target))
                  (select-entry self rank)
                  (setup self prefix)
                  (continuation-return return)))))))))
  
  
  ;;;
  ;;;; Interface
  ;;;
  
  
  (method public virtual (iterate-entries self proc)
    )
  
  
  (method public virtual (select-entry self rank)
    )
  
  
  ;;;
  ;;;; Reset
  ;;;
  
  
  (method public (reset self)
    (set! prefix #f)
    (set! reset-time #f))))
