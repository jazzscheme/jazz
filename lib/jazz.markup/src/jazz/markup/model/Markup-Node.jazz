;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Markup Nodes
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.markup.model.Markup-Node jazz


(import (jazz.markup))


(class Markup-Node extends Object
  
  
  (slot parent)
  
  
  (method override (initialize self parent)
    (nextmethod self)
    (set! self.parent parent)
    (when parent
      (add-child parent self)))
  
  
  ;;;
  ;;;; Access
  ;;;


  (method public (get-parent self)
    parent)


  (method public (set-parent self value)
    (when parent
      (remove-child parent self))
    (set! parent value)
    (when parent
      (add-child parent self)))


  (method public (append-parent self value)
    (when parent
      (remove-child parent self))
    (set! parent value)
    (when parent
      (append-child parent self)))
  
  
  (method public (set-parent-value self value)
    (set! parent value))
  
  
  ;;;
  ;;;; Parent
  ;;;
  
  
  (method public (get-toplevel self)
    (if (not parent)
        self
      (get-toplevel parent)))
  
  
  (method public (for-each-parent self proc <procedure>)
    (when parent
      (proc parent)
      (for-each-parent parent proc)))
  
  
  (method public (for-each-ancestor self proc <procedure>)
    (proc self)
    (for-each-parent self proc))
  
  
  ;;;
  ;;;; Location
  ;;;
  
  
  (method public (get-location self)
    (if (not parent)
        '()
      (append (get-location parent)
              (get-child-location parent self))))
  
  
  (method public virtual (get-child-location self child)
    )
  
  
  ;;;
  ;;;; Markup
  ;;;
  
  
  (method public virtual abstract (->markup self)
    )
  
  
  ;;;
  ;;;; Print
  ;;;
  
  
  (method public (print-node self printer
                             (base: base 0)
                             (indent-first?: indent-first? #t)
                             (space-tag?: space-tag? #t)
                             (space-name?: space-name? #f))
    (define (compute-maxes)
      (if (or (and (not space-tag?)
                   (not space-name?))
              (printing-doc?))
          (values #f #f)
        (let ((max-tag #f)
              (max-name #f))
          (define (iter node path level)
            (when (is? node Markup-Element)
              (let* ((tag (get-tag node))
                     (name (symbol->string tag))
                     (path (cons tag path)))
                (when space-tag?
                  (let ((width (+ (cardinality name) (* level 2))))
                    (when (or (not max-tag) (> width max-tag))
                      (set! max-tag width))))
                (when space-name?
                  (for-each-property (lambda (property value)
                                       (let ((width (cardinality (cast <string> (format "{s}" value)))))
                                         (when (eq? property 'name)
                                           (when (or (not max-name) (> width max-name))
                                             (set! max-name width)))))
                                     (get-properties node)))
                (for-each (lambda (child)
                            (iter child path (+ level 1)))
                          (get-children node)))))
          
          (iter self '() base)
          (values max-tag max-name))))
    
    (define (display-spaces count output)
      (loop (repeat count)
            (do (write-char #\space output))))
    
    (with-printer printer
      (lambda (output)
        (let ((first? #t))
          (receive (max-tag max-name) (compute-maxes)
            (define (iter node path level return?)
              (when (not first?)
                (if return?
                    (newline output)
                  (display " " output)))
              (when (and return? (or indent-first? (not first?)))
                (display-spaces (* level 2) output))
              (set! first? #f)
              (if (is? node Markup-Text)
                  (let ((text (get-text node)))
                    (if (single-line? node)
                        (write text output)
                      (display "#\"" output)
                      (display text output)
                      (display "\"#" output)))
                (let* ((tag (get-tag node))
                       (name (symbol->string tag))
                       (path (cons tag path))
                       (properties (get-properties node)))
                  (display "(<" output)
                  (display tag output)
                  (display ">" output)
                  (when (and space-tag? (not-null? properties))
                    (let ((pad (- max-tag (cardinality name) (* level 2))))
                      (display-spaces pad output)))
                  (when (and space-name? max-name (not-null? properties))
                    (if (not (has-property? node 'name))
                        (display-spaces (+ 7 max-name) output)
                      (let* ((value (get-property node 'name))
                             (pres <string> (format "{s}" value)))
                        (display " name: " output)
                        (display pres output)
                        (when (> (length properties) 2)
                          (display-spaces (- max-name (cardinality pres)) output)))))
                  (let ((pad #f))
                    (for-each-property (lambda (property value)
                                         (when (or (not space-name?) (neq? property 'name))
                                           (display " " output)
                                           (display property output)
                                           (display ": " output)
                                           (write value output)))
                                       properties))
                  (let ((children (get-children node)))
                    (if (and (null? properties)
                             (= 1 (length children))
                             (let ((node (car children)))
                               (and (is? node Markup-Text)
                                    (single-line? node))))
                        (let* ((node (car children))
                               (text (get-text node)))
                          (display " " output)
                          (write text output))
                      (let ((return? (not (memq? tag '(line a)))))
                        (for-each (lambda (child)
                                    (iter child path (+ level 1) return?))
                                  children))))
                  (display ")" output))))
            
            (iter self '() base #t))))))))
