;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Markup Syntax
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.markup.syntax jazz


;;;
;;;; Form
;;;


(syntax public <form>
  (lambda (form-src usage-environment macro-environment)
    (if (null? (cdr (source-code form-src)))
        (error "Ill-formed <form>")
      (let ((form (desourcify-all (cadr (source-code form-src)))))
        (define (gather-references)
          (let ((references (make-table test: eq?)))
            (define (walk-reference reference)
              (table-set! references reference #t))
            
            (define (process-form form)
              (receive (tag properties children) (jazz.markup.parse:parse-markup-expr form)
                (unless (or (memq? tag '(install * ! ~))
                            (memv? (last (symbol->string tag)) '(#\! #\~)))
                  (walk-reference tag))
                (for-each-property
                  (lambda (name value)
                    (process-value value))
                  properties)
                (for-each process-form children)))
            
            (define (process-value value)
              (walk-references value
                walk-reference))
            
            (process-form form)
            references))
        
        (define (locators-builder references)
          (cons 'list (map (lambda (pair)
                             (let ((ref (car pair)))
                               `(cons ',ref (reify-reference ,ref))))
                           (table->list references))))
        
        (let ((locators-code (locators-builder (gather-references))))
          (sourcify-deep-if
            `(construct-form ',form
               (let ((locators (list->table ,locators-code)))
                 (lambda (symbol)
                   (locators-ref locators symbol))))
            form-src))))))


(syntax public form
  (lambda (form-src usage-environment macro-environment)
    (if (null? (cdr (source-code form-src)))
        (error "Ill-formed form")
      (let ((form (desourcify-all (cadr (source-code form-src)))))
        (sourcify-deep-if
          `(begin
             (definition meta class-form
               (<form> ,form))
             
             (method meta override (set-class-form self form)
               (set! class-form form))
             
             (method meta override (get-class-form self)
               (get-class-form-with-origin class-form (declaration-path)))
             
             (method meta override (get-class-forms self)
               (cons (get-class-form-with-origin class-form (declaration-path))
                     (nextmethod self))))
          form-src)))))


;;;
;;;; Pattern
;;;


(syntax public pattern
  (lambda (form-src usage-environment macro-environment)
    (let ((signature (source-code (cadr (source-code form-src))))
          (body (cddr (source-code form-src))))
      (let ((name (source-code (car signature)))
            (parameters (cdr signature)))
        (let ((tag (string->symbol (string-append "<" (symbol->string name) ">"))))
          (sourcify-deep-if
            `(method (,tag ,@parameters)
               ,@body)
            form-src)))))))
