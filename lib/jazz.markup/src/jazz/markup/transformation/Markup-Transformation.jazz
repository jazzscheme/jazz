;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Markup Transformations
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.markup.transformation.Markup-Transformation jazz


(import  (jazz.markup))


(class Markup-Transformation extends Object
  
  
  (slot parser)
  
  
  (method override (initialize self (parser-class: parser-class #f))
    (nextmethod self)
    (set! self.parser (new (or parser-class Markup-Parser))))
  
  
  ;;;
  ;;;; Transform
  ;;;
  
  
  (method public virtual (transform self node)
    (parse parser (transform-node self node)))
  
  
  (method public (transform-node self node)
    (define (transform-one node)
      (let ((pattern (node-pattern node)))
        (if pattern
            (parse parser (pattern self node))
          node)))
    
    (define (node-pattern node)
      (and (is? node Markup-Element)
           (let ((tag (name->tag (get-tag node))))
             (find-dispatch (class-of self) tag))))
    
    (let ((new-node (transform-one node)))
      (if (is? new-node Markup-Text)
          (get-text new-node)
        `(,(tag->markup new-node) ,@(properties->markup new-node)
          ,@(map (lambda (node)
                   (transform-node self node))
                 (get-children new-node))))))))
