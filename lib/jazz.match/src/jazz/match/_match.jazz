;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Match
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module jazz.match jazz


(export (jazz.match.syntax))

(import (irregex))


;;;
;;;; Match
;;;


(definition public (match-expression expr . clauses)
  (define (match-clauses)
    (continuation-capture
      (lambda (found)
        (for-each (lambda (clause)
                    (match-clause clause found))
                  clauses)
        (unspecified))))
  
  (define (match-clause clause found)
    (bind (pattern . proc) clause
      (continuation-capture
        (lambda (failure)
          (let ((matches (make-table test: eq?)))
            (define (match variable expr)
              (table-set! matches variable expr))
            
            (define (fail)
              (continuation-return failure #f))
            
            (match-expr expr pattern match fail)
            (continuation-return found (proc (lambda (variable)
                                               (table-ref matches variable)))))))))
  
  (define (match-expr expr pattern match fail)
    (cond ((universal-variable? pattern) (match-universal-variable expr pattern match fail))
          ((variable? pattern)           (match-variable           expr pattern match fail))
          ((pair? expr)                  (match-pair               expr pattern match fail))
          ((eqv? expr pattern)           (match-constant           expr pattern match fail))
          (else                          (match-fail               expr pattern match fail))))
  
  (define (match-universal-variable expr pattern match fail)
    )
  
  (define (match-variable expr pattern match fail)
    (match pattern expr))
  
  (define (match-pair expr pattern match fail)
    (if (pair? pattern)
        (begin
          (match-expr (car expr) (car pattern) match fail)
          (match-expr (cdr expr) (cdr pattern) match fail))
      (fail)))
  
  (define (match-constant expr pattern match fail)
    )
  
  (define (match-fail expr pattern match fail)
    (fail))
  
  (define (variable? pattern)
    (and (symbol? pattern)
         (let ((str (symbol->string pattern)))
           (and (> (string-length str) 1)
                (eqv? (string-ref str 0) #\?)))))
  
  (define (universal-variable? pattern)
    (eq? pattern '?))
  
  (match-clauses))


(definition public (match-regexp-string str . clauses)
  (define (match-clauses)
    (continuation-capture
      (lambda (found)
        (for-each (lambda (clause)
                    (match-clause clause found))
                  clauses)
        (unspecified))))
  
  (define (match-clause clause found)
    (bind (regexp . proc) clause
      (if (not regexp)
          (continuation-return found (proc))
        (let ((match (irregex-search regexp str)))
          (when match
            (continuation-return found
                                 (proc (lambda (variable)
                                         (irregex-match-substring match variable)))))))))
  
  (match-clauses)))
