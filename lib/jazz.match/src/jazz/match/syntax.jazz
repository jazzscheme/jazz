;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Match Syntax
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.match.syntax jazz


;;;
;;;; Match
;;;


@macro (match '(1 2 3) ((?a ?b ?c) (list ?c ?b ?a)))
@expansion (match-expression '(1 2 3)
                             (cons '(?a ?b ?c)
                                   (lambda (match)
                                     (let ((?a (match '?a))
                                           (?b (match '?b))
                                           (?c (match '?c)))
                                       (list ?c ?b ?a)))))

@macro (match 'a (b 2) (? 3))
@expansion (match-expression 'a
                             (cons 'b
                                   (lambda (match)
                                     2))
                             (cons '?
                                   (lambda (match)
                                     3)))


(macro public (match expr . clauses)
  (define (extract-variables pattern)
    (let ((variables '()))
      (define (process-expr expr)
        (cond ((variable? expr) (process-variable expr))
              ((pair? expr) (process-pair expr))))
      
      (define (process-variable expr)
        (set! variables (cons expr variables)))
      
      (define (process-pair expr)
        (process-expr (car expr))
        (process-expr (cdr expr)))
      
      (process-expr pattern)
      variables))
  
  (define (variable? pattern)
    (and (symbol? pattern)
         (let ((str (symbol->string pattern)))
           (and (> (string-length str) 1)
                (eqv? (string-ref str 0) #\?)))))
  
  `(match-expression ,expr
                     ,@(map (lambda (clause)
                              (bind (pattern . body) clause
                                (let ((match (generate-symbol "match"))
                                      (variables (extract-variables pattern)))
                                  `(cons ',pattern (lambda (,match)
                                                     (let (,@(map (lambda (variable)
                                                                    `(,variable (,match ',variable)))
                                                                  variables))
                                                       ,@body))))))
                            clauses)))


;;;
;;;; Match Regexp
;;;


@macro (regexp-match "a simple test"
         (("foo") 'foo)
         (("a s(.*)e t(.*)t" x y) (list 'match x y)))
@expansion (regexp-match-string "a simple test"
                                (list "foo"
                                      (lambda (match)
                                        'foo))
                                (list "a s(.*)e t(.*)t"
                                      (lambda (match)
                                        (let ((x (match 1))
                                              (y (match 2)))
                                          (list 'match x y)))))


(macro public (match-regexp str . clauses)
  `(match-regexp-string ,str
                        ,@(map (lambda (clause)
                                 (bind (pattern . body) clause
                                   (if (eq? pattern 'else)
                                       `(cons #f (lambda ()
                                                   ,@body))
                                     (bind (regexp . variables) pattern
                                       (let ((match (generate-symbol "match")))
                                         `(cons ',regexp (lambda (,match)
                                                           (let (,@(map (lambda (variable n)
                                                                          (let ((index (+ n 1)))
                                                                            `(,variable (,match ',index))))
                                                                        variables
                                                                        (naturals 0 (length variables))))
                                                             ,@body))))))))
                               clauses))))
