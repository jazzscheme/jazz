
(module protected jazz.match.validate.Match-Tester jazz


(import (jazz.match)
        (jazz.validation))


(class Match-Tester extends Tester
  
  
  ;; (form
  ;;   (<install> title: "Match-Tester"))


  (method override (test)
    (invoke {} test-match))
  
  
  ;;;
  ;;;; Match
  ;;;


  (method (test-match)

    (validate rpt (equal? '(3 2 1) (match '(1 2 3) ((a b c) (list c b a)))))

    (validate rpt (equal? (match 'any (_ 'ok)) 'ok))
    (validate rpt (equal? (match 'ok (x x)) 'ok))
    (validate rpt (equal? (match 28 (28 'ok)) 'ok))
    (validate rpt (equal? (match "good" ("bad" 'fail) ("good" 'ok)) 'ok))
    (validate rpt (equal? (match 'good ('bad 'fail) ('good 'ok)) 'ok))
    (validate rpt (equal? (match '() (() 'ok)) 'ok))
    (validate rpt (equal? (match '(ok) ((x) x)) 'ok))
    (validate rpt (equal? (match '#(ok) (#(x) x)) 'ok))
    (validate rpt (equal? (match '(1 2) ((_ _) 'ok)) 'ok))
    (validate rpt (equal? (match '(o k) ((and) 'ok)) 'ok))
    (validate rpt (equal? (match 'ok ((and x) x)) 'ok))
    (validate rpt (equal? (match 'ok ((and (? symbol?) y) 'ok)) 'ok))
    (validate rpt (equal? (match '(o k) ((or) 'fail) (else 'ok)) 'ok))
    (validate rpt (equal? (match 'ok ((or x) 'ok)) 'ok))
    (validate rpt (equal? (match 'ok ((or (? symbol? y) y) y)) 'ok))
    (validate rpt (equal? (match 28 ((not (a . b)) 'ok)) 'ok))
    (validate rpt (equal? (match 28 ((? number?) 'ok)) 'ok))
    (validate rpt (equal? (match 28 ((? number? x) (+ x 1))) 29))

    (validate rpt (equal? (match '(ok . ok) ((x . x) x)) 'ok))
    (validate rpt (equal? (match '(ok . bad) ((x . x) 'bad) (else 'ok)) 'ok))
    (validate rpt (equal? (match '(ok . ok) ((x . 'bad) x) (('ok . x) x)) 'ok))

    (validate rpt
              (equal? (match '((a . 1) (b . 2) (c . 3))
                        (((x . y) ___) (list x y)))
                      '((a b c) (1 2 3))))

    (validate rpt
              (equal? (match '((a . 1) (b . 2) (c . 3))
                        (((x . y) ...) (list x y)))
                      '((a b c) (1 2 3))))

    (validate rpt
              (equal? (match '#(1 2 3 (a . 1) (b . 2) (c . 3))
                        (#(a b c (hd . tl) ...) (list a b c hd tl)))
                      '(1 2 3 (a b c) (1 2 3))))

    (validate rpt
              (equal? (match '(1 2 3)
                        (((? odd? n) ___) n)
                        (((? number? n) ___) n))
                      '(1 2 3)))

    (validate rpt
              (equal? (match '(1 2)
                        ((a . b) (=> next) (if (even? a) 'fail (next)))
                        ((a . b) 'ok))
                      'ok))

    (validate rpt
              (equal? (match-let ((x 'ok) (y '(o k)))
                                 y)
                      '(o k)))

    (validate rpt
              (equal? (match-let* ((x 'f) (y 'o) ((z w) (list y x)))
                                  (list x y z w))
                      '(f o o f)))

    (validate rpt
              (equal? (match '(1 . 2) (((get! a) . b) (list (a) b)))
                      '(1 2)))

    (validate rpt
              (equal? (match '(1 . 2) ((a . (get! b)) (list a (b))))
                      '(1 2)))

    (validate rpt
              (equal? (match '#(1 2 3) (#((get! a) b c) (list (a) b c)))
                      '(1 2 3)))

    (validate rpt
              (equal? (let ((x '(1 . 2)))
                        (match x (((set! a) . b) (a 3)))
                        x)
                      '(3 . 2)))

    (validate rpt
              (equal? (let ((x '(1 . 2)))
                        (match x ((a . (set! b)) (b 3)))
                        x)
                      '(1 . 3)))

    (validate rpt
              (equal? (let ((x '#(1 2 3)))
                        (match x (#(a (set! b) c) (b 0)))
                        x)
                      '#(1 0 3)))

    )))
