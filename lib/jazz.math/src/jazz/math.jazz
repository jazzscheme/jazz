;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Math
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module jazz.math jazz


(definition public (logarithm base <fl> x <fl>) <fl>
  (/ (log x) (log base)))


(definition public (nthroot a <fl> n <fl>) <fl>
  (define (iter x)
    (* (/ 1. n)
       (+ (* (- n 1.) x)
          (/ a (expt x (- n 1.))))))
  
  (if (= a 0.)
      0.
    (let (loop (x (/ a 2.)) (c 10))
      (if (= c 0)
          x
        (loop (iter x) (- c 1))))))


(class Average extends Object
  
  
  (slot total  getter generate)
  (slot count  getter generate)
  (slot alpha  getter generate)
  (slot moving getter generate)
  
  
  (method override (initialize self alpha initial-moving)
    (nextmethod self)
    (set! self.total 0.)
    (set! self.count 0)
    (set! self.alpha alpha)
    (set! self.moving initial-moving))
  
  
  (method override (print self output readably)
    (print-unreadable self output
      (lambda (output)
        (format output "{a}" alpha))))
  
  
  (method public (mean-average self)
    (and (/= count 0)
         (/ total (cast <fl> count))))
  
  
  (method public (moving-average self)
    moving)
  
  
  (method public (add self x)
    (increase! total x)
    (increase! count)
    (if (not moving)
        (set! moving 50.)
      (set! moving (+ (* alpha x) (* (- 1. alpha) moving)))))))
