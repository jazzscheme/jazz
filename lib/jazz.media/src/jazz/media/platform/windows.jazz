;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Windows Media
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.media.platform.windows jazz


(import (jazz.io)
        (jazz.platform))


;;;
;;;; Sound
;;;


(definition Symbolic-Sounds
  (list
    (cons :asterisk "SystemAsterisk")
    (cons :exclamation "SystemExclamation")
    (cons :hand "SystemHand")))


(definition (symbolic-sound sound)
  (let ((pair (assv sound Symbolic-Sounds)))
    (if (not pair)
        (error "Unknown symbolic sound: {s}")
      (cdr pair))))


(definition public (play-sound sound (asynchronous?: asynchronous? #t))
  (let ((async-bit (if asynchronous? SND_ASYNC SND_SYNC)))
    (cond ((file? sound)
           (PlaySound (platform-parse~ sound) NULL (bitwise-ior SND_FILENAME async-bit)))
          ((symbol? sound)
           (PlaySound (symbolic-sound sound) NULL async-bit))
          (else
           (PlaySound sound NULL async-bit)))))


(definition public (error-sound)
  (MessageBeep MB_ICONASTERISK))


;;;
;;;; Music
;;;


(definition public (open-music file alias)
  (mciSendString (format "open \"{a}\" type MPEGVideo alias {a}" (platform-parse~ file) alias) NULL 0 NULL))

(definition public (close-music alias)
  (mciSendString (format "close {a}" alias) NULL 0 NULL))


(definition public (play-music alias)
  (mciSendString (format "play {a}" alias) NULL 0 NULL))

(definition public (stop-music alias)
  (mciSendString (format "stop {a}" alias) NULL 0 NULL))


(definition public (pause-music alias)
  (mciSendString (format "pause {a}" alias) NULL 0 NULL))

(definition public (resume-music alias)
  (mciSendString (format "resume {a}" alias) NULL 0 NULL))


(definition public (music-played-callback callback)
  ))
