;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Context Menus
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.menu.Context-Menu jazz


(import (jazz.menu))


(class Context-Menu extends Menu
  
  
  (property client initialize #f accessors generate)
  
  
  (method override (component-alias self name)
    (case name
      ((:client) client)
      (else (nextmethod self name))))


  ;;;
  ;;;; Condensed list
  ;;;
  
  
  (method public (make-condensed-menu self user-items create-leaf (key: key identity) (max-leaves: max-leaves 30))
    (define (collapse? items count)
      (let ((sub-count (let ((sub-count (length items)))
                         (if (= sub-count 1)
                             (let ((leaves (third (car items))))
                               (length leaves))
                           sub-count))))
        (<= (* count sub-count) max-leaves)))
    
    (define (condense-section user-items create-leaf)
      (let ((top-menu self)
            (values-tree (create-tree (sort string<? (map (lambda (user-item)
                                                            (list user-item (key user-item)))
                                                          user-items)
                                        key: second))))
        (define (iter items menu super-count)
          (let ((count (* (length items) super-count)))
            (for-each (lambda (item)
                        (bind (value string . rest) item
                          (cond ((null? rest)
                                 (create-leaf value string menu))
                                ((eq? value :leaves)
                                 (for-each (lambda (item)
                                             (bind (value string) item
                                               (create-leaf value string menu)))
                                           (car rest)))
                                (else
                                 (let ((sub-items (first rest)))
                                   (if (collapse? sub-items count)
                                       (iter sub-items menu count)
                                     (let* ((menu-item (new Label-Item parent: menu title: (string-append string "...") user-data: item))
                                            (submenu (new Context-Menu parent: menu-item)))
                                       (iter sub-items submenu 1)
                                       (layout-menu submenu))))))))
                      items)))
        
        (iter values-tree top-menu 1)))
    
    (define (create-tree leaves)
      (define (iter items level)
        (if (<= (* (length items) 2) max-leaves)
            (list (list :leaves "" items))
          (let ((groups (partition items key: (lambda (leaf)
                                                (let ((title (second leaf)))
                                                  (if (<= (string-length title) level)
                                                      ""
                                                    (subseq title level (+ level 1))))) test: equal?)))
            (map (lambda (group)
                   (cond ((= (length group) 2)
                          (second group))
                         ((string=? (first group) "")
                          (list :leaves "" (cdr group)))
                         (else
                          (let* ((sub-items (cdr group))
                                 (prefix (prefix (map second sub-items))))
                            (list '() prefix (iter sub-items (string-length prefix)))))))
                 groups))))
      
        (iter leaves 0))
    
    (let ((top-menu self)
          (sections (collect-sections user-items))
          (first? #t))
      (for-each (lambda (section)
                  (if first?
                      (set! first? #f)
                    (new Separator-Item parent: self))
                  (condense-section section create-leaf))
                sections)
      (layout-menu self)))))
