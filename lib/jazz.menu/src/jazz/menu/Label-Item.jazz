;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Label Items
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.menu.Label-Item jazz


(import (jazz.action)
        (jazz.application)
        (jazz.geometry)
        (jazz.graphic)
        (jazz.locale)
        (jazz.menu)
        (jazz.resource)
        (jazz.skin)
        (jazz.ui)
        (jazz.view)
        (jazz.window))


(class Label-Item extends Item
  
  
  (property icon          initialize #f accessors explicit)
  (property disabled-icon initialize #f accessors explicit)
  (property shortcut      initialize #f accessors explicit)
  (property default?      initialize #f accessors generate)
  (property content       initialize #f accessors explicit)
  
  
  (method override (mouse-activate? self)
    #f)

  
  ;;;
  ;;;; Component
  ;;;
  
  
  (method override (component-alias self name)
    (case name
      ((content) content)
      (else (nextmethod self name))))

  
  ;;;
  ;;;; Actionable
  ;;;
  
  
  (method override (shortcut-update self action-item)
    (let ((all (all-shortcuts action-item)))
      (set-shortcut self (and (not-null? all) (car all)))))
  
  
  ;;;
  ;;;; Content
  ;;;
  
  
  (method override (add-child self child)
    (set-content self child))
  
  
  (method public (get-content self)
    content)
  
  
  (method public (set-content self menu)
    (set! content menu)
    (set-item menu self))


  ;;;
  ;;;; Access
  ;;;
  
  
  (method override (get-title self)
    (or title
        (and content
             (get-title content))))


  (method public (get-icon self)
    icon)


  (method public (set-icon self icn)
    (set! icon icn)
    (layout-menu self cleanup-separators?: #f))


  (method public (get-disabled-icon self)
    disabled-icon)


  (method public (set-disabled-icon self icn)
    (set! disabled-icon icn)
    (layout-menu self cleanup-separators?: #f))


  (method public (get-shortcut self)
    shortcut)


  (method public (set-shortcut self shc)
    (set! shortcut shc)
    (layout-menu self cleanup-separators?: #f))


  ;;;
  ;;;; Layout
  ;;;
  
  
  (method override (default-size self)
    {Dimension 100 17})
  
  
  (method override (preferred-icon-width self)
    (let ((left 4))
      (if icon (+ left 16 left) 0)))
  
  
  (method override (preferred-body-width self)
    (let* ((font (effective-font self))
           (title (localize (get-title self)))
           (extent (text-extent font title))
           (left (if (menubar-label? self) 6 10)))
      (+ left (get-width extent) left)))
  
  
  (method override (preferred-shortcut-width self)
    (if (not shortcut)
        0
      (let* ((font (effective-font self))
             (extent (text-extent font (present-shortcut shortcut)))
             (left 6)
             (right 12))
        (+ left (get-width extent) right))))
  
  
  (method override (preferred-arrow-width self)
    (if (and content (not (menubar-label? self)))
        10
      0))
  
  
  (method override (preferred-height self)
    (let* ((font (effective-font self))
           (title (localize (get-title self)))
           (height (font-height font)))
      (+ height 4)))
  
  
  ;;;
  ;;;; Drawing
  ;;;
  
  
  (definition Label-Font
    {Font Label})
  
  (definition Default-Label-Font
    {Font Label bold?: #t})
  
  
  (definition (get-label-font)
    Label-Font)
  
  (definition (get-default-label-font)
    Default-Label-Font)
  
  
  (method override (effective-font self)
    (or (get-text-font (get-skin self))
        (if default?
            (get-default-label-font)
          (get-label-font))))
  
  
  (method override (draw-background self surface context)
    (when (item-selected? self)
      (let ((highlight (get-highlight (find-skin 'ui:menubar))))
        (when highlight
          (fill-background surface (get-bounds self) highlight)))))
  
  
  (method override (draw self surface context)
    (draw-highlight self surface)
    (draw-prefix self surface context)
    (draw-icon self surface context)
    (draw-body self surface)
    (draw-shortcut self surface)
    (draw-arrow self surface))
  
  
  (method (draw-highlight self surface)
    (when (item-selected? self)
      (let ((bounds (get-bounds self)))
        (if (menubar-label? self)
            (draw-edge surface bounds inner: (if (highlight-flag self) #f 'raised) outer: (if (highlight-flag self) 'sunken #f) edges: 'rectangle)
          (let ((highlight (get-highlight (get-skin self))))
            (fill-background surface bounds (or highlight {Color Focused-Selection})))))))
  
  
  (method protected virtual (draw-prefix self surface context)
    )
  
  
  (method (draw-icon self surface context)
    (when icon
      (let* ((appl (current-application))
             (left (+ prefix-width 9))
             (portfolio (get-images-portfolio appl)))
        (if (not (view-enabled? self))
            (let ((disabled-icon (or disabled-icon (default-disabled-resource icon))))
              (draw-image portfolio surface context disabled-icon left 0))
          (draw-image portfolio surface context icon left 0)))))
  
  
  (method (draw-body self surface)
    (define (align-horizontal title)
      (and (eq? (get-background (get-skin self)) 'none)
           (justify (get-width (get-text-extent surface title))
                    (get-width self)
                    'center)))
    
    (let ((title (localize (get-title self))))
      (when title
        (let* ((height (get-font-height surface))
               (left (if (menubar-label? self) 6 10))
               (top (if (menubar-label? self) 0 1))
               (h (or (align-horizontal title) (+ prefix-width icon-width left)))
               (v (- (quotient (- (get-height self) height) 2) top)))
          (set-font surface (effective-font self))
          (draw-text surface h v title (text-color self) enabled?: (text-enabled? self))))))
  
  
  (method (draw-shortcut self surface)
    (when (and shortcut (get-display-shortcuts? parent))
      (let* ((text (present-shortcut shortcut))
             (height (get-font-height surface))
             (left 6)
             (top 1)
             (h (+ prefix-width icon-width body-width left))
             (v (- (quotient (- (get-height self) height) 2) top)))
        (draw-text surface h v text (text-color self) enabled?: (text-enabled? self)))))
  
  
  (method (draw-arrow self surface)
    (when (and content (not (menubar-label? self)))
      (let ((width (get-width self)))
        (set-color surface (tip-color self))
        (draw-arrow-tip surface (- width 10) 5 4 'right))))
  
  
  (method (item-selected? self)
    (and (not surrogate)
         (eq? (get-highlighted parent) self)))
  
  
  (method (menubar-label? self)
    (is? parent Menubar))
  
  
  (method (in-menubar? self)
    (is-not? parent Context-Menu))
  
  
  (method (highlight-flag self)
    (and content (eq? (get-popped parent) content)))
  
  
  (method (tip-color self)
    (if (item-selected? self) {Color White} {Color Black}))
  
  
  (method (text-enabled? self)
    (or (view-enabled? self) (item-selected? self)))
  
  
  (method (text-color self)
    (let ((skin (get-skin self)))
      (cond ((not (view-enabled? self)) (or (get-disabled-text-color skin) {Color Dark}))
            ((and (item-selected? self) (not (menubar-label? self))) (or (get-selected-text-color skin) {Color White}))
            (else (or (get-text-color skin) {Color Black})))))
  
  
  ;;;
  ;;;; Skin
  ;;;
  
  
  (method override (get-skin self)
    (find-skin 'ui:menu))
  
  
  ;;;
  ;;;; Mouse
  ;;;
  
  
  (method override (mouse-enter self)
    (nextmethod self)
    (when (item-navigable? self)
      (unless (menubar-label? self)
        (let ((popped (get-popped parent)))
          (when popped
            (track-hovering self)
            (invalidate-view (popup-initiator popped)))))
      (when content
        (if (menubar-label? self)
            (when (get-popped parent)
              (close-other-popups self)
              (unless (popped? self)
                (popup-content self)))
          (track-hovering self)))))
  
  
  (method override (mouse-leave self)
    (nextmethod self)
    (when (not (menubar-label? self))
      (cancel-hovering self)))
  
  
  (method override (mouse-hover self pos)
    (close-other-popups self)
    (when (and content (not (popped? self)) (not surrogate))
      (popup-content self)))
  
  
  (method override (mouse-down self evt)
    (let ((popped (get-popped parent))
          (menubar? (menubar-label? self)))
      (close-popups self exclude: (if popped (list popped) #f) initiator: self)
      (when menubar?
        (push-focus parent))
      (when (and content (or (not popped) (neq? popped content)))
        (popup-content self))))
  
  
  (method override (mouse-up self evt)
    (when (and (eq? self (get-mouse-in)) (not content))
      (close-popups player all?: #t)
      (pop-all-focuses)
      (when (view-enabled? self)
        (process-action self self))))
  
  
  ;;;
  ;;;; Popup
  ;;;
  
  
  (method package (popup-content self)
    (define (popup-menu menu position alternate)
      (popup self menu position class: Menu-Transient fade-speed: 3. close-behavior: 'detach-root alternate-position: alternate))
    
    (let ((menu (get-content self)))
      (update menu)
      (when (get-children menu)
        (clear-highlighted menu)
        (let* ((size (get-size self))
               (menu-size (get-size menu))
               (position (if (menubar-label? self) (new Point 0 (get-height self)) (new Point (- (get-width size) 3) -2)))
               (alternate (if (menubar-label? self)
                              (new Point (- (get-width self) (get-width menu-size)) (- (get-height menu-size)))
                            (new Point (- 3 (get-width menu-size)) (- -2 (get-height menu-size))))))
          (set-popped parent menu)
          (invalidate-view self)
          (popup-menu menu position alternate)
          (push-focus menu)))))
  
  
  (method override (close-popups self (event: event #f) (all?: all? #f) (exclude: exclude #f) (initiator: initiator #f))
    (unless (memq? event '(mouse-down double-click))
      (nextmethod self event: event all?: all? exclude: exclude initiator: initiator)
      (invalidate-view self)))
  
  
  (method override (popup-destroy self popup)
    (set-popped parent #f))
  
  
  ;;;
  ;;;; Descriptor
  ;;;
  
  
  (method meta override (get-class-descriptor self (context: context #f))
    (new jazz.ui.descriptors:Label-Item-Descriptor))))
