;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Menubars
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.menu.Menubar jazz


(import (jazz.action)
        (jazz.graphic)
        (jazz.handler)
        (jazz.markup)
        (jazz.menu)
        (jazz.skin)
        (jazz.ui)
        (jazz.view)
        (jazz.workspace))


(class Menubar extends Menu
  
  
  (slot showing? initialize #f)
  

  (form
    (<install>                       size: {Dimension 1024 21} visible?: #t
      (<Frame-Button> name: restore  visible?: #f type: restore tooltip?: #t tooltip-text: "Restore" action-handler: {Event-Handler :form on-restore})
      (<Frame-Button> name: close    visible?: #f type: close tooltip?: #t tooltip-text: "Close" action-handler: {Event-Handler :form on-close})))


  ;;;
  ;;;; Actions
  ;;;
  
  
  (method override (menu-actions self)
    (find-actions 'menubar))

  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method (on-restore self evt)
    (restore (current-stage)))
  
  
  (method package (on-close self evt)
    (let ((frame (current-frame)))
      (close-host frame)))
  
  
  ;;;
  ;;;; Keyboard
  ;;;


  (method override (up-arrow-press self modifiers)
    (navigate-open self #t))


  (method override (down-arrow-press self modifiers)
    (navigate-open self))
  
  
  (method override (left-arrow-press self modifiers)
    (navigate-previous self))
  
  
  (method override (right-arrow-press self modifiers)
    (navigate-next self))


  (method override (escape-press self evt)
    (pop-all-focuses))
  
  
  ;;;
  ;;;; Maximized
  ;;;
  
  
  (method override (maximize self)
    (update-buttons self))
  
  
  (method override (restore self)
    (hide-buttons self))
  
  
  (method public virtual (update-buttons self)
    (let ((stage (current-stage)))
      (if stage
          (let ((frames (get-views stage)))
            (if (and (not-null? frames) (get-maximized? stage))
                (show-buttons self)
              (hide-buttons self)))
        (hide-buttons self))))
  
  
  (method (show-buttons self)
    (unless (always-maximized? self)
      (set-visible? (locate self 'restore) #t)
      (set-visible? (locate self 'close) #t)))
  
  
  (method (hide-buttons self)
    (set-visible? (locate self 'restore) #f)
    (set-visible? (locate self 'close) #f))
  
  
  (method protected virtual (always-maximized? self)
    #f)
  
  
  ;;;
  ;;;; Layout
  ;;;
  
  
  (method override (layout self)
    (define (restore-rect top right)
      (new Rect (- right 37) (+ top 4) (- right 21) (+ top 18)))
    
    (define (close-rect top right)
      (new Rect (- right 19) (+ top 4) (- right  3) (+ top 18)))
    
    (let* ((bounds (get-bounds self))
           (top 0)
           (right (+ (get-right bounds) 3)))
      (set-rect (locate self 'restore) (restore-rect top right))
      (set-rect (locate self 'close) (close-rect top right))))
  
  
  (method override (layout-menu self)
    (let ((height (get-height self))
          (h 0))
      (for-each-view self
        (lambda (view)
          (when (is? view Item)
            (set-position view (new Point h 2))
            (let ((width (preferred-body-width view)))
              (set-size view (new Dimension width (- height 3)))
              (increase! h width)))))))
  
  
  ;;;
  ;;;; Drawing
  ;;;
  
  
  (method override (draw-background self surface context)
    (let ((skin (get-skin self)))
      (let ((background (get-background skin)))
        (if (not background)
            (nextmethod self surface context)
          (let ((bounds (get-bounds self)))
            (fill-background surface bounds background))))))
  
  
  ;;;
  ;;;; Skin
  ;;;
  
  
  (method override (get-skin self)
    (find-skin 'ui:menubar))))
