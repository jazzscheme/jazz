;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Window Menu
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.menu.Window-Menu jazz


(import (jazz.action)
        (jazz.handler)
        (jazz.jml)
        (jazz.locale)
        (jazz.menu)
        (jazz.resource)
        (jazz.ui)
        (jazz.view)
        (jazz.window)
        (jazz.workspace))


(class Window-Menu extends Menu
    
  
  (slot base-items)

  
  (form
    (<install>                                  title: {Locales english: "Window" french: "Fenêtre"}
      (<Label-Item>     name: next              title: {Locales english: "Next" french: "Suivant"} icon: {Image-Resource "Next"} action-handler: {Action application next-frame})
      (<Label-Item>     name: previous          title: {Locales english: "Previous" french: "Précédent"} icon: {Image-Resource "Previous"} action-handler: {Action application previous-frame})
      (<Separator-Item> name: tile-separator)
      (<Label-Item>     name: tile-horizontally title: {Locales english: "Tile Horizontally" french: "Tuiler horizontalement"} icon: {Image-Resource "TileHorizontally"} action-handler: {Action application tile-horizontally})
      (<Label-Item>     name: tile-vertically   title: {Locales english: "Tile Vertically" french: "Tuiler verticalement"} icon: {Image-Resource "TileVertically"} action-handler: {Action application tile-vertically})
      (<Separator-Item> name: zoom-separator)
      (<Label-Item>     name: zoom-horizontally title: {Locales english: "Expand Horizontally" french: "Agrandir Horizontalement"} icon: {Image-Resource "ExpandHorizontally"} action-handler: {Action application zoom-horizontally})
      (<Label-Item>     name: zoom-vertically   title: {Locales english: "Expand Vertically" french: "Agrandir Verticallement"} icon: {Image-Resource "ExpandVertically"} action-handler: {Action application zoom-vertically})
      (<Label-Item>     name: maximize/restore  title: {Locales english: "Maximize / Restore" french: "Agrandir / Restaurer"} action-handler: {Action application maximize/restore})
      (<Label-Item>     name: full-stage        title: {Locales english: "Full Stage" french: "Pleine scène"} action-handler: {Action application full-stage})
      (<Label-Item>     name: full-screen       title: {Locales english: "Full Screen" french: "Plein écran"} icon: {Image-Resource "FullScreen"} action-handler: {Action application full-screen})))
  
  
  (method override (finish self rest)
    (nextmethod self rest)
    (set! base-items (length (get-children self))))

  
  (method override (update self)
    (define (present-title title)
      (if (or (null? title) (empty-string? title))
          "<Untitled>"
        title))
    
    (let ((palettes (collect-palettes))
          (frames (collect-frames)))
      (for-each close (tail (get-children self) base-items))
      (when (not-null? frames)
        (new Separator-Item parent: self)
        (for-each (lambda (frame)
                    (let ((icon (if (is? frame Frame-Host) (guest-icon (get-guest frame)) #f)))
                      (new Label-Item parent: self title: (present-title (get-title frame)) icon: icon action-handler: (new Event-Handler target-name: :application method-name: 'on-select-frame properties: (list host: frame)))))
                  frames))
      (when (not-null? palettes)
        (new Separator-Item parent: self)
        (for-each (lambda (palette)
                    (when (is? palette Palette)
                      (new Label-Item parent: self title: (present-title (get-title palette)) action-handler: (new Event-Handler target-name: :application method-name: 'on-select-palette properties: (list host: (get-root palette))))))
                  palettes))
      (layout-menu self)))))
