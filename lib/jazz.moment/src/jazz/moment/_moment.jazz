;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Moments
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module jazz.moment jazz


(definition moment-id
  0)

(definition (next-moment-id!)
  (prog1 moment-id
    (increase! moment-id)))


(class Moment extends Object
  
  
  (slot domain   getter generate)
  (slot time     getter generate)
  (slot id       getter generate)
  (slot level    getter generate)
  (slot category getter generate)
  (slot function getter generate)
  (slot message  getter generate)
  (slot stack    getter generate)
  
  
  (method meta override (marshall-object self object)
    (serialize-object (class-of object)
                      (vector (serialize (get-domain object))
                              (serialize (get-time object))
                              (serialize (get-id object))
                              (serialize (get-level object))
                              (serialize (get-category object))
                              (serialize (get-function object))
                              (serialize (get-message object))
                              (serialize (get-stack object)))))
  
  
  (method meta override (unmarshall-object self content)
    (bind-vector (domain time id level category function message stack) content
      (allocate self
                (deserialize domain)
                (deserialize time)
                (deserialize id)
                (deserialize level)
                (deserialize category)
                (deserialize function)
                (deserialize message)
                (deserialize stack))))
  
  
  (method override (initialize self domain time level category function message stack)
    (nextmethod self)
    (set! self.domain domain)
    (set! self.time time)
    (set! self.id (next-moment-id!))
    (set! self.level level)
    (set! self.category category)
    (set! self.function function)
    (set! self.message message)
    (set! self.stack stack))
  
  
  (method override (print self output readably)
    (print-unreadable self output
      (lambda (output)
        (format output "{a}" message))))))
