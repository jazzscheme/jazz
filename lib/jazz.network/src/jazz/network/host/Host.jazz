;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Internet Hosts
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.network.host.Host jazz


(import (jazz.library))


(class Host extends Object
  
  
  (slot name    initialize {})
  (slot address initialize {})
  (slot ip      initialize {})
  (slot origin  initialize {} getter generate)
  
  
  (method (initialize (name: name {}) (address: address {}) (ip: ip {}))
    (nextmethod)
    (cond (name
            (set! name~self name)
            (set! origin~self 'name))
          (address
            (set! address~self address)
            (set! origin~self 'address))
          (ip
            (set! ip~self ip)
            (set! origin~self 'ip))
          (else
           (error "Host initialisation needs a name, a dotted address or an ip address"))))


  (method (compare-object target)
    (cond ((is-not? target Host)
           :incompatible)
          ((= (get-ip) (get-ip~ target))
           :equal)
          (else
           :not-equal)))
  
  
  (method (fold-literal)
    (case origin
      ((name)    `(new Host name: ',name))
      ((address) `(new Host address: ',address))
      ((ip)      `(new Host ip: ',ip))))
  
  
  (method (print printer readably)
    (format printer "~{{a} {a}}"
            (identifier-name (type-name (class-of self)))
            (present-host)))
  
  
  ;;;
  ;;;; Access
  ;;;
  
  
  (method public (get-name)
    #f
    @convert
    (unless name
      (set! name (ip->name (either ip (address->ip address)))))
    name)
  
  
  (method public (get-address)
    #f
    @convert
    (unless address
      (set! address (ip->address (either ip (name->ip name)))))
    address)
  
  
  (method public (get-ip)
    #f
    @convert
    (unless ip
      (set! ip (address->ip (get-address))))
    ip)
  
  
  ;;;
  ;;;; Present
  ;;;
  
  
  (method public (present)
    (either name (get-address)))
  
  
  (method public (present-host)
    (case origin
      ((name)    (format "name: {s}" name))
      ((address) (format "address: {s}" address))
      ((ip)      (format "ip: {s}" ip))))
  
  
  (method public (present-compact)
    (case origin
      ((name)    name)
      ((address) address)
      ((ip)      (->string ip))))))
