;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; TCP/IP Server
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library protected jazz.network.host.TCP-Server jazz


(import (jazz.network))


(class TCP-Server extends Object
  
  
  (slot name)
  (slot host)
  (slot service)
  (slot socket-info)
  (slot server-thread)
  (slot started-condition)
  (slot state initialize 'stopped)
  
  
  (method (initialize . rest)
    (bind-keywords ((name {}) (host {}) (service {})) rest
      (nextmethod)
      (set! name~self name)
      (set! host~self host)
      (set! service~self service)
      (set! socket-info~self {})
      (set! server-thread~self {})
      (set! started-condition~self (make-condition))))

  
  ;;;
  ;;;; Access
  ;;;
  
  
  (method public (get-name)
    name)
  
  
  (method public (get-host)
    host)
  
  
  (method public (get-service)
    service)
  
  
  (method public (get-socket-info)
    socket-info)
  
  
  (method public (get-state)
    state)
  
  
  (method (set-state value)
    (set! state value))
  
  
  ;;;
  ;;;; Thread
  ;;;
  
  
  (method protected virtual (create-thread . rest)
    (apply new-thread rest))
  
  
  ;;;
  ;;;; Start/Stop
  ;;;
    
  
  (method (start)
    (set-state 'starting)
    (set! server-thread
          (thread-start!
            (create-thread
              (function ()
                (start-listener))
              (server-name)))))
  
  
  (method (stop)
    (set-state 'stopping)
    (when server-thread
      (thread-interrupt! server-thread
        thread-exit)
      (set! server-thread {})))
  
  
  (method (restart)
    (stop)
    (wait-stopped)
    (start))
  
  
  (method (wait-started (error?: error? #f))
    ;; braindead quicky
    (thread-sleep! 0.25))
  
  
  (method (wait-stopped (error?: error? #f))
    ;; braindead quicky
    (thread-sleep! 0.25))
  
  
  ;;;
  ;;;; Server
  ;;;
  
  
  (definition Server-Timeout
    0.25)
  
  
  (method protected virtual (server-name)
    (either (get-name)
            'tcp-server))
  
  
  (method protected virtual (server-host)
    (get-host))
  
  
  (method protected virtual (server-service)
    (get-service))
  
  
  (method protected virtual (connection-name)
    'tcp-connection)
  
  
  (method (start-listener)
    (let ((address (resolve-host (server-host)))
          (number (resolve-service (server-service))))
      (let ((server-port (open-tcp-server (list server-address: address port-number: number eol-encoding: 'cr-lf))))
        (unwind-protect
            (begin
              (set! socket-info (tcp-server-socket-info server-port))
              (set-state 'started)
              ;;(condition-broadcast! started-condition)
              (let (loop)
                (let ((port (read server-port)))
                  (thread-start!
                    (create-thread
                      (function ()
                        (accept-connection port))
                      (connection-name)))
                  (loop))))
          (close-port server-port)
          (set-state 'stopped)
          (set! socket-info {})))))
  
  
  (method (listening-host)
    (essay socket-info (socket-info-address socket-info)))
  
  
  (method (listening-port)
    (essay socket-info (socket-info-port-number socket-info)))
  
  
  ;;;
  ;;;; Connection
  ;;;
  
  
  (method protected virtual (accept-connection port)
    )))
