;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; TCP/IP Server
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.network.host.TCP-Server jazz


(import (jazz.network)
        (jazz.version))


(class TCP-Server extends Object implements Server-Interface
  
  
  (slot name                                   getter generate)
  (slot host                                   getter generate)
  (slot service                                getter generate)
  (slot alternate-service                      getter generate)
  (slot socket-info                            getter generate)
  (slot server-port        initialize #f       accessors generate)
  (slot server-thread)
  (slot started-mutex)
  (slot stopped-mutex)
  (slot state              initialize 'stopped)
  (slot hits               initialize 0        getter generate)
  (slot debug?                                 accessors generate)
  (slot reuse-address?     initialize #t       accessors generate)
  (slot connection-handler initialize #f)
  
  
  (method override (initialize self . rest)
    (bind-keywords ((name #f) (host #f) (service #f) (alternate-service #f) (debug? #f) (reuse-address? #t) (connection-handler #f)) rest
      (nextmethod self)
      (set! self.name name)
      (set! self.host host)
      (set! self.service service)
      (set! self.alternate-service alternate-service)
      (set! self.socket-info #f)
      (set! self.server-thread #f)
      (set! self.started-mutex (make-mutex 'started))
      (set! self.stopped-mutex (make-mutex 'stopped))
      (set! self.debug? debug?)
      (set! self.reuse-address? reuse-address?)
      (set! self.connection-handler connection-handler)))
  
  
  (method override (destroy self)
    (when server-port
      (close-port server-port))
    (nextmethod self))

  
  ;;;
  ;;;; State
  ;;;
  
  
  (method override (get-state self)
    state)
  
  
  (method package (set-state self value)
    (set! state value))
  
  
  ;;;
  ;;;; Thread
  ;;;
  
  
  (method protected virtual (create-thread self . rest)
    (apply new-thread rest))
  
  
  ;;;
  ;;;; Start/Stop
  ;;;
    
  
  (method override (start self)
    (set-state self 'starting)
    (start-listener self)
    (wait-started self))
  
  
  (method override (stop self)
    (set-state self 'stopping)
    (when server-thread
      (exit-thread server-thread)
      (wait-stopped self)
      (set! server-thread #f)))
  
  
  (method override (restart self)
    (stop self)
    (start self))
  
  
  (method override (wait-started self)
    (mutex-lock! started-mutex)
    (mutex-unlock! started-mutex))
  
  
  (method override (wait-stopped self)
    (mutex-lock! stopped-mutex)
    (mutex-unlock! stopped-mutex))
  
  
  ;;;
  ;;;; Server
  ;;;
  
  
  (method override (server-name self)
    (or (get-name self)
        'tcp-server))
  
  
  (method override (server-title self)
    (->string (server-name self)))
  
  
  (method override (server-version self)
    {Version 1 0 0})
  
  
  (method override (server-host self)
    (get-host self))
  
  
  (method override (server-service self)
    (get-service self))
  
  
  (method override (server-alternate-service self)
    (get-alternate-service self))
  
  
  (method override (server-hits self)
    hits)
  
  
  (method override (server-debug? self)
    debug?)
  
  
  (method protected virtual (server-hit self)
    (increase! hits))
  
  
  (method protected virtual (connection-name self)
    'tcp-connection)
  
  
  (method protected virtual (connection-readtable self)
    scheme-readtable)
  
  
  (method (start-listener self)
    (let ((address (resolve-host (server-host self)))
          (service (server-service self))
          (alternate-service (server-alternate-service self)))
      (define (open-server)
        (catch-exception-filter
          (lambda (exc)
            #t)
          (lambda (exc)
            (if (and alternate-service
                     (os-exception? exc)
                     (equal? (err-code->string (os-exception-code exc)) "Address already in use"))
                (catch-exception-filter
                  (lambda (exc)
                    #t)
                  (lambda (exc)
                    (values #f exc))
                  (lambda ()
                    (values (open-tcp-server (list server-address: address port-number: (resolve-service alternate-service) eol-encoding: 'cr-lf reuse-address: reuse-address? readtable: (connection-readtable self))) #f)))
              (values #f exc)))
          (lambda ()
            (values (open-tcp-server (list server-address: address port-number: (resolve-service service) eol-encoding: 'cr-lf reuse-address: reuse-address? readtable: (connection-readtable self))) #f))))
      
      (define (robust-close-connection port)
        (catch-exception-filter
          (lambda (exc)
            #t)
          (lambda (exc)
            #f)
          (lambda ()
            (close-connection self port))))
      
      (receive (port exception) (open-server)
        (if exception
            (begin
              (when server-port
                (close-port server-port))
              (set-state self 'stopped)
              (set! socket-info #f)
              (throw exception))
          (set! server-port port)
          (set! socket-info (tcp-server-socket-info server-port))
          (set-state self 'started)
          (mutex-lock! started-mutex)
          (set! server-thread
                (thread-start!
                  (create-thread self
                    (lambda ()
                      (declare (proper-tail-calls))
                      (mutex-unlock! started-mutex)
                      (mutex-lock! stopped-mutex)
                      (unwind-protect
                          (let (loop)
                            (let ((port (read server-port)))
                              (server-hit self)
                              (thread-start!
                                (create-thread self
                                  (lambda ()
                                    (unwind-protect
                                        (accept-connection self port)
                                      (robust-close-connection port)))
                                  (connection-name self)))
                              (loop)))
                        (mutex-unlock! stopped-mutex)))
                    (server-name self))))))))
  
  
  (method package (listening-host self)
    (assert socket-info (socket-info-address socket-info)))
  
  
  (method package (listening-port self)
    (assert socket-info (socket-info-port-number socket-info)))
  
  
  ;;;
  ;;;; Connection
  ;;;
  
  
  (method protected virtual (accept-connection self port)
    (process-connection self port))
  
  
  (method protected virtual (close-connection self port)
    (close-port port))
  
  
  (method protected virtual (process-connection self port)
    (when connection-handler
      (connection-handler port)))))
