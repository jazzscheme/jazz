;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; HTTP Client
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2012
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


;; - Le HTTP-Client doit aussi retenir les cookies et les reenvoyer
;; - Va permettre de s'autentifier au serveur et de rejouer un scenario correctement
;; - Aussi, sans afficher le HTML graphiquement, un API au HTTP-Client qui utiliserais
;;   le parser Microsoft serait pas mal capote!
;; - Doit aussi support le code see-other ou on redirige a l'url contenu dans le header "Location"


(module protected jazz.network.http.HTTP-Client jazz


(import (jazz.library)
        (jazz.network))


(class HTTP-Client extends Object
  
  
  (slot cookies initialize (make-table test: equal?))
  
  
  ;;;
  ;;;; Navigate
  ;;;
  
  
  (method public (navigate host operation resource (port: port 'http) (parameters: parameters '()))
    (define (store-cookies response)
      (for-each-cookie~ response
        (lambda (name cookie)
          (add-cookie cookie))))
    
    (let* ((request (build-request host port operation resource parameters))
           (response (send-request request host port))
           (code (get-code~ response)))
      (store-cookies response)
      (case code
        ((see-other)
         (let* ((location (get-header~ response "Location"))
                (url (new URL (list location))))
           (receive (hostname resource) (split~ url)
             ;; should probably modify split to not remove the / instead...
             (let ((resource (concatenate "/" resource)))
               (navigate-safely (new Host name: hostname) "GET" resource)))))
        (else
         response))))
  
  
  ;; The intent of this method is to cover the case where a redirect is
  ;; circular that will surely crash the server if it occurs (to implement)
  (method (navigate-safely host operation resource)
    (navigate host operation resource))
  
  
  ;;;
  ;;;; Cookies
  ;;;
  
  
  (method (add-cookie cookie)
    (let ((name (get-name~ cookie)))
      (table-set! cookies name cookie)))
  
  
  (method (for-each-cookie proc)
    (iterate-table cookies proc))
  
  
  ;;;
  ;;;; HTTP
  ;;;
  
  
  (method (send-request request host port)
    (unimplemented 'send-request)
    @windows-specific
    (with ((socket (new Socket)))
      (let* ((string (message-string~ request))
             (block (coerce string Heap-Block)))
        (connect~ socket host port)
        (send-raw~ socket block)
        (new HTTP-Response socket: socket))))
  
  
  (method (build-request host port operation resource parameters)
    (let ((request (new HTTP-Request operation: operation resource: resource parameters: parameters)))
      (set-header!~ request "Accept" "text/html")
      (set-header!~ request "Accept-Encoding" "identity")
      (set-header!~ request "Host" (get-name~ host))
      (for-each-cookie
       (lambda (name cookie)
         (add-cookie~ request cookie)))
      (add-cookies request)
      request))))
