;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; HTTP Messages
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.network.http.HTTP-Message jazz


(import (jazz.network))


(class HTTP-Message extends Object ;; ABSTRACT
  
  
  (slot protocol initialize "HTTP/1.1"                getter generate)
  (slot headers  initialize (make-table test: equal?) getter generate)
  (slot content  initialize #f                        getter generate)
  
  ;; synthetic/cached slot
  (slot cookies  initialize (make-table test: equal?) getter generate)
  
  
  ;; abstract slot?
  (slot cookie-header-name)
  
  
  (method override (initialize
                     (content: content #f))
    (nextmethod)
    (set! content~self content))
  
  
  ;;;
  ;;;; Headers
  ;;;
  
  
  (method public (get-header name (error?: error? #t))
    (either (table-ref headers name #f)
            (when error?
              (error "Unknown header: {s}" name))))
  
  
  (method public (get-list-header name . rest)
    (let ((value (apply get-header name rest)))
      (if (string? value)
          (list value)
        value)))
  
  
  (method public (add-header name value)
    (let* ((actual (table-ref headers name #f))
           (new-value
            (cond ((not actual) value)
                  ((pair? actual) (append actual (list value)))
                  (else (list actual value)))))
      (table-set! headers name new-value)))
  
  
  (method (print-headers port)
    ;; put in logic to check for content and output Content-Length header here
    (if content
        (add-header "Content-Length" (string-length content)))
    (iterate-table 
      headers
      (lambda (name value)
        (print-header name value port))))
  
  
  (method (print-header name value port)
    (format port "{%}{a}: {a}" name value))
  
  (method virtual (send port)
    )
  
  ;;;
  ;;;; Cookies
  ;;;


  (method public (get-cookie name)
    (table-ref cookies name #f))
  
  
  (method public (add-cookie cookie)
    (let ((name (get-name~ cookie)))
      (table-set! cookies name cookie)))
  
  
  (method public (for-each-cookie proc)
    (iterate-table cookies proc))
  
  
  (method (print-cookies port)
    (for-each-cookie
      (lambda (cookie-name cookie)
        (print-header cookie-header-name
                      (print~ cookie) ;; FIXME
                      port))))
  
  ;; (method (parse-cookies) ;; called after init/after add header??
;;     (let ((headers (get-list-header cookie-header-name error?: #f)))
;;       (when headers
;;         (for-each (lambda (header-line)
;;                     (add-cookie (parse-cookie header-line))) 
;;                   headers))))

  ;; (method (parse-cookie header-line)
  ;;)
    )
)
