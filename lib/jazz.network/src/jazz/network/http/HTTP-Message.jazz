;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; HTTP Messages
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library protected jazz.network.http.HTTP-Message jazz


(import (jazz.library)
        (jazz.network)
        (jazz.utilities))


(class HTTP-Message extends Object
  
  
  (slot headers initialize (make-table test: equal?))
  (slot cookies initialize (make-table test: equal?))
  
  
  ;;;
  ;;;; Parsing
  ;;;

  
  @seems-doing-char-input-is-illegal-before-read-subu8vector
  (method (read-line/headers port)
    (let ((line (read-line port))
          (fact (new List-Factory)))
      (let (loop)
        (let ((str (read-line port)))
          (if (empty-string? str)
              (values line (get-output~ fact))
            (put~ fact str)
            (loop))))))
  
  
  (method (read-line/headers port)
    (let ((output (open-output-u8vector)))
      (let (loop (c0 #f)
                 (c1 #f)
                 (c2 #f)
                 (c3 (read-u8 port)))
        (write-u8 c3 output)
        (if (and (eqv? c0 13)
                 (eqv? c1 10)
                 (eqv? c2 13)
                 (eqv? c3 10))
            (call-with-input-u8vector (list init: (get-output-u8vector output) eol-encoding: 'cr-lf)
              (function (input)
                (values (read-line input)
                        (read-all input read-line))))
          (loop c1 c2 c3 (read-u8 port))))))

  
  (method (parse-headers headers)
    (for-each (function (header)
                (unless (empty-string? header)
                  (let* ((pos (find header #\colon))
                         (name (subseq header 0 pos))
                         (value (subseq header (+ pos 2))))
                    (add-header name value))))
              headers))
  
  
  (method (parse-cookies header)
    (let ((headers (get-list-header header error?: #f)))
      (when headers
        (for-each parse-cookie headers))))
  
  
  (method (parse-cookie cookie-value)
    (let* ((pos (find cookie-value #\=))
           (semi (find cookie-value #\;))
           (name (subseq cookie-value 0 pos))
           (value (subseq cookie-value (+ pos 1) semi)))
      (add-cookie (new HTTP-Cookie name value))))
  
  
  (method (read-body port)
    (let ((content-length (get-header "Content-Length" error?: #f)))
      (if (not content-length)
          #f
        (let ((content-length (parse-integer content-length)))
          (let ((body (make-u8vector content-length)))
            (read-subu8vector body 0 content-length port)
            body)))))
  
  
  ;;;
  ;;;; Headers
  ;;;
  
  
  (method public (get-headers)
    headers)
  
  
  (method public (get-header name (error?: error? #t))
    (either (table-ref headers name #f)
            (when error?
              (error "Unknown header: {s}" name))))
  
  
  (method public (get-list-header name . rest)
    (let ((value (apply get-header name rest)))
      (if (string? value)
          (list value)
        value)))
  
  
  (method public (add-header name value)
    (let* ((actual (table-ref headers name #f))
           (new-value
            (cond ((not actual) value)
                  ((pair? actual) (append actual (list value)))
                  (else (list actual value)))))
      (table-set! headers name new-value)))
  
  
  ;;;
  ;;;; Cookies
  ;;;


  (method public (get-cookies)
    cookies)
  
  
  (method public (get-cookie name)
    (table-ref cookies name #f))
  
  
  (method public (get-cookie-value name)
    (let ((cookie (get-cookie name)))
      (when cookie
        (get-value~ cookie))))
  
  
  (method public (add-cookie cookie)
    (let ((name (get-name~ cookie)))
      (table-set! cookies name cookie)))
  
  
  (method public (for-each-cookie proc)
    (iterate-table cookies proc))
  
  
  ;;;
  ;;;; Send
  ;;;
  
  
  (method public virtual (send-message port)
    (let ((str (message-string)))
      (display str port)))
  
  
  (method protected virtual (message-string)
    )
  
  
  ;;;
  ;;;; Output
  ;;;
  
  
  (method (output-headers printer)
    (iterate-table headers
      (function (name value)
        (output-header name value printer))))
  
  
  (method (output-header name value printer)
    (format printer "{%}{a}: {a}" name value))
  
  
  (method (output-cookies header printer)
    (for-each-cookie
      (function (name cookie)
        (let ((value (get-value~ cookie)))
          (output-header header (format "{a}={a}; Path=/" name value) printer)))))))
