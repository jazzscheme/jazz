;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; HTTP Requests
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.network.http.HTTP-Request jazz


(import (jazz.network)
        (jazz.network.http))


(class HTTP-Request extends HTTP-Message

  
  ;; (slot remote-address getter generate) ;; FIXME
  ;; (slot remote-port getter generate) ;; use Gambit's tcp-client-peer-socket-info
  ;; the two parameters shouldn't be here - TCP stuff
  
  (slot http-method getter generate)
  (slot uri getter generate)

  ;; synthetic parameters (come from uri and content)
  (slot get-parameters  initialize (make-table test: equal?) getter generate)
  (slot post-parameters initialize (make-table test: equal?) getter generate)
  
  
  (slot cookie-header-name initialize "Cookie")
  
  
  (method override (initialize (http-method: http-method {}) 
                               (uri: uri {})
                               (content: content #f))
    (nextmethod)
    (set! http-method~self http-method)
    (set! uri~self uri)
    (set! content~self content))
  
  
  ;;;
  ;;;; Parsing
  ;;;


@request-from-i.e.
"GET /test HTTP/1.1
Accept: */*
Referer: http://localhost/
Accept-Language: en-ca
Accept-Encoding: gzip, deflate
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; .NET CLR 1.1.4322)
Host: localhost
Connection: Keep-Alive
Cookie: SessionID=nil

"

@request-from-firefox
"GET /test HTTP/1.1
Host: localhost
User-Agent: Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.7.10) Gecko/20050716 Firefox/1.0.6
Accept: text/xml,application/xml,application/xhtml+xml,text/html;q=0.9,text/plain;q=0.8,image/png,*/*;q=0.5
Accept-Language: en-us,en;q=0.5
Accept-Encoding: gzip,deflate
Accept-Charset: ISO-8859-1,utf-8;q=0.7,*;q=0.7
Keep-Alive: 300
Connection: keep-alive
Referer: http://localhost/
Cookie: SessionID=nil

"

@request-from-jazz
"GET /test HTTP/1.1

"
  
  
  (method (parse-request port)
    (define (parse-uri uri)
      (let ((pos (find uri #\question-mark)))
        (if (not pos)
            (values (url-decode (subseq uri 1))
                    {})
          (values (url-decode (subseq uri 1 pos))
                  (subseq uri (+ pos 1))))))
    
    (define (parse-parameters fragment port)
      (define (split-parameters port)
        (let ((parameters (read-all port (lambda (port) (read-line port #\&)))))
          (map (lambda (parameter)
                 (let* ((pos (find parameter #\=))
                        (name (subseq parameter 0 pos))
                        (value (parse-value (subseq parameter (+ pos 1)))))
                   (cons (url-decode name) (url-decode value))))
               parameters)))
      
      ;; (if fragment
;;           (call-with-input-string fragment
;;             (lambda (port)
;;               (set! get-parameters~self (split-parameters port))))
;;         (let ((body (read-body port)))
;;           (when body
;;             (call-with-input-u8vector body
;;               (lambda (port)
;;                 (set! post-parameters~self (split-parameters port))))))
;;         )
      #f
      )
    
    (define (parse-value value)
      (substitute #\+ #\space value))
    
    ;; (receive (line headers) (read-line/headers port)
;;       (bind (http-method uri protocol) (split line " ")
;;         (receive (uri fragment) (parse-uri uri)
;;           (set! http-method~self http-method)
;;           (set! uri~self uri)
;;           (set! protocol~self protocol)
;;           (parse-headers headers)
;;           (parse-cookies "Cookie")
;;           (parse-parameters fragment port))))
    
    #f
    )
  
  
  ;;;
  ;;;; Access
  ;;;


  (method (get-parameter name (error?: error? #t))
    (let ((info (assoc name get-parameters)))
      (if info
          (cdr info)
        (when error?
          (error "Unknown parameter: {s}" name)))))
  
  
  ;;;
  ;;;; Output
  ;;;
  
  
  (method override (send port)
    (output-control port)
    (print-headers port)
    ;; (output-cookies "Cookie" port)
    (when (= http-method "POST")
      (format port "{%}{%}")
      (output-parameters port))
    (get-output-string port))
  
  
  (method (output-control printer)
    (format printer "{a} {a}" http-method uri)
    (when (= http-method "GET")
      (format printer "?")
      (output-parameters printer))
    (format printer " HTTP/1.1"))
  
  
  (method (output-parameters printer)
    (loop (for parameter in get-parameters)
          (for first? first #t then #f)
          (do (bind (name . value) parameter
                (unless first?
                  (format printer "&"))
                (format printer "{a}={a}"
                        (url-encode name)
                        (url-encode value))))))))
