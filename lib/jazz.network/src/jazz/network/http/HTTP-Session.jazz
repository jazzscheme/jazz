;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; HTTP Sessions
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library protected jazz.network.http.HTTP-Session jazz


(import (jazz.library)
        (jazz.network))


;;;
;;;; Manager
;;;


(definition Session-Id
  0)


(definition Sessions
  '())


(definition public (get-sessions)
  Sessions)


(definition public (new-session)
  (let ((session (new HTTP-Session Session-Id)))
    (set! Sessions (cons session Sessions))
    (increase! Session-Id)
    session))


(definition public (close-session session)
  (set! Sessions (remove! session Sessions)))


(definition public (find-session session-id)
  (find-if (lambda (session)
             (= (get-id~ session) session-id))
           Sessions))


;;;
;;;; Session
;;;


(class HTTP-Session extends Object
  
  
  (slot id         initialize {}  getter generate)
  (slot properties initialize '() getter generate)
  
  
  (method override (initialize id)
    (nextmethod)
    (set! id~self id))
  
  
  (method override (print printer readably)
    (print-unreadable self printer
      (lambda (printer)
        (format printer "id: {s}" id))))
  
  
  ;;;
  ;;;; Properties
  ;;;
  
  
  (definition Not-Found
    {Box not-found})


  (method public (get-property name (error?: error? #t))
    (let ((value (getf properties name not-found: Not-Found)))
      (if (neq? value Not-Found)
          value
        (when error?
          (error "Unknown property: {s}" name)))))
  
  
  (method public (set-property name value)
    (if (getprop properties name)
        (setf properties name value)
      (set! properties (addf properties name value))))))
