;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Session Manager
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.network.http.Session-Manager jazz


(import (jazz.library)
        (jazz.network)
        (jazz.network.http.Session))


;;; TODO:
;; session timeout
;; make thread-safe
;; 


(class Session-Manager extends Object
  
  
  (slot id-counter        initialize 0    accessors generate)
  (slot sessions          initialize '()  accessors generate)
  ;; (slot session-timeout   initialize 3600 accessors generate)
  ;; (slot session-list-lock initialize '()) ;; FIXME
  

  (method public (new-session) ;; signature should be: (request port reply)
    (let ((session (new Session id-counter)))
      (set! sessions (cons session sessions))
      (increase! id-counter)
      session))


  (method public (end-session session)
    (set! sessions (remove! session sessions)))


  (method public (get-session request port)
    @fixme
    (let ((session-id
            0)) ;; fixme
      (find-if (lambda (session)
                 (= (get-id~ session) session-id))
               sessions))
    #f
    )
  
  )
)
