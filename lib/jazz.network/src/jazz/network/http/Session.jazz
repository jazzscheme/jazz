;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Sessions
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2012
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.network.http.Session jazz


(import (jazz.library))


(class Session extends Object

  
  (slot id               initialize #f          getter generate)
  (slot session-timeout  initialize 3600        accessors generate) ;; seconds
  (slot last-access-time initialize (real-time) accessors generate)
  (slot properties       initialize '()         getter generate)
  
  
  (method override (initialize id)
    (nextmethod)
    (set! id~self id))
  
  
  (method override (print printer readably)
    (print-unreadable self printer
      (lambda (printer)
        (format printer "id: {s}" id))))


  (method public virtual (expired?)
    (< (- (real-time) last-access-time) session-timeout))


  (method public virtual (end-session)
    )
  
  
  ;;;
  ;;;; Properties
  ;;;
  
  
  (definition Not-Found
    {Box not-found})


  (method public virtual (get-property name (error?: error? #t))
    (let ((value (getf properties name not-found: Not-Found)))
      (if (neq? value Not-Found)
          value
        (when error?
          (error "Unknown property: {s}" name)))))
  
  
  (method public virtual (set-property name value)
    (if (getprop properties name)
        (setf properties name value)
      (set! properties (addf properties name value))))))
