;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Web Server
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.network.http.Web-Server jazz


(import (jazz.io)
        (jazz.jml)
        (jazz.library)
        (jazz.network)
        (jazz.utilities))


(class Web-Server extends HTTP-Server
  
  
  (slot root-directory)
  (slot default-resource)
  (slot unauthentified-resource)
  (slot html-generator)
  
  
  (method (initialize . rest)
    (bind-keywords ((root-directory {}) (default-resource {}) (unauthentified-resource {}) . others) rest
      (apply nextmethod others)
      (set! root-directory~self root-directory)
      (set! default-resource~self default-resource)
      (set! unauthentified-resource~self unauthentified-resource)
      (set! html-generator~self {})))

  
  ;;;
  ;;;; Access
  ;;;
  
  
  (method public (get-root-directory)
    root-directory)
  
  
  (method public (get-default-resource)
    default-resource)
  
  
  (method public (get-unauthentified-resource)
    unauthentified-resource)
  
  
  (method public (get-html-generator)
    html-generator)
  
  
  (method public (set-html-generator value)
    (set! html-generator value))

  
  ;;;
  ;;;; Resource
  ;;;
  
  
  (method (find-file-resource resource)
    (when (and root-directory (not (empty-string? resource)))
      (let ((file (new-file~ root-directory (tokenise-filename resource))))
        (when (exists?~ file)
          file))))

  
  ;;;
  ;;;; Generate
  ;;;
  
  
  (method (generate-response request)
    (let ((resource (get-resource~ request)))
      (if (and (empty-string? resource) default-resource)
          (redirect-response request default-resource)
        (let ((generator (find-generator request resource)))
          (if generator
              (generator request)
            (let ((pages-info (find-pages-info resource)))
              (if pages-info
                  (bind (resource pages-class . rest) pages-info
                    (bind-optionals ((needs-authentification? #f)) rest
                      (process-pages request resource pages-class needs-authentification?)))
                (let ((file (find-file-resource resource)))
                  (if (not file)
                      (nextmethod request)
                    (let ((ext (get-extension~ file)))
                      (cond ((ci=? ext "jml") (process-jml-file request file))
                            ((ci=? ext "html") (process-html-file request file))
                            ((member? ext '("gif" "png" "jpg" "bmp" "css" "js") test: ci=?) (process-resource-file request file))
                            (else (process-unknown-file request file)))))))))))))
  
  
  (method (find-generator request resource)
    (let ((pair (assoc resource (get-associations))))
      (if (not pair)
          pair
        (cdr pair))))
  
  
  (method protected virtual (get-associations)
    '())

  
  ;;;
  ;;;; Pages
  ;;;
  
  
  (method (find-pages-info resource)
    (let ((associations (get-pages-associations)))
      (assoc resource associations)))
  
  
  (method protected virtual (get-pages-associations)
    '())
  
  
  (method (process-pages request resource pages-class needs-authentification?)
    (catch (HTTP-Redirect redirect
             (redirect-response request (get-resource~ redirect)))
      (validate-authentification request needs-authentification?)
      (generate-pages request resource pages-class)))
  
  
  (method (validate-authentification request needs-authentification?)
    (when (and needs-authentification? (null? (get-session~ request)))
      (redirect-pages unauthentified-resource)))
  
  
  (method (generate-pages request resource pages-class)
    (when html-generator
      (generate-static-page request resource pages-class html-generator))
    (call-listeners-receive-pages-request request resource pages-class)
    (let* ((pref (jml-preferences))
           (pages (new (autoload pages-class) self request {} pref))
           (renderer (jml-renderer pref))
           (jml (process-request~ pages request resource))
           (printer (open-output-string)))
      (render~ renderer jml printer)
      (get-output-string printer)))
  
  
  (method (generate-static-page request resource pages-class html-generator)
    (let* ((pref (jml-preferences))
           (pages (new (autoload pages-class) self request html-generator pref)))
      (when (generate-page?~ html-generator resource pages)
        (setup-directory~ html-generator request resource pages)
        (let ((renderer (jml-renderer pref))
              (jml (process-request~ pages request resource))
              (static-file (generated-page~ html-generator request root-directory resource pages)))
          (create-directories~ static-file)
          (call-with-output-file (parse~ static-file)
            (function (printer)
              (render~ renderer jml printer)))))))

  
  ;;;
  ;;;; Redirect
  ;;;
  
  
  (method public (redirect-pages resource)
    (throw (new HTTP-Redirect resource)))
  
  
  (method (redirect-response request resource)
    (let ((host (get-header~ request "Host"))
          (session (get-session~ request))
          (response (new HTTP-Response code: 'see-other)))
      (add-connection-close response)
      (add-content-type response "text/html")
      (add-location response (format "http://{a}{a}" host resource))
      (add-session-cookie response session)
      response))

  
  ;;;
  ;;;; JML
  ;;;
  
  
  (method (process-jml-file request file)
    (call-with-input-file (list path: (parse~ file) eol-encoding: 'cr-lf readtable: jazz-readtable)
      (function (reader)
        (let ((jml (read reader)))
          (process-jml request jml)))))

  
  ;;;
  ;;;; HTML
  ;;;
  
  
  (method (process-html-file request file)
    (let* ((response (new HTTP-File-Response file: file))
           (content (get-content~ response)))
      (add-connection-close response)
      (add-content-type response "text/html")
      (add-content-length response (u8-content-size content))
      response))

  
  ;;;
  ;;;; File
  ;;;
  
  
  (method (process-resource-file request file)
    (let* ((response (new HTTP-File-Response file: file))
           (content (get-content~ response)))
      (add-connection-close response)
      (add-content-type response "text/plain")
      (add-content-length response (u8-content-size content))
      response))

  
  ;;;
  ;;;; Unknown
  ;;;
  
  
  (method (process-unknown-file request file)
    `(<html>
       (<head>
         (<title> "Error"))
       (<body>
         ,(format "Unknown resource type: {a}" (parse~ file))
         (<br>)
         (<br>)
         ,(request-content request)))))


;;;
;;;; Redirect
;;;


(class HTTP-Redirect extends Exception
  
  
  (slot resource)
  
  
  (method (initialize res)
    (nextmethod)
    (set! resource res))))
