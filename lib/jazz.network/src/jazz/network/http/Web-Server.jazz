;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Web Server
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;    Vladimir Sedach <vsedach@gmail.com>
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.network.http.Web-Server jazz


(import (jazz.io)
        (jazz.jml)
        (jazz.network)
        (jazz.network.http.Dispatcher)
        (jazz.network.http.Session-Manager)
        (webserver))


(class Web-Server extends Object
  
  
  (slot dispatcher        initialize (new HTTP-Dispatcher) accessors generate)
  ;;(slot session-manager initialize (new Session-Manager) accessors generate)
  (slot port-number       initialize 8080                  accessors generate)
  (slot gambit-webserver                                   accessors generate)
  (slot server-thread                                      accessors generate)


  (method override (initialize (port: port 8080))
    (nextmethod)
    (set! port-number port))
  
  
  ;; gambit webserver dispatcher: (lambda (connection method uri parameters headers content)
  ;; uri is a define-type
  ;; parameters is an alist
  
  
  (method public (start)
    (define gambit-webserver-dispatch-hook
      (lambda (connection method uri parameters headers content)
        (let ((request 
                (new HTTP-Request 
                  http-method: method
                  uri: (uri-path uri) ;; fixme
                  get-parameters: (or parameters ())
                  ;; headers: xxx
                  content: content
                  )))
          (dispatch~ dispatcher request connection self))))    
    
    (set! gambit-webserver (make-http-server port-number: port-number
                                             dispatcher: gambit-webserver-dispatch-hook))
    (set! server-thread (new-thread (lambda () 
                                      (http-server-start! gambit-webserver))
                                    'web-server-thread))
    (thread-start! server-thread))

  
  (method public (stop)
    (when server-thread
      (thread-interrupt! server-thread
        thread-exit)
      (set! server-thread #f)))))
