;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Server Panel
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.network.server.Server-Panel jazz


(import (jazz.debuggee)
        (jazz.event)
        (jazz.jrm)
        (jazz.network)
        (jazz.process)
        (jazz.settings)
        (jazz.system))


(class Server-Panel extends Object
  
  
  ;;;
  ;;;; Loop
  ;;;
  
  
  (definition prompt
    "% ")
  
  (definition display-backtrace?
    #f)
  
  
  (method (run-loop server)
    (define input
      #f)
    
    (define output
      #f)
    
    (define exiting?
      #f)
    
    (define (setup-input/output)
      (let ((port (find-setting 'jazz.server-panel.port 'console)))
        (case port
          ((console)
           (set! input (console-input-port))
           (set! output (console-output-port)))
          ((terminal)
           (set! input (terminal-port))
           (set! output (terminal-port)))
          (else
           (error "Invalid jazz.server-panel.port setting: {s}" port)))))
    
    (define (process-command command)
      (call-with-input-string command
        (lambda (input)
          (let ((command (read input))
                (arguments (read-all input read)))
            (case command
              ((start) (start-command arguments))
              ((stop) (stop-command arguments))
              ((restart) (restart-command arguments))
              ((info) (info-command arguments))
              ((listener) (listener-command arguments))
              ((listen) (listen-command arguments))
              ((debug) (debug-command arguments))
              ((attach) (attach-command arguments))
              ((detach) (detach-command arguments))
              ((repl) (repl-command arguments))
              ((help ?) (help-command arguments))
              ((reboot) (reboot-command arguments))
              ((quit) (quit-command arguments))
              (else (error "Unknown command: {s}" command)))))))
    
    (define (start-command arguments)
      (start-server))
    
    (define (stop-command arguments)
      (stop-server))
    
    (define (restart-command arguments)
      (restart-server))
    
    (define (info-command arguments)
      (server-info))
    
    (define (listener-command arguments)
      (let ((listener (get-remote-listener)))
        (format output "{a}{%}" (and listener (encode-host/port (listening-host~ listener) (listening-port~ listener))))))
    
    (define (listen-command arguments)
      (listen))
    
    (define (debug-command arguments)
      (server-debug (if (null? arguments)
                        (not (get-debug?~ server))
                      (car arguments))))
    
    (define (attach-command arguments)
      (let ((argument (car arguments)))
        (let ((debugger (cond ((string? argument) argument)
                              ((symbol? argument) (symbol->string argument))
                              (else #f))))
          (if (not debugger)
              (format output "Invalid debugger argument {a}{%}" argument)
            (when (call-event
                    (lambda ()
                      (with-exception-catcher
                        (lambda (exc)
                          (display-exception exc)
                          #f)
                        (lambda ()
                          (setup-debuggee debugger: debugger)
                          (start-repl-thread (current-thread) #f (get-console-port))
                          (select-console)
                          #t))))
              (setup-input/output)
              (format output "Attached to debugger {a}{%}" debugger))))))
    
    (define (detach-command arguments)
      (detach-from-controller)
      (setup-input/output)
      (format output "Detached from debugger{%}"))
    
    (define (repl-command arguments)
      (with-system-exception-debugger
        (lambda ()
          (repl))))
    
    (define (help-command arguments)
      (format output "Commands are{%}")
      (format output "  start            : Start the server{%}")
      (format output "  stop             : Stop the server{%}")
      (format output "  restart          : Restart the server{%}")
      (format output "  info             : Show server information{%}")
      (format output "  listen           : Listen for jazz remoting calls{%}")
      (format output "  listener         : Display remote listener address{%}")
      (format output "  debug [flag]     : Toggle or set debugging to flag{%}")
      (format output "  attach host:port : Attach to debugger{%}")
      (format output "  detach           : Detach from debugger{%}")
      (format output "  repl             : Start a read-eval-print-loop{%}")
      (format output "  help or ?        : Display available commands{%}")
      (format output "  reboot           : Reboot the application{%}")
      (format output "  quit             : Quit the server panel{%}")
      (force-output output))
    
    (define (quit-command arguments)
      (exit-command))
    
    (define (exit-command)
      (let ((process (get-process)))
        (if (not process)
            (exit)
          (set! exiting? #t)
          (post-event
            (lambda ()
              (exit-process~ process))))))
    
    (define (reboot-command arguments)
      (reboot-process~ (get-process)))
    
    ;;;
    ;;;; Server
    ;;;
    
    (define (server-at)
      (format "{a}:{a}"
              (or (server-host~ server) localhost)
              (server-service~ server)))
    
    (define (start-server)
      (define (start-stopped)
        (start~ server)
        (if (not (wait-started~ server error?: #f))
            (error "Unable to start server")
          (format output "Server started at {a}{%}" (server-at))))
      
      (define (format-exception exc)
        (cond ((os-exception? exc)
               "address/port already in use"
               @missing-message-and-code-in-exception-from-gambit
               (format "OS exception {?- {a}~}{?({x})~}"
                       (os-exception-message exc)
                       (os-exception-code exc)))
              (else
               exc)))
      
      (let ((state (get-state~ server)))
        (case state
          ((stopped)
           (if (get-controller-debugger)
               (start-stopped)
             (with-exception-catcher
               (lambda (exc)
                 (format output "Unable to start server: {a}{%}"
                   (format-exception exc)))
               (lambda ()
                 (start-stopped)))))
          (else
           (format output "Server is {s}{%}" state)))))
    
    (define (stop-server)
      (let ((state (get-state~ server)))
        (case state
          ((started)
           (stop~ server)
           (if (not (wait-stopped~ server error?: #f))
               (error "Unable to stop server")
             (format output "Server stopped{%}")))
          (else
           (format output "Server is {s}{%}" state)))))
    
    (define (restart-server)
      (let ((state (get-state~ server)))
        (case state
          ((stopped started)
           (restart~ server)
           (if (not (wait-started~ server error?: #f))
               (error "Unable to restart server")
             (format output "Server restarted at {a}{%}" (server-at))))
          (else
           (format output "Server is {s}{%}" state)))))
    
    (define (server-info)
      (format output "Server {a}{%}" (get-state~ server))
      (format output "  name                    : {a}{%}" (server-name~ server))
      (format output "  class                   : {a}{%}" (category-identifier (class-of server)))
      (format output "  host                    : {a}{%}" (or (server-host~ server) localhost))
      (format output "  service                 : {a}{%}" (server-service~ server))
      (output-server-info output)
      (format output "  hits                    : {a}{%}" (server-hits~ server))
      (format output "  debug?                  : {a}{%}" (server-debug?~ server)))
    
    (define (server-debug debug?)
      (set-debug?~ server debug?)
      (format output "Server {a}being debugged{%}" (if debug? "" "not ")))
    
    (define (listen)
      (start-remote-server~ (get-process))
      (setup-local-process)
      (let ((listener (require-remote-listener)))
        (format output "{a}{%}" (encode-host/port (listening-host~ listener) (listening-port~ listener)))))
    
    ;;;
    ;;;; Panel
    ;;;
    
    (setup-input/output)
    
    (format output "{a} v{a}{%}{%}" (server-title~ server) (present~ (server-version~ server)))
    (force-output output)
    
    (start-server)
    
    (let (loop (newline? #t))
      (unless exiting?
        (when newline?
          (newline output))
        (display prompt output)
        (force-output output))
      (let ((command (read-line input)))
        (cond ((eof-object? command)
               (exit-command))
              ((empty-string? command)
               (loop #f))
              (else
               (continuation-capture
                 (lambda (stop)
                   (with-exception-handler
                     (lambda (exc)
                       (display-exception exc)
                       (when display-backtrace?
                         (continuation-capture
                           (lambda (cont)
                             (display-continuation-backtrace cont))))
                       (continuation-return stop #f))
                     (lambda ()
                       (process-command command)))))
               (loop #t))))))
  
  
  (method protected virtual (output-server-info output)
    )))
