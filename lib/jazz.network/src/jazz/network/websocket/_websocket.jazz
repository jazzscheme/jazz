;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Web Sockets
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module jazz.network.websocket jazz


(import (base64)
        (jazz.network)
        (jazz.network.websocket.foreign))


(define max-frame-size (make-parameter 1048576)) ; 1MiB
(define max-message-size (make-parameter 1048576)) ; 1MiB


(define (opcode->optype op)
  (case op
    ((0) 'continuation)
    ((1) 'text)
    ((2) 'binary)
    ((8) 'connection-close)
    ((9) 'ping)
    ((10) 'pong)
    (else (signal 'bad-opcode))))


(define (optype->opcode t)
  (case t
    ('continuation 0)
    ('text 1)
    ('binary 2)
    ('connection-close 8)
    ('ping 9)
    ('pong 10)
    (else (signal 'invalid-optype))))


;;;
;;;; Fragment
;;;


(class Fragment extends Object


  (slot payload     getter generate)
  (slot length      getter generate)
  (slot masked?     accessors generate)
  (slot masking-key getter generate)
  (slot fin         getter generate)
  (slot optype      getter generate)


  (method override (initialize self payload length masked? masking-key fin optype)
    (nextmethod self)
    (set! self.payload payload)
    (set! self.length length)
    (set! self.masked? masked?)
    (set! self.masking-key masking-key)
    (set! self.fin fin)
    (set! self.optype optype))


  (method override (print self output readably)
    (print-unreadable self output
      (lambda (output)
        (format output "{a}" optype)))))


;;;
;;;; Server
;;;


(class WebSocket-Server extends TCP-Server
  
  
  (slot tls-context getter generate)
    
  
  (method override (initialize self . rest)
    (bind-keywords ((tls-context #f) . others) rest
      (apply nextmethod self eol-encoding: 'lf others)
      (set! self.tls-context tls-context)))

  
  (method override (accept-connection self port)
    (let ((key (read-handshake self port)))
      (write-handshake self key port)
      (process-connection self port)))
  
  
  (method (accept self key)
    (define GUID
      "258EAFA5-E914-47DA-95CA-C5AB0DC85B11")
    
    (let ((sha1 (digest-string (string-append key GUID) 'SHA-1 'u8vector)))
      (u8vector->base64-string sha1)))


  (method (read-handshake self port)
    (let ((key #f))
      (let (loop)
        (let ((header (read-line port)))
          (define (extract name)
            (if (starts-with? header name)
                (substring header (string-length name) (- (string-length header) 1))
              #f))
          
          (if (or (equal? header "")
                  (equal? header "\r"))
              key
            (format :terminal "  {a}{%}"  header)
            (cond ((extract "Sec-WebSocket-Key: ")
                   => (lambda (value)
                        (set! key value))))
            (loop))))))


  (method (write-handshake self key port)
    (define (write header)
      (format :terminal "  {a}{%}" header)
      (format port "{a}{%}" header))
    
    (let ((accept (accept self key)))
      (write "HTTP/1.1 101 Switching Protocols")
      (write "Upgrade: websocket")
      (write "Connection: Upgrade")
      (write (format "Sec-WebSocket-Accept: {a}" accept))
      (format port "{%}")
      (force-output port)))


  (method (websocket-unmask-frame-payload self payload len frame-masking-key)
    (define tmaskkey (make-u8vector 4))
    
    (u8vector-set! tmaskkey 0 (vector-ref frame-masking-key 0))
    (u8vector-set! tmaskkey 1 (vector-ref frame-masking-key 1))
    (u8vector-set! tmaskkey 2 (vector-ref frame-masking-key 2))
    (u8vector-set! tmaskkey 3 (vector-ref frame-masking-key 3))
    
    (unmask-websocket-frame tmaskkey len payload)
    payload)


  (method (unmask self fragment)
    (if (get-masked? fragment)
        (let ((r (websocket-unmask-frame-payload self
                   (get-payload fragment)
                   (get-length fragment)
                   (get-masking-key fragment))))
          (set-masked? fragment #f)
          r)
      (get-payload fragment)))


  (method (read-frame-payload self port frame-payload-length)
    (let ((data (make-u8vector frame-payload-length)))
      (read-subu8vector data 0 frame-payload-length port)
      data))


  (method (read-frame self total-size port)
    (let ((b0 (read-u8 port)))
      (if (eof-object? b0)
          b0
        ;; we don't support reserved bits yet
        (if (or (> (bitwise-and b0 64) 0)
                (> (bitwise-and b0 32) 0)
                (> (bitwise-and b0 16) 0))
            (signal 'reserved-bits-not-supported)
          (let* ((frame-fin (> (bitwise-and b0 128) 0))
                 (frame-opcode (bitwise-and b0 15))
                 (frame-optype (opcode->optype frame-opcode))
                 (b1 (read-u8 port))
                 (frame-masked (> (bitwise-and b1 128) 0))
                 (frame-payload-length (bitwise-and b1 127)))
            (cond ((= frame-payload-length 126)
                   (let ((bl0 (read-u8 port))
                         (bl1 (read-u8 port)))
                     (set! frame-payload-length (+ (arithmetic-shift bl0 8) bl1))))
                  ((= frame-payload-length 127)
                   (let ()
                     (define (shift i r)
                       (if (< i 0)
                           r
                         (shift (- i 1) (+ (arithmetic-shift (read-u8 port) (* 8 i))
                                           r))))
                     (set! frame-payload-length (shift 7 0)))))
            (if (or (> frame-payload-length (max-frame-size))
                    (> (+ frame-payload-length total-size) (max-message-size)))
                (signal 'message-too-large)
              (let* ((frame-masking-key
                       (if frame-masked
                           (let* ((fm0 (read-u8 port))
                                  (fm1 (read-u8 port))
                                  (fm2 (read-u8 port))
                                  (fm3 (read-u8 port)))
                             (vector fm0 fm1 fm2 fm3))
                         #f)))
                (cond
                  ((or (eq? frame-optype 'text) (eq? frame-optype 'binary)
                       (eq? frame-optype 'continuation) (eq? frame-optype 'ping)
                       (eq? frame-optype 'pong))
                   (new Fragment
                     (read-frame-payload self port frame-payload-length)
                     frame-payload-length frame-masked
                     frame-masking-key frame-fin frame-optype))
                  ((eq? frame-optype 'connection-close)
                   (new Fragment
                     (read-frame-payload self port frame-payload-length)
                     frame-payload-length frame-masked frame-masking-key
                     frame-fin frame-optype))
                  (else
                   (signal 'unhandled-optype))))))))))


  (method (write-frame self optype data last-frame port)
    (define (write-u8vector vec port)
      (write-subu8vector vec 0 (u8vector-length vec) port))
    
    (let* ((len (if (string? data) (string-length data) (u8vector-length data)))
           (frame-fin (if last-frame 1 0))
           (frame-rsv1 0)
           (frame-rsv2 0)
           (frame-rsv3 0)
           (frame-opcode (optype->opcode optype))
           (octet0 (bitwise-ior (arithmetic-shift frame-fin 7)
                                (arithmetic-shift frame-rsv1 6)
                                (arithmetic-shift frame-rsv2 5)
                                (arithmetic-shift frame-rsv3 4)
                                frame-opcode))
           
           (frame-masked 0)
           (frame-payload-length (cond ((< len 126) len)
                                       ((< len 65536) 126)
                                       (else 127)))
           (octet1 (bitwise-ior (arithmetic-shift frame-masked 7)
                                frame-payload-length)))
      
      (write-u8vector (u8vector octet0 octet1) port)
      
      (write-u8vector
        (cond ((= frame-payload-length 126)
               (u8vector
                 (arithmetic-shift (bitwise-and len 65280) -8)
                 (bitwise-and len 255)))
              ((= frame-payload-length 127)
               (u8vector
                 0 0 0 0
                 (arithmetic-shift
                   (bitwise-and len 4278190080) -24)
                 (arithmetic-shift
                   (bitwise-and len 16711680) -16)
                 (arithmetic-shift
                   (bitwise-and len 65280) -8)
                 (bitwise-and len 255)))
              (else (u8vector)))
        port)
      
      (if (string? data)
          (write-substring data 0 len port)
        (write-subu8vector data 0 len port))
      
      (force-output port)))))
