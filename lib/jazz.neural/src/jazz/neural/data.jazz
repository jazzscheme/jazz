;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Neural Network Data
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.neural.data jazz:


(import (jazz (except + * - / expt exp log map max sqrt))
        (jazz.io)
        (jazz.neural.array)
        (jazz.neural.overload))


(definition public (load-data file)
  (call-with-input-file (path-settings file)
    (lambda (port)
      (let ((data (read port))
            (target (read port)))
        (cons data target)))))


(definition public (to-categorical target)
  (let ((rows (f64vector-length target))
        (cols 10))
    (let ((array (make-array rows cols)))
      (loop (for row from 0 below rows)
            (let ((digit (inexact->exact (f64vector-ref target row))))
              (array-set! array row digit 1.)))
      array)))


(definition public (shuffle-data X y)
  (let ((idx (random-sequence (naturals 0 (array-rows X)))))
    (values (array-index X idx)
            (array-index y idx))))


(definition public (split-data X y (test-size: test-size 0.5))
  (receive (X y) (shuffle-data X y)
    (let ((split (fxround (* (cast <fl> (array-rows X)) (- 1. test-size)))))
      (values
        (subarray X 0 split) (subarray X split)
        (subarray y 0 split) (subarray y split)))))


(definition public (split-batches X y batch-size)
  (declare (proper-tail-calls))
  (let ((count (array-rows X))
        (batches (new-queue)))
    (let (loop (from 0) (to batch-size))
      (if (>= from count)
          (queue-list batches)
        (let ((to (min to count)))
          (enqueue batches (cons (subarray X from to)
                                 (subarray y from to))))
        (loop to (+ to batch-size)))))))
