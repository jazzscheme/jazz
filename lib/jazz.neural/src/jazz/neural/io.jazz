;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Neural Network IO
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.neural.io jazz


(import (jazz.neural.tensor))


(definition public tell-precision
  3)

(definition public (set-tell-precision precision)
  (set! tell-precision precision))


(definition public (tell . rest)
  (let ((first? #t))
    (for-each (lambda (obj)
                (if first?
                    (set! first? #f)
                  (format :terminal " "))
                (cond ((flonum? obj)
                       (print-flonum obj))
                      ((tensor? obj)
                       (print-tensor obj))
                      (else
                       (format :terminal "{a}" obj))))
              rest))
  (format :terminal "{%}"))


;;;
;;;; Flonum
;;;


(definition protected (print-flonum obj)
  (if (not tell-precision)
      (format :terminal "{a}" obj)
    (format :terminal "{r precision: :v}" obj tell-precision)))


;;;
;;;; Tensor
;;;


(definition (print-tensor-row tensor <Tensor> row (output :terminal))
  (format output "[")
  (let ((cols (tensor-cols tensor)))
    (define (print-col col)
      (when (/= col 0)
        (format output " "))
      (let ((val (tensor-ref tensor row col)))
        (if (>= val 0.)
            (format output " ")
          (format output "-")
          (set! val (- val)))
        (when (< val 1.)
          (format output "0"))
        (if (not tell-precision)
            (format output "{a}" val)
          (format output "{r precision: :v justify: :right width: :v}" val tell-precision tell-precision))))
    
    (if (<= cols 10)
        (loop (for col from 0 below cols)
              (print-col col))
      (loop (for col from 0 below 5)
            (print-col col))
      (format output " ...")
      (loop (for col from (- cols 5) below cols)
            (print-col col))))
  (format output "]"))


(definition public (print-tensor tensor <Tensor> (output :terminal))
  (let ((rows (tensor-rows tensor)))
    (define (print-row row)
      (if (= row 0)
          (format output "[")
        (format output " "))
      (print-tensor-row tensor row output)
      (if (= row (- rows 1))
          (format output "]")
        (format output "{%}")))
    
    (if (<= rows 20)
        (loop (for row from 0 below rows)
              (print-row row))
      (loop (for row from 0 below 10)
            (print-row row))
      (format output " ...{%}")
      (loop (for row from (- rows 10) below rows)
            (print-row row)))))


(definition public (present-tensor tensor <Tensor>)
  (let ((port (open-output-string)))
    (print-tensor tensor port)
    (get-output-string port))))
