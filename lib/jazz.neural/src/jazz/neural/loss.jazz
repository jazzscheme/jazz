;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Loss Functions
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.neural.loss jazz


(import (jazz.neural.data)
        (jazz.neural.syntax (phase syntax))
        (jazz.neural.tensor))


(proclaim (not check bounds types)
          (warn optimizations))


;;;
;;;; Loss-Function
;;;


(class Loss-Function extends Object
  
  
  (method public virtual (loss self y y-pred)
    )
  
  
  (method public virtual (loss-gradient self y y-pred)
    )
  
  
  (method public virtual (accuracy self y p)
    ))


;;;
;;;; Square-Loss
;;;


(class Square-Loss extends Loss-Function
  
  
  (method override (loss self y <Tensor> y-pred <Tensor>) <Tensor>
    (with& (y y-pred)
      (tensor-scalar* 0.5 (tensor-square (tensor- y y-pred)))))

  
  (method override (loss-gradient self y <Tensor> y-pred <Tensor>) <Tensor>
    (with& (y y-pred)
      (tensor- y-pred y)))
  
  
  (method override (accuracy self y <Tensor> y-pred <Tensor>)
    (with& (y y-pred)
      (- 1. (tensor-mean (loss self y y-pred))))))


(definition public square-loss
  (new Square-Loss))


;;;
;;;; Cross-Entropy
;;;


(class Cross-Entropy extends Loss-Function
  
  
  (method override (loss self y <Tensor> p <Tensor>) <Tensor>
    (with& (y p)
      ;; avoid division by zero
      (let& ((p (tensor-clip p 1e-15 (- 1. 1e-15))))
        (tensor- (tensor-negate (tensor* y (tensor-log p)))
                 (tensor* (tensor-scalar- 1. y) (tensor-log (tensor-scalar- 1. p)))))))


  (method override (loss-gradient self y <Tensor> p <Tensor>) <Tensor>
    (with& (y p)
      ;; avoid division by zero
      (let& ((p (tensor-clip p 1e-15 (- 1. 1e-15))))
        (tensor+ (tensor-negate (tensor/ y p))
                 (tensor/ (tensor-scalar- 1. y) (tensor-scalar- 1. p))))))

  
  (method override (accuracy self y <Tensor> p <Tensor>)
    (with& (y p)
      (accuracy-score (tensor-argmax y axis: 1) (tensor-argmax p axis: 1)))))


(definition public cross-entropy
  (new Cross-Entropy)))
