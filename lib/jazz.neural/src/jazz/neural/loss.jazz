;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Loss Functions
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.neural.loss jazz:


(import (jazz (except + * - / expt exp log map max sqrt))
        (jazz.neural.data)
        (jazz.neural.overload)
        (jazz.neural.tensor))


;;;
;;;; Loss-Function
;;;


(class Loss-Function extends Object
  
  
  (method public virtual (loss self y y-pred)
    )
  
  
  (method public virtual (loss-gradient self y y-pred)
    )
  
  
  (method public virtual (accuracy self y p)
    ))


;;;
;;;; Square-Loss
;;;


(class Square-Loss extends Loss-Function
  
  
  (method override (loss self y y-pred)
    (* 0.5 (expt (- y y-pred) 2)))

  
  (method override (loss-gradient self y y-pred)
    (- y-pred y))
  
  
  (method override (accuracy self y y-pred)
    (- 1. (mean (loss self y y-pred)))))


(definition public square-loss
  (new Square-Loss))


;;;
;;;; Cross-Entropy
;;;


(class Cross-Entropy extends Loss-Function
  
  
  (method override (loss self y p)
    ;; avoid division by zero
    (let ((p (clip p 1e-15 (- 1. 1e-15))))
      (- (- (* y (log p)))
         (* (- 1. y) (log (- 1. p))))))


  (method override (loss-gradient self y p)
    ;; avoid division by zero
    (let ((p (clip p 1e-15 (- 1. 1e-15))))
      (+ (- (/ y p))
         (/ (- 1. y) (- 1. p)))))

  
  (method override (accuracy self y p)
    (accuracy-score (argmax y axis: 1) (argmax p axis: 1))))


(definition public cross-entropy
  (new Cross-Entropy)))
