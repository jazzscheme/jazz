;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Syntax
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.neural.syntax jazz


(syntax public with&
  (lambda (form-src usage-environment macro-environment)
    (bind (args . body) (cdr (source-code form-src))
      (sourcify-deep-if
        `(let& ,(map (lambda (arg)
                       `(,arg ,arg))
                     (source-code args))
           ,@body)
        form-src))))


(syntax public let&
  (lambda (form-src usage-environment macro-environment)
    (bind (bindings . body) (cdr (source-code form-src))
      (sourcify-deep-if
        `(let ,(map (lambda (binding)
                      (bind (var val) (source-code binding)
                        `(,var (ref ,val))))
                    (source-code bindings))
           (prog1
               (let ()
                 ,@body)
             ,@(map (lambda (binding)
                      (bind (var val) (source-code binding)
                        `(unref ,var)))
                    (source-code bindings))))
        form-src))))


(syntax public letret&
  (lambda (form-src usage-environment macro-environment)
    (bind (bindings . body) (cdr (source-code form-src))
      (sourcify-deep-if
        `(let ,(map (lambda (binding)
                      (bind (var val) (source-code binding)
                        `(,var (ref ,val))))
                    (source-code bindings))
           (prog1
               (let ()
                 ,@body)
             ,@(map (lambda (binding)
                      (bind (var val) (source-code binding)
                        `(retref ,var)))
                    (source-code bindings))))
        form-src))))


(syntax public set&
  (lambda (form-src usage-environment macro-environment)
    (bind (var val) (cdr (source-code form-src))
      (sourcify-deep-if
        (let ((value (generate-symbol "value")))
          `(let ((,value ,val))
             (when (tensor? ,var)
               (unref ,var))
             (set! ,var (and ,value (ref ,value)))))
        form-src))))


;;;
;;;; Profile
;;;


(definition calls
  (make-table test: equal?))

(definition protected (tensor-calls)
  calls)

(definition protected (tensor-reset-calls)
  (set! calls (make-table test: eq?)))


(syntax public with-tensor
  (lambda (form-src usage-environment macro-environment)
    (bind (name . body) (cdr (source-code form-src))
      (sourcify-deep-if
        `(let ()
           ,@body)
        @w
        `(call-with-tensor ',name
           (lambda ()
             ,@body))
        form-src))))


(definition protected (call-with-tensor name thunk)
  (let ((start (current-seconds)))
    (prog1 (thunk)
      (let ((elapsed (- (current-seconds) start)))
        (let ((call (table-ref calls name #f)))
          (if (not call)
              (table-set! calls name (cons elapsed 1))
            (set-car! call (+ (car call) elapsed))
            (set-cdr! call (+ (cdr call) 1)))))))))
