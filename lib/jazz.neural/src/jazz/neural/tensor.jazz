;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Tensors
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.neural.tensor jazz


(import (jazz.foreign)
        (jazz.io)
        (jazz.listener)
        (jazz.neural.blas)
        (jazz.neural.math)
        (jazz.neural.syntax (phase syntax))
        (jazz.platform.types)
        (jazz.settings))


(proclaim (not check bounds types)
          (warn optimizations))


;;;
;;;; Foreign
;;;


(c-include "<math.h>")
(c-include "<stdlib.h>")
(c-include "<string.h>")


@nonblocking (
(c-include "<glib.h>")
(c-include "<unistd.h>")


(c-declare jazz.neural.tensor #/C/
#ifdef BLIS_H
    #include <blis.h>
#else
    #include <cblas.h>
#endif

static void gst_listener_set(void* listener)
{
#ifdef _WIN32
    SOCKET socket = (SOCKET) listener;
    send(socket, "!", 1, 0);
#else
    #pragma GCC diagnostic push
    #pragma GCC diagnostic ignored "-Wpointer-to-int-cast"
    int fd = (int) listener;
    #pragma GCC diagnostic pop
    
    write(fd, "!", 1);
#endif
}

typedef struct dgemm_call_struct
{
    int m;
    int n;
    int k;
    double* a;
    double* b;
    double* c;
    void* listener;
    GThread* thread;
} dgemm_call;

static void* call_dgemm(void* data)
{
    dgemm_call* dc = (dgemm_call*) data;

    int m = dc->m;
    int n = dc->n;
    int k = dc->k;
    int a_stride = k;
    int b_stride = n;
    int c_stride = n;

    void* listener = dc->listener;
  
    cblas_dgemm(CblasRowMajor, CblasNoTrans, CblasNoTrans, m, n, k, 1.0, dc->a, a_stride, dc->b, b_stride, 0.0, dc->c, c_stride);
    
    gst_listener_set(listener);
  
    return NULL;
}

static void* cblas_dgemm_threaded(int m, int n, int k, ___SCMOBJ a, int a_offset, ___SCMOBJ b, ___SCMOBJ c, int c_offset, void* listener)
{
    dgemm_call* dc = malloc(sizeof(dgemm_call));
    dc->m = m;
    dc->n = n;
    dc->k = k;
    dc->a = ___CAST(___F64*,___BODY(a)) + a_offset;
    dc->b = ___CAST(___F64*,___BODY(b));
    dc->c = ___CAST(___F64*,___BODY(c)) + c_offset;
    dc->listener = listener;
    dc->thread = g_thread_new("dgemm_call", call_dgemm, (void*) dc);
    
    return (void*) dc;
}

static void cblas_dgemm_free(void* data)
{
    dgemm_call* dc = (dgemm_call*) data;
    g_thread_join(dc->thread);
    g_thread_unref(dc->thread);
    free(data);
}
//#)


(c-external (cblas_dgemm_threaded int int int scheme-object int scheme-object scheme-object int void*) void*)
(c-external (cblas_dgemm_free void*) void)


(definition cblas-listener
  #f)

(definition (require-cblas-listener)
  (or cblas-listener
      (let ((listener (open-stream-listener)))
        (set! cblas-listener listener)
        listener)))


(definition public (call-dgemm a-rows b-cols a-cols a b c)
  (let ((listener (require-cblas-listener)))
    (let ((data (cblas_dgemm_threaded a-rows b-cols a-cols a 0 b c 0 (get-write-file listener))))
      (wait listener)
      (cblas_dgemm_free data)))))


(c-declare jazz.neural.tensor #/C/
#define tidx(cols, row, col) (row * cols + col)
//#)


(c-external (copy_tensor int scheme-object scheme-object) void
  #/C/
    int n = ___arg1;
    ___F64 *x = ___CAST(___F64*,___BODY(___arg2));
    ___F64 *y = ___CAST(___F64*,___BODY(___arg3));

    memcpy(y, x, n * sizeof(double));
//#)


(c-external (random_tensor int scheme-object) void
  #/C/
    int n = ___arg1;
    ___F64 *r = ___CAST(___F64*,___BODY(___arg2));

    for (int i = 0; i < n; i++)
        *r++ = (float)rand()/((float)RAND_MAX);
//#)


(c-external (tensor_transpose int int scheme-object scheme-object) void
  #/C/
    int rows = ___arg1;
    int cols = ___arg2;
    ___F64 *x = ___CAST(___F64*,___BODY(___arg3));
    ___F64 *y = ___CAST(___F64*,___BODY(___arg4));

    for (int row = 0; row < rows; row++)
        for (int col = 0; col < cols; col++)
            y[tidx(rows, col, row)] = x[tidx(cols, row, col)];
//#)


(c-external (tensor_scalar_mul int double scheme-object scheme-object) void
  #/C/
    int n = ___arg1;
    double s = ___arg2;
    ___F64 *x = ___CAST(___F64*,___BODY(___arg3));
    ___F64 *y = ___CAST(___F64*,___BODY(___arg4));

    for (int i = 0; i < n; i++)
        *y++ = s * *x++;
//#)


(c-external (tensor_sqrt int scheme-object scheme-object) void
  #/C/
    int n = ___arg1;
    ___F64 *x = ___CAST(___F64*,___BODY(___arg2));
    ___F64 *y = ___CAST(___F64*,___BODY(___arg3));

    for (int i = 0; i < n; i++)
        *y++ = sqrt(*x++);
//#)


(c-external (tensor_square int scheme-object scheme-object) void
  #/C/
    int n = ___arg1;
    ___F64 *x = ___CAST(___F64*,___BODY(___arg2));
    ___F64 *y = ___CAST(___F64*,___BODY(___arg3));

    for (int i = 0; i < n; i++)
    {
        double val = *x++;
        *y++ = val * val;
    }
//#)


(c-external (tensor_sum0 int int scheme-object scheme-object) void
  #/C/
    int rows = ___arg1;
    int cols = ___arg2;
    ___F64 *x = ___CAST(___F64*,___BODY(___arg3));
    ___F64 *y = ___CAST(___F64*,___BODY(___arg4));

    for (int col = 0; col < cols; col++)
    {
        double sum = 0;
        for (int row = 0; row < rows; row++)
            sum += x[tidx(cols, row, col)];
        *y++ = sum;
    }
//#)


(c-external (tensor_leaky_relu int double scheme-object scheme-object) void
  #/C/
    int n = ___arg1;
    double alpha = ___arg2;
    ___F64 *x = ___CAST(___F64*,___BODY(___arg3));
    ___F64 *y = ___CAST(___F64*,___BODY(___arg4));

    for (int i = 0; i < n; i++)
    {
        double val = *x++;
        *y++ = (val >= 0) ? val : alpha * val;
    }
//#)


(c-external (tensor_leaky_relu_gradient int double scheme-object scheme-object) void
  #/C/
    int n = ___arg1;
    double alpha = ___arg2;
    ___F64 *x = ___CAST(___F64*,___BODY(___arg3));
    ___F64 *y = ___CAST(___F64*,___BODY(___arg4));

    for (int i = 0; i < n; i++)
        *y++ = (*x++ >= 0) ? 1 : alpha;
//#)


(c-external (tensor_dropout int double scheme-object scheme-object) void
  #/C/
    int n = ___arg1;
    double p = ___arg2;
    ___F64 *x = ___CAST(___F64*,___BODY(___arg3));
    ___F64 *y = ___CAST(___F64*,___BODY(___arg4));

    for (int i = 0; i < n; i++)
        *y++ = (*x++ > p) ? 1 : 0;
//#)


;;;
;;;; Profile
;;;


(definition calls
  (make-table test: equal?))

(definition protected (tensor-calls)
  calls)

(definition protected (tensor-reset-calls)
  (set! calls (make-table test: eq?)))


;;;
;;;; Leaks
;;;


(definition leaks-port
  #f)

(definition (set-leaks-port port)
  (set! leaks-port port)
  (display 'jazz port)
  (newline port)
  (force-output port))


(definition report-leaks?
  (boolean-argument "leaks" #f))

(definition report-stack?
  (boolean-argument "stack" #f))

(definition protected (setup-leaks)
  (when report-leaks?
    (set-leaks-port (open-output-file (path-settings {File Home "Devel" "neural" "leaks"})))))

(definition protected (report-leaks)
  (when report-leaks?
    (let ((alive-count 0))
      (for-each (lambda (tensor)
                  (let ((refcount (get-refcount tensor)))
                    (when (/= refcount *freed*)
                      (leak-report tensor 'alive refcount)
                      (increase! alive-count))))
                tensors)
      (close-port leaks-port)
      (set! leaks-port #f)
      (if (and (= invalid-count 0)
               (= alive-count 0))
          (format :terminal "{%}No leaks found{%}")
        (format :terminal "{%}Found {a} leak{a} and {a} invalid{a}{%}"
          alive-count (format-plural alive-count)
          invalid-count (format-plural invalid-count))))))


(definition tensors
  '())

(definition (remember-tensor tensor)
  (when report-leaks?
    (set! tensors (cons tensor tensors))))


(definition invalid-count <fx>
  0)


;;;
;;;; Pool
;;;


(definition *orphan*
  9999)

(definition *freed*
  -9999)


(definition f64vector-pool
  (make-table test: eqv?))

(definition protected f64vector-pool-cache <fx>
  0)

(definition protected f64vector-pool-live <fx>
  0)


(definition (alloc-f64vector size)
  (let ((lst (table-ref f64vector-pool size '())))
    (if (null? lst)
        (begin
          (increase! f64vector-pool-live size)
          (make-f64vector size))
      (prog1 (car lst)
        (decrease! f64vector-pool-cache size)
        (increase! f64vector-pool-live size)
        (table-set! f64vector-pool size (cdr lst))))))


(definition (free-f64vector size vec)
  (let ((lst (table-ref f64vector-pool size '())))
    (increase! f64vector-pool-cache size)
    (decrease! f64vector-pool-live size)
    (table-set! f64vector-pool size (cons vec lst))))


(definition protected (show-f64vector-pool (units 'b))
  (define (b bytes)
    (format "{a} B" bytes))
  
  (define (k bytes)
    (format "{a} KB" (fxround (/ (->flonum bytes) 1024.))))
  
  (define (m bytes)
    (format "{a} MB" (fxround (/ (->flonum bytes) 1024. 1024.))))
  
  (let ((units (case units ((b) b) ((k) k) ((m) m) (else (error "Invalid units: {s}" units))))
        (cache (* f64vector-pool-cache 8))
        (live (* f64vector-pool-live 8)))
    (format :terminal "{%}cache: {a}, live: {a}{%}"
      (units cache)
      (units live))))


;;;
;;;; Tensor
;;;


(class Tensor extends Object
  
  
  (slot refcount <fx>        getter generate)
  (slot rows     <fx>        getter generate)
  (slot cols     <fx>        getter generate)
  (slot size     <fx>        getter generate)
  (slot data     <f64vector> getter generate)
  
  
  (method override (initialize self rows cols)
    (set! self.refcount *orphan*)
    (set! self.rows rows)
    (set! self.cols cols)
    (set! self.size (* self.rows self.cols))
    (set! self.data (alloc-f64vector size))
    (remember-tensor self)
    (leak-report self 'alloc refcount))
  
  
  (method override (print self output readably)
    (print-unreadable self output
      (lambda (output)
        (define (present-refcount)
          (cond ((= refcount *orphan*)
                 "orphan")
                ((= refcount *freed*)
                 "freed")
                (else
                 refcount)))
        
        (format output "{a} {a} ({a})" rows cols (present-refcount)))))
  
  
  (method protected (leak-report self what refcount)
    (when report-leaks?
      (when (eq? what 'invalid)
        (increase! invalid-count))
      (let ((address (format "#{a}" (object->serial self)))
            (description (format "{a}x{a}" rows cols))
            (stack (if report-stack? (execution-stack locations?: #t) '())))
        (write (list what "Tensor" address description refcount stack) leaks-port))
      (newline leaks-port)
      (force-output leaks-port)))
  
  
  (method protected (ref self) <Tensor>
    (cond ((= refcount *orphan*)
           (leak-report self 'ref refcount)
           (set! refcount 1))
          ((= refcount *freed*)
           (leak-report self 'invalid refcount))
          (else
           (leak-report self 'ref refcount)
           (increase! refcount)))
    self)
  
  
  (method protected (unref self)
    (if (or (= refcount *orphan*)
            (= refcount *freed*))
        (leak-report self 'invalid refcount)
      (leak-report self 'unref refcount)
      (decrease! refcount)
      (cond ((= refcount 0)
             (free self))
            ((< refcount 0)
             (leak-report self 'invalid refcount)))))
  
  
  (method protected (retref self)
    (if (or (= refcount *orphan*)
            (= refcount *freed*))
        (leak-report self 'invalid refcount)
      (leak-report self 'deref refcount)
      (decrease! refcount)
      (cond ((= refcount 0)
             (set! refcount *orphan*))
            ((< refcount 0)
             (leak-report self 'invalid refcount)))))
  
  
  (method protected (free self)
    (if (or (= refcount *orphan*)
            (= refcount *freed*))
        (leak-report self 'invalid refcount)
      (leak-report self 'free refcount)
      (free-f64vector size data)
      (set! refcount *freed*))))


(definition protected (ref-object obj)
  (declare (proper-tail-calls))
  (define (r obj)
    (cond ((pair? obj)
           (r (car obj))
           (r (cdr obj)))
          ((tensor? obj)
           (ref obj))))
  
  (r obj)
  obj)


(definition protected (unref-object obj)
  (declare (proper-tail-calls))
  (define (u obj)
    (cond ((pair? obj)
           (u (car obj))
           (u (cdr obj)))
          ((tensor? obj)
           (unref obj))))
  
  (u obj))


(definition inline (tidx cols <fx> row <fx> col <fx>) <fx>
  (+ (* row cols) col))


(definition public (tensor vec) <Tensor>
  (with-tensor tensor
    (let ((rows (vector-length vec))
          (cols (f64vector-length (vector-ref vec 0))))
      (let ((result (new Tensor rows cols)))
        (let ((data (get-data result)))
          (loop (for row from 0 below rows)
                (loop (for col from 0 below cols)
                      (f64vector-set! data (tidx cols row col) (f64vector-ref (vector-ref vec row) col)))))
        result))))


(definition public (tensor? obj)
  (with-tensor tensor?
    (is? obj Tensor)))


(definition public (tensor=? x y)
  (with-tensor tensor=?
    (and (is? x Tensor)
         (is? y Tensor)
         (= (get-rows x) (get-rows y))
         (= (get-cols x) (get-cols y))
         (equal? (get-data x) (get-data y)))))

(definition public (tensor/=? x y)
  (not (tensor=? x y)))


(definition public (tensor-near? x <Tensor> y <Tensor> tolerance)
  (with-tensor tensor-near?
    (with& (x y)
      (let ((x-data (get-data x))
            (y-data (get-data y))
            (size (get-size x)))
        (loop (for n from 0 below size)
              (every
                (<= (abs (- (f64vector-ref x-data n)
                            (f64vector-ref y-data n)))
                    tolerance)))))))


(definition public (make-tensor rows <fx> cols <fx>) <Tensor>
  (with-tensor make-tensor
    (new Tensor rows cols)))

(definition public (tensor-rows tensor <Tensor>) <fx>
  (get-rows tensor))

(definition public (tensor-cols tensor <Tensor>) <fx>
  (get-cols tensor))

(definition public (tensor-size tensor <Tensor>) <fx>
  (get-size tensor))

(definition public (tensor-shape tensor <Tensor>)
  (list (get-rows tensor)
        (get-cols tensor)))


(definition public inline (tensor-ref tensor <Tensor> row <fx> col <fx>) <fl>
  (f64vector-ref (get-data tensor) (tidx (get-cols tensor) row col)))

(definition public inline (tensor-set! tensor <Tensor> row <fx> col <fx> val <fl>)
  (f64vector-set! (get-data tensor) (tidx (get-cols tensor) row col) val))


(definition public (copy-tensor tensor <Tensor> (blas #f)) <Tensor>
  (with-tensor copy-tensor
    (with& (tensor)
      (let ((rows (tensor-rows tensor))
            (cols (tensor-cols tensor))
            (size (tensor-size tensor)))
        (let ((result (make-tensor rows cols)))
          (let ((data (get-data tensor))
                (r-data (get-data result)))
            (case (or blas default-blas)
              ((blis)
               (jazz.neural.blas.blis:bli_dcopyv size data r-data))
              (else
               (copy_tensor size data r-data))))
          result)))))


(definition public (subtensor tensor <Tensor> start <fx> (end <fx+> #f) (axis: axis 0)) <Tensor>
  (with-tensor subtensor
    (with& (tensor)
      (case axis
        ((0)
         (let ((end (or end (tensor-rows tensor))))
           (let ((rows (- end start))
                 (cols (tensor-cols tensor)))
             (let ((result (make-tensor rows cols)))
               (loop (for row from 0 below rows)
                     (loop (for col from 0 below cols)
                           (tensor-set! result row col (tensor-ref tensor (+ start row) col))))
               result))))
        ((1)
         (let ((end (or end (tensor-cols tensor))))
           (let ((rows (tensor-rows tensor))
                 (cols (- end start)))
             (let ((result (make-tensor rows cols)))
               (loop (for row from 0 below rows)
                     (loop (for col from 0 below cols)
                           (tensor-set! result row col (tensor-ref tensor row (+ start col)))))
               result))))
        (else
         (error "Invalid axis: {s}" axis))))))


(definition public (tensor-index tensor <Tensor> idx) <Tensor>
  (with-tensor tensor-index
    (with& (tensor)
      (let ((len (length idx))
            (cols (tensor-cols tensor)))
        (let ((result (make-tensor len cols)))
          (loop (for i in idx)
                (for row from 0)
                (loop (for col from 0 below cols)
                      (tensor-set! result row col (tensor-ref tensor i col))))
          result)))))


(definition public (tensor-dot x <Tensor> y <Tensor> (blas #f)) <Tensor>
  (with-tensor tensor-dot
    (with& (x y)
      (let ((x-rows (tensor-rows x))
            (x-cols (tensor-cols x))
            (y-rows (tensor-rows y))
            (y-cols (tensor-cols y)))
        (assert (= x-cols y-rows)
          (let ((result (make-tensor x-rows y-cols)))
            @nonblocking
            (call-dgemm x-rows y-cols x-cols (get-data x) (get-data y) (get-data result))
            (case (or blas default-blas)
              ((accelerate)
               (jazz.neural.blas.accelerate:cblas_dgemm x-rows y-cols x-cols (get-data x) (get-data y) (get-data result)))
              ((blis)
               (jazz.neural.blas.blis:cblas_dgemm x-rows y-cols x-cols (get-data x) (get-data y) (get-data result)))
              ((openblas)
               (jazz.neural.blas.openblas:cblas_dgemm x-rows y-cols x-cols (get-data x) (get-data y) (get-data result)))
              ((npopenblas)
               (jazz.neural.blas.npopenblas:cblas_dgemm x-rows y-cols x-cols (get-data x) (get-data y) (get-data result)))
              (else
               (loop (for row from 0 below x-rows)
                     (loop (for col from 0 below y-cols)
                           (tensor-set! result row col (let ((result 0.))
                                                         (loop (for n from 0 below x-cols)
                                                               (increase! result (* (tensor-ref x row n) (tensor-ref y n col))))
                                                         result))))))
            result))))))


(definition public (tensor-transpose tensor <Tensor>) <Tensor>
  (with-tensor tensor-transpose
    (with& (tensor)
      (let ((rows (tensor-rows tensor))
            (cols (tensor-cols tensor)))
        (let ((result (make-tensor cols rows)))
          (let ((data (get-data tensor))
                (r-data (get-data result)))
            (tensor_transpose rows cols data r-data))
          result)))))


(definition public (tensor-mean tensor <Tensor>) <fl>
  (with-tensor tensor-mean
    (with& (tensor)
      (let ((total 0.)
            (size (get-size tensor))
            (data (get-data tensor)))
        (loop (for n from 0 below size)
              (increase! total (f64vector-ref data n)))
        (/ total (cast <fl> size))))))


(definition public (tensor-max tensor <Tensor> (axis: axis 0)) <Tensor>
  (with-tensor tensor-max
    (with& (tensor)
      (case axis
        ((0)
         (let ((rows (tensor-rows tensor))
               (cols (tensor-cols tensor)))
           (let ((result (make-tensor 1 cols)))
             (loop (for col from 0 below cols)
                   (tensor-set! result 0 col (let ((max -inf.0))
                                               (loop (for row from 0 below rows)
                                                     (let ((val (tensor-ref tensor row col)))
                                                       (when (> val max)
                                                         (set! max val))))
                                               max)))
             result)))
        ((1)
         (let ((rows (tensor-rows tensor))
               (cols (tensor-cols tensor)))
           (let ((result (make-tensor rows 1)))
             (loop (for row from 0 below rows)
                   (tensor-set! result row 0 (let ((max -inf.0))
                                               (loop (for col from 0 below cols)
                                                     (let ((val (tensor-ref tensor row col)))
                                                       (when (> val max)
                                                         (set! max val))))
                                               max)))
             result)))
        (else
         (error "Invalid axis: {s}" axis))))))


(definition public (tensor-argmax tensor <Tensor> (axis: axis 1)) <Tensor>
  (with-tensor tensor-argmax
    (with& (tensor)
      (case axis
        ((1)
         (let ((rows (tensor-rows tensor))
               (cols (tensor-cols tensor)))
           (let ((indices (make-vector rows)))
             (loop (for row from 0 below rows)
                   (let ((max -inf.0))
                     (loop (for col from 0 below cols)
                           (let ((val (tensor-ref tensor row col)))
                             (when (> val max)
                               (set! max val)
                               (vector-set! indices row col))))))
             indices)))
        (else
         (error "Invalid axis: {s}" axis))))))


(definition public (tensor-sum tensor <Tensor> (axis: axis 0)) <Tensor>
  (with& (tensor)
    (case axis
      ((0)
       (with-tensor tensor-sum0
         (let ((rows (tensor-rows tensor))
               (cols (tensor-cols tensor)))
           (let ((result (make-tensor 1 cols)))
             (let ((data (get-data tensor))
                   (r-data (get-data result)))
               (tensor_sum0 rows cols data r-data))
             result))))
      ((1)
       (with-tensor tensor-sum1
         (let ((rows (tensor-rows tensor))
               (cols (tensor-cols tensor)))
           (let ((result (make-tensor rows 1)))
             (loop (for row from 0 below rows)
                   (tensor-set! result row 0 (->flonum (loop (for col from 0 below cols)
                                                             (sum (tensor-ref tensor row col))))))
             result))))
      (else
       (error "Invalid axis: {s}" axis)))))


(definition public (tensor+ x <Tensor> y <Tensor> (blas #f)) <Tensor>
  (with& (x y)
    (let ((rows (tensor-rows x))
          (cols (tensor-cols x))
          (y-rows (tensor-rows y))
          (y-cols (tensor-cols y)))
      (assert (= cols y-cols)
        (if (and (/= y-rows rows)
                 (= y-rows 1))
            (with-tensor tensor+1
              (let ((result (make-tensor rows cols)))
                (loop (for row from 0 below rows)
                      (loop (for col from 0 below cols)
                            (tensor-set! result row col (+ (tensor-ref x row col)
                                                           (tensor-ref y 0 col)))))
                result))
          (with-tensor tensor+
            (assert (= rows y-rows)
              (let ((size (tensor-size x))
                    (x-data (get-data x))
                    (y-data (get-data y)))
                (case (or blas default-blas)
                  ((blis)
                   (let ((result (copy-tensor y)))
                     (let ((r-data (get-data result)))
                       (jazz.neural.blas.blis:bli_daddv size x-data r-data))
                     result))
                  (else
                   (let ((result (make-tensor rows cols)))
                     (let ((r-data (get-data result)))
                       (loop (for n from 0 below size)
                             (f64vector-set! r-data n (+ (f64vector-ref x-data n)
                                                         (f64vector-ref y-data n)))))
                     result)))))))))))


(definition public (tensor- x <Tensor> y <Tensor>) <Tensor>
  (with& (x y)
    (let ((rows (tensor-rows x))
          (cols (tensor-cols x))
          (y-rows (tensor-rows y))
          (y-cols (tensor-cols y)))
      (assert (= rows y-rows)
        (if (and (/= cols 1) (= y-cols 1))
            (with-tensor tensor-1
              (let ((result (make-tensor rows cols)))
                (loop (for row from 0 below rows)
                      (loop (for col from 0 below cols)
                            (tensor-set! result row col (- (tensor-ref x row col)
                                                           (tensor-ref y row 0)))))
                result))
          (with-tensor tensor-
            (assert (= cols y-cols)
              (let ((result (make-tensor rows cols)))
                (let ((size (tensor-size x))
                      (x-data (get-data x))
                      (y-data (get-data y))
                      (r-data (get-data result)))
                  (loop (for n from 0 below size)
                        (f64vector-set! r-data n (- (f64vector-ref x-data n)
                                                    (f64vector-ref y-data n)))))
                result))))))))


(definition public (tensor* x <Tensor> y <Tensor>) <Tensor>
  (with-tensor tensor*
    (with& (x y)
      (let ((rows (tensor-rows x))
            (cols (tensor-cols x))
            (y-rows (tensor-rows y))
            (y-cols (tensor-cols y)))
        (assert (= rows y-rows)
          (assert (= cols y-cols)
            (let ((result (make-tensor rows cols)))
              (let ((size (tensor-size x))
                    (x-data (get-data x))
                    (y-data (get-data y))
                    (r-data (get-data result)))
                (loop (for n from 0 below size)
                      (f64vector-set! r-data n (* (f64vector-ref x-data n)
                                                  (f64vector-ref y-data n)))))
              result)))))))


(definition public (tensor/ x <Tensor> y <Tensor>) <Tensor>
  (with& (x y)
    (let ((rows (tensor-rows x))
          (cols (tensor-cols x))
          (y-rows (tensor-rows y))
          (y-cols (tensor-cols y)))
      (assert (= rows y-rows)
        (if (and (/= cols 1) (= y-cols 1))
            (with-tensor tensor/1
              (let ((result (make-tensor rows cols)))
                (loop (for row from 0 below rows)
                      (loop (for col from 0 below cols)
                            (tensor-set! result row col (/ (tensor-ref x row col)
                                                           (tensor-ref y row 0)))))
                result))
          (with-tensor tensor/
            (assert (= cols y-cols)
              (let ((result (make-tensor rows cols)))
                (let ((size (tensor-size x))
                      (x-data (get-data x))
                      (y-data (get-data y))
                      (r-data (get-data result)))
                  (loop (for n from 0 below size)
                        (f64vector-set! r-data n (/ (f64vector-ref x-data n)
                                                    (f64vector-ref y-data n)))))
                result))))))))


(definition public (tensor-scalar+ scalar <fl> tensor <Tensor>) <Tensor>
  (with-tensor tensor-scalar+
    (with& (tensor)
      (let ((rows (tensor-rows tensor))
            (cols (tensor-cols tensor))
            (size (tensor-size tensor)))
        (let ((result (make-tensor rows cols)))
          (let ((data (get-data tensor))
                (r-data (get-data result)))
            (loop (for n from 0 below size)
                  (f64vector-set! r-data n (+ scalar (f64vector-ref data n)))))
          result)))))


(definition public (tensor-scalar- scalar <fl> tensor <Tensor>) <Tensor>
  (with-tensor tensor-scalar-
    (with& (tensor)
      (let ((rows (tensor-rows tensor))
            (cols (tensor-cols tensor))
            (size (tensor-size tensor)))
        (let ((result (make-tensor rows cols)))
          (let ((data (get-data tensor))
                (r-data (get-data result)))
            (loop (for n from 0 below size)
                  (f64vector-set! r-data n (- scalar (f64vector-ref data n)))))
          result)))))


(definition public (tensor-scalar* scalar <fl> tensor <Tensor>) <Tensor>
  (with-tensor tensor-scalar*
    (with& (tensor)
      (let ((rows (tensor-rows tensor))
            (cols (tensor-cols tensor))
            (size (tensor-size tensor)))
        (let ((result (make-tensor rows cols)))
          (let ((data (get-data tensor))
                (r-data (get-data result)))
            (tensor_scalar_mul size scalar data r-data))
          result)))))


(definition public (tensor-scalar/ scalar <fl> tensor <Tensor>) <Tensor>
  (with-tensor tensor-scalar/
    (with& (tensor)
      (let ((rows (tensor-rows tensor))
            (cols (tensor-cols tensor))
            (size (tensor-size tensor)))
        (let ((result (make-tensor rows cols)))
          (let ((data (get-data tensor))
                (r-data (get-data result)))
            (loop (for n from 0 below size)
                  (f64vector-set! r-data n (/ scalar (f64vector-ref data n)))))
          result)))))


(definition public (tensor-negate tensor <Tensor>) <Tensor>
  (with-tensor tensor-negate
    (with& (tensor)
      (let ((rows (tensor-rows tensor))
            (cols (tensor-cols tensor))
            (size (tensor-size tensor)))
        (let ((result (make-tensor rows cols)))
          (let ((data (get-data tensor))
                (r-data (get-data result)))
            (loop (for n from 0 below size)
                  (f64vector-set! r-data n (- (f64vector-ref data n)))))
          result)))))


(definition public (tensor-sqrt tensor <Tensor>) <Tensor>
  (with-tensor tensor-sqrt
    (with& (tensor)
      (let ((rows (tensor-rows tensor))
            (cols (tensor-cols tensor))
            (size (tensor-size tensor)))
        (let ((result (make-tensor rows cols)))
          (let ((data (get-data tensor))
                (r-data (get-data result)))
            (tensor_sqrt size data r-data))
          result)))))


(definition public (tensor-square tensor <Tensor>) <Tensor>
  (with-tensor tensor-square
    (with& (tensor)
      (let ((rows (tensor-rows tensor))
            (cols (tensor-cols tensor))
            (size (tensor-size tensor)))
        (let ((result (make-tensor rows cols)))
          (let ((data (get-data tensor))
                (r-data (get-data result)))
            (tensor_square size data r-data))
          result)))))


(definition public (tensor-expt tensor <Tensor> power <fx>) <Tensor>
  (with-tensor tensor-expt
    (with& (tensor)
      (let ((rows (tensor-rows tensor))
            (cols (tensor-cols tensor))
            (size (tensor-size tensor)))
        (let ((result (make-tensor rows cols)))
          (let ((data (get-data tensor))
                (r-data (get-data result)))
            (loop (for n from 0 below size)
                  (f64vector-set! r-data n (expt (f64vector-ref data n) power))))
          result)))))


(definition public (tensor-exp tensor <Tensor>) <Tensor>
  (with-tensor tensor-exp
    (with& (tensor)
      (let ((rows (tensor-rows tensor))
            (cols (tensor-cols tensor))
            (size (tensor-size tensor)))
        (let ((result (make-tensor rows cols)))
          (let ((data (get-data tensor))
                (r-data (get-data result)))
            (loop (for n from 0 below size)
                  (f64vector-set! r-data n (exp (f64vector-ref data n)))))
          result)))))


(definition public (tensor-log tensor <Tensor>) <Tensor>
  (with-tensor tensor-log
    (with& (tensor)
      (let ((rows (tensor-rows tensor))
            (cols (tensor-cols tensor))
            (size (tensor-size tensor)))
        (let ((result (make-tensor rows cols)))
          (let ((data (get-data tensor))
                (r-data (get-data result)))
            (loop (for n from 0 below size)
                  (f64vector-set! r-data n (log (f64vector-ref data n)))))
          result)))))


(definition public (tensor-clip tensor <Tensor> min <fl> max <fl>) <Tensor>
  (with-tensor tensor-clip
    (with& (tensor)
      (let ((rows (tensor-rows tensor))
            (cols (tensor-cols tensor))
            (size (tensor-size tensor)))
        (let ((result (make-tensor rows cols)))
          (let ((data (get-data tensor))
                (r-data (get-data result)))
            (loop (for n from 0 below size)
                  (f64vector-set! r-data n (between min (f64vector-ref data n) max))))
          result)))))


(definition public (random-tensor rows <fx> cols <fx>) <Tensor>
  (with-tensor random-tensor
    (let ((result (make-tensor rows cols)))
      (let ((data (get-data result))
            (size (tensor-size result)))
        (random_tensor size data))
      result)))


(definition public (random-tensor-between rows <fx> cols <fx> min <fl> max <fl>) <Tensor>
  (with-tensor random-tensor-between
    (let ((result (make-tensor rows cols)))
      (let ((data (get-data result))
            (size (tensor-size result)))
        (loop (for n from 0 below size)
              (f64vector-set! data n (random-between min max))))
      result)))


(definition (->shape rest)
  (case (length rest)
    ((1) (car rest))
    ((2) rest)
    (else (error "Ill-formed shape: {l}" rest))))


(definition public (zero-tensor . rest) <Tensor>
  (with-tensor zero-tensor
    (bind (rows cols) (->shape rest)
      (let ((result (make-tensor rows cols)))
        (let ((data (get-data result))
              (size (tensor-size result)))
          (loop (for n from 0 below size)
                (f64vector-set! data n 0.)))
        result))))


(definition public (tensor-map proc x <Tensor>) <Tensor>
  (with-tensor tensor-map
    (with& (x)
      (let ((rows (tensor-rows x))
            (cols (tensor-cols x)))
        (let ((result (make-tensor rows cols)))
          (let ((data (get-data x))
                (r-data (get-data result))
                (size (get-size result)))
            (loop (for n from 0 below size)
                  (f64vector-set! r-data n (->flonum (proc (f64vector-ref data n))))))
          result)))))


(definition public (tensor-leaky-relu alpha x <Tensor>) <Tensor>
  (with-tensor tensor-leaky-relu
    (with& (x)
      (let ((rows (tensor-rows x))
            (cols (tensor-cols x)))
        (let ((result (make-tensor rows cols)))
          (let ((data (get-data x))
                (r-data (get-data result))
                (size (get-size result)))
            (tensor_leaky_relu size alpha data r-data))
          result)))))


(definition public (tensor-leaky-relu-gradient alpha x <Tensor>) <Tensor>
  (with-tensor tensor-leaky-relu-gradient
    (with& (x)
      (let ((rows (tensor-rows x))
            (cols (tensor-cols x)))
        (let ((result (make-tensor rows cols)))
          (let ((data (get-data x))
                (r-data (get-data result))
                (size (get-size result)))
            (tensor_leaky_relu_gradient size alpha data r-data))
          result)))))


(definition public (tensor-dropout p x <Tensor>) <Tensor>
  (with-tensor tensor-dropout
    (with& (x)
      (let ((rows (tensor-rows x))
            (cols (tensor-cols x)))
        (let ((result (make-tensor rows cols)))
          (let ((data (get-data x))
                (r-data (get-data result))
                (size (get-size result)))
            (tensor_dropout size p data r-data))
          result))))))
