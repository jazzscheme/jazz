;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Neural Validations
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module jazz.neural.validate jazz


(import (jazz.neural))


(definition public (validate-blas (tolerance: tolerance 1e-15))
  (define (validate-copy)
    (tell 'copy)
    (let ((blas 'blis))
      (let ((x (random-tensor 3 7)))
        (let ((r (copy-tensor x blas)))
          (if (tensor=? r x)
              (tell "  " blas 'pass)
            (tell "  " blas 'failed '***))))))
  
  (define (validate-add)
    (tell)
    (tell 'add)
    (let ((blas 'blis))
      (let ((x (random-tensor 3 7))
            (y (random-tensor 3 7)))
        (let ((b (tensor+ x y))
              (r (tensor+ x y blas)))
          (if (tensor=? r b)
              (tell "  " blas 'pass)
            (tell "  " blas 'failed '***)
            (tell x)
            (tell y)
            (tell r))))))
  
  (define (validate-dot)
    (let ((a (random-tensor 3 7))
          (b (random-tensor 7 11)))
      (let ((ref (tensor-dot a b 'none)))
        (define (validate blas)
          (let ((result (tensor-dot a b blas)))
            (if (tensor-near? result ref tolerance)
                (tell "  " blas 'pass)
              (tell "  " blas 'failed '***)
              (let ((size (tensor-size result))
                    (ref (get-data ref))
                    (res (get-data result)))
                (loop (for n from 0 below size)
                      (let ((ref (f64vector-ref ref n))
                            (res (f64vector-ref res n)))
                        (when (/= ref res)
                          (format :terminal "{a}: {a}{%}" n (abs (- res ref))))))))))
        
        (tell)
        (tell 'dot)
        (validate 'accelerate)
        (validate 'bliss)
        (validate 'openblas)
        (validate 'npopenblas))))
  
  (validate-copy)
  (validate-add)
  (validate-dot)))
