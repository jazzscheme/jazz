;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Object Syntax
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.object.syntax jazz


;; for now this code is all in the scheme core
#; (


(import (jazz.core (phase syntax))
        (jazz.dialect.classes.foundation))


;;;
;;;; Hub
;;;


(definition hub-declarations
  (make-table test: eq?))


(definition (find-hub-declaration name)
  (table-ref hub-declarations name #f))


(definition (register-hub-declaration hub-declaration)
  (table-set! hub-declarations (get-name~ hub-declaration) hub-declaration))


(class Hub-Declaration extends Declaration
  
  
  (slot nodes initialize '() accessors generate)
  
  
  (method (register-node node)
    (set! nodes (cons node nodes)))
  
  
  (method override (emit-declaration environment backend)
    (sourcify-if
      `(begin)
      source))
  
  
  (method override (walk-binding-validate-call walker resume source-declaration operator arguments form-src)
    )
  
  
  (method override (emit-binding-reference source-declaration environment backend)
    (new-code
      `(list 'referencing 'hub ,(length nodes))
      Any
      #f))
  
  
  (method override (emit-binding-call binding-src arguments arguments-codes source-declaration environment backend)
    
    (let ((object-argument (car arguments))
          (others-arguments (cdr arguments)))
      (let ((object-code (emit-expression object-argument self environment backend))
            (others-codes (emit-expressions others-arguments self environment backend)))
        (emit backend 'hub name binding-src source-declaration environment object-code others-arguments others-codes)))
    
    #;
    (new-code
      `((jazz:dispatch class name) ,(length nodes))
      Any
      #f))
  
  
  (method override (outline-extract meta)
    #f))


(define (parse-hub walker resume declaration rest)
  (bind (name) rest
    (let ((name (desourcify name)))
      (values name Any 'public 'uptodate))))


(define (walk-hub-declaration walker resume declaration environment form-src)
  (receive (name type access compatibility) (parse-hub walker resume declaration (cdr (source-code form-src)))
    (let ((new-declaration (or (find-hub-declaration name)
                               (let ((hub-declaration (new Hub-Declaration name: name type: type access: access compatibility: compatibility attributes: '() parent: declaration)))
                                 (register-hub-declaration hub-declaration)
                                 hub-declaration))))
      (set-source~ new-declaration form-src)
      (let ((effective-declaration (add-declaration-child walker resume declaration new-declaration)))
        effective-declaration))))


(define (walk-hub walker resume declaration environment form-src)
  (receive (name type access compatibility) (parse-hub walker resume declaration (cdr (source-code form-src)))
    (let ((new-declaration (require-declaration declaration name)))
      (set-source~ new-declaration form-src)
      new-declaration)))


(define-walker-declaration hub jazz walk-hub-declaration walk-hub)


;;;
;;;; Node
;;;


(macro public (node signature . body)
  (bind (name . parameters) signature
    `(begin
       (hub ,name)
       (%node ,name ,parameters ,@body))))


(class Node-Declaration extends Declaration
  
  
  (slot hub-name  initialize #f accessors generate)
  (slot signature initialize #f accessors generate)
  
  
  (method override (initialize . rest)
    (bind-keywords ((hub-name #f) (signature #f) . others) rest
      (apply nextmethod others)
      (set! hub-name~self hub-name)
      (set! signature~self signature)))
  
  
  (method override (emit-declaration environment backend)
    (let ((class-reference (get-class~ (car (get-positional~ signature)))))
      (sourcify-if
        ;; hack to put explicit locator here
        ;; should call the code walker instead
        `(jazz.object:register-node ',hub-name ,(sourcified-form (emit-expression class-reference self environment backend)))
        source))))


(define (parse-node walker resume declaration rest)
  (bind (name parameters . body) rest
    (let ((node-name (string->symbol (string-append (symbol->string name) "$" (symbol->string (caar parameters))))))
      (values name node-name Any 'public 'uptodate parameters body))))


(define (walk-node-declaration walker resume declaration environment form-src)
  (receive (name node-name type access compatibility parameters body) (parse-node walker resume declaration (cdr (source-code form-src)))
    (receive (signature augmented-environment) (walk-parameters walker resume declaration environment parameters #t #t)
      (let ((new-declaration (or (find-declaration-child declaration node-name)
                                 (new Node-Declaration name: node-name type: type access: access compatibility: compatibility attributes: '() parent: declaration hub-name: name signature: signature))))
        (register-node~ (find-hub-declaration name) new-declaration)
        (set-source~ new-declaration form-src)
        (let ((effective-declaration (add-declaration-child walker resume declaration new-declaration)))
          effective-declaration)))))


(define (walk-node walker resume declaration environment form-src)
  (receive (name node-name type access compatibility parameters body) (parse-node walker resume declaration (cdr (source-code form-src)))
    (let ((new-declaration (require-declaration declaration node-name)))
      (set-source~ new-declaration form-src)
      new-declaration)))


(define-walker-declaration %node jazz walk-node-declaration walk-node)))
