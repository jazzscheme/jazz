;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Jazz ODBC lowlevel
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Jeremie Lasalle Ratelle.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;    Guillaume Cartier
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module jazz.odbc.odbc-lowlevel jazz

;; some platforms are missing sql.h
(cond-expand
  (windows
(import (jazz.platform.types)

        (jazz.foreign (phase syntax))
        (jazz.platform.types-syntax (phase syntax))
        (time))

(c-include "<sql.h>")
(c-include "<sqlext.h>")


(c-type SWORD short)
(c-type UWORD ushort)
(c-type SDWORD long)
(c-type UDWORD ulong)
(c-type SQLSMALLINT SWORD)
(c-type SQLUSMALLINT UWORD)
(c-type SQLSMALLINT* (pointer SQLSMALLINT))
(define-pointer-to-type SQLSMALLINT "SQLSMALLINT")
(c-type SQLINTEGER SDWORD)
(c-type SQLINTEGER* (pointer SQLINTEGER))
(c-type SQLUINTEGER UDWORD)
(c-type SQLLEN SQLINTEGER)
(c-type SQLLEN* (pointer SQLLEN))
(define-pointer-to-type SQLLEN "SQLLEN")
(define-pointer-to-type SQLINTEGER "SQLINTEGER")

(c-type SQLPOINTER void*)

(c-type SQLHANDLE void*)
(c-type SQLHANDLE* (pointer SQLHANDLE))
(define-pointer-to-pointer SQLHANDLE "SQLHANDLE")
(c-type SQLHENV SQLHANDLE)
(c-type SQLHDBC SQLHANDLE)
(c-type SQLHSTMT SQLHANDLE)
(c-type SQLHDESC SQLHANDLE)
(c-type SQLHENV* SQLHANDLE*)
(c-type SQLHDBC* SQLHANDLE*)
(c-type SQLHSTMT* SQLHANDLE*)
(c-type SQLHDESC* SQLHANDLE*)
(define-pointer-to-pointer SQLHDESC "SQLHDESC")
(define-cast-lambda-ptr SQLHANDLE SQLHENV)
(define-cast-lambda-ptr SQLHANDLE SQLHDBC)
(define-cast-lambda-ptr SQLHANDLE SQLHSTMT)
(define-cast-lambda-ptr SQLHANDLE SQLHDESC)

(c-type SQLHWND void*)
(c-type SQLRETURN SQLSMALLINT)

(c-type SQLCHAR uint8)
(c-type SQLSCHAR int8)
(c-type SQLWCHAR wchar_t)
(c-type SQLCHAR* (pointer SQLCHAR))
(c-type SQLSCHAR* (pointer SQLSCHAR))
(c-type SQLWCHAR* (pointer SQLWCHAR))
(define-pointer-to-type SQLCHAR "SQLCHAR")
(define-pointer-to-type SQLSCHAR "SQLSCHAR")
(define-pointer-to-type SQLWCHAR "SQLWCHAR")
(define-cast-lambda SQLCHAR* char-string)
(define-cast-lambda-ptr uint8* SQLCHAR*)
(define-cast-lambda-ptr uint16* SQLWCHAR*)


(c-structure SQL_TIMESTAMP_STRUCT
  (SQLSMALLINT year)
  (SQLUSMALLINT month)
  (SQLUSMALLINT day)
  (SQLUSMALLINT hour)
  (SQLUSMALLINT minute)
  (SQLUSMALLINT second)
  (SQLUINTEGER fraction))
  
(definition public (SQL_TIMESTAMP_STRUCT->date timestamp)
  (let ((year   (SQL_TIMESTAMP_STRUCT-year-ref timestamp))
        (month  (SQL_TIMESTAMP_STRUCT-month-ref timestamp))
        (day    (SQL_TIMESTAMP_STRUCT-day-ref timestamp))
        (hour   (SQL_TIMESTAMP_STRUCT-hour-ref timestamp))
        (minute (SQL_TIMESTAMP_STRUCT-minute-ref timestamp))
        (second (SQL_TIMESTAMP_STRUCT-second-ref timestamp))
        (nanoseconds (SQL_TIMESTAMP_STRUCT-fraction-ref timestamp)))
    (make-date nanoseconds second minute hour day month year (local-timezone))))


(c-structure SQL_NUMERIC_STRUCT
  (SQLCHAR precision)
  (SQLSCHAR scale)
  (SQLCHAR sign)
  (SQLCHAR val 16))


(definition public (char-string->SQLCHAR* string)
  (uint8*->SQLCHAR* (char-string->uint8* string)))


(definition public (UTF-16-string->SQLWCHAR* string)
  (uint16*->SQLWCHAR* (UTF-16-string->uint16* string)))


(c-external (SQLGetDiagField$ SQLSMALLINT SQLHANDLE SQLSMALLINT SQLSMALLINT SQLPOINTER SQLSMALLINT SQLSMALLINT*) SQLRETURN "SQLGetDiagField")
(c-external (SQLAllocHandleStd$ SQLSMALLINT SQLHANDLE SQLHANDLE*) SQLRETURN "SQLAllocHandleStd")
(c-external (SQLSetConnectAttr$ SQLHDBC SQLINTEGER SQLINTEGER SQLINTEGER) SQLRETURN "SQLSetConnectAttr")
(c-external (SQLSetStmtAttr$ SQLHSTMT SQLINTEGER SQLINTEGER SQLINTEGER) SQLRETURN "SQLSetStmtAttr")
(c-external (SQLSetDescField$ SQLHDESC SQLSMALLINT SQLSMALLINT SQLPOINTER SQLINTEGER) SQLRETURN "SQLSetDescField")
(c-external (SQLGetStmtAttr$ SQLHSTMT SQLINTEGER SQLPOINTER SQLINTEGER SQLINTEGER*) SQLRETURN "SQLGetStmtAttr")
(c-external (SQLDriverConnect$ SQLHDBC SQLHWND char-string SQLSMALLINT SQLCHAR* SQLSMALLINT SQLSMALLINT* SQLUSMALLINT) SQLRETURN "SQLDriverConnect")
(c-external (SQLExecDirect$ SQLHSTMT SQLCHAR* SQLINTEGER) SQLRETURN "SQLExecDirect")
(c-external (SQLExecDirectW$ SQLHSTMT SQLWCHAR* SQLINTEGER) SQLRETURN "SQLExecDirectW")
(c-external (SQLNumResultCols$ SQLHSTMT SQLSMALLINT*) SQLRETURN "SQLNumResultCols")
(c-external (SQLFreeHandle$ SQLSMALLINT SQLHANDLE) SQLRETURN "SQLFreeHandle")
(c-external (SQLDisconnect$ SQLHDBC) SQLRETURN "SQLDisconnect")
(c-external (SQLFreeStmt$ SQLHSTMT SQLUSMALLINT) SQLRETURN "SQLFreeStmt")
(c-external (SQLColAttribute$ SQLHSTMT SQLUSMALLINT SQLUSMALLINT SQLPOINTER SQLSMALLINT SQLSMALLINT* SQLLEN*) SQLRETURN "SQLColAttribute")
(c-external (SQLBindCol$ SQLHSTMT SQLUSMALLINT SQLSMALLINT SQLPOINTER SQLLEN SQLLEN*) SQLRETURN "SQLBindCol")
(c-external (SQLFetch$ SQLHSTMT) SQLRETURN "SQLFetch")
(c-external (SQLMoreResults$ SQLHSTMT) SQLRETURN "SQLMoreResults")
(c-external (SQLGetData$ SQLHSTMT SQLUSMALLINT SQLSMALLINT SQLPOINTER SQLLEN SQLLEN*) SQLRETURN "SQLGetData")
(c-external (SQLFetchScroll$ SQLHSTMT SQLSMALLINT SQLLEN) SQLRETURN "SQLFetchScroll")
(c-external (SQLEndTran$ SQLSMALLINT SQLHANDLE SQLSMALLINT) SQLRETURN "SQLEndTran")
)
  (else))
)
