;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; OpenAL
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module jazz.openal jazz


(import (jazz.foreign (phase syntax))
        (jazz.platform.types))


(c-include "<OpenAL/al.h>")
(c-include "<OpenAL/alc.h>")


(c-enumerant AL_NONE)
(c-enumerant AL_FALSE)
(c-enumerant AL_TRUE)
(c-enumerant AL_SOURCE_RELATIVE)
(c-enumerant AL_CONE_INNER_ANGLE)
(c-enumerant AL_CONE_OUTER_ANGLE)
(c-enumerant AL_PITCH)
(c-enumerant AL_POSITION)
(c-enumerant AL_DIRECTION)
(c-enumerant AL_VELOCITY)
(c-enumerant AL_LOOPING)
(c-enumerant AL_BUFFER)
(c-enumerant AL_GAIN)
(c-enumerant AL_MIN_GAIN)
(c-enumerant AL_MAX_GAIN)
(c-enumerant AL_ORIENTATION)
(c-enumerant AL_SOURCE_STATE)
(c-enumerant AL_INITIAL)
(c-enumerant AL_PLAYING)
(c-enumerant AL_PAUSED)
(c-enumerant AL_STOPPED)
(c-enumerant AL_BUFFERS_QUEUED)
(c-enumerant AL_BUFFERS_PROCESSED)
(c-enumerant AL_SEC_OFFSET)
(c-enumerant AL_SAMPLE_OFFSET)
(c-enumerant AL_BYTE_OFFSET)
(c-enumerant AL_SOURCE_TYPE)
(c-enumerant AL_STATIC)
(c-enumerant AL_STREAMING)
(c-enumerant AL_UNDETERMINED)
(c-enumerant AL_FORMAT_MONO8)
(c-enumerant AL_FORMAT_MONO16)
(c-enumerant AL_FORMAT_STEREO8)
(c-enumerant AL_FORMAT_STEREO16)
(c-enumerant AL_REFERENCE_DISTANCE)
(c-enumerant AL_ROLLOFF_FACTOR)
(c-enumerant AL_CONE_OUTER_GAIN)
(c-enumerant AL_MAX_DISTANCE)
(c-enumerant AL_FREQUENCY)
(c-enumerant AL_BITS)
(c-enumerant AL_CHANNELS)
(c-enumerant AL_SIZE)
(c-enumerant AL_UNUSED)
(c-enumerant AL_PENDING)
(c-enumerant AL_PROCESSED)
(c-enumerant AL_NO_ERROR)
(c-enumerant AL_INVALID_NAME)
(c-enumerant AL_INVALID_ENUM)
(c-enumerant AL_INVALID_VALUE)
(c-enumerant AL_INVALID_OPERATION)
(c-enumerant AL_OUT_OF_MEMORY)
(c-enumerant AL_VENDOR)
(c-enumerant AL_VERSION)
(c-enumerant AL_RENDERER)
(c-enumerant AL_EXTENSIONS)
(c-enumerant AL_DOPPLER_FACTOR)
(c-enumerant AL_DOPPLER_VELOCITY)
(c-enumerant AL_SPEED_OF_SOUND)
(c-enumerant AL_DISTANCE_MODEL)
(c-enumerant AL_INVERSE_DISTANCE)
(c-enumerant AL_INVERSE_DISTANCE_CLAMPED)
(c-enumerant AL_LINEAR_DISTANCE)
(c-enumerant AL_LINEAR_DISTANCE_CLAMPED)
(c-enumerant AL_EXPONENT_DISTANCE)
(c-enumerant AL_EXPONENT_DISTANCE_CLAMPED)


(c-external (alEnable int) void)
(c-external (alDisable int) void)
(c-external (alIsEnabled int) bool)
(c-external (alGetString int) char-string "___result = (char *)alGetString(___arg1);")
(c-external (alGetBooleanv int char-string) void)
(c-external (alGetIntegerv int s32vector) void)
(c-external (alGetFloatv int f32vector) void)
(c-external (alGetDoublev int f64vector) void)
(c-external (alGetBoolean int) bool)
(c-external (alGetInteger int) int)
(c-external (alGetFloat int) float)
(c-external (alGetDouble int) double)
(c-external (alGetError) int)
(c-external (alIsExtensionPresent char-string) bool)
(c-external (alGetProcAddress char-string) (pointer void))
(c-external (alGetEnumValue char-string) int)
(c-external (alListenerf int float) void)
(c-external (alListener3f int float float float) void)
(c-external (alListenerfv int f32vector) void)
(c-external (alListeneri int int) void)
(c-external (alListener3i int int int int) void)
(c-external (alListeneriv int s32vector) void)
(c-external (alGetListenerf int f32vector) void)
(c-external (alGetListener3f int f32vector f32vector f32vector) void)
(c-external (alGetListenerfv int f32vector) void)
(c-external (alGetListeneri int s32vector) void)
(c-external (alGetListener3i int s32vector s32vector s32vector) void)
(c-external (alGetListeneriv int s32vector) void)
(c-external (alGenSources int u32vector) void)
(c-external (alDeleteSources int u32vector) void)
(c-external (alIsSource unsigned-int) bool)
(c-external (alSourcef unsigned-int int float) void)
(c-external (alSource3f unsigned-int int float float float) void)
(c-external (alSourcefv unsigned-int int f32vector) void)
(c-external (alSourcei unsigned-int int int) void)
;(c-external (alSource3i unsigned-int int int int int) void)
;(c-external (alSourceiv unsigned-int int s32vector) void)
(c-external (alGetSourcef unsigned-int int f32vector) void)
(c-external (alGetSource3f unsigned-int int f32vector f32vector f32vector)void)
(c-external (alGetSourcefv unsigned-int int f32vector) void)
(c-external (alGetSourcei unsigned-int int s32vector) void)
;(c-external (alGetSource3i unsigned-int int s32vector s32vector s32vector)void)
;(c-external (alGetSourceiv unsigned-int int s32vector) void)
(c-external (alSourcePlayv int u32vector) void)
(c-external (alSourceStopv int u32vector) void)
(c-external (alSourceRewindv int u32vector) void)
(c-external (alSourcePausev int u32vector) void)
(c-external (alSourcePlay unsigned-int) void)
(c-external (alSourceStop unsigned-int) void)
(c-external (alSourceRewind unsigned-int) void)
(c-external (alSourcePause unsigned-int) void)
(c-external (alSourceQueueBuffers unsigned-int int u32vector) void)
(c-external (alSourceUnqueueBuffers unsigned-int int u32vector) void)
(c-external (alGenBuffers int u32vector) void)
(c-external (alDeleteBuffers int u32vector) void)
(c-external (alIsBuffer unsigned-int) bool)
(c-external (alBufferData unsigned-int int (pointer void) int int) void)
(c-external (alBufferf unsigned-int int float) void)
(c-external (alBuffer3f unsigned-int int float float float) void)
(c-external (alBufferfv unsigned-int int f32vector) void)
(c-external (alBufferi unsigned-int int int) void)
(c-external (alBuffer3i unsigned-int int int int int) void)
(c-external (alBufferiv unsigned-int int s32vector) void)
(c-external (alGetBufferf unsigned-int int f32vector) void)
(c-external (alGetBuffer3f unsigned-int int f32vector f32vector f32vector)void)
(c-external (alGetBufferfv unsigned-int int f32vector) void)
(c-external (alGetBufferi unsigned-int int s32vector) void)
(c-external (alGetBuffer3i unsigned-int int s32vector s32vector s32vector)void)
(c-external (alGetBufferiv unsigned-int int s32vector) void)
(c-external (alDopplerFactor float) void)
(c-external (alDopplerVelocity float) void)
(c-external (alSpeedOfSound float) void)
(c-external (alDistanceModel int) void)


@w
(c-external (alTest char-string int) void
  #/C/
    ALsizei size,freq;
    ALenum  format;
    ALvoid  *data;
    alutLoadWAVFile(___arg1,&format,&data,&size,&freq);
    alBufferData(___arg2,format,data,size,freq);
//#)


(c-external (alTest char-string) void
  #/C/
    return alutCreateBufferFromFile(___arg1);
//#)


;;;
;;;; ALC
;;;


@wait (
(c-enumerant ALC_FALSE)
(c-enumerant ALC_TRUE)
(c-enumerant ALC_FREQUENCY)
(c-enumerant ALC_REFRESH)
(c-enumerant ALC_SYNC)
(c-enumerant ALC_MONO_SOURCES)
(c-enumerant ALC_STEREO_SOURCES)
(c-enumerant ALC_NO_ERROR)
(c-enumerant ALC_INVALID_DEVICE)
(c-enumerant ALC_INVALID_CONTEXT)
(c-enumerant ALC_INVALID_ENUM)
(c-enumerant ALC_INVALID_VALUE)
(c-enumerant ALC_OUT_OF_MEMORY)
(c-enumerant ALC_DEFAULT_DEVICE_SPECIFIER)
(c-enumerant ALC_DEVICE_SPECIFIER)
(c-enumerant ALC_EXTENSIONS)
(c-enumerant ALC_MAJOR_VERSION)
(c-enumerant ALC_MINOR_VERSION)
(c-enumerant ALC_ATTRIBUTES_SIZE)
(c-enumerant ALC_ALL_ATTRIBUTES)
(c-enumerant ALC_CAPTURE_DEVICE_SPECIFIER)
(c-enumerant ALC_CAPTURE_DEFAULT_DEVICE_SPECIFIER)
(c-enumerant ALC_CAPTURE_SAMPLES)

(c-object ALCdevice () constructor: #f)
(c-object ALCcontext () constructor: #f)

(c-external (alcCreateContext ALCdevice s32vector) ALCcontext)
(c-external (alcCreateContext ALCdevice) ALCcontext proc-name: alc-create-context-simple "___result_voidstar = alcCreateContext(___arg1,NULL);")
(c-external (alcMakeContextCurrent ALCcontext) bool)
(c-external (alcProcessContext ALCcontext) void)
(c-external (alcSuspendContext ALCcontext) void)
(c-external (alcDestroyContext ALCcontext) void)
(c-external (alcGetCurrentContext) ALCcontext)
(c-external (alcGetContextsDevice ALCcontext) ALCdevice)
(c-external (alcOpenDevice char-string) ALCdevice)
(c-external (alcOpenDevice) ALCdevice proc-name: alc-open-default-device "___result_voidstar = alcOpenDevice(NULL);")
(c-external (alcCloseDevice ALCdevice) bool)
(c-external (alcGetError ALCdevice) int)
(c-external (alcIsExtensionPresent ALCdevice char-string) bool)
(c-external (alcGetProcAddress ALCdevice char-string) (pointer void))
(c-external (alcGetEnumValue ALCdevice char-string) int)
(c-external (alcGetString ALCdevice int) char-string "___result = (char *)alcGetString(___arg1,___arg2);")
(c-external (alcGetIntegerv ALCdevice int int s32vector) void)
(c-external (alcCaptureOpenDevice char-string unsigned-int int int) ALCdevice)
(c-external (alcCaptureCloseDevice ALCdevice) bool)
(c-external (alcCaptureStart ALCdevice) void)
(c-external (alcCaptureStop ALCdevice) void)
(c-external (alcCaptureSamples ALCdevice (pointer void) int) void)))
