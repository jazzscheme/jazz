;;;===============
;;;  JazzScheme
;;;===============
;;;
;;;; Shader Showcase
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2016
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module jazz.opengl.sample.shader.window jazz


(import (jazz.cairo)
        (jazz.graphic)
        (jazz.io)
        (jazz.platform)
        (jazz.opengl)
        (jazz.opengl.glew)
        (jazz.opengl.sample)
        (jazz.opengl.sample.syntax (phase syntax)))


;;;
;;;; Shader
;;;


(class Shader extends Object
  
  
  (slot type     <int>               accessors generate)
  (slot code           initialize #f accessors generate)
  (slot shaderid       initialize #f accessors generate)
  
  
  (method override (initialize type)
    (set! type~self type))
  
  
  (method public (create-shader)
    (set! shaderid (glCreateShader type))
    (glShaderSource shaderid 1 (list code) #f))
  
  
  (method public (compile-shader)
    (glCompileShader shaderid)
    (when (/= (glGetShaderiv* shaderid GL_COMPILE_STATUS) GL_TRUE)
      (let ((loglength (glGetShaderiv* shaderid GL_INFO_LOG_LENGTH)))
        (when (> loglength 0)
          (error "{a}" (glGetShaderInfoLog* shaderid loglength)))))))


;;;
;;;; Program
;;;


(class Shader-Program extends Object
  
  
  (slot name            <object> getter generate)
  (slot vertex-shader   <object> accessors generate)
  (slot fragment-shader <object> accessors generate)
  (slot program         <object> accessors generate)
  (slot attributes      <object> getter generate)
  (slot uniforms        <object> getter generate)
  
  
  (method override (initialize (name: name #f))
    (nextmethod)
    (set! name~self name)
    (set! vertex-shader (new Shader GL_VERTEX_SHADER))
    (set! fragment-shader (new Shader GL_FRAGMENT_SHADER))
    (set! program (glCreateProgram))
    (set! attributes (make-table test: equal?))
    (set! uniforms (make-table test: equal?))
    (prepare)
    (gl-check-error))
  
  
  (method protected virtual (prepare)
    )
  
  
  (method protected virtual (default-vertex-shader)
    )
  
  (method protected virtual (default-fragment-shader)
    )
  
  
  (method public (set-fs code)
    (set-code~ fragment-shader code))
  
  (method public (set-vs code)
    (set-code~ vertex-shader code))
  
  
  (method public (link)
    (create-shaders)
    (attach-shaders))
  
  
  (method public (relink)
    (detach-shaders)
    (set-vs (default-vertex-shader))
    (set-fs (default-fragment-shader))
    (prepare))
  
  
  (method public (create-shaders)
    (create-shader~ vertex-shader)
    (create-shader~ fragment-shader)
    (compile-shader~ vertex-shader)
    (compile-shader~ fragment-shader))
  
  
  (method public (attach-shaders)
    (when (and (get-shaderid~ vertex-shader)
               (get-shaderid~ fragment-shader))
      (glAttachShader program (get-shaderid~ vertex-shader))
      (glAttachShader program (get-shaderid~ fragment-shader))
      (glLinkProgram program)
      (when (/= (glGetProgramiv* program GL_LINK_STATUS) GL_TRUE)
        (let ((loglength (glGetProgramiv* program GL_INFO_LOG_LENGTH)))
          (when (> loglength 0)
            (error "{a}" (glGetProgramInfoLog* program loglength)))))))
  
  
  (method public (detach-shaders)
    (when (and (get-shaderid~ vertex-shader)
               (get-shaderid~ fragment-shader))
      (glDetachShader program (get-shaderid~ vertex-shader))
      (glDetachShader program (get-shaderid~ fragment-shader))
      (set-shaderid~ vertex-shader #f)
      (set-shaderid~ fragment-shader #f)))
  
  
  (method public (use)
    (glUseProgram program))
  
  
  (method public (unuse)
    (glUseProgram 0))
  
  
  ;;;
  ;;;; Uniforms
  ;;;
  
  
  (method public (get-uniform name)
    (table-ref uniforms name))
  
  
  (method public (add-uniform name)
    (let ((location (glGetUniformLocation* program name)))
      (table-set! uniforms name location)
      location))
  
  
  ;;;
  ;;;; Attributes
  ;;;
  
  
  (method public (get-attribute name)
    (table-ref attributes name))
  
  
  (method public (add-attribute name)
    (let ((location (glGetAttribLocation* program name)))
      (table-set! attributes name location)
      location)))


;;;
;;;; Color
;;;


(definition color-vert
  #<<SHADER
#version 140

uniform mat4 viewMatrix, projMatrix;

in vec3 position;
in vec3 color;
in vec3 normal;

out vec3 final_color;

void main()
{
    gl_Position = projMatrix * viewMatrix * vec4(position, 1.0);
    final_color = vec3(color.x, color.y, color.z * normal.z);
}
SHADER
)


(definition color-frag
  #<<SHADER
#version 140

in vec3 final_color;

out vec4 fragColor;

void main()
{
    fragColor = vec4(final_color, 1.0);
}
SHADER
)


(definition toggle-color?
  #f)


(class Color-Program extends Shader-Program
  
  
  ;; Attribute Locations
  (slot vertex-attribute   initialize #f getter generate)
  (slot normal-attribute   initialize #f getter generate)
  (slot color-attribute    initialize #f getter generate)
 
  ;; Uniform Locations
  (slot projMatrix-uniform initialize #f getter generate)
  (slot viewMatrix-uniform initialize #f getter generate)
  
  
  (method override (prepare)
    (set-vs (default-vertex-shader))
    (set-fs (default-fragment-shader))
    (link)
    (set! vertex-attribute (add-attribute "position"))
    (set! normal-attribute (add-attribute "normal"))
    (set! color-attribute (add-attribute "color"))
    (set! projMatrix-uniform (add-uniform "projMatrix"))
    (set! viewMatrix-uniform (add-uniform "viewMatrix")))
  
  
  (method override (default-vertex-shader)
    color-vert)
  
  (method override (default-fragment-shader)
    color-frag)
  
  
  (method (create-vertex-buffer vertices)
    (let ((vbo (glGenBuffers*)))
      (glBindBuffer GL_ARRAY_BUFFER vbo)
      (glBufferDataFloat* GL_ARRAY_BUFFER (f32vector-length vertices) vertices GL_STATIC_DRAW)
      (glEnableVertexAttribArray vertex-attribute)
      (glVertexAttribPointer* vertex-attribute 3 GL_FLOAT GL_FALSE (* 6 float-size) 0)
      (glEnableVertexAttribArray normal-attribute)
      (glVertexAttribPointer* normal-attribute 3 GL_FLOAT GL_FALSE (* 6 float-size) (* 3 float-size))
      (glBindBuffer GL_ARRAY_BUFFER 0)
      vbo))
  
  
  (method (create-color-buffer colors)
    (let ((vbo (glGenBuffers*)))
      (glBindBuffer GL_ARRAY_BUFFER vbo)
      (glBufferDataFloat* GL_ARRAY_BUFFER (f32vector-length colors) colors GL_STATIC_DRAW)
      (glEnableVertexAttribArray color-attribute)
      (glVertexAttribPointer* color-attribute 3 GL_FLOAT GL_FALSE (* 3 float-size) 0)
      (glBindBuffer GL_ARRAY_BUFFER 0)
      vbo))
  
  
  (method (bind-uniforms projection-matrix view-matrix)
    (glUniformMatrix4dv* projMatrix-uniform 1 #f projection-matrix)
    (glUniformMatrix4dv* viewMatrix-uniform 1 #f view-matrix))
  
  
  (method (unbind-uniforms)
    ))


;;;
;;;; Texture
;;;


(definition texture-vert
  #<<SHADER
#version 140

uniform mat4 viewMatrix, projMatrix;

in vec3 position;
in vec3 textureCoord;

out vec3 final_texture_coord;

void main()
{
    gl_Position = projMatrix * viewMatrix * vec4(position, 1.0);
    final_texture_coord = textureCoord;
}
SHADER
)


(definition texture-frag
  #<<SHADER
#version 140

uniform sampler2D textureSampler;

in vec3 final_texture_coord;

out vec4 fragColor;

void main()
{
    fragColor = texture(textureSampler, vec2(final_texture_coord.x, final_texture_coord.y));
}
SHADER
)


(class Texture-Program extends Shader-Program
  
  
  ;; Attribute Locations
  (slot vertex-attribute       initialize #f getter generate)
  (slot textureCoord-attribute initialize #f getter generate)
 
  ;; Uniform Locations
  (slot projMatrix-uniform     initialize #f getter generate)
  (slot viewMatrix-uniform     initialize #f getter generate)
  (slot textureSampler-uniform initialize #f getter generate)
  
  
  (method override (prepare)
    (set-vs (default-vertex-shader))
    (set-fs (default-fragment-shader))
    (link)
    (set! vertex-attribute (add-attribute "position"))
    (set! textureCoord-attribute (add-attribute "textureCoord"))
    (set! projMatrix-uniform (add-uniform "projMatrix"))
    (set! viewMatrix-uniform (add-uniform "viewMatrix"))
    (set! textureSampler-uniform (add-uniform "textureSampler")))
  
  
  (method override (default-vertex-shader)
    texture-vert)
  
  (method override (default-fragment-shader)
    texture-frag)
  
  
  (method (create-vertex-buffer vertices)
    (let ((vbo (glGenBuffers*)))
      (glBindBuffer GL_ARRAY_BUFFER vbo)
      (glBufferDataFloat* GL_ARRAY_BUFFER (f32vector-length vertices) vertices GL_STATIC_DRAW)
      (glEnableVertexAttribArray vertex-attribute)
      (glVertexAttribPointer* vertex-attribute 3 GL_FLOAT GL_FALSE (* 6 float-size) 0)
      (glEnableVertexAttribArray textureCoord-attribute)
      (glVertexAttribPointer* textureCoord-attribute 3 GL_FLOAT GL_FALSE (* 6 float-size) (* 3 float-size))
      (glBindBuffer GL_ARRAY_BUFFER 0)
      vbo))
  
  
  (method (bind-uniforms projection-matrix view-matrix texture-id)
    (glUniformMatrix4dv* projMatrix-uniform 1 #f projection-matrix)
    (glUniformMatrix4dv* viewMatrix-uniform 1 #f view-matrix)
    (glActiveTexture GL_TEXTURE0)
    (glBindTexture GL_TEXTURE_2D texture-id)
    (glUniform1i textureSampler-uniform 0))
  
  
  (method (unbind-uniforms)
    (glActiveTexture GL_TEXTURE0)
    (glBindTexture GL_TEXTURE_2D 0)))


;;;
;;;; Interface
;;;


(definition interface-vert
  #<<SHADER
#version 140

uniform mat4 projMatrix;

in vec3 position;
in vec3 textureCoord;

out vec3 final_texture_coord;

void main()
{
    gl_Position = projMatrix * vec4(position, 1.0);
    final_texture_coord = textureCoord;
}
SHADER
)


(definition interface-frag
  #<<SHADER
#version 140

uniform sampler2D textureSampler;

in vec3 final_texture_coord;

out vec4 fragColor;

void main()
{
    fragColor = texture(textureSampler, vec2(final_texture_coord.x, final_texture_coord.y));
}
SHADER
)


(class Interface-Program extends Shader-Program
  
  
  ;; Attribute Locations
  (slot vertex-attribute       initialize #f getter generate)
  (slot textureCoord-attribute initialize #f getter generate)
 
  ;; Uniform Locations
  (slot projMatrix-uniform     initialize #f getter generate)
  (slot textureSampler-uniform initialize #f getter generate)
  
  
  (method override (prepare)
    (set-vs (default-vertex-shader))
    (set-fs (default-fragment-shader))
    (link)
    (set! vertex-attribute (add-attribute "position"))
    (set! textureCoord-attribute (add-attribute "textureCoord"))
    (set! projMatrix-uniform (add-uniform "projMatrix"))
    (set! textureSampler-uniform (add-uniform "textureSampler")))
  
  
  (method override (default-vertex-shader)
    interface-vert)
  
  (method override (default-fragment-shader)
    interface-frag)
  
  
  (method (create-vertex-buffer vertices)
    (let ((vbo (glGenBuffers*)))
      (glBindBuffer GL_ARRAY_BUFFER vbo)
      (glBufferDataFloat* GL_ARRAY_BUFFER (f32vector-length vertices) vertices GL_STATIC_DRAW)
      (glEnableVertexAttribArray vertex-attribute)
      (glVertexAttribPointer* vertex-attribute 3 GL_FLOAT GL_FALSE (* 6 float-size) 0)
      (glEnableVertexAttribArray textureCoord-attribute)
      (glVertexAttribPointer* textureCoord-attribute 3 GL_FLOAT GL_FALSE (* 6 float-size) (* 3 float-size))
      (glBindBuffer GL_ARRAY_BUFFER 0)
      vbo))
  
  
  (method (bind-uniforms projection-matrix texture-id)
    (glUniformMatrix4dv* projMatrix-uniform 1 #f projection-matrix)
    (glActiveTexture GL_TEXTURE0)
    (glBindTexture GL_TEXTURE_2D texture-id)
    (glUniform1i textureSampler-uniform 0))
  
  
  (method (unbind-uniforms)
    (glActiveTexture GL_TEXTURE0)
    (glBindTexture GL_TEXTURE_2D 0)))


;;;
;;;; Array
;;;


(class Array extends Object
  
  
  (slot array getter generate))


(class Color-Array extends Array
  
  
  (slot vertex-buffer)
  (slot color-buffer)
  
  
  (method override (initialize program vertices colors)
    (set! array (glGenVertexArrays*))
    (glBindVertexArray array)
    (set! vertex-buffer (create-vertex-buffer~ program vertices))
    (set! color-buffer (create-color-buffer~ program colors))
    (glBindVertexArray 0)))


@convert
(class Texture-Array extends Array
  
  
  (slot vertex-buffer)
  
  
  (method override (initialize program vertices)
    (set! array (glGenVertexArrays*))
    (glBindVertexArray array)
    (set! vertex-buffer (create-vertex-buffer~ program vertices))
    (glBindVertexArray 0)))


@convert
(class Interface-Array extends Array
  
  
  (slot vertex-buffer)
  
  
  (method override (initialize program vertices)
    (set! array (glGenVertexArrays*))
    (glBindVertexArray array)
    (set! vertex-buffer (create-vertex-buffer~ program vertices))
    (glBindVertexArray 0)))


;;;
;;;; Window
;;;


(class Shader-Showcase-Window extends OpenGL-Window
  
  
  ;; Programs
  (slot color-program       initialize #f getter generate)
  (slot texture-program     initialize #f getter generate)
  (slot interface-program   initialize #f getter generate)
  
  ;; Arrays
  (slot blue-array          initialize #f getter generate)
  (slot red-array           initialize #f getter generate)
  (slot texture-array       initialize #f getter generate)
  (slot interface-array     initialize #f getter generate)
  
  ;; Matrices
  (slot projection-matrix   initialize (make-matrix) getter generate)
  (slot view-matrix         initialize (make-matrix) getter generate)
  (slot orthographic-matrix initialize (make-matrix) getter generate)
  
  ;; Textures
  (slot texture             initialize #f getter generate)
  (slot interface           initialize #f getter generate)
  
  
  (method override (setup-opengl)
    (create-programs)
    (initialize-arrays))
  
  
  ;;;
  ;;;; Program
  ;;;
  
  
  (method (create-programs)
    (set! color-program (new Color-Program))
    @convert
    (set! texture-program (new Texture-Program))
    @convert
    (set! interface-program (new Interface-Program)))
  
  
  (method (release-programs)
    (glDeleteProgram (get-program~ Color-Program))
    @convert
    (glDeleteProgram (get-program~ Texture-Program))
    @convert
    (glDeleteProgram (get-program~ Interface-Program))
    (set! color-program #f)
    @convert
    (set! texture-program #f)
    @convert
    (set! interface-program #f))
  
  
  ;;;
  ;;;; Arrays
  ;;;
  
  
  (method (initialize-arrays)
    (set! red-array (create-red))
    (set! blue-array (create-blue))
    @convert
    (set! texture-array (create-texture))
    @convert
    (set! interface-array (create-interface)))
  
  
  (method (create-red)
    (let ((vertices (if (not toggle-color?)
                        #f32( 1.0 0.0 -5.0 0. 0. 1.
                              3.0 0.0 -5.0 0. 0. 1.
                              2.0 2.0 -5.0 0. 0. 1.)
                        #f32( 1.0 0.0 -5.0 0. 0. 1.
                              3.0 0.0 -5.0 0. 0. 1.
                              2.0 2.0 -5.0 0. 0. 1.)))
          (colors (if (not toggle-color?)
                      #f32( 1.0 0.0 0.0
                            1.0 0.0 0.0
                            1.0 0.0 0.0)
                      #f32( 0.0 1.0 0.0
                            0.0 1.0 0.0
                            0.0 1.0 0.0))))
      (new Color-Array color-program vertices colors)))
  
  
  (method (create-blue)
    (let ((vertices #f32( -3.0 0.0 -5.0 0. 0. 1.
                          -1.0 0.0 -5.0 0. 0. 1.
                          -2.0 2.0 -5.0 0. 0. 1.))
          (colors #f32( 0.0 0.0 1.0
                        0.0 0.0 1.0
                        0.0 0.0 1.0)))
      (new Color-Array color-program vertices colors)))
  
  
  @convert
  (method (create-texture)
    (let ((vertices #f32( -1.0 2.0 -5.0 0.0 0.0 0.0
                           1.0 2.0 -5.0 1.0 0.0 0.0
                           0.0 4.0 -5.0 0.5 1.0 0.0)))
      (new Texture-Array texture-program vertices)))
  
  
  @convert
  (method (create-interface)
    (let ((vertices #f32(  0.0 10.0 0.0 0.0 0.0 0.0
                          10.0 10.0 0.0 1.0 0.0 0.0
                           0.0  0.0 0.0 0.0 1.0 0.0
                          10.0  0.0 0.0 1.0 1.0 0.0
                           0.0  0.0 0.0 0.0 1.0 0.0
                          10.0 10.0 0.0 1.0 0.0 0.0)))
      (new Interface-Array interface-program vertices)))
  
  
  (method (delete-arrays)
    )
  
  
  ;;;
  ;;;; Resize
  ;;;
  
  
  (method override (resize-scene width <fl> height <fl>)
    ;; Viewport
    (glViewport 0 0 (fxround width) (fxround height))
    
    ;; Projection
    (let ((ratio (/ width height)))
      (make-perspective-matrix! projection-matrix 53.13 ratio 1.0 30.0))
    
    ;; Orthographic
    (make-orthographic-matrix! orthographic-matrix 0.0 10.0 0.0 10.0 0.0 10.0)
    
    ;; View
    (make-view-matrix! view-matrix (vertex 7. 2. 6.) (lookat (vertex -.513 -.110 -.852) (vertex -.056 .994 -.094) (vertex .857 -4.195e-8 -.516)))
    
    @convert (
    ;; Textures
    (set! texture (make-cairo-texture 100 100))
    (set! interface (make-cairo-texture (fxround width) (fxround height)))))
  
  
  ;;;
  ;;;; Keyboard
  ;;;
  
  
  (method override (key-press c)
    (case c
      ((#\r) (reload-buffers))))
  
  
  (method (reload-buffers)
    (delete-arrays)
    (set! toggle-color? (not toggle-color?))
    (initialize-arrays))
  
  
  ;;;
  ;;;; Draw
  ;;;
  
  
  (method override (draw-scene)
    ;; Background
    (glClearColor 0.0 0.0 0.0 0.0)
    (glClear (bitwise-ior GL_COLOR_BUFFER_BIT GL_DEPTH_BUFFER_BIT))
    
    ;; Color
    (use~ color-program)
    (bind-uniforms~ color-program projection-matrix view-matrix)
    (glBindVertexArray (get-array~ blue-array))
    (glDrawArrays GL_TRIANGLES 0 6)
    (glBindVertexArray (get-array~ red-array))
    (glDrawArrays GL_TRIANGLES 0 6)
    (unbind-uniforms~ color-program)
    (unuse~ color-program)
    
    @convert (
    ;; Texture
    (let ((surface (get-surface~ texture)))
      (fill-rect~ surface {Rect 0 0 100 100} {Color Yellow})
      (fill-rect~ surface {Rect 50 0 100 50} {Color Green})
      (fill-rect~ surface {Rect 0 50 50 100} {Color Green})
      (map-texture~ texture))
    (use~ texture-program)
    (bind-uniforms~ texture-program projection-matrix view-matrix (get-id~ texture))
    (glBindVertexArray (get-array~ texture-array))
    (glDrawArrays GL_TRIANGLES 0 6)
    (glBindVertexArray 0)
    (unbind-uniforms~ texture-program)
    (unuse~ texture-program))
    
    @convert (
    ;; Interface
    (let ((surface (get-surface~ interface)))
      (set-operator~ surface CAIRO_OPERATOR_CLEAR)
      (paint~ surface)
      (set-operator~ surface CAIRO_OPERATOR_OVER)
      (let ((size (get-size)))
        (let ((width (get-width~ size))
              (height (get-height~ size)))
          (let ((w/2 (quotient width 2))
                (h/2 (quotient height 2)))
            (fill-rect~ surface (new Rect 0 0 w/2 h/2) {Color Orange alpha: .5})
            (fill-rect~ surface (new Rect w/2 h/2 width height) {Color Orange alpha: .5})
            (fill-rect~ surface (new Rect w/2 0 width h/2) {Color Purple alpha: .5})
            (fill-rect~ surface (new Rect 0 h/2 w/2 height) {Color Purple alpha: .5}))))
      (map-texture~ interface))
    (glEnable GL_BLEND)
    (use~ interface-program)
    (bind-uniforms~ interface-program orthographic-matrix (get-id~ interface))
    (glBindVertexArray (get-array~ interface-array))
    (glDrawArrays GL_TRIANGLES 0 6)
    (glBindVertexArray 0)
    (unbind-uniforms~ interface-program)
    (unuse~ interface-program)
    (glDisable GL_BLEND)))))
