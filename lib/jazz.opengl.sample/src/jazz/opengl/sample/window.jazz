;;;===============
;;;  JazzScheme
;;;===============
;;;
;;;; Shader Showcase
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module jazz.opengl.sample.window jazz


(import (jazz.cairo)
        (jazz.graphic)
        (jazz.io)
        (jazz.platform)
        (jazz.opengl)
        (jazz.opengl.glew)
        (jazz.opengl.sample)
        (jazz.opengl.sample.syntax (phase syntax))
        (jazz.opengl.sample.texture)
        (jazz.screen))


;;;
;;;; Shader
;;;


(definition glsl-version
  (cond-expand
    (mac
     #/C/
#version 140

//#)
    (else
     #/C/
#version 130

//#)))


(class Shader extends Object
  
  
  (slot type     <int>               accessors generate)
  (slot code           initialize #f accessors generate)
  (slot shaderid       initialize #f accessors generate)
  
  
  (method override (initialize self type)
    (set! self.type type))
  
  
  (method public (create-shader self)
    (set! shaderid (glCreateShader type))
    (glShaderSource shaderid 1 (list code) #f))
  
  
  (method public (compile-shader self)
    (glCompileShader shaderid)
    (when (/= (glGetShaderiv* shaderid GL_COMPILE_STATUS) GL_TRUE)
      (let ((loglength (glGetShaderiv* shaderid GL_INFO_LOG_LENGTH)))
        (when (> loglength 0)
          (error "{a}" (glGetShaderInfoLog* shaderid loglength)))))))


;;;
;;;; Program
;;;


(class Shader-Program extends Object
  
  
  (slot name            <object> getter generate)
  (slot vertex-shader   <object> accessors generate)
  (slot fragment-shader <object> accessors generate)
  (slot program         <object> accessors generate)
  (slot attributes      <object> getter generate)
  (slot uniforms        <object> getter generate)
  
  
  (method override (initialize self (name: name #f))
    (nextmethod self)
    (set! self.name name)
    (set! vertex-shader (new Shader GL_VERTEX_SHADER))
    (set! fragment-shader (new Shader GL_FRAGMENT_SHADER))
    (set! program (glCreateProgram))
    (set! attributes (make-table test: equal?))
    (set! uniforms (make-table test: equal?))
    (prepare self)
    (gl-check-error))
  
  
  (method package virtual (prepare self)
    )
  
  
  (method protected virtual (default-vertex-shader self)
    )
  
  (method protected virtual (default-fragment-shader self)
    )
  
  
  (method public (set-fs self code)
    (set-code fragment-shader code))
  
  (method public (set-vs self code)
    (set-code vertex-shader code))
  
  
  (method protected virtual (setup-transform-feedback self)
    )
  
  
  (method public (link self)
    (create-shaders self)
    (attach-shaders self))
  
  
  (method public (relink self)
    (detach-shaders self)
    (set-vs self (default-vertex-shader self))
    (set-fs self (default-fragment-shader self))
    (prepare self))
  
  
  (method public (create-shaders self)
    (create-shader vertex-shader)
    (create-shader fragment-shader)
    (compile-shader vertex-shader)
    (compile-shader fragment-shader))
  
  
  (method public (attach-shaders self)
    (when (and (get-shaderid vertex-shader)
               (get-shaderid fragment-shader))
      (glAttachShader program (get-shaderid vertex-shader))
      (glAttachShader program (get-shaderid fragment-shader))
      (setup-transform-feedback self)
      (glLinkProgram program)
      (when (/= (glGetProgramiv* program GL_LINK_STATUS) GL_TRUE)
        (let ((loglength (glGetProgramiv* program GL_INFO_LOG_LENGTH)))
          (when (> loglength 0)
            (error "{a}" (glGetProgramInfoLog* program loglength)))))))
  
  
  (method public (detach-shaders self)
    (when (and (get-shaderid vertex-shader)
               (get-shaderid fragment-shader))
      (glDetachShader program (get-shaderid vertex-shader))
      (glDetachShader program (get-shaderid fragment-shader))
      (set-shaderid vertex-shader #f)
      (set-shaderid fragment-shader #f)))
  
  
  (method public (use self)
    (glUseProgram program))
  
  
  (method public (unuse self)
    (glUseProgram 0))
  
  
  ;;;
  ;;;; Uniforms
  ;;;
  
  
  (method public (get-uniform self name)
    (table-ref uniforms name))
  
  
  (method public (add-uniform self name)
    (let ((location (glGetUniformLocation* program name)))
      (table-set! uniforms name location)
      location))
  
  
  ;;;
  ;;;; Attributes
  ;;;
  
  
  (method public (get-attribute self name)
    (table-ref attributes name))
  
  
  (method public (add-attribute self name)
    (let ((location (glGetAttribLocation* program name)))
      (table-set! attributes name location)
      location)))


;;;
;;;; Color
;;;


(definition color-vert
  (string-append glsl-version
    #/C/
uniform mat4 viewMatrix, projMatrix;

in vec3 position;
in vec3 color;
in vec3 normal;

out vec4 out1;
out vec4 out2;
out vec4 out3;
out vec4 out4;

out vec3 final_color;

void main()
{
    gl_Position = projMatrix * viewMatrix * vec4(position, 1.0);
    final_color = vec3(color.x, color.y, color.z * normal.z);
    out1 = vec4(position, 1.0);
    out2 = gl_Position;
    out3 = vec4(final_color, 1.0);
    out4 = vec4(0, 0, 0, 0);
}
//#))


(definition color-frag
  (string-append glsl-version
    #/C/
in vec3 final_color;

out vec4 fragColor;

void main()
{
    fragColor = vec4(final_color, 1.0);
}
//#))


(definition toggle-color?
  #f)


(class Color-Program extends Shader-Program
  
  
  ;; Attribute Locations
  (slot vertex-attribute   initialize #f getter generate)
  (slot normal-attribute   initialize #f getter generate)
  (slot color-attribute    initialize #f getter generate)
 
  ;; Uniform Locations
  (slot projMatrix-uniform initialize #f getter generate)
  (slot viewMatrix-uniform initialize #f getter generate)
  
  
  (method override (prepare self)
    (set-vs self (default-vertex-shader self))
    (set-fs self (default-fragment-shader self))
    (link self)
    (set! vertex-attribute (add-attribute self "position"))
    (set! normal-attribute (add-attribute self "normal"))
    (set! color-attribute (add-attribute self "color"))
    (set! projMatrix-uniform (add-uniform self "projMatrix"))
    (set! viewMatrix-uniform (add-uniform self "viewMatrix")))
  
  
  (method override (default-vertex-shader self)
    color-vert)
  
  (method override (default-fragment-shader self)
    color-frag)
  
  
  (method override (setup-transform-feedback self)
    (glTransformFeedbackVaryings program))
  
  
  (method package (create-vertex-buffer self vertices)
    (let ((vbo (glGenBuffers*)))
      (glBindBuffer GL_ARRAY_BUFFER vbo)
      (glBufferDataFloat* GL_ARRAY_BUFFER (f32vector-length vertices) vertices GL_STATIC_DRAW)
      (glEnableVertexAttribArray vertex-attribute)
      (glVertexAttribPointer* vertex-attribute 3 GL_FLOAT GL_FALSE (* 6 float-size) 0)
      (glEnableVertexAttribArray normal-attribute)
      (glVertexAttribPointer* normal-attribute 3 GL_FLOAT GL_FALSE (* 6 float-size) (* 3 float-size))
      (glBindBuffer GL_ARRAY_BUFFER 0)
      vbo))
  
  
  (method package (create-color-buffer self colors)
    (let ((vbo (glGenBuffers*)))
      (glBindBuffer GL_ARRAY_BUFFER vbo)
      (glBufferDataFloat* GL_ARRAY_BUFFER (f32vector-length colors) colors GL_STATIC_DRAW)
      (glEnableVertexAttribArray color-attribute)
      (glVertexAttribPointer* color-attribute 3 GL_FLOAT GL_FALSE (* 3 float-size) 0)
      (glBindBuffer GL_ARRAY_BUFFER 0)
      vbo))
  
  
  (method package (create-feedback-buffer self count)
    (let ((tbo (glGenBuffers*)))
      (glBindBuffer GL_ARRAY_BUFFER tbo)
      (glBufferData GL_ARRAY_BUFFER (* count float-size 4 3) #f GL_STATIC_READ)
      tbo))
  
  
  (method package (bind-uniforms self projection-matrix view-matrix)
    (glUniformMatrix4dv* projMatrix-uniform 1 #f projection-matrix)
    (glUniformMatrix4dv* viewMatrix-uniform 1 #f view-matrix))
  
  
  (method package (unbind-uniforms self)
    ))


;;;
;;;; Texture
;;;


(definition texture-vert
  (string-append glsl-version
    #/C/
uniform mat4 viewMatrix, projMatrix;

in vec3 position;
in vec3 textureCoord;

out vec3 final_texture_coord;

void main()
{
    gl_Position = projMatrix * viewMatrix * vec4(position, 1.0);
    final_texture_coord = textureCoord;
}
//#))


(definition texture-frag
  (string-append glsl-version
    #/C/
uniform sampler2D textureSampler;

in vec3 final_texture_coord;

out vec4 fragColor;

void main()
{
    fragColor = texture(textureSampler, vec2(final_texture_coord.x, final_texture_coord.y));
}
//#))


(class Texture-Program extends Shader-Program
  
  
  ;; Attribute Locations
  (slot vertex-attribute       initialize #f getter generate)
  (slot textureCoord-attribute initialize #f getter generate)
 
  ;; Uniform Locations
  (slot projMatrix-uniform     initialize #f getter generate)
  (slot viewMatrix-uniform     initialize #f getter generate)
  (slot textureSampler-uniform initialize #f getter generate)
  
  
  (method override (prepare self)
    (set-vs self (default-vertex-shader self))
    (set-fs self (default-fragment-shader self))
    (link self)
    (set! vertex-attribute (add-attribute self "position"))
    (set! textureCoord-attribute (add-attribute self "textureCoord"))
    (set! projMatrix-uniform (add-uniform self "projMatrix"))
    (set! viewMatrix-uniform (add-uniform self "viewMatrix"))
    (set! textureSampler-uniform (add-uniform self "textureSampler")))
  
  
  (method override (default-vertex-shader self)
    texture-vert)
  
  (method override (default-fragment-shader self)
    texture-frag)
  
  
  (method package (create-vertex-buffer self vertices)
    (let ((vbo (glGenBuffers*)))
      (glBindBuffer GL_ARRAY_BUFFER vbo)
      (glBufferDataFloat* GL_ARRAY_BUFFER (f32vector-length vertices) vertices GL_STATIC_DRAW)
      (glEnableVertexAttribArray vertex-attribute)
      (glVertexAttribPointer* vertex-attribute 3 GL_FLOAT GL_FALSE (* 6 float-size) 0)
      (glEnableVertexAttribArray textureCoord-attribute)
      (glVertexAttribPointer* textureCoord-attribute 3 GL_FLOAT GL_FALSE (* 6 float-size) (* 3 float-size))
      (glBindBuffer GL_ARRAY_BUFFER 0)
      vbo))
  
  
  (method package (bind-uniforms self projection-matrix view-matrix texture-id)
    (glUniformMatrix4dv* projMatrix-uniform 1 #f projection-matrix)
    (glUniformMatrix4dv* viewMatrix-uniform 1 #f view-matrix)
    (glActiveTexture GL_TEXTURE0)
    (glBindTexture GL_TEXTURE_2D texture-id)
    (glUniform1i textureSampler-uniform 0))
  
  
  (method package (unbind-uniforms self)
    (glActiveTexture GL_TEXTURE0)
    (glBindTexture GL_TEXTURE_2D 0)))


;;;
;;;; Interface
;;;


(definition interface-vert
  (string-append glsl-version
    #/C/
uniform mat4 projMatrix;

in vec3 position;
in vec3 textureCoord;

out vec3 final_texture_coord;

void main()
{
    gl_Position = projMatrix * vec4(position, 1.0);
    final_texture_coord = textureCoord;
}
//#))


(definition interface-frag
  (string-append glsl-version
    #/C/
uniform sampler2D textureSampler;

in vec3 final_texture_coord;

out vec4 fragColor;

void main()
{
    fragColor = texture(textureSampler, vec2(final_texture_coord.x, final_texture_coord.y));
}
//#))


(class Interface-Program extends Shader-Program
  
  
  ;; Attribute Locations
  (slot vertex-attribute       initialize #f getter generate)
  (slot textureCoord-attribute initialize #f getter generate)
 
  ;; Uniform Locations
  (slot projMatrix-uniform     initialize #f getter generate)
  (slot textureSampler-uniform initialize #f getter generate)
  
  
  (method override (prepare self)
    (set-vs self (default-vertex-shader self))
    (set-fs self (default-fragment-shader self))
    (link self)
    (set! vertex-attribute (add-attribute self "position"))
    (set! textureCoord-attribute (add-attribute self "textureCoord"))
    (set! projMatrix-uniform (add-uniform self "projMatrix"))
    (set! textureSampler-uniform (add-uniform self "textureSampler")))
  
  
  (method override (default-vertex-shader self)
    interface-vert)
  
  (method override (default-fragment-shader self)
    interface-frag)
  
  
  (method package (create-vertex-buffer self vertices)
    (let ((vbo (glGenBuffers*)))
      (glBindBuffer GL_ARRAY_BUFFER vbo)
      (glBufferDataFloat* GL_ARRAY_BUFFER (f32vector-length vertices) vertices GL_STATIC_DRAW)
      (glEnableVertexAttribArray vertex-attribute)
      (glVertexAttribPointer* vertex-attribute 3 GL_FLOAT GL_FALSE (* 6 float-size) 0)
      (glEnableVertexAttribArray textureCoord-attribute)
      (glVertexAttribPointer* textureCoord-attribute 3 GL_FLOAT GL_FALSE (* 6 float-size) (* 3 float-size))
      (glBindBuffer GL_ARRAY_BUFFER 0)
      vbo))
  
  
  (method package (bind-uniforms self projection-matrix texture-id)
    (glUniformMatrix4dv* projMatrix-uniform 1 #f projection-matrix)
    (glActiveTexture GL_TEXTURE0)
    (glBindTexture GL_TEXTURE_2D texture-id)
    (glUniform1i textureSampler-uniform 0))
  
  
  (method package (unbind-uniforms self)
    (glActiveTexture GL_TEXTURE0)
    (glBindTexture GL_TEXTURE_2D 0)))


;;;
;;;; Array
;;;


(class Array extends Object
  
  
  (slot array getter generate))


(class Color-Array extends Array
  
  
  (slot vertex-buffer)
  (slot color-buffer)
  (slot feedback-buffer)
  
  
  (method override (initialize self program vertices colors)
    (set! array (glGenVertexArrays*))
    (glBindVertexArray array)
    (set! vertex-buffer (create-vertex-buffer program vertices))
    (set! color-buffer (create-color-buffer program colors))
    (set! feedback-buffer (create-feedback-buffer program (/ (f32vector-length vertices) 6)))
    (glBindVertexArray 0))
  
  
  (method package (bind-transform-feedback self)
    (glBindBuffer GL_ARRAY_BUFFER feedback-buffer)
    (glBindBufferBase GL_TRANSFORM_FEEDBACK_BUFFER 0 feedback-buffer)))


(class Texture-Array extends Array
  
  
  (slot vertex-buffer)
  
  
  (method override (initialize self program vertices)
    (set! array (glGenVertexArrays*))
    (glBindVertexArray array)
    (set! vertex-buffer (create-vertex-buffer program vertices))
    (glBindVertexArray 0)))


(class Interface-Array extends Array
  
  
  (slot vertex-buffer)
  
  
  (method override (initialize self program vertices)
    (set! array (glGenVertexArrays*))
    (glBindVertexArray array)
    (set! vertex-buffer (create-vertex-buffer program vertices))
    (glBindVertexArray 0)))


;;;
;;;; Window
;;;


(class Shader-Showcase-Window extends OpenGL-Window
  
  
  ;; Programs
  (slot color-program       initialize #f getter generate)
  (slot texture-program     initialize #f getter generate)
  (slot interface-program   initialize #f getter generate)
  
  ;; Arrays
  (slot blue-array          initialize #f getter generate)
  (slot red-array           initialize #f getter generate)
  (slot texture-array       initialize #f getter generate)
  (slot interface-array     initialize #f getter generate)
  
  ;; Matrices
  (slot projection-matrix   initialize (make-matrix) getter generate)
  (slot view-matrix         initialize (make-matrix) getter generate)
  (slot orthographic-matrix initialize (make-matrix) getter generate)
  
  ;; Textures
  (slot texture             initialize #f getter generate)
  (slot texture-toggle?     initialize #f getter generate)
  (slot interface           initialize #f getter generate)
  
  ;; Render
  (slot render-thread       initialize #f getter generate)
  
  ;; Feedback
  (slot feedback?           initialize #f getter generate)
  (slot first-time?         initialize #t getter generate)
  
  
  (method override (destroy self)
    (stop-render self)
    (nextmethod self))
  
  
  (method override (setup-opengl self)
    (create-programs self)
    (initialize-arrays self)
    (start-render self))
  
  
  (method (start-render self)
    (let ((thread
            (new-thread
              (lambda ()
                (declare (proper-tail-calls))
                (let ((period (/ 1. 30.)))
                  (let (loop)
                    (render-scene self)
                    (sleep period)
                    (loop))))
              'render)))
      (set! render-thread thread)
      (thread-start! thread)))
  
  
  (method (stop-render self)
    ;; quicky
    (when render-thread
      (thread-terminate! render-thread)
      (set! render-thread #f)))
  
  
  ;;;
  ;;;; Programs
  ;;;
  
  
  (method (create-programs self)
    (set! color-program (new Color-Program))
    (set! texture-program (new Texture-Program))
    (set! interface-program (new Interface-Program)))
  
  
  (method (release-programs self)
    (glDeleteProgram (get-program Color-Program))
    (glDeleteProgram (get-program Texture-Program))
    (glDeleteProgram (get-program Interface-Program))
    (set! color-program #f)
    (set! texture-program #f)
    (set! interface-program #f))
  
  
  ;;;
  ;;;; Arrays
  ;;;
  
  
  (method (initialize-arrays self)
    (set! red-array (create-red self))
    (set! blue-array (create-blue self))
    (set! texture-array (create-texture self))
    (set! interface-array (create-interface self)))
  
  
  (method (create-red self)
    (let ((vertices (if (not toggle-color?)
                        #f32( 1.0 0.0 -5.0 0. 0. 1.
                              3.0 0.0 -5.0 0. 0. 1.
                              2.0 2.0 -5.0 0. 0. 1.)
                        #f32( 1.0 0.0 -5.0 0. 0. 1.
                              3.0 0.0 -5.0 0. 0. 1.
                              2.0 2.0 -5.0 0. 0. 1.)))
          (colors (if (not toggle-color?)
                      #f32( 1.0 0.0 0.0
                            1.0 0.0 0.0
                            1.0 0.0 0.0)
                      #f32( 0.0 1.0 0.0
                            0.0 1.0 0.0
                            0.0 1.0 0.0))))
      (new Color-Array color-program vertices colors)))
  
  
  (method (create-blue self)
    (let ((vertices #f32( -3.0 0.0 -5.0 0. 0. 1.
                          -1.0 0.0 -5.0 0. 0. 1.
                          -2.0 2.0 -5.0 0. 0. 1.))
          (colors #f32( 0.0 0.0 1.0
                        0.0 0.0 1.0
                        0.0 0.0 1.0)))
      (new Color-Array color-program vertices colors)))
  
  
  (method (create-texture self)
    (let ((vertices #f32( -1.0 2.0 -5.0 0.0 0.0 0.0
                           1.0 2.0 -5.0 1.0 0.0 0.0
                           0.0 4.0 -5.0 0.5 1.0 0.0)))
      (new Texture-Array texture-program vertices)))
  
  
  (method (create-interface self)
    (let ((vertices #f32(  0.0 10.0 0.0 0.0 0.0 0.0
                          10.0 10.0 0.0 1.0 0.0 0.0
                           0.0  0.0 0.0 0.0 1.0 0.0
                          10.0  0.0 0.0 1.0 1.0 0.0
                           0.0  0.0 0.0 0.0 1.0 0.0
                          10.0 10.0 0.0 1.0 0.0 0.0)))
      (new Interface-Array interface-program vertices)))
  
  
  (method (delete-arrays self)
    )
  
  
  ;;;
  ;;;; Resize
  ;;;
  
  
  (method override (resize-scene self width <fl> height <fl>)
    ;; Viewport
    (let ((scale-factor (main-screen-scale-factor)))
      (glViewport 0 0 (* scale-factor (fxround width)) (* scale-factor (fxround height))))
    
    ;; Projection
    (let ((ratio (/ width height)))
      (make-perspective-matrix! projection-matrix 53.13 ratio 1.0 30.0))
    
    ;; Orthographic
    (make-orthographic-matrix! orthographic-matrix 0.0 10.0 0.0 10.0 0.0 10.0)
    
    ;; View
    (make-view-matrix! view-matrix (vertex 7. 2. 6.) (lookat (vertex -.513 -.110 -.852) (vertex -.056 .994 -.094) (vertex .857 -4.195e-8 -.516)))
    
    ;; Textures
    (set! texture (make-cairo-texture 100 100))
    (set! interface (make-cairo-texture (fxround width) (fxround height) retina?: #t)))
  
  
  ;;;
  ;;;; Keyboard
  ;;;
  
  
  (method override (key-press self c)
    (case c
      ((#\r) (reload-buffers self))))
  
  
  (method (reload-buffers self)
    (delete-arrays self)
    (set! toggle-color? (not toggle-color?))
    (initialize-arrays self))
  
  
  ;;;
  ;;;; Draw
  ;;;
  
  
  (method override (draw-scene self)
    ;; Background
    (glClearColor 0.0 0.0 0.0 0.0)
    (glClear (bitwise-ior GL_COLOR_BUFFER_BIT GL_DEPTH_BUFFER_BIT))
    
    ;; Color
    (use color-program)
    (bind-uniforms color-program projection-matrix view-matrix)
    (bind-transform-feedback blue-array)
    (glBindVertexArray (get-array blue-array))
    (glBeginTransformFeedback GL_TRIANGLES)
    (glDrawArrays GL_TRIANGLES 0 3)
    (glEndTransformFeedback)
    (bind-transform-feedback red-array)
    (glBindVertexArray (get-array red-array))
    (glBeginTransformFeedback GL_TRIANGLES)
    (glDrawArrays GL_TRIANGLES 0 3)
    (glEndTransformFeedback)
    ;; feedback
    (when (and feedback? first-time?)
      (glFlush)
      (let ((data (make-f32vector (* 3 4 3))))
        (define (feedback array)
          (bind-transform-feedback array)
          (glGetTransformFeedbackFloat* 0 (* 3 4 3) data)
          (loop (for n from 0 below 3)
                (let ((offset (* n 4 3)))
                  (let ((vx (f32vector-ref data (+ offset 0)))
                        (vy (f32vector-ref data (+ offset 1)))
                        (vz (f32vector-ref data (+ offset 2)))
                        (px (f32vector-ref data (+ offset 4)))
                        (py (f32vector-ref data (+ offset 5)))
                        (pz (f32vector-ref data (+ offset 6)))
                        (pw (f32vector-ref data (+ offset 7)))
                        (r  (f32vector-ref data (+ offset 8)))
                        (g  (f32vector-ref data (+ offset 9)))
                        (b  (f32vector-ref data (+ offset 10))))
                    (format :terminal "vertex: {r precision: 3 width: 6} {r precision: 3 width: 6} {r precision: 3 width: 6}, position: {r precision: 3 width: 6} {r precision: 3 width: 6} {r precision: 3 width: 6} {r precision: 3 width: 6}, color: {r precision: 3 width: 6} {r precision: 3 width: 6} {r precision: 3 width: 6}{%}"
                      vx vy vz
                      px py pz pw
                      r g b)))))
        
        (feedback blue-array)
        (feedback red-array))
      (set! first-time? #f))
    (unbind-uniforms color-program)
    (unuse color-program)
    
    ;; Texture
    (let ((surface (get-surface texture))
          (color1 (if texture-toggle? {Color Yellow} {Color Green}))
          (color2 (if texture-toggle? {Color Green} {Color Yellow})))
      (set! texture-toggle? (not texture-toggle?))
      (fill-rect surface {Rect 0 0 100 100} color1)
      (fill-rect surface {Rect 50 0 100 50} color2)
      (fill-rect surface {Rect 0 50 50 100} color2)
      (flush surface)
      (map-texture texture))
    (use texture-program)
    (bind-uniforms texture-program projection-matrix view-matrix (get-id texture))
    (glBindVertexArray (get-array texture-array))
    (glDrawArrays GL_TRIANGLES 0 3)
    (glBindVertexArray 0)
    (unbind-uniforms texture-program)
    (unuse texture-program)
    
    ;; Interface
    (let ((surface (get-surface interface)))
      (set-operator surface CAIRO_OPERATOR_CLEAR)
      (paint surface)
      (set-operator surface CAIRO_OPERATOR_OVER)
      (let ((size (get-size self)))
        (let ((width (get-width size))
              (height (get-height size)))
          (let ((w/2 (quotient width 2))
                (h/2 (quotient height 2)))
            (fill-rect surface (new Rect 0 0 w/2 h/2) {Color Orange alpha: .5})
            (fill-rect surface (new Rect w/2 h/2 width height) {Color Orange alpha: .5})
            (fill-rect surface (new Rect w/2 0 width h/2) {Color Purple alpha: .5})
            (fill-rect surface (new Rect 0 h/2 w/2 height) {Color Purple alpha: .5})
            (set-font surface {Font Label point-size: 16})
            (draw-text surface 10 10 "OpenGL sample" {Color White}))))
      (flush surface)
      (map-texture interface))
    (glEnable GL_BLEND)
    (glBlendFunc GL_SRC_ALPHA GL_ONE_MINUS_SRC_ALPHA)
    (glDisable GL_DEPTH_TEST)
    (use interface-program)
    (bind-uniforms interface-program orthographic-matrix (get-id interface))
    (glBindVertexArray (get-array interface-array))
    (glDrawArrays GL_TRIANGLES 0 6)
    (glBindVertexArray 0)
    (unbind-uniforms interface-program)
    (unuse interface-program)
    (glEnable GL_DEPTH_TEST)
    (glDisable GL_BLEND))))
