;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; GLEW Foreign
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.opengl.glew.foreign jazz


(export (jazz.opengl.glew.header))
(import (jazz.opengl.glew.header)
        (jazz.opengl.syntax (phase syntax))
        (jazz.opengl.trace)
        (jazz.foreign)
        (jazz.platform)
        (jazz.platform.types))


(c-include "<stdlib.h>")
(c-include "<GL/glew.h>")


(c-enumerant GL_MAJOR_VERSION)
(c-enumerant GL_MINOR_VERSION)


(c-external (glGetInteger GLenum) GLint
  #/C/
    GLint value;
    glGetIntegerv(___arg1, &value);
    ___return(value);
//#)


(c-definition package (debug-callback source type id severity length message userParam) (unsigned-int unsigned-int unsigned-int unsigned-int int char-string void*) void "call_debug_callback" "static"
  (error "OpenGL error: {a}" message))


(c-external (setup-debug-callback) void
  #/C/
    glDebugMessageCallbackARB((GLDEBUGPROCARB) &call_debug_callback, NULL);
    glEnable(GL_DEBUG_OUTPUT_SYNCHRONOUS_ARB);
//#)


;; to debug memory leaks
(c-declare jazz.opengl.glew.foreign #/C/
    static int textureCount = 0;
    static int arrayCount = 0;
    static int bufferCount = 0;
//#)


(opengl-external (gl-generate-texture) GLuint
  #/C/
    GLuint texture;
    glGenTextures(1, &texture);
    textureCount++;
    ___return(texture);
//#)


(opengl-external (gl-delete-texture GLuint) void
  #/C/
    glDeleteTextures(1, &___arg1);
    textureCount--;
//#)


(opengl-external (gl-texture-count) int
  #/C/
    ___return(textureCount);
//#)

                                                                
(opengl-external (glGenVertexArrays*) GLuint
  #/C/
    GLuint handle;
    glGenVertexArrays(1, &handle);
    arrayCount++;
    ___return(handle);
//#)


(opengl-external (glDeleteVertexArrays* GLuint) void
  #/C/
    glDeleteVertexArrays(1, &___arg1);
    arrayCount--;
//#)


(opengl-external (glVertexArrayCount) int
  #/C/
    ___return(arrayCount);
//#)


(opengl-external (glGenBuffers*) GLuint
  #/C/
    GLuint buffer;
    glGenBuffers(1, &buffer);
    bufferCount++;
    ___return(buffer);
//#)


(opengl-external (glDeleteBuffers* GLuint) void
  #/C/
    glDeleteBuffers(1, &___arg1);
    bufferCount--;
//#)


(opengl-external (glBufferCount) int
  #/C/
    ___return(bufferCount);
//#)


@too-big (opengl-external (gl-light-model GLenum GLfloat GLfloat GLfloat GLfloat) void
  #/C/
    GLfloat param[] = {___arg2, ___arg3, ___arg4, ___arg5};
    glLightModelfv(___arg1, param);
//#)


@too-big (opengl-external (gl-light GLenum GLenum GLfloat GLfloat GLfloat GLfloat) void
  #/C/
    GLfloat param[] = {___arg3, ___arg4, ___arg5, ___arg6};
    glLightfv(___arg1, ___arg2, param);
//#)


@too-big (opengl-external (gl-material-specular GLenum GLfloat GLfloat GLfloat GLfloat) void
  #/C/
    GLfloat param[] = {___arg2, ___arg3, ___arg4, ___arg5};
    glMaterialfv(___arg1, GL_SPECULAR, param);
//#)


@too-big (opengl-external (gl-material-shininess GLenum GLfloat) void
  #/C/
    GLfloat param[] = {___arg2};
    glMaterialfv(___arg1, GL_SHININESS, param);
//#)


@too-big (opengl-external (glFog4f GLenum GLfloat GLfloat GLfloat GLfloat) void
  #/C/
    GLfloat param[] = {___arg2, ___arg3, ___arg4, ___arg5};
    glFogfv(___arg1, param);
//#)


@too-big (opengl-external (glMultMatrixv GLfloat GLfloat GLfloat GLfloat GLfloat GLfloat GLfloat GLfloat GLfloat GLfloat GLfloat GLfloat GLfloat GLfloat GLfloat GLfloat) void
  #/C/
    GLfloat m[16];
    m[0] = ___arg1;
    m[1] = ___arg5;
    m[2] = ___arg9;
    m[3] = ___arg13;
    m[4] = ___arg2;
    m[5] = ___arg6;
    m[6] = ___arg10;
    m[7] = ___arg14;
    m[8] = ___arg3;
    m[9] = ___arg7;
    m[10] = ___arg11;
    m[11] = ___arg15;
    m[12] = ___arg4;
    m[13] = ___arg8;
    m[14] = ___arg12;
    m[15] = ___arg16;
    glMultMatrixf(m);
//#)


(c-external (glGetBoolean* GLenum) GLboolean
  #/C/
    GLboolean ptr[1];
    glGetBooleanv(___arg1, ptr);
    ___return(ptr[0]);
//#)


(c-external (glGetInteger* GLenum) GLint
  #/C/
    GLint ptr[1];
    glGetIntegerv(___arg1, ptr);
    ___return(ptr[0]);
//#)


(c-external (glGetFloat* GLenum int) scheme-object
  #/C/
    ___SCMOBJ r = ___EXT(___alloc_scmobj) (___ps, ___sF32VECTOR, ___arg2*sizeof(___F32));
    float *ptr = ___CAST(float*,___BODY(r));
    
    glGetFloatv(___arg1, ptr);
    ___EXT(___release_scmobj)(r);
    ___return(r);
//#)


(opengl-external (glUniform3fv* GLint GLsizei scheme-object) void
  #/C/
    glUniform3fv(___arg1, ___arg2, ___CAST(float*,___BODY(___arg3)));
//#)


(opengl-external (glUniform4fv* GLint GLsizei scheme-object) void
  #/C/
    glUniform4fv(___arg1, ___arg2, ___CAST(float*,___BODY(___arg3)));
//#)


(opengl-external (glUniform3d* GLint scheme-object) void
  #/C/
    double *src = ___CAST(double*,___BODY(___arg2));
    glUniform3f(___arg1, src[0], src[1], src[2]);
//#)


(opengl-external (glUniform4d* GLint scheme-object) void
  #/C/
    double *src = ___CAST(double*,___BODY(___arg2));
    glUniform4f(___arg1, src[0], src[1], src[2], src[3]);
//#)


(opengl-external (glUniformMatrix4fv* GLint GLsizei GLboolean scheme-object) void
  #/C/
    glUniformMatrix4fv(___arg1, ___arg2, ___arg3, ___CAST(float*,___BODY(___arg4)));
//#)


(opengl-external (glUniformMatrix4dv* GLint GLsizei GLboolean scheme-object) void
  #/C/
    double *src = ___CAST(double*,___BODY(___arg4));
    GLfloat m[16];
    m[0] = src[0];
    m[1] = src[1];
    m[2] = src[2];
    m[3] = src[3];
    m[4] = src[4];
    m[5] = src[5];
    m[6] = src[6];
    m[7] = src[7];
    m[8] = src[8];
    m[9] = src[9];
    m[10] = src[10];
    m[11] = src[11];
    m[12] = src[12];
    m[13] = src[13];
    m[14] = src[14];
    m[15] = src[15];
    glUniformMatrix4fv(___arg1, ___arg2, ___arg3, m);
//#)


(opengl-external (glGetUniformLocation* GLint char-string) GLint "glGetUniformLocation")
(opengl-external (glGetAttribLocation* GLuint char-string) GLint "glGetAttribLocation")


;(opengl-external (glGenVertexArrays GLsizei GLuint*) void)
(opengl-external (glBindVertexArray GLuint) void)


(opengl-external (glBindFragDataLocation GLuint GLuint char-string) void)


(opengl-external (glGetShaderiv* GLuint GLenum) GLint
  #/C/
    GLint result;
    glGetShaderiv(___arg1, ___arg2, &result);
    ___return(result);
//#)


(opengl-external (glGetProgramiv* GLuint GLenum) GLint
  #/C/
    GLint result;
    glGetProgramiv(___arg1, ___arg2, &result);
    ___return(result);
//#)


(opengl-external (glGetShaderInfoLog* GLuint GLsizei) char-string
  #/C/
    GLchar* log = (GLchar*)malloc(___arg2);
    GLsizei slen = 0;
    glGetShaderInfoLog(___arg1, ___arg2, &slen, log);
    ___return(log);
//#)


(opengl-external (glGetProgramInfoLog* GLuint GLsizei) char-string
  #/C/
    GLchar* log = (GLchar*)malloc(___arg2);
    GLsizei slen = 0;
    glGetProgramInfoLog(___arg1, ___arg2, &slen, log);
    ___return(log);
//#)
                  
                                                                
(opengl-external (glVertexAttribPointer* GLuint GLint GLenum GLboolean GLsizei int) void
  #/C/
    #pragma GCC diagnostic push
    #pragma GCC diagnostic ignored "-Wint-to-pointer-cast"
    glVertexAttribPointer(___arg1, ___arg2, ___arg3, ___arg4, ___arg5, ___CAST(void*, ___arg6));
    #pragma GCC diagnostic pop
//#)


(opengl-external (glBufferDataFloat* GLenum GLsizeiptr scheme-object GLenum) void
  #/C/
    glBufferData(___arg1, ___arg2 * sizeof(float), ___CAST(float*,___BODY(___arg3)), ___arg4);
//#)


(opengl-external (glBufferSubDataFloat* GLenum GLintptr GLsizeiptr scheme-object) void
  #/C/
    glBufferSubData(___arg1, ___arg2, ___arg3 * sizeof(float), ___CAST(float*,___BODY(___arg4)));
//#)


(opengl-external (glGetTransformFeedbackFloat* GLintptr GLsizeiptr scheme-object) void
  #/C/
    glGetBufferSubData(GL_TRANSFORM_FEEDBACK_BUFFER, ___arg1, ___arg2 * sizeof(float), ___CAST(float*,___BODY(___arg3)));
  //#)


(opengl-external (glTransformFeedbackVaryings GLuint) void
  #/C/
    // quick hack hardcode names
    const GLchar* feedbackVaryings[] = { "out1", "out2", "out3", "out4" };
    glTransformFeedbackVaryings(___arg1, 4, feedbackVaryings, GL_INTERLEAVED_ATTRIBS);
//#)


(c-external (still-u8vector-body scheme-object) void*
  #/C/
    ___U8 *ptr = ___CAST(___U8*,___BODY(___arg1));
    ___return(ptr);
//#)
)
