;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; X11 GLEW
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.opengl.glew.x11 jazz


(import (jazz.foreign)
        (jazz.opengl)
        (jazz.opengl.glew.header)
        (jazz.opengl.syntax (phase syntax))
        (jazz.opengl.trace)
        (jazz.platform)
        (jazz.platform.types)
        (jazz.platform.x11.x11-types))


(c-include "<GL/glew.h>")
(c-include "<GL/glx.h>")
(c-include "<stdio.h>")
(c-include "<string.h>")


(c-type GLXDrawable XID)
(c-type GLXContext  (native "GLXContext"))


(opengl-external (glXSwapBuffers Display* GLXDrawable) void)
(opengl-external (glXDestroyContext Display* GLXContext) void)


;; TODO: use extension *EXT, or fallback to *MESA or *SGI
;(opengl-external (glXSwapIntervalEXT Display* GLXDrawable int) void)
(opengl-external (glx-swap-interval int) void
  #/C/
    PFNGLXSWAPINTERVALEXTPROC glXSwapIntervalEXT;
    PFNGLXSWAPINTERVALMESAPROC glXSwapIntervalMESA;
    PFNGLXSWAPINTERVALSGIPROC glXSwapIntervalSGI;

    // TODO: add EXT check and use it with display and drawable

    glXSwapIntervalMESA = (PFNGLXSWAPINTERVALMESAPROC)glXGetProcAddress("glXSwapIntervalMESA");
    if (glXSwapIntervalMESA)
        glXSwapIntervalMESA(___arg1);
    else
    {
        glXSwapIntervalSGI = (PFNGLXSWAPINTERVALSGIPROC)glXGetProcAddress("glXSwapIntervalSGI");
        if (glXSwapIntervalSGI)
            glXSwapIntervalSGI(___arg1);
    }
//#)


(c-declare glew
  #/C/
typedef GLXContext (*glXCreateContextAttribsARBProc)(Display*, GLXFBConfig, GLXContext, Bool, const int*);

static int isExtensionSupported(const char *extList, const char *extension) {
	return strstr(extList, extension) != 0;
}
//#)


(opengl-external (glXSetupCurrentContext Display* Window) int
  #/C/
    Display* display;
	Window window;
	Screen* screen;
	int screenId;

	display = ___arg1;
	window = ___arg2;
	screen = DefaultScreenOfDisplay(display);
	screenId = DefaultScreen(display);
	
	// Check GLX version
	GLint majorGLX, minorGLX = 0;
	glXQueryVersion(display, &majorGLX, &minorGLX);
	if (majorGLX <= 1 && minorGLX < 3)
		___return(1);

	GLint glxAttribs[] = {
		GLX_X_RENDERABLE    , True,
		GLX_DRAWABLE_TYPE   , GLX_WINDOW_BIT,
		GLX_RENDER_TYPE     , GLX_RGBA_BIT,
		GLX_X_VISUAL_TYPE   , GLX_TRUE_COLOR,
		GLX_RED_SIZE        , 8,
		GLX_GREEN_SIZE      , 8,
		GLX_BLUE_SIZE       , 8,
		GLX_ALPHA_SIZE      , 8,
		GLX_DEPTH_SIZE      , 24,
		GLX_STENCIL_SIZE    , 8,
		GLX_DOUBLEBUFFER    , True,
		None
	};
	
	int fbcount;
	GLXFBConfig* fbc = glXChooseFBConfig(display, screenId, glxAttribs, &fbcount);
	if (fbc == 0)
		___return(2);

	// Pick the FB config/visual with the most samples per pixel
	int best_fbc = -1, worst_fbc = -1, best_num_samp = -1, worst_num_samp = 999;
	for (int i = 0; i < fbcount; ++i) {
		XVisualInfo *vi = glXGetVisualFromFBConfig(display, fbc[i]);
		if ( vi != 0) {
			int samp_buf, samples;
			glXGetFBConfigAttrib(display, fbc[i], GLX_SAMPLE_BUFFERS, &samp_buf);

			if ( best_fbc < 0 || (samp_buf && samples > best_num_samp) ) {
				best_fbc = i;
				best_num_samp = samples;
			}
			if ( worst_fbc < 0 || !samp_buf || samples < worst_num_samp )
				worst_fbc = i;
			worst_num_samp = samples;
		}
		XFree(vi);
	}
	GLXFBConfig bestFbc = fbc[ best_fbc ];
	XFree(fbc);
	
	XVisualInfo* visual = glXGetVisualFromFBConfig(display, bestFbc);
	if (visual == 0)
		___return(3);
	
	if (screenId != visual->screen)
		___return(4);

	// Open the window
	// XSetWindowAttributes windowAttribs;
	// windowAttribs.border_pixel = BlackPixel(display, screenId);
	// windowAttribs.background_pixel = WhitePixel(display, screenId);
	// windowAttribs.override_redirect = True;
	// windowAttribs.colormap = XCreateColormap(display, RootWindow(display, screenId), visual->visual, AllocNone);
	// windowAttribs.event_mask = ExposureMask;
	// window = XCreateWindow(display, RootWindow(display, screenId), 0, 0, 640, 480, 0, visual->depth, InputOutput, visual->visual, CWBackPixel | CWColormap | CWBorderPixel | CWEventMask, &windowAttribs);

	// Create GLX OpenGL context
	glXCreateContextAttribsARBProc glXCreateContextAttribsARB = 0;
	glXCreateContextAttribsARB = (glXCreateContextAttribsARBProc) glXGetProcAddressARB((const GLubyte *) "glXCreateContextAttribsARB");
	
	int context_attribs[] = {
		GLX_CONTEXT_MAJOR_VERSION_ARB, 3,
		GLX_CONTEXT_MINOR_VERSION_ARB, 2,
		GLX_CONTEXT_FLAGS_ARB, GLX_CONTEXT_FORWARD_COMPATIBLE_BIT_ARB,
		None
	};

	GLXContext context = 0;
	const char *glxExts = glXQueryExtensionsString(display,  screenId);
	if (!isExtensionSupported(glxExts, "GLX_ARB_create_context")) {
		context = glXCreateNewContext(display, bestFbc, GLX_RGBA_TYPE, 0, True);
	}
	else {
		context = glXCreateContextAttribsARB(display, bestFbc, 0, True, context_attribs);
	}
	XSync(display, False);

	// Display if context is a direct context or not
	// if (!glXIsDirect (display, context)) {
	// 	printf("Indirect GLX rendering context obtained\n");
	// }
	// else {
	// 	printf("Direct GLX rendering context obtained\n");
	// }
	
	glXMakeCurrent(display, window, context);
	
	___return(0);
//#))
