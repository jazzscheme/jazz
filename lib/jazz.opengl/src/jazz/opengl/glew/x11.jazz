;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; X11 GLEW
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.opengl.glew.x11 jazz


(import (jazz.foreign)
        (jazz.opengl)
        (jazz.opengl.glew.header)
        (jazz.platform)
        (jazz.platform.types)
        (jazz.platform.x11.x11-types))


(c-include "<GL/glew.h>")
(c-include "<GL/glx.h>")
(c-include "<stdio.h>")


(c-type GLXDrawable XID)
(c-type GLXContext  (native "GLXContext"))


(c-external (glXSwapBuffers Display* GLXDrawable) void)
(c-external (glXDestroyContext Display* GLXContext) void)


;; TODO: use extension *EXT, or fallback to *MESA or *SGI
;(c-external (glXSwapIntervalEXT Display* GLXDrawable int) void)
(c-external (glx-swap-interval int) void
  #/C/
    PFNGLXSWAPINTERVALEXTPROC glXSwapIntervalEXT;
    PFNGLXSWAPINTERVALMESAPROC glXSwapIntervalMESA;
    PFNGLXSWAPINTERVALSGIPROC glXSwapIntervalSGI;

    // TODO: add EXT check and use it with display and drawable

    glXSwapIntervalMESA = (PFNGLXSWAPINTERVALMESAPROC)glXGetProcAddress("glXSwapIntervalMESA");
    if (glXSwapIntervalMESA)
        glXSwapIntervalMESA(___arg1);
    else
    {
        glXSwapIntervalSGI = (PFNGLXSWAPINTERVALSGIPROC)glXGetProcAddress("glXSwapIntervalSGI");
        if (glXSwapIntervalSGI)
            glXSwapIntervalSGI(___arg1);
    }
//#)


;; TODO: last arg should be GLXContext, but it's not working... fix this
(c-external (glXMakeCurrent Display* GLXDrawable void*) bool)


(c-external (glXCreateContext Display* void* int) GLXContext
  #/C/
    int nbConfigs = 0;
    GLXFBConfig* configs = glXChooseFBConfig(___arg1, ___arg3, NULL, &nbConfigs);
    // TODO: check that we have at least 1 config available

    XVisualInfo *viUsed = (XVisualInfo*)___arg2;
    GLXFBConfig* config = configs;
    int i;
    for (i=0; i<nbConfigs; i++)
    {
        XVisualInfo *vi = glXGetVisualFromFBConfig(___arg1, configs[i]);
        if (vi)
        {
            if (vi->visualid == viUsed->visualid)
            {
                config = &configs[i];
                XFree(vi);
                break;
            }
            XFree(vi);
        }
    }

    // TODO: use ARB if available
    GLXContext ctx;
    ctx = glXCreateNewContext(___arg1, *config, GLX_RGBA_TYPE, 0, 1);

    XFree(configs);
    ___return(ctx);
//#))
