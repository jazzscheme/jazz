;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; OpenGL Toplevel
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module jazz.opengl.toplevel jazz


(import (jazz.cairo)
        (jazz.geometry)
        (jazz.graphic)
        (jazz.opengl)
        (jazz.opengl.glew)
        (jazz.opengl.sample)
        (jazz.opengl.sample.syntax (phase syntax))
        (jazz.opengl.sample.texture)
        (jazz.platform)
        (jazz.screen)
        (jazz.settings)
        (jazz.view)
        (jazz.window))


;;;
;;;; Shader
;;;


(definition glsl-version
  (cond-expand
    (mac
     #/C/
#version 140

//#)
    (else
     #/C/
#version 130

//#)))


(class Shader extends Object
  
  
  (slot type     <int>               accessors generate)
  (slot code           initialize #f accessors generate)
  (slot shaderid       initialize #f accessors generate)
  
  
  (method override (initialize self type)
    (set! self.type type))
  
  
  (method public (create-shader self)
    (set! shaderid (glCreateShader type))
    (glShaderSource shaderid 1 (list code) #f))
  
  
  (method public (compile-shader self)
    (glCompileShader shaderid)
    (when (/= (glGetShaderiv* shaderid GL_COMPILE_STATUS) GL_TRUE)
      (let ((loglength (glGetShaderiv* shaderid GL_INFO_LOG_LENGTH)))
        (when (> loglength 0)
          (error "{a}" (glGetShaderInfoLog* shaderid loglength)))))))


;;;
;;;; Program
;;;


(class Shader-Program extends Object
  
  
  (slot name            <object> getter generate)
  (slot vertex-shader   <object> accessors generate)
  (slot fragment-shader <object> accessors generate)
  (slot program         <object> accessors generate)
  (slot attributes      <object> getter generate)
  (slot uniforms        <object> getter generate)
  
  
  (method override (initialize self (name: name #f))
    (nextmethod self)
    (set! self.name name)
    (set! vertex-shader (new Shader GL_VERTEX_SHADER))
    (set! fragment-shader (new Shader GL_FRAGMENT_SHADER))
    (set! program (glCreateProgram))
    (set! attributes (make-table test: equal?))
    (set! uniforms (make-table test: equal?))
    (prepare self)
    (gl-check-error))
  
  
  (method package virtual (prepare self)
    )
  
  
  (method protected virtual (default-vertex-shader self)
    )
  
  (method protected virtual (default-fragment-shader self)
    )
  
  
  (method public (set-fs self code)
    (set-code fragment-shader code))
  
  (method public (set-vs self code)
    (set-code vertex-shader code))
  
  
  (method protected virtual (setup-transform-feedback self)
    )
  
  
  (method public (link self)
    (create-shaders self)
    (attach-shaders self))
  
  
  (method public (relink self)
    (detach-shaders self)
    (set-vs self (default-vertex-shader self))
    (set-fs self (default-fragment-shader self))
    (prepare self))
  
  
  (method public (create-shaders self)
    (create-shader vertex-shader)
    (create-shader fragment-shader)
    (compile-shader vertex-shader)
    (compile-shader fragment-shader))
  
  
  (method public (attach-shaders self)
    (when (and (get-shaderid vertex-shader)
               (get-shaderid fragment-shader))
      (glAttachShader program (get-shaderid vertex-shader))
      (glAttachShader program (get-shaderid fragment-shader))
      (setup-transform-feedback self)
      (glLinkProgram program)
      (when (/= (glGetProgramiv* program GL_LINK_STATUS) GL_TRUE)
        (let ((loglength (glGetProgramiv* program GL_INFO_LOG_LENGTH)))
          (when (> loglength 0)
            (error "{a}" (glGetProgramInfoLog* program loglength)))))))
  
  
  (method public (detach-shaders self)
    (when (and (get-shaderid vertex-shader)
               (get-shaderid fragment-shader))
      (glDetachShader program (get-shaderid vertex-shader))
      (glDetachShader program (get-shaderid fragment-shader))
      (set-shaderid vertex-shader #f)
      (set-shaderid fragment-shader #f)))
  
  
  (method public (use self)
    (glUseProgram program))
  
  
  (method public (unuse self)
    (glUseProgram 0))
  
  
  ;;;
  ;;;; Uniforms
  ;;;
  
  
  (method public (get-uniform self name)
    (table-ref uniforms name))
  
  
  (method public (add-uniform self name)
    (let ((location (glGetUniformLocation* program name)))
      (table-set! uniforms name location)
      location))
  
  
  ;;;
  ;;;; Attributes
  ;;;
  
  
  (method public (get-attribute self name)
    (table-ref attributes name))
  
  
  (method public (add-attribute self name)
    (let ((location (glGetAttribLocation* program name)))
      (table-set! attributes name location)
      location)))


;;;
;;;; Interface
;;;


(definition interface-vert
  (string-append glsl-version
    #/C/
uniform mat4 projMatrix;

in vec3 position;
in vec3 textureCoord;

out vec3 final_texture_coord;

void main()
{
    gl_Position = projMatrix * vec4(position, 1.0);
    final_texture_coord = textureCoord;
}
//#))


(definition interface-frag
  (string-append glsl-version
    #/C/
uniform sampler2D textureSampler;

in vec3 final_texture_coord;

out vec4 fragColor;

void main()
{
    fragColor = texture(textureSampler, vec2(final_texture_coord.x, final_texture_coord.y));
}
//#))


(class Interface-Program extends Shader-Program
  
  
  ;; Attribute Locations
  (slot vertex-attribute       initialize #f getter generate)
  (slot textureCoord-attribute initialize #f getter generate)
 
  ;; Uniform Locations
  (slot projMatrix-uniform     initialize #f getter generate)
  (slot textureSampler-uniform initialize #f getter generate)
  
  
  (method override (prepare self)
    (set-vs self (default-vertex-shader self))
    (set-fs self (default-fragment-shader self))
    (link self)
    (set! vertex-attribute (add-attribute self "position"))
    (set! textureCoord-attribute (add-attribute self "textureCoord"))
    (set! projMatrix-uniform (add-uniform self "projMatrix"))
    (set! textureSampler-uniform (add-uniform self "textureSampler")))
  
  
  (method override (default-vertex-shader self)
    interface-vert)
  
  (method override (default-fragment-shader self)
    interface-frag)
  
  
  (method package (create-vertex-buffer self vertices)
    (let ((vbo (glGenBuffers*)))
      (glBindBuffer GL_ARRAY_BUFFER vbo)
      (glBufferDataFloat* GL_ARRAY_BUFFER (f32vector-length vertices) vertices GL_STATIC_DRAW)
      (glEnableVertexAttribArray vertex-attribute)
      (glVertexAttribPointer* vertex-attribute 3 GL_FLOAT GL_FALSE (* 6 float-size) 0)
      (glEnableVertexAttribArray textureCoord-attribute)
      (glVertexAttribPointer* textureCoord-attribute 3 GL_FLOAT GL_FALSE (* 6 float-size) (* 3 float-size))
      (glBindBuffer GL_ARRAY_BUFFER 0)
      vbo))
  
  
  (method package (bind-uniforms self projection-matrix texture-id)
    (glUniformMatrix4dv* projMatrix-uniform 1 #f projection-matrix)
    (glActiveTexture GL_TEXTURE0)
    (glBindTexture GL_TEXTURE_2D texture-id)
    (glUniform1i textureSampler-uniform 0))
  
  
  (method package (unbind-uniforms self)
    (glActiveTexture GL_TEXTURE0)
    (glBindTexture GL_TEXTURE_2D 0)))


;;;
;;;; Array
;;;


(class Array extends Object
  
  
  (slot array getter generate))


(class Interface-Array extends Array
  
  
  (slot vertex-buffer)
  
  
  (method override (initialize self program vertices)
    (set! array (glGenVertexArrays*))
    (glBindVertexArray array)
    (set! vertex-buffer (create-vertex-buffer program vertices))
    (glBindVertexArray 0)))


;;;
;;;; Toplevel
;;;


(class OpenGL-Toplevel extends OpenGL-Window
  
  
  (slot interface-program   initialize #f getter generate)
  (slot interface-array     initialize #f getter generate)
  (slot interface-texture   initialize #f getter generate)
  (slot orthographic-matrix initialize (make-matrix) getter generate)
  
  
  (method override (setup-opengl self)
    (nextmethod self)
    (create-programs self)
    (initialize-arrays self)
    (setup-textures self))
  
  
  ;;;
  ;;;; Programs
  ;;;
  
  
  (method (create-programs self)
    (set! interface-program (new Interface-Program)))
  
  
  (method (release-programs self)
    (glDeleteProgram (get-program Interface-Program))
    (set! interface-program #f))
  
  
  ;;;
  ;;;; Arrays
  ;;;
  
  
  (method (initialize-arrays self)
    (set! interface-array (create-interface self)))
  
  
  (method (create-interface self)
    (let ((vertices #f32(  0.0 10.0 0.0 0.0 0.0 0.0
                          10.0 10.0 0.0 1.0 0.0 0.0
                           0.0  0.0 0.0 0.0 1.0 0.0
                          10.0  0.0 0.0 1.0 1.0 0.0
                           0.0  0.0 0.0 0.0 1.0 0.0
                          10.0 10.0 0.0 1.0 0.0 0.0)))
      (new Interface-Array interface-program vertices)))
  
  
  ;;;
  ;;;; Textures
  ;;;
  
  
  (method (setup-textures self)
    (set! interface-texture (make-cairo-texture (get-width self) (get-height self) retina?: #t)))
  
  
  ;;;
  ;;;; Resize
  ;;;
  
  
  (method override (resize-scene self width <fl> height <fl>)
    (nextmethod self width height)
    ;; Orthographic
    (make-orthographic-matrix! orthographic-matrix 0.0 10.0 0.0 10.0 0.0 10.0)
    
    ;; Textures
    (when interface-texture
      (close interface-texture)
      (setup-textures self)))
  
  
  ;;;
  ;;;; Interface
  ;;;
  
  
  (method (draw-interface self)
    (when (offscreen-region-invalid? handle)
      (let ((surface (get-surface interface-texture))
            (rect (get-box (get-offscreen-invalid-region handle))))
        (set-clipper surface rect)
        (clear surface)
        (paint-drawing root surface '())
        (flush surface)
        (map-subtexture interface-texture rect)
        (validate-offscreen handle))))
  
  
  (method public (render-interface self)
    (glEnable GL_BLEND)
    (glDisable GL_DEPTH_TEST)
    (use interface-program)
    (bind-uniforms interface-program orthographic-matrix (get-id interface-texture))
    (glBindVertexArray (get-array interface-array))
    (glDrawArrays GL_TRIANGLES 0 6)
    (glBindVertexArray 0)
    (unbind-uniforms interface-program)
    (unuse interface-program)
    (glEnable GL_DEPTH_TEST)
    (glDisable GL_BLEND))
  
  
  ;;;
  ;;;; Draw
  ;;;
  
  
  (method override (draw-scene self)
    ;; Interface
    (draw-interface self)
    (render-interface self))))
