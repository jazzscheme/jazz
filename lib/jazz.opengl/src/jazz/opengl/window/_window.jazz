;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; OpenGL Windows
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module jazz.opengl.window jazz


(export (jazz.opengl.window.cocoa   (cond cocoa))
        (jazz.opengl.window.windows (cond windows))
        (jazz.opengl.window.x11     (cond x11)))

(import (jazz.component)
        (jazz.math)
        (jazz.opengl.glew)
        (jazz.opengl.window.cocoa   (cond cocoa))
        (jazz.opengl.window.windows (cond windows))
        (jazz.opengl.window.x11     (cond x11))
        (jazz.platform)
        (jazz.screen)
        (jazz.version)
        (jazz.window))


(definition minimum-needed-version
  {Version 3 3})


(definition (prepare-opengl-window window (need-version: need-version #f))
  (let ((needed-version (or need-version minimum-needed-version)))
    (let ((needed-major (get-major needed-version))
          (needed-minor (get-minor needed-version)))
      (define (needs-adjust?)
        (cond-expand
          (windows #t)
          (else (let ((major (glGetInteger GL_MAJOR_VERSION))
                      (minor (glGetInteger GL_MINOR_VERSION)))
                  (or (< major needed-major)
                      (and (= major needed-major)
                           (< minor needed-minor)))))))
      
      (define (validate-version)
        (let ((major (glGetInteger GL_MAJOR_VERSION))
              (minor (glGetInteger GL_MINOR_VERSION)))
          (when (or (< major needed-major)
                    (and (= major needed-major)
                         (< minor needed-minor)))
            (system-message (format "OpenGL {a}.{a} doesn't meet the OpenGL {a}.{a} requirements"
                                    major
                                    minor
                                    needed-major
                                    needed-minor)
                            type: 'error)
            (quit))))

      (setup-opengl-window window)
      (initialize-glew)
      (when (needs-adjust?)
        (adjust-opengl-context window needed-major needed-minor)
        (validate-version))
      ;; at the moment vsync is a really bad thing as it blocks
      ;; the thread scheduler by having control remain in C...
      (disable-vsync window)
      (with-context-current window
        (lambda ()
          (setup-opengl window))))))


(cond-expand
  (windows
   (definition (init-glew)
     (glewInit)))
  (else
   (definition (init-glew)
     (glewExperimental)
     (prog1 (glewInit)
       ;; this is weird there is an error 1280 right after initing glew
       ;; as a quick hack call glGetError to flush error
       (glGetError)))))


(definition package initialize-glew
  (let ((initialized? #f))
    (lambda ()
      (unless initialized?
        (let ((success (init-glew)))
          (if (= success GLEW_OK)
              (set! initialized? #t)
            (error "Unable to initialize GLEW")))))))


;; needs more exploration but it seems that
;; vsync can have a huge performance impact
;; on windows but that on mac it is ok
(definition protected use-vsync?
  (cond-expand
    (mac #t)
    (else #f)))

(definition package (maybe-enable-vsync window)
  (when use-vsync?
    (enable-vsync window)))

(definition package (maybe-disable-vsync window)
  (when use-vsync?
    (disable-vsync window)))


(class OpenGL-Window extends Overlapped


  (slot device             initialize #f accessors generate)
  (slot context            initialize #f accessors generate)
  (slot context-mutex      initialize #f getter generate)
  (slot previous-placement initialize #f getter generate)
  (slot window-mode        initialize #f getter generate)


  (method override (opengl? self)
    #t)


  (method override (prepare self rest)
    (nextmethod self rest)
    (set! context-mutex (make-mutex 'context))
    (set! window-mode (if (request-fullscreen?) 'fullscreen 'windowed))
    (prepare-opengl-window self))
  
  
  (method public (with-context-current self thunk)
    (unwind-protect
        (begin
          (mutex-lock! context-mutex)
          (make-context-current self)
          (thunk)) 
      (mutex-unlock! context-mutex)))


  (method override (size-change self state size)
    (nextmethod self state size)
    (when (and (opened? self) (opengl-setup? self))
      (with-context-current self
        (lambda ()
          (let ((width (get-width size))
                (height (get-height size)))
            (resize-scene self (cast <fl> width) (cast <fl> height)))
          @interesting-but-can-get-called-too-early
          (render-scene)))))


  (method package virtual (resize-scene self width <fl> height <fl>)
    ;; quick try to solve wiggles on resizing window
    (cond-expand
      (windows
       (let ((device-size (platform-get-content-device-size handle)))
         (let ((device-width (get-width device-size))
               (device-height (get-height device-size))
               (surface-height (scale->device height (main-screen-scale-factor))))
           (let ((delta-heigth (- device-height surface-height)))
             (glViewport 0 delta-heigth device-width surface-height)))))
      (else
       (let ((device-size (get-device-size self)))
         (glViewport 0 0 (get-width device-size) (get-height device-size))))))


  (method package virtual (setup-opengl self)
    (glClearColor 0.0 0.0 0.0 1.0)
    (glClearDepth 1.0)
    (glEnable GL_LINE_SMOOTH)
    (glEnable GL_POLYGON_SMOOTH)
    (glEnable GL_DEPTH_TEST)
    (glDepthFunc GL_LEQUAL)
    (glPolygonMode GL_FRONT_AND_BACK GL_FILL))


  ;;;
  ;;;; Fullscreen
  ;;;


  ;; quicky
  (cond-expand
    (cocoa
     (method public (toggle-windowed-mode self)
       (platform-set-fullscreen-windowed-mode handle)
       ;; quicky
       (set! window-mode (if (eq? window-mode 'windowed)
                             'fullscreen
                           'windowed))))
    (else
     (method public (toggle-windowed-mode self)
       (case window-mode
         ((fullscreen)
          (restore-from-fullscreen self))
         ((windowed)
          (set-fullscreen-windowed-mode self))
         (else
          (restore-windowed-mode self))))))


  (method public (set-fullscreen-windowed-mode self)
    (set! previous-placement (get-placement self))
    (platform-set-fullscreen-windowed-mode handle)
    (set! window-mode 'fullscreen-windowed))


  (method public (restore-from-fullscreen self)
    (platform-restore-from-fullscreen handle)
    (set! window-mode 'windowed))


  (method public (restore-windowed-mode self)
    (when previous-placement
      (set-window-placement handle previous-placement))
    (platform-restore-windowed-mode handle)
    (set! window-mode 'windowed))


  (method public (set-fullscreen-mode self)
    (platform-set-fullscreen-mode handle))


  ;;;
  ;;;; Render
  ;;;


  (method override (paint self)
    (with-painting self
      (lambda ()
        (with-context-current self
          (lambda ()
            (render-scene self))))))


  (method protected virtual (render-ready? self)
    #t)


  (method package virtual (render-scene self)
    (when (render-ready? self)
      (draw-scene self)
      (render-sync self)))


  (method protected virtual (draw-scene self)
    (glClear (bitwise-ior GL_COLOR_BUFFER_BIT GL_DEPTH_BUFFER_BIT)))


  (method public (render-sync self)
    (swap-buffers handle device))


  (method override (scroll-window self delta rect clip-rect)
    (assert handle)
    (invalidate-rect self clip-rect))))
