;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Cocoa OpenGL
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.opengl.window.cocoa jazz


(import (jazz.event)
        (jazz.opengl)
        (jazz.opengl.glew)
        (jazz.platform)
        (jazz.window))


(definition package (create-opengl-window (class: class #f) (position: position #f) (size: size #f) (fullscreen?: fullscreen? #f))
  (let ((class (or class OpenGL-Window)))
    (let ((window (parameterize ((request-fullscreen? fullscreen?)) (new class fullscreen?: fullscreen? visible?: #f))))
      (let ((handle (get-handle window)))
        (platformMakeContextCurrent handle)
        (set-title window "Hello world from Jazz!")
        (when position
          (set-position window position))
        (when size
          (set-size window size))
        window))))


;;;
;;;; Context
;;;


(definition opengl-debug?
  #f)


(definition package (adjust-opengl-context window major minor)
  )


(definition package (enable-vsync window)
  (platformSwapInterval 1))


(definition package (disable-vsync window)
  (platformSwapInterval 0))


;;;
;;;; Fullscreen
;;;


(definition package (platform-set-fullscreen-windowed-mode handle)
  (platformEnterFullscreen handle))


(definition package (platform-restore-from-fullscreen handle)
  (platformExitFullscreen handle))


(definition package (platform-restore-windowed-mode handle)
  )


(definition package (platform-set-fullscreen-mode handle)
  )


;;;
;;;; Utility
;;;


(definition package (swap-buffers handle device)
  (platformSwapBuffers handle))


(definition package (swap-interval interval)
  (platformSwapInterval interval))


(definition package (make-context-current device context)
  )


(definition package (release-current-context)
  )


(definition package (delete-context context)
  ))
