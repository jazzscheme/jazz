;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Windows OpenGL
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.opengl.window.windows jazz


(import (jazz.geometry)
        (jazz.opengl)
        (jazz.opengl.glew)
        (jazz.platform)
        (jazz.settings)
        (jazz.window))


;;;
;;;; Class
;;;


(definition OPENGL_CLASS_ATOM
  #f)


(definition (register-window-class)
  (let ((instance (process-instance))
        (background (class-background))
        (wc (WNDCLASSEX-make)))
    (WNDCLASSEX-cbSize-set! wc         (WNDCLASSEX-sizeof))
    (WNDCLASSEX-style-set! wc          (bitwise-ior CS_HREDRAW CS_VREDRAW CS_DBLCLKS CS_OWNDC))
    (WNDCLASSEX-lpfnWndProc-set! wc    call-process-hwnd-message)
    (WNDCLASSEX-cbClsExtra-set! wc     0)
    (WNDCLASSEX-cbWndExtra-set! wc     0)
    (WNDCLASSEX-hInstance-set! wc      instance)
    (WNDCLASSEX-hIcon-set! wc          (load-product-icon 32 32))
    (WNDCLASSEX-hCursor-set! wc        NULL)
    (WNDCLASSEX-hbrBackground-set! wc  (GetStockObject BLACK_BRUSH))
    (WNDCLASSEX-lpszMenuName-set! wc   NULL)
    (WNDCLASSEX-lpszClassName-set! wc  "JOpenGLWindow")
    (WNDCLASSEX-hIconSm-set! wc        (load-product-icon 16 16))
    (set! OPENGL_CLASS_ATOM (RegisterClassEx wc))))


(register-window-class)


;;;
;;;; Window
;;;


(specific (window-class (<OpenGL-Window> window))
  OPENGL_CLASS_ATOM)


(specific (window-style (<OpenGL-Window> window) rest)
  (if (request-fullscreen?)
      WS_POPUP
    (bitwise-ior WS_CLIPSIBLINGS
                 WS_CLIPCHILDREN
                 WS_POPUP
                 WS_OVERLAPPEDWINDOW
                 WS_MINIMIZEBOX
                 WS_SYSMENU)))


(specific (window-ex-style (<OpenGL-Window> window) rest)
  WS_EX_APPWINDOW)


(specific (create-handle (<OpenGL-Window> window) rest)
  (CreateWindowEx
    (window-ex-style window rest)
    OPENGL_CLASS_ATOM
    NULL
    (window-style window rest)
    0 0 1280 1024
    (window-parent window)
    NULL
    (process-instance)
    NULL))


(definition package (create-opengl-window (class: class #f) (position: position #f) (size: size #f) (fullscreen?: fullscreen? #f))
  (let ((class (or class OpenGL-Window))
        (position (or position {Point 50 50}))
        (size (or size {Dimension 640 480})))
    (let ((window (parameterize ((request-fullscreen? fullscreen?)) (new class fullscreen?: fullscreen? visible?: #f)))
          (pfd (PIXELFORMATDESCRIPTOR-make)))
      (PIXELFORMATDESCRIPTOR-nSize-set! pfd (PIXELFORMATDESCRIPTOR-sizeof))
      (PIXELFORMATDESCRIPTOR-nVersion-set! pfd 1)
      (PIXELFORMATDESCRIPTOR-dwFlags-set! pfd (bitwise-ior PFD_DRAW_TO_WINDOW PFD_SUPPORT_OPENGL PFD_DOUBLEBUFFER))
      (PIXELFORMATDESCRIPTOR-iPixelType-set! pfd PFD_TYPE_RGBA)
      (PIXELFORMATDESCRIPTOR-cColorBits-set! pfd 32)
      (PIXELFORMATDESCRIPTOR-cDepthBits-set! pfd 24)
      (PIXELFORMATDESCRIPTOR-iLayerType-set! pfd PFD_MAIN_PLANE)
      (let ((hdc (GetDC (get-handle window))))
        (unless hdc
          (error "Could not create an OpenGL device context"))
        (let ((pixel-format (ChoosePixelFormat hdc pfd)))
          (unless pixel-format
            (error "Could not find a suitable pixelformat"))
          (unless (SetPixelFormat hdc pixel-format pfd)
            (error "Could not set the pixelformat"))
          (let ((hrc (wglCreateContext hdc)))
            (unless hrc
              (error "Could not create an OpenGL rendering context"))
            (make-context-current hdc hrc)
            (set-device window hdc)
            (set-context window hrc)
            (set-title window "OpenGL")
            (if fullscreen?
                (let ((area (get-display-area (primary-monitor))))
                  (let ((left (get-left area))
                        (top (get-top area))
                        (width (rect-width area))
                        (height (rect-height area)))
                    (set-position window (new Point left top))
                    (set-size window (new Dimension width height))))
              (set-position window position)
              (set-size window size))
            window))))))


;;;
;;;; Context
;;;


(definition package (adjust-opengl-context window major minor)
  (when (wglewIsSupported "WGL_ARB_create_context")
    (let ((debug-output? (and (find-setting 'jazz.opengl.debug-output? #f) (glewIsSupported "GL_ARB_debug_output")))
          (hdc (get-device window)))
      (let ((old-context (get-context window))
            (new-context (wglCreateContextAttribsARB* hdc NULL major minor (bitwise-ior (if debug-output? WGL_CONTEXT_DEBUG_BIT_ARB 0) WGL_CONTEXT_FORWARD_COMPATIBLE_BIT_ARB) WGL_CONTEXT_CORE_PROFILE_BIT_ARB)))
        (release-current-context)
        (delete-context old-context)
        (make-context-current hdc new-context)
        (set-context window new-context)
        (when debug-output?
          (setup-debug-callback))))))


(definition package (enable-vsync window)
  (when (wglewIsSupported "WGL_EXT_swap_control")
    (wglSwapIntervalEXT 1)))


(definition package (disable-vsync window)
  (when (wglewIsSupported "WGL_EXT_swap_control")
    (wglSwapIntervalEXT 0)))


;;;
;;;; Fullscreen
;;;


(definition package (platform-set-fullscreen-windowed-mode handle)
  (set-window-style handle (bitwise-ior WS_CLIPSIBLINGS
                                        WS_CLIPCHILDREN
                                        WS_POPUP))
  (let ((area (get-display-area (primary-monitor))))
    (let ((left (get-left area))
          (top (get-top area))
          (right (get-right area))
          (bottom (get-bottom area)))
      ;; the + 1 is a quick hack around what seems like parallels
      ;; interpreting in some weird way a window having screen size
      (SetWindowPos handle HWND_TOP
        left
        top
        (+ 1 (- right left))
        (+ 1 (- bottom top))
        (bitwise-ior SWP_NOOWNERZORDER SWP_FRAMECHANGED))))
  (show-window handle))


(definition package (platform-restore-from-fullscreen handle)
  (ChangeDisplaySettings NULL 0)
  (set-window-style handle
                    (bitwise-ior WS_CLIPSIBLINGS
                                 WS_CLIPCHILDREN
                                 WS_POPUP
                                 WS_OVERLAPPEDWINDOW
                                 WS_MINIMIZEBOX
                                 WS_SYSMENU))
  (SetWindowPos handle HWND_TOP
    50
    50
    1216
    838
    (bitwise-ior SWP_NOOWNERZORDER SWP_FRAMECHANGED))
  (show-window handle))


(definition package (platform-restore-windowed-mode handle)
  (set-window-style handle
                    (bitwise-ior WS_CLIPSIBLINGS
                                 WS_CLIPCHILDREN
                                 WS_POPUP
                                 WS_OVERLAPPEDWINDOW
                                 WS_MINIMIZEBOX
                                 WS_SYSMENU))
  (show-window handle))


(definition package (platform-set-fullscreen-mode handle)
  (let ((area (get-display-area (primary-monitor))))
    (let ((width (rect-width area))
          (height (rect-height area))
          (bits 32))
      (let ((devmode (DEVMODE-make)))
        (DEVMODE-dmSize-set! devmode (DEVMODE-sizeof))
        (DEVMODE-dmPelsWidth-set! devmode width)
        (DEVMODE-dmPelsHeight-set! devmode height)
        (DEVMODE-dmBitsPerPel-set! devmode bits)
        (DEVMODE-dmFields-set! devmode (bitwise-ior DM_BITSPERPEL DM_PELSWIDTH DM_PELSHEIGHT))
        (ChangeDisplaySettings devmode CDS_FULLSCREEN)))))


;;;
;;;; Utility
;;;


(definition package (swap-buffers handle device)
  (SwapBuffers device))


(definition package (swap-interval interval)
  )


(definition package (make-context-current device context)
  (unless (wglMakeCurrent device context)
    (error "Could not activate the OpenGL rendering context")))


(definition package (release-current-context)
  (unless (wglMakeCurrent NULL NULL)
    (error "Release of DC and RC failed")))


(definition package (delete-context context)
  (unless (wglDeleteContext context)
    (error "Release rendering context failed"))))
