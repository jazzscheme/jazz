;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; X11 OpenGL
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.opengl.window.x11 jazz


(import (jazz.event)
        (jazz.opengl)
        (jazz.opengl.glew)
        (jazz.opengl.glew.x11)
        (jazz.platform)
        (jazz.window))


(definition package (create-opengl-window (class: class #f) (position: position #f) (size: size #f) (fullscreen?: fullscreen? #f) (render?: render? #t))
  (let ((class (or class OpenGL-Window))
        (position (or position {Point 50 50}))
        (size (or size {Dimension 640 480})))
    (let ((window (parameterize ((request-fullscreen? fullscreen?)) (new class fullscreen?: fullscreen? visible?: #f))))
      (setup-current-context (get-handle window))
      (set-opengl-context? #t)
      (set-handle window (get-handle window))
      (set-title window "Hello world from Jazz!")
      (set-position window position)
      (set-size window size)
      window)))


;;;
;;;; Context
;;;


(definition package (enable-vsync window)
  (glx-swap-interval 1))

(definition package (disable-vsync window)
  (glx-swap-interval 0))


(definition package (setup-current-context handle)
  (let ((code (glXSetupCurrentContext x11-default-display handle)))
    (when (/= code 0)
      ;; 1 "GLX 1.2 or greater required"
      ;; 2 "Failed to retrieve framebuffer"
      ;; 3 "Could not create correct visual window"
      ;; 4 "Screen id does not match visual screen id"
      (error "Unable to create OpenGL context ({a})" code))))


(definition package (release-current-context)
  )


(definition package (delete-context context)
  (glXDestroyContext x11-default-display context))


(definition package (swap-buffers handle device)
  (glXSwapBuffers x11-default-display handle))


(definition package (adjust-opengl-context window major minor)
  )


;;;
;;;; Fullscreen
;;;


(definition package (platform-set-fullscreen-windowed-mode handle)
  (unimplemented))

(definition package (platform-restore-from-fullscreen handle)
  (unimplemented))

(definition package (platform-restore-windowed-mode handle)
  (unimplemented))

(definition package (platform-set-fullscreen-mode handle)
  (unimplemented)))
