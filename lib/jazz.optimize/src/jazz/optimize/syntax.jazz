;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Optimize Syntax
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.optimize.syntax jazz


(import (jazz.core (phase syntax))
        (jazz.dialect.classes.foundation))

(import (fmt (except fl upcase downcase))
        (fmt.fmt-c))


;; TODO
;; - compare performance of
;;   - pure gambit compilation
;;   - optimize using c-lambda
;;   - optimize using c-code
;; - defoptimize
;;   - generate C-level fn
;;   - generate Lisp wrapper
;;   - generate C linking code
;;     - probably through a global vector in the Jazz kernel that is
;;       populated and accessed by static code. note that we should be
;;       able to create a C global variable for every fn called from
;;       another module. note that this is really similar to what
;;       Gambit does for linking user code
;;   - I think the Lisp side should only generate fn and no fn! and fn&
;;     as in a thread-safe world there is no sensible place we can pass
;;     to fn! to put the result. All critical pieces should then be
;;     wrapped in an optimize

;; SUPPORT
;; - fx& make-fx& (obsolete)
;; - f32& f64& make-f32& make-f64& (obsolete)
;; ! = /= < <= > >= (TODO: /= is an inline function, not primitive)
;; ! + - * /
;; ! modulo bitwise-and ...
;; ! set!
;; !~ let let* ...
;; !~ if cond case ...
;; - (cast <fx> <fl> ...)
;; - (get-slot~ obj)
;; - (fn a b c)
;; ! (for (init test update) body)
;; * f64vector-ref f64vector-set! ...
;;   --> see gambit ch. 10
;; - macro calls
;; - inline calls
;; - cffi calls like randomInt
;; - internal defines like evaluate-morph
;; ! constants
;; - continuation-capture/return that becomes break, continue, ...
;; 2 vertex&, matrix&, ... e.g. type extensible (together with next)
;;    --> vertex is f64vector[3], matrix is f64vector[16]
;; 2 fn fn! fn& constant space and thread-safe
;; - typed variables like <fx> <fl> ...
;; - set! gambit boxing
;; - (cast <Tangent> <KeyFrame> ...)
;; - and or
;; - allege
;; 2 defoptimize (no linking by putting all code in same module)
;; 3 linking

;; KNOWLEDGE
;; - ___argn is a macro that refers to the Scheme stack and so should be
;;   updated when a gc occurs. we should be able to use this to reacquire
;;   entry parameters after a call to the Lisp world
;; - it is not possible to make callbacks from inside a ##c-code (validate
;;   that this is really the case) as some work c-lambda does is skipped
;; - according to Marc, callbacks could be done efficiently by having a
;;   c-define for each type signatures, like callback-int/int-int!?

;; THINK
;; - need to think about a satisfactory solution for non-compiled code
;;   for example for a user not have installed gcc
;;   - maybe we should keep (hidden!?) the lisp-level fn fn! fn& the main
;;     problem being that they are not thread-safe
;;   - spectrum: C - optimize generated C code - hand optimized Lisp code (fn fn! fn&) - pure Lisp code
;; - when generating C code, never forget
;;   - independant compilation
;;   - dynamic evaluation

;; IDEAS
;; - do without the type prefixes!?
;;   - for example (+ vert1 (scalar* vert2 2.3))
;; - enable optimize at a higher level where it will automatically determine
;;   what parts of its tree should be optimized. and then maybe optimize based
;;   on a proclaim
;; - can optimize fix the annoying having to (+ (cast <fl> n) y) and having
;;   to (+ y 1.0) instead of just (+ y 1)
;; - support for hand-coded embedded C code!?
;; - can optimize give use abstract vertex, matrix, ... types!?
;; - maybe disable interrupts when doing a callback!? (hmmm I do not think this
;;   really solves the gc moving objects around problem as a gc could still occur)
;; - for the interpreted expansion, maybe disable interrupts to make the fn&
;;   approach thread-safe!?
;; - generate c-lambda or ##c-code based on the presence of callbacks!?
;; - add gcc flags like -O3 or even more specific ones!?

;; LAYERS
;; - Pure Lisp
;; - Optimized using types to generate
;;   - ## low-level code
;;   - C code using Gambit's CFFI

;; MODULES
;; - (generation) world.procedural world.biome
;; - (geometry) world.geometry world.geometry.base world.polygon
;; - (animation) world.animation
;; - (collision) world.collision

;; FUNCTIONS
;; - ray-triangle-distance!

;; MARC
;; - is there a way to know if a gc occured during a call from C to Lisp?

;; SAMUEL
;; - how I got the type in emit-for
;; - generate-symbol in for

;; HOMOGENEOUS
;; - ___F64* content = ___CAST(___F64*, ___BODY(___arg1));
;; - allocate a new f64vector of count elements
;;   ___SCMOBJ r = ___EXT(___alloc_scmobj) (NULL, ___sF64VECTOR, count*sizeof(___F64));
;;   ___F64* ptr = ___CAST(___F64*, ___BODY(r));
;;   fill / copy / ... the content using ptr
;;   ___result = r;
;;   ___EXT(___release_scmobj)(r);


;; hack around calling emit-expression from within an emit-expression method
(native jazz:emit-expr)


;; quick hack
(definition public (return expr)
  expr)


;;;
;;;; Emit
;;;


(definition (emit-optimize header body declaration environment backend)
  (let ((free '()))
    
    (define (emit-list lst env context)
      (cond ((null? lst) 
             '())
            ((null? (cdr lst))
             (list (emit (car lst) env context)))
            (else
             (cons (emit (car lst) env #f)
                   (emit-list (cdr lst) env context)))))
    
    (define (emit expr env context)
      (debug expr)
      (typecase expr
        ((Constant) (emit-constant expr env context))
        ((Call) (emit-call expr env context))
        ((Binding-Reference) (emit-reference expr env context))
        ((Let) (emit-let expr env context))
        ((Letstar) (emit-letstar expr env context))
        ((Body) (emit-body expr env context))
        ((Begin) (emit-begin expr env context))
        ((If) (emit-if expr env context))
        ((For) (emit-for expr env context))
        ((Assignment) (emit-assignment expr env context))
        (else (emit-unsupported expr))))
    
    (define (emit-constant expr env context)
      (emit-return (source-code (get-expansion~ expr)) context))
    
    (define (emit-call expr env context)
      (let ((operator (get-operator~ expr))
            (arguments (get-arguments~ expr)))
        (let ((binding (and (is? operator Binding-Reference) (get-binding~ operator))))
            (if (is? operator Binding-Reference)
                (cond ((is? binding Export-Declaration)
                       (emit-return `(,(primitive-reference binding) 
                                      ,@(emit-list arguments env #f))
                                    context))
                      ((is? binding Defoptimize-Declaration)
                       `(bar a a))
                      ((is? binding Definition-Declaration)
                       (compound-reference binding arguments))
                      (else `(unable-to-optimize ,operator)))
              `(unable-to-optimize ,operator)))))
    
    ;; TODO
    (define (compound-reference binding arguments)
      (let ((expansion (get-expansion~ binding))
            (signature (get-signature~ binding))
            (value (get-value~ binding)))
        (debug expansion signature value)                  
        `(compound-not-implemented ,binding)))
    
    (define (primitive-reference binding)
      (define primitives
        '(; arithmetic operators
          (+ . +)
          (- . -)
          (* . *)
          (/ . /)
          (modulo . %)
          ; relational operators
          (= . ==)
          (/= . !=) ; /= is an inline call in jazz, so it won't pass through here
          (< . <)
          (<= . <=)
          (> . >)
          (>= . >=)
          ; logical operators (or and and have their own AST nodes)
          (not . !)
          ; bitwise operators
          (bitwise-and . &)
          (bitwise-xor . ^)
          (bitwise-not . ~)
          ;(bitwise-ior . |) ;this doesn't work
          ))
      
      (let ((pair (assq (get-symbol~ binding) primitives)))
        (if pair
            (cdr pair)
          #f)))
    
    ;; quick hack
    (define (emit-return expr context)
      (if context
          `(___return ,expr)
        expr))
    
    (define (emit-reference expr env context)
      (let ((binding (get-binding~ expr)))
        (if (is? binding Variable)
            (let ((name (get-name~ binding)))
              (when (find-annotated binding environment)
                (unless (memq? binding free)
                  (set! free (cons binding free))))
              (emit-return name context))
          `(unsupported-reference ,binding))))
    
    (define (emit-let expr env context)
      (annotate-let expr declaration env backend
        (lambda (augmented-environment)
          (let ((bindings (get-bindings~ expr))
                (body (get-body~ expr)))
            `(%begin
               ,@(map (lambda (binding)
                        (let ((variable (car binding))
                              (value (cdr binding)))
                          (let ((type (find-annotated-type variable augmented-environment)))
                            `(%var ,(type->c type) ,(get-name~ variable) ,(emit value augmented-environment #f)))))
                      bindings)
               ,@(emit body augmented-environment context))))))
    
    (define (emit-letstar expr env context)
      ;stub
      )
    
    (define (emit-body expr env context)
      (let ((expressions (get-expressions~ expr)))
        (emit-list expressions env context)))
    
    (define (emit-begin expr env context)
      (let ((expressions (get-expressions~ expr)))
        `(%begin ,@(emit-list expressions env context))))
    
    (define (emit-if expr env context)
      (let ((test (get-test~ expr))
            (yes (get-yes~ expr))
            (no (get-no~ expr)))
        (debug 111 no (get-operator~ (car (get-expressions~ no))))
        `(if ,(emit test env #f)
             ,(emit yes env context)
           ,(emit no env context))))
    
    (define (emit-for expr env context)
      (let ((var (get-name~ (get-variable~ expr)))
            (type (get-type~ (emit-expr (get-init~ expr) declaration env backend))))
        `(%begin
           (%var ,(type->c type) ,var)
           (for (= ,var ,(emit (get-init~ expr) env #f)) ,(emit (get-test~ expr) env #f) ,(emit (get-update~ expr) env #f)
             ,@(emit-list (get-body~ expr) env #f)))))
    
    (define (emit-assignment expr env context)
      (let ((binding (get-binding~ expr))
            (value (get-value~ expr)))
        `(= ,(get-name~ binding) ,(emit value env #f))))
    
    (define (emit-unsupported expr)
      `(unsupported ,expr))
    
    (define (type->c type)
      (typecase type
        ((Fixnum-Class) 'int)
        ((Flonum-Class) 'double)
        (else `(unknown-c-type ,type))))
    
    (define (type->lisp type)
      (typecase type
        ((Fixnum-Class) 'int)
        ((Flonum-Class) 'double)
        (else `(unknown-lisp-type ,type))))
    
    (define (wrap code)
      (let ((free (reverse free)))
        (let ((expr `(%begin
                       ,@(map (lambda (binding rank)
                                (let ((name (get-name~ binding))
                                      (type (get-type~ binding)))
                                  `(%var ,(type->c type) ,name ,(string->symbol (format "___arg{a}" rank)))))
                              free
                              (naturals 1 (+ (length free) 1)))
                       ,@code)))
          (let ((code (c-expr/sexp expr)))
            (pp expr) (newline)
            (fmt #t code) (newline)
            `((c-lambda ,(map (lambda (binding)
                                (let ((name (get-name~ binding))
                                      (type (get-type~ binding)))
                                  (type->lisp type)))
                              free)
                  int
                ,(fmt #f "" code))
              ,@(map get-name~ free))))))
    
    (wrap (emit-list body environment #t))))


;;;
;;;; Defoptimize
;;;



(class Defoptimize-Declaration extends Definition-Declaration
  
  
  (method override (emit-declaration environment backend)
    (let ((expression (emit-expression value self environment backend)))
      `(begin
         (c-declare "int bar(int x, int y) { return x + y; }")
         (define ,locator
           ,(sourcified-form expression))))))


(define (walk-defoptimize-declaration walker resume declaration environment form-src)
  (walk-extended-definition-declaration walker resume declaration environment form-src
    (lambda (name type access compatibility attributes parent expansion signature)
      (new Defoptimize-Declaration name: name type: type access: access compatibility: compatibility attributes: attributes parent: parent))))


(define (walk-defoptimize walker resume declaration environment form-src)
  (walk-extended-definition walker resume declaration environment form-src))


(define-walker-declaration defoptimize jazz walk-defoptimize-declaration walk-defoptimize)


;;;
;;;; Optimize
;;;


(class Optimize extends Expression
  
  
  (slot header getter generate)
  (slot body   getter generate)
  
  
  (method override (initialize header body . rest)
    (apply nextmethod rest)
    (set! header~self header)
    (set! body~self body))
  
  
  (method override (tree-fold down up here seed environment)
    (tree-fold~ body down up here seed environment))
  
  
  (method override (emit-expression declaration environment backend)
    (new-code
      (emit-optimize header body declaration environment backend)
      Any
      #f)))


(special-form (optimize walker resume declaration environment form-src)
  (let ((form (cdr (source-code form-src))))
    (let ((header (car form))
          (body (cdr form)))
      (new Optimize
        header
        (walk-list walker resume declaration environment body)))))

;;;
;;;; For
;;;


(class For extends Expression
  
  
  (slot variable  getter generate)
  (slot init      getter generate)
  (slot test      getter generate)
  (slot update    getter generate)
  (slot body      getter generate)
  (slot expansion getter generate)
  
  
  (method override (initialize variable init test update body expansion . rest)
    (apply nextmethod rest)
    (set! variable~self variable)
    (set! init~self init)
    (set! test~self test)
    (set! update~self update)
    (set! body~self body)
    (set! expansion~self expansion))
  
  
  (method override (tree-fold down up here seed environment)
    (tree-fold~ body down up here seed environment))
  
  
  (method override (emit-expression declaration environment backend)
    (emit-expr expansion declaration environment backend)))


(special-form (for walker resume declaration environment form-src)
  (let ((form (source-code (cdr (source-code form-src)))))
    (let ((header (car form))
          (body (cdr form)))
      (bind (name init test update) (source-code header)
        (let ((variable (new Variable (source-code name) #f name)))
          (let ((augmented-environment (cons variable environment))
                (iter (generate-symbol "iter")))
            (new For
              variable
              (walk walker resume declaration environment init)
              (walk walker resume declaration augmented-environment test)
              (walk walker resume declaration augmented-environment update)
              (walk-list walker resume declaration augmented-environment body)
              (walk walker resume declaration environment
                `(let ((,name ,init))
                   (let (,iter)
                     (when ,test
                       ,@body
                       ,update
                       (,iter)))))))))))))
