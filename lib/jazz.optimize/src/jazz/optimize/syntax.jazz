;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Optimize Syntax
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.optimize.syntax jazz


(import (jazz.core (phase syntax))
        (jazz.dialect.classes.foundation))

(import (fmt (except fl upcase downcase))
        (fmt.fmt-c))


;; TODO
;; - compare performance of
;;   - pure gambit compilation
;;   - optimize using c-lambda
;;   - optimize using c-code
;; - defoptimize
;;   - generate C-level fn
;;   - generate Lisp wrapper
;;   - generate C linking code
;;     - probably through a global vector in the Jazz kernel that is
;;       populated and accessed by static code. note that we should be
;;       able to create a C global variable for every fn called from
;;       another module. note that this is really similar to what
;;       Gambit does for linking user code

;; SUPPORT
;; - fx& make-fx&
;; - f32& f64& make-f32& make-f64&
;; - = /= < <= > >=
;; - + - * /
;; - modulo bitwise-and ...
;; - set!
;; - let let* ...
;; - if cond case ...
;; - (cast <fx> <fl> ...)
;; - (get-slot~ obj)
;; - (fn a b c)
;; - (for (init test update) body)
;; - f64vector-ref f64vector-set! ...
;; - macro calls
;; - inline calls
;; - cffi calls like randomInt
;; - internal defines like evaluate-morph
;; - constants
;; - continuation-capture/return that becomes break, continue, ...
;; - vertex&, matrix&, ... e.g. type extensible
;; - typed variables like <fx> <fl> ...
;; - set! gambit boxing
;; - (cast <Tangent> <KeyFrame> ...)
;; - and or
;; - allege
;; - fn fn! fn& constant space and thread-safe

;; KNOWLEDGE
;; - ___argn is a macro that refers to the Scheme stack and so should be
;;   updated when a gc occurs. we should be able to use this to reacquire
;;   entry parameters after a call to the Lisp world
;; - it is not possible to make callbacks from inside a ##c-code (validate
;;   that this is really the case) as some work c-lambda does is skipped
;; - according to Marc, callbacks could be done efficiently by having a
;;   c-define for each type signatures, like callback-int/int-int!?

;; THINK
;; - need to think about a satisfactory solution for non-compiled code
;;   for example for a user not have installed gcc
;;   - maybe we should keep (hidden!?) the lisp-level fn fn! fn& the main
;;     problem being that they are not thread-safe
;;   - spectrum: C - optimize generated C code - hand optimized Lisp code (fn fn! fn&) - pure Lisp code
;; - when generating C code, never forget
;;   - independant compilation
;;   - dynamic evaluation

;; IDEAS
;; - do without the type prefixes!?
;;   - for example (+ vert1 (scalar* vert2 2.3))
;; - enable optimize at a higher level where it will automatically determine
;;   what parts of its tree should be optimized. and then maybe optimize based
;;   on a proclaim
;; - can optimize fix the annoying having to (+ (cast <fl> n) y) and having
;;   to (+ y 1.0) instead of just (+ y 1)
;; - support for hand-coded embedded C code!?
;; - can optimize give use abstract vertex, matrix, ... types!?
;; - maybe disable interrupts when doing a callback!? (hmmm I do not think this
;;   really solves the gc moving objects around problem as a gc could still occur)
;; - for the interpreted expansion, maybe disable interrupts to make the fn&
;;   approach thread-safe!?
;; - generate c-lambda or ##c-code based on the presence of callbacks!?
;; - add gcc flags like -O3 or even more specific ones!?

;; LAYERS
;; - Pure Lisp
;; - Optimized using types to generate
;;   - ## low-level code
;;   - C code using Gambit's CFFI

;; MODULES
;; - world.procedural world.biome
;; - world.geometry world.geometry.base world.polygon
;; - world.animation
;; - world.collision

;; FUNCTIONS
;; - ray-triangle-distance!

;; MARC
;; - is there a way to know if a gc occured during a call from C to Lisp?

;; SAMUEL
;; - how I got the type in emit-for
;; - generate-symbol in for


;; hack around calling emit-expression from within an emit-expression method
(native jazz:emit-expr)


;; quick hack
(definition public (return expr)
  expr)


;;;
;;;; Emit
;;;


(definition (emit-optimize header body declaration environment backend)
  (let ((free '()))
    (define (emit-list lst env)
      (map (lambda (expr)
             (emit expr env))
           lst))
    
    (define (emit expr env)
      (typecase expr
        ((Constant) (emit-constant expr env))
        ((Call) (emit-call expr env))
        ((Binding-Reference) (emit-reference expr env))
        ((Let) (emit-let expr env))
        ((Body) (emit-body expr env))
        ((Begin) (emit-begin expr env))
        ((If) (emit-if expr env))
        ((For) (emit-for expr env))
        ((Assignment) (emit-assignment expr env))
        (else (emit-unsupported expr))))
    
    (define (emit-constant expr env)
      (source-code (get-expansion~ expr)))
    
    (define (emit-call expr env)
      (let ((operator (get-operator~ expr))
            (arguments (get-arguments~ expr)))
        ;; quick hack
        (if (and (is? operator Binding-Reference)
                 (is? (get-binding~ operator) Definition-Declaration)
                 (eq? (get-name~ (get-binding~ operator)) 'return))
            (emit-return (car arguments) env)
          (let ((primitive (primitive-operator operator)))
            (if primitive
                `(,primitive ,@(emit-list arguments env))
              `(unable-to-optimize ,operator))))))
    
    ;; quick hack
    (define (emit-return expr env)
      `(___return ,(emit expr env)))
    
    (define (emit-reference expr env)
      (let ((binding (get-binding~ expr)))
        (if (is? binding Variable)
            (let ((name (get-name~ binding)))
              (when (find-annotated binding environment)
                (unless (memq? binding free)
                  (set! free (cons binding free))))
              name)
          `(unsupported-reference ,binding))))
    
    (define (emit-let expr env)
      (annotate-let expr declaration env backend
        (lambda (augmented-environment)
          (let ((bindings (get-bindings~ expr))
                (body (get-body~ expr)))
            `(%begin
               ,@(map (lambda (binding)
                        (let ((variable (car binding))
                              (value (cdr binding)))
                          (let ((type (find-annotated-type variable augmented-environment)))
                            `(%var ,(type->c type) ,(get-name~ variable) ,(emit value augmented-environment)))))
                      bindings)
               ,@(emit body augmented-environment))))))
    
    (define (emit-body expr env)
      (let ((expressions (get-expressions~ expr)))
        (emit-list expressions env)))
    
    (define (emit-begin expr env)
      (let ((expressions (get-expressions~ expr)))
        `(%begin ,@(emit-list expressions env))))
    
    (define (emit-if expr env)
      (let ((test (get-test~ expr))
            (yes (get-yes~ expr))
            (no (get-no~ expr)))
        `(if ,(emit test env)
             ,(emit yes env)
           ,(emit no env))))
    
    (define (emit-for expr env)
      (let ((var (get-name~ (get-variable~ expr)))
            (type (get-type~ (emit-expr (get-init~ expr) declaration env backend))))
        `(%begin
           (%var ,(type->c type) ,var)
           (for (= ,var ,(emit (get-init~ expr) env)) ,(emit (get-test~ expr) env) ,(emit (get-update~ expr) env)
             ,@(emit-list (get-body~ expr) env)))))
    
    (define (emit-assignment expr env)
      (let ((binding (get-binding~ expr))
            (value (get-value~ expr)))
        `(= ,(get-name~ binding) ,(emit value env))))
    
    (define (emit-unsupported expr)
      `(unsupported ,expr))
    
    (define (primitive-operator operator)
      (if (is? operator Binding-Reference)
          (primitive-reference (get-binding~ operator))
        #f))
    
    (define (primitive-reference binding)
      (define primitives
        '((+ . +)
          (- . -)
          (* . *)
          (/ . /)
          (= . ==)
          (/= . !=)
          (< . <)
          (<= . <=)
          (> . >)
          (>= . >=)))
      
      (if (is? binding Export-Declaration)
          (let ((pair (assq (get-symbol~ binding) primitives)))
            (if pair
                (cdr pair)
              #f))
        #f))
    
    (define (type->c type)
      (typecase type
        ((Fixnum-Class) 'int)
        ((Flonum-Class) 'double)
        (else `(unknown-c-type ,type))))
    
    (define (type->lisp type)
      (typecase type
        ((Fixnum-Class) 'int)
        ((Flonum-Class) 'double)
        (else `(unknown-lisp-type ,type))))
    
    (define (wrap code)
      (let ((free (reverse free)))
        (let ((expr `(%begin
                       ,@(map (lambda (binding rank)
                                (let ((name (get-name~ binding))
                                      (type (get-type~ binding)))
                                  `(%var ,(type->c type) ,name ,(string->symbol (format "___arg{a}" rank)))))
                              free
                              (naturals 1 (+ (length free) 1)))
                       ,@code)))
          (let ((code (c-expr expr)))
            (pp expr) (newline)
            (fmt #t code) (newline)
            `((c-lambda ,(map (lambda (binding)
                                (let ((name (get-name~ binding))
                                      (type (get-type~ binding)))
                                  (type->lisp type)))
                              free)
                  int
                ,(fmt #f "" code))
              ,@(map get-name~ free))))))
    
    (wrap (emit-list body environment))))


;;;
;;;; Defoptimize
;;;



(class Defoptimize-Declaration extends Definition-Declaration)


(define (walk-defoptimize-declaration walker resume declaration environment form-src)
  (walk-extended-definition-declaration walker resume declaration environment form-src
    (lambda (name type access compatibility attributes parent expansion signature)
      (new Defoptimize-Declaration name: name type: type access: access compatibility: compatibility attributes: attributes parent: parent))))


(define (walk-defoptimize walker resume declaration environment form-src)
  (walk-extended-definition walker resume declaration environment form-src))


(define-walker-declaration defoptimize jazz walk-defoptimize-declaration walk-defoptimize)


;;;
;;;; Optimize
;;;


(class Optimize extends Expression
  
  
  (slot header getter generate)
  (slot body   getter generate)
  
  
  (method override (initialize header body . rest)
    (apply nextmethod rest)
    (set! header~self header)
    (set! body~self body))
  
  
  (method override (tree-fold down up here seed environment)
    (tree-fold~ body down up here seed environment))
  
  
  (method override (emit-expression declaration environment backend)
    (new-code
      (emit-optimize header body declaration environment backend)
      Any
      #f)))


(special-form (optimize walker resume declaration environment form-src)
  (let ((form (cdr (source-code form-src))))
    (let ((header (car form))
          (body (cdr form)))
      (new Optimize
        header
        (walk-list walker resume declaration environment body)))))


;;;
;;;; For
;;;


(class For extends Expression
  
  
  (slot variable  getter generate)
  (slot init      getter generate)
  (slot test      getter generate)
  (slot update    getter generate)
  (slot body      getter generate)
  (slot expansion getter generate)
  
  
  (method override (initialize variable init test update body expansion . rest)
    (apply nextmethod rest)
    (set! variable~self variable)
    (set! init~self init)
    (set! test~self test)
    (set! update~self update)
    (set! body~self body)
    (set! expansion~self expansion))
  
  
  (method override (tree-fold down up here seed environment)
    (tree-fold~ body down up here seed environment))
  
  
  (method override (emit-expression declaration environment backend)
    (emit-expr expansion declaration environment backend)))


(special-form (for walker resume declaration environment form-src)
  (let ((form (source-code (cdr (source-code form-src)))))
    (let ((header (car form))
          (body (cdr form)))
      (bind (name init test update) (source-code header)
        (let ((variable (new Variable (source-code name) #f name)))
          (let ((augmented-environment (cons variable environment))
                (iter (generate-symbol "iter")))
            (new For
              variable
              (walk walker resume declaration environment init)
              (walk walker resume declaration augmented-environment test)
              (walk walker resume declaration augmented-environment update)
              (walk-list walker resume declaration augmented-environment body)
              (walk walker resume declaration environment
                `(let ((,name ,init))
                   (let (,iter)
                     (when ,test
                       ,@body
                       ,update
                       (,iter)))))))))))))
