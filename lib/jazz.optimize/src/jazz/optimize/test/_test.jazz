;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Optimize Test
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module jazz.optimize.test jazz


(import (jazz.foreign)
        (jazz.platform)
        (jazz.optimize (phase syntax))
        (jazz.optimize.test.syntax (phase syntax)))


;;;
;;;; Work
;;;


(define t
  (make-thread-with-stack 4096
    (lambda ()
      (foo))))


(definition (foo v <vertex>) <vertex>
  (optimizing
    (let ((a (optimize (vertex- (vertex 1. 2. 3.) v))))
      (let ((b (optimize (vertex+ a a))))
        (vertex+ a b)))))


(definition (foo)
  (let ((sp (thread-sp-get)))
        (let ((v1 (thread-make-f64vector 3))
              (v2 (thread-make-f64vector 3))
              (vert (thread-make-vertex))
              (plane (thread-make-plane)))
          (force-f64vector-set! v1 1 1.111)
          (force-f64vector-set! v2 1 2.222)
          (vertex-x-set! vert 1.1)
          (vertex-y-set! vert 2.2)
          (vertex-z-set! vert 3.3)
          (let ((origin (plane-origin plane))
                (normal (plane-normal plane)))
            (vertex-x-set! origin 4.4)
            (vertex-y-set! origin 5.5)
            (vertex-z-set! origin 6.6)
            (vertex-x-set! normal 0.)
            (vertex-y-set! normal 1.)
            (vertex-z-set! normal 0.))
          (pp (list 'v1= v1))
          (pp (list 'v2= v2))
          (pp (list 'vert= vert))
          (pp (list 'plane= plane))
          (thread-sp-set! sp)
          (let ((v3 (thread-make-f64vector 3)))
            (force-f64vector-set! v3 1 3.333)
            (pp (list 'v1= v1))
            (pp (list 'v2= v2))
            (pp (list 'v3= v3))
            (thread-sp-set! sp)))))))

(thread-start! t)

(thread-sleep! 1)


;;;
;;;; Test
;;;


@w (
(definition (test x <fl> y <fl>)
  (optimize
    (for (biome-x -2 (<= biome-x 2) (increase! biome-x))
         (for (biome-z -2 (<= biome-z 2) (increase! biome-z))
              (let ((weight (+ biome-x biome-z)))
                2)))))


(debug (test 2 3)))


;;;
;;;; Memory
;;;


@w (
(c-external (bytes->words int) int
  #/C/
    ___return(___WORDS(___arg1));
//#)


;; for now composite and container objects must be still
(c-external (make-u8vector-still int) scheme-object
  #/C/
    ___SCMOBJ result = ___EXT(___alloc_scmobj) (NULL, ___sU8VECTOR, ___arg1);
    ___EXT(___release_scmobj)(result);
    ___return(result);
//#)


;;;
;;;; Struct
;;;


(class Struct extends Object)


;;;
;;;; Container
;;;


(class Container extends Object))


;;;
;;;; Vertex
;;;


@w (
(c-declare test #/C/
  typedef struct {
            ___WORD head;
            ___SCMOBJ model;
            double x;
            double y;
            double z;
  } vertex;
//#)


(c-external (sizeof-vertex) int
  #/C/
  ___return(sizeof(vertex));
//#)


(definition public vertex-size <fx>
  (sizeof-vertex))

(definition public vertex-words <fx>
  (bytes->words vertex-size))


(class Vertex extends Struct
  
  
  @w (slot x <fl>)
  @w (slot y <fl>)
  @w (slot z <fl>)
  
  
  (method override (print output readably)
    (format output "~{Vertex {a} {a} {a}}"
      (vertex-x self)
      (vertex-y self)
      (vertex-z self))))


(definition public (make-vertex) <Vertex>
  (let ((vertex (jazzstructify (make-u8vector vertex-size))))
    (c-code
      #/C/
        vertex* ptr = ___CAST(vertex*, ___UNTAG(___ARG1));
        ptr->model = ___ARG2;
//#
      vertex
      Vertex)
    vertex))


(definition public (vertex x <fl> y <fl> z <fl>) <Vertex>
  (let ((vertex (jazzstructify (make-u8vector vertex-size))))
    (c-code
      #/C/
        vertex* ptr = ___CAST(vertex*, ___UNTAG(___ARG1));
        ptr->model = ___ARG2;
        ptr->x = ___F64UNBOX(___ARG3);
        ptr->y = ___F64UNBOX(___ARG4);
        ptr->z = ___F64UNBOX(___ARG5);
//#
      vertex
      Vertex
      x
      y
      z)
    vertex))


(definition public (vertex-x vert <Vertex>) <fl>
  ((c-lambda vertex-x (scheme-object) double
    #/C/
      vertex* ptr = ___CAST(vertex*, ___UNTAG(___arg1));
      ___return(ptr->x);
//#)
    vert))

(definition public (vertex-y vert <Vertex>) <fl>
  ((c-lambda vertex-y (scheme-object) double
    #/C/
      vertex* ptr = ___CAST(vertex*, ___UNTAG(___arg1));
      ___return(ptr->y);
//#)
    vert))

(definition public (vertex-z vert <Vertex>) <fl>
  ((c-lambda vertex-z (scheme-object) double
    #/C/
      vertex* ptr = ___CAST(vertex*, ___UNTAG(___arg1));
      ___return(ptr->z);
//#)
    vert))


(definition public (vertex-x-set! vert <Vertex> x <fl>) <void>
  (c-code
    #/C/
      vertex* ptr = ___CAST(vertex*, ___UNTAG(___ARG1));
      ptr->x = ___F64UNBOX(___ARG2);
//#
    vert
    x))

(definition public (vertex-y-set! vert <Vertex> x <fl>) <void>
  (c-code
    #/C/
      vertex* ptr = ___CAST(vertex*, ___UNTAG(___ARG1));
      ptr->y = ___F64UNBOX(___ARG2);
//#
    vert
    x))

(definition public (vertex-z-set! vert <Vertex> x <fl>) <void>
  (c-code
    #/C/
      vertex* ptr = ___CAST(vertex*, ___UNTAG(___ARG1));
      ptr->z = ___F64UNBOX(___ARG2);
//#
    vert
    x))


(definition public (vertex+ v1 <Vertex> v2 <Vertex>) <Vertex>
  (vertex
    (+ (vertex-x v1) (vertex-x v2))
    (+ (vertex-y v1) (vertex-y v2))
    (+ (vertex-z v1) (vertex-z v2))))


(debug (make-vertex))
(let ((vert (vertex 2. 3. 5.)))
  (debug vert)
  (vertex-x-set! vert 7.)
  (vertex-y-set! vert 9.)
  (vertex-z-set! vert 11.)
  (debug vert)))


;;;
;;;; Vertices
;;;


@w (
(c-declare test #/C/
  typedef struct {
            ___WORD head;
            ___SCMOBJ model;
            int length;
  } vertices;
//#)


(class Vertices extends Container)


(definition public (make-vertices count)
  (let ((vertices (jazzstructify (make-u8vector (* count vertex-size)))))
    (c-code
      #/C/
        int len = ___INT(___ARG1);
        int head = ___MAKE_HD(___HD_BYTES(___ARG2), ___sJAZZSTRUCT, ___PERM);
        vertices* container = ___CAST(vertices*, ___UNTAG(___ARG2));
        container->model = ___ARG3;
        container->length = len;
        vertex* ptr = ___CAST(vertex*, container + 1);
        for (int n = 0; n < len; n++)
        {
            ptr->head = head;
            ptr->model = ___ARG4;
            ptr++;
        }
//#
      count
      vertices
      Vertices
      Vertex)
    vertices))


(definition public (vertices-length vertices)
  (c-code
    #/C/
      vertices* container = ___CAST(vertices*, ___UNTAG(___ARG1));
      ___RESULT = ___FIX(container->length);
//#
    vertices))


(definition public (vertices-ref vertices n)
  (c-code
    #/C/
      vertices* container = ___CAST(vertices*, ___UNTAG(___ARG1));
      vertex* ptr = ___CAST(vertex*, container + 1);
      ___RESULT = ___TAG(ptr + ___INT(___ARG2), ___tSUBTYPED);
//#
    vertices
    n))


(let ((vertices (make-vertices 10)))
  (debug vertices (vertices-length vertices))
  (let ((vert (vertices-ref vertices 2)))
    (vertex-x-set! vert 4.)
    (vertex-y-set! vert 5.)
    (vertex-z-set! vert 6.)
    (debug vert)
    (debug (vertices-ref vertices 2)))))


;;;
;;;; Plane
;;;


@w (
(c-declare test #/C/
  typedef struct {
            ___WORD head;
            ___SCMOBJ model;
            vertex origin;
            vertex normal;
  } plane;
//#)


(c-external (sizeof-plane) int
  #/C/
  ___return(sizeof(plane));
//#)


(definition public plane-size <fx>
  (sizeof-plane))

(definition public plane-words <fx>
  (bytes->words plane-size))


(class Plane extends Struct
  
  
  @w (slot origin <Vertex> initialize (make-vertex) getter generate)
  @w (slot normal <Vertex> initialize (make-vertex) getter generate)
  
  
  (method override (print output readably)
    (format output "~{Plane {a} {a}}"
      (plane-origin self)
      (plane-normal self))))


(definition public (plane origin <Vertex> normal <Vertex>) <Plane>
  (let ((plane (jazzstructify (make-u8vector-still plane-size))))
    (c-code
      #/C/
        plane* ptr = ___CAST(plane*, ___UNTAG(___ARG1));
        ptr->model = ___ARG2;
        ptr->origin = *___CAST(vertex*, ___UNTAG(___ARG3)); ptr->origin.head = ___MAKE_HD(___HD_BYTES(ptr->origin.head), ___sJAZZSTRUCT, ___PERM);
        ptr->normal = *___CAST(vertex*, ___UNTAG(___ARG4)); ptr->normal.head = ___MAKE_HD(___HD_BYTES(ptr->normal.head), ___sJAZZSTRUCT, ___PERM);
//#
      plane
      Plane
      origin
      normal)
    plane))


(definition public (plane-origin plane <Plane>) <Vertex>
  (c-code
    #/C/
      plane* ptr = ___CAST(plane*, ___UNTAG(___ARG1));
      ___RESULT = ___TAG(&ptr->origin, ___tSUBTYPED);
//#
    plane))

(definition public (plane-normal plane <Plane>) <Vertex>
  (c-code
    #/C/
      plane* ptr = ___CAST(plane*, ___UNTAG(___ARG1));
      ___RESULT = ___TAG(&ptr->normal, ___tSUBTYPED);
//#
    plane))


(let ((plane (plane (vertex 1. 2. 3.) (vertex 0. 1. 0.))))
  (debug plane)
  (debug (vertex+ (plane-origin plane) (plane-normal plane)))
  (let ((orig (plane-origin plane))
        (normal (plane-normal plane)))
    (debug orig normal))))


;;;
;;;; Planes
;;;


@w (
(c-declare test #/C/
  typedef struct {
            ___WORD head;
            ___SCMOBJ model;
            int length;
  } planes;
//#)


(class Planes extends Container)


(definition public (make-planes count)
  (let ((planes (jazzstructify (make-u8vector (* count plane-size)))))
    (c-code
      #/C/
        int len = ___INT(___ARG1);
        int head = ___MAKE_HD(___HD_BYTES(___ARG2), ___sJAZZSTRUCT, ___PERM);
        planes* container = ___CAST(planes*, ___UNTAG(___ARG2));
        container->model = ___ARG3;
        container->length = len;
        plane* ptr = ___CAST(plane*, container + 1);
        for (int n = 0; n < len; n++)
        {
            ptr->head = head;
            ptr->model = ___ARG4;
            ptr->origin.head = ___MAKE_HD(sizeof(vertex), ___sJAZZSTRUCT, ___PERM);
            ptr->origin.model = ___ARG5;
            ptr->normal.head = ___MAKE_HD(sizeof(vertex), ___sJAZZSTRUCT, ___PERM);
            ptr->normal.model = ___ARG5;
            ptr++;
        }
//#
      count
      planes
      Planes
      Plane
      Vertex)
    planes))


(definition public (planes-length planes)
  (c-code
    #/C/
      planes* container = ___CAST(planes*, ___UNTAG(___ARG1));
      ___RESULT = ___FIX(container->length);
//#
    planes))


(definition public (planes-ref planes n)
  (c-code
    #/C/
      planes* container = ___CAST(planes*, ___UNTAG(___ARG1));
      plane* ptr = ___CAST(plane*, container + 1);
      ___RESULT = ___TAG(ptr + ___INT(___ARG2), ___tSUBTYPED);
//#
    planes
    n))


(let ((planes (make-planes 10)))
  (debug planes (planes-length planes))
  (debug (planes-ref planes 2))))


;;;
;;;; Stack
;;;


@w (
(native make-thread-with-stack)
(native force-f64vector-set!)


(define (thread-sp-get) (thread-specific (current-thread)))
(define (thread-sp-set! sp) (thread-specific-set! (current-thread) sp))


(define (thread-make-f64vector len)
  (let ((sp (thread-sp-get)))
    (thread-sp-set! (+ sp 1 len))
    (c-code
      #/C/
        ___WORD* ptr = ___UNTAG(___ARG1) + ___INT(___ARG2);
        ptr[0] = ___MAKE_HD(___INT(___ARG3) * sizeof(___F64), ___sF64VECTOR, ___PERM);
        ___RESULT = ___TAG(ptr, ___tSUBTYPED);
//#
    (current-thread)
    sp
    len)))


(define (thread-make-vertex)
  (let ((sp (thread-sp-get)))
    (thread-sp-set! (+ sp vertex-words))
    (c-code
      #/C/
        vertex* ptr = ___CAST(vertex*, ___UNTAG(___ARG1) + ___INT(___ARG2));
        ptr->head = ___MAKE_HD(sizeof(vertex), ___sJAZZSTRUCT, ___PERM);
        ptr->model = ___ARG3;
        ___RESULT = ___TAG(ptr, ___tSUBTYPED);
//#
    (current-thread)
    sp
    Vertex)))


(define (thread-make-plane)
  (let ((sp (thread-sp-get)))
    (thread-sp-set! (+ sp plane-words))
    (c-code
      #/C/
        plane* ptr = ___CAST(plane*, ___UNTAG(___ARG1) + ___INT(___ARG2));
        ptr->head = ___MAKE_HD(sizeof(plane), ___sJAZZSTRUCT, ___PERM);
        ptr->model = ___ARG3;
        ptr->origin.head = ___MAKE_HD(sizeof(vertex), ___sJAZZSTRUCT, ___PERM);
        ptr->origin.model = ___ARG4;
        ptr->normal.head = ___MAKE_HD(sizeof(vertex), ___sJAZZSTRUCT, ___PERM);
        ptr->normal.model = ___ARG4;
        ___RESULT = ___TAG(ptr, ___tSUBTYPED);
//#
    (current-thread)
    sp
    Plane
    Vertex)))


(define t
  (make-thread-with-stack 4096
    (lambda ()
      (let ((sp (thread-sp-get)))
        (let ((v1 (thread-make-f64vector 3))
              (v2 (thread-make-f64vector 3))
              (vert (thread-make-vertex))
              (plane (thread-make-plane)))
          (force-f64vector-set! v1 1 1.111)
          (force-f64vector-set! v2 1 2.222)
          (vertex-x-set! vert 1.1)
          (vertex-y-set! vert 2.2)
          (vertex-z-set! vert 3.3)
          (let ((origin (plane-origin plane))
                (normal (plane-normal plane)))
            (vertex-x-set! origin 4.4)
            (vertex-y-set! origin 5.5)
            (vertex-z-set! origin 6.6)
            (vertex-x-set! normal 0.)
            (vertex-y-set! normal 1.)
            (vertex-z-set! normal 0.))
          (pp (list 'v1= v1))
          (pp (list 'v2= v2))
          (pp (list 'vert= vert))
          (pp (list 'plane= plane))
          (thread-sp-set! sp)
          (let ((v3 (thread-make-f64vector 3)))
            (force-f64vector-set! v3 1 3.333)
            (pp (list 'v1= v1))
            (pp (list 'v2= v2))
            (pp (list 'v3= v3))
            (thread-sp-set! sp)))))))

(thread-start! t)

(thread-sleep! 1))


;;;
;;;; Definition
;;;


@w (
(defoptimize (add x <fl> y <fl>) <fl>
  (+ x y))


(defoptimize (sub x <fl> y <fl>) <fl>
  (- x y))


(defoptimize (fn x <fl> y <fl>) <fl>
  (+ x (sub (add x x) (add y y))))


(definition (foo a <fl> b <fl>)
  (optimize
    (add a (fn a b))))


(debug (foo 2. 3.)))


;;;
;;;; Continuation
;;;


@w (
(defoptimize inline (touched-top-y shapings-touched <vector>) <fx>
  (continuation-capture
    (lambda (return)
      (let ((top 15))
        (continuation-capture
          (lambda (break)
            (for (y top (>= y 0) (decrease! y))
                 (continuation-capture
                   (lambda (continue)
                     (if (vector-ref shapings-touched y)
                         (continuation-return return (* y 16))
                       (if (= y 2)
                           (continuation-return break)
                         (continuation-return continue)))))))))))
  -1))


;;;
;;;; Class
;;;


@w (
(class Pt extends Object
  
  
  (slot x <fl> getter generate)
  (slot y <fl> getter generate)
  
  
  (method override (initialize x y)
    (set! self.x x)
    (set! self.y y))
  
  
  (method (foo)
    (optimize
      (+ x y))))


(definition (bar pt <Pt>)
  (optimize
    (+ (get-x pt) (get-y pt))))


(defoptimize (baz pt <Pt>) <fl>
  (+ (get-x pt) (get-y pt)))


(definition (test)
  (let ((pt (new Pt 2. 3.)))
    (debug (foo pt) (bar pt) (optimize (baz pt)))))


(test))


;;;
;;;; Function
;;;


@w (
;; for optimize tests
(c-definition (call0 proc) (scheme-object) scheme-object "call0" ""
  (proc))

(c-definition (call1 proc arg1) (scheme-object scheme-object) scheme-object "call1" ""
  (proc arg1))

(c-definition (call2 proc arg1 arg2) (scheme-object scheme-object scheme-object) scheme-object "call2" ""
  (proc arg1 arg2))

(c-definition (call3 proc arg1 arg2 arg3) (scheme-object scheme-object scheme-object scheme-object) scheme-object "call3" ""
  (proc arg1 arg2 arg3))

(c-definition (call4 proc arg1 arg2 arg3 arg4) (scheme-object scheme-object scheme-object scheme-object scheme-object) scheme-object "call4" ""
  (proc arg1 arg2 arg3 arg4)))


@w (
;; for optimize tests
(c-declare world.procedural #/C/
#define ___BODYREF(x, y) ___CAST(___SCMOBJ*, ___BODY(x))[y]
#define ___S32BODYREF(x, y) ___CAST(___S32*, ___BODY(x))[y]
#define ___S32BODYSET(x, y, z) ___CAST(___S32*, ___BODY(x))[y] = (z)
#define ___F64BODYREF(x, y) ___CAST(___F64*, ___BODY(x))[y]
#define ___F64BODYSET(x, y, z) ___CAST(___F64*, ___BODY(x))[y] = (z)
//#))


@w (
(definition base <fx>
  2)

(definition (set-base val <fx>) <void>
  (set! base val))

(definition (foo) <fx>
  base)

(definition (goo x <fx>) <fx>
  (* x x))

(definition (bar) <fx>
  (optimize
    (set-base 11)
    (+ (foo) (goo 2))))

(definition (baz proc <fx^fx:fx>)
  (optimize
    (+ (bar) (proc 2 3))))

(debug (baz (lambda (x y) (+ x (* y y))))))


;;;
;;;; Optimize
;;;


@w (
(definition (zoo x <fx> y <fx>)
  (optimize
    (let ((t 0))
      (for (n 0 (< n 10) (increase! n))
           (let ((a 2)
                 (b (+ n 5)))
             (if (= n 2)
                 (increase! t (+ x (* a b y)))
               (increase! t (+ a n y)))))
      t)))


(debug (zoo 2 3)))


;;;
;;;; Generate
;;;


@w (
(defoptimize grad-x <f64vector>
  #f64(1. -1. 1. -1. 1. -1. 1. -1. 0. 0. 0. 0. 1. 0. -1. 0.))

(defoptimize grad-y <f64vector>
  #f64(1. 1. -1. -1. 0. 0. 0. 0. 1. -1. 1. -1. 1. -1. 1. -1.))

(defoptimize grad-z <f64vector>
  #f64(0. 0. 0. 0. 1. 1. -1. -1. 1. 1. -1. -1. 0. 1. 0. -1.))

(defoptimize inline (grad index <fx> x <fl> y <fl> z <fl>) <fl>
  (let ((i (bitwise-and index #b1111)))
    (+ (* (f64vector-ref grad-x i) x) (* (f64vector-ref grad-y i) y) (* (f64vector-ref grad-z i) z))))


(class Perlin-Attributes extends Object
  
  
  (slot permutations <s32vector> initialize (make-s32vector 512) getter generate)
  (slot x-coord      <fl>        initialize 0.                   getter generate)
  (slot y-coord      <fl>        initialize 0.                   getter generate)
  (slot z-coord      <fl>        initialize 0.                   getter generate))


(definition (generate-noise-octave noise <f64vector> attributes <Perlin-Attributes> x-offset <fl> y-offset <fl> z-offset <fl> x-size <fx> y-size <fx> z-size <fx> x-scale <fl> y-scale <fl> z-scale <fl> scaling <fl>)
  (optimize
    (let ((permutations (get-permutations attributes))
          (x-coord (get-x-coord attributes))
          (y-coord (get-y-coord attributes))
          (z-coord (get-z-coord attributes)))
      (s32vector-ref permutations 0))))


(import (world.foreign))


(definition rand-seed
  23)

(definition rand
  (newRandom rand-seed))


(definition sea-level <fx>
  63)


(definition (generate-blocks block-ref <fx^fx^fx:fx> block-set! <fx^fx^fx^fx:void> data-set! <fx^fx^fx^fx:void> variations <f64vector>)
  ;; for test
  (define (call-randomInt n <fx>) <fx>
    (randomInt rand n))
  
  (optimize
    (for (i 0 (< i 4) (increase! i))
         (let ((j (* i 5))
               (k (* (+ i 1) 5)))
           (for (l 0 (< l 4) (increase! l))
                (let ((i1 (* (+ j l) 33))
                      (j1 (* (+ j l 1) 33))
                      (k1 (* (+ k l) 33))
                      (l1 (* (+ k l 1) 33)))
                  (for (i2 0 (< i2 32) (increase! i2))
                       (let ((d1 (f64vector-ref variations (+ i1 i2)))
                             (d2 (f64vector-ref variations (+ j1 i2)))
                             (d3 (f64vector-ref variations (+ k1 i2)))
                             (d4 (f64vector-ref variations (+ l1 i2))))
                         (let ((d5 (/ (- (f64vector-ref variations (+ i1 i2 1)) d1) 8.))
                               (d6 (/ (- (f64vector-ref variations (+ j1 i2 1)) d2) 8.))
                               (d7 (/ (- (f64vector-ref variations (+ k1 i2 1)) d3) 8.))
                               (d8 (/ (- (f64vector-ref variations (+ l1 i2 1)) d4) 8.)))
                           (for (j2 0 (< j2 8) (increase! j2))
                                (let ((d9 d1)
                                      (d10 d2)
                                      (y (+ j2 (* i2 8))))
                                  (let ((d11 (/ (- d3 d1) 4.))
                                        (d12 (/ (- d4 d2) 4.)))
                                    (for (k2 0 (< k2 4) (increase! k2))
                                         (let ((d13 (/ (- d10 d9) 4.))
                                               (x (+ k2 (* i 4))))
                                           (let ((lvt-45-1 d9))
                                             (for (l2 0 (< l2 4) (increase! l2))
                                                  (let ((z (+ l2 (* l 4))))
                                                    (if (<= y (call-randomInt 5))
                                                        (block-set! x y z 7)
                                                      (if (> lvt-45-1 0.)
                                                          (block-set! x y z 1)
                                                        (when (< y sea-level)
                                                          (block-set! x y z 9)))))
                                                  (set! lvt-45-1 (+ lvt-45-1 d13)))
                                             (set! d9 (+ d9 d11))
                                             (set! d10 (+ d10 d12)))))
                                    (set! d1 (+ d1 d5))
                                    (set! d2 (+ d2 d6))
                                    (set! d3 (+ d3 d7))
                                    (set! d4 (+ d4 d8))))))))))))))


(let ((variations (make-f64vector 825 0.)))
  (define (block-ref x <fx> y <fx> z <fx>) <fx>
    2)
  
  (define (block-set! x <fx> y <fx> z <fx> val <fx>) <void>
    )
  
  (define (data-set! x <fx> y <fx> z <fx> val <fx>) <void>
    )
  
  (generate-blocks block-ref block-set! data-set! variations))))
