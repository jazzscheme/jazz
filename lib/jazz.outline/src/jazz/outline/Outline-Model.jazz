;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Outline Model
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.outline.Outline-Model jazz


(import (jazz.application)
        (jazz.graphic)
        (jazz.outline)
        (jazz.preferences)
        (jazz.text)
        (jazz.tree)
        (jazz.view))


(class Outline-Model extends View
  
  
  ;;;
  ;;;; Lexicon
  ;;;

  
  ;; visible : a row that has all its parents expanded
  ;; line    : the rank of a visible row

  
  (property protected default-row-height <fx> initialize 17 accessors generate)
  (property protected row-spacing        <fx> initialize 0  accessors explicit)
  (property protected left-padding       <fx> initialize 0  accessors explicit)
  (property protected top-padding        <fx> initialize 0  accessors explicit)
  (property protected background-filler       initialize #f accessors explicit)
  
  
  (slot protected root-row                    initialize #f getter generate)
  (slot protected visible-count          <fx> initialize 0  getter generate)
  (slot protected visible-height         <fx> initialize 0  getter generate)
  (slot protected visible-width          <fx> initialize 0  getter generate)
  (slot protected clients                     initialize '())
  

  ;;;
  ;;;; Initialization
  ;;;
  
  
  (method override (install self rest)
    (nextmethod self rest)
    (setup-outline self))
  
  
  (method override (finish self rest)
    (nextmethod self rest)
    (layout-scrollee self))
  
  
  (method override (set-player self plr)
    (when (neq? player plr)
      (nextmethod self plr)
      (when root-row
        (set-player root-row plr))))
  
  
  (method (setup-outline self)
    (set! root-row (new (row-class self)))
    (set-parent root-row self)
    (set-father root-row #f)
    (set-level root-row -1)
    (set-state root-row 'expanded))


  ;;;
  ;;;; Events
  ;;;
  
  
  (method override (size-change self size)
    (nextmethod self size)
    (unless (or update-locked? (not (get-finished? self)))
      (layout-scrollee self)))
  

  ;;;
  ;;;; Access
  ;;;
  
  
  (method public (get-row-spacing self)
    row-spacing)


  (method public (set-row-spacing self spacing)
    (set! row-spacing spacing)
    (update-displayed self)
    (invalidate-view self))

  
  (method public (get-left-padding self)
    left-padding)
  
  
  (method public (set-left-padding self padding)
    (set! left-padding padding)
    (invalidate-view self))
  
  
  (method public (get-top-padding self)
    top-padding)
  
  
  (method public (set-top-padding self padding)
    (set! top-padding padding)
    (invalidate-view self))
  

  (method public (get-background-filler self)
    background-filler)


  (method public (set-background-filler self value)
    (set! background-filler value)
    (invalidate-view self))


  ;;;
  ;;;; State
  ;;;
  
  
  (method public (get-expand-state self (include-invisibles?: include-invisibles? #f))
    (when root-row
      (letrec ((proc
                 (lambda (row)
                   (let ((title (row-title self row))
                         (state (get-state row))
                         (sons (get-sons row)))
                     (when (or (and include-invisibles? (> (cardinality sons) 0)) (eq? state 'expanded))
                       (cons title
                             (cons state
                                   (collect proc sons))))))))
        (collect proc (get-sons root-row) type: List))))
  
  
  (method public (set-expand-state self state)
    (define (set-state row info)
      (bind (title state . children) info
        (let ((subrow (find-by-title row title)))
          (when subrow
            (let ((actual (get-state subrow)))
              (if (eq? state 'expanded)
                  (unless (eq? actual 'expanded)
                    (expand/collapse self subrow))
                (when (and (eq? actual 'dynamic) children)
                  (update-row self subrow))))
            (iterate children
                     (lambda (info)
                       (set-state subrow info)))))))
    
    (when root-row
      (collapse-all-deep self)
      (for-each (lambda (info)
                  (set-state root-row info))
                state)))
  
  
  ;;;
  ;;;; Spine
  ;;;
  
  
  (method public (expand-spine self spine)
    (when root-row
      (letrec ((proc
                (lambda (row spine)
                  (bind (title . subspine) spine
                    (let ((subrow (find-by-title row title)))
                      (when subrow
                        (let ((actual (get-state subrow)))
                          (unless (or (eq? actual 'expanded) (null? subspine))
                            (expand/collapse self subrow)))
                        (if (null? subspine)
                            subrow
                          (proc subrow subspine))))))))
        (proc root-row spine))))
  

  ;;;
  ;;;; Layout
  ;;;
  
  
  (method override (layout-scrollee-content self)
    (define (layout-rows)
      (let ((width (- (get-width self) left-padding))
            (row (get-next root-row))
            (rt top-padding))
        (while row
          (let* ((height (effective-row-height row))
                 (rb (+ rt height)))
            (set-position row (new Point left-padding rt))
            (set-size row (new Dimension width height))
            (set! rt rb)
            (set! row (get-next row))
            (increase! rt row-spacing)))))
    
    (layout-rows))
  

  ;;;
  ;;;; Scrollee
  ;;;
  
  
  (method override (scrollee-width self)
    (+ left-padding visible-width))
  
  
  (method override (scrollee-height self)
    (+ top-padding visible-height))
  
  
  (method package (scrollee-content-size self)
    (new Dimension (scrollee-content-width self) (scrollee-content-height self)))
  
  
  (method public virtual (scrollee-content-width self)
    (+ left-padding visible-width))
  
  
  (method public virtual (scrollee-content-height self)
    (+ top-padding visible-height))
  
  
  ;;;
  ;;;; Update
  ;;;
  
  
  (method override (invalidate-update self)
    (update-visible self)
    (layout-scrollee self))
  
  
  (method public virtual (update-visible self)
    )


  ;;;
  ;;;; Drawing
  ;;;
  
  
  (method package virtual (draw-outline self surface context outline scrolled-v)
    (define (draw-row row line)
      (let ((selected? #f @mvc (line-draw-selected? line)))
        (set-font surface (effective-font self))
        (let ((new-context (cons selected?: (cons selected? (cons line: (cons line context))))))
          (paint-content row surface #t '() new-context))))
    
    (let ((clipper (get-clipper surface)))
      (let ((top (get-top clipper))
            (bottom (get-bottom clipper))
            (row (get-first-displayed outline))
            (line <fx> (get-first-displayed-line outline))
            (rt <fx> (+ scrolled-v (- top-padding (get-first-displayed-offset outline))))
            (width <fx> (get-width self)))
        (while (and row (< rt bottom))
          (let* ((height <fx> (get-height row))
                 (rb <fx> (+ rt height)))
            (when (>= rb top)
              (draw-row row line))
            (increase! line)
            (set! rt rb)
            (set! row (get-next row))
            (increase! rt row-spacing)))
        (draw-empty self surface top bottom rt width))))
  
  
  (method protected virtual (draw-empty self surface top bottom rt width)
    )

  
  ;;;
  ;;;; Rows
  ;;;
  
  
  (method protected virtual (row-class self)
    Outline-Row)

  
  (method public (add-row self . rest)
    (bind-keywords ((class (row-class self)) (row #f) (father #f) (position #f) . others) rest
      (let* ((father (or father root-row))
             (level (+ (get-level father) 1))
             (row (or row (apply new class parent: self others))))
        (set-height-noevent row default-row-height)
        (set-descendants-level row level)
        (add-son father row position)
        (when (row-visible? row)
          (increase! visible-count (+ 1 (count-visible row)))
          (when (not update-locked?)
            (let ((height (node-height row)))
              (increase! visible-height height)
              (update-visible-width-incremental self level (get-effective-width row))
              (update-displayed self)
              (update-visible self)
              (layout-scrollee self)
              (for-each-client self add-row-scroll))))
        (update-father-control self father)
        row)))
  
  
  ;; is this really necessary?
  (method protected virtual (update-visible-width-incremental self level width)
    )

  
  (method public virtual (remove-row self row)
    (when (attached? row)
      (let* ((father (get-father row))
             (visible? (row-visible? row))
             (height (node-height row))
             (line (row->line self row))
             (top (and line (row-top self line))))
        (when visible?
          (decrease! visible-count (+ 1 (count-visible row)))
          (decrease! visible-height height))
        (remove-son father row)
        @is-this-really-a-good-idea
        (when (= (cardinality (get-sons father)) 0)
          (set-state father 'collapsed))
        @mvc
        (when line
          (removed-update-selection line 1))
        (when (and (not update-locked?) visible?)
          (update-displayed self)
          (update-visible self)
          (layout-scrollee self)
          (for-each-client self remove-row-scroll))
        (detach-descendants row)
        (update-father-control self father))))
  
  
  (method public (move-row self row father (position: position #f))
    (remove-row self row)
    (let ((position (if (procedure? position) (position) position)))
      (add-row self row: row father: father position: position)))
  
  
  (method public (find-ordered-position self title father)
    (if (not title)
        0
      (ordered-position title (get-sons father) key: (~ row-title self) test: (sort-predicate 'smaller/equal))))
  
  
  (method public virtual (remove-every-row self)
    (set! visible-count 0)
    (set! visible-height 0)
    (set! visible-width 0)
    (for-each-client self remove-every-row))
  
  
  (method package virtual (update-father-control self father)
    (for-each-client self
      (lambda (view)
        (update-father-control view father))))
  
  
  (method override (update-displayed self)
    (for-each-client self update-displayed))
  
  
  (method package (update-displayed-from self line)
    (for-each-client self
      (lambda (client)
        (update-displayed-from client line))))
  
  
  (method public (first-row self)
    (first (get-sons root-row)))
  
  
  (method public (get-root-rows self)
    (get-sons root-row))
  
  
  (method public (first-visible-row self)
    (get-next root-row))
  
  
  (method public (get-visible-row self l)
    (continuation-capture
      (lambda (return)
        (for-each-visible-row self
          (lambda (row line)
            (when (= line l)
              (continuation-return return row))))
        #f)))
  
  
  ;; for debugging...
  (method (get-row-classic self line)
    (let ((row root-row))
      (while (and row (>= line 0))
        (set! row (get-next row))
        (decrease! line))
      row))
  
  
  (method public (row->line self target)
    (continuation-capture
      (lambda (return)
        (for-each-visible-row self
          (lambda (row line)
            (when (eq? row target)
              (continuation-return return line))))
        #f)))
  
  
  (method public (rows->lines self targets)
    (map (~ row->line self) targets))
  
  
  (method public (row-title self row)
    (get-title (first-child row)))
  
  
  (method (forward self row line)
    (while (> line 0)
      (set! row (get-next row))
      (decrease! line))
    row)
  
  
  (method package (backward self row line)
    (while (> line 0)
      (set! row (get-previous row))
      (decrease! line))
    row)
  
  
  (method public (ensure-row-exists self row)
    (ensure-visible-count self (+ row 1)))
  
  
  (method public (ensure-visible-count self line)
    (while (< visible-count line)
      (add-empty-row self)))
  
  
  (method public virtual (add-empty-row self (father: father #f))
    (let ((father (or father root-row)))
      (add-row self father: father)))
  

  (method public (get-row-count self)
    (if (not root-row)
        0
      (cardinality (get-sons root-row))))
  
  
  ;;;
  ;;;; Navigation
  ;;;
  
  
  (method public (for-each-row self proc)
    (let ((line 0))
      (define (recurse row visible?)
        (let* ((visible? (and visible? (get-visible-flag row)))
               (son-visible? (and visible? (expanded? row))))
          (proc row (and visible? line))
          (when visible?
            (increase! line))
          (recurse-sons row son-visible?)))
      
      (define (recurse-sons row son-visible?)
        (iterate (get-sons row)
                 (lambda (row)
                   (recurse row son-visible?))))
      
      (recurse-sons root-row #t)))
  
  
  (method public (for-each-visible-row self proc (start: start #f) (end: end #f) (wrap?: wrap? #f))
    (let ((row (or start (get-next root-row)))
          (line (if start (row->line self start) 0)))
      (when line
        (while (and row (neq? row end))
          (proc row line)
          (set! row (get-next row))
          (increase! line))
        (when (and wrap? start (not row))
          (for-each-visible-row self proc end: (or end start))))))
  
  
  (method public (for-each-visible-descendant self parent-row proc)
    (let* ((first-son (first-visible-son parent-row))
           (last-son (last-visible-descendant parent-row))
           (end-row (and last-son (get-next last-son))))
      (when first-son
        (for-each-visible-row self proc start: first-son end: end-row))))
  
  
  (method public (collect-rows self)
    (let ((queue (new-queue)))
      (for-each-row self
        (lambda (row line)
          (enqueue queue row)))
      (queue-list queue)))
  
  
  (method public (collect-visible-rows self)
    (let ((queue (new-queue)))
      (for-each-visible-row self
        (lambda (row line)
          (enqueue queue row)))
      (queue-list queue)))

  
  ;;;
  ;;;; Content
  ;;;
  
  
  (method public virtual (get-content self)
    (get-sons root-row))
  
  
  (method public virtual (set-content self content)
    (set-sons root-row content)
    (set-next root-row (car content))
    (invalidate-columns self)
    (set! visible-count (count-visible root-row))
    (set! visible-height (sons-height root-row))
    (update-displayed self)
    (layout-scrollee self)
    (invalidate-view self))
  
  
  (method public (set-subrows self row seq proc)
    (unless (empty? seq)
      (let* ((row (or row root-row))
             (count 0)
             (height 0)
             (level (+ (get-level row) 1))
             (previous #f)
             (rows (map (lambda (info)
                          (let ((subrow (proc info)))
                            (set-father subrow row)
                            (set-level subrow level)
                            (when previous
                              (set-previous subrow previous)
                              (set-next previous subrow))
                            (set! previous subrow)
                            (increase! count)
                            (increase! height (get-row-height subrow))
                            subrow))
                        seq)))
        (set-sons row (and rows (coerce rows Axis)))
        (when (eq? (get-state row) 'expanded)
          (let ((old-next (get-next row))
                (first-son (first rows)))
            (link-rows row first-son)
            (let ((last (last-proper-descendant row)))
              (link-rows last old-next)))
          (increase! visible-count count)
          (increase! visible-height height)))))
  
  
  ;; temp...
  (method public virtual (invalidate-columns self)
    )


  ;;;
  ;;;; State
  ;;;
  
  
  (method public virtual (expand/collapse self row)
    (case (get-state row)
      ((collapsed) (expand self row))
      ((expanded) (collapse self row))))
  
  
  (method package virtual (update-row self row)
    )
  
  
  (method public (expand self row (dynamic? #f))
    (when (neq? (get-state row) 'expanded)
      (set-state row 'expanded)
      (let ((first (first-descendant row))
            (last (last-visible-descendant row))
            (previous row)
            (next (get-next row))
            (in-expand? #t))
        (when first
          (show-rows self first last previous next (row-visible? row) in-expand? dynamic?)))))
  
  
  (method protected virtual (invalidate-expand self row top dynamic?)
    )
  
  
  (method public (expand-all self row)
    (with-update-locked self
      (lambda ()
        (unless (eq? (get-state row) 'expanded)
          (expand/collapse self row))
        (iterate (get-sons row) (~ expand-all self)))))
  
  
  (method public (collapse self row)
    (when (neq? (get-state row) 'collapsed)
      (let ((first (first-descendant row))
            (in-collapse? #t))
        (if (not first)
            (set-state row 'collapsed)
          (let ((line (row->line self row))
                (top (get-v (get-position row))))
            (let ((selected? #f @mvc (line-selected? line)))
              (invalidate-collapse self line row top selected?)))
          (hide-rows self first (last-proper-descendant row) (row-visible? row) in-collapse?)))))
  
  
  (method protected virtual (collapse-selection self line selected?)
    )
  
  
  (method protected virtual (invalidate-collapse self line row top selected?)
    (when selected?
      @mvc
      (invalidate-rect (line-rect line))))
  
  
  (method public (collapse-all self row)
    (with-update-locked self
      (lambda ()
        (iterate (get-sons row) (~ collapse-all self))
        (when (eq? (get-state row) 'expanded)
          (expand/collapse self row)))))
  
  
  (method public (collapse-all-deep self)
    (with-update-locked self
      (lambda ()
        (define (collapse-sons row)
          (iterate (get-sons row) collapse))
        
        (define (collapse row)
          (when (eq? (get-state row) 'expanded)
            (collapse-sons row)
            (expand/collapse self row)))
        
        (collapse-sons root-row))))
  
  
  (definition (link-rows before after)
    (when before
      (set-next before after))
    (when after
      (set-previous after before)))
  
  
  (definition (unlink-rows first last)
    (let ((previous (get-previous first))
          (next (get-next last)))
      (link-rows previous next)
      (set-previous first #f)
      (set-next last #f)))
  
  
  (method public (ensure-expanded self row)
    (let ((scan (get-father row)))
      (while scan
        (when (eq? (get-state scan) 'collapsed)
          (expand self scan))
        (set! scan (get-father scan)))))
  
  
  (method public (ensure-expanded-rows self rows)
    (for-each (~ ensure-expanded self) rows))


  ;;;
  ;;;; Visibility
  ;;;
  
  
  ;; this will currently only work with flat outlines
  (method public (set-visibilities self predicate)
    (let ((previous root-row))
      (iterate (get-sons root-row)
               (lambda (row)
                 (let ((visible? (predicate row)))
                   (when visible?
                     (link-rows previous row)
                     (set! previous row)))))))
  
  
  (method package (show-rows self first last previous next visible? in-expand? dynamic?)
    (link-rows previous first)
    (link-rows last next)
    (when (and (not update-locked?) visible?)
      (receive (count height width) (count-visible-size self first last #t)
        (increase! visible-count count)
        (increase! visible-height height)
        (update-visible-width-incremental self (get-level previous) width)
        (update-displayed self)
        (update-visible self)
        (let* ((line (or (row->line self previous) -1))
               (top (or (get-v (get-position previous)) 0))
               (opens (+ top (get-height previous)))
               (display (get-display self))
               (display-size (get-size display))
               (display-width (get-width display-size))
               (display-height (get-height display-size)))
          @mvc (added-update-selection (+ line 1) count)
          (invalidate-view self)
          @buggy
          (when (< (+ top (get-scrolled-v)) display-height)
            (when in-expand?
              (invalidate-expand previous top dynamic?))
            (scroll-view display (new Distance 0 height) (new Rect 0 opens display-width display-height)))
          (layout-scrollee self)
          @mvc
          (when (> count 0)
            (ensure-row-range-displayed (+ line 1) (+ line count)))))))
  
  
  (method package (hide-rows self first last visible? in-collapse?)
    (receive (count height width) (count-visible-size self first last visible?)
      (when visible?
        (decrease! visible-count count)
        (decrease! visible-height height))
      (let ((previous (get-previous first)))
        (unlink-rows first last)
        (when (and previous in-collapse?)
          (set-state previous 'collapsed))
        (when (and (not update-locked?) visible?)
          (update-displayed self)
          (update-visible self)
          (let* ((line (or (row->line self previous) -1))
                 (top (or (get-v (get-position previous)) 0))
                 (opens (+ top (get-height first)))
                 @mvc (removed (removed-update-selection (+ line 1) count))
                 (display (get-display self))
                 (display-size (get-size display))
                 (display-width (get-width display-size))
                 (display-height (get-height display-size)))
            @mvc (when (and previous in-collapse?)
              (collapse-selection line removed))
            (invalidate-view self)
            @buggy
            (when (< top display-height)
              (invalidate-collapse line first top removed)
              (scroll-view display (new Distance 0 (- height)) (new Rect 0 (+ opens height) display-width (+ display-height height)))))
          (layout-scrollee self)))))
  
  
  (method public (count-visible-size self first last visible?)
    (let ((scan (and visible? first))
          (stop (and last (get-next last)))
          (count 0)
          (height 0)
          (width 0))
      (while (and scan (neq? scan stop))
        (increase! count)
        (increase! height (+ (get-effective-height scan) row-spacing))
        (let ((w (get-effective-width scan)))
          (when (and w (> w width))
            (set! width w)))
        (set! scan (get-next scan)))
      (values count height width)))
  
  
  ;;;
  ;;;; Clients
  ;;;
  
  
  (method public (get-clients self)
    clients)
  
  
  (method public (add-client self client)
    (set! clients (cons client clients)))
  
  
  (method public (remove-client self client)
    (set! clients (remove! client clients)))
  
  
  (method public (for-each-client self proc)
    (for-each proc clients))
  
  
  ;; quick solution to stuff like wrapping that cannot work on multiple clients with the current paragraph / line structure
  (method public (single-client self) <Text-View+>
    (and (= (length clients) 1)
         (car clients)))
  

  ;;;
  ;;;; Coordinates
  ;;;
  
  
  ;; This method gets called before the row is layed out.
  ;; This is why it cannot simply get the position of the row...
  (method protected (row-top self line)
    (let ((row (first-visible-row self))
          (v 0))
      (while (> line 0)
        (decrease! line)
        (increase! v (get-height row))
        (increase! v row-spacing)
        (set! row (get-next row)))
      v))
  
  
  (method package (get-row self n)
    (get-row-from self root-row (+ n 1)))
  
  
  (method package (get-row-from self row n)
    (while (and row (> n 0))
      (set! row (get-next row))
      (decrease! n))
    row)
  
  
  ;;;
  ;;;; Descriptor
  ;;;
  
  
  (method meta override (get-class-descriptor self (context: context #f))
    (new jazz.outline.descriptors:Outline-Model-Descriptor))))
