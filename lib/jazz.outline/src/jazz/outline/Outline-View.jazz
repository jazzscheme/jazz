;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Outline View
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.outline.Outline-View jazz


(import (jazz.event)
        (jazz.graphic)
        (jazz.outline)
        (jazz.view))


(class Outline-View extends View
  
  
  ;;;
  ;;;; Lexicon
  ;;;

  
  ;; displayed : a row that is displayed in the scroller even if only partially
  
  
  (property protected left-padding       <fx> initialize 0  accessors explicit)
  (property protected top-padding        <fx> initialize 0  accessors explicit)
  (property protected background-filler       initialize #f accessors explicit)
  (property protected fit-to-scroller?        initialize #t accessors explicit)
  
  
  (slot protected model              initialize #f)
  (slot protected outline            initialize #f getter generate)
  (slot protected selection          initialize '())
  (slot protected line-size   <fx>   initialize 16)
  (slot protected page-size   <fx>   initialize 320)
  (slot protected hscrollbar? <bool> initialize #f)
  (slot protected vscrollbar? <bool> initialize #f)
  

  ;;;
  ;;;; Initialization
  ;;;
  
  
  (method override (prepare self rest)
    (nextmethod self rest)
    (setup-model self (new-model self)))
  
  
  (method protected virtual (new-model self)
    )
  
  
  (method protected virtual (setup-model self mdl)
    (set! model mdl)
    (setup-outline self)
    (add-client model self))
  
  
  (method (setup-outline self)
    (set! outline (new Display-Outline (get-row-spacing model) (get-root-row model)))
    (update-displayed self))
  
  
  (method override (finish self rest)
    (nextmethod self rest)
    (layout-scrollee self))
  
  
  (method override (destroy self)
    (remove-client model self)
    (nextmethod self))


  ;;;
  ;;;; Events
  ;;;
  
  
  (method override (size-change self size)
    (nextmethod self size)
    (unless (or update-locked? (not (get-finished? self)))
      (layout-scrollee self)))
  

  ;;;
  ;;;; Access
  ;;;
  
  
  (method public (get-model self)
    model)
  
  
  (method public (set-model self model)
    (setup-model self model)
    (layout-scrollee self)
    (invalidate-view self))

  
  (method public (get-left-padding self)
    (get-left-padding model))
  
  
  (method public (set-left-padding self padding)
    (set-left-padding model padding))
  
  
  (method public (get-top-padding self)
    (get-top-padding model))
  
  
  (method public (set-top-padding self padding)
    (set-top-padding model padding))
  

  (method public (get-background-filler self)
    background-filler)


  (method public (set-background-filler self value)
    (set! background-filler value)
    (invalidate-view self))
  

  (method public (get-fit-to-scroller? self)
    fit-to-scroller?)


  (method public (set-fit-to-scroller? self value)
    (set! fit-to-scroller? value)
    (layout-scrollee self))
  
  
  ;;;
  ;;;; Hierarchy
  ;;;
  
  
  (method override (find-subdrawing self surface <Surface> device-pos <Point> pos <Point> ignore)
    (let ((line (v->line self (get-v pos))))
      (and line
           (let ((row (cast <Outline-Row> (get-row self line))))
             (find-in-drawing row surface device-pos ignore)))))
  

  ;;;
  ;;;; Layout
  ;;;
  
  
  (method override (layout-scrollee-content self)
    (layout-scrollee-content model))
  

  ;;;
  ;;;; Scrollee
  ;;;
  
  
  (method override (scrollee-width self)
    (let ((width (scrollee-width model)))
      (if (and scroller fit-to-scroller?)
          (max (get-display-width self) width)
        width)))
  
  
  (method override (scrollee-height self)
    (let ((height (scrollee-height model)))
      (if (and scroller fit-to-scroller?)
          (max (get-display-height self) height)
        height)))
  
  
  (method package (scrollee-content-size self)
    (scrollee-content-size model))
  
  
  (method public virtual (scrollee-content-width self)
    (scrollee-content-width model))
  
  
  (method public virtual (scrollee-content-height self)
    (scrollee-content-height model))
  
  
  ;;;
  ;;;; Update
  ;;;
  
  
  (method override (invalidate-update self)
    (invalidate-update model)
    (update-displayed self)
    (layout-scrollee self)
    (invalidate-view self)
    (update-scrollbars self))


  ;;;
  ;;;; Drawing
  ;;;
  
  
  (method override (draw-background self surface context)
    (let ((background (cond ((debug-paint?)
                             (cycle-debug-color!))
                            ((not (view-enabled? self))
                             {Color Medium})
                            (else
                             (get-drawing-background self context)))))
      (when (and background (neq? background 'none))
        (let ((bounds (get-bounds self)))
          (fill-rect surface bounds background)))))
  
  
  (method override (draw-children self surface nodes context)
    (draw-outline model surface context outline (get-scrolled-distance-v self)))

  
  ;;;
  ;;;; Rows
  ;;;
  
  
  (method public (get-root-row self)
    (get-root-row model))
  
  
  (method public (get-row self line <fx>) <Outline-Row+>
    ;; this test is necessary because an update lock will stop update-displayed...
    (if update-locked?
        (get-row-from outline (get-root-row model) (+ line 1))
      (get-row outline line)))


  (method package (call-with-v->line self v proc)
    (call-with-v->line outline v (get-scrolled-v self)
      proc))


  ;;;
  ;;;; Scroll
  ;;;
  
  
  (method package (on-prior self evt)
    (prior-page self (get-shift? evt)))
  
  
  (method package virtual (prior-page self evt)
    (scroll self (new Point 0 (get-page-size self 'vert))))
  
  
  (method package (on-next self evt)
    (next-page self (get-shift? evt)))
  
  
  (method package virtual (next-page self evt)
    (scroll self (new Point 0 (- (get-page-size self 'vert)))))
  
  
  (method override (get-line-size self orientation)
    (case orientation
      ((vert) (get-default-row-height model))
      ((horz) 8)))
  
  
  (method override (scroll-invalidate self delta)
    (follow self (- (get-y delta))))

  
  ;;;
  ;;;; Rows
  ;;;
  
  
  (method package (add-row-scroll self)
    @mvc
    (let* ((line (row->line row))
           (top (row-top line))
           (display (get-display))
           (display-size (get-size display))
           (display-width (get-width display-size))
           (display-height (get-height display-size)))
      (added-update-selection line 1)
      (layout-scrollee)
      (when (< top (- display-height height))
        (scroll-view display (new Distance 0 height) (new Rect 0 top display-width (- display-height height))))))
  
  
  (method package (remove-row-scroll self)
    @mvc
    (let* ((display (get-display))
           (display-size (get-size display))
           (display-width (get-width display-size))
           (display-height (get-height display-size)))
      (layout-scrollee)
      (when (and top (< (+ top height) display-height))
        (scroll-view display (new Distance 0 (- height)) (new Rect 0 (+ top height) display-width display-height)))))
  
  
  (method package (remove-every-row self)
    (setup-outline self)
    (reset-selection self)
    (when scroller
      (set-position self {Point 0 0})
      (set-size self {Dimension 0 0})
      (set-scroll-pos self {Point 0 0}))
    (unless update-locked?
      (update-displayed self)
      (layout-scrollee self)
      (invalidate-view self)))
  
  
  (method package virtual (reset-selection self)
    (set! selection '()))
  
  
  (method package virtual (update-father-control self father)
    )
  
  
  (method override (update-displayed self)
    (update-displayed outline (get-scrolled-distance-v self)))
  
  
  (method package (update-displayed-from self line)
    ;; would < be sufficient?
    (when (<= line (get-first-displayed-line outline))
      (update-displayed self)))


  ;;;
  ;;;; Mouse
  ;;;
  
  
  (method override (mouse-down self evt)
    (acquire-focus self)
    (let ((line (v->line self (get-v (get-position evt)))))
      (set-selection self line)))
  
  
  (method override (double-click self evt)
    (let ((line (v->line self (get-v (get-position evt)))))
      (when line
        (expand/collapse model (get-row self line)))))

  
  ;;;
  ;;;; Selection
  ;;;
  
  
  (method protected virtual (empty-selection self)
    '())
  
  
  (method public virtual (get-selection self)
    selection)
  
  
  (method public virtual (set-selection self sel
                                        (force?: force? #f)
                                        (ensure-displayed?: ensure-displayed? #t)
                                        (generate-event?: generate-event? #t)
                                        (user-origin: user-origin #f))
    (when (or force? #t @parameterized-fix-me (/= sel selection))
      (let ((old selection))
        (set! selection sel)
        (when ensure-displayed?
          (ensure-displayed self))
        (when (not-null? old)
          (invalidate-selection self old))
        (when (not-null? selection)
          (invalidate-selection self selection))
        (when generate-event?
          (call-selection-handler self old selection force? user-origin)))))

  
  (method public virtual (invalidate-selection self sel)
    (when (view-visible? self)
      (with-transformation-surface self
        (lambda (surface)
          (with ((region (selection-region self sel (lambda (rect) (logical->device surface rect)))))
            (invalidate-region player region))))))
  
  
  (method protected virtual (selection-region self sel transformer)
    (selection-row-region self sel transformer))
  
  
  (method protected (selection-row-region self line transformer)
    (new Region rect: (transformer (selection-row-rect self line))))
    
  
  (method protected virtual (selection-row-rect self line)
    (get-rect (get-row self line)))

  
  ;; update slots that are line based
  (method protected virtual (added-update-selection self line count)
    (when (and selection (>= selection line))
      (increase! selection count)))
  
  
  ;; update slots that are line based
  (method protected virtual (removed-update-selection self line count)
    (when (not-null? selection)
      (let ((selected? #f))
        (when (>= selection line)
          (if (>= selection (+ line count))
              (decrease! selection count)
            (set! selection '())
            (set! selected? #t)))
        selected?)))
  
  
  (method protected virtual (line-selected? self line)
    (= line selection))
  
  
  (method protected virtual (line-draw-selected? self line)
    (line-selected? self line))
  
  
  ;;;
  ;;;; Scroll
  ;;;
  
  
  (method package (follow self v)
    (follow outline (get-scrolled-distance-v self) v))


  (method public virtual (ensure-displayed self . rest)
    (when (not-null? selection)
      (ensure-row-displayed self selection)))
  
  
  (method public (ensure-row-displayed self line)
    (let* ((row (get-row self line))
           (top (get-top row))
           (bottom (get-bottom row)))
      (scroll self (scroll-needed self (new Point 0 top) (new Point 0 bottom) (get-scroll-context self)))))
  
  
  (method public (ensure-row-range-displayed self from to)
    (let ((top (get-top (get-row self from)))
          (bottom (get-bottom (get-row self to))))
      (scroll self (scroll-needed self (new Point 0 top) (new Point 0 bottom) (get-scroll-context self)))))
  
  
  (method public (ensure-at-end self)
    (ensure-row-displayed self (- (get-visible-count model) 1)))
  
  
  (method protected virtual (get-scroll-context self)
    (cons 0.15 0.20))
  

  ;;;
  ;;;; Coordinates
  ;;;
  
  
  ;; This method gets called before the row is layed out.
  ;; This is why it cannot simply get the position of the row...
  (method protected (row-top self line)
    (let ((row (first-visible-row model))
          (v 0))
      (while (> line 0)
        (decrease! line)
        (increase! v (get-height row))
        (increase! v (get-row-spacing model))
        (set! row (get-next row)))
      v))
  
  
  (method protected virtual (line-rect self line)
    (let ((row   (get-row self line))
          (left  0)
          (top   (row-top self line))
          (right (get-width self)))
      (new Rect left top right (+ top (get-height row)))))
  
  
  (method (row-region self line)
    (new Region rect: (get-bounds (get-row self line))))
  
  
  (method protected (line->v self l)
    (get-top (get-row self l)))


  (method package (v->line self v)
    (call-with-v->line self v
      (lambda (line v height)
        line)))
  
  
  ;;;
  ;;;; Descriptor
  ;;;
  
  
  (method meta override (get-class-descriptor self (context: context #f))
    (new jazz.outline.descriptors:Outline-View-Descriptor))))
