;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Picker
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module jazz.picker jazz


(hub change-highlight-rect)
(hub default-highlight)
(hub get-click)
(hub get-highlight)
(hub get-highlighted-position)
(hub get-highlighted-rect)
(hub get-highlighted-view)
(hub get-last-cell-rect)
(hub get-last-view-rect)
(hub update-highlight)


(import (jazz.action)
        (jazz.application)
        (jazz.component)
        (jazz.event)
        (jazz.feedback)
        (jazz.geometry)
        (jazz.graphic)
        (jazz.handler)
        (jazz.ui)
        (jazz.ui.development)
        (jazz.view)
        (jazz.window))


;; Lexicon
;; - overlay : view added to the root to override mouse events


(definition In-Pick?
  #f)

(definition All-Overlays
  '())

(definition *highlighted-overlay*
  #f)


(definition public (pick-figure (include: include #f)
                                (exclude: exclude #f)
                                (click: click #f)
                                (menu: menu #f)
                                (highlight: highlight #f)
                                (highlight-root-only?: highlight-root-only? #f)
                                (report-figure?: report-figure? #t)
                                (obscure-unhighlighted?: obscure-unhighlighted? #t)
                                (tooltips?: tooltips? #t))
  (unless In-Pick?
    (with-locked-update
      (lambda ()
        (let ((windows (process-windows)))
          (when (not-null? windows)
            (setup-pick)
            (set! All-Overlays '())
            (for-each (lambda (overlapped)
                        (when (and (or (not include) (memq? overlapped include))
                                   (or (not exclude) (not (memq? overlapped exclude))))
                          (let ((overlay (install-overlay overlapped click menu highlight highlight-root-only? report-figure? obscure-unhighlighted? tooltips?)))
                            (invalidate-view overlay)
                            (set! All-Overlays (cons overlay All-Overlays)))))
                      windows)
            (simulate-mouse-move (current-toplevel))
            (set! In-Pick? #t)))))))


(definition (install-overlay overlapped click menu highlight highlight-root-only? report-figure? obscure-unhighlighted? tooltips?)
  (let ((old-root (get-root overlapped))
        (new-root (new Picker-Root)))
    (set-parent old-root new-root)
    (set-root overlapped new-root detach?: #f)
    (new Picker-Overlay
      parent: new-root
      position: {Point 0 0}
      size: (get-size new-root)
      click: click
      menu: menu
      highlight: highlight
      highlight-root-only?: highlight-root-only?
      report-figure?: report-figure?
      obscure-unhighlighted?: obscure-unhighlighted?
      tooltips?: tooltips?)))


(definition (remove-overlay overlay)
  (let ((overlapped (get-overlapped overlay))
        (new-root (get-root overlay)))
    (when new-root
      (let ((old-root (first-child new-root)))
        (set-parent old-root #f)
        (set-root overlapped old-root)))
    (close overlay)))


(definition (root-overlay root)
  (second (get-children root)))


(definition (shortcut-hook shortcut)
  (cond ((shortcut=? shortcut {Shortcut Escape})
         (with-locked-update
           (lambda ()
             (end-pick)
             (clear-user-message)))
         #f)
        ((not *highlighted-overlay*)
         #f)
        (else
         (let ((highlighted-view (get-highlighted-view *highlighted-overlay*))
               (highlighted-position (get-highlighted-position *highlighted-overlay*)))
           (define (setup-view view)
             (let ((pos (acquire view highlighted-view highlighted-position)))
               (default-highlight *highlighted-overlay* view pos)
               (update-tooltip view (display-description (view-describe view pos)))
               (user-message "{a}" view)))
           
           (cond ((shortcut=? shortcut {Shortcut Up})
                  (if (eq? (get-highlighted-rect *highlighted-overlay*)
                           (get-last-cell-rect *highlighted-overlay*))
                      (change-highlight-rect *highlighted-overlay* (get-last-view-rect *highlighted-overlay*))
                    (let ((parent (find-ascendant highlighted-view View)))
                      (if (or (not parent) (is? parent Picker-Root))
                          (bell)
                        (setup-view parent))))
                  #t)
                 ((shortcut=? shortcut {Shortcut Down})
                  (let ((first (first-view highlighted-view)))
                    (if (not first)
                        (bell)
                      (setup-view first)))
                  #t)
                 ((shortcut=? shortcut {Shortcut Right})
                  (let ((brother (next-brother highlighted-view type: View)))
                    (if (eq? brother highlighted-view)
                        (bell)
                      (setup-view brother)))
                  #t)
                 ((shortcut=? shortcut {Shortcut Left})
                  (let ((brother (previous-brother highlighted-view type: View)))
                    (if (eq? brother highlighted-view)
                        (bell)
                      (setup-view brother)))
                  #t)
                 ((shortcut=? shortcut {Shortcut Return})
                  (end-pick)
                  (let ((click (get-click *highlighted-overlay*)))
                    (click highlighted-view highlighted-position))
                  #f)
                 ((shortcut=? shortcut {Shortcut F8})
                  (end-pick)
                  ;; quick solution
                  (simulate-mouse-move (current-toplevel))
                  #t)
                 (else
                  #f))))))


(definition (display-description description)
  `(<span>
     "Properties"
     ,@(map (lambda (info)
              (bind (name value) info
                `(<bulleted> ,(format "{a}: {s}" name value))))
            description)))


(definition (setup-pick)
  (set-shortcut-hook (current-application) shortcut-hook))


(definition (end-pick)
  (define (close-overlays)
    (for-each remove-overlay All-Overlays)
    (set! All-Overlays '()))
  
  (set! In-Pick? #f)
  (set-shortcut-hook (current-application) #f)
  (close-overlays)
  (simulate-mouse-move (current-toplevel)))


;;;
;;;; Root
;;;


(class Picker-Root extends View)


;;;
;;;; Overlay
;;;


(class Picker-Overlay extends View
  
  
  (property click                  accessors generate)
  (property menu                   accessors generate)
  (property highlight              accessors generate)
  (property highlight-root-only?   accessors generate)
  (property report-figure?         accessors generate)
  (property obscure-unhighlighted? accessors generate)
  (property tooltips?              accessors generate)
  
  
  (slot highlighted-view     initialize #f getter generate)
  (slot highlighted-rect     initialize #f getter generate)
  (slot highlighted-position initialize #f getter generate)
  (slot last-mouse-position  initialize #f getter generate)
  (slot last-cell-rect       initialize #f getter generate)
  (slot last-view-rect       initialize #f getter generate)
  
  
  ;;;
  ;;;; Cursor
  ;;;
  
  
  (method override (cursor-update self evt)
    (set-cursor :spy))
  
  
  ;;;
  ;;;; Tooltip
  ;;;
  
  
  (method override (close-self-tooltip self)
    (when *current-tooltip-context*
      (close-tooltip self)))
  
  
  (method override (get-tooltip? self)
    tooltips?)
  
  
  (method override (get-formatted-tooltip? self)
    #t)
  
  
  (definition (calculate-tooltip-bounds view pos)
    (if view
        (values (get-tooltip-bounds view pos)
                (let ((display (get-display view)))
                  (acquire view display (get-bounds display))))
      (values #f #f)))
  
  
  (method override (get-tooltip-bounds self pos)
    (receive (view pos) (find-view-info self pos)
      (receive (cell-rect view-rect) (calculate-tooltip-bounds view pos)
        (or cell-rect view-rect))))
  
  
  (method override (get-tooltip-context self pos)
    (receive (view pos) (find-view-info self pos)
      (and view
           (receive (cell-rect view-rect) (calculate-tooltip-bounds view pos)
             (new Tooltip-Context
               view: view
               text: (display-description (view-describe view pos))
               bounds: (or cell-rect view-rect)
               font: {Font Label})))))
  
  
  ;;;
  ;;;; Mouse
  ;;;
  
  
  (method override (mouse-move self evt)
    (nextmethod self evt)
    (let ((pos (get-position evt)))
      (unless (and last-mouse-position (nu=? last-mouse-position pos))
        (set! last-mouse-position pos)
        (receive (view pos) (find-view-info self pos)
          (case highlight
            ((#f))
            ((#t) (default-highlight self view pos))
            (else (highlight view pos)))
          (when report-figure?
            (if (not view)
                (user-message "{a}" self)
              (user-message "{a}" view)))))))
  
  
  (method override (mouse-up self evt)
    (nextmethod self evt)
    (receive (view pos) (find-view-info self (get-position evt))
      (with-locked-update
        (lambda ()
          (end-pick)
          (click view pos)))))
  
  
  (method (find-view-info self pos)
    (let* ((root (get-root self))
           (root-pos (acquire root self pos))
           (view (find-drawing root root-pos ignore: (list self)))
           (view-pos (and view (acquire view root root-pos))))
      (values view view-pos)))
  
  
  ;;;
  ;;;; Highlight
  ;;;
  
  
  (method package (default-highlight self view pos)
    (let ((root (get-root (get-player view))))
      (let ((overlay (root-overlay root)))
        (if highlight-root-only?
            (update-highlight self overlay view pos cell-rect: #f view-rect: (get-bounds root))
          (receive (cell-rect view-rect) (calculate-tooltip-bounds view pos)
            (update-highlight self overlay view pos
              cell-rect: (and cell-rect (acquire root view cell-rect))
              view-rect: (and view-rect (acquire root view view-rect))))))))
  
  
  (method package (change-highlight-rect self override-rect)
    (update-highlight self self highlighted-view highlighted-position override-rect: override-rect))
  
  
  (method package (update-highlight self overlay view pos (cell-rect: cell-rect last-cell-rect) (view-rect: view-rect last-view-rect) (override-rect: override-rect #f))
    (define (redraw same-overlay? overlay view)
      (if same-overlay?
          (when (and view
                     (get-root view))
            (let ((player (get-player view))
                  (rect (acquire (get-root view) view (inflate-rect (get-bounds view) 1 1))))
              (redraw-window player rect: rect)))
        (when overlay
          (redraw-view overlay))))
    
    (unless (and (eq? *highlighted-overlay* overlay)
                 (eq? highlighted-view view)
                 (eq? last-view-rect view-rect)
                 (eq? last-cell-rect cell-rect)
                 (not override-rect))
      (let ((same-overlay? (eq? overlay *highlighted-overlay*))
            (old-overlay *highlighted-overlay*)
            (old-view highlighted-view))
        (set! *highlighted-overlay* overlay)
        (set! highlighted-view view)
        (set! highlighted-rect (or override-rect cell-rect view-rect))
        (set! highlighted-position pos)
        (set! last-cell-rect cell-rect)
        (set! last-view-rect view-rect)
        (redraw same-overlay? old-overlay old-view)
        (redraw same-overlay? *highlighted-overlay* highlighted-view))))
  
  
  ;;;
  ;;;; Menu
  ;;;
  
  
  (method override (context-menu self evt)
    (define (setup-actions menu view pos)
      (for-each (lambda (item)
                  (let* ((action-handler (get-action-handler item))
                         (execute (lambda (event)
                                    (end-pick)
                                    (when action-handler
                                      (let* ((properties (augment view: view pos: pos (get-properties action-handler)))
                                             (event (apply make-event Action-Event :action self properties)))
                                        (invoke action-handler self event))))))
                    (set-action-handler item (new Event-Handler execute: execute))))
                (get-children menu)))
    
    (if (not menu)
        (nextmethod self evt)
      (let ((pos (get-position evt)))
        (close-popups self)
        (receive (view pos) (find-view-info self pos)
          (let ((root (get-root self))
                (menu (menu view pos)))
            (setup-actions menu view pos)
            (track-popup-menu root menu (acquire root view pos))
            processed)))))
  
  
  ;;;
  ;;;; Drawing
  ;;;
  
  
  (definition Overlay-Color
    {Color Black alpha: 0.25})
  
  (definition Highlight-Color
    {Color red: 109 green: 109 blue: 177})
  
  
  (method override (draw self surface context)
    (define (highlighter surface)
      (set-style surface 'solid)
      (set-line-width surface 2)
      (set-color surface Highlight-Color))
    
    (cond ((or (not *highlighted-overlay*) (neq? (get-root self) (get-root *highlighted-overlay*)))
           (when obscure-unhighlighted?
             (fill-rect surface (get-bounds self) Overlay-Color)))
          (highlighted-rect
           (rectangle surface highlighted-rect highlighter #f))))))
