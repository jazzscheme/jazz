;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; COM
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module jazz.platform.com jazz


(export (jazz.platform.com.syntax))
(import (jazz.platform.com.syntax (phase syntax))
        (jazz.foreign)
        (jazz.platform.types)
        (jazz.platform.windows.WinBase)
        (jazz.platform.windows.WinTypes)
        (jazz.platform.windows.WinKernel)
        (time))


;;;
;;;; HRESULT
;;;


(definition S_OK
  0)

(definition S_FALSE
  1)


(class COM-Exception extends Exception
  
  
  (slot code)
  (slot message)
  
  
  (method override (initialize self code message)
    (set! self.code code)
    (set! self.message message))
  
  
  (method override (print self output readably)
    (print-unreadable self output
      (lambda (output)
        (format output "#x{x}{? {a}~}" code message))))
  
  
  (method (get-code self)
    code)
  
  
  (method override (get-message self)
    (or message (format "COM exception (#x{x})" code))))


(c-type HRESULT (native unsigned-long))


(definition public (validate-hresult hresult)
  (case hresult
    ((0 1) ; S_OK or S_FALSE
     hresult)
    ((#x80004002)
     (error "ERROR - E_NOINTERFACE ({a})" hresult))
    ((#x80040154)
     (error "ERROR - class not registered ({a})" hresult))
    ((#x800401f0)
     (error "ERROR - CO_E_NOTINITIALIZED ({a})" hresult))
    ((#x80070057)
     (error "ERROR - E_INVALIDARG ({a})" hresult))
    ((#x800a0d5d)
     (error "ERROR - wrong value type ({a})" hresult))
    (else
     (throw (new COM-Exception hresult #f)))))


(definition public (validate-hresult-with-errorinfo hresult iunknown refiid)
  (define (extract-errorinfo-message)
    (receive (result isupport) (CoQueryNoValidate iunknown (com-interface-guid ISupportErrorInfo))
      (when (= result S_OK)
        (prog1
            (when (= (ISupportErrorInfo$InterfaceSupportsErrorInfo isupport refiid) S_OK)
              (let ((ierror (GetErrorInfo)))
                (when ierror
                  (receive (result message) (IErrorInfo$GetDescription ierror)
                    (CoRelease ierror)
                    (when (= result S_OK)
                      message)))))
          (CoRelease isupport)))))
  
  (case hresult
    ((0 1) ; S_OK or S_FALSE
     hresult)
    (else
     (let ((message (extract-errorinfo-message)))
       (if message
           (throw (new COM-Exception hresult message))
         (validate-hresult hresult))))))


;;;
;;;; BSTR
;;;


(c-type BSTR  (pointer (native wchar_t)))
(c-type BSTR* (pointer BSTR))


(c-external (BSTR*-make) :alloc BSTR*
  #/C/
    ___return(malloc(sizeof(BSTR)));
//#)


(definition public BSTR*-ref
  (let ((ref (c-function BSTR*-ref (BSTR*) BSTR "___return(*___arg1);")))
    (lambda (BSTR*)
      (BSTR-decode (ref BSTR*)))))


(c-external (BSTR*-free BSTR*) :free void
  #/C/
    free(___arg1);
//#)


(c-external (BSTR*-set! BSTR* BSTR) void
  #/C/
    *___arg1 = ___arg2;
//#)


@wait
(definition (BSTR*-deref bstr*)
  (let ((bstr (BSTR*-ref bstr*)))
    (BSTR*-free bstr*)
    (BSTR-decode bstr)))


(definition public (BSTR*-enref bstr)
  (let ((ptr (BSTR*-make)))
    (BSTR*-set! ptr (BSTR-encode bstr))
    ptr))

  
;; BSTR-set! undefined

(definition public BSTR-free
  (let ((SysFreeString (c-function BSTR-free (BSTR) void "SysFreeString")))
    (lambda (bstr)
      (SysFreeString bstr))))


(definition public BSTR-ref
  (let ((cast (c-function BSTR-ref (BSTR) wchar_t-string "___return((wchar_t*)___arg1);")))
    (lambda (bstr)
      (cast bstr))))


(definition public BSTR-encode
  (let ((SysAllocString (c-function BSTR-encode (wchar_t-string) BSTR "SysAllocString")))
    (lambda (str)
      (SysAllocString str))))


(definition public (BSTR-decode bstr)
  (let ((str (BSTR-ref bstr)))
    (BSTR-free bstr)
    str))


;;;
;;;; GUID
;;;


(definition public (zero-fill str n)
  (let ((len (string-length str)))
    (if (> n len)
        (string-append (make-string (- n len) #\0) str)
      str)))


(c-structure GUID
  (DWORD Data1)
  (WORD Data2)
  (WORD Data3)
  (byte Data4 8))


(definition public (GUID-set! guid str)
  (GUID-Data1-set! guid (string->number (substring str 0 8) 16))
  (GUID-Data2-set! guid (string->number (substring str 9 13) 16))
  (GUID-Data3-set! guid (string->number (substring str 14 18) 16))
  (let ((data4+ (GUID-Data4-ref guid))
        (string->byte (lambda (offset)
                        (string->number (substring str offset (+ 2 offset)) 16))))
    (for-each (lambda (n byte) (byte*-set! data4+ n byte))
              (naturals 0 8)
              (map string->byte '(19 21 24 26 28 30 32 34)))))


(definition public (GUID-ref guid)
  (let* ((proc (lambda (i n)
                 (zero-fill (number->string i 16) n)))
         (data4+ (GUID-Data4-ref guid))
         (proc4 (lambda (n) (proc (byte*-ref data4+ n) 2))))
    (apply string-append
           (proc (GUID-Data1-ref guid) 8) "-"
           (proc (GUID-Data2-ref guid) 4) "-"
           (proc (GUID-Data3-ref guid) 4) "-"
           (proc4 0) (proc4 1) "-"
           (map proc4 (naturals 2 8)))))


(definition public (GUID-encode str)
  (let ((guid (GUID-make)))
    (GUID-set! guid str)
    guid))


(definition public (GUID-decode guid)
  (let ((str (GUID-ref guid)))
    (GUID-free guid)
    str))


;;;
;;;; INT
;;;


(c-external (INT*-make) :alloc INT*
  #/C/
    ___return((INT*) malloc(sizeof(INT)));
//#)


(c-external (INT*-free INT*) :free void
  #/C/
    free(___arg1);
//#)


(c-external (INT*-ref INT*) INT
  #/C/
    ___return(*___arg1);
//#)


(c-external (INT*-set! INT* INT) void
  #/C/
    *___arg1 = ___arg2;
//#)


(definition public (INT-enref int)
  (let ((ptr (INT*-make)))
    (INT*-set! ptr int)
    ptr))


(definition public (INT-deref int*)
  (let ((int (INT*-ref int*)))
    (INT*-free int*)
    int))


;;;
;;;; LONG
;;;


(c-external (LONG*-make) :alloc LONG*
  #/C/
    ___return((LONG*) malloc(sizeof(LONG)));
//#)


(c-external (LONG*-free LONG*) :free void
  #/C/
    free(___arg1);
//#)


(c-external (LONG*-ref LONG*) LONG
  #/C/
    ___return(*___arg1);
//#)


(c-external (LONG*-set! LONG* LONG) void
  #/C/
    *___arg1 = ___arg2;
//#)


(definition public (LONG-enref long)
  (let ((ptr (LONG*-make)))
    (LONG*-set! ptr long)
    ptr))


(definition public (LONG-deref long*)
  (let ((long (LONG*-ref long*)))
    (LONG*-free long*)
    long))


;;;
;;;; IUnknown*
;;;


(c-type IUnknown* (pointer (native void)))
(c-type IUnknown** (pointer IUnknown*))
(c-type LPVOID* IUnknown**)


(c-external (IUnknown**-make) :alloc LPVOID*
  #/C/
    ___return(malloc(sizeof(IUnknown*)));
//#)


(c-external (IUnknown**-free LPVOID*) :free void
  #/C/
    free(___arg1);
//#)


(c-external (IUnknown**-ref LPVOID*) IUnknown*
  #/C/
    ___return(*___arg1);
//#)


(c-external (IUnknown**-set! LPVOID* IUnknown*) void
  #/C/
    *___arg1 = ___arg2;
//#)


(definition public (IUnknown*-enref coptr)
  (let ((ptr (IUnknown**-make)))
    (IUnknown**-set! ptr coptr)
    ptr))


(definition public (IUnknown*-deref coptr*)
  (let ((coptr (IUnknown**-ref coptr*)))
    (IUnknown**-free coptr*)
    coptr))


(com-external (CoQuery (in GUID) (out IUnknown**)) HRESULT #f 0)
(com-external (CoQueryNoValidate (in GUID*) (out IUnknown**)) ULONG #f 0)
(com-external (CoAddRef) ULONG #f 1)
(com-external (CoRelease) ULONG #f 2)


(definition public (CoCreateInstance class interface)
  (let ((class-guid (GUID-encode class))
        (interface-guid (GUID-encode interface))
        (coptr* (IUnknown*-enref #f))
        (proc (c-function CoCreateInstance (GUID* IUnknown* DWORD GUID* LPVOID*) HRESULT "CoCreateInstance")))
    (validate-hresult (proc class-guid #f CLSCTX_SERVER interface-guid coptr*))
    (GUID-free class-guid)
    (GUID-free interface-guid)
    (IUnknown*-deref coptr*)))


(definition public (com-interface guid)
  guid)

(definition public (com-interface-guid coint)
  coint)


(definition public (com-class guid coint)
  (cons guid coint))

(definition (com-class-guid com-class)
  (car com-class))

(definition (com-class-interface com-class)
  (cdr com-class))


(definition public (com-create com-class)
  (let ((class-guid (com-class-guid com-class))
        (interface-guid (com-interface-guid (com-class-interface com-class))))
    (CoCreateInstance class-guid interface-guid)))


(definition public (com-release coptr)
  (CoRelease$ coptr))


;;;
;;;; CY
;;;


(c-structure CY
  (ulong Lo)
  (long Hi))


(c-external (CY-ref CY*) (native int64)
  #/C/
    ___return(*(___S64*)___arg1);
//#)


;;;
;;;; DECIMAL
;;;

@wait
(c-structure DECIMAL
  (USHORT wReserved)
  (BYTE scale)
  (BYTE sign)
  (ULONG Hi32)
  (ULONG Lo32)
  (ULONG Mid32))


(c-type DECIMAL "DECIMAL")
(c-type DECIMAL* (pointer DECIMAL))



(c-external (VARIANT*->ULONG VARIANT*) ulong
  #/C/
    ULONG temp;
    VarUI4FromDec((DECIMAL*)___arg1, &temp);
    ___return(temp);
//#)


;;;
;;;; VT_DATE
;;;


;; todo


;;;
;;;; VARIANT_BOOL
;;;


(c-type VARIANT_BOOL (native short))
(c-type VARIANT_BOOL* (pointer VARIANT_BOOL))


(c-external (VARIANT_BOOL*-make) :alloc VARIANT_BOOL*
  #/C/
    ___return(malloc(sizeof(VARIANT_BOOL)));
//#)


(c-external (VARIANT_BOOL*-free VARIANT_BOOL*) :free void
  #/C/
    free(___arg1);
//#)


(definition public VARIANT_BOOL*-ref
  (lambda (vtbool*)
    (VARIANT_BOOL-decode
      ((c-function VARIANT_BOOL*-ref (VARIANT_BOOL*) VARIANT_BOOL
         "___return(*___arg1);")
       vtbool*))))


(c-external (VARIANT_BOOL*-set! VARIANT_BOOL* VARIANT_BOOL) void
  #/C/
    *___arg1 = ___arg2;
//#)


(definition public (VARIANT_BOOL-encode boolean)
  (if boolean -1 0))


(definition public (VARIANT_BOOL-decode vtbool)
  (/= 0 vtbool))


(definition public (VARIANT_BOOL-enref boolean)
  (let ((ptr (VARIANT_BOOL*-make)))
    (VARIANT_BOOL*-set! ptr (VARIANT_BOOL-encode boolean))
    ptr))


(definition public (VARIANT_BOOL-deref vtbool*)
  (let ((bool (VARIANT_BOOL*-ref vtbool*)))
    (VARIANT_BOOL*-free vtbool*)
    bool))


;;;
;;;; SAFEARRAYBOUND
;;;


(c-structure SAFEARRAYBOUND
  (ULONG cElements)
  (LONG lLbound))


;;;
;;;; SAFEARRAY
;;;


(c-structure SAFEARRAY
  (USHORT cDims)
  (USHORT fFeatures)
  (ULONG cbElements)
  (ULONG cLocks)
  (PVOID pvData)
  (SAFEARRAYBOUND rgsabound 1))


;;;
;;;; VARIANT
;;;


(c-type VARTYPE (native unsigned-short))
(c-type SCODE (native long))


(c-structure VARIANT
  (VARTYPE vt)
  (long lVal)
  (short iVal)
  (float fltVal)
  (double dblVal)
  (VARIANT_BOOL boolVal)
  (SAFEARRAY* parray)
  (SCODE scode)
  (CY cyVal)
  (BSTR bstrVal)
  (DECIMAL* pdecVal)
  (IUnknown* punkVal)
  (VARIANT_BOOL* pboolVal)
  (INT intVal)
  (ulong ulVal))


(c-external (VariantInit VARIANT*) void)
(c-external (VariantClear VARIANT*) HRESULT)


(definition public (VARIANT-set! variant value)
  (cond ((null? value)
         (VARIANT-vt-set! variant 10)
         (VARIANT-scode-set! variant -1))
        ((boolean? value)
         (VARIANT-vt-set! variant 11)
         (VARIANT-boolVal-set! variant (if value -1 0)))
        ((integer? value)
         (VARIANT-vt-set! variant 3)
         (VARIANT-lVal-set! variant value))
        ((real? value)
         (VARIANT-vt-set! variant 5)
         (VARIANT-dblVal-set! variant value))
        ((string? value)
         (VARIANT-vt-set! variant 8)
         (VARIANT-bstrVal-set! variant (BSTR-encode value)))
        (else
         (CoAddRef value)
         (VARIANT-vt-set! variant 13)
         (VARIANT-punkVal-set! variant value))))


(definition public (VARIANT-ref variant)
  (case (VARIANT-vt-ref variant)
    ((0) ; VT_EMPTY
     #f)
    ((1) ; VT_NULL
     #f)
    ((2) ; VT_I2
     (VARIANT-iVal-ref variant))
    ((3) ; VT_I4
     (VARIANT-lVal-ref variant))
    ((4) ; VT_R4
     (VARIANT-fltVal-ref variant))
    ((5) ; VT_R8
     (VARIANT-dblVal-ref variant))
    ((6)
     (/ (cast <fl> (CY-ref (VARIANT-cyVal-ref variant))) 10000))
    ((7)
     (VariantTimeToSystemTime (VARIANT-dblVal-ref variant)))
    ((8) ; VT_BSTR
     (BSTR-ref (VARIANT-bstrVal-ref variant)))
    ((10) ; VT_ERROR
     (VARIANT-ulVal-ref variant))
    ((11) ; VT_BOOL
     (boolean->truth (/= 0 (VARIANT-boolVal-ref variant))))
    ((13)
     (list 'unimplemented 13))
    ;; Decimal not correctly implemented
    ((14)
     (VARIANT*->ULONG variant))
    ((22) ; VT_INT
     (VARIANT-intVal-ref variant))
    ((#x400B) ; VT_BOOL + VT_BYREF
     (/= 0 (short*-ref (VARIANT-pboolVal-ref variant) 0)))
    ((#x2011)
     (let* ((safearray (VARIANT-parray-ref variant))
            (bound (SAFEARRAY-rgsabound-ref safearray))
            (array (void*->byte* (SAFEARRAY-pvData-ref safearray)))
            (size (SAFEARRAYBOUND-cElements-ref bound))
            (vector (make-u8vector size)))
       (let (loop (i 0))
         (when (< i size)
           (u8vector-set! vector i (byte*-ref array i))
           (loop (+ i 1))))
       vector))
    (else
     ;; VARIANT-punkVal-ref dangerous
     (error "Unknown variant type: {s}" (VARIANT-vt-ref variant)))))


(definition public (VARIANT-encode data)
  (let ((variant (VARIANT-make)))
    (VariantInit variant)
    (VARIANT-set! variant data)
    variant))


(definition public (VARIANT-decode variant)
  (let ((data (VARIANT-ref variant)))
    (VariantClear variant)
    (VARIANT-free variant)
    data))


(definition public (SystemTimeToVariantTime date)
  (let ((system-time (SYSTEMTIME-make))
        (buffer (f64vector 0.))
        (fun (c-function SystemTimeToVariantTime (SYSTEMTIME* F64PTR) void "SystemTimeToVariantTime")))
    (SYSTEMTIME-wYear-set! system-time (date-year date))
    (SYSTEMTIME-wMonth-set! system-time (date-month date))
    (SYSTEMTIME-wDayOfWeek-set! system-time (date-week-day date))
    (SYSTEMTIME-wDay-set! system-time (date-day date))
    (SYSTEMTIME-wHour-set! system-time (date-hour date))
    (SYSTEMTIME-wMinute-set! system-time (date-minute date))
    (SYSTEMTIME-wSecond-set! system-time (date-second date))
    (SYSTEMTIME-wMilliseconds-set! system-time (quotient (date-nanosecond date) 1000))
    (fun system-time buffer)
    (SYSTEMTIME-free system-time)
    (f64vector-ref buffer 0)))


(definition public (VariantTimeToSystemTime variant-time)
  (let ((system-time (SYSTEMTIME-make))
        (fun (c-function VariantTimeToSystemTime (double SYSTEMTIME*) void "VariantTimeToSystemTime")))
    (fun variant-time system-time)
    (let ((year (SYSTEMTIME-wYear-ref system-time))
          (month (SYSTEMTIME-wMonth-ref system-time))
          (day-of-week (SYSTEMTIME-wDayOfWeek-ref system-time))
          (day (SYSTEMTIME-wDay-ref system-time))
          (hour (SYSTEMTIME-wHour-ref system-time))
          (minute (SYSTEMTIME-wMinute-ref system-time))
          (second (SYSTEMTIME-wSecond-ref system-time))
          (milliseconds (SYSTEMTIME-wMilliseconds-ref system-time)))
      (SYSTEMTIME-free system-time)
      (make-date (* milliseconds 1000) second minute hour day month year (local-timezone)))))


;;;
;;;; IErrorInfo
;;;


(definition public IErrorInfo
  (com-interface "1CF2B120-547D-101B-8E65-08002B2BD119"))


(com-external (IErrorInfo$GetGUID (out GUID*)) ULONG #f 3)
(com-external (IErrorInfo$GetSource (out BSTR*)) ULONG #f 4)
(com-external (IErrorInfo$GetDescription (out BSTR*)) ULONG #f 5)
(com-external (IErrorInfo$GetHelpFile (out BSTR*)) ULONG #f 6)
(com-external (IErrorInfo$GetHelpContext (out DWORD*)) ULONG #f 7)


(definition public (GetErrorInfo)
  (let* ((ptr (IUnknown**-make))
         (result ((c-function GetErrorInfo (IUnknown**) HRESULT
                    "___return(GetErrorInfo(0,(IErrorInfo**)___arg1));")
                  ptr)))
    (if (= result S_OK)
        (IUnknown*-deref ptr)
      #f)))


;;;
;;;; ISupportErrorInfo
;;;


(definition public ISupportErrorInfo
  (com-interface "DF0B3D60-548F-101B-8E65-08002B2BD119"))


(com-external (ISupportErrorInfo$InterfaceSupportsErrorInfo (in GUID*)) ULONG #f 3)


;;;
;;;; coenum
;;;


(c-type coenum (native int))
(c-type coenum* (pointer int int*))
(c-type IDispatch* (pointer (native void)))
(c-type IDispatch** (pointer IDispatch*))


;;;
;;;; Initialize
;;;


(definition initialized? #f)


(definition patch-thunks '())


(definition public (initialize-com)
  (unless initialized?
    (LoadLibrary "ole32")
    (CoInitializeEx #f COINIT_APARTMENTTHREADED)
    (set! initialized? #t)
    (for-each (lambda (th) (th)) patch-thunks)))


(definition public (register-com-patch thunk)
  (if initialized?
      (thunk)
    (set! patch-thunks (cons thunk patch-thunks))))


(definition COINIT_APARTMENTTHREADED 2)


(definition public CLSCTX_SERVER (+ 1 4 16))


(definition (CoInitializeEx n/a flags)
  (let ((proc (c-function CoInitializeEx (VOID* DWORD) HRESULT "CoInitializeEx")))
    (validate-hresult (proc #f flags))))


(initialize-com))
