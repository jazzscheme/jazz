;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Platform Access
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module jazz.platform jazz


(export (jazz.platform.types)
        (jazz.platform.ios     (cond ios))
        (jazz.platform.cocoa   (cond cocoa))
        (jazz.platform.windows (cond windows))
        (jazz.platform.linux   (cond linux))
        (jazz.platform.x11     (cond x11)))

(import (jazz.platform.ios     (cond ios))
        (jazz.platform.cocoa   (cond cocoa))
        (jazz.platform.windows (cond windows))
        (jazz.platform.linux   (cond linux))
        (jazz.platform.x11     (cond x11))
        (jazz.platform.callback))


;;;
;;;; Modifiers
;;;


(definition public NoModifiers
  0)


(definition protected Shift-Bit
  1)

(definition protected Control-Bit
  2)

(definition protected Alt-Bit
  4)

(definition protected Meta-Bit
  8)


(definition public (shift-key? modifier)
  (mask-bit-set? modifier Shift-Bit))


(definition public (control-key? modifier)
  (mask-bit-set? modifier Control-Bit))


(definition public (alt-key? modifier)
  (mask-bit-set? modifier Alt-Bit))


(definition public (meta-key? modifier)
  (mask-bit-set? modifier Meta-Bit))


(definition public (make-modifiers-mask shift? control? alt? meta?)
  (define (set-shift-key modifiers bit)
    (mask-bit-set modifiers Shift-Bit bit))
  
  (define (set-control-key modifiers bit)
    (mask-bit-set modifiers Control-Bit bit))
  
  (define (set-alt-key modifiers bit)
    (mask-bit-set modifiers Alt-Bit bit))
  
  (define (set-meta-key modifiers bit)
    (mask-bit-set modifiers Meta-Bit bit))
  
  (set-meta-key (set-alt-key (set-control-key (set-shift-key 0 shift?) control?) alt?) meta?))


(definition public (modifiers->mask modifiers)
  (make-modifiers-mask (memq? :shift modifiers)
                       (memq? :control modifiers)
                       (memq? :alt modifiers)
                       (memq? :meta modifiers)))


(definition public (modifiers->keys keys)
  (let ((modifiers '()))
    (define (try down? modifier)
      (when down?
        (set! modifiers (cons modifier modifiers))))
    
    (try (alt-key? keys) :alt)
    (try (shift-key? keys) :shift)
    (try (control-key? keys) :control)
    (try (meta-key? keys) :meta)
    modifiers))


(definition protected (parse-event-modifiers rest proc)
  (let (iter (scan rest) (keys '()))
    (if (null? scan)
        (proc (modifiers->mask keys) scan)
      (let ((obj (car scan)))
        (if (memq? obj '(:shift :control :alt :meta))
            (iter (cdr scan) (cons obj keys))
          (proc (modifiers->mask keys) scan))))))


;;;
;;;; Keyboard
;;;


(definition public (modifiers-mask)
  (make-modifiers-mask (shift-down?) (control-down?) (alt-down?) (meta-down?)))


(definition public (modifiers-keys)
  (modifiers->keys (modifiers-mask)))


;;;
;;;; Terminal
;;;


(definition package (terminal-repl)
  (if (controlling-terminal?)
      (begin
        (show-terminal)
        (bring-terminal-to-front)
        (repl))
    (error "No controlling terminal")))


(cond-expand
  (windows
    (definition package (controlling-terminal?)
      (let ((console (GetConsoleWindow)))
        (and console (IsWindowVisible console))))
    
    (definition package (show-terminal)
      (let ((console (GetConsoleWindow)))
        (if (not console)
            (set-terminal-title)
          (ShowWindow console SW_SHOWNORMAL))))
    
    (definition package (hide-terminal)
      (let ((console (GetConsoleWindow)))
        (when (and console (IsWindowVisible console))
          (ShowWindow console SW_HIDE))))
    
    (definition package (toggle-terminal)
      (if (controlling-terminal?)
          (hide-terminal)
        (show-terminal))))
  (else
   (definition package (controlling-terminal?)
     (unix-controlling-terminal?))
   
   (definition package (show-terminal)
     (set-terminal-title))
   
   (definition package (hide-terminal)
     )
   
   (definition package (toggle-terminal)
     )))


;;;
;;;; Callback
;;;


(definition protected (set-event-callback callback)
  (event-callback-set! callback))


;;;
;;;; Process
;;;


(definition protected (process-already-running?)
  (prime-platform)
  (let ((pid (current-process-id))
        (info-table (collect-processes-info)))
    (let ((my-info (table-ref info-table pid #f)))
      ;; this is probably not necessary and
      ;; also covers linux not implemented yet
      (and my-info
           (bind (my-id my-name my-exe) my-info
             (table-search (lambda (key info)
                             (bind (id name exe) info
                               (and (/= id my-id)
                                    (equal? name my-name)
                                    (equal? exe my-exe))))
                           info-table))))))


;;;
;;;; Initialize
;;;


@quick-hack
(initialize-platform))
