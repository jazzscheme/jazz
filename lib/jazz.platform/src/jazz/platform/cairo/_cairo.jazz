;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Cairo
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Jeremie Lasalle Ratelle.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module jazz.platform.cairo jazz


(export (jazz.platform.cairo.cairo-base)
        (jazz.platform.cairo.cairo-carbon   (cond carbon))
        (jazz.platform.cairo.cairo-windows  (cond windows))
        (jazz.platform.cairo.cairo-x11      (cond x11))
        (jazz.platform.cairo.cairo-freetype (cond carbon))
        (jazz.platform.cairo.cairo-logfont  (cond windows))
        (jazz.platform.cairo.cairo-freetype (cond x11)))


(import (jazz.platform.types)
        (jazz.platform.cairo.cairo-base)
        (jazz.platform.cairo.cairo-carbon   (cond carbon))
        (jazz.platform.cairo.cairo-windows  (cond windows))
        (jazz.platform.cairo.cairo-x11      (cond x11))
        (jazz.platform.cairo.cairo-freetype (cond carbon))
        (jazz.platform.cairo.cairo-logfont  (cond windows))
        (jazz.platform.cairo.cairo-freetype (cond x11)))


(c-include "<stdlib.h>")


(cond-expand
  (carbon  (c-include "<cairo-quartz.h>"))
  (windows (c-include "<cairo-win32.h>"))
  (x11     (c-include "<cairo-xlib.h>"))
  (else))

(c-include "<cairo-pdf.h>")

(c-constant PI 3.14159265358979323846)
(c-constant PI*2 (fl* PI 2))
(c-constant PI/2 (fl/ PI 2))
(c-constant PI/4 (fl/ PI 4))

(c-type cairo_t            (native "cairo_t"))
(c-type cairo_t*           (pointer cairo_t cairo_t*))
(c-type cairo_pattern_t    (native "cairo_pattern_t"))
(c-type cairo_pattern_t*   (pointer cairo_pattern_t cairo_pattern_t*))


(c-enumeration cairo_content_t
  (CAIRO_CONTENT_COLOR       #x1000)
  (CAIRO_CONTENT_ALPHA       #x2000)
  (CAIRO_CONTENT_COLOR_ALPHA #x3000))

(c-type cairo_content_t int)


(c-enumeration cairo_operator
  (CAIRO_OPERATOR_CLEAR     0)
  (CAIRO_OPERATOR_SOURCE    1)
  (CAIRO_OPERATOR_OVER      2)
  (CAIRO_OPERATOR_IN        3)
  (CAIRO_OPERATOR_OUT       4)
  (CAIRO_OPERATOR_ATOP      5)
  (CAIRO_OPERATOR_DEST      6)
  (CAIRO_OPERATOR_DEST_OVER 7)
  (CAIRO_OPERATOR_DEST_IN   8)
  (CAIRO_OPERATOR_DEST_OUT  9)
  (CAIRO_OPERATOR_DEST_ATOP 10)
  (CAIRO_OPERATOR_XOR       11)
  (CAIRO_OPERATOR_ADD       12)
  (CAIRO_OPERATOR_SATURATE  13))

(c-type cairo_operator_t int)


(c-enumeration cairo_font_slant_t
  (CAIRO_FONT_SLANT_NORMAL  0)
  (CAIRO_FONT_SLANT_ITALIC  1)
  (CAIRO_FONT_SLANT_OBLIQUE 2))

(c-type cairo_font_slant_t int)


(c-enumeration cairo_font_weight_t
  (CAIRO_FONT_WEIGHT_NORMAL 0)
  (CAIRO_FONT_WEIGHT_BOLD   1))

(c-type cairo_font_weight_t int)


(c-enumeration cairo_status_t
  (CAIRO_STATUS_SUCCESS                 0)
  (CAIRO_STATUS_NO_MEMORY               1)
  (CAIRO_STATUS_INVALID_RESTORE         2)
  (CAIRO_STATUS_INVALID_POP_GROUP       3)
  (CAIRO_STATUS_NO_CURRENT_POINT        4)
  (CAIRO_STATUS_INVALID_MATRIX          5)
  (CAIRO_STATUS_INVALID_STATUS          6)
  (CAIRO_STATUS_NULL_POINTER            7)
  (CAIRO_STATUS_INVALID_STRING          8)
  (CAIRO_STATUS_INVALID_PATH_DATA       9)
  (CAIRO_STATUS_READ_ERROR              10)
  (CAIRO_STATUS_WRITE_ERROR             11)
  (CAIRO_STATUS_SURFACE_FINISHED        12)
  (CAIRO_STATUS_SURFACE_TYPE_MISMATCH   13)
  (CAIRO_STATUS_PATTERN_TYPE_MISMATCH   14)
  (CAIRO_STATUS_INVALID_CONTENT         15)
  (CAIRO_STATUS_INVALID_FORMAT          16)
  (CAIRO_STATUS_INVALID_VISUAL          17)
  (CAIRO_STATUS_FILE_NOT_FOUND          18)
  (CAIRO_STATUS_INVALID_DASH            19)
  (CAIRO_STATUS_INVALID_DSC_COMMENT     20)
  (CAIRO_STATUS_INVALID_INDEX           21)
  (CAIRO_STATUS_CLIP_NOT_REPRESENTABLE  22))

(c-type cairo_status_t int)


(c-structure cairo_font_extents_t
  (double ascent)
  (double descent)
  (double height)
  (double max_x_advance)
  (double max_y_advance))


(c-structure cairo_text_extents_t
  (double x_bearing)
  (double y_bearing)
  (double width)
  (double height)
  (double x_advance)
  (double y_advance))


(c-structure cairo_matrix_t
  (double xx)
  (double yx)
  (double xy)
  (double yy)
  (double x0)
  (double y0))


(c-structure cairo_glyph_t
  (ulong index)
  (double x)
  (double y))


(c-enumeration cairo_extend_t
  (CAIRO_EXTEND_NONE    0)
  (CAIRO_EXTEND_REPEAT  1)
  (CAIRO_EXTEND_REFLECT 2)
  (CAIRO_EXTEND_PAD     3))

(c-type cairo_extend_t int)


;;;
;;;; Error Status
;;;


(definition package cairo_status_to_string
  (c-function (cairo_status_t) char-string
    "___result = (char*) cairo_status_to_string(___arg1);"))


;;;
;;;; Current Point
;;;


(definition package (cairo_current_point context)
  (let ((fn (c-function (cairo_t* F64PTR) void
              "cairo_get_current_point(___arg1, ___arg2, ___arg2+1);"))
        (pt (make-f64vector 2)))
    (fn context pt)
    (new Point (fxfloor (f64vector-ref pt 0)) (fxfloor (f64vector-ref pt 1)))))


;;;
;;;; Device to User
;;;


(definition package (cairo_device_to_user context pt)
  (let ((fn (c-function (cairo_t* F64PTR) void
              "cairo_device_to_user(___arg1,___arg2,___arg2+1);"))
        (vec (f64vector (cast <fl> (get-h~ pt)) (cast <fl> (get-v~ pt)))))
    (fn context vec)
    (new Point (fxfloor (f64vector-ref vec 0)) (fxfloor (f64vector-ref vec 1)))))

     
(definition package (cairo_user_to_device context pt)
  (let ((fn (c-function (cairo_t* F64PTR) void
              "cairo_user_to_device(___arg1,___arg2,___arg2+1);"))
        (vec (f64vector (cast <fl> (get-h~ pt)) (cast <fl> (get-v~ pt)))))
    (fn context vec)
    (new Point (fxfloor (f64vector-ref vec 0)) (fxfloor (f64vector-ref vec 1)))))


;;;
;;;; Glyph Arrays
;;;


(definition package glyph-array-make  (c-function (int) cairo_glyph_t* "___result_voidstar = calloc(___arg1,sizeof(cairo_glyph_t));"))
(definition package glyph-array-ref   (c-function (cairo_glyph_t* int) cairo_glyph_t* "___result_voidstar = (void*)(___arg1+___arg2);"))
(definition package glyph-array-free  (c-function (cairo_glyph_t*) void "free(___arg1);"))


;;;
;;;; Version
;;;


(c-external (cairo_version) int)


(definition public cairo_version_string
  (c-function () char-string
    "___result = (char*) cairo_version_string();"))


;;;
;;;; Surface
;;;


(c-external (cairo_surface_destroy cairo_surface_t*) void)
(c-external (cairo_surface_status cairo_surface_t*) cairo_status_t)
(c-external (cairo_surface_get_content cairo_surface_t*) cairo_content_t)
(c-external (cairo_surface_finish cairo_surface_t*) void)
(c-external (cairo_surface_flush cairo_surface_t*) void)
(c-external (cairo_surface_create_similar cairo_surface_t* cairo_content_t int int) cairo_surface_t*)


;;;
;;;; Context
;;;


(c-external (cairo_create cairo_surface_t*) cairo_t*)
(c-external (cairo_destroy cairo_t*) void)
(c-external (cairo_save cairo_t*) void)
(c-external (cairo_restore cairo_t*) void)
(c-external (cairo_status cairo_t*) cairo_status_t)
(c-external (cairo_clip cairo_t*) void)
(c-external (cairo_reset_clip cairo_t*) void)
(c-external (cairo_fill cairo_t*) void)
(c-external (cairo_fill_preserve cairo_t*) void)
(c-external (cairo_paint cairo_t*) void)
(c-external (cairo_stroke cairo_t*) void)
(c-external (cairo_stroke_preserve cairo_t*) void)
(c-external (cairo_set_operator cairo_t* cairo_operator_t) void)


;;;
;;;; Path
;;;


(c-external (cairo_move_to cairo_t* double double) void)
(c-external (cairo_line_to cairo_t* double double) void)
(c-external (cairo_rel_line_to cairo_t* double double) void)
(c-external (cairo_arc cairo_t* double double double double double) void)
(c-external (cairo_rel_curve_to cairo_t* double double double double double double) void)
(c-external (cairo_rectangle cairo_t* double double double double) void)
(c-external (cairo_set_line_width cairo_t* double) void)
(c-external (cairo_get_line_width cairo_t*) double)
(c-external (cairo_rel_move_to cairo_t* double double) void)
(c-external (cairo_close_path cairo_t*) void)


;;;
;;;; Source
;;;


(c-external (cairo_set_source cairo_t* cairo_pattern_t*) void)
(c-external (cairo_set_source_surface cairo_t* cairo_surface_t* double double) void)
(c-external (cairo_set_source_rgb cairo_t* double double double) void)
(c-external (cairo_set_source_rgba cairo_t* double double double double) void)
(c-external (cairo_get_source cairo_t*) cairo_pattern_t*)


;;;
;;;; Pattern
;;;


(c-external (cairo_pattern_get_rgba cairo_pattern_t* double* double* double* double*) cairo_status_t)
(c-external (cairo_pattern_create_for_surface cairo_surface_t*) cairo_pattern_t*)
(c-external (cairo_pattern_create_linear double double double double) cairo_pattern_t*)
(c-external (cairo_pattern_add_color_stop_rgb cairo_pattern_t* double double double double) void)
(c-external (cairo_pattern_add_color_stop_rgba cairo_pattern_t* double double double double double) void)
(c-external (cairo_pattern_set_extend cairo_pattern_t* cairo_extend_t) void)


;;;
;;;; Text
;;;


(c-external (cairo_show_text cairo_t* UTF-8-string) void)
(c-external (cairo_set_font_face cairo_t* cairo_font_face_t*) void)
(c-external (cairo_get_font_face cairo_t*) cairo_font_face_t*)
(c-external (cairo_set_font_size cairo_t* double) void)
(c-external (cairo_set_scaled_font cairo_t* cairo_scaled_font_t*) void)
(c-external (cairo_font_extents cairo_t* cairo_font_extents_t*) void)
(c-external (cairo_glyph_extents cairo_t* cairo_glyph_t* int cairo_text_extents_t*) void)
(c-external (cairo_select_font_face cairo_t* char-string cairo_font_slant_t cairo_font_weight_t) void)
(c-external (cairo_show_glyphs cairo_t* cairo_glyph_t* int) void)
(c-external (cairo_text_extents cairo_t* UTF-8-string cairo_text_extents_t*) void)


;;;
;;;; Muli-page
;;;


(c-external (cairo_show_page cairo_t*) void)


;;;
;;;; Font
;;;


(c-enumeration cairo_antialias_t
  (CAIRO_ANTIALIAS_DEFAULT 0)
  (CAIRO_ANTIALIAS_NONE 1)
  (CAIRO_ANTIALIAS_GRAY 2)
  (CAIRO_ANTIALIAS_SUBPIXEL 3))

(c-type cairo_antialias_t int)


(c-enumeration cairo_subpixel_order_t
  (CAIRO_SUBPIXEL_ORDER_DEFAULT 0)
  (CAIRO_SUBPIXEL_ORDER_RGB 1)
  (CAIRO_SUBPIXEL_ORDER_BGR 2)
  (CAIRO_SUBPIXEL_ORDER_VRGB 3)
  (CAIRO_SUBPIXEL_ORDER_VBGR 4))

(c-type cairo_subpixel_order_t int)


(c-enumeration cairo_hint_style_t
  (CAIRO_HINT_STYLE_DEFAULT 0)
  (CAIRO_HINT_STYLE_NONE 1)
  (CAIRO_HINT_STYLE_SLIGHT 2)
  (CAIRO_HINT_STYLE_MEDIUM 3)
  (CAIRO_HINT_STYLE_FULL 4))

(c-type cairo_hint_style_t int)


(c-enumeration cairo_hint_metrics_t
  (CAIRO_HINT_METRICS_DEFAULT 0)
  (CAIRO_HINT_METRICS_OFF 1)
  (CAIRO_HINT_METRICS_ON 2))

(c-type cairo_hint_metrics_t int)


(c-type cairo_font_options_t  (native "cairo_font_options_t"))
(c-type cairo_font_options_t* (pointer cairo_font_options_t cairo_font_options_t*))

(c-external (cairo_font_options_create) cairo_font_options_t*)
(c-external (cairo_font_options_destroy cairo_font_options_t*) void)
(c-external (cairo_font_options_get_antialias cairo_font_options_t*) cairo_antialias_t)
(c-external (cairo_font_options_set_antialias cairo_font_options_t* cairo_antialias_t) void)
(c-external (cairo_font_options_get_subpixel_order cairo_font_options_t*) cairo_subpixel_order_t)
(c-external (cairo_font_options_set_subpixel_order cairo_font_options_t* cairo_subpixel_order_t) void)
(c-external (cairo_font_options_get_hint_style cairo_font_options_t*) cairo_hint_style_t)
(c-external (cairo_font_options_set_hint_style cairo_font_options_t* cairo_hint_style_t) void)
(c-external (cairo_font_options_get_hint_metrics cairo_font_options_t*) cairo_hint_metrics_t)
(c-external (cairo_font_options_set_hint_metrics cairo_font_options_t* cairo_hint_metrics_t) void)
(c-external (cairo_set_font_options cairo_t* cairo_font_options_t*) void)


(c-external (cairo_scaled_font_create cairo_font_face_t* cairo_matrix_t* cairo_matrix_t* cairo_font_options_t*) cairo_scaled_font_t*)
(c-external (cairo_scaled_font_destroy cairo_scaled_font_t*) void)


;;;
;;;; Matrix
;;;


(c-external (cairo_translate cairo_t* double double) void)
(c-external (cairo_transform cairo_t* cairo_matrix_t*) void)
(c-external (cairo_set_matrix cairo_t* cairo_matrix_t*) void)
(c-external (cairo_get_matrix cairo_t* cairo_matrix_t*) void)
(c-external (cairo_matrix_init_identity cairo_matrix_t*) void)
(c-external (cairo_matrix_init_scale cairo_matrix_t* double double) void)
(c-external (cairo_identity_matrix cairo_t*) void)
(c-external (cairo_scale cairo_t* double double) void)
(c-external (cairo_rotate cairo_t* double) void)
(c-external (cairo_device_to_user_distance cairo_t* double* double*) void)


;;;
;;;; Image Surface
;;;


(c-external (cairo_format_stride_for_width cairo_format_t int) int)
(c-external (cairo_image_surface_create_from_png UTF-8-string) cairo_surface_t*)
(c-external (cairo_image_surface_create_for_data uchar* cairo_format_t int int int) cairo_surface_t*)
(c-external (cairo_pattern_destroy cairo_pattern_t*) void)
(c-external (cairo_image_surface_get_format cairo_surface_t*) cairo_format_t)
(c-external (cairo_image_surface_get_width cairo_surface_t*) int)
(c-external (cairo_image_surface_get_height cairo_surface_t*) int)
(c-external (cairo_image_surface_get_stride cairo_surface_t*) int)
(c-external (cairo_image_surface_get_data cairo_surface_t*) void*)
(c-external (cairo_surface_write_to_png cairo_surface_t* char-string) cairo_status_t)


;;;
;;;; PDF Surface
;;;


(c-external (cairo_pdf_surface_create char-string double double) cairo_surface_t*)


@wait(c-external (cairo_surface_show_page cairo_surface_t*) void)


(definition public (get-cairo-image-surface-size surface)
  (new Dimension
    (cairo_image_surface_get_width surface)
    (cairo_image_surface_get_height surface)))


(definition package cairo_set_alternate
  (c-function (cairo_t*) void
    "double pattern[1];
     pattern[0] = 1.0;
     cairo_set_dash(___arg1, pattern, 1, 0.0);"))


(definition package cairo_set_solid
  (c-function (cairo_t*) void
    "cairo_set_dash(___arg1, 0, 0, 0.0);"))


(definition package (cairo_get_clipper context)
  (let ((fn (c-function (cairo_t* F64PTR) void
              "cairo_clip_extents(___arg1,___arg2,___arg2+1,___arg2+2,___arg2+3);"))
        (vec (make-f64vector 4)))
    (fn context vec)
    (let ((left   (f64vector-ref vec 0))
          (top    (f64vector-ref vec 1))
          (right  (f64vector-ref vec 2))
          (bottom (f64vector-ref vec 3)))
      (new Rect (flonum->fixnum left) (flonum->fixnum top) (flonum->fixnum right) (flonum->fixnum bottom)))))


;;;
;;;; PNG image
;;;


(c-declare #<<END-OF-DECLARES
struct readfunc_closure {
  int offset;
  ___SCMOBJ vector;
};

cairo_status_t u8vector_readfunc (void* closure,
                                  unsigned char* buf,
                                  unsigned int length) {
  // FIXME: check the length
  unsigned int i = 0;
  int offset = ((struct readfunc_closure*) closure)->offset;
  ___SCMOBJ vector = ((struct readfunc_closure*) closure)->vector;
  while (i < length) {
    buf[i] = ___INT(___U8VECTORREF(vector, ___FIX(offset + i)));
    i++;
  }
  ((struct readfunc_closure*) closure)->offset = offset + length;
  return CAIRO_STATUS_SUCCESS;
}
END-OF-DECLARES
)

(definition public (load-png-image-from-u8vector u8vector)
  (let ((fn (c-function (scheme-object) cairo_surface_t*
              "struct readfunc_closure closure;
               closure.offset = 0;
               closure.vector = ___arg1;
               ___result_voidstar = cairo_image_surface_create_from_png_stream(u8vector_readfunc, &closure);")))
      (fn u8vector))))
