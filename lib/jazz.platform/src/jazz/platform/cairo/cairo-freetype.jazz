;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Cairo Freetype
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.platform.cairo.cairo-freetype jazz


(import (jazz.platform.types)
        (jazz.platform.freetype)
        (jazz.platform.cairo.cairo-base))


(c-include "<cairo-ft.h>")


(c-external FT_Face (cairo_ft_scaled_font_lock_face cairo_scaled_font_t*))
(c-external void    (cairo_ft_scaled_font_unlock_face cairo_scaled_font_t*))


(definition package cairo_ft_font_face_create_for_ft_face
  (c-function (FT_Face* int) cairo_font_face_t*
    "___result_voidstar = cairo_ft_font_face_create_for_ft_face(*___arg1,___arg2);"))


(definition package cairo_ft_font_face_create_for_pattern
  (c-function (FcPattern*) cairo_font_face_t*
    "___result_voidstar = cairo_ft_font_face_create_for_pattern(___arg1);"))


(definition package (cairo_glyph_index font char)
  (let ((face (cairo_ft_scaled_font_lock_face (get-scaled-font~ font))))
    (prog1 ((c-function (FT_Face ulong) uint
              "___result = FT_Get_Char_Index(___arg1, ___arg2);")
            face char)
      (cairo_ft_scaled_font_unlock_face (get-scaled-font~ font)))))


(c-external void (cairo_font_face_destroy cairo_font_face_t*)))
