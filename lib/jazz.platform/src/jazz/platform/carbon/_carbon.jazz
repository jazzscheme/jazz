;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Carbon
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Jeremie Lasalle Ratelle.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2012
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.platform.carbon jazz


(import (jazz.foreign)
        (jazz.platform.types)
        (jazz.platform.carbon.carbon-types))


(c-include "<Carbon/Carbon.h>")


;;;
;;;; Basic Constants
;;;


(c-constant noErr 0)


;;;
;;;; Window Class
;;;


(c-constant kDocumentWindowClass 6)
(c-constant kPlainWindowClass    13)


;;;
;;;; Window Attributes
;;;

(c-constant kWindowNoAttributes               0)
(c-constant kWindowCloseBoxAttribute          (arithmetic-shift 1 0))
(c-constant kWindowHorizontalZoomAttribute    (arithmetic-shift 1 1))
(c-constant kWindowVerticalZoomAttribute      (arithmetic-shift 1 2))
(c-constant kWindowFullZoomAttribute          (bitwise-ior kWindowVerticalZoomAttribute
                                                           kWindowHorizontalZoomAttribute))
(c-constant kWindowCollapseBoxAttribute       (arithmetic-shift 1 3))
(c-constant kWindowResizableAttribute         (arithmetic-shift 1 4))
(c-constant kWindowStandardDocumentAttributes (bitwise-ior kWindowCloseBoxAttribute
                                                           kWindowFullZoomAttribute
                                                           kWindowCollapseBoxAttribute
                                                           kWindowResizableAttribute))
(c-constant kWindowCompositingAttribute       (arithmetic-shift 1 19))
(c-constant kWindowStandardHandlerAttribute   (arithmetic-shift 1 25))
(c-constant kWindowLiveResizeAttribute        (arithmetic-shift 1 28))


;;;
;;;; Event Classes
;;;


(c-constant kEventClassWindow   ((c-function () OSType "___result = kEventClassWindow;")))
(c-constant kEventClassMouse    ((c-function () OSType "___result = kEventClassMouse;")))
(c-constant kEventClassKeyboard ((c-function () OSType "___result = kEventClassKeyboard;")))


;;;
;;;; Control Events
;;;


(c-constant kEventControlDraw 4)
(c-constant kEventControlBoundsChanged 154)


;;;
;;;; Window Events
;;;


(c-constant kEventMouseDown  1)
(c-constant kEventMouseUp    2)
(c-constant kEventMouseMoved 5)

(c-constant kEventRawKeyDown 1)

(c-constant kEventWindowUpdate  1)
(c-constant kEventWindowShowing 22)
(c-constant kEventWindowClose   72)
(c-constant kEventWindowBoundsChanged 27)


;;;
;;;; WindowRegionCode
;;;


(c-constant kWindowTitleBarRgn  0)
(c-constant kWindowStructureRgn 32)
(c-constant kWindowContentRgn   33)


;;;
;;;; HIObject Classes
;;;


(c-constant kHIViewClassID ((c-function () CFStringRef "___result_voidstar = kHIViewClassID;")))


;;;
;;;; Event Modifiers
;;;


(c-constant activeFlagBit 0)


;;;
;;;; Event Errors
;;;


(c-constant eventNotHandledErr -9874)


;;;
;;;; Modifiers Bits
;;;


(c-constant cmdKeyBit     8)
(c-constant shiftKeyBit   9)
(c-constant optionKeyBit  11)
(c-constant controlKeyBit 12)


;;;
;;;; HIView Z Order
;;;


(c-constant kHIViewZOrderAbove 1)
(c-constant kHIViewZOrderBelow 2)


;;;
;;;; HIView features
;;;


(c-constant kHIViewFeatureAllowsSubviews 2)


;;;
;;;; Functions
;;;


(c-external (SetUserFocusWindow WindowRef) OSStatus)
(c-external (ShowWindow WindowRef) void)
(c-external (HideWindow WindowRef) void)
(c-external (MoveWindowStructure WindowRef short short) OSStatus)
(c-external (RunApplicationEventLoop) void)
(c-external (QuitApplicationEventLoop) void)
(c-external (GetEventKind EventRef) EventKind)
(c-external (GetEventClass EventRef) OSType)
(c-external (HIViewGetRoot WindowRef) HIViewRef)
(c-external (HIViewAddSubview HIViewRef HIViewRef) OSStatus)
(c-external (HIViewSetVisible HIViewRef bool) OSStatus)
(c-external (HIViewSetNeedsDisplay HIViewRef bool) void)
(c-external (HIViewPlaceInSuperviewAt HIViewRef float float) OSStatus)
(c-external (MoveWindowStructure WindowRef short short) OSStatus)
(c-external (GetCurrentEventKeyModifiers) UInt32)
(c-external (HIViewGetSuperview HIViewRef) HIViewRef)
(c-external (HIViewRemoveFromSuperview HIViewRef) OSStatus)
(c-external (HIViewGetFirstSubview HIViewRef) HIViewRef)
(c-external (HIViewSetZOrder HIViewRef HIViewZOrderOp HIViewRef) OSStatus)
(c-external (BringToFront WindowRef) void)
(c-external (HIViewGetWindow HIViewRef) WindowRef)
(c-external (HIViewSetActivated HIViewRef bool) OSStatus)
(c-external (HIViewGetFirstSubview HIViewRef) HIViewRef)
(c-external (HIViewChangeFeatures HIViewRef HIViewFeatures HIViewFeatures) OSStatus)
(c-external (HIViewIsValid HIViewRef) bool)
(c-external (ActivateWindow WindowRef bool) OSStatus)
(c-external (BringToFront WindowRef) void)
(c-external (SendBehind WindowRef WindowRef) void)
(c-external (SelectWindow WindowRef) void)
(c-external (NewRgn) RgnHandle)
(c-external (DisposeRgn RgnHandle) void)
(c-external (OffsetRgn RgnHandle short short) void)
(c-external (UnionRgn RgnHandle RgnHandle RgnHandle) void)
(c-external (HIViewRender HIViewRef) void)
(c-external (HIWindowFlush WindowRef) void)
(c-external (getpid) int)


(definition protected (bell-internal)
  ;; todo
  )


(definition HIViewSetNeedsDisplayInRect
  (c-function (HIViewRef float float float float) void
    "CGRect rect = {{___arg2, ___arg3}, {___arg4, ___arg5}};
     HIViewSetNeedsDisplayInRect( ___arg1, &rect, 1 );"))


(definition (GetRegionBounds region)
  (let ((rect ((c-function (RgnHandle) Rect*
                 "Rect *rect = malloc(sizeof(rect));
                  GetRegionBounds( ___arg1, rect);
                  ___result_voidstar = rect;")
               region)))
    (let ((l (Rect-left-ref rect))
          (t (Rect-top-ref rect))
          (b (Rect-bottom-ref rect))
          (r (Rect-right-ref rect)))
      (Rect-free rect)
      (values l t r b))))


(definition RectRgn
  (c-function (short short short short) RgnHandle
    "RgnHandle reg = NewRgn();
     Rect rect = {___arg2, ___arg1,  ___arg4, ___arg3};
     RectRgn( reg, &rect );
     ___result_voidstar = reg;"))


(definition RectInRgn
  (c-function (short short short short RgnHandle) bool
    "Rect rect = {___arg2, ___arg1,  ___arg4, ___arg3};
     ___result = RectInRgn( &rect, ___arg5 );"))


(definition makeFrontProcess
  (c-function () void
    "ProcessSerialNumber psn = { 0, kCurrentProcess };
     OSErr err = SetFrontProcess( & psn );"))


(definition (HIWindowGetAvailablePositioningBounds)
  (let* ((bounds ((c-function () CGRect*
            "CGRect *bounds = malloc(sizeof(CGRect));
                     HIWindowGetAvailablePositioningBounds( kCGNullDirectDisplay, kHICoordSpace72DPIGlobal, bounds );
                     ___result_voidstar = bounds;")))
 (x (CGPoint-x-ref (CGRect-origin-ref bounds)))
 (y (CGPoint-y-ref (CGRect-origin-ref bounds)))
 (w (CGSize-width-ref (CGRect-size-ref bounds)))
 (h (CGSize-height-ref (CGRect-size-ref bounds))))
    (CGRect-free bounds)
    (values x y w h)))
    

(definition (convertPointToGlobal sourceWindow x y)
  (let* ((pt ((c-function (WindowRef float float) CGPoint*
        "HIPoint *pt = malloc(sizeof(HIPoint));
                 pt->x = ___arg2;
                 pt->y = ___arg3;
                 HIPointConvert( pt, kHICoordSpaceWindow, ___arg1, kHICoordSpace72DPIGlobal, NULL );
                 ___result_voidstar = pt;") sourceWindow (cast <fl> x) (cast <fl> y)))
 (x (CGPoint-x-ref pt))
 (y (CGPoint-y-ref pt)))
    (CGPoint-free pt)
    (values x y)))
                 


(definition (convertCoordinates sourceView destView x y)
  (let* ((pt ((c-function (HIViewRef HIViewRef float float) CGPoint*
        "HIPoint *pt = malloc(sizeof(HIPoint));
                 pt->x = ___arg3;
                 pt->y = ___arg4;
                 HIViewConvertPoint (pt, ___arg1, ___arg2);
                 ___result_voidstar = pt;") sourceView destView x y))
 (x (CGPoint-x-ref pt))
 (y (CGPoint-y-ref pt)))
    (CGPoint-free pt)
    (values x y)))


(definition eventControlRgn
  (c-function (EventRef) RgnHandle
     "RgnHandle inv;
      GetEventParameter( ___arg1, kEventParamRgnHandle, typeQDRgnHandle, NULL, sizeof(inv), NULL, &inv);
      ___result_voidstar = inv;"))


(definition eventWindowRef
  (c-function (EventRef) WindowRef
     "WindowRef ref = NULL;
      GetEventParameter( ___arg1, kEventParamWindowRef, typeWindowRef, NULL, sizeof(WindowRef), NULL, &ref);
      ___result_voidstar = ref;"))


(definition eventKeyCode
  (c-function (EventRef) UInt32
    "UInt32 key;
     GetEventParameter(___arg1, kEventParamKeyCode, typeUInt32, NULL, sizeof(key), NULL, &key);
     ___result = key;"))


(definition eventKeyChar
  (c-function (EventRef) char
    "char ch;
     GetEventParameter(___arg1, kEventParamKeyMacCharCodes, typeChar, NULL, sizeof(ch), NULL, &ch);
     ___result = ch;"))


(definition eventKeyUnicode
  (c-function (EventRef) UniChar
    "UniChar ch;
     GetEventParameter(___arg1, kEventParamKeyUnicodes, typeUnicodeText, NULL, sizeof(ch), NULL, &ch);
     ___result = ch;"))


(definition eventKeyboardType
  (c-function (EventRef) UInt32
    "UInt32 type;
     GetEventParameter(___arg1, kEventParamKeyboardType, typeUInt32, NULL, sizeof(type), NULL, &type);
     ___result = type;"))


(definition eventKeyMods
  (c-function (EventRef) UInt32
    "UInt32 mods;
     GetEventParameter(___arg1, kEventParamKeyModifiers, typeUInt32, NULL, sizeof(mods), NULL, &mods);
     ___result = mods;"))


(definition unmodifiedKey
  (c-function (UInt16 UInt32 UInt32) UniChar
    "UniChar ch;
     UCKeyboardLayout *layout;
     KeyboardLayoutRef layoutRef;
     UInt32 dummy = 0;
     KLGetCurrentKeyboardLayout (&layoutRef);
     KLGetKeyboardLayoutProperty (layoutRef, kKLuchrData, (const void**)&layout);
     UCKeyTranslate(layout, ___arg1, kUCKeyActionDisplay, (___arg3 & ~controlKey & ~optionKey) >> 8,
                    ___arg2, kUCKeyTranslateNoDeadKeysMask, &dummy, 1, &dummy, &ch);
     ___result = ch;"))


(definition (eventMouseLocation ev)
  (let* ((pt ((c-function (EventRef) CGPoint*
                "HIPoint *pt = malloc(sizeof(HIPoint));
                 GetEventParameter( ___arg1, kEventParamWindowMouseLocation, typeHIPoint, NULL, sizeof(HIPoint), NULL, pt);
                 ___result_voidstar = pt;") ev))
 (x (CGPoint-x-ref pt))
 (y (CGPoint-y-ref pt)))
    (CGPoint-free pt)
    (values x y)))


(definition HIViewForPoint
  (c-function (WindowRef float float) HIViewRef
    "HIViewRef res = NULL;
     const HIPoint pt = {___arg2, ___arg3};
     HIViewGetSubviewHit (HIViewGetRoot( ___arg1 ), &pt, 1, &res);
     ___result_voidstar = res;"))


(definition HIViewGetContent
  (c-function (WindowRef) HIViewRef
     "HIViewRef content = NULL;
      HIViewFindByID( HIViewGetRoot( ___arg1 ), kHIViewWindowContentID, &content );
      ___result_voidstar = content;"))


(definition HIViewSetFrame
  (c-function (HIViewRef double double double double) OSStatus
     "HIRect rect = { {___arg2, ___arg3}, {___arg4, ___arg5}};
      ___result = HIViewSetFrame(___arg1, &rect);"))


(definition WindowSetBounds
  (c-function (WindowRef WindowRegionCode short short short short) OSStatus
      "Rect rect = { ___arg4, ___arg3, ___arg4+___arg6, ___arg3+___arg5 };
       ___result = SetWindowBounds(___arg1, ___arg2, &rect);"))


(definition (WindowGetBounds window region)
  (let* ((carbon-rect ((c-function (WindowRef WindowRegionCode) Rect*
                          "Rect *rect = malloc(sizeof(Rect));
                           GetWindowBounds( ___arg1, ___arg2, rect );
                           ___result_voidstar = rect;")
                       window region))
	 (left (Rect-left-ref carbon-rect))
	 (top  (Rect-top-ref carbon-rect))
	 (width (- (Rect-right-ref carbon-rect) left))
	 (height (- (Rect-bottom-ref carbon-rect) top)))
    (Rect-free carbon-rect)
    (values left top width height)))


(definition (HIViewGetFrame view)
  (let* ((carbon-rect ((c-function (HIViewRef) CGRect*
                          "HIRect *rect = malloc(sizeof(HIRect));
                           HIViewGetFrame( ___arg1, rect );
                           ___result_voidstar = rect;")
                       view))
 (left (CGPoint-x-ref (CGRect-origin-ref carbon-rect)))
 (top  (CGPoint-y-ref (CGRect-origin-ref carbon-rect)))
 (width (CGSize-width-ref (CGRect-size-ref carbon-rect)))
 (height (CGSize-height-ref (CGRect-size-ref carbon-rect))))
    (CGRect-free carbon-rect)
    (values left top width height)))


(definition (HIViewGetBounds view)
  (let* ((carbon-rect ((c-function (HIViewRef) CGRect*
                          "CGRect *rect = malloc(sizeof(CGRect));
                           HIViewGetBounds( ___arg1, rect );
                           ___result_voidstar = rect;")
                       view))
 (left (CGPoint-x-ref (CGRect-origin-ref carbon-rect)))
 (top  (CGPoint-y-ref (CGRect-origin-ref carbon-rect)))
 (width (CGSize-width-ref (CGRect-size-ref carbon-rect)))
 (height (CGSize-height-ref (CGRect-size-ref carbon-rect))))
    (CGRect-free carbon-rect)
    (values left top width height)))


(definition void*->HIViewRef
  (c-function (void*) HIViewRef
     "___result_voidstar = (HIViewRef)___arg1;"))


(definition TransformProcessType
  (c-function () OSStatus
    "ProcessSerialNumber psn = { 0, kCurrentProcess };
    ___result = TransformProcessType( &psn, kProcessTransformToForegroundApplication);"))


(definition CreateNewWindow
  (c-function (WindowClass WindowAttributes short short short short) WindowRef
      "WindowRef ret;
       Rect bounds;
       bounds.top = ___arg3;
       bounds.left = ___arg4;
       bounds.bottom = ___arg5;
       bounds.right = ___arg6;
       CreateNewWindow (___arg1,___arg2,&bounds,&ret);
       ___result_voidstar = ret;"))


(definition HIViewCreate
  (c-function () HIViewRef
     "HIObjectRef obj;
      HIObjectCreate( kHIViewClassID, NULL, &obj );
      ___result_voidstar = (HIViewRef)obj;"))


(definition EventCGContext
  (c-function (EventRef) CGContextRef
     "CGContextRef ref;
      GetEventParameter( ___arg1, kEventParamCGContextRef, typeCGContextRef, NULL, sizeof(CGContextRef), NULL, &ref );
      ___result_voidstar = ref;"))

(definition process-window-message
  #f)

(definition process-control-message
  #f)

(definition public (set-process-window-message proc)
  (set! process-window-message proc))


(definition public (set-process-control-message proc)
  (set! process-control-message proc))


(c-definition (call-process-window-message myHandler theEvent userdata) (EventHandlerCallRef EventRef void*) OSStatus "call_process_window_message" ""
   (process-window-message myHandler theEvent userdata))


(c-definition (call-process-control-message myHandler theEvent userdata) (EventHandlerCallRef EventRef void*) OSStatus "call_process_control_message" ""
   (process-control-message myHandler theEvent userdata))


(definition InstallControlEventHandler
  (c-function (ControlRef) OSStatus
    "EventTypeSpec standard[] = {
       {kEventClassControl, kEventControlDraw},
       {kEventClassControl, kEventControlBoundsChanged},
       {kEventClassControl, kEventControlInvalidateForSizeChange},
       {kEventClassControl, kEventControlApplyBackground}
     };

     ___result = InstallControlEventHandler( ___arg1, NewEventHandlerUPP(call_process_control_message), GetEventTypeCount(standard), standard, ___arg1, NULL);"))


(definition InstallWindowEventHandler
  (c-function (WindowRef) OSStatus
     "EventTypeSpec standard[] = {
         {kEventClassWindow,   kEventWindowClose},
         {kEventClassWindow,   kEventWindowBoundsChanged},
         {kEventClassMouse,    kEventMouseMoved},
         {kEventClassMouse,    kEventMouseDown},
         {kEventClassMouse,    kEventMouseUp},
         {kEventClassKeyboard, kEventRawKeyDown}
      };

      ___result = InstallWindowEventHandler( ___arg1, NewEventHandlerUPP(call_process_window_message), GetEventTypeCount(standard), standard, ___arg1, NULL );"))


(definition DestroyWindow
  (c-function (WindowRef) void
     "CFRelease(___arg1);"))


(definition DestroyView
  (c-function (HIViewRef) void
     "CFRelease(___arg1);"))


;;;
;;;; Process
;;;


(definition (relinquish-process)
  )


(definition public (current-process-id)
  (getpid))

                                                                
;;;
;;;; Input
;;;


(definition public (milliseconds-since-startup)
  0)


(definition public (milliseconds-at-last-input)
  0)


;;;
;;;; Message
;;;


(definition public (system-message text . rest)
  (display text)
  (newline))


;;;
;;;; Temporary Path
;;;


(definition public (get-temporary-directory)
  (unimplemented))


(definition public (get-temporary-file . rest)
  (unimplemented))


(TransformProcessType))
