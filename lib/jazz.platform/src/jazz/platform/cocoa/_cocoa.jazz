;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Cocoa
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.platform.cocoa jazz


(export (jazz.platform.cocoa.foreign)
        (jazz.platform.cocoa.types))

(import (jazz.io)
        (jazz.platform.cocoa.foreign)
        (time))


;;;
;;;; Prime
;;;


(definition public (prime-platform)
  ;; when calling collect-processes-info very early in
  ;; the boot process the mac somehow has not yet registered
  ;; our own pid in the list it returns and this ugly hack of
  ;; calling platformGetMainScreen somehow makes it so it becomes
  ;; registered when calling collect-processes-info afterwards
  ;; as a side note it could be that this ugly hack also fixes
  ;; the random hang on startup we sometimes get
  (platformGetMainScreen))


;;;
;;;; Initialize
;;;


(definition public (platform-initialize)
  (platformInit)
  (set-platform-log system-log))


(definition public (platform-time-initialize)
  (system-timezone-set! platformLocalTimezoneOffset)
  (local-timezone-set! platformLocalTimezoneOffset))


;;;
;;;; Bell
;;;


(definition protected (bell-internal)
  (platformBell))

                                                                
;;;
;;;; Input
;;;


(definition public (milliseconds-since-startup)
  0)


(definition public (milliseconds-at-last-input)
  0)


;;;
;;;; Message
;;;


(definition public (poll-messages)
  (declare (proper-tail-calls))
  ;; not doing the loop in C to enable thread scheduling
  (let (loop)
    (when (platformPollEvent)
      (loop))))


;;;
;;;; Feedback
;;;


(definition public (system-message text . rest)
  (bind-keywords ((type 'message) (title #f) (header #f) . others) rest
    (let ((title
            (or title ""))
          (header
            (or header (case type
                         ((message) "Message")
                         ((question) "Question")
                         ((confirmation) "Confirmation")
                         ((problem) "Problem")
                         ((error) "Error"))))
          (style
            (case type
              ((message) NSAlertStyleInformational)
              ((question) NSAlertStyleWarning)
              ((confirmation) NSAlertStyleWarning)
              ((problem) NSAlertStyleCritical)
              ((error) NSAlertStyleCritical))))
      (platformAlert text title header style)
      'yes)))


;;;
;;;; Keyboard
;;;


(definition public (key-down? key)
  (platformKeyDown
    (if (integer? key)
        key
      (char->integer key))))


(definition public (shift-down?)
  (platformShiftDown))


(definition public (control-down?)
  (platformControlDown))


(definition public (alt-down?)
  (platformAltDown))


(definition public (meta-down?)
  (platformMetaDown))


(definition public (modifiers-down)
  (values (shift-down?)
          (control-down?)
          (alt-down?)
          (meta-down?)))


;;;
;;;; Directory
;;;


(definition public (directory-writable? dirname)
  (platformIsDirectoryWritable dirname))


;;;
;;;; Temporary
;;;


(definition public (get-temporary-directory)
  (let ((dir (new Directory (tokenise-filename (platformTemporaryDirectory)))))
    (unless (exists? dir)
      (create dir))
    dir))


(definition public (get-temporary-file (directory: directory #f) (prefix: prefix "JZZ") (extension: extension #f))
  (let ((dir (or directory (get-temporary-directory))))
    (let ((file (timestamped-file dir prefix (or extension "tmp"))))
      (create file)
      file)))


;;;
;;;; Document
;;;


(definition public (open-document file)
  (shell-command (string-append "open " (parse file))))


;;;
;;;; User
;;;


(definition public (get-computer-name)
  (unimplemented 'get-computer-name))


(definition public (get-system-user-name)
  (unimplemented 'get-system-user-name))


;;;
;;;; Sleep
;;;


(definition public (prevent-computer-sleep)
  (platformUpdateSystemActivity #t))


(definition public (allow-computer-sleep)
  (platformUpdateSystemActivity #f))


;;;
;;;; Memory
;;;


(definition protected (current-process-memory)
  (platformProcessMemory))


;;;
;;;; Threads
;;;


(definition public (current-process-threads)
  (let ((info (platformProcessThreads)))
    (and info
         (loop (for n from 0 below (quotient (vector-length info) 2))
               (collect (list (vector-ref info (* n 2))
                              (vector-ref info (+ (* n 2) 1))))))))


;;;
;;;; Version
;;;


(definition *platform-version*
  #f)


(definition public (get-platform-version)
  (or *platform-version*
      (let ((version (platformOperatingSystemVersion)))
        (set! *platform-version* version)
        version))))
