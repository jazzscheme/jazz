;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; iOS Foreign
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.platform.ios.foreign jazz


(import (jazz.foreign)
        (jazz.platform.types))


;;;
;;;; CG Types
;;;


(c-type CGFontRef (pointer (struct "CGFont")))
(c-type CGContextRef (pointer (struct "CGContext")))


;;;
;;;; Platform Header
;;;


(c-declare ios #/Objective-C/

#import <UIKit/UIKit.h>
#import <CoreText/CoreText.h>

typedef struct PlatformWindow            PlatformWindow;

//#)


;;;
;;;; Platform Constants
;;;


(c-declare ios #/Objective-C/

/* platformCreateWindow kinds */
#define PLATFORM_WINDOW                 0x00010011

//#)


;;;
;;;; Platform Structures
;;;


(c-declare ios #/Objective-C/

struct PlatformWindow
{
    // OS stuff
    int       kind;
    id        object;
    id        delegate;
    id        view;
};

//#)


;;;
;;;; Platform Callbacks
;;;


(c-declare cocoa #/Objective-C/

void paint_callback(CGContextRef context, int width, int height);

//#)


;;;
;;;; Platform Fonts
;;;


(c-external (platformCreateFont) CGFontRef
  #/Objective-C/
    ___result = CGFontCreateWithFontName(CFSTR("Helvetica"));
//#)


;;;
;;;; Platform Jazz Window
;;;


(c-declare cocoa #/Objective-C/

@interface JazzWindow : UIWindow
{
    PlatformWindow* window;
    
}

- (void)setPlatformWindow:(PlatformWindow*)win;

@end

@implementation JazzWindow

- (void)setPlatformWindow:(PlatformWindow*)win
{
    window = win;
}

- (BOOL)canBecomeKeyWindow
{
    return window->kind == PLATFORM_WINDOW;
}

@end

//#)


;;;
;;;; Platform Jazz Content View
;;;


(c-declare cocoa #/Objective-C/

@interface JazzContentView : UIView
{
    PlatformWindow* window;
}

- (id)initWithPlatformWindow:(PlatformWindow*)initWindow;

@end

@implementation JazzContentView

- (BOOL)isFlipped
{
    return YES;
}

- (id)initWithPlatformWindow:(PlatformWindow*)initWindow
{
    self = [super init];
    if (self != nil)
    {
        window = initWindow;
    }

    return self;
}

- (BOOL)isOpaque
{
    return YES;
}

- (BOOL)canBecomeKeyView
{
    return YES;
}

- (BOOL)acceptsFirstResponder
{
    return YES;
}
 
- (void)drawRect:(CGRect)rect
{
    int width, height;
    CGContextRef context;
    
    width = [self bounds].size.width;
    height = [self bounds].size.height;
    
    context = UIGraphicsGetCurrentContext();
    CGContextTranslateCTM (context, 0.0, height);
    CGContextScaleCTM (context, 1.0, -1.0);
    
    paint_callback(context,width,height);
}


@end

//#)


;;;
;;;; Platform Window Creation
;;;


(c-declare ios #/Objective-C/

@interface AppDelegate : UIResponder <UIApplicationDelegate>

@property (strong, nonatomic) UIWindow *window;


@end

static void createWindow(PlatformWindow* window,
                              int kind)
{
    window->kind = kind;
    
    // window->delegate = [[JazzWindowDelegate alloc] initWithPlatformWindow:window];
    
    window->object = [[JazzWindow alloc] initWithFrame:[[UIScreen mainScreen] bounds]];
    ((JazzWindow*) window->object).rootViewController=[[UIViewController alloc] init];
    
    /*
    window->object = [[JazzWindow alloc]
        initWithContentRect:NSMakeRect(0, 0, window->width, window->height)
                  styleMask:styleMask
                    backing:NSBackingStoreBuffered
                      defer:NO];
    */
    
    [window->object setPlatformWindow:window];
    window->view = [[JazzContentView alloc] initWithFrame:[[UIScreen mainScreen] bounds]];
    // window->view = [[JazzContentView alloc] initWithPlatformWindow:window];
    ((JazzWindow*) window->object).backgroundColor = [UIColor blackColor];
    [window->object addSubview:window->view];
    [window->object setDelegate:window->delegate];
    
    // TEST
    [window->object makeKeyAndVisible];
    
    AppDelegate *appDelegate = (AppDelegate *)[[UIApplication sharedApplication] delegate];
    appDelegate.window=window->object;
    
    NSLog(@"Window: %@",window->object);
    NSLog(@"View: %@",window->view);
    NSLog(@"Hidden: %d",((JazzWindow*) window->object).hidden);
    
}

//#)


;;;
;;;; Platform Window Input
;;;


(c-declare ios #/Objective-C/

PlatformWindow* platformCreateWindow()
{
    PlatformWindow* window;

    window = (PlatformWindow*) calloc(1, sizeof(PlatformWindow));
    
    createWindow(window, PLATFORM_WINDOW);
    
    return window;
}

//#)


;;;
;;;; Platform
;;;


(c-type platformwindow (pointer (struct "PlatformWindow")))


(c-external (platformCreateWindow) platformwindow)


;;;
;;;; Callbacks
;;;


(definition log-callbacks?
  #f)


(c-definition (paint-callback context width height) (CGContextRef int int) void "paint_callback" ""
  (when *paint-callback*
    (*paint-callback* context width height)))


(definition *paint-callback*
  #f)

(definition public (set-paint-callback proc)
  (set! *paint-callback* proc)))
