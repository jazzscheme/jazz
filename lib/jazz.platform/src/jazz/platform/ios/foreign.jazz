;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; iOS Foreign
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.platform.ios.foreign jazz


(import (jazz.foreign)
        (jazz.platform.types))


;;;
;;;; CG Types
;;;


(c-type CGFontRef (pointer (struct "CGFont")))
(c-type CGContextRef (pointer (struct "CGContext")))


;;;
;;;; Platform Header
;;;


(c-declare ios #/Objective-C/

#import <UIKit/UIKit.h>
#import <CoreText/CoreText.h>
#import <StoreKit/StoreKit.h>
#import <MobileCoreServices/UTCoreTypes.h>
#import <MediaPlayer/MediaPlayer.h>
#import <AVFoundation/AVFoundation.h>
#import <AudioToolbox/AudioToolbox.h>
//#)



;;;
;;;; id
;;;

;(c-type id (pointer (struct "objc_object") (id Class) "release_id"))
(c-type id (pointer (struct "objc_object") #f))

 
;;;
;;;; Cocoa NSArray
;;;


(c-type NSArray "NSArray")
(c-type NSArray* (pointer NSArray))



(definition public NSArray-length
  (c-function NSArray-length (NSArray*) int "___result = [___arg1 count];"))

(definition public NSArray-ref
  (c-function NSArray-ref (NSArray* int) id "___result_voidstar = [___arg1 objectAtIndex:___arg2];"))


(definition public (nsarray->list array)
  (let ((count (NSArray-length array)))
    (map (lambda (n)
           (NSArray-ref array n))
         (naturals 0 count))))


(definition public NSArray-make
  (c-function NSArray-make () NSArray* 
    "___result = [NSArray array];"))


(definition public NSArray-addObjectAtEnd
  (c-function NSArray-addObjectAtEnd (NSArray* id) NSArray* 
    "___result = [___arg1 arrayByAddingObject:(id)___arg2];"))


(definition public (list->nsarray l)
  (let ((a (NSArray-make)))
    (for-each (lambda (e)
                (set! a (NSArray-addObjectAtEnd a e)))
              l)
    a))

;;;
;;;; defaults
;;;

(c-external (platformDefaultsSetIntegerForKey char-string int) void
  #/Objective-C/
  NSUserDefaults *userDefaults = [NSUserDefaults standardUserDefaults];
  [userDefaults setInteger:___arg2 forKey:[NSString stringWithCString:___arg1 encoding:NSUTF8StringEncoding]];
    //#)


(c-external (platformDefaultsGetIntegerForKey char-string) int
  #/Objective-C/
  NSUserDefaults *userDefaults = [NSUserDefaults standardUserDefaults];
  ___result=[userDefaults integerForKey:[NSString stringWithCString:___arg1 encoding:NSUTF8StringEncoding]];
  //#)



(c-external (platformDefaultsSetStringrForKey char-string char-string) void
  #/Objective-C/
  NSUserDefaults *userDefaults = [NSUserDefaults standardUserDefaults];
  [userDefaults setObject:(id)[NSString stringWithCString:___arg2 encoding:NSUTF8StringEncoding] forKey:[NSString stringWithCString:___arg1 encoding:NSUTF8StringEncoding]];
  //#)


(c-external (platformDefaultsGetStringForKey char-string) char-string
  #/Objective-C/
  NSUserDefaults *userDefaults = [NSUserDefaults standardUserDefaults];
  ___result=(char *)[[userDefaults stringForKey:[NSString stringWithCString:___arg1 encoding:NSUTF8StringEncoding]] cStringUsingEncoding:NSUTF8StringEncoding];
  //#)


(c-external (platformDefaultsClearKey char-string) void
  #/Objective-C/
  NSUserDefaults *userDefaults = [NSUserDefaults standardUserDefaults];
  [userDefaults removeObjectForKey:[NSString stringWithCString:___arg1 encoding:NSUTF8StringEncoding]];
  //#)


;;;
;;;; Screen dimensions
;;;


(c-external (platformGetScreenWidth) float
  #/Objective-C/
  ___result=([[UIScreen mainScreen] bounds].size.width);
  //#)


(c-external (platformGetScreenHeight) float
  #/Objective-C/
  ___result=([[UIScreen mainScreen] bounds].size.height);
  //#)


;;;
;;;; System sounds
;;;


(c-external (platformPlaySystemSound int) void
  #/Objective-C/
  AudioServicesPlaySystemSound(___arg1);
  //#)



;;;
;;;; Language
;;;


(c-external (platformGetLanguage) char-string
  #/Objective-C/
  NSString * language = [[NSLocale preferredLanguages] objectAtIndex:0];
  ___result=(char *)[language cStringUsingEncoding:NSUTF8StringEncoding];
  //#)


;;;
;;;; Library path
;;;


(c-external (platformGetLibraryPath) char-string
  #/Objective-C/
  NSArray *paths = NSSearchPathForDirectoriesInDomains(NSLibraryDirectory, NSUserDomainMask, YES);
  NSString *libraryDirectory = [paths objectAtIndex:0];
  ___result=(char *)[libraryDirectory cStringUsingEncoding:NSUTF8StringEncoding];
  //#)


;;;
;;;; UIAlertView
;;;

(c-declare ios #/Objective-C/


  extern void jazz_call_action_lambda(UIAlertAction*);

  //#)


(c-type uialertcontroller (pointer "UIAlertController"))
(c-type uialertaction (pointer "UIAlertAction"))

(c-external (platformCreateUIAlertController nonnull-UTF-8-string nonnull-UTF-8-string) uialertcontroller
  #/Objective-C/
  ___result = [UIAlertController alertControllerWithTitle:[NSString stringWithCString:___arg1 encoding:NSUTF8StringEncoding]
                message: [NSString stringWithCString:___arg2 encoding:NSUTF8StringEncoding]
                               preferredStyle:UIAlertControllerStyleAlert];
  //#)


(c-external (platformCreateUIAlertAction nonnull-UTF-8-string int) uialertaction
  #/Objective-C/
  ___result = [UIAlertAction actionWithTitle: [NSString stringWithCString:___arg1 encoding:NSUTF8StringEncoding] style:___arg2
                                               handler:^(UIAlertAction * action) {
                                                   
                                                                                  jazz_call_action_lambda(action);
                                               }];
  //#)


(c-definition (jazz_call_action_lambda action) (uialertaction) void "jazz_call_action_lambda" ""
  (when *alert-action-callback*
    (*alert-action-callback* action)))


(definition *alert-action-callback*
  #f)


(definition public (set-alert-action-callback proc)
  (set! *alert-action-callback* proc))


(c-external (platformUIAlertControllerAddAction uialertcontroller uialertaction) void
  #/Objective-C/
  [___arg1 addAction:___arg2];
  //#)


(c-external (platformUIAlertControllerShow uiviewcontroller uialertcontroller) void
  #/Objective-C/
  [___arg1 presentViewController:___arg2 animated:YES completion:nil];
  //#)



(c-external (platformUIAlertControllerAddTextField uialertcontroller int) void
  #/Objective-C/
  [___arg1 addTextFieldWithConfigurationHandler:^(UITextField *textField) {
       textField.secureTextEntry = ___arg2;
    }];
  //#)



(c-external (platformUIAlertControllerTextFields uialertcontroller) NSArray*
  #/Objective-C/
  ___result=___arg1.textFields;
  //#)



;;;
;;;; Platform Fonts
;;;


(c-external (platformCreateFont) CGFontRef
  #/Objective-C/
    ___result = CGFontCreateWithFontName(CFSTR("Helvetica"));
//#)


(c-external (platformGetGlyphForChar CGFontRef char-string) int
  #/Objective-C/
    NSString *fontName = (NSString *)CGFontCopyPostScriptName(___arg1);
    NSString* cstring=[NSString stringWithCString:___arg2 encoding:NSUTF8StringEncoding];
    NSUInteger count = cstring.length;
    unichar characters[count];
    [cstring getCharacters:characters range:NSMakeRange(0, count)];
    CTFontRef ctfont=CTFontCreateWithName((CFStringRef)fontName, 12.0, NULL);
    CGGlyph glyphs[count];
    CTFontGetGlyphsForCharacters(ctfont, characters, glyphs, count);
    ___result = glyphs[0];
  //#)


;;;
;;;; Platform Window
;;;



(c-type uiwindow (pointer "UIWindow"))

(c-external (platformMakeUIWindow) uiwindow
  #/Objective-C/
  
  ___result=[[UIWindow alloc] initWithFrame:[[UIScreen mainScreen] bounds]];
  NSLog(@"Screen: %@",[UIScreen mainScreen]);
  ___result.userInteractionEnabled=YES;
  //#)


(c-external (UIWindowAddSubview uiwindow uiview) void
  #/Objective-C/
  UIView *topView=___arg1.rootViewController.view;
  [___arg1 addSubview: ___arg2];
  //#)


(c-external (UIWindowMakeKeyAndVisible uiwindow) void
  #/Objective-C/
  [___arg1 makeKeyAndVisible];
  //#)


(c-external (UIWindowSetRootViewController uiwindow uiviewcontroller) void
  #/Objective-C/
  [___arg1 setRootViewController:___arg2];
  //#)



;;;
;;;; UIColor
;;;


(c-type uicolor (pointer "UIColor"))

(c-external (platformMakeUIColor float float float float) uicolor
  #/Objective-C/
  ___result=[UIColor colorWithRed: ___arg1 green: ___arg2 blue: ___arg3 alpha: ___arg4];
           
  //#)


;;;
;;;; UIView
;;;


(c-declare ios #/Objective-C/

@interface JazzUIView : UIView {}
@end
@implementation JazzUIView
                
extern void jazz_call_touchdown(UIView*,float,float);
extern void jazz_call_touchmove(UIView*,float,float);
extern void jazz_call_touchup(UIView*,float,float);
extern void paint_callback(UIView*,CGContextRef context, int width, int height);

                
- (void)touchesBegan:(NSSet<UITouch *> *)touches
           withEvent:(UIEvent *)event  
{
    UITouch *touch = [[event allTouches] anyObject];
    CGPoint touchLocation = [touch locationInView:self];   
    jazz_call_touchdown(self,touchLocation.x,touchLocation.y);
    [super touchesBegan:touches withEvent:event];
}  

- (void)touchesMoved:(NSSet *)touches withEvent:(UIEvent *)event
{
   UITouch *touch = [[event allTouches] anyObject];
   CGPoint touchLocation = [touch locationInView:self];   
   jazz_call_touchmove(self,touchLocation.x,touchLocation.y);
   [super touchesMoved:touches withEvent:event];
}


- (void)touchesEnded:(NSSet *)touches withEvent:(UIEvent *)event
{
   UITouch *touch = [[event allTouches] anyObject];
   CGPoint touchLocation = [touch locationInView:self];   
   jazz_call_touchup(self,touchLocation.x,touchLocation.y);
   [super touchesEnded:touches withEvent:event];
}

- (void)touchesCancelled:(NSSet *)touches withEvent:(UIEvent *)event
{
   [super touchesCancelled:touches withEvent:event];
}


- (void)drawRect:(CGRect)rect
{
    int width, height;
    CGContextRef context;
    
    width = [self bounds].size.width;
    height = [self bounds].size.height;
    
    context = UIGraphicsGetCurrentContext();
    CGContextTranslateCTM (context, 0.0, height);
    CGContextScaleCTM (context, 1.0, -1.0);
    
    paint_callback(self,context,width,height);
}

                
@end

//#)


(c-type jazzuiview (pointer "JazzUIView"))
(c-type uiview (pointer "UIView"))


(c-external (platformCreateUIView float float float float) uiview
  #/Objective-C/
  CGRect  viewRect = CGRectMake(___arg1, ___arg2, ___arg3, ___arg4);
  ___result=[[JazzUIView alloc] initWithFrame:viewRect];
  ___result.userInteractionEnabled=YES;
  //#)

(c-external (UIViewSetBackgroundColor uiview uicolor) void
  #/Objective-C/
  [___arg1 setBackgroundColor: ___arg2];
  //#)


(c-external (UIViewAddSubview uiview uiview) void
  #/Objective-C/
  [___arg1 addSubview: ___arg2];
  //#)

(c-external (UIViewSetUserInteractionEnabled uiview int) void
  #/Objective-C/
  ___arg1.userInteractionEnabled=___arg2;
  //#)


(c-external (UIViewSetCornerRadius uiview float) void
  #/Objective-C/
  ___arg1.layer.cornerRadius=___arg2;
  //#)


(c-external (UIViewSizeToFit uiview) void
  #/Objective-C/
  [___arg1 sizeToFit];
  //#)


(c-external (UIViewSetHidden uiview int) void
  #/Objective-C/
  [___arg1 setHidden:___arg2];
  //#)


;;;
;;;; Callbacks
;;;


;;;
;;;; paint
;;;


(c-definition (paint-callback view context width height) (uiview CGContextRef int int) void "paint_callback" ""
  (when *paint-callback*
    (*paint-callback* view context width height)))


(definition *paint-callback*
  #f)

(definition public (set-paint-callback proc)
  (set! *paint-callback* proc))


;;;
;;;; touches
;;;


(c-definition (jazz-call-touchdown view x y) (uiview float float) void "jazz_call_touchdown" ""
  (when *touch-began-callback*
    (*touch-began-callback* view x y)))


(definition *touch-began-callback*
  #f)


(definition public (set-touch-began-callback proc)
  (set! *touch-began-callback* proc))


(c-definition (jazz-call-touchmove view x y) (uiview float float) void "jazz_call_touchmove" ""
  (when *touch-move-callback*
    (*touch-move-callback* view x y)))


(definition *touch-move-callback*
  #f)


(definition public (set-touch-move-callback proc)
  (set! *touch-move-callback* proc))


(c-definition (jazz-call-touchup view x y) (uiview float float) void "jazz_call_touchup" ""
  (when *touch-up-callback*
    (*touch-up-callback* view x y)))


(definition *touch-up-callback*
  #f)


(definition public (set-touch-up-callback proc)
  (set! *touch-up-callback* proc))


;;;
;;;; UISwitch
;;;


(c-external (platformUISwitchSetState uiview int) void
  #/Objective-C/
  [___arg1 setOn:___arg2 animated:YES];
  //#)


(c-external (platformUISwitchSetEnabled uiview int) void
  #/Objective-C/
  ((UISwitch *)___arg1).enabled=___arg2;
  //#)


(c-definition (jazz-call-switch-changed switch) (uiview) void "jazz_call_switch_changed" ""
  (when *switch-changed-callback*
    (*switch-changed-callback* switch)))


(c-declare ios #/Objective-C/
  
@interface JazzSwitchController : UIViewController {}
@end
@implementation JazzSwitchController

- (void)switchChanged:(id)from
{
    jazz_call_switch_changed(from);
}

@end
//#)


(c-external (platformCreateUISwitch float float float float) uiview
  #/Objective-C/
  CGRect  viewRect = CGRectMake(___arg1, ___arg2, ___arg3, ___arg4);
  ___result=[[UISwitch alloc] initWithFrame:viewRect];
  JazzSwitchController *ctrl=[[JazzSwitchController alloc] init];
  [___result addTarget:ctrl
             action:@selector(switchChanged:)
   forControlEvents:UIControlEventValueChanged];
  //#)


(definition *switch-changed-callback*
  #f)


(definition public (set-switch-changed-callback proc)
  (set! *switch-changed-callback* proc))

                                             
                                             

;;;
;;;; JazzUITableView
;;;


(c-declare ios #/Objective-C/

@interface JazzUITableView : UITableView <UITableViewDataSource,UITableViewDelegate> {}
@end
@implementation JazzUITableView
                
- (id)init
{
  [super init];
  self.dataSource=self;
  [self setDelegate:self];
  [self setAllowsSelection:YES];
  return self;
}

extern UITableViewCell *jazz_call_cell_for_row(JazzUITableView*,int,int);
extern int jazz_call_editing_style_for_row (JazzUITableView*,int,int);
extern void jazz_call_edit_action_for_row(JazzUITableView*,int,int);
extern int jazz_call_number_of_sections(JazzUITableView*);
extern int jazz_call_number_of_rows(JazzUITableView*,int);
extern void jazz_call_did_select(JazzUITableView*,int,int);
extern char *jazz_call_title_for_section(JazzUITableView*,int);
extern NSArray *jazz_call_index_titles(JazzUITableView*);
extern int jazz_call_index_mapping(JazzUITableView*,int);


- (UITableViewCell *)tableView:(UITableView *)tableView
         cellForRowAtIndexPath:(NSIndexPath *)indexPath
{
   return jazz_call_cell_for_row(self,(int)[indexPath indexAtPosition:0],(int)[indexPath indexAtPosition:1]);
} 

- (UITableViewCellEditingStyle)tableView:(UITableView *)tableView
           editingStyleForRowAtIndexPath:(NSIndexPath *)indexPath
{
 return jazz_call_editing_style_for_row(self,(int)[indexPath indexAtPosition:0],(int)[indexPath indexAtPosition:1]);
}


- (void)tableView:(UITableView *)tableView commitEditingStyle:(UITableViewCellEditingStyle)editingStyle forRowAtIndexPath:(NSIndexPath *)indexPath
{
   jazz_call_edit_action_for_row(self,(int)[indexPath indexAtPosition:0],(int)[indexPath indexAtPosition:1]);
}

- (NSString *)tableView:(UITableView *)tableView
titleForHeaderInSection:(NSInteger)section
{
 char *title= jazz_call_title_for_section(self,(int)section);
 return [NSString stringWithCString:title encoding:NSUTF8StringEncoding];
}


- (NSInteger)numberOfSectionsInTableView:(UITableView *)tableView
{
   return (NSInteger)jazz_call_number_of_sections(self);
}
 
- (NSInteger)tableView:(UITableView *)tableView
 numberOfRowsInSection:(NSInteger)section
{
 return (NSInteger)jazz_call_number_of_rows(self,(int)section);
}

- (NSArray<NSString *> *)sectionIndexTitlesForTableView:(UITableView *)tableView
{
 return jazz_call_index_titles(self);
}


- (NSInteger)tableView:(UITableView *)tableView sectionForSectionIndexTitle:(NSString *)title atIndex:(NSInteger)index
{
 return (NSInteger)jazz_call_index_mapping(self,(int)index);
}

- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath
{
  jazz_call_did_select(self,(int)[indexPath indexAtPosition:0],(int)[indexPath indexAtPosition:1]);
}



                
@end

//#)


(c-type uitableview (pointer "JazzUITableView"))
(c-type uitableviewcell (pointer "UITableViewCell"))

(c-definition (jazz-call-cell-for-row table i j) (uitableview int int) uitableviewcell "jazz_call_cell_for_row" ""
  (when *cell-for-row-callback*
    (*cell-for-row-callback* table i j)))


(c-definition (jazz-call-editing-style-for-row table i j) (uitableview int int) int "jazz_call_editing_style_for_row" ""
  (when *cell-edit-style-for-row-callback*
    (*cell-edit-style-for-row-callback* table i j)))

(c-definition (jazz-call-edit-action-for-row table i j) (uitableview int int) void "jazz_call_edit_action_for_row" ""
  (when *cell-call-action-for-row-callback*
    (*cell-call-action-for-row-callback* table i j)))


(c-definition (jazz-call-number-of-sections table) (uitableview) int "jazz_call_number_of_sections" ""
  (when *number-of-sections-callback*
    (*number-of-sections-callback* table)))


(c-definition (jazz-call-number-of-rows table section) (uitableview int) int "jazz_call_number_of_rows" ""
  (when *number-of-rows-callback*
    (*number-of-rows-callback* table section)))


(c-definition (jazz-call-title-for-section table section) (uitableview int) nonnull-UTF-8-string "jazz_call_title_for_section" ""
  (when *section-titles-callback*
    (*section-titles-callback* table section)))


(c-definition (jazz-call-index-titles table) (uitableview) NSArray* "jazz_call_index_titles" ""
  (when *index-titles-callback*
    (*index-titles-callback* table)))


(c-definition (jazz-call-index-mapping table i) (uitableview int) int "jazz_call_index_mapping" ""
  (when *index-mapping-callback*
    (*index-mapping-callback* table i)))


(c-definition (jazz-call-did-select table i j) (uitableview int int) void "jazz_call_did_select" ""
  (when *did-select-callback*
    (*did-select-callback* table i j)))


(definition *did-select-callback*
  #f)


(definition public (set-did-select-callback proc)
  (set! *did-select-callback* proc))
  

(definition *cell-for-row-callback*
  #f)


(definition public (set-edit-style-callback proc)
  (set! *cell-edit-style-for-row-callback* proc))


(definition *cell-edit-style-for-row-callback*
  #f)


(definition public (set-edit-action-callback proc)
  (set! *cell-call-action-for-row-callback* proc))


(definition *cell-call-action-for-row-callback*
  #f)


(definition public (set-cell-for-row-callback proc)
  (set! *cell-for-row-callback* proc))


(definition *number-of-sections-callback*
  #f)

(definition public (set-number-of-sections-callback proc)
  (set! *number-of-sections-callback* proc))


(definition *number-of-rows-callback*
  #f)

(definition public (set-number-of-rows-callback proc)
  (set! *number-of-rows-callback* proc))


(definition *section-titles-callback*
  #f)


(definition public (set-sections-titles-callback proc)
  (set! *section-titles-callback* proc))


(definition *index-titles-callback*
  #f)


(definition public (set-index-titles-callback proc)
  (set! *index-titles-callback* proc))


(definition *index-mapping-callback*
  #f)


(definition public (set-section-index-mapping-callback proc)
  (set! *index-mapping-callback* proc))


(c-external (null-array) NSArray*
  #/Objective-C/
  ___result=[NSArray array];
  //#)


(c-external (platformCreateUITableView float float float float int) uiview
  #/Objective-C/
  CGRect  viewRect = CGRectMake(___arg1, ___arg2, ___arg3, ___arg4);
  ___result=[[JazzUITableView alloc] initWithFrame:viewRect style:___arg5];
  ((UITableView *)___result).dataSource=(id<UITableViewDataSource>)___result;
  //#)

(c-external (platformSetDelegate uiview uiview) void
  "[___arg1 setDelegate:(id<NSFileManagerDelegate>)___arg2];")


(c-external (platformSetEditableMode uiview int) void
  #/Objective-C/
  [(UITableView *)___arg1 setEditing:___arg2 animated: YES];
  //#)


(c-external (platformSetHeaderHeight uiview float) void
  #/Objective-C/
  ((UITableView *)___arg1).sectionHeaderHeight = ___arg2;
  //#)


(c-external (platformSetFooterHeight uiview float) void
  #/Objective-C/
  ((UITableView *)___arg1).sectionFooterHeight = ___arg2;
  //#)


(c-external (platformTableDeleteRow uiview int int) void
  #/Objective-C/
  NSIndexPath *path=[[NSIndexPath alloc] initWithIndex:___arg2];
  NSIndexPath *path2=[path indexPathByAddingIndex:___arg3];
  [(UITableView *)___arg1 deleteRowsAtIndexPaths:[NSArray arrayWithObject:path2]
                       withRowAnimation:UITableViewRowAnimationFade];
  //#)


(c-external (platformTableReload uiview) void
  #/Objective-C/
  
  [(UITableView *)___arg1 reloadData];
  //#)


(c-external (platformSetAllowSelectionInEditMode uiview int) void
  #/Objective-C/
  ((UITableView *)___arg1).allowsSelectionDuringEditing=___arg2;
  //#)


;;;
;;;; JazzUITableViewCell
;;;


(c-definition (jazz-call-image-select cell) (uitableviewcell) void "jazz_call_image_select" ""
  (debug 'jazz-call-image-select)
  (when *image-select-callback*
    (*image-select-callback* cell)))



(c-declare ios #/Objective-C/

@interface JazzUITableViewCell : UITableViewCell {}
@end
@implementation JazzUITableViewCell

 - (void)touchesBegan:(NSSet *)touches withEvent:(UIEvent *)event
{
   [super touchesBegan:touches withEvent:event];
}    
     
@end

@interface JazzUITableViewCellLeftTouch : UITableViewCell {}
@end
@implementation JazzUITableViewCellLeftTouch

 - (void)touchesBegan:(NSSet *)touches withEvent:(UIEvent *)event
{
   CGPoint touchPoint=[[touches anyObject] locationInView:self];
  if(self.imageView.image && touchPoint.x<64.0) 	jazz_call_image_select(self);
  else [super touchesBegan:touches withEvent:event];
}    
     
@end

@interface JazzUITableViewCellRightTouch : UITableViewCell {}
@end
@implementation JazzUITableViewCellRightTouch

 - (void)touchesBegan:(NSSet *)touches withEvent:(UIEvent *)event
{
   CGPoint touchPoint=[[touches anyObject] locationInView:self];
   CGFloat w=self.frame.size.width;
  if((w-touchPoint.x)<64.0) 	jazz_call_image_select(self);
  else [super touchesBegan:touches withEvent:event];
}    
     
@end
//#)

(definition *image-select-callback*
  #f)

(definition public (set-image-select-callback cb)
  (set! *image-select-callback* cb))



;;;
;;;; UITableViewCell
;;;


(c-external (platformCreateUITableViewCell) uitableviewcell
  "___result=[[JazzUITableViewCell alloc] initWithStyle:3 reuseIdentifier:nil];")


(c-external (platformCreateUITableViewCellLeftTouch) uitableviewcell
  "___result=[[JazzUITableViewCellLeftTouch alloc] initWithStyle:3 reuseIdentifier:nil];")


(c-external (platformCreateUITableViewCellRightTouch) uitableviewcell
  "___result=[[JazzUITableViewCellRightTouch alloc] initWithStyle:3 reuseIdentifier:nil];")


(c-external (UITableViewCellsetTitle uitableviewcell nonnull-UTF-8-string) void
  "___arg1.textLabel.text=[NSString stringWithCString:___arg2 encoding:NSUTF8StringEncoding];")


(c-external (UITableViewCellsetSubTitle uitableviewcell nonnull-UTF-8-string) void
  "___arg1.detailTextLabel.text=[NSString stringWithCString:___arg2 encoding:NSUTF8StringEncoding];")
  

(c-external (UITableViewCellsetImage uitableviewcell uiimage) void
  #/Objective-C/
  ___arg1.imageView.image=___arg2; 
  UITapGestureRecognizer *singleTap = [[UITapGestureRecognizer alloc] initWithTarget:___arg1 action:@selector(handleImageTap:)];
  [___arg1.imageView addGestureRecognizer:singleTap];
  //#)


(c-external (UITableViewCellcontentView uitableviewcell) uiview
  "___result=___arg1.contentView;")


(c-external (UITableViewCellSetAccessoryView uitableviewcell uiview) void
  "___arg1.accessoryView=___arg2;")


(c-external (UITableViewCellSetAccessoryViewType uitableviewcell int) void
  "___arg1.accessoryType=___arg2;")



;;;
;;;; UIViewController
;;;


(c-type uiviewcontroller (pointer "UIViewController"))
(c-type uinavigationitem (pointer "UINavigationItem"))


(c-external (platformCreateUIViewController) uiviewcontroller
  "___result=[[UIViewController alloc] init];")
  

(c-external (UIViewControllerSetView uiviewcontroller uiview) void
  "___arg1.view=___arg2;")


(c-external (UIViewControllerSetTitle uiviewcontroller nonnull-UTF-8-string) void
  "___arg1.title=[NSString stringWithCString:___arg2 encoding:NSUTF8StringEncoding];")


(c-external (platformUIViewControllerNavItem uiviewcontroller) uinavigationitem
  #/Objective-C/
  ___result=___arg1.navigationItem;
  //#)


;;;
;;;; UINavigationItem
;;;


(c-external (platformUINavItemSetRightItem uinavigationitem uibarbuttonitem) void
  #/Objective-C/
  ___arg1.rightBarButtonItem=___arg2;
  //#)

(c-external (platformUINavItemSetLeftItem uinavigationitem uibarbuttonitem) void
  #/Objective-C/
  ___arg1.leftBarButtonItem=___arg2;
  //#)


(c-type uibarbuttonitem (pointer "UIBarButtonItem"))

(c-external (platformUIBarButtonItemCreateWithView id) uibarbuttonitem
  #/Objective-C/
  ___result=[[UIBarButtonItem alloc] initWithCustomView:(UIView *)___arg1];
  //#)

(c-external (platformUIBarButtonItemCreateSystemItem int) uibarbuttonitem
  #/Objective-C/
  ___result=[[UIBarButtonItem alloc] initWithBarButtonSystemItem:___arg1
                                     target:nil
                                     action:nil];
  //#)



;;;
;;;; UINavigationController
;;;


(c-type uinavigationcontroller (pointer "UINavigationController"))


(c-external (UINavigationControllerSetRootController uiviewcontroller uiviewcontroller) void
  "[___arg1 setViewControllers:[NSArray arrayWithObject:___arg2]];")


(c-external (UINavigationControllerPushController uiviewcontroller uiviewcontroller) void
  "[___arg1 pushViewController:___arg2 animated:YES];")


(c-external (UINavigationControllerPopController uiviewcontroller) void
  "[___arg1 popViewControllerAnimated:YES];")
  
  
(c-external (UINavigationControllerSetNavigationBarHidden uiviewcontroller int) void
  "[___arg1 setNavigationBarHidden:___arg2 animated:YES];")  


(define *navigation-callback* #f)


(definition public (set-navigation-callback cb)
  (set! *navigation-callback* cb))


(c-definition (jazz-call-will-show-controller ctrl) (uiviewcontroller) void "jazz_call_will_show_controller" ""
  (when *navigation-callback*
    (*navigation-callback* ctrl)))


(c-declare ios #/Objective-C/
  
 @interface JazzNavigationDelegate : NSObject <UINavigationControllerDelegate,UINavigationBarDelegate> {}
 @end
 @implementation JazzNavigationDelegate
 
 - (void)navigationController:(UINavigationController *)navigationController
      willShowViewController:(UIViewController *)viewController
                    animated:(BOOL)animated
 {
    jazz_call_will_show_controller(viewController);
 }
 
 
 -(BOOL)navigationBar:(UINavigationBar *)navigationBar shouldPopItem:(UINavigationItem *)item
{
    NSLog(@"Back button got pressed!");
    //if you return NO, the back button press is cancelled
    return YES;
}

 @end
 //#)


(c-external (platformCreateUINavigationController uiviewcontroller) uiviewcontroller
  #/Objective-C/
  ___result=[[UINavigationController alloc] initWithRootViewController:___arg1];
  JazzNavigationDelegate *navDelegate=[[JazzNavigationDelegate alloc] init];
  ((UINavigationController *)___result).delegate=navDelegate;
  //((UINavigationController *)___result).navigationBar.delegate = navDelegate;
  //#)


;;;
;;;; Media player controller
;;;



(definition *video-done-callback*
  #f)

(definition public (set-video-done-callback proc)
  (set! *video-done-callback* proc))


(c-definition (video-done-callback ctrl) (uiviewcontroller) void "video_done_callback" ""
  (when *video-done-callback*
    (*video-done-callback* ctrl)))


(definition *video-done-modal-callback*
  #f)

(definition public (set-video-done-modal-callback proc)
  (set! *video-done-modal-callback* proc))


(c-definition (video-done-modal-callback ctrl) (uiviewcontroller) void "video_done_modal_callback" ""
  (when *video-done-modal-callback*
    (*video-done-modal-callback* ctrl)))


(definition *video-played-callback*
  #f)

(definition public (set-video-played-callback proc)
  (set! *video-played-callback* proc))


(c-definition (video-played-callback ctrl) (uiviewcontroller) void "video_played_callback" ""
  (when *video-played-callback*
    (*video-played-callback* ctrl)))


(c-declare ios #/Objective-C/

@interface JazzVideoController : UIViewController {}
@property (strong, nonatomic) MPMoviePlayerViewController *ctrl;
@property (strong, nonatomic) AVPlayer *player;
@end
@implementation JazzVideoController

-(void)videoFinished:(NSNotification*)aNotification{
    UIViewController *mplayer=(UIViewController *)self.player;
    int value = [[aNotification.userInfo valueForKey:MPMoviePlayerPlaybackDidFinishReasonUserInfoKey] intValue];
    if (value == MPMovieFinishReasonUserExited) { video_done_callback(self.ctrl);  }
    if (value == MPMovieFinishReasonPlaybackEnded) { video_played_callback(mplayer);  }
}

@end

@interface JazzModalVideoController : UIViewController {}
@property (strong, nonatomic) MPMoviePlayerViewController *ctrl;
@end
@implementation JazzModalVideoController

-(void)videoFinished:(NSNotification*)aNotification{
    UIViewController *mplayer=(UIViewController *)self.ctrl;
    int value = [[aNotification.userInfo valueForKey:MPMoviePlayerPlaybackDidFinishReasonUserInfoKey] intValue];
    if (value == MPMovieFinishReasonUserExited) { NSLog(@" video_done_modal_callback "); video_done_modal_callback(mplayer);  }
}

@end 
    
//#)

(c-external (platformPlayVideo uiviewcontroller char-string) void
  #/Objective-C/
   NSURL *movieURL = [NSURL fileURLWithPath:[NSString stringWithCString:___arg2 encoding:NSUTF8StringEncoding]];
   JazzModalVideoController *vctrl=[[JazzModalVideoController alloc] init];
   MPMoviePlayerViewController *theMovie = [[MPMoviePlayerViewController alloc] initWithContentURL:movieURL];
   vctrl.ctrl=theMovie;
   [theMovie.moviePlayer.view setFrame: ___arg1.view.bounds];
   [[NSNotificationCenter defaultCenter] removeObserver:theMovie  name:MPMoviePlayerPlaybackDidFinishNotification object:theMovie.moviePlayer];
   [[NSNotificationCenter defaultCenter] addObserver:vctrl selector:@selector(videoFinished:) name:MPMoviePlayerPlaybackDidFinishNotification object:theMovie.moviePlayer];
   [___arg1 presentViewController:theMovie animated:YES completion:nil];
   [theMovie.moviePlayer play];
   //#)


(c-type avplayer (pointer "AVPlayer"))

(c-external (platformPlayMovieInRect uiview char-string float float float float) avplayer
  #/Objective-C/
  NSURL *movieURL = [NSURL fileURLWithPath:[NSString stringWithCString:___arg2 encoding:NSUTF8StringEncoding]];
  JazzVideoController *vctrl=[[JazzVideoController alloc] init];
  AVPlayer *player=[AVPlayer playerWithURL:movieURL];
  vctrl.player=player;
  player.actionAtItemEnd = AVPlayerActionAtItemEndNone;
  AVPlayerLayer *playerlayer=[AVPlayerLayer playerLayerWithPlayer:player];
  playerlayer.frame = CGRectMake(___arg3, ___arg4, ___arg5, ___arg6);
  [___arg1.layer addSublayer:playerlayer];
  [[NSNotificationCenter defaultCenter] addObserver:vctrl
                                             selector:@selector(videoFinished:)
                                                 name:AVPlayerItemDidPlayToEndTimeNotification
                                               object:[player currentItem]];
  //[player play];
  ___result=player;
  //#)






(c-external (platformVideoPlayerPlay avplayer) void
  #/Objective-C/
  AVPlayerItem *p = [___arg1 currentItem];
  [p seekToTime:kCMTimeZero];
  [___arg1 play];
  //#)


(c-external (platformMoviePlayerView uiviewcontroller) uiview
  #/Objective-C/
  ___result=((MPMoviePlayerViewController *)___arg1).moviePlayer.view;
  //#)


(c-external (platformExtractVideoThumbnail char-string) uiimage
  #/Objective-C/
  NSURL *partOneUrl=[NSURL fileURLWithPath:[NSString stringWithCString:___arg1 encoding:NSUTF8StringEncoding]];
  AVURLAsset *asset1 = [[AVURLAsset alloc] initWithURL:partOneUrl options:nil];
  AVAssetImageGenerator *generate1 = [[AVAssetImageGenerator alloc] initWithAsset:asset1];
  generate1.appliesPreferredTrackTransform = YES;
  NSError *err = NULL;
  CMTime time = CMTimeMake(1, 2);
  CGImageRef oneRef = [generate1 copyCGImageAtTime:time actualTime:NULL error:&err];
  UIImage *one = [[UIImage alloc] initWithCGImage:oneRef];
  ___result=one;
  //#)



;;;
;;;; UIScrollView
;;;


(c-type uiscrollview (pointer "UIScrollView"))


(c-definition (jazz-call-page-changed sview page) (uiview int) void "jazz_call_page_changed" ""
  (when *page-changed-callback*
    (*page-changed-callback* sview page)))

(c-definition (jazz-call-begin-scroll sview) (uiview) void "jazz_call_begin_scroll" ""
  (when *begin-scroll-callback*
    (*begin-scroll-callback* sview)))


(c-declare ios #/Objective-C/

@interface JazzUIScrollView : UIScrollView <UIScrollViewDelegate> {}
@end
@implementation JazzUIScrollView

- (UIView *)viewForZoomingInScrollView:(UIScrollView *)scrollView
{
    return [[self subviews] objectAtIndex:0];
}


- (void)scrollViewDidEndZooming:(UIScrollView *)scrollView
                       withView:(UIView *)view
                        atScale:(CGFloat)scale
{
}


- (void)scrollViewDidEndDecelerating:(UIScrollView *)scrollView{
 
    //find the page number you are on
    CGFloat pageWidth = self.frame.size.width;
    int page = floor((self.contentOffset.x - pageWidth / 2) / pageWidth) + 1;
    jazz_call_page_changed(self,page);
}

- (void)scrollViewWillBeginDragging:(UIScrollView *)scrollView
{
 jazz_call_begin_scroll(self);
}


@end

//#)

(c-external (platformCreateUIScrollView float float float float) uiview
  #/Objective-C/
  CGRect  viewRect = CGRectMake(___arg1, ___arg2, ___arg3, ___arg4);
  ___result=[[JazzUIScrollView alloc] initWithFrame:viewRect];
  //#)


(c-external (UIScrollViewAddSubview uiview uiview) void
  #/Objective-C/
  [___arg1 addSubview: ___arg2];
  //#)


(c-external (UIScrollViewSetScrollDimensions uiview float float) void
  #/Objective-C/
  CGSize size=CGSizeMake(___arg2,___arg3);
  ((UIScrollView *)___arg1).contentSize=size;
  //#)

(c-external (UIScrollViewSetMinZoom uiview float) void
  #/Objective-C/
  
  ((UIScrollView *)___arg1).minimumZoomScale=___arg2;
  //#)


(c-external (UIScrollViewSetMaxZoom uiview float) void
  #/Objective-C/
  
  ((UIScrollView *)___arg1).maximumZoomScale=___arg2;
  //#)


(c-external (UIScrollViewSetPaging uiview int) void
  #/Objective-C/
  ((UIScrollView *)___arg1).pagingEnabled=___arg2;
  //#)


(c-external (UIScrollViewSetDelegate uiview uiview) void
  #/Objective-C/
  
  [((UIScrollView *)___arg1) setDelegate:(id<UIScrollViewDelegate>)___arg2];
  //#) 


(c-external (UIScrollViewGetDelegate uiview) uiview
         #/Objective-C/
         
   ___result=(UIView *)(((UIScrollView *)___arg1).delegate);
         //#)
         

(definition *page-changed-callback*
  #f)


(definition public (set-page-changed-callback proc)
  (set! *page-changed-callback* proc))


(definition *begin-scroll-callback*
  #f)


(definition public (set-begin-scroll-callback proc)
  (set! *begin-scroll-callback* proc))


;;;
;;;; JazzUITextField
;;;


(c-type uitextfield (pointer "JazzUITextField"))


(c-declare ios #/Objective-C/

@interface JazzUITextField : UITextField <UITextFieldDelegate> {}
@end
@implementation JazzUITextField

extern void jazz_call_textfield_end_edit(UIView *);

- (void)textFieldDidEndEditing:(UITextField *)textField
{
    jazz_call_textfield_end_edit(self);
}

-(BOOL)textFieldShouldReturn:(UITextField *)textField
{
    [textField resignFirstResponder];
    return YES;
}

@end

//#)


(c-external (platformCreateUITextField float float float float) uiview
  #/Objective-C/
  CGRect  viewRect = CGRectMake(___arg1, ___arg2, ___arg3, ___arg4);
  ___result=[[JazzUITextField alloc] initWithFrame:viewRect];
  ((JazzUITextField *)___result).delegate=(JazzUITextField *)___result;
  [___result setReturnKeyType:UIReturnKeyDone];
  ((UITextField *)___result).autocapitalizationType=0;
  //#)


(c-external (UITextFieldSetFontSize uiview float) void
  #/Objective-C/
  ((UITextField *)___arg1).font=[UIFont systemFontOfSize:___arg2];
  //#)


(c-external (UITextFieldSetPlaceholder uiview nonnull-UTF-8-string) void
  #/Objective-C/
  ((UITextField *)___arg1).placeholder=[NSString stringWithCString:___arg2 encoding:NSUTF8StringEncoding];
  //#)

(c-external (UITextFieldSetContent uiview nonnull-UTF-8-string) void
  #/Objective-C/
  ((UITextField *)___arg1).text=[NSString stringWithCString:___arg2 encoding:NSUTF8StringEncoding];
  //#)


(c-external (UITextFieldSetSecureEntry uiview int) void
  #/Objective-C/
  ((UITextField *)___arg1).secureTextEntry=___arg2;
  //#)


(c-external (UITextFieldGetContent uiview) nonnull-UTF-8-string
  #/Objective-C/
  ___result=(char *)[((UITextField *)___arg1).text cStringUsingEncoding:NSUTF8StringEncoding];
  //#)


(c-external (UITextFieldSetEnabled uiview int) void
  #/Objective-C/
  ((UITextField *)___arg1).enabled=___arg2;
  //#)


(c-definition (jazz-call-textfield-end-edit field) (uiview) void "jazz_call_textfield_end_edit" ""
  (when *textfield-end-edit-callback*
    (*textfield-end-edit-callback* field)))


(definition *textfield-end-edit-callback*
  #f)


(definition public (set-textfield-endedit-callback proc)
  (set! *textfield-end-edit-callback* proc))


;;;
;;;; JazzUITextView
;;;


(c-type uitextview (pointer "JazzUITextView"))


(c-declare ios #/Objective-C/
  
@interface JazzUITextView : UITextView <UITextViewDelegate> {}
@end
@implementation JazzUITextView
                                             
- (void)textViewDidEndEditing:(UITextField *)textField
{
    NSLog(@"Text end edit");
}
                                             
@end
                                             
//#)


(c-external (platformCreateUITextView float float float float) uiview
  #/Objective-C/
  CGRect  viewRect = CGRectMake(___arg1, ___arg2, ___arg3, ___arg4);
  ___result=[[JazzUITextView alloc] initWithFrame:viewRect];
  //#)


(c-external (UITextViewSetFontSize uiview float) void
  #/Objective-C/
  ((UITextView *)___arg1).font=[UIFont systemFontOfSize:___arg2];
  //#)


;;;
;;;; UIImage
;;;


(c-type uiimage (pointer "UIImage"))

(c-external (platformCreateUIImage) uiimage
  #/Objective-C/
   ___result=[[UIImage alloc] init];
  //#)

(c-type uiimageview (pointer "UIImageView"))


(c-external (platformCreateUIImageView float float float float) uiview
  #/Objective-C/
  CGRect  viewRect = CGRectMake(___arg1, ___arg2, ___arg3, ___arg4);
  ___result=[[UIImageView alloc] initWithFrame:viewRect];
  //#)
  
  
(c-external (UIImageViewSetImage uiview uiimage) void
  #/Objective-C/
  ((UIImageView *)___arg1).image=___arg2;
  //#)

(c-external (UIImageViewSetContentMode uiview int) void
  #/Objective-C/
  ((UIImageView *)___arg1).contentMode=___arg2;
  //#)


(c-external (UIImageMaskedCircle uiimage) uiimage
  #/Objective-C/
  CGImageRef orig=___arg1.CGImage;
  UIImage *umask=[UIImage imageNamed:@"cmask"];
  CGImageRef mask=umask.CGImage;
  CGImageRef masked=CGImageCreateWithMask(orig,mask);
  ___result=[UIImage imageWithCGImage:masked];
  //#)


(c-external (UIImageMaskedCircleCropped uiimage) uiimage
  #/Objective-C/
  CGImageRef orig=___arg1.CGImage;
  int iwidth=CGImageGetWidth(orig);
  CGImageRef corig=CGImageCreateWithImageInRect ( orig, CGRectMake(0.,40.,(CGFloat)iwidth,(CGFloat)iwidth));
  UIImage *umask=[UIImage imageNamed:@"cmask"];
  CGImageRef mask=umask.CGImage;
  CGImageRef masked=CGImageCreateWithMask(corig,mask);
  ___result=[UIImage imageWithCGImage:masked];
  //#)


(c-external (UIImageNamed nonnull-UTF-8-string) uiimage
  #/Objective-C/
  ___result=[UIImage imageNamed:[NSString stringWithCString:___arg1 encoding:NSUTF8StringEncoding]];
  //#)

(c-external (UISaveToPNG uiimage nonnull-UTF-8-string) void
  #/Objective-C/
  [UIImagePNGRepresentation(___arg1) writeToFile:[NSString stringWithCString:___arg2 encoding:NSUTF8StringEncoding] atomically:YES];
  //#)


(c-external (UIImageLoadFromPNG nonnull-UTF-8-string) uiimage
  #/Objective-C/
  ___result=[[UIImage alloc] initWithContentsOfFile:[NSString stringWithCString:___arg1 encoding:NSUTF8StringEncoding]];
  //#)


(c-external (UIImageLoadFromPNG nonnull-UTF-8-string) uiimage
  #/Objective-C/
  ___result=[[UIImage alloc] initWithContentsOfFile:[NSString stringWithCString:___arg1 encoding:NSUTF8StringEncoding]];
  //#)






;;;
;;;; Camera
;;;


(c-type uiimagepickercontroller (pointer "UIImagePickerController"))


(c-definition (jazz-call-media-captured ctrl image) (uiimagepickercontroller uiimage) void "jazz_call_media_captured" ""
  (when *media-captured-callback*
    (*media-captured-callback* ctrl image)))


(definition *media-captured-callback*
  #f)


(definition public (set-media-captured-callback proc)
  (set! *media-captured-callback* proc))



(c-definition (jazz-call-movie-captured ctrl url) (uiimagepickercontroller char-string) void "jazz_call_movie_captured" ""
  (when *movie-captured-callback*
    (*movie-captured-callback* ctrl url)))


(definition *movie-captured-callback*
  #f)


(definition public (set-movie-captured-callback proc)
  (set! *movie-captured-callback* proc))



(c-declare ios #/Objective-C/
  
  //extern void jazz_call_media_captured(UIImagePickerController *,UIImage *);
  //extern void jazz_call_movie_captured(UIImagePickerController *,char *);
  
  @interface JazzMediaCaptureController : UIViewController <UIImagePickerControllerDelegate> {}
  @end
  @implementation JazzMediaCaptureController
                                          
  - (void)imagePickerController:(UIImagePickerController *)picker
        didFinishPickingImage:(UIImage *)image
                  editingInfo:(NSDictionary<NSString *,
                               id> *)editingInfo
  {
    [picker dismissViewControllerAnimated:YES completion:nil];
    NSLog(@"Picked image");
    jazz_call_media_captured(picker,image);
  }
  
  - (void)imagePickerController:(UIImagePickerController *)picker
didFinishPickingMediaWithInfo:(NSDictionary<NSString *, id> *)info
  {
     NSString *type=[info objectForKey:UIImagePickerControllerMediaType];
     if([type isEqualToString:@"public.movie"])
     {
        NSURL *url=[info objectForKey:UIImagePickerControllerMediaURL];
        char *path=(char *)[url.path cStringUsingEncoding:NSUTF8StringEncoding];
        jazz_call_movie_captured(picker,path);
     }
     else
     {
        UIImage *image=[info objectForKey:UIImagePickerControllerEditedImage];
        jazz_call_media_captured(picker,image);
     }
  }
                                                                               
                                                                                    
  @end
                                          
//#)


(c-external (platformCaptureMedia uiviewcontroller int) uiimagepickercontroller
  #/Objective-C/
  UIImagePickerController *cameraUI = [[UIImagePickerController alloc] init];
    cameraUI.sourceType = ___arg2;
 
    // Displays a control that allows the user to choose picture or
    // movie capture, if both are available:
    cameraUI.mediaTypes =
        [UIImagePickerController availableMediaTypesForSourceType:
            ___arg2];
 
    // Hides the controls for moving & scaling pictures, or for
    // trimming movies. To instead show the controls, use YES.
    cameraUI.allowsEditing = YES;
 
    cameraUI.delegate =(id<UINavigationControllerDelegate,UIImagePickerControllerDelegate>)[[JazzMediaCaptureController alloc] init];
    
    [___arg1 presentModalViewController: cameraUI animated: YES];
    
    ___result=cameraUI;
  //#)


(c-external (platformCaptureMovie uiviewcontroller int) uiimagepickercontroller
  #/Objective-C/
  UIImagePickerController *cameraUI = [[UIImagePickerController alloc] init];
  cameraUI.sourceType = ___arg2;
  
  // Displays a control that allows the user to choose picture or
  // movie capture, if both are available:
  cameraUI.mediaTypes = @[(id)kUTTypeMovie];
  cameraUI.cameraDevice = UIImagePickerControllerCameraDeviceFront;
  // Hides the controls for moving & scaling pictures, or for
  // trimming movies. To instead show the controls, use YES.
  cameraUI.allowsEditing = YES;
  
  cameraUI.delegate =(id<UINavigationControllerDelegate,UIImagePickerControllerDelegate>)[[JazzMediaCaptureController alloc] init];
  
  [___arg1 presentModalViewController: cameraUI animated: YES];
  
  ___result=cameraUI;
  //#)


(c-external (platformDismissCaptureModal uiimagepickercontroller) void
  #/Objective-C/
  [___arg1 dismissViewControllerAnimated:YES completion:nil];
  //#)


;;;
;;;; DatePicker
;;;


(c-type uidatepicker (pointer "UIDatePicker"))


(c-external (platformCreateUIDatePicker float float float float) uiview
  #/Objective-C/
  CGRect  viewRect = CGRectMake(___arg1, ___arg2, ___arg3, ___arg4);
  UIDatePicker *picker=[[UIDatePicker alloc] initWithFrame:viewRect];
  ___result=picker;
  //#)


(c-external (platformUIDatePickerGetDateMS uiview) int
  #/Objective-C/
  NSDate *date=((UIDatePicker *)___arg1).date;
  ___result=date.timeIntervalSince1970;
  //#)


(c-external (NSDateDescription int) nonnull-UTF-8-string
  #/Objective-C/
  NSDate *date=[NSDate dateWithTimeIntervalSince1970:___arg1];
  NSString *fdate=[NSDateFormatter localizedStringFromDate:date dateStyle:NSDateFormatterShortStyle timeStyle:NSDateFormatterShortStyle];
  ___result=(char *)[fdate cStringUsingEncoding:NSUTF8StringEncoding];
  //#)


;;;
;;;; Modal
;;;


(c-external (platformPresentModal uiviewcontroller uiviewcontroller) void
  #/Objective-C/
  [___arg1 presentModalViewController:___arg2 animated: YES];
  //#)


(c-external (platformDismissModal uiviewcontroller) void
  #/Objective-C/
  [___arg1 dismissViewControllerAnimated:YES completion:nil];
  //#)


(c-external (platformDismissModalv2 uiviewcontroller) void
  #/Objective-C/
  [___arg1 dismissModalViewControllerAnimated:YES];
  //#)


;;;
;;;; UIButton
;;;



(c-definition (jazz-call-button-pushed view) (uiview) void "jazz_call_button_pushed" ""
  (when *button-push-callback*
    (*button-push-callback* view)))


(definition *button-push-callback*
  #f)


(definition public (set-button-push-callback proc)
  (set! *button-push-callback* proc))



(c-declare ios #/Objective-C/
  
  @interface JazzUIButton : UIButton {}
  @end
  @implementation JazzUIButton
                                                                             
                                                
  -(void)buttonClicked:(UIButton *)sender
  {
     jazz_call_button_pushed(self);
  }                                           
  @end
                                            
//#)



(c-external (platformCreateUIButton float float float float) uiview
  #/Objective-C/
  CGRect  viewRect = CGRectMake(___arg1, ___arg2, ___arg3, ___arg4);
  UIButton *but= [JazzUIButton buttonWithType:0];
  [but addTarget:but action:@selector(buttonClicked:) forControlEvents:UIControlEventTouchUpInside];
  [but setFrame:viewRect];
  [but setExclusiveTouch:YES];
  ___result=but;
  //#)


(c-external (UIButtonSetTitle uiview nonnull-UTF-8-string) void
  #/Objective-C/
  [___arg1 setTitle:[NSString stringWithCString:___arg2 encoding:NSUTF8StringEncoding] forState:UIControlStateNormal];

  //#)


(c-external (UIButtonSetTitleColorForState uiview uicolor int) void
  #/Objective-C/
  [___arg1 setTitleColor:___arg2 forState:___arg3];
  //#)


(c-external (UIButtonSetCornerRadius uiview float) void
  #/Objective-C/
  ___arg1.layer.cornerRadius=___arg2;
  //#)


(c-external (UIButtonSetFontSize uiview float) void
  #/Objective-C/
  ((UIButton *)___arg1).titleLabel.font=[UIFont systemFontOfSize:___arg2];
  //#)


(c-external (UIButtonSetBackgroundImageForState uiview uiimage int) void
  #/Objective-C/
  [((UIButton *)___arg1) setBackgroundImage:___arg2 forState:___arg3];
  //#)


(c-external (UIButtonSetHighlight uiview  int) void
  #/Objective-C/
  ((UIButton *)___arg1).highlighted=___arg2;
  //#)


(c-external (UIButtonGetHighlight uiview) int
  #/Objective-C/
  ___result=((UIButton *)___arg1).highlighted;
  //#)


(c-external (UIButtonSetAdjustImage uiview int) void
  #/Objective-C/
  ((UIButton *)___arg1).adjustsImageWhenHighlighted = ___arg2;
  ((UIButton *)___arg1).adjustsImageWhenDisabled = ___arg2;
  //#)


;;;
;;;; UILabel
;;;


(c-external (platformCreateUILabel float float float float) uiview
  #/Objective-C/
  CGRect  viewRect = CGRectMake(___arg1, ___arg2, ___arg3, ___arg4);
  ___result=[[UILabel alloc] initWithFrame:viewRect];
  //#)


(c-external (UILabelSetFontSize uiview float) void
  #/Objective-C/
  ((UILabel *)___arg1).font=[UIFont systemFontOfSize:___arg2];
  //#)


(c-external (UILabelSetMaxLines uiview int) void
  #/Objective-C/
  [(UILabel *)___arg1 setNumberOfLines:___arg2];
  //#)


(c-external (UILabelSetText uiview nonnull-UTF-8-string) void
  #/Objective-C/
  ((UILabel *)___arg1).text=[NSString stringWithCString:___arg2 encoding:NSUTF8StringEncoding];
  //#)


(c-external (UILabelSetTextAlignment uiview int) void
  #/Objective-C/
  ((UILabel *)___arg1).textAlignment=___arg2;
  //#)


;;;
;;;; StoreKit related
;;;


(c-external (platformStoreRequestProducts NSArray*) void
  #/Objective-C/
  SKProductsRequest *productsRequest = [[SKProductsRequest alloc]
                    initWithProductIdentifiers:[NSSet setWithArray:___arg1]];
 
  productsRequest.delegate = [[JazzProductRequestDelegate alloc] init];
  [productsRequest start];
  //#)

(c-definition (jazz-call-products-request-callback products) (NSArray*) void "jazz_call_products_request_callback" ""
  (when *product-request-callback*
    (*product-request-callback* products)))


(definition *product-request-callback* #f)


(definition public (set-product-request-callback cb)
  (set! *product-request-callback* cb))


(c-declare ios #/Objective-C/
  
@interface JazzProductRequestDelegate : NSObject<SKProductsRequestDelegate> {}
@end
@implementation JazzProductRequestDelegate

- (void)productsRequest:(SKProductsRequest *)request
     didReceiveResponse:(SKProductsResponse *)response
{
 jazz_call_products_request_callback(response.products);
}
 
@end
//#)


(c-type skproduct (pointer "SKProduct"))
(c-type skpaymenttransaction (pointer "SKPaymentTransaction"))

(c-external (platformStoreProductIdentifier skproduct) char-string
  #/Objective-C/
 ___result=(char *)[___arg1.productIdentifier cStringUsingEncoding:NSUTF8StringEncoding];
 //#)


(c-external (platformStoreProductSubmitPaymentForProduct skproduct) void
  #/Objective-C/
  NSLog(@"Product: %@",___arg1);
  SKMutablePayment *payment = [SKMutablePayment paymentWithProduct:___arg1];
  [[SKPaymentQueue defaultQueue] addPayment:payment];
  //#)
  
  
(c-external (platformStoreRegisterObserver) void
  #/Objective-C/
  JazzTransactionObserver *observer=[[JazzTransactionObserver alloc] init];
  [[SKPaymentQueue defaultQueue] addTransactionObserver:observer];
  //#)


(c-definition (jazz_call_transaction_state_change transaction state) (skpaymenttransaction int) void "jazz_call_transaction_state_change" ""
  (when *product-transaction-state-change-callback*
    (*product-transaction-state-change-callback* transaction state)))


(define *product-transaction-state-change-callback* #f)

(definition public (set-transaction-state-change-callback cb)
  (set! *product-transaction-state-change-callback* cb))


(c-declare ios #/Objective-C/
  
  @interface JazzTransactionObserver : NSObject<SKPaymentTransactionObserver> {}
  @end
  @implementation JazzTransactionObserver
                                                        
 - (void)paymentQueue:(SKPaymentQueue *)queue
 updatedTransactions:(NSArray *)transactions
{
    for (SKPaymentTransaction *transaction in transactions) {
             NSLog(@"Transaction: %@",transaction);
             jazz_call_transaction_state_change(transaction,transaction.transactionState);
    }
}
                                                        
 @end
 //#)


  
(c-external (platformTransactionFinish skpaymenttransaction) void
  #/Objective-C/
  [[SKPaymentQueue defaultQueue] finishTransaction:___arg1];
  //#)  





)
