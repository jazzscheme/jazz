;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Library
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.platform.library.cocoa jazz


(import (jazz.io)
        (jazz.platform))


;;;
;;;; Relocate
;;;


(definition public (relocate-name file old-prefix new-prefix (feedback?: feedback? #t))
  (when feedback?
    (format :terminal "relocating {a}...{%}" (get-name file)))
  (receive (name dependencies) (library-name/dependencies file)
    (change-name file name old-prefix new-prefix)))


(definition protected (change-name file name old-prefix new-prefix)
  (let ((new-name (relocate-path name old-prefix new-prefix)))
    (when new-name
      (let ((port (open-process (list path: "install_name_tool" arguments: `("-id" ,new-name ,(parse file))))))
        (let ((status (process-status port)))
          (unless (= status 0)
            (error "System call install_name_tool -id failed")))))))


(definition public (relocate-dependencies file old-prefix new-prefix (feedback?: feedback? #t))
  (when feedback?
    (format :terminal "relocating {a}...{%}" (get-name file)))
  (receive (name dependencies) (library-name/dependencies file)
    (change-dependencies file dependencies old-prefix new-prefix)))


(definition protected (change-dependencies file dependencies old-prefix new-prefix)
  (for-each (lambda (dependency)
              (let ((new-dependency (relocate-path dependency old-prefix new-prefix)))
                (when new-dependency
                  (let ((port (open-process (list path: "install_name_tool" arguments: `("-change" ,dependency ,new-dependency ,(parse file))))))
                    (let ((status (process-status port)))
                      (unless (= status 0)
                        (error "System call install_name_tool -change failed")))))))
            dependencies))


(definition protected (add-rpath file rpath)
  (let ((port (open-process (list path: "install_name_tool" arguments: `("-add_rpath" ,rpath ,(parse file))))))
    (let ((status (process-status port)))
      (unless (= status 0)
        (error "System call install_name_tool -add_rpath failed")))))


(definition protected (executable-rpath dir file)
  (let ((level (length (subpath dir file))))
    (let ((up (map (lambda (n) "..") (naturals 0 level))))
      (join (cons "@executable_path" up) "/"))))


(definition public (relocate-subfile dir file kind old-prefix new-prefix (nameonly?: nameonly? #f) (feedback?: feedback? #t))
  (when feedback?
    (format :terminal "relocating {a}...{%}" (get-name file)))
  (when (eq? kind 'executable)
    (add-rpath file (executable-rpath dir file)))
  (receive (name dependencies) (library-name/dependencies file)
    (when (eq? kind 'shared)
      (change-name file name old-prefix new-prefix))
    (unless nameonly?
      (change-dependencies file dependencies old-prefix new-prefix))))


(definition (relocate-path path old-prefix new-prefix)
  (and (starts-with? path old-prefix)
       (string-append new-prefix (substring path (string-length old-prefix) (string-length path)))))


;;;
;;;; Dependencies
;;;


(definition public (library-name/dependencies file)
  (define (remove-tabulation path)
    (substring path 1 (string-length path)))
  
  (define (remove-version path)
    (let ((pos (search path " (compatibility version")))
      (if pos
          (substring path 0 pos)
        path)))
  
  (let ((port (open-process (list path: "otool" arguments: `("-L" ,(parse file))))))
    (let ((status (process-status port)))
      (if (= status 0)
          (let ((lines (read-all port read-line)))
            (close-port port)
            (let ((all (map (lambda (path)
                              (remove-version (remove-tabulation path)))
                            (cdr lines))))
              (values (car all) (cdr all))))
        (error "System call otool -L failed")))))


(definition public (library-load-commands file)
  (define cmd-prefix
    "          cmd ")
  
  (define name-prefix
    "         name ")
  
  (define path-prefix
    "         path ")
  
  (define (parse-cmd line)
    (let ((str (substring line (string-length cmd-prefix) (string-length line))))
      (cond ((equal? str "LC_ID_DYLIB") 'id)
            ((equal? str "LC_LOAD_DYLIB") 'load)
            ((equal? str "LC_RPATH") 'rpath)
            (else #f))))
  
  (define (parse-id scan)
    (let ((scan (cddr scan)))
      (let ((line (car scan)))
        (assert (starts-with? line name-prefix)
          (let ((id (remove-offset (substring line (string-length name-prefix) (string-length line)))))
            (values id (cdr scan)))))))
  
  (define (parse-load scan)
    (let ((scan (cddr scan)))
      (let ((line (car scan)))
        (assert (starts-with? line name-prefix)
          (let ((load (remove-offset (substring line (string-length name-prefix) (string-length line)))))
            (values load (cdr scan)))))))
  
  (define (parse-rpath scan)
    (let ((scan (cddr scan)))
      (let ((line (car scan)))
        (assert (starts-with? line path-prefix)
          (let ((rpath (remove-offset (substring line (string-length path-prefix) (string-length line)))))
            (values rpath (cdr scan)))))))
  
  (define (remove-offset str)
    (let ((pos (search str " (offset ")))
      (if pos
          (substring str 0 pos)
        str)))
  
  (let ((port (open-process (list path: "otool" arguments: `("-l" ,(parse file))))))
    (let ((status (process-status port)))
      (if (= status 0)
          (let ((lines (read-all port read-line)))
            (close-port port)
            (let ((queue (new-queue)))
              (let (iter (scan lines))
                (if (null? scan)
                    (let ((partition (partition (queue-list queue) key: car)))
                      (let ((id (assq 'id partition))
                            (load (assq 'load partition))
                            (rpath (assq 'rpath partition)))
                        (values (if id (assert (= 1 (length (cdr id))) (cdadr id)) #f)
                                (if load (map cdr (cdr load)) '())
                                (if rpath (map cdr (cdr rpath)) '()))))
                  (let ((line (car scan)))
                    (cond ((starts-with? line cmd-prefix)
                           (let ((cmd (parse-cmd line)))
                             (case cmd
                               ((id)
                                (receive (id scan) (parse-id scan)
                                  (enqueue queue (cons cmd id))
                                  (iter scan)))
                               ((load)
                                (receive (load scan) (parse-load scan)
                                  (enqueue queue (cons cmd load))
                                  (iter scan)))
                               ((rpath)
                                (receive (rpath scan) (parse-rpath scan)
                                  (enqueue queue (cons cmd rpath))
                                  (iter scan)))
                               (else
                                (iter (cdr scan))))))
                          (else
                           (iter (cdr scan)))))))))
        (error "System call otool -l failed")))))


(definition public (validate-dependencies rpath-dirs dir)
  (let ((libraries (make-table test: equal?)))
    (define (validate file)
      (receive (rpath direct) (library-name/dependencies file)
        (for-each (lambda (info)
                    (let ((prefix "@rpath/"))
                      (when (starts-with? info prefix)
                        (let ((path (substring info (string-length prefix) (string-length info))))
                          (unless (table-ref libraries path #f)
                            (let (loop (scan rpath-dirs))
                              (if (null? scan)
                                  (table-set! libraries path 'not-found)
                                (let ((file (new-file (car scan) path)))
                                  (if (exists? file)
                                      (table-set! libraries path (parse file))
                                    (loop (cdr scan)))))))))))
                  direct)))
    
    (let ((count 0))
      (iterate-directory dir
        (lambda (file)
          (when (extension=? (get-extension file) "dylib")
            (terminal-string ".")
            (increase! count)
            (validate file)))
        recursive?: #t)
      (let ((missing '()))
        (table-iterate libraries
          (lambda (path filename)
            (when (eq? filename 'not-found)
              (set! missing (cons path missing)))))
        (tell)
        (tell 'found count 'missing (length missing))
        (for-each (lambda (path)
                    (tell path 'not-found))
                  missing)))))


(definition public (library-dependencies-tree rpath-dirs file)
  (receive (rpath direct) (library-name/dependencies file)
    (map (lambda (info)
           (let ((prefix "@rpath/"))
             (if (starts-with? info prefix)
                 (let ((path (substring info (string-length prefix) (string-length info))))
                   (let (loop (scan rpath-dirs))
                     (if (null? scan)
                         (list path "Not found")
                       (let ((file (new-file (car scan) path)))
                         (if (exists? file)
                             (cons path (library-dependencies-tree rpath-dirs file))
                           (loop (cdr scan)))))))
               info)))
         direct)))


(definition public (present-dependencies-tree lst)
  (define (present node level)
    (if (string? node)
        (format :terminal "{_ :v}{a}{%}" (* level 2) node)
      (bind (lib . deps) node
        (format :terminal "{_ :v}{a}{%}" (* level 2) lib)
        (present-list deps (+ level 1)))))
  
  (define (present-list lst level)
    (for-each (lambda (dep)
                (present dep level))
              lst))
  
  (present-list lst 0)))
