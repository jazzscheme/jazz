;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; miniLZO
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2012
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module jazz.platform.minilzo jazz


(import (jazz.foreign)
        (jazz.platform.types)
        (jazz.platform.types-syntax (phase syntax)))


(c-include "<minilzo.h>")
(c-include "<minilzo.c>")


(c-declare #<<end-of-c-declare

int lzo_init_cffi ()
{
 return (LZO_E_OK == lzo_init());
}

size_t lzo1x_1_compress_cffi (___U8* src, size_t src_len, ___U8* dst)
{
 lzo_uint dst_len;
 lzo_align_t __LZO_MMODEL wrkmem [ (LZO1X_1_MEM_COMPRESS + (sizeof(lzo_align_t) - 1)) / sizeof(lzo_align_t) ];
 
 if (LZO_E_OK == lzo1x_1_compress((lzo_bytep) src, (lzo_uint) src_len, (lzo_bytep) dst, &dst_len, wrkmem))
   return dst_len;
 else
   return 0;
}

size_t lzo1x_decompress_cffi (___U8* src, size_t src_len, ___U8* dst)
{
 lzo_uint dst_len;
 
 if (LZO_E_OK == lzo1x_decompress((lzo_bytep) src, (lzo_uint) src_len, (lzo_bytep) dst, &dst_len, NULL))
   return dst_len;
 else
   return 0;
}

end-of-c-declare
)


(c-external (lzo_init_cffi) int)
(c-external (lzo1x_1_compress_cffi uint8* size_t uint8*) size_t)
(c-external (lzo1x_decompress_cffi uint8* size_t uint8*) size_t)


(assert (lzo_init_cffi))


(definition (de/compress lzo-function u8in out-buf-size)
  (let* ((in-len (u8vector-length u8in))
         (in-buf (u8vector->uint8* u8in))
         (out-buf (uint8*-alloc out-buf-size))
         (out-len (lzo-function in-buf in-len out-buf)))
    (assert (< 0 out-len))
    (let ((u8out (uint8*->u8vector out-buf out-len)))
      (uint8*-free out-buf)
      (uint8*-free in-buf)
      u8out)))


(definition public (u8vector-compress u8in <U8Vector>) <U8Vector>
  (de/compress lzo1x_1_compress_cffi
               u8in
               (let ((in-len (u8vector-length u8in)))
                 (+ in-len (quotient in-len 16) 64 3))))


(definition public (u8vector-decompress u8in <U8Vector> orig-size <Integer>) <U8Vector>
  (de/compress lzo1x_decompress_cffi
               u8in
               orig-size))
)
