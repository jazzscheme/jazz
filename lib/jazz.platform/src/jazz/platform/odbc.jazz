;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Jazz ODBC
;;;


(module jazz.platform.odbc jazz

(import (jazz.platform.types)
        (jazz.platform.windows.WinTypes)
        (jazz.foreign (phase syntax))
        (jazz.platform.types-syntax (phase syntax)))

(c-include "<sql.h>")
(c-include "<sqlext.h>")

(c-type SWORD short)
(c-type UWORD ushort)
(c-type SDWORD long)
(c-type SQLSMALLINT SWORD)
(c-type SQLUSMALLINT UWORD)
(c-type SQLSMALLINT* (pointer SQLSMALLINT))
(define-pointer-to-type SQLSMALLINT "SQLSMALLINT")
(c-type SQLINTEGER SDWORD)
(c-type SQLLEN SQLINTEGER)
(c-type SQLLEN* (pointer SQLLEN))
(define-pointer-to-type SQLLEN "SQLLEN")

(c-type SQLPOINTER void*)

(c-type SQLHANDLE void*)
(c-type SQLHANDLE* (pointer SQLHANDLE))
(define-pointer-to-type SQLHANDLE "SQLHANDLE")
(c-type SQLHENV SQLHANDLE)
(c-type SQLHDBC SQLHANDLE)
(c-type SQLHSTMT SQLHANDLE)
(c-type SQLHDESC SQLHANDLE)
(c-type SQLHENV* SQLHANDLE*)
(c-type SQLHDBC* SQLHANDLE*)
(c-type SQLHSTMT* SQLHANDLE*)
(c-type SQLHDESC* SQLHANDLE*)
(define-cast-lambda-ptr SQLHANDLE SQLHENV)
(define-cast-lambda-ptr SQLHANDLE SQLHDBC)
(define-cast-lambda-ptr SQLHANDLE SQLHSTMT)
(define-cast-lambda-ptr SQLHANDLE SQLHDESC)

(c-type SQLHWND HWND)

(c-type SQLCHAR unsigned-char)
(c-type SQLCHAR* (pointer SQLCHAR))
(define-pointer-to-type SQLCHAR "SQLCHAR")
(define-cast-lambda SQLCHAR* char-string)


(c-type SQLRETURN SQLSMALLINT)

(c-constant SQL_ERROR -1)

(c-constant SQL_HANDLE_DBC 2)
(c-constant SQL_HANDLE_DESC 4)
(c-constant SQL_HANDLE_ENV 1)
(c-constant SQL_HANDLE_STMT 3)

(c-constant SQL_NULL_HANDLE 0)

(c-constant SQL_NTS -3)
(c-constant SQL_DRIVER_COMPLETE 1)
(c-constant SQL_COLUMN_DISPLAY_SIZE 6)
(c-constant SQL_CHAR 1)
(c-constant SQL_NO_DATA_FOUND 100)

(definition public (SQLAllocHandleStd HandleType InputHandle)
  (let* ((handle* (SQLHANDLE*-alloc 1))
         (return ((c-lambda (SQLSMALLINT SQLHANDLE SQLHANDLE*) SQLRETURN "SQLAllocHandleStd")
                  HandleType
                  InputHandle
                  handle*))
         (handle (SQLHANDLE*-ref handle* 0)))
    (SQLHANDLE*-free handle*)
    (values return (case HandleType
                     ((SQL_HANDLE_ENV) (SQLHANDLE->SQLHENV handle))
                     ((SQL_HANDLE_DBC) (SQLHANDLE->SQLHDBC handle))
                     ((SQL_HANDLE_STMT) (SQLHANDLE->SQLHSTMT handle))
                     ((SQL_HANDLE_DESC) (SQLHANDLE->SQLHDESC handle))))))

(c-external (SQLSetEnvAttr SQLHENV SQLINTEGER SQLPOINTER SQLINTEGER) SQLRETURN)

(definition public (SQLDriverConnect ConnectionHandle InConnectionString)
  (let ((function (c-function (SQLHDBC SQLHWND char-string SQLSMALLINT SQLCHAR* SQLSMALLINT SQLSMALLINT* SQLUSMALLINT) SQLRETURN "SQLDriverConnect")))
    (function ConnectionHandle #f InConnectionString SQL_NTS #f 0 #f SQL_DRIVER_COMPLETE)))
                 
(definition public (SQLExecDirect StatementHandle StatementText)
  ((c-function (SQLHSTMT SQLCHAR* SQLINTEGER) SQLRETURN "SQLExecDirect") StatementHandle StatementText SQL_NTS))

(definition public (SQLNumResultCols StatementHandle)
  (let* ((ColumnCountPtr (SQLSMALLINT*-alloc 1))
         (return ((c-function (SQLHSTMT SQLSMALLINT*) SQLRETURN "SQLNumResultCols") StatementHandle ColumnCountPtr)))
    (prog1 (values return (SQLSMALLINT*-ref ColumnCountPtr 0))
      (SQLSMALLINT*-free ColumnCountPtr))))

(c-external (SQLFreeHandle SQLSMALLINT SQLHANDLE) SQLRETURN)
(c-external (SQLDisconnect SQLHDBC) SQLRETURN)

(definition public (SQLColAttribute StatementHandle ColumnNumber FieldIdentifier)
  (let ((CharacterAttributePtr (SQLCHAR*-alloc 1024)))
    #f))

(c-external (SQLColAttribute SQLHSTMT SQLUSMALLINT SQLUSMALLINT SQLPOINTER SQLSMALLINT SQLSMALLINT* SQLLEN*) SQLRETURN)
(c-external (SQLBindCol SQLHSTMT SQLUSMALLINT SQLSMALLINT SQLPOINTER SQLLEN SQLLEN*) SQLRETURN)
(c-external (SQLFetch SQLHSTMT) SQLRETURN))
