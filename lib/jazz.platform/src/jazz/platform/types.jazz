;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Basic Types
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Jeremie Lasalle Ratelle.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;    Guillaume Cartier
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module jazz.platform.types jazz


(import (jazz.foreign)
        (jazz.platform.types-syntax (phase syntax)))


@debug
(c-external (stack-depth) int
  #/C/
    struct foo {int x; int y;}; struct foo zz; ___return((int) &zz);
//#)


@debug
(c-external (pointer-size) int
  #/C/
    ___return((int) sizeof(void*));
//#)


(c-external (sizeof-size_t) int
  #/C/
    ___return(sizeof(size_t));
//#)

(c-external (sizeof-float) int
  #/C/
    ___return(sizeof(float));
//#)

(c-external (sizeof-double) int
  #/C/
    ___return(sizeof(double));
//#)


(definition public size_t-size <fx>
  (sizeof-size_t))

(definition public float-size <fx>
  (sizeof-float))

(definition public double-size <fx>
  (sizeof-double))


(cond-expand
  (ios  (c-include "<stdlib.h>")
        (c-include "<string.h>"))
  (mac  (c-include "<CoreServices/CoreServices.h>"))
  (else (c-include "<stdlib.h>")
        (c-include "<string.h>")))


(c-named-declare size_t-declare
                 
#/C/

static ___SCMOBJ SCMOBJ_to_size_t (___SCMOBJ src, size_t *dst) {
  ___SCMOBJ ___err = ___FIX(___NO_ERR);

  if ( ___FIXNUMP(src) ) {
    ___WORD ___temp = ___INT(src);
                            
    if ( ___temp > ___MAX_FIX32 || ___temp < 0 )
       ___err = ___FIX(___UNKNOWN_ERR);
    else
       *dst = ___CAST(size_t,___temp);
  }
  
  else
    ___err = ___FIX(___UNKNOWN_ERR);
    
  return ___err;
}


static ___SCMOBJ size_t_to_SCMOBJ (size_t src, ___SCMOBJ *dst) {
  ___SCMOBJ ___err = ___FIX(___NO_ERR);

  if ( src > ___MAX_FIX32 )
    ___err = ___FIX(___UNKNOWN_ERR);
  else
    *dst = ___FIX(src);
  
  return ___err;
}

#define ___BEGIN_CFUN_SCMOBJ_to_size_t(src,dst,i) \
if ((___err = SCMOBJ_to_size_t (src, &dst)) == ___FIX(___NO_ERR)) {
#define ___END_CFUN_SCMOBJ_to_size_t(src,dst,i) }

#define ___BEGIN_CFUN_size_t_to_SCMOBJ(src,dst) \
if ((___err = size_t_to_SCMOBJ (src, &dst)) == ___FIX(___NO_ERR)) {
#define ___END_CFUN_size_t_to_SCMOBJ(src,dst) }

#define ___BEGIN_SFUN_size_t_to_SCMOBJ(src,dst,i) \
if ((___err = size_t_to_SCMOBJ (src, &dst)) == ___FIX(___NO_ERR)) {
#define ___END_SFUN_size_t_to_SCMOBJ(src,dst,i) }

#define ___BEGIN_SFUN_SCMOBJ_to_size_t(src,dst) \
{ ___err = SCMOBJ_to_size_t (src, &dst);
#define ___END_SFUN_SCMOBJ_to_size_t(src,dst) }

//#)


(c-named-declare U8PTR-declare

#/C/
           
typedef ___U8*  U8PTR;

___SCMOBJ SCMOBJ_to_U8PTR (___SCMOBJ src, U8PTR *dst)
{
  ___SCMOBJ ___temp; // for U8VECTORP
  ___SCMOBJ ___err = ___FIX(___NO_ERR);
  if (!___U8VECTORP(src))
    ___err = ___FIX(___UNKNOWN_ERR);
  else
    {
     *dst = ___CAST(___U8*,___BODY_AS(src,___tSUBTYPED));
    }
  return ___err;
}

#define ___BEGIN_CFUN_SCMOBJ_to_U8PTR(src,dst,i) \
if ((___err = SCMOBJ_to_U8PTR (src, &dst)) == ___FIX(___NO_ERR)) {
#define ___END_CFUN_SCMOBJ_to_U8PTR(src,dst,i) }

#define ___BEGIN_CFUN_U8PTR_to_SCMOBJ(src,dst) \
if ((___err = ___FIX(___UNKNOWN_ERR)) == ___FIX(___NO_ERR)) {
#define ___END_CFUN_U8PTR_to_SCMOBJ(src,dst) }

#define ___BEGIN_SFUN_U8PTR_to_SCMOBJ(src,dst,i) \
if ((___err = U8PTR_to_SCMOBJ (src, &dst)) == ___FIX(___NO_ERR)) {
#define ___END_SFUN_U8PTR_to_SCMOBJ(src,dst,i) }

#define ___BEGIN_SFUN_SCMOBJ_to_U8PTR(src,dst) \
{ ___err = ___FIX(___UNKNOWN_ERR);
#define ___END_SFUN_SCMOBJ_to_U8PTR(src,dst) }

//#)


(c-named-declare U16PTR-declare

#/C/

typedef ___U16* U16PTR;

___SCMOBJ SCMOBJ_to_U16PTR (___SCMOBJ src, U16PTR *dst)
{
  ___SCMOBJ ___temp; // for U16VECTORP
  ___SCMOBJ ___err = ___FIX(___NO_ERR);
  if (!___U16VECTORP(src))
    ___err = ___FIX(___UNKNOWN_ERR);
  else
    {
     *dst = ___CAST(___U16*,___BODY_AS(src,___tSUBTYPED));
    }
  return ___err;
}

#define ___BEGIN_CFUN_SCMOBJ_to_U16PTR(src,dst,i) \
if ((___err = SCMOBJ_to_U16PTR (src, &dst)) == ___FIX(___NO_ERR)) {
#define ___END_CFUN_SCMOBJ_to_U16PTR(src,dst,i) }

#define ___BEGIN_CFUN_U16PTR_to_SCMOBJ(src,dst) \
if ((___err = ___FIX(___UNKNOWN_ERR)) == ___FIX(___NO_ERR)) {
#define ___END_CFUN_U16PTR_to_SCMOBJ(src,dst) }

#define ___BEGIN_SFUN_U16PTR_to_SCMOBJ(src,dst,i) \
if ((___err = U16PTR_to_SCMOBJ (src, &dst)) == ___FIX(___NO_ERR)) {
#define ___END_SFUN_U16PTR_to_SCMOBJ(src,dst,i) }

#define ___BEGIN_SFUN_SCMOBJ_to_U16PTR(src,dst) \
{ ___err = ___FIX(___UNKNOWN_ERR);
#define ___END_SFUN_SCMOBJ_to_U16PTR(src,dst) }

//#)


(c-named-declare U32PTR-declare
  
#/C/
           
typedef ___U32* U32PTR;

___SCMOBJ SCMOBJ_to_U32PTR (___SCMOBJ src, U32PTR *dst)
{
  ___SCMOBJ ___temp; // for U32VECTORP
  ___SCMOBJ ___err = ___FIX(___NO_ERR);
  if (!___U32VECTORP(src))
    ___err = ___FIX(___UNKNOWN_ERR);
  else
    {
     *dst = ___CAST(___U32*,___BODY_AS(src,___tSUBTYPED));
    }
  return ___err;
}

#define ___BEGIN_CFUN_SCMOBJ_to_U32PTR(src,dst,i) \
if ((___err = SCMOBJ_to_U32PTR (src, &dst)) == ___FIX(___NO_ERR)) {
#define ___END_CFUN_SCMOBJ_to_U32PTR(src,dst,i) }

#define ___BEGIN_CFUN_U32PTR_to_SCMOBJ(src,dst) \
if ((___err = ___FIX(___UNKNOWN_ERR)) == ___FIX(___NO_ERR)) {
#define ___END_CFUN_U32PTR_to_SCMOBJ(src,dst) }

#define ___BEGIN_SFUN_U32PTR_to_SCMOBJ(src,dst,i) \
if ((___err = U32PTR_to_SCMOBJ (src, &dst)) == ___FIX(___NO_ERR)) {
#define ___END_SFUN_U32PTR_to_SCMOBJ(src,dst,i) }

#define ___BEGIN_SFUN_SCMOBJ_to_U32PTR(src,dst) \
{ ___err = ___FIX(___UNKNOWN_ERR);
#define ___END_SFUN_SCMOBJ_to_U32PTR(src,dst) }

//#)


(c-named-declare F64PTR-declare

#/C/
           
typedef ___F64*  F64PTR;

static ___SCMOBJ SCMOBJ_to_F64PTR (___SCMOBJ src, F64PTR *dst)
{
  ___SCMOBJ ___temp; // for F64VECTORP
  ___SCMOBJ ___err = ___FIX(___NO_ERR);
  if (!___F64VECTORP(src))
    ___err = ___FIX(___UNKNOWN_ERR);
  else
    {
     *dst = ___CAST(___F64*,___BODY_AS(src,___tSUBTYPED));
    }
  return ___err;
}

#define ___BEGIN_CFUN_SCMOBJ_to_F64PTR(src,dst,i) \
if ((___err = SCMOBJ_to_F64PTR (src, &dst)) == ___FIX(___NO_ERR)) {
#define ___END_CFUN_SCMOBJ_to_F64PTR(src,dst,i) }

#define ___BEGIN_CFUN_F64PTR_to_SCMOBJ(src,dst) \
if ((___err = ___FIX(___UNKNOWN_ERR)) == ___FIX(___NO_ERR)) {
#define ___END_CFUN_F64PTR_to_SCMOBJ(src,dst) }

#define ___BEGIN_SFUN_F64PTR_to_SCMOBJ(src,dst,i) \
if ((___err = F64PTR_to_SCMOBJ (src, &dst)) == ___FIX(___NO_ERR)) {
#define ___END_SFUN_F64PTR_to_SCMOBJ(src,dst,i) }

#define ___BEGIN_SFUN_SCMOBJ_to_F64PTR(src,dst) \
{ ___err = ___FIX(___UNKNOWN_ERR);
#define ___END_SFUN_SCMOBJ_to_F64PTR(src,dst) }

//#)

@w
(c-declare types

#/C/

typedef ___F64*  F64PTR;

___SCMOBJ SCMOBJ_to_F64PTR (___SCMOBJ src, F64PTR *dst)
{
  ___SCMOBJ ___temp; // for F64VECTORP
  ___SCMOBJ ___err = ___FIX(___NO_ERR);
  if (!___F64VECTORP(src))
    ___err = ___FIX(___UNKNOWN_ERR);
  else
    {
     *dst = ___CAST(___F64*,___BODY_AS(src,___tSUBTYPED));
    }
  return ___err;
}

//#)


(c-type void                     (native void))
(c-type char                     (native char))
(c-type wchar_t                  (native wchar_t))
(c-type short                    (native short))
(c-type int                      (native int))
(c-type long                     (native long))
(c-type float                    (native float))
(c-type double                   (native double))
(c-type unsigned-int8            (native unsigned-int8))
(c-type unsigned-int16           (native unsigned-int16))
(c-type unsigned-int32           (native unsigned-int32))
(c-type unsigned-int64           (native unsigned-int64))
(c-type unsigned-char            (native unsigned-char))
(c-type unsigned-short           (native unsigned-short))
(c-type unsigned-int             (native unsigned-int))
(c-type unsigned-long            (native unsigned-long))
(c-type int8                     (native int8))
(c-type int16                    (native int16))
(c-type int32                    (native int32))
(c-type int64                    (native int64))
(c-type UTF-8-string             (native UTF-8-string))
(c-type nonnull-UTF-8-string     (native nonnull-UTF-8-string))
(c-type UTF-16-string            (native UTF-16-string))
(c-type char-string              (native char-string))
(c-type wchar_t-string           (native wchar_t-string))
(c-type nonnull-char-string      (native nonnull-char-string))
(c-type nonnull-char-string-list (native nonnull-char-string-list))
(c-type signed-char              (native signed-char))
(c-type unsigned-char            (native unsigned-char))
(c-type unsigned-int             (native unsigned-int))
(c-type bool                     (native bool))
(c-type scheme-object            (native scheme-object))


(c-type byte                     (native unsigned-int8))
(c-type uchar                    (native unsigned-char))
(c-type ushort                   (native unsigned-short))
(c-type uint                     (native unsigned-int))
(c-type ulong                    (native unsigned-long))
(c-type uint8                    (native unsigned-int8))
(c-type uint16                   (native unsigned-int16))
(c-type uint32                   (native unsigned-int32))
(c-type uint64                   (native unsigned-int64))


(c-type void*                    (pointer void #f))
(c-type char*                    (pointer char))
(c-type wchar_t*                 (pointer wchar_t))
(c-type short*                   (pointer short))
(c-type int*                     (pointer int))
(c-type long*                    (pointer long))
(c-type float*                   (pointer float))
(c-type double*                  (pointer double))
(c-type byte*                    (pointer byte))
(c-type uchar*                   (pointer uchar))
(c-type uint*                    (pointer uint))
(c-type ulong*                   (pointer ulong))
(c-type uint8*                   (pointer uint8))
(c-type int8*                    (pointer int8))
(c-type uint8**                  (pointer uint8*))
(c-type uint16*                  (pointer uint16))
(c-type uint32*                  (pointer uint32))
(c-type uint64*                  (pointer uint64))
(c-type int64*                   (pointer int64))


(c-type size_t "size_t" "size_t_to_SCMOBJ" "SCMOBJ_to_size_t" #t size_t-declare)


(c-type U8PTR "U8PTR" "U8PTR_to_SCMOBJ" "SCMOBJ_to_U8PTR" #t U8PTR-declare)
(c-type U16PTR "U16PTR" "U16PTR_to_SCMOBJ" "SCMOBJ_to_U16PTR" #t U16PTR-declare)
(c-type U32PTR "U32PTR" "U32PTR_to_SCMOBJ" "SCMOBJ_to_U32PTR" #t U32PTR-declare)
(c-type F64PTR "F64PTR" "F64PTR_to_SCMOBJ" "SCMOBJ_to_F64PTR" #t F64PTR-declare)


(define-pointer-to-type    byte   "___U8")
(define-pointer-to-type    uint8  "___U8")
(define-pointer-to-type    int8   "___S8")
(define-pointer-to-pointer uint8* "___U8*")
(define-pointer-to-type    uint16 "___U16")
(define-pointer-to-type    uint32 "___U32")
(define-pointer-to-type    int64  "___S64")
(define-pointer-to-type    char   "char")
(define-pointer-to-type    wchar_t "wchar_t")
(define-pointer-to-type    short  "short")
(define-pointer-to-type    int    "int")
(define-pointer-to-type    uint   "unsigned int")
(define-pointer-to-type    long   "long")
(define-pointer-to-type    double "double")
(define-pointer-to-type    ulong  "unsigned long")
(define-pointer-to-type    float  "float")


;(define-cast-lambda     uint8*   char-string)
(definition public uint8*->char-string
  (c-function define-cast-lambda (uint8*) char-string
    #/C/
    ___return((char*) ___arg1);
//#))

(define-cast-lambda     char*    char-string)
(define-cast-lambda     char*    UTF-8-string)
(define-cast-lambda     uint16*  UTF-16-string)
(define-cast-lambda     wchar_t* wchar_t-string)
(define-cast-lambda-ptr uint32*  uint8*)
(define-cast-lambda-ptr uint8*   ulong*)
(define-cast-lambda-ptr long*    uint8*)

;(define-cast-lambda-ptr int      void*)
(definition public int->void*
  (c-function define-cast-lambda-ptr (int) void*
    #/C/
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wint-to-pointer-cast"
    ___return((void*) ___arg1);
#pragma GCC diagnostic pop
//#))


(c-external (char-string->uint8* char-string) uint8*
  #/C/
    size_t len = strlen(___arg1);
    ___U8 *ptr = (___U8*) malloc( (len+1)*sizeof(___U8) );
    memcpy(ptr, ___arg1, len+1);
    ___return(ptr);
//#)


(c-external (UTF-16-string->uint16* UTF-16-string) uint16*
  #/C/
    size_t bytes = ( wcslen((const wchar_t *) ___arg1) + 1 ) * sizeof(___U16);
    ___U16 *ptr = (___U16*) malloc(bytes);
    memcpy(ptr,___arg1,bytes);
    ___return(ptr);
//#)


(c-external (heap-malloc size_t) :alloc void*
  #/C/
    ___return(malloc(___arg1));
//#)


(c-external (heap-calloc size_t size_t) :alloc void*
  #/C/
    ___return(calloc(___arg1, ___arg2));
//#)


(c-external (heap-free void*) :free void
  #/C/
    free(___arg1);
//#)


(definition public (u8vector->uint8* vector)
  (let* ((size (u8vector-length vector))
         (pointer (uint8*-alloc size)))
    (let loop ((i 0))
         (if (= i size)
             pointer
           (uint8*-set! pointer i (u8vector-ref vector i))
           (loop (+ i 1))))))

                                                                
(definition public (uint8*->u8vector pt length)
  (declare (proper-tail-calls))
  (let ((vec (make-u8vector length)))
    (let (loop (i 0))
      (when (< i length)
        (u8vector-set! vec i (uint8*-ref pt i))
        (loop (+ i 1))))
    vec))


(definition public (u32vector->long* vector)
  (let* ((size (u32vector-length vector))
         (pointer (long*-alloc size)))
    (let loop ((i 0))
         (if (= i size)
             pointer
           (long*-set! pointer i (u32vector-ref vector i))
           (loop (+ i 1))))))


(definition public (u32vector->uint32* vector)
  (let* ((size (u32vector-length vector))
         (pointer (uint32*-alloc size)))
    (let loop ((i 0))
         (if (= i size)
             pointer
           (uint32*-set! pointer i (u32vector-ref vector i))
           (loop (+ i 1)))))))
