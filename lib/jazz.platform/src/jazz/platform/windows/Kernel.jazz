;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Windows Kernel
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.platform.windows.Kernel jazz


(import (jazz.foreign)
        (jazz.platform.windows.Base)
        (jazz.platform.windows.Def)
        (jazz.platform.windows.Types)
        (profiler))


(c-include "<Tlhelp32.h>")
(c-include "<Windows.h>")
(c-include "<stdbool.h>")


;;;
;;;; Constants
;;;



(c-constant TH32CS_SNAPHEAPLIST #x00000001)
(c-constant TH32CS_SNAPPROCESS  #x00000002)
(c-constant TH32CS_SNAPTHREAD   #x00000004)
(c-constant TH32CS_SNAPMODULE   #x00000008)
(c-constant TH32CS_SNAPMODULE32 #x00000010)
(c-constant TH32CS_SNAPALL      (bitwise-ior TH32CS_SNAPHEAPLIST TH32CS_SNAPPROCESS TH32CS_SNAPTHREAD TH32CS_SNAPMODULE))
(c-constant TH32CS_INHERIT      #x80000000)


;;;
;;;; Enumerations
;;;


(c-enumerant THREAD_ALL_ACCESS)


;;;
;;;; Structures
;;;


(c-structure PROCESSENTRY32
  (DWORD dwSize)
  (DWORD cntUsage)
  (DWORD th32ProcessID)
  (DWORD th32DefaultHeapID)
  (DWORD th32ModuleID)
  (DWORD cntThreads)
  (DWORD th32ParentProcessID)
  (LONG pcPriClassBase)
  (DWORD dwFlags)
  (WCHAR szExeFile 260))


(c-structure THREADENTRY32
  (DWORD dwSize)
  (DWORD cntUsage)
  (DWORD th32ThreadID)
  (DWORD th32OwnerProcessID)
  (LONG  tpBasePri)
  (LONG  tpDeltaPri)
  (DWORD dwFlags))


(c-structure MODULEENTRY32
  (DWORD   dwSize)
  (DWORD   th32ModuleID)
  (DWORD   th32ProcessID)
  (DWORD   GlblcntUsage)
  (DWORD   ProccntUsage)
  (BYTE*   modBaseAddr)
  (DWORD   modBaseSize)
  (HMODULE hModule)
  (WCHAR   szModule 256)
  (WCHAR   szExePath 260))


;;;
;;;; Externals
;;;


(c-external (GetLastError) DWORD)
(c-external (GetVersionEx                            OSVERSIONINFO*) BOOL                                                                                                 "GetVersionExW")
(c-external (GlobalSize                              HANDLE) DWORD)
(c-external (GlobalLock                              HANDLE) VOID*)
(c-external (GlobalUnlock                            HANDLE) BOOL)
(c-external (GetCurrentThreadId) DWORD)
(c-external (GetCurrentProcessId) DWORD)
(c-external (OpenThread                              DWORD BOOL DWORD) HANDLE)
(c-external (SetEvent                                HANDLE) BOOL)
(c-external (GetConsoleWindow) HWND)
(c-external (GetComputerName                         LPWSTR PDWORD) BOOL                                                                                                  "GetComputerNameW")
(c-external (GetFileSize                             HANDLE PDWORD) DWORD)
(c-external (GetFileTime                             HANDLE FILETIME* FILETIME* FILETIME*) BOOL)
(c-external (GetFileAttributes                       CWSTR) DWORD                                                                                                         "GetFileAttributesW")
(c-external (SetFileTime                             HANDLE FILETIME* FILETIME* FILETIME*) BOOL)
(c-external (SetFileAttributes                       CWSTR DWORD) BOOL                                                                                                    "SetFileAttributesW")
(c-external (GetLogicalDrives) DWORD)
(c-external (ReadFile                                HANDLE PVOID DWORD PDWORD LPOVERLAPPED) BOOL)
(c-external (WriteFile                               HANDLE PVOID DWORD PDWORD LPOVERLAPPED) BOOL)
(c-external (CloseHandle                             HANDLE) :free BOOL)
(c-external (CreateToolhelp32Snapshot                DWORD DWORD) HANDLE)
(c-external (Process32First                          HANDLE PROCESSENTRY32*) BOOL)
(c-external (Process32Next                           HANDLE PROCESSENTRY32*) BOOL)
(c-external (Thread32First                           HANDLE THREADENTRY32*) BOOL)
(c-external (Thread32Next                            HANDLE THREADENTRY32*) BOOL)
(c-external (Module32First                           HANDLE MODULEENTRY32*) BOOL)


;;;
;;;; GetTempPath
;;;


(definition public (GetTempPath)
  (let* ((GetTempPath (c-function GetTempPathW (DWORD WCHAR*) DWORD "GetTempPathW"))
         (size (GetTempPath 0 #f))
         (buffer (WCHAR-array-make size)))
    (GetTempPath size buffer)
    (prog1 (WCHAR-string buffer)
      (WCHAR-array-free buffer))))


(definition public (GetTempFileName directory prefix)
  (let* ((GetTempFileName (c-function GetTempFileNameW (CWSTR CWSTR UINT WCHAR*) UINT "GetTempFileNameW"))
         (buffer (WCHAR-array-make MAX_PATH))
         (result (GetTempFileName directory prefix 0 buffer)))
    (values result (prog1 (WCHAR-string buffer)
                     (WCHAR-array-free buffer)))))


;;;
;;;; Performance Counter
;;;


(c-external (QueryTSC) uint64
  #/C/
    __asm__ __volatile__("rdtsc": "=A" (___result));
//#)


(c-external (QueryPerformanceFrequency) int64
  #/C/
    LARGE_INTEGER frequency;
    QueryPerformanceFrequency(&frequency);
    ___return(frequency.QuadPart);
//#)


(c-external (QueryPerformanceCounter) int64
  #/C/
    LARGE_INTEGER counter;
    QueryPerformanceCounter(&counter);
    ___return(counter.QuadPart);
//#)


(profiler-real-time-set!
  (lambda ()
    (* (/ (QueryPerformanceCounter) (QueryPerformanceFrequency)) 1000)))


;;;
;;;; Thread
;;;


(c-declare cocoa #/Kernel/
typedef HRESULT (WINAPI * pGetThreadDescription) (HANDLE hThread, PWSTR lpThreadDescription);
static pGetThreadDescription GetThreadDescriptionFunc = NULL;
static HMODULE kernel32_module = NULL;
static bool ThreadDescriptionLoaded = false;

static void LoadThreadDescription()
{
    kernel32_module = LoadLibraryW(L"kernel32.dll");
    if (kernel32_module) {
      GetThreadDescriptionFunc =
          (pGetThreadDescription) GetProcAddress(kernel32_module,
          "GetThreadDescription");
      if (!GetThreadDescriptionFunc)
        FreeLibrary(kernel32_module);
    }
}

static wchar_t* GetThreadDescriptionAux(HANDLE handle)
{
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wreturn-local-addr"
    if (!ThreadDescriptionLoaded) {
      LoadThreadDescription();
      ThreadDescriptionLoaded = true;
    }
    
    if (!GetThreadDescriptionFunc)
      return NULL;
    else {
      wchar_t desc[512];
      
      GetThreadDescriptionFunc(handle, desc);
      
      return desc;
    }
#pragma GCC diagnostic pop
}

static double FILETIME_to_seconds(FILETIME* ft)
{
  return *___CAST(LONGLONG*,ft) / 1.0e7;
}


static double GetThreadTimeAux(HANDLE handle)
{
    FILETIME creation, exit, kernel, user;
    GetThreadTimes(handle, &creation, &exit, &kernel, &user);
    return FILETIME_to_seconds(&kernel) + FILETIME_to_seconds(&user);
}

//#)


(c-external (GetThreadDescription HANDLE) wchar_t-string "GetThreadDescriptionAux")
(c-external (GetThreadTime HANDLE) double "GetThreadTimeAux"))
