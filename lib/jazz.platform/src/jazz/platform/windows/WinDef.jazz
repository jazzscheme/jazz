;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Windows Definitions
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library protected jazz.platform.windows.WinDef jazz


(import (jazz.platform.windows.WinTypes))


;;;
;;;; Constants
;;;


(c-constant NULL           #f)
(c-constant FALSE          0)
(c-constant TRUE           1)
(c-constant MAX_PATH       260)


(c-constant EXIT_SUCCESS   0)
(c-constant EXIT_FAILURE   1)


;;;
;;;; Structures
;;;


(c-structure POINT
  (INT x)
  (INT y))


(c-type LPPOINT POINT*)


(c-structure POINTS
  (SHORT x)
  (SHORT y))


(c-structure SIZE
  (LONG cx)
  (LONG cy))


(c-type SIZEL SIZE)
(c-type SIZEL* (pointer SIZEL))


(c-structure RECT
  (INT left)
  (INT top)
  (INT right)
  (INT bottom))


(c-type LPRECT   RECT*)
(c-type LPCRECT  RECT*) ;; tofix : Qualifier const


(definition RECT->POINTS (c-function (LPRECT) LPPOINT "___result_voidstar = (LPPOINT)___arg1;"))


(c-structure RECTL
  (LONG left)
  (LONG right)
  (LONG top)
  (LONG bottom))


;;;
;;;; Utilities
;;;


(definition public (new-POINT x <fx> y <fx>)
  (let ((point (POINT-make)))
    (POINT-x-set! point x)
    (POINT-y-set! point y)
    point))


(definition public (POINT->point pt) <Point>
  (if (not pt)
      {}
    (new Point
      (POINT-x-ref pt)
      (POINT-y-ref pt))))


(definition public (point->POINT point)
  (new-POINT (get-h~ point) (get-v~ point)))


(definition public (POINT->dimension pt) <Dimension>
  (if (not pt)
      {}
    (new Dimension
      (POINT-x-ref pt)
      (POINT-y-ref pt))))


(definition public (SIZE->dimension size) <Dimension>
  (unimplemented '<Dimension>)
  @convert
  (if (not size)
      {}
    (new Dimension
      (get size 'cx)
      (get size 'cy))))


(definition public (new-RECT left <fx> top <fx> right <fx> bottom <fx>)
  (let ((rect (RECT-make)))
    (RECT-left-set!   rect (inexact->exact left))
    (RECT-top-set!    rect (inexact->exact top))
    (RECT-right-set!  rect (inexact->exact right))
    (RECT-bottom-set! rect (inexact->exact bottom))
    rect))


(definition public (rect->RECT rect)
  (new-RECT (get-left~ rect)
            (get-top~ rect)
            (get-right~ rect)
            (get-bottom~ rect)))


(definition public (RECT->rect rect) <Rect>
  (if (not rect)
      {}
    (new Rect
      (RECT-left-ref rect)
      (RECT-top-ref rect)
      (RECT-right-ref rect)
      (RECT-bottom-ref rect)))))
