;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Windows
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2012
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.platform.windows jazz


(export (jazz.platform.windows.com)
        (jazz.platform.windows.WinTypes)
        (jazz.platform.windows.WinDef)
        (jazz.platform.windows.WinBase)
        (jazz.platform.windows.WinKernel)
        (jazz.platform.windows.WinUser)
        (jazz.platform.windows.WinGDI)
        (jazz.platform.windows.WinMM)
        (jazz.platform.windows.WinShell)
        (jazz.platform.windows.WinCtrl)
        (jazz.platform.windows.WinDlg)
        (jazz.platform.windows.WinIDL)
        (jazz.platform.windows.WinNT)
        (jazz.platform.windows.WinPerf)
        (jazz.platform.windows.WinPSAPI))

(import (jazz.platform.windows.WinTypes)
        (jazz.platform.windows.WinKernel)
        (jazz.platform.windows.WinUser)
        (jazz.io)
        (jazz.system.access))


;;;
;;;; Process
;;;


(definition public (relinquish-process)
  (thread-yield!))


(definition public (current-process-id)
  (GetCurrentProcessId))


(definition package current-instance
  (c-function () HINSTANCE
    "___result_voidstar = ___EXT(___get_program_startup_info)()->hInstance;"))


;;;
;;;; Bell
;;;


(definition protected (bell-internal)
  (MessageBeep MB_OK))


;;;
;;;; Input
;;;


(definition public (milliseconds-since-startup)
  (GetTickCount))


(definition public (milliseconds-at-last-input)
  (let ((info (LASTINPUTINFO-make)))
    (LASTINPUTINFO-cbSize-set! info (LASTINPUTINFO-sizeof))
    (LASTINPUTINFO-dwTime-set! info 0)
    (GetLastInputInfo info)
    (prog1 (LASTINPUTINFO-dwTime-ref info)
      (LASTINPUTINFO-free info))))


;;;
;;;; Message
;;;


(definition public (system-message text . rest)
  (bind-keywords ((type 'message) (title #f) . others) rest
    (let ((window (get-toplevel))
          (title
            (or title (case type
                        ((message) "Message")
                        ((question) "Question")
                        ((confirmation) "Confirmation")
                        ((problem) "Problem")
                        ((error) "Error"))))
          (flags
            (case type
              ((message) (bitwise-ior MB_OK MB_ICONINFORMATION))
              ((question) (bitwise-ior MB_YESNO MB_ICONWARNING))
              ((confirmation) (bitwise-ior MB_YESNOCANCEL MB_ICONWARNING))
              ((problem) (bitwise-ior MB_OK MB_ICONERROR))
              ((error) (bitwise-ior MB_OKCANCEL MB_ICONERROR)))))
      (let ((code (MessageBox (if window (get-handle~ window) #f) text title (bitwise-ior MB_TASKMODAL flags))))
        (ecase code
          ((IDOK) 'yes)
          ((IDCANCEL) 'cancel)
          ((IDYES) 'yes)
          ((IDNO) 'no)
          (else #f))))))


;;;
;;;; Temporary Path
;;;


(definition public (get-temporary-directory)
  (new Directory (tokenise-windows (GetTempPath))))


(definition public (get-temporary-file (directory: directory #f) (prefix: prefix "JZZ"))
  (let* ((directory (or directory (get-temporary-directory)))
         (dir (parse~ directory)))
    (if (empty-string? dir)
        (error "Unable to use {t} as a temporary directory" directory)
      (receive (no filename) (GetTempFileName (platform-filename (parse~ directory)) prefix 0)
        (new File (tokenise-windows filename)))))))
