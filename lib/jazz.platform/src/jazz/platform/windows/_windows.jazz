;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Windows
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.platform.windows jazz


(export (jazz.platform.windows.Types)
        (jazz.platform.windows.Def)
        (jazz.platform.windows.Base)
        (jazz.platform.windows.Kernel)
        (jazz.platform.windows.User)
        (jazz.platform.windows.User1)
        (jazz.platform.windows.GDI)
        (jazz.platform.windows.MM)
        (jazz.platform.windows.Shell)
        (jazz.platform.windows.Ctrl)
        (jazz.platform.windows.Dlg)
        (jazz.platform.windows.IDL)
        (jazz.platform.windows.NT)
        (jazz.platform.windows.Perf)
        (jazz.platform.windows.PSAPI))

(import (jazz.platform.windows.Types)
        (jazz.platform.windows.Def)
        (jazz.platform.windows.Base)
        (jazz.platform.windows.Kernel)
        (jazz.platform.windows.Shell)
        (jazz.platform.windows.User)
        (jazz.platform.windows.User1)
        (jazz.foreign)
        (jazz.io)
        (jazz.version)
        (time))


;;;
;;;; Prime
;;;


(definition public (prime-platform)
  )


;;;
;;;; Initialize
;;;


(definition public (initialize-platform)
  (set-platform-log system-log)
  (system-timezone-set! get-timezone-offset)
  (local-timezone-set! get-timezone-offset))


;;;
;;;; System
;;;


(definition protected (system-memory)
  (unimplemented))


;;;
;;;; Process
;;;


(definition public (relinquish-process)
  (thread-yield!))


(definition public (current-process-id)
  (GetCurrentProcessId))


(c-external (process-instance) HINSTANCE
  #/C/
    ___return(___EXT(___get_program_startup_info)()->hInstance);
//#)


(definition public (collect-processes-info)
  (let ((info-table (make-table))
        (snapshot (CreateToolhelp32Snapshot TH32CS_SNAPPROCESS 0))
        (process (PROCESSENTRY32-make)))
    (PROCESSENTRY32-dwSize-set! process (PROCESSENTRY32-sizeof))
    (when (Process32First snapshot process)
      (let (iter)
        (let ((name (PROCESSENTRY32-szExeFile-ref process))
              (id (PROCESSENTRY32-th32ProcessID-ref process)))
          (let ((module-snapshot (CreateToolhelp32Snapshot TH32CS_SNAPMODULE id))
                (module (MODULEENTRY32-make)))
            (MODULEENTRY32-dwSize-set! module (MODULEENTRY32-sizeof))
            (Module32First module-snapshot module)
            (let ((exe (normalize-filename-separators (MODULEENTRY32-szExePath-ref module))))
              (MODULEENTRY32-free module)
              (CloseHandle module-snapshot)
              (table-set! info-table id (list id name exe))))
          (when (Process32Next snapshot process)
            (iter)))))
    (PROCESSENTRY32-free process)
    (CloseHandle snapshot)
    info-table))


;;;
;;;; Thread
;;;


(definition public (collect-threads-info (process-id #f))
  (let ((process-id (or process-id (GetCurrentProcessId)))
        (info-table (make-table))
        (snapshot (CreateToolhelp32Snapshot TH32CS_SNAPTHREAD 0))
        (thread (THREADENTRY32-make)))
    (THREADENTRY32-dwSize-set! thread (THREADENTRY32-sizeof))
    (when (Thread32First snapshot thread)
      (let (iter)
        (let ((owner-id (THREADENTRY32-th32OwnerProcessID-ref thread)))
          (when (= owner-id process-id)
            (let ((id (THREADENTRY32-th32ThreadID-ref thread))
                  (base-priority (THREADENTRY32-tpBasePri-ref thread))
                  (delta-priority (THREADENTRY32-tpDeltaPri-ref thread)))
              (table-set! info-table id (list id base-priority delta-priority)))))
        (when (Thread32Next snapshot thread)
          (iter))))
    (THREADENTRY32-free thread)
    (CloseHandle snapshot)
    info-table))


;;;
;;;; Bell
;;;


(definition protected (bell-internal)
  (MessageBeep MB_OK))


;;;
;;;; Input
;;;


(definition public (milliseconds-since-startup)
  (GetTickCount))


(definition public (milliseconds-at-last-input)
  (let ((info (LASTINPUTINFO-make)))
    (LASTINPUTINFO-cbSize-set! info (LASTINPUTINFO-sizeof))
    (LASTINPUTINFO-dwTime-set! info 0)
    (GetLastInputInfo info)
    (prog1 (LASTINPUTINFO-dwTime-ref info)
      (LASTINPUTINFO-free info))))


;;;
;;;; Log
;;;


(definition public (system-log msg)
  (terminal-line (->string msg))
  @convert
  (let* ((name (filename-base kernel-path))
         (handle (RegisterEventSource #f name))
         (strings (new-array string 1)))
    (array-set! strings 0 message)
    (ReportEvent handle type 0 event-id 0 1 0 strings 0)))


;;;
;;;; Event
;;;


(definition poll-msg
  (MSG-make))


(definition package (poll-events hwnd translate-shortcut)
  (define (process-message msg)
    (unless (translate-shortcut msg)
      (TranslateMessage msg)
      (DispatchMessage msg)))
  
  (declare (proper-tail-calls))
  (let (loop)
    (when ;; workaround what appears to be a windows bug
          ;; the documentation says passing NULL should work
          ;; and it does seems to be working but after a while
          ;; windows flags the application as not responding
          (or (PeekMessage poll-msg hwnd 0 0 PM_REMOVE)
              (PeekMessage poll-msg NULL 0 0 PM_REMOVE))
      (process-message poll-msg)
      (loop))))


;;;
;;;; Message
;;;


(definition public (system-message text . rest)
  (bind-keywords ((type 'message) (title #f) (header #f) . others) rest
    (let ((title
            (or title (case type
                        ((message) "Message")
                        ((question) "Question")
                        ((confirmation) "Confirmation")
                        ((problem) "Problem")
                        ((error) "Error"))))
          (flags
            (case type
              ((message) (bitwise-ior MB_OK MB_ICONINFORMATION))
              ((question) (bitwise-ior MB_YESNO MB_ICONWARNING))
              ((confirmation) (bitwise-ior MB_YESNOCANCEL MB_ICONWARNING))
              ((problem) (bitwise-ior MB_OK MB_ICONERROR))
              ((error) (bitwise-ior MB_OKCANCEL MB_ICONERROR)))))
      (let ((code (MessageBox #f text title (bitwise-ior MB_TASKMODAL flags))))
        (ecase code
          ((IDOK) 'yes)
          ((IDCANCEL) 'cancel)
          ((IDYES) 'yes)
          ((IDNO) 'no)
          (else #f))))))


;;;
;;;; Keyboard
;;;


(definition public (key-down? key)
  (let ((key (if (integer? key)
                 key
               (char->integer key))))
    (/= (hibyte (GetAsyncKeyState key)) 0)))


(definition public (shift-down?)
  (key-down? VK_SHIFT))


(definition public (control-down?)
  (and (key-down? VK_CONTROL) (not (key-down? VK_RMENU))))


(definition public (alt-down?)
  (key-down? VK_LMENU))


(definition public (meta-down?)
  #f)


(definition public (modifiers-down)
  (values (shift-down?)
          (control-down?)
          (alt-down?)
          (meta-down?)))


;;;
;;;; Directory
;;;


(definition public (directory-writable? dirname)
  ;; super quicky
  #t)


;;;
;;;; Temporary
;;;


(definition public (get-temporary-directory)
  (new Directory (tokenise-windows (GetTempPath))))


(definition public (get-temporary-file (directory: directory #f) (prefix: prefix "JZZ") (extension: extension #f))
  (let* ((directory (or directory (get-temporary-directory)))
         (dir (parse directory)))
    (if (empty-string? dir)
        (error "Unable to use {t} as a temporary directory" directory)
      (receive (no filename) (GetTempFileName (platform-filename (parse directory)) prefix)
        (let ((filename (if (not extension) filename (add-extension (filename-base filename) extension))))
          (new File (tokenise-windows filename)))))))


;;;
;;;; Document
;;;


(definition public (open-document file)
  (ShellExecute NULL "open" (parse file) NULL NULL SW_SHOWNORMAL))


;;;
;;;; User
;;;


(definition public (get-computer-name)
  (unimplemented)
  @platform
  (let* ((size (+ MAX_COMPUTERNAME_LENGTH 1))
         (name (make-string size)))
    (GetComputerName name size)
    (adjust-string name)
    name))


(definition public (get-system-user-name)
  (unimplemented)
  @Platform
  (let ((username (make-string MAX_PATH)))
    (GetUserName username MAX_PATH)
    (adjust-string username)
    username))


;;;
;;;; Version
;;;


(definition public Version-Info
  #f)


(definition (version-info)
  (unless Version-Info
    (set! Version-Info
          (let ((info (OSVERSIONINFOEX-make)))
            (OSVERSIONINFOEX-dwOSVersionInfoSize-set! info (OSVERSIONINFOEX-sizeof))
            (GetVersionEx info)
            info)))
  Version-Info)


(definition public Platform-Version
  #f)


(definition public (get-platform-version)
  (unless Platform-Version
    (set! Platform-Version
          (let ((info (version-info)))
            (new Version
              (OSVERSIONINFOEX-dwMajorVersion-ref info)
              (OSVERSIONINFOEX-dwMinorVersion-ref info)))))
  Platform-Version))
