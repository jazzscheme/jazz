;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; X11
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Jeremie Lasalle Ratelle.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.platform.x11 jazz


(import (jazz.foreign)
        (jazz.platform.types)
        (jazz.platform.x11.x11-types)
        (jazz.settings))


(c-include "<X11/Xlib.h>")
(c-include "<X11/Xutil.h>")
(c-include "<X11/Xatom.h>")
(c-include "<X11/Xlocale.h>")
(c-include "<stdlib.h>")
(c-include "<string.h>")
(c-include "<unistd.h>")


(c-constant None                     #x00000000)
(c-constant PointerRoot              1)
(c-constant CopyFromParent           #x00000000)
(c-constant InputOutput              1)
(c-constant CurrentTime              0)


(c-constant Always                   2)


(c-constant StaticGravity            10)


;;;
;;;; Event Masks
;;;


(c-constant NoEventMask              #x00000000)
(c-constant KeyPressMask             #x00000001)
(c-constant KeyReleaseMask           #x00000002)
(c-constant ButtonPressMask          #x00000004)
(c-constant ButtonReleaseMask        #x00000008)
(c-constant EnterWindowMask          #x00000010)
(c-constant LeaveWindowMask          #x00000020)
(c-constant PointerMotionMask        #x00000040)
(c-constant PointerMotionHintMask    #x00000080)
(c-constant Button1MotionMask        #x00000100)
(c-constant Button2MotionMask        #x00000200)
(c-constant Button3MotionMask        #x00000400)
(c-constant Button4MotionMask        #x00000800)
(c-constant Button5MotionMask        #x00001000)
(c-constant ButtonMotionMask         #x00002000)
(c-constant KeymapStateMask          #x00004000)
(c-constant ExposureMask             #x00008000)
(c-constant VisibilityChangeMask     #x00010000)
(c-constant StructureNotifyMask      #x00020000)
(c-constant ResizeRedirectMask       #x00040000)
(c-constant SubstructureNotifyMask   #x00080000)
(c-constant SubstructureRedirectMask #x00100000)
(c-constant FocusChangeMask          #x00200000)
(c-constant PropertyChangeMask       #x00400000)
(c-constant ColormapChangeMask       #x00800000)
(c-constant OwnerGrabButtonMask      #x01000000)


;;;
;;;; Event Types
;;;


(c-constant KeyPress         2)
(c-constant KeyRelease       3)
(c-constant ButtonPress      4)
(c-constant ButtonRelease    5)
(c-constant MotionNotify     6)
(c-constant EnterNotify      7)
(c-constant LeaveNotify      8)
(c-constant FocusIn          9)
(c-constant FocusOut         10)
(c-constant KeymapNotify     11)
(c-constant Expose           12)
(c-constant GraphicsExpose   13)
(c-constant NoExpose         14)
(c-constant VisibilityNotify 15)
(c-constant CreateNotify     16)
(c-constant DestroyNotify    17)
(c-constant UnmapNotify      18)
(c-constant MapNotify        19)
(c-constant MapRequest       20)
(c-constant ReparentNotify   21)
(c-constant ConfigureNotify  22)
(c-constant ConfigureRequest 23)
(c-constant GravityNotify    24)
(c-constant ResizeRequest    25)
(c-constant CirculateNotify  26)
(c-constant CirculateRequest 27)
(c-constant PropertyNotify   28)
(c-constant SelectionClear   29)
(c-constant SelectionRequest 30)
(c-constant SelectionNotify  31)
(c-constant ColormapNotify   32)
(c-constant ClientMessage    33)
(c-constant MappingNotify    34)
(c-constant LASTEvent        35)


;;;
;;;; Attribute masks
;;;


(c-constant CWBackPixmap        #x00000001)
(c-constant CWBackPixel         #x00000002)
(c-constant CWBorderPixmap      #x00000004)
(c-constant CWBorderPixel       #x00000008)
(c-constant CWBitGravity        #x00000010)
(c-constant CWWinGravity        #x00000020)
(c-constant CWBackingStore      #x00000040)
(c-constant CWBackingPlanes     #x00000080)
(c-constant CWBackingPixel      #x00000100)
(c-constant CWOverrideRedirect  #x00000200)
(c-constant CWSaveUnder         #x00000400)
(c-constant CWEventMask         #x00000800)
(c-constant CWDontPropagate     #x00001000)
(c-constant CWColormap          #x00002000)
(c-constant CWCursor            #x00004000)


;;;
;;;; Mouse constants
;;;


(c-constant Button1 1)
(c-constant Button2 2)
(c-constant Button3 3)
(c-constant Button4 4)
(c-constant Button5 5)
(c-constant Button6 6)
(c-constant Button7 7)


;;;
;;;; Keyboard constants
;;;


(c-constant ShiftMask              0)
(c-constant LockMask               1)
(c-constant ControlMask            2)
(c-constant Mod1Mask               3)
(c-constant Mod2Mask               4)
(c-constant Mod3Mask               5)
(c-constant Mod4Mask               6)
(c-constant Mod5Mask               7)



(c-constant XK_BackSpace      #xFF08)
(c-constant XK_Tab            #xFF09)
(c-constant XK_Linefeed       #xFF0A)
(c-constant XK_Clear          #xFF0B)
(c-constant XK_Return         #xFF0D)
(c-constant XK_Pause          #xFF13)
(c-constant XK_Scroll_Lock    #xFF14)
(c-constant XK_Sys_Req        #xFF15)
(c-constant XK_Escape         #xFF1B)

(c-constant XK_Home           #xFF50)
(c-constant XK_Left           #xFF51)
(c-constant XK_Up             #xFF52)
(c-constant XK_Right          #xFF53)
(c-constant XK_Down           #xFF54)
(c-constant XK_Prior          #xFF55)
(c-constant XK_Page_Up        #xFF55)
(c-constant XK_Next           #xFF56)
(c-constant XK_Page_Down      #xFF56)
(c-constant XK_End            #xFF57)
(c-constant XK_Begin          #xFF58)

(c-constant XK_Select         #xFF60)
(c-constant XK_Print          #xFF61)
(c-constant XK_Execute        #xFF62)
(c-constant XK_Insert         #xFF63)
(c-constant XK_Undo           #xFF65)
(c-constant XK_Redo           #xFF66)
(c-constant XK_Menu           #xFF67)
(c-constant XK_Find           #xFF68)
(c-constant XK_Cancel         #xFF69)
(c-constant XK_Help           #xFF6A)
(c-constant XK_Break          #xFF6B)
(c-constant XK_Mode_switch    #xFF7E)
(c-constant XK_script_switch  #xFF7E)
(c-constant XK_Num_Lock       #xFF7F)

(c-constant XK_KP_Enter       #xFF8D)

(c-constant XK_KP_Add         #xFFAB)
(c-constant XK_KP_Subtract    #xFFAD)
(c-constant XK_KP_Decimal     #xFFAE)
(c-constant XK_KP_Divide      #xFFAF)

(c-constant XK_F1             #xFFBE)
(c-constant XK_F2             #xFFBF)
(c-constant XK_F3             #xFFC0)
(c-constant XK_F4             #xFFC1)
(c-constant XK_F5             #xFFC2)
(c-constant XK_F6             #xFFC3)
(c-constant XK_F7             #xFFC4)
(c-constant XK_F8             #xFFC5)
(c-constant XK_F9             #xFFC6)
(c-constant XK_F10            #xFFC7)
(c-constant XK_F11            #xFFC8)
(c-constant XK_F12            #xFFC9)

(c-constant XK_Shift_L        #xffe1)
(c-constant XK_Shift_R        #xffe2)
(c-constant XK_Control_L      #xffe3)
(c-constant XK_Control_R      #xffe4)
(c-constant XK_Caps_Lock      #xffe5)
(c-constant XK_Shift_Lock     #xffe6)
(c-constant XK_Meta_L         #xffe7)
(c-constant XK_Meta_R         #xffe8)
(c-constant XK_Alt_R          #xffe9)
(c-constant XK_Alt_L          #xffea)
(c-constant XK_Mode_switch    #xff7e)


(c-constant XK_Delete         #xFFFF)


(c-constant XK_space          #x020)
(c-constant XK_exclam         #x021)
(c-constant XK_quotedbl       #x022)
(c-constant XK_numbersign     #x023)
(c-constant XK_dollar         #x024)
(c-constant XK_percent        #x025)
(c-constant XK_ampersand      #x026)
(c-constant XK_apostrophe     #x027)
(c-constant XK_parenleft      #x028)
(c-constant XK_parenright     #x029)
(c-constant XK_asterisk       #x02a)
(c-constant XK_plus           #x02b)
(c-constant XK_comma          #x02c)
(c-constant XK_minus          #x02d)
(c-constant XK_period         #x02e)
(c-constant XK_slash          #x02f)

(c-constant XK_0              #x030)
(c-constant XK_1              #x031)
(c-constant XK_2              #x032)
(c-constant XK_3              #x033)
(c-constant XK_4              #x034)
(c-constant XK_5              #x035)
(c-constant XK_6              #x036)
(c-constant XK_7              #x037)
(c-constant XK_8              #x038)
(c-constant XK_9              #x039)

(c-constant XK_colon          #x03a)
(c-constant XK_semicolon      #x03b)
(c-constant XK_less           #x03c)
(c-constant XK_equal          #x03d)
(c-constant XK_greater        #x03e)
(c-constant XK_question       #x03f)
(c-constant XK_at             #x040)

(c-constant XK_A              #x041)
(c-constant XK_B              #x042)
(c-constant XK_C              #x043)
(c-constant XK_D              #x044)
(c-constant XK_E              #x045)
(c-constant XK_F              #x046)
(c-constant XK_G              #x047)
(c-constant XK_H              #x048)
(c-constant XK_I              #x049)
(c-constant XK_J              #x04a)
(c-constant XK_K              #x04b)
(c-constant XK_L              #x04c)
(c-constant XK_M              #x04d)
(c-constant XK_N              #x04e)
(c-constant XK_O              #x04f)
(c-constant XK_P              #x050)
(c-constant XK_Q              #x051)
(c-constant XK_R              #x052)
(c-constant XK_S              #x053)
(c-constant XK_T              #x054)
(c-constant XK_U              #x055)
(c-constant XK_V              #x056)
(c-constant XK_W              #x057)
(c-constant XK_X              #x058)
(c-constant XK_Y              #x059)
(c-constant XK_Z              #x05a)

(c-constant XK_bracketleft    #x05b)
(c-constant XK_backslash      #x05c)
(c-constant XK_bracketright   #x05d)
(c-constant XK_asciicircum    #x05e)
(c-constant XK_underscore     #x05f)
(c-constant XK_grave          #x060)

(c-constant XK_a              #x061)
(c-constant XK_b              #x062)
(c-constant XK_c              #x063)
(c-constant XK_d              #x064)
(c-constant XK_e              #x065)
(c-constant XK_f              #x066)
(c-constant XK_g              #x067)
(c-constant XK_h              #x068)
(c-constant XK_i              #x069)
(c-constant XK_j              #x06a)
(c-constant XK_k              #x06b)
(c-constant XK_l              #x06c)
(c-constant XK_m              #x06d)
(c-constant XK_n              #x06e)
(c-constant XK_o              #x06f)
(c-constant XK_p              #x070)
(c-constant XK_q              #x071)
(c-constant XK_r              #x072)
(c-constant XK_s              #x073)
(c-constant XK_t              #x074)
(c-constant XK_u              #x075)
(c-constant XK_v              #x076)
(c-constant XK_w              #x077)
(c-constant XK_x              #x078)
(c-constant XK_y              #x079)
(c-constant XK_z              #x07a)

(c-constant XK_braceleft      #x07b)
(c-constant XK_bar            #x07c)
(c-constant XK_braceright     #x07d)
(c-constant XK_asciitilde     #x07e)


;;;
;;;; Visibility constants
;;;


(c-constant IsUnmapped   0)
(c-constant IsUnviewable 1)
(c-constant IsViewable   2)


;;;
;;;; Focus constants
;;;


(c-constant NotifyAncestor         0)
(c-constant NotifyVirtual          1)
(c-constant NotifyInferior         2)
(c-constant NotifyNonlinear        3)
(c-constant NotifyNonlinearVirtual 4)
(c-constant NotifyPointer          5)
(c-constant NotifyPointerRoot      6)
(c-constant NotifyDetailNone       7)


(c-constant RevertToNone           None)
(c-constant RevertToPointerRoot    PointerRoot)
(c-constant RevertToParent         2)


;;;
;;;; Cursors Constants
;;;


(c-constant XC_X_cursor 0)
(c-constant XC_arrow 2)
(c-constant XC_crosshair 34)
(c-constant XC_hand2 60)
(c-constant XC_left_ptr 68)
(c-constant XC_sb_h_double_arrow 108)
(c-constant XC_sb_v_double_arrow 116)
(c-constant XC_watch 150)
(c-constant XC_xterm 152)


;;;
;;;; XIM and XIC
;;;


(definition package default-XIM #f)
(definition package default-XIC #f)


(constant XNInputStyle "inputStyle")
(constant XNFocusWindow "focusWindow")
(constant XNClientWindow "clientWindow")


(c-constant LC_ALL 0)
(c-constant XIMPreeditPosition 4)
(c-constant XIMPreeditNothing 8)
(c-constant XIMStatusNothing  1024)


(c-constant XLookupNone 1)
(c-constant XLookupChars 2)
(c-constant XLookupKeySym 3)
(c-constant XLookupBoth 4)


(definition package (initialize-locale)
  (unless (setlocale LC_ALL "")
    (error "setlocale failed"))
  (unless (XSupportsLocale)
    (error "XSupportsLocale failed")))


(definition package (initialize-xim)
  (unless (XSetLocaleModifiers "@im=none")
    (error "XSetLocaleModifiers failed"))
  (let ((xim (XOpenIM x11-default-display #f "Jazz" "Jazz")))
    (unless xim
      (error "Error creating XIM"))
    (set! default-XIM xim)))


(definition package (create-xic handle)
  (let ((xic ((c-function XCreateIC (XIM char-string int char-string Window char-string Window) XIC
                #/C/
                  ___return(XCreateIC(___arg1, ___arg2, ___arg3, ___arg4, ___arg5, ___arg6, ___arg7, NULL));
                //#)
              default-XIM
              XNInputStyle (bitwise-ior XIMPreeditNothing XIMStatusNothing)
              XNClientWindow handle
              XNFocusWindow handle)))
    (unless xic
      (error "Error creating XIC"))
    xic))


;;;
;;;; XChangeProperty modes
;;;


(constant PropModeReplace 0)


(definition package (x11-generate-atoms)
  (set! XA_CLIPBOARD                      (XInternAtom x11-default-display "CLIPBOARD" #f))
  (set! XA_TIMESTAMP                      (XInternAtom x11-default-display "TIMESTAMP" #f))
  (set! XA_TARGETS                        (XInternAtom x11-default-display "TARGETS" #f))
  (set! WM_PROTOCOLS                      (XInternAtom x11-default-display "WM_PROTOCOLS" #f))
  (set! WM_DELETE_WINDOW                  (XInternAtom x11-default-display "WM_DELETE_WINDOW" #f))
  (set! _NET_WM_WINDOW_TYPE               (XInternAtom x11-default-display "_NET_WM_WINDOW_TYPE" #f))
  (set! _NET_WM_WINDOW_TYPE_DIALOG        (XInternAtom x11-default-display "_NET_WM_WINDOW_TYPE_DIALOG" #f))
  (set! _NET_WM_WINDOW_TYPE_DROPDOWN_MENU (XInternAtom x11-default-display "_NET_WM_WINDOW_TYPE_DROPDOWN_MENU" #f))
  (set! _NET_WM_WINDOW_TYPE_TOOLTIP       (XInternAtom x11-default-display "_NET_WM_WINDOW_TYPE_TOOLTIP" #f))
  (set! _NET_WM_WINDOW_TYPE_NORMAL        (XInternAtom x11-default-display "_NET_WM_WINDOW_TYPE_NORMAL" #f))
  (set! _NET_WM_STATE                     (XInternAtom x11-default-display "_NET_WM_STATE" #f))
  (set! _NET_WM_STATE_MODAL               (XInternAtom x11-default-display "_NET_WM_STATE_MODAL" #f))
  (set! _NET_WM_STATE_STICKY              (XInternAtom x11-default-display "_NET_WM_STATE_STICKY" #f))
  (set! _NET_WM_STATE_FULLSCREEN          (XInternAtom x11-default-display "_NET_WM_STATE_FULLSCREEN" #f))
  (set! XdndAware                         (XInternAtom x11-default-display "XdndAware" #f))
  (set! XdndEnter                         (XInternAtom x11-default-display "XdndEnter" #f))
  (set! XdndLeave                         (XInternAtom x11-default-display "XdndLeave" #f))
  (set! XdndSelection                     (XInternAtom x11-default-display "XdndSelection" #f))
  (set! XdndPosition                      (XInternAtom x11-default-display "XdndPosition" #f))
  (set! XdndDrop                          (XInternAtom x11-default-display "XdndDrop" #f))
  (set! XdndStatus                        (XInternAtom x11-default-display "XdndStatus" #f))
  (set! XdndFinished                      (XInternAtom x11-default-display "XdndFinished" #f))
  (set! XdndTypeList                      (XInternAtom x11-default-display "XdndTypeList" #f))
  (set! XdndActionCopy                    (XInternAtom x11-default-display "XdndActionCopy" #f))
  (set! text/uri-list                     (XInternAtom x11-default-display "text/uri-list" #f)))


;;;
;;;; Base Atoms
;;;


(constant AnyPropertyType 0)

(constant XA_PRIMARY 1)
(constant XA_ATOM    4)
(constant XA_STRING 31)

(definition package XA_CLIPBOARD #f)
(definition package XA_TIMESTAMP #f)
(definition package XA_TARGETS   #f)


;;;
;;;; Drag and Drop
;;;


(constant XdndVersion 5)

(definition package XdndAware #f)
(definition package XdndEnter #f)
(definition package XdndLeave #f)
(definition package XdndSelection #f)
(definition package XdndPosition #f)
(definition package XdndDrop #f)
(definition package XdndStatus #f)
(definition package XdndFinished #f)
(definition package XdndTypeList #f)
(definition package XdndActionCopy #f)


;;;
;;;; Drag and Drop MIME
;;;


(definition package text/uri-list #f)


;;;
;;;; _NET_WM_WINDOW_TYPE
;;;


(definition package _NET_WM_WINDOW_TYPE #f)
(definition package _NET_WM_WINDOW_TYPE_DIALOG #f)
(definition package _NET_WM_WINDOW_TYPE_DROPDOWN_MENU #f)
(definition package _NET_WM_WINDOW_TYPE_TOOLTIP #f)
(definition package _NET_WM_WINDOW_TYPE_NORMAL #f)


;;;
;;;; _NET_WM_STATE
;;;


(definition package _NET_WM_STATE #f)
(definition package _NET_WM_STATE_MODAL #f)
(definition package _NET_WM_STATE_STICKY #f)
(definition package _NET_WM_STATE_FULLSCREEN #f)

(definition package _NET_WM_STATE_ADD 1)


;;;
;;;; WM_PROTOCOLS
;;;


(definition package WM_PROTOCOLS #f)
(definition package WM_DELETE_WINDOW #f)


;;;
;;;; Latest event timestamp
;;;


(definition x11-latest-timestamp #f)


(definition public (x11-set-latest-timestamp stamp)
  (set! x11-latest-timestamp stamp))


(definition public (x11-get-latest-timestamp)
  x11-latest-timestamp)


;;;
;;;; Clipboard
;;;


(definition package clipboard-string "")


(definition package clipboard-stamp #f)


;;;
;;;; Utility Structures
;;;


(c-structure XRectangle
  (short x)
  (short y)
  (ushort width)
  (ushort height))


;;;
;;;; Attributes structure
;;;


(c-structure  XWindowAttributes
  (int x)
  (int y)
  (int width)
  (int height)
  (int border_width)
  (int depth)
  (Visual* visual)
  (Window root)
  ; c++ problem (int class)
  (int bit_gravity)
  (int win_gravity)
  (int backing_store)
  (ulong backing_planes)
  (ulong backing_pixel)
  (bool save_under)
  (Colormap colormap)
  (bool map_installed)
  (int map_state)
  (long all_event_masks)
  (long your_event_mask)
  (long do_not_propagate_mask)
  (bool override_redirect)
  (Screen* screen))


(c-structure XSetWindowAttributes
  (Pixmap background_pixmap)
  (ulong background_pixel)
  (Pixmap border_pixmap)
  (ulong border_pixel)
  (int bit_gravity)
  (int win_gravity)
  (int backing_store)
  (ulong backing_planes)
  (ulong backing_pixel)
  (bool save_under)
  (long event_mask)
  (long do_not_propagate_mask)
  (bool override_redirect)
  (Colormap colormap)
  (Cursor cursor))


;;;
;;;; Events Structures
;;;


(c-structure XAnyEvent
  (int type)
  (ulong serial)
  (bool send_event)
  (Display* display)
  (Window window))


(c-structure XButtonEvent
  (int type)
  (ulong serial)
  (bool send_event)
  (Display* display)
  (Window window)
  (Window root)
  (Window subwindow)
  (Time time)
  (int x)
  (int y)
  (int x_root)
  (int y_root)
  (uint state)
  (uint button)
  (bool same_screen))


(c-structure XClientMessageEvent
  (int type)
  (ulong serial)
  (bool send_event)
  (Display* display)
  (Window window)
  (Atom message_type)
  (int format))


(c-external (XClientMessageEvent-b-ref XClientMessageEvent*) char*
  #/C/
    ___return(___arg1->data.b);
//#)


(c-external (XClientMessageEvent-s-ref XClientMessageEvent*) short*
  #/C/
    ___return(___arg1->data.s);
//#)


(c-external (XClientMessageEvent-l-ref XClientMessageEvent*) long*
  #/C/
    ___return(___arg1->data.l);
//#)
  
  
(c-structure XKeyEvent
  (int type)
  (ulong serial)
  (bool send_event)
  (Display* display)
  (Window window)
  (Window root)
  (Window subwindow)
  (Time time)
  (int x)
  (int y)
  (int x_root)
  (int y_root)
  (uint state)
  (uint keycode)
  (bool same_screen))


(c-structure XMotionEvent
  (int type)
  (ulong serial)
  (bool send_event)
  (Display* display)
  (Window window)
  (Window root)
  (Window subwindow)
  (Time time)
  (int x)
  (int y)
  (int x_root)
  (int y_root)
  (uint state)
  (char is_hint)
  (bool same_screen))


(c-structure XFocusChangeEvent
  (int type)
  (ulong serial)
  (bool send_event)
  (Display* display)
  (Window window)
  (int mode)
  (int detail))


(c-structure XExposeEvent
  (int type)
  (ulong serial)
  (bool send_event)
  (Display* display)
  (Window window)
  (int x)
  (int y)
  (int width)
  (int height)
  (int count))


(c-structure XConfigureEvent
  (int type)
  (ulong serial)
  (bool send_event)
  (Display* display)
  (Window event)
  (Window window)
  (int x)
  (int y)
  (int width)
  (int height)
  (int border_width)
  (Window above)
  (bool override_redirect))


(c-structure XSelectionClearEvent
  (int type)
  (ulong serial)
  (bool send_event)
  (Display* display)
  (Window window)
  (Atom selection)
  (Time time))


(c-structure XSelectionRequestEvent
  (int type)
  (ulong serial)
  (bool send_event)
  (Display* display)
  (Window owner)
  (Window requestor)
  (Atom selection)
  (Atom target)
  (Atom property)
  (Time time))


(c-structure XSelectionEvent
  (int type)
  (ulong serial)
  (bool send_event)
  (Display* display)
  (Window requestor)
  (Atom selection)
  (Atom target)
  (Atom property)
  (Time time))


(c-structure XEvent
  (int type)
  (XAnyEvent xany)
  (XKeyEvent xkey)
  (XButtonEvent xbutton)
  (XMotionEvent xmotion)
  (XFocusChangeEvent xfocus)
  (XExposeEvent xexpose)
  (XConfigureEvent xconfigure)
  (XSelectionClearEvent xselectionclear)
  (XSelectionRequestEvent xselectionrequest)
  (XSelectionEvent xselection)
  (XClientMessageEvent xclient))


(c-structure XErrorEvent
  (int type)
  (Display* display)
  (ulong serial)
  (byte error_code)
  (byte request_code)
  (byte minor_code)
  (XID resourceid))


(c-type XERRORPROC (function (Display* XErrorEvent*) int))


;; Incomplete
(c-structure XGCValues
  (int function))


;;;
;;;; Functions
;;;


(c-external (XClearArea             Display* Window int int uint uint bool) void)
(c-external (XCopyArea              Display* Drawable Drawable GC int int uint uint int int) void)
(c-external (XOpenDisplay           char-string) Display*)
(c-external (XCloseDisplay          Display*) int)
(c-external (XDefaultScreen         Display*) int)
(c-external (XScreenOfDisplay       Display* int) Screen*)
(c-external (XRootWindow            Display* int) Window)
(c-external (XBlackPixel            Display* int) ulong)
(c-external (XWhitePixel            Display* int) ulong)
(c-external (XCreateSimpleWindow    Display* Window int int uint uint uint ulong ulong) Window)
(c-external (XMapWindow             Display* Window) int)
(c-external (XFlush                 Display*) int)
(c-external (XDefaultVisual         Display* int) Visual*)
(c-external (XNextEvent             Display* XEvent*) void)
(c-external (XSelectInput           Display* Window long) void)
(c-external (XDestroyWindow         Display* Window) void)
(c-external (XUnmapWindow           Display* Window) void)
(c-external (XCreateWindow          Display* Window int int uint uint uint int uint Visual* ulong XSetWindowAttributes*) Window)
(c-external (XGetWindowAttributes   Display* Window XWindowAttributes*) Status)
(c-external (XMoveWindow            Display* Window int int) void)
(c-external (XResizeWindow          Display* Window uint uint) void)
(c-external (XKeysymToKeycode       Display* KeySym) KeyCode)
(c-external (XKeycodeToKeysym       Display* KeyCode int) KeySym
  #/C/
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
    ___return(XKeycodeToKeysym(___arg1, ___arg2, ___arg3));
#pragma GCC diagnostic pop
//#)
(c-external (XReparentWindow        Display* Window Window int int) void)
(c-external (XSetInputFocus         Display* Window int Time) void)
(c-external (XPending               Display*) int)
(c-external (XRaiseWindow           Display* Window) void)
(c-external (XSync                  Display* bool) void)
(c-external (XSynchronize           Display* bool) void)
(c-external (XBell                  Display* int) void)
(c-external (XMoveResizeWindow      Display* Window int int uint uint) void)
(c-external (XLowerWindow           Display* Window) void)
(c-external (XSetErrorHandler       XERRORPROC) void)
(c-external (XInternAtom            Display* char-string bool) Atom)
(c-external (XGetAtomName           Display* int) char-string)
(c-external (getpid) int)
(c-external (ConnectionNumber       Display*) int)
(c-external (XCheckTypedEvent       Display* int XEvent*) bool)
(c-external (XCheckTypedWindowEvent Display* Window int XEvent*) bool)
(c-external (XCreateFontCursor      Display* uint) Cursor)
(c-external (XDefineCursor          Display* Window Cursor) void)
(c-external (XSetSelectionOwner     Display* Atom Window Time) void)
(c-external (XChangeProperty        Display* Window Atom Atom int int uint8* int) void)
(c-external (XGetSelectionOwner     Display* Atom) Window)
(c-external (XConvertSelection      Display* Atom Atom Atom Window Time) void)
(c-external (XSendEvent             Display* Window bool long XEvent*) Status)
(c-external (XCreateGC              Display* Drawable ulong XGCValues*) GC)
(c-external (XFreeGC                Display* GC) void)
(c-external (XSetClipRectangles     Display* GC int int XRectangle* int int) void)
(c-external (XFree                  void*) void)
(c-external (XOpenIM                Display* XrmDatabase char-string char-string) XIM)
(c-external (setlocale              int char-string) char*)
(c-external (XSetLocaleModifiers    char-string) char*)
(c-external (XSupportsLocale) bool)
(c-external (XFilterEvent           XEvent* Window) bool)
(c-external (XLookupKeysym          XKeyEvent* int) KeySym)
(c-external (XSetTransientForHint   Display* Window Window) void)


(definition package (x11-get-atom-name atom)
  (if (= atom None)
      "None"
    (XGetAtomName x11-default-display atom)))


;;;
;;;; Custom functions
;;;


(definition public (XQueryTree-root display window)
  ((c-function XQueryTree (Display* Window) Window
     #/C/
       Window root, parent, *children;
	  unsigned int n;
	  XQueryTree(___arg1, ___arg2, &root, &parent, &children, &n);
	  ___return(root);
     //#)
display window))


(definition public (XQueryTree-parent display window)
  ((c-function XQueryTree (Display* Window) Window
     #/C/
       Window root, parent, *children;
	  unsigned int n;
	  XQueryTree(___arg1, ___arg2, &root, &parent, &children, &n);
	  ___return(parent);
     //#)
display window))


(definition protected (bell-internal)
  (XBell x11-default-display 50))


(definition public (user-attention)
  )


(definition package (x11-change-property display window property type mode data)
  (let* ((format    (cond ((u8vector? data) 8)
                          ((u32vector? data) 32)
                          (else (error "Format not supported"))))
         (nelements (case format
                      ((8)  (u8vector-length data))
                      ((32) (u32vector-length data))))
         (data      (case format
                      ((8)  (u8vector->uint8* data))
                      ((32) (let ((pointer (u32vector->long* data)))
                              (long*->uint8* pointer))))))
    (XChangeProperty display window property type format mode data nelements)
    (uint8*-free data)))


(c-external (rgb-pixel Display* short short short) ulong
  #/C/
    XColor xcol;
    xcol.red = ___arg2 << 8;
    xcol.green = ___arg3 << 8;
    xcol.blue = ___arg4 << 8;
    XAllocColor(___arg1, DefaultColormap(___arg1, XDefaultScreen (___arg1)), &xcol);
    ___return(xcol.pixel);
//#)


(c-external (unix-select int fd_set* fd_set* fd_set* long long) int
  #/C/
    struct timeval time;
    time.tv_sec = ___arg5;
    time.tv_usec = ___arg6;
    ___return(select( ___arg1, ___arg2, ___arg3, ___arg4, &time ));
//#)


(definition package (setup-fdset . fds)
  (let ((alloc-fdset (c-function fd_set_malloc () fd_set*
                       #/C/
                         fd_set *set = malloc(sizeof(fd_set));
                          FD_ZERO(set);
                          ___return(set);
                       //#))
        (set-fdset (c-function fd_set (int fd_set*) void
                     #/C/
                       FD_SET(___arg1, ___arg2);
                     //#)))
     (let ((set (alloc-fdset)))
       (for-each (lambda (fd)
                   (set-fdset fd set))
                 fds)
       set)))


(c-external (free-fdset fd_set*) void
  #/C/
    free(___arg1);
//#)


(c-external (x11-process-client-message Display* XClientMessageEvent*) bool
  #/C/
    Atom wm_delete_window = XInternAtom(___arg1, "WM_DELETE_WINDOW", False);
    if( ___arg2->data.l[0] == wm_delete_window )
        ___return(True);
    else
        ___return(False);
//#)


(definition package (XWindowEvent display window mask event)
  (let ((func (c-function XWindowEvent (Display* Window int XEvent*) void
                #/C/
                  XWindowEvent(___arg1, ___arg2, ___arg3, ___arg4);
                //#)))
    (func display window mask event)))


(definition package (XTranslateCoordinates disp src_win dst_win x y)
  (let* ((pt ((c-function XTranslateCoordinates (Display* Window Window int int) int*
                #/C/
                  int *point = malloc(2*sizeof(int));
                  Window tmp;
                  XTranslateCoordinates( ___arg1, ___arg2, ___arg3, ___arg4, ___arg5, point, point+1, &tmp);
                  ___return(point);
                //#)
              disp src_win dst_win x y))
         (x (int*-ref pt 0))
         (y (int*-ref pt 1)))
    (int*-free pt)
    (values x y)))


(c-external (XNumberOfChildren Display* Window) uint
  #/C/
    Window root;
    Window parent;
    Window *children;
    unsigned int num;
    Window ret;
    XQueryTree( ___arg1, ___arg2, &root, &parent, &children, &num);
    if( num != 0) { XFree(children); }
    ___return(num);
//#)


(c-external (XGetChildHandle Display* Window int) Window
  #/C/
    Window root;
    Window parent;
    Window *children;
    unsigned int num;
    Window ret;
    XQueryTree( ___arg1, ___arg2, &root, &parent, &children, &num);
    ret = *(children+num-___arg3-1);
    if( num != 0) { XFree(children); }
    ___return(ret);
//#)


(c-external (XButtonDown? Display*) bool
  #/C/
    Window root_return;
    Window child_return;
    int root_x_return, root_y_return, win_x_return, win_y_return;
    unsigned int mods;
    XQueryPointer( ___arg1, DefaultRootWindow(___arg1), &root_return, &child_return, &win_x_return, &win_y_return,
                   &win_x_return, &win_y_return, &mods );
    ___return(mods & Button1Mask);
//#)


(c-external (XKeyDown? Display* int) bool
  #/C/
    char keys[32];
    XQueryKeymap(___arg1, keys);
    ___return(keys[___arg2/8] & (1 << (___arg2%8)));
//#)


(definition package (XMousePosition disp win)
  (let ((coords ((c-function XQueryPointer (Display* Window) int*
                   #/C/
                     int *coords = calloc(2, sizeof(int));
                     Window x,y;
                     int a,b;
                     unsigned int c;
                     XQueryPointer( ___arg1, ___arg2, &x, &y, coords, coords+1, &a, &b, &c);
                     ___return(coords);
                   //#)
                 disp win)))
    (let ((x (int*-ref coords 0))
	  (y (int*-ref coords 1)))
      (int*-free coords)
      (values x y))))


(c-external (XMouseWindow Display* Window) Window
  #/C/
    Window root_return, child_return;
    int root_x_return, root_y_return, win_x_return, win_y_return;
    unsigned int mask_return;
    XQueryPointer( ___arg1, ___arg2, &root_return, &child_return, &root_x_return, &root_y_return, &win_x_return, &win_y_return, &mask_return );
    ___return(child_return);
//#)


(c-external (XInvalidateRect Display* Window int int int int) void
  #/C/
    XEvent exp;
    exp.xexpose.type = Expose;
    exp.xexpose.window = ___arg2;
    exp.xexpose.x = ___arg3;
    exp.xexpose.y = ___arg4;
    exp.xexpose.width = ___arg5;
    exp.xexpose.height = ___arg6;
    exp.xexpose.count = 0;
    XSendEvent( ___arg1, ___arg2, True, ExposureMask, &exp );
//#)

;;; Warp Pointer to position
(c-external (XWarpPointer Display* Window int int) void
  #/C/
    XWarpPointer(___arg1, None, ___arg2, 0, 0, 0, 0, ___arg3, ___arg4);
//#)


(definition package (XGetInputFocus display)
  (let ((ret ((c-function XGetInputFocus (Display*) int*
                #/C/
                  Window win;
                  int *ret = calloc(2, sizeof(int));
                  XGetInputFocus(___arg1, &win, ret+1);
                  *ret = (int)win;
                  ___return(ret);
                 //#)
              display)))
    (let ((x (int*-ref ret 0))
          (y (int*-ref ret 1)))
      (int*-free ret)
      (values x y))))


(definition package (XGetWindowProperty display window property long_offset long_length delete req_type)
  (let ((actual_type_return-pt   (ulong*-alloc 1))
        (actual_format_return-pt (int*-alloc 1))
        (nitems_return-pt        (ulong*-alloc 1))
        (bytes_after_return-pt   (ulong*-alloc 1))
        (prop_return-pt          (uint8**-alloc 1))
        (func                    (c-function XGetWindowProperty (Display* Window Atom long long bool Atom Atom* int* ulong* ulong* uint8**) int "XGetWindowProperty")))
  (func display window property long_offset long_length delete req_type actual_type_return-pt actual_format_return-pt nitems_return-pt bytes_after_return-pt prop_return-pt)
  (let ((nitems_return        (ulong*-ref nitems_return-pt 0))
        (prop_return          (uint8**-ref prop_return-pt 0))
        (actual_format_return (int*-ref actual_format_return-pt 0))
        (actual_type_return   (ulong*-ref actual_type_return-pt 0))
        (bytes_after_return   (ulong*-ref bytes_after_return-pt 0)))
    (ulong*-free actual_type_return-pt)
    (ulong*-free nitems_return-pt)
    (ulong*-free bytes_after_return-pt)
    (int*-free actual_format_return-pt)
    (uint8**-free prop_return-pt)
    (values actual_type_return actual_format_return nitems_return bytes_after_return prop_return))))


(definition package (x11-retrieve-selection display window selection target timestamp)
  (XConvertSelection display selection target selection window timestamp)
  (let ((ev (XEvent-make)))
    (let (iterate (i 0) (event? #f))
      (cond (event?
             (let ((property (XSelectionEvent-property-ref (XEvent-xselection-ref ev))))
               (XEvent-free ev)
               (if (= property selection)
                   (receive (type format nitems bytes_after data) (XGetWindowProperty display window property 0 100000 #f target)
                     data)
                 #f)))
            ((> i 1000000)
             (XEvent-free ev)
             #f)
            (else
             (iterate (+ i 1) (XCheckTypedEvent display SelectionNotify ev)))))))


(definition package (x11-get-clipboard-string display window selection)
  (let ((owner (XGetSelectionOwner display selection)))
    (if (= owner window)
        clipboard-string
      (let ((data (x11-retrieve-selection display window selection XA_STRING (x11-get-latest-timestamp))))
        (when data
          (prog1 (uint8*->char-string data)
            (XFree data)))))))


(definition package (x11-set-clipboard-string display window string selection)
  (set! clipboard-string string)
  (set! clipboard-stamp (x11-get-latest-timestamp))
  (XSetSelectionOwner display selection window clipboard-stamp))


(c-external (XSetWMName Display* Window char-string) void
  #/C/
    XTextProperty textProp;
    XStringListToTextProperty(&___arg3, 1, &textProp);
    XSetWMName(___arg1, ___arg2, &textProp);
//#)


(c-external (XGetErrorText Display* int) char-string
  #/C/
    char buffer[255];
    XGetErrorText(___arg1, ___arg2, buffer, 255);
    ___return(buffer);
//#)


(c-external (XSetWMProtocols Display* Window Atom) void
  #/C/
    XSetWMProtocols( ___arg1, ___arg2, &___arg3, 1 );
//#)


(definition package (x11-utf8-lookup-string xic event)
  (let ((func (c-function Xutf8LookupString (XIC XKeyEvent* char* int ulong* int*) int "Xutf8LookupString"))
        (str-buffer (char*-alloc 20))
        (sym-buffer (ulong*-alloc 1))
        (status-buffer (int*-alloc 1)))
    (let* ((return (func xic event str-buffer 20 sym-buffer status-buffer))
           (status (int*-ref status-buffer 0))
           (sym (if (or (= status XLookupKeySym)
                        (= status XLookupBoth))
                    (ulong*-ref sym-buffer 0)
                  #f))
           (str (if (or (= status XLookupChars)
                        (= status XLookupBoth))
                    (begin
                      (char*-set! str-buffer return #\nul)
                      (char*->UTF-8-string str-buffer))
                  #f)))
      (char*-free str-buffer)
      (ulong*-free sym-buffer)
      (int*-free status-buffer)
      (values sym str))))
      
      
(c-external (set-modal Display* Window) void
  #/C/
    XClientMessageEvent xclient;
    Atom _NET_WM_STATE = XInternAtom( ___arg1, "_NET_WM_STATE", False );
    Atom _NET_WM_STATE_MODAL = XInternAtom( ___arg1, "_NET_WM_STATE_MODAL", False );
    xclient.type = ClientMessage;
    xclient.window = ___arg2;
    xclient.message_type = _NET_WM_STATE;
    xclient.format = 32;
    xclient.data.l[0] = 1;
    xclient.data.l[1] = _NET_WM_STATE_MODAL;
    xclient.data.l[2] = 0;
    xclient.data.l[3] = 0;
    xclient.data.l[4] = 0;
    XSendEvent (___arg1, XRootWindow(___arg1, XDefaultScreen(___arg1)), False,
	    SubstructureRedirectMask | SubstructureNotifyMask,
	    (XEvent *)&xclient);
//#)


;;;
;;;; Error functions
;;;


(definition x11-error-handler
  #f)

(definition public (x11-set-error-handler proc)
  (set! x11-error-handler proc)
  (XSetErrorHandler x11-call-error-handler))

(c-definition (x11-call-error-handler display error) (Display* XErrorEvent*) int "x11_call_error_handler" ""
  (x11-error-handler display error))


(definition public (x11-synchronize flag)
  (XSynchronize x11-default-display flag))


;;;
;;;; Prime
;;;


(definition public (prime-platform)
  )


;;;
;;;; Initialize
;;;


(definition public (initialize-platform)
  (initialize-locale)
  (x11-set-default-display (x11-require-display))
  (x11-generate-atoms)
  (when (find-setting 'synchronize-x11? #f)
    (x11-synchronize #t))
  (initialize-xim)
  (x11-set-error-handler x11-debug-error-handler)
  (x11-create-cursors)
  (set-platform-log system-log))


(definition (x11-require-display)
  (or (XOpenDisplay #f)
      (error "Can't open X11 display")))


(definition (x11-debug-error-handler displ err)
  (let ((code (XErrorEvent-error_code-ref err)))
    (let ((text (XGetErrorText displ code)))
      (error "X11 Error: {a}" text))))


;;;
;;;; Display
;;;


(definition package x11-default-display
  #f)

(definition public (x11-get-default-display)
  x11-default-display)

(definition public (x11-set-default-display display)
  (set! x11-default-display display))


;;;
;;;; Process
;;;


(definition public (relinquish-process)
  )


(definition public (current-process-id)
  (getpid))


(definition public (collect-processes-info)
  (make-table))


;;;
;;;; Thread
;;;


(definition public (collect-threads-info (process-id #f))
  '())


;;;
;;;; Input
;;;


(definition public (milliseconds-since-startup)
  0)


(definition public (milliseconds-at-last-input)
  0)


;;;
;;;; Log
;;;


(definition public (system-log msg)
  (terminal-line (->string msg)))


;;;
;;;; Event
;;;


(definition package (poll-events)
  )


;;;
;;;; Message
;;;


(definition public (system-message text . rest)
  (let ((port (console-port)))
    (display text port)
    (newline port)))


;;;
;;;; Keyboard
;;;


(definition public (key-down? key)
  ;; quick hack for windowless
  (and x11-default-display
       (let ((key (if (integer? key)
                      key
                    (char->integer key))))
         (XKeyDown? x11-default-display (char->integer (XKeysymToKeycode x11-default-display key))))))


(definition public (shift-down?)
  ;; quick hack for windowless
  (and x11-default-display
       (or (XKeyDown? x11-default-display (char->integer (XKeysymToKeycode x11-default-display XK_Shift_L)))
           (XKeyDown? x11-default-display (char->integer (XKeysymToKeycode x11-default-display XK_Shift_R))))))


(definition public (control-down?)
  ;; quick hack for windowless
  (and x11-default-display
       (or (XKeyDown? x11-default-display (char->integer (XKeysymToKeycode x11-default-display XK_Control_L)))
           (XKeyDown? x11-default-display (char->integer (XKeysymToKeycode x11-default-display XK_Control_R))))))


(definition public (alt-down?)
  ;; quick hack for windowless
  (and x11-default-display
       (or (XKeyDown? x11-default-display (char->integer (XKeysymToKeycode x11-default-display XK_Meta_L)))
           (XKeyDown? x11-default-display (char->integer (XKeysymToKeycode x11-default-display XK_Meta_R)))
           (XKeyDown? x11-default-display (char->integer (XKeysymToKeycode x11-default-display XK_Alt_L)))
           (XKeyDown? x11-default-display (char->integer (XKeysymToKeycode x11-default-display XK_Alt_R))))))


(definition public (meta-down?)
  #f)


(definition public (modifiers-down)
  (values (shift-down?)
          (control-down?)
          (alt-down?)
          (meta-down?)))


;;;
;;;; Cursors
;;;


(definition public Cursors
  #f)


(definition package (x11-create-cursors)
  (set! Cursors (list
                  (list :arrow               (XCreateFontCursor x11-default-display XC_left_ptr))
                  (list :wait                (XCreateFontCursor x11-default-display XC_watch))
                  (list :west-east           (XCreateFontCursor x11-default-display XC_sb_h_double_arrow))
                  (list :vertical-splitter   (XCreateFontCursor x11-default-display XC_sb_h_double_arrow))
                  (list :horizontal-splitter (XCreateFontCursor x11-default-display XC_sb_v_double_arrow))
                  (list :ibeam               (XCreateFontCursor x11-default-display XC_xterm))
                  (list :finger              (XCreateFontCursor x11-default-display XC_hand2))
                  (list :cross               (XCreateFontCursor x11-default-display XC_crosshair))
                  (list :left-arrow          (XCreateFontCursor x11-default-display XC_arrow))
                  @wait((list :all                 IDC_SIZEALL)
                     (list :no                  IDC_NO)
                     (list :move                (new Cursor-Resource "Move"))
                     (list :opened-hand         (new Cursor-Resource "OpenedHand"))
                     (list :closed-hand         (new Cursor-Resource "ClosedHand"))
                     (list :zoom                (new Cursor-Resource "Zoom"))
                     (list :zoom-in             (new Cursor-Resource "ZoomIn"))
                     (list :zoom-out            (new Cursor-Resource "ZoomOut"))
                     (list :spy                 (new Cursor-Resource "Spy"))))))


;;;
;;;; Directory
;;;


(definition public (directory-writable? dirname)
  ;; super quicky
  #t)


;;;
;;;; Temporary
;;;


(definition public (get-temporary-directory)
  (unimplemented 'get-temporary-directory))


(definition public (get-temporary-file . rest)
  (unimplemented 'get-temporary-file))


;;;
;;;; Document
;;;


(definition public (open-document file)
  (unimplemented 'open-document))


;;;
;;;; User
;;;


(definition public (get-computer-name)
  (unimplemented 'get-computer-name))


(definition public (get-system-user-name)
  (unimplemented 'get-system-user-name))


;;;
;;;; Version
;;;


(definition public (version-info)
  (unimplemented 'version-info))


(definition public (get-platform-version)
  (unimplemented 'get-platform-version)))
