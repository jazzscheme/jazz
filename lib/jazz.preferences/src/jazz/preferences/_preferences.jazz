;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Preferences
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module jazz.preferences jazz


(import (jazz.component)
        (jazz.process))


(definition public (get-preferences name (error?: error? #t))
  (let ((root (get-preferences-root)))
    (cond ((not root)
           (and error? (error "Could not find preferences")))
          ((not name)
           root)
          (else
           (or (find-component~ root name)
               (and error? (error "Could not find preferences: {t}" name)))))))


(definition public (get-preferences-root)
  (let ((designer (get-preferences-designer~ (get-process))))
    (when designer
      (get-reference~ designer))))


(definition public (set-preference preferences property value)
  (let ((designer (get-preferences-designer~ (get-process))))
    (set-property~ designer preferences property value)))


(definition public (sort-case-sensitive?)
  (let ((pref (get-preferences '(interface tree) error?: #f)))
    (and pref (get-sort-case-sensitive?~ pref))))


(definition public (sort-predicates)
  (if (sort-case-sensitive?)
      (values nu=? nu<? nu>?)
    (values di=? di<? di>?)))


(definition public (sort-predicate name)
  (let ((case-sensitive? (sort-case-sensitive?)))
    (case name
      ((equal)         (if case-sensitive? nu=?  ci=?))
      ((smaller)       (if case-sensitive? nu<?  ci<?))
      ((smaller/equal) (if case-sensitive? nu<=? ci<=?))
      ((greater)       (if case-sensitive? nu>?  ci>?))
      ((greater/equal) (if case-sensitive? nu>=? ci>=?))
      ((compare)       (if case-sensitive? compare ci-compare))
      (else (error "Unknown sort predicate: {t}" name)))))


;;;
;;;; Preferences
;;;


(class Preferences extends Component
  
  
  (property title initialize #f accessors generate)
  (property icon  initialize #f accessors generate)
  
  
  ;;;
  ;;;; Applying
  ;;;
  
  
  (method public virtual (apply-preferences (client #f))
    (for-each (lambda (child)
                (apply-preferences~ child client))
              children))
  
  
  ;;;
  ;;;; Saving
  ;;;
  
  
  (method public virtual (save-preferences designer (client #f))
    (for-each (lambda (child)
                (save-preferences~ child client))
              children))
  
  
  (method public (set-property designer property value)
    (set-property~ designer self property value))
  
  
  ;;;
  ;;;; Descriptor
  ;;;
  
  
  (method meta override (get-class-descriptor (context: context #f))
    (new jazz.preferences.descriptors:Preferences-Descriptor))))
