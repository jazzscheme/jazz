;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Jazz Presence
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


;; OVERVIEW
;;   Socket is persistent between two connected processes
;;   and messages and responses travel through the bidirectional
;;   socket pipe. Initial connection is done with connect-uuid
;;
;; LEXICON
;;   uuid
;;     used to uniquely identify processes
;;   ior
;;     marshalled object sent remotely
;;   listener
;;     tcp server receiving a connection request
;;     and that starts the pump called remote-connection
;;   connection
;;     waits on socket for messages client and server side
;;   stub
;;     interface common to local and remote objects
;;   proxy local / remote
;;     objects implementing transparent communication
;;   register
;;     used to register remotely accessible objects
;;
;; CALL
;;   local <-> remote call
;;     local code calls invoke from some thread
;;       message is written to the connection port
;;         thread then blocks on mutex
;;           remote reads message and executes it
;;           result is written back to connection port
;;       connection reads result and unlocks mutex
;;     thread continues execution


(module jazz.presence jazz


(hub accept-remote)
(hub close-connection)
(hub connect-remote)
(hub debug-remote)
(hub debug-simplify)
(hub disconnect)
(hub disconnect-connection)
(hub find-connection)
(hub find-object)
(hub get-address)
(hub get-exception)
(hub get-ior)
(hub get-listener)
(hub get-manifest)
(hub get-object)
(hub get-port)
(hub get-presence)
(hub get-reason)
(hub get-reference)
(hub get-remote-title)
(hub get-service)
(hub get-stub-interface)
(hub get-uuid)
(hub get-values)
(hub get-write-mutex)
(hub invoke)
(hub invoke-live?)
(hub live?)
(hub load-object)
(hub load-reference)
(hub local-class)
(hub new-register-proxy)
(hub process)
(hub proxy-values)
(hub read-message)
(hub register-object)
(hub remote-class)
(hub require-connection)
(hub require-object)
(hub set-values)
(hub startup-process)
(hub start-listener)
(hub stop-listener)
(hub stub-reference)
(hub unregister-object)
(hub write-message)


(export (jazz.presence.autoload))
(import (jazz.presence.autoload)
        (jazz.presence.transmission)
        (jazz.network)
        (jazz.settings)
        (jazz.version))


(definition supports-binary?
  #t)


;;;
;;;; Presences
;;;


(definition default-presence-priority
  0.)


(definition protected presence-priorities
  (make-table test: eq?))

(definition protected (set-presence-priority purpose priority)
  (table-set! presence-priorities purpose priority))

(definition protected (get-presence-priority purpose)
  (table-ref presence-priorities purpose default-presence-priority))


;; quick hack until priorities in package metadata
(definition public debugging-priority 500.)
(definition public working-priority   400.)
(definition public presence-priority  100.)

(set-presence-priority 'debugging debugging-priority)
(set-presence-priority 'working working-priority)
(set-presence-priority #f presence-priority)


(definition protected presences
  (make-table test: eq?))

(definition protected uuid-presences
  (make-table test: equal?))


(definition presences-mutex
  (make-mutex 'presences))

(definition (with-presences-mutex thunk)
  (dynamic-wind
    (lambda ()
      (mutex-lock! presences-mutex))
    thunk
    (lambda ()
      (mutex-unlock! presences-mutex))))


(definition protected (find-presence purpose)
  (with-presences-mutex
    (lambda ()
      (table-ref presences purpose #f))))


(definition protected (require-presence purpose)
  (with-presences-mutex
    (lambda ()
      (or (table-ref presences purpose #f)
          (let ((presence (new Remote-Presence purpose)))
            (table-set! presences purpose presence)
            (table-set! uuid-presences (get-uuid presence) presence)
            presence)))))


(definition protected (iterate-presences proc)
  (with-presences-mutex
    (lambda ()
      (iterate-table presences
        (lambda (purpose presence)
          (proc presence))))))


(definition protected (collect-presences)
  (let ((presences '()))
    (iterate-presences
      (lambda (presence)
        (set! presences (cons presence presences))))
    presences))


;;;
;;;; Presence
;;;


(definition invoke-timeout
  45)

(definition protected (set-invoke-timeout timeout)
  (set! invoke-timeout timeout))

(definition protected (reset-invoke-timeout)
  (set! invoke-timeout 45))


(definition (default-accept-handler proc presence)
  (proc presence))

(definition (default-connect-handler proc presence)
  (proc presence))

(definition (default-invoke-handler proc connection)
  (proc connection))

(definition (default-process-handler proc connection)
  (proc connection))

(definition (default-execute-handler proc connection)
  (proc connection))


(class Remote-Presence extends Object
  
  
  (slot purpose            getter generate)
  (slot uuid               getter generate)
  (slot priority           getter generate)
  (slot register           getter generate)
  (slot listener           getter generate)
  (slot connections        getter generate)
  (slot connections-mutex  getter generate)
  (slot code               accessors generate)
  (slot version            accessors generate)
  (slot already-connected  accessors generate)
  (slot accept-handler     accessors generate)
  (slot connect-handler    accessors generate)
  (slot invoke-handler     accessors generate)
  (slot process-handler    accessors generate)
  (slot processing-handler accessors generate)
  (slot execute-handler    accessors generate)
  
  
  (method override (initialize self purpose)
    (nextmethod self)
    (set! self.purpose purpose)
    (set! self.uuid (make-uuid))
    (set! self.priority (get-presence-priority purpose))
    (set! self.register (new-register-proxy Register self))
    (set! self.listener #f)
    (set! self.connections (make-table))
    (set! self.connections-mutex (make-mutex 'connections))
    (set! self.code *presence-code*)
    (set! self.version *presence-version*)
    (set! self.already-connected #f)
    (set! self.accept-handler default-accept-handler)
    (set! self.connect-handler default-connect-handler)
    (set! self.invoke-handler default-invoke-handler)
    (set! self.process-handler default-process-handler)
    (set! self.processing-handler #f)
    (set! self.execute-handler default-execute-handler))
  
  
  (method override (print self output readably)
    (print-unreadable self output
      (lambda (output)
        (format output "{a} {a}" purpose uuid))))
  
  
  ;;;
  ;;;; Listener
  ;;;
  
  
  (method (start-listener self host service alternate-service)
    (unless listener
      (receive (listen-host listen-service listen-alternate-service) (listen-parameter)
        (let ((host (or host listen-host default-listener-host))
              (service (or service listen-service default-listener-service))
              (alternate-service (or alternate-service listen-alternate-service)))
          (let ((server (new Remote-Listener self host: host service: service alternate-service: alternate-service)))
            (set! listener server)
            (start server))))))
  
  
  (method (stop-listener self)
    (when listener
      (stop listener)
      (set! listener #f)))
  
  
  ;;;
  ;;;; Accept
  ;;;
  
  
  (method (accept-remote self port)
    (accept-handler
      (lambda (presence)
        (let ((message
                ;; only reply to an invalid code/version here in accept
                ;; as always replying could be used maliciously to try
                ;; and figure out the communication protocol. also note
                ;; that by simply replying, the client will report the
                ;; right invalid code/version error
                (catch (Invalid-Code exc
                         (write-port port #f code version #f)
                         (signal exc))
                  (catch (Invalid-Version exc
                           (write-port port #f code version #f)
                           (signal exc))
                    (read-port port #f code version)))))
          (bind (remote-kind remote-binary? remote-uuid remote-title remote-service remote-address reference) message
            (define (accept)
              (let ((local-binary? supports-binary?)
                    (local-uuid uuid)
                    (local-title presence-title)
                    (local-service (listening-port listener))
                    (peer-address (socket-info-address (tcp-client-peer-socket-info port)))
                    (reference-proxy (and reference (load-reference register reference))))
                (write-port port #f code version (list local-binary? local-uuid local-title local-service peer-address reference-proxy))
                (let ((binary? (and local-binary? remote-binary?)))
                  (let ((connection (new Remote-Connection self port binary? remote-uuid remote-title remote-service remote-address invoke-handler process-handler processing-handler execute-handler)))
                    (when (and debug-remote? (debug-remote-presence? self))
                      (callee-garble-hack)
                      (debug-remote self '<<< remote-title remote-uuid 'accept connection))
                    (register-connection self remote-uuid connection)
                    (set-thread connection (current-thread))
                    (process connection)))))
            
            (let ((existing-connection (find-connection self remote-uuid)))
              (if existing-connection
                  (if already-connected
                      (already-connected self remote-uuid existing-connection accept)
                    (write-port port #f code version 'already-connected))
                (accept))))))
      self))
  
  
  ;;;
  ;;;; Connect
  ;;;
  
  
  (method (connect-remote self host service reference)
    (when (and (or debug-remote? debug-remote-blocking?) (debug-remote-presence? self))
      (debug-remote self '>>> #f #f 'open host service)
      (caller-garble-hack))
    (when (not listener)
      (start-listener self #f #f #f))
    (connect-handler
      (lambda (presence)
        (let ((port (open-tcp-client (list server-address: host port-number: service readtable: jazz-readtable))))
          (let ((local-binary? supports-binary?)
                (local-uuid uuid)
                (local-title presence-title)
                (local-service (listening-port listener))
                (peer-address (socket-info-address (tcp-client-peer-socket-info port))))
            (write-connect port #f code version (list 'connect local-binary? local-uuid local-title local-service peer-address reference))
            (let ((reply (read-port port #f code version)))
              (cond ((eof-object? reply)
                     (throw-connection-broke (format "Connecting to {a} {a} received eof" host service)))
                    ((eq? reply 'already-connected)
                     (error "Already connected to {a} {a}" host service))
                    (else
                     (bind (remote-binary? remote-uuid remote-title remote-service remote-address reference-proxy) reply
                       (let ((binary? (and local-binary? remote-binary?)))
                         (let ((connection (new Remote-Connection self port binary? remote-uuid remote-title remote-service remote-address invoke-handler process-handler processing-handler execute-handler)))
                           (when (and debug-remote? (debug-remote-presence? self))
                             (callee-garble-hack)
                             (callee-garble-hack)
                             (debug-remote self '<<< remote-title remote-uuid 'connect connection))
                           (register-connection self remote-uuid connection)
                           (let ((thread (new-thread
                                           (lambda ()
                                             (process connection))
                                           'presence-connected)))
                             (set-thread connection thread)
                             (thread-base-priority-set! thread priority)
                             (thread-start! thread)
                             (or reference-proxy remote-uuid)))))))))))
      self))
  
  
  ;;;
  ;;;; Connections
  ;;;
  
  
  (method (with-connections-mutex self thunk)
    (dynamic-wind
      (lambda ()
        (mutex-lock! connections-mutex))
      thunk
      (lambda ()
        (mutex-unlock! connections-mutex))))
  
  
  (method (register-connection self remote-uuid connection)
    (with-connections-mutex self
      (lambda ()
        (table-set! connections remote-uuid connection))))
  
  
  (method (find-connection self remote-uuid)
    (with-connections-mutex self
      (lambda ()
        (table-ref connections remote-uuid #f))))
  
  
  (method (require-connection self remote-uuid)
    (or (find-connection self remote-uuid)
        (throw-connection-broke (format "Unable to find connection: {a}" remote-uuid))))
  
  
  (method (close-connection self remote-uuid connection)
    (with-connections-mutex self
      (lambda ()
        (table-clear connections remote-uuid)
        (close connection))))
  
  
  (method (disconnect-connection self remote-uuid connection)
    (with-connections-mutex self
      (lambda ()
        (table-clear connections remote-uuid)
        (disconnect connection))))

  
  ;;;
  ;;;; Debug
  ;;;
  
  
  (method (debug-remote self arrow remote-title remote-uuid action . rest)
    (when debug-remote-seconds?
      (format :terminal "{r precision: 6} " (current-seconds)))
    (format :terminal "{?{a} ~}{a width: 9} {a}   {a}   {a width: 9} {a width: 8}   {a width: 7}   {l}{%}" purpose presence-title (uuid-prefix uuid) arrow (or remote-title "") (if remote-uuid (uuid-prefix remote-uuid) "") action rest))
  
  
  (method (debug-simplify self obj)
    (cond ((not debug-remote-simplify?)
           obj)
          ((atom? obj)
           obj)
          ((object? obj)
           (category-name (class-of obj)))
          (else
           (type->specifier (class-of obj))))))


;;;
;;;; Forwarding
;;;


(definition protected forwarding
  (make-table))

(definition protected (register-forwarding proxy origin-proxy)
  (let ((uuid (get-uuid (get-ior proxy)))
        (origin-presence (get-presence origin-proxy))
        (origin-uuid (get-uuid (get-ior origin-proxy))))
    (table-set! forwarding uuid (cons origin-presence origin-uuid))))

(definition protected (registered-forwarding uuid)
  (table-ref forwarding uuid #f))


;;;
;;;; Connection
;;;


(class Remote-Connection extends Object
  
  
  (slot presence           getter generate)
  (slot port               getter generate)
  (slot binary?            getter generate)
  (slot thread             accessors generate)
  (slot write-mutex        getter generate)
  (slot remote-uuid        getter generate)
  (slot remote-title       getter generate)
  (slot service            getter generate)   ; the peer's listener port
  (slot address            getter generate)   ; the peer's address of us
  (slot invocations        getter generate)
  (slot invocations-mutex  getter generate)
  (slot closing?           accessors generate)
  (slot invoke-handler     getter generate)
  (slot process-handler    getter generate)
  (slot processing-handler getter generate)
  (slot execute-handler    getter generate)
  
  
  (method override (initialize self presence port binary? remote-uuid remote-title service address invoke-handler process-handler processing-handler execute-handler)
    (set! self.presence presence)
    (set! self.port port)
    (set! self.binary? binary?)
    (set! self.write-mutex (make-mutex 'write))
    (set! self.remote-uuid remote-uuid)
    (set! self.remote-title remote-title)
    (set! self.service service)
    (set! self.address address)
    (set! self.invocations '())
    (set! self.invocations-mutex (make-mutex 'invocations))
    (set! self.closing? #f)
    (set! self.invoke-handler invoke-handler)
    (set! self.process-handler process-handler)
    (set! self.processing-handler processing-handler)
    (set! self.execute-handler execute-handler))
  
  
  (method override (destroy self)
    (disconnect self)
    (nextmethod self))
  
  
  (method (disconnect self)
    ;; robust
    (with-exception-catcher
      (lambda (exc)
        #f)
      (lambda ()
        (close-port port)))
    (sever-invocations self))
  
  
  (method override (print self output readably)
    (print-unreadable self output
      (lambda (output)
        (format output "{a}" remote-title))))
  
  
  (method (register-invocation self mutex)
    (mutex-lock! invocations-mutex)
    (set! invocations (cons mutex invocations))
    (mutex-unlock! invocations-mutex))
  
  
  (method (unregister-invocation self mutex)
    (mutex-lock! invocations-mutex)
    (set! invocations (remove! mutex invocations))
    (mutex-unlock! invocations-mutex))
  
  
  (method (sever-invocations self)
    (mutex-lock! invocations-mutex)
    (for-each (lambda (mutex)
                (mutex-specific-set! mutex (new Connection-Broke "Invocation severed"))
                (mutex-unlock! mutex))
              invocations)
    (mutex-unlock! invocations-mutex))
  
  
  ;;;
  ;;;; Process
  ;;;
  
  
  (method (process self)
    (declare (proper-tail-calls))
    (process-handler
      (lambda (connection)
        (continuation-capture
          (lambda (exit)
            (let (loop)
              (let ((message (catch-exception-filter
                               (lambda (exc)
                                 closing?)
                               (lambda (exc)
                                 (when (find-connection presence remote-uuid)
                                   (close-connection presence remote-uuid self))
                                 (continuation-return exit #f))
                               (lambda ()
                                 (when processing-handler
                                   (processing-handler))
                                 (read-message self)))))
                (bind (kind . rest) message
                  (case kind
                    ((post send call)
                     (execute self kind rest))
                    ((result)
                     (result self rest)))))
              (loop)))))
      self))
  
  
  ;;;
  ;;;; Invoke
  ;;;
  
  
  (method (invoke self kind method-name remote-proxy arguments)
    (when (and (or debug-remote? (and debug-remote-blocking? (neq? kind 'post))) (debug-remote-presence? presence) (debug-remote-method? method-name))
      (debug-remote presence '>>> remote-title remote-uuid kind method-name)
      (caller-garble-hack))
    (let ((ior (get-ior remote-proxy)))
      (invoke-handler
        (lambda (connection)
          (if (eq? kind 'post)
              (write-message self `(,kind ,method-name #f ,ior ,arguments))
            (let ((mutex (make-mutex 'invoke)))
              (let ((cookie (object->serial mutex)))
                (mutex-lock! mutex)
                (write-message self `(,kind ,method-name ,cookie ,ior ,arguments))
                (register-invocation self mutex)
                (let ((timed-out (not (mutex-lock! mutex invoke-timeout))))
                  (mutex-unlock! mutex)
                  (unregister-invocation self mutex)
                  (if timed-out
                      (throw-connection-broke "Invoke timed out")
                    (let ((result (mutex-specific mutex)))
                      (if (is? result Connection-Broke)
                          (signal result)
                        result))))))))
        self)))
  
  
  (method (invoke-live? self remote-proxy timeout)
    (let ((ior (get-ior remote-proxy)))
      (let ((mutex (make-mutex 'invoke)))
        (let ((cookie (object->serial mutex)))
          (mutex-lock! mutex)
          (write-message self `(call live? ,cookie ,ior ()))
          (let ((timed-out (not (mutex-lock! mutex timeout))))
            (mutex-unlock! mutex)
            (if timed-out
                #f
              (mutex-specific mutex)))))))
  
  
  (method (result self rest)
    (bind (kind method-name cookie result) rest
      (when (and debug-remote? (debug-remote-presence? presence) (debug-remote-method? method-name))
        (if (eq? kind 'call)
            (debug-remote presence '<<< remote-title remote-uuid 'result method-name (debug-simplify presence result))
          (debug-remote presence '<<< remote-title remote-uuid 'return method-name))
        (caller-garble-hack))
      (let ((mutex (serial->object cookie)))
        (mutex-specific-set! mutex result)
        (mutex-unlock! mutex))))
  
  
  ;;;
  ;;;; Execute
  ;;;
  
  
  (method (execute self kind rest)
    (bind (method-name cookie proxy arguments) rest
      (when (and debug-remote? (debug-remote-presence? presence) (debug-remote-method? method-name))
        (callee-garble-hack)
        (debug-remote presence '<<< remote-title remote-uuid 'execute method-name))
      (let ((thread
              (new-thread
                (lambda ()
                  (let ((result (apply (dispatch (class-of proxy) method-name) proxy arguments)))
                    (execute-handler
                      (lambda (connection)
                        (case kind
                          ((send)
                           (write-message self `(result ,kind ,method-name ,cookie ,(unspecified))))
                          ((call)
                           (write-message self `(result ,kind ,method-name ,cookie ,result)))))
                      self)))
                (list 'execute method-name))))
        (thread-base-priority-set! thread (get-priority presence))
        (thread-start! thread))))
  
  
  ;;;
  ;;;; IO
  ;;;
  
  
  (method (write-message self message)
    (unwind-protect
        (begin
          (mutex-lock! write-mutex)
          (when (and debug-remote-io? (debug-remote-presence? presence))
            (debug-remote presence '>>> remote-title remote-uuid 'write (car message) (cadr message) (caddr message))
            (caller-garble-hack))
          (write-port port binary? (get-code presence) (get-version presence) message))
      (mutex-unlock! write-mutex)))
  
  
  (method (read-message self)
    (let ((message (read-port port binary? (get-code presence) (get-version presence))))
      (when (and debug-remote-io? (debug-remote-presence? presence))
        (callee-garble-hack)
        (debug-remote presence '<<< remote-title remote-uuid 'read (car message) (cadr message) (caddr message)))
      (if (eof-object? message)
          (throw-connection-broke "Read message received eof")
        message))))


;;;
;;;; Listener
;;;


(definition default-listener-host
  localhost)

(definition default-listener-service
  'any)


(definition public (get-remote-listener (purpose: purpose #f))
  (get-listener (require-presence purpose)))


(definition public (require-remote-listener (purpose: purpose #f))
  (or (get-remote-listener purpose: purpose)
      (error "Unable to complete operation because the remote listener is not running")))


(definition public (listen-parameter)
  (host/service-parameter "listen" 'listen (values #f #f #f)))


(definition public (host/service-parameter arg setting (default (unspecified)))
  (parse-parameter arg parse-host/service setting parse-host/service default))


(definition public (start-remote-presence (purpose: purpose #f) (host: host #f) (service: service #f) (alternate-service: alternate-service #f))
  (let ((presence (require-presence purpose)))
    (start-listener presence host service alternate-service)))


(definition public (stop-remote-presence (purpose: purpose #f))
  (let ((presence (find-presence purpose)))
    (when presence
      (stop-listener presence))))


;;;
;;;; Invoke
;;;


(definition public (post-remote method-name remote-proxy . arguments)
  (let ((connection (remote-proxy->connection remote-proxy)))
    (invoke connection 'post method-name remote-proxy arguments)))


(definition public (send-remote method-name remote-proxy . arguments)
  (let ((connection (remote-proxy->connection remote-proxy)))
    (invoke connection 'send method-name remote-proxy arguments)))


(definition public (call-remote method-name remote-proxy . arguments)
  (let ((connection (remote-proxy->connection remote-proxy)))
    (invoke connection 'call method-name remote-proxy arguments)))


;;;
;;;; Live
;;;


(definition public live-timeout
  0.5)


(definition package (remote-proxy-live? remote-proxy)
  (catch (connection-exception? exc
           #f)
    (let ((connection (remote-proxy->connection remote-proxy)))
      (invoke-live? connection remote-proxy live-timeout))))


;;;
;;;; Validation
;;;


(definition protected (set-presence-code code (purpose: purpose #f))
  (let ((presence (require-presence purpose)))
    (set-code presence code)))

(definition protected (set-presence-version version (purpose: purpose #f))
  (let ((presence (require-presence purpose)))
    (set-version presence version)))


;;;
;;;; Handler
;;;


(definition protected (set-presence-already-connected already-connected (purpose: purpose #f))
  (let ((presence (require-presence purpose)))
    (set-already-connected presence already-connected)))

(definition protected (set-presence-accept-handler accept-handler (purpose: purpose #f))
  (let ((presence (require-presence purpose)))
    (set-accept-handler presence accept-handler)))

(definition protected (set-presence-connect-handler connect-handler (purpose: purpose #f))
  (let ((presence (require-presence purpose)))
    (set-connect-handler presence connect-handler)))


(definition protected (set-presence-invoke-handler invoke-handler (purpose: purpose #f))
  (let ((presence (require-presence purpose)))
    (set-invoke-handler presence invoke-handler)))

(definition protected (set-presence-process-handler process-handler (purpose: purpose #f))
  (let ((presence (require-presence purpose)))
    (set-process-handler presence process-handler)))

(definition protected (set-presence-processing-handler processing-handler (purpose: purpose #f))
  (let ((presence (require-presence purpose)))
    (set-processing-handler presence processing-handler)))

(definition protected (set-presence-execute-handler execute-handler (purpose: purpose #f))
  (let ((presence (require-presence purpose)))
    (set-execute-handler presence execute-handler)))


(definition protected (reset-presence-process-handler (purpose: purpose #f))
  (set-presence-process-handler
    (lambda (proc connection)
      (proc connection))
    purpose: purpose))

(definition protected (reset-presence-processing-handler (purpose: purpose #f))
  (set-presence-processing-handler #f purpose: purpose))


;;;
;;;; Register
;;;


(definition public (get-local-register (purpose #f))
  (get-register (require-presence purpose)))


(definition public (new-remote-register purpose uuid)
  (ior->proxy (new IOR purpose uuid 'register #f '())))


(definition public (connect-remote-register host port (purpose: purpose #f))
  (let ((presence (require-presence purpose)))
    (let ((uuid (connect-remote presence host port #f)))
      (new-remote-register purpose uuid))))


(definition public (connect-remote-reference host port reference (purpose: purpose #f))
  (let ((presence (require-presence purpose)))
    (connect-remote presence host port reference)))


(definition public (get-remote-register remote-proxy)
  (let ((ior (get-ior remote-proxy)))
    (let ((purpose (get-purpose ior))
          (uuid (get-uuid ior)))
      (let ((presence (require-presence purpose)))
        (new-remote-register purpose uuid)))))


(definition public (register-proxy name proxy-class object (purpose #f))
  (let ((presence (require-presence purpose)))
    (let ((register (get-local-register purpose))
          (proxy (new proxy-class presence object)))
      (register-object register name proxy)
      proxy)))


(definition public (proxy-connection-info client proxy)
  (let ((client-presence (get-presence client))
        (client-uuid (get-uuid (get-ior client))))
    (let ((client-connection (require-connection client-presence client-uuid)))
      (let ((host (get-address client-connection)))
        (if (local-proxy? proxy)
            (let ((port (listening-port (get-remote-listener))))
              (list proxy host port))
          (let ((proxy-presence (get-presence proxy))
                (proxy-uuid (get-uuid (get-ior proxy))))
            (let ((proxy-connection (require-connection proxy-presence proxy-uuid)))
              (let ((port (get-service proxy-connection)))
                ;; we cannot use the peer port number because if it was him that connected
                ;; to us then it will have a distinct port from its process remote listener
                (assert port
                  (list proxy host port))))))))))


(definition public (connect-remote-proxy info)
  (bind (proxy host port) info
    (let ((presence (get-presence proxy))
          (ior (get-ior proxy)))
      (let ((uuid (get-uuid ior)))
        ;; already connected
        (unless (find-connection presence uuid)
          (assert (uuid=? (connect-remote presence host port #f)
                          uuid)))
        proxy))))


(definition public (disconnect-remote-proxy remote-proxy)
  (let ((presence (get-presence remote-proxy))
        (uuid (get-uuid (get-ior remote-proxy))))
    (let ((connection (find-connection presence uuid)))
      ;; robust
      (when connection
        (set-closing? connection #t)
        (disconnect-connection presence uuid connection)))))


(definition public (close-remote-proxy remote-proxy)
  (let ((presence (get-presence remote-proxy))
        (uuid (get-uuid (get-ior remote-proxy))))
    (let ((connection (require-connection presence uuid)))
      (set-closing? connection #t)
      (close-connection presence uuid connection))))


(definition public (closing-remote-proxy remote-proxy)
  (let ((presence (get-presence remote-proxy))
        (uuid (get-uuid (get-ior remote-proxy))))
    (let ((connection (require-connection presence uuid)))
      (set-closing? connection #t))))


;; quick safe version
(definition public (closing-remote-proxy-safe remote-proxy)
  (let ((presence (get-presence remote-proxy))
        (uuid (get-uuid (get-ior remote-proxy))))
    (let ((connection (find-connection presence uuid)))
      (when connection
        (set-closing? connection #t)))))


;; quick safe version
(definition public (closing-remote-connection-safe purpose uuid)
  (let ((presence (require-presence purpose)))
    (let ((connection (find-connection presence uuid)))
      (when connection
        (set-closing? connection #t)))))


;;;
;;;; Local
;;;


(definition local-proxy-classes
  (make-table))


(definition protected (register-local-proxy-class locator class)
  (table-set! local-proxy-classes locator class))


(definition protected (registered-local-proxy-class locator)
  (or (table-ref local-proxy-classes locator #f)
      (error "Unknow local proxy class {a}" locator)))


(definition (local-proxy->locator proxy)
  (let ((proxy-class (class-of proxy)))
    (table-search (lambda (locator class)
                    (and (eq? proxy-class class)
                         locator))
                  local-proxy-classes)))


;;;
;;;; Remote
;;;


(definition remote-proxy-classes
  (make-table))


(definition protected (register-remote-proxy-class locator class)
  (table-set! remote-proxy-classes locator class))


(definition protected (registered-remote-proxy-class locator)
  (or (table-ref remote-proxy-classes locator #f)
      (error "Unknow remote proxy class {a}" locator)))


;;;
;;;; IOR
;;;


(definition public (ior? object)
  (is? object IOR))


(definition public (ior=? x y)
  (and (uuid=? (get-uuid x) (get-uuid y))
       (reference=? (get-reference x) (get-reference y))))


(definition public (ior-server=? x y)
  (uuid=? (get-uuid x) (get-uuid y)))


(definition public (host=? x y)
  (equal? x y))


(definition public (service=? x y)
  (eqv? x y))


(definition public (reference=? x y)
  (eqv? x y))


(definition public (ior->proxy ior)
  (let ((purpose (get-purpose ior)))
    (let ((presence (require-presence purpose)))
      (define (ior-stub-interface ior)
        (let ((stub-interface (get-stub-interface ior)))
          (if (symbol? stub-interface)
              stub-interface
            (resolve-runtime-reference (deserialize-runtime-reference stub-interface)))))
      
      (define (stub-local-class stub-interface)
        (if (symbol? stub-interface)
            (registered-local-proxy-class stub-interface)
          (local-class stub-interface)))
      
      (define (stub-remote-class stub-interface)
        (if (symbol? stub-interface)
            (registered-remote-proxy-class stub-interface)
          (remote-class stub-interface)))
      
      (define (local-ior? ior)
        (equal? (get-uuid ior) (get-uuid presence)))
      
      (define (local->proxy stub-interface ior)
        (define (reference->local-proxy stub-interface reference)
          (if (not reference)
              (get-local-register purpose)
            (new (stub-local-class stub-interface) presence (serial->object reference))))
        
        (reference->local-proxy stub-interface (get-reference ior)))
      
      (define (remote->proxy stub-interface ior)
        (new (stub-remote-class stub-interface) presence ior (get-values ior)))
      
      (let ((stub-interface (ior-stub-interface ior)))
        (if (local-ior? ior)
            (local->proxy stub-interface ior)
          (remote->proxy stub-interface ior))))))


;;;
;;;; Proxy
;;;


(definition public (proxy? object)
  (is? object Proxy))


(definition public (proxy=? x y)
  (cond ((and (remote-proxy? x) (remote-proxy? y))
         (remote-proxy=? x y))
        ((and (local-proxy? x) (local-proxy? y))
         (local-proxy=? x y))
        (else
         #f)))


(definition public (proxy-server=? x y)
  (cond ((and (remote-proxy? x) (remote-proxy? y))
         (ior-server=? (get-ior x)
                       (get-ior y)))
        ((and (local-proxy? x) (local-proxy? y))
         #t)
        (else
         #f)))


;;;
;;;; Local Proxy
;;;


(definition public (local-proxy? object)
  (is? object Local-Proxy))


(definition public (local-proxy=? x y)
  (eq? (get-object x)
       (get-object y)))


;;;
;;;; Remote Proxy
;;;


(definition public (remote-proxy? object)
  (is? object Remote-Proxy))


(definition public (remote-proxy=? x y)
  (ior=? (get-ior x)
         (get-ior y)))


(definition protected (remote-proxy->connection proxy)
  (let ((presence (get-presence proxy))
        (uuid (get-uuid (get-ior proxy))))
    (or (find-connection presence uuid)
        (let ((origin (registered-forwarding uuid)))
          (and origin
               (bind (presence . uuid) origin
                 (find-connection presence uuid))))
        (throw-connection-broke (format "Unable to find connection: {a}" uuid)))))


(definition protected (remote-proxy-connected? proxy)
  (let ((presence (get-presence proxy)))
    (find-connection presence (get-uuid (get-ior proxy)))))


;;;
;;;; GC
;;;


;; Put back temporarily until all the bugs of
;; the new pragmatic approach are ironed out...


(definition protected *Mega-Patch*
  '())


(definition public (gc-protect obj)
  (set! *Mega-Patch* (cons obj *Mega-Patch*)))


;;;
;;;; Marshall
;;;


(definition protected (marshall-local-proxy proxy)
  (let ((presence (get-presence proxy)))
    (define (local-proxy->reference)
      (if (proxy=? proxy (get-register presence))
          #f
        (let ((object (get-object proxy)))
          (gc-protect object)
          (object->serial object))))
    
    (define (local-proxy->stub-interface)
      (or (local-proxy->locator proxy)
          (serialize-runtime-reference (stub-reference proxy))))
    
    (let ((ior
            (new IOR
              (get-purpose presence)
              (get-uuid presence)
              (local-proxy->stub-interface)
              (local-proxy->reference)
              (proxy-values proxy))))
      (serialize-object (class-of ior) (encode-ior ior)))))


(definition protected (marshall-remote-proxy proxy)
  (let ((ior (get-ior proxy)))
    (serialize-object (class-of ior) (encode-ior ior))))


(definition (encode-ior ior)
  (vector (get-purpose ior)
          (get-uuid ior)
          (get-stub-interface ior)
          (get-reference ior)
          (get-values ior)))


;;;
;;;; Unmarshall
;;;


(definition protected (unmarshall-proxy content)
  (ior->proxy (decode-ior content)))


(definition (decode-ior content)
  (new IOR
    (vector-ref content 0)
    (vector-ref content 1)
    (vector-ref content 2)
    (vector-ref content 3)
    (vector-ref content 4)))


;;;
;;;; Debug
;;;


(definition protected presence-title
  (let ((prefix (or (current-process-prefix) (current-process-title))))
    (and prefix (upcase prefix))))

(definition public (get-presence-title)
  presence-title)

(definition public (set-presence-title title)
  (set! presence-title title))


;; kinda quicky
(definition protected presence-name
  (and presence-title (string->symbol presence-title)))

(definition public (get-presence-name)
  presence-name)


(definition protected debug-remote?
  (global-setting 'debug-remote? #f))

(definition protected debug-remote-blocking?
  (global-setting 'debug-remote-blocking? #f))

(definition protected debug-remote-io?
  (global-setting 'debug-remote-io? #f))

(definition protected debug-remote-seconds?
  (global-setting 'debug-remote-seconds? #f))

(definition protected debug-remote-simplify?
  (global-setting 'debug-remote-simplify? #t))

(definition protected debug-remote-ignore-presences
  (global-setting 'debug-remote-ignore-presences #f))

(definition protected debug-remote-ignore-methods
  (global-setting 'debug-remote-ignore-methods #f))


(definition protected (debug-remote-presence? presence)
  (or (not debug-remote-ignore-presences)
      (not (memq? (get-purpose presence) debug-remote-ignore-presences))))


(definition protected (debug-remote-method? method-name)
  (or (not debug-remote-ignore-methods)
      (not (memq? method-name debug-remote-ignore-methods))))


(definition protected (set-debug-remote? flag)
  (set! debug-remote? flag))

(definition protected (set-debug-remote-blocking? flag)
  (set! debug-remote-blocking? flag))

(definition protected (set-debug-remote-io? flag)
  (set! debug-remote-io? flag))


(definition (caller-garble-hack)
  ;; quick hack to help output from getting garbled
  (sleep .01))


(definition (callee-garble-hack)
  ;; quick hack to help output from getting garbled
  (sleep .01)))
