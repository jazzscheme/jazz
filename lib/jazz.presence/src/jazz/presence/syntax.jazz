;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Remote Syntax
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module jazz.presence.syntax jazz


(import (scheme.core.kernel))


;;;
;;;; Remotable Stub
;;;


(define remotable-stub-modifiers
  '(((private protected package public) . public)))

(define remotable-stub-keywords
  '(extends))


(define (parse-remotable-stub walker resume declaration rest)
  (receive (access modifiers rest) (parse-modifiers walker resume declaration remotable-stub-modifiers rest)
    (let ((name (car rest))
          (rest (cdr rest)))
      (receive (ascendant-name body) (parse-keywords remotable-stub-keywords rest)
        (values name #f access modifiers ascendant-name body)))))


(define method-stub-modifiers
  '(((private protected package public) . private)
    ((post exec call) . call)
    ((reference value) . reference)))


(define (parse-method-stub walker resume declaration rest)
  (receive (access invocation passage modifiers rest) (parse-modifiers walker resume declaration method-stub-modifiers rest)
    (let* ((signature (car rest))
           (name (car signature))
           (parameters (cdr signature))
           (body (cdr rest)))
      (values name Any access invocation passage modifiers parameters body))))


(define (expand-remotable-stub walker resume declaration environment rest)
  (receive (name type stub-access stub-modifiers ascendant-name body) (parse-remotable-stub walker resume declaration rest)
    (define (add name suffix)
      (string->symbol (string-append (symbol->string name) suffix)))
    
    (define (parse-parameters params)
      (let ((parameters (new-queue))
            (positional (new-queue)))
        (define (encode parameter)
          (string->symbol (string-append "__" (symbol->string parameter))))
        
        (let iter ((scan params))
             (cond ((null? scan)
                    (values (queue-list parameters) (queue-list positional) #f))
                   ((symbol? scan)
                    (let ((rest (encode scan)))
                      (enqueue-list parameters rest)
                      (values (queue-list parameters) (queue-list positional) rest)))
                   (else
                    (let ((parameter (encode (car scan))))
                      (enqueue parameters parameter)
                      (enqueue positional parameter)
                      (iter (cdr scan))))))))
    
    (define (parse-value-keyword name passage)
      (case passage
        ((reference)
         #f)
        ((value)
         (let* ((str (symbol->string name))
                (len (string-length str)))
           (assert (and (> len 4) (string=? (substring str 0 4) "get-"))
             (string->keyword (substring str 4 len)))))))
    
    (let ((interface-class (add name "-Stub-Interface"))
          (stub-interface (add name "-Stub"))
          (local-class (add name "-Local-Proxy"))
          (remote-class (add name "-Remote-Proxy"))
          (proxies (new-queue))
          (values (new-queue))
          (locals (new-queue))
          (remotes (new-queue)))
      (for-each (lambda (method-form)
                  (assert (eq? (car method-form) 'method)
                    (receive (name type access invocation passage modifiers parameters body) (parse-method-stub walker resume declaration (cdr method-form))
                      (receive (parameters positional rest) (parse-parameters parameters)
                        (let ((invoker (case invocation ((post) 'post-remote) ((exec) 'exec-remote) ((call) 'call-remote)))
                              (dispatch (string->symbol (string-append (symbol->string name))))
                              (local-result (case invocation ((post exec) '((unspecified))) ((call) '())))
                              (value-keyword (parse-value-keyword name passage)))
                          (enqueue proxies `(method ,access virtual abstract (,name self ,@parameters)))
                          (when value-keyword
                            (enqueue values value-keyword)
                            (enqueue values `(,name self)))
                          (enqueue locals `(method override (,name self ,@parameters)
                                             ,@(cond ((not-null? body) body)
                                                     (rest `((apply (~ ,name object) ,@positional ,rest) ,@local-result))
                                                     (else `((,dispatch object ,@positional) ,@local-result)))))
                          (enqueue remotes `(method override (,name self ,@parameters)
                                              ,(let ((call (if rest `(apply ,invoker ',name self ,@positional ,rest) `(,invoker ',name self ,@positional))))
                                                 (if value-keyword
                                                     `(proxy-value self ,value-keyword (lambda () ,call))
                                                   call)))))))))
                body)
      (let* ((values-list (queue-list values))
             (values-method
               (if (null? values-list)
                   '()
                 `((method override (proxy-values self)
                     (append (list ,@values-list)
                             (nextmethod self)))))))
        `(begin
           (class package ,interface-class extends ,(if (specified? ascendant-name) (add ascendant-name "-Stub-Interface") 'Stub-Interface)
             (method override (local-class self)
               ,local-class)
             (method override (remote-class self)
               ,remote-class))
           (interface ,@stub-modifiers ,stub-interface extends ,(if (specified? ascendant-name) (add ascendant-name "-Stub") 'Remotable-Stub) metaclass ,interface-class
             ,@(queue-list proxies))
           (class package ,local-class extends ,(if (specified? ascendant-name) (add ascendant-name "-Local-Proxy") 'Local-Proxy) implements ,stub-interface
             (method override (stub-reference self)
               (reify-reference ,stub-interface))
             ,@values-method
             ,@(queue-list locals))
           (class package ,remote-class extends ,(if (specified? ascendant-name) (add ascendant-name "-Remote-Proxy") 'Remote-Proxy) implements ,stub-interface
             (method override (stub-reference self)
               (reify-reference ,stub-interface))
             ,@(queue-list remotes)))))))


(syntax public remotable-stub
  (lambda (form-src environment macro-environment)
    (let ((rest (cdr (strip-syntactic-closures form-src))))
      (sourcify-deep-if
        (expand-remotable-stub (current-walker) (current-resume) (current-declaration) environment rest)
        form-src)))))
