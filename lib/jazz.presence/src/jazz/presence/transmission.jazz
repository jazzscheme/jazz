;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Remote Transmission
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module jazz.presence.transmission jazz


(import (jazz.version))


;;;
;;;; Broke
;;;


(class Connection-Broke extends Exception
  
  
  (slot reason getter generate)
  
  
  (method override (initialize self rs)
    (nextmethod self)
    (set! reason rs))
  
  
  (method override (print self printer readably)
    (print-unreadable self printer
      (lambda (printer)
        (format printer "{s}" reason))))
  
  
  (method override (present-exception self)
    reason))


(definition public (throw-connection-broke reason)
  (throw (new Connection-Broke reason)))


;;;
;;;; Code
;;;


(class Invalid-Code extends Connection-Broke
  
  
  (method override (initialize self)
    (nextmethod self "Invalid code")))


(definition public (throw-invalid-code)
  (throw (new Invalid-Code)))


;;;
;;;; Version
;;;


(class Invalid-Version extends Connection-Broke
  
  
  (method override (initialize self)
    (nextmethod self "Invalid version")))


(definition public (throw-invalid-version)
  (throw (new Invalid-Version)))


;;;
;;;; Exception
;;;


(definition public (connection-exception? exc)
  (or (os-exception? exc)
      (and (object? exc)
           (is? exc Connection-Broke))))


;;;
;;;; Protocol
;;;


(definition protected *presence-code*
  (code-string->32-bit-integer "JAZZ"))

(definition protected *presence-version*
  {Version 1 0 0})


(definition public (write-port port binary? code version info)
  (cond (binary?
         (write-header code version port)
         (write-data info port))
        (else
         (write-text-header code version port)
         (write-text-data info port)))
  (force-output port))


(definition public (read-port port binary? expected-code expected-version)
  (receive (code version) (if binary? (read-header port) (read-text-header port))
    (validate-code expected-code code)
    (validate-version expected-version version)
    (if binary? (read-data port) (read-text-data port))))


;;;
;;;; Binary
;;;


(definition (write-header code version port)
  (32-bit-integer->bytes code
    (lambda (b1 b2 b3 b4)
      (version->bytes version
        (lambda (b5 b6 b7 b8)
          (write-u8 b1 port)
          (write-u8 b2 port)
          (write-u8 b3 port)
          (write-u8 b4 port)
          (write-u8 b5 port)
          (write-u8 b6 port)
          (write-u8 b7 port)
          (write-u8 b8 port)
          (force-output port))))))


(definition (read-header port)
  (let* ((b1 (read-u8 port))
         (b2 (read-u8 port))
         (b3 (read-u8 port))
         (b4 (read-u8 port))
         (b5 (read-u8 port))
         (b6 (read-u8 port))
         (b7 (read-u8 port))
         (b8 (read-u8 port)))
    (if (eof-object? b8)
        (throw-connection-broke "Read header received eof")
      (let ((code (bytes->32-bit-integer b1 b2 b3 b4))
            (version (bytes->version b5 b6 b7 b8)))
        (values code version)))))


(definition (write-data data port)
  (write-binary data port))


(definition (read-data port)
  (let ((data (read-binary port)))
    (if (eof-object? data)
        (throw-connection-broke "Read data received eof")
      data)))


;;;
;;;; Text
;;;


(definition (write-text-header code version port)
  (32-bit-integer->bytes code
    (lambda (b1 b2 b3 b4)
      (version->bytes version
        (lambda (b5 b6 b7 b8)
          (write (list b1 b2 b3 b4 b5 b6 b7 b8) port)
          (force-output port))))))


(definition (read-text-header port)
  (let ((data (read port)))
    (if (eof-object? data)
        (throw-connection-broke "Read header received eof")
      (bind (b1 b2 b3 b4 b5 b6 b7 b8) data
        (let ((code (bytes->32-bit-integer b1 b2 b3 b4))
              (version (bytes->version b5 b6 b7 b8)))
          (values code version))))))


(definition (write-text-data data port)
  (write-text data port))


(definition (read-text-data port)
  (let ((data (read-text port)))
    (if (eof-object? data)
        (throw-connection-broke "Read data received eof")
      data)))


(definition (write-text data port)
  (define (encode obj)
    (cond ((null? obj)
           obj)
          ((pair? obj)
           (cons (encode (car obj))
                 (encode (cdr obj))))
          (else
           (let ((expr (serialize obj)))
             (if (serialized? expr)
                 (vector 'serialized
                         (serialized-class expr)
                         (serialized-content expr))
               expr)))))
  
  (write (encode data) port)
  (force-output port))


(definition (read-text port)
  (define (decode obj)
    (cond ((null? obj)
           obj)
          ((pair? obj)
           (cons (decode (car obj))
                 (decode (cdr obj))))
          ((and (vector? obj)
                (> (vector-length obj) 0)
                (eq? (vector-ref obj 0) 'serialized))
           (deserialize
             (make-serialized (vector-ref obj 1)
                              (vector-ref obj 2))))
          (else
           obj)))
  
  (decode (read port)))


;;;
;;;; Validation
;;;


(definition public (validate-code expected-code code)
  (unless (= code expected-code)
    (throw-invalid-code)))


(definition public (validate-version expected-version version)
  (unless (nu=? version expected-version)
    (throw-invalid-version))))
