;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Remote Transmission
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module jazz.presence.transmission jazz


(import (jazz.version))


(definition package (global-setting name default)
  (if (global-bound? name)
      (global-ref name)
    default))


(definition protected *remote-title*
  (let ((prefix (or (current-process-prefix) (current-process-title))))
    (and prefix (upcase prefix))))

(definition public (set-remote-title title)
  (set! *remote-title* title))


(definition protected *debug?*
  (global-setting 'debug-remote? #f))

(definition protected *debug-seconds?*
  (global-setting 'debug-remote-seconds? #f))

(definition protected *debug-arguments?*
  (global-setting 'debug-remote-arguments? #f))

(definition protected *debug-simplify?*
  (global-setting 'debug-remote-simplify? #t))


;;;
;;;; Broke
;;;


(class Connection-Broke extends Exception)


;;;
;;;; Exception
;;;


(definition public (connection-problem? exc)
  (or (os-exception? exc)
      (and (object? exc)
           (is? exc Connection-Broke))))


;;;
;;;; Protocol
;;;


(definition protected *presence-code*
  (code-string->32-bit-integer "JAZZ"))

(definition protected *presence-version*
  {Version 1 0 0})


(definition public (write-port port info)
  (write-header *presence-code* *presence-version* port)
  (write-data info port)
  (force-output port))


(definition public (read-port port)
  (receive (code version) (read-header port)
    ;(validate-code *presence-code* code)
    ;(validate-version *presence-version* version)
    (read-data port)))


(definition (write-header code version port)
  (receive (b1 b2 b3 b4) (32-bit-integer->bytes code)
    (receive (b5 b6 b7 b8 b9 b10 b11 b12) (64-bit-integer->bytes (->64-bit-integer version))
      (write-u8 b1 port)
      (write-u8 b2 port)
      (write-u8 b3 port)
      (write-u8 b4 port)
      (write-u8 b5 port)
      (write-u8 b6 port)
      (write-u8 b7 port)
      (write-u8 b8 port)
      (write-u8 b9 port)
      (write-u8 b10 port)
      (write-u8 b11 port)
      (write-u8 b12 port)
      (force-output port))))


(definition (read-header port)
  (let* ((b1 (read-u8 port))
         (b2 (read-u8 port))
         (b3 (read-u8 port))
         (b4 (read-u8 port))
         (b5 (read-u8 port))
         (b6 (read-u8 port))
         (b7 (read-u8 port))
         (b8 (read-u8 port))
         (b9 (read-u8 port))
         (b10 (read-u8 port))
         (b11 (read-u8 port))
         (b12 (read-u8 port)))
    (if (eof-object? b12)
        (throw (new Connection-Broke))
      (let ((code (bytes->32-bit-integer b1 b2 b3 b4))
            (version-code (bytes->64-bit-integer b5 b6 b7 b8 b9 b10 b11 b12)))
        (values code (64-bit-integer->version version-code))))))


(definition (write-data data port)
  (write-binary data port))


(definition (read-data port)
  (let ((data (read-binary port)))
    (if (eof-object? data)
        (throw (new Connection-Broke))
      data)))


;;;
;;;; Protocol-Exception
;;;


(class Protocol-Exception extends Exception
  
  
  (slot message-text)
  
  
  (method override (initialize self text)
    (nextmethod self)
    (set! message-text text))
  
  
  (method override (get-message self)
    message-text))


@wait
(definition public (validate-code expected-code code)
  (unless (= code expected-code)
    (throw (new Protocol-Exception
             (format "Invalid code: {a} (expected {a})"
                     code
                     expected-code)))))


@wait
(definition public (validate-version remote-version (server-side?: server-side? #t))
  (let ((local-version (process-version (get-process))))
    (unless (compatible? local-version remote-version)
      (throw (new Protocol-Exception
               (format "Client version {a} is incompatible with server version {a}."
                       (present (if server-side? remote-version local-version))
                       (present (if server-side? local-version remote-version)))))))))
