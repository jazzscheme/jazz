;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Print Job
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.print.Print-Job jazz


(import (jazz.document)
        (jazz.geometry)
        (jazz.graphic)
        (jazz.print)
        (jazz.view))


(class undocumented Print-Job extends Object
  
  
  (slot surface)
  (slot selection? getter generate)
  (slot from       getter generate)
  (slot to         getter generate)
  (slot nb-copies  getter generate)
  (slot client     getter generate)
  (slot page-setup)
  (slot resolution)
  (slot scaling)
  (slot zoom)
  (slot pages      getter generate)
  
  
  (method override (initialize self surface client page-setup resolution
                     (scaling: scaling #f)
                     (zoom: zoom #f)
                     (selection?: selection? #f)
                     (from: from #f)
                     (to: to #f)
                     (nb-copies: nb-copies 1))
    (nextmethod self)
    (set! self.surface surface)
    (set! self.selection? selection?)
    (set! self.from from)
    (set! self.to to)
    (set! self.nb-copies nb-copies)
    (set! self.client client)
    (set! self.page-setup page-setup)
    (set! self.resolution resolution)
    (set! self.scaling (or scaling (scale-content page-setup client resolution)))
    (set! self.zoom zoom)
    (set! pages (paginate self)))
  
  
  ;;;
  ;;;; Access
  ;;;
  
  
  (method public (get-dc self)
    surface)
  
  
  (method public (get-page self n)
    (element pages n))
  
  
  ;;;
  ;;;; Print
  ;;;
  
  
  (method public (print-job self)
    (with-document self
      (lambda ()
        (loop (repeat nb-copies)
              (print-document self)))))
  
  
  (method package (print-document self)
    (for-each (lambda (page no)
                (with-page self no
                  (lambda ()
                    (print-page self surface page no))))
              pages
              (naturals (if from (- from 1) 0)
                        (if to to (length pages)))))
  
  
  (method public (print-page self surface page no)
    (define (print-context no)
      (list
        printing?: #t
        ;; metamodeler-extra : should get this setting from the page-setup
        print-black/white?: #f
        print-selection?: selection?
        filename: (or (client-filename) "New")
        page-no: no
        page-count: (length pages)
        @convert-date(
                      print-date: (present-date-day (local-date))
                      print-time: (present-date-hour (local-date)))))
    
    (define (client-filename)
      (let ((guest (get-guest client)))
        (when (is? guest Document)
          (let ((moniker (get-moniker (get-document-controller guest))))
            (when moniker
              (get-name moniker))))))
    
    (let ((context (print-context no)))
      (wrap-header/footer page-setup context)
      (with-paper-setup self surface page-setup
        (lambda ()
          (when zoom
            (scale surface zoom zoom))
          (let ((printed (printed-page self)))
            (paint-drawing printed surface context))))
      (with-page-setup self surface page-setup
        (lambda ()
          (let ((page-left (- (get-left page)))
                (page-top (- (get-top page))))
            (scale surface scaling scaling)
            (translate surface page-left page-top)
            (with-clip surface page
              (lambda ()
                (paint-drawing client surface context))))))
      @w
      (with-paper-setup surface page-setup
        (lambda ()
          (when zoom
            (scale surface zoom zoom))
          (debug-print surface)))))
  
  
  (method (debug-print self surface)
    (define (cornerize x y xoffset yoffset)
      (move-to surface (+ x xoffset) (+ y (* yoffset 2)))
      (line-to surface x y)
      (stroke surface)
      (move-to surface (+ x (* xoffset 2)) (+ y yoffset))
      (line-to surface x y)
      (stroke surface))
    
    (set-color surface {Color Dark})
    (set-line-width surface 1)
    (let ((rect (get-bounds page-setup)))
      (let ((ymin (get-top rect))
            (xmin (get-left rect))
            (xmax (get-right rect))
            (ymax (get-bottom rect)))
        (let ((offset (cast <fl> (/ (min (- xmax xmin) (- ymax ymin)) 4.))))
          (cornerize xmin ymin offset offset)
          (cornerize xmin ymax offset (- offset))
          (cornerize xmax ymin (- offset) offset)
          (cornerize xmax ymax (- offset) (- offset))))))
  
  
  (method (with-page-setup self surface page-setup proc)
    (with-paper-setup self surface page-setup
      (lambda ()
        (when zoom
          (scale surface zoom zoom))
        (let ((content-rect (get-content-rect page-setup)))
          (translate surface (get-left content-rect) (get-top content-rect)))
        (proc))))
  
  
  (method (with-paper-setup self surface page-setup proc)
    (with-preserved-matrix surface
      (lambda ()
        (let ((orientation (print-orientation self))
              (size (get-size page-setup)))
          (case orientation
            ((landscape)
             (let ((height (get-height size)))
               (translate surface 0 height)
               (rotate surface (- PI/2))))
            ((reverse-landscape)
             (let ((width (get-width size)))
               (translate surface width 0)
               (rotate surface PI/2)))
            ((reverse-portrait)
             (let ((width (get-width size))
                   (height (get-height size)))
               (translate surface width height)
               (rotate surface PI)))))
        (let ((ratio (/ (cast <fl> resolution) default-resolution)))
          (scale surface ratio ratio)
          (offset-page self surface))
        (proc))))
  
  
  (method protected virtual (printed-page self)
    page-setup)
  
  
  (method protected virtual (print-orientation self)
    (get-orientation page-setup))
  
  
  ;;;
  ;;;; Paginate
  ;;;
  
  
  (method package (paginate self)
    (define (default-paginate)
      (let ((content (get-content page-setup)))
        (let ((width (get-width content))
              (height (get-height content)))
          (let ((page-width (fxceiling (/ (/ (cast <fl> (* width resolution)) default-resolution) scaling)))
                (page-height (fxceiling (/ (/ (cast <fl> (* height resolution)) default-resolution) scaling))))
            (paginate client page-width page-height)))))
    
    (let ((page-area (get-page-area client '())))
      (if (not page-area)
          (default-paginate)
        (let ((page-width (rect-width page-area))
              (page-height (rect-height page-area)))
          (paginate client page-width page-height)))))
  
  
  ;;;
  ;;;; Coordinates
  ;;;
  
  
  (method protected virtual (offset-page self surface)
    #f)
  
  
  ;;;
  ;;;; Document
  ;;;
  
  
  (method public (with-document self proc)
    (start-document self)
    (proc)
    (end-document self))
  
  
  (method protected virtual (start-document self)
    )
  
  
  (method protected virtual (end-document self)
    )
  
  
  ;;;
  ;;;; Page
  ;;;
  
  
  (method public (with-page self no proc)
    (start-page self no)
    (proc)
    (end-page self no))
  
  
  (method protected virtual (start-page self no)
    )
  
  
  (method protected virtual (end-page self no)
    (show-page surface)
    )))
