;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Processes
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.process.Process jazz


(import (jazz.component)
        (jazz.crash)
        (jazz.debuggee)
        (jazz.io)
        (jazz.jrm)
        (jazz.locale)
        (jazz.network)
        (jazz.platform)
        (jazz.preferences)
        (jazz.process)
        (jazz.profile)
        (jazz.snapshot)
        (jazz.runtime)
        (jazz.settings)
        (jazz.template)
        (jazz.version))


(class Process extends Object


  (slot profile-class        initialize #f)
  (slot profile              initialize #f getter generate)
  (slot settings             initialize #f accessors generate)
  (slot preferences-designer initialize #f getter generate)
  (slot context              initialize #f)
  (slot exit-continuation    initialize #f)
  (slot monitor-memory?      initialize #f)

  
  ;;;
  ;;;; Access
  ;;;
  
  
  (method public virtual (process-name)
    "Process")
  
  
  (method public virtual (process-owner)
    #f)
  
  
  (method public virtual (process-copyright)
    #f)
  
  
  (method public virtual (process-licensee)
    #f)
  
  
  (method public virtual (process-icon)
    "Process")
  

  (method public virtual (process-version)
    {Version 1 0 0})
  
  
  (method public virtual (process-email)
    #f)
  
  
  (method public virtual (process-actions)
    '())
  
  
  (method public virtual (process-event-source)
    (or (string-parameter "event-source" 'EventSource #f)
        (process-name)))
  
  
  (method public virtual (is-application?)
    #f)
  
  
  ;;;
  ;;;; Startup
  ;;;
  
  
  (method public virtual (boot-environment)
    (catch (Cancel-Signal signal
             #f)
      (setup-debugging)
      (monitor-memory)
      (update-debuggee)
      (initialize-aliases)
      (initialize-app)
      (initialize-settings)
      (register-versions)
      (prepare-phase)
      (install-phase)
      (finalize-phase)
      (finish-phase)
      (conclude-phase)
      (activate-process)
      (start-process)
      (ready-debuggee)
      (maybe-validate)
      (when (run-loop?)
        ;; sanity check for a bug that can occur very easily and is extremely difficult to debug
        (when (and (eq? (current-thread) (get-load-thread)) (not-null? (current-load-stack)))
          (system-message (format "Internal error: Load stack not empty.{%}{%}This is probably caused by a product run unit doing its initialisations at the toplevel instead of registering them using register-product-run.{%}{%}Please report this problem to the JazzScheme team if this is not the case.")))
        (run-loop))
      #f))
  
  
  (method (setup-debugging)
    (when (and (not (controlling-terminal?)) (not (using-debugger?)))
      (set-exception-debugger (application-exception-debugger))
      (set-exception-hook exception-debugger-hook)))
  
  
  (method (monitor-memory)
    (when monitor-memory?
      (add-gc-interrupt-job!
        (let ((n-times-over 0)
              (active? #t))
          (lambda ()
            (receive (last_gc_heap_size last_gc_alloc last_gc_live last_gc_movable last_gc_nonmovable) (process-memory)
              (let ((live (if (= (get-live-percent) 0) 50. (get-live-percent)))
                    (current-live (round (* 100. (/ last_gc_live last_gc_heap_size)))))
                (cond ((<= current-live live)
                       (set! n-times-over 0)
                       (set! active? #t))
                      ((and active? (> n-times-over 1))
                       (set! active? #f)
                       (raise-heap-overflow-exception))
                      (active?
                       (set! n-times-over (+ n-times-over 1)))))))))))
  
  
  (method (update-debuggee)
    (unless (current-process-title)
      (current-process-title-set! (process-name)))
    (current-process-version-set! (present~ (process-version)))
    (update-debuggee-process))
  
  
  (method protected virtual (initialize-app)
    )
  
  
  (method protected virtual (initialize-settings)
    )
  
  
  (method protected virtual (settings-version)
    )
  
  
  (method (register-versions)
    @unimplemented
    (register-crash-info platform-version: #f (present~ (get-platform-version))))
  
  
  (method protected virtual (prepare-phase)
    (prepare-settings)
    (prepare-bindings)
    (prepare-aliases)
    (prepare-system)
    (prepare-locales)
    (prepare-profile)
    (setup-nicknames)
    (login-profile)
    (prepare-environment)
    (prepare-preferences)
    (prepare-preferences-aliases)
    (prepare-workbench)
    (prepare-process))
  
  
  (method protected virtual (prepare-settings)
    )
  
  
  (method protected virtual (prepare-system)
    (set-process self))
  
  
  (method protected virtual (prepare-locales)
    (register-locale~ (get-locale-state) (new Locale 'english 'all     {Locales english: "English" french: "Anglais"}))
    (register-locale~ (get-locale-state) (new Locale 'french  'english {Locales english: "French" french: "Fran√ßais"}))
    (set-current-locale~ (get-locale-state) english:))
  
  
  (method protected virtual (prepare-profile)
    )


  (method protected virtual (prepare-environment)
    )


  (method (prepare-preferences)
    (setup-preferences))

  
  (method public virtual (prepare-process)
    (let ((use? (use-snapshot?)))
      (when use?
        (setup-crash-handler (eq? use? 'both)))))
  
  
  (method protected virtual (install-phase)
    (install-environment)
    (install-process))


  (method protected virtual (install-environment)
    )
  
  
  (method public virtual (install-process)
    )
  
  
  (method protected virtual (finalize-phase)
    (finalize-environment)
    (maybe-start-servers)
    (finalize-process)
    (setup-profile))


  (method protected virtual (finalize-environment)
    )
  
  
  (method public virtual (finalize-process)
    )

  
  (method public virtual (setup-profile)
    (define (create-profile)
      (if (find-unit-source profile-class)
          (set! profile (new (load-profile-class profile-class)))
        (new-default-profile)))
    
    (when (and (use-profile?) profile-class)
      (create-profile)))
  
  
  (method protected virtual (new-default-profile)
    (new Me))
    
  
  (method protected virtual (finish-phase)
    (finish-environment)
    (finish-process))
  
  
  (method protected virtual (finish-environment)
    (register-base-objects))
  
  
  (method public virtual (finish-process)
    )
    
  
  (method protected virtual (conclude-phase)
    (conclude-environment)
    (conclude-process)
    (conclude-debuggee))
  
  
  (method protected virtual (conclude-environment)
    )
  
  
  (method public virtual (conclude-process)
    )
  
  
  (method public virtual (conclude-debuggee)
    (when (get-controller-debugger)
      (start-console)
      (current-input-port (console-input-port))
      (current-output-port (console-output-port))))
  
  
  (method protected virtual (start-console)
    (select-console)
    (start-repl-thread (current-thread) #f (get-console-port)))
  
  
  (method protected virtual (start-process)
    )
  
  
  (method protected virtual (safe-execution?)
    #f)
  
  
  ;;;
  ;;;; Validate
  ;;;
  
  
  (method public (validate-process?)
    (boolean (command-argument "validate")))
  
  
  (method virtual (maybe-validate)
    (when (validate-process?)
      (start-validate-process)))
  
  
  (method protected virtual (start-validate-process)
    (thread-start!
      (new-thread
        (lambda ()
          (validate-process))
        'validate)))
  
  
  (method protected virtual (validate-process)
    )
  
  
  ;;;
  ;;;; Termination
  ;;;
  
  
  (method protected virtual (terminate-process)
    )
  
  
  ;;;
  ;;;; Environment
  ;;;
  
  
  (method public virtual (preserve-environment)
    )
  
  
  (method public virtual (close-environment)
    (persist-preferences)
    (unless (reloading-process?)
      (detach-from-controller)
      (stop-servers)))
  
  
  (method (persist-preferences)
    (when (and preferences-designer (persist-preferences?) (file? (get-origin~ (get-form~ preferences-designer))))
      (save~ preferences-designer)))

  
  ;;;
  ;;;; Templates
  ;;;
  
  
  (method protected virtual (templates-directory)
    )


  ;;;
  ;;;; Profile
  ;;;
  
  
  (method protected virtual (login-profile)
    (when (use-profile?)
      (install-profiles)
      (log-profile)))
  
  
  (method protected virtual (use-profile?)
    #f)
  
  
  (method protected virtual (install-profiles)
    )
  
  
  (method protected virtual (log-profile)
    (let ((profile-arg (profile-parameter)))
      (when profile-arg
        (receive (name unit bindings) (standard-profile (->string profile-arg))
          (set! profile-class (compose-identifier unit name))
          (install-profile name unit bindings)))))
  
  
  (method protected virtual (profile-kind)
    "jazz")
  
  
  (method (profile-parameter)
    (let ((profile (string-parameter "profile" 'profile #f)))
      (when profile
        (let ((name (->string profile)))
          (if (lower-case? name)
              (capitalize name)
            name)))))
  
  
  (method (standard-profile title)
    (let ((name (string->symbol title))
          (unit-name (string->symbol (format "profile.{a}" (downcase title))))
          (template (profile-kind)))
      (values name unit-name template)))
  
  
  (method (install-profile name unit template)
    (define (install-new-profile name unit template)
      (let ((associations (list (cons 'jazz-settings-version (and jazz-settings-version (present-version jazz-settings-version)))
                                (cons 'settings-version (present-version (settings-version)))
                                (cons 'profile name)
                                (cons 'profile-lowercase (downcase (symbol->string name)))
                                (cons 'profile-unit unit)
                                (cons 'active-skin (case kernel-windowing ((cocoa) 'mac) ((x11) 'x11) (else 'jazz))))))
        (copy-template (new-directory~ (templates-directory) (list "profile" template))
                       {Directory Home}
                       associations
                       ignored-nodes: (if jazz-settings-version '() '(".jazz"))))
      (let ((repository (find-repository 'Profiles)))
        (let ((package-name unit)
              (package-path (concatenate (repository-library-directory repository) (format "{a}/.package" unit))))
          (repository-add-package repository (load-package repository #f package-name package-path)))))
    
    (let ((source (find-unit-source profile-class)))
      (when (not source)
        (install-new-profile name unit template)
        (set! source (find-unit-source profile-class)))
      (register-alias 'Profile (get-list~ (get-parent~ source)))))
  
  
  ;;;
  ;;;; Runtime
  ;;;
  
  
  (method public virtual (runtime-product)
    (or (jazz-product) (current-process-product) 'jazz))
  
  
  (method public virtual (runtime-products)
    '())
  
  
  (method public virtual (runtime-units)
    (if profile-class
        (list profile-class)
      '()))
  
  
  (method public virtual (evaluation-processes)
    (list (get-local-process)))
  
  
  (method public virtual (runtime-properties)
    '())
  
  
  ;;;
  ;;;; Toplevel
  ;;;
  
  
  (method public virtual (get-toplevel)
    #f)
  
  
  ;;;
  ;;;; Exit
  ;;;
  

  (method public virtual (exit-process (status 0))
    (unload-process)
    (stop-message-thread
      (lambda ()
        (if exit-continuation
            (continuation-return exit-continuation status)
          (exit status)))))
  
  
  (method public virtual (stop-message-thread thunk)
    (thunk))
  
  
  (method public virtual (reboot-process (status 0))
    (unimplemented 'reboot-process))
  

  (method public virtual (reload-process)
    (thread-execute (primordial-thread) 'reload-process
      (lambda ()
        (parameterize ((*reloading-process?* #t))
          (unload-process))
        (continuation-graft exit-continuation boot-environment))))
  
  
  (method package (unload-process)
    (parameterize ((*unloading-process?* #t))
      (preserve-environment)
      (close-environment)
      (terminate-process)
      (set-process #f)))
  

  ;;;
  ;;;; Nicknames
  ;;;
  
  
  (method protected virtual (setup-nicknames)
    (register-nickname :process (lambda () self))
    (register-nickname :profile (lambda () profile)))
  
  
  ;;;
  ;;;; Context
  ;;;
  
  
  (method public (get-context)
    context)
  
  
  (method public (set-context ctx)
    (set! context ctx)
    (context-update))
  
  
  ;; Ugly hardcoding updates for now as the right approach
  ;; is not clear... Maybe the preferences setters do the
  ;; updates themselves or maybe objects interesseted in being
  ;; notified about preferences changes register themselves
  ;; for designer events that could be sent when the context is changed.
  (method protected virtual (context-update)
    (define (modify-preferences)
      (let* ((pref (get-preferences #f))
             (designer (get-preferences-designer))
             (trait (find-component~ pref context)))
        (set-active-trait~ pref trait)))
    
    (define (modify-connections)
      @wait
      (when (in-manifest? 'SQL-Connections-Manager)
        (modify-editor (get-guest~ (singleton-docked SQL-Connections-Manager)))))
    
    (define (modify-toolbox)
      @wait
      (when (in-manifest? 'Toolbox-Manager)
        (modify-editor (get-guest~ (singleton-docked Toolbox-Manager)))))
    
    (define (modify-editor editor)
      (let* ((client (get-client~ editor))
             (trait (find-component~ client context)))
        (set-active-trait~ client trait)
        (set-client~ editor #f)
        (set-client~ editor client)))
    
    (modify-preferences)
    (modify-connections)
    (modify-toolbox))
  
  
  (method public (install-context component)
    (when context
      (let ((trait (find-child~ component context)))
        (when trait
          (set-active-trait~ component trait)))))
  
  
  ;;;
  ;;;; Forms
  ;;;
  
  
  (method protected virtual (former-class)
    Former)
  
  
  ;;;
  ;;;; Preferences
  ;;;
  
  
  (method protected virtual (persist-preferences?)
    #f)
  
  
  (method protected virtual (preferences-file)
    {File Profile "settings" "Preferences.jml"})
  
  
  (method protected virtual (setup-preferences)
    (setup-preferences/designer))
  
  
  (method (setup-preferences/designer)
    (set-preferences/designer (load-preferences))
    (let ((root (get-preferences-root)))
      (define (preferences-context)
        (let ((arg (command-argument "context")))
          (cond (arg (string->symbol arg))
                (root (get-active-context~ root))
                (else #f))))
      
      (set! context (preferences-context))
      (install-context root)
      (let ((directory (get-current-directory~ root)))
        (when (and directory (exists?~ directory))
          (set-current-directory directory)))))
  
  
  (method (set-preferences/designer preferences)
    (set! preferences-designer (new (former-class) form: (get-form~ preferences) reference: preferences)))

  
  (method protected virtual (load-preferences)
    (let ((persist? (persist-preferences?))
          (file (preferences-file)))
      (if (and persist? (is-alias? 'Profile) (exists?~ file))
          (instantiate~ (read-form file))
        (default-preferences))))
  
  
  (method protected virtual (default-preferences)
    (new Process-Preferences))
  
  
  (method public (apply-preferences preferences (client #f))
    (apply-preferences~ preferences client))
  
  
  (method public (save-preferences preferences (client #f))
    (save-preferences~ preferences (get-preferences-designer) client))

  
  (method public (set-preferences-property preferences property value)
    (set-property~ preferences (get-preferences-designer) property value))
  
  
  (method public virtual (get-preferences-rights)
    #f)
  
  
  ;;;
  ;;;; Persistence
  ;;;
  
  
  (method public virtual (persist-usernames?)
    #f)
  
  
  (method public virtual (persist-passwords?)
    #f)
  
  
  ;;;
  ;;;; Versions
  ;;;
  
  
  (method public virtual (mandatory-version what)
    #f)

  
  ;;;
  ;;;; Readyness
  ;;;
  
  
  @windows-specific
  (method protected (signal-readyness name)
    (let ((handle (OpenEvent EVENT_MODIFY_STATE #f name)))
      (when handle
        (SetEvent handle))))

  
  ;;;
  ;;;; Loop
  ;;;
  
  
  (method public virtual (run-loop)
    (continuation-capture
      (lambda (cont)
        (set! exit-continuation cont)
        (with-repl-context cont
          (lambda ()
            (with-current-loop
              (lambda ()
                (start-loop))))))))
  
  
  (method public (invoke-resume-loop)
    (let ((restart (find-restart 'resume-loop)))
      (when restart
        (invoke-restart restart))))


  (method public virtual (start-loop)
    (declare (proper-tail-calls))
    (let (restart-loop)
      (with-restart-catcher 'resume-loop (present-current-loop-restart)
        (lambda ()
          (with-exception-debugger (get-exception-debugger)
            (lambda ()
              (thread-process-loop)))))
      (restart-loop)))
  
  
  (method public virtual (thread-process-loop (done? #f))
    (declare (proper-tail-calls))
    (let (loop)
      (thread-process)
      (unless (and done? (done?))
        (loop))))


  ;;;
  ;;;; System
  ;;;
  
  
  (method public virtual (system-title)
    "JazzScheme")


  ;;;
  ;;;; Bindings
  ;;;
  
  
  (method protected virtual (prepare-bindings)
    )


  ;;;
  ;;;; Aliases
  ;;;
  
  
  (method protected virtual (prepare-aliases)
    )
  
  
  (method public virtual (prepare-preferences-aliases)
    (let ((pref (get-preferences 'aliases error?: #f)))
      (when pref
        (let ((aliases (get-children~ pref)))
          (for-each (lambda (pref)
                      (let ((alias (get-alias~ pref))
                            (directory (get-directory~ pref)))
                        (when directory
                          (register-alias alias (get-list~ directory)))))
                    aliases)))))
  
  
  (method public virtual (resolve-alias name)
    #f)


  ;;;
  ;;;; Workbench
  ;;;
  
  
  (method public virtual (prepare-workbench)
    )
  
  
  ;;;
  ;;;; Servers
  ;;;
  
  
  (method (maybe-start-servers)
    (when (start-servers?)
      (start-servers)))
  
  
  (method protected virtual (start-servers?)
    ;; start now if listen is specified
    (receive (host service alternate-service) (listen-parameter)
      (or host service)))
  
  
  (method protected virtual (start-servers)
    (start-remote-server))
  
  
  (method package (start-remote-server)
    (receive (host service alternate-service) (listen-parameter)
      (start-remote-listener default-host: host default-service: service default-alternate-service: alternate-service))
    (start-remote-switchboard))
  
  
  (method (listen-parameter)
    (host/service-parameter "listen" 'listen (values #f #f #f)))
  
  
  (method (host/service-parameter arg setting (default (unspecified)))
    (get-parameter arg parse-host/service setting parse-host/service default))
  
  
  (method protected virtual (stop-servers)
    (stop-remote-listener))


  ;;;
  ;;;; Stub
  ;;;
  
  
  (method public (get-name)
    (process-name))
  
  
  (method public (get-icon)
    (process-icon))
  
  
  (method public (get-register)
    (get-local-register))


  ;;;
  ;;;; Register
  ;;;
  
  
  (method protected virtual (register-base-objects)
    )
  
  
  ;;;
  ;;;; Debuggers
  ;;;
  
  
  (method public virtual (get-local-debugger)
    #f)
  
  
  (method public virtual (get-snapshot-debugger)
    #f)
  
  
  ;;;
  ;;;; Debuggee
  ;;;
  
  
  (method protected virtual (effective-transmit-runtime-what what)
    what)
  
  
  (method public virtual (default-console-readtable)
    jazz-readtable)
  
  
  (method public virtual (initial-console-context)
    :process)
  
  
  (method protected virtual (process-debuggee-loop)
    (debuggee-loop))


  ;;;
  ;;;; Profile
  ;;;


  (method public virtual (get-remote-profile name)
    #f)))
