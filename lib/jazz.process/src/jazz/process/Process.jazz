;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Processes
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.process.Process jazz


(import (jazz.component)
        (jazz.crash)
        (jazz.debuggee)
        (jazz.event)
        (jazz.io)
        (jazz.locale)
        (jazz.network)
        (jazz.platform)
        (jazz.preferences)
        (jazz.presence)
        (jazz.process)
        (jazz.profile)
        (jazz.runtime)
        (jazz.settings)
        (jazz.snapshot)
        (jazz.template)
        (jazz.version))


(class Process extends Object


  (slot profile-class        initialize #f)
  (slot profile              initialize #f getter generate)
  (slot settings             initialize #f accessors generate)
  (slot preferences-designer initialize #f getter generate)
  (slot context              initialize #f)
  (slot monitor-memory?      initialize #f)

  
  ;;;
  ;;;; Access
  ;;;
  
  
  (method public virtual (process-name self)
    "Process")
  
  
  (method public virtual (process-owner self)
    #f)
  
  
  (method public virtual (process-copyright self)
    #f)
  
  
  (method public virtual (process-licensee self)
    #f)
  
  
  (method public virtual (process-icon self)
    "Process")
  

  (method public virtual (process-version self)
    {Version 1 0 0})
  

  (method public virtual (process-release self)
    #f)
  
  
  (method public virtual (process-email self)
    #f)
  
  
  (method public virtual (process-actions self)
    '())
  
  
  (method public virtual (process-event-source self)
    (or (string-parameter "event-source" 'EventSource #f)
        (process-name self)))
  
  
  (method public virtual (is-application? self)
    #f)
  
  
  ;;;
  ;;;; Startup
  ;;;
  
  
  (method public virtual (boot-environment self)
    (catch (Cancel-Signal signal
             #f)
      (setup-debugging self)
      (monitor-memory self)
      (update-debuggee self)
      (initialize-aliases)
      (initialize-settings self)
      (register-versions self)
      (prepare-phase self)
      (install-phase self)
      (finalize-phase self)
      (finish-phase self)
      (conclude-phase self)
      (activate-process)
      (start-process self)
      (ready-debuggee)
      (maybe-validate self)
      (when (run-loop?)
        ;; sanity check for a bug that can occur very easily and is extremely difficult to debug
        (when (and (eq? (current-thread) (get-load-thread)) (not-null? (current-load-stack)))
          (system-message (format "Internal error: Load stack not empty.{%}{%}This is probably caused by a product run unit doing its initialisations at the toplevel instead of registering them using register-product-run.{%}{%}Please report this problem to the JazzScheme team if this is not the case.")))
        (run-loop self))
      #f))
  
  
  (method (setup-debugging self)
    ;; need to think this through about letting gambit handle debugging
    ;; when there is a controlling terminal versus generating a snapshot
    (unless (or (controlling-terminal?) (using-debugger?))
      (let ((exception-debugger (process-debugger self)))
        (when exception-debugger
          (set-exception-debugger exception-debugger)
          (set-exception-hook exception-debugger-hook)))))
  
  
  (method protected virtual (process-debugger self)
    (application-exception-debugger))
  
  
  (method (monitor-memory self)
    (when monitor-memory?
      (add-gc-interrupt-job!
        (let ((n-times-over 0)
              (active? #t))
          (lambda ()
            (receive (last_gc_heap_size last_gc_alloc last_gc_live last_gc_movable last_gc_nonmovable) (process-memory)
              (let ((live (if (= (get-live-percent) 0) 50. (get-live-percent)))
                    (current-live (round (* 100. (/ last_gc_live last_gc_heap_size)))))
                (cond ((<= current-live live)
                       (set! n-times-over 0)
                       (set! active? #t))
                      ((and active? (> n-times-over 1))
                       (set! active? #f)
                       (raise-heap-overflow-exception))
                      (active?
                       (set! n-times-over (+ n-times-over 1)))))))))))
  
  
  (method (update-debuggee self)
    (unless (current-process-title)
      (current-process-title-set! (process-name self)))
    (current-process-version-set! (present (process-version self)))
    (update-debuggee-process))
  
  
  (method protected virtual (initialize-settings self)
    )
  
  
  (method protected virtual (settings-version self)
    )
  
  
  (method (register-versions self)
    @unimplemented
    (register-crash-info platform-version: #f (present (get-platform-version))))
  
  
  (method protected virtual (prepare-phase self)
    (prepare-settings self)
    (prepare-bindings self)
    (prepare-aliases self)
    (prepare-system self)
    (prepare-locales self)
    (prepare-platform self)
    (prepare-profile self)
    (setup-nicknames self)
    (login-profile self)
    (prepare-environment self)
    (prepare-preferences self)
    (prepare-preferences-aliases self)
    (prepare-workbench self)
    (prepare-process self))
  
  
  (method protected virtual (prepare-settings self)
    )
  
  
  (method protected virtual (prepare-system self)
    (set-current-process self))
  
  
  (method protected virtual (prepare-locales self)
    (register-locale (get-locale-state) (new Locale 'english 'all     {Locales english: "English" french: "Anglais"}))
    (register-locale (get-locale-state) (new Locale 'french  'english {Locales english: "French" french: "Fran√ßais"}))
    (set-current-locale (get-locale-state) english:))
  
  
  (method protected virtual (prepare-platform self)
    )
  
  
  (method protected virtual (prepare-profile self)
    )


  (method protected virtual (prepare-environment self)
    )


  (method (prepare-preferences self)
    (setup-preferences self))

  
  (method public virtual (prepare-process self)
    (let ((use? (use-snapshot?)))
      (when use?
        (setup-crash-handler (eq? use? 'both)))))
  
  
  (method protected virtual (install-phase self)
    (install-environment self)
    (install-process self))


  (method protected virtual (install-environment self)
    )
  
  
  (method public virtual (install-process self)
    )
  
  
  (method protected virtual (finalize-phase self)
    (finalize-environment self)
    (maybe-start-servers self)
    (finalize-process self)
    (setup-profile self))


  (method protected virtual (finalize-environment self)
    )
  
  
  (method public virtual (finalize-process self)
    )

  
  (method public virtual (setup-profile self)
    (define (create-profile)
      (if (find-unit-source profile-class)
          (set! profile (new (load-profile-class profile-class)))
        (new-default-profile self)))
    
    (when (and (use-profile? self) profile-class)
      (create-profile)))
  
  
  (method protected virtual (new-default-profile self)
    (new Me))
    
  
  (method protected virtual (finish-phase self)
    (finish-environment self)
    (finish-process self))
  
  
  (method protected virtual (finish-environment self)
    (register-base-objects self))
  
  
  (method public virtual (finish-process self)
    )
    
  
  (method protected virtual (conclude-phase self)
    (conclude-environment self)
    (conclude-process self)
    (conclude-debuggee self))
  
  
  (method protected virtual (conclude-environment self)
    )
  
  
  (method public virtual (conclude-process self)
    )
  
  
  (method public virtual (conclude-debuggee self)
    (when (get-controller-debugger)
      (select-console self)
      (start-console self)
      (current-input-port (console-input-port))
      (current-output-port (console-output-port))))
  
  
  (method protected virtual (select-console self)
    (select-debugger-console))
  
  
  (method protected virtual (start-console self)
    (start-repl-thread (current-thread) #f (current-console-port)))
  
  
  (method package virtual (start-process self)
    )
  
  
  (method package virtual (safe-execution? self)
    #f)
  
  
  ;;;
  ;;;; Validate
  ;;;
  
  
  (method public (validate-process? self)
    (boolean (command-argument "validate")))
  
  
  (method virtual (maybe-validate self)
    (when (validate-process? self)
      (start-validate-process self)))
  
  
  (method protected virtual (start-validate-process self)
    (thread-start!
      (new-thread
        (lambda ()
          (validate-process self))
        'validate)))
  
  
  (method protected virtual (validate-process self)
    )
  
  
  ;;;
  ;;;; Termination
  ;;;
  
  
  (method protected virtual (terminate-process self)
    )
  
  
  ;;;
  ;;;; Environment
  ;;;
  
  
  (method public virtual (preserve-environment self)
    )
  
  
  (method public virtual (close-environment self)
    (persist-preferences self)
    (unless (reloading-process?)
      (detach-from-controller)
      (stop-servers self)))
  
  
  (method (persist-preferences self)
    (when (and preferences-designer (persist-preferences? self) (file? (get-origin (get-form preferences-designer))))
      (save preferences-designer)))

  
  ;;;
  ;;;; Templates
  ;;;
  
  
  (method package virtual (templates-directory self)
    )


  ;;;
  ;;;; Profile
  ;;;
  
  
  (method protected virtual (login-profile self)
    (when (use-profile? self)
      (install-profiles self)
      (log-profile self)))
  
  
  (method protected virtual (use-profile? self)
    #f)
  
  
  (method protected virtual (install-profiles self)
    )
  
  
  (method protected virtual (log-profile self)
    (let ((profile-arg (profile-parameter self)))
      (when profile-arg
        (receive (name unit bindings) (standard-profile self (->string profile-arg))
          (set! profile-class (compose-identifier unit name))
          (install-profile self name unit bindings)))))
  
  
  (method protected virtual (profile-kind self)
    "jazz")
  
  
  (method (profile-parameter self)
    (let ((profile (string-parameter "profile" 'profile #f)))
      (and profile
           (let ((name (->string profile)))
             (if (lower-case? name)
                 (capitalize name)
               name)))))
  
  
  (method (standard-profile self title)
    (let ((name (string->symbol title))
          (unit-name (string->symbol (format "profile.{a}" (downcase title))))
          (template (profile-kind self)))
      (values name unit-name template)))
  
  
  (method (install-profile self name unit template)
    (define (install-new-profile name unit template)
      (let ((associations (list (cons 'jazz-settings-version (and jazz-settings-version (present-version jazz-settings-version)))
                                (cons 'settings-version (present-version (settings-version self)))
                                (cons 'profile name)
                                (cons 'profile-lowercase (downcase (symbol->string name)))
                                (cons 'profile-unit unit)
                                (cons 'active-skin (case kernel-windowing ((cocoa) 'mac) ((x11) 'x11) (else 'jazz))))))
        (copy-template (new-directory (templates-directory self) (list "profile" template))
                       {Directory Home}
                       associations
                       ignored-nodes: (if jazz-settings-version '() '(".jazz"))))
      (let ((repository (find-repository 'Profiles)))
        (let ((package-name unit)
              (package-path (concatenate (repository-library-directory repository) (format "{a}/.package" unit))))
          (repository-add-package repository (load-package repository #f package-name package-path)))))
    
    (let ((source (find-unit-source profile-class)))
      (when (not source)
        (install-new-profile name unit template)
        (set! source (find-unit-source profile-class)))
      (register-alias 'Profile (get-list (get-parent source)))))
  
  
  ;;;
  ;;;; Runtime
  ;;;
  
  
  (method public virtual (runtime-product self)
    (or (jazz-product) (current-process-product) 'jazz))
  
  
  (method public virtual (runtime-products self)
    '())
  
  
  (method public virtual (runtime-units self)
    (if profile-class
        (list profile-class)
      '()))
  
  
  (method public virtual (evaluation-processes self)
    (list (get-local-process)))
  
  
  (method public virtual (runtime-properties self)
    '())

  
  ;;;
  ;;;; User
  ;;;
  
  
  (method protected virtual (user-notification self wparam lparam)
    )
  
  
  ;;;
  ;;;; Toplevel
  ;;;
  
  
  (method public virtual (get-toplevel self)
    #f)
  
  
  ;;;
  ;;;; Quit
  ;;;
  

  (method public virtual (quit-process self (status 0))
    (unload-process self)
    (quit))
  
  
  (method public virtual (reboot-process self (status 0))
    (unimplemented 'reboot-process))
  

  (method public virtual (reload-process self)
    (send-event
      (lambda ()
        (parameterize ((*reloading-process?* #t))
          (unload-process self))
        @convert
        (continuation-graft quit-continuation boot-environment))))
  
  
  (method package (unload-process self)
    (parameterize ((*unloading-process?* #t))
      (preserve-environment self)
      (close-environment self)
      (terminate-process self)
      (set-current-process #f)))
  
  
  ;;;
  ;;;; Sleep
  ;;;
  
  
  (method public virtual (sleep-process self)
    )
  
  
  (method public virtual (wake-process self)
    )
  

  ;;;
  ;;;; Nicknames
  ;;;
  
  
  (method protected virtual (setup-nicknames self)
    (register-nickname :process (lambda () self))
    (register-nickname :profile (lambda () profile)))
  
  
  ;;;
  ;;;; Context
  ;;;
  
  
  (method public (get-context self)
    context)
  
  
  (method public (set-context self ctx)
    (set! context ctx)
    (context-update self))
  
  
  ;; Ugly hardcoding updates for now as the right approach
  ;; is not clear... Maybe the preferences setters do the
  ;; updates themselves or maybe objects interesseted in being
  ;; notified about preferences changes register themselves
  ;; for designer events that could be sent when the context is changed.
  (method protected virtual (context-update self)
    (define (modify-preferences)
      (let* ((pref (current-preferences #f))
             (designer (get-preferences-designer self))
             (trait (find-component pref context)))
        (set-active-trait pref trait)))
    
    (define (modify-connections)
      @wait
      (when (in-manifest? 'SQL-Connections-Manager)
        (modify-editor (get-guest (singleton-docked SQL-Connections-Manager)))))
    
    (define (modify-toolbox)
      @wait
      (when (in-manifest? 'Toolbox-Manager)
        (modify-editor (get-guest (singleton-docked Toolbox-Manager)))))
    
    (define (modify-editor editor)
      (let* ((client (get-client editor))
             (trait (find-component client context)))
        (set-active-trait client trait)
        (set-client editor #f)
        (set-client editor client)))
    
    (modify-preferences)
    (modify-connections)
    (modify-toolbox))
  
  
  (method public (install-context self component)
    (when context
      (let ((trait (find-child component context)))
        (when trait
          (set-active-trait component trait)))))
  
  
  ;;;
  ;;;; Forms
  ;;;
  
  
  (method protected virtual (former-class self)
    Former)
  
  
  ;;;
  ;;;; Preferences
  ;;;
  
  
  (method protected virtual (persist-preferences? self)
    #f)
  
  
  (method protected virtual (preferences-file self)
    {File Profile "settings" "Preferences.jml"})
  
  
  (method package virtual (setup-preferences self)
    (setup-preferences/designer self))
  
  
  (method (setup-preferences/designer self)
    (set-preferences/designer self (load-preferences self))
    (let ((root (current-preferences-root)))
      (define (preferences-context)
        (let ((arg (command-argument "context")))
          (cond (arg (string->symbol arg))
                (root (get-active-context root))
                (else #f))))
      
      (set! context (preferences-context))
      (install-context self root)
      (let ((directory (get-current-directory root)))
        (when (and directory (exists? directory))
          (current-directory-set! directory)))))
  
  
  (method (set-preferences/designer self preferences)
    (set! preferences-designer (new (former-class self) form: (get-form preferences) reference: preferences)))

  
  (method protected virtual (load-preferences self)
    (let ((persist? (persist-preferences? self))
          (file (preferences-file self)))
      (if (and persist? (is-alias? 'Profile) (exists? file))
          (instantiate (read-form file))
        (default-preferences self))))
  
  
  (method protected virtual (default-preferences self)
    (new Process-Preferences))
  
  
  (method public (apply-preferences self preferences (client #f))
    (apply-preferences preferences client))
  
  
  (method public (save-preferences self preferences (client #f))
    (save-preferences preferences (get-preferences-designer self) client))

  
  (method public (set-preferences-property self preferences property value)
    (set-property preferences (get-preferences-designer self) property value))
  
  
  (method public virtual (get-preferences-rights self)
    #f)
  
  
  ;;;
  ;;;; Persistence
  ;;;
  
  
  (method public virtual (persist-usernames? self)
    #f)
  
  
  (method public virtual (persist-passwords? self)
    #f)
  
  
  ;;;
  ;;;; Versions
  ;;;
  
  
  (method public virtual (mandatory-version self what)
    #f)

  
  ;;;
  ;;;; Readyness
  ;;;
  
  
  @windows-specific
  (method protected (signal-readyness name)
    (let ((handle (OpenEvent EVENT_MODIFY_STATE #f name)))
      (when handle
        (SetEvent handle))))

  
  ;;;
  ;;;; Loop
  ;;;
  
  
  (method public virtual (run-loop self)
    (continuation-capture
      (lambda (cont)
        (with-repl-context cont
          (lambda ()
            (with-current-loop
              (lambda ()
                (start-loop self))))))))
  
  
  (method public (invoke-resume-loop self)
    (let ((restart (find-restart 'resume-loop)))
      (when restart
        (invoke-restart restart))))


  (method public virtual (start-loop self)
    (declare (proper-tail-calls))
    (let (restart-loop)
      (with-restart-catcher 'resume-loop (present-current-loop-restart)
        (lambda ()
          (with-exception-debugger (get-exception-debugger)
            (lambda ()
              (thread-process-loop self)))))
      (restart-loop)))
  
  
  (method public virtual (thread-process-loop self (done? #f))
    (declare (proper-tail-calls))
    (let (loop)
      (thread-process)
      (unless (and done? (done?))
        (loop))))


  ;;;
  ;;;; System
  ;;;
  
  
  (method public virtual (system-title self)
    "JazzScheme")


  ;;;
  ;;;; Bindings
  ;;;
  
  
  (method protected virtual (prepare-bindings self)
    )


  ;;;
  ;;;; Aliases
  ;;;
  
  
  (method protected virtual (prepare-aliases self)
    )
  
  
  (method public virtual (prepare-preferences-aliases self)
    (let ((pref (current-preferences 'aliases error?: #f)))
      (when pref
        (let ((aliases (get-children pref)))
          (for-each (lambda (pref)
                      (let ((alias (get-alias pref))
                            (directory (get-directory pref)))
                        (when directory
                          (register-alias alias (get-list directory)))))
                    aliases)))))
  
  
  (method public virtual (resolve-alias self name)
    #f)


  ;;;
  ;;;; Workbench
  ;;;
  
  
  (method public virtual (prepare-workbench self)
    )
  
  
  ;;;
  ;;;; Servers
  ;;;
  
  
  (method (maybe-start-servers self)
    (when (start-servers? self)
      (start-servers self)))
  
  
  (method protected virtual (start-servers? self)
    ;; start now if listen is specified
    (receive (host service alternate-service) (listen-parameter)
      (or host service)))
  
  
  (method protected virtual (start-servers self)
    (start-remote-server self))
  
  
  (method package (start-remote-server self)
    (start-remote-presence purpose: 'debugging))
  
  
  (method protected virtual (stop-servers self)
    (stop-remote-presence purpose: 'debugging))


  ;;;
  ;;;; Stub
  ;;;
  
  
  (method public (get-name self)
    (process-name self))
  
  
  (method public (get-icon self)
    (process-icon self))
  
  
  (method public (get-register self)
    (get-local-register 'debugging))


  ;;;
  ;;;; Register
  ;;;
  
  
  (method protected virtual (register-base-objects self)
    )
  
  
  ;;;
  ;;;; Debuggers
  ;;;
  
  
  (method public virtual (get-local-debugger self)
    #f)
  
  
  (method public virtual (get-snapshot-debugger self)
    #f)
  
  
  ;;;
  ;;;; Debuggee
  ;;;
  
  
  (method package virtual (effective-transmit-runtime-what self what)
    what)
  
  
  (method public virtual (default-console-readtable self)
    jazz-readtable)
  
  
  (method public virtual (initial-console-context self)
    :process)
  
  
  (method package virtual (process-debuggee-loop self)
    (debuggee-loop))


  ;;;
  ;;;; Profile
  ;;;


  (method public virtual (get-remote-profile self name)
    #f)))
