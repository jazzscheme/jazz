;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Jazz Products
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module jazz.product jazz


(import (jazz.io))


;;;
;;;; Install
;;;


(definition protected (ignored-extensions source-access? scriptable?)
  (append '("c" "cpp" "m" "o" "dgs" "DS_Store")
          (if source-access? '() '("mnf"))
          (if (and scriptable? (not source-access?)) '() '("otl"))))


(cond-expand
  (cocoa
    (definition public (install-application descriptor destination (name: name #f) (bundle: bundle #f) (application?: application? #t) (executable?: executable? #t) (jazz?: jazz? #f) (source-access?: source-access? #f) (scriptable?: scriptable? #f) (platform?: platform? #f) (opengl?: opengl? #f) (git?: git? #f) (gstreamer?: gstreamer? #f) (files: files '()) (directories: directories '()) (metadata: metadata '()) (ignored-contents: ignored-contents #f) (ignored-macosx: ignored-macosx #f))
      (let ((src-root {Directory Build})
            (dst-root destination)
            (bundle (or bundle (product-descriptor-build-bundle descriptor))))
        (if (not bundle)
            (let ((src src-root)
                  (dst (new-directory dst-root name)))
              ;; lib
              (install-directory (new-directory src '("Libraries" "lib")) (new-directory dst '("Libraries" "lib"))
                filter: (let ((ignored-extensions (ignored-extensions source-access? scriptable?)))
                          (lambda (action pathname)
                            (not (and (file? pathname)
                                      (member? (get-extension pathname) ignored-extensions test: extension=?)))))
                feedback: (lambda (action pathname)
                            (build-feedback "; {a} {a}..." action (get-name pathname))))
              ;; files
              (for-each (lambda (file)
                          (install-file (new-file src file) (new-file dst file)
                            feedback: (lambda (action pathname)
                                        (build-feedback "; {a} {a}..." action (get-name pathname)))))
                        files))
          (let ((bundle-app (format "{a}.app" bundle)))
            (let ((src-app (new-directory src-root bundle-app))
                  (dst-app (new-directory dst-root (or name bundle-app)))
                  (platform-libraries '("libcairo.2.dylib"
                                        "libfontconfig.1.dylib"
                                        "libfreetype.6.dylib"
                                        "libpixman-1.0.dylib"
                                        "libpng16.16.dylib"))
                  (opengl-libraries '("libGLEW.dylib"))
                  (git-libraries '("libgit2.1.1.0.dylib")))
              (let ((src-contents (new-directory src-app '("Contents")))
                    (dst-contents (new-directory dst-app '("Contents"))))
                (let ((dst-macos (new-directory dst-contents '("MacOS")))
                      (src-libraries (new-directory src-root '("Libraries")))
                      (dst-libraries (new-directory dst-contents '("Libraries")))
                      (dst-resources (new-directory dst-contents '("Resources")))
                      (libraries (append (if platform? platform-libraries '())
                                         (if opengl? opengl-libraries '())
                                         (if git? git-libraries '()))))
                  ;; bundle
                  (install-directory src-contents dst-contents
                    filter: (lambda (action pathname)
                              (let ((parent-dir (get-parent pathname)))
                                (cond ((pathname=? parent-dir dst-contents)
                                       (and (not (and (eq? action 'delete)
                                                      (let ((filename (get-name pathname)))
                                                        (filename=? filename "Libraries"))))
                                            (not (and ignored-contents
                                                      (eq? action 'delete)
                                                      (let ((filename (get-name pathname)))
                                                        (member? filename ignored-contents test: filename=?))))))
                                      ((pathname=? parent-dir dst-macos)
                                       (not (and (eq? action 'delete)
                                                 (let ((filename (get-name pathname)))
                                                   (or (filename=? filename "lib")
                                                       (member? filename libraries test: filename=?)
                                                       (filename=? filename "gstreamer")
                                                       (and ignored-macosx
                                                            (member? filename ignored-macosx test: filename=?)))))))
                                      (else
                                       #t))))
                    feedback: (lambda (action pathname)
                                (build-feedback "; {a} {a}..." action (get-name pathname))))
                  ;; libraries
                  (for-each (lambda (library)
                              (install-file (new-file src-libraries library) (new-file dst-libraries library)
                                feedback: (lambda (action pathname)
                                            (build-feedback "; {a} {a}..." action (get-name pathname)))))
                            libraries)
                  ;; gstreamer
                  (when gstreamer?
                    (install-directory (new-directory src-libraries "gstreamer") (new-directory dst-libraries "gstreamer")
                      feedback: (lambda (action pathname)
                                  (build-feedback "; {a} {a}..." action (get-name pathname)))))
                  ;; lib
                  (install-directory (new-directory src-libraries "lib") (new-directory dst-libraries "lib")
                    filter: (let ((ignored-extensions (ignored-extensions source-access? scriptable?)))
                              (lambda (action pathname)
                                (not (and (file? pathname)
                                          (member? (get-extension pathname) ignored-extensions test: extension=?)))))
                    feedback: (lambda (action pathname)
                                (build-feedback "; {a} {a}..." action (get-name pathname))))
                  ;; files
                  (for-each (lambda (file)
                              (install-file (new-file src-root file) (new-file dst-root file)
                                feedback: (lambda (action pathname)
                                            (build-feedback "; {a} {a}..." action (get-name pathname)))))
                            files)
                  ;; directories
                  (for-each (lambda (dir)
                              (install-directory (new-directory src-root dir) (new-directory dst-root dir)
                                feedback: (lambda (action pathname)
                                            (build-feedback "; {a} {a}..." action (get-name pathname)))))
                            directories)
                  ;; metadata
                  (for-each (lambda (metadata)
                              (install-file (new-file src-root metadata) (new-file dst-resources metadata)
                                feedback: (lambda (action pathname)
                                            (build-feedback "; {a} {a}..." action metadata))))
                            metadata)
                  ;; jazz
                  (when jazz?
                    (install-file (new-file src-root "jazz") (new-file dst-macos "jazz")
                      feedback: (lambda (action pathname)
                                  (build-feedback "; {a} {a}..." action (get-name pathname)))))))))))))
  (windows
    (definition public (install-application descriptor destination (name: name #f) (application?: application? #t) (executable?: executable? #t) (jazz?: jazz? #f) (source-access?: source-access? #f) (scriptable?: scriptable? #f) (platform?: platform? #f) (opengl?: opengl? #f) (git?: git? #f) (gstreamer?: gstreamer? #f) (files: files '()) (directories: directories '()) (metadata: metadata '()) (ignored-contents: ignored-contents #f) (ignored-macosx: ignored-macosx #f))
      (let ((descriptor-name (product-descriptor-name descriptor)))
        (let ((src-root {Directory Build})
              (dst-root (if application? (new-directory destination (or name (->string descriptor-name))) destination))
              (platform-libraries '("bz2.dll"
                                    "libgcc_s_seh-1.dll"
                                    "libstdc++-6.dll"
                                    "libwinpthread-1.dll"
                                    "libcairo-2.dll"
                                    "libfontconfig-1.dll"
                                    "libfreetype-6.dll"
                                    "pixman-1-0.dll"
                                    "libexpat-1.dll"
                                    "libpng16-16.dll"
                                    "z-1.dll"))
              (opengl-libraries '("glew32.dll"))
              (git-libraries '("git2.dll"))
              (gstreamer-binaries '("gst-device-monitor-1.0.exe"
                                    "gst-discoverer-1.0.exe"
                                    "gst-inspect-1.0.exe"
                                    "gst-launch-1.0.exe"
                                    "gst-play-1.0.exe"
                                    "gst-typefind-1.0.exe"))
              (gstreamer-libraries '("avcodec-59.dll"
                                     "avfilter-8.dll"
                                     "avformat-59.dll"
                                     "avutil-57.dll"
                                     "bz2.dll"
                                     "ffi-7.dll"
                                     "gio-2.0-0.dll"
                                     "glib-2.0-0.dll"
                                     "gmodule-2.0-0.dll"
                                     "gobject-2.0-0.dll"
                                     "graphene-1.0-0.dll"
                                     "gstallocators-1.0-0.dll"
                                     "gstapp-1.0-0.dll"
                                     "gstaudio-1.0-0.dll"
                                     "gstbase-1.0-0.dll"
                                     "gstcodecparsers-1.0-0.dll"
                                     "gstd3d11-1.0-0.dll"
                                     "gstfft-1.0-0.dll"
                                     "gstgl-1.0-0.dll"
                                     "gstpbutils-1.0-0.dll"
                                     "gstreamer-1.0-0.dll"
                                     "gstriff-1.0-0.dll"
                                     "gstrtp-1.0-0.dll"
                                     "gsttag-1.0-0.dll"
                                     "gstvideo-1.0-0.dll"
                                     "intl-8.dll"
                                     "libjpeg-8.dll"
                                     "libogg-0.dll"
                                     "opus-0.dll"
                                     "orc-0.4-0.dll"
                                     "pcre2-8-0.dll"
                                     "libpng16-16.dll"
                                     "libvorbis-0.dll"
                                     "libvorbisenc-2.dll"
                                     "libx264-157.dll"
                                     "z-1.dll"
                                     "swresample-4.dll"
                                     "webrtc.dll"))
              (stream-libraries '("rnnoise.dll")))
          ;; appl
          (for-each (lambda (library)
                      (install-file (new-file src-root library) (new-file dst-root library)
                        feedback: (lambda (action pathname)
                                    (build-feedback "; {a} {a}..." action (get-name pathname)))))
                    (if executable? (list (format "{a}.exe" descriptor-name)) '()))
          ;; libraries
          (for-each (lambda (library)
                      (install-file (new-file src-root library) (new-file dst-root library)
                        feedback: (lambda (action pathname)
                                    (build-feedback "; {a} {a}..." action (get-name pathname)))))
                    ;; there is a clash for libpng16-16.dll that might be
                    ;; ok as is as the gstreamer version is more up-to-date
                    (append (if platform? platform-libraries '())
                            (if opengl? opengl-libraries '())
                            (if git? git-libraries '())
                            (if gstreamer? gstreamer-binaries '())
                            (if gstreamer? gstreamer-libraries '())
                            (if gstreamer? stream-libraries '())))
          ;; gstreamer
          (when gstreamer?
            (install-directory (new-directory src-root "gstreamer") (new-directory dst-root "gstreamer")
              feedback: (lambda (action pathname)
                          (build-feedback "; {a} {a}..." action (get-name pathname)))))
          ;; lib
          (install-directory (new-directory src-root "lib") (new-directory dst-root "lib")
            filter: (let ((ignored-extensions (ignored-extensions source-access? scriptable?)))
                      (lambda (action pathname)
                        (not (and (file? pathname)
                                  (member? (get-extension pathname) ignored-extensions test: extension=?)))))
            feedback: (lambda (action pathname)
                        (build-feedback "; {a} {a}..." action (get-name pathname))))
          ;; files
          (for-each (lambda (file)
                      (install-file (new-file src-root file) (new-file dst-root file)
                        feedback: (lambda (action pathname)
                                    (build-feedback "; {a} {a}..." action (get-name pathname)))))
                    files)
          ;; directories
          (for-each (lambda (dir)
                      (install-directory (new-directory src-root dir) (new-directory dst-root dir)
                        feedback: (lambda (action pathname)
                                    (build-feedback "; {a} {a}..." action (get-name pathname)))))
                    directories)
          ;; metadata
          (for-each (lambda (metadata)
                      (install-file (new-file src-root metadata) (new-file dst-root metadata)
                        feedback: (lambda (action pathname)
                                    (build-feedback "; {a} {a}..." action metadata))))
                    metadata)
          ;; jazz
          (when jazz?
            (install-file (new-file src-root "jazz.exe") (new-file dst-root "jazz.exe")
              feedback: (lambda (action pathname)
                          (build-feedback "; {a} {a}..." action (get-name pathname)))))))))
  (else
    (definition public (install-application descriptor destination (name: name #f) (application?: application? #t) (executable?: executable? #t) (jazz?: jazz? #f) (source-access?: source-access? #f) (scriptable?: scriptable? #f) (platform?: platform? #f) (opengl?: opengl? #f) (git?: git? #f) (gstreamer?: gstreamer? #f) (files: files '()) (directories: directories '()) (metadata: metadata '()) (ignored-contents: ignored-contents #f) (ignored-macosx: ignored-macosx #f))
      (let ((descriptor-name (product-descriptor-name descriptor)))
        (let ((src-root {Directory Build})
              (dst-root (if application? (new-directory destination (or name (->string descriptor-name))) destination))
              (platform-libraries '("libcairo.so.2"
                                    "libpixman-1.so.0"
                                    "libpng16.so.16"
                                    "libfontconfig.so.1"
                                    "libfreetype.so.6"
                                    "libbz2.so.1.0"
                                    "libz.so.1"))
              (opengl-libraries '("libGLEW.so.1.13"))
              (git-libraries '("libgit2.so.1.3"))
              (stream-libraries '() @wait '("librnnoise.so.0")))
          ;; appl
          (for-each (lambda (library)
                      (install-file (new-file src-root library) (new-file dst-root library)
                        feedback: (lambda (action pathname)
                                    (build-feedback "; {a} {a}..." action (get-name pathname)))))
                    (if executable?
                        (list (format "{a}" (capitalize (->string descriptor-name))))
                      '()))
          ;; libraries
          (for-each (lambda (library)
                      (install-file (new-file src-root library) (new-file dst-root library)
                        feedback: (lambda (action pathname)
                                    (build-feedback "; {a} {a}..." action (get-name pathname)))))
                    (append (if platform? platform-libraries '())
                            (if opengl? opengl-libraries '())
                            (if git? git-libraries '())
                            (if gstreamer? stream-libraries '())))
          ;; gstreamer
          (when gstreamer?
            (install-directory (new-directory src-root "gstreamer") (new-directory dst-root "gstreamer")
              feedback: (lambda (action pathname)
                          (build-feedback "; {a} {a}..." action (get-name pathname)))))
          ;; lib
          (install-directory (new-directory src-root "lib") (new-directory dst-root "lib")
            filter: (let ((ignored-extensions (ignored-extensions source-access? scriptable?)))
                      (lambda (action pathname)
                        (not (and (file? pathname)
                                  (member? (get-extension pathname) ignored-extensions test: extension=?)))))
            feedback: (lambda (action pathname)
                        (build-feedback "; {a} {a}..." action (get-name pathname))))
          ;; files
          (for-each (lambda (file)
                      (install-file (new-file src-root file) (new-file dst-root file)
                        feedback: (lambda (action pathname)
                                    (build-feedback "; {a} {a}..." action (get-name pathname)))))
                    files)
          ;; directories
          (for-each (lambda (dir)
                      (install-directory (new-directory src-root dir) (new-directory dst-root dir)
                        feedback: (lambda (action pathname)
                                    (build-feedback "; {a} {a}..." action (get-name pathname)))))
                    directories)
          ;; metadata
          (for-each (lambda (metadata)
                      (install-file (new-file src-root metadata) (new-file dst-root metadata)
                        feedback: (lambda (action pathname)
                                    (build-feedback "; {a} {a}..." action metadata))))
                    metadata)
          ;; jazz
          (when jazz?
            (install-file (new-file src-root "jazz") (new-file dst-root "jazz")
              feedback: (lambda (action pathname)
                          (build-feedback "; {a} {a}..." action (get-name pathname))))))))))


;;;
;;;; Deploy
;;;


(definition public (deploy-application descriptor installation-directory (make: make #f) (install: install #f) (deploy: deploy #f))
  (let ((jazz (string-append kernel-install "jazz"))
        (name (product-descriptor-name descriptor)))
    (let ((make (or make name))
          (install (or install name))
          (deploy (or deploy 'jas)))
      (feedback "Building {a}" make)
      (call-process
        (list
          path: jazz
          arguments: `("-make"
                       ,(symbol->string make))))
      (feedback "")
      (feedback "Installing {a}" install)
      (call-process
        (list
          path: jazz
          arguments: `("-install"
                       ,(symbol->string install))))
      (feedback "")
      (case deploy
        ((git)
         (deploy-git name installation-directory))
        (else
         (deploy-jas name installation-directory))))))


(definition public (deploy-git name dir)
  (feedback "Deploying {a}" name)
  (let ((dirname (parse dir)))
    (call-process
      (list
        path: "git"
        arguments: `("add" ".")
        directory: dirname))
    (call-process
      (list
        path: "git"
        arguments: `("commit" "-a" "-m" "Update" "--allow-empty")
        directory: dirname))
    (call-process
      (list
        path: (cond-expand
                (windows "C:\\Program Files\\Git\\bin\\git")
                (else "git"))
        arguments: `("push")
        directory: dirname))))


(definition public (deploy-jas name dir)
  (feedback "Deploying {a}" name)
  (let ((dirname (parse dir)))
    (call-process
      (list
        path: "jas"
        arguments: `("add" ".")
        directory: dirname))
    (call-process
      (list
        path: "jas"
        arguments: `("upload")
        directory: dirname)))))
