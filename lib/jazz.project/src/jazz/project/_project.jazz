;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Projects
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module jazz.project jazz


(hub activate-selection)
(hub add-directory)
(hub add-document)
(hub add-group)
(hub add-project)
(hub add-project-to)
(hub ascendant-project)
(hub build-current)
(hub catalog-name)
(hub child-add)
(hub child-remove)
(hub clean-current)
(hub collect-files)
(hub compile-current)
(hub concrete?)
(hub configure-current)
(hub contextualize-pathname)
(hub copy-left)
(hub copy-right)
(hub current-project)
(hub debug-current)
(hub debug-project)
(hub distribute-current)
(hub dynamic-component?)
(hub dynamic-project?)
(hub edit-current)
(hub edit-descriptor)
(hub edit-documentation)
(hub edit-selection)
(hub find-filename)
(hub find-project)
(hub find-project-by-file)
(hub find-project-by-identity)
(hub find-source)
(hub fold-projects)
(hub for-each-active-catalog)
(hub for-each-project)
(hub for-each-project-file)
(hub get-active-project)
(hub get-active-traits)
(hub get-active?)
(hub get-catalog)
(hub get-catalog-extensions)
(hub get-catalog-heuristics)
(hub get-description-file)
(hub get-directory)
(hub get-documentation)
(hub get-dynamic-projects)
(hub get-dynamic?)
(hub get-editable?)
(hub get-effective-dependencies-file)
(hub get-effective-dynamic-projects)
(hub get-effective-editable?)
(hub get-icon)
(hub get-include-extensions)
(hub get-manager)
(hub get-owner)
(hub get-parent-project)
(hub get-project)
(hub get-project-designer)
(hub get-sort?)
(hub get-source)
(hub get-title)
(hub get-tree)
(hub get-version)
(hub has-content?)
(hub import-pathnames)
(hub install-project)
(hub iterate-catalog-files)
(hub iterate-files)
(hub launch-selection)
(hub load-catalog)
(hub load-catalogs)
(hub load-catalogs-threaded)
(hub new-menu)
(hub no-action)
(hub on-selection-change)
(hub preprocess)
(hub preprocess-current)
(hub project-action)
(hub project-add)
(hub project-build)
(hub project-context)
(hub project-debug)
(hub project-depot)
(hub project-path)
(hub project-remove)
(hub project-run)
(hub project-test)
(hub project-title)
(hub project-validate)
(hub require-catalog)
(hub require-project)
(hub reset-workbench-active-catalogs)
(hub run-current)
(hub run-project)
(hub save-catalogs)
(hub save-designer)
(hub select-current)
(hub set-active?)
(hub set-catalog)
(hub set-editable?)
(hub set-icon)
(hub set-project-active?)
(hub set-sort?)
(hub set-source)
(hub set-title)
(hub set-version)
(hub test-current)
(hub update)
(hub update-buttons)
(hub update-catalogs)
(hub update-dynamic-dependencies)
(hub update-selection)
(hub validate)
(hub validate-current)
(hub validate-project)


(export (jazz.project.autoload))
(import (jazz.catalog)
        (jazz.editor.lisp)
        (jazz.io)
        (jazz.preferences)
        (jazz.ui.dialog))


;;;
;;;; Kernel
;;;


(definition public (find-kernel destination)
  (let ((dir (destination-directory #f destination kernel-source)))
    (new File (tokenise-filename (concatenate dir (add-extension "jazz" (executable-extension kernel-platform)))))))


(definition public (require-kernel destination)
  (let ((kernel (find-kernel destination)))
    (if (exists? kernel)
        kernel
      (error "Unable to find kernel: {a}" destination))))


(definition public (find-actual-kernel)
  (let ((filename (concatenate (or kernel-bundle-root kernel-install) (add-extension "jazz" (executable-extension kernel-platform)))))
    (new File (tokenise-filename filename))))


(definition public (require-actual-kernel)
  (let ((kernel (find-actual-kernel)))
    (if (exists? kernel)
        kernel
      (error "Unable to find kernel"))))


(definition public (choose-kernel)
  (choose-file
    title: "Choose Jazz Executable"
    extensions: (list (executable-extension kernel-platform))))


(definition public (launch-executable executable (directory: directory #f) (runtime-arguments: runtime-arguments #f) (arguments: arguments #f) (show-console?: show-console? #f) (wait?: wait? #f))
  (let* ((runtime-arg   (or runtime-arguments '()))
         (arguments-arg (or arguments '()))
         (arguments     (append runtime-arg arguments-arg)))
    @debug
    (debug executable directory arguments)
    (open-process
      (list
        path: (parse executable)
        directory: (and directory (parse directory))
        arguments: arguments
        ;; this is not yet quite what we want as an access to the terminal
        ;; will not dynamically show the console when using show-console: #f
        stdin-redirection: #f
        stdout-redirection: #f
        stderr-redirection: #f
        show-console: show-console?))))


;;;
;;;; Repositories
;;;


(definition *active-repositories*
  #f)


(definition (get-active-repositories)
  *active-repositories*)


(definition (set-active-repositories repositories)
  (set! *active-repositories* repositories))


;;;
;;;; Workbench
;;;


(definition *active-workbench*
  #f)


(definition public (get-workbench)
  *active-workbench*)


(definition public (set-workbench workbench)
  (set! *active-workbench* workbench))


;;;
;;;; Project
;;;


(definition *active-project*
  #f)


(definition public (active-project)
  *active-project*)


(definition public (active-project-set! project)
  (set! *active-project* project))


(definition public (collect-concrete-projects project)
  (let ((projects (new-queue)))
    (for-each-project project
      (lambda (file)
        (when (concrete? file)
          (enqueue projects file))))
    (queue-list projects)))


;;;
;;;; New Project
;;;


(definition *project-kinds*
  '(<kinds>
     (<kind>     name: "Empty"       kind: project template: "empty" empty?: #t)
     (<kind>     name: "Gambit"      kind: project template: "gambit")
     (<kind>     name: "Jazz"        kind: project template: "jazz/empty"
       (<kind>   name: "Repository"  kind: project template: "jazz/repository")
       (<kind>   name: "Package"     kind: project template: "jazz/package")
       (<kind>   name: "Process"     kind: project template: "jazz/process")
       (<kind>   name: "Application" kind: project template: "jazz/application/empty"
         (<kind> name: "Standard"    kind: project template: "jazz/application/standard")))))


(definition public (get-project-kinds)
  *project-kinds*)

(definition public (set-project-kinds kinds)
  (set! *project-kinds* kinds))


(definition *project-directory*
  {Directory Settings "projects" "lib"})


(definition public (get-project-directory)
  *project-directory*)

(definition public (set-project-directory dir)
  (set! *project-directory* dir))


;;;
;;;; New Document
;;;


(definition *document-kinds*
  '(<kinds>
     (<kind>     name: "Scheme"      kind: scheme     template: "scheme/New.scm")
     (<kind>     name: "Jazz"        kind: jazz       template: "jazz/New.jazz"
       (<kind>   name: "Unit"        kind: jazz       template: "jazz/NewUnit.jazz")
       (<kind>   name: "Module"      kind: jazz       template: "jazz/NewModule.jazz"
         (<kind> name: "Class"       kind: jazz       template: "jazz/NewClass.jazz")
         (<kind> name: "Interface"   kind: jazz       template: "jazz/NewInterface.jazz"))
       (<kind>   name: "Script"      kind: jazz       template: "jazz/NewScript.jazz"))
     (<kind>     name: "Common Lisp" kind: lisp       template: "lisp/New.lisp")
     (<kind>     name: "C/C++"
       (<kind>   name: "Header"      kind: c          template: "c/NewHeader.h")
       (<kind>   name: "C Source"    kind: c          template: "c/NewC.c")
       (<kind>   name: "C++ Source"  kind: c          template: "c/NewCpp.cpp"))
     (<kind>     name: "Java"        kind: java       template: "java/New.java"
       (<kind>   name: "Class"       kind: java       template: "java/NewClass.java"))
     (<kind>     name: "SQL"         kind: sql        template: "sql/New.sql")
     (<kind>     name: "Text"        kind: text       template: "text/New.txt")))


(definition public (get-document-kinds)
  *document-kinds*)

(definition public (set-document-kinds kinds)
  (set! *document-kinds* kinds))


;;;
;;;; Locator
;;;


(definition public ignore-outlines?
  (make-parameter #f))


(definition public (unit->entry unit)
  (let ((cataloguer (get-cataloguer)))
    (let ((entry (get-definition cataloguer unit)))
      (and (is? entry Lisp-Entry)
           (memq? (get-kind entry) '(block unit module))
           (or (not ignore-outlines?)
               (not (extension=? (get-extension (get-file (get-file-definition entry))) "otl")))
           entry))))


(definition public (unit->file unit)
  (let ((entry (unit->entry unit)))
    (and entry
         (get-file (get-file-definition entry)))))


(definition public (locator->entry locator)
  (bind (unit . path) (split-reference locator)
    (let ((unit-entry (unit->entry unit)))
      (and unit-entry
           (child unit-entry path)))))


(definition public (locator->location locator)
  (let ((entry (locator->entry locator)))
    (and entry
         (let ((file (parse (get-file (get-file-definition entry))))
               (line (get-line entry))
               (column (get-column entry)))
           (list file line column)))))


(definition public (container->file container)
  (cond ((file? container)
         container)
        ((string? container)
         (new File (tokenise-filename container)))
        ((symbol? container)
         (unit->file container))
        (else
         #f)))


(definition public (locat->file/line/col locat)
  (bind (container line col) (locat->container/line/col locat)
    (let ((file (container->file container)))
      (and file
           (list file line col)))))


;;;
;;;; Preferences
;;;


(definition (build-preferences)
  (current-preferences 'build)))
