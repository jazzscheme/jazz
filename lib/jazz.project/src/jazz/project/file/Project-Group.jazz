;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Project Groups
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2012
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.project.file.Project-Group jazz


(import (jazz.jml)
        (jazz.library)
        (jazz.project))


(class Project-Group extends Group implements Project-Container
  
  
  (form
    (<install> sort?: #f))
  
  
  (method override (print output readably)
    (print-unreadable self output
      (lambda (output)
        (format output "{a}"
          (catalog-name)))))


  ;;;
  ;;;; Name
  ;;;
  
  
  (method override (catalog-name)
    (if title
        (string->symbol title)
      name))
  
  
  ;;;
  ;;;; Descriptor
  ;;;
  
  
  (method meta override (get-class-descriptor)
    (new Project-Group-Descriptor)))


;;;
;;;; Design
;;;


(submodule design


(import (jazz.designer))


(class Project-Group-Descriptor extends Group-Descriptor
  
  
  (form
    (<install>       can-cut?: #f can-copy?: #f can-paste?: #f can-relocate?: #f
      (<properties~>)))
  
  
  (method override (class-presentation->name class presentation)
    presentation)
  
  
  (method override (class-name->presentation class name)
    name)
  
  
  (method override (component-sort-components component predicate components)
    (sort nu<? components key: (lambda (component)
                                 (cons (if (is? component Project-Group) 0 1)
                                       (get-presentation-property~ component)))))
  
  
  (method override (component-addable-class? component class)
    (or (subtype? class Project-File)
        (subtype? class Project-Group)))
  
  
  (method override (component-get-categorized-addable-classes component)
    (list (list (reference Project-Group)))))))
