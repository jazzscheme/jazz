;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Project Catalogs
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2012
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.project.project.Project-Catalog jazz


(import (jazz.catalog))


(class Project-Catalog extends Filing-Catalog
  
  
  (slot project getter generate)
  
  
  (method override (initialize project . rest)
    (apply nextmethod rest)
    (set! project~self project))
  

  ;;;
  ;;;; Access
  ;;;
  
  
  (method override (get-active?)
    (get-active?~ project))
  
  
  (method override (get-extensions)
    (get-catalog-extensions~ project))
  
  
  (method override (get-heuristics)
    (get-catalog-heuristics~ project))


  ;;;
  ;;;; Load
  ;;;
  
  
  (method override (setup-content)
    (define (setup-contexts)
      (let ((context (project-context~ project)))
        (iterate-content
          (lambda (key file-entries)
            (for-each (lambda (file-entry)
                        (let ((file (get-file~ file-entry)))
                          (when (context-alias?~ file)
                            (set-context~ file context))))
                      file-entries)))))
    
    (nextmethod)
    (setup-contexts))


  ;;;
  ;;;; Files
  ;;;
  
  
  (method override (iterate-files proc)
    (iterate-catalog-files~ project proc))))
