;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Projects
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2012
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.project.project.Project jazz


(import (jazz.debugger)
        (jazz.designer)
        (jazz.git)
        (jazz.io)
        (jazz.jml)
        (jazz.library)
        (jazz.library.component)
        (jazz.project)
        (jazz.system)
        (jazz.ui.view))


(class Project extends Project-File implements Project-Container
  
  
  (property title              initialize #f accessors generate)
  (property icon               initialize #f accessors generate)
  (property owner              initialize #f accessors generate)
  (property copyright          initialize #f accessors generate)
  (property version            initialize #f accessors generate)
  (property include-extensions initialize #f accessors generate)
  (property documentation      initialize #f accessors generate)
  (property editable?                        accessors generate)
  (property active?            initialize #t accessors generate)
  (property catalog-extensions initialize #f accessors generate)
  (property catalog-heuristics initialize #f accessors generate)
  (property description-file   initialize #f accessors generate)
  (property depot-directory    initialize #f accessors generate)
  (property active-project     initialize #f accessors generate)
  (property active-traits      initialize #f accessors generate)
  (property dynamic?           initialize #f accessors generate)
  
  
  (slot catalog          initialize #f accessors generate)
  (slot depot            initialize #f accessors generate)
  (slot dynamic-projects initialize #f accessors generate)
  
  
  (property deprecated catalog? initialize #t accessors generate)
  
  
  (form
    (<install> build?: #f))
  
  
  (method override (print output readably)
    (print-unreadable self output
      (lambda (output)
        (format output "{a}" (project-title)))))
  
  
  (method override (finish rest)
    (nextmethod rest)
    (update-dynamic-projects))
  
  
  (method (update-dynamic-projects)
    (define (get-dynamic-file)
      (let ((project-file (get-origin~ (get-form))))
        (new-brother~ project-file ".dependencies")))
    
    (define (make-dynamic-project-file data)
      (bind (name branch) data
        (new-file~ {Directory Home "dep" "src"} (list (->string name) (->string branch) ".project"))))
    
    (define (make-dynamic-project-name data)
      (bind (name branch) data
        (string->symbol (string-append (->string name) "-" (->string branch)))))
    
    (define (make-root-name dynamic-file)
      (let ((name (get-name~ (get-parent~ (get-parent~ dynamic-file))))
            (branch (get-name~ (get-parent~ dynamic-file))))
        (string->symbol (string-append name "-" branch))))
    
    (define (no-dependencies name)
      (let ((form
              (<form>
                (<Project-Not-Found>))))
        (let ((title (format "No dependencies for {a}" name)))
          (set-property~ form 'title title)
          form)))
    
    (define (not-found-handler ref name)
      (let ((form
              (<form>
                (<Project-Not-Found>))))
        (let ((title
                (catch (Unknown-Alias-Exception exc
                         (get-message~ exc))
                  (format "{a} not found" (parse~ ref)))))
          (set-property~ form 'title title)
          (set-name~ form name)
          form)))
    
    (when dynamic?
      (assert (not (and (is? parent Project) (get-dynamic?~ parent))))
      (let ((dynamic-file (get-dynamic-file)))
        (let ((root-name (make-root-name dynamic-file)))
          (set-name root-name)
          (let ((added-projects (if (exists?~ dynamic-file)
                                    (map (lambda (data)
                                           (with-exception-catcher
                                             (lambda (exc)
                                               (instantiate~ (not-found-handler dynamic-file #f) parent: self))
                                             (lambda ()
                                               (let ((file (make-dynamic-project-file data))
                                                     (name (make-dynamic-project-name data)))
                                                 (cond ((eq? root-name name)
                                                        )
                                                       ((exists?~ file)
                                                        (instantiate-file file parent: self name: name))
                                                       (else
                                                        (instantiate~ (not-found-handler file name) parent: self)))))))
                                         (call-with-input-file (parse~ dynamic-file) read))
                                  (list (instantiate~ (no-dependencies root-name) parent: self)))))
            (set! dynamic-projects added-projects))))))
  
  
  (method public (dynamic-project?)
    (and parent (is? parent Project) (get-dynamic?~ parent) (memq? self (get-dynamic-projects~ parent))))
  
  
  (method public (get-effective-dynamic-projects)
    (or dynamic-projects
        (let ((parent (get-parent)))
          (if (is? parent Project)
              (get-effective-dynamic-projects~ parent)
            '()))))
  
  
  (method public (get-effective-dependencies-file)
    ;; direct dependencies are in the description file
    ;; flattened .dependencies is created in the same directory
    (if dynamic-projects
        (new-brother~ description-file ".dependencies")
      (when (is? parent Project)
        (get-effective-dependencies-file~ parent))))
  
  
  (method public (update-dynamic-dependencies)
    (define (get-static-data project-path project-name)
      (let ((repository (load-repository (parse~ project-path))))
        (map (lambda (dependencies)
               (cons project-name dependencies))
             (or (repository-dependencies repository)
                 '()))))
    
    (let ((processed-dependencies (make-table))
          (root-path (get-parent~ description-file)))
      ;; kernel needs root repository
      (let ((lst (get-list~ root-path)))
        (let ((len (length lst)))
          (assert (> len 2))
          (let ((name (string->symbol (element lst (- len 2))))
                (branch (string->symbol (element lst (- len 1)))))
            (table-set! processed-dependencies name branch))))
      ;; flatten repository dependencies
      (let (iter (static-data (get-static-data root-path (project-title))))
        (let ((added-data '()))
          (for-each (lambda (data)
                      (bind (source name branch) data
                        (let ((found (table-ref processed-dependencies name #f)))
                          (if found
                              (when (not (equal? found branch))
                                (error "Branch mismatch for {a}: using {a} but {a} requires {a}" name found source branch))
                            (table-set! processed-dependencies name branch)
                            (let ((repository-dir (new-directory~ {Directory Home "dep" "src"} (list (->string name) (->string branch)))))
                              (set! added-data (append added-data (get-static-data repository-dir name))))))))
                    static-data)
          (when (not-null? added-data)
            (iter added-data))))
      ;; sorted output to .dependencies
      (let ((sorted (map (lambda (name)
                           (list name (table-ref processed-dependencies name #f)))
                         (sort nu<? (table-keys processed-dependencies))))
            (dependencies-file (get-effective-dependencies-file)))
        (call-with-output-file (path-settings dependencies-file char-encoding: 'UTF-8)
          (lambda (output)
            (cond ((or (null? sorted) (null? (cdr sorted)))
                   (write sorted output)
                   (newline output))
                  (else
                   (format output "({a}" (car sorted))
                   (for-each (lambda (dependency)
                               (format output "{%} {a}" dependency))
                             (cdr sorted))
                   (format output "){%}"))))))))
  
  
  ;;;
  ;;;; Access
  ;;;
  
  
  (method public virtual (project-title)
    (or title (if name
                  (symbol->string name)
                "<project>")))
  
  
  (method public (get-parent-project)
    (find-ascendant Project))
  
  
  ;;;
  ;;;; Concrete
  ;;;
  
  
  (method public virtual (concrete?)
    #f)
  
  
  ;;;
  ;;;; Context
  ;;;
  
  
  (method public (project-context)
    (get-context~ (get-data~ (get-file-form))))
  
  
  (method public (contextualize-pathname pathname)
    (let ((context (project-context)))
      (if (not context)
          pathname
        (let ((subpath (subpath~ (new File (get-path~ context)) pathname)))
          (if (not subpath)
              pathname
            (let ((context-pathname (new (class-of pathname) (cons :context subpath))))
              (set-context~ context-pathname context)
              context-pathname))))))
  
  
  ;;;
  ;;;; Name
  ;;;
  
  
  (method override (catalog-name)
    (if title
        (string->symbol title)
      name))
  
  
  ;;;
  ;;;; Catalog
  ;;;
  
  
  (method public (save-catalogs)
    (for-each-active-catalog save~))
  
  
  (method public (load-catalogs (include-inactives?: include-inactives? #f))
    (for-each-project load-catalog~))
  
  
  (method public (load-catalog)
    (require-catalog))
  
  
  (method public (require-catalog (report?: report? #f))
    (define (create/register-catalog)
      (let ((cataloguer (get-cataloguer~ (get-application)))
            (catalog-file (catalog-output))
            (name (catalog-name)))
        (or (find-if (lambda (catalog) (compare-pathname~ catalog-file (get-file~ catalog)))
                     (find-catalogs~ cataloguer name))
            (let ((catalog (create-catalog)))
              (add-catalog~ cataloguer catalog)
              catalog))))
    
    (unless catalog
      (set! catalog (create/register-catalog)))
    (load-content~ catalog report?: report?)
    catalog)
  
  
  (method (create-catalog)
    (new Project-Catalog self (catalog-name) (catalog-output) #f #f #f #f #t))
  
  
  (method protected virtual (catalog-output-base)
    (let (iterate (project self)
                  (name (catalog-name)))
      (let ((parent (get-parent~ project)))
        (if (or (not parent)
                (is? parent Workbench)
                (dynamic-project?~ project))
            name
          (iterate parent (format "{a}${a}" (catalog-name~ parent) name))))))
  
  
  (method protected virtual (catalog-output)
    (new File (list 'Profile "catalogs" (format "{a}.jcat" (catalog-output-base)))))
  
  
  (method package (has-content?)
    (not-null? children))
  
  
  (method public (for-each-active-catalog proc)
    (let ((processed-catalogs (make-table))
          (processed? #f))
      (for-each-project
        (lambda (project)
          (set! processed? #t)
          (when (get-active?~ project)
            (let ((catalog (require-catalog~ project report?: #t)))
              (let ((key (parse~ (get-file~ catalog))))
                (when (not (table-ref processed-catalogs key #f))
                  (table-set! processed-catalogs key #t)
                  (set! processed? #f)
                  (proc catalog))))))
        stop-test: (lambda (project)
                     processed?))))


  ;;;
  ;;;; Editable
  ;;;
  
  
  (method public virtual (get-effective-editable?)
    (if (unspecified? editable?)
        (get-effective-editable?~ (get-parent-project))
      editable?))


  ;;;
  ;;;; Content
  ;;;
  
  
  (method public (for-each-project proc (include-self?: include-self? #t) (include-inactives?: include-inactives? #f) (include-groups?: include-groups? #f) (stop-test: stop-test #f))
    (define (inactive? project)
      (and (not include-inactives?)
           (neq? project self)
           (is? project Project)
           (not (get-active?~ project))))
    
    (for-each-descendant
      (lambda (descendant level)
        (when (or (and (is? descendant Project)
                       (not (inactive? descendant)))
                  (and include-groups?
                       (is? descendant Project-Group)))
          (proc descendant)))
      include-self?: include-self?
      stop-test: (lambda (descendant)
                   (or (inactive? descendant)
                       (and stop-test
                            (stop-test descendant))))))
  
  
  (method public (fold-projects proc seed (include-inactives?: include-inactives? #f) (include-groups?: include-groups? #f))
    (define (fold x f s)
      (let ((ps (if (or (and (is? x Project)
                             (or include-inactives?
                                 (get-active?~ x)))
                        (and include-groups?
                             (is? x Project-Group)))
                    (f x s)
                  s)))
        (if (eq? ps :skip)
            #f
          (for-each (lambda (c)
                      (fold c f ps))
                    (get-children~ x))
          ps)))
    
    (fold self proc seed))


  ;;;
  ;;;; Projects
  ;;;
  
  
  (method public (project-path)
    (let (iterate (project self)
                  (path (->string (catalog-name))))
      (let ((parent (get-parent~ project)))
        (if (or (not parent)
                (is? parent Workbench))
            (string->symbol path)
          (iterate parent (format "{a}:{a}" (catalog-name~ parent) path))))))
  
  
  (method public (find-project name (use-name?: use-name? #t) (include-inactives?: include-inactives? #f) (error?: error? #t))
    (define (find project path)
      (cond ((not project)
             (when error?
               (error "Unable to find project: {s}" name)))
            ((null? path)
             project)
            ((symbol? path)
             (let ((project (find-if (lambda (child)
                                       (or (eq? (catalog-name~ child) path)
                                           (and use-name? (eq? (get-name~ child) path))))
                                     (get-children~ project))))
               (when (or (is-not? project Project)
                         include-inactives?
                         (get-active?~ project))
                 project)))
            ((pair? path)
             (find (find project (car path)) (cdr path)))
            (else
             #f)))
    
    (find self (split-symbol name #\:)))
  
  
  (method public (require-project name)
    (or (find-project name)
        (error "Unable to find project: {a}" name)))


  ;;;
  ;;;; Files
  ;;;
  
  
  (method public (for-each-file proc (type Project-File))
    (for-each-descendant
      (lambda (descendant level)
        (when (is? descendant type)
          (proc descendant)))))


  (method public (collect-files (type Project-File))
    (let ((fact (new List-Factory)))
      (for-each-file
        (lambda (file)
          (when (is? file type)
            (put~ fact file))))
      (get-output~ fact)))
  
  
  (method public (fold-files proc seed (type Project-File))
    (define (fold x f s)
      (let ((ps (if (is? x type)
                    (f x s)
                  s)))
        (if (eq? ps :skip)
            #f
          (for-each (lambda (c)
                      (fold c f ps))
                    (get-children~ x))
          ps)))
    
    (fold self proc seed))
  
  
  (method public (iterate-files proc (extensions: extensions #f))
    (fold-files
      (lambda (project-file seed)
        (if (and (neq? project-file self) (is? project-file Project))
            :skip
          (let ((file (get-source~ project-file)))
            (when file
              (let ((ext (get-extension~ file)))
                (when (or (not extensions) (member? ext extensions test: extension=?))
                  (proc file)))))))
      #f))
  
  
  (method public (iterate-catalog-files proc)
    (iterate-files proc extensions: (effective-catalog-extensions catalog-extensions)))


  ;;;
  ;;;; Name
  ;;;
  
  
  (method public virtual (project-name)
    )


  ;;;
  ;;;; Action
  ;;;
  
  
  (method public virtual (project-action . rest)
    (message-box "This project doesn't define a project-action method"))


  ;;;
  ;;;; Run
  ;;;
  
  
  (method public virtual (project-run . rest)
    (message-box "This project doesn't define a project-run method"))
  
  
  (method public virtual (run-arguments)
    #f)


  ;;;
  ;;;; Debug
  ;;;
  
  
  (method public virtual (project-debug . rest)
    (message-box "This project doesn't define a project-debug method"))
  
  
  (method public virtual (debug-arguments)
    #f)


  ;;;
  ;;;; Test
  ;;;


  (method public virtual (project-test . rest)
    (message-box "This project doesn't define a project-test method"))


  ;;;
  ;;;; Validate
  ;;;
  
  
  (method public virtual (project-validate . rest)
    (message-box "This project doesn't define a project-validate method"))


  ;;;
  ;;;; Build
  ;;;


  (method public virtual (project-build)
    (message-box "This project doesn't define a project-build method"))


  ;;;
  ;;;; Clean
  ;;;


  (method public virtual (project-clean)
    (message-box "This project doesn't define a project-clean method"))
  
  
  ;;;
  ;;;; Depot
  ;;;
  
  
  (method public (project-depot)
    (or depot (and depot-directory (begin
                                     (set! depot (new Git-Depot depot-directory))
                                     depot))))
  
  
  ;;;
  ;;;; Descriptor
  ;;;
  
  
  (method meta override (get-class-descriptor (context: context #f))
    (new Project-Descriptor)))


;;;
;;;; Design
;;;


(submodule design


(import (jazz.designer)
        (jazz.ui))


(class Project-Descriptor extends Project-File-Descriptor
  
  
  (form
    (<install>                                          image: {Image-Resource "Project"}
      (<properties~>
        (<Property-Descriptor> name: title
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: icon
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: owner
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: copyright
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: version
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: include-extensions
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: documentation
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: editable?
          (<Boolean-Domain>    name: domain))
        (<Property-Descriptor> name: active?
          (<Boolean-Domain>    name: domain))
        (<Property-Descriptor> name: catalog-extensions
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: catalog-heuristics
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: description-file
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: catalog?
          (<Boolean-Domain>    name: domain)))))
  
  
  (method override (component-presentation-property? component property)
    (memq? (field-name property) '(title)))
  
  
  (method override (component-get-presentation component)
    (let ((title (project-title~ component))
          (traits (get-default-traits~ component)))
      (if (not traits)
          title
        (format "{a}{a}" title (present-process-traits traits)))))
  
  
  (method override (component-set-presentation component designer presentation)
    (set-property~ designer component title: presentation))
  
  
  (method override (component-get-component-image component)
    (let ((description-file (get-description-file~ component)))
      (cond ((not description-file) (nextmethod component))
            ((filename=? (get-name~ description-file) ".repository") {Image-Resource "CompareManager"})
            ((filename=? (get-name~ description-file) ".package") {Image-Resource "Catalog"})
            (else (nextmethod component)))))
  
  
  (method override (component-addable-class? component class)
    (or (subtype? class Project-File)
        (subtype? class Project-Group)))
  
  
  (method override (component-get-categorized-addable-classes component)
    (list
      (list
        (reference Project-Group))
      ;#f
      ;Jazz-File
      ;C-File
      ))
    
  
  (method override (component-property-domain component property)
    (case (field-name property)
      ((title) (new Localized-Domain))
      ((include-extensions catalog-extensions catalog-heuristics) (new Value-Domain))
      ((documentation) (new File-Domain))
      ((active?) (new Boolean-Domain))
      (else (nextmethod component property)))))))
