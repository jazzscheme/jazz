;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Repositories Manager
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.project.repositories.Repositories-Manager jazz


(import (jazz.action)
        (jazz.application)
        (jazz.event)
        (jazz.feedback)
        (jazz.handler)
        (jazz.ide)
        (jazz.io)
        (jazz.jml)
        (jazz.menu)
        (jazz.outline)
        (jazz.process)
        (jazz.project)
        (jazz.resource)
        (jazz.template)
        (jazz.tree)
        (jazz.ui)
        (jazz.ui.dialog)
        (jazz.view))


(class Repositories-Manager extends Layout-View


  (form
    (<install>                                           layout-type: fill
      (<Layout-View>                name: tools)
      (<Scroller-View>              name: scroller       vscroll?: #t hscroll?: #t style: tool
        (<!>                        name: content        layout-type: fill
          (<Tree-Header>            name: header         shown?: #f
            (<!>                    name: content
              (<Tree-View>          name: repositories   portfolio: :images show-header?: #f multiple-selection?: #t context-menu-handler: {Event-Handler :form on-context-menu}
                (<Tree-Node-Column>                      title: "Repositories" width: 329))))))))
  
  
  (method meta override (external-name self . rest)
    'Repositories)

  
  ;;;
  ;;;; Host
  ;;;
  
  
  (method meta override (host-icon self)
    {Image-Resource "Repositories"})
  
  
  (method meta override (host-title self)
    "Repositories")
  
  
  (method override (install-in-host self host)
    (setup-repositories self))
  
  
  (method (setup-repositories self)
    (update self))
  
  
  ;;;
  ;;;; Docked
  ;;;
  
  
  (method override (get-tools-view self)
    (locate self 'tools))
  
  
  (method override (focus-default self)
    (let ((tree (get-tree self)))
      (acquire-focus tree)))

  
  ;;;
  ;;;; Access
  ;;;
  
  
  (method package (get-tree self)
    (locate self 'repositories))

  
  ;;;
  ;;;; Update
  ;;;
  
  
  (method package (update self)
    (let ((tree (get-tree self)))
      (remove-every-row tree)
      (with-update-locked tree
        (lambda ()
          (let ((repositories-row (add-row tree state: 'expanded children: (list (new Tree-Node title: "Repositories" image: {Image-Resource "Repositories"})) user-data: #f)))
            (for-each (lambda (repository)
                        (add-repository self tree repositories-row 'collapsed repository))
                      (repositories-get)))))))
  
  
  (method (add-repository self tree father state repository)
    (let ((name (repository-name repository)))
      (let ((title (->string name))
            (image {Image-Resource "Repository"}))
        (let ((repository-row (add-row tree father: father state: state children: (list (new Tree-Node title: title image: image)) user-data: repository)))
          (for-each (lambda (package)
                      (add-package self tree repository-row package))
                    (sort string<? (repository-packages repository) key: (lambda (package) (->string (package-name package)))))
          repository-row))))
  
  
  (method (add-package self tree father package)
    (let ((name (package-name package))
          (file (package-project-file package)))
      (let ((title (->string name))
            (image (cond ((not file) {Image-Resource "NoProjectPackage"})
                         ((find-project-by-file (get-workbench) file) {Image-Resource "Package"})
                         (else {Image-Resource "UninstalledPackage"}))))
        (add-row tree father: father children: (list (new Tree-Node title: title image: image)) user-data: package))))
  
  
  ;;;
  ;;;; Repositories
  ;;;

  
  (method (on-new-repository self evt)
    (receive (directory dirname name) (get-modal New-Repository-Dialog directory: (current-directory-get))
      (let ((template (new-directory (templates-directory (get-application)) "repository"))
            (destination directory)
            (effective-name (if (empty-string? name) dirname name)))
        (let ((associations (list (cons 'dirname dirname) (cons 'name effective-name))))
          (copy-template template destination associations)
          (install/add-repository self (new-directory directory dirname))))))
  
  
  (method (on-register-repository self evt)
    (define (load-repository-name file)
      (call-with-input-file (path-settings file)
        (lambda (input)
          (let ((form (read input)))
            (cadr form)))))
    
    (let ((dir (choose-directory)))
      (let ((repository-file (new-file dir ".repository")))
        (if (exists? repository-file)
            (let ((name (load-repository-name repository-file)))
              (if (find-repository name)
                  (message-box (format "A repository with this name is already registered: {a}" name))
                (install/add-repository self dir)))
          (message-box "Unable to find \".repository\" file")))))
  
  
  (method (install/add-repository self dir)
    (let ((tree (get-tree self))
          (repositories-row (selected-row self))
          (repository (install-repository (parse dir))))
      (let ((repository-row (add-repository self tree repositories-row 'expanded repository)))
        (ensure-expanded tree repository-row)
        (set-single-selection tree (row->line tree repository-row)))))
  
  
  (definition (system-repository? repository)
    (memq? (repository-name repository) '(Build Jazz)))
  
  
  ;;;
  ;;;; Repository
  ;;;
  
  
  (method (on-edit-repository self evt)
    (for-each (~ edit-repository self) (selected-objects self)))
  
  
  (method (edit-repository self repository)
    (let ((dir (new Directory (tokenise-filename (repository-directory repository)))))
      (edit-document (get-application) (new-file dir ".repository"))))
  
  
  (method (on-new-package self evt)
    (receive (repository package) (get-modal New-Package-Dialog repository: (selected-object self))
      (let* ((package-name (string->symbol package))
             (package-parts (map ->string (split-identifier package-name)))
             (product (last package-parts))
             (project (capitalize product))
             (template (new-directory (templates-directory (get-application)) "package"))
             (directory (new Directory (tokenise-filename (repository-library-directory repository))))
             (destination directory)
             (associations (list (cons 'package package)
                                 (cons 'project project)
                                 (cons 'project-title project)
                                 (cons 'project-unit (format "project.{a}" package))
                                 (cons 'project-directories (cons "project" package-parts))
                                 (cons 'product product))))
        (copy-template template destination associations)
        (let* ((file (new-file destination (list package ".package")))
               (package (load-package repository #f package-name (parse file))))
          (repository-add-package repository package)
          (let ((tree (get-tree self))
                (repository-row (selected-row self)))
            (let ((package-row (add-package self tree repository-row package)))
              (ensure-expanded tree package-row)
              (set-single-selection tree (row->line tree package-row))))))))
  
  
  (method (on-scan-new-packages self evt)
    (let ((repository-row (selected-row self)))
      (let ((repository (get-user-data repository-row)))
        (let ((packages (repository-install-packages repository)))
          (if (null? packages)
              (user-message "No new packages found")
            (let ((tree (get-tree self)))
              (let ((rows (map (lambda (package)
                                 (let ((package-row (add-package self tree repository-row package)))
                                   (ensure-expanded tree package-row)
                                   package-row))
                               packages)))
                (set-selection tree (map (lambda (row)
                                            (row->line tree row))
                                          rows)))
              (let ((count (length packages)))
                (user-message "Found {a} new package{a}" count (format-plural count)))))))))
  
  
  (method (on-unregister-repository self evt)
    (define (uninstall/remove-repository row)
      (let ((repository (get-user-data row)))
        (uninstall-repository repository)
        (remove-row (get-tree self) row)))
    
    (for-each uninstall/remove-repository (selected-rows self)))
  
  
  ;;;
  ;;;; Package
  ;;;
  
  
  (method (on-edit-package self evt)
    (for-each (~ edit-package self) (selected-objects self)))
  
  
  (method (edit-package self package)
    (let ((dir (new Directory (tokenise-filename (repository-library-directory (package-repository package))))))
      (edit-document (get-application) (new-file dir (list (->string (package-name package)) ".package")))))
  
  
  (method (on-install-in-workbench self evt)
    (let ((workbench-manager (get-workbench-manager (get-application)))
          (workbench (get-workbench))
          (tree (get-tree self)))
      (for-each (lambda (row)
                  (install-in-workbench self workbench-manager workbench tree row))
                (selected-rows self))))
  
  
  (method (install-in-workbench self workbench-manager workbench tree row)
    (let ((package (get-user-data row)))
      (let ((file (package-project-file package)))
        (install-project workbench-manager file workbench #f)
        (let ((line (row->line tree row)))
          (let ((cell (new Cell line 0)))
            (let ((node (get-cell-data tree cell)))
              (set-image node {Image-Resource "Package"})
              (invalidate-cell tree cell)))))))
  
  
  (definition (package-project-file package)
    (let ((project (package-project package)))
      (and project
           (string? project)
           (new File (tokenise-filename (package-pathname package project))))))
  
  
  (definition (package-project-installable? package)
    (let ((file (package-project-file package)))
      (and file (not (find-project-by-file (get-workbench) file)))))
  
  
  ;;;
  ;;;; Selection
  ;;;
  
  
  (definition (selected-kind object)
    (cond ((not object)
           'repositories)
          ((repository? object)
           'repository)
          ((package? object)
           'package)))
  
  
  (method (selected-kind/objects self)
    (let ((objects (get-selected-data (get-tree self))))
      (if (null? objects)
          (values #f #f)
        (let ((kind (uniform objects key: selected-kind)))
          (if (not kind)
              (values #f #f)
            (values kind objects))))))
  
  
  (method (selected-objects self)
    (receive (kind objects) (selected-kind/objects self)
      objects))
  
  
  (method (selected-object self)
    (car (selected-objects self)))
  
  
  (method (selected-rows self)
    (get-selected-rows (get-tree self)))
  
  
  (method (selected-row self)
    (get-selected-row (get-tree self)))

  
  ;;;
  ;;;; Menu
  ;;;
  
  
  (method (on-context-menu self evt)
    (let* ((sender (get-sender evt))
           (pos (get-position evt))
           (acquired (acquire self sender pos)))
      (with-context-click sender pos
        (lambda ()
          (let ((menu (new-menu self)))
            (when menu
              (track-popup-menu self menu acquired)))))))
  
  
  (method public (new-menu self)
    (define (new-repositories-menu objects)
      (let ((menu (new Repositories-Menu client: (get-tree self))))
        (layout-menu menu)
        menu))
    
    (define (new-repository-menu objects)
      (let ((menu (new Repository-Menu client: (get-tree self))))
        (when (> (length objects) 1)
          (set-visible? (locate menu 'new-package-separator) #f)
          (set-visible? (locate menu 'new-package) #f))
        (when (some? system-repository? objects)
          (set-visible? (locate menu 'unregister-repository-separator) #f)
          (set-visible? (locate menu 'unregister-repository) #f))
        (layout-menu menu)
        menu))
    
    (define (new-package-menu objects)
      (let ((menu (new Package-Menu client: (get-tree self))))
        (unless (every? package-project-installable? objects)
          (set-visible? (locate menu 'install-package-separator) #f)
          (set-visible? (locate menu 'install-package) #f))
        (layout-menu menu)
        menu))
    
    (receive (kind objects) (selected-kind/objects self)
      (if (not kind)
          #f
        (case kind
          ((repositories) (new-repositories-menu objects))
          ((repository) (new-repository-menu objects))
          ((package) (new-package-menu objects)))))))


;;;
;;;; Repositories-Menu
;;;


(class Repositories-Menu extends Context-Menu
  
  
  (form
    (<install>
      (<Label-Item> name: new-repository      title: "New Repository..." icon: {Image-Resource "Add"} action-handler: {Action repositories-manager new-repository})
      (<Separator-Item>)
      (<Label-Item> name: register-repository title: "Register Repository..." icon: {Image-Resource "Import"} action-handler: {Action repositories-manager register-repository}))))


;;;
;;;; Repository-Menu
;;;


(class Repository-Menu extends Context-Menu
  
  
  (form
    (<install>
      (<Label-Item>     name: edit-repository                title: "Edit" icon: {Image-Resource "Edit"} action-handler: {Action repositories-manager edit-repository})
      (<Separator-Item> name: new-package-separator)
      (<Label-Item>     name: new-package                    title: "New Package..." icon: {Image-Resource "Add"} action-handler: {Action repositories-manager new-package})
      (<Separator-Item>)
      (<Label-Item>     name: scan-new-packages              title: "Scan for new Packages" icon: {Image-Resource "Refresh"} action-handler: {Action repositories-manager scan-new-packages})
      (<Separator-Item> name: unregister-repository-separator)
      (<Label-Item>     name: unregister-repository           title: "Unregister" icon: {Image-Resource "Remove"} action-handler: {Action repositories-manager unregister-repository}))))


;;;
;;;; Package-Menu
;;;


(class Package-Menu extends Context-Menu
  
  
  (form
    (<install>
      (<Label-Item>     name: edit-package              title: "Edit" icon: {Image-Resource "Edit"} action-handler: {Action repositories-manager edit-package})
      (<Separator-Item> name: install-package-separator)
      (<Label-Item>     name: install-package           title: "Install in Workbench" icon: {Image-Resource "Import"} action-handler: {Action repositories-manager install-in-workbench})))))
