;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Configuration Selector
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.project.workbench.Configuration-Selector jazz


(import (jazz.component)
        (jazz.handler)
        (jazz.jml)
        (jazz.layout)
        (jazz.tree)
        (jazz.ui))


(class Configuration-Selector extends Layout-View
  
  
  (property project initialize #f accessors generate)
  
  
  (form
    (<install>                                               size: {Dimension 500 300} layout-type: border
      (<Layout-View>                   name: toolbar         size: {Dimension 300 33} location: north layout-type: flow layout-insets: {Rect 4 6 0 0}
        (<Label-View>                  name: invite          size: {Dimension 200 22}))
      (<Border-View>                   name: content-border  location: center border-type: edge style: entry
        (<Scroller-View>                                     style: document hscroll?: #t vscroll?: #t
          (<content~>                                        layout-type: fill
            (<Tree-View>               name: content         portfolio: :images filled-column: name return-press-handler: {Event-Handler :form on-return-press} escape-press-handler: {Event-Handler :form on-escape-press}
              (<Tree-Node-Column>      name: name            title: "Name" width: 235 display-images?: #f)))))
      (<Layout-View>                   name: buttonbar       size: {Dimension 300 36} location: south layout-type: flow layout-insets: {Rect 0 6 0 0}
        (<Push-Button>                 name: ok              title: "OK" location: tail size: {Dimension 80 24} default?: #t action-handler: {Event-Handler :host on-ok})
        (<Separator>                                         size: {Dimension 3 0} location: tail)
        (<Push-Button>                 name: cancel          title: "Cancel" location: tail size: {Dimension 80 24} action-handler: {Event-Handler :host on-cancel})
        (<Separator>                                         size: {Dimension 5 0} location: tail))))
  
  
  (method override (finish rest)
    (nextmethod rest)
    (set-title~ (locate 'invite) (format "Select configuration for {a}" (project-title~ project)))
    (update))
  
  
  (method meta override (host-title)
    "Select Configuration")
  
  
  (method override (focus-default)
    (acquire-focus~ (get-tree)))
  

  ;;;
  ;;;; Access
  ;;;
  
  
  (method (get-tree)
    (locate 'content))
  

  ;;;
  ;;;; Update
  ;;;
  
  
  (method (update)
    (update-content))
  
  
  (method (update-content)
    (let ((tree (get-tree))
          (default (listify (get-default-traits~ project))))
      (define (update-configurations tree)
        (for-each (lambda (component)
                    (when (is? component Trait)
                      (insert-configuration tree component)))
                  (get-children~ project)))
      
      (define (insert-configuration tree trait)
        (let ((children (get-children~ trait)))
          (if (null? children)
              (insert-inclusive tree trait)
            (insert-exclusive tree #f trait (new Radio-Set)))))
      
      (define (insert-inclusive tree trait)
        (let ((title (get-presentation-property~ trait))
              (checked? (memq? (trait-fullname~ project trait) default)))
          (add-row~ tree children: (list (new Check-Box title: title checked?: checked? outline-view: tree user-data: trait)))))
      
      (define (insert-exclusive tree father trait set)
        (let ((title (get-presentation-property~ trait))
              (children (get-children~ trait)))
          (if (null? children)
              (let ((selected? (memq? (trait-fullname~ project trait) default)))
                (let ((button (new Radio-Button title: title outline-view: tree user-data: trait)))
                  (add-member~ set button)
                  (set-set~ button set)
                  (set-selected?~ button selected?)
                  (add-row~ tree father: father children: (list button))))
            (let ((row (add-row~ tree father: father state: 'expanded children: (list (new Tree-Node title: title)))))
              (for-each (lambda (child)
                          (when (is? child Trait)
                            (insert-exclusive tree row child set)))
                        children)))))
      
      (remove-every-row~ tree)
      (with-update-locked~ tree
        (lambda ()
          (update-configurations tree)))))
  

  ;;;
  ;;;; Modal
  ;;;
  
  
  (method override (get-modal-result)
    (let ((queue (new-queue)))
      (define (add-trait trait)
        (enqueue queue (trait-fullname~ project trait)))
      
      (for-each-visible-row~ (get-tree)
        (lambda (row line)
          (let ((node (first-child~ row)))
            (typecase node
              ((Check-Box)
               (when (get-checked?~ node)
                 (add-trait (get-user-data~ node))))
              ((Radio-Button)
               (when (get-selected?~ node)
                 (add-trait (get-user-data~ node))))))))
      (queue-list queue)))
  
  
  ;; Should really be generic in the Dialog class
  (method override (on-return-press evt)
    (let ((dialog (get-host)))
      (end-modal~ dialog (get-modal-result~ dialog))))
  
  
  ;; Should really be generic in the Dialog class
  (method override (on-escape-press evt)
    (let ((dialog (get-host)))
      (cancel-modal~ dialog)))))
