;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; New Document Dialog
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.project.workbench.New-Document-Dialog jazz


(import (jazz.graphic)
        (jazz.io)
        (jazz.jml)
        (jazz.library)
        (jazz.ui)
        (jazz.ui.view))


(class New-Document-Dialog extends View
  
  
  (property directory initialize #f accessors generate)
  
  
  (form
    (<install>                                              size: {Dimension 500 261}
      (<Label-View>               name: title               title: "New Document" position: {Point 10 9} size: {Dimension 350 16} font: {Font Caption})
      (<Label-View>               name: description         title: "Please specify document kind, name and directory" position: {Point 30 27} size: {Dimension 350 16} font: {Font Label})
      (<Horizontal-Line>                                    position: {Point 0 50} size: {Dimension 500 8})
      (<Border-View>              name: kind-border         position: {Point 13 64} size: {Dimension 140 137} border-type: edge style: entry
        (<Scroller-View>                                    vscroll?: #t style: document
          (<!>                    name: content             layout-type: fill
            (<Tree-View>          name: kinds               portfolio: :images show-header?: #f font: {Font Label} default-row-height: 15 selection-mode: row can-select-empty?: #f tooltip?: #t tooltip-text: "Document kind" selection-handler: {Selection-Handler :form on-selection-change} double-click-handler: {Event-Handler :form on-double-click} return-press-handler: {Event-Handler :form on-return-press} escape-press-handler: {Event-Handler :form on-escape-press}
              (<Tree-Node-Column>                           title: "User" width: 176 toplevel-controls?: #f controls?: #f display-images?: #f)))))
      (<Label-View>               name: name-label          title: "Name:" position: {Point 182 111} size: {Dimension 33 16} font: {Font Label})
      (<Border-View>              name: name-border         position: {Point 241 109} size: {Dimension 224 19} border-type: edge style: entry
        (<Scroller-View>                                    hscroll?: #f vscroll?: #f
          (<!>                    name: content             layout-type: fill
            (<Name-Text-View>     name: name-text           accepts-returns?: #f show-unfocused-selection?: #f focus-selects-all?: #t tooltip?: #t tooltip-text: "Name of the document without the file extension" return-press-handler: {Event-Handler :form on-return-press} escape-press-handler: {Event-Handler :form on-escape-press} content-change-handler: {Event-Handler :form on-content-change}))))
      (<Label-View>               name: directory-label     title: "Directory:" position: {Point 182 143} size: {Dimension 54 16} font: {Font Label})
      (<Border-View>              name: directory-border    position: {Point 241 140} size: {Dimension 224 19} border-type: edge style: entry
        (<Moniker-Widget>         name: directory           protocol: dir display-protocol?: #f moniker-update-handler: {Event-Handler :form on-moniker-update}
          (<!>                    name: scroller
            (<!>                  name: content
              (<!>                name: body                editable?: #f show-unfocused-selection?: #f focus-selects-all?: #t tooltip?: #t tooltip-text: "Directory where the document will be created" return-press-handler: {Event-Handler :form on-return-press} escape-press-handler: {Event-Handler :form on-escape-press})))))
      (<Horizontal-Line>                                    position: {Point 0 213} size: {Dimension 500 8})
      (<Push-Button>              name: ok                  title: "OK" position: {Point 167 227} size: {Dimension 80 24} default?: #t action-handler: {Event-Handler :host on-ok})
      (<Push-Button>              name: cancel              title: "Cancel" position: {Point 253 227} size: {Dimension 80 24} action-handler: {Event-Handler :host on-cancel})))
    
  
  (method override (finish rest)
    (nextmethod rest)
    (setup-kinds)
    (set-string-content~ (locate 'name-text) "New")
    (set-moniker~ (locate 'directory) directory))
  
  
  (method override (focus-default)
    (acquire-focus~ (locate 'kinds)))

  
  ;;;
  ;;;; Setup
  ;;;
  
  
  (definition *document-kinds*
    '(<kinds>
       (<kind>     name: "Scheme"      kind: scheme     template: "scheme/New.scm")
       (<kind>     name: "Jazz"        kind: jazz       template: "jazz/New.jazz"
         (<kind>   name: "Unit"        kind: jazz       template: "jazz/NewUnit.jazz")
         (<kind>   name: "Module"      kind: jazz       template: "jazz/NewModule.jazz"
           (<kind> name: "Class"       kind: jazz       template: "jazz/NewClass.jazz")
           (<kind> name: "Interface"   kind: jazz       template: "jazz/NewInterface.jazz")))
       (<kind>     name: "Common Lisp" kind: lisp       template: "lisp/New.lisp")
       (<kind>     name: "C/C++"
         (<kind>   name: "Header"      kind: c          template: "c/NewHeader.h")
         (<kind>   name: "C Source"    kind: c          template: "c/NewC.c")
         (<kind>   name: "C++ Source"  kind: c          template: "c/NewCpp.cpp"))
       (<kind>     name: "Java"        kind: java       template: "java/New.java"
         (<kind>   name: "Class"       kind: java       template: "java/NewClass.java"))
       (<kind>     name: "SQL"         kind: sql        template: "sql/New.sql")
       (<kind>     name: "Text"        kind: text       template: "text/New.txt")))
  
  
  (method (setup-kinds)
    (let ((tree (locate 'kinds))
          (text (locate 'name-text))
          (root (parse-jml *document-kinds*)))
      (remove-every-row~ tree)
      (letrec ((insert
                (lambda (node father)
                  (let* ((title (get-property~ node 'name))
                         (icon (get-property~ node 'icon))
                         (row (add-row~ tree father: father state: 'expanded children: (list (new Tree-Node title: title image: icon)) user-data: node)))
                    (for-each (lambda (child)
                                (insert child row))
                              (get-children~ node))))))
        (for-each (lambda (node)
                    (insert node #f))
                  (get-children~ root)))
      (set-single-selection~ tree 0)
      (ensure-displayed~ tree))
    (update-ok))

  
  ;;;
  ;;;; Host
  ;;;
  
  
  (method meta override (host-title)
    "New")
  

  ;;;
  ;;;; Modal
  ;;;
  
  
  (method override (validate-dialog)
    (receive (kind template directory name) (get-modal-result)
      (let* ((extension (extract-extension template))
             (destination (new-file~ directory (format "{a}.{a}" name extension)))
             (message (validate-name kind name destination)))
        (when message
          (message-box message)
          (signal-cancel)))))
  
  
  (method override (get-modal-result)
    (let ((node (selected-kind)))
      (values (get-property~ node 'kind) (get-property~ node 'template) (get-moniker~ (locate 'directory)) (get-string-content~ (locate 'name-text)))))
  
  
  (method (selected-kind)
    (let* ((tree (locate 'kinds))
           (rank (get-single-selection~ tree))
           (row (get-row~ tree rank))
           (node (get-user-data~ row)))
      node))
  

  ;;;
  ;;;; Keyboard
  ;;;
  
  
  (method override (get-tab-stops)
    (list
      (locate 'kinds)
      (locate 'name-text)
      (get-text~ (locate 'directory))))
  

  ;;;
  ;;;; Events
  ;;;
  
  
  (method (on-selection-change evt)
    (update-ok))
  
  
  (method (on-content-change evt)
    (update-ok))
  
  
  (method (on-moniker-update evt)
    (update-ok))
  
  
  (method (on-double-click evt)
    (when (get-enabled?~ (locate 'ok))
      (validate-dialog)
      (let ((dialog (get-host)))
        (end-modal~ dialog (get-modal-result~ dialog)))))
  
  
  ;; Should really be generic in the Dialog class
  (method override (on-return-press evt)
    (when (get-enabled?~ (locate 'ok))
      (validate-dialog)
      (let ((dialog (get-host)))
        (end-modal~ dialog (get-modal-result~ dialog)))))
  
  
  ;; Should really be generic in the Dialog class
  (method override (on-escape-press evt)
    (let ((dialog (get-host)))
      (cancel-modal~ dialog)))
  

  ;;;
  ;;;; Update
  ;;;
  
  
  (method (update-ok)
    (set-enabled?~ (locate 'ok) (and (get-property~ (selected-kind) 'kind) (get-moniker~ (locate 'directory)) (not (empty-string? (get-string-content~ (locate 'name-text)))))))
  
  
  (definition (validate-name kind name destination)
    (cond ((exists?~ destination)
           (format "Document already exists: {a}" (parse~ destination)))
          ((memq? kind '(jazz))
           (cond ((let ((first (first name)))
                    (not (or (eqv? first #\_)
                             (alphabetic? first))))
                  "Name must start with a letter or an underscore")
                 ((not (every? (lambda (char)
                                 (or (alphabetic? char)
                                     (numeric? char)
                                     (memv? char '(#\minus #\_))))
                               name))
                  "Name can only contain letters, digits, dashes and underscores")
                 (else
                  #f)))
          (else
           #f)))
  

  ;;;
  ;;;; Drawing
  ;;;
  
  
  (definition Header-Color
    (new Color red: 120 green: 120 blue: 255))

  
  (method override (draw surface context)
    (let ((size (get-size)))
      (gradient-fill~ surface (new Rect 0 0 (get-width~ size) 50) (list (list 0 {Color White}) (list 1 Header-Color)))))))
