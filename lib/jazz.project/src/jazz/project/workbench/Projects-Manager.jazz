;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Projects Manager
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.project.workbench.Projects-Manager jazz


(import (jazz.application)
        (jazz.catalog)
        (jazz.descriptor)
        (jazz.event)
        (jazz.handler)
        (jazz.ide)
        (jazz.markup)
        (jazz.outline)
        (jazz.project)
        (jazz.resource)
        (jazz.tree)
        (jazz.ui)
        (jazz.view))


(class undocumented Projects-Manager extends Layout-View
  
  
  (slot hierarchical? initialize #t)


  (form
    (<install>                                               size: {Dimension 553 478} layout-type: border
      (<Layout-View>                   name: toolbar         size: {Dimension 300 33} location: north layout-type: flow layout-insets: {Rect 0 6 0 0}
        @wait (<Toggle-Tool>                                       size: {Dimension 22 22} tooltip?: #t tooltip-text: "Display Flat / Hierarchical" resource: {Image-Resource "Tree"} portfolio: :images action-handler: {Event-Handler :form on-flat/hierarchical})
        (<Push-Button>                 name: update          title: "Update" size: {Dimension 100 22} location: tail action-handler: {Event-Handler :form on-update} default?: #t))
      (<Border-View>                   name: projects-border location: center border-type: edge style: entry
        (<Scroller-View>                                     vscroll?: #t
          (<!>                         name: content         layout-type: fill
            (<Tree-Header>                                   style: document
              (<!>                     name: content
                (<Tree-View>           name: projects        filled-column: name portfolio: :images selection-handler: {Event-Handler :form on-selection-change} double-click-handler: {Event-Handler :form on-double-click} multiple-selection?: #t
                  (<Tree-Node-Column>  name: name            title: "Name" width: 150)
                  (<Tree-Label-Column> name: statistics      title: "Statistics" width: 350)))))))))
  
  
  (method meta override (external-name self . rest)
    'projects-manager)
  
  
  ;;;
  ;;;; Access
  ;;;
  
  
  (method package (get-tree self)
    (locate self 'projects))
  
  
  ;;;
  ;;;; Component
  ;;;

  
  (method override (finish self initargs)
    (nextmethod self initargs)
    (set-hierarchical? self hierarchical?)
    (view-projects self)
    (update-buttons self))
    
  
  ;;;
  ;;;; Host
  ;;;
    
  
  (method meta override (host-icon self)
    {Image-Resource "Catalog"})
  
  
  (method meta override (host-title self)
    "Projects Manager")
  
  
  (method meta override (host-position self)
    {Point 90 70})
  
  
  (method meta override (host-size self)
    {Dimension 850 550})
  
  
  (method override (host-workspaces self)
    '(home))
  
  
  (method override (focus-default self)
    (acquire-focus (get-tree self)))
  
  
  ;;;
  ;;;; Events
  ;;;


  (method override (resize self dh dv)
    (nextmethod self dh dv)
    (move-figure (locate self 'update) dh 0)
    (size-figure (locate self 'projects-border) dh dv))
  
  
  (method (on-flat/hierarchical self evt)
    (set-hierarchical? self (not hierarchical?))
    (view-projects self))
  
  
  (method (set-hierarchical? self flag)
    (set! hierarchical? flag)
    (let ((node-column (get-node-column (get-tree self))))
      (set-toplevel-controls? (get-node-column (get-tree self)) flag)
      (set-display-images? node-column flag)))
  
  
  (method package (on-selection-change self evt)
    (update-buttons self))
  
  
  ;;;
  ;;;; Update
  ;;;


  (method public (view-projects self)
    (define (insert-workbench tree)
      (insert-project tree #f (get-workbench) 0))
    
    (define (insert-project tree row project level)
      (let ((catalog (get-catalog project)))
        (let ((state (if (= level 0) 'expanded 'collapsed))
              (c0 (new Check-Box title: (get-presentation-property project) checked?: (get-active? project)))
              (c1 (new Tree-Label title: (if catalog (get-statistics catalog) ""))))
          (let ((row (add-row tree father: row state: state children: (list c0 c1) user-data: project)))
            (define (content-change evt)
              (set-active? tree row project (get-checked? (get-sender evt))))
            
            (set-content-change-handler c0 (new Event-Handler execute: content-change))
            (insert-children tree row project (+ level 1))))))
    
    (define (insert-children tree row component level)
      (for-each (lambda (child)
                  (cond ((and (is? child Project)
                              (has-content? child))
                         (insert-project tree row child level))
                        ((and (is? child Project-Group)
                              (is-not? child Project-Directory))
                         (let ((row (add-row tree father: row state: 'expanded children: (list (new Tree-Node title: (->string (catalog-name child)) image: {Image-Resource "OpenedFolder"}) (new Tree-Label title: "")))))
                           (insert-children tree row child level)))))
                (get-children component)))
    
    (define (set-active? tree row project flag)
      (let ((workbench-manager (get-workbench-manager (current-application))))
        (when workbench-manager
          (with-cursor :wait
            (lambda ()
              (set-project-active? workbench-manager project flag)
              (for-each-subproject self tree row
                (lambda (project row line)
                  (update-statistics self tree project row line))))))))
    
    (let ((tree (get-tree self)))
      (remove-every-row tree)
      (with-update-locked tree
        (lambda ()
          (insert-workbench tree)))))
  
  
  (method (for-each-subproject self tree row proc)
    (let ((root row))
      (for-each-descendant-row tree row (row->line tree row)
        (lambda (row line)
          (let ((project (get-user-data row)))
            (when (is? project Project)
              (when (or (eq? row root)
                        (get-active? project))
                (proc project row line)))))
        stop-test: (lambda (row)
                     (let ((project (get-user-data row)))
                       (and (is? project Project)
                            (not (get-active? project))))))))


  (method package (on-update self evt)
    (with-cursor :wait
      (lambda ()
        (update-selection self))))
  
  
  (method (on-double-click self evt)
    (let ((sender (get-sender evt)))
      (case (get-name sender)
        ((projects)
         (with-cursor :wait
           (lambda ()
             (update-selection self)))))))
  
  
  (method package (update-selection self)
    (let ((tree (get-tree self)))
      (let ((workbench-row (get-row tree 0)))
        (post-catalog
          (lambda ()
            (for-each-subproject self tree workbench-row
              (lambda (project row line)
                (send-event
                  (lambda ()
                    (update-statistics self tree project row line))))))))))
  
  
  (method (update-statistics self tree project row line)
    (let ((row (or row (user-data-row tree project include-invisibles?: #t))))
      (when row
        (let ((catalog (get-catalog project))
              (data (second (get-children row))))
          (set-title data (if catalog (get-statistics catalog) "")))
        (when line
          (let ((cell (new Cell line 1)))
            (invalidate-cell tree cell))))))
  
  
  (method package (update-buttons self)
    (let ((tree (get-tree self)))
      (let ((count (get-row-count tree)))
        (set-enabled? (locate self 'update) (> count 0)))))
  

  ;;;
  ;;;; Session
  ;;;
  
  
  (method override (confirm-close self . rest)
    (save-session self))
  
  
  (method override (save-session self)
    @to-convert
    (let ((info
           (list (external-name)
                 position: (get-position)
                 size:     (get-size))))
      (push-property properties 'Opened-Windows info)))))
