;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Synchronize Tree
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.project.workbench.Synchronize-Tree jazz


(import (jazz.application)
        (jazz.graphic)
        (jazz.handler)
        (jazz.markup)
        (jazz.resource)
        (jazz.tree)
        (jazz.ui))


;;;
;;;; Synchronize-Border
;;;


(class Synchronize-Border extends Border-View
  
  
  (form
    (<install>                                     border-type: solid border-color: {Color Outline-Border}
      (<Scroller-View>                             style: tool hscroll?: #t vscroll?: #t
        (<!>                         name: content layout-type: fill
          (<Tree-Header>                           style: tool
            (<!>                     name: content
              (<Synchronize-Tree>    name: tree))))))))


;;;
;;;; Synchronize-Tree
;;;


(class Synchronize-Tree extends Tree-View
  
  
  (form
    (<install>                                  portfolio: :images selection-mode: row filled-column: path multiple-selection?: #t double-click-handler: {Event-Handler :form on-double-click}
      (<Tree-Node-Column>          name: path   title: "Path" width: 200 toplevel-controls?: #f)
      (<Synchronize-Left-Column>   name: left   title: "Workbench" width: 80 justification: center)
      (<Synchronize-Action-Column> name: action title: "Action" width: 75 justification: center)
      (<Synchronize-Right-Column>  name: right  title: "Filesystem" width: 80 justification: center)))
  
  
  (method (on-double-click self evt)
    (toggle-action self))
  
  
  (method (toggle-action self)
    (let ((selected (get-selected-rows self)))
      (let ((rows (if (null? selected) (collect-visible-rows self) selected)))
        (for-each (lambda (row)
                    (let ((cell (new Cell (row->line self row) 2)))
                      (let ((data (get-cell-data self cell)))
                        (let ((action (car data)))
                          (if (eq? action 'none)
                              (bell)
                            (set-car! data (case action
                                             ((left) 'right)
                                             ((right) 'left)))
                            (invalidate-cell self cell))))))
                  rows))))
  
  
  (method (set-actions self action)
    (let ((selected (get-selected-rows self)))
      (let ((rows (if (null? selected) (collect-visible-rows self) selected)))
        (for-each (lambda (row)
                    (let ((cell (new Cell (row->line self row) 2)))
                      (let ((data (get-cell-data self cell)))
                        (set-car! data action)
                        (invalidate-cell self cell))))
                  rows))))
  
  
  (method package (copy-right self)
    (set-actions self 'right))
  
  (method package (no-action self)
    (set-actions self 'none))
  
  (method package (copy-left self)
    (set-actions self 'left)))


;;;
;;;; Item-Column
;;;


(class Synchronize-Item-Column extends Tree-Column
  
  
  (method override (draw-data self surface context row data width height)
    (draw-background self surface context row data width height)
    (when (present? self data)
      (let ((image (present-image self data)))
        (draw-image (get-images-portfolio (current-application)) surface context image (quotient (- width 16) 2) 0))))
  
  
  (method abstract protected virtual (present? self data)
    )
  
  
  (method abstract protected virtual (present-image self data)
    ))


;;;
;;;; Left-Column
;;;


(class Synchronize-Left-Column extends Synchronize-Item-Column
  
  
  (method override (present? self data)
    (eq? data :left))
  
  
  (method override (present-image self data)
    {Image-Resource "Green"}))


;;;
;;;; Action-Column
;;;


(class Synchronize-Action-Column extends Tree-Column
  
  
  (method override (draw-data self surface context row data width height)
    (draw-background self surface context row data width height)
    (when data
      (bind (action . info) data
        (unless (eq? action 'none)
          (let ((appl (current-application))
                (image (case action
                         ((left)
                          (case (car info)
                            ((:left) {Image-Resource "DeleteLeft"})
                            ((:right) {Image-Resource "AddLeft"})))
                         ((right)
                          (case (car info)
                            ((:left) {Image-Resource "Execute"})
                            ((:right) {Image-Resource "DeleteRight"}))))))
            (draw-image (get-images-portfolio appl) surface context image (+ (quotient (- width 16) 2) 1) 0)))))))


;;;
;;;; Right-Column
;;;


(class Synchronize-Right-Column extends Synchronize-Item-Column
  
  
  (method override (present? self data)
    (eq? data :right))
  
  
  (method override (present-image self data)
    {Image-Resource "Blue"})))
