;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Workbench Cataloguer
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.project.workbench.Workbench-Cataloguer jazz


(import (jazz.catalog)
        (jazz.project))


(class Workbench-Cataloguer extends Cataloguer
  
  
  (slot catalog-table initialize (make-table) getter generate)
  
  
  ;;;
  ;;;; Catalogs
  ;;;
  
  
  ;; cache for this critical operation
  (definition *workbench-active-catalogs*
    #f)
  
  
  (method package (reset-workbench-active-catalogs)
    (set! *workbench-active-catalogs* #f))
  
  
  (method package (get-workbench-active-catalogs)
    (or *workbench-active-catalogs*
        (let ((queue (new-queue)))
          (let ((project (get-workbench)))
            (for-each-active-catalog~ project
              (lambda (catalog)
                (enqueue queue catalog))))
          (let ((catalogs (queue-list queue)))
            (set! *workbench-active-catalogs* catalogs)
            catalogs))))
  
  
  (method override (for-each-active-catalog context proc)
    (if (not context)
        (for-each proc (get-workbench-active-catalogs))
      (let ((project context))
        (for-each-active-catalog~ project
          proc))))
  
  
  (method override (add-catalog catalog)
    (let ((key (get-name~ catalog)))
      (table-set! catalog-table key (cons catalog (find-catalogs key)))))
  
  
  (method override (remove-catalog catalog)
    (let ((key (get-name~ catalog)))
      (table-set! catalog-table key (remove catalog (find-catalogs key)))))
  
  
  (method override (find-catalogs key)
    (table-ref catalog-table key '()))))
