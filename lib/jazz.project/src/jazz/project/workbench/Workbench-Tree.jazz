;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Workbench Tree
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.project.workbench.Workbench-Tree jazz


(import (jazz.action)
        (jazz.component)
        (jazz.descriptor)
        (jazz.designer)
        (jazz.graphic)
        (jazz.jml)
        (jazz.project)
        (jazz.resource))


(class Workbench-Tree extends Descendants-Tree
  
  
  (form
    (<install> portfolio: :images draggable?: #t editable?: #f reorderable?: #t))
  

  (method override (focus-actions self)
    (cons (find-actions 'workbench-tree)
          (nextmethod self)))
  
  
  (method (on-add-project self evt)
    (add-project (get-manager self)))
  
  
  (method (on-add-document self evt)
    (add-document (get-manager self)))
  
  
  (method (on-add-directory self evt)
    (add-directory (get-manager self)))
  
  
  (method (on-add-group self evt)
    (add-group (get-manager self)))
  
  
  (method package (get-manager self)
    (get-guest (get-host self)))

  
  (method override (context-menu self evt)
    (let ((pos (get-position evt))
          (manager (get-manager self)))
      (with-context-click self pos
        (lambda ()
          (let ((menu (new-menu manager)))
            (when menu
              (track-popup-menu self menu pos)))))))
  
  
  ;; This is a big patch, to go around the fact that if a user copy pastes a Jazz-File, there is
  ;; not yet an advance test to check for name duplications so that the error is detected only partway
  ;; through the recursion and that leaves the workbench in an unstable state.
  (method override (can-copy? self)
    #f)
  
  
  (method override (can-paste-properties? self)
    #f)
  
  
  (method override (get-draggable? self)
    ;; until bug fix in the tree selection update
    #f)
  
  
  (method override (delete-selection self)
    (delete-selection editor message: "Remove selected objects?"))
  
  
  (method override (component-color self component owned-form)
    (let ((color (nextmethod self component (~ owned? self))))
      (if (is? component Project)
          (if (get-active? component)
              color
            {Color Medium-Gray})
        color)))
  
  
  (method override (component-image self component)
    (let ((image (nextmethod self component)))
      (if (is? component Project)
          (if (get-active? component)
              image
            (disabled-image-resource image))
        image)))
  
  
  (method override (update-selection self expand-state selected-components)
    )
  
  
  (method override (row-state self component update? level)
    (if (dynamic-component? self component)
        'dynamic
      (if update?
          (if (< level 1) 'expanded 'collapsed)
        'collapsed)))
  
  
  (method package (dynamic-component? self component)
    (and (is? component Project-Directory)
         (not-null? (get-components component))
         (get-parent component)
         (is? (get-parent component) Project)
         (get-dynamic? (get-parent component))))
  
  
  (method override (update-row self row)
    (let ((component (get-user-data row)))
      (when (dynamic-component? self component)
        (let ((rights (get-rights self))
              (update? #t)
              (level (get-level row)))
          (insert-component-list self row component (get-components component) rights update? level)))))
  
  
  (method override (insert-components self row component rights update? level)
    (unless (dynamic-component? self component)
      (insert-component-list self row component (get-components component) rights update? level)))
  
  
  (method override (double-click self evt)
    (let ((manager (get-manager self))
          (component (selected-component self)))
      (if (and (is? component Project)
               (concrete? component))
          (activate-selection manager)
        (nextmethod self evt)
        (unless (or (is? component Project) (is? component Group))
          (launch-selection manager)))))
  
  
  (method override (return-press self evt)
    (let ((manager (get-manager self))
          (component (selected-component self)))
      (if (is? component Project)
          (activate-selection manager)
        (unless (is? component Group)
          (launch-selection manager)))))
  
  
  (method override (receive-files self pos pathnames)
    (let* ((cell (view->tree self pos))
           (data (if (not cell) (get-workbench) (get-user-data (get-row self (get-line cell)))))
           (manager (get-manager self)))
      (if (or (is? data Project)
              (is? data Project-Group))
          (import-pathnames manager (ascendant-project manager data) pathnames data)
        (bell))))))
