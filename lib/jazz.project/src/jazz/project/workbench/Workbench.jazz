;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Workbench
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.project.workbench.Workbench jazz


(import (jazz.editor.jazz)
        (jazz.ide)
        (jazz.io)
        (jazz.jml)
        (jazz.library)
        (jazz.library.component)
        (jazz.project)
        (jazz.system)
        (jazz.ui.view))


(class Workbench extends Project
  
  
  (method override (print output readably)
    (print-unreadable self output
      (lambda (output)
        )))


  ;;;
  ;;;; Name
  ;;;
  
  
  (method override (catalog-name)
    'workbench)


  ;;;
  ;;;; Projects
  ;;;
  
  
  (method public (find-project name (include-inactives?: include-inactives? #f) (error?: error? #t))
    (define (find project path)
      (cond ((not project)
             (when error?
               (error "Unable to find project: {s}" name)))
            ((null? path)
             project)
            ((symbol? path)
             (find-name project path))
            ((pair? path)
             (find (find project (car path)) (cdr path)))
            (else
             #f)))
    
    (define (find-name project name)
      (continuation-capture
        (lambda (return)
          (for-each-project~ project
            (lambda (project)
              (when (eq? (get-name~ project) name)
                (continuation-return return project)))
            include-inactives?: include-inactives?
            stop-test: (lambda (descendant)
                         (is? descendant Project)))
          #f)))
    
    (find self (split-symbol name #\/)))
  
  
  (method public (require-project name)
    (or (find-project name)
        (error "Unable to find project: {a}" name)))
  
  
  (method public (find-project-by-file file)
    (continuation-capture
      (lambda (return)
        (for-each-project
          (lambda (project)
            (let ((tag-file (get-tag-reference~ (get-form~ project))))
              (when (and tag-file (pathname=? tag-file file))
                (continuation-return return project)))))
        #f)))
  
  
  (method public (find-project-by-identity target)
    (continuation-capture
      (lambda (return)
        (for-each-project
          (lambda (project)
            (when (eq? project target)
              (continuation-return return project))))
        #f)))


  ;;;
  ;;;; Files
  ;;;
  
  
  (method public (find-source target)
    (continuation-capture
      (lambda (return)
        (let ((target-name (get-name~ target)))
          (for-each-project-file
            (lambda (project-file)
              (let ((source (get-source~ project-file)))
                (when source
                  (when (and ;; key optimization
                             (ci=? (get-name~ source) target-name)
                             (pathname=? source target))
                    (continuation-return return project-file)))))))
          #f)))
  
  
  (method public (find-filename filename)
    (continuation-capture
      (lambda (return)
        (for-each-project-file
          (lambda (project-file)
            (let ((source (get-source~ project-file)))
              (when source
                (when (ci=? (get-name~ source) filename)
                  (continuation-return return project-file))))))
        #f)))


  ;;;
  ;;;; Catalogs
  ;;;
  
  
  (method override (catalog-output-base)
    "workbench")
  
  
  (method public (load-catalogs-threaded)
    (thread-start!
      (new-thread
        (lambda ()
          (user-message "Loading catalogs...")
          (load-catalogs)
          (clear-user-message))
        'catalogs-loader)))


  ;;;
  ;;;; Editable
  ;;;
  
  
  (method override (get-effective-editable?)
    #t)


  ;;;
  ;;;; Content
  ;;;
  
  
  (method public (for-each-project-file proc (include-self?: include-self? #f))
    (for-each-descendant
      (lambda (descendant level)
        (when (is? descendant Project-File)
          (proc descendant)))
      include-self?: include-self?
      stop-test: (lambda (descendant)
                   (and (is? descendant Project)
                        (not (get-active?~ descendant))))))
  
  
  ;;;
  ;;;; Descriptor
  ;;;
  
  
  (method meta override (get-class-descriptor)
    (new Workbench-Descriptor)))


;;;
;;;; Design
;;;


(submodule design


(import (jazz.designer))


(class Workbench-Descriptor extends Project-Descriptor
  
  
  (form
    (<install>       image: {Image-Resource "Workbench"} can-rename?: #f can-delete?: #f can-move?: #f can-cut?: #f can-copy?: #f
      (<properties~>)))
    
  
  (method override (component-get-presentation component)
    "Workbench")
  
  
  (method override (component-get-categorized-addable-classes component)
    (list
      (list
        (reference Project-Group)))))))
