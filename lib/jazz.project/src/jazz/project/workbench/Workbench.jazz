;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Workbench
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.project.workbench.Workbench jazz


(import (jazz.catalog)
        (jazz.component)
        (jazz.feedback)
        (jazz.io)
        (jazz.project))


(class Workbench extends Project
  
  
  (method override (print self output readably)
    (print-unreadable self output
      (lambda (output)
        )))


  ;;;
  ;;;; Name
  ;;;
  
  
  (method override (catalog-name self)
    'workbench)


  ;;;
  ;;;; Projects
  ;;;
  
  
  (method public (find-project-by-file self file)
    (continuation-capture
      (lambda (return)
        (for-each-project self
          (lambda (project)
            (let ((tag-file (get-tag-reference (get-form project))))
              (when (and tag-file (pathname=? tag-file file))
                (continuation-return return project)))))
        #f)))
  
  
  (method public (find-project-by-identity self target)
    (continuation-capture
      (lambda (return)
        (for-each-project self
          (lambda (project)
            (when (eq? project target)
              (continuation-return return project))))
        #f)))


  ;;;
  ;;;; Files
  ;;;
  
  
  (method public (find-source self target)
    (continuation-capture
      (lambda (return)
        (let ((target-name (get-name target)))
          (for-each-project-file self
            (lambda (project-file)
              (let ((source (get-source project-file)))
                (when source
                  (when (and ;; key optimization
                             (ci=? (get-name source) target-name)
                             (pathname=? source target))
                    (continuation-return return project-file)))))))
          #f)))
  
  
  (method public (find-filename self filename)
    (continuation-capture
      (lambda (return)
        (for-each-project-file self
          (lambda (project-file)
            (let ((source (get-source project-file)))
              (when source
                (when (ci=? (get-name source) filename)
                  (continuation-return return project-file))))))
        #f)))


  ;;;
  ;;;; Catalogs
  ;;;
  
  
  (method override (catalog-output-base self)
    "workbench")
  
  
  (method public (load-catalogs-threaded self update?)
    (thread-start!
      (new-thread
        (lambda ()
          (user-message "Loading catalogs...")
          (load-catalogs self)
          (when update?
            (update-catalogs self))
          (clear-user-message))
        'catalogs-loader)))
  
  
  (method public (update-catalogs self)
    (for-each-project self
      (lambda (project)
        (let ((catalog (get-catalog project)))
          (when catalog
            (post-catalog
              (lambda ()
                (update catalog)
                (user-feedback "Done"))))))))


  ;;;
  ;;;; Editable
  ;;;
  
  
  (method override (get-effective-editable? self)
    #t)


  ;;;
  ;;;; Content
  ;;;
  
  
  (method public (for-each-project-file self proc (include-self?: include-self? #f))
    (for-each-descendant self
      (lambda (descendant level)
        (when (is? descendant Project-File)
          (proc descendant)))
      include-self?: include-self?
      stop-test: (lambda (descendant)
                   (and (is? descendant Project)
                        (not (get-active? descendant))))))
  
  
  ;;;
  ;;;; Descriptor
  ;;;
  
  
  (method meta override (get-class-descriptor self (context: context #f))
    (new jazz.project.descriptors:Workbench-Descriptor))))
