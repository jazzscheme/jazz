;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Bindings Manager
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2012
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.recorder.Recording-Manager jazz


(import (jazz.graphic)
        (jazz.jml)
        (jazz.library)
        (jazz.recorder.Macro-Recorder)
        (jazz.system)
        (jazz.system.access)
        (jazz.ui)
        (jazz.ui.view))


(class undocumented Recording-Manager extends Layout-View implements Filterable
  
  
  (slot categorized? initialize #f)
  (slot shortcuts?   initialize #f)

  
  (form
    (<install>                       size: {Dimension 420 200} layout-type: border
      (<Layout-View>   name: toolbar size: {Dimension 300 63} location: north layout-type: flow layout-insets: {Rect 0 6 0 0}
        (<Toggle-Tool>               size: {Dimension 32 32} tooltip?: #t tooltip-text: "Pause Recording" resource: {Image-Resource "Pause"} portfolio: :images action-handler: {Event-Handler :form on-pause-recording})
        (<Separator>                 size: {Dimension 10 0})
        (<Toggle-Tool>               size: {Dimension 32 32} tooltip?: #t tooltip-text: "Stop Recording" resource: {Image-Resource "End"} portfolio: :images action-handler: {Event-Handler :form on-stop-recording})
        (<Separator>                 size: {Dimension 10 0})
        (<Toggle-Tool>               size: {Dimension 32 32} tooltip?: #t tooltip-text: "Play Recording" resource: {Image-Resource "Start"} portfolio: :images action-handler: {Event-Handler :form on-play-recording})
        (<Separator>                 size: {Dimension 10 0})
        (<Toggle-Tool>               size: {Dimension 32 32} tooltip?: #t tooltip-text: "Start Recording" resource: {Image-Resource "red-ball"} portfolio: :images action-handler: {Event-Handler :form on-start-recording}))))


  (method override (conclude initargs)
    (nextmethod initargs)
    )
  
  
  ;;;
  ;;;; Host
  ;;;
    
  
  (method meta override (host-icon)
    {Image-Resource "EditLink"})
  
  
  (method meta override (host-title)
    "Recording Manager")
  
  
  (method meta override (host-position)
    {Point 28 14})
  
  
  (method meta override (host-size)
    {Dimension 595 100})
  
  
  (method override (host-workspaces)
    '(home))
  
  
  ;;;
  ;;;; Events
  ;;;
  

  (method (on-start-recording evt)
    (debug 'on-start-recording)
    (let ((recorder (get-recorder~ (get-application))))
      (on-start-recording~ recorder evt)))


  (method (on-stop-recording evt)
    (debug 'on-stop-recording)
    (let ((recorder (get-recorder~ (get-application))))
      (on-stop-recording~ recorder evt)))


  (method (on-play-recording evt)
    (debug 'on-play-recording)
    (let ((recorder (get-recorder~ (get-application))))
      (on-play-recording~ recorder evt)))


  (method (on-pause-recording evt)
    (debug 'on-pause-recording))))

