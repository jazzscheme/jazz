;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Recorder
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2012
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module jazz.recorder jazz


(export (jazz.recorder.autoload))
(import (jazz.recorder.autoload)
        (jazz.system)
        (jazz.ui)
        (jazz.ui.view))


;;;
;;;; Level
;;;


(definition Recording-Level
  #f)

(definition public (get-recording-level)
  Recording-Level)

(definition public (set-recording-level level)
  (set! Recording-Level level))


(definition protected (effective-recording-level)
  (or Recording-Level 'action))


;;;
;;;; Play
;;;


(definition public (play-action action)
  (bind (identifier/action/handler . event) action
    (typecase identifier/action/handler
      ((Pair)
       ;; for tests
       (parameterize ((testing? #t))
         (play-event identifier/action/handler event)))
      ((Action)
       (call-action identifier/action/handler #f '() event: event))
      (else
       (let ((target (get-focus)))
         (invoke~ identifier/action/handler target event))))))


(definition (play-event identifier event)
  (define (play host path)
    (assert host)
    (if (and (pair? path) (eq? (car path) :guest))
        (play-in (get-guest~ host) (cdr path))
      (play-in host path)))
  
  (define (play-in in path)
    (assert in)
    (let ((view (if (null? path) in (locate~ in path))))
      (if (not view)
          (error "Unable to locate '{s} in: {s}" path in)
        (play-event view event))))
  
  (define (play-event view event)
    (case (get-kind~ event)
      ((:char)         (dispatch-key-press~ view (get-property~ event content:)))
      ((:mouse-enter)  (play-mouse-event view event (lambda (root h v) (dispatch-mouse-enter~ view))))
      ((:mouse-down)   (play-mouse-event view event (lambda (root h v) (dispatch-mouse-down~ root h v))))
      ((:mouse-up)     (play-mouse-event view event (lambda (root h v) (dispatch-mouse-up~ root h v))))
      ((:mouse-leave)  (play-mouse-event view event (lambda (root h v) (dispatch-mouse-leave~ view))))
      ((:double-click) (play-mouse-event view event (lambda (root h v) (dispatch-double-click~ root h v))))
      ((:context-menu) (play-mouse-event view event (lambda (root h v) (dispatch-context-menu~ root h v))))))
  
  (define (play-mouse-event view event proc)
    (let ((root (get-root~ view)))
      (assert root)
      (let ((pos (get-position~ event)))
        (if (not pos)
            (proc root #f #f)
          (let ((acquired (acquire~ root view pos)))
            (proc root (get-h~ acquired) (get-v~ acquired)))))))
  
  (case (car identifier)
    ((:focus) (play-in (get-focus) (cdr identifier)))
    ((:menubar) (play (find-menubar~ (get-application)) (cdr identifier)))
    ((:toolbar) (play (find-toolbar~ (get-application)) (cdr identifier)))
    ((:status-bar) (play (find-status-bar~ (get-application)) (cdr identifier)))
    ((:docked) (play (singleton-docked-named (cadr identifier)) (cddr identifier)))
    ((:frame) (play (current-frame) (cdr identifier)))
    (else (error "Unknown host: {s}" (car identifier))))))
