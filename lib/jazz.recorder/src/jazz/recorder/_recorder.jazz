;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Recorder
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module jazz.recorder jazz


(export (jazz.recorder.autoload))
(import (jazz.action)
        (jazz.application)
        (jazz.event)
        (jazz.handler)
        (jazz.platform)
        (jazz.ui)
        (jazz.ui.dialog)
        (jazz.ui.view)
        (jazz.window))


;;;
;;;; Level
;;;


(definition Recording-Level
  #f)


(definition public (get-recording-level)
  Recording-Level)

(definition public (set-recording-level level)
  (set! Recording-Level level))


(definition protected (effective-recording-level)
  (or Recording-Level 'action))


(definition Recording-Feedback?
  #f)


(definition public (get-recording-feedback?)
  Recording-Feedback?)

(definition public (set-recording-feedback? feedback?)
  (set! Recording-Feedback? feedback?))


(definition Recording-Slowdown
  #f)


(definition public (get-recording-slowdown)
  Recording-Slowdown)

(definition public (set-recording-slowdown slowdown)
  (set! Recording-Slowdown slowdown))


(definition protected Accessed-Mouse-Events
  (make-table test: eq? weak-keys: #t))


(definition protected (access-event event)
  (table-set! Accessed-Mouse-Events event #t))


(definition protected (accessed-event? event)
  (table-ref Accessed-Mouse-Events event #f))

(definition protected (unaccessed-event? event)
  (not (table-ref Accessed-Mouse-Events event #f)))


;;;
;;;; Event
;;;


(definition public (play-script proc (catcher: catcher #f) (feedback?: feedback? (get-recording-feedback?)) (slowdown: slowdown (get-recording-slowdown)))
  (let ((debug? #f)
        (catch? #f)
        (first-feedback? #t)
        (error-occurred? #f))
    (define (play action)
      (define (feedback action)
        (when feedback?
          (if first-feedback?
              (set! first-feedback? #f)
            (bind (kind . rest) action
              (let ((host (and (pair? rest) (car rest))))
                (unless (eq? host :unidentifiable)
                  (update-window~
                    (case host
                      ((:modal) (get-player~ (current-modal)))
                      ((:popup) (get-player~ (current-popup)))
                      (else (get-toplevel))))
                  (when slowdown
                    (sleep slowdown))))))))

      (define (simulate-mouse view pos)
        (when feedback?
          (let ((root (get-root~ view))
                (player (get-player~ view)))
            (let ((start (mouse-position~ player))
                  (end (acquire~ root view pos))
                  (duration .5))
              (let ((start-h (get-h~ start))
                    (start-v (get-v~ start))
                    (end-h (get-h~ end))
                    (end-v (get-v~ end))
                    (step-num (max 1 (fxfloor/ (distance start end) 2))))
                (let ((delta-h (exact->inexact (/ (- end-h start-h) step-num)))
                      (delta-v (exact->inexact (/ (- end-v start-v) step-num))))
                  (let (loop (step 0))
                    (if (>= step step-num)
                        (begin
                          (set-mouse-position~ player end)
                          (sleep .05))
                      (sleep (/ duration step-num))
                      (let ((step-pos (new Point
                                        (+ start-h (fxround (* step delta-h)))
                                        (+ start-v (fxround (* step delta-v))))))
                        (set-mouse-position~ player step-pos))
                      (loop (+ step 1))))))))))

      (unless error-occurred?
        (block-event
          (lambda ()
            (unless error-occurred?
              (with-exception-filter
                (lambda (exc)
                  (if (or (not catch?)
                          (and (object? exc)
                               (is? exc Signal)))
                      #f
                    (set! error-occurred? #t)
                    #t))
                (lambda (exc)
                  (if catcher
                      (catcher exc)
                    #f))
                (lambda ()
                  (if (procedure? action)
                      (action)
                    (when debug?
                      (debug action))
                    (feedback action)
                    (play-event action feedback simulate-mouse)))))))))
    
    (if (primordial-thread?)
        (thread-start!
          (new-thread
            (lambda ()
              (proc play))
            'script))
      (proc play))))


(definition public (play-events actions . rest)
  (apply play-script
         (lambda (play)
           (for-each play actions))
         rest))


(definition (play-event action feedback simulate-mouse)
  (define (play-action action)
    (let ((kind (car action)))
      (case kind
        ((:action)       (play-action-event action))
        ((:char)         (play-char action))
        ((:string)       (play-string action))
        ((:down)         (play-mouse action :mouse-down   (lambda (root view event) (dispatch-mouse-down~ root view event))))
        ((:up)           (play-mouse action :mouse-up     (lambda (root view event) (dispatch-mouse-up~ root view event))))
        ((:click)        (play-mouse action :mouse-click  (lambda (root view event) (dispatch-click root view event))))
        ((:double)       (play-mouse action :mouse-double (lambda (root view event) (dispatch-double root view event))))
        ((:double-click) (play-mouse action :double-click (lambda (root view event) (dispatch-double-click~ root view event))))
        ((:context-menu) (play-mouse action :context-menu (lambda (root view event) (dispatch-context-menu~ root view event))))
        ((:menubar)      (play-menubar action))
        (else            (error "Unknown event kind: {s}" kind)))))
  
  (define (play-action-event action)
    (bind (kind target-name method-name . rest) action
      (parse-event-modifiers rest
                             (lambda (modifiers properties)
                               (let ((handler (new Event-Handler target-name: target-name method-name: method-name))
                                     (event (apply new Action-Event :action #f (modifiers->mask modifiers) properties)))
                                 (play-action (cons handler event)))))))
  
  (define (play-char action)
    (bind (kind content . modifiers) action
      (let ((shortcut (new Shortcut modifiers content)))
        (or (dispatch-shortcut~ (get-application) shortcut)
            (assert (char? content)
              (dispatch-key content))))))
  
  (define (play-string action)
    (bind (kind content) action
      (iterate content dispatch-key)))
  
  (define (dispatch-key key)
    (dispatch-key-press~ (get-focus) key))
  
  (define (play-mouse action event-kind proc)
    (playing-mouse action event-kind
      (lambda (root view event)
        (let ((mouse-in (get-mouse-in)))
          (if (eq? mouse-in view)
              (proc root view event)
            (when mouse-in
              (dispatch-mouse-leave~ mouse-in))
            (dispatch-mouse-enter~ view)
            (set-mouse-in view)
            (feedback action)
            (set-mouse-in view)
            (proc root view event))))))
  
  (define (playing-mouse action event-kind proc)
    (define (parse)
      (bind (kind host-locator view-locator . rest) action
        (if (and (pair? rest)
                 (is? (car rest) Point))
            (values host-locator view-locator (car rest) (cdr rest))
          (values host-locator view-locator #f rest))))
    
    (receive (host-locator view-locator position modifiers) (parse)
      (define (locate-host)
        (if (pair? host-locator)
            (case (car host-locator)
              ((:palette) (singleton-palette-named (cadr host-locator)))
              ((:docked) (singleton-docked-named (cadr host-locator)))
              (else #f))
          (case host-locator
            ((:modal) (current-modal))
            ((:popup) (current-popup))
            ((:menubar) (find-menubar))
            ((:toolbar) (find-toolbar~ (get-application)))
            ((:statusbar) (find-status-bar~ (get-application)))
            ((:frame) (current-frame))
            (else #f))))
      
      (define (play-host host path)
        (assert host)
        (if (and (pair? path) (eq? (car path) :host))
            (play-in host (cdr path))
          (let ((guest (get-guest~ host)))
            (assert guest)
            (play-in guest path))))
      
      (define (play-in in path)
        (play-root (locate-in in path)))
      
      (define (play-root view)
        (define (effective-position)
          (or position
              (let ((size (get-size~ view)))
                (new Point (fxround/ (get-width~ size) 2) (fxround/ (get-height~ size) 2)))))
        
        (let ((root (get-root~ view)))
          (assert root)
          (let ((position (effective-position)))
            (simulate-mouse view position)
            (proc root view (new Mouse-Event event-kind #f (modifiers->mask modifiers) position: position)))))
      
      (unless (eq? host-locator :unidentifiable)
        (let ((host (locate-host)))
          (if host
              (play-host host view-locator)
            (error "Unknown host: {s}" host-locator))))))
  
  (define (dispatch-click root view event)
    (dispatch-mouse-down~ root view event)
    (dispatch-mouse-up~ root view event))
  
  (define (dispatch-double root view event)
    (dispatch-mouse-down~ root view event)
    (dispatch-mouse-up~ root view event)
    (dispatch-double-click~ root view event)
    (dispatch-mouse-up~ root view event))
  
  (define (play-menubar action)
    (bind (kind path . modifiers) action
      (bind (menubar . subpath) path
        (play-feedback `(:click :menubar ,menubar))
        (for-each (lambda (name)
                    (play-feedback `(:click :popup ,name)))
                  subpath))))
  
  (define (play-feedback action)
    (feedback action)
    (play-action action))
  
  (define (find-menubar)
    (find-menubar~ (get-application)))
  
  (define (locate-in in path)
    (assert in)
    (let ((view (if (null? path)
                    in
                  (locate-descendant~ in path))))
      (or view
          (error "Unable to find '{s} in: {s}" path in))))
  
  (play-action action))


;;;
;;;; Action
;;;


(definition public (play-action action)
  (bind (action/handler . event) action
    (typecase action/handler
      ((Action)
       (call-action action/handler #f '() event: event))
      (else
       (let ((target (get-focus)))
         (invoke~ action/handler target event)))))))
