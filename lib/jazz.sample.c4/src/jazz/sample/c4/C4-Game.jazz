(module protected jazz.sample.c4.C4-Game jazz


(import (jazz.sample.c4)
        (jazz.sample.game))


(class C4-Game extends Game
  
  
  ;; board
  (slot board-rows       initialize #f accessors generate)
  (slot board-columns    initialize #f accessors generate)
  (slot board-size       initialize #f accessors generate)
  (slot board            initialize #f accessors generate)
  
  ;; play
  (slot available-moves  initialize #f accessors generate)

  
  (method override (initialize self . rest)
    (define (make-board)
      (let ((board (make-vector board-size #f)))
        (loop (for row from 0 below board-rows)
              (loop (for col from 0 below board-columns)
                    (let ((rank (square-rank self row col)))
                      (vector-set! board rank (new Square self row col)))))
        board))
    
    (define (make-availables)
      (let ((moves (make-vector board-columns #f))
            (bottom-row (- board-rows 1)))
        (loop (for col from 0 below board-columns)
              (vector-set! moves col (get-square self bottom-row col)))
        moves))
    
    (define (setup-squares)
      (loop (for row from 0 below board-rows)
            (loop (for col from 0 below board-columns)
                  (let ((square (get-square self row col)))
                    (set-up square (find-square self (- row 1) col))
                    (set-down square (find-square self (+ row 1) col))))))
    
    (bind-keywords ((rows 6) (columns 7)) rest
      (nextmethod self)
      (set! board-rows rows)
      (set! board-columns columns)
      (set! board-size (* board-rows board-columns))
      (set! board (make-board))
      (set! available-moves (make-availables))
      (setup-squares)
      (setup-lines self)))
  
  
  ;;;
  ;;;; Lines
  ;;;
  
  
  (definition directions
    '((0 . 1)
      (1 . 1)
      (1 . 0)
      (1 . -1)))
  
  
  (method (setup-lines self)
    (loop (for rank from 0 below board-size)
          (let ((square (board-ref self rank)))
            (set-lines square (compute-lines self square)))))
  
  
  (method (compute-lines self square)
    (let ((line (get-line square))
          (col (get-col square))
          (lines '()))
      (loop (for dir in directions)
            (loop (for n from -3 to 0)
                  (let ((a (find-next self dir line col (+ n 0)))
                        (b (find-next self dir line col (+ n 1)))
                        (c (find-next self dir line col (+ n 2)))
                        (d (find-next self dir line col (+ n 3))))
                    (if (and a b c d)
                        (set! lines (cons (new 4-Line a b c d) lines))))))
      lines))
  
  
  (method (find-next self dir line col n)
    (find-square self
      (+ line (* n (car dir)))
      (+ col (* n (cdr dir)))))
  
  
  ;;;
  ;;;; Board
  ;;;
  
  
  (method public (iterate-board self proc)
    (loop (for row from 0 below board-rows)
          (loop (for col from 0 below board-columns)
                (do (proc (get-square self row col))))))
  
  
  (method package inline (board-ref self rank) <Square>
    (vector-ref board rank))
  
  
  (method inline (square-rank self row col) <fx>
    (+ (* row board-columns) col))
  
  
  (method package inline (get-square self row col) <Square>
    (board-ref self (square-rank self row col)))
  
  
  (method (find-square self row col) <Square+>
    (if (and (>= row 0) (< row board-rows)
             (>= col 0) (< col board-columns))
        (get-square self row col)
      #f))
  
  
  ;;;
  ;;;; Move
  ;;;
  
  
  (method package inline (available-move self col) <Square+>
    (vector-ref available-moves col))
  
  
  (method inline (set-available-move self col square) <void>
    (vector-set! available-moves col square))
  
  
  (method override (play self move token)
    (set-token move token)
    (set-available-move self (get-col move) (get-up move)))
  
  
  (method override (unplay self move)
    (set-available-move self (get-col move) move)
    (set-token move EMPTY))
  
  
  ;;;
  ;;;; Play
  ;;;
  
  
  (method override (play-move self move)
    (let ((player (next-player! self)))
      (let ((token (get-me player)))
        (play self move token)
        (add-move self move)
        (inform-players self move token)
        (check-status self player move token))))
  
  
  (method override (win? self move token)
    (define (line? line)
      (= (count-token line token) 4))
    
    (some? line? (get-lines move)))
  
  
  (method override (draw? self move token)
    (not (loop (for col from 0 below board-columns)
               (some (available-move self col)))))
  
  
  ;;;
  ;;;; I/O
  ;;;
  
  
  @wait
  (method (load-board game)
    (initialize-game game HUMAN)
    (loop (for tokens in saved-board)
          (for col from 0 below board-columns)
          (loop (for token in tokens)
                (for row from (- board-rows 1) downto 0)
                (let ((square (get-square row col)))
                  (set-token square
                    (case token
                      ((X) HUMAN)
                      ((O) COMPUTER)))))
          (let ((move (- board-rows (length tokens) 1)))
            (set-available-move col (if (>= move 0) (get-square move col) #f))))
    (invalidate-view game))
  
  
  ;;;
  ;;;; Debug
  ;;;
  
  
  (method (inspect-board self)
    (loop (for row from 0 below board-rows)
          (loop (for col from 0 below board-columns)
                (let ((token (get-token (get-square self row col))))
                  (display (cond ((eq? token EMPTY) ".")
                                 ((eq? token RED) "X")
                                 ((eq? token GREEN) "O")))
                  (display " ")))
          (newline)))))