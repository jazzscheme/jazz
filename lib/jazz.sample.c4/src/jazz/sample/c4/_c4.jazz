;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; C4
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module jazz.sample.c4 jazz


(hub available-move)
(hub board-ref)
(hub count-token)
(hub evaluate-move-delta)
(hub get-available-moves)
(hub get-board-columns)
(hub get-board-rows)
(hub get-board-size)
(hub get-col)
(hub get-current-eval)
(hub get-down)
(hub get-first)
(hub get-fourth)
(hub get-last-move)
(hub get-line)
(hub get-lines)
(hub get-me)
(hub get-second)
(hub get-square)
(hub get-third)
(hub get-token)
(hub get-up)
(hub play)
(hub play-move)
(hub present)
(hub set-current-eval)
(hub set-down)
(hub set-lines)
(hub set-search-depth)
(hub set-token)
(hub set-up)
(hub unplay)


(export (jazz.sample.c4.autoload))

(import (jazz.sample.game))


(definition package EMPTY <fx>
  0)

(definition package RED <fx>
  -1)

(definition package GREEN <fx>
  1)


(definition package Search-Depth
  5)


;;;
;;;; Player
;;;


(class C4-Player extends Player
  
  
  (slot game     getter generate)
  (slot me       getter generate)
  (slot opponent getter generate)
  
  
  (method override (initialize self game me)
    (nextmethod self)
    (set! self.game game)
    (set! self.me me)
    (set! self.opponent (* me -1)))
  
  
  (method override (print self output readably)
    (print-unreadable self output
      (lambda (output)
        (format output "{a}" me))))
  
  
  (method package (present self)
    (if (eq? me GREEN)
        "Green"
      "Red")))


;;;
;;;; Square
;;;


(class Square extends Object
  
  
  (slot game            getter generate)
  (slot line  <fx>      getter generate)
  (slot col   <fx>      getter generate)
  (slot token <fx>      accessors generate)
  (slot up    <Square+> accessors generate)
  (slot down  <Square+> accessors generate)
  (slot lines <list>    accessors generate)
  
  
  (method override (initialize self game line col)
    (nextmethod self)
    (set! self.game game)
    (set! self.line line)
    (set! self.col col)
    (set! self.token EMPTY))
  
  
  (method override (print self output readably)
    (print-unreadable self output
      (lambda (output)
        (format output "{a} {a}" (present-move game self) token)))))


(definition package (present-line game line)
  (->string (- (get-board-rows game) line)))


(definition package (present-col game col)
  (->string (element Uppercase-Chars col)))


(definition package (present-move game move)
  (let ((line (get-line move))
        (col (get-col move)))
    (format "{a}{a}"
            (present-col game col)
            (present-line game line))))


;;;
;;;; Line
;;;


(class 4-Line extends Object
  
  
  (slot first  <Square> getter generate)
  (slot second <Square> getter generate)
  (slot third  <Square> getter generate)
  (slot fourth <Square> getter generate)
  
  
  (method override (initialize self first second third fourth)
    (nextmethod self)
    (set! self.first first)
    (set! self.second second)
    (set! self.third third)
    (set! self.fourth fourth))
  
  
  (method package (count-token self token <fx>) <fx>
    (+ (if (= (get-token first) token) 1 0)
       (if (= (get-token second) token) 1 0)
       (if (= (get-token third) token) 1 0)
       (if (= (get-token fourth) token) 1 0))))


(definition package (line=? l1 l2)
  (and (eq? (get-first l1) (get-first l2))
       (eq? (get-second l1) (get-second l2))
       (eq? (get-third l1) (get-third l2))
       (eq? (get-fourth l1) (get-fourth l2)))))
