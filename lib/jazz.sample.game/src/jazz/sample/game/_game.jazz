;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Games
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Joel Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;    Guillaume Cartier
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module jazz.sample.game jazz


(import (jazz.history)
        (jazz.library))


;;;
;;;; Player
;;;


(class Player extends Object
  
  
  (method protected virtual (player-kind)
    )
  
  
  (method protected virtual (human?)
    (eq? (player-kind) 'human))
  
  
  (method protected virtual (computer?)
    (eq? (player-kind) 'computer))
  
  
  (method protected virtual (computer-move)
    )
  
  
  ;; for incremental algorithms
  (method protected virtual (move-played move token)
    ))


;;;
;;;; Game
;;;


(class Game extends Object implements History-Provider


  ;; players
  (slot players          initialize #f accessors generate)
  (slot next-player-rank initialize #f accessors generate)
  
  ;; history
  (slot history-manager  initialize #f)
  
  ;; status
  (slot status           initialize #f accessors generate)
  (slot winner           initialize #f accessors generate)

  
  ;;;
  ;;;; Initialize
  ;;;
  
  
  (method override (initialize)
    (nextmethod)
    (set! next-player-rank 0)
    (set! history-manager (new History-Manager self))
    (set! status 'play)
    (set! winner #f))

  
  ;;;
  ;;;; History
  ;;;
  
  
  (method override (current-history-item)
    #f)
  
  
  (method override (update-history-actions)
    )

  
  ;;;
  ;;;; Players
  ;;;
  
  
  (method public (register-players lst)
    (set! players (list->vector lst)))
  
  
  (method public (get-next-player)
    (vector-ref players next-player-rank))
  
  
  (method public (get-second-player)
    (vector-ref players (modulo-players (+ next-player-rank 1))))
  
  
  (method protected (next-player!)
    (prog1 (get-next-player)
      (set! next-player-rank (modulo-players (+ next-player-rank 1)))))
  
  
  (method (modulo-players rank)
    (modulo rank (vector-length players)))
  
  
  ;;;
  ;;;; Moves
  ;;;
  
  
  (method protected (add-move move)
    (add-history~ history-manager (new History-Move move)))
  
  
  (method protected (append-forward-history move)
    (append-forward-history~ history-manager (new History-Move move)))
  
  
  (method public (get-moves)
    (append (get-backward-moves)
            (get-forward-moves)))
  
  
  (method public (get-backward-moves)
    (map get-move~ (reverse (get-backward-history~ history-manager))))
  
  
  (method public (get-forward-moves)
    (map get-move~ (get-forward-history~ history-manager)))
  
  
  ;;;
  ;;;; Move
  ;;;
  
  
  (method protected virtual (play move)
    )
  
  
  (method protected virtual (unplay move)
    )
  
  
  ;;;
  ;;;; Play
  ;;;
  
  
  (method public virtual (play-move move)
    )
  
  
  (method (inform-players move token)
    (loop (for n from 0 below (vector-length players))
          (move-played~ (vector-ref players n) move token)))
  
  
  (method protected virtual (check-status player move token)
    (cond ((win? move token)
           (set! status 'win)
           (set! winner player))
          ((draw? move token)
           (set! status 'draw))))
  
  
  (method protected virtual (win? move token)
    #f)
  
  
  (method protected virtual (draw? move token)
    #f)
  
  
  ;;;
  ;;;; I/O
  ;;;
  
  
  (method public virtual (save)
    )
  
  
  (method public virtual (load)
    )
  
  
  ;;;
  ;;;; Debug
  ;;;
  
  
  (method public virtual (inspect)
    ))


;;;
;;;; History
;;;


(class History-Move extends History-Item
  
  
  (slot move getter generate)
  
  
  (method override (initialize move)
    (nextmethod)
    (set! move~self move))
  
  
  (method override (print output readably)
    (print-unreadable self output
      (lambda (output)
        (format output "{s}" move))))))
