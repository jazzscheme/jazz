;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Gomoku
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Joel Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;    Guillaume Cartier
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module jazz.sample.gomoku jazz


(hub board-play)
(hub board-ref)
(hub count-token)
(hub evaluate-move-delta)
(hub get-available-moves)
(hub get-board-columns)
(hub get-board-rows)
(hub get-board-size)
(hub get-col)
(hub get-current-eval)
(hub get-fifth)
(hub get-first)
(hub get-fourth)
(hub get-line)
(hub get-lines)
(hub get-me)
(hub get-second)
(hub get-square)
(hub get-third)
(hub get-token)
(hub play)
(hub play-move)
(hub present)
(hub set-current-eval)
(hub set-lines)
(hub set-search-depth)
(hub set-token)
(hub unplay)


(export (jazz.sample.gomoku.autoload))

(import (jazz.sample.game))


(definition package EMPTY <fx>
  0)

(definition package BLACK <fx>
  -1)

(definition package WHITE <fx>
  1)


(definition package Search-Depth
  4)

(definition package Candidates
  8)


;;;
;;;; Player
;;;


(class Gomoku-Player extends Player
  
  
  (slot game     getter generate)
  (slot me       getter generate)
  (slot opponent getter generate)
  
  
  (method override (initialize self game me)
    (nextmethod self)
    (set! self.game game)
    (set! self.me me)
    (set! self.opponent (* me -1)))
  
  
  (method override (print self output readably)
    (print-unreadable self output
      (lambda (output)
        (format output "{a}" me))))
  
  
  (method package (present self)
    (if (eq? me BLACK)
        "Black"
      "White")))


;;;
;;;; Human
;;;


(class Gomoku-Human extends Gomoku-Player
  
  
  (method override (player-kind self)
    'human))


;;;
;;;; Square
;;;


(class Square extends Object
  
  
  (slot game         getter generate)
  (slot line  <fx>   getter generate)
  (slot col   <fx>   getter generate)
  (slot token <fx>   accessors generate)
  (slot lines <list> accessors generate)
  
  
  (method override (initialize self game line col)
    (nextmethod self)
    (set! self.game game)
    (set! self.line line)
    (set! self.col col)
    (set! self.token EMPTY))
  
  
  (method override (print self output readably)
    (print-unreadable self output
      (lambda (output)
        (format output "{a} {a}" (present-move game self) token)))))


(definition package (moku-square? size row col)
  (let ((border (if (eq? size 'large) 4 3))
        (width (case size ((small) 9) ((medium) 13) (else 19))))
    (let ((a (- border 1))
          (b (/ (cast <fl> (- width 1)) 2))
          (c (- width border)))
      (and (or (= row a) (= row b) (= row c))
           (or (= col a) (= col b) (= col c))))))


(definition package (present-line game line)
  (->string (- (get-board-rows game) line)))


(definition package (present-col game col)
  (->string (element Uppercase-Chars col)))


(definition package (present-move game move)
  (let ((line (get-line move))
        (col (get-col move)))
    (format "{a}{a}"
            (present-col game col)
            (present-line game line))))


;;;
;;;; Line
;;;


(class 5-Line extends Object
  
  
  (slot first  <Square> getter generate)
  (slot second <Square> getter generate)
  (slot third  <Square> getter generate)
  (slot fourth <Square> getter generate)
  (slot fifth  <Square> getter generate)
  
  
  (method override (initialize self first second third fourth fifth)
    (nextmethod self)
    (set! self.first first)
    (set! self.second second)
    (set! self.third third)
    (set! self.fourth fourth)
    (set! self.fifth fifth))
  
  
  (method package (count-token self who <fx>) <fx>
    (+ (if (= (get-token first) who) 1 0)
       (if (= (get-token second) who) 1 0)
       (if (= (get-token third) who) 1 0)
       (if (= (get-token fourth) who) 1 0)
       (if (= (get-token fifth) who) 1 0))))


(definition package (line=? l1 l2)
  (and (eq? (get-first l1) (get-first l2))
       (eq? (get-second l1) (get-second l2))
       (eq? (get-third l1) (get-third l2))
       (eq? (get-fourth l1) (get-fourth l2))
       (eq? (get-fifth l1) (get-fifth l2))))


;;;
;;;; Game
;;;


(class Gomoku-Game extends Game


  ;; board
  (slot board-rows       initialize #f accessors generate)
  (slot board-columns    initialize #f accessors generate)
  (slot board-size       initialize #f accessors generate)
  (slot board            initialize #f accessors generate)
  
  ;; play
  (slot available-moves  initialize #f accessors generate)

  
  ;;;
  ;;;; Initialize
  ;;;
  
  
  (method override (initialize self . rest)
    (bind-keywords ((rows 9) (columns 9)) rest
      (nextmethod self)
      (set! board-rows rows)
      (set! board-columns columns)
      (set! board-size (* board-rows board-columns))
      (set! board (make-board self))
      (set! available-moves (make-availables self))
      (setup-lines self)))
  
  
  (method (make-board self)
    (let ((board (make-vector board-size #f)))
      (loop (for row from 0 below board-rows)
            (loop (for col from 0 below board-columns)
                  (let ((rank (square-rank self row col)))
                    (vector-set! board rank (new Square self row col)))))
      board))
  
  
  (method (make-availables self)
    (coerce board List))
  
  
  ;;;
  ;;;; Lines
  ;;;
  
  
  (definition directions
    '((0 . 1)
      (1 . 1)
      (1 . 0)
      (1 . -1)))
  
  
  (method (setup-lines self)
    (loop (for rank from 0 below board-size)
          (let ((square (board-ref self rank)))
            (set-lines square (compute-lines self square)))))
  
  
  (method (compute-lines self square)
    (let ((line (get-line square))
          (col (get-col square))
          (lines '()))
      (loop (for dir in directions)
            (loop (for n from -4 to 0)
                  (let ((a (find-next self dir line col (+ n 0)))
                        (b (find-next self dir line col (+ n 1)))
                        (c (find-next self dir line col (+ n 2)))
                        (d (find-next self dir line col (+ n 3)))
                        (e (find-next self dir line col (+ n 4))))
                    (if (and a b c d e)
                        (set! lines (cons (new 5-Line a b c d e) lines))))))
      lines))
  
  
  (method (find-next self dir row col n)
    (find-square self (+ row (* n (car dir)))
                 (+ col (* n (cdr dir)))))
  
  
  ;;;
  ;;;; Board
  ;;;
  
  
  (method public (iterate-board self proc)
    (loop (for row from 0 below board-rows)
          (loop (for col from 0 below board-columns)
                (do (proc (get-square self row col))))))
  
  
  (method package inline (board-ref self rank) <Square>
    (vector-ref board rank))
  
  
  (method inline (square-rank self row col) <fx>
    (+ (* row board-columns) col))
  
  
  (method package inline (get-square self row col) <Square>
    (board-ref self (square-rank self row col)))
  
  
  (method (find-square self row col) <Square+>
    (if (and (>= row 0) (< row board-rows)
             (>= col 0) (< col board-columns))
        (get-square self row col)
      #f))
  
  
  ;;;
  ;;;; Move
  ;;;
  
  
  (method override (play self move token)
    (set-token move token)
    (set! available-moves (remove! move available-moves)))
  
  
  (method override (unplay self move)
    (set! available-moves (cons move available-moves))
    (set-token move EMPTY))
  
  
  ;;;
  ;;;; Play
  ;;;
  
  
  (method override (play-move self move)
    (let ((player (next-player! self)))
      (let ((token (get-me player)))
        (play self move token)
        (add-move self move)
        (inform-players self move token)
        (check-status self player move token))))
  
  
  (method override (win? self move token)
    (define (line? line)
      (= (count-token line token) 5))
    
    (some? line? (get-lines move)))
  
  
  (method override (draw? self move token)
    (null? available-moves))
  
  
  ;;;
  ;;;; I/O
  ;;;
  
  
  @wait
  (method (save-board)
    )
  
  
  @wait
  (method (load-board game)
    (initialize-game game HUMAN)
    (loop (for tokens in saved-board)
          (for col from 0 below (get-board-columns game))
          (loop (for token in tokens)
                (for row from (- (get-board-rows game) 1) downto 0)
                (let ((square (get-square row col)))
                  (set-token square
                    (case token
                      ((X) HUMAN)
                      ((O) COMPUTER)))))
          (let ((move (- (get-board-rows game) (length tokens) 1)))
            @cant-find
            (set-column-move col (if (>= move 0) (square move col) #f))))
    (invalidate-view game))
  
  
  ;;;
  ;;;; Debug
  ;;;
  
  
  @wait
  (method (inspect-board game)
    (loop (for row from 0 below (get-board-rows game))
          (loop (for col from 0 below (get-board-columns game))
                (let ((token (get-token (get-square game row col))))
                  (display (cond ((eq? token EMPTY) ".")
                                 ((eq? token HUMAN) "X")
                                 ((eq? token COMPUTER) "O")))
                  (display " ")))
          (newline)))))
