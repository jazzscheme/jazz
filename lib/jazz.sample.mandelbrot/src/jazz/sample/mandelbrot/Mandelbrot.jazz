;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Mandelbrot
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;    Joel Cartier
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.sample.mandelbrot.Mandelbrot jazz


(import (jazz.graphic)
        (jazz.ui)
        (jazz.ui.view))


(class Mandelbrot extends View
  
  
  (property iterations initialize 10 accessors generate)
  
  
  (slot ch)
  (slot cv)
  (slot scale)
  (slot c)
  (slot n)
  (slot pixels initialize (new List-Factory))
  
  
  ;;;
  ;;;; Host
  ;;;
  
  
  (method meta override (host-title)
    "Mandelbrot")
  
  
  (method meta override (host-size)
    {Dimension 600 600})
  
  
  ;;;
  ;;;; Coordinates
  ;;;
  
  
  (method (setup-coordinates)
    (let* ((width (get-width))
           (height (get-height))
           (ch (/ (cast <fl> width) 2))
           (cv (/ (cast <fl> height) 2))
           (scale (/ (cast <fl> (- (min width height) 50)) 5)))
      (set! ch~self ch)
      (set! cv~self cv)
      (set! scale~self scale)))
  
  
  (method (complex->view r i)
    (new Point (round (+ ch (* r scale))) (round (+ cv (* i scale)))))
  
  
  (method (view->complex h v . rest)
    (let ((r (/ (- h ch) scale))
          (i (/ (- v cv) scale)))
      (make-rectangular r i)))
  
  
  ;;;
  ;;;; Iteration
  ;;;
  
  
  (method (iterate dragging?)
    (define (iteration-color n)
      (if (not n)
          {Color Black}
        (element Colors (modulo n (length Colors)))))
    
    (with ((surface (get-view-surface)))
      (set-color~ surface {Color Dark-Red})
      (set-line-width~ surface 1)
      (let ((z 0)
            (pixel #f)
            (outside? #f))
        (loop (for n from 0 below iterations)
              (do (unless outside?
                    (let ((next (+ (* z z) c)))
                      (when (not dragging?)
                        (line surface (real-part z) (imag-part z) (real-part next) (imag-part next))
                        (sleep .1))
                      (let ((norm (norm next)))
                        (if (> norm 2)
                            (begin
                              (set! pixel (new Pixel c (complex->view (real-part c) (imag-part c)) n (iteration-color n)))
                              (set! outside? #t))
                          (set! z next)))))))
        (when (not outside?)
          (set! pixel (new Pixel c (complex->view (real-part c) (imag-part c)) #f (iteration-color #f))))
        (put~ pixels pixel)
        (if dragging?
            (draw-pixel surface pixel)
          (loop (for radius from 1 to Pixel-Radius)
                (do (draw-pixel surface pixel radius)
                    (sleep .05)))))
      (when (not dragging?)
        (sleep .25))))
  
  
  (method (change-iterations)
    (let ((new-iterations (request-string title: "Iterations" prefix: "Iterations" initial-value: (->string iterations))))
      (set! iterations (parse-integer new-iterations))))

  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method override (size-change size)
    (define (recalculate-pixel-positions)
      (for-each (lambda (pixel)
                  (let ((c (get-c~ pixel)))
                    (set-pos~ pixel (complex->view (real-part c) (imag-part c)))))
                (get-output~ pixels)))
    
    (nextmethod size)
    (setup-coordinates)
    (recalculate-pixel-positions))

  
  ;;;
  ;;;; Drawing
  ;;;
  
  
  (definition Colors
    '({Color Blue}
      {Color Green}
      {Color Yellow}
      {Color Orange}
      {Color Red}
      {Color Purple}))
  
  (definition Background-Color
    {Color Medium-Gray})
  
  (definition Radius-Color
    {Color Gray})
  
  (definition Pixel-Radius
    10)

  (definition Draw-Outside?
    #t)
  
  
  (method override (draw surface context)
    (let ((bounds (get-bounds)))
      (fill-rect~ surface bounds Background-Color)
      (set-color~ surface {Color White})
      (set-line-width~ surface 1)
      (line surface -2 0 2 0)
      (line surface 0 -2 0 2)
      (let ((lt (complex->view -2 -2))
            (rb (complex->view 2 2)))
        (ellipse~ surface (new Rect (get-h~ lt) (get-v~ lt) (get-h~ rb) (get-v~ rb)) Radius-Color #f))
      (for-each (lambda (pixel)
                  (draw-pixel surface pixel))
                (get-output~ pixels))))
  
  
  (definition (draw-pixel surface pixel (radius Pixel-Radius))
    (let ((pos (get-pos~ pixel))
          (color (get-color~ pixel)))
      (when Draw-Outside?
        (ellipse~ surface (new Rect (- (get-h~ pos) radius) (- (get-v~ pos) radius) (+ (get-h~ pos) radius) (+ (get-v~ pos) radius)) color color))))
  
  
  (method (line surface r i dr di)
    (let ((src (complex->view r i))
          (dst (complex->view dr di)))
      (line~ surface (get-h~ src) (get-v~ src) (get-h~ dst) (get-v~ dst))))
  
  
  ;;;
  ;;;; Mouse
  ;;;
  
  
  (method override (mouse-down pos)
    (acquire-focus)
    (let ((c (view->complex (get-h~ pos) (get-v~ pos))))
      (set! c~self c)
      (set! n~self 0)
      (iterate #f)
      (redraw-view)))
  
  
  (method override (drag-move pos)
    (let ((c (view->complex (get-h~ pos) (get-v~ pos))))
      (set! c~self c)
      (set! n~self 0)
      (iterate #t)))
  
  
  (method override (mouse-up pos)
    (redraw-view))
  
  
  ;;;
  ;;;; Keyboard
  ;;;
  
  
  (method override (key-press char)
    (case char
      ((#\c) (clear))
      ((#\i) (change-iterations))))
  
  
  (method (clear)
    (reset~ pixels)
    (redraw-view)))


;;;
;;;; Pixel
;;;


(class Pixel extends Object
  
  
  (slot c     accessors generate)
  (slot pos   accessors generate)
  (slot iter  accessors generate)
  (slot color accessors generate)
  
  
  (method override (initialize c pos iter color)
    (nextmethod)
    (set! c~self c)
    (set! pos~self pos)
    (set! iter~self iter)
    (set! color~self color))))
