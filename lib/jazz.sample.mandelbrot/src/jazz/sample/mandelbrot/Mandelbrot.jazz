;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Mandelbrot
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;    Joel Cartier
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.sample.mandelbrot.Mandelbrot jazz


(import (jazz.graphic)
        (jazz.view)
        (jazz.sample.mandelbrot))


(class Mandelbrot extends View
  
  
  (property iterations initialize 10 accessors generate)
  
  
  (slot ch)
  (slot cv)
  (slot scale)
  (slot c)
  (slot n)
  (slot pixels initialize (new List-Factory))
  
  
  ;;;
  ;;;; Host
  ;;;
  
  
  (method meta override (host-title self)
    "Mandelbrot")
  
  
  (method meta override (host-size self)
    {Dimension 600 600})
  
  
  ;;;
  ;;;; Coordinates
  ;;;
  
  
  (method (setup-coordinates self)
    (let* ((width (get-width self))
           (height (get-height self))
           (ch (/ (cast <fl> width) 2))
           (cv (/ (cast <fl> height) 2))
           (scale (/ (cast <fl> (- (min width height) 50)) 5)))
      (set! self.ch ch)
      (set! self.cv cv)
      (set! self.scale scale)))
  
  
  (method (complex->view self r i)
    (new Point (fxround (+ ch (* r scale))) (fxround (+ cv (* i scale)))))
  
  
  (method (view->complex self h v . rest)
    (let ((r (/ (- h ch) scale))
          (i (/ (- v cv) scale)))
      (make-rectangular r i)))
  
  
  ;;;
  ;;;; Iteration
  ;;;
  
  
  (method (iterate self dragging?)
    (define (iteration-color n)
      (if (not n)
          {Color Black}
        (element Colors (modulo n (length Colors)))))
    
    (with-view-surface self
      (lambda (surface)
        (set-color surface {Color Dark-Red})
        (set-line-width surface 1)
        (let ((z 0)
              (pixel #f)
              (outside? #f))
          (loop (for n from 0 below iterations)
                (do (unless outside?
                      (let ((next (+ (* z z) c)))
                        (when (not dragging?)
                          (line self surface (real-part z) (imag-part z) (real-part next) (imag-part next))
                          (sleep .1))
                        (let ((norm (norm next)))
                          (if (> norm 2)
                              (begin
                                (set! pixel (new Pixel c (complex->view self (real-part c) (imag-part c)) n (iteration-color n)))
                                (set! outside? #t))
                            (set! z next)))))))
          (when (not outside?)
            (set! pixel (new Pixel c (complex->view self (real-part c) (imag-part c)) #f (iteration-color #f))))
          (put pixels pixel)
          (if dragging?
              (draw-pixel surface pixel)
            (loop (for radius from 1 to Pixel-Radius)
                  (do (draw-pixel surface pixel radius)
                      (sleep .05)))))
        (when (not dragging?)
          (sleep .25)))))
  
  
  (method (change-iterations self)
    (let ((new-iterations (request-string title: "Iterations" prefix: "Iterations" initial-value: (->string iterations))))
      (set! iterations (parse-integer new-iterations))))

  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method override (size-change self size)
    (define (recalculate-pixel-positions)
      (for-each (lambda (pixel)
                  (let ((c (get-c pixel)))
                    (set-pos pixel (complex->view self (real-part c) (imag-part c)))))
                (get-output pixels)))
    
    (nextmethod self size)
    (setup-coordinates self)
    (recalculate-pixel-positions))

  
  ;;;
  ;;;; Drawing
  ;;;
  
  
  (definition Colors
    '({Color Blue}
      {Color Green}
      {Color Yellow}
      {Color Orange}
      {Color Red}
      {Color Purple}))
  
  (definition Background-Color
    {Color Medium-Gray})
  
  (definition Radius-Color
    {Color Gray})
  
  (definition Pixel-Radius
    10)

  (definition Draw-Outside?
    #t)
  
  
  (method override (draw self surface context)
    (let ((bounds (get-bounds self)))
      (fill-rect surface bounds Background-Color)
      (set-color surface {Color White})
      (set-line-width surface 1)
      (line self surface -2 0 2 0)
      (line self surface 0 -2 0 2)
      (let ((lt (complex->view self -2 -2))
            (rb (complex->view self 2 2)))
        (frame-rect surface (new Rect (get-h lt) (get-v lt) (get-h rb) (get-v rb)) {Color Red})
        (ellipse surface (new Rect (get-h lt) (get-v lt) (get-h rb) (get-v rb)) Radius-Color #f))
      (for-each (lambda (pixel)
                  (draw-pixel surface pixel))
                (get-output pixels))))
  
  
  (definition (draw-pixel surface pixel (radius Pixel-Radius))
    (let ((pos (get-pos pixel))
          (color (get-color pixel)))
      (when Draw-Outside?
        (ellipse surface (new Rect (- (get-h pos) radius) (- (get-v pos) radius) (+ (get-h pos) radius) (+ (get-v pos) radius)) color color))))
  
  
  (method package (line self surface r i dr di)
    (let ((src (complex->view self r i))
          (dst (complex->view self dr di)))
      (line surface (get-h src) (get-v src) (get-h dst) (get-v dst))))
  
  
  ;;;
  ;;;; Mouse
  ;;;
  
  
  (method override (mouse-down self evt)
    (acquire-focus self)
    (let ((pos (get-position evt)))
      (let ((c (view->complex self (get-h pos) (get-v pos))))
        (set! self.c c)
        (set! self.n 0)
        (iterate self #f)
        (redraw-view self))))
  
  
  (method override (drag-move self evt)
    (let ((pos (get-position evt)))
      (let ((c (view->complex self (get-h pos) (get-v pos))))
        (set! self.c c)
        (set! self.n 0)
        (iterate self #t))))
  
  
  (method override (mouse-up self evt)
    (redraw-view self))
  
  
  ;;;
  ;;;; Keyboard
  ;;;
  
  
  (method override (key-press self evt)
    (case (get-key evt)
      ((#\c) (clear self))
      ((#\i) (change-iterations self))))
  
  
  (method package (clear self)
    (reset pixels)
    (redraw-view self)))


;;;
;;;; Pixel
;;;


(class Pixel extends Object
  
  
  (slot c     accessors generate)
  (slot pos   accessors generate)
  (slot iter  accessors generate)
  (slot color accessors generate)
  
  
  (method override (initialize self c pos iter color)
    (nextmethod self)
    (set! self.c c)
    (set! self.pos pos)
    (set! self.iter iter)
    (set! self.color color))))
