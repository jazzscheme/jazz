;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Schema
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module jazz.schema jazz


(hub add)
(hub add-column)
(hub add-row)
(hub add-view)
(hub auto-generate?)
(hub create)
(hub find-systype)
(hub get)
(hub get-children)
(hub get-columns)
(hub get-connection-string)
(hub get-constraints)
(hub get-count)
(hub get-data-schema)
(hub get-datatype)
(hub get-default-source)
(hub get-default-value)
(hub get-defaultable?)
(hub get-file)
(hub get-foreign-table)
(hub get-indexes)
(hub get-kind)
(hub get-missing?)
(hub get-name)
(hub get-owner)
(hub get-parent)
(hub get-precision)
(hub get-prefered-width)
(hub get-primary-key)
(hub get-primary-table)
(hub get-procedure)
(hub get-procedures)
(hub get-properties)
(hub get-property)
(hub get-provider)
(hub get-relations)
(hub get-row)
(hub get-rows)
(hub get-scale)
(hub get-schema)
(hub get-size)
(hub get-source)
(hub get-state)
(hub get-table)
(hub get-tables)
(hub get-tree)
(hub get-triggers)
(hub get-values)
(hub get-view)
(hub get-views)
(hub get-width)
(hub has-property?)
(hub import-inventory)
(hub load-archive)
(hub load-request)
(hub new-connection)
(hub new-inventory)
(hub present)
(hub present-detailed)
(hub print-schema)
(hub read-header)
(hub remove-row)
(hub save)
(hub set-columns)
(hub set-constraints)
(hub set-indexes)
(hub set-missing?)
(hub set-name)
(hub set-parent)
(hub set-primary-key)
(hub set-property)
(hub set-rows)
(hub set-source)
(hub set-state)
(hub set-triggers)
(hub validate)


(export (jazz.schema.autoload)
        (jazz.schema.syntax (phase syntax)))


;;;
;;;; SQL
;;;

  
(definition public (sql-sanitize-string str)
  (let (iterate (i 0) (result str))
    (let ((size (string-length result)))
      (if (< i size)
          (if (eq? (string-ref result i) #\')
              (iterate (+ i 2) (string-append (substring result 0 i) "''" (substring result (+ i 1) size)))
            (iterate (+ i 1) result))
        result))))


;;;
;;;; Data
;;;


(definition public undocumented (iterate-hierarchical-data proc data size key)
  (unless (not data)
    (let* ((id-row (car data))
           (id (key id-row))
           (id-data data)
           (id-size 1)
           (scan (cdr data))
           (scan-count 1))
      (while (< scan-count size)
        (let* ((scan-row (car scan))
               (scan-id (key scan-row)))
          (when (/= scan-id id)
            (proc id-row id-data id-size)
            (set! id-row scan-row)
            (set! id scan-id)
            (set! id-data scan)
            (set! id-size 0))
          (increase! id-size)
          (set! scan (cdr scan))
          (increase! scan-count)))
      (proc id-row id-data id-size))))


(definition public undocumented (collect-hierarchical-data proc data size key)
  (let ((fact (new List-Factory)))
    (iterate-hierarchical-data
      (lambda (row data size)
        (let ((object (proc row data size)))
          (when object
            (put fact object))))
      data
      size
      key)
    (get-output fact)))


;; quicky ugly
(definition public undocumented (sorted-hierarchical-data proc data size key sort-test sort-key)
  (collect (lambda (data)
             (proc (first data) (second data) (third data)))
           (sort sort-test (collect-hierarchical-data list data size key)
             key: (lambda (data)
                    (sort-key (first data)))))))
