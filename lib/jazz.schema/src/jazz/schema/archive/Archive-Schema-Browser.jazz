;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Archive Schema Browser
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.schema.archive.Archive-Schema-Browser jazz


(import (jazz.database)
        (jazz.io)
        (jazz.markup)
        (jazz.schema)
        (jazz.text)
        (jazz.ui)
        (jazz.view))


(class undocumented Archive-Schema-Browser extends View
  
  
  (form
    (<install>                               size: {Dimension 370 78}
      (<Label-View>      name: file-label    title: "File:" position: {Point 0 6} size: {Dimension 80 16})
      (<Archive-Browser> name: file-browser  position: {Point 62 0} size: {Dimension 302 24} protocol: file parameters: (extensions: (("Archives" . "arv"))))
      (<Label-View>      name: schema-label  title: "Schema:" position: {Point 0 31} size: {Dimension 55 16})
      (<Border-View>     name: schema-border position: {Point 62 29} size: {Dimension 168 19} border-type: edge
        (<Schema-Combo>  name: schema-combo
          (<!>           name: body          left-padding: 2 top-padding: 2 base-style: {Text-Style Text-Base})))))
  
  
  ;;;
  ;;;; Access
  ;;;


  (method public (get-source self)
    (new Archive-Schema-Source
      (get-moniker (locate self 'file-browser))
      (get-value (locate self 'schema-combo))))


  (method public (set-source self source)
    (let ((moniker (if source (get-file source) #f))
          (content (if source (get-schema source) #f)))
      (set-moniker (locate self 'file-browser) moniker)
      (set-content (locate self 'schema-combo) content)))

  
  ;;;
  ;;;; Design
  ;;;
  
  
  (method (moniker-changed self)
    (let* ((browser (locate self 'file-browser))
           (file (get-moniker browser)))
      (when (valid-archive-pathname? file)
        (receive (version properties) (read-header Schema-Archive file)
          (let* ((typed-schemas (getf properties schemas:))
                 (title (when typed-schemas
                          (bind (schema kind) (car typed-schemas)
                            (present-schema schema kind)))))
            (update-valid-combo self typed-schemas)
            (set-content (locate self 'schema-combo) (or title "")))))))
  
  
  (definition (valid-archive-pathname? file)
    (and file
         (= (get-extension file) "arv")
         (exists? file)))

  
  ;;;
  ;;;; Schema
  ;;;
  
  
  (method (update-schema-combo self)
    (let* ((browser (locate self 'file-browser))
           (file (get-moniker browser)))
      (if (valid-archive-pathname? file)
          (receive (version properties) (read-header Schema-Archive file)
            (let ((typed-schemas (getf properties schemas:)))
              (update-valid-combo self typed-schemas)
              #t))
        (message-box "Please enter a valid archive pathname")
        (let ((text (get-text browser)))
          (acquire-focus text)
          (select-all text)
          #f))))
  
  
  (method (update-valid-combo self typed-schemas)
    (let ((choices
           (map (lambda (typed-schema)
                  (bind (schema kind) typed-schema
                    (let ((title (present-schema schema kind)))
                      (list schema title schema))))
                typed-schemas)))
      (set-choices (locate self 'schema-combo) choices)))
  
  
  (definition (present-schema schema kind)
    (let ((provider (get-provider Provider kind)))
      (format "{a} ({a})" schema (present provider))))

  
  ;;;
  ;;;; Modal
  ;;;
  
  
  (method override (validate-content self)
    (validate-content (locate self 'schema-combo))))


;;;
;;;; Archive-Browser
;;;


(class Archive-Browser extends Moniker-Widget
  
  
  @convert-inner
  (method (moniker-update)
    (moniker-changed)))


;;;
;;;; Schema-Combo
;;;


(class Schema-Combo extends Combo-Box
  
  
  (form
    (<install> condensed?: #t))
  
  
  @convert-inner
  (method (update-choices)
    (update-schema-combo))))
