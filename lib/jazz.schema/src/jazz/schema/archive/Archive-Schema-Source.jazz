;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Archive Schema Source
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.schema.archive.Archive-Schema-Source jazz


(import (jazz.schema))


(class undocumented Archive-Schema-Source extends Object implements Schema-Source
  
  
  (slot file   getter generate)
  (slot schema getter generate)
  
  
  (method override (initialize self file schema)
    (nextmethod self)
    (set! self.file file)
    (set! self.schema schema))
  
  
  ;;;
  ;;;; Present
  ;;;
  
  
  (method override (present self)
    (format "{a} ({a})"
            (get-name file)
            schema))
  
  
  (method override (present-detailed self)
    `(<span>
       "Archive"
       (<bulleted> ,(format "File: {a}" (get-name file)))
       (<bulleted> ,(format "Schema: {a}" schema))))
  
  
  ;;;
  ;;;; Schema
  ;;;
  
  
  (method override (get-data-schema self (reporter: reporter #f))
    (define (valid-schema schema schemas)
      (if (empty-string? schema)
          (error "Schema is mandatory")
        (or (assoc schema schemas)
            (error "Unknown schema: {a}" schema))))
    
    (receive (version properties) (read-header Schema-Archive file)
      (let ((schemas (getf properties schemas:)))
        (bind (name provider) (valid-schema schema schemas)
          (assert (= name schema))
          (let ((archive (load-archive Schema-Archive file)))
            (get-schema archive name))))))))
