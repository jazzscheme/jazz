;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Schema Archive
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.schema.archive.Schema-Archive jazz


(import (jazz.entity))


(class undocumented Schema-Archive extends Object implements Entity-Interface)


@convert


(class undocumented Schema-Archive extends Object implements Entity-Interface
  
  
  (slot version)
  (slot properties)
  (slot schemas)
  
  
  (method (initialize version properties schemas)
    (nextmethod)
    (set! self.version version)
    (set! self.properties properties)
    (set! self.schemas schemas))
  
  
  (method (print output readably)
    (print-unreadable self output
      (lambda (output)
        (let ((count (length schemas)))
          (format output "with {a} schema{a}" count (format-plural count))))))
  
  
  ;;;
  ;;;; Access
  ;;;


  (method public (get-version)
    version)


  (method public (get-properties)
    properties)
  
  
  (method public (get-property property (not-found #f))
    (getf properties property not-found: not-found))
  
  
  (method public (set-property property value)
    (if (getf properties property)
        (setf properties property value)
      (set! properties (cons property (cons value properties)))))


  (method public (get-schemas)
    schemas)
  
  
  (method public (get-schema name (error?: error? #t))
    (or (find-schema name)
        (error "Unable to find schema {a}" name)))
  
  
  (method public (find-schema name)
    (find-if (lambda (schema)
               (= (get-property schema name:) name))
             schemas))
  
  
  (method meta public (schema-properties schema)
    (list (get-property schema name:) (get-property schema provider:)))
  
  
  (method public (add-schema schema)
    (set! schemas (append! schemas (list schema)))
    (set-property :schemas (append! (get-property :schemas) (list (schema-properties schema)))))
  
  
  (method public (remove-schema schema)
    (set! schemas (remove! schema schemas))
    (set-property :schemas (remove! (assoc (get-property schema name:) (get-property :schemas)) (get-property :schemas))))
  
  
  (method public (rename-schema schema name)
    (let ((pair (assoc (get-property schema name:) (get-property :schemas))))
      (set-property schema name: name)
      (set-car! pair name)))

  
  ;;;
  ;;;; Header
  ;;;
  
  
  (method meta public (read-header moniker)
    (call-with-input-file (path-settings moniker eol-encoding: 'cr-lf readtable: jazz-readtable)
      (lambda (input)
        (values (read-version input)
                (read-properties input)))))
  
  
  (method meta (read-version input)
    (let ((name (read input))
          (version (read input)))
      (if (and (= name version:) (is? version Version))
          version
        (error "Unsupported file format"))))
  
  
  (method meta (read-properties input)
    (let ((name (read input))
          (properties (read input)))
      (if (and (= name properties:) (pair? properties))
          properties
        (error "Unsupported file format"))))
  
  
  ;;;
  ;;;; New
  ;;;
  
  
  (method meta public (new-archive)
    @commented-because-this-refers-to-metascoop-classes-metamodeler-to-convert
    (new self (archive-version MetaModeler) '() '()))
  
  
  ;;;
  ;;;; Load
  ;;;
  
  
  (method meta public (load-archive file)
    (call-with-input-file (path-settings file eol-encoding: 'cr-lf readtable: jazz-readtable)
      (lambda (input)
        (let ((content (read-until eof-object? input)))
          (new self
            (getf content version:)
            (getf content properties:)
            (getf content schemas:))))))
  
  
  ;;;
  ;;;; Save
  ;;;
    
  
  (method public (save-archive file)
    (call-with-output-file (path-settings file)
      (lambda (output)
        (output-header "Archive" output)
        (output-version version output)
        (output-properties properties output)
        (output-schemas schemas output))))
  
  
  (method (output-version version output)
    (format output "{%}{%}version: {s}{%}" version))
  
  
  (method (output-properties properties output)
    (format output "{%}{%}properties: {a}{%}"
            (if (null? properties)
                "()"
              (format "{s}" properties))))
  
  
  (method (output-schemas schemas output)
    (format output "{%}{%}schemas:{%}")
    (format output "({%}")
    (for-each (lambda (schema)
                (output-schema schema output))
              schemas)
    (format output "){%}"))
  
  
  (method (output-schema schema output)
    (output-section (get-property schema name:) output)
    (print-schema schema output))
  
  
  ;;;
  ;;;; Entity
  ;;;
  
  
  (method (get-factory)
    #f)
  
  
  (method (get-factories)
    '())
  
  
  (method (get-presentation)
    )
  
  
  (method (set-presentation controller presentation)
    )
  
  
  (method (can-cut-entity?)
    #f)
  
  
  (method (can-copy-entity?)
    #f)
  
  
  (method (can-paste-entity?)
    #f)
  
  
  (method (determine-paster . rest)
    #f)
  
  
  (method (can-rename-entity?)
    #f)
  
  
  (method (can-delete-entity?)
    #f)
  
  
  (method (can-relocate-entity?)
    #f)
  
  
  (method (can-view-properties?)
    #f)
  
  
  (method (get-standard-properties)
    '())))
