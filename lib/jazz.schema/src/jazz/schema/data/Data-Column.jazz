;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Data Columns
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.schema.data.Data-Column jazz


(import (jazz.schema))


(class Data-Column extends Data-Object


  (slot datatype getter generate)
  (slot width    getter generate)
  
  
  (method override (initialize self (name: name #f) (parent: parent #f) (datatype: datatype #f) (width: width #f) (properties: properties '()))
    (bind-keywords ((datatype datatype) . others) properties
      (nextmethod self)
      (set! self.name name)
      (set! self.parent parent)
      (set! self.datatype datatype)
      (set! self.width width)
      (set! self.properties others)))
  
  
  ;;;
  ;;;; Print
  ;;;
  
  
  (method package (print-schema self output)
    (format output "~{{s} {s} (datatype: {s} {l detail: :reader})}"
            (category-name (class-of self))
            name
            datatype
            properties))
  
  
  ;;;
  ;;;; Object
  ;;;
  
  
  (method override (get-kind self)
    'column)
  
  
  ;;;
  ;;;; Access
  ;;;


  (method override (property-names self)
    '(datatype nullable? ordinal-position default-value auto-increment? display-format validation-rule validation-text allow-zero-length? identity? identity-replication? identity-seed identity-increment timestamp? description))
  
  
  (method override (get-property self keyword . rest)
    (case keyword
      ((datatype:) datatype)
      ((width:) width)
      (else (apply nextmethod self keyword rest))))
  
  
  (method override (set-property self keyword value)
    (case keyword
      ((datatype:) (set! datatype value))
      ((width:) (set! width value))
      (else (nextmethod self keyword value))))
  
  
  (method public (auto-generate? self)
    (or (and (has-property? self 'timestamp?) (get-property self 'timestamp?))
        (and (has-property? self 'identity?) (get-property self 'identity?))))
  
  
  ;;;
  ;;;; Present
  ;;;
  
  
  (method public (get-prefered-width self)
    50
    @convert
    (or (get-size datatype) 10))))
