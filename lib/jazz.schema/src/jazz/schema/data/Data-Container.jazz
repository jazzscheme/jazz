;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Data Container
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;    Marcel Cote
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.schema.data.Data-Container jazz


(import (jazz.database)
        (jazz.schema)
        (jazz.syntax (phase syntax))
        (jazz.time))


(class Data-Container extends Object
  
  
  (slot table getter generate)
  (slot state accessors generate)
  
  
  (method override (initialize self table state)
    (nextmethod self)
    (set! self.state state)
    (set! self.table table))
  
  
  ;;;
  ;;;; Save
  ;;;
  
  
  (method public virtual (get-values self))
  (method public virtual (get self identifier))
  
  
  (method public (save self connection (user: user #f))
    (define (save-statement)
      (case state
        ((update) (update-statement self user))
        ((insert) (insert-statement self user))
        ((delete) (delete-statement self user))
        (else #f)))
    
    (let ((statement (save-statement)))
      (if statement
          (execute connection statement)
        #t)))


  (method virtual (insert-statement self user)
    (let* ((columns (collect (lambda (column) (and (not (auto-generate? column)) (get-name column))) (get-columns table)))
           (values (map (lambda (name) (format-value (get self name))) columns)))
      (let ((name (get-name table))
            (columns (join (map format-column columns) ", "))
            (values (join values ", "))
            (user (if user (format "{a}." user) "")))
        (tie "insert into {user}[{name}]({columns}) values ({values})"))))
  
  
  (method virtual (update-statement self user)
    (let* ((primary-key (get-name (get-primary-key table)))
           (primary-value (format-value (get self primary-key)))
           (columns (collect (lambda (column)
                               (let ((name (get-name column)))
                                 (and (not (auto-generate? column))
                                      (not (equal? name primary-key))
                                      name)))
                             (get-columns table)))
           (values (map (lambda (name) (get self name)) columns)))
      (let ((name (get-name table))
            (primary-key (format-column primary-key))
            (columns+values (join (map (lambda (column value) (string-append (format-column column) "=" (format-value value))) columns values) ", "))
            (user (if user (format "{a}." user) "")))
        (tie "update {user}[{name}] set {columns+values} where ({primary-key}={primary-value})"))))
  
  
  (method virtual (delete-statement self user)
    (let ((name (get-name table))
          (primary-key (get-name (get-primary-key table))))
      (let ((primary-value (format-value (get self primary-key)))
            (primary-key (format-column primary-key)))
        (tie "delete from [{name}] where ({primary-key}={primary-value})"))))
  
  
  (definition (format-column name)
    (string-append "[" name "]"))
  
  
  (definition (format-value value)
    (cond ((not value) "NULL")
          ((string? value) (string-append "'" (sql-sanitize-string value) "'"))
          ((truth? value) (if (true? value) "1" "0"))
          ((date? value) (string-append "'" (present-date-day value) "'"))
          ((number? value) (number->string value))
          (else (error "Unsupported type"))))))
