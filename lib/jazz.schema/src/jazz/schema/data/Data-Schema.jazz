;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Data Schemas
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.schema.data.Data-Schema jazz


(import (jazz.library)
        (jazz.schema)
        (jazz.system))


(class Data-Schema extends Data-Entity implements Entity
  
  
  (slot tables     initialize (make-table test: equal?))
  (slot views      initialize (make-table test: equal?))
  (slot relations  initialize (make-table test: equal?))
  (slot procedures initialize (make-table test: equal?))
  
  
  (method override (initialize (name: name {}) (parent: parent {}) (properties: properties '()) (tables: tables '()) (views: views '()) (relations: relations '()) (procedures: procedures '()))
    (nextmethod)
    (set! name~self name)
    (set! parent~self parent)
    (set! properties~self properties)
    (add-tables tables)
    (add-views views)
    (add-relations relations)
    (add-procedures procedures))

 
  (method override (print printer readably)
    (print-unreadable self printer
      (lambda (printer)
        (format printer "{a} tables, {a} views, {a} relations, {a} procedures"
                (table-length tables)
                (table-length views)
                (table-length relations)
                (table-length procedures)))))
  
  
  ;;;
  ;;;; Print
  ;;;
  
  
  (method public (print-schema printer)
    (define (print-tables smaller)
      (format printer " (")
      (let ((first? #t))
        (for-each (lambda (table)
                    (if first?
                        (set! first? #f)
                      (format printer "{%}{_ 2}"))
                    (print-schema~ table printer))
                  (sort smaller (gather tables) key: get-name~)))
      (format printer "){%}"))
    
    (define (print-views smaller)
      (format printer " (")
      (let ((first? #t))
        (for-each (lambda (view)
                    (if first?
                        (set! first? #f)
                      (format printer "{%}{_ 2}"))
                    (print-schema~ view printer))
                  (sort smaller (gather views) key: get-name~)))
      (format printer "){%}"))
    
    (define (print-relations smaller)
      (format printer " (")
      (let ((first? #t))
        (for-each (lambda (relation)
                    (if first?
                        (set! first? #f)
                      (format printer "{%}{_ 2}"))
                    (print-schema~ relation printer))
                  (sort smaller (gather relations) key: get-name~)))
      (format printer "){%}"))
    
    (define (print-procedures smaller)
      (format printer " (")
      (let ((first? #t))
        (for-each (lambda (procedure)
                    (if first?
                        (set! first? #f)
                      (format printer "{%}{_ 2}"))
                    (print-schema~ procedure printer))
                  (sort smaller (gather procedures) key: get-name~)))
      (format printer ")"))
    
    (receive (equal smaller greater) (sort-predicates)
      (format printer "~{{s} {s list?: #t}{%}"
              (category-name (class-of self))
              properties)
      (print-tables smaller)
      (print-views smaller)
      (print-relations smaller)
      (print-procedures smaller)
      (format printer "}{%}")))
  
  
  ;;;
  ;;;; Object
  ;;;
  
  
  (method override (get-kind)
    'schema)
  
  
  ;;;
  ;;;; Entity
  ;;;
  
  
  (method override (create kind name)
    (case kind
      ((table) (new Data-Table name: name))
      ((view) (new Data-View name: name))
      ((relation) (new Data-Relation name: name))
      ((procedure) (new Data-Procedure name: name))))
  
  
  (method override (add kind object)
    (case kind
      ((table) (add-table object))
      ((view) (add-view object))
      ((relation) (add-relation object))
      ((procedure) (add-procedure object))))
  
  
  ;;;
  ;;;; Children
  ;;;
  
  
  (method override (get-children)
    (let* ((fact (new List-Factory))
           (add
            (lambda (object)
              (put~ fact object))))
      (for-each add tables)
      (for-each add views)
      (for-each add relations)
      (for-each add procedures)
      (get-output~ fact)))
  
  
  (method override (get-categorized-children)
    (let ((fact (new List-Factory)))
      (put-sequence~ fact (get-categorized-tables))
      (put-sequence~ fact (get-categorized-views))
      (put-sequence~ fact (get-categorized-relations))
      (put-sequence~ fact (get-categorized-procedures))
      (get-output~ fact)))
  
  
  ;;;
  ;;;; Tables
  ;;;
  
  
  (method public (get-tables)
    (gather tables))
  
  
  (method public (get-categorized-tables)
    (define (collect-normal-tables tables)
      (collect-if (lambda (table)
                    (not (get-property~ table linked?:)))
                  tables))
    
    (define (collect-linked-tables tables)
      (collect-if (lambda (table)
                    (get-property~ table linked?:))
                  tables))
    
    (receive (equal smaller greater) (sort-predicates)
      (let ((tables (get-tables)))
        (append! (sort smaller (collect-normal-tables tables) key: get-name~)
                 (sort smaller (collect-linked-tables tables) key: get-name~)))))
  
  
  (method public (get-table name)
    (table-ref tables name #f))
  
  
  (method public (add-table table)
    (set-parent~ table self)
    (table-set! tables (get-name~ table) table))
  
  
  (method public (add-tables tables)
    (for-each add-table tables))
  
  
  ;;;
  ;;;; Views
  ;;;
  
  
  (method public (get-views)
    (gather views))
  
  
  (method public (get-categorized-views)
    (receive (equal smaller greater) (sort-predicates)
      (sort smaller (get-views) key: get-name~)))
  
  
  (method public (get-view name)
    (table-ref views name #f))
  
  
  (method public (add-view view)
    (set-parent~ view self)
    (table-set! views (get-name~ view) view))
  
  
  (method public (add-views views)
    (for-each add-view views))
  
  
  ;;;
  ;;;; Relations
  ;;;
  
  
  (method public (get-relations)
    (gather relations))
  
  
  (method public (get-categorized-relations)
    (receive (equal smaller greater) (sort-predicates)
      (sort smaller (get-relations) key: get-name~)))
  
  
  (method public (get-relation name)
    (table-ref relations name #f))
  
  
  (method public (add-relation relation)
    (set-parent~ relation self)
    (table-set! relations (get-name~ relation) relation))
  
  
  (method public (add-relations relations)
    (for-each add-relation relations))
  
  
  ;;;
  ;;;; Procedures
  ;;;
  
  
  (method public (get-procedures)
    (gather procedures))
  
  
  (method public (get-categorized-procedures)
    (receive (equal smaller greater) (sort-predicates)
      (sort smaller (get-procedures) key: get-name~)))
  
  
  (method public (get-procedure name)
    (table-ref procedures name #f))
  
  
  (method public (add-procedure procedure)
    (set-parent~ procedure self)
    (table-set! procedures (get-name~ procedure) procedure))
  
  
  (method public (add-procedures procedures)
    (for-each add-procedure procedures))
  
  
  ;;;
  ;;;; Present
  ;;;
  
  
  (method public (present)
    (get-property name:))
  
  
  ;;;
  ;;;; Inventory
  ;;;
  
  
  (method meta public (import-inventory source-name data-source reporter)
    (let* ((properties (list name: (present~ data-source) provider: (external-name~ (get-provider~ data-source)) data-source: (present~ data-source)))
           (schema (new self properties: properties)))
      (with-closed ((connection (new-connection~ data-source)))
        (let ((inventory (get-inventory~ connection read-only?: #t)))
          (import-inventory~ schema source-name inventory reporter)
          schema))))
  
  
  (method (import-inventory source-name inventory reporter)
    (define (import-tables)
      (define (table-properties table)
        (let ((linked? (get-linked?~ table)))
          (list
            linked?:           linked?
            description:       (get-description~ table)
            validation-rule:   (get-validation-rule~ table)
            validation-text:   (get-validation-text~ table)
            connect:           (essay linked? (get-connect~ table))
            source-table-name: (essay linked? (get-source-table-name~ table)))))
      
      (let ((columns-consecutive? (columns-ordinal-position-consecutive?~ inventory)))
        (with-closed ((tables (get-tables~ inventory)))
          (for-each (lambda (table)
                      (let* ((owner (get-owner~ table))
                             (name (get-title~ table))
                             (properties (table-properties table))
                             (data-table (new Data-Table owner: owner name: name properties: properties)))
                        (user-message~ reporter "Importing {a} Table {a}..." source-name name)
                        (unless (getf properties linked?:)
                          (set-primary-key~ data-table (create-primary-key data-table table))
                          (set-columns~ data-table (create-columns data-table table columns-consecutive?))
                          (set-indexes~ data-table (create-indexes data-table table))
                          (set-triggers~ data-table (create-triggers data-table table))
                          (set-constraints~ data-table (create-constraints data-table table)))
                        (add-table data-table)))
                    tables))))
    
    (define (import-views)
      (define (view-properties view)
        (list
          text: (get-text~ view)))
      
      (with-closed ((views (get-views~ inventory)))
        (for-each (lambda (view)
                    (let* ((name (get-title~ view))
                           (properties (view-properties view))
                           (data-view (new Data-View name: name properties: properties)))
                      (user-message~ reporter "Importing {a} View {a}..." source-name name)
                      (add-view data-view)))
                  views)))
    
    (define (import-relations)
      (define (relation-properties relation)
        (list
          primary-table:        (get-primary-table~ relation)
          primary-columns:      (get-primary-field-names~ relation)
          foreign-table:        (get-foreign-table~ relation)
          foreign-columns:      (get-foreign-field-names~ relation)
          unique?:              (get-unique?~ relation)
          update-cascade?:      (get-update-cascade?~ relation)
          delete-cascade?:      (get-delete-cascade?~ relation)
          left?:                (get-left?~ relation)
          right?:               (get-right?~ relation)
          checked?:             (get-checked?~ relation)
          exclude-replication?: (get-exclude-replication?~ relation)))
      
      (with-closed ((relations (get-relations~ inventory)))
        (for-each (lambda (relation)
                    (let* ((name (get-title~ relation))
                           (properties (relation-properties relation))
                           (data-relation (new Data-Relation name: name properties: properties)))
                      (user-message~ reporter "Importing {a} Relation {a}..." source-name name)
                      (add-relation data-relation)))
                  relations)))
    
    (define (import-procedures)
      (define (procedure-properties procedure)
        (list
          text: (get-text~ procedure)))
      
      (with-closed ((procedures (get-procedures~ inventory)))
        (for-each (lambda (procedure)
                    (let* ((name (get-title~ procedure))
                           (properties (procedure-properties procedure))
                           (data-procedure (new Data-Procedure name: name properties: properties)))
                      (user-message~ reporter "Importing {a} Procedure {a}..." source-name name)
                      (add-procedure data-procedure)))
                  procedures)))
    
    (import-tables)
    (import-views)
    (import-relations)
    (import-procedures))
  
  
  (method (create-primary-key data-table table)
    (define (primary-key-properties primary-key)
      (list
        clustered?:    (get-clustered?~ primary-key)
        fill-factor:   (get-fill-factor~ primary-key)
        fields/orders: (get-fields/orders~ primary-key)))
    
    (with-closed ((primary-key (get-primary-key~ table)))
      (when primary-key
        (let ((name (get-title~ primary-key))
              (properties (primary-key-properties primary-key)))
          (new Data-Primary-Key name: name properties: properties)))))
  
  
  (method (create-columns data-table table columns-consecutive?)
    (define (column-properties column ordinal-position)
      (list
        datatype:              (get-datatype~ column)
        nullable?:             (get-nullable?~ column)
        default-value:         (get-default-value~ column)
        validation-rule:       (get-validation-rule~ column)
        validation-text:       (get-validation-text~ column)
        allow-zero-length?:    (get-allow-zero-length?~ column)
        description:           (get-description~ column)
        ordinal-position:      (either ordinal-position (get-ordinal-position~ column))
        display-format:        (get-display-format~ column)
        auto-increment?:       (get-auto-increment?~ column)
        identity?:             (get-identity?~ column)
        identity-replication?: (get-identity-replication?~ column)
        identity-seed:         (get-identity-seed~ column)
        identity-increment:    (get-identity-increment~ column)))
    
    (let ((ordinal-position 0))
      (with-closed ((columns (get-columns~ table)))
        (map (lambda (column)
               (let ((name (get-title~ column))
                     (properties (column-properties column (essay (not columns-consecutive?) ordinal-position))))
                 (increase! ordinal-position)
                 (new Data-Column name: name properties: properties)))
             columns))))
  
  
  (method (create-indexes data-table table)
    (define (index-properties index)
      (list
        unique?:               (get-unique?~ index)
        clustered?:            (get-clustered?~ index)
        ignore-duplicates?:    (get-ignore-duplicates?~ index)
        recompute-statistics?: (get-recompute-statistics?~ index)
        fill-factor:           (get-fill-factor~ index)
        pad-index?:            (get-pad-index?~ index)
        fields/orders:         (get-fields/orders~ index)))
    
    (with-closed ((indexes (get-indexes~ table)))
      (map (lambda (index)
             (let ((name (get-title~ index))
                   (properties (index-properties index)))
               (new Data-Index name: name properties: properties)))
           indexes)))
  
  
  (method (create-triggers data-table table)
    (define (trigger-properties trigger)
      (list
        text: (get-text~ trigger)))
    
    (with-closed ((triggers (get-triggers~ table)))
      (map (lambda (trigger)
             (let ((name (get-title~ trigger))
                   (properties (trigger-properties trigger)))
               (new Data-Trigger name: name properties: properties)))
           triggers)))
  
  
  (method (create-constraints data-table table)
    (define (constraint-properties constraint)
      (list
        text:                 (get-text~ constraint)
        checked?:             (get-checked?~ constraint)
        exclude-replication?: (get-exclude-replication?~ constraint)))
    
    (with-closed ((constraints (get-constraints~ table)))
      (map (lambda (constraint)
             (let ((name (get-title~ constraint))
                   (properties (constraint-properties constraint)))
               (new Data-Constraint name: name properties: properties)))
           constraints)))
  
  
  ;;;
  ;;;; Entity
  ;;;
  
  
  (method override (get-factory)
    (new Data-Schema-Factory))
  
  
  (method override (get-factories)
    '())
  
  
  (method override (get-presentation)
    (get-property name:))
  
  
  (method override (set-presentation controller presentation)
    (set-property name: presentation))
  
  
  (method override (can-cut-entity?)
    #f
    @to-convert
    #t)
  
  
  (method override (can-copy-entity?)
    #f
    @to-convert
    #t)
  
  
  (method override (can-paste-entity?)
    #f)
  
  
  (method override (determine-paster . rest)
    {})
  
  
  (method override (can-rename-entity?)
    #t)
  
  
  (method override (can-delete-entity?)
    #t)
  
  
  (method override (can-move-entity?)
    #t)
  
  
  (method override (can-view-properties?)
    #f)
  
  
  (method override (get-categorized-properties)
    '())))
