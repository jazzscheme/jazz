;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Data Sources
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.schema.data.Data-Source jazz


(import (jazz.designer)
        (jazz.library)
        (jazz.schema)
        (jazz.system))


(class Data-Source extends Component implements Schema-Source


  (property username initialize "" accessors generate)
  (property password initialize "" accessors generate)
  
  
  ;;;
  ;;;; Launch
  ;;;
  
  
  @convert
  (method (launch)
    (set-active-data-source~ SQL-Connections-Manager self))
  
  
  ;;;
  ;;;; Validate
  ;;;
  
  
  (method public virtual (validate)
    )
  
  
  ;;;
  ;;;; Provider
  ;;;
  
  
  (method public virtual (get-provider)
    @convert
    (get-provider~ Provider (external-name)))
  
  
  ;;;
  ;;;; Connection
  ;;;
  
  
  (method public virtual (new-connection)
    )
  
  
  (method public virtual (get-connection-string)
    )
  
  
  (method public virtual (get-connection-properties)
    )
  
  
  ;;;
  ;;;; Inventory
  ;;;
  
  
  (method public virtual (new-inventory connection . rest)
    )
  
  
  ;;;
  ;;;; Schema
  ;;;
  
  
  @convert
  (method (get-data-schema (reporter: reporter {}))
    (import-inventory~ Data-Schema (present) self reporter))
  
  
  ;;;
  ;;;; Present
  ;;;
  
  
  @convert
  (method public virtual (present)
    )
  
  
  ;;;
  ;;;; Descriptor
  ;;;
  
  
  (method meta override (get-class-descriptor)
    (new Data-Source-Descriptor)))


;;;
;;;; Design
;;;


(submodule design


(import (jazz.designer))


(class Data-Source-Descriptor extends Class-Descriptor
  
  
  (method override (class-presentation class)
    "Data Source")
  
  
  (method override (class-image class)
    {Bitmap-Resource "Database"})
  
  
  (method override (class-name-mandatory? class)
    #t)
  
  
  (method override (class-name-unicity? class)
    #t)
  
  
  (method override (class-presentation->name class presentation)
    presentation)
  
  
  (method override (class-name->presentation class name)
    name)

  
  (method override (class-property-presentation class property)
    (case (field-name property)
      ((username) "Username")
      ((password) "Password")
      (else (nextmethod class property))))
  
  
  (method override (class-persist-property? class property)
    (let ((process (get-process)))
      (case property
        ((username:) (persist-usernames?~ process))
        ((password:) (persist-passwords?~ process))
        (else (nextmethod class property)))))
  
  
  (method override (component-get-categorized-properties component)
    '(class-info username password))
  
  
  (method override (component-get-row-instance component property)
    (case (field-name property)
      ((username) (new String-Row nullable?: #f))
      ((password) (new Password-Row nullable?: #f))
      (else (nextmethod component property)))))))
