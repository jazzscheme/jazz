;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Data Tables
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.schema.data.Data-Table jazz


(import (jazz.database)
        (jazz.schema))


(class Data-Table extends Data-Entity
  
  
  (slot request     initialize #f getter generate)
  (slot primary-key initialize #f)
  (slot columns     initialize '())
  (slot indexes     initialize '())
  (slot triggers    initialize '())
  (slot constraints initialize '())
  (slot rows        initialize '() accessors generate)
  (slot missing?    initialize #f  accessors generate)
  
  
  (method override (initialize self (owner: owner #f) (name: name #f) (parent: parent #f) (properties: properties '()) (request: request #f) (primary-key: primary-key #f) (columns: columns #f) (column-names: column-names '()) (indexes: indexes '()) (triggers: triggers '()) (constraints: constraints '()) (rows: rows '()))
    (define (create-columns column-names)
      (map (lambda (name)
             (new Data-Column name: name))
           column-names))
    
    (nextmethod self)
    (set! self.owner owner)
    (set! self.name name)
    (set! self.parent parent)
    (set! self.properties properties)
    (set! self.request request)
    (set-primary-key self primary-key)
    (set-columns self (or columns (create-columns column-names)))
    (set-indexes self indexes)
    (set-triggers self triggers)
    (set-constraints self constraints)
    (set! self.rows rows))
  
  
  (method override (print self output readably)
    (print-unreadable self output
      (lambda (output)
        (let ((length (length rows)))
          (format output "{a}with {a} row{a}"
                  (if name (format "{a} " name) "")
                  length
                  (format-plural length))))))
  
  
  ;;;
  ;;;; Print
  ;;;
  
  
  (method package (print-schema self output)
    (define (print-primary-key output)
      (format output "   ")
      (if (null? primary-key)
          (format output "#f")
        (print-schema primary-key output))
      (format output "{%}"))
    
    (define (print-columns output)
      (format output "   (")
      (let ((first? #t))
        (for-each (lambda (column)
                    (if first?
                        (set! first? #f)
                      (format output "{%}{_ 4}"))
                    (print-schema column output))
                  (sort < columns key: get-name)))
      (format output "){%}"))
    
    (define (print-indexes output)
      (format output "   (")
      (let ((first? #t))
        (for-each (lambda (index)
                    (if first?
                        (set! first? #f)
                      (format output "{%}{_ 4}"))
                    (print-schema index output))
                  (sort < indexes key: get-name)))
      (format output "){%}"))
    
    (define (print-triggers output)
      (format output "   (")
      (let ((first? #t))
        (for-each (lambda (trigger)
                    (if first?
                        (set! first? #f)
                      (format output "{%}{_ 4}"))
                    (print-schema trigger output))
                  (sort < triggers key: get-name)))
      (format output ")"))
    
    (define (print-constraints output)
      (format output "   (")
      (let ((first? #t))
        (for-each (lambda (constraint)
                    (if first?
                        (set! first? #f)
                      (format output "{%}{_ 4}"))
                    (print-schema constraint output))
                  (sort < constraints key: get-name)))
      (format output ")"))
    
    (format output "~{{s} {s} {s list?: #t}{%}"
      (category-name (class-of self))
      name
      properties)
    (print-primary-key output)
    (print-columns output)
    (print-indexes output)
    (print-triggers output)
    (print-constraints output)
    (format output "}"))
  
  
  ;;;
  ;;;; Object
  ;;;
  
  
  (method override (get-kind self)
    'table)
  
  
  ;;;
  ;;;; Entity
  ;;;
  
  
  (method override (create self kind name)
    (case kind
      ((primary-key) (new Data-Primary-Key name: name))
      ((column) (new Data-Column name: name))
      ((index) (new Data-Index name: name))
      ((trigger) (new Data-Trigger name: name))
      ((constraint) (new Data-Constraint name: name))))
  
  
  (method override (add self kind object)
    (case kind
      ((primary-key) (add-primary-key self object))
      ((column) (add-column self object))
      ((index) (add-index self object))
      ((trigger) (add-trigger self object))
      ((constraint) (add-constraint self object))))
  
  
  ;;;
  ;;;; Access
  ;;;
  
  
  (method override (get-children self)
    (append (if primary-key (list primary-key) '()) columns indexes triggers constraints))
  
  
  (method override (get-categorized-children self)
    (let ((fact (new List-Factory)))
      (when primary-key
        (put fact primary-key))
      (put-sequence fact (sort < columns     key: get-name))
      (put-sequence fact (sort < indexes     key: get-name))
      (put-sequence fact (sort < triggers    key: get-name))
      (put-sequence fact (sort < constraints key: get-name))
      (get-output fact)))
  
  
  (method override (property-names self)
    (if (get-property self linked?:)
        '(connect source-table-name)
      '(validation-rule validation-text description)))
  
  
  ;;;
  ;;;; Keys
  ;;;
  
  
  (method public (get-primary-key self)
    primary-key)
  
  
  (method public (set-primary-key self value)
    (set! primary-key value)
    (when primary-key
      (set-parent primary-key self)))
  
  
  (method public (add-primary-key self primary-key)
    (set-primary-key self primary-key)
    (~ set-primary-key self))
  
  
  ;;;
  ;;;; Columns
  ;;;
  
  
  (method public (get-columns self)
    columns)
  
  
  (method public (set-columns self value)
    (set! columns value)
    (for-each (lambda (column)
                (set-parent column self))
              columns))
  
  
  (method public (get-columns-sql self (prefix: prefix #f))
    (join (map (lambda (column)
                 (let ((name (get-name column)))
                   (if (not prefix)
                       name
                     (append prefix name))))
               columns)
          ", "))
  
  
  (method public (add-column self column)
    (set! columns (cons column columns))
    (set-parent column self)
    column)
  
  
  (method public (find-column self name)
    (continuation-capture
      (lambda (return)
        (loop (for rank from 0)
              (for column in columns)
              (do (when (string=? (get-name column) name)
                    (continuation-return return (values column rank)))))
        (values #f #f))))
  
  
  ;;;
  ;;;; Indexes
  ;;;
  
  
  (method public (get-indexes self)
    indexes)
  
  
  (method public (set-indexes self value)
    (set! indexes value)
    (for-each (lambda (index)
                (set-parent index self))
              indexes))
  
  
  (method public (add-index self index)
    (set! indexes (cons index indexes))
    (set-parent index self)
    index)
  
  
  ;;;
  ;;;; Triggers
  ;;;
  
  
  (method public (get-triggers self)
    triggers)
  
  
  (method public (set-triggers self value)
    (set! triggers value)
    (for-each (lambda (trigger)
                (set-parent trigger self))
              triggers))
  
  
  (method public (add-trigger self trigger)
    (set! triggers (cons trigger triggers))
    (set-parent trigger self)
    trigger)
  
  
  ;;;
  ;;;; Constraints
  ;;;
  
  
  (method public (get-constraints self)
    constraints)
  
  
  (method public (set-constraints self value)
    (set! constraints value)
    (for-each (lambda (constraint)
                (set-parent constraint self))
              constraints))
  
  
  (method public (add-constraint self constraint)
    (set! constraints (cons constraint constraints))
    (set-parent constraint self)
    constraint)
  
  
  ;;;
  ;;;; Rows
  ;;;


  (method public (get-count self)
    (length rows))
  
  
  (method public (remove-row self row)
    (set! rows (remove! row rows)))
  
  
  (method public (remove-rows self)
    (set! rows '()))
  
  
  (method public (add-row self row)
    (set! rows (cons row rows))
    row)
  
  
  (method public (append-row self row)
    (set! rows (append rows (list row)))
    row)
  
  
  (method public (new-row self (state: state #f) (values: values #f))
    (add-row self (new Data-Row self state values)))
  
  
  (method public (get-row self rank)
    (element rows rank))
  
  
  ;;;
  ;;;; Load
  ;;;
  
  
  (method public (load-request self command connection (max-load: max-load #t))
    (let ((request (new-request connection)))
      (receive (columns new-rows rows-missing?) (load-rows request command self max-load: max-load)
        (set! rows (append! rows new-rows))
        (set! missing? rows-missing?)
        new-rows)))
  
  
  ;;;
  ;;;; Find
  ;;;
  
  
  (method public (find-row self name value)
    (continuation-capture
      (lambda (return)
        (for-each (lambda (row)
                    (let ((actual (get row name)))
                      (when (= actual value)
                        (continuation-return return row))))
                  rows)
        #f)))
  
  
  (method public (find-rows self name value)
    (collect-if (lambda (row)
                  (= (get row name) value))
                rows))
  
  
  (method public (find-row-by self predicate)
    (find-if predicate rows))
  
  
  (method public (find-rows-by self predicate)
    (collect-if predicate rows))
  
  
  ;;;
  ;;;; Filter
  ;;;
  
  
  (method public (filter! self predicate)
    (when rows
      (let ((scan rows))
        (while (cdr scan)
          (let ((row (cadr scan)))
            (if (not (predicate row))
                (set-cdr! scan (cddr scan))
              (set! scan (cdr scan))))))
      (when (not (predicate (car rows)))
        (set! rows (cdr rows)))))
  
  
  ;;;
  ;;;; Sort
  ;;;
  
  
  (method public (sort-by self name (ascending?: ascending? #t))
    (let ((fn (if ascending? < >)))
      (set! rows (sort fn rows key: (lambda (row) (get row name))))))))
