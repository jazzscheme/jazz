;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Data Tables
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.schema.data.Data-Table jazz


(import (jazz.schema))


(class Data-Table extends Data-Entity
  
  
  (slot request     initialize {} getter generate)
  (slot primary-key initialize {})
  (slot columns     initialize '())
  (slot indexes     initialize '())
  (slot triggers    initialize '())
  (slot constraints initialize '())
  (slot rows        initialize '() accessors generate)
  (slot missing?    initialize #f  accessors generate)
  
  
  (method override (initialize (owner: owner {}) (name: name {}) (parent: parent {}) (properties: properties '()) (request: request {}) (primary-key: primary-key {}) (columns: columns {}) (column-names: column-names '()) (indexes: indexes '()) (triggers: triggers '()) (constraints: constraints '()) (rows: rows '()))
    (define (create-columns column-names)
      (map (lambda (name)
             (new Data-Column name: name))
           column-names))
    
    (nextmethod)
    (set! owner~self owner)
    (set! name~self name)
    (set! parent~self parent)
    (set! properties~self properties)
    (set! request~self request)
    (set-primary-key primary-key)
    (set-columns (either columns (create-columns column-names)))
    (set-indexes indexes)
    (set-triggers triggers)
    (set-constraints constraints)
    (set! rows~self rows))
  
  
  (method override (print printer readably)
    (print-unreadable self printer
      (lambda (printer)
        (let ((length (length rows)))
          (format printer "{a}with {a} row{a}"
                  (if name (format "{a} " name) "")
                  length
                  (format-plural length))))))
  
  
  ;;;
  ;;;; Print
  ;;;
  
  
  (method protected (print-schema printer)
    (format printer "~{{s} {s} {s list?: #t}{%}"
            (identifier-name (type-name (class-of self)))
            name
            properties)
    (print-primary-key printer)
    (print-columns printer)
    (print-indexes printer)
    (print-triggers printer)
    (print-constraints printer)
    (format printer "}"))
  
  
  (method (print-primary-key printer)
    (format printer "   ")
    (if (null? primary-key)
        (format printer "{}")
      (print-schema~ primary-key printer))
    (format printer "{%}"))
  
  
  (method (print-columns printer)
    (format printer "   (")
    (let ((first? #t))
      (for-each (lambda (column)
                  (if first?
                      (set! first? #f)
                    (format printer "{%}{_ 4}"))
                  (print-schema~ column printer))
                (sort < columns key: get-name~)))
    (format printer "){%}"))
  
  
  (method (print-indexes printer)
    (format printer "   (")
    (let ((first? #t))
      (for-each (lambda (index)
                  (if first?
                      (set! first? #f)
                    (format printer "{%}{_ 4}"))
                  (print-schema~ index printer))
                (sort < indexes key: get-name~)))
    (format printer "){%}"))
  
  
  (method (print-triggers printer)
    (format printer "   (")
    (let ((first? #t))
      (for-each (lambda (trigger)
                  (if first?
                      (set! first? #f)
                    (format printer "{%}{_ 4}"))
                  (print-schema~ trigger printer))
                (sort < triggers key: get-name~)))
    (format printer ")"))
  
  
  (method (print-constraints printer)
    (format printer "   (")
    (let ((first? #t))
      (for-each (lambda (constraint)
                  (if first?
                      (set! first? #f)
                    (format printer "{%}{_ 4}"))
                  (print-schema~ constraint printer))
                (sort < constraints key: get-name~)))
    (format printer ")"))
  
  
  ;;;
  ;;;; Object
  ;;;
  
  
  (method override (get-kind)
    'table)
  
  
  ;;;
  ;;;; Entity
  ;;;
  
  
  (method override (create kind name)
    (case kind
      ((primary-key) (new Data-Primary-Key name: name))
      ((column) (new Data-Column name: name))
      ((index) (new Data-Index name: name))
      ((trigger) (new Data-Trigger name: name))
      ((constraint) (new Data-Constraint name: name))))
  
  
  (method override (add kind object)
    (case kind
      ((primary-key) (add-primary-key object))
      ((column) (add-column object))
      ((index) (add-index object))
      ((trigger) (add-trigger object))
      ((constraint) (add-constraint object))))
  
  
  ;;;
  ;;;; Access
  ;;;
  
  
  (method override (get-children)
    (append (if primary-key (list primary-key) '()) columns indexes triggers constraints))
  
  
  (method override (get-categorized-children)
    (let ((fact (new List-Factory)))
      (when primary-key
        (put~ fact primary-key))
      (put-sequence~ fact (sort < columns     key: get-name~))
      (put-sequence~ fact (sort < indexes     key: get-name~))
      (put-sequence~ fact (sort < triggers    key: get-name~))
      (put-sequence~ fact (sort < constraints key: get-name~))
      (get-output~ fact)))
  
  
  (method override (property-names)
    (if (get-property linked?:)
        '(connect source-table-name)
      '(validation-rule validation-text description)))
  
  
  ;;;
  ;;;; Keys
  ;;;
  
  
  (method public (get-primary-key)
    primary-key)
  
  
  (method public (set-primary-key value)
    (set! primary-key value)
    (when primary-key
      (set-parent~ primary-key self)))
  
  
  (method public (add-primary-key primary-key)
    (set-primary-key primary-key)
    set-primary-key)
  
  
  ;;;
  ;;;; Columns
  ;;;
  
  
  (method public (get-columns)
    columns)
  
  
  (method public (set-columns value)
    (set! columns value)
    (for-each (lambda (column)
                (set-parent~ column self))
              columns))
  
  
  (method public (get-columns-sql (prefix: prefix {}))
    (join (map (lambda (column)
                 (let ((name (get-name~ column)))
                   (if (not prefix)
                       name
                     (append prefix name))))
               columns)
          ", "))
  
  
  (method public (add-column column)
    (set! columns (cons column columns))
    (set-parent~ column self)
    column)
  
  
  (method public (find-column name)
    (continuation-capture
      (lambda (return)
        (loop (for rank from 0)
              (for column in columns)
              (do (when (string=? (get-name~ column) name)
                    (continuation-return return (values column rank)))))
        (values #f #f))))
  
  
  ;;;
  ;;;; Indexes
  ;;;
  
  
  (method public (get-indexes)
    indexes)
  
  
  (method public (set-indexes value)
    (set! indexes value)
    (for-each (lambda (index)
                (set-parent~ index self))
              indexes))
  
  
  (method public (add-index index)
    (set! indexes (cons index indexes))
    (set-parent~ index self)
    index)
  
  
  ;;;
  ;;;; Triggers
  ;;;
  
  
  (method public (get-triggers)
    triggers)
  
  
  (method public (set-triggers value)
    (set! triggers value)
    (for-each (lambda (trigger)
                (set-parent~ trigger self))
              triggers))
  
  
  (method public (add-trigger trigger)
    (set! triggers (cons trigger triggers))
    (set-parent~ trigger self)
    trigger)
  
  
  ;;;
  ;;;; Constraints
  ;;;
  
  
  (method public (get-constraints)
    constraints)
  
  
  (method public (set-constraints value)
    (set! constraints value)
    (for-each (lambda (constraint)
                (set-parent~ constraint self))
              constraints))
  
  
  (method public (add-constraint constraint)
    (set! constraints (cons constraint constraints))
    (set-parent~ constraint self)
    constraint)
  
  
  ;;;
  ;;;; Rows
  ;;;


  (method public (get-count)
    (length rows))
  
  
  (method public (remove-row row)
    (set! rows (remove! row rows)))
  
  
  (method public (remove-rows)
    (set! rows '()))
  
  
  (method public (add-row row)
    (set! rows (cons row rows))
    row)
  
  
  (method public (append-row row)
    (set! rows (append rows (list row)))
    row)
  
  
  (method public (new-row (state: state #f) (values: values {}))
    (add-row (new Data-Row self state values)))
  
  
  (method public (get-row rank)
    (element rows rank))
  
  
  ;;;
  ;;;; Load
  ;;;
  
  
  (method public (load-request command connection (max-load: max-load #t))
    (let ((request (new-request~ connection)))
      (receive (columns new-rows rows-missing?) (load-rows~ request command self max-load: max-load)
        (set! rows (append! rows new-rows))
        (set! missing? rows-missing?)
        new-rows)))
  
  
  ;;;
  ;;;; Find
  ;;;
  
  
  (method public (find-row name value)
    (continuation-capture
      (lambda (return)
        (for-each (lambda (row)
                    (let ((actual (get~ row name)))
                      (when (= actual value)
                        (continuation-return return row))))
                  rows)
        {})))
  
  
  (method public (find-rows name value)
    (collect-if (lambda (row)
                  (= (get~ row name) value))
                rows))
  
  
  (method public (find-row-by predicate)
    (find-if predicate rows))
  
  
  (method public (find-rows-by predicate)
    (collect-if predicate rows))
  
  
  ;;;
  ;;;; Filter
  ;;;
  
  
  (method public (filter! predicate)
    (when rows
      (let ((scan rows))
        (while (cdr scan)
          (let ((row (cadr scan)))
            (if (not (predicate row))
                (set-cdr! scan (cddr scan))
              (set! scan (cdr scan))))))
      (when (not (predicate (car rows)))
        (set! rows (cdr rows)))))
  
  
  ;;;
  ;;;; Sort
  ;;;
  
  
  (method public (sort-by name (ascending?: ascending? #t))
    (let ((fn (if ascending? < >)))
      (set! rows (sort fn rows key: (lambda (row) (get~ row name))))))))
