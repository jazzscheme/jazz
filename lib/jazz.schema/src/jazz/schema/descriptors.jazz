;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Schema Descriptors
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.schema.descriptors jazz


(import (jazz.database)
        (jazz.descriptor)
        (jazz.domain)
        (jazz.markup)
        (jazz.process)
        (jazz.resource))


;;;
;;;; Data-Index
;;;


@not-a-component!
(class Data-Index-Descriptor extends Component-Descriptor
  
  
  (form
    (<install>
      (<properties~>)))
  
  
  (method override (component-present-property component property value)
    (case property
      ((fields/orders) (format "{l detail: :human separator: \", \"}" (map (lambda (field/order) (format "{a} {a}" (first field/order) (second field/order))) value)))
      (else (nextmethod property value)))))


;;;
;;;; Data-Primary-Key
;;;


@not-a-component!
(class Data-Primary-Key-Descriptor extends Component-Descriptor
  
  
  (form
    (<install>
      (<properties~>)))
  
  
  (method override (component-present-property component property value)
    (case property
      ((fields/orders) (format "{l detail: :human separator: \", \"}" (map (lambda (field/order) (format "{a} {a}" (first field/order) (second field/order))) value)))
      (else (nextmethod property value)))))


;;;
;;;; Data-Relation
;;;


@not-a-component!
(class Data-Relation-Descriptor extends Component-Descriptor
  
  
  (form
    (<install>
      (<properties~>)))
  
  
  (method override (component-present-property component property value)
    (case property
      ((primary-columns foreign-columns) (format "{l detail: :human separator: \", \"}" value))
      (else (nextmethod property value)))))


;;;
;;;; Data-Source
;;;


(class Data-Source-Descriptor extends Component-Descriptor
  
  
  (form
    (<install>                                title: "Data Source" image: {Image-Resource "Database"} name-mandatory?: #t name-unicity?: #t
      (<properties~>
        (<Property-Descriptor> name: username
          (<String-Domain>     name: domain   nullable?: #f))
        (<Property-Descriptor> name: password
          (<String-Domain>     name: domain   nullable?: #f)
          @wait-regression-fixed
          (<Password-Domain>   name: domain   nullable?: #f)))))
  
  
  (method override (class-presentation->name self class presentation)
    presentation)
  
  
  (method override (class-name->presentation self class name)
    name)
  
  
  (method override (class-persist-property? self class property)
    (let ((process (current-process)))
      (case property
        ((username:) (persist-usernames? process))
        ((password:) (persist-passwords? process))
        (else (nextmethod self class property))))))


;;;
;;;; Data-Sources
;;;


(class Data-Sources-Descriptor extends Component-Descriptor
  
  
  (form
    (<install>       title: "Connections" image: {Image-Resource "Databases"}
      (<properties~>)))
  
  
  (method override (component-get-presentation self component)
    "Connections")
  
  
  (method override (component-get-categorized-addable-classes self component)
    (list
      (list
        (reify-reference Data-Group))))))
