;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Table Inspector
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.schema.inspector.Table-Inspector jazz


(import (jazz.graphic)
        (jazz.markup)
        (jazz.schema)
        (jazz.tree)
        (jazz.ui))


(class Table-Inspector extends Layout-View
  
  
  (slot table initialize #f)


  (form
    (<install>                                       size: {Dimension 696 400} layout-type: border
      (<Scroller-View>                name: scroller location: center vscroll?: #t hscroll?: #t
        (<!>                          name: content  layout-type: fill
          (<Tree-Header>              name: header
            (<!>                      name: content
              (<Table-Inspector-Tree> name: tree     background: {Color Dark} filled-column: #f selection-mode: cell row-spacing: 1 column-spacing: 1)))))))

  
  ;;;
  ;;;; Host
  ;;;
  
  
  (method meta override (host-title self)
    "Table Inspector")
  
  
  (method meta override (host-position self)
    {Point 35 17})
  
  
  (method meta override (host-size self)
    {Dimension 696 614})
  
  
  ;;;
  ;;;; Access
  ;;;

  
  (method public (get-tree self)
    (locate self 'tree))
  
  
  ;;;
  ;;;; Inspect
  ;;;

  
  (method public (inspect-table self table (filled-column: filled-column #f))
    (set! self.table table)
    (let* ((tree (get-tree self))
           (columns (get-columns table))
           (rows (get-rows table))
           (affected (length rows))
           (widths (map (lambda (column) (+ (get-prefered-width column) 24)) columns)))
      (display-table self tree columns rows affected widths)
      (set-filled-column tree filled-column)))
  
  
  (method (display-table self tree columns rows affected widths)
    (define (present-value value)
      (if (not value)
          "NULL"
        (->string value)))
    
    (remove-columns tree)
    (let ((first-column (car columns)))
      (for-each (lambda (column width)
                  (let* ((node? (eq? column first-column))
                         (column (if node?
                                     (add-column tree class: Tree-Node-Column toplevel-controls?: #f title: (get-name column) width: width)
                                   (add-column tree class: Tree-Label-Column title: (get-name column) width: width))))
                    (when node?
                      (set-display-images? column #f))))
                columns
                widths))
    (for-each (lambda (row)
                (let* ((values (get-values row))
                       (first (car values))
                       (rest (cdr values)))
                  (add-row tree children: (cons (new Tree-Node title: (present-value first)) (map (lambda (value) (new Tree-Label title: (present-value value))) rest)))))
              rows))))
