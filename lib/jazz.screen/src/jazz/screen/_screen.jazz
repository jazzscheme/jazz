;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Screens
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module jazz.screen jazz


(hub get-content-rect)
(hub get-frame-rect)
(hub get-handle)


(export (jazz.screen.platform.cocoa   (cond cocoa))
        (jazz.screen.platform.windows (cond windows))
        (jazz.screen.platform.x11     (cond x11))
        (jazz.screen.autoload))

(import (jazz.geometry)
        (jazz.screen.platform.cocoa   (cond cocoa))
        (jazz.screen.platform.windows (cond windows))
        (jazz.screen.platform.x11     (cond x11)))


(definition public (main-screen)
  (platform-main-screen))


(definition public (auxiliary-screen)
  (let ((main (main-screen)))
    (or (find-if (lambda (screen)
                   (not (screen=? screen main)))
                 (all-screens))
        main)))


(definition public (primary-screen)
  (platform-primary-screen))


(definition public (secondary-screen)
  (let ((primary (primary-screen)))
    (or (find-if (lambda (screen)
                   (not (screen=? screen primary)))
                 (all-screens))
        primary)))


(definition public (find-screen kind)
  (case kind
    ((main) (main-screen))
    ((auxiliary) (auxiliary-screen))
    ((primary) (primary-screen))
    ((secondary) (secondary-screen))
    (else (error "Unknown screen kind: {s}" kind))))


(definition public (all-screens)
  (platform-all-screens))


(definition public (center-screen screen size)
  (let ((content (get-content-rect screen)))
    (let ((content-position (rect-position content))
          (content-size (rect-size content)))
      (nu+ content-position (center size content-size)))))


(definition public (screen=? x y)
  (nu=? (get-frame-rect x) (get-frame-rect y))))
