;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Definition Search Result
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.search.Definition-Search-Result jazz


(import (jazz.catalog.edit)
        (jazz.editor.lisp)
        (jazz.search))


(class Definition-Search-Result extends Search-Result
  
  
  (slot entry getter generate)
  
  
  (method override (initialize resultset entry)
    (nextmethod resultset)
    (set! entry~self entry))
  
  
  ;;;
  ;;;; Presentation
  ;;;
  
  
  (method override (get-icon)
    (get-image~ entry))
  
  
  (method override (present)
    (present~ entry))
  
  
  (method override (present-name)
    (if (and (is? entry Lisp-Entry)
             (not (get-signature~ entry)))
        (case (get-kind~ entry)
          ((class define definition) (present-name~ entry))
          (else (present~ entry)))
      (present~ entry)))
  
  
  (method override (present-location)
    (let ((moniker (get-moniker~ entry)))
      (if (not moniker)
          ""
        (present-location~ moniker))))
  
  
  (method override (present-type)
    "")
    
  
  ;;;
  ;;;; Sorting
  ;;;
  
  
  (method override (location-sort-value)
    (cons (present-location) (get-start~ entry)))
  
  
  ;;;
  ;;;; Edition
  ;;;
  
  
  (method override (edit select (visible?: visible? #t) (activate-focus?: activate-focus? #t))
    (edit-entry entry activate-focus?: activate-focus? return-new?: #t))))
