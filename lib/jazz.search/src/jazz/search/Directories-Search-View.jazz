;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Directories Search View
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.search.Directories-Search-View jazz


(import (jazz.event)
        (jazz.handler)
        (jazz.ide)
        (jazz.graphic)
        (jazz.io)
        (jazz.markup)
        (jazz.reporter)
        (jazz.search)
        (jazz.text)
        (jazz.ui))


(class undocumented Directories-Search-View extends Search-View

  
  (form
    (<install>
      (<!>                               name: domain      title: "Search"
        (<content~>
          (<Label-View>                  name: static-dir  title: "Directories:" position: {Point 13 18} size: {Dimension 62 16})
          (<Border-View>                                   position: {Point 83 16} size: {Dimension 248 19} border-type: solid border-color: {Color Entry-Border}
            (<Scroller-View>                               hscroll?: #f vscroll?: #f
              (<!>                       name: content     layout-type: fill
                (<Directories-Text-View> name: directories accepts-returns?: #f left-padding: 2 top-padding: 2 show-unfocused-selection?: #f focus-selects-all?: #t return-press-handler: {Event-Handler :form on-return-press}))))
          (<Label-View>                  name: static-ext  title: "Extensions:" position: {Point 13 48} size: {Dimension 62 16})
          (<Border-View>                                   position: {Point 83 46} size: {Dimension 248 19} border-type: solid border-color: {Color Entry-Border}
            (<Scroller-View>                               hscroll?: #f vscroll?: #f
              (<!>                       name: content     layout-type: fill
                (<IDE-Text-View>         name: extensions  accepts-returns?: #f left-padding: 2 top-padding: 2 show-unfocused-selection?: #f focus-selects-all?: #t return-press-handler: {Event-Handler :form on-return-press}))))))))
  

  ;;;
  ;;;; Search
  ;;;

  
  (method override (search-targets self find replace)
    (thread-start!
      (new-thread
        (lambda ()
          (let ((search (new Directories-Search find replace)))
            (search-threaded self search)))
        'search)))

  
  (method synchronized (search-threaded self search)
    (let* ((reporter (new User-Reporter) @convert (get-search-reporter #f))
           (directories (map (lambda (list)
                               (new Directory list))
                             (read-delimited-string (get-string-content (locate self 'directories)) #\comma)))
           (extensions (map (lambda (obj) (if (enumerator? obj) obj (->string obj))) (apply append! (read-delimited-string (get-string-content (locate self 'extensions)) #\comma))))
           (effective-extensions (effective-extensions (if (not-null? extensions) extensions (default-search-extensions))))
           (resultset (new Search-Resultset search)))
      (search-in-directories self search directories effective-extensions resultset reporter)
      (post-event
        (lambda ()
          (let ((results (get-results self)))
            (select-results results resultset))))
      (report-feedback reporter "Done")
      @activity-manager
      (when reporter
        (let ((manager (get-activity-manager)))
          (unregister-activity manager reporter)
          (close-manager manager)))))


  ;;;
  ;;;; Keyboard
  ;;;
  
  
  (method package (on-action self evt)
    (on-start-search self evt))
  
  
  (method override (get-tab-stops self)
    (list
      (locate self 'directories)
      (locate self 'extensions)
      (locate self 'targets)))


  ;;;
  ;;;; Reporting
  ;;;
  
  
  (method override (setup-search-reporter self reporter count)
    (set-infinite? reporter #t)
    (set-range reporter {Range 0 500})
    (set-pos reporter 1)
    (set-step reporter 1)))


;;;
;;;; Directories
;;;


(class Directories-Text-View extends IDE-Text-View
  
  
  (form
    (<install> receive-files-handler: {Event-Handler :form on-receive-files}))
  
  
  (method (on-receive-files self evt)
    (let ((files (get-property evt files:)))
      (if (and (= (length files) 1) (directory? (car files)))
          (set-string-content self (format :string "{s}" (parse (car files))))
        (bell))))))
