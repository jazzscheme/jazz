;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; File Search Result
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.search.File-Search-Result jazz


(import (jazz.application)
        (jazz.resource)
        (jazz.search)
        (jazz.text)
        (jazz.ui)
        (jazz.view))


(class File-Search-Result extends Search-Result
  
  
  (slot file  getter generate)
  (slot range getter generate)
  
  
  (method override (initialize self resultset file (position: position #f) (range: range #f))
    (nextmethod self resultset)
    (set! self.file file)
    (set! self.range (or range (and position (new Range$Cell$ position position)))))
  
  
  ;;;
  ;;;; Presentation
  ;;;
  
  
  (method override (get-icon self)
    {Image-Resource "TypeFile"})
  
  
  (method override (present self)
    (present-name file))
  
  
  (method override (present-name self)
    (present-name file))
  
  
  (method override (present-location self)
    (present-location file))
  
  
  (method override (present-type self)
    "")
    
  
  ;;;
  ;;;; Sorting
  ;;;
  
  
  (method override (location-sort-value self)
    (cons (present-location self) (if range (get-start range) {Cell 0 0})))
  
  
  ;;;
  ;;;; Edition
  ;;;
  
  
  (method override (edit self select (visible?: visible? #t) (activate-focus?: activate-focus? #t))
    (let ((appl (current-application)))
      (receive (frame new?) (edit-document appl file visible?: visible? return-new?: #t)
        (let ((guest (get-guest frame)))
          (when (is? guest Text-View)
            (if range
                (set-selection guest range)
              (when select
                (select-expr guest (get-find search) select))))
          (when (and visible? activate-focus?)
            (focus-host frame))
          (values frame new?)))))))
