;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Projects Search View
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.search.Projects-Search-View jazz


(import (jazz.application)
        (jazz.catalog)
        (jazz.catalog.edit)
        (jazz.descriptor)
        (jazz.event)
        (jazz.graphic)
        (jazz.handler)
        (jazz.markup)
        (jazz.outline)
        (jazz.project)
        (jazz.reporter)
        (jazz.search)
        (jazz.tree)
        (jazz.ui)
        (jazz.view))


(class undocumented Projects-Search-View extends Search-View

  
  (form
    (<install>
      (<!>                     name: domain      title: "Search"
        (<content~>
          (<Radio-Button>      name: files       title: "Files" position: {Point 13 14} size: {Dimension 100 18} selected?: #t action-handler: {Event-Handler :form on-search-domain})
          (<Radio-Button>      name: definitions title: "Definitions" position: {Point 13 34} size: {Dimension 100 18} action-handler: {Event-Handler :form on-search-domain})
          (<Radio-Button>      name: references  title: "References" position: {Point 13 54} size: {Dimension 100 18} action-handler: {Event-Handler :form on-search-domain})
          (<Label-View>                          title: "Project:" position: {Point 115 21} size: {Dimension 46 16})
          (<Border-View>                         position: {Point 163 17} size: {Dimension 155 22} border-insets: {Rect 2 3 2 1} border-color: {Color Medium}
            (<Border-View>                       border-color: {Color Entry-Border}
              (<Project-Combo> name: project)))
          (<Label-View>                          title: "Entries:" position: {Point 115 45} size: {Dimension 46 16})
          (<Border-View>                         position: {Point 163 41} size: {Dimension 155 22} border-insets: {Rect 2 3 2 1} border-color: {Color Medium}
            (<Border-View>                       border-color: {Color Entry-Border}
              (<Entries-Combo> name: entries)))))))
  
  
  (method override (finish self rest)
    (define (setup-projects)
      (let ((workbench (get-workbench))
            (combo (locate self 'project)))
        (set-choices combo (collect-choices workbench))
        (set-value combo workbench)))
    
    (define (collect-choices workbench)
      (let ((choices (new-queue)))
        (for-each-project workbench
          (lambda (project)
            (when (not-null? (get-children project))
              (enqueue choices (list project (->string (get-presentation-property project))))))
          include-inactives?: #t
          include-groups?: #t)
        (queue-list choices)))
    
    (nextmethod self rest)
    (setup-projects)
    (setup-entries self 'files))
  

  ;;;
  ;;;; Domains
  ;;;

  
  (method override (get-search-domains self)
    '(files
      definitions
      references))
  
  
  ;;;
  ;;;; Entries
  ;;;
  
  
  (method (setup-entries self domain)
    (let ((combo (locate self 'entries)))
      (case domain
        ((files)
         (set-choices combo '((#f "All") (projects "Projects") (packages "Packages") (documentation "Documentation")))
         (set-value combo #f))
        (else
         (set-choices combo (list (list #f "All")))
         (set-value combo #f)))))
  
  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method (on-search-domain self evt)
    (let ((domain (get-name (get-sender evt))))
      (setup-entries self domain)))
  
  
  (method (project-change self project)
    )
    

  ;;;
  ;;;; Search
  ;;;

  
  (method override (search-targets self find replace)
    (define (search-files)
      (let ((search (new Projects-Search 'files find replace)))
        (let ((reporter (new User-Reporter))
              (resultset (new Search-Resultset search)))
          (let ((project (selected-project self))
                (entries (selected-entries self))
                (processed-table (make-table))
                (processed? #f))
            (for-each-project project
              (lambda (project)
                (define (search-all)
                  (search-projects)
                  (search-packages)
                  (search-documentation))
                
                (define (search-projects)
                  (iterate-files project
                    (lambda (file)
                      (search-in-file self search file resultset reporter))))
                
                (define (search-packages)
                  (let ((description-file (get-description-file project)))
                    (when description-file
                      (search-in-file self search description-file resultset reporter))))
                
                (define (search-documentation)
                  (let ((documentation (get-documentation project)))
                    (when documentation
                      (search-in-file self search documentation resultset reporter))))
                
                (set! processed? #t)
                (unless (and (dynamic-project? project)
                             (let ((key (get-path (project-context project))))
                               (if (table-ref processed-table key #f)
                                   #t
                                 (table-set! processed-table key #t)
                                 #f)))
                  (set! processed? #f)
                  (if (not entries)
                      (search-all)
                    (case entries
                      ((projects) (search-projects))
                      ((packages) (search-packages))
                      ((documentation) (search-documentation))))))
              stop-test: (lambda (project)
                           processed?)))
          (post-event
            (lambda ()
              (let ((results (get-results self)))
                (select-results results resultset))))
          (report-feedback reporter "Done"))))
    
    (define (search-projects-definitions)
      (let ((search (new Projects-Search 'definitions find replace))
            (project (selected-project self))
            (cataloguer (get-cataloguer)))
        (let ((definitions (search-definitions cataloguer (get-find search) context: project)))
          (if (null? definitions)
              (message-box "No search results found")
            (case (length definitions)
              ((1) (edit-entry (car definitions)))
              (else (let ((results (get-results self)))
                      (select-results results (make-definition-search-resultset search definitions)))))))))
    
    (define (search-projects-references)
      (let ((search (new Projects-Search 'references find replace))
            (project (selected-project self))
            (cataloguer (get-cataloguer)))
        (let ((references (search-references cataloguer (get-find search) context: project)))
          (if (null? references)
              (message-box "No search results found")
            (case (length references)
              ((1) (edit-reference (car references) 'forward search))
              (else (let ((results (get-results self)))
                      (select-results results (make-reference-search-resultset search references)))))))))
    
    (case (get-search-domain self)
      ((files)
       (thread-start!
         (new-thread
           (lambda ()
             (catch Cancel-Signal
               (search-files)))
           'search)))
      ((definitions)
       (search-projects-definitions))
      ((references)
       (search-projects-references))))
  
  
  ;;;
  ;;;; Selection
  ;;;
  
  
  (method (selected-project self)
    (let ((project (get-value (locate self 'project))))
      (if (is? project Project)
          project
        (send-event
          (lambda ()
            (message-box "Please select a project")))
        (signal-cancel))))
  
  
  (method (selected-entries self)
    (get-value (locate self 'entries))))


;;;
;;;; Project-Combo
;;;


(class Project-Combo extends Combo-Box

  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method override (button-action self)
    (let ((picker (new Project-Picker size: (new Dimension (- (get-width self) 2) 200) action-handler: (new Event-Handler target: self method-name: 'on-project-picked))))
      (let ((tree (locate picker 'tree)))
        (let ((row (user-data-row tree (get-value self) include-invisibles?: #t)))
          (when row
            (ensure-expanded tree row)
            (set-single-selection tree (row->line tree row))))
        (select-user-data-row tree (get-value self))
        (receive (pos alternate-pos) (combo-popup-positions self picker)
          (popup self picker pos alternate-position: alternate-pos initiator: self)
          (push-focus tree)))))
  
  
  (method (on-project-picked self evt)
    (let ((project (get-property evt project:)))
      (close-popups self)
      (call-content-change self 'popup))))


;;;
;;;; Project-Picker
;;;


(class Project-Picker extends Layout-View
  
  
  (slot mouse-selected? initialize #f)
  
  
  (form
    (<install>                                   layout-type: border
      (<Border-View>               name: border  location: center border-type: edge style: entry
        (<Scroller-View>                         style: document hscroll?: #t vscroll?: #t
          (<!>                     name: content layout-type: fill
            (<Tree-View>           name: tree    portfolio: :images auto-expand/collapse?: #f selection-handler: {Event-Handler :form on-selection-change} mouse-up-handler: {Event-Handler :form on-mouse-up} return-press-handler: {Event-Handler :form on-return-press} escape-press-handler: {Event-Handler :form on-escape-press}
              (<Tree-Node-Column>  name: name    title: "Name" width: 250 toplevel-controls?: #f)))))))
  
  
  (method override (finish self initargs)
    (nextmethod self initargs)
    (setup-projects self))
  
  
  (method (setup-projects self)
    (let ((tree (locate self 'tree)))
      (define (insert-project project father)
        (and (not-null? (get-children project))
             (let ((title (get-presentation-property project))
                   (image (get-component-image project))
                   (state (if (not father) 'expanded 'collapsed)))
               (add-row tree father: father state: state children: (list (new Tree-Node title: title image: image)) user-data: project))))
      
      (fold-projects (get-workbench)
        insert-project
        #f
        include-inactives?: #t
        include-groups?: #t)))
  
  
  (method package (on-selection-change self evt)
    (when (eq? (get-user-origin evt) 'mouse)
      (set! mouse-selected? #t)))
  
  
  (method (on-mouse-up self evt)
    (when mouse-selected?
      (process-selected self)))
  
  
  (method override (on-return-press self evt)
    (process-selected self))
  
  
  (method override (on-escape-press self evt)
    (close-popups (current-toplevel)))
  
  
  (method (process-selected self)
    (let ((tree (locate self 'tree)))
      (let ((project (get-single-selected-data tree)))
        (when project
          (let ((combo (popup-initiator self)))
            (close-popups combo)
            (when project
              (set-value combo project))))))))


;;;
;;;; Entries-Combo
;;;


(class Entries-Combo extends Combo-Box))
