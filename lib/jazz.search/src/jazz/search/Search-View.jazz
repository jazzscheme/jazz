;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Search View
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.search.Search-View jazz


(import (jazz.application)
        (jazz.catalog)
        (jazz.editor.jazz)
        (jazz.graphic)
        (jazz.handler)
        (jazz.ide.activity)
        (jazz.io)
        (jazz.jml)
        (jazz.project)
        (jazz.search)
        (jazz.tree)
        (jazz.ui))


(class undocumented Search-View extends Layout-View

  
  (form
    (<install>
      (<Push-Button>                   name: search          title: "Search" position: {Point 755 14} size: {Dimension 80 24} action-handler: {Event-Handler :form on-search} default?: #t)
      (<Group-Box>                     name: domain          position: {Point 10 8} size: {Dimension 350 97})
      (<Splitter>                      name: vertical        position: {Point 362 8} size: {Dimension 6 97} move-handler: {Event-Handler :form on-splitter-move})
      (<Border-View>                   name: targets-border  position: {Point 370 14} size: {Dimension 373 91} border-type: edge style: ()
        (<Scroller-View>                                     vscroll?: #t
          (<content~>                                        layout-type: fill
            (<Tree-Header>
              (<content~>
                (<Search-Targets>      name: targets         font: {Font Label-User} default-row-height: 15
                  (<Tree-Node-Column>                        title: "Find" width: 176 toplevel-controls?: #f display-images?: #f)
                  (<Tree-Label-Column>                       title: "Replace" width: 173)))))))
      (<Check-Box>                     name: whole-words?    title: "Whole Words" position: {Point 10 114} size: {Dimension 100 18})
      (<Check-Box>                     name: ignore-case?    title: "Ignore Case" position: {Point 118 114} size: {Dimension 100 18})
      (<Check-Box>                     name: regexp?         title: "Regexp" position: {Point 226 114} size: {Dimension 100 18})
      (<Check-Box>                     name: preserve-case?  title: "Preserve Case" position: {Point 375 114} size: {Dimension 100 18})
      (<Check-Box>                     name: play-recording? title: "Play Recording" position: {Point 483 114} size: {Dimension 100 18})
      ;; temp #f
      (<Check-Box>                     name: expression?     title: "Expression" visible?: #f position: {Point 388 114} size: {Dimension 200 18})))
  
  
  (method public (next-radio)
    (let* ((domain (get-search-domain))
           (domains (get-search-domains))
           (pos (find domains domain)))
      (when pos
        (set-search-domain (element domains (modulo (+ pos 1) (length domains)))))))
  
  
  (method public (next-tab)
    (let* ((manager (get-manager))
           (max-selection (length (get-children~ manager)))
           (old-selection (get-selection~ manager))
           (new-selection (modulo (+ old-selection 1) max-selection)))
      (set-selection~ manager new-selection)))


  ;;;
  ;;;; Component
  ;;;
  
  
  (method override (finish rest)
    (nextmethod rest)
    (let ((tree (get-targets)))
      (for-each (lambda (column)
                  (set-justification~ column '(1 1)))
                (get-columns~ tree))))


  ;;;
  ;;;; Manager
  ;;;
  
  
  (method (get-manager)
    (find-ascendant Search-Manager))
    

  ;;;
  ;;;; Access
  ;;;
  
  
  (method protected (get-results)
    (get-search-results))
  
  
  (method public (get-targets)
    (locate 'targets))
  
  
  (method public (get-search-targets)
    (let* ((tree (get-targets))
           (height (get-visible-count~ tree))
           (fact (new List-Factory)))
      ;; to-convert temp patch
      (if (in-edition?~ tree)
          '()
        (for-each (lambda (line)
                    (let ((find (get-title~ (get-cell-data~ tree (new Cell line 0))))
                          (repl (get-title~ (get-cell-data~ tree (new Cell line 1)))))
                      (unless (and (empty-string? find) (empty-string? repl))
                        (put~ fact (list find repl)))))
                  (naturals 0 height))
        (get-output~ fact))))


  (method public (set-search-targets targets)
    (let ((tree (get-targets))
          (count (length targets)))
      (ensure-visible-count~ tree count)
      (let ((width (get-columns-count~ tree))
            (height (get-visible-count~ tree)))
        (with-update-locked~ tree
          (lambda ()
            (for-each (lambda (target line)
                        (for-each (lambda (target col)
                                    (let ((cell (new Cell line col)))
                                      (set-cell-title~ tree cell target)
                                      (invalidate-cell~ tree cell)))
                                  target
                                  (naturals 0 (length target))))
                      targets
                      (naturals 0 (length targets)))
            (for-each (lambda (line)
                        (for-each (lambda (col)
                                    (let ((cell (new Cell line col)))
                                      (set-cell-title~ tree cell "")
                                      (invalidate-cell~ tree cell)))
                                  (naturals 0 width)))
                      (naturals (length targets) height)))))))
  
  
  (method public (get-find-targets)
    (let ((whole-words? (get-whole-words?))
          (ignore-case? (get-ignore-case?))
          (regexp? (get-regexp?)))
      (->search-set
        (map (lambda (target)
               (make-search-context (first target)
                 whole-words?: whole-words?
                 ignore-case?: ignore-case?
                 regexp?: regexp?))
             (get-search-targets)))))
  
  
  (method (get-replace-targets)
    (new Replace (map second (get-search-targets))
         preserve-case?: (get-preserve-case?)
         play-recording?: (get-play-recording?)))
  
  
  (method public (get-search-domain)
    (let ((group (get-content~ (locate 'domain))))
      (find-if (lambda (name)
                 (let ((radio (find-component~ group name)))
                   (and radio (get-selected?~ radio)
                     name)))
               (get-search-domains))))
  
  
  (method public (set-search-domain domain)
    (let* ((group (get-content~ (locate 'domain)))
           (radio (find-component~ group domain)))
      (when radio
        (for-each (lambda (child)
                    (when (is? child Radio-Button)
                      (set-selected?~ child (eq? child radio))))
                  (get-children~ group)))))
  
  
  (method public (get-whole-words?)
    (get-checked?~ (locate 'whole-words?)))
  
  
  (method public (set-whole-words? flag)
    (set-checked?~ (locate 'whole-words?) flag))
  
  
  (method public (get-ignore-case?)
    (get-checked?~ (locate 'ignore-case?)))
  
  
  (method public (set-ignore-case? flag)
    (set-checked?~ (locate 'ignore-case?) flag))
  
  
  (method public (get-regexp?)
    (get-checked?~ (locate 'regexp?)))
  
  
  (method public (set-regexp? flag)
    (set-checked?~ (locate 'regexp?) flag))
  
  
  (method public (get-preserve-case?)
    (get-checked?~ (locate 'preserve-case?)))
  
  
  (method public (set-preserve-case? flag)
    (set-checked?~ (locate 'preserve-case?) flag))
  
  
  (method public (get-play-recording?)
    (get-checked?~ (locate 'play-recording?)))
  
  
  (method public (set-play-recording? flag)
    (set-checked?~ (locate 'play-recording?) flag))
  
  
  (method public (get-expression?)
    (get-checked?~ (locate 'expression?)))
  
  
  (method public (set-expression? flag)
    (set-checked?~ (locate 'expression?) flag))
    

  ;;;
  ;;;; Domains
  ;;;
  
  
  (method public virtual (get-search-domains)
    '())


  ;;;
  ;;;; Events
  ;;;
  
  
  (method package (on-search evt)
    (search))


  (method override (resize dh dv)
    (nextmethod dh dv)
    (move-figure~ (locate 'search) dh 0)
    (size-figure~ (locate 'domain) 0 dv)
    (size-figure~ (locate 'targets-border) dh dv)
    (move-figure~ (locate 'whole-words?) 0 dv)
    (move-figure~ (locate 'ignore-case?) 0 dv)
    (move-figure~ (locate 'regexp?) 0 dv)
    (move-figure~ (locate 'preserve-case?) 0 dv)
    (move-figure~ (locate 'play-recording?) 0 dv)
    (move-figure~ (locate 'expression?) 0 dv))
  
  
  (method (on-splitter-move evt)
    (let ((delta (get-property~ evt delta:)))
      (size-figure~ (locate 'domain) delta 0)
      (move-figure~ (locate 'targets-border) delta 0)
      (size-figure~ (locate 'targets-border) (- delta) 0)
      (update-view)))
    
    
  (method override (on-return-press evt)
    (on-search evt))


  ;;;
  ;;;; Reporting
  ;;;
  
  
  (method protected (get-search-reporter count)
    (let* ((manager (get-activity-manager))
           (reporter (register-activity~ manager)))
      (setup-search-reporter reporter count)
      (show~ manager)
      reporter))
  
  
  (method protected virtual (setup-search-reporter reporter count)
    )


  ;;;
  ;;;; Search
  ;;;
  
  
  (method (search)
    (hide~ (get-player))
    ;; quick hack for cocoa bug
    (acquire-focus~ (get-toplevel))
    (end-edition~ (get-targets))
    (let ((find (get-find-targets))
          (replace (get-replace-targets)))
      (if (null? find)
          (bell)
        (search-targets find replace))))
  
  
  (method protected virtual (search-targets find replace)
    )


  (method (search-in-file search file resultset reporter)
    (unless (and reporter (cancel-requested?~ reporter))
      (when reporter
        (user-feedback~ reporter "Searching {a}" (get-name~ file))
        (step-it~ reporter))
      (let ((found (search-file file search)))
        (when found
          (add-result~ resultset (new File-Search-Result resultset file))))))
  
  
  (method protected (search-in-directories search directories extensions resultset reporter)
    (for-each (lambda (directory)
                (search-in-directory search directory extensions resultset reporter))
              directories))
  

  (method protected (search-in-directory search directory extensions resultset reporter)
    (let ((all-extensions? (equal? extensions '("*"))))
      (iterate-project/directory directory
        (lambda (file)
          (let ((ext (get-extension~ file)))
            (cond ((and all-extensions? (not (member? ext Binary-Extensions test: extension=?)) @convert (<= (get-size~ file) 512000))
                   (search-in-file search file resultset reporter))
                  ((member? ext extensions test: extension=?)
                   (search-in-file search file resultset reporter))))))))


  (method (search-file file search)
    (and (exists?~ file)
         (let ((ext (get-extension~ file)))
           (if (not (get-expression?~ search))
               (call-with-input-file (path-settings file char-encoding-errors: #f eol-encoding: 'cr-lf)
                 (lambda (input)
                   (let ((content (read-content-string input))
                         (match-test (extension-match-test ext))
                         (constituent-test (extension-constituent-test ext)))
                     (regular-search content (get-find~ search) match-test: match-test constituent-test: constituent-test))))
             (let ((text (new Jazz-Text-View)))
               (set-moniker~ text file)
               (let* ((beginning (text-beginning~ text))
                      (expl (new Jazz-Explorer text start: beginning end: beginning))
                      (mode (if (extension=? ext "jazz") 'code 'quotation)))
                 (search-expressions~ expl mode search beginning)))))))
  
  
  (method protected (iterate-project/directory project/directory proc)
    (define (find-project name)
      (let ((workbench (get-workbench)))
        (or (find-project~ workbench project/directory error?: #f)
            (find-project~ workbench project/directory include-inactives?: #t))))
    
    (if (symbol? project/directory)
        (for-each-project~ (find-project name)
          (lambda (project)
            (iterate-files~ project
              proc)))
      (iterate-directory~ project/directory proc
        ignored-toplevel-dirnames: '(".git" ".hg" "bin" "build" "bootstrap" "deploy" "gambit"))))


  ;;;
  ;;;; Targets
  ;;;


  (method public virtual (select-search)
    (let ((targets (get-targets)))
      (select-cell~ targets {Cell 0 0})))
  
  
  ;;;
  ;;;; History
  ;;;
  
  
  (method (current-history-item)
    (let ((tree (locate 'results)))
      (new History-Search-Item
        (get-search-domain)
        (get-search-targets)
        (get-whole-words?)
        (get-ignore-case?)
        (get-preserve-case?)
        (get-play-recording?)
        (get-expression?)
        (get-content~ tree)
        (get-selection~ tree))))
  
  
  (method protected (install-history-item item)
    (let ((tree (locate 'results)))
      (set-search-domain (get-domain~ item))
      (set-search-targets (get-targets~ item))
      (set-whole-words? (get-whole-words?~ item))
      (set-ignore-case? (get-ignore-case?~ item))
      (set-preserve-case? (get-preserve-case?~ item))
      (set-play-recording? (get-play-recording?~ item))
      (set-expression? (get-expression?~ item))
      (set-content~ tree (get-content~ item))
      (set-selection~ tree (get-selection~ item)))))


;;;
;;;; Search-Targets
;;;


(class Search-Targets extends Tree-View
  
  
  (method override (mouse-down evt)
    (let ((cell (view->tree (get-position~ evt) any?: #t uniform-height?: #t)))
      (if (not cell)
          (nextmethod evt)
        (select-cell cell))))
  
  
  (method override (tab-stop-enter)
    (select-cell {Cell 0 0}))
  
  
  (method override (add-empty-row (father: father #f))
    (let ((father (or father root-row))
          (children (map new-empty-cell~ columns)))
      (add-row father: father children: children)))
  
  
  (method override (select-cell cell)
    (end-edition)
    (let* ((data (get-cell-data cell))
           (left (if (= (get-col~ cell) 0) 3 0))
           (editor (new Border-View border-type: 'solid border-color: {Color Medium}))
           (scroller (new Scroller-View parent: editor vscroll?: #f hscroll?: #f))
           (text (new Tree-Embedded-Search-Text-View parent: (get-content~ scroller) left-padding: left top-padding: 0 font: font)))
      (when data
        (set-string-content~ text (get-title~ data)))
      (ensure-row-exists (get-line~ cell))
      (edit-cell cell
                 editor: editor
                 after-end: (lambda (site)
                              (set-title~ (get-site-data site) (get-string-content~ text))))
      (set-client~ scroller text)
      (set-tree~ text self)
      (layout-scrollee~ text)
      (acquire-focus~ text)
      (select-all~ text)))))
