;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Search
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module jazz.search jazz


(hub add-result)
(hub count-files)
(hub current-history-item)
(hub drill-down)
(hub dynamic-search?)
(hub edit)
(hub edit-definitions)
(hub edit-references)
(hub effective-client)
(hub empty?)
(hub find-backward)
(hub find-forward)
(hub follow-backward)
(hub follow-forward)
(hub get-active)
(hub get-beginning)
(hub get-boundaries)
(hub get-client)
(hub get-current-resultset)
(hub get-domain)
(hub get-ending)
(hub get-entry)
(hub get-expression?)
(hub get-file)
(hub get-find)
(hub get-find-targets)
(hub get-icon)
(hub get-ignore-case?)
(hub get-jazz-directories)
(hub get-jazz-extensions)
(hub get-jazz-label)
(hub get-manager)
(hub get-play-recording?)
(hub get-preserve-case?)
(hub get-range)
(hub get-regexp?)
(hub get-replace)
(hub get-replace-list)
(hub get-results)
(hub get-resultset)
(hub get-search)
(hub get-search-targets)
(hub get-searches)
(hub get-selection)
(hub get-targets)
(hub get-user-directories)
(hub get-user-extensions)
(hub get-user-label)
(hub get-whole-words?)
(hub install-history-item)
(hub install-indicators)
(hub install-results)
(hub location-sort-value)
(hub next-radio)
(hub on-action)
(hub on-play-recording)
(hub on-selection-change)
(hub on-start-search)
(hub pop-resultset)
(hub present)
(hub present-location)
(hub present-name)
(hub present-type)
(hub replace-all)
(hub replace-selected)
(hub replace-selection)
(hub replace-selection&find-forward)
(hub select-results)
(hub select-search)
(hub set-beginning)
(hub set-ending)
(hub set-expression?)
(hub set-find)
(hub set-ignore-case?)
(hub set-play-recording?)
(hub set-preserve-case?)
(hub set-regexp?)
(hub set-replace)
(hub set-resultset)
(hub set-search-domain)
(hub set-search-targets)
(hub set-selection)
(hub set-whole-words?)
(hub supports-drill-down?)
(hub toggle-play-recording)
(hub update-tree-row)


(export (jazz.search.autoload))
(import (jazz.search.autoload)
        (jazz.component)
        (jazz.action)
        (jazz.application)
        (jazz.graphic)
        (jazz.outline)
        (jazz.text)
        (jazz.tree)
        (jazz.ui)
        (jazz.view)
        (jazz.window)
        (jazz.workspace))


(definition public search-result-update
  (request-service 'search-result-update
    (lambda (icon msg)
      )))


;;;
;;;; Active
;;;


(define *active-search-result*
  #f)


(definition public (active-search-result)
  *active-search-result*)


(definition public (set-active-search-result search-result)
  (set! *active-search-result* search-result)
  (if search-result
      (install-indicators search-result *beginning-indicator* *ending-indicator*)
    (reset *beginning-indicator*)
    (reset *ending-indicator*))
  (if search-result
      (search-result-update (get-icon search-result) (present search-result))
    (search-result-update #f #f))
  (update-source-actions (current-application))
  (update-search-actions))


(definition *beginning-indicator*
  (new Indicator {Color Boundary}))

(definition *ending-indicator*
  (new Indicator {Color Boundary}))


;;;
;;;; Search
;;;


(definition public (get-search-manager)
  (resolve-nickname :search-manager))


(definition public (get-search-results)
  (resolve-nickname :search-results))


(definition public (active-search-view)
  (let ((manager (get-search-manager)))
    (when manager
      (get-search manager))))


;;;
;;;; Update
;;;


(definition public (update-search tab (domain: domain #f) (selector: selector #f))
  (let* ((focus (active-focus))
         (internal? (is? focus Tree-Embedded-Search-Text-View))
         (strings (and (not internal?) (is? focus Text-View) (get-selected-strings focus)))
         (string (and strings (= (length strings) 1) (car strings)))
         (manager (get-search-manager))
         (palette (get-host manager))
         (player (get-player palette))
         (tab-view (locate manager 'tab))
         (same-tab? (eq? tab (get-selection-name tab-view))))
    (if (and (not domain)
             (eq? (get-focused-window) player)
             same-tab?)
        (next-radio (get-search manager))
      (when tab
        (set-selection-name tab-view tab)
        (when domain
          (set-search-domain (get-search manager) domain))))
    (for-each (lambda (search)
                (let ((targets (get-search-targets search)))
                  (unless (or (not string)
                              (and (not-null? targets)
                                   (equal? string (first (first targets)))))
                    (set-search-targets search (list (list string ""))))))
              (get-searches manager))
    (when (or (not internal?) (not same-tab?))
      (select-search (get-search manager)))
    (when selector
      (selector (get-search manager)))
    (bring-to-front player)
    (set-visible? player #t)))


(definition public (end-search-edition)
  (let ((tree (get-targets (get-search (get-search-manager)))))
      (end-edition tree)))


;;;
;;;; Actions
;;;


(definition public (update-search-actions)
  (let* ((document (current-document))
         (result (active-search-result))
         (results (get-search-results))
         (resultset (get-current-resultset results))
         (results-count (get-visible-count (get-tree results))))
    (set-action-enabled? {Action search find-forward} (and result document))
    (set-action-enabled? {Action search find-backward} (and result document))
    (set-action-enabled? {Action search replace} (and result document))
    (set-action-enabled? {Action search replace&find-forward} (and result document))
    (set-action-enabled? {Action search replace-all} (and result document))
    (set-action-enabled? {Action search replace-selected} (>= results-count 1))
    (set-action-enabled? {Action search previous-search} (and result resultset))))


;;;
;;;; Location
;;;


(definition public (make-definition-search-resultset search definitions)
  (let ((resultset (new Search-Resultset search)))
    (for-each (lambda (definition)
                (add-result resultset (new Definition-Search-Result resultset definition)))
              definitions)
    resultset))


(definition public (make-reference-search-resultset search references)
  (let ((resultset (new Search-Resultset search)))
    (for-each (lambda (reference)
                (add-result resultset (new Reference-Search-Result resultset reference)))
              references)
    resultset))


(definition public (make-text-search-result find client beginning ending)
  (let ((search (new Text-Search find #f)))
    (let ((resultset (new Search-Resultset search)))
      (new Text-Search-Result resultset client: client beginning: beginning ending: ending))))


;;;
;;;; Extensions
;;;


(definition package (default-search-extensions)
  :lisp)


;;;
;;;; Actor
;;;


(register-nickname :search (lambda () (new Search-Actor))))
