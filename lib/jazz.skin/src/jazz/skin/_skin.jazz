;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Skins
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module jazz.skin jazz


(hub get-title)
(hub present)
(hub set-title)


(import (jazz.application)
        (jazz.component)
        (jazz.process)
        (jazz.settings))


;;;
;;;; Skins
;;;


(definition skins
  (make-table test: eq?))


(definition public (register-skin name skin)
  (table-set! skins name skin))

(definition public (registered-skin name)
  (table-ref skins name #f))

(definition public (registered-skins)
  skins)


(definition public (iterate-skins proc)
  (iterate-table skins proc))


@skin-convert
(definition public (get-skins)
  (let ((designer (get-skins-designer (current-application))))
    (when designer
      (get-reference designer))))


;;;
;;;; Find
;;;


(definition public skin-cache
  (make-table test: eq?))


(definition public (find-skin name)
  (or (table-ref skin-cache name #f)
      (bind (skin-name . look-name) (split-reference name)
        (let ((skin (registered-skin skin-name)))
          (let ((look (child skin look-name)))
            (table-set! skin-cache name look)
            look)))))


;;;
;;;; Skin
;;;


(class Skin extends Component)


;;;
;;;; Looks
;;;


(definition looks
  '())


(definition public (register-look look)
  (set! looks (append looks (list look))))

(definition public (registered-look name)
  (find-if (lambda (look)
             (eq? (get-name look) name))
           looks))

(definition public (registered-looks)
  looks)


(definition package (default-look)
  (registered-look (find-setting 'jazz.look 'jazz)))


(definition public (prepare-look)
  (set-look (default-look)))


(definition current-look
  #f)


(definition public (get-look)
  current-look)


(definition public (set-look look)
  (let ((trait (get-name look)))
    (iterate-table skins
      (lambda (name skin)
        (set-active-trait skin trait))))
  (set! current-look look)
  (look-update))


(definition package (look-update)
  (let ((process (current-process)))
    (when (and process (is-application? process))
      (let ((status (find-status-bar process)))
        (when status
          (let ((label (locate-component status 'look)))
            (when label
              (set-title label (present (get-look))))))))))


;;;
;;;; Look
;;;


(class Look extends Component
  
  
  (property title initialize #f accessors generate)
  
  
  (method public virtual (present self)
    title)))
