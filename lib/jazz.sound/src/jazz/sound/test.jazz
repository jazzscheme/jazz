;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Sound Test
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module jazz.sound.test jazz


(import (jazz.sound))


(startup-sound)
(let ((in-device (sound-default-input-device))
      (out-device (sound-default-output-device)))
  (let ((rate (determine-best-sound-rate in-device out-device))
        (format (determine-best-sound-format in-device out-device))
        (layout (determine-best-sound-layout in-device out-device))
        (latency 2.))
    (start-sound-input in-device rate format layout latency)
    (start-sound-output out-device rate format layout latency)
    (let ((in-capacity (sound-input-ring-capacity))
          (out-capacity (sound-output-ring-capacity)))
      (let ((buffer (make-u8vector in-capacity)))
        (thread-start!
          (make-thread
            (lambda ()
              (declare (proper-tail-calls))
              (let (loop)
                (let ((read (sound-read-input-ring buffer)))
                  (when (> read 0)
                    (let ((written (sound-write-output-ring buffer read)))
                      (when (/= written read)
                        (terminal written '/= read)))))
                (loop)))))))
    (debug 'ready)
    (sleep 4)
    (stop-sound-input)
    (stop-sound-output)))
(shutdown-sound))
