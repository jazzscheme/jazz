;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Streams
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module jazz.stream jazz


(hub set-src)
(hub set-sinks)

;; CONVERTCONSUMER
(hub get-caps)
(hub release-consumer)


(require (jazz.stream.setup))

(import (jazz.stream.gstreamer)
        (jazz.syntax (phase syntax)))

(export (jazz.stream.gstreamer))


;;;
;;;; Element
;;;


(class Stream-Element extends Object
  
  
  (slot name  initialize #f  getter generate)
  (slot state initialize #f  getter generate)
  (slot src   initialize #f  accessors generate)
  (slot sinks initialize '() accessors generate)
  
  
  (method override (initialize self (name: name #f))
    (nextmethod self)
    (set! self.name name))
  
  
  (method override (print self output readably)
    (print-unreadable self output
      (lambda (output)
        (format output "{a} {a}" name state))))
  
  
  (method protected virtual (consumer? self)
    #f)
  
  
  (method protected (single-consumer self)
    (and (= 1 (length sinks))
         (let ((sink (car sinks)))
           (and (consumer? sink)
                sink))))
  
  
  ;; CONVERTCONSUMER
  (method protected (find-consumer self caps)
    (find-if (lambda (sink)
               (and (consumer? sink)
                    (eqv? (get-caps sink) caps)))
             sinks))
  
  
  ;; CONVERTCONSUMER
  (method protected (release-consumers self)
    (for-each (lambda (sink)
                (when (consumer? sink)
                  (release-consumer sink)))
              sinks))
  
  
  (method package (ready? self)
    (eq? state 'ready))
  
  
  (method package (paused? self)
    (eq? state 'paused))
  
  
  (method package (playing? self)
    (eq? state 'playing))
  
  
  (method public (setup self)
    (when (not state)
      (startup-gstreamer)
      (setup-element self)
      (set! state 'ready)))
  
  
  (method public (start self)
    (setup self)
    (unless (eq? state 'paused)
      (start-element self)
      (set! state 'paused)))
  
  
  (method public (play self)
    (start self)
    (unless (eq? state 'playing)
      (play-element self)
      (set! state 'playing)))
  
  
  (method public (pause self)
    (when (eq? state 'playing)
      (pause-element self)
      (set! state 'paused)))
  
  
  (method public (stop self)
    (pause self)
    (when (eq? state 'paused)
      (stop-element self)
      (set! state 'ready)))
  
  
  (method public (release self)
    (stop self)
    (when (eq? state 'ready)
      (release-element self)
      (set! state #f)))
  
  
  (method protected virtual (setup-element self)
    )
  
  
  (method protected virtual (start-element self)
    )
  
  
  (method protected virtual (play-element self)
    )
  
  
  (method protected virtual (pause-element self)
    )
  
  
  (method protected virtual (stop-element self)
    )
  
  
  (method protected virtual (release-element self)
    )
  
  
  (method protected virtual (process self task exit)
    )
  
  
  (method package virtual (consume self buffer dts pts duration keyframe?)
    ))


;;;
;;;; Src
;;;


(class Stream-Src extends Stream-Element
  
  
  (method protected virtual (resettable? self)
    #f)
  
  
  (method protected virtual (reset-cooldown self)
    1.)
  
  
  (method protected virtual (reset-media self channel)
    ))


;;;
;;;; Sink
;;;


(class Stream-Sink extends Stream-Element
  
  
  (slot consumer initialize #f accessors generate)
  
  
  (method override (initialize self (name: name #f) (consumer: consumer #f))
    (nextmethod self name: name)
    (set! self.consumer consumer))
  
  
  (method override (consume self buffer dts pts duration keyframe?)
    (when consumer
      (consumer buffer dts pts duration keyframe?))))


;;;
;;;; Debug-Sink
;;;


(class Debug-Sink extends Stream-Sink
  
  
  (method override (consume self buffer dts pts duration keyframe?)
    (debug name (u8vector-length buffer) dts pts duration keyframe?)))


;;;
;;;; Pipeline
;;;


(definition public (pipeline desc)
  (define (parse desc)
    (if (is? desc Stream-Element)
        desc
      (bind (src . descs) desc
        (let ((sinks (map parse descs)))
          (for-each (lambda (sink)
                      (set-src sink src))
                    sinks)
          (set-sinks src sinks)
          src))))
  
  (let ((src (parse desc))
        (elements (new-queue))
        (sinks (new-queue)))
    (define (walk elem)
      (enqueue elements elem)
      (when (is? elem Stream-Sink)
        (enqueue sinks elem))
      (for-each walk (get-sinks elem)))
    
    (walk src)
    (let ((elements (queue-list elements))
          (sinks (queue-list sinks)))
      (let ((pipeline (new Stream-Pipeline elements)))
        (set-src pipeline src)
        (set-sinks pipeline sinks)
        pipeline))))


;; quick hack around order being important
(definition public (play-reversed pipeline)
  (for-each-reversed play (get-elements pipeline))
  (set-slot-value pipeline 'state 'playing))


(class Stream-Pipeline extends Stream-Element
  
  
  (slot elements initialize #f accessors generate)
  
  
  (method override (initialize self elements)
    (nextmethod self)
    (set! self.elements elements))
  
  
  (method override (destroy self)
    (for-each close elements)
    (nextmethod self))
  
  
  (method override (setup-element self)
    (for-each setup elements))
  
  
  (method override (start-element self)
    (for-each start elements))
  
  
  (method override (play-element self)
    (for-each play elements))
  
  
  (method override (pause-element self)
    (for-each pause elements))
  
  
  (method override (stop-element self)
    (for-each stop elements))
  
  
  (method override (release-element self)
    (for-each release elements))))
