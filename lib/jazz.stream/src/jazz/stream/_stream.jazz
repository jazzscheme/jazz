;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Streams
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module jazz.stream jazz


(hub set-sink)
(hub set-src)


(require (jazz.stream.setup))

(import (jazz.stream.gstreamer)
        (jazz.syntax (phase syntax)))

(export (jazz.stream.gstreamer))


;;;
;;;; Timestamp
;;;


(definition protected nanosecond <fl>
  (exact->inexact (expt 10 9)))

(definition public (timestamp->flonum x)
  (/ (exact->inexact x) nanosecond))

(definition public (flonum->timestamp x)
  (inexact->exact (round (* x nanosecond))))


;;;
;;;; Element
;;;


(class Stream-Element extends Object
  
  
  (slot state initialize #f getter generate)
  (slot src   initialize #f accessors generate)
  (slot sink  initialize #f accessors generate)
  ;; quicky to test tees
  (slot sinkself initialize #f accessors generate)
  
  
  (method package (ready? self)
    (eq? state 'ready))
  
  
  (method package (paused? self)
    (eq? state 'paused))
  
  
  (method package (playing? self)
    (eq? state 'playing))
  
  
  (method public (setup self)
    (when (not state)
      (startup-gstreamer)
      (setup-element self)
      (set! state 'ready)))
  
  
  (method public (start self)
    (setup self)
    (unless (eq? state 'paused)
      (start-element self)
      (set! state 'paused)))
  
  
  (method public (play self)
    (start self)
    (unless (eq? state 'playing)
      (play-element self)
      (set! state 'playing)))
  
  
  (method public (pause self)
    (when (eq? state 'playing)
      (pause-element self)
      (set! state 'paused)))
  
  
  (method public (stop self)
    (pause self)
    (when (eq? state 'paused)
      (stop-element self)
      (set! state 'ready)))
  
  
  (method public (release self)
    (stop self)
    (when (eq? state 'ready)
      (release-element self)
      (set! state #f)))
  
  
  (method protected virtual (setup-element self)
    )
  
  
  (method protected virtual (start-element self)
    )
  
  
  (method protected virtual (play-element self)
    )
  
  
  (method protected virtual (pause-element self)
    )
  
  
  (method protected virtual (stop-element self)
    )
  
  
  (method protected virtual (release-element self)
    )
  
  
  (method protected virtual (process self)
    )
  
  
  (method package virtual (consume self buffer timestamp duration)
    ))


;;;
;;;; Src
;;;


(class Stream-Src extends Stream-Element
  
  
  (method protected virtual (reset-cooldown self)
    1.)
  
  
  (method protected virtual (reset-media self channel)
    ))


;;;
;;;; Sink
;;;


(class Stream-Sink extends Stream-Element
  
  
  (slot consumer initialize #f accessors generate)
  
  
  (method override (initialize self (consumer: consumer #f))
    (nextmethod self)
    (set! self.consumer consumer))
  
  
  (method override (consume self buffer timestamp duration)
    (consumer buffer timestamp duration)))


;;;
;;;; Debug-Sink
;;;


(class Debug-Sink extends Stream-Sink
  
  
  (slot name initialize #f accessors generate)
  
  
  (method override (initialize self name . rest)
    (apply nextmethod self rest)
    (set! self.name name))
  
  
  (method override (consume self buffer timestamp duration)
    (debug name (u8vector-length buffer) timestamp duration)))


;;;
;;;; Pipeline
;;;


(definition public (pipeline . elements)
  (let ((sinkself? #f))
  (let ((len (length elements)))
    (if (< len 2)
        (error "Invalid pipeline length: {s}" len)
      (let (loop (previous #f) (scan elements))
        (when (not-null? scan)
          (let ((elem (car scan)))
            ;; quicky to test tees
            (if (pair? elem)
                (bind (sink sinkself) elem
                  (set-src sink previous)
                  (set-sink previous sink)
                  (set-src sinkself previous)
                  (set-sinkself previous sinkself)
                  (set! sinkself? #t))
              (when previous
                (set-src elem previous)
                (set-sink previous elem))
              (loop elem (cdr scan))))))))
  ;; quicky to test tees
  (if sinkself?
      (bind (src (sink sinkself)) elements
        (let ((pipeline (new Stream-Pipeline (list src sink sinkself))))
          (set-src pipeline src)
          (set-sink pipeline sink)
          (set-sinkself pipeline sinkself)
          pipeline))
    (bind (src sink) elements
      (let ((pipeline (new Stream-Pipeline elements)))
        (set-src pipeline src)
        (set-sink pipeline sink)
        pipeline)))))


(class Stream-Pipeline extends Stream-Element
  
  
  (slot elements initialize #f accessors generate)
  
  
  (method override (initialize self elements)
    (nextmethod self)
    (set! self.elements elements))
  
  
  (method override (setup-element self)
    (for-each setup elements))
  
  
  (method override (start-element self)
    (for-each start elements))
  
  
  (method override (play-element self)
    (for-each play elements))
  
  
  (method override (pause-element self)
    (for-each pause elements))
  
  
  (method override (stop-element self)
    (for-each stop elements))
  
  
  (method override (release-element self)
    (for-each release elements))))
