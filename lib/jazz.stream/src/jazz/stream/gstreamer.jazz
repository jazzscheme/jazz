;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; GStreamer
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.stream.gstreamer jazz


(import (jazz.stream.foreign)
        (jazz.foreign)
        (jazz.io)
        (jazz.listener)
        (jazz.platform.types)
        (jazz.stream.syntax (phase syntax))
        (jazz.syntax (phase syntax))
        (jazz.version))

(export (jazz.stream.foreign))


;;;
;;;; Timestamp
;;;


(definition protected nanosecond <fl>
  (exact->inexact (expt 10 9)))


(definition public (timestamp->flonum x) <fl>
  (/ (exact->inexact x) nanosecond))

(definition public (flonum->timestamp x)
  (inexact->exact (round (* x nanosecond))))


;;;
;;;; GLib
;;;


(definition public (g_value_boolean n)
  (let ((value (g_value_new G_TYPE_BOOLEAN)))
    (g_value_set_boolean value n)
    value))


(definition public (g_value_int n)
  (let ((value (g_value_new G_TYPE_INT)))
    (g_value_set_int value n)
    value))


(definition public (g_value_uint64 n)
  (let ((value (g_value_new G_TYPE_UINT64)))
    (g_value_set_uint64 value n)
    value))


(definition public (g_value_double n)
  (let ((value (g_value_new G_TYPE_DOUBLE)))
    (g_value_set_double value n)
    value))


(definition public (g_value_string str)
  (let ((value (g_value_new G_TYPE_STRING)))
    (g_value_set_string value str)
    value))


(definition public (g_value_fraction fraction)
  (bind (n . d) fraction
    (let ((value (g_value_new (GST_TYPE_FRACTION))))
      (gst_value_set_fraction value n d)
      value)))


(definition public (for-each-typed-property proc lst)
  (let (iterate (lst lst))
    (when (not-null? lst)
      (proc (car lst) (cadr lst) (caddr lst))
      (iterate (cdddr lst)))))


(definition protected value-new
  (make-table test: eq?))

(definition protected (register-value-new name new)
  (table-set! value-new name new))

(register-value-new 'boolean  g_value_boolean)
(register-value-new 'int      g_value_int)
(register-value-new 'uint64   g_value_uint64)
(register-value-new 'double   g_value_double)
(register-value-new 'string   g_value_string)
(register-value-new 'fraction g_value_fraction)


;;;
;;;; GStreamer
;;;


(definition public (gst-version)
  (let ((info (make-u32vector 4)))
    (gst_version_fill info)
    (new Version
      (u32vector-ref info 0)
      (u32vector-ref info 1)
      (u32vector-ref info 2)
      (u32vector-ref info 3))))


;;;
;;;; Object
;;;


(definition public (g-object-set obj . rest)
  (for-each-typed-property (lambda (name type value)
                             (let ((new (table-ref value-new type)))
                               (let ((value (new value)))
                                 (g_object_set_property obj name value)
                                 (g_value_free value))))
                           rest))


;;;
;;;; Renaming
;;;


;; gstreamer threads are named as element name:pad direction
;; the following renaming scheme gives a unique name to every
;; element so we can find the element bin solely from its name


(definition bin-renaming?
  #t)


(definition bin-mutex
  (make-mutex 'bin))

(definition protected (with-bin-mutex thunk)
  (mutex-lock! bin-mutex)
  (prog1 (thunk)
    (mutex-unlock! bin-mutex)))


(definition bin-unique-id
  0)

(definition (bin-unique-id!)
  (with-bin-mutex
    (lambda ()
      (prog1 bin-unique-id
        (increase! bin-unique-id)))))

(definition (bin-suffix id)
  (if (not bin-renaming?)
      ""
    (string-append "%" (->string id))))


(definition bins
  (make-table test: eq?))

(definition (register-bin bin id)
  (with-bin-mutex
    (lambda ()
      (table-set! bins bin id))))

(definition (registered-bin bin)
  (with-bin-mutex
    (lambda ()
      (table-ref bins bin))))

(definition (unregister-bin bin)
  (table-clear bins bin))


(definition protected (id->bin id)
  (table-find bins id))


(definition protected (iterate-bins proc)
  (iterate-table bins
    proc))

(definition protected (collect-bins)
  (table-keys bins))


(definition public (gst_bin_get_by_name bin name)
  (let ((id (registered-bin bin)))
    (let ((elem (gst_bin_get_by_name_aux bin (string-append name (bin-suffix id)))))
      (if (not elem)
          (error "Unable to find element {a}" name)
        elem))))


(definition (substitute-names description id)
  (let ((output (open-output-string))
        (len (string-length description)))
    (let (iter (start 0))
      (let ((pos (search description "name=" start: start)))
        (if (not pos)
            (begin
              (write-string (substring description start len) output)
              (get-output-string output))
          (write-string (substring description start pos) output)
          (let ((start (+ pos 5)))
            (let ((end (or (search description " " start: start) len)))
              (write-string "name=" output)
              (write-string (substring description start end) output)
              (write-string (bin-suffix id) output)
              (iter end))))))))


(definition (substitute-^s description id)
  (substitute-string description "^" (bin-suffix id)))


;;;
;;;; Parse
;;;


;; a try to debug memory corruption in the tags
(definition element-tags
  '(GstElement*))

(definition error-tags
  '(GError*))


(definition public (gst_parse_launch desc)
  (receive (pipeline err) (gst_parse_launch_aux desc element-tags error-tags)
    (if err
        (error "Create pipeline error: {a}" (g_error_message err))
      pipeline)))


(definition public (gst_parse_bin_from_description desc ghost_unlinked_pads)
  (receive (bin err) (gst_parse_bin_from_description_aux desc ghost_unlinked_pads element-tags error-tags)
    (if err
          (error "Create bin error: {a}" (g_error_message err))
        bin)))


(definition public (gst-pipeline . elements)
  (let ((id (bin-unique-id!)))
    (let ((description (substitute-^s (substitute-names (gst-parse elements) id) id)))
      (let ((pipeline (gst_parse_launch description)))
        (register-bin pipeline id)
        pipeline))))


(definition public (gst-bin . elements)
  (let ((id (bin-unique-id!)))
    (let ((description (substitute-^s (substitute-names (gst-parse elements) id) id)))
      (let ((bin (gst_parse_bin_from_description description 0)))
        (register-bin bin id)
        bin))))


(definition public (gst-parse elements)
  (define (parse-list elem)
    (let ((elem (remove-false elem)))
      (bind (first . rest) elem
        (string-append (if (pair? first)
                           (parse-list first)
                         first)
          (parse-rest rest)))))
  
  (define (parse-rest rest)
    (let (loop (rest rest) (line ""))
      (if (null? rest)
          line
        (bind (elem . rest) rest
          (cond ((not elem)
                 (loop rest line))
                ((string? elem)
                 (loop rest (string-append line " ! " elem)))
                ((pair? elem)
                 (loop rest (string-append line " " (parse-list elem))))
                (else
                 (error "Unable to parse {s}" elem)))))))
  
  (parse-list elements))


(definition public (gst_bin_release bin)
  (with-bin-mutex
    (lambda ()
      (gst_element_release bin)
      (unregister-bin bin))))


(definition public (pipeline-messages-processor pipeline (playing-proc: playing-proc #f) (print?: print? #f))
  (let ((name (gst_object_get_name pipeline))
        (bus (gst_pipeline_get_bus pipeline)))
    (lambda ()
      (let (loop)
        (let ((msg (gst_bus_pop bus)))
          (when msg
            (when (and playing-proc
                       (= (GST_MESSAGE_TYPE msg) GST_MESSAGE_STATE_CHANGED)
                       (= (gst_message_state_changed_get_new_state msg) GST_STATE_PLAYING)
                       (equal? (gst_object_get_name (GST_MESSAGE_SRC msg)) name))
              (playing-proc))
            (when print?
              (gst_print_message name msg))
            (let ((type (GST_MESSAGE_TYPE msg)))
              (ecase type
                ((GST_MESSAGE_ERROR)
                 (unless print?
                   (gst_print_message name msg)))
                ((GST_MESSAGE_WARNING)
                 (unless print?
                   (gst_print_message name msg)))))
            (gst_message_unref msg)
            (loop)))))))


(definition public (gst-element name . rest)
  (let ((port (open-output-string)))
    (display name port)
    (for-each-property (lambda (key value)
                         (when value
                           (format port " {a}={a}" (keyword->string key) value)))
                       rest)
    (get-output-string port)))


;;;
;;;; Bin
;;;


(definition public (gst_bin_elements bin)
  (let ((it (gst_bin_iterate_elements bin))
        (queue (new-queue)))
    (let (loop)
      (let ((elem (gst_iterator_next_element it)))
        (if (not elem)
            (begin
              (gst_iterator_free it)
              (queue-list queue))
          (enqueue queue elem)
          (loop))))))


(definition public (gst_bin_elements_sorted bin)
  (let ((it (gst_bin_iterate_sorted bin))
        (queue (new-queue)))
    (let (loop)
      (let ((elem (gst_iterator_next_element it)))
        (if (not elem)
            (begin
              (gst_iterator_free it)
              (queue-list queue))
          (enqueue queue elem)
          (loop))))))


(definition public (gst_bin_elements_recurse bin)
  (let ((it (gst_bin_iterate_recurse bin))
        (queue (new-queue)))
    (let (loop)
      (let ((elem (gst_iterator_next_element it)))
        (if (not elem)
            (begin
              (gst_iterator_free it)
              (queue-list queue))
          (enqueue queue elem)
          (loop))))))


;;;
;;;; Caps
;;;


(definition public (gst-new-caps type . rest)
  (let ((caps (gst_caps_new_empty_simple type)))
    (for-each-typed-property (lambda (name type value)
                               (let ((new (table-ref value-new type)))
                                 (let ((value (new value)))
                                   (gst_caps_set_value caps name value)
                                   (g_value_free value))))
                             rest)
    caps))


(definition public (gst_caps_get_name caps)
  (let ((struc (gst_caps_get_structure caps 0)))
    (gst_structure_get_name struc)))


;;;
;;;; Element
;;;


(definition public (gst_element_path elem)
  (let ((output (open-output-string)))
    (let (loop (elem elem))
      (let ((parent (gst_element_get_parent_untraced elem)))
        (when parent
          (loop parent)
          (display "." output))
        (display (gst_object_get_name_untraced elem) output)))
    (get-output-string output)))


(definition public (gst_element_sink_pads elem)
  (gst_collect_pad_iterator (gst_element_iterate_sink_pads elem)))


(definition public (gst_element_src_pads elem)
  (gst_collect_pad_iterator (gst_element_iterate_src_pads elem)))


(definition public (gst_element_pads elem)
  (gst_collect_pad_iterator (gst_element_iterate_pads elem)))


(definition public (gst_collect_pad_iterator iterator)
  (let ((queue (new-queue)))
    (let (loop)
      (let ((pad (gst_iterator_next_pad iterator)))
        (if (not pad)
            (begin
              (gst_iterator_free iterator)
              (queue-list queue))
          (enqueue queue pad)
          (loop))))))


(definition public (gst_element_release elem)
  (gst_element_set_state elem GST_STATE_NULL)
  (gst_object_unref elem))


(definition public (gst_monitor pipeline what . names)
  (apply gst_monitor_bin pipeline pipeline what names))


(definition public (gst_monitor_bin pipeline bin what . names)
  (define (parse-name name)
    (let ((parts (split name ".")))
      (if (= 1 (length parts))
          (let ((parts (split name "!")))
            (if (= 1 (length parts))
                (values name #f #f)
              (bind (name dir) parts
                (values name #f (cond ((equal? dir "src") GST_PAD_SRC)
                                      ((equal? dir "sink") GST_PAD_SINK)
                                      (else (error "Unknown pad direction: {a}" dir)))))))
        (bind (name pad_name) parts
          (values name pad_name #f)))))
  
  (let ((monitored (new-queue)))
    (define (add pad id)
      (enqueue monitored (cons pad id)))
    
    (for-each (lambda (name)
                (receive (name pad_name pad_direction) (parse-name name)
                  (with-unref ((elem (gst_bin_get_by_name bin name)))
                    (if (not elem)
                        (error "Unable to find element {a}" name)
                      (with-unref ((pads (gst_element_pads elem)))
                        (for-each (lambda (pad)
                                    (when (or (and (not pad_name)
                                                   (not pad_direction))
                                              (and pad_name
                                                   (equal? (gst_pad_get_name pad) pad_name))
                                              (and pad_direction
                                                   (= (gst_pad_get_direction pad) pad_direction)))
                                      (case what
                                        ((data)
                                         (add pad (gst_monitor_data pipeline pad)))
                                        ((events)
                                         (add pad (gst_monitor_events pipeline pad)))
                                        ((queries)
                                         (add pad (gst_monitor_queries pipeline pad)))
                                        ((all)
                                         (add pad (gst_monitor_data pipeline pad))
                                         (add pad (gst_monitor_events pipeline pad))
                                         (add pad (gst_monitor_queries pipeline pad)))
                                        (else
                                         (error "Unknown monitor: {a}" what)))))
                                  pads))))))
              names)
    (queue-list monitored)))


(definition public (gst_unmonitor monitored)
  (for-each (lambda (info)
              (bind (pad . id) info
                (gst_monitor_remove pad id)))
            monitored))


;;;
;;;; AppSrc
;;;


(definition public (gst-app-src-set-caps appsrc type . rest)
  (let ((caps (gst_caps_new_empty_simple type))
        (values '()))
    (for-each-typed-property (lambda (name type value)
                               (let ((new (table-ref value-new type)))
                                 (let ((value (new value)))
                                   (set! values (cons value values))
                                   (gst_caps_set_value caps name value))))
                             rest)
    (gst_app_src_set_caps appsrc caps)
    (gst_caps_unref caps)
    (for-each g_value_free values)))


(definition public (gst-setup-video-source src type format width height framerate (stream-format: stream-format #f) (alignment: alignment #f))
  (apply gst-app-src-set-caps src type
    `("format"        string   ,format
      "width"         int      ,width
      "height"        int      ,height
      "framerate"     fraction ,(cons framerate 1)
      ,@(if stream-format `("stream-format" string "avc") '())
      ,@(if alignment `("alignment" string "au") '())))
  (g-object-set src
    "is-live"     'boolean #t
    "stream-type" 'int     GST_APP_STREAM_TYPE_STREAM
    "format"      'int     GST_FORMAT_TIME))


;;;
;;;; Time-Adapter
;;;


(definition protected adapter-tolerance
  .01)


(class Time-Adapter extends Object
  
  
  (slot moving-deviation <fl> initialize 0. getter generate)
  (slot timestamp-offset      initialize #f getter generate)


  (method public (rebase-time self kind appsrc timestamp (rebase-proc #f))
    (let ((running-time (gst_element_get_running_time appsrc)))
      (if (= running-time GST_CLOCK_TIME_NONE)
          (error "Invalid pipeline running time")
        (let ((perfect-offset (- running-time timestamp)))
          (if (not timestamp-offset)
              (set! timestamp-offset perfect-offset)
            (let ((deviation (timestamp->flonum (abs (- perfect-offset timestamp-offset)))))
              (set! moving-deviation (/ (+ (* moving-deviation 31.) deviation) 32.))
              (when (> moving-deviation adapter-tolerance)
                (when rebase-proc
                  (rebase-proc (timestamp->flonum (- perfect-offset timestamp-offset))))
                (set! timestamp-offset perfect-offset)
                (set! moving-deviation 0.)))))
        timestamp-offset))))


;;;
;;;; AppSink
;;;


(definition public app-sink-info-size
  4)


(definition public (gst_app_sink_connect_signals elem listener)
  (gst_app_sink_connect_listener_signals elem (get-write-file listener)))


(definition public (gst_app_sink_read listener elem vec info)
  (if (get-closed? listener)
      #f
    (let ((c (wait listener)))
      (if (or (eqv? c #\^)
              (eqv? c #\@))
          #f
        (validate-try-pull (gst_app_sink_try_pull elem vec info))))))


(definition protected (validate-try-pull size)
  (case size
    ((-1) (error "Appsink try-pull no sample returned"))
    ((-2) (error "Appsink try-pull buffer too small"))
    (else size)))


;;;
;;;; Discoverer
;;;


(definition public (discover-audio file)
  (with-unref ((discoverer (gst_discoverer_new)))
    (with-unref ((discoverer-info (gst_discoverer_discover_uri discoverer (parse-uri file))))
      (let ((container-info (gst_discoverer_info_get_stream_info discoverer-info)))
        (let ((container-type (gst_caps_get_name (gst_discoverer_stream_info_get_caps container-info))))
          (define (audio-info stream-info)
            (let ((caps (gst_discoverer_stream_info_get_caps stream-info)))
              (let ((name (gst_caps_get_name caps)))
                (let ((version (and (equal? name "audio/mpeg")
                                    (let ((struc (gst_caps_get_structure caps 0)))
                                      (gst_structure_get_int struc "mpegversion")))))
                  (prog1 (list container-type
                               name
                               version
                               (gst_discoverer_audio_info_get_bitrate stream-info)
                               (gst_discoverer_audio_info_get_sample_rate stream-info)
                               (gst_discoverer_audio_info_get_channels stream-info)
                               (gst_caps_to_string caps))
                    (gst_caps_unref caps))))))
          
          (ecase (G_OBJECT_TYPE container-info)
            ((GST_TYPE_DISCOVERER_STREAM_INFO)
             (let ((caps (gst_discoverer_stream_info_get_caps container-info)))
               (let ((caps-string (gst_caps_to_string caps)))
                 ;; hack for the mp3 format that is not structured
                 ;; as a container containing stream children...
                 (prog1 (if (equal? caps-string "application/x-id3")
                            (audio-info (gst_discoverer_stream_info_get_next container-info))
                          #f)
                   (gst_caps_unref caps)))))
            ((GST_TYPE_DISCOVERER_CONTAINER_INFO)
             (let ((streams (gst_discoverer_container_info_get_streams container-info)))
               (prog1 (let (loop (streams streams))
                        (if (not streams)
                            #f
                          (let ((stream-info (gst_discoverer_stream_info_list_data streams)))
                            (if (= (G_OBJECT_TYPE stream-info) GST_TYPE_DISCOVERER_AUDIO_INFO)
                                (audio-info stream-info)
                              (loop (gst_discoverer_stream_info_list_next streams))))))
                 (gst_discoverer_stream_info_list_free streams))))
            (else
             #f)))))))


(definition public (discover-video file)
  (with-unref ((discoverer (gst_discoverer_new)))
    (with-unref ((discoverer-info (gst_discoverer_discover_uri discoverer (parse-uri file))))
      (let ((container-info (gst_discoverer_info_get_stream_info discoverer-info)))
        (if (= (G_OBJECT_TYPE container-info) GST_TYPE_DISCOVERER_CONTAINER_INFO)
            (let ((streams (gst_discoverer_container_info_get_streams container-info)))
              (prog1 (let (loop (streams streams))
                       (if (not streams)
                           #f
                         (let ((stream-info (gst_discoverer_stream_info_list_data streams)))
                           (if (= (G_OBJECT_TYPE stream-info) GST_TYPE_DISCOVERER_VIDEO_INFO)
                               (let ((caps (gst_discoverer_stream_info_get_caps stream-info)))
                                 (prog1 (list (gst_caps_get_name caps)
                                              (new Dimension
                                                (gst_discoverer_video_info_get_width stream-info)
                                                (gst_discoverer_video_info_get_height stream-info))
                                              (/ (cast <fl> (gst_discoverer_video_info_get_framerate_num stream-info))
                                                 (cast <fl> (gst_discoverer_video_info_get_framerate_denom stream-info)))
                                              (/ (cast <fl> (gst_discoverer_video_info_get_bitrate stream-info))
                                                 1000.)
                                              (gst_caps_to_string caps))
                                   (gst_caps_unref caps)))
                             (loop (gst_discoverer_stream_info_list_next streams))))))
                (gst_discoverer_stream_info_list_free streams)))
          #f)))))


(definition public (discover-image file)
  (with-unref ((discoverer (gst_discoverer_new)))
    (with-unref ((discoverer-info (gst_discoverer_discover_uri discoverer (parse-uri file))))
      (let ((stream-info (gst_discoverer_info_get_stream_info discoverer-info)))
        (if (= (G_OBJECT_TYPE stream-info) GST_TYPE_DISCOVERER_VIDEO_INFO)
            (let ((caps (gst_discoverer_stream_info_get_caps stream-info)))
              (prog1 (list (gst_caps_get_name caps)
                           (new Dimension
                             (gst_discoverer_video_info_get_width stream-info)
                             (gst_discoverer_video_info_get_height stream-info))
                           (gst_caps_to_string caps))
                (gst_caps_to_string caps)))
          #f)))))


;;;
;;;; Leaks
;;;


(definition default-leaks-file
  {File Home "Devel" "together" "app" "devel" "leaks"})


(definition public (parse-leaks leaks-file)
  (define (read-entries)
    (call-with-input-file (path-settings leaks-file)
      (lambda (input)
        (let ((queue (new-queue)))
          (let (iter)
            (let ((line (read-line input)))
              (unless (eof-object? line)
                (let ((pos (search line "GST_TRACER :0::")))
                  (when pos
                    (let ((entry (substring line (+ pos 16) (string-length line))))
                      (enqueue queue entry))))
                (iter))))
          (queue-list queue)))))
  
  (define (parse-entry entry)
    (bind (what . rest) (split entry ", ")
      (let ((fields (collect (lambda (str)
                               (let ((lst (split str "=")))
                                 (and (> (length lst) 1)
                                      (bind (name value) lst
                                        (cons name value)))))
                             rest)))
        (values what fields))))
  
  (define (parse-type-name value)
    (if (starts-with? value "(string)")
        (substring value 8 (string-length value))
      value))
  
  (define (parse-address value)
    (if (starts-with? value "(gpointer)")
        (substring value 10 (string-length value))
      value))
  
  (define (parse-description value)
    (if (starts-with? value "(string)")
        (substring value 8 (string-length value))
      value))
  
  (define (parse-refcount value)
    (if (starts-with? value "(uint)")
        (substring value 6 (string-length value))
      value))
  
  (let ((entries (read-entries)))
    (collect (lambda (entry)
               (receive (what fields) (parse-entry entry)
                 (and (or (equal? what "object-alive")
                          (equal? what "object-refings"))
                      (cons what fields))))
             entries)))


(definition public (report-leaks (leaks-file #f))
  (define (present-type-name value)
    (if (starts-with? value "(string)")
        (substring value 8 (string-length value))
      value))
  
  (define (present-address value)
    (if (starts-with? value "(gpointer)")
        (substring value 10 (string-length value))
      value))
  
  (define (present-description value)
    (if (starts-with? value "(string)")
        (substring value 8 (string-length value))
      value))
  
  (define (present-refcount value)
    (if (starts-with? value "(uint)")
        (substring value 6 (string-length value))
      value))
  
  (let ((entries (parse-leaks (or leaks-file default-leaks-file))))
    (let ((count (length entries)))
      (if (= count 0)
          (format :terminal "{%}No leaks found{%}")
        (format :terminal "{%}")
        (for-each (lambda (entry)
                    (bind (what . fields) entry
                      (let ((type-name (present-type-name (cdr (assoc "type-name" fields))))
                            (address (present-address (cdr (assoc "address" fields))))
                            (description (present-description (cdr (assoc "description" fields))))
                            (refcount (present-refcount (cdr (assoc "ref-count" fields)))))
                        (format :terminal "{a} (0x{a}) {a} refcount={a}{%}" type-name address description refcount))))
                  entries)
        (format :terminal "{%}Found {a} leak{a}{%}" count (format-plural count)))))))
