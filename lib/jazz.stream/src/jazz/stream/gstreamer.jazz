;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; GStreamer
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.stream.gstreamer jazz


(import (jazz.stream.foreign)
        (jazz.foreign)
        (jazz.io)
        (jazz.platform.types)
        (jazz.syntax (phase syntax))
        (jazz.version))

(export (jazz.stream.foreign))


;;;
;;;; GLib
;;;


(definition public (g_value_boolean n)
  (let ((value (g_value_new G_TYPE_BOOLEAN)))
    (g_value_set_boolean value n)
    value))


(definition public (g_value_int n)
  (let ((value (g_value_new G_TYPE_INT)))
    (g_value_set_int value n)
    value))


(definition public (g_value_uint64 n)
  (let ((value (g_value_new G_TYPE_UINT64)))
    (g_value_set_uint64 value n)
    value))


(definition public (g_value_double n)
  (let ((value (g_value_new G_TYPE_DOUBLE)))
    (g_value_set_double value n)
    value))


(definition public (g_value_string str)
  (let ((value (g_value_new G_TYPE_STRING)))
    (g_value_set_string value str)
    value))


(definition public (g_value_fraction n d)
  (let ((value (g_value_new (GST_TYPE_FRACTION))))
    (gst_value_set_fraction value n d)
    value))


(definition public (g_object_set obj . rest)
  (for-each-property (lambda (name value)
                       (g_object_set_property obj name value))
                     rest))


;;;
;;;; GStreamer
;;;


(definition gstreamer-initialized?
  #f)


(definition public (startup-gstreamer)
  (unless gstreamer-initialized?
    (gst_init)
    (set! gstreamer-initialized? #t)))


(definition public (shutdown-gstreamer)
  (when gstreamer-initialized?
    (set! gstreamer-initialized? #f)))


(definition public (gst-version)
  (let ((info (make-u32vector 4)))
    (gst_version_fill info)
    (new Version
      (u32vector-ref info 0)
      (u32vector-ref info 1)
      (u32vector-ref info 2)
      (u32vector-ref info 3))))


;;;
;;;; Pipeline
;;;


(definition public (gst-launch . elements)
  (let ((description (gst-parse elements)))
    (gst_parse_launch description)))


(definition public (gst-bin . elements)
  (let ((description (gst-parse elements)))
    (gst_parse_bin_from_description description 1)))


(definition public (gst-parse elements)
  (define (parse elem)
    (cond ((not elem)
           elem)
          ((string? elem)
           (string-append " ! " elem))
          ((pair? elem)
           (string-append " " (parse-list elem)))
          (else
           (error "Unable to parse {s}" elem))))
  
  (define (parse-list elem)
    (let ((elem (remove-false elem)))
      (bind (first . rest) elem
        (string-append (if (pair? first)
                           (parse-list first)
                         first)
          (apply string-append (map parse rest))))))
  
  (parse-list elements))


(definition public (pipeline-messages-processor pipeline (playing-proc: playing-proc #f) (print?: print? #f))
  (let ((name (gst_object_get_name pipeline))
        (bus (gst_pipeline_get_bus pipeline)))
    (lambda ()
      (let (loop)
        (let ((msg (gst_bus_pop bus)))
          (when msg
            (when (and playing-proc
                       (= (GST_MESSAGE_TYPE msg) GST_MESSAGE_STATE_CHANGED)
                       (= (gst_message_state_changed_get_new_state msg) GST_STATE_PLAYING)
                       (equal? (gst_object_get_name (GST_MESSAGE_SRC msg)) name))
              (playing-proc))
            (when print?
              (gst_print_message name msg))
            (let ((type (GST_MESSAGE_TYPE msg)))
              (ecase type
                ((GST_MESSAGE_ERROR)
                 (unless print?
                   (gst_print_message name msg)))
                ((GST_MESSAGE_WARNING)
                 (unless print?
                   (gst_print_message name msg)))))
            (gst_message_unref msg)
            (loop)))))))


(definition public (gst-element name . rest)
  (let ((port (open-output-string)))
    (display name port)
    (for-each-property (lambda (key value)
                         (when value
                           (format port " {a}={a}" (keyword->string key) value)))
                       rest)
    (get-output-string port)))


;;;
;;;; Caps
;;;


(definition public (gst_caps type . rest)
  (let ((caps (gst_caps_new_empty_simple type)))
    (for-each-property (lambda (name value)
                         (gst_caps_set_value caps name value))
                       rest)
    caps))


(definition public (gst-setup-source src type format width height framerate (stream-format: stream-format #f) (alignment: alignment #f))
  (gst_app_src_set_caps src
                        (apply gst_caps type
                          `("format"        ,(g_value_string format)
                            "width"         ,(g_value_int width)
                            "height"        ,(g_value_int height)
                            "framerate"     ,(g_value_fraction framerate 1)
                            ,@(if stream-format `("stream-format" ,(g_value_string "avc")) '())
                            ,@(if alignment `("alignment" ,(g_value_string "au")) '()))))
  (g_object_set src
                "is-live"     (g_value_boolean #t)
                "stream-type" (g_value_int GST_APP_STREAM_TYPE_STREAM)
                "format"      (g_value_int GST_FORMAT_TIME)))


;;;
;;;; Bin
;;;


(definition public (gst_bin_elements bin)
  (let ((it (gst_bin_iterate_elements bin))
        (queue (new-queue)))
    (let (loop)
      (let ((elem (gst_iterator_next_element it)))
        (if (not elem)
            (queue-list queue)
          (enqueue queue elem)
          (loop))))))


;;;
;;;; Element
;;;


(definition public (gst_element_pads elem)
  (let ((it (gst_element_iterate_pads elem))
        (queue (new-queue)))
    (let (loop)
      (let ((pad (gst_iterator_next_pad it)))
        (if (not pad)
            (queue-list queue)
          (enqueue queue pad)
          (loop))))))


(definition public (gst_element_release elem)
  (gst_element_set_state elem GST_STATE_NULL)
  (gst_object_unref elem))


(definition public (gst_monitor pipeline what . names)
  (define (parse-name name)
    (let ((parts (split name ".")))
      (if (= 1 (length parts))
          (values name #f)
        (bind (name dir) parts
          (values name (cond ((equal? dir "src") GST_PAD_SRC)
                             ((equal? dir "sink") GST_PAD_SINK)
                             (else (error "Unknown pad direction: {a}" dir))))))))
  
  (for-each (lambda (name)
              (receive (name direction) (parse-name name)
                (let ((elem (gst_bin_get_by_name pipeline name)))
                  (if (not elem)
                      (error "Unable to find element {a}" name)
                    (for-each (lambda (pad)
                                (when (or (not direction)
                                          (= (gst_pad_get_direction pad) direction))
                                  (case what
                                    ((data)
                                     (gst_monitor_data pipeline pad))
                                    ((events)
                                     (gst_monitor_events pipeline pad))
                                    ((all)
                                     (gst_monitor_data pipeline pad)
                                     (gst_monitor_events pipeline pad))
                                    (else
                                     (error "Unknown monitor: {a}" what)))))
                              (gst_element_pads elem))))))
            names))


;;;
;;;; AppSink
;;;


(definition public (gst_app_sink_connect_signals elem listener)
  (gst_app_sink_connect_listener_signals elem (get-write-file listener)))


(definition public (gst_app_sink_read listener elem vec info)
  (if (get-stopped? listener)
      #f
    (let ((c (wait listener)))
      (if (or (eqv? c #\^)
              (eqv? c #\@))
          #f
        (let ((size (gst_app_sink_try_pull elem vec info)))
          (assert (/= size -1)
            size))))))


;;;
;;;; Socket
;;;


(definition listener-sockets?
  #t)


(definition socket-server-port
  (open-vector))

(definition socket-server-mutex
  (make-mutex 'socket-server))


(definition socket-server-address
  "127.0.0.1")

(definition socket-server-service
  #f)


(definition protected (start-socket-server)
  (when listener-sockets?
    (thread-start!
      (new-thread
        (lambda ()
          (declare (proper-tail-calls))
          (let ((server-port (open-tcp-server (list server-address: socket-server-address port-number: 0))))
            (set! socket-server-service (socket-info-port-number (tcp-server-socket-info server-port)))
            (let (loop)
              (let ((port (read server-port)))
                (write port socket-server-port)
                (force-output socket-server-port)
                (loop)))))
        'socket-server))))


;;;
;;;; Fifo
;;;


(definition fifo-directory
  {Directory Settings "work" "fifos"})


(definition fifo-prefix
  "")

(definition protected (set-fifo-prefix prefix)
  (set! fifo-prefix prefix))


(definition protected next-fifo-no <fx>
  0)

(definition protected (next-fifo-no!) <fx>
  (prog1 next-fifo-no
    (increase! next-fifo-no)))


(definition public (open-stream-listener (name #f))
  (cond (listener-sockets?
         (mutex-lock! socket-server-mutex)
         (prog1 (let ((file (gst_socket_open socket-server-address socket-server-service)))
                  (let ((port (read socket-server-port)))
                    (new Stream-Listener #f file port)))
           (mutex-unlock! socket-server-mutex)))
        (else
         (create-directories fifo-directory)
         (let (iterate (no (next-fifo-no!)))
           (let ((name (format "{a}{a}{a}" fifo-prefix (or name "fifo") no)))
             (let ((file (new-file fifo-directory name)))
               (if (exists? file)
                   (iterate (+ no 1))
                 (let ((filename (parse file)))
                   (create-fifo filename)
                   (new Stream-Listener filename)))))))))


(definition protected (empty-fifo-directory (feedback?: feedback? #f))
  (unless listener-sockets?
    (when (exists? fifo-directory)
      (for-each (lambda (filename)
                  (let ((file (new-file fifo-directory filename)))
                    (when feedback?
                      (terminal 'delete 'fifo filename))
                    (delete file)))
                (directory-collect (parse fifo-directory) 'fifo)))))


;;;
;;;; Listener
;;;


(definition public (start-stream-listener listener)
  (flush listener)
  (set-stopped? listener #f))


(definition public (stop-stream-listener listener)
  (set-stopped? listener #t)
  (gst_listener_stop (get-write-file listener)))


(definition public (close-stream-listener listener)
  (close listener))


(class Stream-Listener extends Object
  
  
  (slot filename   getter generate)
  (slot read-port  getter generate)
  (slot write-file getter generate)
  (slot stopped?   accessors generate)
  
  
  (method override (initialize self filename . rest)
    (nextmethod self)
    (cond (listener-sockets?
           (bind (file port) rest
             (set! self.filename #f)
             (set! self.read-port port)
             (set! self.write-file file)
             (set! self.stopped? #f)))
          (else
           (set! self.filename filename)
           (set! self.read-port (open-input-file filename))
           (set! self.write-file (gst_fifo_open filename))
           (set! self.stopped? #f))))
  
  
  (method override (destroy self)
    (gst_listener_close write-file)
    (close-port read-port)
    (unless listener-sockets?
      (when (file-exists? filename)
        (delete-file filename)))
    (nextmethod self))
  
  
  (method override (print self output readably)
    (print-unreadable self output
      (lambda (output)
        (unless listener-sockets?
          (format output "{a}" (filename-name filename))))))
  
  
  (method public (flush self)
    (declare (proper-tail-calls))
    (input-port-timeout-set! read-port 0)
    (let (loop)
      (when (not (eof-object? (read-char read-port)))
        (loop)))
    (input-port-timeout-set! read-port +inf.0))
  
  
  (method public (wait self)
    (read-char read-port))))
