;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; GStreamer
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.stream.gstreamer jazz


(import (jazz.stream.foreign)
        (jazz.foreign)
        (jazz.io)
        (jazz.platform.types)
        (jazz.syntax (phase syntax)))

(export (jazz.stream.foreign))


;;;
;;;; GLib
;;;


(definition public (g_value_boolean n)
  (let ((value (g_value_new G_TYPE_BOOLEAN)))
    (g_value_set_boolean value n)
    value))


(definition public (g_value_int n)
  (let ((value (g_value_new G_TYPE_INT)))
    (g_value_set_int value n)
    value))


(definition public (g_value_uint64 n)
  (let ((value (g_value_new G_TYPE_UINT64)))
    (g_value_set_uint64 value n)
    value))


(definition public (g_value_double n)
  (let ((value (g_value_new G_TYPE_DOUBLE)))
    (g_value_set_double value n)
    value))


(definition public (g_value_string str)
  (let ((value (g_value_new G_TYPE_STRING)))
    (g_value_set_string value str)
    value))


(definition public (g_value_fraction n d)
  (let ((value (g_value_new (GST_TYPE_FRACTION))))
    (gst_value_set_fraction value n d)
    value))


(definition public (g_object_set obj . rest)
  (for-each-property (lambda (name value)
                       (g_object_set_property obj name value))
                     rest))


;;;
;;;; GStreamer
;;;


(definition gstreamer-initialized?
  #f)


(definition public (startup-gstreamer)
  (define (determine-install)
    (define (try dir)
      (if (and dir
               (file-exists? (tie "{dir}gstreamer"))
               (let ((scanner (add-extension "gst-plugin-scanner" (executable-extension kernel-platform))))
                 (file-exists? (tie "{dir}gstreamer/libexec/gstreamer-1.0/{scanner}"))))
          dir
        #f))
    
    ;; kind of a quick hack to try all those directories
    (or (try kernel-bundle-install)
        (try kernel-install)
        (error "Unable to find gstreamer")))
  
  (unless gstreamer-initialized?
    (let ((install-dir (determine-install)))
      (setenv "GST_REGISTRY"           (tie "{install-dir}gstreamer/registry.bin"))
      (setenv "GST_PLUGIN_SYSTEM_PATH" (tie "{install-dir}gstreamer/lib/gstreamer-1.0"))
      (setenv "GST_PLUGIN_SCANNER"     (tie "{install-dir}gstreamer/libexec/gstreamer-1.0/gst-plugin-scanner"))
      (setenv "GIO_EXTRA_MODULES"      (tie "{install-dir}gstreamer/lib/gio/modules")))
    (gst_init)
    (set! gstreamer-initialized? #t)))


(definition public (shutdown-gstreamer)
  (when gstreamer-initialized?
    (set! gstreamer-initialized? #f)))


;;;
;;;; Pipeline
;;;


(definition public (gst-launch . elements)
  (let ((description (gst-parse elements)))
    (gst_parse_launch description)))


(definition public (gst-parse elements)
  (define (parse elem)
    (cond ((not elem)
           elem)
          ((string? elem)
           (string-append " ! " elem))
          ((pair? elem)
           (string-append " " (parse-list elem)))
          (else
           (error "Unable to parse {s}" elem))))
  
  (define (parse-list elem)
    (let ((elem (remove-false elem)))
      (string-append (car elem)
        (apply string-append (map parse (cdr elem))))))
  
  (parse-list elements))


(definition public (pipeline-messages-processor pipeline (playing-proc: playing-proc #f) (print?: print? #f))
  (let ((name (gst_object_get_name pipeline))
        (bus (gst_pipeline_get_bus pipeline)))
    (lambda ()
      (let (loop)
        (let ((msg (gst_bus_pop bus)))
          (when msg
            (when (and playing-proc
                       (= (GST_MESSAGE_TYPE msg) GST_MESSAGE_STATE_CHANGED)
                       (= (gst_message_state_changed_get_new_state msg) GST_STATE_PLAYING)
                       (equal? (gst_object_get_name (GST_MESSAGE_SRC msg)) name))
              (playing-proc))
            (when print?
              (gst_print_message name msg))
            (let ((type (GST_MESSAGE_TYPE msg)))
              (ecase type
                ((GST_MESSAGE_ERROR)
                 (unless print?
                   (gst_print_message name msg)))
                ((GST_MESSAGE_WARNING)
                 (unless print?
                   (gst_print_message name msg)))))
            (gst_message_unref msg)
            (loop)))))))


(definition public (gst-element name . rest)
  (let ((port (open-output-string)))
    (display name port)
    (for-each-property (lambda (key value)
                         (when value
                           (format port " {a}={a}" (keyword->string key) value)))
                       rest)
    (get-output-string port)))


;;;
;;;; Caps
;;;


(definition public (gst_caps type . rest)
  (let ((caps (gst_caps_new_empty_simple type)))
    (for-each-property (lambda (name value)
                         (gst_caps_set_value caps name value))
                       rest)
    caps))


(definition public (gst-setup-source src type format width height framerate (stream-format: stream-format #f) (alignment: alignment #f))
  (gst_app_src_set_caps src
                        (apply gst_caps type
                          `("format"        ,(g_value_string format)
                            "width"         ,(g_value_int width)
                            "height"        ,(g_value_int height)
                            "framerate"     ,(g_value_fraction framerate 1)
                            ,@(if stream-format `("stream-format" ,(g_value_string "avc")) '())
                            ,@(if alignment `("alignment" ,(g_value_string "au")) '()))))
  (g_object_set src
                "is-live"     (g_value_boolean #t)
                "stream-type" (g_value_int GST_APP_STREAM_TYPE_STREAM)
                "format"      (g_value_int GST_FORMAT_TIME)))


;;;
;;;; Bin
;;;


(definition public (gst_bin_elements bin)
  (let ((it (gst_bin_iterate_elements bin))
        (queue (new-queue)))
    (let (loop)
      (let ((elem (gst_iterator_next_element it)))
        (if (not elem)
            (queue-list queue)
          (enqueue queue elem)
          (loop))))))


;;;
;;;; Element
;;;


(definition public (gst_element_pads elem)
  (let ((it (gst_element_iterate_pads elem))
        (queue (new-queue)))
    (let (loop)
      (let ((pad (gst_iterator_next_pad it)))
        (if (not pad)
            (queue-list queue)
          (enqueue queue pad)
          (loop))))))


(definition public (gst_element_release elem)
  (gst_element_set_state elem GST_STATE_NULL)
  (gst_object_unref elem))


(definition public (gst_monitor pipeline what . names)
  (for-each (lambda (name)
              (let ((elem (gst_bin_get_by_name pipeline name)))
                (if (not elem)
                    (error "Unable to find element {a}" name)
                  (for-each (lambda (pad)
                              (case what
                                ((data)
                                 (gst_monitor_data pipeline pad))
                                ((events)
                                 (gst_monitor_events pipeline pad))
                                ((all)
                                 (gst_monitor_data pipeline pad)
                                 (gst_monitor_events pipeline pad))))
                            (gst_element_pads elem)))))
            names))


;;;
;;;; AppSink
;;;


(definition public (gst_app_sink_signal_new_sample elem fifo)
  (gst_signal_new_sample elem (get-filename fifo)))


(definition public (gst_app_sink_read fifo elem vec info)
  (wait fifo)
  (gst_app_sink_try_pull elem vec info))


;;;
;;;; Fifo
;;;


(definition fifo-directory
  {Directory Settings "work" "fifos"})


(definition protected next-fifo-no <fx>
  0)

(definition protected (next-fifo-no!) <fx>
  (prog1 next-fifo-no
    (increase! next-fifo-no)))


(definition public (make-stream-fifo)
  (create-directories fifo-directory)
  (let (iterate (no (next-fifo-no!)))
    (let ((name (format "fifo{a}" no)))
      (let ((file (new-file fifo-directory name)))
        (if (exists? file)
            (iterate (+ no 1))
          (let ((filename (parse file)))
            (create-fifo filename)
            (new Stream-Fifo filename)))))))


(definition public (close-stream-fifo fifo)
  (close fifo))


(class Stream-Fifo extends Object
  
  
  (slot filename getter generate)
  (slot port     getter generate)
  
  
  (method override (initialize self filename)
    (nextmethod self)
    (set! self.filename filename)
    (set! self.port (open-input-file filename)))
  
  
  (method override (destroy self)
    @wait
    (close-port port)
    @wait
    (when (file-exists? filename)
      (delete-file filename))
    (nextmethod self))
  
  
  (method public (wait self)
    (read-char port))))
