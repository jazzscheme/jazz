;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Stream Product
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;    Frederic Hamel
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module jazz.stream.product jazz


(import (jazz.io))


(cond-expand
  (mac
   (definition custom-cc
      'llvm))
  (else))


;; cflags and libs obtained from the following calls inside the uninstalled shell
;; $ pkg-config --cflags gstreamer-1.0 gstreamer-app-1.0 gstreamer-pbutils-1.0
;; $ pkg-config --libs gstreamer-1.0 gstreamer-app-1.0 gstreamer-pbutils-1.0

(definition gstreamer-source
  (cond-expand
    ((or devel stable) (getenv "GST_SOURCE" #f))
    (else #f)))

(definition gstreamer-cflags
  (getenv "GST_SOURCE_CFLAGS" #f))

(definition gstreamer-libs
  (getenv "GST_SOURCE_LIBS" #f))

(definition gstreamer-rpaths
  (getenv "GST_SOURCE_RPATHS" #f))


(definition (stream-rpaths)
  (cond-expand
    (mac
     (and gstreamer-source
          (map (lambda (path)
                 (string-append gstreamer-source "/" path))
               (split gstreamer-rpaths ";"))))
    (else
     #f)))


;;;
;;;; Build
;;;


;; important so our glib and gstreamer log handlers
;; get all the frames from gst_debug_get_stack_trace
(define (add-no-omit-frame-pointer cc-flags)
  (string-append "-fno-omit-frame-pointer " cc-flags))


;; cc and ld flag relocated from the following calls
;; $ pkg-config --cflags gstreamer-1.0 gstreamer-app-1.0 gstreamer-pbutils-1.0
;; $ pkg-config --libs gstreamer-1.0 gstreamer-app-1.0 gstreamer-pbutils-1.0

(cond-expand
  (silicon
   (define (stream-flags)
     (if gstreamer-source
         (let ((cc-flags (string-append "-DG_LOG_DOMAIN=\"GStreamer\" " gstreamer-cflags))
               (ld-flags gstreamer-libs))
           (list (add-no-omit-frame-pointer (patch-mac-ld-warnings cc-flags)) ld-flags))
       (let ((gstreamer-include-path (quote-jazz-pathname "foreign/jazz.stream/silicon/gstreamer/include/gstreamer-1.0"))
             (glib-include-path      (quote-jazz-pathname "foreign/jazz.stream/silicon/gstreamer/include/glib-2.0"))
             (glib-lib-include-path  (quote-jazz-pathname "foreign/jazz.stream/silicon/gstreamer/lib/glib-2.0/include"))
             (gstreamer-lib-path     (quote-jazz-pathname "foreign/jazz.stream/silicon/gstreamer/lib")))
         (let ((cc-flags (string-append "-D_REENTRANT -DG_LOG_DOMAIN=\"GStreamer\" -fno-omit-frame-pointer -I" gstreamer-include-path " -I" glib-include-path " -I" glib-lib-include-path))
               (ld-flags (string-append "-L" gstreamer-lib-path " -lgstapp-1.0.0 -lgstaudio-1.0.0 -lgstbase-1.0.0 -lgstpbutils-1.0.0 -lgstreamer-1.0.0 -lgobject-2.0.0 -lglib-2.0.0 -lintl.8 -Wl,-framework -Wl,CoreFoundation")))
           (list (add-no-omit-frame-pointer (patch-mac-ld-warnings cc-flags)) ld-flags))))))
  (cocoa
   (define (stream-flags)
     (if gstreamer-source
         (let ((cc-flags (string-append "-DG_LOG_DOMAIN=\"GStreamer\" " gstreamer-cflags))
               (ld-flags gstreamer-libs))
           (list (add-no-omit-frame-pointer (patch-mac-ld-warnings cc-flags)) ld-flags))
       (let ((gstreamer-include-path (quote-jazz-pathname "foreign/jazz.stream/mac/gstreamer/include/gstreamer-1.0"))
             (glib-include-path      (quote-jazz-pathname "foreign/jazz.stream/mac/gstreamer/include/glib-2.0"))
             (glib-lib-include-path  (quote-jazz-pathname "foreign/jazz.stream/mac/gstreamer/lib/glib-2.0/include"))
             (gstreamer-lib-path     (quote-jazz-pathname "foreign/jazz.stream/mac/gstreamer/lib")))
         (let ((cc-flags (string-append "-D_REENTRANT -DG_LOG_DOMAIN=\"GStreamer\" -fno-omit-frame-pointer -I" gstreamer-include-path " -I" glib-include-path " -I" glib-lib-include-path))
               (ld-flags (string-append "-L" gstreamer-lib-path " -lgstapp-1.0.0 -lgstaudio-1.0.0 -lgstbase-1.0.0 -lgstpbutils-1.0.0 -lgstreamer-1.0.0 -lgobject-2.0.0 -lglib-2.0.0 -lintl.8 -Wl,-framework -Wl,CoreFoundation")))
           (list (add-no-omit-frame-pointer (patch-mac-ld-warnings cc-flags)) ld-flags))))))
  (windows
    (define (stream-flags)
      (let ((gstreamer-include-path (quote-jazz-pathname "foreign/jazz.stream/windows/gstreamer/include/gstreamer-1.0"))
            (glib-include-path      (quote-jazz-pathname "foreign/jazz.stream/windows/gstreamer/include/glib-2.0"))
            (glib-lib-include-path  (quote-jazz-pathname "foreign/jazz.stream/windows/gstreamer/lib/glib-2.0/include"))
            (gstreamer-lib-path     (quote-jazz-pathname "foreign/jazz.stream/windows/gstreamer/lib")))
        (let ((cc-flags (string-append "-D_REENTRANT -I" gstreamer-include-path " -I" glib-include-path " -I" glib-lib-include-path))
              (ld-flags (string-append "-L" gstreamer-lib-path " -lgstapp-1.0 -lgstaudio-1.0 -lgstbase-1.0 -lgstpbutils-1.0 -lgstvideo-1.0 -lgstreamer-1.0 -lgobject-2.0 -lglib-2.0 -lintl -lws2_32")))
          (list (add-no-omit-frame-pointer cc-flags) ld-flags)))))
  (else
   (define (stream-flags)
      (let ((gstreamer-include-path (quote-jazz-pathname "foreign/jazz.stream/linux/gstreamer/include/gstreamer-1.0"))
            (glib-include-path      (quote-jazz-pathname "foreign/jazz.stream/linux/gstreamer/include/glib-2.0"))
            (glib-lib-include-path  (quote-jazz-pathname "foreign/jazz.stream/linux/gstreamer/lib/glib-2.0/include"))
            (gstreamer-lib-path     (quote-jazz-pathname "foreign/jazz.stream/linux/gstreamer/lib")))
        (let ((cc-flags (string-append "-D_REENTRANT -I" gstreamer-include-path " -I" glib-include-path " -I" glib-lib-include-path))
              (ld-flags (string-append "-Wl,-rpath,$ORIGIN/../../../../..:$ORIGIN/../../../../../gstreamer/lib" " -L" gstreamer-lib-path " -lgstapp-1.0 -lgstaudio-1.0 -lgstbase-1.0 -lgstpbutils-1.0 -lgstreamer-1.0 -lgobject-2.0 -lglib-2.0")))
          (list (add-no-omit-frame-pointer cc-flags) ld-flags))))))


(define (stream-units)
  (bind (cc-flags ld-flags) (stream-flags)
    (append
      `((jazz.stream.header cc-options: ,cc-flags)
        (jazz.stream.foreign cc-options: ,cc-flags ld-options: ,ld-flags rpaths: ,(stream-rpaths)))
      (cond-expand
        (mac
         (let ((cc-flags cc-flags)
               (ld-flags (string-append ld-flags " -framework VideoToolbox")))
           `((jazz.stream.platform.mac cc-options: ,cc-flags ld-options: ,ld-flags custom-cc: ,custom-cc output-language: objc))))
        (else
         '())))))


(cond-expand
  (silicon
   (define (copy-platform-files)
     (let ((src-dir {Directory Jazz "foreign" "jazz.stream" "silicon" "gstreamer"})
           (dst-dir {Directory Libraries "gstreamer"}))
       (define (install-dirname path (src #f) (dst #f))
         (let ((src (new-directory src-dir (or src path)))
               (dst (new-directory dst-dir (or dst path))))
           (install-directory src dst
             feedback: (lambda (action pathname)
                         (build-feedback "; {a} {a}..." action (get-name pathname))))))
       
       (initialize-aliases)
       (install-dirname "bin")
       (install-dirname "lib"))))
  (cocoa
   (define (copy-platform-files)
     (let ((src-dir {Directory Jazz "foreign" "jazz.stream" "mac" "gstreamer"})
           (dst-dir {Directory Libraries "gstreamer"}))
       (define (install-dirname path (src #f) (dst #f))
         (let ((src (new-directory src-dir (or src path)))
               (dst (new-directory dst-dir (or dst path))))
           (install-directory src dst
             feedback: (lambda (action pathname)
                         (build-feedback "; {a} {a}..." action (get-name pathname))))))
       
       (initialize-aliases)
       (install-dirname "bin")
       (install-dirname "lib"))))
  (windows
   (define (copy-platform-files)
     (let ((src-dir {Directory Jazz "foreign" "jazz.stream" "windows" "gstreamer"})
           (dst-dir {Directory Build "gstreamer"}))
       (define (install-dirname path (src #f) (dst #f))
         (let ((src (new-directory src-dir (or src path)))
               (dst (new-directory dst-dir (or dst path))))
           (install-directory src dst
             filter: (lambda (action pathname)
                       (not (extension=? (get-extension pathname) "a")))
             feedback: (lambda (action pathname)
                         (build-feedback "; {a} {a}..." action (get-name pathname))))))
       
       (initialize-aliases)
       (iterate-directory (new-directory src-dir "bin")
         (lambda (file)
           (let ((name (get-name file)))
             (install-file file (new-file {Directory Build} name)
               feedback: (lambda (action pathname)
                           (build-feedback "; {a} {a}..." action name)))))
         files?: #t
         directories?: #f
         recursive?: #f)
       (install-dirname "lib"))))
  (else
   (define (copy-platform-files)
     (let ((src-dir {Directory Jazz "foreign" "jazz.stream" "linux" "gstreamer"})
           (dst-dir {Directory Build "gstreamer"}))
       (define (install-dirname path (src #f) (dst #f))
         (let ((src (new-directory src-dir (or src path)))
               (dst (new-directory dst-dir (or dst path))))
           (install-directory src dst
             filter: (lambda (action pathname)
                       (not (and (file? pathname)
                                 (symbolic-link? pathname))))
             feedback: (lambda (action pathname)
                         (build-feedback "; {a} {a}..." action (get-name pathname))))))
       
       (initialize-aliases)
       (install-dirname "lib")))))


(define (build-stream descriptor #!key (unit #f) (skip-references? #f) (force? #f))
  (let ((unit-specs (stream-units)))
    (custom-compile/build unit-specs unit: unit pre-build: copy-platform-files force?: force?)
    (if (or (not unit) (not (assq unit unit-specs)))
        (build-product-descriptor descriptor))))


(define (stream-library-options descriptor add-language)
  (cond-expand
    (silicon
     (let ((gstreamer-lib-path (quote-jazz-pathname "foreign/jazz.stream/silicon/gstreamer/lib")))
       (string-append "-L" gstreamer-lib-path " -lgstapp-1.0.0 -lgstaudio-1.0.0 -lgstbase-1.0.0 -lgstpbutils-1.0.0 -lgstreamer-1.0.0 -lgobject-2.0.0 -lglib-2.0.0 -lintl.8 -Wl,-framework -Wl,CoreFoundation")))
    (cocoa
     (let ((gstreamer-lib-path (quote-jazz-pathname "foreign/jazz.stream/mac/gstreamer/lib")))
       (string-append "-L" gstreamer-lib-path " -lgstapp-1.0.0 -lgstaudio-1.0.0 -lgstbase-1.0.0 -lgstpbutils-1.0.0 -lgstreamer-1.0.0 -lgobject-2.0.0 -lglib-2.0.0 -lintl.8 -Wl,-framework -Wl,CoreFoundation")))
    (windows
     (let ((gstreamer-lib-path (quote-jazz-pathname "foreign/jazz.stream/windows/gstreamer/lib")))
       (string-append "-L" gstreamer-lib-path " -lgstapp-1.0 -lgstaudio-1.0 -lgstbase-1.0 -lgstpbutils-1.0 -lgstreamer-1.0 -lgobject-2.0 -lglib-2.0 -lintl.8 -Wl,-framework -Wl,CoreFoundation")))
    (else
     (let ((gstreamer-lib-path (quote-jazz-pathname "foreign/jazz.stream/linux/gstreamer/lib")))
       (string-append "-L" gstreamer-lib-path " -lgstapp-1.0 -lgstaudio-1.0 -lgstbase-1.0 -lgstpbutils-1.0 -lgstreamer-1.0 -lgobject-2.0 -lglib-2.0")))))


;;;
;;;; Register
;;;


(register-product 'jazz.stream
  title: "Stream"
  build: build-stream
  library-options: stream-library-options))
