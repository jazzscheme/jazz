;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; GStreamer
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module jazz.stream.setup jazz


(import (jazz.io)
        (jazz.stream.directories))


;; augment to force refresh of the registry cache
(definition registry-version
  1)

(definition (maybe-refresh-registry-cache registry-path version-path)
  (let ((registry-file (new File (tokenise-filename registry-path)))
        (version-file (new File (tokenise-filename version-path))))
    (define (load-version)
      (if (not (exists? version-file))
          #f
        (call-with-input-file (path-settings version-file)
          (lambda (port)
            (catch-exception-filter
              (lambda (exc)
                #t)
              (lambda (exc)
                #f)
              (lambda ()
                (read port)))))))
    
    (define (save-version)
      (call-with-output-file (path-settings version-file)
        (lambda (port)
          (write registry-version port))))
    
    (let ((version (load-version)))
      (when (not (equal? version registry-version))
        (delete registry-file error?: #f)
        (save-version)))))


;; TO RUN FROM SOURCE
;; - uncomment GST_SOURCE in .profilerc
;; - recompile jazz.stream.foreign


(definition public (setup-gstreamer)
  (unless (getenv "GST_DEBUG" #f)
    (setenv "GST_DEBUG" "2"))
  (if (cond-expand
        ((or devel stable) (getenv "GST_SOURCE" #f))
        (else #f))
      (begin
        (setenv "GST_REGISTRY" (getenv "GST_SOURCE_REGISTRY"))
        (setenv "GST_PLUGIN_SYSTEM_PATH" "")
        (setenv "GST_PLUGIN_PATH" (getenv "GST_SOURCE_PLUGIN_PATH")))
    (let ((gstreamer-dir (gstreamer-dir)))
      (let ((registry-path (tie "{gstreamer-dir}registry.bin"))
            (version-path (tie "{gstreamer-dir}version")))
        (maybe-refresh-registry-cache registry-path version-path)
        (setenv "GST_REGISTRY" registry-path)
        (setenv "GST_PLUGIN_SYSTEM_PATH" (tie "{gstreamer-dir}lib/gstreamer-1.0"))))))

(setup-gstreamer))
