;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; GStreamer
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.stream.setup jazz


(import (jazz.syntax (phase syntax)))


;; TO RUN FROM SOURCE
;; - uncomment GST_SOURCE in .profilerc
;; - recompile jazz.stream.foreign


(definition public (setup-gstreamer)
  (define (determine-install)
    (define (try dir)
      (if (and dir
               (file-exists? (tie "{dir}gstreamer"))
               (let ((scanner (add-extension "gst-plugin-scanner" (executable-extension kernel-platform))))
                 (file-exists? (tie "{dir}gstreamer/libexec/gstreamer-1.0/{scanner}"))))
          dir
        #f))
    
    (or (cond-expand
          (mac
           (or (and kernel-bundle-install (try (string-append kernel-bundle-install "Libraries/")))
               (and kernel-bundle-contents (try (string-append kernel-bundle-contents "Libraries/")))
               (try (string-append kernel-install "Libraries/"))))
          (else
           (or (try kernel-bundle-install)
               (try kernel-install))))
        (error "Unable to find gstreamer")))
  
  (cond-expand
    (devel (setenv "GST_DEBUG_DUMP_DOT_DIR" (path-normalize (current-directory))))
    (else))
  
  (if (cond-expand
        (devel (getenv "GST_SOURCE" #f))
        (else #f))
      (begin
        (setenv "GST_REGISTRY" (getenv "GST_SOURCE_REGISTRY"))
        (setenv "GST_PLUGIN_SYSTEM_PATH" (getenv "GST_SOURCE_PLUGIN_SYSTEM_PATH"))
        (setenv "GST_PLUGIN_PATH" (getenv "GST_SOURCE_PLUGIN_PATH"))
        (setenv "GST_PLUGIN_SCANNER" (getenv "GST_SOURCE_PLUGIN_SCANNER")))
    (let ((install-dir (determine-install)))
      (setenv "GST_REGISTRY"           (tie "{install-dir}gstreamer/registry.bin"))
      (setenv "GST_PLUGIN_SYSTEM_PATH" (tie "{install-dir}gstreamer/lib/gstreamer-1.0"))
      (setenv "GST_PLUGIN_SCANNER"     (tie "{install-dir}gstreamer/libexec/gstreamer-1.0/gst-plugin-scanner"))
      (setenv "GIO_EXTRA_MODULES"      (tie "{install-dir}gstreamer/lib/gio/modules")))))

(setup-gstreamer))
