;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Stream Syntax
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module jazz.stream.syntax jazz


;;;
;;;; External
;;;


(definition tracable?
  #t)


(macro public (gst-external signature . rest)
  (if (not tracable?)
      `(c-external ,signature ,@rest)
    (let* ((s-name (car signature))
           (params (cdr signature))
           (untraced-name (string->symbol (string-append (symbol->string s-name) "$untraced"))))
      `(begin
         (c-external (,s-name ,@params) ,@rest)
         (definition ,untraced-name ,s-name)
         (set! ,s-name (lambda rest
                         (when (trace-gst?)
                           ((trace-gst) ',s-name rest))
                         (apply ,untraced-name rest)))))))


;;;
;;;; Pipeline
;;;


(syntax public gst-pipeline2
  (lambda (form-src usage-environment macro-environment)
    (let ((elements (cdr (source-code form-src))))
      (sourcify-deep-if
        `(let ()
           (define (element . rest)
             (apply gst-element rest))
           
           (define (adder . rest)
             (apply gst-element "adder" rest))
           
           (define (appsrc . rest)
             (apply gst-element "appsrc" rest))
           
           (define (appsink . rest)
             (apply gst-element "appsink" rest))
           
           (define (audioconvert . rest)
             (apply gst-element "audioconvert" rest))
           
           (define (audiosink . rest)
             (let ((name (cond-expand
                           (windows "directsoundsink")
                           (mac "osxaudiosink")
                           (else "pulsesink"))))
               (apply gst-element name rest)))
           
           (define (audiotestsrc . rest)
             (apply gst-element "audiotestsrc" rest))
           
           (define (queue . rest)
             (apply gst-element "queue" rest))
           
           (define (vorbisenc . rest)
             (apply gst-element "vorbisenc" rest))
           
           (define (webrtcechoprobe . rest)
             (apply gst-element "webrtcechoprobe" rest))
          
           (gst-pipeline ,@elements))
        form-src))))


;;;
;;;; Unref
;;;


(define (expand-with-unref bindings body)
  `(let ,bindings
     (prog1 (let ()
              ,@(if (null? body)
                    '((unspecified))
                  body))
       ,@(map (lambda (binding)
                (let ((variable (car (source-code binding))))
                  `(gst_object_unref ,variable)))
              bindings))))


(syntax public with-unref
  (lambda (form-src usage-environment macro-environment)
    (let ((bindings (source-code (cadr (source-code form-src))))
          (body (cddr (source-code form-src))))
      (sourcify-deep-if
        (expand-with-unref bindings body)
        form-src)))))
