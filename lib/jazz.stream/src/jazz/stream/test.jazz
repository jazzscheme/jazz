;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Stream Test
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


;; gst-launch --gst-debug-help
;; - these can be applied to individual elements in the pipeline
;; GST_DEBUG=2 cache/release/jazz -run stream
;; G_DEBUG=fatal-criticals ...
;; G_DEBUG=fatal-warnings ...
;; G_DEBUG=fatal-criticals gdb -ex run --args ./test arg1 arg2 ...
;; GST_TRACERS="leaks" GST_DEBUG="GST_TRACER:7"
;; GST_DEBUG_DUMP_DOT_DIR=. ...
;;   if used in an application by calling gst_debug_bin_to_dot_file
;;   for some reason it only works if the path is an absolute path


(module jazz.stream.test jazz


(import (jazz.application)
        (jazz.cairo)
        (jazz.foreign)
        (jazz.geometry)
        (jazz.graphic)
        (jazz.io)
        (jazz.jpeg)
        (jazz.listener)
        (jazz.markup)
        (jazz.platform)
        (jazz.process)
        (jazz.screen)
        (jazz.settings)
        (jazz.stream)
        (jazz.stream.syntax (phase syntax))
        (jazz.syntax (phase syntax))
        (jazz.ui)
        (jazz.view)
        (jazz.window)
        (jazz.workspace))


(startup-gstreamer)

(set-application-retina? #f)

(initialize-aliases)


;; none
;; mic
;; echo
;; clock
;; camera
;; screen
;; app
;; ogg
;; wav
;; jpeg
;; media
;; leak
;; gambit
;; version
(definition script
  'app)

(definition audio?
  #f)

;; none     no codec used
;; opus     working
;; vorbis   working
;; flac     is it an old codec?
(definition audio-codec
  'vorbis)

(definition video?
  #f)

;; 1080 1920x1080
;; 720  1280x720
;; 540  960x540
;; 360  640x360
;; 180  320x180
(definition video-size
  {Dimension 1280 720})

;; none     no codec used
;; h265     *** cannot find the encoder but should definitely be considered ***
;; h264     *** the best one at the moment and is probably faster than h265 ***
;; h263     doesn't link
;; flv      really blocky.
;; mpeg4    also blocky
;; mpeg2    blocky and slow
;; mpeg1    blocky and slow
;; vp9      much too slow
;; vp8      too slow but faster than vp9
;; theora   cannot find the elements
(definition video-codec
  'h264)

(definition video-framerate
  (cond-expand
    (linux 25)
    (else 30)))

(definition video-bitrate
  2048)

(definition window-size
  #f)

(definition media
  #f)

(definition spawn
  #f)

(definition period
  #f)

(definition lag
  #f)

(definition fps?
  #f)

(definition info?
  #f)

(definition debug?
  #f)

(definition trace?
  #f)

(definition graph?
  #f)

(definition mode?
  #f)

(definition latency?
  #f)

(definition caps?
  #f)

(definition queue?
  #f)

(definition clock?
  #f)

(definition threads?
  #f)

(definition monitor
  #f)

(definition remaining
  #f)


(jazz:split-command-line (command-arguments) '("fps" "info" "debug" "trace" "graph" "mode" "latency" "caps" "queue" "clock" "threads") '("d" "debugger" "r" "run" "s" "script" "audio" "audio-codec" "video" "size" "codec" "framerate" "bitrate" "window" "media" "spawn" "period" "lag" "monitor") #f
  (lambda (commands options remain)
    (define (string-argument arg)
      arg)
    
    (define (boolean-argument arg)
      (if (string? arg)
          (parse-boolean arg)
        arg))
    
    (define (number-argument arg)
      (if (string? arg)
          (string->number arg)
        arg))
    
    (define (symbol-argument arg)
      (if (string? arg)
          (string->symbol arg)
        arg))
    
    (define (size-argument arg)
      (case (number-argument arg)
        ((1080) {Dimension 1920 1080})
        ((720) {Dimension 1280 720})
        ((540) {Dimension 960 540})
        ((360) {Dimension 640 360})
        ((180) {Dimension 320 180})
        ;; custom
        ((480) {Dimension 640 480})
        (else #f)))
    
    @w
    (when (not-null? remain)
      (format :terminal "Unknown options: {l}{%}" remain))
    
    (set! script (or (symbol-argument (or (find-option "s" options) (find-option "script" options))) script))
    (set! audio? (boolean-argument (find-option "audio" options #f)))
    (set! audio-codec (or (symbol-argument (find-option "audio-codec" options)) audio-codec))
    (set! video? (boolean-argument (find-option "video" options #t)))
    (set! video-size (or (size-argument (find-option "size" options)) video-size))
    (set! video-codec (or (symbol-argument (find-option "codec" options)) video-codec))
    (set! video-framerate (or (number-argument (find-option "framerate" options)) video-framerate))
    (set! video-bitrate (or (number-argument (find-option "bitrate" options)) video-bitrate))
    (set! window-size (or (size-argument (find-option "window" options)) video-size))
    (set! media (string-argument (find-option "media" options)))
    (set! spawn (number-argument (find-option "spawn" options)))
    (set! period (number-argument (find-option "period" options)))
    (set! lag (number-argument (find-option "lag" options)))
    (set! fps? (find-option "fps" options #f))
    (set! info? (find-option "info" options #f))
    (set! debug? (find-option "debug" options #f))
    (set! trace? (find-option "trace" options #f))
    (set! graph? (find-option "graph" options #f))
    (set! mode? (find-option "mode" options #f))
    (set! latency? (find-option "latency" options #f))
    (set! caps? (find-option "caps" options #f))
    (set! queue? (find-option "queue" options #f))
    (set! clock? (find-option "clock" options #f))
    (set! threads? (find-option "threads" options #f))
    (set! monitor (or (symbol-argument (find-option "monitor" options)) monitor))
    (set! remaining remain)))


@comment
(debug script audio audio-codec video video-size video-codec video-framerate video-bitrate window-size lag fps? info? debug? remaining)


(definition public (test-gstreamer)
  (case script
    ((none))
    ((rate) (test-rate))
    ((mic) (test-microphone))
    ((gc0) (test-gc0))
    ((gc1) (test-gc1))
    ((amazing) (test-amazing))
    ((audio0) (test-audio0))
    ((audio1) (test-audio1))
    ((audio2) (test-audio2))
    ((audio3) (test-audio3))
    ((audio4) (test-audio4))
    ((audio5) (test-audio5))
    ((audio6) (test-audio6))
    ((audio7) (test-audio7))
    ((audio8) (test-audio8))
    ((audio9) (test-audio9))
    ((audioa) (test-audioa))
    ((audiob) (test-audiob))
    ((audioc) (test-audioc))
    ((audiog) (test-audiog))
    ((audioh) (test-audioh))
    ((audiol) (test-audiol))
    ((audiox) (test-audiox))
    ((echo) (test-echo))
    ((audiot) (test-audiot))
    ((camera) (test-camera))
    ((screen) (test-screen))
    ((draw) (test-draw))
    ((app) (test-app))
    ((ogg) (test-ogg))
    ((wav) (test-wav))
    ((jpeg) (test-jpeg))
    ((media) (test-media))
    ((leak) (test-leak))
    ((leak2) (test-leak2))
    ((leakt) (test-leakt))
    ((gambit) (test-gambit))
    ((version) (test-version))
    ((registry) (test-registry))
    ((discover) (test-discover))
    ((fonts) (test-fonts))
    (else (error "Unknown script: {a}" script))))


;;;
;;;; Rate
;;;


(definition public (test-rate)
  (let ((count 12))
    (let ((pipeline (gst-pipeline "avfvideosrc name=src"
                                  "video/x-raw,width=1280,height=720,framerate=30/1"
                                  "queue name=queue"
                                  "tee name=tee"
                                  (map (lambda (n)
                                         (let ((name (tie "queue{n}")))
                                           (list
                                             "tee."
                                             (tie "queue name={name}")
                                             "x264enc tune=zerolatency speed-preset=superfast bitrate=2048"
                                             "appsink sync=false async=false")))
                                       (naturals 0 count))))
          (probe #f))
      (gst_object_set_name pipeline "rate")
      (with-unref ((src (gst_bin_get_by_name pipeline "src")))
        (with-unref ((pad (gst_element_get_static_pad src "src")))
          (set! probe (gst_pad_add_rate_probe pad 30 #t))))
      (for-each (lambda (n)
                  (with-unref ((queue (gst_bin_get_by_name pipeline (tie "queue{n}"))))
                    (with-unref ((pad (gst_element_get_static_pad queue "sink")))
                      (let ((rate 0))
                        (gst_pad_add_rate_probe pad rate #f)))))
                (naturals 0 count))
      (gst_element_set_state pipeline GST_STATE_PLAYING)))
  ;; application
  (boot-environment (new Test-Application)))


;;;
;;;; Microphone
;;;


(definition public (test-microphone)
  ;; audio
  (thread-start!
    (new-thread
      (lambda ()
        (let ((codec audio-codec))
          (let ((pipeline (gst-pipeline "autoaudiosrc name=src"
                                        (and (eq? codec 'opus) (tie "opusenc name=enc"))
                                        (and (eq? codec 'vorbis) (tie "vorbisenc name=enc"))
                                        (and (eq? codec 'flac) (tie "flacenc name=enc"))
                                        (and (neq? codec 'none) "identity name=identity")
                                        (and (eq? codec 'opus) "opusdec name=dec")
                                        (and (eq? codec 'vorbis) "vorbisdec name=dec")
                                        (and (eq? codec 'flac) "flacdec name=dec")
                                        (gst-element audiosink
                                                     buffer-time: "200000"
                                                     name: "sink"))))
            (gst_object_set_name pipeline "pipeline")
            (let ((process-messages (pipeline-messages-processor pipeline print?: debug?)))
              (when monitor
                (gst_monitor pipeline "sink" monitor))
              (gst_element_set_state pipeline GST_STATE_PLAYING)
              (let (loop)
                (process-messages)
                (sleep .001)
                (loop))))))
      'audio))
  ;; application
  (boot-environment (new Test-Application)))


;;;
;;;; Audio
;;;


(definition protected (media-path name)
  (cond-expand
    (windows (string-append "C:\\\\home\\\\Media\\\\" name))
    (else (path-normalize (string-append "~/Media/" name)))))


(definition aretha
  (media-path "aretha.ogg"))

(definition koln
  (media-path "koln.ogg"))

(definition lone
  (media-path "lone.ogg"))

(definition lonesome
  (media-path "lonesome.ogg"))

(definition web
  (media-path "web.ogg"))

(definition male
  (media-path "m1.ogg"))

(definition tone
  (media-path "tone.ogg"))


(definition audio-location
  aretha)


(definition (generate-graph pipeline name)
  ;; wait for preroll to go to playing
  (sleep .5)
  (gst_debug_bin_to_dot_file pipeline GST_DEBUG_GRAPH_SHOW_ALL name))


(definition (report-clock pipeline)
  (define (report elem)
    (format :terminal "{a} {a} {a}{%}"
      (gst_element_path elem)
      (g_object_class_name elem)
      (gst_object_get_name (gst_element_get_clock elem))))
  
  ;; wait for preroll to go to playing
  (sleep .5)
  (report pipeline)
  (with-unref ((elements (gst_bin_elements_recurse pipeline)))
    (for-each report (reverse elements))))


(definition (report-threads)
  (cond-expand
    (mac
     (let ()
       (define (cpu-percentage threads)
         (bind (main . others) (map second threads)
           (values main (apply + others))))
       
       (thread-start!
         (new-thread
           (lambda ()
             (let (loop)
               (let ((threads (current-process-threads)))
                 (when threads
                   (receive (main others) (cpu-percentage threads)
                     (let ((total (+ main others)))
                       (format :terminal "Total: {r precision: 1 width: 4 justify: :right},   Main: {r precision: 1 width: 4 justify: :right},   Others: {r precision: 1 width: 4 justify: :right}" (* total 100.) (* main 100.) (* others 100.))
                       (for-each (lambda (thread)
                                   (bind (id fullname percentage) thread
                                     (when (and fullname (find fullname #\:))
                                       (bind (name pad) (split-string fullname #\:)
                                         (let ((bin (find-streaming-bin id name pad)))
                                           (when bin
                                             (let ((bin-name (gst_object_get_name bin)))
                                               (format :terminal ",   {a}.{a}.{a}: {r precision: 1 width: 4 justify: :right}%" bin-name element pad (* percentage 100.)))))))))
                                 threads)))))
               (newline)
               (sleep 1)
               (loop)))
           'report))))
    (else)))


(definition protected (report-info pipeline name)
  (when graph?
    (generate-graph pipeline name))
  (when mode?
    (report-mode pipeline))
  (when latency?
    (report-latency pipeline))
  (when caps?
    (report-caps pipeline))
  (when clock?
    (report-clock pipeline))
  (when threads?
    (report-threads)))


(definition protected (wait-audioclock pipeline sink-name)
  (with-unref ((sink (gst_bin_get_by_name pipeline sink-name)))
    (let (loop (n 0))
      (when (< n 100)
        (when (not (gst_audio_ring_buffer_acquired sink))
          (sleep .01)
          (loop (+ n 1))))))
  (with-unref ((clock (gst_pipeline_get_clock pipeline)))
    (let ((clock-name (gst_object_get_name clock)))
      (unless (equal? clock-name (cond-expand
                                   (linux "GstPulseSinkClock")
                                   (else "GstAudioSinkClock")))
        (terminal 'COULD 'NOT 'GET 'AN 'AUDIO 'CLOCK)
        (exit)))))


(definition protected (wait-vorbiscaps sink)
  (with-unref ((pad (gst_element_get_static_pad sink "sink")))
    ;; wait for data to flow
    (let (loop (n 0))
      (if (> n 100)
          (begin
            (terminal 'COULD 'NOT 'GET 'MICROPHONE 'CAPS)
            (exit))
        (let ((caps (gst_pad_get_current_caps pad)))
          (if (not caps)
              (begin
                ;; need to figure this out but change
                ;; to .1 for now to wait up to 10s...
                (sleep .1)
                (loop (+ n 1)))
            (let ((caps-string (gst_caps_to_string caps)))
              (gst_caps_unref caps)
              caps-string)))))))


;; garbage collect impact base test
(definition public (test-gc0)
  (define huge
    (make-vector 120000000))
  
  (let ((audio (gst-pipeline (tie "filesrc location={audio-location}")
                             "queue min-threshold-time=1000000000 name=queue"
                             "oggdemux"
                             "vorbisdec"
                             "audioconvert"
                             "audioresample"
                             "audiomixer"
                             audiosink)))
    (define (keyer view key)
      (case key
        ((#\g)
         (terminal 'gc)
         (gc))))
    
    (define (closer app)
      (gst_element_release audio))
    
    (thread-start!
      (new-thread
        (lambda ()
          (gst_object_set_name audio "audio")
          (gst_element_set_state audio GST_STATE_PLAYING)
          (report-info audio "gc0"))
        'audio))
    ;; application
    (boot-environment (new Test-Application keyer: keyer closer: closer))))


;; garbage collect impact with appsrc
(definition public (test-gc1)
  (define huge
    (make-vector 120000000))
  
  (define MAX_DELAY   500000000)
  (define SMALL_DELAY 10000000)
  (define DELAY       100000000)
  
  ;; rtspsrc location=<...> ! rtph264depay ! queue max-size-buffers=0 max-size-bytes=0 max-size-time=$MAX_DELAY ! queue max-size-time=$SMALL_DELAY min-threshold-time=$DELAY ! decodebin ! autovideosink
  (let ((input (gst-pipeline (tie "filesrc location={audio-location}")
                             "oggdemux"
                             "appsink sync=false name=sink"))
        (audio (gst-pipeline "appsrc name=src"
                             ;(tie "queue max-size-buffers=0 max-size-bytes=0 max-size-time={MAX_DELAY}")
                             ;(tie "queue max-size-time={SMALL_DELAY} min-threshold-time={DELAY}")
                             "queue min-threshold-buffers=200 name=queue"
                             "vorbisdec name=dec"
                             ;"audiomixer latency=10000000 output-buffer-duration=10000000"
                             "queue name=queue2"
                             (gst-element audiosink name: "sink"))))
    (define (keyer view key)
      (case key
        ((#\g)
         (terminal 'gc)
         (gc))))
    
    (define (closer app)
      (gst_element_release input)
      (gst_element_release audio))
    
    (with-unref ((input-sink (gst_bin_get_by_name input "sink"))
                 (audio-src (gst_bin_get_by_name audio "src")))
      (gst-app-src-set-caps audio-src "audio/x-vorbis")
      (g-object-set audio-src
                    "is-live"     'boolean #t
                    "stream-type" 'int     GST_APP_STREAM_TYPE_STREAM
                    "format"      'int     GST_FORMAT_TIME)
      (let ((input-listener (open-stream-listener))
            (input-buffer (make-u8vector 65536))
            (input-info (make-u64vector app-sink-info-size)))
        (gst_app_sink_connect_signals input-sink input-listener)
        (let ((input-thread
                (new-thread
                  (lambda ()
                    (let ((adapter (new Source-Coupler)))
                      (let (loop)
                        (let ((size (gst_app_sink_read_frame input-listener input-sink input-buffer input-info)))
                          (when size
                            (let ((dts (u64vector-ref input-info 0))
                                  (pts (u64vector-ref input-info 1))
                                  (duration (u64vector-ref input-info 2)))
                              (if (= pts GST_CLOCK_TIME_NONE)
                                  (gst_app_src_write audio-src input-buffer size dts pts duration)
                                (let ((timestamp-offset (adapt-time adapter audio-src pts)))
                                  (let ((dts (+ dts 740000000 timestamp-offset))
                                        (pts (+ pts 740000000 timestamp-offset)))
                                    (gst_app_src_write audio-src input-buffer size dts pts duration)))))))
                        (loop))))
                  'input)))
          (when queue?
            (thread-start!
              (new-thread
                (lambda ()
                  (with-unref ((appsrc (gst_bin_get_by_name audio "src"))
                               (queue (gst_bin_get_by_name audio "queue")))
                    (let (loop)
                      (terminal (g_object_get_uint64 appsrc "current-level-bytes")
                                (g_object_get_uint64 queue "current-level-buffers")
                                (g_object_get_uint64 queue "current-level-bytes"))
                      (sleep .1)
                      (loop))))
                'debug)))
          (thread-start!
            (new-thread
              (lambda ()
                (gst_object_set_name input "input")
                (gst_object_set_name audio "audio")
                (gst_element_set_state input GST_STATE_PLAYING)
                (gst_element_set_state audio GST_STATE_PLAYING)
                (gst_monitor input "sink.sink" 'data audio)
                (thread-start! input-thread)
                (report-info input "input")
                (report-info audio "gc1"))
              'audio)))))
    ;; application
    (boot-environment (new Test-Application keyer: keyer closer: closer))))


;; amazing audio quality
(definition public (test-amazing)
  (let ((input (gst-pipeline (tie "filesrc location={lonesome}")
                             "oggdemux"
                             "appsink sync=false name=sink"))
        (audio (gst-pipeline "appsrc name=src"
                             "vorbisdec"
                             "audiomixer latency=10000000 output-buffer-duration=10000000"
                             "queue name=queue"
                             audiosink))
        @alternate-amazing-audio
        (audio (gst-pipeline "appsrc name=src"
                             "queue name=queue"
                             "vorbisdec"
                             audiosink))
        @alternate-amazing-audio
        (audio (gst-pipeline "appsrc name=src"
                             "queue name=queue"
                             "vorbisdec"
                             "audiomixer latency=10000000 output-buffer-duration=10000000"
                             "queue"
                             audiosink)))
    (define (closer app)
      (gst_element_release input)
      (gst_element_release audio))
    
    (with-unref ((input-sink (gst_bin_get_by_name input "sink"))
                 (audio-src (gst_bin_get_by_name audio "src")))
      (gst-app-src-set-caps audio-src "audio/x-vorbis")
      (g-object-set audio-src
                    "is-live"     'boolean #t
                    "stream-type" 'int     GST_APP_STREAM_TYPE_STREAM
                    "format"      'int     GST_FORMAT_TIME)
      (let ((input-listener (open-stream-listener))
            (input-buffer (make-u8vector 65536))
            (input-info (make-u64vector app-sink-info-size)))
        (gst_app_sink_connect_signals input-sink input-listener)
        (let ((input-thread
                (new-thread
                  (lambda ()
                    (let ((adapter (new Source-Coupler)))
                      (let (loop)
                        (let ((size (gst_app_sink_read_frame input-listener input-sink input-buffer input-info)))
                          (when size
                            (let ((dts (u64vector-ref input-info 0))
                                  (pts (u64vector-ref input-info 1))
                                  (duration (u64vector-ref input-info 2)))
                              (if (= pts GST_CLOCK_TIME_NONE)
                                  (gst_app_src_write audio-src input-buffer size dts pts duration)
                                (let ((timestamp-offset (adapt-time adapter audio-src pts)))
                                  (let ((dts (+ dts timestamp-offset))
                                        (pts (+ pts timestamp-offset)))
                                    (gst_app_src_write audio-src input-buffer size dts pts duration)))))))
                        (loop))))
                  'input)))
          (when queue?
            (thread-start!
              (new-thread
                (lambda ()
                  (with-unref ((appsrc (gst_bin_get_by_name audio "src"))
                               (queue (gst_bin_get_by_name audio "queue")))
                    (let (loop)
                      (terminal (g_object_get_uint64 appsrc "current-level-bytes")
                                (g_object_get_uint64 queue "current-level-buffers")
                                (g_object_get_uint64 queue "current-level-bytes"))
                      (sleep .1)
                      (loop))))
                'debug)))
          (thread-start!
            (new-thread
              (lambda ()
                (gst_object_set_name input "input")
                (gst_object_set_name audio "audio")
                (gst_element_set_state input GST_STATE_PLAYING)
                (gst_element_set_state audio GST_STATE_PLAYING)
                (thread-start! input-thread)
                (report-info input "input")
                (report-info audio "amazing"))
              'audio)))))
    ;; application
    (boot-environment (new Test-Application closer: closer))))


;; base reference for gstreamer warnings
(definition public (test-audio0)
  (define description
    (tie
    #<<description-end
        filesrc location={audio-location} !
        oggdemux !
        vorbisdec !
        audioconvert !
        audioresample !
        {audiosink}
        
        {audiosrc} provide-clock=false !
        audioconvert !
        audioresample !
        audio/x-raw, format=F32LE, layout=interleaved, rate=48000, channels=2 !
        vorbisenc !
        oggmux !
        filesink location=audio0.ogg
description-end
))
  
  (let ((pipeline (gst_parse_launch description)))
    (define (closer app)
      (gst_element_release pipeline))
    
    (thread-start!
      (new-thread
        (lambda ()
          (gst_element_set_state pipeline GST_STATE_PLAYING)
          (report-info pipeline "audio0"))
        'audio))
    ;; application
    (boot-environment (new Test-Application closer: closer))))


;; direct gstreamer pipeline echo cancellation
(definition public (test-audio1)
  (define description
    (tie
    #<<description-end
        filesrc location={audio-location} !
        oggdemux !
        vorbisdec !
        audioconvert !
        audioresample !
        audio/x-raw, format=S16LE, layout=interleaved, rate=48000, channels=2 !
        webrtcaudioprobe !
        audioresample !
        {audiosink}
        
        {audiosrc} provide-clock=false !
        audioresample !
        webrtcaudioprocessor
            echo-cancel=true
            noise-suppression=true !
        audioconvert !
        audioresample !
        audio/x-raw, format=F32LE, layout=interleaved, rate=48000, channels=2 !
        vorbisenc !
        oggmux !
        filesink location=audio1.ogg
description-end
))

  (let ((pipeline (gst_parse_launch description)))
    (define (closer app)
      (gst_element_release pipeline))
    
    (thread-start!
      (new-thread
        (lambda ()
          (gst_element_set_state pipeline GST_STATE_PLAYING)
          (report-info pipeline "audio1"))
        'audio))
    ;; application
    (boot-environment (new Test-Application closer: closer))))


;; split into one bin and pipeline
(definition public (test-audio2)
  (let ((speaker (gst-pipeline (tie "filesrc location={audio-location}")
                               "oggdemux"
                               "vorbisdec"
                               "audioconvert"
                               "audioresample"
                               "audio/x-raw, format=S16LE, layout=interleaved, rate=48000, channels=2"
                               "webrtcaudioprobe"
                               "audioresample"
                               audiosink))
        (microphone (gst-bin (gst-element audiosrc provide-clock: "false")
                             "audioresample"
                             (gst-element "webrtcaudioprocessor"
                                          echo-cancel: "true"
                                          noise-suppression: "true")
                             "audioconvert"
                             "audioresample"
                             "audio/x-raw, format=F32LE, layout=interleaved, rate=48000, channels=2"
                             "vorbisenc"
                             "oggmux"
                             "filesink location=audio2.ogg")))
    (define (closer app)
      (gst_element_release speaker))
    
    (thread-start!
      (new-thread
        (lambda ()
          (gst_bin_add speaker microphone)
          (gst_element_set_state speaker GST_STATE_PLAYING)
          (report-info speaker "audio2"))
        'audio))
    ;; application
    (boot-environment (new Test-Application closer: closer))))


;; replace filesrc with an appsrc
(definition public (test-audio3)
  (let ((input (gst-pipeline (tie "filesrc location={audio-location}")
                             "oggdemux"
                             "appsink name=sink"))
        (speaker (gst-pipeline "appsrc name=src"
                               "vorbisdec"
                               "audioconvert"
                               "audioresample"
                               "audio/x-raw, format=S16LE, layout=interleaved, rate=48000, channels=2"
                               "webrtcaudioprobe"
                               "audioresample"
                               audiosink))
        (microphone (gst-bin (gst-element audiosrc provide-clock: "false")
                             "audioresample"
                             (gst-element "webrtcaudioprocessor"
                                          echo-cancel: "true"
                                          noise-suppression: "true")
                             "audioconvert"
                             "audioresample"
                             "audio/x-raw, format=F32LE, layout=interleaved, rate=48000, channels=2"
                             "vorbisenc"
                             "oggmux"
                             "filesink location=audio3.ogg")))
    (define (closer app)
      (gst_element_release input)
      (gst_element_release speaker))
    
    (gst_bin_add speaker microphone)
    (with-unref ((input-sink (gst_bin_get_by_name input "sink"))
                 (speaker-src (gst_bin_get_by_name speaker "src")))
      (gst-app-src-set-caps speaker-src "audio/x-vorbis")
      (g-object-set speaker-src
                    "is-live"     'boolean #t
                    "stream-type" 'int     GST_APP_STREAM_TYPE_STREAM
                    "format"      'int     GST_FORMAT_TIME)
      (let ((input-listener (open-stream-listener))
            (input-buffer (make-u8vector 65536))
            (input-info (make-u64vector app-sink-info-size)))
        (gst_app_sink_connect_signals input-sink input-listener)
        (let ((input-thread
                (new-thread
                  (lambda ()
                    (let (loop)
                      (let ((size (gst_app_sink_read_frame input-listener input-sink input-buffer input-info)))
                        (let ((dts (u64vector-ref input-info 0))
                              (pts (u64vector-ref input-info 1))
                              (duration (u64vector-ref input-info 2)))
                          (gst_app_src_write speaker-src input-buffer size dts pts duration)))
                      (loop)))
                  'input)))
          (gst_element_set_state input GST_STATE_PLAYING)
          (gst_element_set_state speaker GST_STATE_PLAYING)
          (thread-start! input-thread)
          (report-info speaker "audio3"))))
    ;; application
    (boot-environment (new Test-Application closer: closer))))


;; replace filesink with an appsink
(definition public (test-audio4)
  (let ((input (gst-pipeline (tie "filesrc location={audio-location}")
                             "oggdemux"
                             "appsink name=sink"))
        (speaker (gst-pipeline "appsrc name=src"
                               "vorbisdec"
                               "audioconvert"
                               "audioresample"
                               "audio/x-raw, format=S16LE, layout=interleaved, rate=48000, channels=2"
                               "webrtcaudioprobe"
                               audiosink))
        (microphone (gst-bin (gst-element audiosrc provide-clock: "false")
                             "audioresample"
                             (gst-element "webrtcaudioprocessor"
                                          echo-cancel: "true"
                                          noise-suppression: "true")
                             "audioconvert"
                             "audioresample"
                             "audio/x-raw, format=F32LE, layout=interleaved, rate=48000, channels=2"
                             "vorbisenc"
                             "appsink sync=false name=sink"))
        (output (gst-pipeline "appsrc name=src"
                              ".audio_%u"
                              (list "oggmux name=mux"
                                    "filesink location=audio4.ogg"))))
    (define (closer app)
      (gst_element_release input)
      (gst_element_release speaker)
      (gst_element_release output))
    
    (gst_bin_add speaker microphone)
    (with-unref ((input-sink (gst_bin_get_by_name input "sink"))
                 (speaker-src (gst_bin_get_by_name speaker "src"))
                 (microphone-sink (gst_bin_get_by_name microphone "sink"))
                 (output-src (gst_bin_get_by_name output "src")))
      (gst-app-src-set-caps speaker-src "audio/x-vorbis")
      (g-object-set speaker-src
                    "is-live"     'boolean #t
                    "stream-type" 'int     GST_APP_STREAM_TYPE_STREAM
                    "format"      'int     GST_FORMAT_TIME)
      (let ((input-listener (open-stream-listener))
            (input-buffer (make-u8vector 65536))
            (input-info (make-u64vector app-sink-info-size))
            (microphone-listener (open-stream-listener))
            (microphone-buffer (make-u8vector 65536))
            (microphone-info (make-u64vector app-sink-info-size)))
        (gst_app_sink_connect_signals input-sink input-listener)
        (gst_app_sink_connect_signals microphone-sink microphone-listener)
        (let ((input-thread
                (new-thread
                  (lambda ()
                    (let (loop)
                      (let ((size (gst_app_sink_read_frame input-listener input-sink input-buffer input-info)))
                        (let ((dts (u64vector-ref input-info 0))
                              (pts (u64vector-ref input-info 1))
                              (duration (u64vector-ref input-info 2)))
                          (gst_app_src_write speaker-src input-buffer size dts pts duration)))
                      (loop)))
                  'input))
              (microphone-thread
                (new-thread
                  (lambda ()
                    (let (loop)
                      (let ((size (gst_app_sink_read_frame microphone-listener microphone-sink microphone-buffer microphone-info)))
                        (let ((dts (u64vector-ref microphone-info 0))
                              (pts (u64vector-ref microphone-info 1))
                              (duration (u64vector-ref microphone-info 2)))
                          (gst_app_src_write output-src microphone-buffer size dts pts duration)))
                      (loop)))
                  'microphone)))
          (gst_element_set_state input GST_STATE_PLAYING)
          (gst_element_set_state speaker GST_STATE_PLAYING)
          (let ((vorbis-caps (wait-vorbiscaps microphone-sink)))
            (gst_app_src_set_caps output-src (gst_caps_from_string vorbis-caps))
            (g-object-set output-src
                          "is-live"     'boolean #t
                          "stream-type" 'int     GST_APP_STREAM_TYPE_STREAM
                          "format"      'int     GST_FORMAT_TIME)
            (gst_element_set_state output GST_STATE_PLAYING)
            (thread-start! input-thread)
            (thread-start! microphone-thread)
            (report-info speaker "audio4")))))
    ;; application
    (boot-environment (new Test-Application closer: closer))))


;; add audio mixing
(definition public (test-audio5)
  (let ((input (gst-pipeline (tie "filesrc location={audio-location}")
                             "oggdemux"
                             "appsink name=sink"))
        (channel (gst-bin "appsrc name=src"
                          "vorbisdec"
                          "audioconvert"
                          "audioresample"
                          "audio/x-raw, format=S16LE, layout=interleaved, rate=48000, channels=2"
                          "volume name=sink"))
        (speaker (gst-pipeline "audiomixer name=mix"
                               "webrtcaudioprobe"
                               audiosink))
        (microphone (gst-bin (gst-element audiosrc provide-clock: "false")
                             "audioresample"
                             (gst-element "webrtcaudioprocessor"
                                          echo-cancel: "true"
                                          noise-suppression: "true")
                             "audioconvert"
                             "audioresample"
                             "audio/x-raw, format=F32LE, layout=interleaved, rate=48000, channels=2"
                             "vorbisenc"
                             "appsink sync=false name=sink"))
        (output (gst-pipeline "appsrc name=src"
                              ".audio_%u"
                              (list "oggmux name=mux"
                                    "filesink location=audio5.ogg"))))
    (define (closer app)
      (gst_element_release input)
      (gst_element_release speaker)
      (gst_element_release output))
    
    (gst_bin_add speaker channel)
    (gst_bin_add speaker microphone)
    (with-unref ((input-sink (gst_bin_get_by_name input "sink"))
                 (channel-src (gst_bin_get_by_name channel "src"))
                 (channel-sink (gst_bin_get_by_name channel "sink"))
                 (speaker-mix (gst_bin_get_by_name speaker "mix"))
                 (microphone-sink (gst_bin_get_by_name microphone "sink"))
                 (output-src (gst_bin_get_by_name output "src")))
      (gst-app-src-set-caps channel-src "audio/x-vorbis")
      (g-object-set channel-src
                    "is-live"     'boolean #t
                    "stream-type" 'int     GST_APP_STREAM_TYPE_STREAM
                    "format"      'int     GST_FORMAT_TIME)
      (let ((input-listener (open-stream-listener))
            (input-buffer (make-u8vector 65536))
            (input-info (make-u64vector app-sink-info-size))
            (microphone-listener (open-stream-listener))
            (microphone-buffer (make-u8vector 65536))
            (microphone-info (make-u64vector app-sink-info-size)))
        (gst_app_sink_connect_signals input-sink input-listener)
        (gst_app_sink_connect_signals microphone-sink microphone-listener)
        (let ((input-thread
                (new-thread
                  (lambda ()
                    (let (loop)
                      (let ((size (gst_app_sink_read_frame input-listener input-sink input-buffer input-info)))
                        (let ((dts (u64vector-ref input-info 0))
                              (pts (u64vector-ref input-info 1))
                              (duration (u64vector-ref input-info 2)))
                          (gst_app_src_write channel-src input-buffer size dts pts duration)))
                      (loop)))
                  'input))
              (microphone-thread
                (new-thread
                  (lambda ()
                    (let (loop)
                      (let ((size (gst_app_sink_read_frame microphone-listener microphone-sink microphone-buffer microphone-info)))
                        (let ((dts (u64vector-ref microphone-info 0))
                              (pts (u64vector-ref microphone-info 1))
                              (duration (u64vector-ref microphone-info 2)))
                          (gst_app_src_write output-src microphone-buffer size dts pts duration)))
                      (loop)))
                  'microphone)))
          (gst_element_link channel-sink speaker-mix)
          (gst_element_set_state input GST_STATE_PLAYING)
          (gst_element_set_state speaker GST_STATE_PLAYING)
          (let ((vorbis-caps (wait-vorbiscaps microphone-sink)))
            (gst_app_src_set_caps output-src (gst_caps_from_string vorbis-caps))
            (g-object-set output-src
                          "is-live"     'boolean #t
                          "stream-type" 'int     GST_APP_STREAM_TYPE_STREAM
                          "format"      'int     GST_FORMAT_TIME)
            (gst_element_set_state output GST_STATE_PLAYING)
            (thread-start! input-thread)
            (thread-start! microphone-thread)
            (report-info speaker "audio5")))))
    ;; application
    (boot-environment (new Test-Application closer: closer))))


(class Channel extends Object
  
  
  (slot location getter generate)
  (slot input    getter generate)
  (slot bin      getter generate)
  (slot thread   getter generate)
  
  
  (method override (initialize self location input bin thread)
    (nextmethod self)
    (set! self.location location)
    (set! self.input input)
    (set! self.bin bin)
    (set! self.thread thread)))


;; add multiple channels
(definition public (test-audio6)
  (let ((speaker (gst-pipeline "audiomixer name=mix"
                               "webrtcaudioprobe"
                               audiosink))
        (microphone (gst-bin (gst-element audiosrc provide-clock: "false")
                             "audioresample"
                             (gst-element "webrtcaudioprocessor"
                                          echo-cancel: "true"
                                          noise-suppression: "true")
                             "audioconvert"
                             "audioresample"
                             "audio/x-raw, format=F32LE, layout=interleaved, rate=48000, channels=2"
                             "vorbisenc"
                             "appsink sync=false name=sink"))
        (output (gst-pipeline "appsrc name=src"
                              ".audio_%u"
                              (list "oggmux name=mux"
                                    "filesink location=audio6.ogg")))
        (channels '()))
    (define (add-channel location (volume 1.))
      (let ((input (gst-pipeline (tie "filesrc location={location}")
                                 "oggdemux"
                                 "appsink name=sink"))
            (bin (gst-bin "appsrc name=src"
                          "vorbisdec"
                          "audioconvert"
                          "audioresample"
                          "audio/x-raw, format=S16LE, layout=interleaved, rate=48000, channels=2"
                          (tie "volume volume={volume} name=sink"))))
        (gst_bin_add speaker bin)
        (with-unref ((speaker-mix (gst_bin_get_by_name speaker "mix"))
                     (input-sink (gst_bin_get_by_name input "sink"))
                     (bin-src (gst_bin_get_by_name bin "src"))
                     (bin-sink (gst_bin_get_by_name bin "sink")))
          (gst-app-src-set-caps bin-src "audio/x-vorbis")
          (g-object-set bin-src
                        "is-live"     'boolean #t
                        "stream-type" 'int     GST_APP_STREAM_TYPE_STREAM
                        "format"      'int     GST_FORMAT_TIME)
          (let ((input-listener (open-stream-listener))
                (input-buffer (make-u8vector 65536))
                (input-info (make-u64vector app-sink-info-size)))
            (gst_app_sink_connect_signals input-sink input-listener)
            (let ((thread
                    (new-thread
                      (lambda ()
                        (let (loop)
                          (let ((size (gst_app_sink_read_frame input-listener input-sink input-buffer input-info)))
                            (let ((dts (u64vector-ref input-info 0))
                                  (pts (u64vector-ref input-info 1))
                                  (duration (u64vector-ref input-info 2)))
                              (gst_app_src_write bin-src input-buffer size dts pts duration)))
                          (loop)))
                      'channel)))
              (gst_element_link bin-sink speaker-mix)
              (gst_element_set_state input GST_STATE_PLAYING)
              (gst_element_set_state bin GST_STATE_PLAYING)
              (thread-start! thread)
              (let ((channel (new Channel location input bin thread)))
                (set! channels (append channels (list channel)))
                channel))))))
    
    (define (closer app)
      (for-each (lambda (channel)
                  (gst_element_release (get-input channel)))
                channels)
      (gst_element_release speaker)
      (gst_element_release output))
    
    (gst_bin_add speaker microphone)
    (with-unref ((microphone-sink (gst_bin_get_by_name microphone "sink"))
                 (output-src (gst_bin_get_by_name output "src")))
      (let ((microphone-listener (open-stream-listener))
            (microphone-buffer (make-u8vector 65536))
            (microphone-info (make-u64vector app-sink-info-size)))
        (gst_app_sink_connect_signals microphone-sink microphone-listener)
        (let ((microphone-thread
                (new-thread
                  (lambda ()
                    (let (loop)
                      (let ((size (gst_app_sink_read_frame microphone-listener microphone-sink microphone-buffer microphone-info)))
                        (let ((dts (u64vector-ref microphone-info 0))
                              (pts (u64vector-ref microphone-info 1))
                              (duration (u64vector-ref microphone-info 2)))
                          (gst_app_src_write output-src microphone-buffer size dts pts duration)))
                      (loop)))
                  'microphone)))
          (gst_element_set_state speaker GST_STATE_PLAYING)
          (add-channel aretha)
          ;(add-channel aretha .2)
          ;(add-channel koln 1.)
          (let ((vorbis-caps (wait-vorbiscaps microphone-sink)))
            (gst_app_src_set_caps output-src (gst_caps_from_string vorbis-caps))
            (g-object-set output-src
                          "is-live"     'boolean #t
                          "stream-type" 'int     GST_APP_STREAM_TYPE_STREAM
                          "format"      'int     GST_FORMAT_TIME)
            (gst_element_set_state output GST_STATE_PLAYING)
            (thread-start! microphone-thread)
            (report-info speaker "audio6")))))
    ;; application
    (boot-environment (new Test-Application closer: closer))))


;; force audio clock by generating caps event
(definition public (test-audio7)
  (let ((audio (gst-pipeline "audiomixer name=mix"
                             ;; without the queue we get the following warnings
                             ;; WARN gst_base_sink_query_latency:<sink> Pipeline construction is invalid, please add queues.
                             ;; WARN gst_base_sink_query_latency:<sink> Not enough buffering available for the processing deadline of 0:00:00.020000000, add enough queues to buffer  0:00:00.020000000 additional data. Shortening processing latency to 0:00:00.000000000.
                             ;; and it is very interesting that before adding the queue, the probe reports "We have a latency of 0:00:00.2"
                             ;; and with the queue it goes to "0:00:00.22"
                             ;; ***AND*** the denoising becomes much better
                             "queue"
                             "webrtcaudioprobe delay=0"
                             (gst-element audiosink name: "sink")))
        (microphone (gst-bin (gst-element audiosrc provide-clock: "false")
                             "audioresample"
                             (gst-element "webrtcaudioprocessor"
                                          echo-cancel: "true"
                                          noise-suppression: "true")
                             "audioconvert"
                             "audioresample"
                             "audio/x-raw, format=F32LE, layout=interleaved, rate=48000, channels=2"
                             "vorbisenc"
                             "appsink sync=false name=sink"))
        (output (gst-pipeline "appsrc name=src"
                              ".audio_%u"
                              (list "oggmux name=mux"
                                    "filesink location=audio7.ogg")))
        (channels '()))
    (define (force-audioclock)
      ;; it seems that appsrc will not generate events
      ;; and so we need to generate them ourselves as it
      ;; is critical that the audio sink receives the caps
      ;; event before going to play else when the pipeline
      ;; asks the audio sink for a provided clock the sink
      ;; will return null because its ring buffer won't have
      ;; been created in response to the caps event yet
      (gst_element_set_state audio GST_STATE_PAUSED)
      (with-unref ((mix (gst_bin_get_by_name audio "mix")))
        (with-unref ((pad (gst_element_get_static_pad mix "src")))
          (let ((caps (gst-new-caps "audio/x-raw"
                                    "format" 'string "S16LE"
                                    "layout" 'string "interleaved"
                                    "rate" 'int 48000
                                    "channels" 'int 2)))
            (gst_pad_push_event pad (gst_event_new_stream_start "stream"))
            (gst_pad_push_event pad (gst_event_new_caps caps))
            (gst_caps_unref caps)))))
    
    (define (add-channel location (volume 1.))
      (let ((input (gst-pipeline (tie "filesrc location={location}")
                                 "oggdemux"
                                 "appsink name=sink"))
            (bin (gst-bin "appsrc name=src"
                          "vorbisdec"
                          "audioconvert"
                          "audioresample"
                          "audio/x-raw, format=S16LE, layout=interleaved, rate=48000, channels=2"
                          (tie "volume volume={volume}")
                          "audiopanorama method=1 name=sink")))
        (gst_bin_add audio bin)
        (with-unref ((audio-mix (gst_bin_get_by_name audio "mix"))
                     (input-sink (gst_bin_get_by_name input "sink"))
                     (bin-src (gst_bin_get_by_name bin "src"))
                     (bin-sink (gst_bin_get_by_name bin "sink")))
          (gst-app-src-set-caps bin-src "audio/x-vorbis")
          (g-object-set bin-src
                        "is-live"     'boolean #t
                        "stream-type" 'int     GST_APP_STREAM_TYPE_STREAM
                        "format"      'int     GST_FORMAT_TIME)
          (let ((input-listener (open-stream-listener))
                (input-buffer (make-u8vector 65536))
                (input-info (make-u64vector app-sink-info-size)))
            (gst_app_sink_connect_signals input-sink input-listener)
            (let ((thread
                    (new-thread
                      (lambda ()
                        (let (loop)
                          (let ((size (gst_app_sink_read_frame input-listener input-sink input-buffer input-info)))
                            (let ((dts (u64vector-ref input-info 0))
                                  (pts (u64vector-ref input-info 1))
                                  (duration (u64vector-ref input-info 2)))
                              (gst_app_src_write bin-src input-buffer size dts pts duration)))
                          (loop)))
                      'channel)))
              (gst_element_link bin-sink audio-mix)
              (gst_element_set_state input GST_STATE_PLAYING)
              (gst_element_set_state bin GST_STATE_PLAYING)
              (thread-start! thread)
              (let ((channel (new Channel location input bin thread)))
                (set! channels (append channels (list channel)))
                channel))))))
    
    (define (remove-channel location)
      (let ((channel (find channels location key: get-location test: equal? return: 'item)))
        (let ((bin (get-bin channel)))
          (gst_element_release bin)
          (with-unref ((pads (gst_element_src_pads bin)))
            (let ((ghost-pad (car pads)))
              (with-unref ((vol (gst_bin_get_by_name bin "sink"))
                           (mix (gst_bin_get_by_name audio "mix")))
                (gst_element_unlink vol mix)
                (let ((pad (gst_pad_get_peer ghost-pad)))
                  (gst_element_release_request_pad mix pad)
                  (gst_object_unref pad)))
              (gst_bin_remove audio bin))))))
    
    (define (closer app)
      (for-each (lambda (channel)
                  (gst_element_release (get-input channel)))
                channels)
      (gst_element_release audio)
      (gst_element_release output))
    
    (gst_bin_add audio microphone)
    (force-audioclock)
    (gst_element_set_state audio GST_STATE_PLAYING)
    (with-unref ((microphone-sink (gst_bin_get_by_name microphone "sink"))
                 (output-src (gst_bin_get_by_name output "src")))
      (let ((microphone-listener (open-stream-listener))
            (microphone-buffer (make-u8vector 65536))
            (microphone-info (make-u64vector app-sink-info-size)))
        (gst_app_sink_connect_signals microphone-sink microphone-listener)
        (let ((microphone-thread
                (new-thread
                  (lambda ()
                    (let (loop)
                      (let ((size (gst_app_sink_read_frame microphone-listener microphone-sink microphone-buffer microphone-info)))
                        (let ((dts (u64vector-ref microphone-info 0))
                              (pts (u64vector-ref microphone-info 1))
                              (duration (u64vector-ref microphone-info 2)))
                          (gst_app_src_write output-src microphone-buffer size dts pts duration)))
                      (loop)))
                  'microphone))
              (simulate-thread
                (new-thread
                  (lambda ()
                    (sleep 5)
                    (add-channel aretha .2)
                    (sleep 5)
                    (remove-channel koln))
                  'simulate)))
          (let ((vorbis-caps (wait-vorbiscaps microphone-sink)))
            (gst_app_src_set_caps output-src (gst_caps_from_string vorbis-caps))
            (g-object-set output-src
                          "is-live"     'boolean #t
                          "stream-type" 'int     GST_APP_STREAM_TYPE_STREAM
                          "format"      'int     GST_FORMAT_TIME)
            (gst_element_set_state output GST_STATE_PLAYING)
            (thread-start! microphone-thread)
            (add-channel audio-location 1.)
            @w(add-channel koln 1.)
            (report-info audio "audio7")
            @w(thread-start! simulate-thread)))))
    ;; application
    (boot-environment (new Test-Application closer: closer))))


(class Microphone extends Object
  
  
  (slot bin      getter generate)
  (slot denoise  getter generate)
  (slot denoiser getter generate)
  (slot output   getter generate)
  (slot thread   getter generate)
  
  
  (method override (initialize self bin denoise denoiser output thread)
    (nextmethod self)
    (set! self.bin bin)
    (set! self.denoise denoise)
    (set! self.denoiser denoiser)
    (set! self.output output)
    (set! self.thread thread)))


;; clean separation of microphone
(definition public (test-audio8)
  (let ((audio (gst-pipeline "audiomixer output-buffer-duration=50000000 name=mix"
                             ;; without the queue we get the following warnings
                             ;; WARN gst_base_sink_query_latency:<sink> Pipeline construction is invalid, please add queues.
                             ;; WARN gst_base_sink_query_latency:<sink> Not enough buffering available for the processing deadline of 0:00:00.020000000, add enough queues to buffer  0:00:00.020000000 additional data. Shortening processing latency to 0:00:00.000000000.
                             ;; and it is very interesting that before adding the queue, the probe reports "We have a latency of 0:00:00.2"
                             ;; and with the queue it goes to "0:00:00.22"
                             ;; ***AND*** the denoising becomes much better
                             "queue"
                             "webrtcaudioprobe delay=0"
                             (gst-element audiosink name: "sink")
                             (list "audiotestsrc samplesperbuffer=480 wave=silence is-live=true name=silence"
                                   "mix.")))
        (microphone #f)
        (channels '()))
    (define (force-audioclock)
      ;; it seems that appsrc will not generate events
      ;; and so we need to generate them ourselves as it
      ;; is critical that the audio sink receives the caps
      ;; event before going to play else when the pipeline
      ;; asks the audio sink for a provided clock the sink
      ;; will return null because its ring buffer won't have
      ;; been created in response to the caps event yet
      (gst_element_set_state audio GST_STATE_PAUSED)
      (with-unref ((mix (gst_bin_get_by_name audio "mix")))
        (with-unref ((pad (gst_element_get_static_pad mix "src")))
          (let ((caps (gst-new-caps "audio/x-raw"
                                    "format" 'string "S16LE"
                                    "layout" 'string "interleaved"
                                    "rate" 'int 48000
                                    "channels" 'int 2)))
            (gst_pad_push_event pad (gst_event_new_stream_start "stream"))
            (gst_pad_push_event pad (gst_event_new_caps caps))
            (gst_caps_unref caps)))))
    
    (define (setup-microphone)
      (let ((bin (gst-bin (gst-element audiosrc provide-clock: "false")
                          "audioresample"
                          (gst-element "webrtcaudioprocessor"
                                       ;logging-severity: "verbose"
                                       ;processing-rate: "48000"
                                       echo-cancel: "true"
                                       noise-suppression: "true")
                          ;"rndenoiser"
                          "audioconvert"
                          "audioresample"
                          "audio/x-raw, format=F32LE, layout=interleaved, rate=48000, channels=2"
                          "vorbisenc"
                          "appsink sync=false name=sink"))
            (output (gst-pipeline "appsrc name=src"
                                  ".audio_%u"
                                  (list "oggmux name=mux"
                                        "filesink location=audio8.ogg"))))
        (gst_object_set_name bin "microphone")
        (gst_object_set_name output "output")
        (gst_bin_add audio bin)
        (with-unref ((microphone-sink (gst_bin_get_by_name bin "sink"))
                     (output-src (gst_bin_get_by_name output "src")))
          (let ((microphone-listener (open-stream-listener))
                (microphone-buffer (make-u8vector 65536))
                (microphone-info (make-u64vector app-sink-info-size)))
            (gst_app_sink_connect_signals microphone-sink microphone-listener)
            (gst_element_set_state bin GST_STATE_PLAYING)
            (let ((thread
                    (new-thread
                      (lambda ()
                        (let (loop)
                          (let ((size (gst_app_sink_read_frame microphone-listener microphone-sink microphone-buffer microphone-info)))
                            (let ((dts (u64vector-ref microphone-info 0))
                                  (pts (u64vector-ref microphone-info 1))
                                  (duration (u64vector-ref microphone-info 2)))
                              (gst_app_src_write output-src microphone-buffer size dts pts duration)))
                          (loop)))
                      'microphone)))
              (let ((vorbis-caps (wait-vorbiscaps microphone-sink)))
                (gst_app_src_set_caps output-src (gst_caps_from_string vorbis-caps))
                (g-object-set output-src
                              "is-live"     'boolean #t
                              "stream-type" 'int     GST_APP_STREAM_TYPE_STREAM
                              "format"      'int     GST_FORMAT_TIME)
                (gst_element_set_state output GST_STATE_PLAYING)
                (thread-start! thread)
                (let ((mic (new Microphone bin #f #f output thread)))
                  (set! microphone mic)
                  mic)))))))
    
    (define (add-channel location (volume 1.))
      (let ((channel (create-channel location volume)))
        (set! channels (append channels (list channel)))
        channel))
    
    (define (remove-channel location)
      (let ((channel (find channels location key: get-location test: equal? return: 'item)))
        (release-channel channel)
        (set! channels (remove! channel channels))))
    
    (define (create-channel location volume)
      (let ((input (gst-pipeline (tie "filesrc location={location}")
                                 "oggdemux"
                                 "appsink name=sink"))
            (bin (gst-bin "appsrc min-latency=30000000 name=src"
                          "vorbisdec"
                          "audioconvert"
                          "audioresample"
                          "audio/x-raw, format=S16LE, layout=interleaved, rate=48000, channels=2"
                          (tie "volume volume={volume}")
                          "audiopanorama method=1 name=sink")))
        (gst_object_set_name input "input")
        (gst_object_set_name bin (filename-base location))
        (gst_bin_add audio bin)
        (with-unref ((audio-mix (gst_bin_get_by_name audio "mix"))
                     (input-sink (gst_bin_get_by_name input "sink"))
                     (bin-src (gst_bin_get_by_name bin "src"))
                     (bin-sink (gst_bin_get_by_name bin "sink")))
          (gst-app-src-set-caps bin-src "audio/x-vorbis")
          (g-object-set bin-src
                        "is-live"     'boolean #t
                        "stream-type" 'int     GST_APP_STREAM_TYPE_STREAM
                        "format"      'int     GST_FORMAT_TIME)
          (let ((input-listener (open-stream-listener))
                (input-buffer (make-u8vector 65536))
                (input-info (make-u64vector app-sink-info-size)))
            (gst_app_sink_connect_signals input-sink input-listener)
            (let ((thread
                    (new-thread
                      (lambda ()
                        (let ((adapter (new Source-Coupler)))
                          (let (loop)
                            (let ((size (gst_app_sink_read_frame input-listener input-sink input-buffer input-info)))
                              (let ((dts (u64vector-ref input-info 0))
                                    (pts (u64vector-ref input-info 1))
                                    (duration (u64vector-ref input-info 2)))
                                (if (= pts GST_CLOCK_TIME_NONE)
                                    (gst_app_src_write bin-src input-buffer size dts pts duration)
                                  (let ((extra-offset 30000000) ;; this experimental number seems to give the best results
                                        (timestamp-offset (adapt-time adapter bin-src pts)))
                                    (let ((dts (+ dts timestamp-offset extra-offset))
                                          (pts (+ pts timestamp-offset extra-offset)))
                                      (gst_app_src_write bin-src input-buffer size dts pts duration))))))
                            (loop))))
                      'channel)))
              (gst_element_link bin-sink audio-mix)
              (gst_element_set_state input GST_STATE_PLAYING)
              (gst_element_set_state bin GST_STATE_PLAYING)
              (thread-start! thread)
              (new Channel location input bin thread))))))
    
    (define (release-channel channel)
      (let ((bin (get-bin channel)))
        (thread-terminate! (get-thread channel))
        ;; it is very important not to call gst_element_release as
        ;; gst_object_unref should not be done before gst_bin_remove
        (with-unref ((pads (gst_element_src_pads bin)))
          (let ((ghost-pad (car pads)))
            (with-unref ((vol (gst_bin_get_by_name bin "sink"))
                         (mix (gst_bin_get_by_name audio "mix")))
              (gst_element_unlink vol mix)
              (let ((pad (gst_pad_get_peer ghost-pad)))
                (gst_element_release_request_pad mix pad)
                (gst_object_unref pad)))))
        (gst_element_set_state bin GST_STATE_NULL)
        (gst_bin_remove audio bin)))
    
    (define (closer app)
      (for-each release-channel channels)
      (gst_element_release audio)
      (when microphone
        (gst_element_release (get-output microphone))))
    
    (gst_object_set_name audio "audio")
    (force-audioclock)
    (gst_element_set_state audio GST_STATE_PLAYING)
    (setup-microphone)
    (let ((simulate-thread
            (new-thread
              (lambda ()
                (sleep 5)
                (add-channel aretha .2)
                (sleep 5)
                (remove-channel koln))
              'simulate)))
      (add-channel audio-location 1.)
        @w(add-channel koln 1.)
        (report-info audio "audio8")
        @w(thread-start! simulate-thread))
    ;; application
    (boot-environment (new Test-Application closer: closer))))


;; get an audio clock by adding mixer late
(definition public (test-audio9)
  (let ((audio (gst-pipeline "audiotestsrc samplesperbuffer=480 wave=silence is-live=true name=silence"
                             "queue name=queue"
                             "webrtcaudioprobe delay=0"
                             (gst-element audiosink name: "sink")))
        (microphone #f)
        (channels '()))
    (define (add-mixer)
      (with-unref ((silence (gst_bin_get_by_name audio "silence"))
                   (queue (gst_bin_get_by_name audio "queue")))
        (let ((mix (gst_element_factory_make "audiomixer" "mix")))
          (g_object_set_uint64 mix "latency" 10000000)
          (g_object_set_uint64 mix "output-buffer-duration" 10000000)
          (gst_bin_add audio mix)
          (gst_element_unlink silence queue)
          (gst_element_link silence mix)
          (gst_element_link mix queue)
          (gst_element_set_state mix GST_STATE_PLAYING))))
    
    (define (remove-silence)
      (with-unref ((silence (gst_bin_get_by_name audio "silence"))
                   (mix (gst_bin_get_by_name audio "mix")))
        ;; it is very important not to call gst_element_release as
        ;; gst_object_unref should not be done before gst_bin_remove
        (gst_element_unlink silence mix)
        (with-unref ((pads (gst_element_sink_pads mix)))
          (gst_element_release_request_pad mix (car pads)))
        (gst_element_set_state silence GST_STATE_NULL)
        (gst_bin_remove audio silence)))
    
    (define (setup-microphone)
      (let ((bin (gst-bin (gst-element audiosrc provide-clock: "false" name: "src")
                          "audioresample"
                          (gst-element "webrtcaudioprocessor"
                                       ;logging-severity: "verbose"
                                       ;processing-rate: "48000"
                                       echo-cancel: "true"
                                       noise-suppression: "true")
                          ;"rndenoiser"
                          "audioconvert"
                          "audioresample"
                          "audio/x-raw, format=F32LE, layout=interleaved, rate=48000, channels=2"
                          "vorbisenc"
                          "appsink sync=false name=sink"))
            (output (gst-pipeline "appsrc name=src"
                                  ".audio_%u"
                                  (list "oggmux name=mux"
                                        "filesink location=audio9.ogg"))))
        (gst_object_set_name bin "microphone")
        (gst_object_set_name output "output")
        (gst_bin_add audio bin)
        (with-unref ((microphone-sink (gst_bin_get_by_name bin "sink"))
                     (output-src (gst_bin_get_by_name output "src")))
          (let ((microphone-listener (open-stream-listener))
                (microphone-buffer (make-u8vector 65536))
                (microphone-info (make-u64vector app-sink-info-size)))
            (gst_app_sink_connect_signals microphone-sink microphone-listener)
            (gst_element_set_state bin GST_STATE_PLAYING)
            (let ((thread
                    (new-thread
                      (lambda ()
                        (let (loop)
                          (let ((size (gst_app_sink_read_frame microphone-listener microphone-sink microphone-buffer microphone-info)))
                            (let ((dts (u64vector-ref microphone-info 0))
                                  (pts (u64vector-ref microphone-info 1))
                                  (duration (u64vector-ref microphone-info 2)))
                              (gst_app_src_write output-src microphone-buffer size dts pts duration)))
                          (loop)))
                      'microphone)))
              (let ((vorbis-caps (wait-vorbiscaps microphone-sink)))
                (gst_app_src_set_caps output-src (gst_caps_from_string vorbis-caps))
                (g-object-set output-src
                              "is-live"     'boolean #t
                              "stream-type" 'int     GST_APP_STREAM_TYPE_STREAM
                              "format"      'int     GST_FORMAT_TIME)
                (gst_element_set_state output GST_STATE_PLAYING)
                (thread-start! thread)
                (let ((mic (new Microphone bin #f #f output thread)))
                  (set! microphone mic)
                  mic)))))))
    
    (define (add-channel location (volume 1.))
      (let ((channel (create-channel location volume)))
        (set! channels (append channels (list channel)))
        channel))
    
    (define (remove-channel location)
      (let ((channel (find channels location key: get-location test: equal? return: 'item)))
        (assert channel
          (release-channel channel)
          (set! channels (remove! channel channels)))))
    
    (define (create-channel location volume)
      (let ((input (gst-pipeline (tie "filesrc location={location}")
                                 "oggdemux"
                                 "appsink name=sink"))
            (bin (gst-bin "appsrc name=src"
                          "vorbisdec"
                          "audioconvert"
                          "audioresample"
                          "audio/x-raw, format=S16LE, layout=interleaved, rate=48000, channels=2"
                          (tie "volume volume={volume}")
                          "audiopanorama method=1 name=sink")))
        (gst_object_set_name input "input")
        (gst_object_set_name bin (filename-base location))
        (gst_bin_add audio bin)
        (with-unref ((audio-mix (gst_bin_get_by_name audio "mix"))
                     (input-sink (gst_bin_get_by_name input "sink"))
                     (bin-src (gst_bin_get_by_name bin "src"))
                     (bin-sink (gst_bin_get_by_name bin "sink")))
          (gst-app-src-set-caps bin-src "audio/x-vorbis")
          (g-object-set bin-src
                        "is-live"     'boolean #t
                        "stream-type" 'int     GST_APP_STREAM_TYPE_STREAM
                        "format"      'int     GST_FORMAT_TIME)
          (let ((input-listener (open-stream-listener))
                (input-buffer (make-u8vector 65536))
                (input-info (make-u64vector app-sink-info-size)))
            (gst_app_sink_connect_signals input-sink input-listener)
            (let ((thread
                    (new-thread
                      (lambda ()
                        (let ((adapter (new Source-Coupler)))
                          (let (loop)
                            (let ((size (gst_app_sink_read_frame input-listener input-sink input-buffer input-info)))
                              (let ((dts (u64vector-ref input-info 0))
                                    (pts (u64vector-ref input-info 1))
                                    (duration (u64vector-ref input-info 2)))
                                (if (= pts GST_CLOCK_TIME_NONE)
                                    (gst_app_src_write bin-src input-buffer size dts pts duration)
                                  (let ((extra-offset 0) ;; this experimental number seems to give the best results
                                        (timestamp-offset (adapt-time adapter bin-src pts)))
                                    (let ((dts (+ dts timestamp-offset extra-offset))
                                          (pts (+ pts timestamp-offset extra-offset)))
                                      (gst_app_src_write bin-src input-buffer size dts pts duration))))))
                            (loop))))
                      'channel)))
              (gst_element_link bin-sink audio-mix)
              (gst_element_set_state input GST_STATE_PLAYING)
              (gst_element_set_state bin GST_STATE_PLAYING)
              (thread-start! thread)
              (new Channel location input bin thread))))))
    
    (define (release-channel channel)
      (let ((bin (get-bin channel)))
        (thread-terminate! (get-thread channel))
        ;; it is very important not to call gst_element_release as
        ;; gst_object_unref should not be done before gst_bin_remove
        (with-unref ((pads (gst_element_src_pads bin)))
          (let ((ghost-pad (car pads)))
            (with-unref ((vol (gst_bin_get_by_name bin "sink"))
                         (mix (gst_bin_get_by_name audio "mix")))
              (gst_element_unlink vol mix)
              (gst_element_release_request_pad mix (gst_pad_get_peer ghost-pad)))))
        (gst_element_set_state bin GST_STATE_NULL)
        (gst_bin_remove audio bin)))
    
    (define (keyer view key)
      (case key
        ((#\g)
         (terminal 'gc)
         (gc))))
    
    (define (closer app)
      (for-each release-channel channels)
      @buggy
      (gst_element_release audio)
      (when microphone
        (gst_element_release (get-output microphone))))
    
    (gst_object_set_name audio "audio")
    (gst_element_set_state audio GST_STATE_PAUSED)
    (wait-audioclock audio "sink")
    (gst_element_set_state audio GST_STATE_PLAYING)
    (add-mixer)
    (setup-microphone)
    ;(remove-silence)
    @w
    (thread-start!
      (new-thread
        (lambda ()
          (sleep 1)
          (terminal (gst_pipeline_get_latency audio))
          
          (let ((info (make-u64vector 3)))
            (gst_element_query_latency audio info)
            (let ((live (u64vector-ref info 0))
                  (min (u64vector-ref info 1))
                  (max (u64vector-ref info 2)))
              (terminal live min max)
              (gst_element_send_event audio (gst_event_new_latency min))))
          (terminal (gst_pipeline_get_latency audio)))))
    (let ((simulate-thread
            (new-thread
              (lambda ()
                (sleep 5)
                (add-channel aretha .2)
                (sleep 5)
                (remove-channel koln))
              'simulate)))
      (add-channel audio-location 1.)
      @w
        (add-channel koln 1.)
        (report-info audio "audio9")
        @w (thread-start! simulate-thread))
    ;; application
    (boot-environment (new Test-Application keyer: keyer closer: closer))))


;; move microphone back to its own pipeline
(definition public (test-audioa)
  (let ((audio (gst-pipeline "audiotestsrc samplesperbuffer=480 wave=silence is-live=true name=silence"
                             "queue name=queue"
                             "webrtcaudioprobe delay=0"
                             (gst-element audiosink name: "sink")))
        (mic #f)
        (channels '()))
    (define (add-mixer)
      (with-unref ((silence (gst_bin_get_by_name audio "silence"))
                   (queue (gst_bin_get_by_name audio "queue")))
        (let ((mix (gst_element_factory_make "audiomixer" "mix")))
          (g_object_set_uint64 mix "latency" 10000000)
          (g_object_set_uint64 mix "output-buffer-duration" 10000000)
          (gst_bin_add audio mix)
          (gst_element_unlink silence queue)
          (gst_element_link silence mix)
          (gst_element_link mix queue)
          (gst_element_set_state mix GST_STATE_PLAYING))))
    
    (define (remove-silence)
      (with-unref ((silence (gst_bin_get_by_name audio "silence"))
                   (mix (gst_bin_get_by_name audio "mix")))
        ;; it is very important not to call gst_element_release as
        ;; gst_object_unref should not be done before gst_bin_remove
        (gst_element_unlink silence mix)
        (with-unref ((pads (gst_element_sink_pads mix)))
          (gst_element_release_request_pad mix (car pads)))
        (gst_element_set_state silence GST_STATE_NULL)
        (gst_bin_remove audio silence)))
    
    (define (setup-microphone)
      (let ((microphone (gst-pipeline (gst-element audiosrc provide-clock: "false" name: "src")
                                      "audioresample"
                                      (gst-element "webrtcaudioprocessor"
                                                   ;logging-severity: "verbose"
                                                   ;processing-rate: "48000"
                                                   echo-cancel: "true"
                                                   noise-suppression: "true")
                                      ;"rndenoiser"
                                      "audioconvert"
                                      "audioresample"
                                      "audio/x-raw, format=F32LE, layout=interleaved, rate=48000, channels=2"
                                      "vorbisenc"
                                      "appsink sync=false name=sink"))
            (output (gst-pipeline "appsrc name=src"
                                  ".audio_%u"
                                  (list "oggmux name=mux"
                                        "filesink location=audioa.ogg"))))
        (gst_object_set_name microphone "microphone")
        (gst_object_set_name output "output")
        (with-unref ((microphone-sink (gst_bin_get_by_name microphone "sink"))
                     (output-src (gst_bin_get_by_name output "src")))
          (let ((microphone-listener (open-stream-listener))
                (microphone-buffer (make-u8vector 65536))
                (microphone-info (make-u64vector app-sink-info-size)))
            (gst_app_sink_connect_signals microphone-sink microphone-listener)
            (gst_element_set_state microphone GST_STATE_PLAYING)
            (let ((thread
                    (new-thread
                      (lambda ()
                        (let (loop)
                          (let ((size (gst_app_sink_read_frame microphone-listener microphone-sink microphone-buffer microphone-info)))
                            (let ((dts (u64vector-ref microphone-info 0))
                                  (pts (u64vector-ref microphone-info 1))
                                  (duration (u64vector-ref microphone-info 2)))
                              (gst_app_src_write output-src microphone-buffer size dts pts duration)))
                          (loop)))
                      'microphone)))
              (let ((vorbis-caps (wait-vorbiscaps microphone-sink)))
                (gst_app_src_set_caps output-src (gst_caps_from_string vorbis-caps))
                (g-object-set output-src
                              "is-live"     'boolean #t
                              "stream-type" 'int     GST_APP_STREAM_TYPE_STREAM
                              "format"      'int     GST_FORMAT_TIME)
                (gst_element_set_state output GST_STATE_PLAYING)
                (thread-start! thread)
                (set! mic (new Microphone microphone #f #f output thread))))))))
    
    (define (add-channel location (volume 1.))
      (let ((channel (create-channel location volume)))
        (set! channels (append channels (list channel)))
        channel))
    
    (define (remove-channel location)
      (let ((channel (find channels location key: get-location test: equal? return: 'item)))
        (assert channel
          (release-channel channel)
          (set! channels (remove! channel channels)))))
    
    (define (create-channel location volume)
      (let ((input (gst-pipeline (tie "filesrc location={location}")
                                 "oggdemux"
                                 "appsink name=sink"))
            (bin (gst-bin "appsrc name=src"
                          "vorbisdec"
                          "audioconvert"
                          "audioresample"
                          "audio/x-raw, format=S16LE, layout=interleaved, rate=48000, channels=2"
                          (tie "volume volume={volume}")
                          "audiopanorama method=1 name=sink")))
        (gst_object_set_name input "input")
        (gst_object_set_name bin (filename-base location))
        (gst_bin_add audio bin)
        (with-unref ((audio-mix (gst_bin_get_by_name audio "mix"))
                     (input-sink (gst_bin_get_by_name input "sink"))
                     (bin-src (gst_bin_get_by_name bin "src"))
                     (bin-sink (gst_bin_get_by_name bin "sink")))
          (gst-app-src-set-caps bin-src "audio/x-vorbis")
          (g-object-set bin-src
                        "is-live"     'boolean #t
                        "stream-type" 'int     GST_APP_STREAM_TYPE_STREAM
                        "format"      'int     GST_FORMAT_TIME)
          (let ((input-listener (open-stream-listener))
                (input-buffer (make-u8vector 65536))
                (input-info (make-u64vector app-sink-info-size)))
            (gst_app_sink_connect_signals input-sink input-listener)
            (let ((thread
                    (new-thread
                      (lambda ()
                        (let ((adapter (new Source-Coupler)))
                          (let (loop)
                            (let ((size (gst_app_sink_read_frame input-listener input-sink input-buffer input-info)))
                              (let ((dts (u64vector-ref input-info 0))
                                    (pts (u64vector-ref input-info 1))
                                    (duration (u64vector-ref input-info 2)))
                                (if (= pts GST_CLOCK_TIME_NONE)
                                    (gst_app_src_write bin-src input-buffer size dts pts duration)
                                  (let ((extra-offset 0) ;; this experimental number seems to give the best results
                                        (timestamp-offset (adapt-time adapter bin-src pts)))
                                    (let ((dts (+ dts timestamp-offset extra-offset))
                                          (pts (+ pts timestamp-offset extra-offset)))
                                      (gst_app_src_write bin-src input-buffer size dts pts duration))))))
                            (loop))))
                      'channel)))
              (gst_element_link bin-sink audio-mix)
              (gst_element_set_state input GST_STATE_PLAYING)
              (gst_element_set_state bin GST_STATE_PLAYING)
              (thread-start! thread)
              (new Channel location input bin thread))))))
    
    (define (release-channel channel)
      (let ((bin (get-bin channel)))
        (thread-terminate! (get-thread channel))
        ;; it is very important not to call gst_element_release as
        ;; gst_object_unref should not be done before gst_bin_remove
        (with-unref ((pads (gst_element_src_pads bin)))
          (let ((ghost-pad (car pads)))
            (with-unref ((vol (gst_bin_get_by_name bin "sink"))
                         (mix (gst_bin_get_by_name audio "mix")))
              (gst_element_unlink vol mix)
              (gst_element_release_request_pad mix (gst_pad_get_peer ghost-pad)))))
        (gst_element_set_state bin GST_STATE_NULL)
        (gst_bin_remove audio bin)))
    
    (define (closer app)
      (for-each release-channel channels)
      @buggy
      (gst_element_release audio)
      (when mic
        (gst_element_release (get-bin mic))
        (gst_element_release (get-output mic))))
    
    (gst_object_set_name audio "audio")
    (gst_element_set_state audio GST_STATE_PAUSED)
    (wait-audioclock audio "sink")
    (gst_element_set_state audio GST_STATE_PLAYING)
    (add-mixer)
    (setup-microphone)
    ;(remove-silence)
    (let ((simulate-thread
            (new-thread
              (lambda ()
                (sleep 5)
                (add-channel aretha .2)
                (sleep 5)
                (remove-channel koln))
              'simulate)))
      (add-channel audio-location 1.)
      @w
        (add-channel koln 1.)
        (report-info audio "audioa")
        @w (thread-start! simulate-thread))
    ;; application
    (boot-environment (new Test-Application closer: closer))))


;; add mixer statically non-live
(definition public (test-audiob)
  (let ((audio (gst-pipeline "audiotestsrc samplesperbuffer=480 wave=silence name=silence"
                             "audiomixer name=mix"
                             "queue name=queue"
                             "webrtcaudioprobe delay=0"
                             (gst-element audiosink name: "sink")))
        (mic #f)
        (channels '()))
    (define (remove-silence)
      (with-unref ((silence (gst_bin_get_by_name audio "silence"))
                   (mix (gst_bin_get_by_name audio "mix")))
        ;; it is very important not to call gst_element_release as
        ;; gst_object_unref should not be done before gst_bin_remove
        (gst_element_unlink silence mix)
        (with-unref ((pads (gst_element_sink_pads mix)))
          (gst_element_release_request_pad mix (car pads)))
        (gst_element_set_state silence GST_STATE_NULL)
        (gst_bin_remove audio silence)))
    
    (define (setup-microphone)
      (let ((microphone (gst-pipeline (gst-element audiosrc provide-clock: "false" name: "src")
                                      "audioresample"
                                      (gst-element "webrtcaudioprocessor"
                                                   ;logging-severity: "verbose"
                                                   ;processing-rate: "48000"
                                                   echo-cancel: "true"
                                                   noise-suppression: "true")
                                      ;"rndenoiser"
                                      "audioconvert"
                                      "audioresample"
                                      "audio/x-raw, format=F32LE, layout=interleaved, rate=48000, channels=2"
                                      "vorbisenc"
                                      "appsink sync=false name=sink"))
            (output (gst-pipeline "appsrc name=src"
                                  ".audio_%u"
                                  (list "oggmux name=mux"
                                        "filesink location=audiob.ogg"))))
        (gst_object_set_name microphone "microphone")
        (gst_object_set_name output "output")
        (with-unref ((microphone-sink (gst_bin_get_by_name microphone "sink"))
                     (output-src (gst_bin_get_by_name output "src")))
          (let ((microphone-listener (open-stream-listener))
                (microphone-buffer (make-u8vector 65536))
                (microphone-info (make-u64vector app-sink-info-size)))
            (gst_app_sink_connect_signals microphone-sink microphone-listener)
            (gst_element_set_state microphone GST_STATE_PLAYING)
            (let ((thread
                    (new-thread
                      (lambda ()
                        (let (loop)
                          (let ((size (gst_app_sink_read_frame microphone-listener microphone-sink microphone-buffer microphone-info)))
                            (let ((dts (u64vector-ref microphone-info 0))
                                  (pts (u64vector-ref microphone-info 1))
                                  (duration (u64vector-ref microphone-info 2)))
                              (gst_app_src_write output-src microphone-buffer size dts pts duration)))
                          (loop)))
                      'microphone)))
              (let ((vorbis-caps (wait-vorbiscaps microphone-sink)))
                (gst_app_src_set_caps output-src (gst_caps_from_string vorbis-caps))
                (g-object-set output-src
                              "is-live"     'boolean #t
                              "stream-type" 'int     GST_APP_STREAM_TYPE_STREAM
                              "format"      'int     GST_FORMAT_TIME)
                (gst_element_set_state output GST_STATE_PLAYING)
                (thread-start! thread)
                (set! mic (new Microphone microphone #f #f output thread))))))))
    
    (define (add-channel location (volume 1.))
      (let ((channel (create-channel location volume)))
        (set! channels (append channels (list channel)))
        channel))
    
    (define (remove-channel location)
      (let ((channel (find channels location key: get-location test: equal? return: 'item)))
        (assert channel
          (release-channel channel)
          (set! channels (remove! channel channels)))))
    
    (define (create-channel location volume)
      (let ((input (gst-pipeline (tie "filesrc location={location}")
                                 "oggdemux"
                                 "appsink name=sink"))
            ;; min-latency comes from seeing that buffers coming
            ;; out of vorbisdec are 8192 bytes which at 48kz is
            ;; .04s of sound or 40000000ns
            (bin (gst-bin "appsrc min-latency=40000000 name=src"
                          "vorbisdec"
                          "audiorate"
                          "audioconvert"
                          "audioresample"
                          "audio/x-raw, format=S16LE, layout=interleaved, rate=48000, channels=2"
                          (tie "volume volume={volume}")
                          "audiopanorama method=1 name=end")))
        (gst_object_set_name input "input")
        (gst_object_set_name bin (filename-base location))
        (gst_bin_add audio bin)
        (with-unref ((audio-mix (gst_bin_get_by_name audio "mix"))
                     (input-sink (gst_bin_get_by_name input "sink"))
                     (bin-src (gst_bin_get_by_name bin "src"))
                     (bin-end (gst_bin_get_by_name bin "end")))
          (gst-app-src-set-caps bin-src "audio/x-vorbis")
          (g-object-set bin-src
                        "is-live"     'boolean #t
                        "stream-type" 'int     GST_APP_STREAM_TYPE_STREAM
                        "format"      'int     GST_FORMAT_TIME)
          (let ((input-listener (open-stream-listener))
                (input-buffer (make-u8vector 65536))
                (input-info (make-u64vector app-sink-info-size)))
            (gst_app_sink_connect_signals input-sink input-listener)
            (let ((thread
                    (new-thread
                      (lambda ()
                        (let ((adapter (new Source-Coupler)))
                          (let (loop)
                            (let ((size (gst_app_sink_read_frame input-listener input-sink input-buffer input-info)))
                              (let ((dts (u64vector-ref input-info 0))
                                    (pts (u64vector-ref input-info 1))
                                    (duration (u64vector-ref input-info 2)))
                                (if (= pts GST_CLOCK_TIME_NONE)
                                    (gst_app_src_write bin-src input-buffer size dts pts duration)
                                  (let ((timestamp-offset (adapt-time adapter bin-src pts)))
                                    (let ((dts (+ dts timestamp-offset))
                                          (pts (+ pts timestamp-offset)))
                                      (gst_app_src_write bin-src input-buffer size dts pts duration))))))
                            (loop))))
                      'channel)))
              (gst_element_link bin-end audio-mix)
              (gst_element_set_state bin GST_STATE_PLAYING)
              (thread-start! thread)
              (gst_element_set_state input GST_STATE_PLAYING)
              (gst_bin_recalculate_latency audio)
              (new Channel location input bin thread))))))
    
    (define (release-channel channel)
      (let ((bin (get-bin channel)))
        (thread-terminate! (get-thread channel))
        ;; it is very important not to call gst_element_release as
        ;; gst_object_unref should not be done before gst_bin_remove
        (with-unref ((pads (gst_element_src_pads bin)))
          (let ((ghost-pad (car pads)))
            (with-unref ((end (gst_bin_get_by_name bin "end"))
                         (mix (gst_bin_get_by_name audio "mix")))
              (gst_element_unlink end mix)
              (gst_element_release_request_pad mix (gst_pad_get_peer ghost-pad)))))
        (gst_element_set_state bin GST_STATE_NULL)
        (gst_bin_remove audio bin)
        (gst_bin_recalculate_latency audio)))
    
    (define (closer app)
      (for-each release-channel channels)
      @buggy
      (gst_element_release audio)
      (when mic
        (gst_element_release (get-bin mic))
        (gst_element_release (get-output mic))))
    
    (gst_object_set_name audio "audio")
    (gst_element_set_state audio GST_STATE_PLAYING)
    (wait-playing audio)
    (setup-microphone)
    ;(remove-silence)
    (let ((simulate-thread
            (new-thread
              (lambda ()
                (sleep 5)
                (add-channel aretha .2)
                (sleep 5)
                (remove-channel koln))
              'simulate)))
      @w(add-channel lonesome)
      (add-channel koln 1.)
      (report-info audio "audiob")
      (thread-start! simulate-thread))
    ;; application
    (boot-environment (new Test-Application position: {Point 350 250} closer: closer))))


;; add mixer dynamically
(definition public (test-audioc)
  (let ((audio (gst-pipeline "audiotestsrc samplesperbuffer=480 wave=silence name=silence"
                             "queue name=queue"
                             "webrtcaudioprobe delay=0"
                             (gst-element audiosink name: "sink")))
        (mic #f)
        (mixer? #f)
        (channels '()))
    (define (remove-silence)
      (with-unref ((silence (gst_bin_get_by_name audio "silence"))
                   (queue (gst_bin_get_by_name audio "queue")))
        (gst_element_unlink silence queue)
        (gst_element_set_state silence GST_STATE_NULL)
        (gst_bin_remove audio silence)))
    
    (define (setup-microphone)
      (let ((microphone (gst-pipeline (gst-element audiosrc provide-clock: "false" name: "src")
                                      "audioresample"
                                      (gst-element "webrtcaudioprocessor"
                                                   ;logging-severity: "verbose"
                                                   ;processing-rate: "48000"
                                                   echo-cancel: "true"
                                                   noise-suppression: "true")
                                      ;"rndenoiser"
                                      "audioconvert"
                                      "audioresample"
                                      "audio/x-raw, format=F32LE, layout=interleaved, rate=48000, channels=2"
                                      "vorbisenc"
                                      "appsink sync=false name=sink"))
            (output (gst-pipeline "appsrc name=src"
                                  ".audio_%u"
                                  (list "oggmux name=mux"
                                        "filesink location=audioc.ogg"))))
        (gst_object_set_name microphone "microphone")
        (gst_object_set_name output "output")
        (with-unref ((microphone-sink (gst_bin_get_by_name microphone "sink"))
                     (output-src (gst_bin_get_by_name output "src")))
          (let ((microphone-listener (open-stream-listener))
                (microphone-buffer (make-u8vector 65536))
                (microphone-info (make-u64vector app-sink-info-size)))
            (gst_app_sink_connect_signals microphone-sink microphone-listener)
            (gst_element_set_state microphone GST_STATE_PLAYING)
            (let ((thread
                    (new-thread
                      (lambda ()
                        (let (loop)
                          (let ((size (gst_app_sink_read_frame microphone-listener microphone-sink microphone-buffer microphone-info)))
                            (let ((dts (u64vector-ref microphone-info 0))
                                  (pts (u64vector-ref microphone-info 1))
                                  (duration (u64vector-ref microphone-info 2)))
                              (gst_app_src_write output-src microphone-buffer size dts pts duration)))
                          (loop)))
                      'microphone)))
              (let ((vorbis-caps (wait-vorbiscaps microphone-sink)))
                (gst_app_src_set_caps output-src (gst_caps_from_string vorbis-caps))
                (g-object-set output-src
                              "is-live"     'boolean #t
                              "stream-type" 'int     GST_APP_STREAM_TYPE_STREAM
                              "format"      'int     GST_FORMAT_TIME)
                (gst_element_set_state output GST_STATE_PLAYING)
                (thread-start! thread)
                (set! mic (new Microphone microphone #f #f output thread))))))))
    
    (define (add-channel location (volume 1.))
      (let ((channel (create-channel location volume)))
        (set! channels (append channels (list channel)))
        channel))
    
    (define (remove-channel location)
      (let ((channel (find channels location key: get-location test: equal? return: 'item)))
        (assert channel
          (release-channel channel)
          (set! channels (remove! channel channels)))))
    
    (define (create-channel location volume)
      (when (not mixer?)
        (let ((mix (gst_element_factory_make "audiomixer" "mix")))
          (with-unref ((queue (gst_bin_get_by_name audio "queue")))
            (gst_bin_add audio mix)
            (gst_element_link mix queue)
            (gst_element_sync_state_with_parent mix)
            (set! mixer? #t))))
      (let ((input (gst-pipeline (tie "filesrc location={location}")
                                 "oggdemux"
                                 "appsink name=sink"))
            ;; min-latency comes from seeing that buffers coming
            ;; out of vorbisdec are 8192 bytes which at 48kz is
            ;; .04s of sound or 40000000ns
            (bin (gst-bin "appsrc min-latency=40000000 name=src"
                          "vorbisdec"
                          "audiorate"
                          "audioconvert"
                          "audioresample"
                          "audio/x-raw, format=S16LE, layout=interleaved, rate=48000, channels=2"
                          (tie "volume volume={volume}")
                          "audiopanorama method=1 name=end")))
        (gst_object_set_name input "input")
        (gst_object_set_name bin (filename-base location))
        (gst_bin_add audio bin)
        (with-unref ((audio-mix (gst_bin_get_by_name audio "mix"))
                     (input-sink (gst_bin_get_by_name input "sink"))
                     (bin-src (gst_bin_get_by_name bin "src"))
                     (bin-end (gst_bin_get_by_name bin "end")))
          (gst-app-src-set-caps bin-src "audio/x-vorbis")
          (g-object-set bin-src
                        "is-live"     'boolean #t
                        "stream-type" 'int     GST_APP_STREAM_TYPE_STREAM
                        "format"      'int     GST_FORMAT_TIME)
          (let ((input-listener (open-stream-listener))
                (input-buffer (make-u8vector 65536))
                (input-info (make-u64vector app-sink-info-size)))
            (gst_app_sink_connect_signals input-sink input-listener)
            (let ((thread
                    (new-thread
                      (lambda ()
                        (let ((adapter (new Source-Coupler)))
                          (let (loop)
                            (let ((size (gst_app_sink_read_frame input-listener input-sink input-buffer input-info)))
                              (let ((dts (u64vector-ref input-info 0))
                                    (pts (u64vector-ref input-info 1))
                                    (duration (u64vector-ref input-info 2)))
                                (if (= pts GST_CLOCK_TIME_NONE)
                                    (gst_app_src_write bin-src input-buffer size dts pts duration)
                                  (let ((timestamp-offset (adapt-time adapter bin-src pts)))
                                    (let ((dts (+ dts timestamp-offset))
                                          (pts (+ pts timestamp-offset)))
                                      (gst_app_src_write bin-src input-buffer size dts pts duration))))))
                            (loop))))
                      'channel)))
              (gst_element_link bin-end audio-mix)
              (gst_element_set_state bin GST_STATE_PLAYING)
              (thread-start! thread)
              (gst_element_set_state input GST_STATE_PLAYING)
              (gst_bin_recalculate_latency audio)
              (new Channel location input bin thread))))))
    
    (define (release-channel channel)
      (let ((bin (get-bin channel)))
        (thread-terminate! (get-thread channel))
        ;; it is very important not to call gst_element_release as
        ;; gst_object_unref should not be done before gst_bin_remove
        (with-unref ((pads (gst_element_src_pads bin)))
          (let ((ghost-pad (car pads)))
            (with-unref ((end (gst_bin_get_by_name bin "end"))
                         (mix (gst_bin_get_by_name audio "mix")))
              (gst_element_unlink end mix)
              (gst_element_release_request_pad mix (gst_pad_get_peer ghost-pad)))))
        (gst_element_set_state bin GST_STATE_NULL)
        (gst_bin_remove audio bin)
        (gst_bin_recalculate_latency audio)))
    
    (define (closer app)
      (for-each release-channel channels)
      @buggy
      (gst_element_release audio)
      (when mic
        (gst_element_release (get-bin mic))
        (gst_element_release (get-output mic))))
    
    (gst_object_set_name audio "audio")
    (gst_element_set_state audio GST_STATE_PLAYING)
    (wait-playing audio)
    (setup-microphone)
    (remove-silence)
    (let ((simulate-thread
            (new-thread
              (lambda ()
                (sleep 5)
                (add-channel aretha .2)
                (sleep 5)
                (remove-channel koln))
              'simulate)))
      (add-channel koln)
      @w(add-channel lonesome 1.)
      (report-info audio "audioc")
      (thread-start! simulate-thread))
    ;; application
    (boot-environment (new Test-Application position: {Point 350 250} closer: closer))))


;; investigate mixer gritches
(definition public (test-audiog)
  (define gc?
    (boolean-argument "gc" #f))
  
  (let ((audio (gst-pipeline "audiotestsrc samplesperbuffer=480 wave=silence is-live=true name=silence"
                             "queue name=queue"
                             "audio/x-raw, format=S16LE, layout=interleaved, rate=48000, channels=2"
                             (gst-element audiosink
                                          buffer-time: (if gc? 100000 200000)
                                          name: "sink")))
        (mixer? #f)
        (silence #f)
        (bin #f)
        (block-silence #f)
        (block-music #f)
        (huge #f))
    (define (remove-silence)
      (with-unref ((silence (gst_bin_get_by_name audio "silence"))
                   (queue (gst_bin_get_by_name audio "queue")))
        (gst_element_unlink silence queue)
        (gst_element_set_state silence GST_STATE_NULL)
        (gst_bin_remove audio silence)))
    
    (define (insert-mixer)
      (when (not mixer?)
        (let ((mixer (gst_element_factory_make "audiomixer" "mixer")))
          (when gc?
            (g_object_set_uint64 mixer "latency" 100000000))
          (with-unref ((queue (gst_bin_get_by_name audio "queue")))
            (gst_bin_add audio mixer)
            (gst_element_link mixer queue)
            (gst_element_sync_state_with_parent mixer)
            (set! mixer? #t)))))
    
    (define (add-silence-channel)
      (insert-mixer)
      (let ((elem (gst_element_factory_make "audiotestsrc" "silence")))
        (g_object_set_boolean elem "is-live" #t)
        (g_object_set_int elem "wave" 4)
        (with-unref ((audio-mixer (gst_bin_get_by_name audio "mixer")))
          (gst_bin_add audio elem)
          (gst_element_link elem audio-mixer)
          (gst_element_set_state elem GST_STATE_PLAYING)
          (gst_bin_recalculate_latency audio))
        (set! silence elem)))
    
    (define (add-channel location (volume 1.))
      (insert-mixer)
      (let ((input (gst-pipeline (tie "filesrc location={location}")
                                 "oggdemux name=demux"
                                 "vorbisdec"
                                 "audioconvert"
                                 (tie "audio/x-raw, format=S16LE, layout=interleaved, rate=44100, channels=2")
                                 "appsink name=sink"))
            (bn (gst-bin "appsrc min-latency=40000000 name=src"
                         "audio/x-raw, format=S16LE, layout=interleaved, rate=44100, channels=2"
                         "audioresample"
                         "audio/x-raw, format=S16LE, layout=interleaved, rate=48000, channels=2"
                         (tie "volume volume={volume} name=end"))))
        (gst_object_set_name input "input")
        (gst_object_set_name bn (filename-base location))
        (gst_bin_add audio bn)
        (with-unref ((audio-mixer (gst_bin_get_by_name audio "mixer"))
                     (input-sink (gst_bin_get_by_name input "sink"))
                     (bin-src (gst_bin_get_by_name bn "src"))
                     (bin-end (gst_bin_get_by_name bn "end")))
          (gst-app-src-set-caps bin-src "audio/x-raw")
          (g-object-set bin-src
                        "is-live"     'boolean #t
                        "stream-type" 'int     GST_APP_STREAM_TYPE_STREAM
                        "format"      'int     GST_FORMAT_TIME)
          (let ((input-listener (open-stream-listener))
                (input-buffer (make-u8vector 65536))
                (input-info (make-u64vector app-sink-info-size)))
            (gst_app_sink_connect_signals input-sink input-listener)
            (let ((thread
                    (new-thread
                      (lambda ()
                        (let ((adapter (new Source-Coupler)))
                          (let (loop)
                            (let ((size (gst_app_sink_read_frame input-listener input-sink input-buffer input-info)))
                              (let ((dts (u64vector-ref input-info 0))
                                    (pts (u64vector-ref input-info 1))
                                    (duration (u64vector-ref input-info 2)))
                                (if (or (= dts GST_CLOCK_TIME_NONE)
                                        (= pts GST_CLOCK_TIME_NONE))
                                    (gst_app_src_write bin-src input-buffer size dts pts duration)
                                  (let ((timestamp-offset (adapt-time adapter bin-src pts)))
                                    (let ((dts (+ dts timestamp-offset))
                                          (pts (+ pts timestamp-offset)))
                                      (gst_app_src_write bin-src input-buffer size dts pts duration))))))
                            (loop))))
                      'channel)))
              (gst_element_link bin-end audio-mixer)
              (gst_element_set_state bn GST_STATE_PLAYING)
              (thread-start! thread)
              (gst_element_set_state input GST_STATE_PLAYING)
              (gst_bin_recalculate_latency audio)
              (new Channel location input bn thread))))
        (set! bin bn)))
        
    (define (toggle-blocked location)
      (let ((what (if (shift-down?) 'music 'silence)))
        (case what
          ((silence)
           (with-unref ((pad (gst_element_get_static_pad silence "src")))
             (cond ((not block-silence)
                    (set! block-silence (gst_pad_add_drop_probe pad))
                    (terminal 'blocked what))
                   (else
                    (gst_pad_remove_probe pad block-silence)
                    (set! block-silence #f)
                    (terminal 'unblocked 'silence)))))
          ((music)
           (with-unref ((src (gst_bin_get_by_name bin "src")))
             (with-unref ((pad (gst_element_get_static_pad src "src")))
               (cond ((not block-music)
                      (set! block-music (gst_pad_add_drop_probe pad))
                      (terminal 'blocked what))
                     (else
                      (gst_pad_remove_probe pad block-music)
                      (set! block-music #f)
                      (terminal 'unblocked 'music)))))))))
    
    (define (keyer view key)
      (case key
        ((#\space)
         (toggle-blocked web))
        ((#\g)
         (when (not huge)
           (set! huge (make-vector 40000000)))
         (terminal 'gc)
         (gc))))
    
    (define (monitor-file bin name)
      (let ((dir {Directory Home "Records"}))
        (let ((filename (path-normalize (parse (new-file dir (format "{a}.raw" name))))))
          (gst_monitor bin name 'file filename))))
    
    (gst_object_set_name audio "audio")
    (gst_element_set_state audio GST_STATE_PAUSED)
    (wait-audioclock audio "sink")
    (gst_element_set_state audio GST_STATE_PLAYING)
    (wait-playing audio)
    (remove-silence)
    (add-silence-channel)
    (add-channel web 1.)
    (report-info audio "audiog")
    ;(monitor-file dabin "!src^")
    ;(monitor-file audio "mixer.src")
    ;(monitor-file audio "sink.sink")
    ;; application
    (boot-environment (new Test-Application keyer: keyer))))


;; investigate mixer high cpu
(definition public (test-audioh)
  (let ((audio (gst-pipeline "audiotestsrc samplesperbuffer=480 wave=silence name=silence"
                             "queue name=queue"
                             "audio/x-raw, format=S16LE, layout=interleaved, rate=48000, channels=2"
                             (gst-element audiosink name: "sink")))
        (mixer? #f)
        (dabin #f)
        (block #f))
    (define (remove-silence)
      (with-unref ((silence (gst_bin_get_by_name audio "silence"))
                   (queue (gst_bin_get_by_name audio "queue")))
        (gst_element_unlink silence queue)
        (gst_element_set_state silence GST_STATE_NULL)
        (gst_bin_remove audio silence)))
    
    (define (add-channel location (volume 1.))
      (when (not mixer?)
        (let ((mixer (gst_element_factory_make "audiomixer" "mixer")))
          (with-unref ((queue (gst_bin_get_by_name audio "queue")))
            (gst_bin_add audio mixer)
            (gst_element_link mixer queue)
            (gst_element_sync_state_with_parent mixer)
            (set! mixer? #t))))
      (let ((input (gst-pipeline (tie "filesrc location={location}")
                                 "oggdemux name=demux"
                                 "vorbisdec"
                                 "audioconvert"
                                 (tie "audio/x-raw, format=S16LE, layout=interleaved, rate=44100, channels=2")
                                 "appsink name=sink"))
            (bin (gst-bin "appsrc min-latency=40000000 name=src"
                          "audio/x-raw, format=S16LE, layout=interleaved, rate=44100, channels=2"
                          "audioresample"
                          "audio/x-raw, format=S16LE, layout=interleaved, rate=48000, channels=2"
                          (tie "volume volume={volume} name=end"))))
        (gst_object_set_name input "input")
        (gst_object_set_name bin (filename-base location))
        (gst_bin_add audio bin)
        (with-unref ((audio-mixer (gst_bin_get_by_name audio "mixer"))
                     (input-sink (gst_bin_get_by_name input "sink"))
                     (bin-src (gst_bin_get_by_name bin "src"))
                     (bin-end (gst_bin_get_by_name bin "end")))
          (gst-app-src-set-caps bin-src "audio/x-raw")
          (g-object-set bin-src
                        "is-live"     'boolean #t
                        "stream-type" 'int     GST_APP_STREAM_TYPE_STREAM
                        "format"      'int     GST_FORMAT_TIME)
          (let ((input-listener (open-stream-listener))
                (input-buffer (make-u8vector 65536))
                (input-info (make-u64vector app-sink-info-size)))
            (gst_app_sink_connect_signals input-sink input-listener)
            (let ((thread
                    (new-thread
                      (lambda ()
                        (let ((adapter (new Source-Coupler)))
                          (let (loop)
                            (let ((size (gst_app_sink_read_frame input-listener input-sink input-buffer input-info)))
                              (let ((dts (u64vector-ref input-info 0))
                                    (pts (u64vector-ref input-info 1))
                                    (duration (u64vector-ref input-info 2)))
                                (if (= pts GST_CLOCK_TIME_NONE)
                                    (gst_app_src_write bin-src input-buffer size dts pts duration)
                                  (let ((timestamp-offset (adapt-time adapter bin-src pts)))
                                    (let ((dts (+ dts timestamp-offset))
                                          (pts (+ pts timestamp-offset)))
                                      (gst_app_src_write bin-src input-buffer size dts pts duration))))))
                            (loop))))
                      'channel)))
              (gst_element_link bin-end audio-mixer)
              (gst_element_set_state bin GST_STATE_PLAYING)
              (thread-start! thread)
              (gst_element_set_state input GST_STATE_PLAYING)
              (gst_bin_recalculate_latency audio)
              (new Channel location input bin thread))))
        (set! dabin bin)))
        
    (define (toggle-blocked location)
      (with-unref ((src (gst_bin_get_by_name dabin "src")))
        (with-unref ((pad (gst_element_get_static_pad src "src")))
          (cond ((not block)
                 (set! block (gst_pad_add_drop_probe pad))
                 (terminal 'blocked))
                (else
                 (gst_pad_remove_probe pad block)
                 (set! block #f)
                 (terminal 'unblocked))))))
    
    (define (keyer view key)
      (case key
        ((#\space)
         (toggle-blocked koln))))
    
    (define (monitor-analyse bin pad-info)
      (let ((listener (open-stream-listener)))
        (let ((monitored (gst_monitor bin pad-info 'analyse (get-write-file listener)))
              (thread (new-thread
                        (lambda ()
                          (declare (proper-tail-calls))
                          (let ((discont 0)
                                (gap 0)
                                (expected 0)
                                (silence 0))
                            (let (loop)
                              (case (wait listener)
                                ((#\d)
                                 (increase! discont)
                                 (format :terminal "{a} : discont -> {a}{%}" pad-info discont)
                                 (loop))
                                ((#\g)
                                 (increase! gap)
                                 (format :terminal "{a} : gap -> {a}{%}" pad-info gap)
                                 (loop))
                                ((#\e)
                                 (increase! expected)
                                 (format :terminal "{a} : expected -> {a}{%}" pad-info expected)
                                 (loop))
                                ((#\s)
                                 (increase! silence)
                                 (format :terminal "{a} : silence -> {a}{%}" pad-info silence)
                                 (loop))))))
                        'monitor)))
          (thread-start! thread)
          (list monitored listener thread))))
    
    (gst_object_set_name audio "audio")
    (gst_element_set_state audio GST_STATE_PLAYING)
    (wait-playing audio)
    (remove-silence)
    (add-channel lonesome 1.)
    (wait-audioclock audio "sink")
    (report-info audio "audioh")
    ;(gst_monitor audio "sink.sink" 'data)
    ;(monitor-analyse audio "sink.sink")
    ;; application
    (boot-environment (new Test-Application keyer: keyer))))


;; investigate mixer force-live
(definition public (test-audiol)
  (let ((audio (gst-pipeline "audiotestsrc samplesperbuffer=480 wave=silence name=silence"
                             "audiomixer force-live=true min-upstream-latency=40000000 name=mixer"
                             "queue name=queue"
                             "audio/x-raw, format=S16LE, layout=interleaved, rate=48000, channels=2"
                             (gst-element audiosink
                                          buffer-time: 200000
                                          name: "sink")))
        (silence #f)
        (bin #f))
    (define (remove-silence)
      (with-unref ((silence (gst_bin_get_by_name audio "silence"))
                   (queue (gst_bin_get_by_name audio "queue")))
        (gst_element_unlink silence queue)
        (gst_element_set_state silence GST_STATE_NULL)
        (gst_bin_remove audio silence)))
    
    (define (add-channel location (volume 1.))
      (let ((input (gst-pipeline (tie "filesrc location={location}")
                                 "oggdemux name=demux"
                                 "vorbisdec"
                                 "audiodynamic threshold=1 ratio=0"
                                 "audioconvert"
                                 (tie "audio/x-raw, format=S16LE, layout=interleaved, rate=44100, channels=2")
                                 "appsink name=sink"))
            (bn (gst-bin "appsrc min-latency=40000000 name=src"
                         "audio/x-raw, format=S16LE, layout=interleaved, rate=44100, channels=2"
                         "audioresample"
                         "audio/x-raw, format=S16LE, layout=interleaved, rate=48000, channels=2"
                         (tie "volume volume={volume} name=end"))))
        (gst_object_set_name input "input")
        (gst_object_set_name bn (filename-base location))
        (gst_bin_add audio bn)
        (with-unref ((audio-mixer (gst_bin_get_by_name audio "mixer"))
                     (input-sink (gst_bin_get_by_name input "sink"))
                     (bin-src (gst_bin_get_by_name bn "src"))
                     (bin-end (gst_bin_get_by_name bn "end")))
          (gst-app-src-set-caps bin-src "audio/x-raw")
          (g-object-set bin-src
                        "is-live"     'boolean #t
                        "stream-type" 'int     GST_APP_STREAM_TYPE_STREAM
                        "format"      'int     GST_FORMAT_TIME)
          (let ((input-listener (open-stream-listener))
                (input-buffer (make-u8vector 65536))
                (input-info (make-u64vector app-sink-info-size)))
            (gst_app_sink_connect_signals input-sink input-listener)
            (let ((thread
                    (new-thread
                      (lambda ()
                        (let ((adapter (new Source-Coupler)))
                          (let (loop)
                            (let ((size (gst_app_sink_read_frame input-listener input-sink input-buffer input-info)))
                              (let ((dts (u64vector-ref input-info 0))
                                    (pts (u64vector-ref input-info 1))
                                    (duration (u64vector-ref input-info 2)))
                                (if (or (= dts GST_CLOCK_TIME_NONE)
                                        (= pts GST_CLOCK_TIME_NONE))
                                    (gst_app_src_write bin-src input-buffer size dts pts duration)
                                  (let ((timestamp-offset (adapt-time adapter bin-src pts)))
                                    (let ((dts (+ dts timestamp-offset))
                                          (pts (+ pts timestamp-offset)))
                                      (gst_app_src_write bin-src input-buffer size dts pts duration))))))
                            (loop))))
                      'channel)))
              (gst_element_link bin-end audio-mixer)
              (gst_element_set_state bn GST_STATE_PLAYING)
              (thread-start! thread)
              (gst_element_set_state input GST_STATE_PLAYING)
              (gst_bin_recalculate_latency audio)
              (new Channel location input bn thread))))
        (set! bin bn)))
    
    (gst_object_set_name audio "audio")
    (gst_element_set_state audio GST_STATE_PAUSED)
    (wait-audioclock audio "sink")
    (gst_element_set_state audio GST_STATE_PLAYING)
    (wait-playing audio)
    (remove-silence)
    (add-channel web 1.)
    (report-info audio "audiol")
    ;; application
    (boot-environment (new Test-Application))))


;; osx audio mysteries
(definition public (test-audiox)
  (define wave
    (string-argument "wave" "silence"))
  
  (let ((audio (gst-pipeline (tie "audiotestsrc samplesperbuffer=480 wave={wave} is-live=true name=silence")
                             "audio/x-raw, format=S16LE, layout=interleaved, rate=48000, channels=2"
                             (gst-element audiosink name: "sink"))))
    (gst_element_set_state audio GST_STATE_PAUSED)
    (wait-audioclock audio "sink")
    (gst_element_set_state audio GST_STATE_PLAYING)
    ;; application
    (boot-environment (new Test-Application))))


(definition (test-audiot)
  (define delay
    0)
  
  (define a-desc
    (tie
    #<<description-end
        filesrc location=a.ogg !
        oggdemux !
        vorbisdec !
        audioconvert !
        audioresample !
        audio/x-raw, format=S16LE, layout=interleaved, rate=48000, channels=2 !
        webrtcaudioprobe delay={delay} !
        osxaudiosink
description-end
))
  
  (define b-desc
    (tie
    #<<description-end
        filesrc location=b.ogg !
        oggdemux !
        vorbisdec !
        audioconvert !
        audioresample !
        webrtcaudioprocessor
            echo-cancel=true
            noise-suppression=true !
        audioconvert !
        audioresample !
        audio/x-raw, format=F32LE, layout=interleaved, rate=48000, channels=2 !
        vorbisenc !
        oggmux !
        filesink location=c.ogg sync=true
description-end
))

  (let ((a (gst_parse_launch a-desc))
        (b (gst_parse_launch b-desc)))
    (define (closer app)
      (gst_element_release a)
      (gst_element_release b))
    
    (thread-start!
      (new-thread
        (lambda ()
          (gst_element_set_state a GST_STATE_PLAYING)
          (sleep (/ delay 1000.))
          (gst_element_set_state b GST_STATE_PLAYING))
        'test))
    ;; application
    (boot-environment (new Test-Application closer: closer))))


;;;
;;;; Echo
;;;


;; TODO
;; - maybe look at how to render audio like
;;   audacity and combine it with reading raw
;;   audio correctly using a similar approach to
;;   stream reader that feeds into an appsrc


(definition replay-dir
  {Directory Home "Together" "stable" "replays" "replay_2022-04-07_10-41-57"})

(definition replay-speaker
  "Barbara")

(definition replay-listener
  "Guillaume")


(definition public (test-echo)
  (define (collect-audio target)
    (collect-files replay-dir
      (lambda (file)
        (starts-with? (get-base file) target))))
  
  (define (find-audio files str)
    (find-if (lambda (file) (search (get-base file) str)) files))
  
  (define (extract-name files)
    (let ((file (car files)))
      (car (split-string (get-base file) #\.))))
  
  (define (extract-info file)
    (let ((extension (get-extension file)))
      (bind (fmt channels rate) (split-string extension #\_)
        (list fmt (string->number rate) (string->number channels)))))
  
  (define (determine-caps info)
    (bind (fmt rate channels) info
      (tie "audio/x-raw, format={fmt}, layout=interleaved, rate={rate}, channels={channels}")))
  
  (define (determine-blocksize info)
    (bind (fmt rate channels) info
      (* (/ rate 100) (formatsize fmt) channels)))
    
  (define (formatsize fmt)
    2)

  (let ((speaker-files (collect-audio replay-speaker))
        (listener-files (collect-audio replay-listener)))
    (let ((speaker-name (extract-name speaker-files))
          (speaker-probe-file (find-audio speaker-files "audio.sink"))
          (speaker-mic-file (find-audio speaker-files "microphone.src"))
          (speaker-processor-file (find-audio speaker-files "microphone.processor"))
          (listener-name (extract-name listener-files))
          (listener-probe-file (find-audio listener-files "probe.sink" @w "audio.sink"))
          (listener-mic-file (find-audio listener-files "processor.sink" @w "microphone.src"))
          (listener-processor-file (find-audio listener-files "microphone.processor")))
      (let ((speaker-probe-info (extract-info speaker-probe-file))
            (speaker-mic-info (extract-info speaker-mic-file))
            (speaker-processor-info (extract-info speaker-processor-file))
            (listener-probe-info (extract-info listener-probe-file))
            (listener-mic-info (extract-info listener-mic-file))
            (listener-processor-info (extract-info listener-processor-file)))
        (let ((pipelines (make-table test: eq?)))
          (define (speaker-probe)
            (gst-pipeline (format "filesrc blocksize={a} name=src" (determine-blocksize speaker-probe-info))
                          (determine-caps speaker-probe-info)
                          audiosink))
          
          (define (speaker-mic)
            (gst-pipeline (format "filesrc blocksize={a} name=src" (determine-blocksize speaker-mic-info))
                          (determine-caps speaker-mic-info)
                          audiosink))
          
          (define (speaker-processor)
            (gst-pipeline (format "filesrc blocksize={a} name=src" (determine-blocksize speaker-processor-info))
                          (determine-caps speaker-processor-info)
                          audiosink))
          
          (define (speaker-probe-live)
            (gst-pipeline (format "filesrc blocksize={a} name=src" (determine-blocksize speaker-probe-info))
                          (determine-caps speaker-probe-info)
                          "queue max-size-time=200000000 name=queue"
                          "webrtcaudioprobe delay=0 name=probe"
                          audiosink))
          
          (define (speaker-mic-live)
            (gst-pipeline (format "filesrc blocksize={a} name=src" (determine-blocksize speaker-mic-info))
                          (determine-caps speaker-mic-info)
                          "volume name=volume"
                          "queue name=queue"
                          "audioresample"
                          (gst-element "webrtcaudioprocessor"
                                       echo-cancel: "true"
                                       noise-suppression: "true"
                                       gain-controller: "false"
                                       logging-severity: "info"
                                       name: "processor")
                          audiosink))
          
          (define (listener-probe)
            (gst-pipeline (format "filesrc blocksize={a} name=src" (determine-blocksize listener-probe-info))
                          (determine-caps listener-probe-info)
                          audiosink))
          
          (define (listener-mic)
            (gst-pipeline (format "filesrc blocksize={a} name=src" (determine-blocksize listener-mic-info))
                          (determine-caps listener-mic-info)
                          audiosink))
          
          (define (listener-processor)
            (gst-pipeline (format "filesrc blocksize={a} name=src" (determine-blocksize listener-processor-info))
                          (determine-caps listener-processor-info)
                          audiosink))
          
          (define (listener-probe-nonlive)
            (gst-pipeline (format "filesrc blocksize={a} name=src" (determine-blocksize listener-probe-info))
                          (determine-caps listener-probe-info)
                          "audiorate name=rate"
                          "queue max-size-time=200000000 name=queue"
                          "webrtcaudioprobe delay=0 name=probe"
                          "fakesink sync=true"))
          
          (define (listener-mic-nonlive)
            (gst-pipeline (format "filesrc blocksize={a} name=src" (determine-blocksize listener-mic-info))
                          (determine-caps listener-mic-info)
                          "audiorate"
                          "queue name=queue"
                          "audioresample"
                          (gst-element "webrtcaudioprocessor"
                                       echo-cancel: "true"
                                       noise-suppression: "true"
                                       gain-controller: "false"
                                       logging-severity: "info"
                                       name: "processor")
                          audiosink))
          
          (define (listener-probe-live)
            (gst-pipeline "appsrc name=src"
                          "audiomixer"
                          "queue max-size-time=200000000 name=queue"
                          "webrtcaudioprobe delay=0 name=probe"
                          "fakesink sync=true"))
          
          (define (listener-mic-live)
            (gst-pipeline "appsrc name=src"
                          "volume name=volume"
                          "queue name=queue"
                          "audioresample"
                          (gst-element "webrtcaudioprocessor"
                                       echo-cancel: "true"
                                       noise-suppression: "true"
                                       gain-controller: "false"
                                       logging-severity: "info"
                                       name: "processor")
                          audiosink))
          
          (define (drawer view surface)
            (set-font surface {Font Label point-size: 24})
            (let ((h 45)
                  (v 15)
                  (color {Color Dark-Red}))
              (draw-text surface h (+ v  30) (format "#1 {a}" (get-name speaker-probe-file)) color)
              (draw-text surface h (+ v  60) (format "#2 {a}" (get-name speaker-mic-file)) color)
              (draw-text surface h (+ v  90) (format "#3 {a}" (get-name speaker-processor-file)) color)
              (draw-text surface h (+ v 120) (format "#4 {a} live processing" speaker-name) color)
              (draw-text surface h (+ v 180) (format "#5 {a}" (get-name listener-probe-file)) color)
              (draw-text surface h (+ v 210) (format "#6 {a}" (get-name listener-mic-file)) color)
              (draw-text surface h (+ v 240) (format "#7 {a}" (get-name listener-processor-file)) color)
              (draw-text surface h (+ v 270) (format "#8 {a} nonlive processing" listener-name) color)
              (draw-text surface h (+ v 300) (format "#9 {a} live processing" listener-name) color)))
          
          (define (release-all)
            (table-iterate-safe pipelines
              (lambda (name info)
                (if (pair? info)
                    (bind (pipeline thread) info
                      (thread-terminate! thread)
                      (gst_bin_release pipeline))
                  (gst_bin_release info))
                (table-clear pipelines name))))
          
          (define (play name make file)
            (let ((pipeline (make)))
              (gst_object_set_name pipeline (->string name))
              (with-unref ((src (gst_bin_get_by_name pipeline "src")))
                (g_object_set_utf-8-string src "location" (path-normalize (parse file))))
              (gst_element_set_state pipeline GST_STATE_PLAYING)
              (wait-playing pipeline)
              (table-set! pipelines name pipeline)
              (format :terminal "play {a}{%}" (get-base file))))
          
          (define (play-live name make file info what)
            (let ((pipeline (make)))
              (gst_object_set_name pipeline (->string name))
              (with-unref ((appsrc (gst_bin_get_by_name pipeline "src")))
                (bind (fmt rate channels) info
                  (gst-app-src-set-caps appsrc "audio/x-raw"
                    "format"   'string fmt
                    "layout"   'string "interleaved"
                    "rate"     'int    rate
                    "channels" 'int    channels))
                (g-object-set appsrc
                              "is-live"     'boolean #t
                              "stream-type" 'int     GST_APP_STREAM_TYPE_STREAM
                              "format"      'int     GST_FORMAT_TIME)
                (let ((size (determine-blocksize info)))
                  (let ((buffer (make-u8vector size))
                        (duration (flonum->timestamp .01)))
                    (let ((thread (new-thread
                                    (lambda ()
                                      (declare (proper-tail-calls))
                                      (call-with-input-file (path-settings file)
                                        (lambda (port)
                                          (let ((adapter (new Source-Coupler)))
                                            (let (loop (timestamp 0))
                                              (let ((time (timestamp->flonum timestamp)))
                                                (let ((read (read-subu8vector buffer 0 size port)))
                                                  (when (= read size)
                                                    (let ((extra-offset 0)
                                                          (timestamp-offset (adapt-time adapter appsrc timestamp)))
                                                      (let ((dts (+ timestamp timestamp-offset extra-offset))
                                                            (pts (+ timestamp timestamp-offset extra-offset)))
                                                        (gst_app_src_write appsrc buffer size dts pts duration)))
                                                    (sleep .009)
                                                    (loop (+ timestamp duration))))))))))
                                    'input)))
                      (gst_element_set_state pipeline GST_STATE_PLAYING)
                      (table-set! pipelines name (list pipeline thread))
                      (format :terminal "play {a}{%}" (get-base file))
                      (values pipeline thread)))))))
          
          (define (play-sync probe-name probe-make probe-file probe-info mic-name mic-make mic-file mic-info)
            (receive (probe-pipeline probe-thread) (play-live probe-name probe-make probe-file probe-info 'probe)
              (receive (mic-pipeline mic-thread) (play-live mic-name mic-make mic-file mic-info 'mic)
                (wait-playing probe-pipeline)
                (wait-playing mic-pipeline)
                (thread-start! probe-thread)
                (thread-start! mic-thread))))
          
          (define (play-speaker-live)
            (play 'speaker-probe-live speaker-probe-live speaker-probe-file)
            (play 'speaker-mic-live speaker-mic-live speaker-mic-file))
          
          (define (play-listener-nonlive)
            (play 'listener-probe-nonlive listener-probe-nonlive listener-probe-file)
            (play 'listener-mic-nonlive listener-mic-nonlive listener-mic-file))
          
          (define (play-listener-live)
            (play-sync
              'listener-probe-live listener-probe-live listener-probe-file listener-probe-info
              'listener-mic-live listener-mic-live listener-mic-file listener-mic-info))
          
          (define (keyer view key)
            (case key
              ((#\0)
               (release-all)
               (format :terminal "stop all{%}"))
              ((#\1)
               (release-all)
               (play 'speaker-probe speaker-probe speaker-probe-file))
              ((#\2)
               (release-all)
               (play 'speaker-mic speaker-mic speaker-mic-file))
              ((#\3)
               (release-all)
               (play 'speaker-processor speaker-processor speaker-processor-file))
              ((#\4)
               (release-all)
               (play-speaker-live))
              ((#\5)
               (release-all)
               (play 'listener-probe listener-probe listener-probe-file))
              ((#\6)
               (release-all)
               (play 'listener-mic listener-mic listener-mic-file))
              ((#\7)
               (release-all)
               (play 'listener-processor listener-processor listener-processor-file))
              ((#\8)
               (release-all)
               (play-listener-nonlive))
              ((#\9)
               (release-all)
               (play-listener-live))
              ((#\l)
               (release-all)
               (gst_deinit)
               (report-leaks)
               (exit))))
          
          (define (closer app)
            (release-all))
          
          ;; application
          (boot-environment (new Test-Application size: {Dimension 820 390} drawer: drawer keyer: keyer closer: closer)))))))


;;;
;;;; Camera
;;;


(definition public (test-camera)
  (let ((width (get-width video-size))
        (height (get-height video-size))
        (window-width (get-width window-size))
        (window-height (get-height window-size))
        (codec video-codec)
        (framerate video-framerate)
        (bitrate video-bitrate))
    (let ((video-buffer (make-u8vector (* window-width window-height 4)))
          (video-info (make-u64vector app-sink-info-size))
          (video-mutex (make-mutex 'video))
          (transferer (make-transferer video-size))
          (pipe (open-vector))
          (listener (open-stream-listener))
          (frame-count 0)
          (draw-count 0))
      (define (with-video-mutex thunk)
        (mutex-lock! video-mutex)
        (prog1 (thunk)
          (mutex-unlock! video-mutex)))
      
      (define (drawer view surface)
        (with-video-mutex
          (lambda ()
            (increase! draw-count)
            (transferer video-buffer surface)
            (when info?
              (set-font surface {Font Label point-size: 36})
              (draw-text surface 10 16 (format "{a} skipped" (- frame-count draw-count)) {Color Red})))))
      
      ;; video
      (thread-start!
        (new-thread
          (lambda ()
            (let ((view (read pipe)))
              (let ((pipeline (gst-pipeline (gst-element videosrc name: "src")
                                            "videoscale name=scale"
                                            "videoconvert name=convert"
                                            (tie "video/x-raw, format=I420, width={width}, height={height}")
                                            "queue"
                                            (and (eq? codec 'h265) "??? name=enc")
                                            (and (eq? codec 'h264) (tie "x264enc pass=qual quantizer=20 bitrate={bitrate} tune=zerolatency speed-preset=superfast name=enc"))
                                            (and (eq? codec 'h263) "avenc_h263 name=enc")
                                            (and (eq? codec 'flv) "avenc_flv name=enc")
                                            (and (eq? codec 'mpeg4) "avenc_mpeg4 name=enc")
                                            (and (eq? codec 'mpeg2) "avenc_mpeg2video name=enc")
                                            (and (eq? codec 'mpeg1) "avenc_mpeg1video name=enc")
                                            (and (eq? codec 'vp9) "vp9enc deadline=1 name=enc")
                                            (and (eq? codec 'vp8) "vp8enc deadline=1 name=enc")
                                            (and (eq? codec 'theora) "theoraenc name=enc")
                                            (and (neq? codec 'none) "identity name=identity")
                                            (and (eq? codec 'h265) "avdec_h265 name=dec")
                                            (and (eq? codec 'h264) "avdec_h264 name=dec")
                                            (and (eq? codec 'h263) "avdec_h263 name=dec")
                                            (and (eq? codec 'flv) "avdec_flv name=dec")
                                            (and (eq? codec 'mpeg4) "avdec_mpeg4 name=dec")
                                            (and (eq? codec 'mpeg2) "avdec_mpeg2video name=dec")
                                            (and (eq? codec 'mpeg1) "avdec_mpegvideo name=dec")
                                            (and (eq? codec 'vp9) "vp9dec name=dec")
                                            (and (eq? codec 'vp8) "vp8dec name=dec")
                                            (and (eq? codec 'theora) "theoradec name=dec")
                                            "videoconvert name=convert2"
                                            "videoflip video-direction=horiz"
                                            "videoscale name=scale2"
                                            (tie "video/x-raw, format=BGRA, width={window-width}, height={window-height}")
                                            (if fps?
                                                "fpsdisplaysink video-sink=appsink name=sink"
                                              "appsink name=sink"))))
                (gst_object_set_name pipeline "pipeline")
                (with-unref ((sink (gst_bin_get_by_name pipeline "sink")))
                  (let ((process-messages (pipeline-messages-processor pipeline print?: debug?)))
                    (gst_app_sink_connect_signals sink listener)
                    (when monitor
                      (gst_monitor pipeline "sink" monitor))
                    (gst_element_set_state pipeline GST_STATE_PLAYING)
                    (process-messages)
                    (let (loop)
                      (let ((size (with-video-mutex
                                    (lambda ()
                                      (gst_app_sink_read_frame listener sink video-buffer video-info)))))
                        (increase! frame-count)
                        (invalidate-view view))
                      (process-messages)
                      (loop)))))))
          'video))
      ;; application
      (boot-environment (new Test-Application size: window-size pipe: pipe drawer: drawer)))))


;;;
;;;; Screen
;;;


(definition public (test-screen)
  (let ((width (get-width video-size))
        (height (get-height video-size))
        (window-width (get-width window-size))
        (window-height (get-height window-size))
        (codec video-codec)
        (framerate video-framerate)
        (bitrate video-bitrate))
    (let ((video-buffer (make-u8vector (* window-width window-height 4)))
          (video-info (make-u64vector app-sink-info-size))
          (video-mutex (make-mutex 'video))
          (transferer (make-transferer video-size))
          (pipe (open-vector))
          (listener (open-stream-listener))
          (frame-count 0)
          (draw-count 0))
      (define (with-video-mutex thunk)
        (mutex-lock! video-mutex)
        (prog1 (thunk)
          (mutex-unlock! video-mutex)))
      
      (define (drawer view surface)
        (with-video-mutex
          (lambda ()
            (increase! draw-count)
            (transferer video-buffer surface)
            (when info?
              (set-font surface {Font Label point-size: 36})
              (draw-text surface 10 16 (format "{a} skipped" (- frame-count draw-count)) {Color Red})))))
      
      ;; video
      (thread-start!
        (new-thread
          (lambda ()
            (let ((view (read pipe)))
              (let ((pipeline (gst-pipeline (cond-expand
                                              (mac "avfvideosrc capture-screen=true name=src")
                                              (windows "dx9screencapsrc name=src")
                                              (else "ximagesrc name=src"))
                                            (tie "videorate max-rate={framerate}")
                                            "videoscale name=scale"
                                            "videoconvert name=convert"
                                            (tie "video/x-raw, format=I420, width={width}, height={height}")
                                            "queue"
                                            (and (eq? codec 'h264) (tie "x264enc pass=qual quantizer=20 bitrate={bitrate} tune=zerolatency speed-preset=superfast name=enc"))
                                            (and (neq? codec 'none) "identity name=identity")
                                            (and (eq? codec 'h264) "avdec_h264 name=dec")
                                            "videoconvert name=convert2"
                                            "videoscale name=scale2"
                                            (tie "video/x-raw, format=BGRA, width={window-width}, height={window-height}")
                                            (if fps?
                                                "fpsdisplaysink video-sink=appsink name=sink"
                                              "appsink name=sink"))))
                (gst_object_set_name pipeline "pipeline")
                (with-unref ((sink (gst_bin_get_by_name pipeline "sink")))
                  (let ((process-messages (pipeline-messages-processor pipeline print?: debug?)))
                    (gst_app_sink_connect_signals sink listener)
                    (when monitor
                      (gst_monitor pipeline "sink" monitor))
                    (gst_element_set_state pipeline GST_STATE_PLAYING)
                    (process-messages)
                    (let (loop)
                      (let ((size (with-video-mutex
                                    (lambda ()
                                      (gst_app_sink_read_frame listener sink video-buffer video-info)))))
                        (increase! frame-count)
                        (invalidate-view view))
                      (process-messages)
                      (loop)))))))
          'video))
      ;; application
      (boot-environment (new Test-Application size: window-size pipe: pipe drawer: drawer)))))


;;;
;;;; Draw
;;;


(definition public (test-draw)
  (initialize-aliases)
  (let ((width (get-width video-size))
        (height (get-height video-size))
        (framerate video-framerate)
        (bitrate 4096))
    (let ((video-pipe (open-vector))
          (image-surface (new Image-Surface (new Dimension width height)))
          (surface-mutex (make-mutex 'surface))
          (view-pipe (open-vector))
          (frame-count 0)
          (draw-count 0))
      (define (with-surface-mutex thunk)
        (mutex-lock! surface-mutex)
        (prog1 (thunk)
          (mutex-unlock! surface-mutex)))
      
      (define (draw surface)
        (clear surface)
        (fill-rect surface (new Rect 0 0 width height) {Color Blue alpha: .6})
        (set-font surface {Font Code point-size: 60})
        (draw-text surface 110 100 "(draw-text surface)" {Color Black})
        (set-font surface {Font Label point-size: 30})
        (draw-text surface 110 200 "Hello world!" {Color Black}))
      
      (define (drawer view surface)
        (increase! draw-count)
        (clear surface)
        (fill-rect surface (new Rect 100 70 800 400) {Color Red alpha: .8})
        (with-surface-mutex
          (lambda ()
            (draw-surface surface (get-handle image-surface) 0 0)))
        (when info?
          (set-font surface {Font Label point-size: 36})
          (draw-text surface 10 16 (format "{a} skipped" (- frame-count draw-count)) {Color Red})))
      
      ;; input
      (thread-start!
        (new-thread
          (lambda ()
            (let ((color-listener (open-stream-listener))
                  (color-pipeline (gst-pipeline "appsrc name=src"
                                                "videoconvert name=convert"
                                                (tie "video/x-raw, format=I420, width={width}, height={height}, framerate={framerate}/1")
                                                (tie "x264enc pass=qual quantizer=20 bitrate={bitrate} tune=zerolatency speed-preset=superfast name=enc")
                                                "appsink name=sink")))
              (with-unref ((color-src (gst_bin_get_by_name color-pipeline "src"))
                           (color-sink (gst_bin_get_by_name color-pipeline "sink")))
                (gst_app_sink_connect_signals color-sink color-listener)
                (gst-setup-video-source color-src "video/x-raw" "BGRA" width height framerate)
                (gst_element_set_state color-pipeline GST_STATE_PLAYING)
                (let ((alpha-listener (open-stream-listener))
                      (alpha-pipeline (gst-pipeline "appsrc name=src"
                                                    (tie "x264enc pass=qual quantizer=20 bitrate={bitrate} tune=zerolatency speed-preset=superfast name=enc")
                                                    "appsink name=sink")))
                  (with-unref ((alpha-src (gst_bin_get_by_name alpha-pipeline "src"))
                               (alpha-sink (gst_bin_get_by_name alpha-pipeline "sink")))
                    (gst_app_sink_connect_signals alpha-sink alpha-listener)
                    (gst-setup-video-source alpha-src "video/x-raw" "I420" width height framerate)
                    (gst_element_set_state alpha-pipeline GST_STATE_PLAYING)
                    (let ((color-buffer (make-u8vector (* width height 4)))
                          (color-info (make-u64vector app-sink-info-size))
                          (color-bytes #f)
                          (alpha-buffer (make-u8vector (/ (* width height 12) 8)))
                          (alpha-info (make-u64vector app-sink-info-size))
                          (alpha-bytes #f)
                          (alpha-data (heap-calloc (/ (* width height 12) 8) 1))
                          (surface (new Image-Surface video-size))
                          (start #f))
                      (let (loop)
                        (when (and (not color-bytes) (not alpha-bytes))
                          (draw surface)
                          (set! start (real-time))
                          (let ((data (cairo_image_surface_get_data (get-handle surface)))
                                (size (* width height 4))
                                (alpha-size (/ (* width height 12) 8))
                                (duration 100))
                            (separate-alpha data alpha-data (* width height))
                            (gst_app_src_write_pointer_now color-src data size duration)
                            (gst_app_src_write_pointer_now alpha-src alpha-data alpha-size duration)))
                        (heap-free alpha-data)
                        (when (not color-bytes)
                          (let ((size (gst_app_sink_read_frame color-listener color-sink color-buffer color-info)))
                            (set! color-bytes size)))
                        (when (not alpha-bytes)
                          (let ((size (gst_app_sink_read_frame alpha-listener alpha-sink alpha-buffer alpha-info)))
                            (set! alpha-bytes size)))
                        (when (and color-bytes alpha-bytes)
                          ;(terminal (- (real-time) start) color-bytes alpha-bytes)
                          (let ((dts (u64vector-ref color-info 0))
                                (pts (u64vector-ref color-info 1))
                                (duration (u64vector-ref color-info 2)))
                            (write (list (u8vector-copy color-buffer) color-bytes (u8vector-copy alpha-buffer) alpha-bytes dts pts duration) video-pipe)
                            (force-output video-pipe))
                          (set! color-bytes #f)
                          (set! alpha-bytes #f))
                        (loop))))))))
          'input))
      ;; output
      (thread-start!
        (new-thread
          (lambda ()
            (let ((view (read view-pipe)))
              (let ((color-listener (open-stream-listener))
                    (color-pipeline (gst-pipeline "appsrc name=src"
                                                  "avdec_h264 name=dec"
                                                  "videoconvert name=convert"
                                                  (tie "video/x-raw, format=BGRA, width={width}, height={height}, framerate={framerate}/1")
                                                  "appsink name=sink")))
                (with-unref ((color-src (gst_bin_get_by_name color-pipeline "src"))
                             (color-sink (gst_bin_get_by_name color-pipeline "sink")))
                  (gst_app_sink_connect_signals color-sink color-listener)
                  (gst-setup-video-source color-src "video/x-h264" "I420" width height framerate stream-format: "avc" alignment: "au")
                  (gst_element_set_state color-pipeline GST_STATE_PLAYING)
                  (let ((alpha-listener (open-stream-listener))
                        (alpha-pipeline (gst-pipeline "appsrc name=src"
                                                      "avdec_h264 name=dec"
                                                      "appsink name=sink")))
                    (with-unref ((alpha-src (gst_bin_get_by_name alpha-pipeline "src"))
                                 (alpha-sink (gst_bin_get_by_name alpha-pipeline "sink")))
                      (gst_app_sink_connect_signals alpha-sink alpha-listener)
                      (gst-setup-video-source alpha-src "video/x-h264" "I420" width height framerate stream-format: "avc" alignment: "au")
                      (gst_element_set_state alpha-pipeline GST_STATE_PLAYING)
                      (let ((color-buffer (make-u8vector (* width height 4)))
                            (color-info (make-u64vector app-sink-info-size))
                            (color-bytes #f)
                            (alpha-buffer (make-u8vector (/ (* width height 12) 8)))
                            (alpha-info (make-u64vector app-sink-info-size))
                            (alpha-bytes #f))
                        (let (loop)
                          (when (and (not color-bytes) (not alpha-bytes))
                            (let ((info (read video-pipe)))
                              (bind (buffer bytes alpha-buffer alpha-bytes dts pts duration) info
                                (gst_app_src_write_now color-src buffer bytes duration)
                                (gst_app_src_write_now alpha-src alpha-buffer alpha-bytes duration))))
                          (when (not color-bytes)
                            (let ((size (gst_app_sink_read_frame color-listener color-sink color-buffer color-info)))
                              (set! color-bytes size)))
                          (when (not alpha-bytes)
                            (let ((size (gst_app_sink_read_frame alpha-listener alpha-sink alpha-buffer alpha-info)))
                              (set! alpha-bytes size)))
                          (when (and color-bytes alpha-bytes)
                            (increase! frame-count)
                            (with-surface-mutex
                              (lambda ()
                                (cairo_surface_flush (get-handle image-surface))
                                (combine-alpha color-buffer alpha-buffer (cairo_image_surface_get_data (get-handle image-surface)) (* width height))
                                (cairo_surface_mark_dirty (get-handle image-surface))))
                            (invalidate-view view)
                            (set! color-bytes #f)
                            (set! alpha-bytes #f))
                          (loop)))))))))
          'output))
      ;; application
      (boot-environment (new Test-Application size: video-size pipe: view-pipe drawer: drawer)))))


;;;
;;;; App
;;;


;; PLUGINS
;; - adder: Add N audio channels together
;; - audioamplify: Amplifies an audio stream by a given factor
;; - mpg123audiodec: Decodes mp3 streams using the mpg123 library
;; - openalsrc: Input audio through OpenAL
;; - openalsink: Output audio through OpenAL
;; - opusenc: Encodes audio in Opus format
;; - opusdec: decode opus streams to audio
;; - speexenc: Encodes audio in Speex format
;; - speexdec: decode speex streams to audio
;; - wavenc: Encode raw audio into WAV
;; - wavpackdec: Decodes Wavpack audio data	wavpack	gst-plugins-good
;; - wavpackenc: Encodes audio with the Wavpack lossless/lossy audio codec
;; - netsim: Network Simulator

;; QUESTIONS
;; - make opus codec work
;; - how to determine audio max size
;; - what format / layout / rate / channels to use for audio
;; - why the big delay with audio
;; - why is no codec audio not working


(definition public (test-app)
  (let ((width (get-width video-size))
        (height (get-height video-size))
        (codec video-codec)
        (framerate video-framerate)
        (bitrate video-bitrate))
    (let ((audio-pipe (open-vector))
          (video-pipe (open-vector))
          (video-buffer (make-u8vector (* width height 4)))
          (video-info (make-u64vector app-sink-info-size))
          (video-mutex (make-mutex 'video))
          (transferer (make-transferer video-size))
          (pipe (open-vector))
          (frame-size 0)
          (frame-count 0)
          (draw-count 0))
      (define (with-video-mutex thunk)
        (mutex-lock! video-mutex)
        (prog1 (thunk)
          (mutex-unlock! video-mutex)))
      
      (define (drawer view surface)
        (with-video-mutex
          (lambda ()
            (increase! draw-count)
            (transferer video-buffer surface)
            (when info?
              (set-font surface {Font Label point-size: 36})
              (draw-text surface 10 16 (format "{r precision: 1} kb, {a} skipped" (/ (cast <fl> frame-size) 1024.) (- frame-count draw-count)) {Color Red})))))
      
      ;; audio input
      (when audio?
        (thread-start!
          (new-thread
            (lambda ()
              (let ((codec audio-codec))
                (let ((listener (open-stream-listener))
                      (pipeline (gst-pipeline (cond ((eq? codec 'opus)
                                                     "autoaudiosrc format=S16LE layout=interleaved rate=48000 channels=2 name=src")
                                                    ((eq? codec 'vorbis)
                                                     "autoaudiosrc format=F32LE layout=interleaved rate=48000 channels=2 name=src")
                                                    (else
                                                     "autoaudiosrc format=F32LE layout=interleaved rate=48000 channels=2 name=src"))
                                              (and (eq? codec 'opus)
                                                   "audioresample")
                                              (and (eq? codec 'opus) (tie "opusenc name=enc"))
                                              (and (eq? codec 'vorbis) (tie "vorbisenc name=enc"))
                                              "appsink name=sink")))
                  (gst_object_set_name pipeline "input")
                  (with-unref ((sink (gst_bin_get_by_name pipeline "sink")))
                    (let ((process-messages (pipeline-messages-processor pipeline print?: debug?)))
                      (when monitor
                        (gst_monitor pipeline "sink" monitor))
                      (gst_app_sink_connect_signals sink listener)
                      (gst_element_set_state pipeline GST_STATE_PLAYING)
                      (let ((buffer (make-u8vector 4096))
                            (info (make-u64vector app-sink-info-size)))
                        (let (loop)
                          (let ((size (gst_app_sink_read_frame listener sink buffer info)))
                            (let ((dts (u64vector-ref info 0))
                                  (pts (u64vector-ref info 1))
                                  (duration (u64vector-ref info 2)))
                              (write (list (u8vector-copy buffer) size dts pts duration) audio-pipe)
                              (force-output audio-pipe)))
                          (process-messages)
                          (loop))))))))
            'audio-input)))
      ;; video input
      (when video?
        (thread-start!
          (new-thread
            (lambda ()
              (let ((listener (open-stream-listener))
                    (pipeline (gst-pipeline (gst-element videosrc name: "src")
                                            "videoscale name=scale"
                                            "videoconvert name=convert"
                                            (tie "video/x-raw, format=I420, width={width}, height={height}, framerate={framerate}/1")
                                            "queue"
                                            (and (eq? codec 'h264) (tie "x264enc pass=qual quantizer=20 bitrate={bitrate} tune=zerolatency speed-preset=superfast name=enc"))
                                            (and (eq? codec 'vp8) "vp8enc deadline=1 name=enc")
                                            "appsink name=sink")))
                (gst_object_set_name pipeline "input")
                (with-unref ((sink (gst_bin_get_by_name pipeline "sink")))
                  (let ((process-messages (pipeline-messages-processor pipeline print?: debug?)))
                    (when monitor
                      (gst_monitor pipeline "sink" monitor))
                    (gst_app_sink_connect_signals sink listener)
                    (gst_element_set_state pipeline GST_STATE_PLAYING)
                    (process-messages)
                    (let ((buffer (make-u8vector (* width height 4)))
                          (info (make-u64vector app-sink-info-size)))
                      (let (loop)
                        (let ((size (gst_app_sink_read_frame listener sink buffer info)))
                          (let ((dts (u64vector-ref info 0))
                                (pts (u64vector-ref info 1))
                                (duration (u64vector-ref info 2)))
                            (write (list (u8vector-copy buffer) size dts pts duration) video-pipe)
                            (force-output video-pipe)))
                        (process-messages)
                        (loop)))))))
            'video-input)))
      ;; lag
      (when lag
        (sleep lag))
      ;; audio output
      (when audio?
        (thread-start!
          (new-thread
            (lambda ()
              (let ((codec audio-codec))
                (let ((pipeline (gst-pipeline "appsrc name=src"
                                              (and (eq? codec 'opus) "opusdec name=dec")
                                              (and (eq? codec 'vorbis) "vorbisdec name=dec")
                                              (gst-element audiosink
                                                           buffer-time: "200000"
                                                           name: "sink"))))
                  (gst_object_set_name pipeline "output")
                  (with-unref ((src (gst_bin_get_by_name pipeline "src")))
                    (let ((process-messages (pipeline-messages-processor pipeline print?: debug?)))
                      (when monitor
                        (gst_monitor pipeline "sink" monitor))
                      (case codec
                        ((vorbis)
                         (gst-app-src-set-caps src "audio/x-vorbis"))
                        ((opus)
                         (gst-app-src-set-caps src "audio/x-opus"
                           "channel-mapping-family" 'int 0))
                        (else
                         (gst-app-src-set-caps src "audio/x-raw"
                           "format"   'string "F32LE"
                           "layout"   'string "interleaved"
                           "rate"     'int    48000
                           "channels" 'int    2)))
                      (g-object-set src
                        "is-live"     'boolean #t
                        "stream-type" 'int     GST_APP_STREAM_TYPE_STREAM
                        "format"      'int     GST_FORMAT_TIME)
                      (gst_element_set_state pipeline GST_STATE_PLAYING)
                      (process-messages)
                      (let (loop)
                        (let ((info (read audio-pipe)))
                          (bind (buffer size dts pts duration) info
                            (gst_app_src_write_now src buffer size duration)))
                        (process-messages)
                        (loop)))))))
            'audio-output)))
      ;; video output
      (when video?
        (thread-start!
          (new-thread
            (lambda ()
              (let ((view (read pipe)))
                (let ((listener (open-stream-listener))
                      (pipeline (gst-pipeline "appsrc name=src"
                                              (and (eq? codec 'h264) "avdec_h264 name=dec")
                                              (and (eq? codec 'vp8) "vp8dec name=dec")
                                              "videoconvert name=convert"
                                              "videoflip video-direction=horiz"
                                              (tie "video/x-raw, format=BGRA, width={width}, height={height}, framerate={framerate}/1")
                                              "queue"
                                              (if fps?
                                                  "fpsdisplaysink video-sink=appsink name=sink"
                                                "appsink name=sink"))))
                  (gst_object_set_name pipeline "output")
                  (with-unref ((src (gst_bin_get_by_name pipeline "src"))
                               (sink (gst_bin_get_by_name pipeline "sink")))
                    (let ((process-messages (pipeline-messages-processor pipeline print?: debug?)))
                      (when monitor
                        (gst_monitor pipeline "sink" monitor))
                      (gst_app_sink_connect_signals sink listener)
                      (case codec
                        ((h264)
                         (gst-app-src-set-caps src "video/x-h264"
                           "width"         'int      width
                           "height"        'int      height
                           "framerate"     'fraction (cons framerate 1)
                           "stream-format" 'string   "avc"
                           "alignment"     'string   "au"))
                        ((vp8)
                         (gst-app-src-set-caps src "video/x-vp8"
                           "width"         'int      width
                           "height"        'int      height
                           "framerate"     'fraction (cons framerate 1)
                           "stream-format" 'string   "avc"
                           "alignment"     'string   "au"))
                        (else
                         (gst-app-src-set-caps src "video/x-raw"
                           "format"    'string   "I420"
                           "width"     'int      width
                           "height"    'int      height
                           "framerate" 'fraction (cons framerate 1))))
                      (g-object-set src
                        "is-live"     'boolean #t
                        "stream-type" 'int GST_APP_STREAM_TYPE_STREAM
                        "format"      'int GST_FORMAT_TIME)
                      (gst_element_set_state pipeline GST_STATE_PLAYING)
                      (process-messages)
                      (let (loop)
                        (let ((info (read video-pipe)))
                          (bind (buffer size dts pts duration) info
                            (set! frame-size size)
                            (gst_app_src_write_now src buffer size duration)))
                        (let ((size (with-video-mutex
                                      (lambda ()
                                        (gst_app_sink_read_frame listener sink video-buffer video-info)))))
                          (increase! frame-count)
                          (invalidate-view view))
                        (process-messages)
                        (loop)))))))
            'video-output)))
      ;; application
      (boot-environment (new Test-Application size: video-size pipe: pipe drawer: (and video? drawer))))))


;;;
;;;; OGG
;;;


(definition public (test-ogg)
  ;; audio
  (thread-start!
    (new-thread
      (lambda ()
        (let ((pipeline (gst_pipeline_new "audio-player"))
              (filename (or media "~/Media/test.ogg")))
          (let ((source   (gst_element_factory_make "filesrc"       "file-source"))
                (demuxer  (gst_element_factory_make "oggdemux"      "ogg-demuxer"))
                (decoder  (gst_element_factory_make "vorbisdec"     "vorbis-decoder"))
                (conv     (gst_element_factory_make "audioconvert"  "converter"))
                (resamp   (gst_element_factory_make "audioresample" "resampler"))
                (volume   (gst_element_factory_make "volume"        "volume"))
                (panorama (gst_element_factory_make "audiopanorama" "audiopanorama"))
                (winconv  (cond-expand
                            (windows (gst_element_factory_make "audioconvert" "winconv"))
                            (else)))
                (sink     (gst_element_factory_make "autoaudiosink" "audio-output")))
            (g_object_set_utf-8-string source "location" (path-normalize filename))
            (gst_bin_add pipeline source)
            (gst_bin_add pipeline demuxer)
            (gst_bin_add pipeline decoder)
            (gst_bin_add pipeline conv)
            (gst_bin_add pipeline resamp)
            (gst_bin_add pipeline volume)
            (gst_bin_add pipeline panorama)
            (cond-expand
              (windows (gst_bin_add pipeline winconv))
              (else))
            (gst_bin_add pipeline sink)
            (gst_element_link source demuxer)
            (gst_element_link demuxer decoder)
            (gst_element_link decoder conv)
            (gst_element_link conv resamp)
            (gst_element_link resamp volume)
            (gst_element_link volume panorama)
            (cond-expand
              (windows
               (gst_element_link panorama winconv)
               (gst_element_link winconv sink))
              (else
               (gst_element_link panorama sink)))
            (g_object_set_double volume "volume" .1)
            (g_object_set_double panorama "panorama" -1.)
            (gst_signal_connect_to demuxer "pad-added" decoder)
            (when monitor
              (gst_print_messages pipeline))
            (gst_element_set_state pipeline GST_STATE_PLAYING)
            ;; augment volume
            (let ((vol .1))
              (thread-start!
                (new-thread
                  (lambda ()
                    (let (loop)
                      (set! vol (min (* vol 1.025) 1.))
                      (g_object_set_double volume "volume" vol)
                      (sleep .1)
                      (loop)))
                  'volume)))
            ;; pan left to right
            (let ((pan -1.))
              (thread-start!
                (new-thread
                  (lambda ()
                    (let (loop)
                      (set! pan (min (+ pan .01) 1.))
                      (g_object_set_double panorama "panorama" pan)
                      (sleep .1)
                      (loop)))
                  'panorama))))))
      'ogg))
  ;; application
  (boot-environment (new Test-Application)))


;;;
;;;; WAV
;;;


(define (play-explosion)
  (let ((pipeline (gst_pipeline_new "audio-player"))
        (filename (or media "~/Media/test.wav")))
    (let ((source  (gst_element_factory_make "filesrc"       "file-source"))
          (decoder (gst_element_factory_make "wavparse"      "wavparse"))
          (conv    (gst_element_factory_make "audioconvert"  "converter"))
          (resamp  (gst_element_factory_make "audioresample" "resampler"))
          (sink    (gst_element_factory_make "autoaudiosink" "audio-output")))
      (g_object_set_utf-8-string source "location" (path-normalize filename))
      (gst_bin_add pipeline source)
      (gst_bin_add pipeline decoder)
      (gst_bin_add pipeline conv)
      (gst_bin_add pipeline resamp)
      (gst_bin_add pipeline sink)
      (gst_element_link source decoder)
      (gst_element_link decoder conv)
      (gst_element_link conv resamp)
      (gst_element_link resamp sink)
      (gst_element_set_state pipeline GST_STATE_PLAYING))))


(definition public (test-wav)
  ;; audio
  (thread-start!
    (new-thread
      (lambda ()
        (loop (repeat 20)
              (play-explosion)
              (sleep .1)))
      'wav))
  ;; application
  (boot-environment (new Test-Application)))


;;;
;;;; JPEG
;;;


(definition public (test-jpeg)
  (initialize-aliases)
  (let ((width (get-width video-size))
        (height (get-height video-size))
        (window-width (get-width window-size))
        (window-height (get-height window-size))
        (file (new File (tokenise-filename (or media "~/Media/test.jpg")))))
    (let ((image-surface (create-cairo-surface-from-jpeg file)))
      (define (drawer view surface)
        (blit-surface surface image-surface))
      
      ;; application
      (boot-environment (new Test-Application size: window-size drawer: drawer)))))


;;;
;;;; Media
;;;


(definition public (test-media)
  (let ((width (get-width video-size))
        (height (get-height video-size))
        (codec 'none)
        (framerate video-framerate)
        (bitrate video-bitrate))
    (let ((audio-pipe (open-vector))
          (video-pipe (open-vector))
          (video-buffer (make-u8vector (* width height 4)))
          (video-info (make-u64vector app-sink-info-size))
          (video-mutex (make-mutex 'video))
          (transferer (make-transferer video-size))
          (pipe (open-vector))
          (frame-size 0)
          (frame-count 0)
          (draw-count 0))
      (define (with-video-mutex thunk)
        (mutex-lock! video-mutex)
        (prog1 (thunk)
          (mutex-unlock! video-mutex)))
      
      (define (drawer view surface)
        (with-video-mutex
          (lambda ()
            (increase! draw-count)
            (transferer video-buffer surface)
            (when info?
              (set-font surface {Font Label point-size: 36})
              (draw-text surface 10 16 (format "{r precision: 1} kb, {a} skipped" (/ (cast <fl> frame-size) 1024.) (- frame-count draw-count)) {Color Red})))))
      
      ;; input
      (let ((listener (open-stream-listener))
            (audio-listener (open-stream-listener))
            (pipeline (gst-pipeline (tie "filesrc name=filesrc")
                                    "decodebin name=decoder"
                                    (list "decoder."
                                          "queue"
                                          "audioconvert"
                                          "audioresample"
                                          "audio/x-raw, format=S16LE, layout=interleaved, rate=48000, channels=2"
                                          "appsink name=audioappsink")
                                    (list "decoder."
                                          "videoscale"
                                          "videoconvert"
                                          (tie "video/x-raw, format=I420, width={width}, height={height}, pixel-aspect-ratio=(fraction)1/1")
                                          "appsink name=videoappsink")))
            (filename (or media "~/Media/sintel.webm")))
        (with-unref ((source (gst_bin_get_by_name pipeline "filesrc"))
                     (video-appsink (gst_bin_get_by_name pipeline "videoappsink"))
                     (audio-appsink (gst_bin_get_by_name pipeline "audioappsink")))
          (let ((video-data (make-u8vector (* width height 4)))
                (video-info (make-u64vector app-sink-info-size))
                (audio-buffer (make-u8vector 65536))
                (audio-info (make-u64vector app-sink-info-size))
                (process-messages (pipeline-messages-processor pipeline print?: debug?)))
            (gst_app_sink_connect_signals video-appsink listener)
            (gst_app_sink_connect_signals audio-appsink audio-listener)
            (g_object_set_utf-8-string source "location" (path-normalize filename))
            (gst_element_set_state pipeline GST_STATE_PLAYING)
            (let (;; audio input
                  (audio-input-thread
                    (new-thread
                      (lambda ()
                        (let (loop)
                          (let ((size (gst_app_sink_read_frame audio-listener audio-appsink audio-buffer audio-info)))
                            (let ((dts (u64vector-ref audio-info 0))
                                  (pts (u64vector-ref audio-info 1))
                                  (duration (u64vector-ref audio-info 2)))
                              (write (list (u8vector-copy audio-buffer) size dts pts duration) audio-pipe)
                              (force-output audio-pipe)))
                          (process-messages)
                          (loop)))
                      'audio-input))
                  ;; video input
                  (video-input-thread
                    (new-thread
                      (lambda ()
                        (let (loop)
                          (let ((size (gst_app_sink_read_frame listener video-appsink video-buffer video-info)))
                            (let ((dts (u64vector-ref video-info 0))
                                  (pts (u64vector-ref video-info 1))
                                  (duration (u64vector-ref video-info 2)))
                              (write (list (u8vector-copy video-buffer) size dts pts duration) video-pipe)
                              (force-output video-pipe)))
                          (loop)))
                      'video-input))
                  ;; audio output
                  (audio-output-thread
                    (new-thread
                      (lambda ()
                        (let ((codec 'none))
                          (let ((pipeline (gst-pipeline "appsrc name=src"
                                                        "queue"
                                                        (and (eq? codec 'opus) "opusdec name=dec")
                                                        (and (eq? codec 'vorbis) "vorbisdec name=dec")
                                                        (gst-element audiosink
                                                                     buffer-time: "200000"
                                                                     name: "sink"))))
                            (gst_object_set_name pipeline "output")
                            (with-unref ((src (gst_bin_get_by_name pipeline "src")))
                              (let ((process-messages (pipeline-messages-processor pipeline print?: debug?)))
                                (when monitor
                                  (gst_monitor pipeline "sink" monitor))
                                (case codec
                                  ((vorbis)
                                   (gst-app-src-set-caps src "audio/x-vorbis"))
                                  (else
                                   (gst-app-src-set-caps src "audio/x-raw"
                                     "format"   'string "S16LE"
                                     "layout"   'string "interleaved"
                                     "rate"     'int    48000
                                     "channels" 'int    2)))
                                (g-object-set src
                                              "is-live"     'boolean #t
                                              "stream-type" 'int     GST_APP_STREAM_TYPE_STREAM
                                              "format"      'int     GST_FORMAT_TIME)
                                (gst_element_set_state pipeline GST_STATE_PLAYING)
                                (process-messages)
                                (let (loop)
                                  (let ((info (read audio-pipe)))
                                    (bind (buffer size dts pts duration) info
                                      (gst_app_src_write_now src buffer size duration)))
                                  (process-messages)
                                  (loop)))))))
                      'audio-output))
                  ;; video output
                  (video-output-thread
                    (new-thread
                      (lambda ()
                        (let ((view (read pipe)))
                          (let ((listener (open-stream-listener))
                                (pipeline (gst-pipeline "appsrc name=src"
                                                        (and (eq? codec 'h264) "avdec_h264 name=dec")
                                                        (and (eq? codec 'vp8) "vp8dec name=dec")
                                                        "videoconvert name=convert"
                                                        (tie "video/x-raw, format=BGRA, width={width}, height={height}, framerate={framerate}/1")
                                                        "queue"
                                                        (if fps?
                                                            "fpsdisplaysink video-sink=appsink name=sink"
                                                          "appsink name=sink"))))
                            (gst_object_set_name pipeline "output")
                            (with-unref ((src (gst_bin_get_by_name pipeline "src"))
                                         (sink (gst_bin_get_by_name pipeline "sink")))
                              (let ((process-messages (pipeline-messages-processor pipeline print?: debug?)))
                                (when monitor
                                  (gst_monitor pipeline "sink" monitor))
                                (gst_app_sink_connect_signals sink listener)
                                (case codec
                                  ((h264)
                                   (gst-app-src-set-caps src "video/x-h264"
                                     "width"         'int      width
                                     "height"        'int      height
                                     "framerate"     'fraction (cons framerate 1)
                                     "stream-format" 'string   "avc"
                                     "alignment"     'string   "au"))
                                  ((vp8)
                                   (gst-app-src-set-caps src "video/x-vp8"
                                     "width"         'int      width
                                     "height"        'int      height
                                     "framerate"     'fraction (cons framerate 1)
                                     "stream-format" 'string   "avc"
                                     "alignment"     'string   "au"))
                                  (else
                                   (gst-app-src-set-caps src "video/x-raw"
                                     "format"    'string   "I420"
                                     "width"     'int      width
                                     "height"    'int      height
                                     "framerate" 'fraction (cons framerate 1))))
                                (g-object-set src
                                              "is-live"     'boolean #t
                                              "stream-type" 'int     GST_APP_STREAM_TYPE_STREAM
                                              "format"      'int     GST_FORMAT_TIME)
                                (gst_element_set_state pipeline GST_STATE_PLAYING)
                                (process-messages)
                                (let (loop)
                                  (let ((info (read video-pipe)))
                                    (bind (buffer size dts pts duration) info
                                      (set! frame-size size)
                                      (gst_app_src_write_now src buffer size duration)))
                                  (let ((size (with-video-mutex
                                                (lambda ()
                                                  (gst_app_sink_read_frame listener sink video-buffer video-info)))))
                                    (increase! frame-count)
                                    (invalidate-view view))
                                  (process-messages)
                                  (loop)))))))
                      'video-output)))
              (thread-base-priority-set! audio-input-thread 100)
              (thread-base-priority-set! video-input-thread 100)
              (thread-base-priority-set! audio-output-thread 100)
              (thread-base-priority-set! video-output-thread 100)
              (thread-start! audio-input-thread)
              (thread-start! video-input-thread)
              (thread-start! audio-output-thread)
              (thread-start! video-output-thread)))))
      ;; application
      (boot-environment (new Test-Application size: video-size pipe: pipe drawer: drawer)))))


;;;
;;;; Leak
;;;


(definition public (test-leak)
  (let ((pipeline (gst-pipeline "appsrc name=src ! avdec_h264 name=dec ! appsink name=sink"))
        (width 640)
        (height 360)
        (framerate 10))
    (with-unref ((appsrc (gst_bin_get_by_name pipeline "src"))
                 (appsink (gst_bin_get_by_name pipeline "sink"))
                 (dec (gst_bin_get_by_name pipeline "dec")))
      (let ((data (make-u8vector (* width height 4)))
            (info (make-u64vector app-sink-info-size)))
        (gst-app-src-set-caps appsrc "video/x-h264"
          "width"         'int      width
          "height"        'int      height
          "framerate"     'fraction (cons framerate 1)
          "stream-format" 'string   "avc"
          "alignment"     'string   "au")
        (g-object-set appsrc
          "is-live"     'boolean #t
          "stream-type" 'int GST_APP_STREAM_TYPE_STREAM
          "format"      'int GST_FORMAT_TIME)
        (gst_element_set_state pipeline GST_STATE_PLAYING)
        (wait-playing pipeline)
        (gst_element_set_state pipeline GST_STATE_NULL)
        (gst_object_unref pipeline))))
  (gst_deinit))


(definition public (test-leak2)
  (let ((pipeline (gst-pipeline "audiotestsrc samplesperbuffer=480 wave=silence is-live=true name=silence"
                                "audiomixer"
                                "queue max-size-time=200000000 name=queue"
                                "webrtcaudioprobe"
                                "audio/x-raw, format=S16LE, layout=interleaved, rate=48000, channels=2"
                                (gst-element audiosink name: "sink"))))
    (gst_element_set_state pipeline GST_STATE_PLAYING)
    (wait-playing pipeline)
    (sleep .5)
    (gst_element_set_state pipeline GST_STATE_NULL)
    (gst_object_unref pipeline))
  (gst_deinit)
  (report-leaks))


(definition public (test-leakt)
  (let ((pipeline (gst_pipeline_new "pipeline")))
    (let ((src (gst_element_factory_make "audiotestsrc" "src"))
          (mix (gst_element_factory_make "audiomixer" "mix"))
          (sink (gst_element_factory_make "osxaudiosink" "sink")))
      (define (add-sound n)
        (let ((sound (gst_element_factory_make "audiotestsrc" (format "sound{a}" n))))
          (gst_bin_add pipeline sound)
          (gst_element_link sound mix)
          (gst_element_sync_state_with_parent sound)
          sound))
      
      @comment
      (method protected (add-sink self sink)
        (setup sink)
        (let ((bin (get-bin sink)))
          (set-pipeline sink pipeline)
          (with-unref ((mix (gst_bin_get_by_name pipeline "mix")))
            (gst_bin_add pipeline bin)
            (with-unref ((pan (gst_bin_get_by_name bin "panorama")))
              (gst_element_link pan mix))))
        (recalculate-latency self))
      
      (define (add-soundbin n)
        (let ((bin (gst_bin_new (format "bin{a}" n))))
          (let ((sound (gst_element_factory_make "audiotestsrc" (format "sound{a}" n))))
            (gst_bin_add bin sound)
            (gst_bin_add pipeline bin)
            (gst_element_link sound mix)
            (gst_element_sync_state_with_parent bin)
            bin)))
      
      (define (remove-sound sound)
        (with-unref ((sound-pads (gst_element_pads sound)))
          (let ((sound-pad (car sound-pads)))
            (let ((mix-pad (gst_pad_get_peer sound-pad)))
              (source-send/wait-eos sound mix-pad)
              (gst_element_unlink sound mix)
              (gst_element_release_request_pad mix mix-pad)
              (gst_object_unref mix-pad)
              (gst_element_set_state sound GST_STATE_NULL)
              (gst_bin_remove pipeline sound)))))
      
      @comment
      (method protected (remove-sink self sink)
        (let ((bin (get-bin sink)))
          (with-unref ((pads (gst_element_src_pads bin)))
            (let ((ghost-pad (car pads)))
              (with-unref ((pan (gst_bin_get_by_name bin "panorama"))
                           (mix (gst_bin_get_by_name pipeline "mix")))
                (with-unref ((mixer-pad (gst_pad_get_peer ghost-pad)))
                  (gst_element_unlink pan mix)
                  (gst_element_release_request_pad mix mixer-pad)))))
          (gst_element_set_state bin GST_STATE_NULL)
          (gst_bin_remove pipeline bin)
          (gst_object_unref bin)
          (recalculate-latency self)))
      
      @w
      (define (remove-soundbin n)
        (let ((bin (gst_bin_get_by_name_aux pipeline (format "bin{a}" n))))
          (with-unref ((sound-pads (gst_element_pads sound)))
            (let ((sound-pad (car sound-pads)))
              (let ((mix-pad (gst_pad_get_peer sound-pad)))
                (source-send/wait-eos sound mix-pad)
                (gst_element_unlink sound mix)
                (gst_element_release_request_pad mix mix-pad)
                (gst_object_unref mix-pad)
                (gst_element_set_state sound GST_STATE_NULL)
                (gst_bin_remove pipeline sound)
                (terminal 'sound (gst_object_refcount sound))
                (gst_object_unref sound))))))
      
      (define (source-send/wait-eos src pad)
        (let ((listener (open-stream-listener)))
          (gst_pad_connect_eos pad (get-write-file listener))
          (gst_element_send_event src (gst_event_new_eos))
          (wait listener)))
      
      (gst_bin_add pipeline src)
      (gst_bin_add pipeline mix)
      (gst_bin_add pipeline sink)
      (gst_element_link src mix)
      (gst_element_link mix sink)
      (gst_element_set_state pipeline GST_STATE_PLAYING)
      (wait-playing pipeline)
      
      (terminal 'NO 'SOUND)
      (sleep .5)
      
      (let ((sound0 (add-sound 0))
            @w(sound1 (add-sound 1))
            @w(sound2 (add-sound 2)))
        (terminal 'MANY 'SOUNDS)
        (sleep .5)
        
        (remove-sound sound0)
        @w(remove-sound sound1)
        @w(remove-sound sound2)
        (terminal 'NO 'SOUND)
        (sleep .5))
      
      @w(let ((tracers (collect-active-tracers)))
        (if (null? tracers)
            (terminal 'no 'tracers 'found)
          (let ((leaks-tracer (car tracers)))
            (g_signal_emit_by_name leaks-tracer "log-live-objects"))
          (report-leaks)
          (exit))))
      
      (gst_element_set_state pipeline GST_STATE_NULL)
      (report-count pipeline)
      (gst_object_unref pipeline))
  (terminal 'deinit)
  (gst_deinit)
  (terminal 'report)
  (report-leaks))


(definition (report-count bin)
  (define (report-element elem (extra 0))
    (format :terminal "{a} {a} {a}{%}"
      (g_object_class_name elem)
      (gst_object_get_name elem)
      (- (gst_object_refcount elem) extra)))
  
  (report-element bin)
  (with-unref ((elements (gst_bin_elements_recurse bin)))
    (for-each (lambda (elem)
                (report-element elem 1)
                (with-unref ((pads (gst_element_pads elem)))
                  (for-each (lambda (pad)
                              (prog1 (let ((dir (gst_pad_get_direction pad)))
                                       (format :terminal "  {a} {a} {a}{%}"
                                         (g_object_class_name pad)
                                         (ecase dir
                                           ((GST_PAD_SRC) 'src)
                                           ((GST_PAD_SINK) 'sink))
                                         (- (gst_object_refcount pad) 1)))))
                            pads)))
              (reverse elements))))


;;;
;;;; Gambit
;;;


(definition public (test-gambit)
  (let ((start (current-monotonic))
        (received 0)
        (received-mutex (make-mutex 'received))
        (last-report (current-monotonic))
        (spawn (or spawn 1))
        (period (or period .001)))
    (define (received-buffer)
      (mutex-lock! received-mutex)
      (increase! received)
      (let ((now (current-monotonic)))
        (when (> now (+ last-report 1))
          (terminal (/ (- now start) (/ received spawn)))
          (set! last-report now)))
      (mutex-unlock! received-mutex))
    
    (define (start-pipeline)
      (let ((pipe (open-vector)))
        ;; input
        (thread-start!
          (new-thread
            (lambda ()
              (declare (proper-tail-calls))
              (let ((buffer (object->u8vector (naturals 1 100))))
                (let (loop)
                  (write buffer pipe)
                  (sleep period)
                  (loop))))
            'input))
        ;; output
        (thread-start!
          (new-thread
            (lambda ()
              (declare (proper-tail-calls))
              (let (loop)
                (let ((buffer (read pipe)))
                  (received-buffer))
                (loop)))
            'output))))
    
    ;; pipelines
    (loop (repeat spawn)
          (start-pipeline))
    ;; application
    (boot-environment (new Test-Application))))


;;;
;;;; Version
;;;


(definition public (test-version)
  (terminal (gst-version)))


;;;
;;;; Registry
;;;


(definition public (test-registry)
  (let ((registry (gst_registry_get)))
    (terminal registry)
    (let ((info (map (lambda (plugin)
                       (list (gst_plugin_get_name plugin) (gst_plugin_get_filename plugin) (gst_plugin_get_package plugin) (gst_plugin_get_description plugin) (gst_plugin_load_error plugin)))
                     (collect-registry-plugins registry))))
      (for-each (lambda (info)
                  (bind (name filename package description error) info
                    (terminal name error description)))
                (sort nu<? info key: first)))))


;;;
;;;; Discover
;;;


(definition public (test-discover)
  (let ((file {File Home "Media" "lonesome.mp3"}))
    (let ((info (discover-audio file)))
      (terminal info))))


;;;
;;;; Fonts
;;;


;; not really gstreamer, but the test framework is really nice!
(definition public (test-fonts)
  (define (drawer view surface)
    (set-font surface {Font font-name: tahoma point-size: 24})
    (draw-text surface 10 10 "Latin" {Color Dark-Red})
    (draw-text surface 10 50 "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz" {Color Black})
    (draw-text surface 10 80 "ÆÇÈÉÊËÌÍÎÏÐÑÒxyzÀÁ ÃÄÅÓÔÕÖØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõöøùúûüýþÿĀāĂăĄą" {Color Black})
    (draw-text surface 10 140 "Other Han" {Color Dark-Red})
    (draw-text surface 10 180 "⺀⺁⺂⺃⺄⺅⺆⺇⺈⺉⺊⺋⺌⺍⺎⺏⺐⺑⺒⺓⺔⺕⺖⺗⺘⺙⺛⺜⺝⺞⺠⺡⺢⺣⺤⺥⺦⺧⺨⺩" {Color Black})
    (draw-text surface 10 240 "Arabic" {Color Dark-Red})
    (draw-text surface 10 280 "س خ" {Color Black})
    (draw-text surface 10 340 "Symbols" {Color Dark-Red})
    (draw-text surface 10 380 "←↑→↓↔↕↖↗↘↙↚↛↜↝↞↟↠↡↢↣↤↥↦↧↨↩↪↫↬↭" {Color Black}))
  
  (boot-environment (new Test-Application size: {Dimension 1000 480} drawer: drawer)))


;;;
;;;; Application
;;;


(class Test-Application extends Application
  
  
  (slot position getter generate)
  (slot size     getter generate)
  (slot pipe     getter generate)
  (slot drawer   getter generate)
  (slot mouser   getter generate)
  (slot keyer    getter generate)
  (slot closer   getter generate)
  
  
  (method override (initialize self (position: position #f) (size: size #f) (pipe: pipe #f) (drawer: drawer #f) (mouser: mouser #f) (keyer: keyer #f) (closer: closer #f))
    (set! self.position (or position {Point 150 50}))
    (set! self.size (or size {Dimension 640 360}))
    (set! self.pipe pipe)
    (set! self.drawer drawer)
    (set! self.mouser mouser)
    (set! self.keyer keyer)
    (set! self.closer closer))
  
  
  (method override (new-toplevel self)
    (new Toplevel caption-base: "Test" position: position size: size))
  
  
  (method override (finish-process self)
    (nextmethod self)
    (let ((view (get-guest (new-frame Test-View host-title: (->string script) drawer: drawer mouser: mouser keyer: keyer))))
      (when pipe
        (write view pipe))))
  
  
  (method override (terminate-process self)
    (when closer
      (closer self))
    (nextmethod self)))


;;;
;;;; View
;;;


(class Test-View extends View
  
  
  (property drawer initialize #f accessors generate)
  (property mouser initialize #f accessors generate)
  (property keyer  initialize #f accessors generate)
  
  
  (method override (draw self surface context)
    (when drawer
      (drawer self surface)))
  
  
  (method override (mouse-down self evt)
    (when mouser
      (mouser self (get-position evt))))
  
  
  (method override (key-press self evt)
    (when keyer
      (keyer self (get-key evt)))))


;;;
;;;; Transfer
;;;


(definition (make-transferer size)
  (cond-expand
    (windows
     (let ((transfer-surface (new Image-Surface size)))
       (lambda (video-buffer surface)
         (move-u8vector->pointer! video-buffer (cairo_image_surface_get_data (get-handle transfer-surface)))
         (cairo_surface_mark_dirty (get-handle transfer-surface))
         (blit-surface surface transfer-surface))))
    (else
     (lambda (video-buffer surface)
       (move-u8vector->pointer! video-buffer (cairo_image_surface_get_data (get-handle surface))))))))
