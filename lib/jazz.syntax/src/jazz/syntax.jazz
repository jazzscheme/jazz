;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Jazz Syntax
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module jazz.syntax jazz


(import (jazz.core (phase syntax))
        (jazz.dialect.classes.foundation))


;;;
;;;; Setting
;;;


(macro public (define-setting name . rest)
  (let ((expr (if (null? rest) #f (car rest)))
        (global (compose-identifier name 'setting)))
    `(begin
       (define ,global ,expr)
       (definition public (,name . rest)
         (if (null? rest)
             ,global
           (set! ,global (car rest)))))))


;;;
;;;; Time
;;;


(class Time-Special extends Expression
  
  
  (slot expr getter generate)
  (slot port getter generate)
  
  
  (method override (initialize expr port . rest)
    (apply nextmethod rest)
    (set! expr~self expr)
    (set! port~self port))
  
  
  (method override (emit-expression declaration environment backend)
    (let ((expr-emit (emit-one-expression expr declaration environment backend))
          (port-emit (emit-one-expression port declaration environment backend)))
      (new-code
        (emit 'time backend self declaration environment expr-emit port-emit)
        Any
        #f))))


(special-form (time walker resume declaration environment form-src)
  (let ((form (strip-syntactic-closures form-src)))
    (let ((expr (cadr form))
          (port (if (null? (cddr form)) '(current-output-port) (caddr form))))
      (new Time-Special
        (walk walker resume declaration environment expr)
        (walk walker resume declaration environment port)))))


;;;
;;;; Tie
;;;


(macro public (tie . objects)
  (define (put c out)
    (when (memq? c '(#\~ #\{))
      (display "~" out))
    (format out "{c}" c))
  
  (define (process-string control out out-parameters)
    (bind (command . arguments) (read-delimited control "tie parameter" #\})
      (if (not (symbol? command))
          (error "Tie currently only accepts variables as parameters: {t}" command)
        (if (null? arguments)
            (display "{a}" out)
          (format out "~{{l}}" arguments))
        (put~ out-parameters command))))
  
  (call-with-input-string (apply string-append objects)
    (lambda (control)
      (let ((out (open-output-string))
            (out-parameters (new List-Factory)))
        (let (iterate)
          (let ((c (read-char control)))
            (unless (eof-object? c)
              (case c
                ((#\~) (put (read-char control) out))
                ((#\{) (process-string control out out-parameters))
                (else (put c out)))
              (iterate))))
        (cons 'format (cons :string (cons (get-output-string out) (get-output~ out-parameters))))))))


;;;
;;;; Site
;;;


(definition current-site-pathname
  (make-parameter '()))


(class Site-Special extends Expression
  
  
  (slot expression getter generate)
  
  
  (method override (initialize expression)
    (nextmethod)
    (set! expression~self expression))
  
  
  (method override (emit-expression declaration environment backend)
    (new-code
      (sourcified-form (emit-expression~ expression declaration environment backend))
      Any
      #f)))


(special-form (site walker resume declaration environment form-src)
  (let ((form (cdr (source-code form-src))))
    (let ((header (strip-syntactic-closures (car form)))
          (body (cdr form)))
      (let ((name (if (pair? header) (car header) header))
            (properties (if (pair? header) (cdr header) '())))
        (let ((explicit-parent (getf properties parent: not-found: (unspecified))))
          (let ((pathname (if (unspecified? explicit-parent) (cons name (current-site-pathname)) (list name)))
                (parent-pathname (if (unspecified? explicit-parent) (current-site-pathname) (if (not explicit-parent) '() (split-identifier explicit-parent))))
                (desourcified-properties (map source-code properties)))
            (let ((on? (getf desourcified-properties on?: not-found: #t)))
              (new Site-Special
                (parameterize ((current-site-pathname pathname))
                  (walk walker resume declaration environment
                    (sourcify-if
                      (if (not on?)
                          `(begin
                             ,@body)
                        (let ((site (generate-symbol "site")))
                          `(let ((,site <Call-Site> (static (register-site ',pathname ',parent-pathname ',properties))))
                             ((get-procedure~ ,site)
                              ,site
                               (lambda ()
                                 ,@body)))))
                      form-src))))))))))))
