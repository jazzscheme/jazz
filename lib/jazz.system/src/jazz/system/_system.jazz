;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; System
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module jazz.system jazz


(export (jazz.system.platform.cocoa   (cond cocoa))
        (jazz.system.platform.windows (cond windows))
        (jazz.system.platform.x11     (cond x11)))

(import (jazz.application)
        (jazz.io)
        (jazz.library)
        (jazz.locale)
        (jazz.platform (cond windows))
        (jazz.process)
        (jazz.settings)
        (jazz.system.platform.cocoa   (cond cocoa))
        (jazz.system.platform.windows (cond windows))
        (jazz.system.platform.x11     (cond x11)))


;;;
;;;; Pathname
;;;


(definition public undocumented (ensure-read/write moniker (cancel-action: cancel-action 'throw))
  @convert
  (let ((file (get-file~ moniker)))
    (if (or (not (exists?~ file)) (read/write?~ file))
        'no-action
      (let ((code (case (message-box (format "File {s} is read-only. Overwrite?" (get-name~ moniker))
                                     title: "File Status"
                                     type: 'question
                                     process-keys?: #f)
                    ((yes) 'set-read/write)
                    ((no) 'cancel))))
        (case code
          ((set-read/write)
           (set-read/write~ file)
           'read/write)
          ((cancel)
           (signal-cancel)))))))


(definition public undocumented (backup-file file)
  (new-unique-file~ (get-parent~ file) (format "{a}.back.{a}" (get-base~ file) (get-extension~ file)) separator: #f))


(definition public undocumented (fail-safe-save file proc)
  (unimplemented 'fail-safe-save)
  @unwind-protect
  (let ((temp (clone-file~ file "tmp"))
        (back (backup-file file))
        (completed? #f))
    (unwind-protect
        (begin
          (proc temp)
          (set! completed? #t))
      (cond ((not completed?)
             (delete-file~ temp error?: #f))
            ((exists?~ file)
             (move-pathname~ file back)
             (move-pathname~ temp file)
             (delete-file~ back))
            (else
             (move-pathname~ temp file))))))


(cond-expand
  (cocoa
   (definition public (open-document file)
     (shell-command (string-append "open " (parse~ file)))))
  (windows
   (definition public (open-document file)
     (ShellExecute NULL "open" (parse~ file) NULL NULL SW_SHOWNORMAL)))
  (else
   (definition public (open-document file)
     (unimplemented 'open-document))))


;;;
;;;; Keyboard
;;;


(definition public (modifiers-mask)
  (make-modifiers-mask (shift-down?) (control-down?) (alt-down?) (meta-down?)))


(definition public (modifiers-keys)
  (modifiers->keys (modifiers-mask)))


;;;
;;;; Event
;;;


(definition public (make-event class kind sender . properties)
  (apply new class kind sender (modifiers-mask) properties))


(definition public (clone-event evt . properties)
  (let ((event (copy evt)))
    (for-each-property (lambda (keyword value)
                         (set-property~ event keyword value))
                       properties)
    event))


;;;
;;;; Output
;;;


(definition public (output-header title printer (language: language 'jazz) (system: system #f) (license: license #f) (author: author #f) (copyright: copyright #f) (contributors: contributors '()) (end-proper?: end-proper? #t))
  (with-printer printer
    (lambda (output)
      (let* ((system (or system (let ((process (get-process))) (if process (system-title~ process) "JazzScheme"))))
             (system-padding (make-string (string-length system) #\=))
             (comment (case language ((jazz) ";;;") ((c) "//")))
             (toplevel-comment (case language ((jazz) ";;;;") ((c) "///"))))
        (format output #"{a}=={a}=={%}"# comment system-padding)
        (format output #"{a}  {a}{%}"# comment system)
        (format output #"{a}=={a}=={%}"# comment system-padding)
        (format output #"{a}{%}"# comment)
        (format output #"{a} {a}{%}"# toplevel-comment title)
        (format output #"{a}"# comment)
        (case license
          ((jazzscheme)
           (format output "{%}")
           (format output #"{a}  The contents of this file are subject to the Mozilla Public License Version{%}"# comment)
           (format output #"{a}  1.1 (the "License"); you may not use this file except in compliance with{%}"# comment)
           (format output #"{a}  the License. You may obtain a copy of the License at{%}"# comment)
           (format output #"{a}  http://www.mozilla.org/MPL/{%}"# comment)
           (format output #"{a}{%}"# comment)
           (format output #"{a}  Software distributed under the License is distributed on an "AS IS" basis,{%}"# comment)
           (format output #"{a}  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License{%}"# comment)
           (format output #"{a}  for the specific language governing rights and limitations under the{%}"# comment)
           (format output #"{a}  License.{%}"# comment)
           (format output #"{a}{%}"# comment)
           (format output #"{a}  The Original Code is JazzScheme.{%}"# comment)
           (format output #"{a}{%}"# comment)
           (format output #"{a}  The Initial Developer of the Original Code is {a}.{%}"# comment author)
           (format output #"{a}  Portions created by the Initial Developer are Copyright (C) {a}{%}"# comment copyright)
           (format output #"{a}  the Initial Developer. All Rights Reserved.{%}"# comment)
           (format output #"{a}{%}"# comment)
           (format output #"{a}  Contributor(s):{%}"# comment)
           (for-each (lambda (contributor)
                       (format output #"{a}    {a}{%}"# comment contributor))
                     contributors)
           (format output #"{a}{%}"# comment)
           (format output #"{a}  Alternatively, the contents of this file may be used under the terms of{%}"# comment)
           (format output #"{a}  the GNU General Public License Version 2 or later (the "GPL"), in which{%}"# comment)
           (format output #"{a}  case the provisions of the GPL are applicable instead of those above. If{%}"# comment)
           (format output #"{a}  you wish to allow use of your version of this file only under the terms of{%}"# comment)
           (format output #"{a}  the GPL, and not to allow others to use your version of this file under the{%}"# comment)
           (format output #"{a}  terms of the MPL, indicate your decision by deleting the provisions above{%}"# comment)
           (format output #"{a}  and replace them with the notice and other provisions required by the GPL.{%}"# comment)
           (format output #"{a}  If you do not delete the provisions above, a recipient may use your version{%}"# comment)
           (format output #"{a}  of this file under the terms of any one of the MPL or the GPL.{%}"# comment)
           (format output #"{a}{%}"# comment)
           (format output #"{a}  See www.jazzscheme.org for details."# comment)))
        (when end-proper?
          (format output "{%}"))))))


(definition public (output-section title output (language: language 'jazz) (level: level 0))
  (let ((comment (case language ((jazz) ";;;") ((c) "//")))
        (toplevel (case language ((jazz) ";;;;") ((c) "///")))
        (extra (case language ((jazz) "") ((c) (make-string (+ (string-length title) 4) #\-)))))
    (format output "{%}{%}")
    (format output "{_ :v}{a}{a}{%}" (* level 2) comment extra)
    (format output "{_ :v}{a} {a}{%}" (* level 2) toplevel title)
    (format output "{_ :v}{a}{a}{%}" (* level 2) comment extra)
    (format output "{%}{%}")))


;;;
;;;; Terminal
;;;


(definition package (terminal-repl)
  (show-terminal)
  (bring-terminal-to-front)
  (repl))


(cond-expand
  (windows
    (definition package (terminal-visible?)
      (let ((console (GetConsoleWindow)))
        (and console (IsWindowVisible console))))
    
    (definition package (show-terminal)
      (let ((console (GetConsoleWindow)))
        (if (not console)
            (set-terminal-title)
          (ShowWindow console SW_SHOWNORMAL))))
    
    (definition package (hide-terminal)
      (let ((console (GetConsoleWindow)))
        (when (and console (IsWindowVisible console))
          (ShowWindow console SW_HIDE))))
    
    (definition package (toggle-terminal)
      (if (terminal-visible?)
          (hide-terminal)
        (show-terminal))))
  (else
   (definition package (terminal-visible?)
     #f)
   
   (definition package (show-terminal)
     (set-terminal-title))
   
   (definition package (hide-terminal)
     )
   
   (definition package (toggle-terminal)
     )))


;;;
;;;; Process
;;;


(definition package *exiting-process?*
  (make-parameter #f))

(definition package *reloading-process?*
  (make-parameter #f))


(definition public (exiting-process?)
  (*exiting-process?*))

(definition public (reloading-process?)
  (*reloading-process?*))


;;;
;;;; Initialize
;;;


(definition public (initialize-system)
  (initialize-system-platform find-setting)))
