;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; System
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2012
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module jazz.system jazz


(export (jazz.system.access)
        (jazz.system.platform.carbon  (cond carbon))
        (jazz.system.platform.cocoa   (cond cocoa))
        (jazz.system.platform.windows (cond windows))
        (jazz.system.platform.x11     (cond x11))
        (jazz.system.platform.glfw    (cond glfw)))

(import (jazz.io)
        (jazz.library)
        (jazz.locale)
        (jazz.platform)
        (jazz.system.access)
        (jazz.system.platform.carbon  (cond carbon))
        (jazz.system.platform.cocoa   (cond cocoa))
        (jazz.system.platform.windows (cond windows))
        (jazz.system.platform.x11     (cond x11))
        (jazz.system.platform.glfw    (cond glfw)))


;;;
;;;; Arguments
;;;


(definition public (get-argument arg arg-parser (default (unspecified)))
  (let ((arg-value (and arg (command-argument arg))))
    (if arg-value
        (arg-parser arg-value)
      (if (specified? default)
          default
        (error "Mandatory argument not found: {a}" arg)))))


;;;
;;;; Parameters
;;;


(definition public (get-parameter arg arg-parser setting setting-parser (default (unspecified)))
  (let ((arg-value (and arg (command-argument arg))))
    (if arg-value
        (arg-parser arg-value)
      (let ((setting-value (if setting 
                               (find-setting setting Not-Found)
                             Not-Found)))
        (if (neq? setting-value Not-Found)
            (setting-parser setting-value)
          (if (specified? default)
              default
            (error "Mandatory parameter not found: {a} / {a}" arg setting)))))))


(definition public (boolean-parameter arg setting (default (unspecified)))
  (get-parameter arg parse-boolean setting identity default))


(definition public (integer-parameter arg setting (default (unspecified)))
  (get-parameter arg parse-integer setting identity default))


(definition public (string-parameter arg setting (default (unspecified)))
  (get-parameter arg identity setting identity default))


(definition public (symbol-parameter arg setting (default (unspecified)))
  (get-parameter arg read-string-element setting identity default))


@convert
(definition public (pathname-argument name)
  (let ((arg (command-argument name)))
    (if (not arg)
        #f
      (tokenise-filename
        (if (eqv? (element arg 0) #\double-quote)
            (subseq arg 1 (- (length arg) 1))
          arg)))))


(definition public (file-parameter arg setting extension (default (unspecified)))
  (define (parse-file str)
    (let ((file (new File (tokenise-filename str))))
      (if (/= (get-extension~ file) extension)
          (error "Argument /{a} is not of the expected .{a} type" arg extension)
        file)))
  
  (get-parameter arg parse-file setting identity default))


(definition public (directory-parameter arg setting (default (unspecified)))
  (define (parse-directory str)
    (new Directory (tokenise-filename str)))
  
  (get-parameter arg parse-directory setting identity default))


(definition public (host-parameter . rest)
  (apply string-connection-parameter rest))


(definition public (string-connection-parameter arg setting (default (unspecified)))
  (let ((host-setting-value (find-setting setting (unspecified))))
    (if (specified? host-setting-value)
        host-setting-value
      (string-parameter arg #f default))))


(definition public (service-parameter . rest)
  (apply integer-connection-parameter rest))


(definition public (integer-connection-parameter arg setting (default (unspecified)))
  (let ((service-setting-value (find-setting setting (unspecified))))
    (if (specified? service-setting-value)
        service-setting-value
      (integer-parameter arg #f default))))


(definition public (point-parameter arg setting (default (unspecified)))
  (define (parse-point str)
    (let ((content (split str "x")))
      (assert (= (length content) 2)
        (let ((h (string->number (first content)))
              (v (string->number (second content))))
          (assert (integer? h)
            (assert (integer? v)
              (new Point h v)))))))
  
  (get-parameter arg parse-point setting identity default))


(definition public (point->argument point)
  (format "{a}x{a}"
          (get-h~ point)
          (get-v~ point)))


(definition public (dimension-parameter arg setting (default (unspecified)))
  (define (parse-dimension str)
    (let ((content (split str "x")))
      (assert (= (length content) 2)
        (let ((width (string->number (first content)))
              (height (string->number (second content))))
          (assert (integer? width)
            (assert (integer? height)
              (new Dimension width height)))))))
  
  (get-parameter arg parse-dimension setting identity default))


(definition public (dimension->argument dimension)
  (format "{a}x{a}"
          (get-width~ dimension)
          (get-height~ dimension)))


;;;
;;;; Settings
;;;


(interface Settings-Provider
  
  
  (method public virtual abstract (get-setting setting (default #f))
    ))
  

(class File-Settings extends Object implements Settings-Provider
  
  
  (slot file      initialize #f)
  (slot content   initialize (make-table test: eq?))
  (slot modified? initialize #f)
  
  
  (method override (initialize (file: file #f))
    (nextmethod)
    (set-file file))
  

  (method override (get-setting setting (default #f))
    (table-ref content setting default))
  
  
  (method public (set-setting setting value)
    (table-set! content setting value)
    (set! modified? #t))
  
  
  (method public (get-file)
    file)


  (method public (set-file value)
    (set! file value)
    (when file
      (with-jazz-readtable
        (lambda ()
          (call-with-input-file (path-settings file eol-encoding: 'cr-lf)
            (lambda (port)
              (table-load content port #f)))))    
      (set! modified? #f)))
  
  
  (method public (save-content)
    (define (find-longest list)
      (apply max (map (lambda (info)
                        (cardinality (symbol->string (car info))))
                      list)))
    
    (call-with-output-file (path-settings file)
      (lambda (output)
        (let ((all (table->list content)))
          (when (not-null? all)
            (let ((max (find-longest all))
                  (sorted (sort string<? all key: (lambda (info) (symbol->string (car info))))))
              (for-each (lambda (info)
                          (bind (setting . value) info
                            (format output "{s}{_ :v} {s}{%}" setting (- max (cardinality (symbol->string setting))) value)))
                        sorted))))))
    (set! modified? #f)))


;;;
;;;; Settings List
;;;


(definition *settings*
  '())


(definition public (get-settings)
  *settings*)


(definition public (register-settings settings <Settings-Provider>)
  (set! *settings* (cons settings *settings*)))


(definition Not-Found
  (list 'not-found))


(definition public (find-setting name (default #f))
  (continuation-capture
    (lambda (return)
      (for-each (lambda (settings)
                  (let ((value (get-setting~ settings name Not-Found)))
                    (when (neq? value Not-Found)
                      (continuation-return return value))))
                *settings*)
      default)))


(definition public (require-setting name)
  (or (find-setting name)
      (error "Unable to find setting: {s}" name)))


(definition public (require-string-setting name)
  (let ((setting (require-setting name)))
    (if (not (string? setting))
        (error "Setting {a} must be a string: {s}" name setting)
      setting)))


;;;
;;;; Preferences
;;;


(definition public (get-preferences name (error?: error? #t))
  (let ((root (get-preferences-root)))
    (cond ((not root)
           (when error?
             (error "Could not find preferences")))
          ((not name)
           root)
          (else
           (or (find-component~ root name)
               (when error?
                 (error "Could not find preferences: {t}" name)))))))


(definition public (get-preferences-root)
  (let ((designer (get-preferences-designer~ (get-process))))
    (when designer
      (get-reference~ designer))))


(definition public (set-preference preferences property value)
  (let ((designer (get-preferences-designer~ (get-process))))
    (set-property~ designer preferences property value)))


(definition public (sort-case-sensitive?)
  (let ((pref (get-preferences '(interface tree) error?: #f)))
    (and pref (get-sort-case-sensitive?~ pref))))


(definition public (sort-predicates)
  (if (sort-case-sensitive?)
      (values nu=? nu<? nu>?)
    (values di=? di<? di>?)))


(definition public (sort-predicate name)
  (let ((case-sensitive? (sort-case-sensitive?)))
    (case name
      ((equal)         (if case-sensitive? nu=?  ci=?))
      ((smaller)       (if case-sensitive? nu<?  ci<?))
      ((smaller/equal) (if case-sensitive? nu<=? ci<=?))
      ((greater)       (if case-sensitive? nu>?  ci>?))
      ((greater/equal) (if case-sensitive? nu>=? ci>=?))
      ((compare)       (if case-sensitive? compare ci-compare))
      (else (error "Unknown sort predicate: {t}" name)))))


;;;
;;;; Pathname
;;;


(definition public undocumented (ensure-read/write moniker (cancel-action: cancel-action 'throw))
  @convert
  (let ((file (get-file~ moniker)))
    (if (or (not (exists?~ file)) (read/write?~ file))
        'no-action
      (let ((code (case (message-box (format "File {s} is read-only. Overwrite?" (get-name~ moniker))
                                     title: "File Status"
                                     type: 'question
                                     process-keys?: #f)
                    ((yes) 'set-read/write)
                    ((no) 'cancel))))
        (case code
          ((set-read/write)
           (set-read/write~ file)
           'read/write)
          ((cancel)
           (signal-cancel)))))))


(definition public undocumented (backup-file file)
  (new-unique-file~ (get-parent~ file) (format "{a}.back.{a}" (get-base~ file) (get-extension~ file)) separator: #f))


(definition public undocumented (fail-safe-save file proc)
  (unimplemented 'fail-safe-save)
  @unwind-protect
  (let ((temp (clone-file~ file "tmp"))
        (back (backup-file file))
        (completed? #f))
    (unwind-protect
        (begin
          (proc temp)
          (set! completed? #t))
      (cond ((not completed?)
             (delete-file~ temp error?: #f))
            ((exists?~ file)
             (move-pathname~ file back)
             (move-pathname~ temp file)
             (delete-file~ back))
            (else
             (move-pathname~ temp file))))))


;;;
;;;; Keyboard
;;;


(definition public (modifiers-mask)
  (make-modifiers-mask (shift-down?) (control-down?) (alt-down?)))


(definition public (modifiers-keys)
  (modifiers->keys (modifiers-mask)))


;;;
;;;; Event
;;;


(definition public (make-event class kind sender . properties)
  (apply new class kind sender (modifiers-mask) properties))


(definition public (clone-event evt . properties)
  (let ((event (copy evt)))
    (for-each-property (lambda (keyword value)
                         (set-property~ event keyword value))
                       properties)
    event))


;;;
;;;; Output
;;;


(definition public (output-header title printer (language: language 'jazz) (system: system #f) (license: license #f) (author: author #f) (copyright: copyright #f) (contributors: contributors '()) (end-proper?: end-proper? #t))
  (with-printer printer
    (lambda (output)
      (let* ((system (or system (let ((process (get-process))) (if process (system-title~ process) "JazzScheme"))))
             (system-padding (make-string (string-length system) #\=))
             (comment (case language ((jazz) ";;;") ((c) "//")))
             (toplevel-comment (case language ((jazz) ";;;;") ((c) "///"))))
        (format output #"{a}=={a}=={%}"# comment system-padding)
        (format output #"{a}  {a}{%}"# comment system)
        (format output #"{a}=={a}=={%}"# comment system-padding)
        (format output #"{a}{%}"# comment)
        (format output #"{a} {a}{%}"# toplevel-comment title)
        (format output #"{a}"# comment)
        (case license
          ((jazzscheme)
           (format output "{%}")
           (format output #"{a}  The contents of this file are subject to the Mozilla Public License Version{%}"# comment)
           (format output #"{a}  1.1 (the "License"); you may not use this file except in compliance with{%}"# comment)
           (format output #"{a}  the License. You may obtain a copy of the License at{%}"# comment)
           (format output #"{a}  http://www.mozilla.org/MPL/{%}"# comment)
           (format output #"{a}{%}"# comment)
           (format output #"{a}  Software distributed under the License is distributed on an "AS IS" basis,{%}"# comment)
           (format output #"{a}  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License{%}"# comment)
           (format output #"{a}  for the specific language governing rights and limitations under the{%}"# comment)
           (format output #"{a}  License.{%}"# comment)
           (format output #"{a}{%}"# comment)
           (format output #"{a}  The Original Code is JazzScheme.{%}"# comment)
           (format output #"{a}{%}"# comment)
           (format output #"{a}  The Initial Developer of the Original Code is {a}.{%}"# comment author)
           (format output #"{a}  Portions created by the Initial Developer are Copyright (C) {a}{%}"# comment copyright)
           (format output #"{a}  the Initial Developer. All Rights Reserved.{%}"# comment)
           (format output #"{a}{%}"# comment)
           (format output #"{a}  Contributor(s):{%}"# comment)
           (for-each (lambda (contributor)
                       (format output #"{a}    {a}{%}"# comment contributor))
                     contributors)
           (format output #"{a}{%}"# comment)
           (format output #"{a}  Alternatively, the contents of this file may be used under the terms of{%}"# comment)
           (format output #"{a}  the GNU General Public License Version 2 or later (the "GPL"), in which{%}"# comment)
           (format output #"{a}  case the provisions of the GPL are applicable instead of those above. If{%}"# comment)
           (format output #"{a}  you wish to allow use of your version of this file only under the terms of{%}"# comment)
           (format output #"{a}  the GPL, and not to allow others to use your version of this file under the{%}"# comment)
           (format output #"{a}  terms of the MPL, indicate your decision by deleting the provisions above{%}"# comment)
           (format output #"{a}  and replace them with the notice and other provisions required by the GPL.{%}"# comment)
           (format output #"{a}  If you do not delete the provisions above, a recipient may use your version{%}"# comment)
           (format output #"{a}  of this file under the terms of any one of the MPL or the GPL.{%}"# comment)
           (format output #"{a}{%}"# comment)
           (format output #"{a}  See www.jazzscheme.org for details."# comment)))
        (when end-proper?
          (format output "{%}"))))))


(definition public (output-section title output (language: language 'jazz) (level: level 0))
  (let ((comment (case language ((jazz) ";;;") ((c) "//")))
        (toplevel (case language ((jazz) ";;;;") ((c) "///")))
        (extra (case language ((jazz) "") ((c) (make-string (+ (string-length title) 4) #\-)))))
    (format output "{%}{%}")
    (format output "{_ :v}{a}{a}{%}" (* level 2) comment extra)
    (format output "{_ :v}{a} {a}{%}" (* level 2) toplevel title)
    (format output "{_ :v}{a}{a}{%}" (* level 2) comment extra)
    (format output "{%}{%}")))


;;;
;;;; Terminal
;;;


(definition package (terminal-repl)
  (show-terminal)
  (bring-terminal-to-front)
  (repl))


(cond-expand
  (windows
    (definition package (terminal-visible?)
      (let ((console (GetConsoleWindow)))
        (and console (IsWindowVisible console))))
    
    (definition package (show-terminal)
      (let ((console (GetConsoleWindow)))
        (if (not console)
            (set-terminal-title)
          (ShowWindow console SW_SHOWNORMAL))))
    
    (definition package (hide-terminal)
      (let ((console (GetConsoleWindow)))
        (when (and console (IsWindowVisible console))
          (ShowWindow console SW_HIDE))))
    
    (definition package (toggle-terminal)
      (if (terminal-visible?)
          (hide-terminal)
        (show-terminal))))
  (else
   (definition package (terminal-visible?)
     #f)
   
   (definition package (show-terminal)
     (set-terminal-title))
   
   (definition package (hide-terminal)
     )
   
   (definition package (toggle-terminal)
     )))


;;;
;;;; Message
;;;


(definition public (user-message obj . rest)
  (let ((appl (get-application)))
    (when appl
      (set-status-message~ appl (if (is? obj Locales) obj (apply format obj rest)) #f #f))))


(definition public (user-message/action-handler message action-handler)
  (let ((appl (get-application)))
    (when appl
      (set-status-message~ appl message action-handler #f))))


(definition public (user-feedback obj . rest)
  (let ((appl (get-application)))
    (when appl
      (set-status-message~ appl (if (is? obj Locales) obj (apply format obj rest)) #f #t))))


(definition public (clear-user-message)
  (user-message ""))


(definition public (clear-user-feedback)
  (user-feedback ""))


(definition public undocumented (make-directory-feedback)
  (let ((directory #f))
    (lambda (file)
      (let ((dir (get-parent~ file)))
        (when (or (not directory) (not (pathname=? dir directory)))
          (let ((expanded (expand~ dir)))
            (let ((len (length expanded)))
            (user-message "Searching {l detail: :human}..." (subseq expanded (max 0 (- len 3)) len))
            (set! directory dir))))))))


;;;
;;;; Process
;;;


(definition package *exiting-process?*
  (make-parameter #f))

(definition package *reloading-process?*
  (make-parameter #f))


(definition public (exiting-process?)
  (*exiting-process?*))

(definition public (reloading-process?)
  (*reloading-process?*))


;;;
;;;; Initialize
;;;


(definition public (initialize-system)
  )


(definition public (initialize-windowing)
  (initialize-windowing-platform find-setting)))
