;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; System
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.system jazz


(export (jazz.system.platform.carbon  (cond carbon))
        (jazz.system.platform.windows (cond windows))
        (jazz.system.platform.x11     (cond x11)))

(import (jazz.io))


;;;
;;;; Arguments
;;;


(definition public (argument/setting arg prop)
  (either (command-argument arg)
          (get-setting prop)))


(definition public (pathname-argument name)
  (let ((arg (command-argument name)))
    (if (not arg)
        #f
      (tokenise-filename
        (if (= (element arg 0) #\double-quote)
            (subseq arg 1 (- (length arg) 1))
          arg)))))


(definition public (require-argument key)
  (unimplemented 'require-argument)
  @command-argument
  (either (command-argument key)
          (error "Mandatory argument /{a} was not found in command line:{%}{a}" key (command-line))))


(definition public (require-argument/setting arg prop)
  (unimplemented 'require-argument/setting)
  @command-line
  (either (argument/setting arg prop)
          (error "Mandatory argument /{a} was not found on command line or in properties:{%}{a}" arg (command-line))))


(definition public (boolean-argument/setting arg prop default)
  (let ((value (argument/setting arg prop)))
    (if (not value)
        default
      (parse-boolean value))))


(definition public (integer-argument/setting arg prop)
  (let ((str/int (argument/setting arg prop)))
    (when str/int
      (if (integer? str/int)
          str/int
        (parse-integer str/int)))))


(definition public (file-argument/setting arg prop extension)
  (let ((str (argument/setting arg prop)))
    (when str
      (make-file str arg extension))))


(definition public (require-file-argument/setting arg prop extension)
  (make-file (require-argument/setting arg prop) arg extension))


(definition (make-file str arg extension)
  (unimplemented 'make-file)
  @Pathname
  (let ((file (new File (tokenise-filename str))))
    (if (/= (get-extension~ file) extension)
        (error "Argument /{a} is not of the expected .{a} type in command line:{%}{a}" arg extension (command-line))
      file)))


(definition public (directory-argument/setting arg prop)
  (let ((str (argument/setting arg prop)))
    (when str
      (make-directory str))))


(definition public (require-directory-argument/setting arg prop)
  (make-directory (require-argument/setting arg prop)))


(definition (make-directory str)
  (unimplemented 'make-directory)
  @Pathname
  (new Directory (tokenise-filename str)))


(definition public (host-argument/setting arg prop)
  (unimplemented 'host-argument/setting)
  @Host
  (let ((name (argument/setting arg prop)))
    (when name
      (new Host name: name))))


(definition public (port-argument/setting arg prop)
  (argument/setting arg prop))


;;;
;;;; Settings
;;;


(class Settings extends Object


  (slot file      initialize {})
  (slot content   initialize {})
  (slot modified? initialize #f)
  
  
  (method (initialize (file: file {}))
    (nextmethod)
    (set-file file))


  (method public (get-file)
    file)


  (method public (set-file value)
    (set! file value)
    (if (not file)
        (set! content {})
      (load-content)))


  (method public (get-setting setting (default {}))
    (table-ref content setting default))


  (method public (set-setting setting value)
    (table-set! content setting value)
    (set! modified? #t))


  (method public (load-content)
    (set! content (make-table test: eq?))
    (table-load content file #f)
    (set! modified? #f))


  (method public (save-content)
    (define (find-longest list)
      (apply max (map (function (info)
                        (cardinality (symbol->string (car info))))
                      list)))
    
    (call-with-output-file (parse~ file)
      (function (output)
        (let ((all (table->list content)))
          (when (not-null? all)
            (let ((max (find-longest all))
                  (sorted (sort string<? all key: (function (info) (symbol->string (car info))))))
              (for-each (function (info)
                          (bind (setting . value) info
                            (format output "{s}{_ :v} {s}{%}" setting (- max (cardinality (symbol->string setting))) value)))
                        sorted))))))
    (set! modified? #f)))


;;;
;;;; Settings List
;;;


(definition *settings*
  '())


(definition public (get-settings)
  *settings*)


(definition public (register-settings settings)
  (set! *settings* (cons settings *settings*)))


(definition Not-Found
  (list 'not-found))


(definition public (get-setting name (default {}))
  (continuation-capture
    (function (return)
      (for-each (function (settings)
                  (let ((value (get-setting~ settings name Not-Found)))
                    (when (neq? value Not-Found)
                      (continuation-return return value))))
                *settings*)
      default)))


(definition public (require-setting name)
  (either (get-setting name)
          (error "Unable to find setting: {s}" name)))


(definition public (require-string-setting name)
  (let ((setting (require-setting name)))
    (if (not (string? setting))
        (error "Setting {a} must be a string: {s}" name setting)
      setting)))


;;;
;;;; Bindings
;;;


(definition *bindings*
  {})


(definition public (get-bindings)
  *bindings*)


(definition public (set-bindings bindings)
  (set! *bindings* bindings))


;;;
;;;; Process
;;;


(definition package *exiting-process?*
  (make-parameter #f))

(definition package *reloading-process?*
  (make-parameter #f))


(definition public (exiting-process?)
  (*exiting-process?*))

(definition public (reloading-process?)
  (*reloading-process?*)))
