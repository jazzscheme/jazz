;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Application Preferences
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library protected jazz.system.application.Application-Preferences jazz


(import (jazz.designer)
        (jazz.jml)
        (jazz.system.application)
        (jazz.system.process))


(class undocumented Application-Preferences extends Process-Preferences


  (property toplevel-title     initialize {}        accessors generate)
  (property toplevel-state     initialize 'restored accessors generate)
  (property catalog-types      initialize '()       accessors generate)
  (property documented?        initialize #f        accessors generate)
  (property fullscreen-warned? initialize #f        accessors generate)
  (property active-bindings    initialize #f        accessors generate)
  
  
  (form
    (<install>
      (<Aliases-Preferences>    name: aliases)
      (<Favorites-Preferences>  name: favorites)
      (<Documents-Preferences>  name: documents)
      (<Tools-Preferences>      name: tools)
      (<Workspaces-Preferences> name: workspaces)
      (<Interface-Preferences>  name: interface)))

  
  ;;;
  ;;;; Walk
  ;;;
  
  
  @convert
  (method meta (walk-form analyser form)
    (nextmethod analyser form)
    (let ((catalog-types (get-property~ form 'catalog-types)))
      (for-each (lambda (info)
                  (let ((catalog-type (cdr info)))
                    (when (in-manifest? catalog-type)
                      (push-reference~ analyser catalog-type))))
                catalog-types)))


  ;;;
  ;;;; Designer
  ;;;

  
  (method override (get-row-instance property)
    (case (field-name property)
      ((toplevel-title) (new String-Row))
      ((documented?) (new Boolean-Row))
      (else (nextmethod property))))
    
  
  (method override (get-categorized-properties)
    '(active-context
      current-directory
      protocols
      toplevel-title
      toplevel-state
      catalog-types
      documented?))))
