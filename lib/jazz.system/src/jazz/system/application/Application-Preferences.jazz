;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Application Preferences
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.system.application.Application-Preferences jazz


(import (jazz.designer)
        (jazz.jml)
        (jazz.system.process)
        (jazz.ui))


(class undocumented Application-Preferences extends Process-Preferences


  (property toplevel-title     initialize #f  accessors generate)
  (property toplevel-state     initialize #f  accessors generate)
  (property toplevel-position  initialize #f  accessors generate)
  (property toplevel-size      initialize #f  accessors generate)
  (property catalog-types      initialize '() accessors generate)
  (property documented?        initialize #f  accessors generate)
  (property fullscreen-warned? initialize #f  accessors generate)
  (property active-bindings    initialize #f  accessors generate)
  (property toolbar-classes    initialize '() accessors generate)
  
  
  (form
    (<install>
      (<Aliases-Preferences>    name: aliases)
      (<Favorites-Preferences>  name: favorites)
      (<Fonts-Preferences>      name: fonts)
      (<Documents-Preferences>  name: documents)
      (<Tools-Preferences>      name: tools)
      (<Interface-Preferences>  name: interface)))
  
  
  ;;;
  ;;;; Descriptor
  ;;;
  
  
  (method meta override (get-class-descriptor)
    (new Application-Preferences-Descriptor)))


;;;
;;;; Design
;;;


(submodule design


(import (jazz.designer))


(class Application-Preferences-Descriptor extends Process-Preferences-Descriptor
  
  
  (form
    (<install>
      (<properties~>
        (<Property-Descriptor>      name: toplevel-title
          (<String-Domain>          name: domain))
        (<Property-Descriptor>      name: toplevel-state
          (<Value-Domain>           name: domain))
        (<Property-Descriptor>      name: toplevel-position
          (<Value-Domain>           name: domain))
        (<Property-Descriptor>      name: toplevel-size
          (<Value-Domain>           name: domain))
        (<Property-Descriptor>      name: catalog-types
          (<Value-Domain>           name: domain))
        (<Property-Descriptor>      name: documented?
          (<Boolean-Domain>         name: domain))
        (<Property-Descriptor>      name: fullscreen-warned?
          (<Value-Domain>           name: domain))
        (<Property-Descriptor>      name: active-bindings
          (<Value-Domain>           name: domain))
        (<Property-Descriptor>      name: toolbar-classes
          (<Toolbar-Classes-Domain> name: domain))))))


;;;
;;;; Toolbar-Classes-Domain
;;;


(class Toolbar-Classes-Domain extends List-Domain
  
  
  (method override (finish rest)
    (nextmethod rest)
    (set! domain (new Toolbar-Class-Domain)))
  
  
  @convert
  (method override (add-value value class)
    (add-row self (car value) (cdr value) class: class))
  
  
  @convert
  (method override (new-value)
    #f))


;;;
;;;; Toolbar-Class-Domain
;;;


(class Toolbar-Class-Domain extends Value-Domain
  
  
  ;;;
  ;;;; Presentation
  ;;;
  
  
  (method override (present model)
    (format "{s}" model)))))
