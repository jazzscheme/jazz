;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Exception Presentation
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.system.application.Exception-Presenter jazz


(import (jazz.graphic)
        (jazz.jml)
        (jazz.ui))


(class undocumented Exception-Presenter extends Object)


@convert


(class undocumented Exception-Presenter extends Object
  
  
  (method public (present exception (type: type 'error) (prefix?: prefix? #t))
    (let* ((message (present-message~ exception prefix?: prefix?))
           (restartable? (restartable? exception))
           (continuable? (continuable? exception))
           (yes-action (list (case type ((message) (if continuable? "Stop" "OK")) (else "Debug")) 'yes))
           (restart-action (if restartable? '("Restart" restart) #f))
           (continue-action (if continuable? '("Continue" continue) #f))
           (continue-all-action (if continuable? '("Continue All" continue-all #\A) #f))
           (cancel-action (case type ((message) #f) (else (list (if continuable? "Stop" "Ignore") 'cancel))))
           (execution-context (get-execution-context))
           (execution-stack (get-execution-stack)))
      (if (and execution-context (get-auto-continue?~ execution-context) (get-continuable?~ execution-context))
          (continue-exception exception)
        (let ((code (message-box message
                                 type: type
                                 content: (present-execution-stack execution-stack)
                                 actions: (remove-nils (list yes-action continue-action continue-all-action cancel-action)))))
          (case code
            ((continue)
             (continue-exception exception))
            ((continue-all)
             (set-auto-continue?~ execution-context #t)
             (continue-exception exception))
            (else
             code))))))

  
  ;;;
  ;;;; Context
  ;;;
  
  
  (method (present-execution-stack execution-stack)
    (when execution-stack
      (let* ((border (new Context-Border size: {Dimension 450 150}))
             (tree (locate~ border 'tree)))
        (for-each (lambda (node)
                    (let* ((title (get-title~ node))
                           (details (get-details~ node))
                           (row (add-row~ tree state: 'collapsed children: (list (new Tree-Node title: (or title "") image: {Image-Resource "Branch"})))))
                      (for-each (lambda (detail)
                                  (add-row~ tree father: row children: (list (new Tree-Node title: detail image: {Image-Resource "Info"}))))
                                details)))
                  execution-stack)
        border))))


;;;
;;;; Context-Border
;;;


(class Context-Border extends Border-View
  
  
  (form
    (<install>                                    border-type: solid border-color: {Color name: Outline-Border}
      (<Scroller-View>                            flat?: #t hscroll?: #t vscroll?: #t
        (<!>                        name: content layout-type: fill
          (<Tree-Header>                          flat?: #t
            (<!>                    name: content
              (<Context-Tree>       name: tree    portfolio: :images selection-mode: node
                (<Tree-Node-Column>               title: "Context" width: 300)))))))))


;;;
;;;; Context-Tree
;;;


(class Context-Tree extends Tree-View))
