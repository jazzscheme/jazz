;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Logging
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;    Stephane Le Cornec
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module jazz.system.log jazz


(export (jazz.system.log.platform.windows (cond windows)))


(definition public (log-event type event-id message)
  (unimplemented 'log-event)
  @unimplemented
  (let* ((name (process-event-source~ (get-process)))
         (handle (RegisterEventSource #f name))
         (strings (new-array string 1)))
    (array-set! strings 0 message)
    (ReportEvent handle type 0 event-id 0 1 0 strings 0)))


(definition public (log-error-event message . rest) ;; CONVERT (event-id: event-id (make-event-id 1 :severity SEVERITY_ERROR)))
  (unimplemented 'log-error-event)
  @unimp
  (log-event EVENTLOG_ERROR_TYPE event-id message))


(definition public (log-success-event message @unimp (event-id: event-id (make-event-id 1)))
  (unimplemented 'log-success-event)
  @unimp
  (log-event EVENTLOG_SUCCESS event-id message)))
