;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Performance Utilities
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.system.performance.platform.windows jazz
  

(import (jazz.jml)
        (jazz.platform.windows)
        (jazz.system.performance.platform.windows.Performance-Query))


;;;
;;;; Performance
;;;
  

@wait
(definition public (performance-snapshot . rest)
  (bind-keywords ((name nil)) rest
    (let ((handle (GetCurrentProcess)))
      (let ((creation-time (new FILETIME))
            (exit-time (new FILETIME))
            (kernel-time (new FILETIME))
            (user-time (new FILETIME)))
        (GetProcessTimes handle creation-time exit-time kernel-time user-time)
        (let ((time (function (filetime)
                      (make-long (get filetime 'dwLowDateTime)
                                 (get filetime 'dwHighDateTime)))))
          (parse-jml
            `(<performance>
               name: ,name
               kernel-time: ,(time kernel-time)
               user-time: ,(time user-time))))))))
  
  
;;;
;;;; Resources
;;;


(definition public (resources-snapshot . rest)
  @wait-GetProcessHandleCount-is-undefined-on-some-XP-machines
  (bind-keywords ((name #f)) rest
    (let ((handle (GetCurrentProcess)))
      (let ((private-bytes (get-private-bytes)))
        (let ((gui-gdi-objects (GetGuiResources handle GR_GDIOBJECTS))
              (gui-user-objects (GetGuiResources handle GR_USEROBJECTS)))
            (let ((handles (GetProcessHandleCount handle))
                  (undestroyed 0 @wait (gc-undestroyed-count)))
              (parse-jml
                `(<resources>
                   name: ,name
                   private-bytes: ,private-bytes
                   gui-gdi-objects: ,gui-gdi-objects
                   gui-user-objects: ,gui-user-objects
                   handles: ,handles
                   undestroyed: ,undestroyed))))))))
  
  
;; All this could probably be encapsulated by caching the query and/or counter
;; in the query and/or counter class like .net most probably does...


(definition Private-Bytes-Query
  #f)

(definition Private-Bytes-Counter
  #f)


(definition (get-private-bytes-query)
  (when (not Private-Bytes-Query)
    (setup-private-bytes))
  Private-Bytes-Query)


(definition (get-private-bytes-counter)
  (when (not Private-Bytes-Counter)
    (setup-private-bytes))
  Private-Bytes-Counter)


(definition (setup-private-bytes)
  (let* ((query (new Performance-Query))
         (counter (add-counter~ query object-name: "Process" counter-name: "Private bytes")))
    (set! Private-Bytes-Query query)
    (set! Private-Bytes-Counter counter)))


(definition public (get-private-bytes)
  (let ((query (get-private-bytes-query))
        (counter (get-private-bytes-counter)))
    (collect-data~ query)
    (get-counter-value~ query counter)))
  

;;;
;;;; I/O
;;;

@wait
(method public (i/o-snapshot . rest)
  (bind-keywords ((name nil)) rest
    (let ((handle (GetCurrentProcess)))
      (let ((io (new IO_COUNTERS)))
        (GetProcessIoCounters handle io)
        (parse~ JML
          `(<i/o>
             name: ,name
             read-bytes: ,(get io 'ReadTransferCount)
             write-bytes: ,(get io 'WriteTransferCount)
             other-bytes: ,(get io 'OtherTransferCount))))))))
