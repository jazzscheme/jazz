;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; System X11 platform
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2012
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.system.platform.x11 jazz


(import (jazz.platform)
        (jazz.system.access)
        (jazz.version))


;;;
;;;; Initialize
;;;


(definition (x11-debug-error-handler displ err)
  (define (signal-error)
    (let ((code (XErrorEvent-error_code-ref err)))
      (let ((text (XGetErrorText displ code)))
        (error "X11 Error: {a}" text))))
  
  (signal-error)
  @creates-a-circular-dependency
  (without-local-debugger
    (lambda ()
      (signal-error))))


(definition (x11-require-display)
  (or (XOpenDisplay (command-argument "display"))
      (error "Can't open X11 display")))


(definition public (initialize-platform)
  )


(definition public (initialize-windowing-platform find-setting)
  (initialize-locale)
  (x11-set-default-display (x11-require-display))
  (x11-generate-atoms)
  (when (find-setting 'synchronize-x11? #f)
    (x11-synchronize #t))
  (initialize-xim)
  (x11-set-error-handler x11-debug-error-handler)
  (x11-create-cursors))


;;;
;;;; User
;;;


(definition public (get-computer-name)
  "YO"
  @platform
  (let* ((size (+ MAX_COMPUTERNAME_LENGTH 1))
         (name (make-string size)))
    (GetComputerName name size)
    (adjust-string name)
    name))


(definition public (get-system-user-name)
  "YO"
  @Platform
  (let ((username (make-string MAX_PATH)))
    (GetUserName username MAX_PATH)
    (adjust-string username)
    username))


;;;
;;;; Keyboard
;;;


(definition public (key-down? key)
  #f)


(definition public (shift-down?)
  (or (XKeyDown? x11-default-display (char->integer (XKeysymToKeycode x11-default-display XK_Shift_L)))
      (XKeyDown? x11-default-display (char->integer (XKeysymToKeycode x11-default-display XK_Shift_R)))))


(definition public (control-down?)
  (or (XKeyDown? x11-default-display (char->integer (XKeysymToKeycode x11-default-display XK_Control_L)))
      (XKeyDown? x11-default-display (char->integer (XKeysymToKeycode x11-default-display XK_Control_R)))))


(definition public (alt-down?)
  (or (XKeyDown? x11-default-display (char->integer (XKeysymToKeycode x11-default-display XK_Meta_L)))
      (XKeyDown? x11-default-display (char->integer (XKeysymToKeycode x11-default-display XK_Meta_R)))
      (XKeyDown? x11-default-display (char->integer (XKeysymToKeycode x11-default-display XK_Alt_L)))
      (XKeyDown? x11-default-display (char->integer (XKeysymToKeycode x11-default-display XK_Alt_R)))))


(definition public (meta-down?)
  #f)


(definition public (modifiers-down)
  (values (shift-down?)
          (control-down?)
          (alt-down?)
          (meta-down?)))


(definition public (mouse-clicked?)
  (XButtonDown? x11-default-display))


;;;
;;;; Dialog
;;;


(definition package (use-generic-dialogs?)
  #t)


;;;
;;;; Version
;;;


(definition public Version-Info
  #f)


(definition (version-info)
(unimplemented 'version-info)
@unimp
  (unless Version-Info
    (set! Version-Info
          (let ((info (OSVERSIONINFOEX-make)))
            (OSVERSIONINFOEX-dwOSVersionInfoSize-set! info (OSVERSIONINFOEX-sizeof))
            (GetVersionEx info)
            info)))
  Version-Info)


(definition public Windows-Version
  #f)


(definition public (get-windows-version)
(unimplemented 'get-windows-version)
@unimp
  (unless Windows-Version
    (set! Windows-Version
          (let ((info (version-info)))
            (new Version
              (OSVERSIONINFOEX-dwMajorVersion-ref info)
              (OSVERSIONINFOEX-dwMinorVersion-ref info)))))
  Windows-Version)


(definition public (validate-version title what context version (register: register #f) (cleanup: cleanup #f))
  (unimplemented 'validate-version)
  @unimp
  (when register
    (register-crash-info register context (present~ version)))
  (let* ((process (get-process))
         (mandatory (mandatory-version~ process what)))
    (when (and mandatory (< version mandatory))
      (when cleanup
        (cleanup))
      (error "{a}{a} has version {a} and must be at least {a}"
             title
             (if context (format " {a}" context) "")
             (present~ version)
             (present~ mandatory))))))
