;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Processes
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.system.process.Process jazz


(import (jazz.debuggee)
        (jazz.designer)
        (jazz.io)
        (jazz.jrm)
        (jazz.jrm.register.stub)
        (jazz.library)
        (jazz.library.component)
        (jazz.network)
        (jazz.platform)
        (jazz.platform.crash)
        (jazz.system)
        (jazz.system.process)
        (jazz.system.process.stub))


(class Process extends Object


  (slot settings             initialize #f getter generate)
  (slot preferences-root     initialize #f getter generate)
  (slot preferences-designer initialize #f getter generate)
  (slot context              initialize #f)
  (slot exit-continuation    initialize #f)

  
  ;;;
  ;;;; Access
  ;;;
  
  
  (method public virtual (process-name)
    "Process")
  
  
  (method public virtual (process-owner)
    #f)
  
  
  (method public virtual (process-copyright)
    #f)
  
  
  (method public virtual (process-licensee)
    #f)
  
  
  (method public virtual (process-icon)
    "Process")
  

  (method public virtual (process-version)
    {Version 1 0 0})
  
  
  (method public virtual (process-email)
    #f)
  
  
  (method public virtual (process-actions)
    '())
  
  
  (method public virtual (process-event-source)
    (or (string-parameter "event-source" 'EventSource #f)
        (process-name)))
  
  
  ;;;
  ;;;; Startup
  ;;;
  
  
  (method public virtual (boot-environment)
    (catch (Cancel-Signal signal
             #f)
      (update-debuggee)
      (initialize-aliases)
      (initialize-settings)
      (register-versions)
      (prepare-phase)
      (start-phase)
      (finalize-phase)
      (finish-phase)
      (conclude-phase)
      (activate-process)
      (ready-debuggee)
      (when (run-loop?)
        ;; sanity check for a bug that can occur very easily and is extremely difficult to debug
        (when (and (eq? (current-thread) (get-load-thread)) (not-null? (get-load-stack)))
          (system-message (format "Internal error: Load stack not empty.{%}{%}This is probably caused by a product run unit doing its initialisations at the toplevel instead of registering them using register-product-run.{%}{%}Please report this problem to the JazzScheme team if this is not the case.")))
        (run-loop))
      #f))
  
  
  (method (update-debuggee)
    (unless (current-process-title)
      (current-process-title-set! (process-name)))
    (current-process-version-set! (present~ (process-version)))
    (update-debuggee-process))
  
  
  (method protected virtual (initialize-settings)
    )
  
  
  (method (register-versions)
    @unimplemented
    (register-crash-info windows-version: #f (present~ (get-windows-version))))
  
  
  (method (prepare-phase)
    (prepare-bindings)
    (prepare-aliases)
    (prepare-environment)
    (prepare-preferences)
    (prepare-preferences-aliases)
    (prepare-preferences-repositories)
    (prepare-workbench)
    (prepare-process))


  (method protected virtual (prepare-environment)
    (set-process self)
    (initialize-system))


  (method (prepare-preferences)
    (setup-preferences))

  
  (method public virtual (prepare-process)
    (setup-crash-handler))
  
  
  (method (start-phase)
    (start-environment)
    (start-process))


  (method protected virtual (start-environment)
    )
  
  
  (method public virtual (start-process)
    (initialize-platform))
  
  
  (method (finalize-phase)
    (finalize-environment)
    (start-servers)
    (finalize-process)
    (setup-profile))


  (method protected virtual (finalize-environment)
    )
  
  
  (method public virtual (finalize-process)
    )

  
  (method public virtual (setup-profile)
    )
    
  
  (method (finish-phase)
    (finish-environment)
    (finish-process))
  
  
  (method protected virtual (finish-environment)
    (register-base-objects))
  
  
  (method public virtual (finish-process)
    )
    
  
  (method (conclude-phase)
    (conclude-environment)
    (conclude-process))
  
  
  (method protected virtual (conclude-environment)
    )
  
  
  (method public virtual (conclude-process)
    (when (get-controller-debugger)
      (select-console)
      (start-repl-thread (current-thread) #f (get-console-port))))
  
  
  ;;;
  ;;;; Termination
  ;;;
  
  
  (method protected virtual (terminate-process)
    )
  
  
  ;;;
  ;;;; Environment
  ;;;
  
  
  (method public virtual (preserve-environment)
    )
  
  
  (method public virtual (close-environment)
    (persist-preferences)
    (unless (reloading-process?)
      (detach-from-controller)
      (stop-servers)))
  
  
  (method (persist-preferences)
    (when (and preferences-designer (persist-preferences?) (file? (get-origin~ (get-form~ preferences-designer))))
      (save~ preferences-designer)))
  
  
  ;;;
  ;;;; Toplevel
  ;;;
  
  
  (method public virtual (get-toplevel)
    #f)
  
  
  ;;;
  ;;;; Exit
  ;;;
  

  (method public (exit-process (status 0))
    (unload-process)
    (if exit-continuation
        (continuation-return exit-continuation status)
      (exit status)))
  

  (method public virtual (reload-process)
    (thread-execute (primordial-thread) 'reload-process
      (lambda ()
        (parameterize ((*reloading-process?* #t))
          (unload-process))
        (continuation-graft exit-continuation boot-environment))))
  
  
  (method (unload-process)
    (parameterize ((*exiting-process?* #t))
      (preserve-environment)
      (close-environment)
      (terminate-process)
      (set-process #f)))
  

  ;;;
  ;;;; Alias
  ;;;
  
  
  (method public virtual (process-alias name)
    (case name
      ((:process) self)
      (else
       (if (pair? name)
           (let ((sub (process-alias (car name))))
             (when sub
               (let ((next (cdr name)))
                 (if (null? next)
                     sub
                   (find-component~ sub next)))))
         #f))))
  
  
  ;;;
  ;;;; Context
  ;;;
  
  
  (method public (get-context)
    context)
  
  
  (method public (set-context ctx)
    (set! context ctx)
    (context-update))
  
  
  ;; Ugly hardcoding updates for now as the right approach
  ;; is not clear... Maybe the preferences setters do the
  ;; updates themselves or maybe objects interesseted in being
  ;; notified about preferences changes register themselves
  ;; for designer events that could be sent when the context is changed.
  (method protected virtual (context-update)
    (define (modify-preferences)
      (let* ((pref (get-preferences #f))
             (designer (get-preferences-designer))
             (trait (find-component~ pref context)))
        (set-active-trait~ pref trait)))
    
    (define (modify-connections)
      @wait
      (when (in-manifest? 'SQL-Connections-Manager)
        (modify-editor (get-guest~ (singleton-docked SQL-Connections-Manager #f)))))
    
    (define (modify-toolbox)
      @wait
      (when (in-manifest? 'Toolbox-Manager)
        (modify-editor (get-guest~ (singleton-docked Toolbox-Manager #f)))))
    
    (define (modify-editor editor)
      (let* ((client (get-client~ editor))
             (trait (find-component~ client context)))
        (set-active-trait~ client trait)
        (set-client~ editor #f)
        (set-client~ editor client)))
    
    (modify-preferences)
    (modify-connections)
    (modify-toolbox))
  
  
  (method public (install-context component)
    (when context
      (let ((trait (find-child~ component context)))
        (when trait
          (set-active-trait~ component trait)))))
  
  
  ;;;
  ;;;; Preferences
  ;;;
  
  
  (method protected virtual (persist-preferences?)
    #f)
  
  
  (method protected virtual (preferences-file)
    {File Profile "settings" "Preferences.jml"})
  
  
  (method protected virtual (setup-preferences)
    (setup-preferences/designer))
  
  
  (method (setup-preferences/designer)
    (define (preferences-context)
      (let ((arg (command-argument "context")))
        (cond (arg (string->symbol arg))
              (preferences-root (get-active-context~ preferences-root))
              (else #f))))
    
    (set-preferences/designer (load-preferences))
    (set! context (preferences-context))
    (install-context preferences-root)
    (let ((directory (get-current-directory~ preferences-root)))
      (when (and directory (exists?~ directory))
        (set-current-directory directory))))
  
  
  (method (set-preferences/designer preferences)
    (set! preferences-root preferences)
    (set! preferences-designer (new Designer form: (get-form~ preferences) reference: preferences)))

  
  (method protected virtual (load-preferences)
    (let ((persist? (persist-preferences?))
          (file (preferences-file)))
      (if (and persist? (is-alias? 'Profile) (exists?~ file))
          (instantiate~ (read-from-file file))
        (default-preferences))))
  
  
  (method protected virtual (default-preferences)
    (new Process-Preferences))
  
  
  (method public (apply-preferences preferences (client #f))
    (apply-preferences~ preferences client))
  
  
  (method public (save-preferences preferences (client #f))
    (save-preferences~ preferences (get-preferences-designer) client))

  
  (method public (set-preferences-property preferences property value)
    (set-property~ preferences (get-preferences-designer) property value))
  
  
  (method public virtual (get-preferences-rights)
    #f)
  
  
  ;;;
  ;;;; Persistence
  ;;;
  
  
  (method public virtual (persist-usernames?)
    #f)
  
  
  (method public virtual (persist-passwords?)
    #f)
  
  
  ;;;
  ;;;; Versions
  ;;;
  
  
  (method public virtual (mandatory-version what)
    #f)

  
  ;;;
  ;;;; Readyness
  ;;;
  
  
  @windows-specific
  (method protected (signal-readyness name)
    (let ((handle (OpenEvent EVENT_MODIFY_STATE #f name)))
      (when handle
        (SetEvent handle))))

  
  ;;;
  ;;;; Loop
  ;;;
  
  
  (method public virtual (run-loop)
    (continuation-capture
      (lambda (cont)
        (set! exit-continuation cont)
        (with-repl-context cont
          (lambda ()
            (with-current-loop
              (lambda ()
                (start-loop))))))))
  
  
  (method public (resume-loop)
    (let ((restart (find-restart 'resume-loop)))
      (when restart
        (resume-loop-action)
        (invoke-restart restart))))
  
  
  (method public virtual (resume-loop-action)
    )


  (method public virtual (start-loop)
    (declare (proper-tail-calls))
    (let (loop)
      (with-restart-catcher 'resume-loop (present-current-loop-restart) #f
        (lambda ()
          (let ((thunk (thread-read)))
            (with-exception-debugger (get-exception-debugger)
              thunk))))
      (loop)))


  ;;;
  ;;;; System
  ;;;
  
  
  (method public virtual (system-title)
    "JazzScheme")


  ;;;
  ;;;; Bindings
  ;;;
  
  
  (method protected virtual (prepare-bindings)
    )


  ;;;
  ;;;; Aliases
  ;;;
  
  
  (method protected virtual (prepare-aliases)
    )
  
  
  (method public virtual (prepare-preferences-aliases)
    (let ((pref (get-preferences 'aliases error?: #f)))
      (when pref
        (let ((aliases (get-children~ pref)))
          (for-each (lambda (pref)
                      (let ((alias (get-alias~ pref))
                            (directory (get-directory~ pref)))
                        (when directory
                          (register-alias alias (get-list~ directory)))))
                    aliases)))))
  
  
  (method public virtual (resolve-alias name)
    #f)


  ;;;
  ;;;; Repositories
  ;;;
  
  
  (method public virtual (prepare-preferences-repositories)
    (let ((pref (get-preferences 'repositories error?: #f)))
      (when pref
        (let ((repositories (get-repositories~ pref)))
          (for-each (lambda (dir)
                      (install-repository (parse~ dir)))
                    repositories)))))


  ;;;
  ;;;; Workbench
  ;;;
  
  
  (method public virtual (prepare-workbench)
    )
  
  
  ;;;
  ;;;; Servers
  ;;;
  
  
  (method protected virtual (start-servers)
    ;; started on demand
    (when (command-host/service "listen")
      (start-remote-server)))
  
  
  (method package (start-remote-server)
    (start-remote-listener default-host: (default-listener-host) default-service: (default-listener-service)))
  
  
  (method protected virtual (default-listener-host)
    #f)
  
  
  (method protected virtual (default-listener-service)
    #f)
  
  
  (method protected virtual (stop-servers)
    (stop-remote-listener))


  ;;;
  ;;;; Stub
  ;;;
  
  
  (method public (get-name)
    (process-name))
  
  
  (method public (get-icon)
    (process-icon))
  
  
  (method public (get-register)
    (get-local-register))


  ;;;
  ;;;; Register
  ;;;
  
  
  (method protected virtual (register-base-objects)
    )
  
  
  ;;;
  ;;;; Debuggers
  ;;;
  
  
  (method public virtual (get-local-debugger)
    #f)
  
  
  (method public virtual (get-snapshot-debugger)
    #f)
  
  
  ;;;
  ;;;; Debuggee
  ;;;
  
  
  (method public virtual (initial-console-context)
    :process)
  
  
  (method protected virtual (process-debuggee-loop)
    (debuggee-loop))))
