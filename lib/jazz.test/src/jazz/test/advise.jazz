;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Advise Test
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module jazz.test.advise jazz


;;;
;;;; Native
;;;


(native interaction-environment)
(native jazz:bootstrap-output-value)


;;;
;;;; Definition
;;;


(define abc 1)

(define (zoo x)
  (define (ha)
    2)
  (* x (ha) abc))


(definition public foo
  2)

(definition goo
  3)

(definition public (bar)
  (+ 2 (zoo 3)))


(define aaa 1)


;;;
;;;; Interface
;;;


(interface I
  
  (method virtual (yyy) ;; virtual
    ))


;;;
;;;; Class
;;;


(class X extends Object implements I
  
  (slot a accessors generate)
  
  (method override (initialize)
    (nextmethod)
    (set! a 2))
  
  (define (ya)
    1)
  
  (definition public (yi)
    (ya))
  
  (method public (yo) ;; final
    (+ a (yi)))
  
  (method public virtual (yum) ;; virtual
    (yo))
  
  (method override (yyy) ;; node
    4))


(class Y extends X
  
  (method override (yum)
    (list (nextmethod) 3)))


;;;
;;;; Generic
;;;


(generic (gen (<X> x) . rest))

(specific (gen (<X> x) . rest)
  1))
