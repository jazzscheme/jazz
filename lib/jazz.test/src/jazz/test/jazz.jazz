(module jazz.test.jazz jazz


(import (jazz.core (phase syntax)))


;;;
;;;; Goo
;;;


(class Goo extends Expression
  
  
  (slot expressions getter generate)
  
  
  (method override (initialize source expressions)
    (nextmethod)
    (set! expressions~self expressions))
  
  
  (method override (emit-expression declaration environment backend)
    (let ((expressions (emit-expressions expressions declaration environment backend)))
      (new-code
        (emit 'and backend self declaration environment expressions)
        Any
        source))))


(special-form (goo walker resume declaration environment form-src)
  (new Goo form-src (walk-list walker resume declaration environment (cdr (source-code form-src)))))


;;;
;;;; Hoo
;;;


(special-form (hoo walker resume declaration environment form-src)
  (let ((expressions (walk-list walker resume declaration environment (cdr (source-code form-src)))))
    (new-special-expression
      (lambda (expression declaration environment backend)
        (let ((expressions (emit-expressions expressions declaration environment backend)))
          (new-code
            (emit 'and backend expression declaration environment expressions)
            Any
            form-src)))))))
