;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Indicators
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.text.Indicator jazz


(class Indicator extends Object
  
  
  (slot color)
  (slot active-text initialize #f)
  (slot active      initialize #f)
  
  
  (method override (initialize color)
    (nextmethod)
    (set! color~self color))
  
  
  ;;;
  ;;;; Edition
  ;;;


  (method public (edit text position/range (ensure-displayed?: ensure-displayed? #t) (select?: select? #f))
    (define (install-indicator)
      (if (is? position/range Cell)
          (fill~ (get-model~ text) color position/range)
        (set-highlight-color~ (get-model~ text) position/range color))
      (when ensure-displayed?
        (if (is? position/range Cell)
            (ensure-cell-displayed~ text position/range)
          (ensure-range-displayed~ text position/range)))
      (set! active-text text)
      (set! active position/range)
      (reset-tooltip~ text)
      (focus-host~ (get-host~ text))
      (when select?
        (if (is? position/range Cell)
            (set-caret~ text position/range)
          (set-selection~ text position/range))))
    
    (define (uninstall-indicator)
      (if (is? active Cell)
          (unfill~ (get-model~ active-text) active)
        (set-highlight-color~ (get-model~ active-text) active #f))
      (reset-tooltip~ active-text)
      (set! active-text #f)
      (set! active #f))
    
    (when active-text
      (uninstall-indicator))
    (when text
      (install-indicator)))
  
  
  (method public (reset)
    (edit #f #f))))
