;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Paragraph Lines
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.text.Line jazz


(import (jazz.geometry)
        (jazz.graphic)
        (jazz.text))


(class Line extends Object
  
  
  (slot protected model       getter generate)
  (slot protected runs        getter generate)
  (slot protected rank   <fx> getter generate)
  (slot protected offset <fx> getter generate)
  (slot protected length <fx> getter generate)
  (slot protected left   <fx> getter generate)
  (slot protected top    <fx> getter generate)
  (slot protected width  <fx> getter generate)
  (slot protected height <fx> accessors generate)
  
  
  (method override (initialize self model runs rank offset left top width)
    (define (compute-length)
      (let ((len 0))
        (for-each (lambda (run)
                    (increase! len (get-length run)))
                  runs)
        len))
    
    (define (compute-height)
      (if (null? runs)
          (get-height (get-default-style model))
        (let ((height 0))
          (for-each (lambda (run)
                      (let ((run-height (get-height run)))
                        (set! height (max run-height height))))
                    runs)
          height)))
    
    (nextmethod self)
    (set! self.model model)
    (set! self.runs runs)
    (set! self.rank rank)
    (set! self.offset offset)
    (set! self.left left)
    (set! self.top top)
    (set! self.width width)
    (set! self.length (compute-length))
    (set! self.height (compute-height)))
  
  
  (method override (print self output readably)
    (print-unreadable self output
      (lambda (output)
        (write runs output))))
  
  
  ;;;
  ;;;; Access
  ;;;
  
  
  (method public (get-limit self)
    (+ offset length))
  
  
  (method public (get-bottom self)
    (+ top height))
  
  
  ;;;
  ;;;; Width
  ;;;
  
  
  (method package (contour-width self)
    (let ((width 0))
      (for-each (lambda (run <Run>)
                  (increase! width (compute-width run)))
                runs)
      width))
  
  
  ;;;
  ;;;; Range
  ;;;


  (method package (range-region self paragraph-left paragraph-top paragraph-width start end paragraph transformer)
    (let ((left (get-h (col->view self (or start 0))))
          (right (if (not end) paragraph-width (get-h (col->view self end)))))
      (let ((rect (new Rect left top right (get-bottom self))))
        (let ((offset-rect (offset-rect rect paragraph-left paragraph-top)))
          (new Cairo-Region rect: (transformer offset-rect))))))
  
  
  ;;;
  ;;;; Scan
  ;;;
  
  
  (method package (scan self end proc <procedure>)
    (let ((b 0)
          (h left)
          (tabs (get-tabs model)))
      (continuation-capture
        (lambda (return)
          (for-each (lambda (run)
                      (let ((nmost 0)
                            (rightmost 0))
                        (let ((len (get-length run)))
                          (scan run h 0 len tabs
                            (lambda (c n left mid right)
                              (if (and end (>= (+ b n) end))
                                  (continuation-return return)
                                (proc c (+ b n) left mid right)
                                (set! nmost n)
                                (set! rightmost right)))))
                        (increase! b (+ nmost 1))
                        (set! h rightmost)))
                    runs)))))
  
  
  ;;;
  ;;;; Drawing
  ;;;
  
  
  (method package (draw-line self surface context h <fx> v <fx> tabs left) <void>
    (let ((h (+ self.left h))
          (enabled? (draw-enabled? model)))
      (for-each (lambda (run)
                  (let ((width (draw-run run surface context h v height tabs left enabled?)))
                    (increase! h width)))
                runs)))
  
  
  ;;;
  ;;;; Coordinates
  ;;;
  
  
  (method package (view->col self pos <Point>) <fx+>
    (let ((h (get-h pos))
          (v (get-v pos)))
      (and (>= v top) (< v (get-bottom self))
        (continuation-capture
          (lambda (return)
            (scan self #f
              (lambda (c n left mid right)
                (when (> mid h)
                  (continuation-return return n))))
            (get-length self))))))
  
  
  (method package (col->view self col <fx>) <Point>
    (let ((rightmost 0))
      (continuation-capture
        (lambda (return)
          (scan self #f
            (lambda (c n left mid right)
              (when (= n col)
                (continuation-return return (new Point left top)))
              (set! rightmost right)))
          ;; Allow the caret on an empty line (runs is null) with a
          ;; center or right justification to be correctly aligned.
          (unless (not-null? runs)
            (set! rightmost left))
          (new Point rightmost top)))))
  
  
  (method package (col->view-strict self col <fx>) <Point+>
    (continuation-capture
      (lambda (return)
        (scan self #f
          (lambda (c n left mid right)
            (when (= n col)
              (continuation-return return (new Point left top)))))
        #f)))
  
  
  (method package (col->text self col <fx>) <Cell+>
    (and (>= col offset) (< col (get-limit self))
      (new Cell rank (- col offset))))))
