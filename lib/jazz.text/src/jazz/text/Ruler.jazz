;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Text Ruler
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.text.Ruler jazz


(import (jazz.geometry)
        (jazz.graphic)
        (jazz.markup)
        (jazz.text)
        (jazz.ui)
        (jazz.window))


(class Ruler extends Header-View


  (form
    (<install>               shown?: #f
      (<!>     name: content layout-type: fill)))
  
  
  ;;;
  ;;;; Layout
  ;;;
  
  
  (method override (get-header-height self)
    (if shown? 22 0))


  ;;;
  ;;;; Drawing
  ;;;
  
  
  (definition Tabbed-Color
    {Color Dark-Red})
  
  (definition Untabbed-Color
    {Color red: 90 green: 90 blue: 90})
  
  
  (method override (draw self surface context)
    (define (draw-ruler surface width height)
      (draw-border surface width height)
      (draw-measurements surface width height))
    
    (define (draw-border surface width height)
      (let* ((outer (new Rect 0 0 width height))
             (inner (inflate-rect outer -1 -1)))
        (draw-edge surface outer inner: 'raised edges: 'rectangle)
        (fill-rect surface inner {Color Medium})))
    
    (define (draw-measurements surface width height)
      (let* ((model (get-model client))
             (unit 8)
             (major 4)
             (number (quotient width unit))
             (limit (- width 1))
             (left (get-left-padding client))
             (tabs (get-tabs model)))
        (set-color surface {Color Black})
        (set-line-width surface 1)
        (for-each (lambda (n)
                    (let* ((rank (* n unit))
                           (pixel (+ left rank)))
                      (unless (>= pixel limit)
                        (let* ((tab? (memq? rank tabs))
                               (major? (= (modulo n major) 0))
                               (offset (if major? 5 8)))
                          (set-color surface (if tab? Tabbed-Color Untabbed-Color))
                          (move-to surface pixel offset)
                          (line-to surface pixel (- height offset))))))
                  (naturals 0 (+ number 1)))))
    
    (let ((clipper (get-clipper surface)))
      (let ((width (get-width self))
            (height (get-header-height self)))
        (when (< (get-top clipper) height)
          (draw-ruler surface width height)))))
  

  ;;;
  ;;;; Cursor
  ;;;


  (method override (cursor-update self evt)
    (set-cursor :arrow))


  ;;;
  ;;;; Mouse
  ;;;
  
  
  (method override (mouse-down self evt)
    )
  
  
  (method override (drag-move self evt)
    )
  
  
  (method override (drag-up self evt . rest)
    )))
