;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Exploring Text
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.text.Text-Explorer jazz


(import (jazz.text))


(proclaim (warn optimizations))


(class Explore-Error extends Source-Error)


(class undocumented Text-Explorer extends Explorer


  (slot model      <Text-Model>  getter generate)
  (slot syntax     <Text-Syntax> getter generate)
  (slot paragraphs <Axis>)
  (slot limit      <fx>)
  (slot beginning  <Cell>)
  (slot ending     <Cell>)
  (slot start      <Cell>        initialize (new Cell 0 0))
  (slot end        <Cell>        initialize (new Cell 0 0))
  (slot kind       <symbol+>     initialize #f)
  (slot line-hook  <procedure+>  initialize #f accessors generate)
  
  
  (method override (initialize self mdl <Text-Model> (direction: direction 'forward) (start: start #f) (end: end #f) (range: range #f))
    (nextmethod self)
    (set! model mdl)
    (set! syntax (get-syntax model))
    (set! paragraphs (get-paragraphs model))
    (set! limit (get-limit model))
    (set! beginning (text-beginning model))
    (set! ending (text-ending model))
    (set-direction self direction)
    (if range
        (set-range self range)
      (when (or start end)
        (set-start self (or start end))
        (set-end self (or end start)))))


  ;;;
  ;;;; Accessors
  ;;;


  (method override (goto-beginning self) <void>
    (set-start self beginning))


  (method (goto-ending self) <void>
    (set-end self ending))


  (method public (at-beginning? self) <bool>
    (<= start beginning))


  (method public (at-ending? self) <bool>
    (>= end ending))
  
  
  (method public (get-start self) <Cell>
    (copy start))


  (method public (set-start self pos <Cell>) <void>
    (set-line start (get-line pos))
    (set-col start (get-col pos)))


  (method public (get-end self) <Cell>
    (copy end))


  (method public (set-end self pos <Cell>) <void>
    (set-line end (get-line pos))
    (set-col end (get-col pos)))


  (method public (get-range self) <Range$Cell$>
    (new Range$Cell$ (copy start) (copy end)))


  (method public (set-range self range <Range$Cell$>) <void>
    (set-start self (get-start range))
    (set-end self (get-end range)))
  
  
  (method public (set-pos self pos <Cell+>) <void>
    (set-start self pos)
    (set-end self pos))
  
  
  (method protected (call-line-hook self)
    (when line-hook
      (line-hook self)))

  
  (method public (looking-at? self str <string>)
    (let ((len (string-length str)))
      (let (lp (i 0))
        (cond ((>= i len) #t)
              ((not (eqv? (string-ref str i) (char-forward self i))) #f)
              (else (lp (+ i 1)))))))
  
  
  (method public (looking-back? self str <string>)
    (let ((len (string-length str)))
      (let (lp (i 0))
        (cond ((>= i len) #t)
              ((not (eqv? (string-ref str (- len i 1)) (char-backward self i))) #f)
              (else (lp (+ i 1)))))))

  
  ;;;
  ;;;; Mark
  ;;;


  (method public inline (get-kind self) <symbol>
    kind)


  (method package inline (set-kind self knd <symbol+>) <void>
    (set! kind knd))
  

  (method package inline (get-paragraph self n <fx>) <Paragraph>
    (element paragraphs n))


  (method package inline (paragraph-string self n <fx>) <string>
    (get-string (get-paragraph self n)))


  (method package inline (paragraph-length self n <fx>) <fx>
    (cardinality (paragraph-string self n)))
  
  
  (method public (get-char self pos <Cell>) <char>
    (let ((line (get-line pos))
          (col (get-col pos)))
      (let ((string (get-string (get-paragraph self line))))
        (if (< col (cast <fx> (cardinality string)))
            (element string col)
          #\newline))))


  (method public (get-range-string self start <Cell> end <Cell>) <string>
    (get-string model (new Range$Cell$ start end)))
  
  
  (method public (get-marked self) <string>
    (get-range-string self start end))
  
  
  (method public (read-marked self)
    (read-string-element (get-marked self)))
  
  
  ;; a quicky for now: will skip the quote in front of a symbol
  ;; the right thing would probably for backward-expr not to include the quote
  (method public (get-symbol-string self) <string>
    (if (eqv? (get-char self start) #\quote)
        (get-range-string self (+ start 1) end)
      (get-marked self)))
  
  
  (method public (find-marked-symbol self) <symbol+>
    (find-symbol (get-marked self)))
  
  
  (method public (intern-marked-symbol self) <symbol>
    (string->symbol (get-marked self)))


  (method public (get-range-symbol self start end) <symbol+>
    (find-symbol (get-range-string self start end)))
  
  
  (method public (get-mark self)
    (new Explorer-Mark (get-kind self) (get-range self)))
  
  
  (method public (specifier-marked? self)
    (and (eq? kind 'symbol)
         (eqv? (get-char self start) #\<)
         (eqv? (get-char self (- end 1)) #\>)))


  ;;;
  ;;;; Moving
  ;;;


  (method (next! self pos <Cell>) <bool>
    (let ((line (get-line pos))
          (col (get-col pos)))
      (cond ((< col (paragraph-length self line))
             (increase-col pos)
             #t)
            ((< line limit)
             (set-line pos (+ line 1))
             (set-col pos 0)
             #t)
            (else
             #f))))


  (method (previous! self pos <Cell>) <bool>
    (let ((line (get-line pos))
          (col (get-col pos)))
      (cond ((> col 0)
             (increase-col pos -1)
             #t)
            ((> line 0)
             (let ((previous-line (- line 1)))
               (set-line pos previous-line)
               (set-col pos (paragraph-length self previous-line)))
             #t)
            (else
             #f))))


  (method (next-cell! self pos <Cell>)
    (and (next! self pos)
         pos))


  (method (previous-cell! self pos <Cell>)
    (and (previous! self pos)
         pos))
  
  
  (method package (next-pos self pos <Cell> offset <fx>) <Cell+>
    (let ((pos (copy pos)))
      (let (iterate (offset offset))
        (cond ((<= offset 0)
               pos)
              ((next! self pos)
               (iterate (- offset 1)))
              (else
               #f)))))
  
  
  (method package (previous-pos self pos <Cell> offset <fx>) <Cell+>
    (let ((pos (copy pos)))
      (let (iterate (offset offset))
        (cond ((<= offset 0)
               pos)
              ((previous! self pos)
               (iterate (- offset 1)))
              (else
               #f)))))

  
  (method override (forward self)
    (next! self end))
  
  
  (method (forward-n self offset <fx>)
    (do ((i 0 (+ i 1))) ((>= i offset)) (forward self)))
  
  
  (method override (backward self)
    (previous! self start))
  

  (method package (backward-n self offset <fx>)
    (do ((i 0 (+ i 1))) ((>= i offset)) (backward self)))

  
  (method public (next-char self pos <Cell> offset <fx>) <char+>
    (define (next-in-text? pos <Cell>) <bool>
      (let ((line (get-line pos))
            (col (get-col pos)))
        (if (< line limit)
            (in-text? pos)
          (and (= line limit) (< col (paragraph-length self line))))))
    
    (define (in-text? pos <Cell>) <bool>
      (let ((line (get-line pos))
            (col (get-col pos)))
        (and (>= line 0) (>= col 0) (or (< line limit) (and (= line limit) (<= col (paragraph-length self line)))))))
    
    (let ((pos (next-pos self pos offset)))
      (and pos (next-in-text? pos)
        (get-char self pos))))
  
  
  (method public inline (char-forward self offset <fx>) <char+>
    (next-char self end offset))
  

  (method public (previous-char self pos <Cell> offset <fx>) <char+>
    (let ((pos (previous-pos self pos (+ offset 1))))
      (and pos
           (get-char self pos))))
  
  
  (method public inline (char-backward self offset <fx>) <char+>
    (previous-char self start offset))
  
  
  (method public (forward-while self predicate <procedure>)
    (let (iterate)
      (let ((c (char-forward self 0)))
        (if (not c)
            #f
          (if (predicate c)
              (if (forward self)
                  (iterate)
                #f)
            #t)))))
  
  
  (method public (backward-while self predicate <procedure>)
    (let (iterate)
      (let ((c (char-backward self 0)))
        (if (not c)
            #f
          (if (predicate c)
              (if (backward self)
                  (iterate)
                #f)
            #t)))))
  
  
  (method public (forward-until self predicate <procedure>)
    (forward-while self (lambda (c) (not (predicate c)))))
  
  
  (method public (backward-until self predicate <procedure>)
    (backward-while self (lambda (c) (not (predicate c)))))
  
  
  (method public (forward-to self char)
    (forward-until self (lambda (c) (eqv? c char))))
  
  
  (method public (backward-to self char)
    (backward-until self (lambda (c) (eqv? c char))))
  
  
  (method public (forward-whitespaces self)
    (forward-while self whitespace?))
  
  
  (method public (backward-whitespaces self)
    (backward-while self whitespace?))


  ;;;
  ;;;; Word
  ;;;
  
  
  (method public (forward-word self)
    (let (iterate)
      (let ((c (char-forward self 0)))
        (if (or (not c) (not (alphanumeric? c)))
            #t
          (forward self)
          (iterate)))))
  
  
  (method public (forward-non-word self)
    (let (iterate)
      (let ((c (char-forward self 0)))
        (if (or (not c) (alphanumeric? c))
            #t
          (forward self)
          (iterate)))))
  
  
  (method public (backward-word self)
    (let (iterate)
      (let ((c (char-backward self 0)))
        (if (or (not c) (not (alphanumeric? c)))
            #t
          (backward self)
          (iterate)))))
  
  
  (method public (backward-non-word self)
    (let (iterate)
      (let ((c (char-backward self 0)))
        (if (or (not c) (alphanumeric? c))
            #t
          (backward self)
          (iterate)))))

  
  (method protected virtual (forward-constituent self)
    (let ((last #f))
      (let (iterate)
        (let ((c (char-forward self 0)))
          (cond ((eqv? c #\backslash)
                 (forward self)
                 (forward self)
                 (set! last c)
                 (iterate))
                ((or (not c) (not (text-constituent? self c)))
                 (set! kind 'symbol)
                 kind)
                (else
                 (forward self)
                 (set! last c)
                 (iterate)))))))

  
  (method protected virtual (backward-constituent self)
    (let ((last #f))
      (let (iterate)
        (let ((c (char-backward self 0)))
          (cond ((eqv? (char-backward self 1) #\backslash)
                 (backward self)
                 (backward self)
                 (set! last c)
                 (iterate))
                ((or (not c) (not (text-constituent? self c)))
                 (set! kind 'symbol)
                 kind)
                (else
                 (backward self)
                 (set! last c)
                 (iterate)))))))


  (method public virtual (outer-expr self . rest)
    (forward-constituent self)
    (backward-constituent self))


  ;;;
  ;;;; Constituent
  ;;;
  
  
  (method public (text-constituent? self char)
    (text-constituent? syntax char))


  ;;;
  ;;;; Paragraph
  ;;;


  (method public (paragraph-start self)
    (set-col start 0))
  
  
  (method public (paragraph-end self)
    (set-col end (paragraph-length self (get-line end))))


  (method public (previous-paragraph self)
    (increase-line start -1)
    (set-col start 0))


  (method public (next-paragraph self)
    (increase-line end)
    (set-col end 0))
  
  
  (method public (paragraph-column self)
    (forward-while self (lambda (c) (eqv? c #\space))))


  ;;;
  ;;;; Style
  ;;;
  
  
  (method public (backward-style self predicate (strict?: strict? #f))
    (let (iterate)
      (let ((run (get-run-at model start)))
        (when (if strict?
                  (and run (predicate (get-style run)))
                (or (not run) (predicate (get-style run))))
          (when (backward self)
            (iterate))))))
  
  
  (method public (forward-style self predicate (strict?: strict? #f))
    (let (iterate)
      (let ((next (next-pos self end 1)))
        (when next
          (let ((run (get-run-at model next)))
            (when (if strict?
                      (and run (predicate (get-style run)))
                    (or (not run) (predicate (get-style run))))
              (when (forward self)
                (iterate))))))))
  
  
  (method public (select-style self predicate (strict?: strict? #f))
    (backward-style self predicate strict?: strict?)
    (forward-style self predicate strict?: strict?))))
