;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Text Style Combo
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.text.Text-Style-Combo jazz


(import (jazz.handler)
        (jazz.text))


(class undocumented Text-Style-Combo extends Text-Combo
  
  
  ;;;
  ;;;; Client
  ;;;
  
  
  (method override (client-update)
    (set-choices (map (lambda (name)
                        (list (new Text-Style base: name) (->string name)))
                      (sort string-ci<? (table-keys (get-named-styles~ (get-model~ client))) key: ->string))))
  
  
  ;;;
  ;;;; Selection
  ;;;
  
  
  (method override (selection-change)
    (let ((name (determine-name (get-style-at~ (get-model~ client) (get-end~ client)))))
      (set-content (and name (->string name)))))
  
  
  ;;;
  ;;;; Choice
  ;;;
  
  
  (method override (combo-choice)
    (let ((name (determine-name (get-value))))
      (let ((handler (new Event-Handler target-name: :focus method-name: 'on-text-style properties: (list style: name))))
        (notify-handler client handler client #f)))
    (selection-change))))
