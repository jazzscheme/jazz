;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Text -> XHTML Export
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.text.TextToXHTML-Exporter jazz


(import (jazz.text))


(class undocumented TextToXHTML-Exporter extends Object
    
  
  (slot text)
  
  
  (method override (initialize text)
    (nextmethod)
    (set! text~self text))
  
  
  ;;;
  ;;;; HTML
  ;;;
  
  
  (method public (export-html)
    `(<html>
       ,(export-head)
       ,(export-body)))
  
  
  ;;;
  ;;;; Head
  ;;;
  
  
  (method (export-head)
    `(<head>))
  
  
  ;;;
  ;;;; Body
  ;;;
  
  
  (method (export-body)
    `(<body>
       ,@(export-element text #f)))
  
  
  ;;;
  ;;;; Element
  ;;;
  
  
  (method (export-element element in-table?)
    (typecase element
      ((Text-View) (export-text element in-table?))
      ((Paragraph) (export-paragraph element in-table?))
      (else (error "Unsupported element: {t}" element))))
  
  
  ;;;
  ;;;; Text
  ;;;
  
  
  (method (export-text element in-table?)
    (accumulate (get-paragraphs~ element)
                (lambda (paragraph)
                  (export-paragraph paragraph in-table?))))
  
  
  (method (export-paragraph paragraph in-table?)
    (let ((fmt (get-format~ paragraph)))
      (define (paragraph-style)
        (case (get-justification~ fmt)
          ((center) `(style: "text-align: center"))
          ((right) `(style: "text-align: right"))
          (else '())))
          
      (let ((style (paragraph-style))
            (runs (export-runs paragraph in-table?)))
        `(<p> ,@style ,@runs))))
  
  
  (method (export-runs paragraph in-table?)
    (map (lambda (run)
           (export-run run in-table?))
         (get-runs~ paragraph)))
  
  
  (method (export-run run in-table?)
    (define (add tag flag element)
      (if flag
          `(,tag ,element)
        element))
    
    (define (add-color color element)
      (if color
          `(<span> style: ,(format "color: {a}" (->rbg~ color)) ,element)
        element))
    
    (define (add-heading style element)
      (cond ((inherits?~ style 'Heading1) `(<h1> ,element))
            ((inherits?~ style 'Heading2) `(<h2> ,element))
            ((inherits?~ style 'Heading3) `(<h3> ,element))
            ((inherits?~ style 'Heading4) `(<h4> ,element))
            ((inherits?~ style 'Heading5) `(<h5> ,element))
            (else #f)))
    
    (let ((str (export-string~ run))
          (style (get-style~ run)))
      (typecase style
        ((View-Style)
         (export-element (get-view~ style) in-table?))
        ((Link-Style)
         `(<a> href: ,(format "#{a}" str) ,str))
        ((Image-Style)
         `(<a> href: "d:\\jazz\\large.png" (<img> title: "dark" src: "d:\\jazz\\small.png" alt: "" width: "150" height: "90")))
        ((Text-Style)
         (let ((font (get-font~ style))
               (color (get-color~ style)))
           (let ((bold? (get-bold?~ font))
                 (italic? (get-italic?~ font))
                 (underline? (get-underline?~ font)))
             (or (add-heading style str)
                 (add '<b> bold? (add '<i> italic? (add '<u> underline? (add-color color str)))))))))))
  
  
  ;;;
  ;;;; View
  ;;;
  
  
  @wait
  (method (export-element element in-table?)
    (typecase element
      ((Tree-View) (export-tree element #t))
      ((Tree-Row) (export-row element))
      ((Tree-Label) (export-tree-label element))
      ((Tree-Label-Column) (export-tree-column element))
      ((Table-Border) (export-tree (locate~ element 'tree)
                                   (get-shown?~ (locate~ element 'header))))
      ((Table-Cell) (export-element (locate~ element 'text) in-table?))
      (else (error "Unsupported element: {t}" element))))
  
  
  @wait
  (method (export-tree tree header?)
    @w
    (format output "<TABLE BORDER=\"0\" style=\"border: 1px solid black\" CELLSPACING=\"0\" BGCOLOR=WHITE>{%}")
    (format output "<TABLE BORDER=\"1\" CELLSPACING=\"0\" BGCOLOR=WHITE>{%}")
    (when header?
      (format output "<TR>{%}")
      (for-each (lambda (column)
                  (format output "<TH>")
                  (export-element column #t)
                  (format output "</TH>{%}"))
                (get-columns~ tree))
      (format output "</TR>{%}"))
    (for-each-row~ tree export-row)
    (format output "</TABLE>{%}"))
  
  
  @wait
  (method (export-row row)
    (format output "<TR>")
    (let ((in-table? #t)
          (first? #t))
      (for-each (lambda (child)
                  (format output "<TD VALIGN=\"TOP\">")
                  (when (and first? (/= (get-level~ row) 0))
                    (format output "-- "))
                  (export-element child in-table?)
                  (format output "</TD>{%}")
                  (set! first? #f))
                (get-children~ row)))
    (format output "</TR>{%}"))
  
  
  @wait
  (method (export-tree-label data)
    (let ((string (localize (get-title~ data))))
      (if (empty-string? string)
          (format output "&nbsp;")
        (format output "{a}" string))))
  
  
  @wait
  (method (export-tree-column column)
    (format output "{a}" (localize (get-title~ column))))))
