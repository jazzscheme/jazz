;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Text Descriptors
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module jazz.text.descriptors jazz


(import (jazz.designer)
        (jazz.descriptor)
        (jazz.document.descriptors)
        (jazz.domain)
        (jazz.exemplar.descriptors)
        (jazz.jml)
        (jazz.outline.descriptors)
        (jazz.preferences.descriptors)
        (jazz.resource))


;;;
;;;; Text-Preferences
;;;


(class Text-Preferences-Descriptor extends Document-Preferences-Descriptor
  
  
  (form
    (<install>
      (<properties~>
        (<Property-Descriptor> name: background
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: default-style
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: pulse-caret?
          (<Boolean-Domain>    name: domain))
        (<Property-Descriptor> name: auto-complete?
          (<Boolean-Domain>    name: domain))))))


;;;
;;;; Plain-Text-Preferences
;;;


(class Plain-Text-Preferences-Descriptor extends Document-Preferences-Descriptor
  
  
  (form
    (<install>
      (<properties~>
        (<Property-Descriptor> name: title-style
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: comment-style
          (<Value-Domain>      name: domain))))))


;;;
;;;; Style-Preferences
;;;


(class Style-Preferences-Descriptor extends Exemplar-Preferences-Descriptor
  
  
  (form
    (<install>                                 can-rename?: #f can-delete?: #f can-relocate?: #f can-copy?: #f
      (<properties~>
        (<Property-Descriptor> name: base
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: alignment
          (<Value-Domain>      name: domain))))))


;;;
;;;; Styles-Preferences
;;;


(class Styles-Preferences-Descriptor extends Exemplars-Preferences-Descriptor
  
  
  (form
    (<install> can-rename?: #f can-delete?: #f can-relocate?: #f can-copy?: #f)))


;;;
;;;; Text-Style-Preferences
;;;


(class Text-Style-Preferences-Descriptor extends Preferences-Descriptor
  
  
  (form
    (<install>                                 can-rename?: #f can-delete?: #f can-relocate?: #f can-copy?: #f
      (<properties~>
        (<Property-Descriptor> name: base
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: alignment
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: font
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: color
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: highlight
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: frame
          (<Value-Domain>      name: domain))))))


;;;
;;;; Text-View
;;;


(class Text-View-Descriptor extends Outline-View-Descriptor
  
  
  (form
    (<install>                                                 image: {Image-Resource "Script"}
      (<properties~>
        (<Property-Descriptor> name: text-content              standard?: #f
          (<Value-Domain>      name: domain                    nullable?: #t))
        (<Property-Descriptor> name: selectable?               standard?: #f
          (<Boolean-Domain>    name: domain))
        (<Property-Descriptor> name: editable?                 standard?: #f
          (<Boolean-Domain>    name: domain))
        (<Property-Descriptor> name: accepts-returns?
          (<Boolean-Domain>    name: domain))
        (<Property-Descriptor> name: focus-selects-all?
          (<Boolean-Domain>    name: domain))
        (<Property-Descriptor> name: show-unfocused-selection?
          (<Boolean-Domain>    name: domain))
        (<Property-Descriptor> name: force-tab-navigate?       standard?: #f
          (<Boolean-Domain>    name: domain)))))
  
  
  (method override (component-surrogate-class component)
    Text-View-Surrogate)
  
  
  (method override (component-save-properties component designer)
    (when (get-modified?~ component)
      (set-property~ designer component 'text-content (get-content~ (get-model~ component)) design-events?: #f)
      (set-modified?~ component #f))))


;;;
;;;; Entry-Text-View
;;;


(class Entry-Text-View-Descriptor extends Text-View-Descriptor
  
  
  (form
    (<install>
      (<properties~>
        (<Property-Descriptor> name: editor standard?: #t
          (<Value-Domain>      name: domain nullable?: #t))))))


;;;
;;;; Text-Model
;;;


(class Text-Model-Descriptor extends Outline-View-Descriptor
  
  
  (form
    (<install>
      (<properties~>
        (<Property-Descriptor> name: text
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: text-content
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: wrap?
          (<Boolean-Domain>    name: domain))
        (<Property-Descriptor> name: default-format
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: default-style
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: paragraph-spacing
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: char-encoding
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: eol-encoding      title: "EOL Encoding"
          (<Value-Domain>      name: domain)))))))
