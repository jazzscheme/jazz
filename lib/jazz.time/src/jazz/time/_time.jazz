;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Time
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module jazz.time jazz


(require (time)
         (jazz.time.classes))


(hub cpu-duration)
(hub real-duration)
(hub real-duration-in-milliseconds)
(hub reset)


(export (time))
(import (time))


(definition package (construct-date . rest)    
  (apply make-date (collect-date-values rest)))


(definition package (construct-time . rest)
  (apply make-time (collect-time-values rest)))


(definition public (make-default-date)
  (make-date 0 0 0 0 0 0 0 (date-zone-offset (current-date))))


(definition public (make-default-time)
  (make-time (time-type (current-time)) 0 0))


(definition (collect-date-values args)
  (assert (<= (length args) 8))
  (let* ((default-date (make-default-date))
         (date-values (collect-date/time-values args default-date (list date-year date-month date-day date-hour date-minute date-second date-nanosecond)))
         (zone-offset (if (< (length args) 8) 
                          (date-zone-offset default-date)
                        (let ((time-zone (last args)))
                          (cond ((and (symbol? time-zone) (eq? 'Z time-zone)) 0)
                                ((number? time-zone) time-zone)
                                ((and (string? time-zone) (= 5 (string-length time-zone))) (* 60 (+ (* 60 (string->number (substring time-zone 0 3))) (string->number (substring time-zone 3 5)))))
                                (else (error "badly formed time zone")))))))
    (reverse (cons zone-offset date-values))))


(definition (collect-time-values args)
  (assert (<= (length args) 3))
  (reverse (collect-date/time-values args (make-default-time) (list time-second time-nanosecond time-type))))


(definition (collect-date/time-values args default-date/time default-getters)
  (cond ((null? default-getters)
         '())
        ((null? args)
         (cons ((car default-getters) default-date/time) (collect-date/time-values '() default-date/time (cdr default-getters))))
        (else
         (cons (car args) (collect-date/time-values (cdr args) default-date/time (cdr default-getters))))))


(definition (date/time-literal-parameter-list time/date default-time/date printers)
  (if (and (not-null? printers)
           (find-if (lambda (printer) (not (string=? (printer time/date) (printer default-time/date)))) printers))
      (concatenate " " ((car printers) time/date) (date/time-literal-parameter-list time/date default-time/date (cdr printers)))
    ""))

  
(class Time-Class extends Class)


(class primitive Time metaclass Time-Class extends Object
   
  
  (method override (print self output readably)
    (format output "~{{a}{a}}"
      (category-name (class-of self))
      (date/time-literal-parameter-list self (make-default-time) (map (lambda (proc) (compose ->string proc)) (list time-second time-nanosecond time-type)))))
  
  
  (method override (compare-object self target)
    (if (time? target)
        (cond ((time=? self target) :equal)
              ((time<? self target) :less)
              (else :greater))
      :incompatible)))


(class Date-Class extends Class)


(class primitive Date metaclass Date-Class extends Object
  
  
  (method override (print self output readably)
    (format output "~{{a}{a}}"
      (category-name (class-of self))
      (date/time-literal-parameter-list self (make-default-date) (map (lambda (format-string) 
                                                                        (lambda (date) (date->string date format-string))) 
                                                                      '("~Y" "~m" "~d" "~H" "~M" "~S" "~N" "\"~z\"")))))
  
  
  (method override (compare-object self target)
    (if (date? target)
        (let ((time1 (date->time-utc self))
              (time2 (date->time-utc target)))
          (cond ((time=? time1 time2) :equal)
                ((time<? time1 time2) :less)
                (else :greater)))
      :incompatible)))


(definition public (system-date)
  (current-date (system-timezone)))


(definition public (time->seconds time)
  (+ (exact->inexact (time-second time)) (/ (time-nanosecond time) 1000000000.)))


(definition public (seconds->time seconds)
  (let ((int-seconds (inexact->exact (floor seconds))))
    (make-time time-utc (inexact->exact (floor (* 1000000 (- seconds int-seconds)))) int-seconds)))


;; convert
(definition public (date-universal->local date)
  date)


;; convert
(definition public (date-local->universal date)
  date)


(definition public (parse-date-day date)
  (string->date date "~Y/~m/~d"))


(definition public (parse-date-time date)
  (string->date date "~Y/~m/~d ~H:~M"))


(definition public (parse-date-day-french date)
  (string->date date "~d/~m/~Y"))


(definition public (present-date date)
  (date->string date "~Y/~m/~d ~H:~M:~S"))


(definition public (present-date-day date)
  (date->string date "~Y/~m/~d"))


(definition public (present-date-time date)
  (date->string date "~Y/~m/~d ~H:~M"))


(definition public (present-date-day-french date)
  (date->string date "~d/~m/~Y"))


(definition public (present-date-hour date)
  (date->string date "~H:~M"))


;;;
;;;; Arithmetic
;;;


(definition public (date= d1 d2)
  (and (= (date-year d1) (date-year d2))
       (= (date-month d1) (date-month d2))
       (= (date-day d1) (date-day d2))
       (= (date-hour d1) (date-hour d2))
       (= (date-second d1) (date-second d2))
       (= (date-nanosecond d1) (date-nanosecond d2))
       (= (date-zone-offset d1) (date-zone-offset d2))))


(definition public (date-add date count type)
  (let ((nanosecond (date-nanosecond date))
        (second (date-second date))
        (minute (date-minute date))
        (hour (date-hour date))
        (day (date-day date))
        (month (date-month date))
        (year (date-year date))
        (zone-offset (date-zone-offset date)))
    (case type
      ((nanosecond) (increase! nanosecond count))
      ((second) (increase! second count))
      ((minute) (increase! minute count))
      ((hour) (increase! hour count))
      ((day) (increase! day count))
      ((month) (increase! month count))
      ((year) (increase! year count))
      ((zone-offset) (increase! zone-offset count))
      (else (unimplemented)))
    (time-utc->date (date->time-utc (make-date nanosecond second minute hour day month year zone-offset)))))


;;;
;;;; Period
;;;


(class undocumented Period extends Range
  
  
  @convert
  (method public (get-duration field)
    (let ((delta (- (get-elapse (get-time end)) (get-elapse (get-time start)))))
      (get-duration (new Time delta) field)))
  
  
  @convert
  (method public (present)
    (format :string "{a} {a} {a}"
            (present-date start)
            (localize-object {Locales english: "to" french: "au"})
            (present-date end)))
  
  
  @convert
  (method public (for-each-day proc)
    (let ((date start))
      (while (<= date end)
        (proc date)
        (set! date (add date 'day 1)))))
  
  
  @convert
  (method public (includes-day-of-week? day)
    (for-each-day
      (lambda (date)
        (when (= (symbolic-day-of-week Date (get-day-of-week date)) day)
          (return #t))))
    #f))


;;;
;;;; Timer
;;;


(definition user-message
  (request-service 'user-message))


(class Timer extends Object


  (slot real-start)
  (slot cpu-start)


  (method override (initialize self)
    (nextmethod self)
    (reset self))


  (method public (reset self)
    (set! real-start (real-time))
    (set! cpu-start (cpu-time)))


  (method public (real-duration self)
    (- (real-time) real-start))
  
  (method public (real-duration-in-milliseconds self)
    (seconds->milliseconds (real-duration self)))
  
  (method public (cpu-duration self)
    (- (cpu-time) cpu-start))

  (method public (cpu-duration-in-milliseconds self)
    (seconds->milliseconds (cpu-duration self)))


  (method public (report-duration self)
    (user-message "Duration: {s} ms real, {s} ms cpu"
                  (real-duration-in-milliseconds self)
                  (cpu-duration-in-milliseconds self)))


  (method public (report-fps self)
    (user-message "FPS: {s}"
                  (/ 1. (real-duration self))))))
