;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Memory Tracking
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module jazz.tracker jazz


(import (jazz.inspector)
        (jazz.settings))


;;;
;;;; Memory
;;;


(definition public (tracker-memory memory aggregate order)
  (define (package-frame frame)
      (or (and frame
               (bind (creator locat) frame
                 (and creator
                      (let ((name (if (symbol? creator) creator (get-procedure-name creator))))
                        (list name locat)))))
          frame))
    
    (define (package-allocation allocation)
      (bind (object . allocation) allocation
        (list (package-info object)
              (allocation-rank allocation)
              (allocation-size allocation)
              (allocation-thread allocation)
              (allocation-file allocation)
              (allocation-line allocation)
              (let ((stack (allocation-stack allocation)))
                (and stack (map package-frame stack))))))
    
    (case memory
      ((transient)
       (let ((tracking (get-tracking)))
         (and tracking
              (let ((allocations (extract-allocations tracking)))
                (list (get-count tracking)
                      (get-size tracking)
                      (map package-allocation allocations))))))
      ((stable)
       (let ((persisted (begin (gc) (persisted-allocations-table))))
         (let ((allocations (table->list persisted))
               (maximum (find-setting 'world.track-maximum 1024)))
           (define (alloc-size alloc)
             (allocation-size (cdr alloc)))
           
           (define (alloc-class alloc)
             (category-name (class-of (car alloc))))
           
           (define (collect-class)
             (let ((partition (partition allocations key: alloc-class)))
               (let ((partition (map (lambda (partition)
                                       (bind (key . allocations) partition
                                         (let ((count (length allocations))
                                               (size (sum alloc-size allocations)))
                                           (cons count (cons size allocations)))))
                                     partition)))
                 (let ((sorted (sort > partition key: cadr)))
                   (let ((count (sum car sorted))
                         (size (sum cadr sorted)))
                     (list count
                           size
                           (map (lambda (partition)
                                  (bind (count size . allocations) partition
                                    (cons count (cons size (let ((len (length allocations))
                                                                 (sorted (sort > allocations key: alloc-size)))
                                                             (map package-allocation (if (< len 10) sorted (subseq sorted 0 10))))))))
                                sorted)))))))
           
           (define (collect-aggregate predicate)
             (let ((allocations (if predicate (collect-if (lambda (alloc) (predicate (car alloc))) allocations) allocations)))
               (let ((sorted (sort > allocations key: alloc-size)))
                 (let ((count (length sorted))
                       (size (sum alloc-size sorted)))
                   (list count
                         size
                         (map package-allocation
                              (if (< count maximum)
                                  sorted
                                (subseq sorted 0 maximum))))))))
           
           (if (eq? aggregate 'class)
               (collect-class)
             (collect-aggregate
               (case aggregate
                 ((string) string?)
                 ((vector) vector?)
                 ((u8vector) u8vector?)
                 ((f32vector) f32vector?)
                 ((f64vector) f64vector?)
                 ((table) (lambda (obj)
                            (or (table? obj)
                                (gc-hash-table? obj))))
                 ((none) #f)))))))))


;;;
;;;; Tracking
;;;


(class Tracking extends Object
  
  
  (slot count       accessors generate)
  (slot size        accessors generate)
  (slot allocations accessors generate)
  
  
  (method override (initialize self)
    (set! self.count 0)
    (set! self.size 0)
    (set! self.allocations (new-queue)))
  
  
  (method package (reset self)
    (set! count 0)
    (set! size 0)
    (set! allocations (new-queue)))
  
  
  (method package (add-allocations self)
    (let ((allocs (ordered-allocations))
          (added 0)
          (maximum (find-setting 'world.track-maximum 1024)))
      (for-each (lambda (alloc)
                  (when (< added maximum)
                    (enqueue allocations alloc)
                    (increase! added))
                  (increase! count)
                  (increase! size (allocation-size (cdr alloc))))
                allocs)))
  
  
  (method package (extract-allocations self)
    (queue-list allocations)))


;;;
;;;; Start/Stop
;;;


(definition *tracking*
  #f)


(definition public (get-tracking)
  *tracking*)

(definition public (set-tracking tracking)
  (set! *tracking* tracking))


(definition (require-tracking)
  (or (get-tracking)
      (let ((tracking (new Tracking)))
        (set-tracking tracking)
        tracking)))


(definition public (start-tracker)
  (reset-allocations)
  (register-allocations))


(definition public (stop-tracker (tracking #f))
  (unregister-allocations)
  (let ((tracking (require-tracking)))
    (add-allocations tracking)))


(definition public (with-tracking thunk)
  (let ((tracking (require-tracking)))
    (start-tracker)
    (prog1 (thunk)
      (stop-tracker tracking))))


(definition public (reset-tracking)
  (when *tracking*
    (reset *tracking*))))
