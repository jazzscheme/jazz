;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Memory Tracking
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module jazz.tracker jazz


(import (jazz.settings))


;;;
;;;; Tracking
;;;


(class Tracking extends Object
  
  
  (slot all         accessors generate)
  (slot count       accessors generate)
  (slot allocations accessors generate)
  
  
  (method override (initialize self)
    (set! self.all 0)
    (set! self.count 0)
    (set! self.allocations (new-queue)))
  
  
  (method package (reset self)
    (set! all 0)
    (set! count 0)
    (set! allocations (new-queue)))
  
  
  (method package (add-allocations self)
    (let ((allocs (ordered-allocations))
          (count 0)
          (maximum (find-setting 'world.track-maximum 1024)))
      (for-each (lambda (alloc)
                  (bind (obj rank size thread file line stack) alloc
                    (when (< count maximum)
                      (enqueue allocations
                               (list obj
                                     rank
                                     size
                                     thread
                                     file
                                     line
                                     stack))
                      (increase! count))
                    (increase! all)))
                allocs)))
  
  
  (method package (extract-allocations self)
    (queue-list allocations)))


;;;
;;;; Start/Stop
;;;


(definition *tracking*
  #f)


(definition public (get-tracking)
  *tracking*)

(definition public (set-tracking tracking)
  (set! *tracking* tracking))


(definition (require-tracking)
  (or (get-tracking)
      (let ((tracking (new Tracking)))
        (set-tracking tracking)
        tracking)))


(definition public (start-tracker)
  (reset-allocations)
  (register-allocations))


(definition public (stop-tracker (tracking #f))
  (unregister-allocations)
  (let ((tracking (require-tracking)))
    (add-allocations tracking)))


(definition public (with-tracking thunk)
  (let ((tracking (require-tracking)))
    (start-tracker)
    (prog1 (thunk)
      (stop-tracker tracking))))


(definition public (reset-tracking)
  (when *tracking*
    (reset *tracking*))))
