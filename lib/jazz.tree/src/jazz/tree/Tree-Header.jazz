;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Tree Header
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.tree.Tree-Header jazz


(import (jazz.geometry)
        (jazz.graphic)
        (jazz.outline)
        (jazz.tree)
        (jazz.ui)
        (jazz.window))


;; One thing to be carefull is that even though the tree header can reside in a scroller
;; it will not be scrolled. It will be the tree that is scrolled, so that the header
;; has to explicitly consult the tree's scrolled position for it's operations...


(class Tree-Header extends Header-View
  
  
  (property empty-background         initialize #f accessors explicit)
  
  
  (slot protected resizing?          initialize #f)
  (slot protected autofiting?        initialize #f)
  (slot protected resized-column     initialize #f)
  (slot protected resized-column-ref initialize 0)
  (slot protected resize-start-width initialize #f)
  (slot protected resize-start-h     initialize #f)
  (slot protected initial-line       initialize #f)

  
  (method override (finish self rest)
    (nextmethod self rest)
    (invalidate-layout self))


  ;;;
  ;;;; Access
  ;;;


  (method public (get-empty-background self)
    empty-background)


  (method public (set-empty-background self value)
    (when (neq? value empty-background)
      (set! empty-background value)
      (invalidate-view self)))


  ;;;
  ;;;; Client
  ;;;
  
  
  (method override (find-client self)
    (get-scroll-client (child self 'content)))


  ;;;
  ;;;; Columns
  ;;;
    
  
  (method public (get-column self col)
    (element (get-columns self) col))
  
  
  (method public (column->col self column)
    (find (get-columns self) column))


  ;;;
  ;;;; Borders
  ;;;
  
  
  (definition (borders-left borders)
    (car borders))
  
  
  (definition (borders-right borders)
    (cdr borders))
  
  
  ;;;
  ;;;; Header
  ;;;
  
  
  (method package (get-columns self)
    (get-columns (get-client self)))
  
  
  (method package (get-columns-count self)
    (get-columns-count (get-client self)))

  
  (method package (invalidate-columns self)
    (invalidate-columns (get-client self)))

  
  (method package (layout-column self column)
    (layout-column (get-client self) column))
  
  
  ;;;
  ;;;; Selector
  ;;;
  

  (method package (get-rows self)
    (get-root-rows (get-client self)))
  
  
  (method public (invalidate-row-selector self row)
    (when (get-finished? self)
      (let ((rect (selector-rect self row)))
        (invalidate-rect self rect))))
  
  
  (method public (selector-rect self row)
    (let ((height (get-height parent)))
      (new Rect 0 0 (get-selector-width self) (+ height (get-selector-width self)))))
  

  ;;;
  ;;;; Events
  ;;;
  
  
  (method override (size-change self size)
    (nextmethod self size)
    (let ((client (get-client self)))
      (when client
        (layout-scrollee client))))
  

  ;;;
  ;;;; Scroll
  ;;;
  
  
  (method override (set-scroller self view)
    (set-scroller (get-client self) view))
  
  
  (method override (get-scroll-client self)
    (get-scroll-client (get-client self)))
  
  
  (method (get-hscroll-amount self)
    (let ((client (get-client self)))
      (if client (+ (get-selector-width self) (get-h (get-position client)) 0))))


  (method (get-vscroll-amount self)
    (let ((client (get-client self)))
      (if client (+ (get-header-height self) (get-v (get-position client)) 0))))


  ;;;
  ;;;; Drawing
  ;;;
  
  
  (method override (draw self surface context)
    (define (draw-intersection client h v width height flat?)
      (let ((thick (if flat? -1 -2)))
        (let* ((outer (new Rect h v (+ h width) (+ v height)))
               (inner (expand-rect outer 1 1 thick thick)))
          (let ((smaller (expand-rect outer 0 0 0 -1)))
            (draw-edge surface smaller inner: 'raised edges: '(top left)))
          (fill-rect surface inner (or background (header-color client)))
          (set-text-color surface {Color Black}))))
    
    (let ((client (get-client self)))
      (let ((clipper (get-clipper surface))
            (right (get-columns-right client))
            (width (get-width self))
            (height (get-header-height self))
            (header-background (if (view-enabled? client) (or background {Color Dark}) {Color Dark}))
            (empty-background (if (view-enabled? client) (or empty-background {Color Dark}) {Color Medium})))
        (when (< (get-top clipper) height)
          (fill-rect surface (new Rect right 0 width height) empty-background)
          (when client
            (let* ((h (get-hscroll-amount self))
                   (cs (get-column-spacing client))
                   (left-clip (get-left clipper))
                   (right-clip (get-right clipper))
                   (columns (get-columns self))
                   (last-column (and (not-null? columns) (last columns)))
                   (skin (get-skin self))
                   (background (get-background skin))
                   (flat? (get-flat? skin))
                   (enabled? (view-enabled? client))
                   (rank 0))
              (let (iter (columns columns) (h h) (rank 0))
                (when (not-null? columns)
                  (let ((column (car columns)))
                    (if (get-visible? column)
                        (let ((width (get-width column))
                              (sorted (column-sorting client column))
                              (spaced? (space-column? client column rank)))
                          (let ((right (+ h width (if spaced? cs 0))))
                            (when (< h right-clip)
                              (when (> right left-clip)
                                (draw-header column surface context h 0 width height skin sorted (and spaced? (> cs 0)) flat? enabled?)
                                (when (and (eq? column last-column) (neq? background 'none))
                                  (set-color surface header-background)
                                  (set-line-width surface 1)
                                  (let ((h (- right 1)))
                                    (line surface h 0 h height))))
                              (iter (cdr columns)
                                    right
                                    (+ rank 1)))))
                      (iter (cdr columns)
                            h
                            rank)))))))
          (when selector?
            (let ((v (get-vscroll-amount self))
                  (cs (get-row-spacing client)))
              (iterate (get-rows self)
                       (lambda (row)
                         (let ((row-height (get-height row)))
                           (draw-selector row surface context 0 v (get-selector-width self) row-height flat?)
                           (increase! v (+ row-height cs))))))
            (draw-intersection client 0 0 (get-selector-width self) (get-header-height self) flat?))))))


  ;;;
  ;;;; Cursor
  ;;;


  (method override (cursor-update self evt)
    (if (and selectable? (view-enabled? client) (or resizing? (resized-col self (- (get-h (get-position evt)) (get-hscroll-amount self)))))
        (set-cursor :west-east)
      (set-cursor :arrow)))
  

  ;;;
  ;;;; Tooltip
  ;;;
  
  
  (method (calculate-tooltip-bounds self column)
    (let ((hscrolled (get-hscroll-amount self)))
      (offset-rect (header-rect self column) hscrolled 0)))
  
  
  (method override (get-tooltip-bounds self pos)
    (let* ((hscrolled (get-hscroll-amount self))
           (h (- (get-h pos) hscrolled))
           (col (h->col self h)))
      (and col
           (calculate-tooltip-bounds self (get-column self col)))))
  
  
  (method override (get-tooltip-context self pos)
    (and pos
         (let* ((hscrolled (get-hscroll-amount self))
                (h (- (get-h pos) hscrolled))
                (col (h->col self h)))
           (and col
                (let ((column (get-column self col)))
                  (let ((text (get-header-tooltip column)))
                    (and text
                         (let ((rect (offset-rect (header-rect self column) hscrolled 0)))
                           (new Tooltip-Context
                             view: self
                             text: text
                             bounds: rect)))))))))


  ;;;
  ;;;; Menu
  ;;;
  
  
  (method override (context-menu self evt)
    (let ((pos (get-position evt)))
      (and (and pos (view-enabled? client))
           (let ((h (- (get-h pos) (get-hscroll-amount self)))
                 (v (get-v pos)))
             (let ((col (resized-col self h)))
               (and (not col)
                    (let ((col (h->col self h)))
                      (and col
                           (let ((column (get-column self col)))
                             (header-menu client column (header-coordinates self column pos)))))))))))


  ;;;
  ;;;; Mouse
  ;;;
  
  
  (method override (mouse-down self evt)
    (when selectable?
      (let ((pos (get-position evt)))
        (acquire-capture self)
        (set! autofiting? #f)
        (let ((h (- (get-h pos) (get-hscroll-amount self)))
              (v (- (get-v pos) (get-vscroll-amount self))))
          (let ((col (resized-col self h)))
            (if (not col)
                (let ((col (h->col self h)))
                  (when col
                    (let ((column (get-column self col)))
                      (header-down column (header-coordinates self column pos)))))
              (set! resizing? #t)
              (set! resized-column (get-column self col))
              (set! resized-column-ref col)
              (set! resize-start-width (get-width resized-column))
              (set! resize-start-h h)))
          @wait-buggy-when-resizing-a-column-and-scrolled-vertically
          (let ((tree (get-client)))
            (let ((line (v->line tree v)))
              (when line
                (let ((row (get-row tree line)))
                  (set! initial-line line)
                  (selector-down row)))))))))
  
  
  (method override (drag-move self evt)
    (when (and selectable? (view-enabled? client))
      (let ((pos (get-position evt)))
        (let ((h (- (get-h pos) (get-hscroll-amount self)))
              (v (- (get-v pos) (get-vscroll-amount self))))
          (if (not resizing?)
              (let ((col (h->col self h)))
                (when col
                  (let ((column (get-column self col)))
                    (header-move column (header-coordinates self column pos)))))
            (let ((delta (- h resize-start-h)))
              (let ((width (max (+ resize-start-width delta) min-column-width)))
                (resize-column self resized-column width))))
          @wait-buggy-when-resizing-a-column-and-scrolled-vertically
          (when initial-line
            (let ((client (get-client)))
              (let ((line (v->line client v)))
                (when line
                  (let ((row (get-row client line)))
                    (selector-move row initial-line))))))))))
  
  
  (method override (drag-up self evt . rest)
    (when selectable?
      (let ((pos (get-position evt)))
        (let ((h (- (get-h pos) (get-hscroll-amount self)))
              (v (- (get-v pos) (get-vscroll-amount self))))
          (if (not resizing?)
              (unless autofiting?
                (let ((col (h->col self h)))
                  (when col
                    (let ((column (get-column self col)))
                      (header-up column (header-coordinates self column pos)))))
                @wait-buggy-when-resizing-a-column-and-scrolled-vertically
                (when initial-line
                  (let ((tree client))
                    (let ((row (get-row tree initial-line)))
                      (selector-up row)))))
            (set! resizing? #f)
            (set! resized-column #f)
            (set! initial-line #f))
          (release-capture self)))))
  
  
  (method override (double-click self evt)
    (when selectable?
      (let ((pos (get-position evt)))
        (let ((h (- (get-h pos) (get-hscroll-amount self)))
              (v (get-v pos)))
          (let ((col (resized-col self h)))
            (if col
                (begin
                  (autofit-column self (get-column self col))
                  (set! autofiting? #t))
              (let ((col (h->col self h)))
                (when col
                  (let ((column (get-column self col)))
                    (header-double-click column (header-coordinates self column pos)))))))))))
  
  
  (method (resize-column self column width)
    (when (>= width 0)
      (let ((delta (- width (get-width column)))
            (left (+ (borders-right (get-borders column)) (get-hscroll-amount self))))
        (set-filled-column client #f)
        (set-width column width)
        (invalidate-columns self)
        (layout-column self column)
        (layout-scrollee client)
        (invalidate-view self)
        (update-view self)
        @buggy-when-going-outside-right-edge-of-tree
        (scroll-view (new Distance delta 0) (new Rect (- left 2) 0 (get-width) (get-height))))))
  
  
  (method (autofit-column self column)
    (let ((client (get-client self)))
      (let ((tree client)
            (col (column->col client column))
            (max-width 0))
        (for-each-visible-row tree
          (lambda (row rank)
            (let ((data (get-child row col)))
              (when (is? data Tree-Label)
                (let ((title (get-title data)))
                  (when title
                    (let ((width (+ (text-h column (get-level row))
                                    (text-width (effective-font tree) title)
                                    2)))
                      (when (> width max-width)
                        (set! max-width width)))))))))
        (resize-column self column (max max-width min-column-width)))))
  
  
  (method (header-coordinates self column pos)
    (point- pos (header-position self column)))
  
  
  (method (resized-col self h)
    (continuation-capture
      (lambda (return)
        (loop (for col from 0 below (get-columns-count self))
              (for column in (get-columns self))
              (bind (left . right) (get-borders column)
                (when (near? h right 4)
                  (continuation-return return col))))
        #f)))
    
  
  ;;;
  ;;;; Headers
  ;;;
  
  
  (method public (invalidate-column-header self column)
    (when (get-finished? self)
      (let ((rect (header-rect self column)))
        (invalidate-rect self rect))))
  
  
  (method public (header-rect self column)
    (bind (left . right) (get-borders column)
      (new Rect left 0 right (get-height self))))
  

  ;;;
  ;;;; Coordinates
  ;;;
  
  
  (method package (header-position self column)
    (new Point (borders-left (get-borders column)) 0))


  (method (h->col self h)
    (continuation-capture
      (lambda (return)
        (loop (for n from 0 below (get-columns-count self))
              (for column in (get-columns self))
              (bind (left . right) (get-borders column)
                (when (and (>= h left) (<= h right))
                  (continuation-return return n))))
        #f)))
  
  
  ;;;
  ;;;; Descriptor
  ;;;
  
  
  (method meta override (get-class-descriptor self (context: context #f))
    (new jazz.tree.descriptors:Tree-Header-Descriptor))))
