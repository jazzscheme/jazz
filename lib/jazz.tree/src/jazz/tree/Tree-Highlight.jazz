;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Tree Highlight
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.tree.Tree-Highlight jazz


(import )


(class undocumented Tree-Highlight extends Object
  
  
  (slot row         getter generate)
  (slot col         getter generate)
  (slot insert      getter generate)
  (slot outer-color getter generate)
  (slot inner-color getter generate)
  
  
  (method override (initialize self row col (insert: insert #f) (outer-color: outer-color #f) (inner-color: inner-color #f))
    (nextmethod self)
    (set! self.row row)
    (set! self.col col)
    (set! self.insert insert)
    (set! self.outer-color outer-color)
    (set! self.inner-color inner-color))


  (method override (compare-object self target)
    (cond ((is-not? target Tree-Highlight)
           :incompatible)
          ((and (eq? row (get-row target)) (= col (get-col target)) (= insert (get-insert target)))
           :equal)
          (else
           :not-equal)))))
