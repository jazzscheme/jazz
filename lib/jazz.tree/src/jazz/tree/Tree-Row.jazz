;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Tree Rows
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.tree.Tree-Row jazz


(import (jazz.geometry)
        (jazz.graphic)
        (jazz.outline)
        (jazz.tree)
        (jazz.ui)
        (jazz.view))


(class Tree-Row extends Outline-Row
  
  
  (property protected user-data  initialize #f accessors generate)
  (property protected background initialize #f accessors explicit)
  
  
  (slot protected down? initialize #f)
  
  
  (method override (default-size self)
    {Dimension 100 17})


  ;;;
  ;;;; Initialization
  ;;;


  (method override (initialize self (parent: parent #f) (father: father #f) (level: level #f) (state: state 'collapsed) (row-height: row-height #f) (background: background #f) (children: children #f) (visible?: visible? #t) (user-data: user-data #f))
    (nextmethod self)
    (set! self.parent parent)
    (set! self.father father)
    (set! self.level level)
    (set! self.state state)
    (set! self.row-height row-height)
    (set! self.background background)
    (if children
        (set-children self children)
      (set! self.children '()))
    (set! self.user-data user-data)
    (set-installed? self #t)
    (set-finished? self #t)
    (set-visible? self visible?))


  ;;;
  ;;;; Print
  ;;;

  
  (method override (print self output readably)
    (print-unreadable self output
      (lambda (output)
        (format output "{s}" user-data))))

  
  ;;;
  ;;;; Access
  ;;;
  
  
  (method public (get-tree self)
    parent)
  
  
  (method public (get-background self)
    background)
  
  
  (method public (set-background self value)
    (set! background value)
    (invalidate-view parent))
  
  
  ;;;
  ;;;; Children
  ;;;
  
  
  (method override (set-children self lst)
    (let ((tree (get-tree self)))
      (when tree
        (assert (= (length (get-columns tree)) (length lst)))))
    (set! children '())
    (for-each (lambda (child)
                (if (is? child View)
                    (set-parent child self)
                  (add-child self child)))
              lst))
  
  
  (method protected (set-data-children self lst)
    (set! children lst))
    
  
  (method override (replace-child self rank child)
    (let ((current (element children rank)))
      (when (neq? current child)
        (if (is? child View)
            (begin
              (set-parent child self)
              (set! children (insert! (remove! child children) rank child)))
          (set! children (insert! children rank child)))
        (if (is? current View)
            (set-parent current #f)
          (set! children (remove! current children)))
        (layout-scrollee parent))))
  
  
  (method public (get-child self rank)
    (element children rank))
  
  
  (method public (get-node-child self)
    (find-if (lambda (child)
               (is? child Tree-Node))
             children))
  
  
  (method public (get-path-child self)
    (find-if (lambda (child)
               (is? child Tree-Path))
             children))
  
  
  (method package (calculate-node-width self)
    (let ((node (car children)))
      (text-width (effective-font parent) (get-title node))))

  
  ;;;
  ;;;; Flatten
  ;;;
  
  
  (method public (flatten self root-row)
    (let ((tree (get-tree self)))
      (for-each (lambda (son)
                  (if (flatten-row? tree son)
                      (disconnect son)
                    (flatten son root-row)))
                sons)))
  
  
  (method public (disconnect self)
    (let* ((path (get-path-child self))
           (father-row (and path (get-father-row path)))
           (root-row (get-root-row (get-tree self)))
           (position (son-rank root-row (first (get-spine self)))))
      (change-father self root-row position: position)
      (set-descendants-level self 0)))
  
  
  (method public (reconnect self)
    (let ((father-row (get-father-row self)))
      (set-descendants-level self (+ 1 (get-level father-row)))
      (change-father self father-row)))
  
  
  (method public virtual (disconnected? self)
    (let ((father-row (get-father-row self)))
      (and father-row (/= father-row father))))
  
  
  (method public virtual (get-father-row self)
    (let ((path (get-path-child self)))
      (and path (get-father-row path))))

  
  ;;;
  ;;;; State
  ;;;
  
  
  (method public virtual (auto-collapsable? self)
    (collapsable? self))
  
  
  ;;;
  ;;;; Layout
  ;;;
  
  
  (method override (layout self)
    (let ((tree (get-tree self)))
      (when (and tree children)
        (let ((h 0)
              (cs (get-column-spacing tree))
              (height (get-effective-height self))
              (rank 0))
          (for-each (lambda (column data)
                      (let ((width (get-width column)))
                        (layout-cell column self data h 0 width height)
                        (increase! h (+ width (if (space-column? tree column rank) cs 0)))
                        (increase! rank)))
                    (get-columns tree)
                    children)))))
  
  
  ;;;
  ;;;; Mouse
  ;;;
  
  
  (method public virtual (context-menu self pos)
    )
  
  
  (method public virtual (double-click self pos)
    )
  
  
  (method public virtual (selector-down self)
    (set! down? #t)
    (acquire-capture (get-header parent))
    (invalidate-row-selector (get-header parent) self)
    (selector-click parent self))


  (method public virtual (selector-up self)
    (set! down? #f)
    (release-capture (get-header parent))
    (invalidate-row-selector (get-header parent) self))

  
  (method public virtual (selector-move self initial-line)
    (invalidate-row-selector (get-header parent) self)
    (selector-multi-select parent self initial-line))

  
  ;;;
  ;;;; Drawing
  ;;;
  
  
  (method override (draw-children self surface nodes context)
    (let ((tree (get-tree self))
          (clipper (get-clipper surface)))
      (let ((height (get-height self))
            (cs (get-column-spacing tree))
            (left-clip (get-left clipper))
            (right-clip (get-right clipper))
            (redrawn (redrawn-merge-cells)))
        (let (iter (columns (get-columns tree))
                   (children children)
                   (h 0)
                   (rank 0))
          (when (not-null? children)
            (let ((column (car columns))
                  (data (car children)))
              (if (get-visible? column)
                  (let ((node? (is? column Tree-Node-Column))
                        (width (get-width column))
                        (merge-cell (get-merge-cell tree (row/column->site tree self column))))
                    (let ((right (+ h width (if (space-column? tree column rank) cs 0))))
                      (when (< h right-clip)
                        (when (> right left-clip)
                          (if merge-cell
                              (table-set! redrawn merge-cell #t)
                            (if (is-not? data View)
                                (with-clipping-transformation surface h 0 width height #f
                                  (lambda ()
                                    (draw-data column surface context self data width height)))
                              (when node?
                                (draw-level column surface self data width height)
                                (draw-control column surface self data width height))
                              (with-clipping-self-transformation data surface
                                (lambda ()
                                  (render-drawing data surface context))))))
                        (iter (cdr columns)
                              (cdr children)
                              right
                              (+ rank 1)))))
                (iter (cdr columns)
                      (cdr children)
                      h
                      rank))))))))
  
  
  (method override (draw-selection self surface)
    )
  
  
  (method public virtual (draw-selector self surface context h v width height flat?)
    (if down?
        (draw-sunken-button self surface h v width height flat?)
      (draw-raised-button self surface h v width height flat?)))

  
  (method (draw-sunken-button self surface h v width height flat?)
    (let* ((outer (new Rect h v (+ h width) (+ v height)))
           (inner (inflate-rect outer -1 -1)))
      (set-color surface {Color Dark})
      (frame-rect surface outer {Color Dark})
      (fill-rect surface inner (or background (header-color parent)))
      (set-text-color surface {Color Black})))
  
  
  (method (draw-raised-button self surface h v width height flat?)
    (let ((thick (if flat? -1 -2)))
      ;; when spaced, it's the background that draws the right side shadow
      (let* ((outer (new Rect h v (+ h width) (+ v height)))
             (inner (expand-rect outer 1 1 thick thick)))
        (let ((smaller (expand-rect outer 0 0 0 -1)))
             (draw-edge surface smaller inner: 'raised edges: '(top left)))
        (fill-rect surface inner (or background (header-color parent)))
        (set-text-color surface {Color Black}))))

  
  ;;;
  ;;;; Clipping
  ;;;
  
  
  (method override (with-clipping-self-transformation self surface thunk)
    (with-transformation surface (get-h position) (get-v position) (get-transformation self)
      thunk))))
