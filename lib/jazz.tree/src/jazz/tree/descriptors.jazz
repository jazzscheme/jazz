;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Tree Descriptors
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module jazz.tree.descriptors jazz


(import (jazz.component.descriptors)
        (jazz.descriptor)
        (jazz.domain)
        (jazz.graphic.descriptors)
        (jazz.integrity)
        (jazz.markup)
        (jazz.outline.descriptors)
        (jazz.preferences.descriptors)
        (jazz.reference)
        (jazz.resource)
        (jazz.tree)
        (jazz.ui)
        (jazz.ui.descriptors))


;;;
;;;; Tree-Column
;;;


(class Tree-Column-Descriptor extends Component-Descriptor
  
  
  (form
    (<install>                                     image: {Image-Resource "Green"}
      (<properties~>
        (<Property-Descriptor> name: title
          (<Localized-Domain>  name: domain))
        (<Property-Descriptor> name: width
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: background
          (<Value-Domain>      name: domain        nullable?: #t))
        (<Property-Descriptor> name: justification
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: user-data
          (<Value-Domain>      name: domain        nullable?: #t))))))


;;;
;;;; Tree-Header
;;;


(class Tree-Header-Descriptor extends Header-View-Descriptor
  
  
  (form
    (<install>
      (<properties~>
        (<Property-Descriptor> name: empty-background standard?: #f
          (<Value-Domain>      name: domain           nullable?: #t))))))


;;;
;;;; Tree-Label
;;;


(class Tree-Label-Descriptor extends Tree-Column-Descriptor
  
  
  (form
    (<install>
      (<properties~>
        (<Property-Descriptor> name: padding
          (<Value-Domain>      name: domain))))))


;;;
;;;; Tree-Node
;;;


(class Tree-Node-Descriptor extends Tree-Label-Descriptor
  
  
  (form
    (<install>                                          image: {Image-Resource "Blue"}
      (<properties~>
        (<Property-Descriptor> name: controls?
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: toplevel-controls?
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: display-images?
          (<Value-Domain>      name: domain))))))


;;;
;;;; Tree-View
;;;


(class Tree-View-Descriptor extends Outline-View-Old-Descriptor
  
  
  (form
    (<install>                                                  image: {Image-Resource "AnalysisManager"}
      (<properties~>
        (<Property-Descriptor>  name: portfolio                 standard?: #f
          (<Portfolio-Domain>   name: domain                    nullable?: #t))
        (<Property-Descriptor>  name: show-header?              standard?: #f
          (<Boolean-Domain>     name: domain))
        (<Property-Descriptor>  name: selection-mode
          (<Enumeration-Domain> name: domain                    nullable?: #f choices: ((cell "cell") (row "row") (node "node"))))
        (<Property-Descriptor>  name: multiple-selection?
          (<Boolean-Domain>     name: domain))
        (<Property-Descriptor>  name: can-select-empty?         standard?: #f
          (<Boolean-Domain>     name: domain))
        (<Property-Descriptor>  name: always-select?            standard?: #f
          (<Boolean-Domain>     name: domain))
        (<Property-Descriptor>  name: show-unfocused-selection?
          (<Boolean-Domain>     name: domain))
        (<Property-Descriptor>  name: focused-on-descendants?   standard?: #f
          (<Boolean-Domain>     name: domain))
        (<Property-Descriptor>  name: auto-expand/collapse?     standard?: #f
          (<Boolean-Domain>     name: domain))
        (<Property-Descriptor>  name: cell-background           standard?: #f
          (<Value-Domain>       name: domain                    nullable?: #t))
        (<Property-Descriptor>  name: empty-background          standard?: #f
          (<Value-Domain>       name: domain                    nullable?: #t))
        (<Property-Descriptor>  name: filled-column
          (<Enumeration-Domain> name: domain                    nullable?: #t choices-handler: {Reference filled-column-values}))
        (<Property-Descriptor>  name: column-spacing            standard?: #f
          (<Integer-Domain>     name: domain))
        (<Property-Descriptor>  name: column-frequency          standard?: #f
          (<Integer-Domain>     name: domain))
        (<Property-Descriptor>  name: reorderable?              standard?: #f
          (<Boolean-Domain>     name: domain))
        (<Property-Descriptor>  name: content                   standard?: #f
          (<Value-Domain>       name: domain                    nullable?: #t)))))
  
  
  (method override (component-get-categorized-addable-classes self component)
    `((,(reify-reference Tree-Label-Column)))))


(specific (validate-component (<Tree-View> tree) validation-context)
  (let ((filled-column (get-filled-column tree))
        (values (filled-column-values (list tree))))
    (unless (or (null? values) (memq? filled-column values))
      (add-violation 
        (get-manager validation-context) 
        (new Integrity-Violation message: (format "filled-column must be one of {a}: {t}" (join (map ->string values) ", ") filled-column) property: filled-column) 
        tree 
        (get-root validation-context) 
        (get-editor validation-context))))))
