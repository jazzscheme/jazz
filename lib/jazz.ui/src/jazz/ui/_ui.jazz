;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; UI
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module jazz.ui jazz


(hub activate-focus)
(hub activate-frame)
(hub add-member)
(hub add-tool)
(hub add-view)
(hub anchorize)
(hub brother-view)
(hub call-edit-selection)
(hub cancel-modal)
(hub change-state)
(hub child-down)
(hub child-state)
(hub child-up)
(hub clear-results)
(hub close-button-down)
(hub close-button-enter)
(hub close-button-leave)
(hub close-button-up)
(hub close-host)
(hub close-modal)
(hub container-focusable?)
(hub content-inner?)
(hub deactivate-focus)
(hub deactivate-frame)
(hub delta-pos)
(hub destroy-modal)
(hub down)
(hub draw-at)
(hub draw-caption)
(hub draw-check)
(hub draw-image)
(hub edit)
(hub edit-current)
(hub edit-next)
(hub edit-previous)
(hub edit-selection)
(hub end-modal)
(hub ensure-container-focusable)
(hub ensure-displayed)
(hub enter-child)
(hub find-header)
(hub focus-host)
(hub get-active-background)
(hub get-active-selection-color)
(hub get-anchors)
(hub get-arrow-color)
(hub get-background)
(hub get-body)
(hub get-border)
(hub get-border-color)
(hub get-border-flat?)
(hub get-borders)
(hub get-bounds)
(hub get-button-border)
(hub get-caret-color)
(hub get-caret-width)
(hub get-check-mark-white?)
(hub get-checked?)
(hub get-choices)
(hub get-client)
(hub get-closable?)
(hub get-close-button-borders)
(hub get-close-button-down?)
(hub get-close-button-enter?)
(hub get-color)
(hub get-column)
(hub get-combo)
(hub get-complete?)
(hub get-completion-color)
(hub get-container)
(hub get-content)
(hub get-directory)
(hub get-disabled-resource)
(hub get-disabled-text-color)
(hub get-edge-flat?)
(hub get-editable?)
(hub get-editor)
(hub get-effective-target)
(hub get-end)
(hub get-entry)
(hub get-figure-preferences)
(hub get-fill-mode)
(hub get-flat?)
(hub get-focused)
(hub get-focused-border)
(hub get-focused-color)
(hub get-focused-text-color)
(hub get-font)
(hub get-frame-color)
(hub get-from)
(hub get-fullscreen?)
(hub get-group)
(hub get-header-color)
(hub get-header-end-color)
(hub get-hierarchy)
(hub get-highlight)
(hub get-hscroll?)
(hub get-hue)
(hub get-icon)
(hub get-image)
(hub get-inactive-background)
(hub get-inactive-selection-color)
(hub get-insets)
(hub get-justification)
(hub get-kind)
(hub get-left-padding)
(hub get-line-color)
(hub get-maximized?)
(hub get-members)
(hub get-miniaturizable?)
(hub get-mode)
(hub get-moniker)
(hub get-new-border)
(hub get-new-view)
(hub get-nullable?)
(hub get-offset)
(hub get-orientation)
(hub get-padding)
(hub get-parameters)
(hub get-pick)
(hub get-portfolio)
(hub get-pos)
(hub get-position)
(hub get-preferences)
(hub get-present)
(hub get-preserved-insets)
(hub get-preserved-position)
(hub get-property)
(hub get-protocol)
(hub get-range)
(hub get-resource)
(hub get-row)
(hub get-saturation)
(hub get-selectable?)
(hub get-selected-text-color)
(hub get-selected?)
(hub get-selection)
(hub get-selection-name)
(hub get-separator?)
(hub get-shown?)
(hub get-sizable?)
(hub get-stage)
(hub get-start)
(hub get-state)
(hub get-target)
(hub get-text)
(hub get-text-color)
(hub get-text-font)
(hub get-thumb)
(hub get-title-color)
(hub get-to)
(hub get-tooltip)
(hub get-top-padding)
(hub get-tree)
(hub get-type)
(hub get-unfocused-border)
(hub get-unfocused-color)
(hub get-unfocused-text-color)
(hub get-value)
(hub get-view)
(hub get-vscroll?)
(hub get-workspace)
(hub get-workspace-stages)
(hub get-zoom)
(hub get-zoomable?)
(hub hierarchy-change)
(hub highlight-pick?)
(hub in-close-button?)
(hub invalidate-caption)
(hub invalidate-header)
(hub is-enabled?)
(hub layout-stage)
(hub leave-child)
(hub maximize-bounds)
(hub maximize/restore)
(hub mouse-activate)
(hub on-action)
(hub on-backward)
(hub on-close)
(hub on-forward)
(hub on-ok)
(hub on-selection-change)
(hub present-choice)
(hub preserve-focused)
(hub process-box)
(hub process-escape)
(hub process-key)
(hub process-modal)
(hub process-return)
(hub push-button)
(hub refresh-tools)
(hub remember-workspace-stage)
(hub remove-children)
(hub remove-tool)
(hub remove-view)
(hub select-first)
(hub select-next)
(hub select-resultset)
(hub selected-sheet)
(hub selection-change)
(hub set-accepts-empty?)
(hub set-background)
(hub set-border-color)
(hub set-border-sides)
(hub set-border-type)
(hub set-borders)
(hub set-caption?)
(hub set-checked?)
(hub set-choices)
(hub set-client)
(hub set-closable?)
(hub set-close-button-enter)
(hub set-color)
(hub set-condensed?)
(hub set-content)
(hub set-default?)
(hub set-division)
(hub set-done)
(hub set-editable?)
(hub set-editor)
(hub set-end)
(hub set-entry)
(hub set-entry-test)
(hub set-feedback)
(hub set-figure-preferences)
(hub set-fill-mode)
(hub set-flat?)
(hub set-focused)
(hub set-frame-color)
(hub set-from)
(hub set-fullscreen?)
(hub set-guest)
(hub set-handle)
(hub set-hscroll-needed?)
(hub set-icon)
(hub set-infinite?)
(hub set-info)
(hub set-insets)
(hub set-invite)
(hub set-justification)
(hub set-kind)
(hub set-layout-insets)
(hub set-layout-justification)
(hub set-layout-type)
(hub set-left-padding)
(hub set-maximized?)
(hub set-mode)
(hub set-moniker)
(hub set-multiple-selection?)
(hub set-orientation)
(hub set-parameters)
(hub set-portfolio)
(hub set-pos)
(hub set-preferences)
(hub set-prefix)
(hub set-present)
(hub set-preserved-insets)
(hub set-property)
(hub set-protocol)
(hub set-range)
(hub set-resource)
(hub set-selectable?)
(hub set-selected)
(hub set-selected-state)
(hub set-selected?)
(hub set-selection)
(hub set-selection-name)
(hub set-separator)
(hub set-set)
(hub set-shown?)
(hub set-start)
(hub set-state)
(hub set-step)
(hub set-target)
(hub set-text-color)
(hub set-text-font)
(hub set-to)
(hub set-tooltip)
(hub set-top-padding)
(hub set-type)
(hub set-unicity-domain)
(hub set-validator)
(hub set-value)
(hub set-vscroll-needed?)
(hub set-workspace)
(hub set-zoom)
(hub set-zoomable?)
(hub sheet->rank)
(hub stage-activate)
(hub stage-empty-activate)
(hub step-it)
(hub text-change)
(hub text-extent)
(hub toggle-maximized)
(hub toggle-selected?)
(hub toggle-zoom)
(hub unselect)
(hub unzoom)
(hub up)
(hub update)
(hub update-borders)
(hub update-buttons)
(hub update-moniker-time)
(hub update-status)
(hub valid?)
(hub view-destroyed)
(hub zoom)
(hub zoomed?)


(export (jazz.ui.autoload)
        (jazz.ui.syntax))

(import (jazz.component)
        (jazz.exemplar)
        (jazz.graphic)
        (jazz.text)
        (jazz.tree))


;;;
;;;; Style
;;;


(definition public (preference->text-style name preference)
  (let ((name (get-name preference))
        (base (get-base preference))
        (font (get-font preference))
        (color (get-color preference))
        (highlight (get-highlight preference))
        (frame (get-frame preference)))
    (apply new Text-Style
      `(,@(if name (list name: name) '())
        ,@(if base (list base: base) '())
        ,@(if font (list font: (symbolic-font font)) '())
        ,@(if color (list color: (symbolic-color color)) '())
        ,@(if highlight (list highlight: (symbolic-color highlight)) '())
        ,@(if frame (list frame: (symbolic-color frame)) '())))))


;;;
;;;; Focus
;;;


(definition package window-losing-focus?
  (make-parameter #f))


;;;
;;;; Completions
;;;


(definition user-completions
  (make-table test: equal?))


(definition public (register-user-completion prefix completion)
  (table-set! user-completions prefix completion))


(definition public (register-user-completions alist)
  (for-each (lambda (pair)
              (bind (prefix . completion) pair
                (register-user-completion prefix completion)))
            alist))


(definition public (get-user-completion prefix)
  (table-ref user-completions prefix #f))


;;;
;;;; Evaluate
;;;


(definition public delay-evaluate?
  (make-parameter #f))


(definition delayed-evaluate
  #f)

(definition public (get-delayed-evaluate)
  delayed-evaluate)

(definition public (set-delayed-evaluate evaluate)
  (set! delayed-evaluate evaluate))

(definition public (reset-delayed-evaluate)
  (set! delayed-evaluate #f))


;;;
;;;; Layout
;;;


(enumeration LayoutType
  fill    ;; children take all the space
  fit     ;; the layout view takes the size of its unique child
  center  ;; children are centered in the view
  justify ;; using the logic of the justify method
  border  ;; location is one of north east west south center
  snap    ;; snap one widget relative to another one
  flow    ;; one after the other toolbar like
  box     ;; like flow but expand to fill the non-flow direction
  )


;;;
;;;; Cell
;;;


(definition (iterate-cells top-left bottom-right start direction proc)
  (define (cell-previous cell min-cell max-cell direction)
    (case direction
      ((vertical) (let ((info (loop-cell (get-col cell) (get-line cell) (get-col max-cell) (get-line max-cell) (get-col min-cell) (get-line min-cell) -1 >)))
                    (and info
                         (receive (major minor) info
                           (new Cell minor major)))))
      ((horizontal) (let ((info (loop-cell (get-line cell) (get-col cell) (get-line max-cell) (get-col max-cell) (get-line min-cell) (get-col min-cell) -1 >)))
                      (and info
                           (receive (major minor) info
                             (new Cell major minor)))))))
  
  (define (cell-next cell min-cell max-cell direction)
    (case direction
      ((vertical) (let ((info (loop-cell (get-col cell) (get-line cell) (get-col min-cell) (get-line min-cell) (get-col max-cell) (get-line max-cell) 1 <)))
                    (and info
                         (receive (major minor) info
                           (new Cell minor major)))))
      ((horizontal) (let ((info (loop-cell (get-line cell) (get-col cell) (get-line min-cell) (get-col min-cell) (get-line max-cell) (get-col max-cell) 1 <)))
                      (and info
                           (receive (major minor) info
                             (new Cell major minor)))))))
  
  (let* ((next (case direction
                 ((forward) cell-next)
                 ((backward) cell-previous)))
         (advance (lambda (cell) (next cell top-left bottom-right 'horizontal)))
         (cell (advance (or start (case direction
                                    ((forward) top-left)
                                    ((backward) bottom-right))))))
    (while cell
      (proc cell)
      (set! cell (advance cell)))))


;; caveat: step must be +1 or -1
(definition (loop-cell major minor start-major start-minor end-major end-minor step test)
  (cond ((test major start-major) (values start-major start-minor))
        ((test end-major major) #f)
        ((test minor start-minor) (values major start-minor))
        ((test minor end-minor) (values major (+ minor step)))
        ((test major end-major) (values (+ major step) start-minor))
        (else #f)))


;;;
;;;; View
;;;


(definition public inhibit-updates?
  (make-parameter #f))


(definition public inhibit-invalidates?
  (make-parameter #f))


(definition public inhibit-offscreen?
  (make-parameter #f))


(definition public inhibit-layouts?
  (make-parameter #f))


(definition public inhibit-scrollee-layouts?
  (make-parameter #f))


;;;
;;;; Clipping
;;;


(definition public inhibit-clipping?
  (make-parameter #f))


;;;
;;;; Events
;;;


(definition public event-type
  (make-parameter #f))


;;;
;;;; Formats
;;;


(definition *formats*
  (new Exemplar-Domain
    name: 'Formats
    initer: (lambda ()
              (load-unit 'jazz.ui.literals.formats))))


(definition public (formats-domain)
  *formats*)


(definition public (register-format name format)
  (register-exemplar name format *formats*))


(definition public (registered-format name)
  (locate *formats* name error?: #f))


(definition public (symbolic-formats)
  (table-keys (get-index *formats*)))


(definition public (symbolic-format format)
  (if (symbol? format)
      (registered-format format)
    format))


;;;
;;;; Styles
;;;


(definition *styles*
  (new Exemplar-Domain
    name: 'Styles
    initer: (lambda ()
              (load-unit 'jazz.ui.literals.styles))))


(definition public (styles-domain)
  *styles*)


(definition public (register-style name style)
  (register-exemplar name style *styles*))


(definition public (registered-style name)
  (locate *styles* name error?: #f))


(definition public (symbolic-styles)
  (table-keys (get-index *styles*)))


(definition public (symbolic-style style)
  (if (symbol? style)
      (registered-style style)
    style))


;;;
;;;; Runs
;;;


(definition public (for-each-run runs <list> proc)
  (let ((offset 0))
    (for-each (lambda (run <Run>)
                (let* ((len (get-length run))
                       (limit (+ offset len)))
                  (proc run offset limit)
                  (set! offset limit)))
              runs)))


;;;
;;;; Tree
;;;


(definition protected redrawn-merge-cells
  (make-parameter #f))


(definition public (in-cell-edit? view)
  (find-ascendant view Tree-Data-View))


(definition public min-column-width
  9)


(definition protected (filled-column-values client)
  (if (and (pair? client) (null? (cdr client)))
      (jazz.component:component-descendant-value-list (car client) filter-proc: (lambda (descendant) (is? descendant Tree-Column))) 
    '()))


;;;
;;;; Site
;;;


(class Site extends Object


  (slot row    accessors generate)
  (slot column accessors generate)


  (method override (initialize self row column)
    (set! self.row row)
    (set! self.column column))


  (method override (copy-object self deep?)
    (new Site row column))


  (method override (compare-object self target)
    (if (is-not? target Site)
        :incompatible
      (let ((compared (compare row (get-row target))))
        (if (not (eq? compared :equal))
            compared
          (compare column (get-column target))))))


  (method override (print self output readably)
    (format output "~{{a} {a} {a}}"
      (category-name (class-of self))
      row
      column)))


(specialize inline as site=? (= s1 <Site> s2 <Site>) <bool>
  (and (eq? (get-row s1) (get-row s2))
       (eq? (get-column s1) (get-column s2))))


(definition public (site-hash s <Site>)
  (fxwrap+ (eqv?-hash (get-row s))
           (eqv?-hash (get-column s)))))
