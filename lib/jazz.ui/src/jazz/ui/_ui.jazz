;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; UI
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module jazz.ui jazz


(export (jazz.ui.autoload)
        (jazz.ui.syntax))

(import (jazz.action)
        (jazz.exemplar)
        (jazz.graphic)
        (jazz.text)
        (jazz.tree)
        (jazz.ui.autoload))


;;;
;;;; Style
;;;


(definition public (preference->text-style name preference)
  (let ((name (get-name~ preference))
        (base (get-base~ preference))
        (font (get-font~ preference))
        (color (get-color~ preference))
        (highlight (get-highlight~ preference))
        (frame (get-frame~ preference)))
    (apply new Text-Style
      `(,@(if name (list name: name) '())
        ,@(if base (list base: base) '())
        ,@(if font (list font: (symbolic-font font)) '())
        ,@(if color (list color: (symbolic-color color)) '())
        ,@(if highlight (list highlight: (symbolic-color highlight)) '())
        ,@(if frame (list frame: (symbolic-color frame)) '())))))


;;;
;;;; Focus
;;;


(definition package window-losing-focus?
  (make-parameter #f))


;;;
;;;; Completions
;;;


(definition user-completions
  (make-table test: equal?))


(definition public (register-user-completion prefix completion)
  (table-set! user-completions prefix completion))


(definition public (register-user-completions alist)
  (for-each (lambda (pair)
              (bind (prefix . completion) pair
                (register-user-completion prefix completion)))
            alist))


(definition public (get-user-completion prefix)
  (table-ref user-completions prefix #f))


;;;
;;;; Evaluate
;;;


(definition public delay-evaluate?
  (make-parameter #f))


(definition delayed-evaluate
  #f)

(definition public (get-delayed-evaluate)
  delayed-evaluate)

(definition public (set-delayed-evaluate evaluate)
  (set! delayed-evaluate evaluate))

(definition public (reset-delayed-evaluate)
  (set! delayed-evaluate #f))


;;;
;;;; Layout
;;;


(enumeration LayoutType
  fill    ;; children take all the space
  fit     ;; the layout view takes the size of its unique child
  center  ;; children are centered in the view
  justify ;; using the logic of the justify method
  border  ;; location is one of north east west south center
  snap    ;; snap one widget relative to another one
  flow    ;; one after the other toolbar like
  box     ;; like flow but expand to fill the non-flow direction
  )


;;;
;;;; Cell
;;;


(definition (iterate-cells top-left bottom-right start direction proc)
  (let* ((next (case direction
                 ((forward) next-cell)
                 ((backward) previous-cell)))
         (advance (lambda (cell) (next cell top-left bottom-right 'horizontal)))
         (cell (advance (or start (case direction
                                    ((forward) top-left)
                                    ((backward) bottom-right))))))
    (while cell
      (proc cell)
      (set! cell (advance cell)))))


(definition (previous-cell cell min-cell max-cell direction)
  (case direction
    ((vertical) (let ((info (loop-cell (get-col~ cell) (get-line~ cell) (get-col~ max-cell) (get-line~ max-cell) (get-col~ min-cell) (get-line~ min-cell) -1 >)))
                  (when info
                    (receive (major minor) info
                      (new Cell minor major)))))
    ((horizontal) (let ((info (loop-cell (get-line~ cell) (get-col~ cell) (get-line~ max-cell) (get-col~ max-cell) (get-line~ min-cell) (get-col~ min-cell) -1 >)))
                    (when info
                      (receive (major minor) info
                        (new Cell major minor)))))))


(definition (next-cell cell min-cell max-cell direction)
  (case direction
    ((vertical) (let ((info (loop-cell (get-col~ cell) (get-line~ cell) (get-col~ min-cell) (get-line~ min-cell) (get-col~ max-cell) (get-line~ max-cell) 1 <)))
                  (when info
                    (receive (major minor) info
                      (new Cell minor major)))))
    ((horizontal) (let ((info (loop-cell (get-line~ cell) (get-col~ cell) (get-line~ min-cell) (get-col~ min-cell) (get-line~ max-cell) (get-col~ max-cell) 1 <)))
                    (when info
                      (receive (major minor) info
                        (new Cell major minor)))))))


;; caveat: step must be +1 or -1
(definition (loop-cell major minor start-major start-minor end-major end-minor step test)
  (cond ((test major start-major) (values start-major start-minor))
        ((test end-major major) #f)
        ((test minor start-minor) (values major start-minor))
        ((test minor end-minor) (values major (+ minor step)))
        ((test major end-major) (values (+ major step) start-minor))
        (else #f)))


;;;
;;;; View
;;;


(definition public inhibit-updates?
  (make-parameter #f))


(definition public inhibit-invalidates?
  (make-parameter #f))


(definition public inhibit-layouts?
  (make-parameter #f))


(definition public inhibit-scrollee-layouts?
  (make-parameter #f))


;;;
;;;; Clipping
;;;


(definition public inhibit-clipping?
  (make-parameter #f))


;;;
;;;; Events
;;;


(definition public event-type
  (make-parameter #f))


;;;
;;;; Formats
;;;


(definition *formats*
  (new Exemplar-Domain
    name: 'Formats
    initer: (lambda ()
              (load-unit 'jazz.ui.literals.formats))))


(definition public (formats-domain)
  *formats*)


(definition public (register-format name format)
  (register-exemplar name format *formats*))


(definition public (registered-format name)
  (locate~ *formats* name error?: #f))


(definition public (symbolic-formats)
  (table-keys (get-index~ *formats*)))


(definition public (symbolic-format format)
  (if (symbol? format)
      (registered-format format)
    format))


;;;
;;;; Styles
;;;


(definition *styles*
  (new Exemplar-Domain
    name: 'Styles
    initer: (lambda ()
              (load-unit 'jazz.ui.literals.styles))))


(definition public (styles-domain)
  *styles*)


(definition public (register-style name style)
  (register-exemplar name style *styles*))


(definition public (registered-style name)
  (locate~ *styles* name error?: #f))


(definition public (symbolic-styles)
  (table-keys (get-index~ *styles*)))


(definition public (symbolic-style style)
  (if (symbol? style)
      (registered-style style)
    style))


;;;
;;;; Runs
;;;


(definition public (for-each-run runs <list> proc)
  (let ((offset 0))
    (for-each (lambda (run <Run>)
                (let* ((len (get-length~ run))
                       (limit (+ offset len)))
                  (proc run offset limit)
                  (set! offset limit)))
              runs)))


;;;
;;;; Tree
;;;


(definition protected redrawn-merge-cells
  (make-parameter #f))


(definition public (in-cell-edit? view)
  (find-ascendant~ view Tree-Data-View))


(definition public min-column-width
  9)


(definition protected (filled-column-values client)
  (if (and (pair? client) (null? (cdr client)))
      (jazz.component.runtime:component-descendant-value-list (car client) filter-proc: (lambda (descendant) (is? descendant Tree-Column))) 
    '()))


;;;
;;;; Site
;;;


(class Site extends Object


  (slot row    accessors generate)
  (slot column accessors generate)


  (method override (initialize row column)
    (set! row~self row)
    (set! column~self column))


  (method override (copy-object deep?)
    (new Site row column))


  (method override (compare-object target)
    (if (is-not? target Site)
        :incompatible
      (let ((compared (compare row (get-row~ target))))
        (if (not (eq? compared :equal))
            compared
          (compare column (get-column~ target))))))


  (method override (print output readably)
    (format output "~{{a} {a} {a}}"
      (category-name (class-of self))
      row
      column)))


(specialize inline as site=? (= s1 <Site> s2 <Site>) <bool>
  (and (eq? (get-row~ s1) (get-row~ s2))
       (eq? (get-column~ s1) (get-column~ s2))))


(definition public (site-hash s <Site>)
  (fxwrap+ (eqv?-hash (get-row~ s))
           (eqv?-hash (get-column~ s)))))
