;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; UI
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.ui jazz


(export (jazz.ui.autoload))
(import (jazz.ui.autoload)
        (jazz.graphic))


;;;
;;;; Resource
;;;


(definition package (default-disabled-resource resource)
  (new (class-of resource)
    (format "{a}_" (get-name~ resource))))


;;;
;;;; Style
;;;


(definition public (preference->text-style name default-base preference)
  (define (get-font font)
    (if (symbol? font)
        (registered-font font)
      font))
  
  (define (get-color color)
    (if (symbol? color)
        (registered-color color)
      color))
  
  (if (and name (get-name~ preference))
      (error "Style should not be named: {s}" (get-name~ preference))
    (let ((name (either (get-name~ preference) name))
          (base (either (get-base~ preference) default-base))
          (font (get-font~ preference))
          (color (get-color~ preference))
          (highlight (get-highlight~ preference))
          (frame (get-frame~ preference)))
      (apply new Text-Style
        `(,@(if name (list name: name) '())
          ,@(if base (list base: base) '())
          ,@(if font (list font: (get-font font)) '())
          ,@(if color (list color: (get-color color)) '())
          ,@(if highlight (list highlight: (get-color highlight)) '())
          ,@(if frame (list frame: (get-color frame)) '()))))))


;;;
;;;; Shortcut
;;;


(definition public (shortcut=? s1 <Shortcut> s2 <Shortcut>) <bool>
  (and (equal? (get-modifiers~ s1) (get-modifiers~ s2))
       (eqv? (get-key~ s1) (get-key~ s2))))


(definition public (shortcut-hash shortcut <Shortcut>)
  (equal-hash (cons (get-key~ shortcut) (get-modifiers~ shortcut)))
  @wait
  (+ (eqv-hash (get-key~ shortcut))
     (equal-hash (get-modifiers~ shortcut))))


;;;
;;;; Completions
;;;


(definition user-completions
  (make-table test: equal?))


(definition public (register-user-completion prefix completion)
  (table-set! user-completions prefix completion))


(definition public (register-user-completions alist)
  (for-each (function (pair)
              (bind (prefix . completion) pair
                (register-user-completion prefix completion)))
            alist))


(definition public (get-user-completion prefix)
  (table-ref user-completions prefix {})))
