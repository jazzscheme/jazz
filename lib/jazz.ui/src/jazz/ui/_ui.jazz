;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; UI
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module jazz.ui jazz


(export (jazz.ui.autoload))
(import (jazz.ui.autoload)
        (jazz.graphic))


;;;
;;;; Resource
;;;


(definition package (default-disabled-resource resource)
  (new (class-of resource)
    (format "{a}_" (get-name~ resource))))


;;;
;;;; Style
;;;


(definition public (preference->text-style name default-base preference)
  (if (and name (get-name~ preference))
      (error "Style should not be named: {s}" (get-name~ preference))
    (let ((name (either (get-name~ preference) name))
          (base (either (get-base~ preference) default-base))
          (font (get-font~ preference))
          (color (get-color~ preference))
          (highlight (get-highlight~ preference))
          (frame (get-frame~ preference)))
      (apply new Text-Style
        `(,@(if name (list name: name) '())
          ,@(if base (list base: base) '())
          ,@(if font (list font: (symbolic-font font)) '())
          ,@(if color (list color: (symbolic-color color)) '())
          ,@(if highlight (list highlight: (symbolic-color highlight)) '())
          ,@(if frame (list frame: (symbolic-color frame)) '()))))))


;;;
;;;; Shortcut
;;;


(definition public (shortcut=? s1 <Shortcut> s2 <Shortcut>) <bool>
  (and (equal? (get-modifiers~ s1) (get-modifiers~ s2))
       (eqv? (get-key~ s1) (get-key~ s2))))


(definition public (shortcut-hash shortcut <Shortcut>)
  (fxwrap+ (eqv?-hash (get-key~ shortcut))
           (equal?-hash (get-modifiers~ shortcut))))


;;;
;;;; Bindings
;;;


(definition *bindings*
  {})


(definition public (get-bindings)
  *bindings*)


(definition public (set-bindings bindings)
  (set! *bindings* bindings))


;;;
;;;; Actions
;;;


(definition package (find-actions context)
  (let ((bindings (get-bindings)))
    (if (not bindings)
        (error "No bindings registered")
      (either (find-component~ bindings context)
              (error "Unable to find bindings for: {s}" context)))))


(definition package (find-action-item context name)
  (find-component~ (find-actions context) name))


(definition package (require-action-item action)
  (either (find-action-item (get-action-context~ action) (get-action-name~ action))
          (error "Unable to find action: {t}" action)))


(definition package (call-action action sender properties (event: event {}))
  (let ((action-item (require-action-item action)))
    (invoke~ action-item sender properties action: action event: event)))


(definition package (get-action-enabled? action)
  (let ((action-item (require-action-item action)))
    (get-enabled?~ action-item)))


(definition package (set-action-enabled? action enabled?)
  (let ((action-item (require-action-item action)))
    (set-enabled?~ action-item enabled?)))


(definition package (set-actions-enabled? actions enabled?)
  (for-each (lambda (action)
              (set-action-enabled? action enabled?))
            actions))


(definition package (get-class-actions object)
  (class-actions~ object))


(definition package (get-guest-actions view)
  (guest-actions~ view))


(definition package (extract-actions actions-list)
  (let ((fact (new List-Factory)))
    (for-each (lambda (action-list)
                (let ((context-name (get-name~ action-list)))
                  (for-each (lambda (action-item)
                              (let* ((action-name (get-name~ action-item))
                                     (shortcut (get-shortcut~ action-item)))
                                (when shortcut
                                  (put~ fact action-item))))
                            (get-children~ action-list))))
              actions-list)
    (get-output~ fact)))


;;;
;;;; Completions
;;;


(definition user-completions
  (make-table test: equal?))


(definition public (register-user-completion prefix completion)
  (table-set! user-completions prefix completion))


(definition public (register-user-completions alist)
  (for-each (lambda (pair)
              (bind (prefix . completion) pair
                (register-user-completion prefix completion)))
            alist))


(definition public (get-user-completion prefix)
  (table-ref user-completions prefix {}))


;;;
;;;; Layout
;;;


(enumeration LayoutType
  fill    ;; children take all the space
  fit     ;; the layout view takes the size of its unique child
  center  ;; children are centered in the view
  justify ;; using the logic of the justify method
  border  ;; location is one of north east west south center
  snap    ;; snap one widget relative to another one
  flow    ;; one after the other toolbar like
  box     ;; like flow but expand to fill the non-flow direction
  )


;;;
;;;; Cell
;;;


(definition (iterate-cells top-left bottom-right start direction proc)
  (let* ((next (case direction
                 ((forward) next-cell)
                 ((backward) previous-cell)))
         (advance (lambda (cell) (next cell top-left bottom-right 'horizontal)))
         (cell (advance (either start (case direction
                                        ((forward) top-left)
                                        ((backward) bottom-right))))))
    (while cell
      (proc cell)
      (set! cell (advance cell)))))


(definition (previous-cell cell min-cell max-cell direction)
  (case direction
    ((vertical) (let ((info (loop-cell (get-col~ cell) (get-row~ cell) (get-col~ max-cell) (get-row~ max-cell) (get-col~ min-cell) (get-row~ min-cell) -1 >)))
                  (when info
                    (receive (major minor) info
                      (new Cell minor major)))))
    ((horizontal) (let ((info (loop-cell (get-row~ cell) (get-col~ cell) (get-row~ max-cell) (get-col~ max-cell) (get-row~ min-cell) (get-col~ min-cell) -1 >)))
                    (when info
                      (receive (major minor) info
                        (new Cell major minor)))))))


(definition (next-cell cell min-cell max-cell direction)
  (case direction
    ((vertical) (let ((info (loop-cell (get-col~ cell) (get-row~ cell) (get-col~ min-cell) (get-row~ min-cell) (get-col~ max-cell) (get-row~ max-cell) 1 <)))
                  (when info
                    (receive (major minor) info
                      (new Cell minor major)))))
    ((horizontal) (let ((info (loop-cell (get-row~ cell) (get-col~ cell) (get-row~ min-cell) (get-col~ min-cell) (get-row~ max-cell) (get-col~ max-cell) 1 <)))
                    (when info
                      (receive (major minor) info
                        (new Cell major minor)))))))


;; caveat: step must be +1 or -1
(definition (loop-cell major minor start-major start-minor end-major end-minor step test)
  (cond ((test major start-major) (values start-major start-minor))
        ((test end-major major) {})
        ((test minor start-minor) (values major start-minor))
        ((test minor end-minor) (values major (+ minor step)))
        ((test major end-major) (values (+ major step) start-minor))
        (else {})))


;;;
;;;; Text
;;;


(definition public keyboard-input?
  (make-parameter #f))


;;;
;;;; Tree
;;;


(definition public (in-cell-edit? view)
  (find-ascendant~ view Tree-Data-View))


;;;
;;;; Site
;;;


(class Site extends Object


  (slot row accessors generate)
  (slot col accessors generate)


  (method override (initialize row col)
    (set! row~self row)
    (set! col~self col))


  (method override (copy-object deep?)
    (new Site row col))


  (method override (compare-object target)
    (if (is-not? target Site)
        :incompatible
      (let ((compared (compare row (get-row~ target))))
        (if (not (eq? compared :equal))
            compared
          (compare col (get-col~ target))))))


  (method override (print printer readably)
    (format printer "~{{a} {a} {a}}"
      (category-name (class-of self))
      row
      col)))


(specialize inline as site=? (= s1 <Site> s2 <Site>) <bool>
  (and (eq? (get-row~ s1) (get-row~ s2))
       (eq? (get-col~ s1) (get-col~ s2))))


(definition public (site-hash s <Site>)
  (fxwrap+ (eqv?-hash (get-row~ s))
           (eqv?-hash (get-col~ s))))


;;;
;;;; Debug
;;;


(definition package *debug-paint*
  #f)

(definition package *debug-painting*
  #f)


(definition public (debug-paint? . rest)
  (if (null? rest)
      *debug-paint*
    (set! *debug-paint* (car rest))))


(definition public (debug-painting? . rest)
  (if (null? rest)
      *debug-painting*
    (set! *debug-painting* (car rest)))))
