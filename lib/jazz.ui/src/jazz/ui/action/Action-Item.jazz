;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Action Items
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library protected jazz.ui.action.Action-Item jazz


(import (jazz.library)
        (jazz.ui))


(class Action-Item extends Component


  (property action-handler     initialize {} getter get-action-handler     setter set-action-handler)
  (property shortcut           initialize {} getter get-shortcut           setter set-shortcut)
  (property alternate-shortcut initialize {} getter get-alternate-shortcut setter set-alternate-shortcut)
  (property enabled?           initialize #t getter get-enabled?           setter set-enabled?)
  
  
  (slot actionables initialize '())
  
  
  ;;;
  ;;;; Access
  ;;;


  (method public (get-action-handler)
    action-handler)


  (method public (set-action-handler value)
    (set! action-handler value))


  (method public (get-shortcut)
    shortcut)


  (method public (set-shortcut value)
    (set! shortcut value)
    (process-shortcut-update))


  (method public (get-alternate-shortcut)
    alternate-shortcut)


  (method public (set-alternate-shortcut value)
    (set! alternate-shortcut value)
    (process-shortcut-update))


  (method public (get-enabled?)
    enabled?)


  (method public (set-enabled? value)
    (when (neq? enabled? (boolean value))
      (set! enabled? value)
      (process-enabled-update)))
  
  
  ;;;
  ;;;; Actionables
  ;;;
  
  
  (method public (register-actionable actionable)
    (set! actionables (cons actionable actionables))
    (shortcut-update~ actionable self)
    (enabled-update~ actionable self))
  
  
  (method public (unregister-actionable actionable)
    (set! actionables (remove! actionable actionables)))
  
  
  (method (process-shortcut-update)
    (for-each (lambda (actionable)
                (shortcut-update~ actionable self))
              actionables))
  
  
  (method (process-enabled-update)
    (for-each (lambda (actionable)
                (enabled-update~ actionable self))
              actionables))


  ;;;
  ;;;; Invoke
  ;;;
  
  
  ;; Receiving an optional action is a temporary solution until
  ;; a big cleanup between event handlers and actions...
  
  
  (method public (invoke sender properties (action: action {}) (event: event {}))
    (when enabled?
      (let* ((properties (either properties (get-properties~ action-handler)))
             (event (either event (apply new Action-Event :action sender properties))))
        (invoke~ action-handler sender event action: action))))


  ;;;
  ;;;; Designer
  ;;;
  
  
  (method meta override (get-class-image)
    {Bitmap-Resource "Link"})

  
  (method meta override (property-presentation property)
    (case (field-name property)
      ((shortcut) "Shortcut")
      (else (nextmethod property))))
  
  
  (method override (can-rename-component?)
    #f)
  
  
  (method override (can-delete-component?)
    #f)
  
  
  (method override (can-move-component?)
    #f)
  
  
  (method override (can-copy-component?)
    #f)
  
  
  (method override (get-categorized-properties)
    '(shortcut))))
