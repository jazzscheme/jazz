;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Clipboard
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2012
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module jazz.ui.clipboard jazz


(export (jazz.ui.clipboard.platform.carbon  (cond carbon))
        (jazz.ui.clipboard.platform.cocoa   (cond cocoa))
        (jazz.ui.clipboard.platform.windows (cond windows))
        (jazz.ui.clipboard.platform.x11     (cond x11)))

(import (jazz.ui.clipboard.platform.carbon  (cond carbon))
        (jazz.ui.clipboard.platform.cocoa   (cond cocoa))
        (jazz.ui.clipboard.platform.windows (cond windows))
        (jazz.ui.clipboard.platform.x11     (cond x11)))


;;;
;;;; Clipboard
;;;


(definition public (get-clipboard)
  (let ((formats (available-clipboard-formats)))
    (when (not-null? formats)
      (let ((format (car formats)))
        (let ((text (get-clipboard-text format: format)))
          (when text
            (new Clipboard text format)))))))


(definition public (set-clipboard clipboard)
  (let ((text (get-text~ clipboard))
        (format (get-format~ clipboard)))
    (set-clipboard-text text format: format)))


(class Clipboard extends Object
  
  
  (slot text   getter generate)
  (slot format getter generate)
  
  
  (method override (initialize text format)
    (nextmethod)
    (set! text~self text)
    (set! format~self format))
  
  
  (method public (present)
    (case format
      ((unicode-text) text)
      (else (jazz:format "<{a}>" format)))))


;;;
;;;; Jazz Format
;;;


(definition jazz-formatted-text
  "JAZZ_FORMATTED_TEXT")

(definition jazz-parcels
  "JAZZ_PARCELS")

(definition jazz-tool
  "JAZZ_TOOL")


(definition package (register-jazz-clipboard-formats prefix)
  (define (prefixed-format format)
    (string-append prefix format))
  
  (register-clipboard-format 'jazz-formatted-text (prefixed-format jazz-formatted-text))
  (register-clipboard-format 'jazz-parcels (prefixed-format jazz-parcels))
  (register-clipboard-format 'jazz-tool (prefixed-format jazz-tool)))


(definition package (get-clipboard-element format)
  (if (clipboard-format-available? format)
      (with-jazz-readtable
        (lambda ()
          (read-string-element (get-clipboard-text format: format))))
    '()))


(definition package (get-jazz-parcels)
  (get-clipboard-element 'jazz-parcels))


(definition package (get-jazz-tool)
  (get-clipboard-element 'jazz-tool))


;;;
;;;; Clipboard-Parcel
;;;


(class undocumented Clipboard-Parcel extends Object
  
  
  (slot process-id getter generate)
  (slot object-id  getter generate)
  (slot content    getter generate)
  
  
  (method override (initialize process-id object-id content)
    (nextmethod)
    (set! process-id~self process-id)
    (set! object-id~self object-id)
    (set! content~self content))))
