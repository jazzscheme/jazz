;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Context Combo
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.ui.context.Context-Combo jazz


(import (jazz.graphic)
        (jazz.jml)
        (jazz.library)
        (jazz.system)
        (jazz.ui))


(class undocumented Context-Combo extends Combo-Box
    
  
  (form
    (<install>
      (<!>     name: body left-padding: 2 top-padding: 2 default-style: {Text-Style font: {Font Label}})))
  
  
  (method override (finish rest)
    (nextmethod rest)
    (update))
  
  
  ;;;
  ;;;; Update
  ;;;
  
  
  (method (update)
    (let* ((pref (get-preferences #f))
           (all (collect-type Trait (get-children~ pref)))
           (active (get-context~ (get-process))))
      (set-choices (map (lambda (trait)
                          (let ((name (get-name~ trait)))
                            (list name (->string name))))
                        all))
      (when active
        (set-value active))))
  
  
  ;;;
  ;;;; Selection
  ;;;
  
  
  (method (selection-change)
    (set-context~ (get-process) (get-value)))
  
  
  ;;;
  ;;;; Choice
  ;;;
  
  
  (method override (combo-choice)
    (selection-change))))
