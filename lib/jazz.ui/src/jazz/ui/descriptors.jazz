;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; UI Descriptors
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module jazz.ui.descriptors jazz


(import (jazz.action)
        (jazz.component)
        (jazz.designer)
        (jazz.descriptor)
        (jazz.domain)
        (jazz.exemplar.descriptors)
        (jazz.graphic.descriptors)
        (jazz.jml)
        (jazz.resource)
        (jazz.text.descriptors)
        (jazz.ui)
        (jazz.view.descriptors))


;;;
;;;; Action-Item
;;;


(class Action-Item-Descriptor extends Component-Descriptor
  
  
  (form
    (<install>                                          image: {Image-Resource "Link"} can-rename?: #f can-delete?: #f can-relocate?: #f can-copy?: #f
      (<properties~>
        (<Property-Descriptor> name: action-handler     category: handler standard?: #f
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: shortcut
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: alternate-shortcut
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: enabled?
          (<Value-Domain>      name: domain))))))


;;;
;;;; Actions
;;;


(class Actions-Descriptor extends Component-Descriptor
  
  
  (form
    (<install> can-rename?: #f can-delete?: #f can-relocate?: #f can-copy?: #f))
  
  
  (method override (component-get-categorized-addable-classes self component)
    `((,(reify-reference Action-Item))))
  
  
  (method override (component-get-addable-details self component)
    '((name-info 200 #f) (shortcut 200 #t))))


;;;
;;;; Label-Item
;;;


(class Label-Item-Descriptor extends View-Descriptor
  
  
  (form
    (<install>
      (<properties~>
        (<Property-Descriptor> name: icon
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: disabled-icon standard?: #f
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: shortcut
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: default?      standard?: #f
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: content       standard?: #f
          (<Value-Domain>      name: domain))))))


;;;
;;;; Check-Item
;;;


(class Check-Item-Descriptor extends Label-Item-Descriptor
  
  
  (form
    (<install>
      (<properties~>
        (<Property-Descriptor> name: checked?
          (<Value-Domain>      name: domain))))))


;;;
;;;; Color-Preferences
;;;


(class Color-Preferences-Descriptor extends Exemplar-Preferences-Descriptor
  
  
  (form
    (<install>                              can-rename?: #f can-delete?: #f can-relocate?: #f can-copy?: #f
      (<properties~>
        (<Property-Descriptor> name: base
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: red
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: green
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: blue
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: alpha
          (<Value-Domain>      name: domain))))))


;;;
;;;; Colors-Preferences
;;;


(class Colors-Preferences-Descriptor extends Exemplars-Preferences-Descriptor
  
  
  (form
    (<install> can-rename?: #f can-delete?: #f can-relocate?: #f can-copy?: #f)))


;;;
;;;; Font-Preferences
;;;


(class Font-Preferences-Descriptor extends Exemplar-Preferences-Descriptor
  
  
  (form
    (<install>                                  can-rename?: #f can-delete?: #f can-relocate?: #f can-copy?: #f
      (<properties~>
        (<Property-Descriptor> name: base
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: font-name
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: point-size
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: color
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: bold?
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: italic?
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: underline?
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: antialias
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: hint-style
          (<Value-Domain>      name: domain))))))


;;;
;;;; Format-Preferences
;;;


(class Format-Preferences-Descriptor extends Exemplar-Preferences-Descriptor
  
  
  (form
    (<install>                                       can-rename?: #f can-delete?: #f can-relocate?: #f can-copy?: #f
      (<properties~>
        (<Property-Descriptor> name: base
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: left-margin
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: right-margin
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: justification
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: bulleted?
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: bullet-outside
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: bullet-inside
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: keep-with-next?
          (<Value-Domain>      name: domain))))))


;;;
;;;; Formats-Preferences
;;;


(class Formats-Preferences-Descriptor extends Exemplars-Preferences-Descriptor
  
  
  (form
    (<install> can-rename?: #f can-delete?: #f can-relocate?: #f can-copy?: #f)))


;;;
;;;; Image-View
;;;


(class Image-View-Descriptor extends View-Descriptor
  
  
  (form
    (<install>                                       image: {Image-Resource "BlueRed"}
      (<properties~>
        (<Property-Descriptor>  name: portfolio
          (<Portfolio-Domain>   name: domain))
        (<Property-Descriptor>  name: resource
          (<String-Domain>      name: domain))
        (<Property-Descriptor>  name: moniker
          (<Value-Domain>       name: domain))
        (<Property-Descriptor>  name: image-position
          (<Value-Domain>       name: domain))
        (<Property-Descriptor>  name: image-size
          (<Value-Domain>       name: domain))
        (<Property-Descriptor>  name: fill-mode
          (<Enumeration-Domain> name: domain         nullable?: #f choices: ((position "Position") (center "Center") (fill "Fill") (fit "Fit") (stretch "Stretch") (tile "Tile"))))))))


;;;
;;;; Label-View
;;;


(class Label-View-Descriptor extends View-Descriptor
  
  
  (form
    (<install>                                        image: {Image-Resource "Text"}
      (<properties~>                                  default: title
        (<Property-Descriptor>    name: justification
          (<Justification-Domain> name: domain))
        (<Property-Descriptor>    name: color
          (<Color-Domain>         name: domain))
        (<Property-Descriptor>    name: shadow?       standard?: #f
          (<Boolean-Domain>       name: domain))))))


;;;
;;;; Orphaned-Actions
;;;


(class Orphaned-Actions-Descriptor extends Actions-Descriptor)


;;;
;;;; Radio-Item
;;;


(class Radio-Item-Descriptor extends Label-Item-Descriptor
  
  
  (form
    (<install>
      (<properties~>
        (<Property-Descriptor> name: group
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: selected?
          (<Value-Domain>      name: domain))))))


;;;
;;;; Layout-View
;;;


(class Justification-Domain extends Enumeration-Domain

  
  (form 
    (<install> nil-presentation: "None" choices: ((head "Head") (center "Center") (tail "Tail") (horizontal "Horizontal") (vertical "Vertical") ((head head) "Head Head") ((head center) "Head Center") ((head tail) "Head Tail") ((center head) "Center Head") ((center center) "Center Center") ((center tail) "Center Tail") ((tail head) "Tail Head") ((tail center) "Tail Center") ((tail tail) "Tail Tail")))))


(class Type-Domain extends Enumeration-Domain

  
  (form 
    (<install> nil-presentation: "None" choices: ((fill "Fill") (fit "Fit") (center "Center") (justify "Justify") (border "Border") (snap "Snap") (flow "Flow") (box "Box") (gravity "Gravity")))))


(class Layout-View-Descriptor extends View-Descriptor
  
  
  (form
    (<install>                                               image: {Image-Resource "Layout"}
      (<properties~>
        (<Property-Descriptor>    name: layout-type
          (<Type-Domain>          name: domain))
        (<Property-Descriptor>    name: layout-insets
          (<Rect-Domain>          name: domain))
        (<Property-Descriptor>    name: layout-justification
          (<Justification-Domain> name: domain))
        (<Property-Descriptor>    name: layout-padding
          (<Integer-Domain>       name: domain))
        (<Property-Descriptor>    name: layout-fit
          (<Enumeration-Domain>   name: domain               nullable?: #t nil-presentation: "None" choices: ((around "Around"))))))))


;;;
;;;; Page-Setup
;;;


(class Page-Setup-Descriptor extends Layout-View-Descriptor
  
  
  (form
    (<install>
      (<properties~>
        (<Property-Descriptor>  name: fit
          (<Value-Domain>       name: domain))
        (<Property-Descriptor>  name: orientation
          (<Value-Domain>       name: domain))
        (<Property-Descriptor>  name: paper-size
          (<Value-Domain>       name: domain))
        (<Property-Descriptor>  name: paper-source
          (<Value-Domain>       name: domain))
        (<Property-Descriptor>  name: min-margins
          (<Value-Domain>       name: domain))))))


;;;
;;;; Header-View
;;;


(class Header-View-Descriptor extends Layout-View-Descriptor
  
  
  (form
    (<install>                                 image: {Image-Resource "AlignmentTop"}
      (<properties~>
        (<Property-Descriptor> name: flat?     standard?: #f
          (<Boolean-Domain>    name: domain))
        (<Property-Descriptor> name: shown?    standard?: #f
          (<Boolean-Domain>    name: domain))
        (<Property-Descriptor> name: selector? standard?: #f
          (<Boolean-Domain>    name: domain))))))


;;;
;;;; Border-View
;;;


(class Border-View-Descriptor extends Layout-View-Descriptor
  
  
  (form
    (<install>                                      image: {Image-Resource "Fill"}
      (<properties~>
        (<Property-Descriptor>  name: border-type
          (<Enumeration-Domain> name: domain        nullable?: #f choices: ((none "None") (solid "Solid") (edge "Edge") (raised "Raised") (palette "Palette") (shadow "Shadow"))))
        (<Property-Descriptor>  name: border-color
          (<Color-Domain>       name: domain))
        (<Property-Descriptor>  name: border-insets
          (<Value-Domain>       name: domain))
        (<Property-Descriptor>  name: border-sides
          (<Enumeration-Domain> name: domain        nullable?: #f choices: ((all "All") (left "Left") (top "Top") (right "Right") (bottom "Bottom") (none "None"))))))))


;;;
;;;; Check-Box
;;;


(class Check-Box-Descriptor extends View-Descriptor
  
  
  (form
    (<install>                                   image: {Image-Resource "Done"}
      (<properties~>                             default: title
        (<Property-Descriptor> name: checked?
          (<Boolean-Domain>    name: domain))
        (<Property-Descriptor> name: selectable? standard?: #f
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: editable?   standard?: #f
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: color
          (<Color-Domain>      name: domain))
        (<Property-Descriptor> name: flat?       standard?: #f
          (<Value-Domain>      name: domain))))))


;;;
;;;; Combo-View
;;;


(class Combo-View-Descriptor extends View-Descriptor
  
  
  (form
    (<install>
      (<properties~>
        (<Property-Descriptor> name: kind
          (<Value-Domain>      name: domain))))))


;;;
;;;; Combo-Text
;;;


(class Combo-Text-Descriptor extends Combo-View-Descriptor
  
  
  (form
    (<install>
      (<properties~>
        (<Property-Descriptor> name: selectable?
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: editable?
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: complete?
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: content
          (<Value-Domain>      name: domain))))))


;;;
;;;; Combo-Box
;;;


(class Combo-Box-Descriptor extends Combo-Text-Descriptor
  
  
  (form
    (<install>
      (<properties~>
        (<Property-Descriptor> name: condensed?
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: choices
          (<Choices-Domain>    name: domain))
        (<Property-Descriptor> name: nullable?
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: choices-updater
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: entry-test
          (<Value-Domain>      name: domain))))))


;;;
;;;; Line-View
;;;


(class Line-View-Descriptor extends View-Descriptor
  
  
  (form
    (<install>
      (<properties~>
        (<Property-Descriptor> name: from
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: to
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: color
          (<Value-Domain>      name: domain)))))
  
  
  (method override (component-surrogate-class self component)
    Line-Surrogate))


;;;
;;;; Connector
;;;


(class Connector-Descriptor extends Line-View-Descriptor
  
  
  (form
    (<install>
      (<properties~>
        (<Property-Descriptor> name: client
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: start
          (<String-Domain>     name: domain nullable?: #t))
        (<Property-Descriptor> name: end
          (<String-Domain>     name: domain nullable?: #t)))))
  
  
  (method override (component-surrogate-class self component)
    Connector-Surrogate))


;;;
;;;; Base-Container
;;;


(class Base-Container-Descriptor extends Layout-View-Descriptor
  
  
  (form
    (<install> image: {Image-Resource "OpenedFolder"})))


;;;
;;;; Content-View
;;;


(class Content-View-Descriptor extends Layout-View-Descriptor
  
  
  (form
    (<install> image: {Image-Resource "All"} can-rename?: #f can-delete?: #f can-relocate?: #f)))


;;;
;;;; Entry-Combo-Text-View
;;;


(class undocumented Entry-Combo-Text-View-Descriptor extends Text-View-Descriptor
  
  
  (form
    (<install>
      (<properties~>
        (<Property-Descriptor> name: editor
          (<Value-Domain>    name: domain))))))


;;;
;;;; Group-Box
;;;


(class Group-Box-Descriptor extends Layout-View-Descriptor
  
  
  (form
    (<install>
      (<properties~>                        default: title
        (<Property-Descriptor> name: flat?
          (<Value-Domain>      name: domain))))))


;;;
;;;; Header-Bar
;;;


(class Header-Bar-Descriptor extends Layout-View-Descriptor
  
  
  (form
    (<install>
      (<properties~>
        (<Property-Descriptor> name: flat?
          (<Boolean-Domain>    name: domain))
        (<Property-Descriptor> name: shown?
          (<Boolean-Domain>    name: domain))))))


;;;
;;;; Image-Tool
;;;


(class Image-Tool-Descriptor extends Layout-View-Descriptor
  
  
  (form
    (<install>                                         image: {Image-Resource "Configure"}
      (<properties~>
        (<Property-Descriptor> name: portfolio         standard?: #f
          (<Portfolio-Domain>  name: domain            nullable?: #t))
        (<Property-Descriptor> name: resource
          (<Value-Domain>      name: domain            nullable?: #t))
        (<Property-Descriptor> name: disabled-resource standard?: #f
          (<Value-Domain>      name: domain            nullable?: #t))))))


;;;
;;;; Progress-Bar
;;;


(class Progress-Bar-Descriptor extends View-Descriptor
  
  
  (form
    (<install>
      (<properties~>
        (<Property-Descriptor> name: infinite?
          (<Value-Domain>      name: domain))))))


;;;
;;;; Push-Button
;;;


(class Push-Button-Descriptor extends View-Descriptor
  
  
  (form
    (<install>                                image: {Image-Resource "MsgKeyboard"}
      (<properties~>                          default: title
        (<Property-Descriptor> name: default?
          (<Boolean-Domain>    name: domain))
        (<Property-Descriptor> name: flat?    standard?: #f
          (<Boolean-Domain>    name: domain))))))


;;;
;;;; Radio-Button
;;;


(class Radio-Button-Descriptor extends View-Descriptor
  
  
  (form
    (<install>
      (<properties~>                                  default: title
        (<Property-Descriptor> name: set
          (<Value-Domain>      name: domain           nullable?: #t))
        (<Property-Descriptor> name: group
          (<Value-Domain>      name: domain           nullable?: #t))
        (<Property-Descriptor> name: selected?
          (<Boolean-Domain>    name: domain))
        (<Property-Descriptor> name: editable?
          (<Boolean-Domain>    name: domain))
        (<Property-Descriptor> name: radio-background
          (<Color-Domain>      name: domain           nullable?: #t))))))


;;;
;;;; Scrollbar
;;;


(class Scrollbar-Descriptor extends View-Descriptor
  
  
  (form
    (<install>                                   image: {Image-Resource "ResizeHeight"}
      (<properties~>
        (<Property-Descriptor> name: orientation
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: pos
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: range
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: line-height
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: page-height
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: flat?
          (<Boolean-Domain>    name: domain))
        (<Property-Descriptor> name: scroll-proc
          (<Value-Domain>      name: domain      nullable?: #t))))))


;;;
;;;; Scroller-View
;;;


(class Scroller-View-Descriptor extends Layout-View-Descriptor
  
  
  (form
    (<install>                                image: {Image-Resource "MsgGeneral"}
      (<properties~>
        (<Property-Descriptor> name: client   standard?: #f
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: vscroll? title: "VScroll"
          (<Boolean-Domain>    name: domain))
        (<Property-Descriptor> name: hscroll? title: "HScroll"
          (<Boolean-Domain>    name: domain))
        (<Property-Descriptor> name: flat?    standard?: #f
          (<Boolean-Domain>    name: domain))))))


;;;
;;;; Design
;;;


(class Splitter-View-Descriptor extends View-Descriptor
  
  
  (form
    (<install>                                     image: {Image-Resource "TileVertically"}
      (<properties~>
        (<Property-Descriptor> name: separator
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: state
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: target
          (<Value-Domain>      name: domain        nullable?: #t))
        (<Property-Descriptor> name: orientation
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: mode
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: division
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: insets
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: preferences   standard?: #f
          (<Value-Domain>      name: domain        nullable?: #t))
        (<Property-Descriptor> name: after-handler category: handler standard?: #f
          (<Value-Domain>      name: domain        nullable?: #t))))))


;;;
;;;; Splitter-View.Standard
;;;


(define-form Splitter-View.Standard
  (<Splitter-View>
    (<Layout-View> layout-type: fill location: first)
    (<Layout-View> layout-type: fill location: second)))


;;;
;;;; Splitter
;;;


(class Splitter-Descriptor extends View-Descriptor
  
  
  (form
    (<install>
      (<properties~>
        (<Property-Descriptor> name: orientation
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: move-handler category: handler standard?: #f
          (<Handler-Domain>    name: domain))))))


;;;
;;;; Tab-Sheet
;;;


(class Tab-Sheet-Descriptor extends Layout-View-Descriptor
  
  
  (form
    (<install>                                        image: {Image-Resource "Configure"}
      (<properties~>                                  default: title
        (<Property-Descriptor> name: title-color      standard?: #f
          (<Value-Domain>      name: domain           nullable?: #t))
        (<Property-Descriptor> name: header-color     standard?: #f
          (<Value-Domain>      name: domain           nullable?: #t))
        (<Property-Descriptor> name: header-end-color standard?: #f
          (<Value-Domain>      name: domain           nullable?: #t))
        (<Property-Descriptor> name: border-color     standard?: #f
          (<Value-Domain>      name: domain           nullable?: #t))
        (<Property-Descriptor> name: closable?        standard?: #f
          (<Boolean-Domain>    name: domain))))))


;;;
;;;; Tab-View
;;;


(class Tab-View-Descriptor extends View-Descriptor
  
  
  (form
    (<install>
      (<properties~>
        (<Property-Descriptor> name: orientation     standard?: #f
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: keep-one-sheet? standard?: #f
          (<Value-Domain>      name: domain)))))
  
  
  (method override (component-surrogate-class self component)
    Tab-View-Surrogate)
  
  
  (method override (component-get-categorized-addable-classes self component)
    (list
      (list
        (reify-reference Tab-Sheet)))))


;;;
;;;; Moniker-Widget
;;;


(class Moniker-Widget-Descriptor extends Combo-Text-Descriptor
  
  
  (form
    (<install>
      (<properties~>
        (<Property-Descriptor> name: mode
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: protocol
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: parameters
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: display-logical?
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: display-protocol?
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: anchors
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: moniker-update-handler category: handler standard?: #f
          (<Value-Domain>      name: domain)))))))
