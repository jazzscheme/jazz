;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; UI Designer Classes
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.ui.designer jazz


(import (jazz.designer)
        (jazz.graphic)
        (jazz.jml)
        (jazz.library)
        (jazz.system)
        (jazz.ui))


;;;
;;;; Completions-Domain
;;;


(class undocumented Completions-Domain extends List-Domain
  
  
  (method override (finish rest)
    (nextmethod rest)
    @convert
    (set! domain (new Completion-Domain))))


;;;
;;;; Completion-Domain
;;;


(class Completion-Domain extends String-Domain
  
  
  (method override (present-value value)
    (format "{a} -> {a}" (car value) (cdr value))))


;;;
;;;; Figure
;;;


(class Figure-Descriptor extends Component-Descriptor
  
  
  (form
    (<install>
      (<properties~>
        (<Property-Descriptor> name: location
          (<Location-Domain>   name: domain))
        (<Property-Descriptor> name: position
          (<Point-Domain>      name: domain))
        (<Property-Descriptor> name: size
          (<Dimension-Domain>  name: domain))))))


;;;
;;;; View
;;;


(class View-Descriptor extends Figure-Descriptor
  
  
  (form
    (<install>                                               image: {Image-Resource "View"}
      (<properties~>
        (<Property-Descriptor> name: title
          (<Localized-Domain>  name: domain))
        (<Property-Descriptor> name: font                    standard?: #f
          (<Font-Domain>       name: domain                  nullable?: #t choices: (({Font Label} "Label") ({Font Label-Bold} "Label-Bold"))))
        (<Property-Descriptor> name: style                   standard?: #f
          (<Value-Domain>      name: domain                  nullable?: #t))
        (<Property-Descriptor> name: background
          (<Color-Domain>      name: domain                  nullable?: #t))
        (<Property-Descriptor> name: auto-size?              standard?: #f
          (<Boolean-Domain>    name: domain))
        (<Property-Descriptor> name: tooltip?                standard?: #f
          (<Boolean-Domain>    name: domain))
        (<Property-Descriptor> name: tooltip-text            standard?: #f
          (<Localized-Domain>  name: domain))
        (<Property-Descriptor> name: draggable?              standard?: #f
          (<Boolean-Domain>    name: domain))
        (<Property-Descriptor> name: drag-tolerance          standard?: #f
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: enabled?                standard?: #f
          (<Boolean-Domain>    name: domain))
        (<Property-Descriptor> name: navigable?              standard?: #f
          (<Boolean-Domain>    name: domain))
        (<Property-Descriptor> name: action
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: outline-view            standard?: #f
          (<Value-Domain>      name: domain                  nullable?: #t))
        (<Property-Descriptor> name: offscreen?              standard?: #f
          (<Boolean-Domain>    name: domain))
        (<Property-Descriptor> name: scaling                 standard?: #f
          (<Value-Domain>      name: domain                  nullable?: #t))
        (<Property-Descriptor> name: rotation                standard?: #f
          (<Value-Domain>      name: domain                  nullable?: #t))
        (<Property-Descriptor> name: layer                   standard?: #f
          (<Value-Domain>      name: domain                  nullable?: #t))
        (<Property-Descriptor> name: effect                  standard?: #f
          (<Value-Domain>      name: domain                  nullable?: #t))
        (<Property-Descriptor> name: user-data               standard?: #f
          (<Value-Domain>      name: domain                  nullable?: #t))
        (<Property-Descriptor> name: focus-gained-handler    category: handler standard?: #f
          (<Handler-Domain>    name: domain))
        (<Property-Descriptor> name: focus-lose-handler      category: handler standard?: #f
          (<Handler-Domain>    name: domain))
        (<Property-Descriptor> name: cursor-update-handler   category: handler standard?: #f
          (<Handler-Domain>    name: domain))
        (<Property-Descriptor> name: mouse-enter-handler     category: handler standard?: #f
          (<Handler-Domain>    name: domain))
        (<Property-Descriptor> name: mouse-hover-handler     category: handler standard?: #f
          (<Handler-Domain>    name: domain))
        (<Property-Descriptor> name: mouse-leave-handler     category: handler standard?: #f
          (<Handler-Domain>    name: domain))
        (<Property-Descriptor> name: mouse-down-handler      category: handler standard?: #f
          (<Handler-Domain>    name: domain))
        (<Property-Descriptor> name: mouse-move-handler      category: handler standard?: #f
          (<Handler-Domain>    name: domain))
        (<Property-Descriptor> name: mouse-up-handler        category: handler standard?: #f
          (<Handler-Domain>    name: domain))
        (<Property-Descriptor> name: drag-move-handler       category: handler standard?: #f
          (<Handler-Domain>    name: domain))
        (<Property-Descriptor> name: drag-up-handler         category: handler standard?: #f
          (<Handler-Domain>    name: domain))
        (<Property-Descriptor> name: double-click-handler    category: handler standard?: #f
          (<Handler-Domain>    name: domain))
        (<Property-Descriptor> name: current-drop-handler    category: handler standard?: #f
          (<Handler-Domain>    name: domain))
        (<Property-Descriptor> name: receive-drop-handler    category: handler standard?: #f
          (<Handler-Domain>    name: domain))
        (<Property-Descriptor> name: receive-files-handler   category: handler standard?: #f
          (<Handler-Domain>    name: domain))
        (<Property-Descriptor> name: context-menu-handler    category: handler standard?: #f
          (<Handler-Domain>    name: domain))
        (<Property-Descriptor> name: key-press-handler       category: handler standard?: #f
          (<Handler-Domain>    name: domain))
        (<Property-Descriptor> name: arrow-press-handler     category: handler standard?: #f
          (<Handler-Domain>    name: domain))
        (<Property-Descriptor> name: escape-press-handler    category: handler standard?: #f
          (<Handler-Domain>    name: domain))
        (<Property-Descriptor> name: backspace-press-handler category: handler standard?: #f
          (<Handler-Domain>    name: domain))
        (<Property-Descriptor> name: return-press-handler    category: handler standard?: #f
          (<Handler-Domain>    name: domain))
        (<Property-Descriptor> name: tab-press-handler       category: handler standard?: #f
          (<Handler-Domain>    name: domain))
        (<Property-Descriptor> name: content-change-handler  category: handler standard?: #f
          (<Handler-Domain>    name: domain))
        (<Property-Descriptor> name: selection-handler       category: handler standard?: #f
          (<Handler-Domain>    name: domain))
        (<Property-Descriptor> name: action-handler          category: handler standard?: #f
          (<Handler-Domain>    name: domain)))))
  
  
  (method override (can-try-out? class)
    #t)
  
  
  (method override (try-out class)
    (let ((process (designer-process~ (get-application))))
      (try-out~ process (serialize-class class))))
  
  
  (method override (component-get-categorized-addable-classes component)
    (list
      (list
        (reference View))))
  
  
  (method override (component-surrogate-class component)
    View-Surrogate))


;;;
;;;; Action-Item
;;;


(class Action-Item-Descriptor extends Component-Descriptor
  
  
  (form
    (<install>                                          image: {Image-Resource "Link"} can-rename?: #f can-delete?: #f can-relocate?: #f can-copy?: #f
      (<properties~>
        (<Property-Descriptor> name: action-handler     category: handler standard?: #f
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: shortcut
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: alternate-shortcut
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: enabled?
          (<Value-Domain>      name: domain))))))


;;;
;;;; Actions
;;;


(class Actions-Descriptor extends Component-Descriptor
  
  
  (form
    (<install> can-rename?: #f can-delete?: #f can-relocate?: #f can-copy?: #f))
  
  
  (method override (component-get-categorized-addable-classes component)
    `((,(reference Action-Item))))
  
  
  (method override (component-get-addable-details component)
    '((name-info 200 #f) (shortcut 200 #t))))


;;;
;;;; Preferences
;;;


(class Preferences-Descriptor extends Component-Descriptor
  
  
  (form
    (<install>
      (<properties~>
        (<Property-Descriptor> name: title
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: icon
          (<Value-Domain>      name: domain)))))
  
  
  (method override (component-get-component-image component)
    (or (get-icon~ component) {Image-Resource "OpenedFolder"}))
  
  
  (method override (component-presentation-property? component property)
    (memq? (field-name property) '(title)))
  
  
  (method override (component-get-presentation component)
    (get-title~ component))
  
  
  (method override (component-set-presentation component designer title)
    (set-property~ designer component title: title)))


;;;
;;;; Aliases-Preferences
;;;


(class Aliases-Preferences-Descriptor extends Preferences-Descriptor
  
  
  (form
    (<install>       can-rename?: #f can-delete?: #f can-relocate?: #f can-copy?: #f
      (<properties~>)))
  
  
  (method override (component-get-categorized-addable-classes component)
    (list
      (list
        (reference Alias-Configuration))))
  
  
  (method override (component-get-addable-details component)
    '((alias 150 #f) (directory 300 #t))))


;;;
;;;; Alias-Configuration
;;;


(class Alias-Configuration-Descriptor extends Preferences-Descriptor
  
  
  (form
    (<install>                                 title: "Alias"
      (<properties~>
        (<Property-Descriptor> name: alias
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: directory
          (<Directory-Domain>  name: domain)))))
  
  
  (method override (component-presentation-property? component property)
    (memq? (field-name property) '(alias)))
  
  
  (method override (component-get-presentation component)
    (or (get-alias~ component)
        "{}"))
  
  
  (method override (component-set-presentation component designer presentation)
    (set-property~ designer component :alias (string->symbol presentation))))


;;;
;;;; Bindings-Preferences
;;;


(class Bindings-Preferences-Descriptor extends Preferences-Descriptor
  
  
  (form
    (<install>       can-rename?: #f can-delete?: #f can-relocate?: #f can-copy?: #f
      (<properties~>))))


;;;
;;;; Label-Item
;;;


(class Label-Item-Descriptor extends View-Descriptor
  
  
  (form
    (<install>
      (<properties~>
        (<Property-Descriptor> name: icon
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: disabled-icon standard?: #f
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: shortcut
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: default?      standard?: #f
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: content       standard?: #f
          (<Value-Domain>      name: domain))))))


;;;
;;;; Check-Item
;;;


(class Check-Item-Descriptor extends Label-Item-Descriptor
  
  
  (form
    (<install>
      (<properties~>
        (<Property-Descriptor> name: checked?
          (<Value-Domain>      name: domain))))))


;;;
;;;; Document-Preferences
;;;


(class Document-Preferences-Descriptor extends Preferences-Descriptor
  
  
  (form
    (<install>       can-rename?: #f can-delete?: #f can-relocate?: #f can-copy?: #f
      (<properties~>))))


;;;
;;;; Documents-Preferences
;;;


(class Documents-Preferences-Descriptor extends Preferences-Descriptor
  
  
  (form
    (<install>                                          can-rename?: #f can-delete?: #f can-relocate?: #f can-copy?: #f
      (<properties~>
        (<Property-Descriptor> name: default-width
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: default-background
          (<Color-Domain>      name: domain))
        (<Property-Descriptor> name: highlight-chapters?
          (<Boolean-Domain>    name: domain))
        (<Property-Descriptor> name: highlight-hierarchy?
          (<Boolean-Domain>    name: domain))))))


;;;
;;;; Text-Preferences
;;;


(class Text-Preferences-Descriptor extends Document-Preferences-Descriptor
  
  
  (form
    (<install>
      (<properties~>
        (<Property-Descriptor> name: background
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: default-style
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: pulse-caret?
          (<Boolean-Domain>    name: domain))
        (<Property-Descriptor> name: auto-complete?
          (<Boolean-Domain>    name: domain))))))


;;;
;;;; Code-Text-Preferences
;;;


(class Code-Text-Preferences-Descriptor extends Text-Preferences-Descriptor
  
  
  (form
    (<install>
      (<properties~>
        (<Property-Descriptor> name: match-style
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: match-action
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: flash-delay
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: flash-duration
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: highlight-mode
          (<Value-Domain>      name: domain))))))


;;;
;;;; Exemplar-Preferences
;;;


(class Exemplar-Preferences-Descriptor extends Preferences-Descriptor
  
  
  (form
    (<install>                              can-rename?: #f can-delete?: #f can-relocate?: #f can-copy?: #f
      (<properties~>
        (<Property-Descriptor> name: base
          (<Value-Domain>      name: domain))))))


;;;
;;;; Exemplars-Preference
;;;


(class Exemplars-Preferences-Descriptor extends Preferences-Descriptor
  
  
  (form
    (<install> can-rename?: #f can-delete?: #f can-relocate?: #f can-copy?: #f)))


;;;
;;;; Color-Preferences
;;;


(class Color-Preferences-Descriptor extends Exemplar-Preferences-Descriptor
  
  
  (form
    (<install>                              can-rename?: #f can-delete?: #f can-relocate?: #f can-copy?: #f
      (<properties~>
        (<Property-Descriptor> name: base
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: red
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: green
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: blue
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: alpha
          (<Value-Domain>      name: domain))))))


;;;
;;;; Colors-Preferences
;;;


(class Colors-Preferences-Descriptor extends Exemplars-Preferences-Descriptor
  
  
  (form
    (<install> can-rename?: #f can-delete?: #f can-relocate?: #f can-copy?: #f)))


;;;
;;;; Command-Text-Preferences
;;;


(class Command-Text-Preferences-Descriptor extends Document-Preferences-Descriptor


  (form
    (<install>
      (<properties~>
        (<Property-Descriptor> name: separator-style
          (<Value-Domain>      name: domain))))))


;;;
;;;; Figure-Preferences
;;;


(class Figure-Preferences-Descriptor extends Preferences-Descriptor
  
  
  (form
    (<install>
      (<properties~>
        (<Property-Descriptor> name: location
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: position
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: size
          (<Value-Domain>      name: domain)))))
  
  
  (method override (component-presentation-property? component property)
    (memq? (field-name property) '(title)))
  
  
  (method override (component-get-presentation component)
    (or (get-title~ component) (->string (get-name~ component))))
  
  
  (method override (component-set-presentation component designer title)
    (set-property~ designer component title: title)))


;;;
;;;; Docked-Preferences
;;;


(class Docked-Preferences-Descriptor extends Figure-Preferences-Descriptor
  
  
  (form
    (<install>                                 image: {Image-Resource "Docked"}
      (<properties~>
        (<Property-Descriptor> name: model
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: caption?
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: zoomable?
          (<Value-Domain>      name: domain)))))
  
  
  ;;;
  ;;;; Present
  ;;;
  
  
  (method override (component-get-component-image component)
    (or (get-icon~ component) {Image-Resource "Docked"}))
  
  
  (method override (component-presentation-property? component property)
    (memq? (field-name property) '(title)))
  
  
  (method override (component-get-presentation component)
    (or (get-title~ component) "Docked"))
  
  
  (method override (component-set-presentation component designer title)
    (set-property~ designer component title: title)))


;;;
;;;; Favorites-Preferences
;;;


(class Favorites-Preferences-Descriptor extends Preferences-Descriptor
  
  
  (form
    (<install>       can-rename?: #f can-delete?: #f can-relocate?: #f can-copy?: #f
      (<properties~>)))
  
  
  (method override (component-get-categorized-addable-classes component)
    (list
      (list
        (reference Favorite-Configuration))))
  
  
  (method override (component-get-addable-details component)
    '((shortcut 100 #f) (target 300 #t))))


;;;
;;;; Favorite-Configuration
;;;


(class Favorite-Configuration-Descriptor extends Preferences-Descriptor
  
  
  (form
    (<install>                 title: "Favorite"
      (<properties~>
        (<Property-Descriptor> name: shortcut
          (<String-Domain>     name: domain))
        (<Property-Descriptor> name: target
          (<Value-Domain>      name: domain)))))
  
  
  (method override (component-presentation-property? component property)
    (memq? (field-name property) '(shortcut)))
  
  
  (method override (component-get-presentation component)
    (or (get-shortcut~ component)
        "{}"))
  
  
  (method override (component-set-presentation component designer shortcut)
    (set-property~ designer component shortcut: shortcut)))


;;;
;;;; Font-Preferences
;;;


(class Font-Preferences-Descriptor extends Exemplar-Preferences-Descriptor
  
  
  (form
    (<install>                                  can-rename?: #f can-delete?: #f can-relocate?: #f can-copy?: #f
      (<properties~>
        (<Property-Descriptor> name: base
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: font-name
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: point-size
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: color
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: bold?
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: italic?
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: underline?
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: antialias
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: hint-style
          (<Value-Domain>      name: domain))))))


;;;
;;;; Fonts-Preferences
;;;


(class Fonts-Preferences-Descriptor extends Exemplars-Preferences-Descriptor
  
  
  (form
    (<install> can-rename?: #f can-delete?: #f can-relocate?: #f can-copy?: #f)))


;;;
;;;; Format-Preferences
;;;


(class Format-Preferences-Descriptor extends Exemplar-Preferences-Descriptor
  
  
  (form
    (<install>                                       can-rename?: #f can-delete?: #f can-relocate?: #f can-copy?: #f
      (<properties~>
        (<Property-Descriptor> name: base
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: left-margin
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: right-margin
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: justification
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: bulleted?
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: bullet-outside
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: bullet-inside
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: keep-with-next?
          (<Value-Domain>      name: domain))))))


;;;
;;;; Formats-Preferences
;;;


(class Formats-Preferences-Descriptor extends Exemplars-Preferences-Descriptor
  
  
  (form
    (<install> can-rename?: #f can-delete?: #f can-relocate?: #f can-copy?: #f)))


;;;
;;;; Image-View
;;;


(class Image-View-Descriptor extends View-Descriptor
  
  
  (form
    (<install>                                       image: {Image-Resource "BlueRed"}
      (<properties~>
        (<Property-Descriptor>  name: portfolio
          (<Portfolio-Domain>   name: domain))
        (<Property-Descriptor>  name: resource
          (<String-Domain>      name: domain))
        (<Property-Descriptor>  name: moniker
          (<Value-Domain>       name: domain))
        (<Property-Descriptor>  name: image-position
          (<Value-Domain>       name: domain))
        (<Property-Descriptor>  name: image-size
          (<Value-Domain>       name: domain))
        (<Property-Descriptor>  name: fill-mode
          (<Enumeration-Domain> name: domain         nullable?: #f choices: ((position "Position") (center "Center") (fill "Fill") (fit "Fit") (stretch "Stretch") (tile "Tile"))))))))


;;;
;;;; Interface-Preferences
;;;


(class Interface-Preferences-Descriptor extends Preferences-Descriptor
  
  
  (form
    (<install> can-rename?: #f can-delete?: #f can-relocate?: #f can-copy?: #f)))


;;;
;;;; Label-View
;;;


(class Label-View-Descriptor extends View-Descriptor
  
  
  (form
    (<install>                                        image: {Image-Resource "Text"}
      (<properties~>                                  default: title
        (<Property-Descriptor>    name: justification
          (<Justification-Domain> name: domain))
        (<Property-Descriptor>    name: color
          (<Color-Domain>         name: domain))
        (<Property-Descriptor>    name: shadow?       standard?: #f
          (<Boolean-Domain>       name: domain))))))


;;;
;;;; Orphaned-Actions
;;;


(class Orphaned-Actions-Descriptor extends Actions-Descriptor)


;;;
;;;; Outline-Model
;;;


(class Outline-Model-Descriptor extends View-Descriptor
  
  
  (form
    (<install>
      (<properties~>
        (<Property-Descriptor> name: default-row-height
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: row-spacing
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: left-padding
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: top-padding
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: background-filler
          (<Value-Domain>      name: domain             nullable?: #t))))))


;;;
;;;; Outline-View
;;;


(class Outline-View-Descriptor extends View-Descriptor
  
  
  (form
    (<install>
      (<properties~>
        (<Property-Descriptor> name: left-padding      standard?: #f
          (<Value-Domain>      name: domain            nullable?: #t))
        (<Property-Descriptor> name: top-padding       standard?: #f
          (<Value-Domain>      name: domain            nullable?: #t))
        (<Property-Descriptor> name: background-filler standard?: #f
          (<Portfolio-Domain>  name: domain            nullable?: #t))
        (<Property-Descriptor> name: fit-to-scroller?  standard?: #f
          (<Boolean-Domain>    name: domain))))))


;;;
;;;; Outline-View-Old
;;;


(class Outline-View-Old-Descriptor extends View-Descriptor
  
  
  (form
    (<install>
      (<properties~>
        (<Property-Descriptor> name: default-row-height standard?: #f
          (<Value-Domain>      name: domain             nullable?: #t))
        (<Property-Descriptor> name: row-spacing        standard?: #f
          (<Value-Domain>      name: domain             nullable?: #t))
        (<Property-Descriptor> name: left-padding       standard?: #f
          (<Value-Domain>      name: domain             nullable?: #t))
        (<Property-Descriptor> name: top-padding        standard?: #f
          (<Value-Domain>      name: domain             nullable?: #t))
        (<Property-Descriptor> name: background-filler  standard?: #f
          (<Portfolio-Domain>  name: domain             nullable?: #t))
        (<Property-Descriptor> name: fit-to-scroller?   standard?: #f
          (<Boolean-Domain>    name: domain))))))


;;;
;;;; Pad-Preferences
;;;


(class Pad-Preferences-Descriptor extends Figure-Preferences-Descriptor
  
  
  (form
    (<install> image: {Image-Resource "Pad"}))
  
  
  (method override (component-get-categorized-addable-classes component)
    (list
      (list
        (reference Splitter-Preferences)
        (reference Pad-Preferences))
      #f
      (list
        (reference Docked-Preferences)
        (reference Stage-Preferences)))))


;;;
;;;; Plain-Text-Preferences
;;;


(class Plain-Text-Preferences-Descriptor extends Document-Preferences-Descriptor
  
  
  (form
    (<install>
      (<properties~>
        (<Property-Descriptor> name: title-style
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: comment-style
          (<Value-Domain>      name: domain))))))


;;;
;;;; Print-Preferences
;;;


(class Print-Preferences-Descriptor extends Preferences-Descriptor
  
  
  (form
    (<install>                 can-rename?: #f can-delete?: #f can-relocate?: #f can-copy?: #f
      (<properties~>
        (<Property-Descriptor> name: color?
          (<Boolean-Domain>    name: domain))))))


;;;
;;;; Prop-Text-Preferences
;;;


(class Prop-Text-Preferences-Descriptor extends Document-Preferences-Descriptor
  
  
  (form
    (<install>
      (<properties~>
        (<Property-Descriptor> name: title-style
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: comment-style
          (<Value-Domain>      name: domain))))))


;;;
;;;; Radio-Item
;;;


(class Radio-Item-Descriptor extends Label-Item-Descriptor
  
  
  (form
    (<install>
      (<properties~>
        (<Property-Descriptor> name: group
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: selected?
          (<Value-Domain>      name: domain))))))


;;;
;;;; Splitter-Preferences
;;;


(class Splitter-Preferences-Descriptor extends Figure-Preferences-Descriptor
  
  
  (form
    (<install>                                   image: {Image-Resource "Splitter"}
      (<properties~>
        (<Property-Descriptor> name: separator
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: state
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: target
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: orientation
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: mode
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: division
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: insets
          (<Value-Domain>      name: domain)))))
  
  
  (method override (component-get-categorized-addable-classes component)
    (list
      (list
        (reference Splitter-Preferences)
        (reference Pad-Preferences))
      (list
        (reference Docked-Preferences)
        (reference Stage-Preferences)))))


;;;
;;;; Stage-Preferences
;;;


(class Stage-Preferences-Descriptor extends Figure-Preferences-Descriptor
  
  
  (form
    (<install>                                   image: {Image-Resource "Stage"}
      (<properties~>
        (<Property-Descriptor> name: maximized?
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: guest-model
          (<Value-Domain>      name: domain))))))


;;;
;;;; Style-Preferences
;;;


(class Style-Preferences-Descriptor extends Exemplar-Preferences-Descriptor
  
  
  (form
    (<install>                                 can-rename?: #f can-delete?: #f can-relocate?: #f can-copy?: #f
      (<properties~>
        (<Property-Descriptor> name: base
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: alignment
          (<Value-Domain>      name: domain))))))


;;;
;;;; Styles-Preferences
;;;


(class Styles-Preferences-Descriptor extends Exemplars-Preferences-Descriptor
  
  
  (form
    (<install> can-rename?: #f can-delete?: #f can-relocate?: #f can-copy?: #f)))


;;;
;;;; Text-Style-Preferences
;;;


(class Text-Style-Preferences-Descriptor extends Preferences-Descriptor
  
  
  (form
    (<install>                                 can-rename?: #f can-delete?: #f can-relocate?: #f can-copy?: #f
      (<properties~>
        (<Property-Descriptor> name: base
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: alignment
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: font
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: color
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: highlight
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: frame
          (<Value-Domain>      name: domain))))))


;;;
;;;; Toolbar-Preferences
;;;


(class Toolbar-Preferences-Descriptor extends Figure-Preferences-Descriptor
  
  
  (form
    (<install>                              image: {Image-Resource "Docked"}
      (<properties~>
        (<Property-Descriptor> name: model
          (<Value-Domain>      name: domain)))))
  
  
  ;;;
  ;;;; Present
  ;;;
  
  
  (method override (component-presentation-property? component property)
    (memq? (field-name property) '(title)))
  
  
  (method override (component-get-presentation component)
    (or (get-title~ component) "Toolbar"))
  
  
  (method override (component-set-presentation component designer title)
    (set-property~ designer component title: title)))


;;;
;;;; Tree-Preferences
;;;


(class Tree-Preferences-Descriptor extends Preferences-Descriptor
  
  
  (form
    (<install>                 can-rename?: #f can-delete?: #f can-relocate?: #f can-copy?: #f
      (<properties~>
        (<Property-Descriptor> name: sort-case-sensitive?
          (<Boolean-Domain>    name: domain))))))


;;;
;;;; Wallpaper-Preferences
;;;


(class Wallpaper-Preferences-Descriptor extends Preferences-Descriptor
  
  
  (form
    (<install>                              can-rename?: #f can-delete?: #f can-relocate?: #f can-copy?: #f
      (<properties~>
        (<Property-Descriptor> name: active
          (<Value-Domain>      name: domain)))))
  
  
  (method override (component-get-categorized-addable-classes component)
    (list
      (list
        (reference Wallpaper-Configuration))))
  
  
  (method override (component-get-addable-details component)
    '((name-info 100 #t)
      (directory 100 #f)
      (mode 100 #f)
      (startup 100 #f)
      (favorites 100 #f)
      (period 100 #f)
      (recursive? 100 #f)
      (random? 100 #f)
      (active? 100 #f))))


;;;
;;;; Wallpaper-Configuration
;;;


(class Wallpaper-Configuration-Descriptor extends Preferences-Descriptor
  
  
  (form
    (<install>                                  title: "Wallpaper"
      (<properties~>
        (<Property-Descriptor> name: directory
          (<Directory-Domain>  name: domain))
        (<Property-Descriptor> name: mode
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: startup
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: favorites
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: period
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: recursive?
          (<Boolean-Domain>    name: domain))
        (<Property-Descriptor> name: random?
          (<Boolean-Domain>    name: domain))
        (<Property-Descriptor> name: active?
          (<Boolean-Domain>    name: domain))))))


;;;
;;;; Layout-View
;;;


(class Justification-Domain extends Enumeration-Domain

  
  (form 
    (<install> nil-presentation: "None" choices: ((head "Head") (center "Center") (tail "Tail") (horizontal "Horizontal") (vertical "Vertical") ((head head) "Head Head") ((head center) "Head Center") ((head tail) "Head Tail") ((center head) "Center Head") ((center center) "Center Center") ((center tail) "Center Tail") ((tail head) "Tail Head") ((tail center) "Tail Center") ((tail tail) "Tail Tail")))))


(class Type-Domain extends Enumeration-Domain

  
  (form 
    (<install> nil-presentation: "None" choices: ((fill "Fill") (fit "Fit") (center "Center") (justify "Justify") (border "Border") (snap "Snap") (flow "Flow") (box "Box") (gravity "Gravity")))))


(class Layout-View-Descriptor extends View-Descriptor
  
  
  (form
    (<install>                                               image: {Image-Resource "Layout"}
      (<properties~>
        (<Property-Descriptor>    name: layout-type
          (<Type-Domain>          name: domain))
        (<Property-Descriptor>    name: layout-insets
          (<Rect-Domain>          name: domain))
        (<Property-Descriptor>    name: layout-justification
          (<Justification-Domain> name: domain))
        (<Property-Descriptor>    name: layout-padding
          (<Integer-Domain>       name: domain))
        (<Property-Descriptor>    name: layout-fit
          (<Enumeration-Domain>   name: domain               nullable?: #t nil-presentation: "None" choices: ((around "Around"))))))))


;;;
;;;; Page-Setup
;;;


(class Page-Setup-Descriptor extends Layout-View-Descriptor
  
  
  (form
    (<install>
      (<properties~>
        (<Property-Descriptor>  name: fit
          (<Value-Domain>       name: domain))
        (<Property-Descriptor>  name: orientation
          (<Value-Domain>       name: domain))
        (<Property-Descriptor>  name: paper-size
          (<Value-Domain>       name: domain))
        (<Property-Descriptor>  name: paper-source
          (<Value-Domain>       name: domain))
        (<Property-Descriptor>  name: min-margins
          (<Value-Domain>       name: domain))))))


;;;
;;;; Tool-Preferences
;;;


(class Tool-Preferences-Descriptor extends Figure-Preferences-Descriptor
  
  
  (form
    (<install>       can-rename?: #f can-delete?: #f can-relocate?: #f can-copy?: #f
      (<properties~>))))


;;;
;;;; Tools-Preferences
;;;


(class Tools-Preferences-Descriptor extends Preferences-Descriptor
  
  
  (form
    (<install>       can-rename?: #f can-delete?: #f can-relocate?: #f can-copy?: #f
      (<properties~>))))


;;;
;;;; Search-Preferences
;;;


(class Search-Preferences-Descriptor extends Tool-Preferences-Descriptor
  
  
  (form
    (<install>
      (<properties~>
        (<Property-Descriptor> name: active
          (<Value-Domain>      name: domain)))))
  
  
  (method override (component-get-addable-base component)
    Search-View-Preferences)
  
  
  (method override (component-get-addable-details component)
    '((name-info 150 #t) (targets 150 #f) (whole-words? 100 #f) (ignore-case? 100 #f) (preserve-case? 100 #f) (play-recording? 100 #f) (expression? 100 #f))))


;;;
;;;; Search-View-Preference
;;;


(class Search-View-Preferences-Descriptor extends Preferences-Descriptor
  
  
  (form
    (<install>
      (<properties~>
        (<Property-Descriptor> name: targets
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: whole-words?
          (<Boolean-Domain>    name: domain))
        (<Property-Descriptor> name: ignore-case?
          (<Boolean-Domain>    name: domain))
        (<Property-Descriptor> name: preserve-case?
          (<Boolean-Domain>    name: domain))
        (<Property-Descriptor> name: play-recording?
          (<Boolean-Domain>    name: domain))
        (<Property-Descriptor> name: expression?
          (<Boolean-Domain>    name: domain))))))


;;;
;;;; Text-View
;;;


(class Text-View-Descriptor extends Outline-View-Descriptor
  
  
  (form
    (<install>                                                 image: {Image-Resource "Script"}
      (<properties~>
        (<Property-Descriptor> name: text-content              standard?: #f
          (<Value-Domain>      name: domain                    nullable?: #t))
        (<Property-Descriptor> name: selectable?               standard?: #f
          (<Boolean-Domain>    name: domain))
        (<Property-Descriptor> name: editable?                 standard?: #f
          (<Boolean-Domain>    name: domain))
        (<Property-Descriptor> name: accepts-returns?
          (<Boolean-Domain>    name: domain))
        (<Property-Descriptor> name: focus-selects-all?
          (<Boolean-Domain>    name: domain))
        (<Property-Descriptor> name: show-unfocused-selection?
          (<Boolean-Domain>    name: domain))
        (<Property-Descriptor> name: force-tab-navigate?       standard?: #f
          (<Boolean-Domain>    name: domain)))))
  
  
  (method override (component-surrogate-class component)
    Text-View-Surrogate)
  
  
  (method override (component-save-properties component designer)
    (when (get-modified?~ component)
      (set-property~ designer component 'text-content (get-content~ (get-model~ component)) design-events?: #f)
      (set-modified?~ component #f))))


;;;
;;;; Entry-Text-View
;;;


(class Entry-Text-View-Descriptor extends Text-View-Descriptor
  
  
  (form
    (<install>
      (<properties~>
        (<Property-Descriptor> name: editor standard?: #t
          (<Value-Domain>      name: domain nullable?: #t))))))


;;;
;;;; Text-Model
;;;


(class Text-Model-Descriptor extends Outline-View-Descriptor
  
  
  (form
    (<install>
      (<properties~>
        (<Property-Descriptor> name: text
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: text-content
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: wrap?
          (<Boolean-Domain>    name: domain))
        (<Property-Descriptor> name: default-format
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: default-style
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: paragraph-spacing
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: char-encoding
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: eol-encoding      title: "EOL Encoding"
          (<Value-Domain>      name: domain))))))


;;;
;;;; Tree-Column
;;;


(class Tree-Column-Descriptor extends Component-Descriptor
  
  
  (form
    (<install>                                     image: {Image-Resource "Green"}
      (<properties~>
        (<Property-Descriptor> name: title
          (<Localized-Domain>  name: domain))
        (<Property-Descriptor> name: width
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: background
          (<Value-Domain>      name: domain        nullable?: #t))
        (<Property-Descriptor> name: justification
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: user-data
          (<Value-Domain>      name: domain        nullable?: #t))))))


;;;
;;;; Header-View
;;;


(class Header-View-Descriptor extends Layout-View-Descriptor
  
  
  (form
    (<install>                                 image: {Image-Resource "AlignmentTop"}
      (<properties~>
        (<Property-Descriptor> name: flat?     standard?: #f
          (<Boolean-Domain>    name: domain))
        (<Property-Descriptor> name: shown?    standard?: #f
          (<Boolean-Domain>    name: domain))
        (<Property-Descriptor> name: selector? standard?: #f
          (<Boolean-Domain>    name: domain))))))


;;;
;;;; Tree-Header
;;;


(class Tree-Header-Descriptor extends Header-View-Descriptor
  
  
  (form
    (<install>
      (<properties~>
        (<Property-Descriptor> name: empty-background standard?: #f
          (<Value-Domain>      name: domain           nullable?: #t))))))


;;;
;;;; Tree-Label
;;;


(class Tree-Label-Descriptor extends Tree-Column-Descriptor
  
  
  (form
    (<install>
      (<properties~>
        (<Property-Descriptor> name: padding
          (<Value-Domain>      name: domain))))))


;;;
;;;; Tree-Node
;;;


(class Tree-Node-Descriptor extends Tree-Label-Descriptor
  
  
  (form
    (<install>                                          image: {Image-Resource "Blue"}
      (<properties~>
        (<Property-Descriptor> name: controls?
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: toplevel-controls?
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: display-images?
          (<Value-Domain>      name: domain))))))


;;;
;;;; Tree-View
;;;


(class Tree-View-Descriptor extends Outline-View-Old-Descriptor
  
  
  (form
    (<install>                                                  image: {Image-Resource "AnalysisManager"}
      (<properties~>
        (<Property-Descriptor>  name: portfolio                 standard?: #f
          (<Portfolio-Domain>   name: domain                    nullable?: #t))
        (<Property-Descriptor>  name: show-header?              standard?: #f
          (<Boolean-Domain>     name: domain))
        (<Property-Descriptor>  name: selection-mode
          (<Enumeration-Domain> name: domain                    nullable?: #f choices: ((cell "cell") (row "row") (node "node"))))
        (<Property-Descriptor>  name: multiple-selection?
          (<Boolean-Domain>     name: domain))
        (<Property-Descriptor>  name: can-select-empty?         standard?: #f
          (<Boolean-Domain>     name: domain))
        (<Property-Descriptor>  name: always-select?            standard?: #f
          (<Boolean-Domain>     name: domain))
        (<Property-Descriptor>  name: show-unfocused-selection?
          (<Boolean-Domain>     name: domain))
        (<Property-Descriptor>  name: focused-on-descendants?   standard?: #f
          (<Boolean-Domain>     name: domain))
        (<Property-Descriptor>  name: auto-expand/collapse?     standard?: #f
          (<Boolean-Domain>     name: domain))
        (<Property-Descriptor>  name: cell-background           standard?: #f
          (<Value-Domain>       name: domain                    nullable?: #t))
        (<Property-Descriptor>  name: empty-background          standard?: #f
          (<Value-Domain>       name: domain                    nullable?: #t))
        (<Property-Descriptor>  name: filled-column
          (<Enumeration-Domain> name: domain                    nullable?: #t choices-handler: {Reference filled-column-values}))
        (<Property-Descriptor>  name: column-spacing            standard?: #f
          (<Integer-Domain>     name: domain))
        (<Property-Descriptor>  name: column-frequency          standard?: #f
          (<Integer-Domain>     name: domain))
        (<Property-Descriptor>  name: reorderable?              standard?: #f
          (<Boolean-Domain>     name: domain))
        (<Property-Descriptor>  name: content                   standard?: #f
          (<Value-Domain>       name: domain                    nullable?: #t)))))
  
  
  (method override (component-get-categorized-addable-classes component)
    `((,(reference Tree-Label-Column)))))


;;;
;;;; Border-View
;;;


(class Border-View-Descriptor extends Layout-View-Descriptor
  
  
  (form
    (<install>                                      image: {Image-Resource "Fill"}
      (<properties~>
        (<Property-Descriptor>  name: border-type
          (<Enumeration-Domain> name: domain        nullable?: #f choices: ((none "None") (solid "Solid") (edge "Edge") (raised "Raised") (palette "Palette") (shadow "Shadow"))))
        (<Property-Descriptor>  name: border-color
          (<Color-Domain>       name: domain))
        (<Property-Descriptor>  name: border-insets
          (<Value-Domain>       name: domain))
        (<Property-Descriptor>  name: border-sides
          (<Enumeration-Domain> name: domain        nullable?: #f choices: ((all "All") (left "Left") (top "Top") (right "Right") (bottom "Bottom") (none "None"))))))))


;;;
;;;; Check-Box
;;;


(class Check-Box-Descriptor extends View-Descriptor
  
  
  (form
    (<install>                                   image: {Image-Resource "Done"}
      (<properties~>                             default: title
        (<Property-Descriptor> name: checked?
          (<Boolean-Domain>    name: domain))
        (<Property-Descriptor> name: selectable? standard?: #f
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: editable?   standard?: #f
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: color
          (<Color-Domain>      name: domain))
        (<Property-Descriptor> name: flat?       standard?: #f
          (<Value-Domain>      name: domain))))))


;;;
;;;; Combo-View
;;;


(class Combo-View-Descriptor extends View-Descriptor
  
  
  (form
    (<install>
      (<properties~>
        (<Property-Descriptor> name: kind
          (<Value-Domain>      name: domain))))))


;;;
;;;; Combo-Text
;;;


(class Combo-Text-Descriptor extends Combo-View-Descriptor
  
  
  (form
    (<install>
      (<properties~>
        (<Property-Descriptor> name: selectable?
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: editable?
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: complete?
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: content
          (<Value-Domain>      name: domain))))))


;;;
;;;; Combo-Box
;;;


(class Combo-Box-Descriptor extends Combo-Text-Descriptor
  
  
  (form
    (<install>
      (<properties~>
        (<Property-Descriptor> name: condensed?
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: choices
          (<Choices-Domain>    name: domain))
        (<Property-Descriptor> name: nullable?
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: choices-updater
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: entry-test
          (<Value-Domain>      name: domain))))))


;;;
;;;; Line-View
;;;


(class Line-View-Descriptor extends View-Descriptor
  
  
  (form
    (<install>
      (<properties~>
        (<Property-Descriptor> name: from
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: to
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: color
          (<Value-Domain>      name: domain)))))
  
  
  (method override (component-surrogate-class component)
    Line-Surrogate))


;;;
;;;; Connector
;;;


(class Connector-Descriptor extends Line-View-Descriptor
  
  
  (form
    (<install>
      (<properties~>
        (<Property-Descriptor> name: client
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: start
          (<String-Domain>     name: domain nullable?: #t))
        (<Property-Descriptor> name: end
          (<String-Domain>     name: domain nullable?: #t)))))
  
  
  (method override (component-surrogate-class component)
    Connector-Surrogate))


;;;
;;;; Base-Container
;;;


(class Base-Container-Descriptor extends Layout-View-Descriptor
  
  
  (form
    (<install> image: {Image-Resource "OpenedFolder"})))


;;;
;;;; Content-View
;;;


(class Content-View-Descriptor extends Layout-View-Descriptor
  
  
  (form
    (<install> image: {Image-Resource "All"} can-rename?: #f can-delete?: #f can-relocate?: #f)))


;;;
;;;; Entry-Combo-Text-View
;;;


(class undocumented Entry-Combo-Text-View-Descriptor extends Text-View-Descriptor
  
  
  (form
    (<install>
      (<properties~>
        (<Property-Descriptor> name: editor
          (<Value-Domain>    name: domain))))))


;;;
;;;; Group-Box
;;;


(class Group-Box-Descriptor extends Layout-View-Descriptor
  
  
  (form
    (<install>
      (<properties~>                        default: title
        (<Property-Descriptor> name: flat?
          (<Value-Domain>      name: domain))))))


;;;
;;;; Header-Bar
;;;


(class Header-Bar-Descriptor extends Layout-View-Descriptor
  
  
  (form
    (<install>
      (<properties~>
        (<Property-Descriptor> name: flat?
          (<Boolean-Domain>    name: domain))
        (<Property-Descriptor> name: shown?
          (<Boolean-Domain>    name: domain))))))


;;;
;;;; Image-Tool
;;;


(class Image-Tool-Descriptor extends Layout-View-Descriptor
  
  
  (form
    (<install>                                         image: {Image-Resource "Configure"}
      (<properties~>
        (<Property-Descriptor> name: portfolio         standard?: #f
          (<Portfolio-Domain>  name: domain            nullable?: #t))
        (<Property-Descriptor> name: resource
          (<Value-Domain>      name: domain            nullable?: #t))
        (<Property-Descriptor> name: disabled-resource standard?: #f
          (<Value-Domain>      name: domain            nullable?: #t))))))


;;;
;;;; Progress-Bar
;;;


(class Progress-Bar-Descriptor extends View-Descriptor
  
  
  (form
    (<install>
      (<properties~>
        (<Property-Descriptor> name: infinite?
          (<Value-Domain>      name: domain))))))


;;;
;;;; Push-Button
;;;


(class Push-Button-Descriptor extends View-Descriptor
  
  
  (form
    (<install>                                image: {Image-Resource "MsgKeyboard"}
      (<properties~>                          default: title
        (<Property-Descriptor> name: default?
          (<Boolean-Domain>    name: domain))
        (<Property-Descriptor> name: flat?    standard?: #f
          (<Boolean-Domain>    name: domain))))))


;;;
;;;; Radio-Button
;;;


(class Radio-Button-Descriptor extends View-Descriptor
  
  
  (form
    (<install>
      (<properties~>                                  default: title
        (<Property-Descriptor> name: set
          (<Value-Domain>      name: domain           nullable?: #t))
        (<Property-Descriptor> name: group
          (<Value-Domain>      name: domain           nullable?: #t))
        (<Property-Descriptor> name: selected?
          (<Boolean-Domain>    name: domain))
        (<Property-Descriptor> name: editable?
          (<Boolean-Domain>    name: domain))
        (<Property-Descriptor> name: radio-background
          (<Color-Domain>      name: domain           nullable?: #t))))))


;;;
;;;; Scrollbar
;;;


(class Scrollbar-Descriptor extends View-Descriptor
  
  
  (form
    (<install>                                   image: {Image-Resource "ResizeHeight"}
      (<properties~>
        (<Property-Descriptor> name: orientation
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: pos
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: range
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: line-height
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: page-height
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: flat?
          (<Boolean-Domain>    name: domain))
        (<Property-Descriptor> name: scroll-proc
          (<Value-Domain>      name: domain      nullable?: #t))))))


;;;
;;;; Scroller-View
;;;


(class Scroller-View-Descriptor extends Layout-View-Descriptor
  
  
  (form
    (<install>                                image: {Image-Resource "MsgGeneral"}
      (<properties~>
        (<Property-Descriptor> name: client   standard?: #f
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: vscroll? title: "VScroll"
          (<Boolean-Domain>    name: domain))
        (<Property-Descriptor> name: hscroll? title: "HScroll"
          (<Boolean-Domain>    name: domain))
        (<Property-Descriptor> name: flat?    standard?: #f
          (<Boolean-Domain>    name: domain))))))


;;;
;;;; Design
;;;


(class Splitter-View-Descriptor extends View-Descriptor
  
  
  (form
    (<install>                                     image: {Image-Resource "TileVertically"}
      (<properties~>
        (<Property-Descriptor> name: separator
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: state
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: target
          (<Value-Domain>      name: domain        nullable?: #t))
        (<Property-Descriptor> name: orientation
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: mode
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: division
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: insets
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: preferences   standard?: #f
          (<Value-Domain>      name: domain        nullable?: #t))
        (<Property-Descriptor> name: after-handler category: handler standard?: #f
          (<Value-Domain>      name: domain        nullable?: #t))))))


;;;
;;;; Splitter-View.Standard
;;;


(define-form Splitter-View.Standard
  (<Splitter-View>
    (<Layout-View> layout-type: fill location: first)
    (<Layout-View> layout-type: fill location: second)))


;;;
;;;; Splitter
;;;


(class Splitter-Descriptor extends View-Descriptor
  
  
  (form
    (<install>
      (<properties~>
        (<Property-Descriptor> name: orientation
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: move-handler category: handler standard?: #f
          (<Handler-Domain>    name: domain))))))


;;;
;;;; Tab-Sheet
;;;


(class Tab-Sheet-Descriptor extends Layout-View-Descriptor
  
  
  (form
    (<install>                                        image: {Image-Resource "Configure"}
      (<properties~>                                  default: title
        (<Property-Descriptor> name: title-color      standard?: #f
          (<Value-Domain>      name: domain           nullable?: #t))
        (<Property-Descriptor> name: header-color     standard?: #f
          (<Value-Domain>      name: domain           nullable?: #t))
        (<Property-Descriptor> name: header-end-color standard?: #f
          (<Value-Domain>      name: domain           nullable?: #t))
        (<Property-Descriptor> name: border-color     standard?: #f
          (<Value-Domain>      name: domain           nullable?: #t))
        (<Property-Descriptor> name: closable?        standard?: #f
          (<Boolean-Domain>    name: domain))))))


;;;
;;;; Tab-View
;;;


(class Tab-View-Descriptor extends View-Descriptor
  
  
  (form
    (<install>
      (<properties~>
        (<Property-Descriptor> name: orientation     standard?: #f
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: keep-one-sheet? standard?: #f
          (<Value-Domain>      name: domain)))))
  
  
  (method override (component-surrogate-class component)
    Tab-View-Surrogate)
  
  
  (method override (component-get-categorized-addable-classes component)
    (list
      (list
        (reference Tab-Sheet)))))


;;;
;;;; Moniker-Widget
;;;


(class Moniker-Widget-Descriptor extends Combo-Text-Descriptor
  
  
  (form
    (<install>
      (<properties~>
        (<Property-Descriptor> name: mode
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: protocol
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: parameters
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: display-logical?
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: display-protocol?
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: anchors
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: moniker-update-handler category: handler standard?: #f
          (<Value-Domain>      name: domain))))))


;;;
;;;; View-Player
;;;


(class View-Player-Descriptor extends Figure-Descriptor
  
  
  (form
    (<install>
      (<properties~>
        (<Property-Descriptor> name: close-behavior
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: caption-base
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: caption
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: caption?
          (<Value-Domain>      name: domain)))))
  
  
  (method override (component-get-components component)
    (cons (get-root~ component) (get-children~ component))))


;;;
;;;; Workspace-Preferences
;;;


(class Workspace-Preferences-Descriptor extends Figure-Preferences-Descriptor
  
  
  (form
    (<install>
      (<properties~>
        (<Property-Descriptor> name: shortcut
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: frame-model
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: fullscreen?
          (<Boolean-Domain>    name: domain)))))
  
  
  (method meta override (get-domain property)
    (case (field-name property)
      ((fullscreen?) (new Boolean-Domain))
      (else (nextmethod property))))
  
  
  (method override (component-get-categorized-addable-classes component)
    (list
      (list
        (reference Splitter-Preferences)
        (reference Pad-Preferences))
      (list
        (reference Docked-Preferences)
        (reference Stage-Preferences)))))


;;;
;;;; Design
;;;


(class Workspaces-Preferences-Descriptor extends Preferences-Descriptor
  
  
  (form
    (<install>                                      can-rename?: #f can-delete?: #f can-relocate?: #f can-copy?: #f
      (<properties~>
        (<Property-Descriptor>   name: active
          (<Value-Domain>        name: domain))
        (<Property-Descriptor>   name: associations
          (<Associations-Domain> name: domain)))))
  
  
  (method override (component-get-categorized-addable-classes component)
    (list
      (list
        (reference Workspace-Preferences))))
  
  
  (method override (component-get-addable-details component)
    '((name-info 150 #t) (shortcut 150 #f) (frame-model 150 #f) (fullscreen? 100 #f))))


;;;
;;;; Associations-Domain
;;;


(class Associations-Domain extends List-Domain
  
  
  (method override (finish rest)
    (nextmethod rest)
     @convert
    (set! domain (new Association-Domain)))
  
  
  @convert
  (method override (add-value value class)
    (add-row self (car value) (cdr value) class: class))
  
  
  @convert
  (method override (new-value)
    #f))


;;;
;;;; Association-Domain
;;;


(class Association-Domain extends Value-Domain
  
  
  ;;;
  ;;;; Presentation
  ;;;
  
  
  (method override (present-value model)
    (format "{s}" model))))
