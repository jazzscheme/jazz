;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Color Request
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.ui.dialog.Color-Request jazz


(import (jazz.graphic)
        (jazz.platform)
        (jazz.system)
        (jazz.ui))


(define (color->ref color)
  (RGB (get-red~ color) (get-green~ color) (get-blue~ color)))

(define (ref->color ref)
  (new Color red: (GetRValue ref) green: (GetGValue ref) blue: (GetBValue ref)))


(define custom-colors
  (let ((array (COLORREF*-alloc 16))
        (black (color->ref {Color name: Black})))
    (loop (for n from 0 below 16)
          (COLORREF*-set! array n black))
    array))


(class undocumented Color-Request extends Dialog
    
  
  (method meta (get-modal (initial-color: initial-color #f))
    (let ((r (CHOOSECOLOR-make)))
      (CHOOSECOLOR-lStructSize-set!  r (CHOOSECOLOR-sizeof))
      (CHOOSECOLOR-hwndOwner-set!    r (get-handle~ (get-toplevel)))
      (CHOOSECOLOR-rgbResult-set!    r (color->ref (or initial-color {Color name: Black})))
      (CHOOSECOLOR-lpCustColors-set! r custom-colors)
      (CHOOSECOLOR-Flags-set!        r (bitwise-ior CC_ANYCOLOR CC_RGBINIT CC_FULLOPEN))
      (if (ChooseColor r)
          (ref->color (CHOOSECOLOR-rgbResult-ref r))
        (let ((code (CommDlgExtendedError)))
          (if (= code 0)
              (throw-cancel)
            (error "Dialog error: {t}" code))))))))
