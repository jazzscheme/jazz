;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Message Box
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.ui.dialog.Message-Box jazz


(import (jazz.geometry)
        (jazz.graphic)
        (jazz.handler)
        (jazz.jml)
        (jazz.locale)
        (jazz.media)
        (jazz.resource)
        (jazz.text)
        (jazz.ui)
        (jazz.ui.dialog)
        (jazz.ui.view))


(class undocumented Message-Box extends View
  
  
  (slot type)
  (slot process-keys?)
  (slot user-content)
  (slot action-buttons)
  (slot default-button)


  (form
    (<install>                                  size: {Dimension 302 120}
      (<Image-View>              name: icon     position: {Point 12 12} size: {Dimension 32 32} resource: {Image-Resource "Information"} portfolio: :images)
      (<Border-View>             name: border   position: {Point 56 12} size: {Dimension 100 100} border-type: () border-color: {Color Dark}
        (<Scroller-View>         name: scroller hscroll?: #f vscroll?: #t style: tool
          (<!>                   name: content  layout-type: fill
            (<Message-Text-View> name: text     background: #f left-padding: 2 top-padding: 0 selectable?: #f editable?: #f))))))
  
  
  (method override (finish initargs)
    (nextmethod initargs)
    (set-client~ (locate 'text) self))

  
  ;;;
  ;;;; Dialog
  ;;;
  
  
  (method override (focus-default)
    (acquire-focus~ (locate 'text)))
  
  
  ;;;
  ;;;; Types
  ;;;

  
  (definition Type-Infos
    (list
      (list 'message      "Message"      :information :asterisk    "OK"  #f   #f       #t 'yes)
      (list 'question     "Question"     :exclamation :exclamation "Yes" "No" #f       #t 'no)
      (list 'confirmation "Confirmation" :exclamation :exclamation "Yes" "No" "Cancel" #t 'cancel)
      (list 'problem      "Problem"      :error       :hand        "OK"  #f   #f       #t 'yes)
      (list 'error        "Error"        :error       :hand        "OK"  #f   "Cancel" #t 'cancel)
      (list 'custom       "Message"      :information :asterisk    #f    #f   #f       #t #f)))
  
  
  (definition (type-info type)
    (let ((info (assq type Type-Infos)))
      (if info
          (cdr info)
        (error "Unknown message-box type: {t}" type))))

  
  ;;;
  ;;;; Events
  ;;;


  (method override (resize dh dv)
    (nextmethod dh dv)
    ;; a quicky so that resizing only starts after process-box has had a chance to layout every object...
    (when (eq? (get-host) (current-modal))
      (bind (first-dh second-dh) (resize-parts (get-width) dh 2)
        (size-figure~ (locate 'border) dh dv)
        (when user-content
          (size-figure~ user-content dh dv))
        (for-each (lambda (button)
                    (move-figure~ button first-dh dv))
                  action-buttons))))
  
  
  (method protected virtual (process-return)
    (let ((dialog (get-host)))
      (end-modal-dialog default-button)))
  
  
  (method protected virtual (process-escape)
    (bind (default-title default-icon default-sound default-yes default-no default-cancel cancelable? close-result) (type-info type)
      (when cancelable?
        (let ((dialog (get-host)))
          (end-modal-dialog close-result)))))
  
  
  (method protected virtual (process-key key)
    (when process-keys?
      (let ((button (find-button key)))
        (when button
          (end-modal-dialog (get-name~ button))))))
  
  
  (method (find-button key)
    (continuation-capture
      (lambda (return)
        (let ((dialog (get-host)))
          (define (try-button button)
            (when (get-visible?~ button)
              (bind (title name . optional) (get-user-data~ button)
                (let ((shortcut-key (if (null? optional) #f (car optional)))
                      (title (localize (get-title~ button))))
                  (let ((first (or shortcut-key (element title 0))))
                    (when (ci=? first key)
                      (continuation-return return button)))))))
          
          (for-each try-button action-buttons)
          #f))))
  
  
  (method (on-select evt)
    (let ((button (get-property~ evt button:)))
      (end-modal-dialog button)))
  
  
  ;;;
  ;;;; Process
  ;;;
  
  
  (method public (process-box text
                              (type: type 'message)
                              (title: title #f)
                              (size: size #f)
                              (icon: icon #f)
                              (content: content #f)
                              (content-spacing: content-spacing #f)
                              (sound: sound 'default)
                              (selection: selection #f)
                              (yes: yes #f)
                              (no: no #f)
                              (cancel: cancel #f)
                              (actions: actions '())
                              (execute: execute #f)
                              (default-button: default-button #f)
                              (process-keys?: process-keys? #t)
                              (process-modal?: process-modal? #t))
    (define (layout-dialog dialog title size)
      (let ((position (position-dialog size)))
        (set-title~ dialog title)
        (set-position~ dialog position)
        (set-size~ dialog size)))
    
    (define (icon-resource icon)
      (case icon
        ;((:information) {Image-Resource })
        ;((:exclamation) {Image-Resource })
        ;((:error) {Image-Resource })
        (else {Image-Resource "Information"})))
    
    (bind (default-title default-icon default-sound default-yes default-no default-cancel cancelable? close-result) (type-info type)
      (set! type~self type)
      (set! process-keys?~self process-keys?)
      (set! user-content~self content)
      (let ((dialog (get-player))
            (host (get-host))
            (title (or title default-title))
            (icon (if (eq? icon 'none) #f (or icon default-icon)))
            (sound (if (eq? sound 'default) default-sound sound))
            (yes (or yes default-yes))
            (no (or no default-no))
            (cancel (or cancel default-cancel)))
        (when (and cancel (not (member? 'cancel actions key: second)))
          (set! actions (cons (list (localize cancel) 'cancel) actions)))
        (when (and no (not (member? 'no actions key: second)))
          (set! actions (cons (list (localize no) 'no) actions)))
        (when (and yes (not (member? 'yes actions key: second)))
          (set! actions (cons (list (localize yes) 'yes) actions)))
        (if icon
            (set-resource~ (locate 'icon) (icon-resource icon))
          (set-visible?~ (locate 'icon) #f)
          (set-position~ (locate 'border) {Point 29 12}))
        (let* ((default-button (or default-button (second (first actions))))
               (dialog-size (layout-box (and text (localize text)) selection (and title (localize title)) size icon content content-spacing actions execute default-button)))
          (when process-modal?
            (layout-dialog dialog (and title (localize title)) dialog-size)
            (focus-box)
            (when sound
              (play-sound sound))
            (process-modal~ host))))))
  
  
  (method protected virtual (focus-box)
    )
  
  
  ;;;
  ;;;; Layout
  ;;;
  
  
  (definition Left-Padding
    2)
  
  (definition Top-Padding
    0)
  
  (definition Content-Spacing
    10)
  
  (definition Buttons-Spacing
    6)
  
  
  (method protected virtual (layout-box text selection title size icon content content-spacing actions execute default)
    (define (setup-buttons actions default)
      (let ((buttons-width 0)
            (size (new Dimension 80 24))
            (count 0)
            (fact (new List-Factory)))
        (define (setup-button action)
          (bind (title button-name @w (shortcut-key #f)) action
            (increase! count)
            (let* ((handler (if execute (new Event-Handler execute: execute properties: (list button: button-name)) (new Event-Handler target-name: :guest method-name: 'on-select properties: (list button: button-name))))
                   (button (new Push-Button name: button-name parent: self position: (new Point (* count 75) 72) size: size user-data: action action-handler: handler default?: (eq? button-name default))))
              (set-title~ button (localize title))
              (let* ((size (preferred-size~ button))
                     (width (max (get-width~ size) 80)))
                (set-size~ button (new Dimension width (get-height~ size)))
                (when (/= buttons-width 0)
                  (increase! buttons-width Buttons-Spacing))
                (increase! buttons-width width))
              (put~ fact button))))
        
        (for-each setup-button actions)
        (set! action-buttons (get-output~ fact))
        (set! default-button default)
        buttons-width))
    
    (define (position-buttons action-buttons h v)
      (let ((position-button
              (lambda (button)
                (when (get-visible?~ button)
                  (set-position~ button (new Point h v))
                  (set! h (+ h (get-width~ button) Buttons-Spacing))))))
        (for-each position-button action-buttons)))
    
    (let* (@wait (icon-view (locate 'icon))
           (text-view (locate 'text))
           (text-model (get-model~ text-view))
           (border-view (locate 'border))
           (size-border
            (lambda (width height)
              (set-size~ border-view (new Dimension (+ width 1 Left-Padding 1) (+ height 1 Top-Padding 1)))))
           (buttons-width (setup-buttons actions default)))
      (set-text~ text-model (localize text))
      (when selection
        (set-selection~ text-view selection))
      (let ((width (if size (get-width~ size) (min (max (compute-width~ text-model) (max buttons-width 208)) 500))))
        (size-border width 100)
        (let ((text-height (get-visible-height~ text-model))
              (height (if size (get-height~ size) (min (max (get-visible-height~ text-model) (if content 0 36)) 200))))
          (size-border width height)
          (let ((bottom (get-bottom~ border-view)))
            (when content
              (let ((spacing (or content-spacing Content-Spacing)))
                (set-parent~ content self)
                (set-position~ content (new Point (get-left~ border-view) (+ bottom spacing)))
                (set! width (max width (get-width~ content)))
                (increase! height (+ spacing (get-height~ content)))
                (set! bottom (+ (get-bottom~ content) 2))))
            (let ((dialog-width (+ width 68))
                  (dialog-height (+ height 58)))
              @wait (set-icon~ icon-view icon)
              (let ((overflow? (> text-height height)))
                (when overflow?
                  (set-border-type~ border-view 'solid)))
              (let ((h (+ (center buttons-width dialog-width) 1))
                    (v (+ bottom (if icon 10 15))))
                (position-buttons action-buttons h v))
              (new Dimension dialog-width dialog-height))))))))


;;;
;;;; Message-Text-View
;;;


(class Message-Text-View extends Formatted-Text-View
  
  
  (property client accessors generate)
    
  
  (method override (new-model)
    (new Formatted-Text-Model wrap?: #t))

  
  (method override (get-context-menu)
    (new-text-context-menu))
  
  
  (method override (return-press evt)
    (process-return~ client))
  
  
  (method override (escape-press evt)
    (process-escape~ client))
  
  
  (method override (key-press evt)
    (process-key~ client (get-key~ evt)))))
