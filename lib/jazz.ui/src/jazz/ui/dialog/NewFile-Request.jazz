;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; NewFile Request
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.ui.dialog.NewFile-Request jazz


(import (jazz.graphic)
        (jazz.handler)
        (jazz.io)
        (jazz.jml)
        (jazz.text)
        (jazz.ui)
        (jazz.ui.view))


(class undocumented NewFile-Request extends Pathname-Request
  
  
  (form
    (<install>
      (<!>                         name: buttonbar
        (<Separator>                               size: {Dimension 4 0})
        (<Layout-View>                             layout-type: fill layout-insets: {Rect 0 3 0 0} size: {Dimension 288 22}
          (<Border-View>                           border-type: solid border-color: {Color Entry-Border}
            (<Scroller-View>                       hscroll?: #f vscroll?: #f
              (<!>                 name: content   layout-type: fill
                (<Name-Text-View>  name: filename  accepts-returns?: #f show-unfocused-selection?: #f focus-selects-all?: #t return-press-handler: {Event-Handler :form on-return-press} escape-press-handler: {Event-Handler :form on-escape-press} content-change-handler: {Event-Handler :form on-content-change})))))
        (<!>                       name: ok        title: "Save"))))
  
  
  (method meta override (host-title)
    "Choose New File")
  
  
  (property initial-filename  initialize #f)
  (property default-extension initialize #f)
  
  
  (method override (finish rest)
    (nextmethod rest)
    (when initial-filename
      (let ((text (locate 'filename)))
        (let ((content
                (if (and default-extension (ends-with? initial-filename (concatenate "." default-extension)))
                    (subseq initial-filename 0 (- (cardinality initial-filename) (cardinality default-extension) 1))
                  initial-filename)))
          (set-string-content~ text content)
          (select-all~ text)))
      (update-buttons)))
  
  
  (method override (focus-default)
    (acquire-focus~ (locate 'filename)))
  
  
  ;;;
  ;;;; Tab
  ;;;
  
  
  (method override (get-tab-stops)
    (list
      (get-tree)
      (locate 'filename)))
  

  ;;;
  ;;;; Update
  ;;;
  
  
  (method override (update-content)
    (let ((directories (get-content~ directory nodes?: #t leaves?: #f))
          (files (get-content~ directory nodes?: #f leaves?: #t)))
      (let ((tree (get-tree)))
        (define (add pathname)
          (add-pathname tree pathname))
        
        (remove-every-row~ tree)
        (with-update-locked~ tree
          (lambda ()
            (for-each add directories)
            (for-each add files))))))
  
  
  (method override (update-buttons)
    (nextmethod)
    (let ((text (locate 'filename)))
      (set-enabled?~ (locate 'ok) (not (empty-string? (get-string-content~ text))))))
  

  ;;;
  ;;;; Modal
  ;;;
  
  
  (method override (validate-dialog)
    (let ((newfile (get-newfile)))
      (when (exists?~ newfile)
        (let ((code (message-box (format "{a} already exists. Do you want to replace it?" (parse~ newfile))
                                 type: 'confirmation)))
          (when (memq? code '(no cancel))
            (signal-cancel))))))
  
  
  (method override (get-modal-result)
    (set-current-directory directory)
    (get-newfile))
  
  
  (method (get-newfile)
    (let ((content (get-string-content~ (locate 'filename))))
      (let ((filename
              (if (and default-extension (not (search content ".")))
                  (concatenate content "." default-extension)
                content)))
        (anchorize (new-file~ directory filename)))))
  

  ;;;
  ;;;; Events
  ;;;
  
  
  (method override (selection-change)
    (let ((pathname (selected-pathname)))
      (when (file? pathname)
        (set-string-content~ (locate 'filename) (get-name~ pathname))
        (update-buttons))))
  
  
  (method (on-content-change evt)
    (update-buttons))
  
  
  (method override (default-action)
    (let ((pathname (selected-pathname)))
      (cond ((directory? pathname)
             (down pathname))
            ((ok-enabled?)
             (end-modal~ (get-host) (get-modal-result))))))))
