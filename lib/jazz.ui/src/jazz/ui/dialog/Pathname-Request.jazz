;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Base Class for Pathname Requests
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.ui.dialog.Pathname-Request jazz


(import (jazz.graphic)
        (jazz.handler)
        (jazz.history)
        (jazz.io)
        (jazz.layout)
        (jazz.markup)
        (jazz.resource)
        (jazz.outline)
        (jazz.tree)
        (jazz.ui))


(class undocumented Pathname-Request extends Layout-View implements History-Provider
  
  
  (form
    (<install>                                               size: {Dimension 500 300} layout-type: border
      (<Layout-View>                   name: toolbar         size: {Dimension 300 33} location: north layout-type: flow layout-insets: {Rect 0 6 0 0}
        (<Push-Tool>                   name: backward        size: {Dimension 22 22} tooltip?: #t tooltip-text: "Backward" resource: {Image-Resource "Backward"} portfolio: :images action-handler: {Event-Handler :form on-backward})
        (<Push-Tool>                   name: forward         size: {Dimension 22 22} tooltip?: #t tooltip-text: "Forward" resource: {Image-Resource "Forward"} portfolio: :images action-handler: {Event-Handler :form on-forward})
        (<Push-Tool>                   name: up              size: {Dimension 22 22} tooltip?: #t tooltip-text: "Up" resource: {Image-Resource "Upward"} portfolio: :images action-handler: {Event-Handler :form on-up})
        (<Separator>                                         size: {Dimension 2 0})
        (<Border-View>                                       size: {Dimension 200 22} border-insets: {Rect 2 3 2 1} border-color: {Color Medium}
          (<Border-View>                                     border-color: {Color Dark}
            (<Hierarchy-Combo>         name: hierarchy))))
      (<Border-View>                   name: content-border  location: center border-type: edge style: entry
        (<Scroller-View>                                     style: document hscroll?: #t vscroll?: #t
          (<content~>                                        layout-type: fill
            (<Content-Tree>            name: content         portfolio: :images filled-column: name double-click-handler: {Event-Handler :form on-double-click} return-press-handler: {Event-Handler :form on-return-press} escape-press-handler: {Event-Handler :form on-escape-press}
              (<Tree-Node-Column>      name: name            title: "Name" width: 235 toplevel-controls?: #f)))))
      (<Layout-View>                   name: buttonbar       size: {Dimension 300 36} location: south layout-type: flow layout-insets: {Rect 0 6 0 0}
        (<Push-Button>                 name: ok              title: "OK" location: tail size: {Dimension 80 24} enabled?: #f default?: #t action-handler: {Event-Handler :host on-ok})
        (<Separator>                                         size: {Dimension 3 0} location: tail)
        (<Push-Button>                 name: cancel          title: "Cancel" location: tail size: {Dimension 80 24} action-handler: {Event-Handler :host on-cancel})
        (<Separator>                                         size: {Dimension 5 0} location: tail))))
  
  
  (property directory  initialize #f accessors generate)
  (property filenames  initialize #f)
  (property extensions initialize #f)
  (property anchors    initialize #f)
  
  
  (slot history-manager initialize (new History-Manager self))
  
  
  (method override (finish self rest)
    (nextmethod self rest)
    (prepare-directory self)
    (update self))
  
  
  (method protected virtual (prepare-directory self)
    (when (not directory)
      (set! directory (current-directory-get))))
  
  
  (method override (focus-default self)
    (acquire-focus (get-tree self)))
  

  ;;;
  ;;;; Access
  ;;;
  
  
  (method package (get-tree self)
    (locate self 'content))
  
  
  (method package (get-hierarchy self)
    (locate self 'hierarchy))
  
  
  (method public (setup-directory self dir)
    (add-history history-manager (new History-Directory directory))
    (set-directory self dir)
    (update self))
  

  ;;;
  ;;;; Update
  ;;;
  
  
  (method package virtual (update self)
    (update-hierarchy self)
    (update-history self)
    (update-content self)
    (update-buttons self))
  
  
  (method (update-hierarchy self)
    (let ((combo (locate self 'hierarchy)))
      (set-choices combo (map (lambda (pathname)
                                 (list pathname (get-name pathname)))
                               (reverse (get-hierarchy directory))))
      (set-value combo directory)))
  
  
  (method (update-history self)
    (let ((backward (get-backward-history history-manager))
          (forward (get-forward-history history-manager)))
      (set-enabled? (locate self 'backward) (not-null? backward))
      (set-enabled? (locate self 'forward) (not-null? forward))))
  
  
  (method protected virtual (update-content self)
    )
  
  
  (method package virtual (update-buttons self)
    (let ((parent (get-parent (get-directory self))))
      (set-enabled? (locate self 'up) parent)))
  
  
  (method (add-pathname self tree pathname)
    (define (effective-extensions extensions)
      (map effective-extension extensions))
    
    (define (effective-extension extension)
      (if (or (not extension) (string? extension))
          extension
        (effective-extension (cdr extension))))
    
    (when (or (not (file? pathname))
              (and (or (not filenames) (member? (get-name pathname) filenames test: ci=?))
                   (or (not extensions) (member? (get-extension pathname) (effective-extensions extensions) test: extension=?))))
      (let ((title (get-name pathname))
            (image (if (directory? pathname) {Image-Resource "ClosedFolder"} {Image-Resource "Document"})))
        (add-row tree children: (list (new Tree-Node title: title image: image)) user-data: pathname))))
  

  ;;;
  ;;;; Modal
  ;;;
  
  
  (method override (get-modal-result self)
    (current-directory-set! (get-directory directory))
    (anchorize self (selected-pathname self)))
  

  ;;;
  ;;;; Navigation
  ;;;
  
  
  (method package (down self dir)
    (setup-directory self dir))

  
  ;;;
  ;;;; History
  ;;;
  
  
  (method override (current-history-item self)
    (new History-Directory directory))
  
  
  (method override (update-history-actions self)
    )
  

  ;;;
  ;;;; Events
  ;;;
  
  
  (method package (on-backward self evt)
    (set-directory self (get-directory (go-backward-history history-manager)))
    (update self))
  
  
  (method package (on-forward self evt)
    (set-directory self (get-directory (go-forward-history history-manager)))
    (update self))
  
  
  (method (on-up self evt)
    (setup-directory self (get-parent (get-directory self))))
  
  
  (method package virtual (hierarchy-change self dir)
    (setup-directory self dir))
  
  
  (method package virtual (selection-change self)
    (update-buttons self))
  
  
  (method protected virtual (default-action self)
    )
  
  
  (method (ok-enabled? self)
    (get-enabled? (locate self 'ok)))
  
  
  (method (on-double-click self evt)
    (default-action self))
  
  
  ;; Should really be generic in the Dialog class
  (method override (on-return-press self evt)
    (default-action self))
  
  
  ;; Should really be generic in the Dialog class
  (method override (on-escape-press self evt)
    (let ((dialog (get-host self)))
      (cancel-modal dialog)))
  

  ;;;
  ;;;; Utility
  ;;;
  
  
  (method (selected-pathname self)
    (get-single-selected-data (get-tree self)))
  
  
  (method package (anchorize self pathname)
    (anchorize pathname anchors: anchors)))


;;;
;;;; Hierarchy
;;;


(class Hierarchy-Combo extends Combo-Box
  
  
  (method override (content-change self origin)
    (hierarchy-change (get-guest (get-host self)) (get-value self))))


;;;
;;;; History
;;;


(class History-Directory extends History-Item
  
  
  (slot directory getter generate)
  
  
  (method override (initialize self directory)
    (nextmethod self)
    (set! self.directory directory))
  
  
  (method override (print self output readably)
    (print-unreadable self output
      (lambda (output)
        (format output "{s}" directory)))))


;;;
;;;; Content
;;;


(class Content-Tree extends Tree-View
  
  
  (method override (selection-change self old-selection force? user-origin)
    (selection-change (get-guest (get-host self))))))
