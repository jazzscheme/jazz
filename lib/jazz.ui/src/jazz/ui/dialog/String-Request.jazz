;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; String Request
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.ui.dialog.String-Request jazz


(import (jazz.application)
        (jazz.graphic)
        (jazz.handler)
        (jazz.markup)
        (jazz.preferences)
        (jazz.text)
        (jazz.ui)
        (jazz.view))


(class undocumented String-Request extends View


  (property accepts-empty? initialize #t accessors explicit)
  (property unicity-domain initialize #f accessors explicit)
  (property validator      initialize #f accessors explicit)
  

  (form
    (<install>                             size: {Dimension 322 120}
      (<Layout-View>         name: layout  position: {Point 10 30} size: {Dimension 294 37} layout-type: border layout-padding: 10
        (<Label-View>        name: prefix  title: "String:" location: west font: {Font Label} justification: (head -20) auto-size?: width)
        (<Layout-View>                     location: center layout-type: border
          (<Border-View>                   location: center border-type: edge
            (<Scroller-View>               hscroll?: #f vscroll?: #f
              (<!>           name: content layout-type: fill
                (<Text-View> name: text    accepts-returns?: #f left-padding: 2 top-padding: 2 content-change-handler: {Event-Handler :form on-content-change} return-press-handler: {Event-Handler :form on-return-press} escape-press-handler: {Event-Handler :host on-cancel}))))
          (<Label-View>      name: message size: {Dimension 100 16} location: south font: {Font Label} color: {Color Entry-Border} justification: center)))
      (<Push-Button>         name: ok      title: "OK" position: {Point 80 80} size: {Dimension 80 24} action-handler: {Event-Handler :host on-ok} default?: #t)
      (<Push-Button>         name: cancel  title: "Cancel" position: {Point 167 80} size: {Dimension 80 24} action-handler: {Event-Handler :host on-cancel})))

  
  ;;;
  ;;;; Access
  ;;;


  (method public (get-accepts-empty? self)
    accepts-empty?)


  (method public (set-accepts-empty? self value)
    (set! accepts-empty? value)
    (text-change self))


  (method public (get-unicity-domain self)
    unicity-domain)


  (method public (set-unicity-domain self value)
    (set! unicity-domain value)
    (text-change self))


  (method public (get-validator self)
    validator)


  (method public (set-validator self value)
    (set! validator value)
    (text-change self))
  
  
  (method public (get-prefix self)
    (get-title (locate self 'prefix)))
  
  
  (method public (set-prefix self value)
    (set-title (locate self 'prefix) value)
    (layout-view (locate self 'layout)))
  
  
  ;;;
  ;;;; Host
  ;;;
  
  
  (method meta override (host-title self)
    "Enter String")
  
  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method (on-content-change self evt)
    (text-change self))
  
  
  (method override (on-return-press self evt)
    (when (get-enabled? (locate self 'ok))
      (let ((dialog (get-host self)))
        (end-modal dialog (get-modal-result dialog)))))
  
  
  (method package (text-change self)
    (define (name-validated?)
      (or (not accepts-empty?) unicity-domain validator))
    
    (when (name-validated?)
      (continuation-capture
        (lambda (return)
          (let* ((text (locate self 'text))
                 (name (get-string-content text))
                 (proc
                   (lambda (enabled? message)
                     (set-enabled? (locate self 'ok) enabled?)
                     (set-title (locate self 'message) (if enabled? "" message))
                     (when (not enabled?)
                       (continuation-return return)))))
            (when (not accepts-empty?)
              (proc (not (empty-string? name)) "Name is mandatory"))
            (when unicity-domain
              (proc (not (member? name unicity-domain test: (sort-predicate 'equal))) "Name must be unique"))
            (when validator
              (let ((message (validator name)))
                (proc (not message) message))))))))
      

  ;;;
  ;;;; Modal
  ;;;

  
  (method override (get-modal-result self)
    (get-string-content (locate self 'text)))))
