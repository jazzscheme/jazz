;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Dialogs
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module jazz.ui.dialog jazz


(export (jazz.ui.dialog.platform.windows (cond windows)))

(import (jazz.application)
        (jazz.ui)
        (jazz.view))


;;;
;;;; Modal
;;;


(definition *current-modal*
  #f)


(definition public (current-modal)
  *current-modal*)

(definition public (set-current-modal dialog)
  (set! *current-modal* dialog))


(definition public (in-modal?)
  (current-modal))


(definition public (current-window)
  (let ((modal (current-modal)))
    (or (and modal (get-player modal))
        (current-toplevel))))


(definition public (end-modal-dialog result)
  (end-modal (current-modal) result))


(definition public (close-modal-dialog (action #f))
  (let ((dialog (current-modal)))
    (when dialog
      (close-modal dialog action))))


;;;
;;;; File
;;;


(definition public (choose-file (title: title #f)
                                (directory: directory #f)
                                (filenames: filenames #f)
                                (extensions: extensions #f)
                                (multiple-selection?: multiple-selection? #f)
                                (anchors: anchors #f)
                                (text?: text? #f))
  (get-modal (if text? Text-File-Request File-Request)
             host-title: title
             directory: directory
             filenames: filenames
             extensions: extensions
             multiple-selection?: multiple-selection?
             anchors: anchors))


;;;
;;;; New File
;;;


(definition public (choose-new-file (title: title #f)
                                    (directory: directory #f)
                                    (filenames: filenames #f)
                                    (extensions: extensions #f)
                                    (initial-filename: initial-filename #f)
                                    (default-extension: default-extension #f)
                                    (anchors: anchors #f))
  (get-modal NewFile-Request
             host-title: title
             directory: directory
             filenames: filenames
             extensions: extensions
             initial-filename: initial-filename
             default-extension: default-extension
             anchors: anchors))


;;;
;;;; Directory
;;;


(definition public (choose-directory (title: title #f)
                                     (selected-directory: selected-directory #f)
                                     (directory: directory #f)
                                     (anchors: anchors #f))
  (get-modal Directory-Request
             host-title: title
             selected-directory: selected-directory
             directory: directory
             anchors: anchors))


;;;
;;;; Font
;;;


(definition public (choose-font (initial-font: initial-font #f) (initial-color: initial-color #f))
  (unimplemented 'choose-font)))
