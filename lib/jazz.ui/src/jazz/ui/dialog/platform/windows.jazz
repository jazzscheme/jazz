;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Windows Dialogs
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.ui.dialog.platform.windows jazz


(import (jazz.application)
        (jazz.io)
        (jazz.platform)
        (jazz.system)
        (jazz.ui)
        (jazz.ui.view))



;;;
;;;; File
;;;


(definition public (choose-file (title: title #f)
                                (directory: directory #f)
                                (filenames: filenames #f)
                                (extensions: extensions #f)
                                (multiple-selection?: multiple-selection? #f)
                                (anchors: anchors #f)
                                (text?: text? #f))
  (if (use-generic-dialogs?)
      (get-modal (if text? Text-File-Request File-Request)
                 host-title: title
                 directory: directory
                 filenames: filenames
                 extensions: extensions
                 multiple-selection?: multiple-selection?
                 anchors: anchors)
    (let ((size (if multiple-selection? (+ MAX_PATH (* 64 50)) MAX_PATH)))
      (let ((r (OPENFILENAME-make))
            (buffer (WCHAR-array-make size)))
        (WCHAR-array-set! buffer 0 #\nul)
        (let ((fake-extensions-filter @fake (extensions-filter extensions) NULL)
              (fake-current-directory @fake (get-current-directory) NULL)
              (fake-dialog-proc @fake (get-dialog-proc) NULL))
          (OPENFILENAME-lStructSize-set! r     (OPENFILENAME-sizeof))
          (OPENFILENAME-hwndOwner-set! r       (let ((toplevel (get-toplevel))) (if toplevel (get-handle~ toplevel) NULL)))
          (OPENFILENAME-lpstrFilter-set! r     fake-extensions-filter)
          (OPENFILENAME-lpstrFile-set! r       buffer)
          (OPENFILENAME-nMaxFile-set! r        size)
          (OPENFILENAME-lpstrInitialDir-set! r (if directory (parse~ directory) fake-current-directory))
          (OPENFILENAME-lpstrTitle-set! r      NULL @buggy (or title NULL))
          (OPENFILENAME-Flags-set! r           (bitwise-ior OFN_EXPLORER (if multiple-selection? OFN_ALLOWMULTISELECT 0) OFN_HIDEREADONLY OFN_ENABLEHOOK OFN_FILEMUSTEXIST OFN_ENABLESIZING))
          (OPENFILENAME-lpstrDefExt-set! r     NULL)
          (OPENFILENAME-lCustData-set! r       0)
          (OPENFILENAME-lpfnHook-set! r        fake-dialog-proc))
        (let ((anchorize
                (lambda (pathname)
                  (anchorize~ pathname anchors: anchors))))
          (prog1 (if (GetOpenFileName r)
                     (begin
                       (if (not multiple-selection?)
                           (let ((filename (WCHAR-string buffer)))
                             (anchorize (new File (tokenise-windows filename))))
                         (let ((tokens (parse-choose-file-string buffer)))
                           (if (= (length tokens) 1)
                               (let ((filename (WCHAR-string buffer)))
                                 (list (anchorize (new File (tokenise-windows filename)))))
                             (bind (dir . filenames) tokens
                               (let ((dirlist (tokenise-windows dir)))
                                 (map (lambda (filename)
                                        (anchorize (new File (append dirlist (list filename)))))
                                      filenames)))))))
                   (let ((code (CommDlgExtendedError)))
                     (if (= code 0)
                         (signal-cancel)
                       (error "Dialog error: {t}" code))))
            (OPENFILENAME-free r)
            (WCHAR-array-free buffer)))))))


;;;
;;;; New File
;;;


(definition (map-WCHAR-array buffer size)
  (map (lambda (n)
         (let ((char (WCHAR-array-ref buffer n)))
           char))
       (naturals 0 size)))


(definition public (choose-new-file (title: title #f)
                                    (directory: directory #f)
                                    (filenames: filenames #f)
                                    (extensions: extensions #f)
                                    (initial-filename: initial-filename #f)
                                    (default-extension: default-extension #f)
                                    (anchors: anchors #f))
  (if (use-generic-dialogs?)
      (get-modal NewFile-Request
                 host-title: title
                 directory: directory
                 filenames: filenames
                 extensions: extensions
                 initial-filename: initial-filename
                 default-extension: default-extension
                 anchors: anchors)
    (when directory
      (create-directories~ directory))
    (let ((r (OPENFILENAME-make))               ; not freed!
          (buffer (WCHAR-array-make MAX_PATH))) ; not freed!
      (if (not initial-filename)
          (WCHAR-array-set! buffer 0 #\nul)
        (WCHAR-copy buffer initial-filename MAX_PATH))
      (let ((fake-extensions-filter @fake (extensions-filter extensions) NULL)
            (fake-current-directory @fake (get-current-directory) NULL)
            (fake-dialog-proc @fake (get-dialog-proc) NULL))
        (OPENFILENAME-lStructSize-set! r     (OPENFILENAME-sizeof))
        (OPENFILENAME-hwndOwner-set! r       (let ((toplevel (get-toplevel))) (if toplevel (get-handle~ toplevel) NULL)))
        (OPENFILENAME-lpstrFilter-set! r     fake-extensions-filter @w (extensions-filter extensions))
        (OPENFILENAME-lpstrFile-set! r       buffer)
        (OPENFILENAME-nMaxFile-set! r        MAX_PATH)
        (OPENFILENAME-lpstrInitialDir-set! r (if directory (parse~ directory) fake-current-directory @w (get-current-directory)))
        (OPENFILENAME-Flags-set! r           (bitwise-ior OFN_EXPLORER OFN_ENABLEHOOK @w OFN_FILEMUSTEXIST OFN_ENABLESIZING OFN_OVERWRITEPROMPT))
        (OPENFILENAME-lpstrDefExt-set! r     (or default-extension NULL))
        (OPENFILENAME-lCustData-set! r       0)
        (OPENFILENAME-lpfnHook-set! r        fake-dialog-proc @w (get-dialog-proc)))
      @debug-bug
      (debug 'before-GetSaveFileName (map-WCHAR-array buffer MAX_PATH))
      (prog1 (if (GetSaveFileName r)
                 (let ((filename (WCHAR-string buffer)))
                   @debug-bug
                   (debug 'after-GetSaveFileName (map-WCHAR-array buffer MAX_PATH))
                   (anchorize~ (new File (tokenise-windows filename)) anchors: anchors))
               (let ((code (CommDlgExtendedError)))
                 (if (= code 0)
                     (signal-cancel)
                   (error "Dialog error: {t}" code))))
        (OPENFILENAME-free r)
        (WCHAR-array-free buffer)))))


;;;
;;;; Directory
;;;


(definition public (choose-directory (title: title #f)
                                     (selected-directory: selected-directory #f)
                                     (directory: directory #f)
                                     (anchors: anchors #f))
  (if (use-generic-dialogs?)
      (get-modal Directory-Request
                 host-title: title
                 selected-directory: selected-directory
                 directory: directory
                 anchors: anchors)
    (let ((preserved #f @fake (get-current-directory)))
      (when directory
        @fake
        (set-current-directory directory))
      (let ((r (BROWSEINFO-make))                 ; not freed!
            (buffer (WCHAR-array-make MAX_PATH))) ; not freed!
        (WCHAR-array-set! buffer 0 #\nul)
        (BROWSEINFO-hwndOwner-set! r (let ((toplevel (get-toplevel))) (if toplevel (get-handle~ toplevel) NULL)))
        (BROWSEINFO-pidlRoot-set! r NULL)
        (BROWSEINFO-pszDisplayName-set! r buffer)
        (BROWSEINFO-lpszTitle-set! r (or title NULL))
        (BROWSEINFO-ulFlags-set! r 0)
        (BROWSEINFO-lpfn-set! r NULL @fake (get-browse-callback))
        (BROWSEINFO-lParam-set! r 0)
        (BROWSEINFO-iImage-set! r 0)
        (let ((items (SHBrowseForFolder r)))      ; not freed!
          (when directory
            @fake
            (set-current-directory preserved))
          (if (not items)
              (signal-cancel)
            (let ((directory (WCHAR-string buffer)))
              (anchorize~ (new Directory (tokenise-windows directory)) anchors: anchors))))))))


;;;
;;;; Print
;;;


(definition public (print-dialog . rest)
  (close-all-popups)
  (let ((rec (PRINTDLG-make)))
    (PRINTDLG-lStructSize-set! rec (PRINTDLG-sizeof))
    (PRINTDLG-hwndOwner-set! rec (get-handle~ (get-toplevel~ (get-application))))
    (PRINTDLG-Flags-set! rec (bitwise-ior PD_HIDEPRINTTOFILE PD_NOSELECTION PD_USEDEVMODECOPIESANDCOLLATE PD_RETURNDC))
    (PRINTDLG-nFromPage-set! rec 0)
    (PRINTDLG-nToPage-set! rec 0)
    (PRINTDLG-nMinPage-set! rec 1)
    (PRINTDLG-nMaxPage-set! rec 10)
    (prog1 (if (PrintDlg rec)
               (let* ((flags (PRINTDLG-Flags-ref rec))
                      (handle (PRINTDLG-hDevMode-ref rec))
                      (pointer (GlobalLock handle))
                      (devmode (VOID*->DEVMODE pointer)))
                 (values (PRINTDLG-hDC-ref rec) (mask-bit-set? flags PD_PRINTTOFILE) (mask-bit-set? flags PD_SELECTION) (mask-bit-set? flags PD_PAGENUMS) (PRINTDLG-nFromPage-ref rec) (PRINTDLG-nToPage-ref rec) (PRINTDLG-nCopies-ref rec) (DEVMODE-dmOrientation-ref devmode)))
             (let ((code (CommDlgExtendedError)))
               (if (= code 0)
                   (signal-cancel)
                 (error "Print dialog error: {t}" code))))
      (PRINTDLG-free rec))))


(definition public (page-setup-dialog (margins: margins '()) (orientation: orientation #f) (paper-size: paper-size #f) (paper-source: paper-source #f))
  (close-all-popups)
  (let ((rec (PAGESETUPDLG-make))
        (devmode (DEVMODE-make)))
    (DEVMODE-dmSize-set! devmode (DEVMODE-sizeof))
    (DEVMODE-dmOrientation-set! devmode orientation)
    (DEVMODE-dmPaperSize-set! devmode paper-size)
    (DEVMODE-dmDefaultSource-set! devmode paper-source)
    (DEVMODE-dmFields-set! devmode (bitwise-ior DM_ORIENTATION DM_PAPERSIZE DM_DEFAULTSOURCE))
    (PAGESETUPDLG-lStructSize-set! rec (PAGESETUPDLG-sizeof))
    (PAGESETUPDLG-hwndOwner-set! rec (get-handle~ (get-toplevel~ (get-application))))
    (PAGESETUPDLG-hDevMode-set! rec (DEVMODE->HANDLE devmode))
    (PAGESETUPDLG-Flags-set! rec (bitwise-ior PSD_INTHOUSANDTHSOFINCHES (if margins PSD_MARGINS 0) PSD_DISABLEPRINTER))
    (when margins
      (RECT-left-set! (PAGESETUPDLG-rtMargin-ref rec) (get-left~ margins))
      (RECT-top-set! (PAGESETUPDLG-rtMargin-ref rec) (get-top~ margins))
      (RECT-right-set! (PAGESETUPDLG-rtMargin-ref rec) (get-right~ margins))
      (RECT-bottom-set! (PAGESETUPDLG-rtMargin-ref rec) (get-bottom~ margins)))
    (prog1 (if (PageSetupDlg rec)
               (let* ((handle (PAGESETUPDLG-hDevMode-ref rec))
                      (pointer (GlobalLock handle))
                      (devmode (VOID*->DEVMODE pointer)))
                 (prog1
                     (values (POINT->dimension (PAGESETUPDLG-ptPaperSize-ref rec))
                             (RECT->rect (PAGESETUPDLG-rtMinMargin-ref rec))
                             (RECT->rect (PAGESETUPDLG-rtMargin-ref rec))
                             (DEVMODE-dmOrientation-ref devmode)
                             (DEVMODE-dmPaperSize-ref devmode)
                             (DEVMODE-dmDefaultSource-ref devmode))
                   (GlobalUnlock handle)))
             (let ((code (CommDlgExtendedError)))
               (if (= code 0)
                   (signal-cancel)
                 (error "Print dialog error: {t}" code))))
      (PAGESETUPDLG-free rec)
      (DEVMODE-free devmode))))


;;;
;;;; Font
;;;


(definition public (choose-font (initial-font: initial-font #f) (initial-color: initial-color #f))
  (unimplemented 'choose-font)
  @wait (
  (close-all-popups)
  (let ((r (new CHOOSEFONT))
        (logfont (if initial-font (get-logfont~ initial-font) (new LOGFONT))))
    (set r 'lStructSize (size-of CHOOSEFONT))
    (set r 'hwndOwner   (get-handle~ (get-toplevel)))
    (set r 'lpLogFont   logfont)
    (set r 'rgbColors   (get-ref~ initial-color))
    (set r 'Flags       (bitwise-ior CF_SCREENFONTS CF_EFFECTS CF_NOSCRIPTSEL (if initial-font CF_INITTOLOGFONTSTRUCT 0)))
    (if (ChooseFont r)
        (new Font logfont: logfont)
      (let ((code (CommDlgExtendedError)))
        (if (= code 0)
            (signal-cancel)
          (error "Dialog error: {t}" code)))))))


;;;
;;;; Utilities
;;;


(definition (parse-choose-file-string buffer)
  (let (iterate (offset 0)
                (start-of-string? #t))
    (let ((end-of-string? (eq? #\nul (WCHAR-array-ref buffer offset))))
      (if start-of-string?
          (if end-of-string?
              '()
            (cons (WCHAR-string (WCHAR-subarray buffer offset))
                  (loop (+ offset 1) end-of-string?)))
        (iterate (+ offset 1) end-of-string?)))))


;; Returns NULL used by file dialogs. Windows specific.
;; We will need a platform independent dialog.
(definition public (extensions-filter extensions)
  NULL
  @convert
  (if (not extensions)
      NULL
    (let ((dst (new List-Factory))
          (separator (make-string 1 #\nul)))
      (for-each (lambda (ext)
                  (put~ dst (car ext))
                  (put~ dst (cdr ext)))
                extensions)
      (put~ dst separator)
      (join (get-output~ dst) separator)))))
