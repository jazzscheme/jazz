;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Document Controller
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library protected jazz.ui.document.Document-Controller jazz


(import (jazz.io)
        (jazz.locale)
        (jazz.platform)
        (jazz.system)
        (jazz.ui)
        (jazz.ui.dialog)
        (jazz.ui.view)
        (jazz.utilities)
        (time))


(class Document-Controller extends Object
  

  (slot document       initialize {})
  (slot newname        initialize {})
  (slot moniker        initialize {})
  (slot tool?          initialize #f)
  (slot console?       initialize #f)
  (slot modified?      initialize #f)
  (slot read-only?     initialize #f)
  (slot moniker-time   initialize {})
  (slot moniker-digest initialize {})


  (method override (initialize document (tool?: tool? #f) (console?: console? #f))
    (nextmethod)
    (set! document~self document)
    (set! tool?~self tool?)
    (set! console?~self console?))
  
  
  ;;;
  ;;;; Host
  ;;;
  
  
  (method public (install-in-host host)
    (install-container)
    (position-host host)
    (update-status)
    (when (get-visible?~ host)
      (focus-document~ document)))
  
  
  (method protected virtual (install-container)
    (when (install-scroller?~ document)
      (install-scroller)))
  
  
  (method protected (install-scroller)
    (let* ((host (get-host~ document))
           (scroller (new Scroller-View parent: host vscroll?: #t hscroll?: #t)))
      (set-parent~ document (get-content~ scroller))
      (set-client~ scroller document)
      (set-content~ host scroller)))

  
  (method (position-host host)
    (let* ((parent-size (get-size~ (get-parent~ host)))
           (width (get-default-width~ (get-preferences 'documents)))
           (position (new Point (- (get-width~ parent-size) width 5) 5))
           (size (new Dimension width (- (get-height~ parent-size) 10))))
      (set-position~ host position)
      (set-size~ host size)))


  ;;;
  ;;;; Events
  ;;;
    
  
  (method public virtual (confirm-close)
    (when (get-modified?)
      (let ((code (message-box (format "Save changes to {a}?" (name-status))
                               type: 'confirmation)))
        (case code
          ((yes) (save-all))
          ((no))
          ((cancel) (throw-cancel))))))
  
  
  (method public (close-on-close-all?)
    (not (get-tool?)))


  ;;;
  ;;;; Input/Output
  ;;;
  
  
  (method public (get-newname)
    newname)
  
  
  (method public (set-newname value)
    (set! newname value))
  
  
  (method (effective-newname)
    (either newname (localize "New")))
  
  
  (method public (get-moniker)
    moniker)


  (method public (set-moniker mnk)
    (when #t @parameterized-fix-me (/= mnk moniker)
      (set! moniker mnk)
      (load-content~ document moniker)))
  
  
  (method public (change-moniker mnk)
      (when (is-not? mnk Moniker)
        (car 1))
    (set! moniker mnk))
  
  
  (method public virtual (save)
    (if (not moniker)
        (save-as)
      (when (write-allowed?)
        (save-content moniker))))
  
  
  (method public virtual (save-as)
    (let* ((extension (default-extension~ document))
           (extensions (extensions~ document))
           (moniker (choose-new-file initial-filename: (if (not moniker) (effective-newname) (get-name~ moniker)) default-extension: extension extensions: extensions)))
      (when (and (exists?~ moniker) (read-only?~ moniker))
        (set-read/write~ moniker))
      (save-to moniker)))
  
  
  (method public (save-to mnk)
    (save-content mnk)
    (set! moniker mnk)
    (update-status))
  
  
  (method public (save-all)
    (save))
  
  
  (method (save-content moniker)
    (save-content~ document moniker))
  
  
  (method public (revert-saved)
    (if (not moniker)
        (bell)
      (let ((code (message-box "Resert to saved and lose changes?"
                               type: 'confirmation)))
        (case code
          ((yes) (reload-moniker~ document moniker))
          ((no))
          ((cancel) (throw-cancel))))))
  
  
  (method public (compare-saved)
    (if (not moniker)
        (bell)
      (compare-moniker~ document moniker)))


  ;;;
  ;;;; Modified State
  ;;;


  (method public virtual (get-modified?)
    (if console?
        #f
      modified?))


  (method public virtual (set-modified? state)
    (when (neq? state modified?)
      (set! modified? state)
      (update-status)))


  ;;;
  ;;;; Document
  ;;;
  
  
  (method public virtual (dependent-document?)
    #f)


  ;;;
  ;;;; Caption
  ;;;
  
  
  (method public (set-caption title)
    (let ((host (get-host~ document)))
      (set-title~ host title)
      (when (get-visible?~ host)
        (if (and (is? host Frame-Host) (get-maximized?~ host))
            (when (front-view?~ host)
              (set-caption~ (get-toplevel) title))
          (invalidate-caption~ host)))))


  ;;;
  ;;;; Status
  ;;;


  (method public virtual (update-status)
    (update-state)
    (let ((host (get-host~ document)))
      (when (and (is? host Host-View) (eq? (get-guest~ host) document))
        (set-caption (document-status)))))
  
  
  (method public virtual (document-status)
    (format "{a}{a}{a}{a}"
            (name-status)
            (modified-status)
            (directory-status)
            (read/write-status)))
  
  
  (method public virtual (name-status)
    (if (not moniker)
        (effective-newname)
      (if tool?
          (get-base~ moniker)
        (get-name~ moniker))))
    
  
  (method (modified-status)
    (if (get-modified?)
        " *"
      ""))
  
  
  (method (directory-status)
    (if (or (not moniker) tool?)
        ""
      (let ((parent (get-parent~ moniker)))
        (if (not parent)
            ""
          (format " ~{{a}}" (present-location~ parent))))))

  
  (method (read/write-status)
    (if (or (not moniker) tool?)
        ""
      (if read-only?
          " [Read-Only]"
        " [Read/Write]")))


  ;;;
  ;;;; State
  ;;;
  
  
  (method public (get-read-only?)
    read-only?)
  
  
  (method public (get-moniker-time)
    moniker-time)
  
  
  (method public (update-state)
    (if (or (not moniker) (not (exists?~ moniker)))
        (set! read-only? #f)
      (set! read-only? (read-only?~ moniker))))
  
  
  (method public virtual (update-moniker-time moniker)
    (set! moniker-time (get-modification-time~ moniker))
    (set! moniker-digest (digest-file (parse~ moniker) 'SHA-1)))
  
  
  (method public (verify-reload (propose-reload?: propose-reload? #t) (cancel-edition?: cancel-edition? #f))
    (when (needs-reload?)
      (propose-reload propose-reload?: propose-reload? cancel-edition?: cancel-edition?)))
  
  
  (method public (needs-reload?)
    (and moniker moniker-time
         (exists?~ moniker)
         (/= (time->seconds (get-modification-time~ moniker)) (time->seconds moniker-time))
         (not (equal? (digest-file (parse~ moniker) 'SHA-1) moniker-digest))))

  
  (method public (propose-reload (propose-reload?: propose-reload? #t) (cancel-edition?: cancel-edition? #f))
    (let ((code (if (not propose-reload?)
                    'yes
                  (message-box (format "File {s} has been modified. Do you want to reload it?" (get-moniker))
                               title: "File Status"
                               type: 'question))))
      (case code
        ((yes)
         (reload-moniker~ document moniker)
         (when cancel-edition?
           (throw-cancel)))
        ((no)
         (update-moniker-time moniker)
         (update-status)))))
  

  ;;;
  ;;;; Read-Only
  ;;;
  
  
  (method public (write-allowed?)
    (not (get-read-only?)))
  
  
  (method (in-write-allowed? moniker)
    (let ((code (ensure-read/write moniker)))
      (case code
        ((read/write) (update-status) #t)
        ((read-only) #f)
        ((no-action) #t))))
  
  
  (method (out-write-allowed? moniker)
    (let ((code (message-box
                  (format "File {s} is read-only. Overwrite read-only status?" (get-name~ moniker))
                  title: "File Status"
                  type: 'confirmation)))
      (case code
        ((yes)
         (set-read/write~ moniker)
         (update-status)
         #t)
        ((no))
        ((cancel)
         (throw-cancel)))))

  
  ;;;
  ;;;; Tool
  ;;;


  (method public (get-tool?)
    tool?)


  (method public (set-tool? flag)
    (when (neq? flag tool?)
      (set! tool? flag)
      (tool-update~ document tool?)))


  (method public (get-console?)
    console?)


  (method public (set-console? flag)
    (when (neq? flag console?)
      (set! console? flag)
      (console-update~ document console?)))
  
  
  ;;;
  ;;;; Expr
  ;;;
  
  
  (method public virtual (select-next search-context . rest)
    )
  
  
  (method public virtual (select-previous search-context . rest)
    )


  (method public virtual (select-expr search-context)
    )


  (method public virtual (select-expr-backward search-context)
    )))
