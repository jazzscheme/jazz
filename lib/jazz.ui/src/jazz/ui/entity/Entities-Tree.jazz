;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Entities Tree
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library protected jazz.ui.entity.Entities-Tree jazz


(import (jazz.designer)
        (jazz.library)
        (jazz.locale)
        (jazz.platform)
        (jazz.system)
        (jazz.ui)
        (jazz.ui.clipboard)
        (jazz.ui.view)
        (jazz.utilities))


;;;
;;;; Doc
;;;

; See Entity for details


;;;
;;;; Class
;;;


(class undocumented Entities-Tree extends Tree-View
  
  
  (slot client     initialize {})
  (slot controller initialize {})

  
  ;;;
  ;;;; Actions
  ;;;
  

  (method (focus-actions)
    (cons (find-actions 'entities-tree)
          (nextmethod)))


  ;;;
  ;;;; Events
  ;;;
  
  
  (method (on-delete-selection evt)
    (delete-selection))
  
  
  (method (on-rename-selection evt)
    (rename-selection))
  
  
  (method (context-menu pos)
    (with-context-click pos
      (function ()
        (let ((menu (get-context-menu)))
          (when menu
            (track-popup-menu menu pos))))))
  
  
  (method (get-context-menu)
    (new Entity-Menu client: self))
  
  
  (method (on-properties evt)
    (show-properties))
    
  
  ;;;
  ;;;; Client
  ;;;
  
  
  (method public (get-client)
    client)
  
  
  (method public (set-client value)
    (set! client value))
    
  
  ;;;
  ;;;; Controller
  ;;;
  
  
  (method public (get-controller)
    controller)
  
  
  (method public (set-controller value)
    (set! controller value))
    
  
  ;;;
  ;;;; Focus
  ;;;
  
  
  (method (focus-update-actions)
    (set-action-enabled? {Action entities-tree rename} (can-rename?)))

  
  ;;;
  ;;;; Add
  ;;;
  
  
  (method public virtual (get-factories)
    (let ((entity (selected-entity)))
      (if (null? entity)
          (root-factories)
        (get-factories~ entity))))
  
  
  (method public virtual (root-factories)
    '())
  
  
  (method public virtual (add-entity factory (parent: parent {}) (presentation: presentation {}) (properties: properties '()) (select?: select? #t))
    (let* ((class (get-class~ factory))
           (selected (selected-entity))
           (parent (either parent (relocation-parent selected class) selected client))
           (extra-properties properties))
      (receive (presentation added-properties) (if presentation (values presentation '()) (add-entity-request factory parent))
        (let ((child (new class parent: parent))
              (name (presentation->name~ factory presentation))
              (controller (get-controller)))
          (when name
            (set-name~ child name))
          (with-update-locked
            (function ()
              (install-new-entity controller child parent presentation (append added-properties extra-properties))))
          (when select?
            (select-entity child))
          child))))
  
  
  (method protected virtual (add-entity-request factory parent)
    (values (entity-presentation-request factory (entity-children parent))
            (entity-properties-request factory)))
  
  
  (method protected virtual (entity-presentation-request factory brothers (initial-value: initial-value {}))
    (if (get-name-prohibited?~ factory)
        {}
      (let* ((name-mandatory? (get-name-mandatory?~ factory))
             (name-unicity? (get-name-unicity?~ factory))
             (unicity-domain (essay name-unicity? (map (function (entity) (get-presentation~ entity)) brothers)))
             (name-validator (entity-name-validator))
             (pres (localize (get-factory-presentation~ factory)))
             (presentation (request-string title: (new Locales english: (format "Enter {a} Name" pres) french: "Entrez le nom") initial-value: initial-value accepts-empty?: (not name-mandatory?) unicity-domain: unicity-domain validator: name-validator)))
        presentation)))
  
  
  (method protected virtual (entity-properties-request factory)
    {})
  
  
  (method protected virtual (entity-name-validator)
    {})
  
  
  (method protected virtual (install-new-entity controller child parent presentation properties)
    (add-child~ controller child parent)
    (set-presentation~ child controller presentation)
    (add-properties child properties))
  
  
  (method protected virtual (add-properties entity properties)
    (for-each-property (function (property value)
                         (set-property~ controller entity property value))
                       properties))


  ;;;
  ;;;; Rename
  ;;;
  
  
  (method (rename-selection)
    (let ((entity (selected-entity)))
      (when entity
        (rename-entity entity))))
  

  (method public (rename-entity entity)
    (let ((row (entity-row entity)))
      (when row
        (ensure-expanded row)
        (let* ((presentation (entity-presentation-request (get-factory~ entity) (entity-brothers entity) initial-value: (get-presentation~ entity)))
               (rank (row-rank row))
               (cell (new Cell rank 0)))
          (end-rename entity cell presentation)))))
  
  
  (method (end-rename entity cell presentation)
    (with-update-locked
      (function ()
        (set-title~ (get-cell-data cell) presentation)
        (set-name~ controller entity presentation)
        (let ((parent (get-parent~ entity)))
          (when (and parent (sort-entitys?~ parent))
            (reorder-entity entity)))))
    (acquire-focus)
    (select-entity entity))
    

  ;;;
  ;;;; Move
  ;;;
  
  
  (method (move-entities source target)
    (let* ((controller (get-controller))
           (entities (get-selected-data~ (get-view~ source)))
           (dst (get-row~ target))
           (part (get-part~ target))
           (destination (get-user-data~ dst)))
      (with-update-locked
        (function ()
          (if (eq? part 'row)
              (let ((parent (uniform entities key: (function (entity) (relocation-parent destination (class-of entity))))))
                (if (not parent)
                    (bell)
                  (move-entities~ controller entities parent)))
            (let* ((father (get-father~ dst))
                   (sons (get-sons~ father))
                   (rank (son-rank~ father dst))
                   (position (case part ((before) rank) ((after) (+ rank 1))))
                   (target (if (< position (cardinality sons)) (element sons position) {}))
                   (target-data (essay target (get-user-data~ target))))
              (for-each (function (entity)
                          (send-before~ controller entity (essay target (send-entity-before entity target-data))))
                        entities)))
          (select-entities entities)))))
  
  
  (method (move-entity-row row father (position: position {}))
    (unless (and (eq? (get-father~ row) father) (= 1 (cardinality (get-sons~ father))))
      (let* ((source (get-user-data~ row))
             (destination (either (get-user-data~ father) client))
             (sort? (sort-entities?~ destination)))
        (move-row row father
          position: (either position (function ()
                                       (if (not sort?)
                                           {}
                                         (find-entity-position source row father))))))))
  
  
  (method (reorder-entity entity)
    (let ((row (find-row entity)))
      (move-entity-row row (get-father~ row))))
  
  
  (method protected virtual (find-entity-position entity row father)
    (find-ordered-position (get-presentation~ entity) father))
  
  
  (method protected virtual (find-entity-insertion parent-row entity target)
    (when target
      (son-rank~ parent-row (find-row target))))
  
  
  (method protected virtual (send-entity-before entity before)
    before)
  

  ;;;
  ;;;; Drag
  ;;;
  
  
  (method (get-draggable?)
    #f
    @to-convert
    (let ((entity (selected-entity)))
      (and entity (can-move-entity?~ entity))))
        

  ;;;
  ;;;; Drop
  ;;;
  
  
  @to-convert
  (method (get-row-reorder-target drag-drop row quarter)
    (let* ((src-selection (get-selection~ (get-view~ (get-source~ drag-drop))))
           (src-range (contiguous-range src-selection))
           (src (map (function (n) (get-user-data~ (get-row n))) src-selection))
           (src-types (remove-duplicates (map class-of src)))
           (src-parent (uniform src key: (function (entity) (parent-relocation (get-parent~ entity)))))
           (dst (get-user-data~ row))
           (dst-father (get-father~ row))
           (dst-rank (row-rank row))
           (dst-parent (parent-relocation (get-parent~ dst)))
           (before? (eq? src-parent dst-parent))
           (before-last (row-rank (last (get-sons~ dst-father))))
           (before-rank (essay before? (if (memq? quarter '(1 2)) dst-rank (if (eq? dst-rank before-last) {} (+ dst-rank 1)))))
           (before (essay before-rank (if (< before-rank visible-count) (get-row before-rank) {})))
           (move? (and (not (memq? dst src)) (or (null? dst) (and (or (null? src-parent) (neq? src-parent dst)) (every? (function (src) (and (not (has-parent?~ dst src)) (addable-class?~ dst (class-of src)))) src)))))
           (before? (and before? (not (memq? before-rank src-selection)) (or (null? src-range) (/= (either before-rank (+ before-last 1)) (+ (cdr src-range) 1))) (can-send-before?~ src-parent src-types dst-father before)))
           (part (cond ((and move? (or (memq? quarter '(2 3)) (and (not before?) (memq? quarter '(1 4))))) 'row)
                       ((and before? (or (= quarter 1) (and (not move?) (= quarter 2)))) 'before)
                       ((and before? (or (= quarter 4) (and (not move?) (= quarter 3)))) 'after)
                       (else {}))))
      (when part
        (new Tree-Drop-Target view: self row: row part: part))))
  
  
  @to-convert
  (method (get-row-target drag-drop row)
    (let* ((source (get-source~ drag-drop))
           (view (get-view~ source)))
      {}))
  
  
  @to-convert
  (method (receive-drop sender pos drag-drop)
    (let* ((source (get-source~ drag-drop))
           (view (get-view~ source))
           (target (get-target~ drag-drop)))
      (when (eq? view self)
        (move-entities source target))))
  
  
  @to-convert
  (method (receive-model window target)
    (let* ((model (dispatch self (get-model~ window)))
           (parent (get-user-data~ (get-row~ target)))
           (child (new model visible?: #f)))
      (with-update-locked
        (function ()
          (add-view~ (get-controller) child parent position: {Point 0 0} centered?: #f)
          (rename-entity child)))))

  
  ;;;
  ;;;; Relocation
  ;;;
  
  
  (method protected virtual (parent-relocation parent)
    parent)
  
  
  (method protected virtual (relocation-parent destination class)
    destination)
  
  
  ;;;
  ;;;; Edition
  ;;;
  
  
  (method (can-undo?)
    #f)
  
  
  (method (can-redo?)
    #f)
  
  
  (method (can-cut?)
    (let ((entities (selected-entities)))
      (and entities
           (every? (function (entity)
                     (can-cut-entity?~ entity))
                   entities))))
  
  
  (method (can-copy?)
    (let ((entities (selected-entities)))
      (and entities
           (every? (function (entity)
                     (can-copy-entity?~ entity))
                   entities))))
  
  
  (method (can-paste?)
    (let* ((entities (selected-entities))
           (parents (map (function (entity)
                           (determine-paster~ entity))
                         entities)))
      (and (not (memq? {} parents))
           (= 1 (length (remove-duplicates parents))))))
  
  
  (method (can-delete?)
    (let ((entities (selected-entities)))
      (and entities
           (every? (function (entity)
                     (can-delete-entity?~ entity))
                   entities))))
  
  
  (method (can-rename?)
    (let ((entities (selected-entities)))
      (and (= (length entities) 1)
           (let ((entity (car entities)))
             (can-rename-entity?~ entity)))))
  
  
  (method (can-select-all?)
    #t)
  
  
  (method (cut-selection)
    (let ((entities (selected-entities)))
      (if (null? entities)
          (bell)
        (with-update-locked
          (function ()
            (with-deleted-selection (get-selection)
              (function ()
                (cut-entities~ controller entities))))))))
  
  
  (method (copy-selection)
    (let ((entities (selected-entities)))
      (if (null? entities)
          (bell)
        (with-cursor :wait
          (function ()
            (copy-entities~ controller entities)
            (update-focus-actions~ (get-application)))
          duration: .150))))
  
  
  (method (paste-clipboard)
    (let ((parent (either (selected-entity) client))
          (parcels (get-jazz-parcels)))
      (with-update-locked
        (function ()
          (with-cursor :wait
            (function ()
              (for-each (function (info)
                          (bind (model . parcels) info
                            (paste-parcels~ controller parcels (relocation-parent parent model))))
                        (partition parcels key: (function (parcel) (let ((master (car (get-content~ parcel)))) (get-model~ master)))))))))))
  
  
  (method (delete-selection)
    (let ((selection (get-selection)))
      (when (not-null? selection)
        (let ((entities (get-selected-data)))
          (when (confirm-close entities)
            (with-deleted-selection selection
              (function ()
                (delete-entities~ controller entities))))))))
  
  
  (method (confirm-close (entities '()))
    (confirm-action "Delete selected objects?"))
  
  
  (method (confirm-action text)
    (let ((code (message-box (localize text) type: 'confirmation)))
      (case code
        ((yes) #t)
        ((no) #f)
        ((cancel) (throw-cancel)))))
  
  
  ;;;
  ;;;; Selection
  ;;;
  
  
  (method (selection-change old-selection force? user-origin?)
    (let ((appl (get-application)))
      (update-focus-actions~ appl)))
  
  
  (method public (selected-entity)
    (let ((selection (get-single-selection)))
      (if (null? selection)
          client
        (get-user-data~ (get-row selection)))))
  
  
  (method public (selected-entities)
    (let ((selection (get-ordered-selection)))
      (if (null? selection)
          (list client)
        (map (function (row)
               (get-user-data~ (get-row row)))
             selection))))
  
  
  (method public (entity-row entity)
    (continuation-capture
      (function (return)
        (for-each-row
          (function (row rank)
            (when (eq? (get-user-data~ row) entity)
              (continuation-return return row))))
        {})))
  
  
  (method (entity-visible-row entity)
    (user-data-index entity))
  
  
  (method public (select-entity entity)
    (let ((row (entity-visible-row entity)))
      ;; if row is {}, then the row must be collapsed and I should expand it...
      (when row
        (set-single-selection row))))
  
  
  (method public (select-entities entities)
    (let ((rows (remove-nils (map entity-visible-row entities))))
      ;; if a row is {}, then the row must be collapsed and I should expand it...
      (set-selection rows)))
  
  
  (method protected virtual (find-row entity)
    (entity-row entity))
  
  
  ;;;
  ;;;; Update
  ;;;
  
  
  (method public (preserving-update)
    (update expand-state: (get-expand-state) :selected-entities (selected-entities)))


  (method public virtual (update . rest)
    )
  
  
  ;;;
  ;;;; Entity
  ;;;
  
  
  (method protected virtual abstract (entity-parent entity)
    )
  
  
  (method protected virtual abstract (entity-children entity)
    )
  
  
  (method (entity-brothers entity)
    (let ((parent (entity-parent entity)))
      (when parent
        (remove entity (entity-children parent)))))
  
  
  ;;;
  ;;;; Menu
  ;;;
  
  
  (method public (update-menu menu)
    (let* ((appl (get-application))
           (entities (selected-entities))
           (entity (car entities))
           (count (length entities))
           (can-cut? (get-action-enabled? {Action view cut}))
           (can-copy? (get-action-enabled? {Action view copy}))
           (can-paste? (get-action-enabled? {Action view paste}))
           (can-delete? (get-action-enabled? {Action view delete}))
           (can-rename? (get-action-enabled? {Action entities-tree rename}))
           (can-properties? (and entity (can-view-properties?~ entity) (get-categorized-properties~ entity)))
           (empty-add? #f))
      (let ((add-menu (locate~ menu 'add-menu))
            (add-item (locate~ menu 'add-item)))
        (if (and (= count 1) (add-entities~ add-menu self))
            (let ((children (get-children~ add-menu)))
              (when (= (length children) 1)
                (set-visible?~ add-item #f)
                (let ((unique (car children)))
                  (set-icon~ unique (get-icon~ add-item))
                  (set-title~ unique (format "{a} {a}" (localize "Add") (get-title~ unique)))
                  (set-parent~ unique menu)
                  (set-before~ unique 'end-add-group))))
          (set-visible?~ add-item #f)
          (set! empty-add? #t)))
      (when (not can-cut?)
        (set-visible?~ (locate~ menu 'cut) #f))
      (when (not can-copy?)
        (set-visible?~ (locate~ menu 'copy) #f))
      (when (not can-paste?)
        (set-visible?~ (locate~ menu 'paste) #f))
      (when (not can-delete?)
        (set-visible?~ (locate~ menu 'delete-selection) #f))
      (when (not can-rename?)
        (set-visible?~ (locate~ menu 'rename-selection) #f))
      (when (not can-properties?)
        (set-visible?~ (locate~ menu 'properties) #f))
      (let ((empty-edit? (and (not can-cut?) (not can-copy?) (not can-paste?)))
             (empty-entity? (and (not (get-visible?~ (locate~ menu 'delete-selection))) (not (get-visible?~ (locate~ menu 'rename-selection)))))
             (empty-properties? (not can-properties?)))
        (when (or empty-add? empty-edit?)
          (set-visible?~ (locate~ menu 'end-add-group) #f))
        (when (or empty-edit? empty-entity?)
          (set-visible?~ (locate~ menu 'end-edit-group) #f))
        (when (or (and empty-add? empty-entity?) empty-properties?)
          (set-visible?~ (locate~ menu 'before-properties) #f)))))
  
  
  ;;;
  ;;;; Properties
  ;;;
  
  
  (method public (show-properties)
    (select-palette Properties-Manager workspace: {} focus?: #t))))
