;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Dialog Host
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.ui.hosting.Dialog-Host jazz


(import (jazz.action)
        (jazz.application)
        (jazz.debuggee)
        (jazz.event)
        (jazz.graphic)
        (jazz.markup)
        (jazz.ui)
        (jazz.ui.dialog)
        (jazz.view)
        (jazz.window))


(class undocumented Dialog-Host extends Host-View

  
  (slot modal-done?   initialize #f)
  (slot modal-closed? initialize #f)
  (slot modal-result  initialize #f)
  (slot modal-signal  initialize #f)
  (slot modal-action  initialize #f)
  
  
  (form
    (<install> background: {Color Medium}))
  
  
  ;;;
  ;;;; Close
  ;;;
  
  
  (method package (destroy-modal self)
    (set! modal-closed? #t)
    (set! modal-result #f))


  ;;;
  ;;;; Actions
  ;;;
  

  (method override (class-actions self)
    (cons (find-actions 'dialog)
          (nextmethod self)))

  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method public (on-ok self evt)
    (validate-dialog self)
    (end-modal self (get-modal-result self)))
  

  (method public (on-cancel self evt)
    (cancel-modal self))

  
  ;;;
  ;;;; Modal
  ;;;
  
  
  (method override (validate-dialog self)
    (when guest
      (validate-dialog guest)))
  
  
  (method override (get-modal-result self)
    (get-modal-result guest))
  
  
  (method public (process-modal self)
    (close-popups self)
    (release-captured-view)
    (prog1 (let* ((application (current-application))
                  (toplevel (current-toplevel))
                  (overlapped (current-overlapped))
                  (preserved (current-modal))
                  (player (get-player self)))
             (enter-modal player overlapped)
             (unwind-protect
                 (begin
                   (set! modal-done? #f)
                   (set-current-modal self)
                   (when toplevel
                     (update-modal-actions application))
                   (show player)
                   (send-event
                     (lambda ()
                       (catch Cancel-Signal
                         (with-current-loop
                           (lambda ()
                             (run-modal player
                               (lambda ()
                                 modal-done?)))))))
                   (cond (modal-closed? (signal-cancel))
                         (modal-signal (signal modal-signal))
                         (else modal-result)))
               (exit-modal player overlapped)
               (set-current-modal preserved)
               (when toplevel
                 (update-modal-actions application))
               (close player)))
      (when modal-action
        (modal-action))))
  
  
  ;;;
  ;;;; Termination
  ;;;
  
  
  (method public (end-modal self result)
    (set! modal-done? #t)
    (set! modal-closed? #f)
    (set! modal-result result))
  
  
  (method public (cancel-modal self)
    (set! modal-done? #t)
    (set! modal-signal (new Cancel-Signal)))
  
  
  (method public (close-modal self action)
    (set! modal-done? #t)
    (set! modal-closed? #f)
    (set! modal-result #f)
    (set! modal-action action))))
