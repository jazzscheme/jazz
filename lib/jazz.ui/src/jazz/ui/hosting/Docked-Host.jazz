;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Docked Host
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2012
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.ui.hosting.Docked-Host jazz


(import (jazz.geometry)
        (jazz.graphic)
        (jazz.jml)
        (jazz.library)
        (jazz.locale)
        (jazz.system)
        (jazz.ui)
        (jazz.ui.skin)
        (jazz.ui.view)
        (jazz.ui.window))


(class undocumented Docked-Host extends Host-View
    
  
  (property fullscreen? initialize #f accessors generate)
  (property caption?    initialize #t accessors generate)
  (property zoomable?   initialize #t accessors generate)
  (property preferences initialize #f accessors generate)

  
  (form
    (<install>
      (<Layout-View> name: tools size: {Dimension 0 22} layout-type: flow)))
  
  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method override (size-change size)
    (nextmethod size)
    (invalidate-top)
    (invalidate-border))
  
  
  ;; This version which is not complete really closes the docked.
  ;; For this to work correctly code will have to be modified not
  ;; to rely on any palette being there.
  @code-will-have-to-be-modified-for-this-to-work
  (method (on-close evt)
    (let* ((parent (get-parent))
           (grand (get-parent~ parent)))
      (with-locked-update
        (lambda ()
          (set-visible? #f)
          (set-parent (get-toplevel))
          (cond ((is? parent Splitter-View)
                 (let ((other (first-view~ parent)))
                   (when other
                     (if (is? parent Workspace-Splitter)
                         (begin
                           (set-mode~ parent 'zoom)
                           (layout-view~ parent))
                       (set-location~ other (get-location~ parent))
                       (set-parent~ other grand)
                       (close~ parent)
                       (layout-view~ grand)))))
                ((is? parent Pad-View)
                 (close)
                 (let ((other (first-child~ parent)))
                   (set-location~ other 'selection)
                   (layout-view~ parent))))))))
  
  
  (method (on-close evt)
    (hide-splitted))
  
  
  (method public (hide-splitted)
    (let* ((parent (get-parent))
           (grand (get-parent~ parent)))
      (with-locked-update
        (lambda ()
          (set-visible? #f)
          (set-parent (get-toplevel))
          (cond ((is? parent Splitter-View)
                 (let ((other (first-view~ parent)))
                   (when other
                     (if #f @ZOO (is? parent Workspace-Splitter)
                         (begin
                           (set-mode~ parent 'zoom)
                           (layout-view~ parent))
                       (set-location~ other (get-location~ parent))
                       (set-parent~ other grand)
                       (close~ parent)
                       (layout-view~ grand)))))
                ((is? parent Pad-View)
                 (close)
                 (let ((other (first-child~ parent)))
                   (set-location~ other 'selection)
                   (layout-view~ parent))))))))

  
  ;;;
  ;;;; Activation
  ;;;
  
  
  (method override (mouse-activate?)
    #t)
  
  
  (method override (activate-focus)
    (nextmethod)
    (invalidate-caption))
  
  
  (method override (deactivate-focus)
    (nextmethod)
    (invalidate-caption))

  
  ;;;
  ;;;; Tools
  ;;;
  
  
  (method override (install-tools)
    (let* ((guest (get-guest))
           (view (get-tools-view~ guest)))
      (when view
        (let ((tools (get-children~ view))
              (dest (locate 'tools)))
          (for-each (lambda (tool)
                      (set-location~ tool 'tail)
                      (set-parent~ tool dest))
                    tools)
          (layout-view~ dest)
          (set-visible?~ view #f)
          (set-size~ dest (new Dimension (tools-width tools) 22))
          (layout-view)
          (layout-view~ guest)
          (invalidate-view)))))
  
  
  (method public (add-tool tool)
    (let ((tools (locate 'tools)))
      (set-parent~ tool tools)
      (layout-view~ tools)
      (set-size~ tools (new Dimension (tools-width (get-children~ tools)) 22))
      (layout-view)
      (invalidate-view)))
  
  
  (method public (remove-tool tool)
    (let ((tools (locate 'tools)))
      (set-parent~ tool #f)
      (layout-view~ tools)
      (set-size~ tools (new Dimension (tools-width (get-children~ tools)) 22))
      (layout-view)
      (invalidate-view)))
  
  
  (method package (refresh-tools)
    (let ((tools (locate 'tools)))
      (set-size~ tools (new Dimension (tools-width (get-children~ tools)) 22))
      (layout-view)
      (invalidate-view)))
  
  
  (definition (tools-width tools)
    (let ((total 0))
      (for-each (lambda (tool)
                  (when (get-visible?~ tool)
                    (increase! total (get-width~ (get-size~ tool)))))
                tools)
      total))
  

  ;;;
  ;;;; Layout
  ;;;
  
  
  (method override (layout)
    (define (layout-tools width)
      (let* ((tools (locate 'tools))
             (size (get-size~ tools)))
        (set-position~ tools (new Point (max (- width 3 (get-width~ size)) 0)
                                  2))))
    
    (when guest
      (let ((width (get-width))
            (height (get-height))
            (tools (locate 'tools)))
        (cond (fullscreen?
               (set-visible?~ tools #f)
               (set-position~ guest {Point 0 0})
               (set-size~ guest (new Dimension width height)))
              (caption?
               (layout-tools width)
               (set-visible?~ tools #t)
               (set-position~ guest {Point 1 25})
               (set-size~ guest (new Dimension (- width 2) (- height 26))))
              (else
               (set-visible?~ tools #f)
               (set-position~ guest {Point 1 1})
               (set-size~ guest (new Dimension (- width 2) (- height 2))))))))


  ;;;
  ;;;; Rects
  ;;;
  
  
  (method (caption-rect)
    (new Rect 1 1 (- (get-width) 2) 24))
  
  
  (method (top-rect)
    (new Rect 1 1 (- (get-width) 2) 25))


  ;;;
  ;;;; Update
  ;;;
  
  
  (method (invalidate-top)
    (invalidate-rect (top-rect)))
  
  
  (method override (invalidate-caption)
    (invalidate-rect (caption-rect)))


  ;;;
  ;;;; Drawing
  ;;;

  
  (method override (draw surface context)
    (let ((bounds (get-bounds))
          (focused? (eq? self (get-focused-host)))
          (all (collect-all))
          (look (get-look)))
      (let ((rect (new Rect (get-left~ bounds) (get-top~ bounds) (get-right~ bounds) 24)))
        (if (debug-paint?)
            (fill-rect~ surface rect (cycle-debug-color!))
          (fill-background~ surface rect (if (debug-paint?) (cycle-debug-color!) (get-inactive-background~ look)))))
      (frame-rect~ surface bounds (get-frame-color~ look))
      (let ((h 1)
            (first (first all))
            (compact? (determine-compact?)))
        (for-each (lambda (docked)
                    (let ((title (get-title~ docked))
                          (icon (or (get-icon~ docked) (host-icon~ (class-of (get-guest~ docked)))))
                          (first? (eq? docked first))
                          (selected? (eq? docked self)))
                      (let* ((left (- h .5))
                             (top .5)
                             (title? (or selected? (not compact?)))
                             (width (if title? (+ (get-text-width~ surface title) 37) 24))
                             (height 24)
                             (right (+ left width))
                             (bottom (+ top height)))
                        (when (and selected? focused?)
                          (fill-background~ surface (new Rect h 1 (+ h width) 24) (if (debug-paint?) (cycle-debug-color!) (get-active-background~ look)))
                          (set-color~ surface (if focused? {Color Dark} {Color red: 230 green: 225 blue: 204}))
                          (set-line-width~ surface 1)
                          (when (not first?)
                            (cairo-move-to~ surface left bottom)
                            (cairo-line-to~ surface left 1)
                            (stroke~ surface))
                          (cairo-move-to~ surface right 1)
                          (cairo-line-to~ surface right bottom)
                          (stroke~ surface))
                        (draw-image~ (get-images-portfolio~ (get-application)) surface context icon (+ h 3) 5)
                        (when title?
                          (set-font~ surface {Font Label})
                          (set-text-color~ surface (if selected? (get-focused-text-color~ look) (get-unfocused-text-color~ look)))
                          (draw-text~ surface (+ h 21) 7 title))
                        (increase! h width))))
                  all))
      (set-color~ surface {Color Dark})
      (set-line-width~ surface 1)
      (line~ surface 1 24 (- (get-width) 1) 24)))
  
  
  (method (determine-compact?)
    (define (full-width)
      (let ((all (collect-all))
            (h 0))
        (for-each (lambda (docked)
                    (let ((title (get-title~ docked)))
                      (let ((width (+ (text-width~ {Font Label} title) 37)))
                        (increase! h width))))
                  all)
        h))
    
    (let ((tools-width (get-width~ (locate 'tools))))
      (> (full-width) (- (get-width) tools-width))))
  
  
  ;;;
  ;;;; Skin
  ;;;
  
  
  (method override (get-look)
    (find-look 'docked))

  
  ;;;
  ;;;; Transparency
  ;;;
  
  
  (method override (get-opaque?)
    #t)
  

  ;;;
  ;;;; Mouse
  ;;;

  
  (method override (mouse-down evt)
    (let ((pos (get-position~ evt)))
      (for-all
        (lambda (docked rect)
          (when (in-rect? pos rect)
            (let ((parent (get-parent)))
              (when (is? parent Pad-View)
                (set-selection~ parent docked))
              (unless (focused-host? docked)
                (focus-host~ docked))))))))
  
  
  (method (toggle-docked pos)
    (let ((parent (get-parent)))
      (when (is? parent Pad-View)
        (let* ((title (localize (get-title)))
               (font {Font Label})
               (h (+ 28 (text-width~ font title))))
          (when (< (get-h~ pos) h)
            (with-locked-update
              (lambda ()
                (select-next~ parent))))))))
  
  
  (method override (double-click pos)
    (define (toggle-zoom splitter target)
      (with-locked-update
        (lambda ()
          (if (eq? (get-state~ splitter) 'split)
              (zoom~ splitter target)
            (unzoom~ splitter)))))
    
    (define (opposite-orientation orientation)
      (case orientation
        ((horz) 'vert)
        ((vert) 'horz)))
    
    (define (find-orientation view child orientation)
      (if (and (is? view Splitter-View) (eq? (get-orientation~ view) orientation))
          (cons view child)
        (let ((parent (get-parent~ view)))
          (and parent (find-orientation parent view orientation)))))
    
    (when zoomable?
      (let* ((parent (get-parent))
             (target (if (is? parent Pad-View) parent self)))
        (if (alt-down?)
            (toggle-full-screen~ (get-application) target)
          (let ((splitter (if (is? parent Pad-View) (get-parent~ parent) parent)))
            (when (is? splitter Splitter-View)
              (if (shift-down?)
                  (let ((found (find-orientation splitter target (opposite-orientation (get-orientation~ splitter)))))
                    (if found
                        (bind (splitter . target) found
                          (toggle-zoom splitter target))
                      (bell)))
                (toggle-zoom splitter target))))))))


  ;;;
  ;;;; Focus
  ;;;
  
  
  (method override (container-focusable?)
    (or (is-not? parent Pad-View)
        (eq? (get-selection~ parent) self)))
  
  
  (method override (ensure-container-focusable)
    (when (is? parent Pad-View)
      (set-selection~ parent self)))
  

  ;;;
  ;;;; Docked
  ;;;
  
  
  (method (for-all proc)
    (let ((all (collect-all)))
      (let ((h 0)
            (first (first all))
            (compact? (determine-compact?)))
        (for-each (lambda (docked)
                    (let ((title (get-title~ docked))
                          (first? (eq? docked first))
                          (title? (or (eq? docked self) (not compact?))))
                      (let ((left (if first? (+ h 1) h))
                            (top 1)
                            (width (if title? (+ (text-width~ {Font Label} title) 37) 24))
                            (height 23))
                        (proc docked (new Rect left top (+ h width) (+ top height)))
                        (increase! h width))))
                  all))))
  
  
  (method (collect-all)
    (let ((pad (get-parent)))
      (if (is? pad Pad-View)
          (get-children~ pad)
        (list self))))
  
  
  (method (collect-brothers)
    (let ((pad (get-parent)))
      (when (is? pad Pad-View)
        (collect-if (lambda (host)
                      (neq? host self))
                    (get-children~ pad)))))
  

  ;;;
  ;;;; Menu
  ;;;
  
  
  (method (select-menu)
    (let ((brothers (collect-brothers)))
      (when brothers
        (let ((menu (new Context-Menu)))
          (for-each (lambda (docked)
                      (let* ((guest (get-guest~ docked))
                             (title (get-title~ docked))
                             (icon (host-icon~ (class-of guest))))
                        (new Label-Item parent: menu title: title icon: icon action-handler: (new Event-Handler target: self method-name: 'on-select properties: (list host: docked)))))
                    brothers)
          (layout-menu~ menu)
          (track-popup-menu menu {Point 2 25})))))
  
  
  (method (on-select evt)
    (let ((pad (get-parent))
          (host (get-property~ evt host:)))
      (with-locked-update
        (lambda ()
          (set-selection~ pad host)
          (focus-host~ host)))))))
