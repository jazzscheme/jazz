;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Host View
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.ui.hosting.Host-View jazz


(import (jazz.action)
        (jazz.application)
        (jazz.ui))


(class undocumented Host-View extends Focus-Container
    
  
  (property content initialize #f accessors explicit)
  (property guest   initialize #f accessors explicit)
  (property icon    initialize #f accessors generate)
  
  
  (method override (destroy-component self)
    (define (close-guest)
      (when guest
        (let ((view guest))
          (set-guest self #f)
          (close view))))
    
    (close-guest)
    (nextmethod self))
  
  
  ;;;
  ;;;; Access
  ;;;
  
  
  (method public (get-content self)
    content)
  
  
  (method public (set-content self view)
    (when (neq? view content)
      (set! content view)
      (layout-view self)))
  
  
  (method override (get-guest self)
    guest)
  
  
  (method public (set-guest self view)
    (when (neq? view guest)
      (when guest
        (uninstall-guest self))
      (when (not content)
        (set! content view))
      (set! guest view)
      (when guest
        (install-guest self))))
  

  ;;;
  ;;;; Layout
  ;;;
  
  
  (method override (layout self)
    (when content
      (set-position content (new Point 0 0))
      (set-size content (get-size self))))


  ;;;
  ;;;; Update
  ;;;
  
  
  (method public virtual (invalidate-caption self)
    )

  
  ;;;
  ;;;; View
  ;;;


  (method override (get-host self)
    self)
  
  
  ;;;
  ;;;; Guest
  ;;;
  
  
  (method (install-guest self)
    (set-parent guest self)
    (set-position guest {Point 0 0})
    (set-size guest (get-size self))
    (set-visible? guest #t)
    (install-in-host guest self)
    (install-tools self))
  
  
  (method (uninstall-guest self)
    (uninstall-from-host guest self)
    (close guest))
  
  
  ;;;
  ;;;; Focus
  ;;;
  
  
  (method override (focus-host self)
    (let ((focused (get-focused self)))
      (cond (focused
             (acquire-focus focused))
            (guest
             (focus-default guest))
            (else
             (acquire-focus self)))))
  
  
  (method public virtual (activate-focus self)
    (when guest
      (set-guest-actions (current-application) (view-guest-actions guest))
      (host-activate guest)))
    
  
  (method public virtual (deactivate-focus self)
    (set-guest-actions (current-application) '())
    (when guest
      (host-deactivate guest)))

  
  ;;;
  ;;;; Tools
  ;;;
  
  
  (method protected virtual (install-tools self)
    (layout-view self))))
