;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Internal Frame Host
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.ui.hosting.Internal-Frame-Host jazz


(import (jazz.application)
        (jazz.event)
        (jazz.geometry)
        (jazz.graphic)
        (jazz.handler)
        (jazz.locale)
        (jazz.markup)
        (jazz.preferences)
        (jazz.ui)
        (jazz.ui.resizer)
        (jazz.view)
        (jazz.window)
        (jazz.workspace))


(class undocumented Internal-Frame-Host extends Frame-Host
  
  
  (slot dragging?          initialize #f)
  (slot current-part)
  (slot start-mouse)
  (slot start-position)
  (slot start-size)
  (slot preserved-position initialize #f  getter generate)
  (slot preserved-size     initialize #f  getter generate)
  (slot workspace          initialize #f  accessors generate)
  (slot workspace-stages   initialize '() accessors generate)
  (slot maximized?         initialize #f)

  
  (form
    (<install>                       background: {Color Medium}
      (<Frame-Button> name: maximize type: maximize tooltip?: #t tooltip-text: {Locales english: "Maximize" french: "Agrandir"} action-handler: {Event-Handler :form on-maximize})
      (<Frame-Button> name: close    type: close tooltip?: #t tooltip-text: {Locales english: "Close" french: "Fermer"} action-handler: {Event-Handler :form on-close})))

  
  ;;;
  ;;;; Access
  ;;;
  
  
  (method package (get-stage self)
    parent)
  
  
  (method public (get-maximized? self)
    maximized?)
  
  
  (method public (set-maximized? self value)
    (if value
        (maximize self)
      (restore self)))
  
  
  ;;;
  ;;;; Title
  ;;;
  
  
  (method override (adjust-title self)
    (invalidate-caption self))

  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method override (size-change self size)
    (nextmethod self size)
    (invalidate-caption self)
    (invalidate-border self insets: {Rect 4 4 4 4}))
  
  
  (method protected virtual (on-maximize self evt)
    (maximize (get-stage self)))
  
  
  (method package virtual (on-close self evt)
    (close-host self))
  
  
  ;;;
  ;;;; Activate
  ;;;
  
  
  (method override (activate-frame self)
    (nextmethod self)
    (set-caption (current-toplevel) (and (get-maximized? (get-stage self)) (get-title self))))

  
  (method override (deactivate-frame self)
    (nextmethod self)
    (let ((stage (get-stage self)))
      (when (and (null? (get-views stage)) (get-player stage))
        (stage-empty-activate stage)
        (acquire-focus stage))))
    

  ;;;
  ;;;; Close
  ;;;
  
  
  (method override (close-host self (confirm?: confirm? #t))
    (if confirm?
        (close-with-confirm self)
      (close self)))
    

  ;;;
  ;;;; Destroy
  ;;;
  
  
  (method override (destroy self)
    (define (determine-new-active)
      (let ((frame (second-frame)))
        (and (and frame (eq? (get-player frame) player))
             frame)))
    
    (let ((was-active? (eq? self (active-frame))))
      (let ((new-active (and was-active? (determine-new-active))))
        (nextmethod self)
        (when was-active?
          (deactivate-frame self)
          (when new-active
            (activate-frame new-active)
            (focus-host new-active))))))


  ;;;
  ;;;; Management
  ;;;
  
  
  (method override (set-title self value)
    (nextmethod self value)
    (when (and (eq? self (active-frame)) (get-maximized? (get-stage self)))
      (set-caption (current-toplevel) value)))


  ;;;
  ;;;; Visibility
  ;;;
  
  
  (method override (show self)
    (nextmethod self)
    (maximize/restore self))
  
  
  (method package (maximize/restore self)
    (let ((stage (get-stage self)))
      (cond ((get-maximized? stage)
             (maximize self)
             (maximize-bounds self (get-size stage))
             (maximize guest))
            (else
             (restore self)
             (restore guest)))))


  ;;;
  ;;;; Workspace
  ;;;
  

  (method public (workspace-select self)
    (when guest
      (let ((pref (current-workspace-preferences)))
        (when pref
          (let ((current (get-name pref))
                (workspaces (effective-host-workspaces guest)))
            (when (and (not-null? workspaces) (not (memq? current workspaces)))
              (let ((pref (find-workspace (car workspaces))))
                (when pref
                  (apply-preferences pref restore-focus?: #f)))))))))

  
  (method public (ensure-displayed self)
    (let ((outer (get-size parent))
          (rect (get-rect self)))
      (receive (new-position new-size) (fit-within outer rect padding: 8)
        (set-size self new-size)
        (set-position self new-position))))
  
  
  (method public (remember-workspace-stage self)
    (set! workspace-stages (cons (get-stage self) (difference workspace-stages (get-active-stages)))))
  
  
  ;;;
  ;;;; Maximized
  ;;;
  
  
  (method override (get-effective-position self)
    (if (get-maximized? self)
        (get-preserved-position self)
      (get-position self)))
  
  
  (method override (get-effective-size self)
    (if (get-maximized? self)
        (get-preserved-size self)
      (get-size self)))
  
  
  ;;;
  ;;;; Rects
  ;;;
  
  
  (method (caption-rect self)
    (let ((border (if maximized? 0 4)))
      (new Rect border border (- (get-width self) border) (+ border 20))))
  
  
  (method protected (title-rect self)
    (let ((border (if maximized? 0 4)))
      (new Rect border border (- (get-width self) border 40) (+ border 20))))
  
  
  (method protected (maximize-rect self top right)
    (new Rect (- right 37) (+ top 3) (- right 21) (+ top 17)))
  
  
  (method protected (close-rect self top right)
    (new Rect (- right 19) (+ top 3) (- right  3) (+ top 17)))

  
  ;;;
  ;;;; Activation
  ;;;
  
  
  (method override (mouse-activate? self)
    #t)
  
  
  (method override (mouse-activate self)
    (bring-to-front self)
    (nextmethod self))
  
  
  (method override (activate-focus self)
    (nextmethod self)
    (invalidate-caption self)
    (let ((stage (get-stage self)))
      (when (in-player? stage)
        (set-current-stage stage))))
  
  
  (method override (deactivate-focus self)
    (nextmethod self)
    (invalidate-caption self))
  
  
  ;;;
  ;;;; Maximize
  ;;;
  
  
  (method override (maximize self)
    (unless maximized?
      (set! preserved-position (get-position self))
      (set! preserved-size (get-size self)))
    (set! maximized? #t)
    (update-buttons self))
  
  
  (method public (maximize-bounds self size)
    (set-position self {Point 0 0})
    (set-size self size)
    (layout-view self)
    (invalidate-view self))
  
  
  (method override (restore self)
    ;; test necessary because of temporary-fix
    (when preserved-position
      (set-position self preserved-position))
    ;; test necessary because of temporary-fix
    (when preserved-size
      (set-size self preserved-size))
    (set! maximized? #f)
    (update-buttons self)
    (layout-view self)
    (invalidate-view self))
    

  ;;;
  ;;;; Layout
  ;;;
  
  
  (method override (layout self)
    (let* ((caption? (caption-visible? self))
           (border (if caption? 4 0))
           (caption-rect (caption-rect self))
           (caption-height (rect-height caption-rect)))
      (layout-buttons self)
      (when content
        (set-position content (new Point border (if caption? (+ border caption-height) 0)))
        (set-size content (new Dimension (- (get-width self) border border) (- (get-height self) border border (if caption? caption-height 0)))))))
  
  
  (method protected virtual (layout-buttons self)
    (let* ((border (buttons-border self))
           (top border)
           (bounds (get-bounds self))
           (right (- (get-right bounds) border)))
      (set-rect (locate self 'maximize) (maximize-rect self top right))
      (set-rect (locate self 'close) (close-rect self top right))))
  
  
  (method protected virtual (buttons-border self)
    (if (caption-visible? self) 4 0))


  ;;;
  ;;;; Update
  ;;;
  
  
  (method override (invalidate-caption self)
    (unless maximized?
      (invalidate-rect self (caption-rect self))))
  
  
  (method package virtual (update-buttons self)
    (let ((visible? (caption-visible? self)))
      (set-visible? (locate self 'maximize) visible?)
      (set-visible? (locate self 'close) visible?)))


  ;;;
  ;;;; Caption
  ;;;
  
  
  (method (caption-icon self)
    (guest-icon guest))
  
  
  (method (caption-title self)
    (get-title self))
  
  
  (method (caption-font self)
    {Font Caption})
  
  
  (method (caption-focused? self)
    (eq? self (get-focused-host)))
  
  
  (method (caption-visible? self)
    (not maximized?))


  ;;;
  ;;;; Focus
  ;;;
  
  
  (method override (container-focusable? self)
    (get-visible? self))
  
  
  (method override (ensure-container-focusable self)
    (workspace-select self)
    (set-visible? self #t)
    (bring-to-front self)
    (remember-workspace-stage self))


  ;;;
  ;;;; Cursor
  ;;;


  (method override (cursor-update self evt)
    (if (not (resizeable? self))
        (set-cursor :arrow)
      (let ((part (and (not maximized?) (find-resize-part (get-position evt) (get-size self) full?: #t))))
        (if (not part)
            (set-cursor :arrow)
          (set-cursor (get-resize-cursor part))))))
  

  ;;;
  ;;;; Mouse
  ;;;
  
  
  (method protected virtual (moveable? self)
    #t)
  
  
  (method protected virtual (resizeable? self)
    #t)

  
  (method override (mouse-down self evt)
    (let ((pos (get-position evt)))
      (let ((in-caption? (in-rect? pos (caption-rect self))))
        (if (and in-caption? (get-control? evt))
            (send-to-back self)
          (when (moveable? self)
            (let ((part (find-resize-part pos (get-size self) full?: #t)))
              (when (or part in-caption?)
                (set! dragging? #t)
                (set! current-part (and (resizeable? self) part))
                (set! start-mouse (to-desktop self pos))
                (set! start-position (get-position self))
                (set! start-size (get-size self))
                (acquire-capture self))))))))
  
  
  (method override (drag-move self evt)
    (when dragging?
      (let* ((minimal (host-minimal-size guest))
             (workspace-size (get-size (car workspace-stages)))
             (desktop-pos (to-desktop self (get-position evt)))
             (delta (point- desktop-pos start-mouse))
             (dh (get-h delta))
             (dv (get-v delta)))
        (if (not current-part)
            (let ((new-position (nu+ start-position delta))
                  (caption-width (- (get-right (caption-rect self)) (get-left (caption-rect self))))
                  (caption-height (- (get-bottom (caption-rect self)) (get-top (caption-rect self))))
                  (minimum-border 50))
              (cond ((< (+ (get-h new-position) caption-width) minimum-border)
                     (set! new-position (new Point (- minimum-border caption-width) (get-v new-position))))
                    ((< (- (get-width workspace-size) (get-h new-position)) minimum-border)
                     (set! new-position (new Point (- (get-width workspace-size) minimum-border) (get-v new-position)))))
              (cond ((< (get-v new-position) 0)
                     (set! new-position (new Point (get-h new-position) 0)))
                    ((< (- (get-height workspace-size) (get-v new-position)) caption-height)
                     (set! new-position (new Point (get-h new-position) (- (get-height workspace-size) caption-height)))))
              (let ((delta-position (nu- new-position (get-position self)))
                    (rect (get-rect self)))
                (set-position-noupdate self new-position)
                (scroll-view (get-parent self) (point->distance delta-position) rect)
                (update-window player)))
          (resize-client dh dv current-part
            (lambda (dh dv dwidth dheight)
              (let ((max-position (nu+ start-position (nu- start-size minimal)))
                    (new-position (nu+ start-position (new Dimension dh dv)))
                    (new-size (nu+ start-size (new Dimension dwidth dheight))))
                (let ((effective-position (new Point
                                            (min (get-h new-position) (get-h max-position))
                                            (min (get-v new-position) (get-v max-position))))
                      (effective-size (new Dimension
                                        (max (get-width new-size) (get-width minimal))
                                        (max (get-height new-size) (get-height minimal)))))
                  (set-position self effective-position)
                  (set-size self effective-size)
                  (update-window player)))))))))
  
  
  (method override (drag-up self evt . rest)
    (when dragging?
      (release-capture self)
      (set! dragging? #f)))
  
  
  (method override (double-click self evt)
    (let ((pos (get-position evt)))
      (cond ((in-close-rect? self pos)
             (close-host self))
            ((in-rect? pos (caption-rect self))
             (toggle-maximized self)))))
  
  
  (cond-expand
    (windows
      (method (in-close-rect? self pos)
        (in-rect? pos {Rect 6 6 22 22})))
    (else
      (method (in-close-rect? self pos)
        #f)))
  
  
  (method package virtual (toggle-maximized self)
    (toggle-maximized (get-stage self)))


  ;;;
  ;;;; Drawing
  ;;;

  
  (definition Active-Colors
    (list {Color red: 0 green: 84 blue: 227} {Color red: 28 green: 113 blue: 255}))
  
  (definition Inactive-Colors
    (list {Color red: 122 green: 150 blue: 223} {Color red: 157 green: 185 blue: 235}))

  
  (method override (draw self surface context)
    (when (not maximized?)
      (let ((bounds (get-bounds self)))
        (draw-edge surface bounds inner: 'raised outer: 'raised edges: 'rectangle)))
    (when (caption-visible? self)
      (draw-caption self surface context)))

  
  (method package (draw-caption self surface context)
    (let ((rect (caption-rect self)))
      (let* ((icon (caption-icon self))
             (title (localize (caption-title self)))
             (font (caption-font self))
             (focused? (caption-focused? self))
             (colors (if focused? Active-Colors Inactive-Colors))
             (start (first colors))
             (end (second colors))
             (width (get-width self))
             (height (get-height self)))
        (set-color surface {Color Light})
        (set-line-width surface 1)
        (line surface 1 1 (- width 3) 1)
        (line surface 1 1 1 24)
        (if (debug-paint?)
            (fill-rect surface rect (cycle-debug-color!))
          (gradient-fill-rect surface rect (list (list 0 end) (list 1 start)) direction: 'vertical))
        (when icon
          (let ((offset (icon-offset self)))
            (draw-image (get-images-portfolio (get-application)) surface context icon (+ (get-left rect) (get-h offset)) (+ (get-top rect) (get-v offset)))))
        (set-font surface font)
        (let ((offset (title-offset self)))
          (with-clip surface (title-rect self)
            (lambda ()
              (draw-text surface (+ (get-left rect) (get-h offset)) (+ (get-top rect) (get-v offset)) title {Color White})))))))
  
  
  (method protected virtual (icon-offset self)
    {Point 2 2})
  
  
  (method protected virtual (title-offset self)
    {Point 22 3})))
