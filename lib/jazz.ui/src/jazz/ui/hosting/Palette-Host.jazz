;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Palette Host
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.ui.hosting.Palette-Host jazz


(import (jazz.graphic)
        (jazz.jml)
        (jazz.ui))


(class undocumented Palette-Host extends Host-View
  
  
  (form
    (<install> background: {Color Medium}))

  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method (on-close evt)
    (hide~ player))
  
  
  ;;;
  ;;;; Docking
  ;;;
  
  
  @experimental
  (method (dock-palette)
    (pick-figure click: dock-to
                 include: (list (get-toplevel))
                 highlight: dock-feedback))
  
  
  @experimental
  (method (dock-feedback picker figure pos)
    (set-feedback-rect self (figure-rect self figure)))
  
  
  @experimental
  (method meta (figure-rect picker figure)
    (when (is? figure View)
      (let ((player (get-player~ figure))
            (display (get-display~ figure))
            (root (get-root~ figure)))
        (acquire~ (get-parent~ picker) player (acquire~ root display (get-bounds~ display))))))
  

  @experimental
  (method (dock-to to-view pos)
    (let ((to-player (get-player~ to-view)))
      (if (is-not? to-player Host-View)
          (bell)
        (let ((to-guest (get-guest~ to-view))
              (to-pad (find-ascendant~ to-player Pad-Window)))
          (if (null? to-pad)
              (bell)
            (let* ((player (get-player))
                   (guest (get-guest))
                   (title (get-title~ player)))
              (set-parent~ guest #f)
              (unanchor-guest~ player)
              (close~ player)
              (let ((new-host (new Docked-Host parent: to-pad)))
                (set-title~ new-host title)
                (set-guest~ new-host guest)
                (set-selection~ to-pad new-host)))))))))


;;;
;;;; Menu
;;;


@experimental
(class Palette-Menu extends Context-Menu
  
  
  (form
    (<install>
      (<Label-Item> name: dock title: "Dock" action-handler: {Event-Handler :form on-dock})))
  
  
  (method (on-dock evt)
    @convert
    (dock-palette))))
