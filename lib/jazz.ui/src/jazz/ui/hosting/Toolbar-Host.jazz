;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Toolbar Host
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.ui.hosting.Toolbar-Host jazz


(import (jazz.geometry)
        (jazz.graphic)
        (jazz.library)
        (jazz.system)
        (jazz.ui)
        (jazz.ui.window))


(class undocumented Toolbar-Host extends Host-View

  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method override (size-change size)
    (nextmethod size)
    (invalidate-top)
    (invalidate-border insets: {Rect 2 2 2 2}))
  
  
  (method (on-close evt)
    (let* ((parent (get-parent))
           (grand (get-parent~ parent)))
      (with-locked-update
        (lambda ()
          (set-visible? #f)
          (set-parent (get-toplevel))
          (cond ((is? parent Splitter-View)
                 (let ((other (first-view~ parent)))
                   (when other
                     (if #f @ZOO (is? parent Workspace-Splitter)
                         (begin
                           (set-mode~ parent 'zoom)
                           (layout-view~ parent))
                       (set-location~ other (get-location~ parent))
                       (set-parent~ other grand)
                       (close~ parent)
                       (layout-view~ grand)))))
                ((is? parent Pad-View)
                 (close)
                 (let ((other (first-child~ parent)))
                   (set-location~ other 'selection)
                   (layout-view~ parent))))))))

  
  ;;;
  ;;;; Activation
  ;;;
  
  
  (method override (mouse-activate?)
    #f)
  
  
  (method override (activate-focus)
    (nextmethod)
    (invalidate-caption))
  
  
  (method override (deactivate-focus)
    (nextmethod)
    (invalidate-caption))
  

  ;;;
  ;;;; Layout
  ;;;
  
  
  (method override (layout)
    (when guest
      (let ((width (get-width))
            (height (get-height)))
        (set-position~ guest {Point 0 0})
        (set-size~ guest (new Dimension width height)))))


  ;;;
  ;;;; Rects
  ;;;
  
  
  (method (menu-rect)
    (new Rect 1 1 25 25))
  
  
  (method (caption-rect)
    (new Rect 1 1 (- (get-width) 2) 24))
  
  
  (method (top-rect)
    (new Rect 1 1 (- (get-width) 2) 25))


  ;;;
  ;;;; Update
  ;;;
  
  
  (method (invalidate-top)
    (invalidate-rect (top-rect)))
  
  
  (method override (invalidate-caption)
    (invalidate-rect (caption-rect)))
  

  ;;;
  ;;;; Mouse
  ;;;

  
  (method override (mouse-down pos)
    (cond ((in-rect? pos (menu-rect))
           (select-menu))
          ((in-rect? pos (caption-rect))
           (toggle-docked pos))))
  
  
  (method (toggle-docked pos)
    (let ((parent (get-parent)))
      (when (is? parent Pad-View)
        (let* ((title (get-title))
               (font {Font name: Label})
               (h (+ 28 (text-width~ font title))))
          (when (< (get-h~ pos) h)
            (with-locked-update
              (lambda ()
                (select-next~ parent))))))))
  
  
  (method override (double-click pos)
    (let* ((parent (get-parent))
           (target (if (is? parent Pad-View) parent self))
           (splitter (if (is? parent Pad-View) (get-parent~ parent) parent)))
      (when (is? splitter Splitter-View)
        (with-locked-update
          (lambda ()
            (if (= (get-state~ splitter) 'split)
                (zoom~ splitter target)
              (unzoom~ splitter)))))))
  

  ;;;
  ;;;; Menu
  ;;;
  
  
  (method (select-menu)
    (let ((brothers (collect-brothers)))
      (when brothers
        (let ((menu (new Context-Menu)))
          (for-each (lambda (docked)
                      (let* ((guest (get-guest~ docked))
                             (title (get-title~ docked))
                             (icon (host-icon~ (class-of guest))))
                        (new Label-Item parent: menu title: title icon: icon action-handler: (new Event-Handler target: self method-name: 'on-select properties: (list host: docked)))))
                    brothers)
          (layout-menu~ menu)
          (track-popup-menu menu {Point 2 25})))))
  
  
  (method (collect-brothers)
    (let ((pad (get-parent)))
      (when (is? pad Pad-View)
        (collect-if (lambda (host)
                      (neq? host self))
                    (get-children~ pad)))))
  
  
  (method (on-select evt)
    (let ((parent (get-parent))
          (host (get-property~ evt host:)))
      (with-locked-update
        (lambda ()
          (set-selection~ parent host)
          (focus-host~ host)))))))
