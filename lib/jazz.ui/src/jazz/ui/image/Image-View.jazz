;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Image Views
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2012
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.ui.image.Image-View jazz


(import (jazz.designer)
        (jazz.jml)
        (jazz.library)
        (jazz.graphic)
        (jazz.ui)
        (jazz.ui.window))


(class undocumented Image-View extends View implements Document


  (property portfolio      initialize #f          accessors explicit)
  (property resource       initialize #f          accessors explicit)
  (property moniker        initialize #f          accessors explicit)
  (property image-position initialize {Point 0 0} accessors explicit)
  (property image-size     initialize #f          accessors explicit)
  (property fill-mode      initialize 'position   accessors explicit)


  (slot image               initialize (new Image) getter generate)
  (slot dragging?           initialize #f)
  (slot base-position       initialize #f)
  (slot document-controller initialize #f)
  
  
  (method override (save-content moniker));;abstract
  (method override (default-extension));;abstract
  (method override (extensions));;abstract
  (method override (focus-document));;abstract
  (method override (current-history-item));;abstract
  (method override (compare-moniker moniker));;abstract
  
  
  (method meta override (external-name . rest)
    'image-view)
  
  
  (method override (finish rest)
    (set-size~ image size)
    (nextmethod rest))
  
  
  (method override (destroy)
    (close~ image)
    (nextmethod))

  
  ;;;
  ;;;; Host
  ;;;
  
  
  (method override (install-in-host host)
    (nextmethod host)
    (let ((size (get-size~ host)))
      (set-size size)
      (set-image-size size)))
  
  
  (method override (size-change size)
    (nextmethod size)
    (set-image-size size)
    (invalidate-view))
  
  
  (method override (host-workspaces)
    '(image))


  ;;;
  ;;;; Controller
  ;;;


  (method override (get-document-controller)
    (unless document-controller
      (set! document-controller (new-document-controller)))
    document-controller)


  (method override (new-document-controller)
    (new Document-Controller self))
  
  
  (method override (install-scroller?)
    #t)
  
  
  (method (get-moniker)
    (get-moniker~ (get-document-controller)))
  
  
  (method (set-moniker moniker)
    (set-moniker~ image moniker)
    (set-moniker~ (get-document-controller) moniker))
  
  
  (method override (load-content moniker)
    (set-moniker~ image moniker)
    (invalidate-view))
  
  
  (method override (verify-reload)
    )
  
  
  (method override (reload-moniker moniker)
    )


  (method override (get-modified?)
    (get-modified?~ (get-document-controller)))


  (method override (set-modified? state)
    (set-modified?~ (get-document-controller) state))
  
  
  (method (update-status)
    (update-status~ (get-document-controller)))
  
  
  (method (update-moniker-time moniker)
    (update-moniker-time~ (get-document-controller) moniker))


  (method override (tool-update tool?)
    )


  (method override (console-update console?)
    )

  
  ;;;
  ;;;; Drawing
  ;;;


  (method override (draw surface context)
    (draw-at surface context 0 0)
    (unless (view-enabled?)
      (let ((color (or background (copy-object~ {Color Medium} #f))))
        (set-alpha~ color 0.85)
        (fill-rect~ surface (get-bounds) color))))
  
  
  (method protected virtual (draw-at surface context h v)
    (draw-image surface context h v))


  (method (draw-image surface context h v)
    (fill-at~ image surface context h v (get-bounds)))
    
  
  ;;;
  ;;;; Mouse
  ;;;
  

  (method override (mouse-down evt)
    (when scroller
      (set! dragging? #t)
      (set! base-position (get-position~ evt))
      (acquire-capture)))
  
  
  (method override (drag-move evt)
    (when dragging?
      (let ((position (get-position~ evt)))
        (move-figure (- (get-h~ position) (get-h~ base-position))
                     (- (get-v~ position) (get-v~ base-position))))))
  
  
  (method override (drag-up evt . rest)
    (when dragging?
      (release-capture)
      (set! dragging? #f)))

  
  ;;;
  ;;;; Access
  ;;;


  (method public (get-portfolio)
    (get-portfolio~ image))


  (method public (set-portfolio portfolio)
    (set-portfolio~ image (if (is? portfolio Portfolio) portfolio (child portfolio)))
    (invalidate-view))


  (method public (get-resource)
    (get-resource~ image))


  (method public (set-resource name)
    (set-resource~ image name)
    (invalidate-view))


  (method public (get-image-position)
    (get-position~ image))


  (method public (set-image-position pos)
    (set-position~ image pos)
    (invalidate-view))


  (method public (get-image-size)
    (get-size~ image))


  (method public (set-image-size size)
    (set-size~ image size)
    (invalidate-view))


  (method public (get-fill-mode)
    (get-fill-mode~ image))


  (method public (set-fill-mode mode)
    (set-fill-mode~ image mode)
    (invalidate-view))
  
  
  (method public (set-handle handle)
    (set-handle~ image handle)
    (invalidate-view))
  
  
  ;;;
  ;;;; Events
  ;;;


  (method override (cursor-update evt)
    (set-cursor (if scroller :finger :arrow)))
    
    
    ;;;
    ;;;; Session
    ;;;
    
    
  (method override (save-session)
    @to-convert
    (let* ((host (get-host))
           (info
            (list (external-name)
                  moniker:  (get-moniker)
                  position: (get-position~ host)
                  size:     (get-size~ host))))
      (push-property~ properties 'Opened-Windows info)))
  
  
  ;;;
  ;;;; Descriptor
  ;;;
  
  
  (method meta override (get-class-descriptor (context: context #f))
    (new Image-View-Descriptor)))


;;;
;;;; Design
;;;


(submodule design


(import (jazz.designer))


(class Image-View-Descriptor extends View-Descriptor
  
  
  (form
    (<install>                                       image: {Image-Resource "BlueRed"}
      (<properties~>
        (<Property-Descriptor>  name: portfolio
          (<Portfolio-Domain>   name: domain))
        (<Property-Descriptor>  name: resource
          (<String-Domain>      name: domain))
        (<Property-Descriptor>  name: moniker
          (<Value-Domain>       name: domain))
        (<Property-Descriptor>  name: image-position
          (<Value-Domain>       name: domain))
        (<Property-Descriptor>  name: image-size
          (<Value-Domain>       name: domain))
        (<Property-Descriptor>  name: fill-mode
          (<Enumeration-Domain> name: domain         nullable?: #f choices: ((position "Position") (center "Center") (fill "Fill") (fit "Fit") (stretch "Stretch") (tile "Tile"))))))))))
