;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Image Views
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.ui.image.Image-View jazz


(import (jazz.designer)
        (jazz.jml)
        (jazz.library)
        (jazz.ui)
        (jazz.ui.window))


(class undocumented Image-View extends View implements Document


  (property portfolio     initialize {}          getter get-portfolio     setter set-portfolio)
  (property resource      initialize {}          getter get-resource      setter set-resource)
  (property moniker       initialize {}          getter get-moniker       setter set-moniker)
  (property view-position initialize {Point 0 0} getter get-view-position setter set-view-position)
  (property view-size     initialize {}          getter get-view-size     setter set-view-size)
  (property mode          initialize {}          getter get-mode          setter set-mode)


  (slot image         initialize (new Image) getter generate)
  (slot dragging?     initialize #f)
  (slot base-position initialize {})
  (slot controller    initialize {})
  
  
  (method override (save-content moniker));;abstract
  (method override (default-extension));;abstract
  (method override (extensions));;abstract
  (method override (focus-document));;abstract
  (method override (current-history-item));;abstract
  (method override (compare-moniker moniker));;abstract
  
  
  (method meta override (external-name . rest)
    'image-view)
  
  
  (method override (destroy)
    (when controller
      (close~ controller))
    (close~ image)
    (nextmethod))

  
  ;;;
  ;;;; Host
  ;;;
  
  
  (method override (install-in-host host)
    (nextmethod host)
    (let ((size (get-size~ host)))
      (set-size size)
      (set-view-size size)
      (set-mode 'centered)))
  
  
  (method override (size-change size)
    (nextmethod size)
    (set-view-size size)
    (invalidate-view))
  
  
  (method override (host-workspaces)
    '(image))


  ;;;
  ;;;; Controller
  ;;;


  (method override (get-controller)
    (unless controller
      (set! controller (new-controller)))
    controller)


  (method override (new-controller)
    (new Document-Controller self))
  
  
  (method override (install-scroller?)
    #t)
  
  
  (method (get-moniker)
    (get-moniker~ (get-controller)))
  
  
  (method (set-moniker moniker)
    (set-moniker~ image moniker)
    (set-moniker~ (get-controller) moniker))


  (method override (load-content moniker)
    (set-moniker~ image moniker)
    (invalidate-view))
  
  
  (method override (verify-reload)
    )
  
  
  (method override (reload-moniker moniker)
    )


  (method override (get-modified?)
    (get-modified?~ (get-controller)))


  (method override (set-modified? state)
    (set-modified?~ (get-controller) state))
  
  
  (method (update-status)
    (update-status~ (get-controller)))
  
  
  (method (update-moniker-time moniker)
    (update-moniker-time~ (get-controller) moniker))


  (method override (tool-update tool?)
    )


  (method override (console-update console?)
    )

  
  ;;;
  ;;;; Layout
  ;;;
  
  
  (method override (scrollee-size)
    (get-size~ image error?: #f))

  
  ;;;
  ;;;; Drawing
  ;;;


  (method override (draw surface context lh lv)
    (draw-at surface context 0 0))
  
  
  (method protected virtual (draw-at surface context h v (size: size (get-size)))
    (draw-image surface context h v size: size))


  (method (draw-image surface context h v (size: size (get-size)) (enabled?: enabled? #t))
    (draw~ image surface context h v size: size enabled?: enabled?))
    
  
  ;;;
  ;;;; Mouse
  ;;;
  

  (method override (mouse-down pos)
    (when scroller
      (set! dragging? #t)
      (set! base-position pos)
      (acquire-capture)))
  
  
  (method override (drag-move pos)
    (when dragging?
      (let ((delta (- pos base-position)))
        (move-figure (get-h~ delta) (get-v~ delta)))))
  
  
  (method override (drag-up pos . rest)
    (when dragging?
      (release-capture)
      (set! dragging? #f)))

  
  ;;;
  ;;;; Access
  ;;;


  (method public (get-portfolio)
    (get-portfolio~ image))


  (method public (set-portfolio pf)
    (set-portfolio~ image (if (is? pf Portfolio) pf (child pf)))
    (invalidate-view))


  (method public (get-resource)
    (get-resource~ image))


  (method public (set-resource name)
    (set-resource~ image name)
    (invalidate-view))


  (method public (get-view-position)
    (get-view-position~ image))


  (method public (set-view-position pos)
    (set-view-position~ image pos)
    (invalidate-view))


  (method public (get-view-size)
    (get-view-size~ image))


  (method public (set-view-size s)
    (set-view-size~ image s)
    (invalidate-view))


  (method public (get-mode)
    mode)


  (method public (set-mode md)
    (set-mode~ image md)
    (invalidate-view))
  
  
  (method public (set-handle handle)
    (set-handle~ image handle)
    (invalidate-view))
  
  
  ;;;
  ;;;; Events
  ;;;


  (method override (cursor-update pos)
    (set-cursor (if scroller :finger :arrow)))

  
  (method override (get-context-menu)
    (new Image-Menu))
  
  
  (method (on-change-mode evt)
    (set-mode~ image (get-name~ (get-sender~ evt)))
    (invalidate-view))
    
    
    ;;;
    ;;;; Session
    ;;;
    
    
  (method override (save-session)
    @to-convert
    (let* ((host (get-host))
           (info
            (list (external-name)
                  moniker:  (get-moniker)
                  position: (get-position~ host)
                  size:     (get-size~ host))))
      (push-property~ properties 'Opened-Windows info)))
  
  
  ;;;
  ;;;; Preload
  ;;;
  
  
  (method public (preload-image)
    (preload-image~ image))
  
  
  ;;;
  ;;;; Descriptor
  ;;;
  
  
  (method meta override (get-class-descriptor)
    (new Image-View-Descriptor)))


;;;
;;;; Image-Menu
;;;


(class Image-Menu extends Context-Menu
  
  
  (form
    (<install>
      (<Label-Item>     name: centered  title: "Center" action-handler: {Event-Handler :focus on-change-mode})
      (<Label-Item>     name: tiled     title: "Tile" action-handler: {Event-Handler :focus on-change-mode})
      (<Label-Item>     name: filled    title: "Fill" action-handler: {Event-Handler :focus on-change-mode})
      (<Label-Item>     name: stretched title: "Stretch" action-handler: {Event-Handler :focus on-change-mode}))))


;;;
;;;; Design
;;;


(submodule design


(import (jazz.designer))


(class Image-View-Descriptor extends View-Descriptor
  
  
  (method override (class-property-presentation class property)
    (case (field-name property)
      ((portfolio) "Portfolio")
      ((resource) "Resource")
      ((moniker) "Moniker")
      ((view-position) "View Position")
      ((view-size) "View Size")
      ((mode) "Mode")
      (else (nextmethod class property))))

  
  (method override (component-get-row-instance component property)
    (case (field-name property)
      ((resource) (new String-Row))
      (else (nextmethod component property)))))))
