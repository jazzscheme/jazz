;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Layoutable Figures
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.ui.layout.Figure jazz


(import (jazz.jml)
        (jazz.library)
        (jazz.ui))


(class Figure extends Component
  
  
  (property location             initialize #f                 accessors explicit)
  (property position <Point>     initialize (default-position) accessors explicit)
  (property size     <Dimension> initialize (default-size)     accessors explicit)
  
  
  ;;;
  ;;;; Location
  ;;;
  

  (method public virtual (get-location)
    location)
  

  (method public virtual (set-location loc)
    (set! location loc))
  
  
  (method public (find-located location)
    (find-if (lambda (child)
               (eq? (get-location~ child) location))
             children))
  
  
  ;;;
  ;;;; Position
  ;;;
  
  
  (method (default-position) <Point>
    {Point 0 0})
  

  (method public virtual (get-position) <Point>
    position)
  
  
  (method public virtual (get-effective-position) <Point>
    (get-position))
  

  (method public virtual (set-position pos <Point>) <void>
    (set! position pos))
  

  (method public (move-figure dh <fx> dv <fx>) <void>
    (let ((pos <Point> (get-position)))
      (set-position (new Point (+ (get-h~ pos) dh) (+ (get-v~ pos) dv)))))
  
  
  (method public (get-center) <Point>
    (new Point
      (+ (get-h~ position) (quotient (get-width~ size) 2))
      (+ (get-v~ position) (quotient (get-height~ size) 2))))
  
  
  (method public (get-bottom-right) <Point>
    (new Point
      (+ (get-h~ position) (get-width~ size))
      (+ (get-v~ position) (get-height~ size))))

  
  ;;;
  ;;;; Size
  ;;;
  
  
  (method protected virtual (default-size) <Dimension>
    {Dimension 100 100})


  (method public virtual (get-size) <Dimension>
    size)
  
  
  (method public virtual (get-effective-size) <Dimension>
    (get-size))
  

  (method public virtual (set-size sz <Dimension>) <void>
    (set! size sz))


  (method public (size-figure dw <fx> dh <fx>) <void>
    (let ((size (get-size)))
      (set-size (new Dimension (+ (get-width~ size) dw) (+ (get-height~ size) dh)))))
  
  
  ;;;
  ;;;; Descriptor
  ;;;
  
  
  (method meta override (get-class-descriptor)
    (new Figure-Descriptor)))


;;;
;;;; Design
;;;


(submodule design


(import (jazz.designer))


(class Figure-Descriptor extends Component-Descriptor
  
  
  (form
    (<install>
      (<properties~>
        (<Property-Descriptor> name: location
          (<Value-Domain>      name: domain   nullable?: #t))
        (<Property-Descriptor> name: position
          (<Point-Domain>      name: domain))
        (<Property-Descriptor> name: size
          (<Dimension-Domain>  name: domain))))))))
