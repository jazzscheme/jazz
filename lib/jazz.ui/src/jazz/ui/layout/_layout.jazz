;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Layout
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module jazz.ui.layout jazz


(definition (partition-range from to n)
    (let ((size (- to from)))
      (map (lambda (i)
             (+ (round (* (/ i n) size)) from))
           (naturals 0 (+ n 1)))))
  
  
(definition public (layout-fill figures position size)
  (for-each (lambda (figure)
              (set-position~ figure position)
              (set-size~ figure size))
            figures))

(definition public (layout-fill-horizontal figures position size)
  (let ((width (get-width~ size))
        (h (get-h~ position)))
    (unless (= 0 (length figures))
      (let ((vs (let ((v (get-v~ position))
                      (height (get-height~ size)))
                  (partition-range v (+ v height) (length figures)))))
        (for-each (lambda (figure v next-v)
                    (set-position~ figure (new Point h v))
                    (set-size~ figure (new Dimension width (- next-v v))))
                  figures
                  (butlast vs)
                  (cdr vs))))))
  
  
(definition public (layout-fill-vertical figures position size)
  (let ((height (get-height~ size))
        (v (get-v~ position)))
    (unless (= 0 (length figures))
      (let ((hs (let ((h (get-h~ position))
                      (width (get-width~ size)))
                  (partition-range h (+ h width) (length figures)))))
        (for-each (lambda (figure h next-h)
                    (set-position~ figure (new Point h v))
                    (set-size~ figure (new Dimension (- next-h h) height)))
                  figures
                  (butlast hs)
                  (cdr hs)))))))
