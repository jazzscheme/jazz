(module jazz.ui.layout jazz


(definition (partition-range from to n)
    (let ((size (- to from)))
      (map (lambda (i)
             (+ (round (* (/ i n) size)) from))
           (naturals 0 (+ n 1)))))
  
  
(definition public (layout-fill figures position size)
  (for-each (lambda (figure)
              (set-position~ figure position)
              (set-size~ figure size))
            figures))

(definition public (layout-fill-horizontal figures position size)
  (let ((width (get-width~ size))
        (h (get-h~ position)))
    (unless (= 0 (length figures))
      (let ((vs (let ((v (get-v~ position))
                      (height (get-height~ size)))
                  (partition-range v (+ v height) (length figures)))))
        (for-each (lambda (figure v next-v)
                    (set-position~ figure (new Point h v))
                    (set-size~ figure (new Dimension width (- next-v v))))
                  figures
                  (butlast vs)
                  (cdr vs))))))
  
  
(definition public (layout-fill-vertical figures position size)
  (let ((height (get-height~ size))
        (v (get-v~ position)))
    (unless (= 0 (length figures))
      (let ((hs (let ((h (get-h~ position))
                      (width (get-width~ size)))
                  (partition-range h (+ h width) (length figures)))))
        (for-each (lambda (figure h next-h)
                    (set-position~ figure (new Point h v))
                    (set-size~ figure (new Dimension (- next-h h) height)))
                  figures
                  (butlast hs)
                  (cdr hs)))))))
