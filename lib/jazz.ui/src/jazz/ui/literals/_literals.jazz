;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; UI Literals
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module jazz.ui.literals jazz


(import (jazz.action)
        (jazz.clipboard)
        (jazz.exemplar)
        (jazz.platform)
        (jazz.text)
        (jazz.view))


;;;
;;;; Format
;;;


(definition package (construct-format . rest)
  (construct-exemplar Format rest))


;;;
;;;; Style
;;;


(definition package (construct-text-style . rest)
  (construct-exemplar Text-Style rest))


(definition package (construct-link-style . rest)
  (construct-exemplar Link-Style rest))


(definition package (construct-image-style . rest)
  (construct-exemplar Image-Style rest))


(definition package (construct-info-style . rest)
  (construct-exemplar Info-Style rest))


;;;
;;;; Text
;;;


(definition package (construct-text . rest)
  (apply new Text rest))


(definition package (construct-formatted-text . rest)
  (apply new Formatted-Text rest))


;;;
;;;; Clipboard
;;;


(definition package (construct-clipboard-parcel process-id object-id content)
  (new Clipboard-Parcel process-id object-id content))


;;;
;;;; Event
;;;


(definition package (construct-action-event kind . rest)
  (parse-event-modifiers rest
    (lambda (modifiers properties)
      (apply new Action-Event kind #f modifiers properties))))


(definition package (construct-keyboard-event kind . rest)
  (parse-event-modifiers rest
    (lambda (modifiers properties)
      (let ((key (car properties)))
        (new Keyboard-Event kind #f modifiers key)))))


(definition package (construct-mouse-event kind . rest)
  (parse-event-modifiers rest
    (lambda (modifiers properties)
      (apply new Mouse-Event kind #f modifiers properties))))


;;;
;;;; Handler
;;;


(definition package (construct-selection-handler target-name method-name . rest)
  (apply new Selection-Handler target-name: target-name method-name: method-name rest)))
