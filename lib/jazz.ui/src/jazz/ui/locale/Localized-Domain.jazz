;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Localized Domain
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.ui.locale.Localized-Domain jazz


(import (jazz.designer)
        (jazz.jml)
        (jazz.library)
        (jazz.locale)
        (jazz.ui))


(class undocumented Localized-Domain extends String-Domain)


@convert (
(class undocumented Localized-Domain extends Value-Domain
  
  
  (slot localized? initialize #f)
  
  
  ;;;
  ;;;; Presentation
  ;;;
  
  
  (method override (present value)
    (if (is? value Locales)
        (format "{l}" (get-locales~ value))
      (format "{a}" value)))
  
  
  ;;;
  ;;;; Edition
  ;;;
  
  
  (method override (get-edited-value)
    (if (not localized?)
        (get-string-content~ editor)
      (let ((fact (new List-Factory)))
        (iterate (get-sons)
                 (lambda (subrow)
                   (put~ fact (get-user-data~ subrow))
                   (put~ fact (get-value~ subrow))))
        (apply new Locales (get-output~ fact)))))
  
  
  (method override (get-edited-modified?)
    (if (not localized?)
        (nextmethod)
      (get-list-edited-modified?)))
  
  
  (method override (set-edited-modified? flag)
    (if (not localized?)
        (nextmethod flag)
      (set-list-edited-modified? flag)))
  
  
  (method override (edit)
    (set! localized? (is? value Locales))
    (if (not localized?)
        (edit-in-cell)
      (for-each (lambda (locale)
                  (add-row self locale (get-locale~ value locale) class: Locale-Row user-data: locale))
                (get-locales)))
    (expand/collapse~ (get-tree) self))
  
  
  (method override (select-editor)
    (when (is-not? value Locales)
      (nextmethod)))
  
  
  (method override (close-editor)
    (if (not localized?)
        (close-in-cell-editor)
      (close-in-list-editor)))
  
  
  (method override (in-edition?)
    (or (nextmethod)
        (and localized? (> (cardinality (get-sons)) 0)))))))
