;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Localized Domain
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2012
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.ui.locale.Localized-Domain jazz


(import (jazz.designer)
        (jazz.graphic)
        (jazz.jml)
        (jazz.library)
        (jazz.locale)
        (jazz.locale.components)
        (jazz.ui))


(class undocumented Localized-Domain extends Value-Domain

   
  (form
    (<install> nullable?: #t))
    
  
  ;;;
  ;;;; Validation
  ;;;
  
  
  (method override (validate-value property value component root editor context manager)
    (define (add-violation format-string . rest)
      (add-violation~ manager 
        (new Integrity-Violation message: (apply format (concatenate "Property {a} " format-string) (field-name property) rest) property: property) 
        component root editor))
    
    (if (or (string? value) (is? value Locales))
        (receive (state tree) (registered-locale-info (class-of root))
          (cond ((not tree))
                ((string? value)
                 (add-violation "needs to be localized according to {a}" (get-name~ (class-of tree))))
                ((localize~ value all:))
                (else
                 (let ((missing-locales (collect-if (lambda (locale-name) 
                                                      (and (neq? locale-name all:)
                                                           (not (localize~ state value locale-name))))
                                                    (provide-locales~ tree))))
                   (unless (null? missing-locales)
                     (add-violation "expects localization for: {a}" (join (map keyword->string missing-locales) ", ")))))))
      
      (add-violation "expects string or Locales: {t}" value))
    (nextmethod property value component root editor context manager))


  ;;;
  ;;;; Presentation
  ;;;
  
  
  (method override (present value)
    (if (not value)
        "{}"
      (->string value :reader)))
    
  
  ;;;
  ;;;; Entry
  ;;;
  
  
  (method override (setup-entry view client)
    (new Localized-Entry
      parent: view
      domain: self
      locales: (let ((creators (remove-duplicates (map (compose class-of get-creator~) client))))
                 (and (pair? creators)
                      (null? (cdr creators))
                      (receive (state tree) (registered-locale-info (car creators))
                        (and tree
                             (provide-locales~ tree))))))))

  
;;;
;;;; Localized-Entry
;;;


(class undocumented Localized-Entry extends Value-Entry
  
  
  (property locales initialize #f)
  
  
  ;;;
  ;;;; Value
  ;;;
  
  
  (method (localize value)
    (or (and (pair? locales)
             (string? value)
             (new Locales all: value))
        value))
  
 
  (method override (get-value)
    (localize~ self (nextmethod)))
  
  
  (method override (set-value value)
    (nextmethod (if value
                    (localize~ self value)
                  "{}")))
  
  
  ;;;
  ;;;; Descriptor
  ;;;

  
  (method meta override (get-class-descriptor)
    (new Localized-Entry-Descriptor)))


;;;
;;;; Design
;;;


(submodule design


(import (jazz.designer.entry.Property-Entry))


(class Localized-Entry-Descriptor extends Property-Entry-Descriptor
  
  
  (form
    (<install>
      (<properties~>
        (<Property-Descriptor> name: locales
          (<List-Domain>       name: domain  nullable?: #t))))))))
