;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Localized Domain
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.ui.locale.Localized-Domain jazz


(import (jazz.designer)
        (jazz.jml)
        (jazz.library)
        (jazz.locale)
        (jazz.locale.components))


(class undocumented Localized-Domain extends Value-Domain

   
  (form
    (<install> nullable?: #t))
    
  
  ;;;
  ;;;; Validation
  ;;;
  
  
  (method override (validate-value property value component root editor context manager)
    (when value
      (unless (or (string? value) (is? value Locales))
        (add-violation~ manager (new Integrity-Violation message: (format "Property {a} can only be a string or a Locales object: {t}" (field-name property) value) property: property) component root editor)))
    (nextmethod property value component root editor context manager))
  
  
  ;;;
  ;;;; Presentation
  ;;;
  
  
  (method override (present value)
    (if (not value)
        "{}"
      (->string value :reader)))
    
  
  ;;;
  ;;;; Entry
  ;;;
  
  
  (method override (setup-entry view client)
    (new Localized-Entry parent: view domain: self setup-entry-client: client)))


;;;
;;;; Localized-Entry
;;;


(class undocumented Localized-Entry extends Value-Entry
  
  
  (property setup-entry-client initialize '() accessors generate)
  
  
  (method (get-property-name)
    (get-name~ (get-parent~ domain)))
  
  
  (method override (get-value)
    (let* ((content (get-string-content~ (locate 'text)))
           (string/locales (and (not (empty-string? content))
                                (not (string=? (substring content 0 2) "{}"))
                                (read-string-safe content))))
      (cond ((not string/locales)
             #f)
            ((string? string/locales)
             string/locales)
            ((is-not? string/locales Locales)
             #f)
            (else
             (let* ((alist (plist->alist (get-locales~ string/locales)))
                    (locales (map car alist)))
               (define (not-locale-subset? group <Localized-String-Group>)
                 (let ((group-locales (collect get-locale~ (collect-type Localized-String (get-children~ group)))))
                   (some? (lambda (locale) (not (memq? locale group-locales))) locales)))
               
               (define (update-group group <Localized-String-Group>)
                 (let ((designer <Designer> (car (get-designers~ (get-parent~ group)))))
                   (for-each (lambda (child <Localized-String>)
                               (let ((new-string (let ((pair (assq (get-locale~ child) alist))) (and pair (cdr pair)))))
                                 (unless (string=? new-string (get-string~ child))
                                   (set-property~ designer child 'string new-string))))
                             (collect-type Localized-String (get-children~ group)))))
                                
               (and (or (null? locales)
                        (let ((groups (collect-localized-string-groups (get-property-name) setup-entry-client)))
                          (or (not groups)
                              (some? not-locale-subset? groups))
                              (prog1 #f 
                                (for-each update-group groups))))
                    string/locales))))))  
  
  
  (method override (set-value value)
    (set-string-content~ (locate 'text)
      (if value
          (->string value :reader)
        (let ((groups (collect-localized-string-groups (get-property-name) setup-entry-client)))
          (if (not groups)
              ""
            (bind (first . rest) (map get-contents~ groups)
              (if (and (is? first Locales)
                       (or (null? rest)
                           (every? (lambda (object) (compare~ first object)) rest)))
                  (->string first :reader)
                (set-editable? #f)
                "{not editable}")))))))
  
  
  (method meta override (get-class-descriptor)
    (new Localized-Entry-Descriptor)))

  
(definition (collect-localized-string-groups property-name components (groups '()))
  (if (null? components)
      groups
    (bind (component . rest) components
      (let ((group (find-localized-string-group component property-name)))
        (if group
            (collect-localized-string-groups property-name rest (cons group groups))
          #f)))))


;;;
;;;; Design
;;;


(submodule design


(import (jazz.designer)
        (jazz.jml)
        (jazz.designer.entry.Property-Entry))


(class Localized-Entry-Descriptor extends Property-Entry-Descriptor
  
  
  (form
    (<install>
      (<properties~>
        (<Property-Descriptor> name: setup-entry-client
          (<Value-Domain>      name: domain             nullable?: #f))))))))
