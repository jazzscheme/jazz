;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Items
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2012
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.ui.menu.Item jazz


(import (jazz.ui))


(class Item extends View
  
  
  (slot prefix-width   initialize 0  setter generate)
  (slot icon-width     initialize 0  setter generate)
  (slot body-width     initialize 0  setter generate)
  (slot shortcut-width initialize 0  setter generate)
  (slot arrow-width    initialize 0  setter generate)

  
  ;;;
  ;;;; Actionable
  ;;;
  
  
  (method override (actionable-reachable?)
    (and (get-visible?)
         (let ((menu (get-parent)))
           (or (is? menu Menubar)
               (let ((owner-item (get-item~ menu)))
                 (and owner-item (actionable-reachable?~ owner-item)))))))
  
  
  ;;;
  ;;;; Menubar
  ;;;
  

  (method (get-menubar)
    (find-ascendant Menubar))
  
  
  ;;;
  ;;;; Layout
  ;;;
  
  
  (method public virtual (preferred-prefix-width)
    0)
  
  
  (method public virtual (preferred-icon-width)
    0)
  
  
  (method public virtual (preferred-body-width)
    0)
  
  
  (method public virtual (preferred-shortcut-width)
    0)
  
  
  (method public virtual (preferred-arrow-width)
    0)
  
  
  (method protected (layout-menu (cleanup-separators?: cleanup-separators? #t))
    (when (is? parent Menu)
      (layout-menu~ parent cleanup-separators?: cleanup-separators?)))
  
  
  ;;;
  ;;;; Navigate
  ;;;
  
  
  (method protected (item-navigable?)
    (and (is? self Label-Item)
         (view-enabled?)))
  
  
  ;;;
  ;;;; Mouse
  ;;;
  
  
  (method override (mouse-enter)
    (set-highlighted~ parent (if (item-navigable?) self #f))
    (let ((initiator (popup-initiator)))
      (when initiator
        (invalidate-view~ initiator))))
  
  
  (method override (mouse-leave)
    (unless (popped?)
      (set-highlighted~ parent #f)))
  
  
  ;;;
  ;;;; Popup
  ;;;
  
  
  (method protected (popped?)
    (let ((popped (get-popped~ parent)))
      (and popped (eq? (popup-initiator~ popped) self))))
  
  
  (method protected (close-other-popups)
    (define (popped-tool)
      (let ((popped (get-popped~ parent)))
        (when (and popped (eq? (popup-initiator~ popped) self))
          (get-player~ popped))))
    
    (if (popped?)
        (close-popups exclude: (list (popped-tool)))
      (close-popups)))
  
  
  ;;;
  ;;;; Recording
  ;;;
  
  
  (method override (record-actions?)
    (record-actions?~ parent))))
