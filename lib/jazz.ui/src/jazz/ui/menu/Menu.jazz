;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Menus
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.ui.menu.Menu jazz


(import (jazz.jml)
        (jazz.locale)
        (jazz.ui)
        (jazz.ui.view))


(class Menu extends View
  
  
  (property display-shortcuts? initialize #t accessors generate)
  
  
  (slot item        initialize #f accessors generate)
  (slot highlighted initialize #f)
  (slot popped      initialize #f)
  (slot locator     initialize (new Menu-Locator self))


  (form
    (<install> visible?: #f))


  ;;;
  ;;;; Actions
  ;;;
  

  (method override (focus-actions)
    (cons (menu-actions)
          (nextmethod)))
  
  
  (method protected virtual (menu-actions)
    (find-actions 'menu))

  
  ;;;
  ;;;; Component
  ;;;
  
  
  (method override (conclude rest)
    (nextmethod rest)
    (layout-menu))

  
  ;;;
  ;;;; Access
  ;;;
  
  
  (method protected (parent-menu)
    (and item (get-parent~ item)))
  
  
  (method protected (parent-menubar)
    (let (iter (menu self))
      (when menu
        (if (is? menu Menubar)
            menu
          (iter (parent-menu~ menu))))))
  
  
  (method public (get-popped)
    popped)
  
  
  (method public (set-popped menu)
    (when popped
      (let ((initiator (popup-initiator~ popped)))
        (when initiator
          (invalidate-view~ initiator))))
    (set! popped menu))
  
  
  ;;;
  ;;;; Highlighted
  ;;;
  
  
  (method public (get-highlighted)
    highlighted)
  
  
  (method public (set-highlighted new)
    (let ((old highlighted))
      (set! highlighted new)
      (when old
        (invalidate-view~ old))
      (when new
        (invalidate-view~ new))))
  
  
  (method package (clear-highlighted)
    (set! highlighted #f))
  
  
  ;;;
  ;;;; Focus
  ;;;
  
  
  (method override (focus-lose)
    (set-highlighted #f))
  
  
  ;;;
  ;;;; Keyboard
  ;;;
  
  
  (method (on-navigate-previous evt)
    (navigate-previous))
  
  
  (method (on-navigate-next evt)
    (navigate-next))
  
  
  (method (on-navigate-open evt)
    (navigate-open))
  
  
  (method (on-navigate-close evt)
    (navigate-close))
  
  
  (method (on-navigate-home evt)
    (navigate-home))
  
  
  (method (on-navigate-end evt)
    (navigate-end))


  (method override (key-press evt)
    (enter~ locator (get-key~ evt)))


  (method override (up-arrow-press modifiers)
    (navigate-previous))


  (method override (down-arrow-press modifiers)
    (navigate-next))
  
  
  (method (navigate-to navigate)
    (let ((items (navigable-items)))
      (when (not-null? items)
        (set-highlighted (navigate items highlighted)))))
  
  
  (method (navigable-items)
    (collect-if item-navigable?~ (collect-type Item children)))
  
  
  (method override (right-arrow-press modifiers)
    (or (navigate-open)
        (let ((menubar (parent-menubar)))
          (when menubar
            (close-all-popups)
            (navigate-next~ menubar)
            (navigate-open~ menubar)))))
  
  
  (method override (left-arrow-press modifiers)
    (let ((parent (parent-menu)))
      (if (is? parent Menubar)
          (begin
            (close-all-popups)
            (navigate-previous~ parent)
            (navigate-open~ parent))
        (navigate-close))))
  
  
  (method override (return-press evt)
    (navigate-select))


  (method override (escape-press evt)
    (navigate-close))
  
  
  ;;;
  ;;;; Navigate
  ;;;


  (method protected (navigate-previous)
    (navigate-to previous-element))


  (method protected (navigate-next)
    (navigate-to next-element))
  
  
  (method protected (navigate-home)
    (navigate-to
      (lambda (items highlighted)
        (first items))))
  
  
  (method protected (navigate-end)
    (navigate-to
      (lambda (items highlighted)
        (last items))))
  
  
  (method protected (navigate-select)
    (when highlighted
      (if (get-content~ highlighted)
          (navigate-open)
        (let ((item highlighted))
          (close-popups~ player all?: #t)
          (process-action~ item item)))))
  
  
  (method protected (navigate-open (highlight-last? #f))
    (when highlighted
      (let ((content (get-content~ highlighted)))
        (when content
          (popup-content~ highlighted)
          (set-highlighted~ content
            (if highlight-last?
                (last-child~ content)
              (first-child~ content)))
          #t))))
  
  
  (method protected (navigate-close)
    (close-popup (get-player))
    (when item
      (let ((menu (get-parent~ item))
            (focus (get-focus)))
        (when (eq? focus menu)
          (set-highlighted~ menu item)))))
  
  
  ;;;
  ;;;; Widget
  ;;;
  
  
  (method override (inner? view)
    (memq? view children))

  
  ;;;
  ;;;; Update
  ;;;
  
  
  (method override (invalidate-update)
    (layout-menu))
  
  
  (method public virtual (update)
    )
  
  
  ;;;
  ;;;; Layout
  ;;;
  
  
  (method public virtual (layout-menu . rest)
    (define (collect-maximums)
      (let ((prefix-max 0)
            (icon-max 0)
            (body-max 0)
            (shortcut-max 0)
            (arrow-max 0))
        (for-each-view
          (lambda (view)
            (let ((prefix (preferred-prefix-width~ view))
                  (icon (preferred-icon-width~ view))
                  (body (preferred-body-width~ view))
                  (shortcut (if display-shortcuts? (preferred-shortcut-width~ view) 0))
                  (arrow (preferred-arrow-width~ view)))
              (when (> prefix prefix-max) (set! prefix-max prefix))
              (when (> icon icon-max) (set! icon-max icon))
              (when (> body body-max) (set! body-max body))
              (when (> shortcut shortcut-max) (set! shortcut-max shortcut))
              (when (> arrow arrow-max) (set! arrow-max arrow)))))
        (values prefix-max icon-max body-max shortcut-max arrow-max)))
    
    (bind-keywords ((cleanup-separators? #t) (width #f)) rest
      (when (get-finished?)
        (when cleanup-separators?
          (cleanup-separators))
        (receive (prefix icon body shortcut arrow) (collect-maximums)
          (let ((width (max (+ prefix icon body shortcut arrow) (or width 0)))
                (v 1)
                (empty? #t))
            (for-each-view
              (lambda (view)
                (let ((height (preferred-height~ view)))
                  (set-position~ view (new Point 1 v))
                  (set-size~ view (new Dimension width height))
                  (set-prefix-width~ view prefix)
                  (set-icon-width~ view icon)
                  (set-body-width~ view body)
                  (set-shortcut-width~ view shortcut)
                  (set-arrow-width~ view arrow)
                  (increase! v height)
                  (set! empty? #f))))
            (if empty?
                (set-size {Dimension 120 300})
              (set-size (new Dimension (+ width 2) (+ v 1)))))))))
  
  
  ;;;
  ;;;; Separators
  ;;;
  
  
  (method public (cleanup-separators)
    (let ((visibles (collect-if get-visible?~ children))
          (previous-separator? #t)
          (kept-separator #f))
      (for-each (lambda (item)
                  (let* ((separator? (is? item Separator-Item))
                         (consecutive? (and separator? previous-separator?)))
                    (if consecutive?
                        (set-visible?~ item #f)
                      (when separator?
                        (set! kept-separator item))
                      (set! previous-separator? separator?))))
                visibles)
      (when (and previous-separator? kept-separator)
        (set-visible?~ kept-separator #f)))))


;;;
;;;; Menu-Locator
;;;


(class Menu-Locator extends Locator
  
  
  (slot menu)
  
  
  (method override (initialize menu . rest)
    (set! menu~self menu)
    (apply nextmethod rest))
  
  
  (method override (iterate proc)
    (let ((items (navigable-items~ menu))
          (current (get-highlighted~ menu)))
      (when (not-null? items)
        (let ((start (if (not current) 0 (get-rank (if prefix current (next-element items current)) items)))
              (card (cardinality items)))
          (loop (for n from 0 below card)
                (let ((rank (modulo (+ start n) card)))
                  (let ((item (element items rank)))             
                    (proc (localize (get-title~ item)) rank))))))))
  
  
  (method override (select rank)
    (let ((items (navigable-items~ menu)))
      (set-highlighted~ menu (element items rank))))))
