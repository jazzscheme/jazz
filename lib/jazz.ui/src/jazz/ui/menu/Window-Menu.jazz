;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Window Menu
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library protected jazz.ui.menu.Window-Menu jazz


(import (jazz.jml)
        (jazz.library)
        (jazz.platform)
        (jazz.ui)
        (jazz.ui.window)
        (jazz.utilities))


(class Window-Menu extends Menu
    
  
  (slot base-items)

  
  (form
    (<install>                                  title: "Window"
      (<Label-Item>     name: next              title: "Next" icon: {Bitmap-Resource "Next"} action: {Action application next-frame})
      (<Label-Item>     name: previous          title: "Previous" icon: {Bitmap-Resource "Previous"} action: {Action application previous-frame})
      (<Separator-Item> name: cascade-separator)
      (<Label-Item>     name: tile-horizontally title: "Tile Horizontally" icon: {Bitmap-Resource "TileHorizontally"} action: {Action application tile-horizontally})
      (<Label-Item>     name: tile-vertically   title: "Tile Vertically" icon: {Bitmap-Resource "TileVertically"} action: {Action application tile-vertically})))
  
  
  (method (finish rest)
    (nextmethod rest)
    (set! base-items (length (get-children))))
  
  
  (method (collect-palettes)
    (let ((toplevel (get-toplevel)))
      (collect-if (function (window)
                    (is? window Palette))
                  (get-windows~ toplevel))))
  
  
  (method (collect-frames)
    (let ((stage (get-stage)))
      (collect-if (function (frame)
                    (or (is-not? frame Frame-Host)
                        (let ((guest (get-guest~ frame)))
                          (or (is-not? guest Document)
                              (not (get-tool?~ (get-controller~ guest)))))))
                  (get-views~ stage))))

  
  (method (update)
    (let ((palettes (collect-palettes))
          (frames  (collect-frames)))
      (for-each (function (item)
                  (close~ item))
                (tail (get-children) base-items))
      (when (not-null? frames)
        (new Separator-Item parent: self)
        (for-each (function (frame)
                    (let ((icon (if (is? frame Frame-Host) (guest-icon~ (get-guest~ frame)) {})))
                      (new Label-Item parent: self title: (present-title (get-title~ frame)) icon: icon action-handler: (new Event-Handler target-name: :application method-name: 'on-select-window properties: (list window: frame)))))
                  frames))
      (when (not-null? palettes)
        (new Separator-Item parent: self)
        (for-each (function (palette)
                    (when (is? palette Palette)
                      (new Label-Item parent: self title: (present-title (get-title~ palette)) action-handler: (new Event-Handler target-name: :application method-name: 'on-select-window properties: (list window: palette)))))
                  palettes))
      (layout-menu)))
  
  
  (method (present-title title)
    (if (or (null? title) (empty-string? title))
        "<Untitled>"
      title))))
