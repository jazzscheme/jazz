;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Workspaces Menu
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library protected jazz.ui.menu.Workspaces-Menu jazz


(import (jazz.library)
        (jazz.ui)
        (jazz.ui.menu)
        (jazz.ui.workspace)
        (jazz.utilities))


(definition public (popup-workspaces-menu view pos)
  (let ((preferences (get-preferences 'workspaces error?: #f)))
    (when preferences
      (let ((workspaces (get-children~ preferences)))
        (when (>= (length workspaces) 2)
          (track-popup-menu~ view (new Workspaces-Menu) pos))))))


(class Workspaces-Menu extends Context-Menu
  
  
  (method (install rest)
    (nextmethod rest)
    (insert-workspaces))
  
  
  (method (insert-workspaces)
    (let* ((selected (selected-workspace))
           (preferences (get-preferences 'workspaces))
           (workspaces (get-visible-children~ preferences))
           (default (find-component~ preferences 'default)))
      (when default
        (insert-workspace default (eq? default selected))
        (new Separator-Item parent: self))
      (for-each (function (workspace)
                  (unless (eq? workspace default)
                    (if (is? workspace Separator)
                        (new Separator-Item parent: self)
                      (insert-workspace workspace (eq? workspace selected)))))
                workspaces)))
  
  
  (method (insert-workspace workspace selected?)
    (let* ((title (if workspace (get-presentation~ workspace) "None"))
           (icon (if workspace (get-icon~ workspace) {Bitmap-Resource "Empty"}))
           (item (new Radio-Item parent: self title: title icon: icon action-handler: (new Event-Handler target: self method-name: 'on-action properties: (list workspace: workspace)))))
      (when selected?
        (set-selected?~ item #t))))
  
  
  (method (on-action evt)
    (let ((workspace (get-property~ evt workspace:)))
      (apply-preferences~ workspace)))))
