;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Outline Rows
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library protected jazz.ui.outline.Outline-Row jazz


(import (jazz.graphic)
        (jazz.ui)
        (jazz.utilities))


(proclaim (warn optimizations))


(class Outline-Row extends Drawing
  
  
  (property protected father            initialize {}           getter get-father     setter set-father)
  (property protected sons       <Axis> initialize (new Axis 0) getter get-sons       setter set-sons)
  (property protected level             initialize {}           getter get-level      setter set-level)
  (property protected state             initialize 'collapsed   getter get-state      setter set-state)
  (property protected row-height        initialize {}           getter get-row-height setter set-row-height)
  
  
  (slot protected previous initialize {} accessors generate)
  (slot protected next     initialize {} accessors generate)


  ;;;
  ;;;; Initialization
  ;;;

  
  ;; Because outline row components can be allocated in huge numbers in
  ;; texts and trees, its initialization process has to be streamlined...
  (method (initialize-component rest)
    )
    
  
  (method (install-in-parent)
    )
  
  
  (method (set-parent prt)
    (set! parent prt))

  
  ;;;
  ;;;; Access
  ;;;
  
  
  (method public inline (get-outline-view)
    parent)
  
  
  (method public inline (get-father)
    father)
  
  
  (method public inline (set-father row)
    (set! father row))
  
  
  (method public inline (get-sons)
    sons)
  
  
  (method public inline (set-sons s)
    (set! sons s))
  
  
  (method public inline (get-level)
    level)
  
  
  (method public inline (set-level lvl)
    (set! level lvl))
  
  
  (method public inline (get-state)
    state)
  
  
  (method public inline (set-state s)
    (set! state s))
  
  
  (method public inline (get-row-height)
    row-height)
  
  
  (method public inline (set-row-height height)
    (set! row-height height))
  
  
  ;;;
  ;;;; Father
  ;;;
  
  
  (method public (change-father father-row (position: position {}))
    (when father
      (remove-son~ father self))
    (set-father father-row)
    (when father
      (add-son~ father self (either position (cardinality (get-sons~ father))))))
  
  
  (method public (for-each-father proc)
    (when father
      (proc father)
      (for-each-father~ father proc)))
  
  
  (method public (for-each-ancestor proc)
    (proc self)
    (for-each-father proc))
  
  
  ;;;
  ;;;; Sons
  ;;;
  
  
  (method public (remove-every-son)
    (let ((outline-view (get-outline-view)))
      (for-each (function (son)
                  (remove-row~ outline-view son))
                (coerce sons List))))
  
  
  (method public (son-rank son)
    (find sons son))
  
  
  (method public (last-son)
    (last sons))

  
  ;;;
  ;;;; Transparency
  ;;;

  
  (method (get-transparent?)
    #t)

  
  ;;;
  ;;;; State
  ;;;
  
  
  (method public (expanded?)
    (eq? state 'expanded))
  
  
  (method public (collapsed?)
    (eq? state 'collapsed))
  
  
  (method public (expandable?)
    (or (eq? state 'dynamic)
        (first-visible-son)))
  
  
  (method public (collapsable?)
    (eq? state 'expanded))
  
  
  ;;;
  ;;;; Level
  ;;;
  
  
  (method protected (set-descendants-level lvl <fx>)
    (set! level lvl)
    (for-each (function (son)
                (set-descendants-level~ son (+ level 1)))
              sons))
  
  
  ;;;
  ;;;; Layout
  ;;;
  
  
  (method public virtual (get-effective-width)
    (get-width))
  
  
  (method public (get-effective-height)
    (either row-height (get-height)))
  
  
  ;;;
  ;;;; Drawing
  ;;;
  
  
  (method (draw surface context lh lv)
    (nextmethod surface context lh lv)
    (when (getf context selected?:)
      (draw-selection surface)))
  
  
  (method protected virtual (draw-selection surface <Surface>)
    (let* ((outer (get-bounds))
           (inner (inflate-rect outer -1 -1)))
      (frame-rect~ surface outer {Color name: Black})
      (frame-rect~ surface inner {Color name: Light-Gray})))
  
  
  ;;;
  ;;;; Visibility
  ;;;


  (method (show)
    (unless (get-visible-flag)
      (let* ((last (last-descendant))
             (previous (previous-visible-row self))
             (next (if previous
                       (get-next~ previous)
                     (essay father (first-visible-son~ father)))))
        (nextmethod)
        (if parent
            (let ((visible? (visible-in-father?)))
              (show-rows~ parent self last previous next visible? #f #f))
          (link previous self)
          (link last next)))))


  (method (hide)
    (when (get-visible-flag)
      (let ((last (either (last-descendant) self))
            (in-collapse? #f))
        (nextmethod)
        (if parent
            (hide-rows~ parent self last (visible-in-father?) in-collapse?)
          (unlink self last)))))


  ;; root-row not visible - is this ok?
  (method (get-visible?)
    (and father (row-visible?)))
  
  
  (method public (row-visible?)
    (and (get-visible-flag)
         (visible-in-father?)))
  
  
  (method public (visible-in-father?)
    (or (not father)
        (and (expanded?~ father) (row-visible?~ father))))
  
  
  (method public (count-visible)
    (let ((scan next)
          (count 0))
      (while (and scan (> (get-level~ scan) level))
        (set! scan (get-next~ scan))
        (increase! count))
      count))
  
  
  (method public (node-height)
    (+ (get-effective-height) (get-row-spacing~ parent) (sons-height)))
  
  
  (method public (sons-height)
    (let ((scan next)
          (total 0)
          (rs (get-row-spacing~ parent)))
      (while (and scan (> (get-level~ scan) level))
        (increase! total (+ (get-effective-height~ scan) rs))
        (set! scan (get-next~ scan)))
      total))
  
  
  (method public (sons-width)
    (let ((scan next)
          (width 0))
      (while (and scan (> (get-level~ scan) level))
        (let ((w (get-effective-width~ scan)))
          (when (and w (> w width))
            (set! width w)))
        (set! scan (get-next~ scan)))
      width))
  
  
  (method public (first-visible-son)
    (when (not (empty? sons))
      (let ((first (first sons)))
        ;; optimize the 99.999% case
        (if (get-visible-flag~ first)
            first
          (find-if (function (son) (get-visible-flag~ son))
                   sons)))))
  
  
  (method public (previous-visible-row target)
    (let ((previous-visible-sibling (previous-visible-sibling~ target))
          (father (get-father~ target)))
      (either (essay previous-visible-sibling (last-descendant~ previous-visible-sibling))
              (essay father (expanded?~ father) father))))
  
  
  (method public (previous-visible-sibling)
    (let* ((sibling {})
           (siblings (essay father (get-sons~ father)))
           (scan (first siblings))
           (found-self? #f))
      (iterate siblings
               (function (scan)
                 (unless found-self?
                   (if (eq? scan self)
                       (set! found-self? #t)
                     (when (get-visible-flag~ scan)
                       (set! sibling scan))))))
      sibling))
  
  
  (method protected (last-visible-descendant)
    (let ((scan (first-visible-son)))
      (when scan
        (while (and (get-next~ scan) (> (get-level~ (get-next~ scan)) level))
          (set! scan (get-next~ scan)))
        scan)))
  
  
  ;;;
  ;;;; Hierarchy
  ;;;
  
  
  (method public (add-son row position)
    (set-father~ row self)
    (let* ((expanded? (eq? state 'expanded))
           (end (last-descendant~ row))
           (count (cardinality sons))
           (pos <fx> (cond ((not position) count)
                           ((> position count) count)
                           (else position))))
      (when (get-visible-flag~ row)
        (let* ((before (cond ((= pos 0) (if expanded? self {}))
                             ((= pos count) (if expanded? (last-descendant) (last-visible-descendant)))
                             (else (previous-visible-row (element sons pos)))))
               (following (essay before (get-next~ before)))
               (after (cond (expanded? following)
                            (following (essay (> (get-level~ following) level) following))
                            ((and (= pos 0)(/= count 0)) (first-visible-son))
                            (else {}))))
          (link before row)
          (link end after)))
      (set! sons (insert! sons pos row))))
  
  
  (method public (remove-son row)
    (let ((following (next-non-descendant~ row)))
      ;; trying to debug a difficult to reproduce bug
      (when (and following (is-not? following Outline-Row))
        (error "Invalid tree state case #1"))
      (when (get-previous~ row)
        ;; trying to debug a difficult to reproduce bug
        (when (and (get-previous~ row) (is-not? (get-previous~ row) Outline-Row))
          (error "Invalid tree state case #2"))
        (set-next~ (get-previous~ row) following))
      (when following
        (set-previous~ following (get-previous~ row)))
      (set! sons (axis-remove! sons row))))
  
  
  (method public (relink replacement before after)
    (let ((before before))
      (iterate replacement
               (function (row)
                 (when (get-visible-flag~ row)
                   (link before row)
                   (set! before (either (when (expanded?~ row) (last-descendant~ row)) row)))))
      (link before after)))
  
  
  (method public (replace-sons replacement <list> start-row start <fx> end-row end <fx>)
    (let ((before (essay start-row (get-previous~ start-row)))
          (after end-row))
      (relink replacement before after)
      (set! sons (replace-subseq! sons start end replacement))))
  
  
  (method public (reorder-sons replacement <Axis>)
    (let ((before (when (expanded?) self))
          (after (when (expanded?) (next-non-descendant))))
      (relink replacement before after)
      (set! sons replacement)))
  
  
  ;; until we unify link and link-rows
  (method (link before after)
    (when before
      (set-next~ before after))
    (when after
      (set-previous~ after before)))
  
  
  ;; until we unify unlink and unlink-rows
  (method (unlink first last)
    (let ((previous (get-previous~ first))
          (next (get-next~ last)))
      (link previous next)
      (set-previous~ first {})
      (set-next~ last {})))
  
  
  ;;;
  ;;;; Attached?
  ;;;
  
  
  (method public (attached?)
    parent)
  
  
  (method public (detach-descendants)
    (for-each (function (subrow)
                (detach-descendants~ subrow))
              sons))
  
  
  ;;;
  ;;;; Descendants
  ;;;
  
  
  (method protected (first-descendant)
    (when (and (eq? state 'expanded) (not (empty? sons)))
      (first-visible-son)))
  
  
  (method protected (last-proper-descendant)
    (let ((scan (first-descendant)))
      (when scan
        (while (and (get-next~ scan) (> (get-level~ (get-next~ scan)) level))
          (set! scan (get-next~ scan)))
        scan)))
  
  
  (method protected (last-descendant)
    (either (last-proper-descendant)
            self))
  
  
  (method protected (next-non-descendant)
    (get-next~ (last-descendant)))
  
  
  (method protected (visible-sibling-follows?)
    (when father
      (let ((found? #f))
        (some? (function (son)
                 (prog1 (and found? (get-visible-flag~ son))
                   (when (eq? son self)
                     (set! found? #t))))
               (get-sons~ father)))))
  
  
  (method protected (sibling-follows?)
    (and father (neq? self (last (get-sons~ father)))))
  
  
  ;;;
  ;;;; Spine
  ;;;
  
  
  (method public (get-spine)
    (let ((row self)
          (root (get-root-row~ parent))
          (spine '()))
      (while (neq? row root)
        (set! spine (cons row spine))
        (set! row (get-father~ row)))
      spine))
  
  
  ;;;
  ;;;; Debugging
  ;;;
  
  
  (method public (internal-fields)
    (values level state previous next))))
