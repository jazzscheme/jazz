;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Outline View
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.ui.outline.Outline-View jazz


(import (jazz.graphic)
        (jazz.jml)
        (jazz.library)
        (jazz.system)
        (jazz.ui)
        (jazz.ui.view))


(class Outline-View extends View
  
  
  ;;;
  ;;;; Lexicon
  ;;;

  
  ;; displayed : a row that is displayed in the scroller even if only partially
  
  
  (property protected left-padding       <fx> initialize 0  accessors explicit)
  (property protected top-padding        <fx> initialize 0  accessors explicit)
  (property protected background-filler       initialize #f accessors explicit)
  (property protected fit-to-scroller?        initialize #t accessors explicit)
  
  
  (slot protected model              initialize #f)
  (slot protected outline            initialize #f getter generate)
  (slot protected selection          initialize '())
  (slot protected line-size   <fx>   initialize 16)
  (slot protected page-size   <fx>   initialize 320)
  (slot protected hscrollbar? <bool> initialize #f)
  (slot protected vscrollbar? <bool> initialize #f)
  

  ;;;
  ;;;; Initialization
  ;;;
  
  
  (method override (prepare rest)
    (nextmethod rest)
    (setup-model (new-model)))
  
  
  (method protected virtual (new-model)
    )
  
  
  (method protected virtual (setup-model mdl)
    (set! model mdl)
    (setup-outline)
    (add-client~ model self))
  
  
  (method (setup-outline)
    (set! outline (new Display-Outline (get-row-spacing~ model) (get-root-row~ model)))
    (update-displayed))
  
  
  (method override (finish rest)
    (nextmethod rest)
    (layout-scrollee))
  
  
  (method override (destroy)
    (remove-client~ model self)
    (nextmethod))


  ;;;
  ;;;; Events
  ;;;
  
  
  (method override (size-change size)
    (nextmethod size)
    (unless (or update-locked? (not (get-finished?)))
      (layout-scrollee)))
  

  ;;;
  ;;;; Access
  ;;;
  
  
  (method public (get-model)
    model)
  
  
  (method public (set-model model)
    (setup-model model)
    (layout-scrollee)
    (invalidate-view))

  
  (method public (get-left-padding)
    (get-left-padding~ model))
  
  
  (method public (set-left-padding padding)
    (set-left-padding~ model padding))
  
  
  (method public (get-top-padding)
    (get-top-padding~ model))
  
  
  (method public (set-top-padding padding)
    (set-top-padding~ model padding))
  

  (method public (get-background-filler)
    background-filler)


  (method public (set-background-filler value)
    (set! background-filler value)
    (invalidate-view))
  

  (method public (get-fit-to-scroller?)
    fit-to-scroller?)


  (method public (set-fit-to-scroller? value)
    (set! fit-to-scroller? value)
    (layout-scrollee))
  
  
  ;;;
  ;;;; Hierarchy
  ;;;
  
  
  (method override (find-subdrawing surface <Surface> device-pos <Point> pos <Point> ignore)
    (let ((line (v->line (get-v~ pos))))
      (when line
        (let ((row (cast <Outline-Row> (get-row line))))
          (find-in-drawing~ row surface device-pos ignore)))))
  

  ;;;
  ;;;; Layout
  ;;;
  
  
  (method override (layout-scrollee-content)
    (layout-scrollee-content~ model))
  

  ;;;
  ;;;; Scrollee
  ;;;
  
  
  (method override (scrollee-width)
    (let ((width (scrollee-width~ model)))
      (if (and scroller fit-to-scroller?)
          (max (get-display-width) width)
        width)))
  
  
  (method override (scrollee-height)
    (let ((height (scrollee-height~ model)))
      (if (and scroller fit-to-scroller?)
          (max (get-display-height) height)
        height)))
  
  
  (method (scrollee-content-size)
    (scrollee-content-size~ model))
  
  
  (method public virtual (scrollee-content-width)
    (scrollee-content-width~ model))
  
  
  (method public virtual (scrollee-content-height)
    (scrollee-content-height~ model))
  
  
  ;;;
  ;;;; Update
  ;;;
  
  
  (method override (invalidate-update)
    (invalidate-update~ model)
    (update-displayed)
    (layout-scrollee)
    (invalidate-view)
    (update-scrollbars))


  ;;;
  ;;;; Drawing
  ;;;
  
  
  (method override (draw-background surface context)
    (let ((background (cond ((debug-paint?)
                             (cycle-debug-color!))
                            ((not (view-enabled?))
                             {Color Medium})
                            (else
                             (get-drawing-background context)))))
      (when background
        (let ((bounds (get-bounds)))
          (fill-rect~ surface bounds background)))))
  
  
  (method override (draw-children surface nodes context)
    (draw-outline~ model surface context outline (get-scrolled-distance-v)))

  
  ;;;
  ;;;; Rows
  ;;;
  
  
  (method public (get-root-row)
    (get-root-row~ model))
  
  
  (method public (get-row line <fx>) <Outline-Row+>
    ;; this test is necessary because an update lock will stop update-displayed...
    (if update-locked?
        (get-row-from~ outline (get-root-row~ model) (+ line 1))
      (get-row~ outline line)))


  (method protected (call-with-v->line v proc)
    (call-with-v->line~ outline v (get-scrolled-v)
      proc))


  ;;;
  ;;;; Scroll
  ;;;
  
  
  (method package (on-prior evt)
    (prior-page (get-shift?~ evt)))
  
  
  (method protected virtual (prior-page evt)
    (scroll (new Point 0 (get-page-size 'vert))))
  
  
  (method package (on-next evt)
    (next-page (get-shift?~ evt)))
  
  
  (method protected virtual (next-page evt)
    (scroll (new Point 0 (- (get-page-size 'vert)))))
  
  
  (method override (get-line-size orientation)
    (case orientation
      ((vert) (get-default-row-height~ model))
      ((horz) 8)))
  
  
  (method override (scroll-invalidate delta)
    (follow (- (get-y~ delta))))

  
  ;;;
  ;;;; Rows
  ;;;
  
  
  (method protected (add-row-scroll)
    @mvc
    (let* ((line (row->line row))
           (top (row-top line))
           (display (get-display))
           (display-size (get-size~ display))
           (display-width (get-width~ display-size))
           (display-height (get-height~ display-size)))
      (added-update-selection line 1)
      (layout-scrollee)
      (when (< top (- display-height height))
        (scroll-view~ display (new Distance 0 height) (new Rect 0 top display-width (- display-height height))))))
  
  
  (method protected (remove-row-scroll)
    @mvc
    (let* ((display (get-display))
           (display-size (get-size~ display))
           (display-width (get-width~ display-size))
           (display-height (get-height~ display-size)))
      (layout-scrollee)
      (when (and top (< (+ top height) display-height))
        (scroll-view~ display (new Distance 0 (- height)) (new Rect 0 (+ top height) display-width display-height)))))
  
  
  (method protected (remove-every-row)
    (setup-outline)
    (reset-selection)
    (when scroller
      (set-position {Point 0 0})
      (set-size {Dimension 0 0})
      (set-scroll-pos {Point 0 0}))
    (unless update-locked?
      (update-displayed)
      (layout-scrollee)
      (invalidate-view)))
  
  
  (method protected virtual (reset-selection)
    (set! selection '()))
  
  
  (method protected virtual (update-father-control father)
    )
  
  
  (method override (update-displayed)
    (update-displayed~ outline (get-scrolled-distance-v)))
  
  
  (method protected (update-displayed-from line)
    ;; would < be sufficient?
    (when (<= line (get-first-displayed-line~ outline))
      (update-displayed)))


  ;;;
  ;;;; Mouse
  ;;;
  
  
  (method override (mouse-down view)
    (acquire-focus)
    (let ((line (v->line (get-v~ view))))
      (set-selection line)))
  
  
  (method override (double-click view)
    (let ((line (v->line (get-v~ view))))
      (when line
        (expand/collapse~ model (get-row line)))))

  
  ;;;
  ;;;; Selection
  ;;;
  
  
  (method protected virtual (empty-selection)
    '())
  
  
  (method public virtual (get-selection)
    selection)
  
  
  (method public virtual (set-selection sel
                                        (force?: force? #f)
                                        (ensure-displayed?: ensure-displayed? #t)
                                        (generate-event?: generate-event? #t)
                                        (user-origin: user-origin #f))
    (when (or force? #t @parameterized-fix-me (/= sel selection))
      (let ((old selection))
        (set! selection sel)
        (when ensure-displayed?
          (ensure-displayed))
        (when (not-null? old)
          (invalidate-selection old))
        (when (not-null? selection)
          (invalidate-selection selection))
        (when generate-event?
          (call-selection-handler old selection force? user-origin)))))

  
  (method public virtual (invalidate-selection sel)
    (when (view-visible?)
      (with-transformation-surface
        (lambda (surface)
          (with ((region (selection-region sel (lambda (rect) (logical->device~ surface rect)))))
            (invalidate-region~ player region))))))
  
  
  (method protected virtual (selection-region sel transformer)
    (selection-row-region sel transformer))
  
  
  (method protected (selection-row-region line transformer)
    (new Region (transformer (selection-row-rect line))))
    
  
  (method protected virtual (selection-row-rect line)
    (get-rect~ (get-row line)))

  
  ;; update slots that are line based
  (method protected virtual (added-update-selection line count)
    (when (and selection (>= selection line))
      (increase! selection count)))
  
  
  ;; update slots that are line based
  (method protected virtual (removed-update-selection line count)
    (when (not-null? selection)
      (let ((selected? #f))
        (when (>= selection line)
          (if (>= selection (+ line count))
              (decrease! selection count)
            (set! selection '())
            (set! selected? #t)))
        selected?)))
  
  
  (method protected virtual (line-selected? line)
    (= line selection))
  
  
  (method protected virtual (line-draw-selected? line)
    (line-selected? line))
  
  
  ;;;
  ;;;; Scroll
  ;;;
  
  
  (method (follow v)
    (follow~ outline (get-scrolled-distance-v) v))


  (method public virtual (ensure-displayed . rest)
    (when (not-null? selection)
      (debug 'yo)
      (ensure-row-displayed selection)))
  
  
  (method public (ensure-row-displayed line)
    (let* ((row (get-row line))
           (top (get-top~ row))
           (bottom (get-bottom~ row)))
      (scroll (scroll-needed (new Point 0 top) (new Point 0 bottom) (get-scroll-context)))))
  
  
  (method public (ensure-row-range-displayed from to)
    (let ((top (get-top~ (get-row from)))
          (bottom (get-bottom~ (get-row to))))
      (scroll (scroll-needed (new Point 0 top) (new Point 0 bottom) (get-scroll-context)))))
  
  
  (method public (ensure-at-end)
    (ensure-row-displayed (- (get-visible-count~ model) 1)))
  
  
  (method protected virtual (get-scroll-context)
    (cons 0.15 0.20))
  

  ;;;
  ;;;; Coordinates
  ;;;
  
  
  ;; This method gets called before the row is layed out.
  ;; This is why it cannot simply get the position of the row...
  (method protected (row-top line)
    (let ((row (first-visible-row~ model))
          (v 0))
      (while (> line 0)
        (decrease! line)
        (increase! v (get-height~ row))
        (increase! v (get-row-spacing~ model))
        (set! row (get-next~ row)))
      v))
  
  
  (method protected virtual (line-rect line)
    (let ((row   (get-row line))
          (left  0)
          (top   (row-top line))
          (right (get-width)))
      (new Rect left top right (+ top (get-height~ row)))))
  
  
  (method (row-region line)
    (new Region (get-bounds~ (get-row line))))
  
  
  (method protected (line->v l)
    (get-top~ (get-row l)))


  (method protected (v->line v)
    (call-with-v->line v
      (lambda (line v height)
        line)))
  
  
  ;;;
  ;;;; Descriptor
  ;;;
  
  
  (method meta override (get-class-descriptor)
    (new Outline-View-Descriptor)))


;;;
;;;; Design
;;;


(submodule design


(import (jazz.designer))


(class Outline-View-Descriptor extends View-Descriptor)))
