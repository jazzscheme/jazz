;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Picker
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.ui.picker jazz


(import (jazz.graphic)
        (jazz.jml)
        (jazz.library)
        (jazz.literals)
        (jazz.platform)
        (jazz.system)
        (jazz.ui)
        (jazz.ui.development)
        (jazz.ui.offscreen)
        (jazz.ui.view)
        (jazz.ui.window)
        (jazz.utilities))


;; Lexicon
;; - picker : view added to the root to override mouse events


(definition In-Pick?
  #f)

(definition All-Pickers
  '())

(definition *highlighted-picker*
  {})


(definition public (pick-figure (include: include {})
                                (exclude: exclude {})
                                (click: click {})
                                (menu: menu {})
                                (highlight: highlight {})
                                (highlight-root-only?: highlight-root-only? #f)
                                (report-figure?: report-figure? #t)
                                (obscure-unhighlighted?: obscure-unhighlighted? #t)
                                (tooltips?: tooltips? #t))
  (unless In-Pick?
    (with-locked-update
      (function ()
        (let ((windows (process-windows)))
          (when (not-null? windows)
            (setup-pick)
            (set! All-Pickers '())
            (for-each (function (overlapped)
                        (when (and (or (not include) (memq? overlapped include))
                                   (or (not exclude) (not (memq? overlapped exclude))))
                          (let ((picker (install-picker overlapped click menu highlight highlight-root-only? report-figure? obscure-unhighlighted? tooltips?)))
                            (invalidate-view~ picker)
                            (set! All-Pickers (cons picker All-Pickers)))))
                      windows)
            (set! In-Pick? #t)))))))


(definition (install-picker overlapped click menu highlight highlight-root-only? report-figure? obscure-unhighlighted? tooltips?)
  (let ((root (get-root~ overlapped)))
    (new Picker-Overlay
      parent: root
      position: {Point 0 0}
      size: (get-size~ root)
      click: click
      menu: menu
      highlight: highlight
      highlight-root-only?: highlight-root-only?
      report-figure?: report-figure?
      obscure-unhighlighted?: obscure-unhighlighted?
      tooltips?: tooltips?)))


(definition (remove-picker picker)
  (close~ picker))


(definition (shortcut-hook shortcut)
  (cond ((shortcut=? shortcut {Shortcut Escape})
         (with-locked-update
           (function ()
             (end-pick)
             (clear-user-message)))
         #f)
        ((not *highlighted-picker*)
         #f)
        (else
         (let ((highlighted-view (get-highlighted-view~ *highlighted-picker*))
               (highlighted-position (get-highlighted-position~ *highlighted-picker*)))
           (define (setup-view view)
             (let ((pos (acquire~ view highlighted-view highlighted-position)))
               (default-highlight~ *highlighted-picker* view pos)
               (update-tooltip~ view (display-description (view-describe view pos)))
               (user-message "{a}" view)))
           
           (cond ((shortcut=? shortcut {Shortcut Up})
                  (let ((parent (get-parent~ highlighted-view)))
                    (if (not parent)
                        (bell)
                      (setup-view parent)))
                  #t)
                 ((shortcut=? shortcut {Shortcut Down})
                  (let ((first (first-view~ highlighted-view)))
                    (if (not first)
                        (bell)
                      (setup-view first)))
                  #t)
                 ((shortcut=? shortcut {Shortcut Right})
                  (let ((brother (next-brother~ highlighted-view type: View)))
                    (if (eq? brother highlighted-view)
                        (bell)
                      (setup-view brother)))
                  #t)
                 ((shortcut=? shortcut {Shortcut Left})
                  (let ((brother (previous-brother~ highlighted-view type: View)))
                    (if (eq? brother highlighted-view)
                        (bell)
                      (setup-view brother)))
                  #t)
                 ((shortcut=? shortcut {Shortcut Return})
                  (end-pick)
                  (let ((click (get-click~ *highlighted-picker*)))
                    (click highlighted-view highlighted-position))
                  #f)
                 (else
                  #f))))))


(definition (display-description description)
  (cons "Properties"
        (map (function (info)
               (bind (name value) info
                 (list :bulleted (format "{a}: {s}" name value))))
             description)))


(definition (find-picker view)
  (find-type~ view Picker-Overlay))


(definition (setup-pick)
  (set-shortcut-hook~ (get-application) shortcut-hook))


(definition (end-pick)
  (set! In-Pick? #f)
  (set-shortcut-hook~ (get-application) {})
  (close-pickers))


(definition (close-pickers)
  (for-each remove-picker All-Pickers)
  (set! All-Pickers '()))


;;;
;;;; Picker
;;;


(class Picker-Overlay extends View
  
  
  (property click                  accessors generate)
  (property menu                   accessors generate)
  (property highlight              accessors generate)
  (property highlight-root-only?   accessors generate)
  (property report-figure?         accessors generate)
  (property obscure-unhighlighted? accessors generate)
  (property tooltips?              accessors generate)
  
  
  (slot highlighted-view      initialize {} getter generate)
  (slot highlighted-rect      initialize {} getter generate)
  (slot highlighted-position  initialize {} getter generate)
  (slot last-mouse-position   initialize {} getter generate)

  
  ;;;
  ;;;; Cursor
  ;;;
  
  
  (method (cursor-update pos)
    (set-cursor :spy))
  
  
  ;;;
  ;;;; Tooltip
  ;;;
  
  
  (method (close-self-tooltip)
    (when *current-tooltip-context*
      (close-tooltip)))
  
  
  (method (get-tooltip?)
    tooltips?)
  
  
  (method (get-formatted-tooltip?)
    #t)
  
  
  (method (calculate-tooltip-bounds view pos)
    (when view
      (or (get-tooltip-bounds~ view pos)
          (let ((display (get-display~ view)))
            (acquire~ view display (get-bounds~ display))))))
  
  
  (method (get-tooltip-bounds pos)
    (receive (view pos) (find-view-info pos)
      (calculate-tooltip-bounds view pos)))
  
  
  (method (get-tooltip-context pos)
    (receive (view pos) (find-view-info pos)
      (when view
        (new Tooltip-Context
          view: view
          text: (display-description (view-describe view pos))
          bounds: (calculate-tooltip-bounds view pos)
          font: {Font name: Label}))))
  
  
  ;;;
  ;;;; Mouse
  ;;;
  
  
  (method (mouse-move pos)
    (nextmethod pos)
    (unless (and last-mouse-position (nu=? last-mouse-position pos))
      (set! last-mouse-position pos)
      (receive (view pos) (find-view-info pos)
        (case highlight
          ((#f))
          ((#t) (default-highlight view pos))
          (else (highlight view pos)))
        (when report-figure?
          (if (not view)
              (user-message "{a}" self)
            (user-message "{a}" view))))))
  
  
  (method (mouse-up pos)
    (nextmethod pos)
    (receive (view pos) (find-view-info pos)
      (with-locked-update
        (function ()
          (end-pick)
          (click view pos)))))
  
  
  (method (find-view-info pos)
    (let* ((root (get-root))
           (root-pos (acquire~ root self pos))
           (view (find-drawing~ root root-pos ignore: (list self)))
           (view-pos (essay view (acquire~ view root root-pos))))
      (values view view-pos)))
  
  
  ;;;
  ;;;; Highlight
  ;;;
  
  
  (method (default-highlight view pos)
    (define (highlight-info view pos)
      (let ((root (get-root~ (get-player~ view))))
        (let ((picker (find-picker root))
              (rect (if highlight-root-only?
                        (get-bounds~ root)
                      (acquire~ root view (calculate-tooltip-bounds view pos)))))
          (values picker view rect))))
    
    (define (redraw same-picker? picker view)
      (if same-picker?
          (when view
            (let ((player (get-player~ view))
                  (rect (acquire~ (get-root~ view) view (inflate-rect (get-bounds~ view) 1 1))))
              (redraw-window~ player rect: rect)))
        (when picker
          (redraw-view~ picker))))
    
    (receive (picker view rect) (highlight-info view pos)
      (unless (and (eq? *highlighted-picker* picker)
                   (eq? highlighted-view view)
                   (nu=? highlighted-rect rect))
        (let ((same-picker? (eq? picker *highlighted-picker*))
              (old-picker *highlighted-picker*)
              (old-view highlighted-view))
          (set! *highlighted-picker* picker)
          (set! highlighted-view view)
          (set! highlighted-rect rect)
          (set! highlighted-position pos)
          (redraw same-picker? old-picker old-view)
          (redraw same-picker? *highlighted-picker* highlighted-view)))))
  
  
  ;;;
  ;;;; Menu
  ;;;
  
  
  (method (context-menu pos)
    (if (not menu)
        (nextmethod pos)
      (close-popups)
      (receive (view pos) (find-view-info pos)
        (let ((root (get-root))
              (menu (menu view pos)))
          (setup-actions menu view pos)
          (track-popup-menu~ root menu (acquire~ root view pos))
          processed))))
  
  
  (method (setup-actions menu view pos)
    (for-each (function (item)
                (let* ((action-handler (get-action-handler~ item))
                       (execute (function (event)
                                  (end-pick)
                                  (when action-handler
                                    (let* ((properties (augment view: view pos: pos (get-properties~ action-handler)))
                                           (event (apply new Action-Event :action self properties)))
                                      (invoke~ action-handler self event))))))
                  (set-action-handler~ item (new Event-Handler execute: execute))))
              (get-children~ menu)))
  
  
  ;;;
  ;;;; Draw
  ;;;
  
  
  (definition Overlay-Color
    {Color name: Black alpha: 0.25})
  
  (definition Highlight-Color
    {Color red: 109 green: 109 blue: 177})
    
  
  (method (draw surface context lh lv)
    (define (highlighter surface)
      (set-style~ surface 'solid)
      (set-line-width~ surface 2)
      (set-color~ surface Highlight-Color))
    
    (cond ((or (not *highlighted-picker*) (neq? (get-root) (get-root~ *highlighted-picker*)))
           (when obscure-unhighlighted?
             (fill-rect~ surface (get-bounds) Overlay-Color)))
          (highlighted-rect
           (rectangle~ surface highlighted-rect highlighter {}))))))
