;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Bindings Tree
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.ui.preference.Bindings-Tree jazz


(import (jazz.ui)
        (jazz.jml)
        (jazz.library))


(class undocumented Bindings-Tree extends Tree-View
  
  
  ;;;
  ;;;; Update
  ;;;
  
  
  (definition category-icon
    {Image-Resource "TypeLib"})
  
  (definition action-icon
    {Image-Resource "Script"})
  
  (definition shortcut-icon
    {Image-Resource "Link"})
  
  
  (method protected (view-bindings designer bindings what kind)
    (define (view-actions-list)
      (for-each (lambda (action)
                  (let ((shortcut (get-shortcut~ action))
                        (alternate-shortcut (get-alternate-shortcut~ action))
                        (owner (new Tree-Image image: (shortcut-owner-image designer action))))
                    (add-row children: (list (new Tree-Node title: (format "{a}.{a}" (get-name~ (get-parent~ action)) (get-name~ action)) image: action-icon) (new Tree-Label title: (present-shortcut shortcut)) (new Tree-Label title: (present-shortcut alternate-shortcut)) owner) user-data: action)))
                bindings))
    
    (define (view-actions-flat)
      (for-each (lambda (actions)
                  (when (is? actions Actions)
                    (for-each (lambda (action)
                                (let ((shortcut (get-shortcut~ action))
                                      (alternate-shortcut (get-alternate-shortcut~ action))
                                      (owner (new Tree-Image image: (shortcut-owner-image designer action))))
                                  (add-row children: (list (new Tree-Node title: (format "{a}.{a}" (get-name~ actions) (get-name~ action)) image: action-icon) (new Tree-Label title: (present-shortcut shortcut)) (new Tree-Label title: (present-shortcut alternate-shortcut)) owner) user-data: action)))
                              (get-children~ actions))))
                (get-children~ bindings)))
    
    (define (view-actions-categorized)
      (for-each (lambda (actions)
                  (when (is? actions Actions)
                    (let ((row (add-row children: (list (new Tree-Node title: (->string (get-name~ actions)) image: category-icon) (new Tree-Label title: "") (new Tree-Label title: "") (new Tree-Image)) user-data: actions)))
                      (for-each (lambda (action)
                                  (let ((shortcut (get-shortcut~ action))
                                        (alternate-shortcut (get-alternate-shortcut~ action))
                                        (owner (new Tree-Image image: (shortcut-owner-image designer action))))
                                    (add-row father: row children: (list (new Tree-Node title: (->string (get-name~ action)) image: action-icon) (new Tree-Label title: (present-shortcut shortcut)) (new Tree-Label title: (present-shortcut alternate-shortcut)) owner) user-data: action)))
                                (get-children~ actions)))))
                (get-children~ bindings)))
    
    (define (view-shortcuts-flat)
      (for-each (lambda (partition)
                  (bind (modifiers . bindings) partition
                    (for-each (lambda (binding)
                                (bind (shortcut action conflict) binding
                                  (let ((conflict (new Tree-Image image: (case conflict ((warning) {Image-Resource "Gray"}) ((conflict) {Image-Resource "Red"}) (else {}))))
                                        (owner (new Tree-Image image: (shortcut-owner-image designer action))))
                                    (add-row children: (list (new Tree-Node title: (present-modifiers shortcut) image: shortcut-icon) (new Tree-Label title: (present-key shortcut)) (new Tree-Label title: (format "{a}.{a}" (get-name~ (get-parent~ action)) (get-name~ action))) conflict owner) user-data: action))))
                              (sort nu<? bindings key: (lambda (binding)
                                                         (present-shortcut (car binding)))))))
                (partition-bindings (gather-bindings))))
    
    (define (view-shortcuts-categorized)
      (for-each (lambda (partition)
                  (bind (modifiers . bindings) partition
                    (let ((row (add-row children: (list (new Tree-Node title: (format "{l}" modifiers) image: category-icon) (new Tree-Label title: "") (new Tree-Label title: "") (new Tree-Image) (new Tree-Image)))))
                      (for-each (lambda (binding)
                                  (bind (shortcut action conflict) binding
                                    (let ((conflict (new Tree-Image image: (case conflict ((warning) {Image-Resource "Gray"}) ((conflict) {Image-Resource "Red"}) (else {}))))
                                          (owner (new Tree-Image image: (shortcut-owner-image designer action))))
                                      (add-row father: row children: (list (new Tree-Node title: (present-modifiers shortcut) image: shortcut-icon) (new Tree-Label title: (present-key shortcut)) (new Tree-Label title: (format "{a}.{a}" (get-name~ (get-parent~ action)) (get-name~ action))) conflict owner) user-data: action))))
                                (sort nu<? bindings key: (lambda (binding)
                                                           (present-shortcut (car binding))))))))
                (partition-bindings (gather-bindings))))
    
    (define (gather-bindings)
      (let ((queue (new-queue))
            (table (make-table test: shortcut=? hash: shortcut-hash)))
        (define (add-binding shortcut action)
          (enqueue queue (list shortcut action {}))
          (table-add table shortcut action))
        
        (define (flag-conflicts! bindings)
          (for-each (lambda (binding)
                      (bind (shortcut action conflict) binding
                        (let ((actions (table-ref table shortcut {})))
                          (let ((conflicts (collect (lambda (act)
                                                      (and (neq? act action)
                                                           (if (eq? (get-parent~ act)
                                                                    (get-parent~ action))
                                                               'conflict
                                                             'warning)))
                                                    actions)))
                            (when (not-null? conflicts)
                              (set-third! binding (if (memq? 'conflict conflicts)
                                                      'conflict
                                                    'warning)))))))
                    bindings))
        
        (for-each (lambda (actions)
                    (when (is? actions Actions)
                      (for-each (lambda (action)
                                  (let ((shortcut (get-shortcut~ action))
                                        (alternate-shortcut (get-alternate-shortcut~ action)))
                                    (when shortcut
                                      (add-binding shortcut action))
                                    (when alternate-shortcut
                                      (add-binding alternate-shortcut action))))
                                (get-children~ actions))))
                  (get-children~ bindings))
        
        (let ((bindings (queue-list queue)))
          (flag-conflicts! bindings)
          bindings)))
    
    (define (partition-bindings bindings)
      (sort nu<? (partition bindings key: (lambda (binding)
                                            (get-modifiers~ (car binding)))
                   test: equal?)
        key: (lambda (partition)
               (format "{l}" (car partition)))))
    
    (define (present-modifiers shortcut)
      (format "{l}" (get-modifiers~ shortcut)))
    
    (define (present-key shortcut)
      (format "{a}" (get-key~ shortcut)))
    
    (remove-every-row)
    (with-update-locked
      (lambda ()
        (case what
          ((actions)
           (case kind
             ((list) (view-actions-list))
             ((flat) (view-actions-flat))
             ((categorized) (view-actions-categorized))))
          ((shortcuts)
           (case kind
             ((flat) (view-shortcuts-flat))
             ((categorized) (view-shortcuts-categorized))))))))
  
  
  (method protected (present-shortcut shortcut)
    (if (not shortcut)
        ""
      (present~ shortcut)))
  
  
  (method protected (shortcut-owner-image designer component)
    (let ((shortcut-owner (find-owner~ designer component 'shortcut))
          (alternate-owner (find-owner~ designer component 'alternate-shortcut)))
      (cond ((or (is? shortcut-owner Branch) (is? alternate-owner Branch)) (branch-owner-image))
            ((or (eq? shortcut-owner (get-reference~ designer)) (eq? alternate-owner (get-reference~ designer))) (root-owner-image))
            (else (default-owner-image)))))
  
  
  (method (default-owner-image)
    {})
  
  
  (method (root-owner-image)
    {Image-Resource "OwnerRoot"})
  
  
  (method (branch-owner-image)
    {Image-Resource "OwnerBranch"}))


;;;
;;;; Actions Tree
;;;


(class BindingsByActions-Tree extends Bindings-Tree
  
  
  (form
    (<install>                                      portfolio: :images filled-column: action
      (<Tree-Node-Column>  name: action             title: "Action" width: 235 toplevel-controls?: #f)
      (<Tree-Label-Column> name: shortcut           title: "Shortcut" width: 115)
      (<Tree-Label-Column> name: alternate-shortcut title: "Alternate Shortcut" width: 115)
      (<Tree-Image-Column> name: owner              title: "!" width: 25 justification: center))))


;;;
;;;; Shortcuts Tree
;;;


(class BindingsByShortcuts-Tree extends Bindings-Tree
  
  
  (form
    (<install>                                      portfolio: :images filled-column: action
      (<Tree-Node-Column>  name: modifier           title: "Modifier" width: 110 toplevel-controls?: #f)
      (<Tree-Label-Column> name: key                title: "Key" width: 60)
      (<Tree-Label-Column> name: action             title: "Action" width: 235)
      (<Tree-Image-Column> name: conflict           title: "Conflict" width: 80 justification: center)
      (<Tree-Image-Column> name: owner              title: "!" width: 25 justification: center)))))
