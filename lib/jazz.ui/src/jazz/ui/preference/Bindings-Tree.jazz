;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Bindings Tree
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.ui.preference.Bindings-Tree jazz


(import (jazz.ui)
        (jazz.jml)
        (jazz.library))


(class undocumented Bindings-Tree extends Tree-View
  
  
  (form
    (<install>                                 portfolio: :icons filled-column: name
      (<Tree-Node-Column>  name: name          title: "Name" width: 235 toplevel-controls?: #f)
      (<Tree-Label-Column> name: key           title: "Key" width: 115)
      (<Tree-Label-Column> name: alternate-key title: "Alternate" width: 115)
      (<Tree-Image-Column> name: owner         title: "!" width: 25 justification: center)))
  
  
  ;;;
  ;;;; Update
  ;;;
  
  
  (method protected (view-bindings designer bindings kind)
    (define (view-categorized)
      (for-each (lambda (actions)
                  (when (is? actions Actions)
                    (let ((row (add-row children: (list (new Tree-Node title: (->string (get-name~ actions)) image: {Bitmap-Resource "TypeLib"}) (new Tree-Label title: "") (new Tree-Label title: "") (new Tree-Image)) user-data: actions)))
                      (for-each (lambda (action)
                                  (let ((shortcut (get-shortcut~ action))
                                        (alternate (get-alternate-shortcut~ action))
                                        (owner (new Tree-Image image: (shortcut-owner-image designer action))))
                                    (add-row father: row children: (list (new Tree-Node title: (->string (get-name~ action)) image: {Bitmap-Resource "Link"}) (new Tree-Label title: (present-shortcut shortcut)) (new Tree-Label title: (present-shortcut alternate)) owner) user-data: action)))
                                (get-children~ actions)))))
                (get-children~ bindings)))
    
    (define (view-flat)
      (for-each (lambda (actions)
                  (when (is? actions Actions)
                    (for-each (lambda (action)
                                (let ((shortcut (get-shortcut~ action))
                                      (alternate (get-alternate-shortcut~ action))
                                      (owner (new Tree-Image image: (shortcut-owner-image designer action))))
                                  (add-row children: (list (new Tree-Node title: (format "{a}.{a}" (get-name~ actions) (get-name~ action)) image: {Bitmap-Resource "Link"}) (new Tree-Label title: (present-shortcut shortcut)) (new Tree-Label title: (present-shortcut alternate)) owner) user-data: action)))
                              (get-children~ actions))))
                (get-children~ bindings)))
    
    (define (view-list)
      (for-each (lambda (action)
                  (let ((shortcut (get-shortcut~ action))
                        (alternate (get-alternate-shortcut~ action))
                        (owner (new Tree-Image image: (shortcut-owner-image designer action))))
                    (add-row children: (list (new Tree-Node title: (format "{a}.{a}" (get-name~ (get-parent~ action)) (get-name~ action)) image: {Bitmap-Resource "Link"}) (new Tree-Label title: (present-shortcut shortcut)) (new Tree-Label title: (present-shortcut alternate)) owner) user-data: action)))
                bindings))
    
    (with-update-locked
      (lambda ()
        (remove-every-row)
        (case kind
          ((categorized) (view-categorized))
          ((flat) (view-flat))
          ((list) (view-list))))))
  
  
  (method protected (present-shortcut shortcut)
    (if (not shortcut)
        ""
      (present~ shortcut)))
  
  
  (method protected (shortcut-owner-image designer component)
    (let ((shortcut-owner (find-owner~ designer component 'shortcut))
          (alternate-owner (find-owner~ designer component 'alternate-shortcut)))
      (cond ((or (is? shortcut-owner Branch) (is? alternate-owner Branch)) (branch-owner-image))
            ((or (eq? shortcut-owner (get-reference~ designer)) (eq? alternate-owner (get-reference~ designer))) (root-owner-image))
            (else (default-owner-image)))))
  
  
  (method (default-owner-image)
    {})
  
  
  (method (root-owner-image)
    {Bitmap-Resource "OwnerRoot"})
  
  
  (method (branch-owner-image)
    {Bitmap-Resource "OwnerBranch"})))
