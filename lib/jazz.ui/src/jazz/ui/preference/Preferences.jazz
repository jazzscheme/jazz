;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Preferences
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.ui.preference.Preferences jazz


(import (jazz.jml)
        (jazz.library)
        (jazz.ui))


(class undocumented Preferences extends Component
  
  
  (property title initialize #f accessors generate)
  (property icon  initialize #f accessors generate)
  
  
  ;;;
  ;;;; Applying
  ;;;
  
  
  (method public virtual (apply-preferences (client #f))
    (for-each (lambda (child)
                (apply-preferences~ child client))
              children))
  
  
  ;;;
  ;;;; Saving
  ;;;
  
  
  (method public virtual (save-preferences designer (client #f))
    (for-each (lambda (child)
                (save-preferences~ child client))
              children))
  
  
  (method public (set-property designer property value)
    (set-property~ designer self property value))
  
  
  ;;;
  ;;;; Descriptor
  ;;;
  
  
  (method meta override (get-class-descriptor)
    (new Preferences-Descriptor)))


;;;
;;;; Design
;;;


(submodule design


(import (jazz.designer))


(class Preferences-Descriptor extends Component-Descriptor
  
  
  (form
    (<install>
      (<properties~>
        (<Property-Descriptor> name: title
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: icon
          (<Value-Domain>      name: domain)))))
  
  
  (method override (component-get-component-image component)
    (or (get-icon~ component) {Image-Resource "OpenedFolder"}))
  
  
  (method override (component-presentation-property? component property)
    (memq? (field-name property) '(title)))
  
  
  (method override (component-get-presentation component)
    (get-title~ component))
  
  
  (method override (component-set-presentation component designer title)
    (set-property~ designer component title: title)))))
