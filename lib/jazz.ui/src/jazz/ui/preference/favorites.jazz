;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Favorites Preferences
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.ui.preference.favorites jazz


(import (jazz.designer)
        (jazz.jml)
        (jazz.library)
        (jazz.ui))


;;;
;;;; Preferences
;;;


(class undocumented Favorites-Preferences extends Preferences
  
  
  (form
    (<install> title: "Favorites"))
  
  
  ;;;
  ;;;; Descriptor
  ;;;
  
  
  (method meta override (get-class-descriptor (context: context #f))
    (new Favorites-Preferences-Descriptor)))


;;;
;;;; Design
;;;


(submodule design


(class Favorites-Preferences-Descriptor extends Preferences-Descriptor
  
  
  (form
    (<install>       can-rename?: #f can-delete?: #f can-relocate?: #f can-copy?: #f
      (<properties~>)))
  
  
  (method override (component-get-categorized-addable-classes component)
    (list
      (list
        (reference Favorite-Configuration))))
  
  
  (method override (component-get-addable-details component)
    '((shortcut 100 #f) (target 300 #t))))


;;;
;;;; Configuration
;;;


(class undocumented Favorite-Configuration extends Preferences


  (property shortcut initialize #f accessors generate)
  (property target   initialize #f accessors generate)
  
  
  (form
    (<install> icon: {Image-Resource "Link"}))
  
  
  ;;;
  ;;;; Domain
  ;;;
  
  
  (method meta override (get-domain property)
    (case (field-name property)
      ((shortcut) (new String-Domain))
      (else (nextmethod property))))
  
  
  ;;;
  ;;;; Descriptor
  ;;;
  
  
  (method meta override (get-class-descriptor (context: context #f))
    (new Favorite-Configuration-Descriptor)))


;;;
;;;; Design
;;;


(submodule design


(class Favorite-Configuration-Descriptor extends Preferences-Descriptor
  
  
  (form
    (<install>                 title: "Favorite"
      (<properties~>
        (<Property-Descriptor> name: shortcut
          (<String-Domain>     name: domain))
        (<Property-Descriptor> name: target
          (<Value-Domain>      name: domain)))))
  
  
  (method override (component-presentation-property? component property)
    (memq? (field-name property) '(shortcut)))
  
  
  (method override (component-get-presentation component)
    (or (get-shortcut~ component)
        "{}"))
  
  
  (method override (component-set-presentation component designer shortcut)
    (set-property~ designer component shortcut: shortcut))))))
