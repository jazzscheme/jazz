;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Presentations
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.ui.presentation.Presentation jazz


(import (jazz.jml)
        (jazz.library)
        (jazz.literals)
        (jazz.system)
        (jazz.ui)
        (jazz.ui.view)
        (jazz.ui.window)
        (jazz.utilities))


(class Presentation extends Layout-View
    
  
  (property gradient-start initialize {} accessors generate)
  (property gradient-end   initialize {} accessors generate)

  
  (form
    (<install>
      (<Presentation-Content> name: content position: {Point 0 0} size: {Dimension 605 465})))


  ;;;
  ;;;; Host
  ;;;
  
  
  (method (host-workspaces)
    '(navigator))
  
  
  ;;;
  ;;;; Actions
  ;;;
  

  (method (guest-actions)
    (cons (find-actions 'presentation)
          (nextmethod)))


  ;;;
  ;;;; Access
  ;;;
  
  
  (method public (get-content)
    (locate 'content))
  
  
  (method public (get-conductor)
    (locate-component 'conductor))
  

  ;;;
  ;;;; Size
  ;;;
  
  
  (method (size-change size)
    (nextmethod size)
    (let* ((content (get-content))
           (scaling (fit-rects (size-rect (get-size~ content)) (size-rect size) 'both)))
      (set-scaling~ content scaling)
      (set-scaled?~ content #t)))


  ;;;
  ;;;; Events
  ;;;
  
  
  (method public (on-first-slide evt)
    (let* ((viewer (find-palette Navigation-Branches))
           (tree (get-tree~ viewer)))
      (home-action~ tree)))
  
  
  (method public (on-previous-slide evt)
    (let* ((viewer (find-palette Navigation-Branches))
           (tree (get-tree~ viewer)))
      (up-arrow-action~ tree NoModifiers #f)))
  
  
  (method public (on-next-slide evt)
    (let* ((viewer (find-palette Navigation-Branches))
           (tree (get-tree~ viewer)))
      (down-arrow-action~ tree NoModifiers #f)))
  
  
  (method public (on-last-slide evt)
    (let* ((viewer (find-palette Navigation-Branches))
           (tree (get-tree~ viewer)))
      (end-action~ tree)))


  ;;;
  ;;;; Slides
  ;;;
  
  
  (method (slide-installed)
    )


  ;;;
  ;;;; Mouse
  ;;;
  
  
  (method (mouse-down pos)
    (acquire-focus))


  ;;;
  ;;;; Cursor
  ;;;
  
  
  (method (cursor-update view)
    (if (eq? self (get-focus))
        (set-cursor :finger)
      (set-cursor :no)))


  ;;;
  ;;;; Drawing
  ;;;

  
  (method (draw surface context lh lv)
    (when (and gradient-start gradient-end)
      (let ((bounds (get-bounds)))
        (gradient-fill~ surface bounds (list (list 0 gradient-start) (list 1 gradient-end))))))


  ;;;
  ;;;; Designer
  ;;;
  
  
  (method (get-addable-branches)
    (list
      Slide
      {}
      Basic-Slide))))
