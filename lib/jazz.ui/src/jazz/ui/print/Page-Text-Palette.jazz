;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Page Text-Palette
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.ui.print.Page-Text-Palette jazz


(import (jazz.jml)
        (jazz.library)
        (jazz.system)
        (jazz.ui))


(class undocumented Page-Text-Palette extends Text-Palette


  (form
    (<install>
      (<!>         name: style-border    visible?: #f)
      (<!>         name: ruler-separator visible?: #f)
      (<!>         name: toggle-ruler    visible?: #f)
      (<!>         name: image-separator visible?: #f)
      (<!>         name: insert-image    visible?: #f)
      @wait
      (<!>         name: table-separator visible?: #f)
      @wait
      (<!>         name: insert-table    visible?: #f)
      (<Separator>)
      (<Push-Tool> name: insert-filename size: {Dimension 22 22} tooltip?: #t tooltip-text: "Insert File Name" resource: {Image-Resource "PageFilename"} portfolio: :images enabled?: #f action-handler: {Event-Handler :focus on-insert-filename})
      (<Push-Tool> name: insert-no       size: {Dimension 22 22} tooltip?: #t tooltip-text: "Insert Page No" resource: {Image-Resource "PageNo"} portfolio: :images enabled?: #f action-handler: {Event-Handler :focus on-insert-no})
      (<Push-Tool> name: insert-count    size: {Dimension 22 22} tooltip?: #t tooltip-text: "Insert Page Count" resource: {Image-Resource "PageCount"} portfolio: :images enabled?: #f action-handler: {Event-Handler :focus on-insert-count})
      (<Push-Tool> name: insert-date     size: {Dimension 22 22} tooltip?: #t tooltip-text: "Insert Date" resource: {Image-Resource "PageDate"} portfolio: :images enabled?: #f action-handler: {Event-Handler :focus on-insert-date})
      (<Push-Tool> name: insert-time     size: {Dimension 22 22} tooltip?: #t tooltip-text: "Insert Time" resource: {Image-Resource "PageTime"} portfolio: :images enabled?: #f action-handler: {Event-Handler :focus on-insert-time})))

  
  ;;;
  ;;;; Host
  ;;;
  
  
  (method override (host-install)
    (let ((appl (get-application)))
      (add-focus-listener~ appl (new Event-Handler target: self method-name: 'on-focus-change))))
  
  
  (method override (host-uninstall)
    (let ((appl (get-application)))
      (remove-focus-listener~ appl self)))
  
  
  (method override (client-activate)
    )
  
  
  (method override (client-deactivate)
    )

  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method (on-focus-change evt)
    (let ((appl (get-application))
          (focus (get-focus~ evt)))
      @convert
      (when (and (is? old-focus Formatted-Text-View)
                 (text-listener?~ old-focus self))
        (remove-text-listener~ old-focus self))
      (when (and (is? focus Formatted-Text-View)
                 (not (text-listener?~ focus self)))
        (add-text-listener~ focus (new Event-Handler target: self method-name: 'on-text))
        (set-client focus))
      (enable-buttons
        (and focus
             (or (and (is? focus Formatted-Text-View)
                      (text-listener?~ focus self))
                 (let ((host (get-host~ focus)))
                   (and host
                        (eq? (get-guest~ host) self))))))))
  
  
  (method (on-text evt)
    (case (get-kind~ evt)
      ((:selection-change) (selection-change))))
  
  
  (method override (enable-buttons enabled?)
    (nextmethod enabled?)
    (set-enabled?~ (locate 'insert-filename) enabled?)
    (set-enabled?~ (locate 'insert-no) enabled?)
    (set-enabled?~ (locate 'insert-count) enabled?)
    (set-enabled?~ (locate 'insert-date) enabled?)
    (set-enabled?~ (locate 'insert-time) enabled?))))
