;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Print Job
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.ui.print.Print-Job jazz


(import (jazz.geometry)
        (jazz.graphic)
        (jazz.ui))


(class undocumented Print-Job extends Object
  
  
  (slot surface)
  (slot selection? getter generate)
  (slot from       getter generate)
  (slot to         getter generate)
  (slot nb-copies  getter generate)
  (slot client     getter generate)
  (slot page-setup)
  (slot resolution)
  (slot scaling)
  (slot zoom)
  (slot pages      getter generate)
  
  
  (method override (initialize surface client page-setup resolution
                     (scaling: scaling #f)
                     (zoom: zoom #f)
                     (selection?: selection? #f)
                     (from: from #f)
                     (to: to #f)
                     (nb-copies: nb-copies 1))
    (nextmethod)
    (set! surface~self surface)
    (set! selection?~self selection?)
    (set! from~self from)
    (set! to~self to)
    (set! nb-copies~self nb-copies)
    (set! client~self client)
    (set! page-setup~self page-setup)
    (set! resolution~self resolution)
    (set! scaling~self (or scaling (scale-content~ page-setup client resolution)))
    (set! zoom~self zoom)
    (set! pages (paginate)))
  
  
  ;;;
  ;;;; Access
  ;;;
  
  
  (method public (get-dc)
    surface)
  
  
  (method public (get-page n)
    (element pages n))
  
  
  ;;;
  ;;;; Print
  ;;;
  
  
  (method public (print-job)
    (with-document
      (lambda ()
        (loop (repeat nb-copies)
              (print-document)))))
  
  
  (method (print-document)
    (for-each (lambda (page no)
                (with-page no
                  (lambda ()
                    (print-page surface page no))))
              pages
              (naturals (if from (- from 1) 0)
                        (if to to (length pages)))))
  
  
  (method public (print-page surface page no)
    (define (print-context no)
      (list
        printing?: #t
        ;; metamodeler-extra : should get this setting from the page-setup
        print-black/white?: #f
        print-selection?: selection?
        filename: (or (client-filename) "New")
        page-no: no
        page-count: (length pages)
        @convert-date(
                      print-date: (present-date-day (local-date))
                      print-time: (present-date-hour (local-date)))))
    
    (define (client-filename)
      (let ((guest (get-guest~ client)))
        (when (is? guest Document)
          (let ((moniker (get-moniker~ (get-document-controller~ guest))))
            (when moniker
              (get-name~ moniker))))))
    
    (let ((context (print-context no)))
      (wrap-header/footer~ page-setup context)
      (with-orientation surface page-setup
        (lambda ()
          (let ((zoom (or zoom 1.)))
            (scale~ surface zoom zoom))
          (let ((ratio (/ (cast <fl> resolution) default-resolution))
                (printed (printed-page)))
            (scale~ surface ratio ratio)
            (paint-drawing~ printed surface context))))
      (with-page-setup surface page-setup
        (lambda ()
          (let ((page-left (- (get-left~ page)))
                (page-top (- (get-top~ page))))
            (scale~ surface scaling scaling)
            (translate~ surface page-left page-top)
            (with-clip~ surface page
              (lambda ()
                (paint-drawing~ client surface context))))))))
  
  
  (method (with-page-setup surface page-setup proc)
    (with-orientation surface page-setup
      (lambda ()
        (let ((zoom (or zoom 1.)))
          (scale~ surface zoom zoom))
        (let* ((ratio (/ (cast <fl> resolution) default-resolution))
               (content-rect (scale (get-content-rect~ page-setup) ratio))
               (left (get-left~ content-rect))
               (top (get-top~ content-rect)))
          (translate~ surface left top))
        (proc))))
  
  
  (method (with-orientation surface page-setup proc)
    (with-preserved-matrix~ surface
      (lambda ()
        (let ((orientation (print-orientation))
              (size (get-size~ page-setup)))
          (case orientation
            ((landscape)
             (let ((height (get-height~ size)))
               (translate~ surface 0 height)
               (rotate~ surface (- PI/2))))
            ((reverse-landscape)
             (let ((width (get-width~ size)))
               (translate~ surface width 0)
               (rotate~ surface PI/2)))
            ((reverse-portrait)
             (let ((width (get-width~ size))
                   (height (get-height~ size)))
               (translate~ surface width height)
               (rotate~ surface PI)))))
        (proc))))
  
  
  (method protected virtual (printed-page)
    page-setup)
  
  
  (method protected virtual (print-orientation)
    (get-orientation~ page-setup))
  
  
  ;;;
  ;;;; Paginate
  ;;;
  
  
  (method (paginate)
    (define (default-paginate)
      (let ((content (get-content~ page-setup)))
        (let ((width (get-width~ content))
              (height (get-height~ content)))
          (let ((page-width (fxceiling (/ (/ (cast <fl> (* width resolution)) default-resolution) scaling)))
                (page-height (fxceiling (/ (/ (cast <fl> (* height resolution)) default-resolution) scaling))))
            (paginate~ client page-width page-height)))))
    
    (let ((page-area (get-page-area~ client '())))
      (if (not page-area)
          (default-paginate)
        (let ((page-width (rect-width page-area))
              (page-height (rect-height page-area)))
          (paginate~ client page-width page-height)))))
  
  
  ;;;
  ;;;; Document
  ;;;
  
  
  (method public (with-document proc)
    (start-document)
    (proc)
    (end-document))
  
  
  (method protected virtual (start-document)
    )
  
  
  (method protected virtual (end-document)
    )
  
  
  ;;;
  ;;;; Page
  ;;;
  
  
  (method public (with-page no proc)
    (start-page no)
    (proc)
    (end-page no))
  
  
  (method protected virtual (start-page no)
    )
  
  
  (method protected virtual (end-page no)
    )))
