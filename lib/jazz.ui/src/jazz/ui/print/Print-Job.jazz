;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Print Job
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.ui.print.Print-Job jazz


(import (jazz.geometry)
        (jazz.graphic)
        (jazz.ui))


(class undocumented Print-Job extends Object
  
  
  (slot surface)
  (slot selection? getter generate)
  (slot from       getter generate)
  (slot to         getter generate)
  (slot nb-copies  getter generate)
  (slot client     getter generate)
  (slot page-setup)
  (slot resolution)
  (slot scaling)
  (slot zoom)
  (slot pages      getter generate)
  
  
  (method override (initialize surface client page-setup resolution
                      (scaling: scaling #f)
                      (zoom: zoom #f)
                      (selection?: selection? #f)
                      (from: from #f)
                      (to: to #f)
                      (nb-copies: nb-copies 1))
    (nextmethod)
    (set! surface~self surface)
    (set! selection?~self selection?)
    (set! from~self from)
    (set! to~self to)
    (set! nb-copies~self nb-copies)
    (set! client~self client)
    (set! page-setup~self page-setup)
    (set! resolution~self resolution)
    (set! scaling~self (or scaling (scale-content~ page-setup client resolution)))
    (set! zoom~self zoom)
    (set! pages (paginate)))
  
  
  ;;;
  ;;;; Access
  ;;;
  
  
  (method public (get-dc)
    surface)
  
  
  (method public (get-page n)
    (element pages n))
  
  
  ;;;
  ;;;; Print
  ;;;
  
  
  (method public (print-job)
    (with-document
      (lambda ()
        (loop (repeat nb-copies)
              (print-document)))))
  
  
  (method (print-document)
    (for-each (lambda (page no)
                (with-page no
                  (lambda ()
                    (print-page surface page no))))
              pages
              (naturals (if from (- from 1) 0)
                        (if to to (length pages)))))
  
  
  (method (with-orientation surface page clipper proc)
    (let ((landscape? (print-landscape?)))
      (define (clip-proc)
        (with-clip~ surface (if landscape? (inverse-rect clipper) clipper)
          (lambda ()
            (proc))))
      
      (if (not landscape?)
          (clip-proc)
        (let ((orientation 'counterclockwise)
              (page-size (rect-size page)))
          (with-landscape~ surface
            orientation page-size clip-proc)))))
  
  
  (method public (print-page surface page no)
    (define (print-context no)
      (list
        printing?: #t
        ;; metamodeler-extra : should get this setting from the page-setup
        print-black/white?: #f
        print-selection?: selection?
        filename: (or (client-filename) "New")
        page-no: no
        page-count: (length pages)
        @convert-date(
                      print-date: (present-date-day (local-date))
                      print-time: (present-date-hour (local-date)))))
    
    (define (client-filename)
      (let ((guest (get-guest~ client)))
        (when (is? guest Document)
          (let ((moniker (get-moniker~ (get-controller~ guest))))
            (when moniker
              (get-name~ moniker))))))
    
    (let* ((context (print-context no))
           (zoom (or zoom 1.))
           (ratio (* (/ resolution 60.) zoom))
           (scaling (* scaling zoom))
           (printed (printed-page))
           (printed-bounds (get-bounds~ printed))
           (printed-rect (offset-rect (scale printed-bounds ratio) 0 0 @lh lv)))
      (wrap-header/footer~ page-setup context)
      @w
      (with-orientation surface printed-bounds printed-rect
        (lambda ()
          (scale~ surface ratio ratio)
          (paint-drawing~ printed surface context)))
      (let* ((offset (acquire~ page-setup printed {Point 0 0}))
             (content-rect (scale (offset-rect (get-content-rect~ page-setup) (- (get-h~ offset)) (- (get-v~ offset))) ratio))
             (left (get-left~ content-rect))
             (top (get-top~ content-rect))
             (page-left (- (get-left~ page)))
             (page-top (- (get-top~ page))))
        (;with-orientation surface page clipper
          (lambda ()
            (translate~ surface left top)
            (scale~ surface scaling scaling)
            (translate~ surface page-left page-top)
            (with-clip~ surface page
              (lambda ()
                (paint-drawing~ client surface context))))))))
  
  
  (method protected virtual (printed-page)
    (get-printable~ page-setup))
  
  
  (method protected virtual (print-landscape?)
    (eq? (get-orientation~ page-setup) 'landscape))
  
  
  ;;;
  ;;;; Paginate
  ;;;
  
  
  (method (paginate)
    (let* ((content (get-content~ page-setup))
           (width (get-width~ content))
           (height (get-height~ content))
           (paginate-width (fxceiling/ (/ (* width resolution) 60.) scaling))
           (paginate-height (fxceiling/ (/ (* height resolution) 60.) scaling)))
      (paginate~ client paginate-width paginate-height)))
  
  
  ;;;
  ;;;; Document
  ;;;
  
  
  (method public (with-document proc)
    (start-document)
    (proc)
    (end-document))
  
  
  (method protected virtual (start-document)
    )
  
  
  (method protected virtual (end-document)
    )
  
  
  ;;;
  ;;;; Page
  ;;;
  
  
  (method public (with-page no proc)
    (start-page no)
    (proc)
    (end-page no))
  
  
  (method protected virtual (start-page no)
    )
  
  
  (method protected virtual (end-page no)
    )))
