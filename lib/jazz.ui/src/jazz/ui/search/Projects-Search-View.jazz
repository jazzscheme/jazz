;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Projects Search View
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.ui.search.Projects-Search-View jazz


(import (jazz.graphic)
        (jazz.jml)
        (jazz.library)
        (jazz.platform)
        (jazz.project)
        (jazz.system)
        (jazz.ui)
        (jazz.ui.search)
        (jazz.ui.view)
        (jazz.ui.window))


(class undocumented Projects-Search-View extends Search-View

  
  (form
    (<install>
      (<!>                     name: domain      title: "Search"
        (<content~>
          (<Radio-Button>      name: files       title: "Files" position: {Point 13 14} size: {Dimension 100 18} selected?: #t)
          (<Radio-Button>      name: definitions title: "Definitions" position: {Point 13 34} size: {Dimension 100 18})
          (<Radio-Button>      name: references  title: "References" position: {Point 13 54} size: {Dimension 100 18})
          (<Label-View>                          title: "Project:" position: {Point 115 21} size: {Dimension 46 16})
          (<Border-View>                         position: {Point 163 17} size: {Dimension 155 22} border-insets: {Rect 2 3 2 1} border-color: {Color Medium}
            (<Border-View>                       border-color: {Color Entry-Border}
              (<Project-Combo> name: project)))
          (<Label-View>                          title: "Entries:" position: {Point 115 45} size: {Dimension 46 16})
          (<Border-View>                         position: {Point 163 41} size: {Dimension 155 22} border-insets: {Rect 2 3 2 1} border-color: {Color Medium}
            (<Border-View>                       border-color: {Color Entry-Border}
              (<Entries-Combo> name: entries)))))))
  
  
  (method override (finish rest)
    (define (setup-projects)
      (let ((workbench (get-workbench))
            (combo (locate 'project)))
        (set-choices~ combo (collect-choices workbench))
        (set-value~ combo workbench)))
    
    (define (collect-choices workbench)
      (let ((choices (new-queue)))
        (for-each-project~ workbench
          (lambda (project)
            (when (has-content?~ project)
              (enqueue choices (list project (->string (get-presentation-property~ project))))))
          include-inactives?: #t)
        (queue-list choices)))
    
    (define (setup-entries)
      (let ((combo (locate 'entries)))
        (set-choices~ combo (list (list #f "All")))
        (set-value~ combo #f)))
    
    (nextmethod rest)
    (setup-projects)
    (setup-entries))
  

  ;;;
  ;;;; Domains
  ;;;

  
  (method override (get-search-domains)
    '(files
      definitions
      references))
  
  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method (project-change project)
    )
    

  ;;;
  ;;;; Search
  ;;;

  
  (method override (search-targets find replace)
    (define (search-files)
      (let ((appl (get-application)))
        (let ((search (new Projects-Search 'files find replace))
              (project (selected-project))
              (cataloguer (get-cataloguer~ appl))
              (reporter (new User-Reporter)))
          (define (search-project resultset)
            (for-each-project~ project
              (lambda (project)
                (iterate-files~ project
                  (lambda (file)
                    (search-in-file search file resultset reporter))))))
          
          (let ((resultset (new Search-Resultset search)))
            (search-project resultset)
            (post-event
              (lambda ()
                (let ((results (get-results)))
                  (select-results~ results resultset)))))
          (user-feedback~ reporter "Done"))))
    
    (define (search-definitions)
      (let ((search (new Projects-Search 'definitions find replace))
            (project (selected-project))
            (cataloguer (get-cataloguer~ (get-application))))
        (let ((definitions (search-definitions~ cataloguer (get-find~ search) context: project)))
          (if (null? definitions)
              (message-box "No search results found")
            (case (length definitions)
              ((1) (edit~ (car definitions)))
              (else (let ((results (get-results)))
                      (select-results~ results (make-definition-search-resultset search definitions)))))))))
    
    (define (search-references)
      (let ((search (new Projects-Search 'references find replace))
            (project (selected-project))
            (cataloguer (get-cataloguer~ (get-application))))
        (let ((references (search-references~ cataloguer (get-find~ search) context: project)))
          (if (null? references)
              (message-box "No search results found")
            (case (length references)
              ((1) (edit-reference~ (car references) search))
              (else (let ((results (get-results)))
                      (select-results~ results (make-reference-search-resultset search references)))))))))
    
    (case (get-search-domain)
      ((files)
       (thread-start!
         (new-thread
           (lambda ()
             (search-files))
           'search)))
      ((definitions)
       (search-definitions))
      ((references)
       (search-references))))
  
  
  ;;;
  ;;;; Selection
  ;;;
  
  
  (method (selected-project)
    (get-value~ (locate 'project))))


;;;
;;;; Project-Combo
;;;


(class Project-Combo extends Combo-Box

  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method override (button-action)
    (let ((picker (new Project-Picker size: (new Dimension (- (get-width) 2) 200) action-handler: (new Event-Handler target: self method-name: 'on-project-picked))))
      (let ((tree (locate~ picker 'tree)))
        (let ((row (user-data-row~ tree (get-value) include-invisibles?: #t)))
          (when row
            (ensure-expanded~ tree row)
            (set-single-selection~ tree (row->line~ tree row))))
        (select-user-data-row~ tree (get-value))
        (receive (pos alternate-pos) (combo-popup-positions picker)
          (popup picker pos alternate-position: alternate-pos initiator: self)
          (push-focus tree)))))
  
  
  (method (on-project-picked evt)
    (let ((project (get-property~ evt project:)))
      (close-popups)
      (content-change 'popup))))


;;;
;;;; Project-Picker
;;;


(class Project-Picker extends Layout-View
  
  
  (slot mouse-selected? initialize #f)
  
  
  (form
    (<install>                                   layout-type: border
      (<Border-View>               name: border  location: center border-type: edge style: entry
        (<Scroller-View>                         style: document hscroll?: #t vscroll?: #t
          (<!>                     name: content layout-type: fill
            (<Tree-View>           name: tree    portfolio: :images auto-expand/collapse?: #f selection-handler: {Event-Handler :form on-selection-change} mouse-up-handler: {Event-Handler :form on-mouse-up} return-press-handler: {Event-Handler :form on-return-press} escape-press-handler: {Event-Handler :form on-escape-press}
              (<Tree-Node-Column>  name: name    title: "Name" width: 250 toplevel-controls?: #f)))))))
  
  
  (method override (finish initargs)
    (nextmethod initargs)
    (setup-projects))
  
  
  (method (setup-projects)
    (let ((tree (locate 'tree)))
      (define (insert-project project father)
        (when (has-content?~ project)
          (let ((title (get-presentation-property~ project))
                (image (get-component-image~ project))
                (state (if (not father) 'expanded 'collapsed)))
            (add-row~ tree father: father state: state children: (list (new Tree-Node title: title image: image)) user-data: project))))
      
      (fold-projects~ (get-workbench)
        insert-project
        #f
        include-inactives?: #t)))
  
  
  (method (on-selection-change evt)
    (when (eq? (get-user-origin~ evt) 'mouse)
      (set! mouse-selected? #t)))
  
  
  (method (on-mouse-up evt)
    (when mouse-selected?
      (process-selected)))
  
  
  (method override (on-return-press evt)
    (process-selected))
  
  
  (method override (on-escape-press evt)
    (close-popups~ (get-toplevel)))
  
  
  (method (process-selected)
    (let ((tree (locate 'tree)))
      (let ((project (get-single-selected-data~ tree)))
        (when project
          (let ((combo (popup-initiator)))
            (close-popups~ combo)
            (when project
              (set-value~ combo project))))))))


;;;
;;;; Entries-Combo
;;;


(class Entries-Combo extends Combo-Box))
