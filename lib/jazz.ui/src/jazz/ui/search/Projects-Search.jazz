;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Projects Search
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.ui.search.Projects-Search jazz


(import (jazz.graphic)
        (jazz.jml)
        (jazz.platform)
        (jazz.system)
        (jazz.ui)
        (jazz.ui.view))


(class undocumented Projects-Search extends Search-View

  
  (form
    (<install>
      (<!>                     name: domain      title: "Search"
        (<content~>
          (<Radio-Button>      name: definitions title: "Definitions" position: {Point 13 20} size: {Dimension 100 18} selected?: #t)
          (<Radio-Button>      name: references  title: "References" position: {Point 13 44} size: {Dimension 100 18})
          (<Label-View>                          title: "Project:" position: {Point 115 21} size: {Dimension 46 16})
          (<Border-View>                         position: {Point 163 17} size: {Dimension 155 22} border-insets: {Rect 2 3 2 2} border-color: {Color name: Medium}
            (<Border-View>                       border-color: {Color name: Entry-Border}
              (<Catalog-Combo> name: catalog)))
          (<Label-View>                          title: "Entries:" position: {Point 115 45} size: {Dimension 46 16})
          (<Border-View>                         position: {Point 163 41} size: {Dimension 155 22} border-insets: {Rect 2 3 2 2} border-color: {Color name: Medium}
            (<Border-View>                       border-color: {Color name: Entry-Border}
              (<Entries-Combo> name: entries)))))))
  
  
  (method override (finish rest)
    (nextmethod rest)
    (setup-catalogs))
  
  
  (method (setup-catalogs)
    (define (collect-catalogs)
      (map (lambda (catalog)
             (list catalog (->string (get-name~ catalog))))
           (get-catalogs~ (get-cataloguer~ (get-application)))))
    
    (let ((combo (locate 'catalog)))
      (set-choices~ combo (cons (list {} "Any") (cons {} (collect-catalogs))))
      (set-value~ combo {}))
    (let ((combo (locate 'entries)))
      (set-choices~ combo (list (list {} "All")))
      (set-value~ combo {})))


  ;;;
  ;;;; Session
  ;;;
  
  
  (method override (set-session-properties config)
    (nextmethod config)
    (set-whole-words? #t)
    (set-ignore-case? #f))
  

  ;;;
  ;;;; Domains
  ;;;

  
  (method override (get-search-domains)
    '(definitions
      references))
  
  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method (catalog-change catalog)
    )
    

  ;;;
  ;;;; Search
  ;;;

  
  (method override (search-targets multi-search-context)
    (case (get-selected-element~ (get-content~ (locate 'domain)))
      ((definitions)
       (search-targets-definitions multi-search-context))
      ((references)
       (search-targets-references multi-search-context))))

  
  (method (search-targets-definitions multi-search-context)
    (let ((contexts (get-contexts~ multi-search-context)))
      (if (> (length contexts) 1)
          (message-box "Search definitions doesn't yet support multiple targets")
        (let ((context (car contexts)))
          (let ((catalog (selected-catalog))
                (cataloguer (get-cataloguer~ (get-application)))
                (name (string->symbol (get-target~ context)))
                (whole-words? (get-whole-words?~ context))
                (ignore-case? (get-ignore-case?~ context)))
            (let ((definitions (if catalog
                                   (search-definitions~ catalog name whole-words?: whole-words? ignore-case?: ignore-case?)
                                 (search-definitions~ cataloguer name whole-words?: whole-words? ignore-case?: ignore-case?))))
              (if (null? definitions)
                  (begin
                    (bell)
                    (user-message "No search results found"))
                (case (length definitions)
                  ((1) (edit~ (car definitions)))
                  (else (let ((results (get-results)))
                          (set-mode~ results 'definitions)
                          (set-references-target~ results {})
                          (add-results~ results definitions (get-search-targets))
                          (select-results~ results)))))))))))

  
  (method (search-targets-references multi-search-context)
    (let ((contexts (get-contexts~ multi-search-context)))
      (if (> (length contexts) 1)
          (message-box "Search references doesn't yet support multiple targets")
        (let ((context (car contexts)))
          (if (not (get-whole-words?~ context))
              (message-box "Search references doesn't yet non whole words")
            (if (get-ignore-case?~ context)
                (message-box "Search references doesn't yet support ignore case")
              (let ((catalog (selected-catalog))
                    (cataloguer (get-cataloguer~ (get-application)))
                    (name (string->symbol (get-target~ context))))
                (let ((references (if catalog
                                      (get-references~ catalog name)
                                    (get-references~ cataloguer name))))
                  (if (null? references)
                      (begin
                        (bell)
                        (user-message "No search results found"))
                    (case (length references)
                      ((1) (edit-reference~ (car references) name))
                      (else (let ((results (get-results)))
                              (set-mode~ results 'references)
                              (set-context~ results {})
                              (set-references-target~ results name)
                              (add-results~ results references (get-search-targets) name)
                              (select-results~ results)))))))))))))

  
  ;;;
  ;;;; Edit
  ;;;

  
  (method protected (search-definitions name definitions)
    (let ((results (get-results)))
      (set-mode~ results 'definitions)
      (set-references-target~ results {})
      (set-selected?~ (locate 'definitions) #t)
      (set-search-targets (list (list (->string name) "")))
      (add-results~ results definitions (get-search-targets))
      (select-results~ results)))
  
  
  (method protected (search-references name references ctx)
    (let ((results (get-results)))
      (set-mode~ results 'references)
      (set-context~ results ctx)
      (set-references-target~ results name)
      (set-selected?~ (locate 'references) #t)
      (set-search-targets (list (list (->string name))))
      (add-results~ results references (get-search-targets) name)
      (select-results~ results)))
  
  
  ;;;
  ;;;; Selection
  ;;;
  
  
  (method (selected-catalog)
    (get-value~ (locate 'catalog))))


;;;
;;;; Catalog
;;;


(class Catalog-Combo extends Combo-Box
  
  
  (method override (content-change origin)
    (catalog-change~ (get-creator) (get-value))))


(register-autoclass Catalog-Combo)


;;;
;;;; Entries
;;;


(class Entries-Combo extends Combo-Box)


(register-autoclass Entries-Combo))
