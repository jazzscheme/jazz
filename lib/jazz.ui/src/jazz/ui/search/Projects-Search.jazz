;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Projects Search
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.ui.search.Projects-Search jazz


(import (jazz.library)
        (jazz.ui))


(class Projects-Search extends Search
  
  
  (slot domain getter generate)
  
  
  (method override (initialize domain find replace)
    (nextmethod find replace)
    (set! domain~self domain))
  
  
  ;;;
  ;;;; Results
  ;;;
  
  
  (method override (install-results results-view results categorized?)
    (define (install-references)
      (let ((entries (make-table test: eq?))
            (nodes (make-table test: eq?))
            (root (list #f)))
        (define (prepare-entries)
          (for-each (lambda (result)
                      (let ((entry (get-entry~ result)))
                        (table-set! entries entry result)))
                    results))
        
        (define (prepare-references)
          (for-each prepare-reference results))
        
        (define (prepare-reference result)
          (let ((entry (get-entry~ result)))
            (or (table-ref nodes entry #f)
                (let ((ascendant-node (or (prepare-ascendant (get-parent~ entry)) root))
                      (node (list result)))
                  (table-set! nodes entry node)
                  (set-cdr! ascendant-node (cons node (cdr ascendant-node)))
                  node))))
        
        (define (prepare-ascendant entry)
          (when entry
            (let ((result (table-ref entries entry #f)))
              (if result
                  (prepare-reference result)
                (prepare-ascendant (get-parent~ entry))))))
        
        (define (install-nodes father nodes)
          (for-each (lambda (node)
                      (install-node father node))
                    (sort string<? nodes key: (lambda (node)
                                                (present-name~ (car node))))))
        
        (define (install-node father node)
          (bind (result . children) node
            (let ((father (add-result~ results-view result father: father)))
              (install-nodes father children))))
        
        (prepare-entries)
        (prepare-references)
        (install-nodes #f (cdr root))))
    
    (if (and (eq? domain 'references) categorized?)
        (install-references)
      (nextmethod results-view results categorized?)))
  
  
  ;;;
  ;;;; Presentation
  ;;;
  
  
  (method override (get-icon)
    (case domain
      ((files) {Image-Resource "TypeFile"})
      (else {Image-Resource "Link"})))
  
  
  ;;;
  ;;;; Edition
  ;;;
  
  
  (method override (supports-drill-down?)
    (eq? domain 'references))
  
  
  (method override (dynamic-search? categorized?)
    (and (supports-drill-down?)
         (not categorized?)))))
