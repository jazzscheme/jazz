;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Search Manager
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library protected jazz.ui.search.Search-Manager jazz


(import (jazz.jml)
        (jazz.library)
        (jazz.ui)
        (jazz.utilities))


(class undocumented Search-Manager extends View
  

  (form
    (<install>              size: {Dimension 857 169}
      (<Tab-View> name: tab position: {Point 4 5} size: {Dimension 848 159})))
  
  
  (method meta (external-name . rest)
    'search-manager)
    
  
  ;;;
  ;;;; Host
  ;;;
  
  
  (method meta (host-icon)
    {Bitmap-Resource "Find"})
  
  
  (method meta (host-position)
    {Point 300 220})
  
  
  (method meta (host-size)
    {Dimension 857 169})
  
  
  (method meta (host-title)
    "Search")

  
  ;;;
  ;;;; Component
  ;;;

  
  (method (install rest)
    (nextmethod rest)
    (load-session))
  

  ;;;
  ;;;; Session
  ;;;
  
  
  (method (load-session)
    (let* ((pref (get-preferences '(tools search-manager)))
           (active (get-active~ pref))
           (tab (locate 'tab)))
      (set-selection-name~ tab active)
      (for-each (function (config)
                  (let* ((name (get-name~ config))
                         (sheet (find-component~ tab name)))
                    (when sheet
                      (set-session-properties~ (first-child~ (get-content~ sheet)) config))))
                (get-children~ pref))))
  
  
  (method (confirm-close . rest)
    (save-session))
  
  
  (method (save-session)
    @to-convert
    (let ((info
           (list (external-name)
                 position: (get-position)
                 size:     (get-size))))
      (push-property~ properties 'Opened-Windows info)
      (set-property~ properties 'Search-Manager (get-session-properties))))
  
  
  (method (get-session-properties)
    (let ((tab (locate 'tab)))
      (cons (get-selection-name~ tab)
            (map (function (sheet)
                   (cons (get-name~ sheet) (get-session-properties~ (first-child~ (get-content~ sheet)))))
                 (get-children~ tab)))))
        

  ;;;
  ;;;; Actions
  ;;;
  

  (method (guest-actions)
    (cons (find-actions 'search-manager)
          (nextmethod)))

  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method (resize dh dv)
    (size-figure~ (locate 'tab) dh dv))
  
  
  (method (on-whole-words evt)
    (toggle-whole-words))
  
  
  (method (on-ignore-case evt)
    (toggle-ignore-case))
  
  
  (method (on-regexp evt)
    (toggle-regexp))
  
  
  (method (on-preserve-case evt)
    (toggle-preserve-case))
  
  
  (method (on-play-recording evt)
    (toggle-play-recording))
  
  
  (method (toggle-whole-words)
    (let ((checkbox (locate~ (get-search) 'whole-words?)))
      (set-checked?~ checkbox (not (get-checked?~ checkbox)))))
  
  
  (method (toggle-ignore-case)
    (let ((checkbox (locate~ (get-search) 'ignore-case?)))
      (set-checked?~ checkbox (not (get-checked?~ checkbox)))))
  
  
  (method (toggle-regexp)
    (let ((checkbox (locate~ (get-search) 'regexp?)))
      (set-checked?~ checkbox (not (get-checked?~ checkbox)))))
  
  
  (method (toggle-preserve-case)
    (let ((checkbox (locate~ (get-search) 'preserve-case?)))
      (set-checked?~ checkbox (not (get-checked?~ checkbox)))))
  
  
  (method (toggle-play-recording)
    (let ((checkbox (locate~ (get-search) 'play-recording?)))
      (set-checked?~ checkbox (not (get-checked?~ checkbox)))))

  
  ;;;
  ;;;; Search
  ;;;
  
  
  (method public (get-search)
    (let* ((tab (locate 'tab))
           (sheet (selected-sheet~ tab)))
      (get-sheet-search sheet)))
  
  
  (method public (get-search-named name)
    (let* ((tab (locate 'tab))
           (sheet (child~ tab name)))
      (when sheet
        (get-sheet-search sheet))))
  
  
  (method public (get-searches)
    (let ((tab (locate 'tab)))
      (map get-sheet-search (get-children~ tab))))
  
  
  (method (get-sheet-search sheet)
    (first-child~ (get-content~ sheet)))
  
  
  ;;;
  ;;;; History
  ;;;
  
  
  (method (current-history-item)
    (current-history-item~ (get-search)))
  
  
  (method protected (install-history-item item)
    (install-history-item~ (get-search) item))
  
  
  ;;;
  ;;;; Definitions
  ;;;
  
  
  (method public (edit-definitions name definitions)
    (search-definitions~ (get-search-named 'projects) name definitions)
    (set-selection-name~ (locate 'tab) 'projects))
  
  
  (method public (edit-references name references context)
    (search-references~ (get-search-named 'projects) name references context)
    (set-selection-name~ (locate 'tab) 'projects))))
