;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Search Results
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.ui.search.Search-Results jazz


(import (jazz.application)
        (jazz.feedback)
        (jazz.git)
        (jazz.graphic)
        (jazz.jml)
        (jazz.library)
        (jazz.resource)
        (jazz.system)
        (jazz.ui)
        (jazz.ui.clipboard)
        (jazz.ui.search)
        (jazz.ui.view))


(class undocumented Search-Results extends Navigable-Results


  (slot current-resultset initialize #f  getter generate)
  (slot resultset-stack   initialize '() getter generate)
  (slot categorized?      initialize #f)


  (form
    (<install>
      (<!>                              name: tools
        (<Toggle-Tool>                                  size: {Dimension 22 22} before: edit location: tail tooltip?: #t tooltip-text: "Display Flat / Categorized" resource: {Image-Resource "Tree"} portfolio: :images action-handler: {Event-Handler :guest on-categorize})
        (<Separator>                                    size: {Dimension 8 0} before: edit)
        (<Separator>                                    size: {Dimension 4 0})
        (<Push-Tool>                    name: pop       size: {Dimension 22 22} location: tail tooltip?: #t tooltip-text: "Pop Resultset" resource: {Image-Resource "ClearResults"} portfolio: :images action-handler: {Event-Handler :guest on-pop-resultset})
        (<Separator>                                    size: {Dimension 4 0})
        (<Layout-View>                                  size: {Dimension 150 22} layout-type: fill layout-insets: {Rect 0 2 0 2} location: tail
          (<Border-View>                                border-color: {Color Dark}
            (<Resultset-Combo>          name: resultset))))
      (<!>                              name: scroller
        (<!>                            name: content
          (<!>                          name: header
            (<!>                        name: content
              (<!>                      name: results   filled-column: location multiple-selection?: #t context-menu-handler: {Event-Handler :form on-context-menu}
                (<Tree-Node-Column>     name: name      title: "Name" width: 250)
                (<Tree-Location-Column> name: location  title: "Location" width: 337)
                (<Tree-Label-Column>    name: type      title: "Type" width: 100))))))))
  
  
  (method meta override (external-name . rest)
    'Searches)
  
  
  (method override (form-model form)
    (case (get-name~ form)
      ((results) Search-Results-Tree)
      (else (nextmethod form))))

  
  ;;;
  ;;;; Host
  ;;;
  
  
  (method meta override (host-icon)
    {Image-Resource "Find"})
  
  
  (method meta override (host-title)
    "Searches")
  
  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method (on-context-menu evt)
    (let* ((sender (get-sender~ evt))
           (pos (get-position~ evt))
           (acquired (acquire sender pos))
           (menu (get-context-menu)))
      (when menu
        (with-context-click~ sender pos
          (lambda ()
            (track-popup-menu menu acquired))))))
  
  
  (method override (get-context-menu)
    (new Found-Menu))
  
  
  (method (on-categorize evt)
    (set! categorized? (not categorized?))
    (update-resultset))
  
  
  (method (on-pop-resultset evt)
    (pop-resultset))

  
  ;;;
  ;;;; Edit
  ;;;
  

  (method override (edit-selection select)
    (let ((selection (get-selection~ (get-tree))))
      (for-each (lambda (rank)
                  (edit-result (rank->result rank) select))
                selection)))
  

  (method (edit-result result select (visible?: visible? #t) (activate-focus?: activate-focus? #t))
    (with-cursor :wait
      (lambda ()
        (set-active-search-result result)
        (edit~ result select visible?: visible? activate-focus?: activate-focus?))))
  
  
  (method (rank->result rank)
    (get-user-data~ (get-row~ (get-tree) rank)))
  
  
  ;;;
  ;;;; Replace
  ;;;
  
  
  (method public (replace-selected)
    (let ((code (message-box "Automatically save & close except for currently edited files?" type: 'confirmation)))
      (if (eq? code 'cancel)
          (signal-cancel)
        (let ((auto-save/close? (eq? code 'yes))
              (selection (get-selection~ (get-tree)))
              (modified-count 0))
          (for-each (lambda (rank)
                      (let ((result (rank->result rank)))
                        (receive (frame new?) (edit-result result 'forward visible?: #f activate-focus?: #f)
                          (let* ((guest (get-guest~ frame))
                                 (text (get-text-view~ guest)))
                            (user-feedback "Processing {a}..." (name-status~ (get-document-controller~ text)))
                            (set-active-search-result result)
                            (replace-all~ result client: text)
                            (when (and auto-save/close? new?)
                              (when (get-modified?~ text)
                                (save~ guest)
                                (increase! modified-count))
                              (close~ frame))))))
                    selection)
          (when auto-save/close?
            (message-box (format "{a} file{a} modified" modified-count (format-plural modified-count))))
          (user-feedback "Done")))))


  ;;;
  ;;;; Result
  ;;;


  (method public (select-results resultset)
    (preserve-current-selection)
    (set! current-resultset resultset)
    (set! resultset-stack (cons current-resultset resultset-stack))
    (update-resultset)
    (update-resultset-combo)
    (set-active-search-result (new Search-Result resultset))
    (select-resultset))
  
  
  (method (preserve-current-selection)
    (when current-resultset
      (set-selection~ current-resultset (get-selection~ (get-tree)))))


  ;;;
  ;;;; Resultset
  ;;;
  
  
  (method (set-resultset resultset)
    (preserve-current-selection)
    (set! current-resultset resultset)
    (update-resultset)
    (update-resultset-combo)
    (set-active-search-result (new Search-Result current-resultset)))
  
  
  (method (pop-resultset)
    (if (<= (length resultset-stack) 1)
        (bell)
      (set! resultset-stack (cdr resultset-stack))
      (set! current-resultset (car resultset-stack))
      (update-resultset)
      (update-resultset-combo)
      (set-active-search-result (new Search-Result current-resultset))))
  
  
  (method (update-resultset-combo)
    (let ((combo (locate 'resultset)))
      (set-choices~ combo (map (lambda (result)
                                 (let ((search (get-search~ result)))
                                   (list result (if (not search) "" (present~ search)))))
                               resultset-stack))
      (set-value~ combo current-resultset)))


  ;;;
  ;;;; Update
  ;;;


  (method (update-resultset)
    (when current-resultset
      (let ((appl (get-application))
            (tree (get-tree))
            (search (get-search~ current-resultset))
            (results (get-results~ current-resultset))
            (selection (get-selection~ current-resultset)))
        (remove-every-row~ tree)
        (with-update-locked~ tree
          (lambda ()
            (set-toplevel-controls?~ (get-node-column~ tree) (supports-drill-down?~ search))
            (install-results~ search self results categorized?)))
        (when (> (get-visible-count~ tree) 0)
          (set-selection~ tree (or selection (list 0))))
        (update-search-actions~ appl))))

  
  (method (update-tree-row row)
    (let ((result (get-user-data~ row)))
      (for-each (lambda (result)
                  (add-result result father: row))
                (get-results~ (drill-down~ result)))))
  
  
  (method (add-result result (father: father #f))
    (let ((tree (get-tree))
          (state (if (dynamic-search?~ (get-search~ result) categorized?) 'dynamic 'collapsed))
          (node (new Tree-Node title: (present~ result) image: (get-icon~ result)))
          (location (new Tree-Label title: (present-location~ result)))
          (type (new Tree-Label title: (present-type~ result)))
          (user-data result))
      (add-row~ tree father: father state: state children: (list node location type) user-data: user-data)))


  ;;;
  ;;;; Depot
  ;;;
  
  
  (method (on-add-to-depot evt)
    (let ((tree (get-tree))
          (count 0))
      (for-each (lambda (data)
                  (when (is? data File-Search-Result)
                    (let ((file (get-file~ data)))
                      (when file
                        (receive (depot path) (determine-file-depot file)
                          (when depot
                            (user-message "Adding {a}..." path)
                            (git-add~ depot path)
                            (increase! count)))))))
                (get-selected-data~ tree))
      (if (= count 0)
          (user-message "No files added")
        (user-message (format "Added {a} file{a}" count (format-plural count)))))))


;;;
;;;; Search-Results-Tree
;;;


(class Search-Results-Tree extends Tree-View
          

  ;;;
  ;;;; Actions
  ;;;
  

  (method override (focus-actions)
    (cons (find-actions 'search-results-tree)
          (nextmethod)))
  
  
  ;;;
  ;;;; Access
  ;;;
  
  
  (method (get-search)
    (find-ascendant Search-Results))
  
  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method override (return-press evt)
    (call-edit-selection~ (get-search) 'forward))
  
  
  (method override (copy-selection)
    (set-clipboard-text
      (format "{l detail: :human}"
        (map (lambda (n)
               (let ((result (get-user-data~ (get-row n))))
                 (present-name~ result)))
             (get-selection)))))
  
  
  (method override (select-all . rest)
    )
  
  
  (method (on-edit-selection evt)
    (call-edit-selection~ (get-search) 'forward))
  
  
  (method override (update-row row)
    (update-tree-row~ (get-search) row)))


;;;
;;;; Search-Results-Tree-Actions
;;;


(class Search-Results-Tree-Actions extends Actions
  
  
  (form
    (<install>
      (<Action-Item> name: action         action-handler: {Event-Handler :focus on-action} shortcut: {Shortcut :control Return})
      (<Action-Item> name: edit-selection action-handler: {Event-Handler :focus on-edit-selection} shortcut: {Shortcut F12} alternate-shortcut: {Shortcut :alt #\.}))))


;;;
;;;; Tree-Location-Column
;;;


(class Tree-Location-Column extends Tree-Label-Column
  
  
  (method override (sort-value row data)
    (location-sort-value~ (get-user-data~ row))))


;;;
;;;; Resultset-Combo
;;;


(class Resultset-Combo extends Combo-Box
  
  
  (method override (content-change origin)
    (set-resultset~ (get-creator~ parent) (get-value))))


;;;
;;;; Found-Menu
;;;


(class Found-Menu extends Context-Menu
  
  
  (form
    (<install>
      (<Label-Item>     name: copy title: "Add to Depot" icon: {Image-Resource "Add"} action-handler: {Event-Handler :focus-guest on-add-to-depot})
      (<Separator-Item>)
      (<Label-Item>     name: copy title: "Copy" icon: {Image-Resource "Copy"} action-handler: {Event-Handler :focus on-copy})))))
