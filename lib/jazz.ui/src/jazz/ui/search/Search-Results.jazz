;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Search Results
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.ui.search.Search-Results jazz


(import (jazz.catalog)
        (jazz.editor.jazz)
        (jazz.graphic)
        (jazz.io)
        (jazz.jml)
        (jazz.library)
        (jazz.platform)
        (jazz.system)
        (jazz.ui)
        (jazz.ui.clipboard)
        (jazz.ui.search)
        (jazz.ui.view)
        (jazz.ui.window))


(class undocumented Search-Results extends Navigable-Results


  (slot mode           initialize #f accessors generate)
  (slot context        initialize #f accessors generate)
  (slot current-result initialize #f)
  (slot result-stack   initialize '() getter generate)


  (form
    (<install>
      (<!>                           name: tools
        (<!>                         name: clear     tooltip-text: "Pop Results")
        (<Separator>                                 size: {Dimension 4 0})
        (<Layout-View>                               size: {Dimension 150 22} layout-type: fill layout-insets: {Rect 0 2 0 2} location: tail
          (<Border-View>                             border-color: {Color Dark}
            (<Results-Combo>         name: results))))
      (<!>                           name: scroller
        (<!>                         name: content
          (<!>                       name: header
            (<!>                     name: content
              (<!>                   name: locations filled-column: location multiple-selection?: #t context-menu-handler: {Event-Handler :form on-context-menu}
                (<Tree-Node-Column>  name: name      title: "Name" width: 200)
                (<Tree-Label-Column> name: location  title: "Location" width: 337)
                (<Tree-Label-Column> name: type      title: "Type" width: 100))))))))
  
  
  (method meta override (external-name . rest)
    'search-results)
  
  
  (method override (form-model form)
    (case (get-name~ form)
      ((locations) Search-Results-Tree)
      (else (nextmethod form))))

  
  ;;;
  ;;;; Host
  ;;;
  
  
  (method meta override (host-icon)
    {Image-Resource "Find"})
  
  
  (method meta override (host-title)
    "Search Results")
  
  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method (on-context-menu evt)
    (let* ((sender (get-sender~ evt))
           (pos (get-position~ evt))
           (acquired (acquire sender pos))
           (menu (get-context-menu)))
      (when menu
        (with-context-click~ sender pos
          (lambda ()
            (track-popup-menu menu acquired))))))
  
  
  (method override (get-context-menu)
    (new Found-Menu))

  
  ;;;
  ;;;; Navigation
  ;;;
  

  (method override (edit-selection forward?)
    (let ((selection (get-selection~ (get-tree))))
      (for-each (lambda (item)
                    (edit-location item forward? #t #t))
                  selection)))
  

  (method public (edit-location item forward? focus? visible?)
    (with-cursor :wait
      (lambda ()
        (set-active-search (new Search context #f))
        (let ((location (get-user-data~ (get-row~ (get-tree) item))))
          (edit~ location forward? focus? visible?)))))


  ;;;
  ;;;; Result
  ;;;


  (method public (add-result locations targets)
    (let ((result (new Search-Result locations targets)))
      (preserve-current-selection)
      (set! current-result result)
      (set! result-stack (cons current-result result-stack))
      (update-result)
      (update-results-combo)))
  
  
  (method (set-result result)
    (preserve-current-selection)
    (set! current-result result)
    (update-result)
    (update-results-combo))
  
  
  (method (preserve-current-selection)
    (when current-result
      (set-selection~ current-result (get-selection~ (get-tree)))))


  ;;;
  ;;;; Results
  ;;;
  
  
  (method (pop-results)
    (set! current-result (car result-stack))
    (set! result-stack (cdr result-stack))
    (update-result)
    (update-results-combo))
  
  
  (method override (clear-results)
    (if (<= (length result-stack) 1)
        (bell)
      (pop-results)))
  
  
  (method (update-results-combo)
    (let ((combo (locate 'results)))
      (set-choices~ combo (map (lambda (result)
                                 (let ((targets (get-targets~ result)))
                                   (list result (join (map first targets) ", "))))
                               result-stack))
      (set-value~ combo current-result)))


  ;;;
  ;;;; Update
  ;;;


  (method (update-result)
    (let ((appl (get-application))
          (tree (get-tree))
          (locations (get-locations~ current-result))
          (selection (get-selection~ current-result)))
      (remove-every-row~ tree)
      (with-update-locked~ tree
        (lambda ()
          (let ((flag
                  (case mode
                    ((references) #t)
                    (else #f))))
            (set-toplevel-controls?~ (get-node-column~ tree) flag))
          (for-each add-location (sort string<? locations key: present-name~))))
      (when (and locations (> (get-visible-count~ tree) 0))
        (set-selection~ tree (or selection (list 0))))
      (with-locked-update
        (lambda ()
          (select-docked Search-Results)))
      (update-search-actions~ appl)))

  
  (method (update-tree-row row)
    (case mode
      ((references)
       (let ((location (get-user-data~ row)))
         (let* ((name (get-name~ (get-entry~ location)))
                (appl (get-application))
                (cataloguer (get-cataloguer~ appl))
                (references (get-references~ cataloguer name context: context)))
           (for-each (lambda (location)
                       (add-location location father: row))
                     (sort string<? (make-reference-search-locations references name) key: present-name~)))))))
  
  
  (method (add-location location (father: father #f))
    (let ((tree (get-tree))
          (state (if (eq? mode 'references) 'dynamic 'collapsed))
          (node (new Tree-Node title: (present-name~ location) image: (get-icon~ location)))
          (loc (new Tree-Label title: (present-location~ location)))
          (type (new Tree-Label title: (present-type~ location)))
          (user-data location))
      (add-row~ tree father: father state: state children: (list node loc type) user-data: user-data))))


;;;
;;;; Search-Results-Tree
;;;


(class Search-Results-Tree extends Tree-View
          

  ;;;
  ;;;; Actions
  ;;;
  

  (method override (focus-actions)
    (cons (find-actions 'search-results-tree)
          (nextmethod)))
  
  
  ;;;
  ;;;; Access
  ;;;
  
  
  (method (get-search)
    (find-ascendant Search-Results))
  
  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method override (return-press key)
    (edit-selection~ (get-search) #t))
  
  
  (method override (copy-selection)
    (set-clipboard-text
      (format "{l detail: :human}"
        (map (lambda (n)
               (let ((location (get-user-data~ (get-row n))))
                 (present-name~ location)))
             (get-selection)))))
  
  
  (method override (select-all . rest)
    )
  
  
  (method (on-edit-definitions evt)
    (edit-selection~ (get-search) #t))
  
  
  (method override (update-row row)
    (update-tree-row~ (get-search) row)))


;;;
;;;; Search-Results-Tree-Actions
;;;


(class Search-Results-Tree-Actions extends Actions
  
  
  (form
    (<install>
      (<Action-Item> name: action           action-handler: {Event-Handler :focus on-action} shortcut: {Shortcut :control Return})
      (<Action-Item> name: edit-definitions action-handler: {Event-Handler :focus on-edit-definitions} shortcut: {Shortcut F12} alternate-shortcut: {Shortcut :alt #\.}))))


;;;
;;;; Results-Combo
;;;


(class Results-Combo extends Combo-Box
  
  
  (method override (content-change origin)
    (set-result~ (get-creator~ parent) (get-value))))


;;;
;;;; Found-Menu
;;;


(class Found-Menu extends Context-Menu
  
  
  (form
    (<install>
      (<Label-Item> name: copy title: "Copy" icon: {Image-Resource "Copy"} action-handler: {Event-Handler :focus on-copy})))))
