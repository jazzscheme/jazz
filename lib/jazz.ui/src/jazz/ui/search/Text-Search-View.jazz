;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Text Search View
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.ui.search.Text-Search-View jazz


(import (jazz.io)
        (jazz.jml)
        (jazz.system)
        (jazz.ui)
        (jazz.ui.search)
        (jazz.ui.view)
        (jazz.ui.window))


(class undocumented Text-Search-View extends Search-View

  
  (form
    (<install>
      (<!>                name: domain      title: "Search"
        (<content~>
          (<Radio-Button> name: window      title: "Window" position: {Point 13 14} size: {Dimension 120 18} group: domain selected?: #t)
          (<Radio-Button> name: declaration title: "Declaration" position: {Point 13 34} size: {Dimension 120 18} group: domain)
          (<Radio-Button> name: selection   title: "Selection" position: {Point 13 54} size: {Dimension 120 18} group: domain)
          @wait
          (<Radio-Button> name: text        title: "Text" position: {Point 143 14} size: {Dimension 120 18} group: restriction selected?: #t)
          @wait
          (<Radio-Button> name: highlights  title: "Highlights" position: {Point 143 34} size: {Dimension 120 18} group: restriction)))))
  
  
  (method (preferences)
    (get-preferences '(tools search-manager text)))
  

  ;;;
  ;;;; Domains
  ;;;

  
  (method override (get-search-domains)
    '(window
      declaration
      selection))


  ;;;
  ;;;; Search
  ;;;
  
  
  (method override (search-targets find replace)
    (define (search-window)
      (let ((text (active-text)))
        (if (not text)
            (bell)
          (let ((search (new Text-Search find replace)))
            (let ((resultset (new Search-Resultset search)))
              (let ((result (new Text-Search-Result resultset)))
                (set-active-search-result result)
                (set-caret~ text (get-start~ text))
                (find-forward~ result text: text)
                (acquire-focus~ text)))))))
    
    (define (search-declaration)
      (let ((text (active-text)))
        (if (not text)
            (bell)
          (let ((range (declaration-range~ text (get-start~ text))))
            (if (not range)
                (message-box "Unable to determine declaration")
              (let ((search (new Text-Search find replace)))
                (let ((resultset (new Search-Resultset search)))
                  (let ((result (new Text-Search-Result resultset client: text beginning: (get-start~ range) ending: (get-end~ range))))
                    (set-active-search-result result)
                    (acquire-focus~ text)))))))))
    
    (define (search-selection)
      (let ((text (active-text)))
        (if (not text)
            (bell)
          (let ((range (get-selection~ text)))
            (if (empty?~ range)
                (message-box "Selection is empty")
              (let ((search (new Text-Search find replace)))
                (let ((resultset (new Search-Resultset search)))
                  (let ((result (new Text-Search-Result resultset client: text beginning: (get-start~ range) ending: (get-end~ range))))
                    (set-active-search-result result)
                    (acquire-focus~ text)))))))))
    
    (define (active-text)
      (let ((frames (all-frames)))
        (when (>= (length frames) 1)
          (let ((frame (car frames)))
            (when (is? frame Frame-Host)
              (let ((guest (get-guest~ frame)))
                (when (is? guest Text-View)
                  guest)))))))
    
    (case (get-search-domain)
      ((window)
       (search-window))
      ((declaration)
       (search-declaration))
      ((selection)
       (search-selection))))))
