;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Search
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2012
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module jazz.ui.search jazz


(import (jazz.graphic)
        (jazz.system)
        (jazz.ui))


;;;
;;;; Active
;;;


(define *active-search-result*
  #f)


(definition public (active-search-result)
  *active-search-result*)


(definition public (set-active-search-result search-result)
  (set! *active-search-result* search-result)
  (if search-result
      (install-indicators~ search-result *beginning-indicator* *ending-indicator*)
    (reset~ *beginning-indicator*)
    (reset~ *ending-indicator*))
  (let ((appl (get-application)))
    (if search-result
        (set-search-result~ appl (get-icon~ search-result) (present~ search-result))
      (set-search-result~ appl #f #f))
    (update-search-actions~ appl)))


(definition *beginning-indicator*
  (new Indicator {Color Boundary}))

(definition *ending-indicator*
  (new Indicator {Color Boundary}))


;;;
;;;; Location
;;;


(definition public (make-definition-search-resultset search definitions)
  (let ((resultset (new Search-Resultset search)))
    (for-each (lambda (definition)
                (add-result~ resultset (new Definition-Search-Result resultset definition)))
              definitions)
    resultset))


(definition public (make-reference-search-resultset search references)
  (let ((resultset (new Search-Resultset search)))
    (for-each (lambda (reference)
                (add-result~ resultset (new Reference-Search-Result resultset reference)))
              references)
    resultset))


(definition public (make-text-search-result find client beginning ending)
  (let ((search (new Text-Search find #f)))
    (let ((resultset (new Search-Resultset search)))
      (new Text-Search-Result resultset client: client beginning: beginning ending: ending))))


;;;
;;;; Extensions
;;;


(definition package (default-search-extensions)
  :lisp))
