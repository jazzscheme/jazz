;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Login Dialog
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library protected jazz.ui.selection.Selection-Manager jazz


(class undocumented Selection-Manager extends Object
  
  
  @w (property selection           initialize {} accessors generate)
  @w (property selection-anchor    initialize {} accessors generate)
  (property modifiers           initialize 0  getter generate)
  (property shift?              initialize #f getter generate)
  (property control?            initialize #f getter generate)
  (property alt?                initialize #f getter generate)
  (property multiple-selection? initialize #f getter generate)
  (property mouse-down-part     initialize {} getter generate)
  (property mouse-down-view     initialize {} getter generate)
  
  
  (slot provider          initialize {})
  (slot current-operation initialize {})
  (slot delay-selection?  initialize #f)
  
  
  (method (initialize p)
    (nextmethod)
    (set! provider p))
  
  
  ;;;
  ;;;; Accessors
  ;;;
  
  
  (method public (debug-current-operation)
    current-operation)
  
  
  (method public (mouse-down?)
    (eq? current-operation 'mouse-down))
  
  
  (method public (mouse-up?)
    (eq? current-operation 'mouse-up))
  
  
  (method public (mouse-double-down?)
    (eq? current-operation 'mouse-double-down))
  
  
  (method public (mouse-double-up?)
    (eq? current-operation 'mouse-double-up))
  
  
  (method public (keyboard?)
    (eq? current-operation 'keyboard))
  
  
  (method public (locked?)
    (eq? current-operation 'locked))
  
  
  (method (set-modifiers s? c? a?)
    (set! shift? s?)
    (set! control? c?)
    (set! alt? a?))
  
  
  ;;;
  ;;;; Steps
  ;;;
  
  
  (method public (with-locked-operation proc)
    (let ((old-operation current-operation))
      (unwind-protect
          (begin
            (set! current-operation 'locked)
            (proc))
        (set! current-operation old-operation))))
  
  
  (method public (collapse? row)
    )
  
  
  (method public (expand? row)
    )
  
  
  (method public (end-delayed?)
    (if (and multiple-selection? (not shift?) (not control?) (eq? mouse-down-part 'content))
        (mouse-up?)
      (not (mouse-up?))))
  
  
  (method public (allow-start-drag?)
    (and (eq? mouse-down-part 'content)
         (mouse-down?)))
  
  
  (method public (mouse-down-part-control?)
    (eq? mouse-down-part 'control))
  
  
  ;;;
  ;;;; Actions
  ;;;
  
  
  (method public (delay-selection)
    (set! delay-selection? #t))
  
  
  (method public (change-selection?)
    (case current-operation
      ((mouse-down) (not delay-selection?))
      ((mouse-up) delay-selection?)
      (else #t)))
  
  
  (method public (mouse-down view part shift? control? alt? ms?)
    (set! current-operation 'mouse-down)
    (set! mouse-down-view view)
    (set! mouse-down-part part)
    (set-modifiers shift? control? alt?)
    (set! multiple-selection? ms?))
  
  
  (method public (mouse-up shift? control? alt?)
    (if (mouse-double-down?)
        (set! current-operation 'mouse-double-up)
      (set! current-operation 'mouse-up))
    (set-modifiers shift? control? alt?))
  
  
  (method public (double-click shift? control? alt?)
    (set! current-operation 'mouse-double-down)
    (set-modifiers shift? control? alt?))
  
  
  (method public (keyboard shift? control? alt?)
    (set! current-operation 'keyboard)
    (set-modifiers shift? control? alt?))
  
  
  (method public (reset)
    (set! current-operation {})
    (set! mouse-down-part {})
    (set-modifiers #f #f #f)
    (set! multiple-selection? #f)
    (set! delay-selection? #f))))
