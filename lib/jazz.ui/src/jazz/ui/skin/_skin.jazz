;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Skins
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module jazz.ui.skin jazz


(import (jazz.application)
        (jazz.jml)
        (jazz.process)
        (jazz.system)
        (jazz.ui))


;;;
;;;; Skin
;;;


(definition public current-skin
  (make-parameter #f))


(definition public (set-skin skin)
  (current-skin skin)
  (skin-update))


(definition package (skin-update)
  (let ((process (get-process)))
    (when (and process (is-application?~ process))
      (let ((status (find-status-bar~ process)))
        (when status
          (let ((label (locate-component~ status 'skin)))
            (when label
              (set-title~ label (present~ (current-skin))))))))))


(definition public (get-skins)
  (let ((designer (get-skins-designer~ (get-application))))
    (when designer
      (get-reference~ designer))))


(definition public (prepare-skins)
  (let ((skins (default-skins)))
    (set-skin (or (find-component~ skins (default-skin))
                  (child~ skins 'jazz)))))


(definition package (default-skins)
  (instantiate~
    (<form>
      (<Skins>
        (<Default-Skin> name: default)
        (<Jazz-Skin>    name: jazz)
        (<Windows-Skin> name: windows)))))


(definition package (default-skin)
  (find-setting 'jazz.ui.skin 'jazz))


;;;
;;;; Look
;;;


(definition public (find-look name)
  (child~ (current-skin) name)))
