;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Code Text View
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.ui.text.Code-Text-View jazz


(import (jazz.catalog)
        (jazz.graphic)
        (jazz.io)
        (jazz.jml)
        (jazz.library)
        (jazz.library.automata)
        (jazz.platform)
        (jazz.system)
        (jazz.ui)
        (jazz.ui.search)
        (jazz.ui.view)
        (jazz.ui.window)
        (time))


(class undocumented Code-Text-View extends Text-View
  
  
  (slot matching-highlights initialize '())
  
  
  (method override (new-model)
    (new Text-Model base-style: {Text-Style Code-Base} left-padding: 12))
  
  
  (method override (new-syntax)
    (new Code-Syntax model))
  
  
  (method override (preferences)
    (new Code-Text-Preferences))
  
  
  (method override (install rest)
    (nextmethod rest)
    (let ((pref (preferences)))
      (when pref
        (add-style 'Match (get-match-style~ pref)))))

  
  ;;;
  ;;;; Host
  ;;;
  
  
  (method override (host-workspaces)
    '(text debugger test reference emacs empty multi))
  
  
  ;;;
  ;;;; Access
  ;;;
    

  (method override (tab-press key modifiers)
    (if (or (has-completion?)
            (not accepts-returns?))
        (nextmethod key modifiers)
      (if (or (empty-selection?) (= (get-line~ (get-start)) (get-line~ (get-end))))
          (insert-char #\tab)
        (tabulate))))


  (method override (char-press key)
    (nextmethod key)
    (when (eqv? key #\space)
      (show-arguments)))


  (method override (context-menu pos)
    (receive (shift? control? alt?) (modifiers-down)
      (let ((move-caret
             (cond ((and (not control?) (not shift?) (not alt?)) 'outside-selection)
                   ((and (not control?) shift? (not alt?)) 'never)
                   ((and control? shift? (not alt?)) 'never)
                   (else 'always))))
        (context-menu-click pos move-caret: move-caret))
      (cond ((and (not control?) shift? (not alt?)) (edit-definitions pos))
            ((and control? shift? (not alt?)) (edit-references pos))
            (else (track-popup-menu (get-context-menu) pos)))))

  
  ;;;
  ;;;; Actions
  ;;;
  
  
  (method override (focus-actions)
    (cons (find-actions 'code-text)
          (nextmethod)))
  
  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method (on-find-imports evt)
    (let ((expr (current-expr)))
      (if (symbol? expr)
          (with-cursor :wait
            (lambda ()
              (find-imports~ (get-syntax) expr)))
        (message-box "Please select the symbol that will be searched for imports"))))
  
  
  (method (on-find-all-imports evt)
    )

  
  ;;;
  ;;;; Moving
  ;;;
  
  
  (method override (backward-compound (extend?: extend? #f))
    (backward-expr extend?: extend?))
  
  
  (method override (forward-compound (extend?: extend? #f))
    (forward-expr extend?: extend?))
  
  
  (method override (upward-compound)
    (exit-composite))
  
  
  (method override (downward-compound)
    (enter-composite))
  
  
  (method package (on-backward-composite evt)
    (backward-expr))
  
  
  (method package (on-forward-composite evt)
    (forward-expr))
  
  
  (method package (on-backward-outline evt)
    (let ((expl <Text-Explorer> (new (explorer-class) model end: (get-start))))
      (when (backward-expr~ expl)
        (set-selection (get-range~ expl)))))
  
  
  (method package (on-forward-outline evt)
    (let ((expl <Text-Explorer> (new (explorer-class) model end: (get-end))))
      (when (forward-expr~ expl)
        (set-selection (get-range~ expl)))))
  
  
  (method package (on-enter-composite evt)
    (enter-composite))
  
  
  (method package (on-exit-composite evt)
    (exit-composite))
  
  
  (method protected virtual (backward-expr (extend?: extend? locked-anchor?))
    (let ((expl <Text-Explorer> (new (explorer-class) model start: (get-start))))
      (when (backward-expr~ expl)
        (if extend?
            (change-selection (get-start~ expl))
          (set-caret (get-start~ expl))))))


  (method protected virtual (forward-expr (extend?: extend? locked-anchor?))
    (let ((expl <Text-Explorer> (new (explorer-class) model end: (get-end))))
      (when (forward-expr~ expl)
        (if extend?
            (change-selection (get-end~ expl))
          (set-caret (get-end~ expl))))))
  
  
  (method protected virtual (enter-composite)
    (let ((expl <Text-Explorer> (new (explorer-class) model start: (get-start) end: (get-end))))
      (when (enter-composite~ expl)
        (set-caret (get-end~ expl)))))
  
  
  (method protected virtual (exit-composite)
    (let ((expl <Text-Explorer> (new (explorer-class) model start: (get-end) end: (get-end))))
      (when (exit-list~ expl)
        (set-caret (get-end~ expl)))))
  
  
  (method override (move-caret pos direction shift?)
    (nextmethod pos direction shift?)
    (end-completion))
  
  
  (method (on-transpose-expr evt)
    (transpose-expr))
  
  
  (method public (transpose-expr)
    (transpose-movements forward-expr~ backward-expr~))

  
  ;;;
  ;;;; Definitions
  ;;;
  
  
  (method protected virtual (get-context)
    #f)
  
  
  (method protected virtual (edition-workspace)
    #f)

  
  (method (on-edit-definitions evt)
    (let ((form (current-expr))
          (appl (get-application)))
      (when form
        (cond ((string? form)
               (edit-document~ appl (new File (tokenise-filename form))))
              ((file? form)
               (edit-document~ appl form workspace: (edition-workspace)))
              (else
               (let ((item (current-history-item)))
                 (if (and (has-effective-selection?) (composite-reference? form))
                     (edit-composite-reference appl item form)
                   (let ((target (standardize-form form #t)))
                     (edit-definitions~ appl target workspace: (edition-workspace) context: (get-context) history-item: item)))))))))

  
  (method (on-edit-references evt)
    (let ((form (current-expr))
          (appl (get-application)))
      (when form
        (let ((target (standardize-form form (empty-effective-selection?))))
          (edit-references~ appl target context: (get-context) history-item: (current-history-item))))))
  
  
  (method (standardize-form form extract?)
    (let ((target (cond ((string? form) form)
                        ((symbol? form) (symbol->string form))
                        ((keyword? form) (string-append (keyword->string form) ":"))
                        (else (error "Unable to standardize: {s}" form)))))
      (if (not extract?)
          target
        (cond ((tag-string? target) (tag->name target))
              ((dispatch-string? target) (dispatch->name target))
              ((reference-string? target) (reference->name target))
              (else target)))))
    
  
  (method protected virtual (edit-symbol-class symbol)
    #f)


  (method protected (edit-definitions pos)
    (let ((form (expr-at (view->text pos))))
      (when form
        (cond ((string? form)
               (edit-document~ (get-application) (new File (tokenise-filename form))))
              ((file? form)
               (edit-document~ (get-application) form workspace: (edition-workspace)))
              (else
               (let* ((appl (get-application))
                      (cataloguer (get-cataloguer~ appl)))
                 (when cataloguer
                   (let ((item (current-history-item))
                         (target (standardize-form form #t)))
                     (let ((definitions (get-coalesced-definitions~ cataloguer target context: (get-context))))
                       (case (length definitions)
                         ((0) (bell))
                         ((1) (add-history~ appl item) (edit~ (car definitions)))
                         (else (track-popup-menu (new Definitions-Menu definitions: definitions history-item: item) pos))))))))))))


  (method protected (edit-references pos)
    (let ((form (expr-at (view->text pos))))
      (when form
        (let* ((appl (get-application))
               (cataloguer (get-cataloguer~ appl)))
          (when cataloguer
            (let* ((item (current-history-item))
                   (target (standardize-form form #t))
                   (references (get-references~ cataloguer target context: (get-context))))
              (case (length references)
                ((0) (bell))
                ((1) (add-history~ appl item) (edit-textual-reference~ (car references) target))
                (else (track-popup-menu (new References-Menu target: target definitions: references history-item: item) pos)))))))))
  
  
  (definition (edit-composite-reference appl item form)
    (let ((entry (locator->entry form)))
      (if (not entry)
          (bell)
        (add-history~ appl item)
        (edit~ entry))))

  
  ;;;
  ;;;; History
  ;;;
  
  
  (method override (current-history-item)
    (let ((selection (get-selection))
          (moniker (get-moniker)))
      (if (not moniker)
          (let ((frame (get-frame)))
            (when frame
              (new History-Document-Item frame selection)))
        (new History-File-Item moniker selection))))

  
  ;;;
  ;;;; Save
  ;;;
  
  
  (method override (save-content moniker)
    (nextmethod moniker)
    (update-catalog))

  
  ;;;
  ;;;; Catalog
  ;;;
  
  
  (method (update-catalog)
    (let ((moniker (get-moniker)))
      (when moniker
        (let ((catalog (find-catalog)))
          (when catalog
            (post-catalog
              (lambda ()
                (update-file~ catalog moniker))))))))
  
  
  (method (find-catalog)
    (let ((moniker (get-moniker)))
      (when moniker
        (let ((entries (get-file-entries~ (get-cataloguer~ (get-application)) moniker)))
          (when (not-null? entries)
            ;; quicky until we check for catalogs overlapping
            (let ((entry (car entries)))
              (get-catalog~ entry)))))))

  
  ;;;
  ;;;; Evaluation
  ;;;
  
  
  (method (on-evaluate evt)
    (evaluate-selection))
  
  
  (method (on-evaluate-buffer evt)
    (evaluate-buffer))
  
  
  (method protected virtual (evaluate-selection)
    )
  
  
  (method protected virtual (evaluate-buffer)
    )
  
  
  (method protected virtual (evaluate-range range)
    )

  
  ;;;
  ;;;; Tabulation
  ;;;


  (method public virtual (tabulate)
    (define (untabulate-line line)
      (when (space/tab? (get-char (new Cell line 0)))
        (replace-text (new Range$Cell$ (new Cell line 0) (new Cell line 1))
                      (list ""))))
    
    (define (space/tab? c)
      (memq? c '(#\space #\tab)))
    
    (if (has-selection?)
        (for-each (if (shift-down?) untabulate-line tabulate-line)
                  (selected-lines))
      (let* ((pos (get-start))
             (line (get-line~ pos))
             (col (get-col~ pos)))
        (when (and (> line 0) (= col 0))
          (let* ((str (paragraph-string (- line 1)))
                 (rank (find-if (lambda (c) (not (whitespace? c))) str return: 'position)))
            (if (not rank)
                (insert-string str)
              (insert-string (subseq str 0 rank))))))))
  
  
  (method protected virtual (tabulate-line line)
    (replace-text (new Range$Cell$ (new Cell line 0) (new Cell line 0))
                  (list (string #\tab))))
  
  
  (method public virtual (tabulate-lines start end)
    )


  ;;;
  ;;;; Completion
  ;;;
  
  
  (method override (auto-complete?)
    #t)


  (method override (completion-name pos)
    (unless (text-constituent?~ syntax (get-char (if (has-selection?) (get-end) pos)))
      (let ((prev (previous-cell pos)))
        (when prev
          (let ((c (get-char prev)))
            (unless (string-delimiter? c)
              (when (text-constituent?~ syntax c)
                (let ((expl <Text-Explorer> (new (explorer-class) model start: pos end: pos)))
                  (when (and (backward-expr~ expl) (memq? (get-kind~ expl) '(symbol specifier tag keyword string)))
                    (let ((c (char-backward~ expl 0)))
                      (when (or (not c) (not (string-delimiter? c)))
                        (get-symbol-string~ expl))))))))))))
  
  
  (method override (symbol-completions name)
    (if (numeric? name)
        '()
      (let ((cataloguer (get-cataloguer~ (get-application))))
        (if (not cataloguer)
            '()
          (let ((table (make-table test: equal?))
                (len (string-length name)))
            (add-completions~ cataloguer table name context: (get-context))
            (for-each-alias (get-root-alias)
              (lambda (alias)
                (let ((anchor (get-anchor~ alias)))
                  (when anchor
                    (let ((anchor-name (symbol->string anchor)))
                      (when (compare-n anchor-name name len)
                        (table-set! table anchor-name #t)))))))
            (table-keys table))))))

  
  ;;;
  ;;;; Coloring
  ;;;


  (method package (on-recolorize-syntax evt)
    (with-cursor :wait
      (lambda ()
        (recolorize-syntax~ syntax))))
    
  
  ;;;
  ;;;; Arguments
  ;;;
  
  
  (method protected virtual (show-arguments)
    )
  
  
  ;;;
  ;;;; Arrow Keys
  ;;;
  
  
  (method override (left-arrow-move extend? word?)
    (convert-completion)
    (nextmethod extend? word?))
  
  
  (method override (right-arrow-move extend? word?)
    (convert-completion)
    (nextmethod extend? word?))
  
  
  (method override (up-arrow-move extend? scroll?)
    (convert-completion)
    (nextmethod extend? scroll?))
  
  
  (method override (down-arrow-move extend? scroll?)
    (convert-completion)
    (nextmethod extend? scroll?))
  
  
  ;;;
  ;;;; Tabify
  ;;;
  
  
  (method (on-tabify evt)
    (tabify))
  
  
  (method (tabify)
    (define (tabify-line line)
      @to-convert-to-outline-text
      (let* ((str (paragraph-string line))
             (char (find-if (lambda (c) (not (whitespace? c))) str return: 'position)))
        (when (and char (> char 0))
          (let* ((column (char->column line char))
                 (tabs   (floor (/ column tab-size)))
                 (spaces (modulo column tab-size)))
            (replace-text (new Range$Cell$ (new Cell line 0) (new Cell line char))
                          (list (append! (make-string tabs #\tab)
                                         (make-string spaces #\space))))))))
    
    (for-each tabify-line (naturals (get-line~ (get-start)) (+ (get-line~ (get-end)) 1))))
  

  ;;;
  ;;;; Match
  ;;;
  
  
  (method protected virtual (match-backwards? char)
    #f)
  
  
  (method protected virtual (match-forwards? char)
    #f)


  (method (flash-matching-character pref)
    (define flash-delay
      (if (keyboard-input?)
          0
        (get-flash-delay~ pref)))
    
    (define flash-duration
      (get-flash-duration~ pref))
    
    (define (flash-character highlight)
      (let ((start (get-start~ (get-range~ highlight)))
            (add (lambda () (add-matching-highlight highlight)))
            (remove (lambda () (remove-matching-highlights))))
        (add-text-action add)
        (add-text-action remove)
        (if (cell-displayed? start)
            (thread-start!
              (new-thread
                (lambda ()
                  (sleep flash-delay)
                  (execute-event
                    (lambda () (run-text-action add)))
                  (sleep flash-duration)
                  (execute-event
                    (lambda () (run-text-action remove))))))
          (let ((expl <Text-Explorer> (new (explorer-class) model start: (nu+ start 1) end: (nu+ start 1))))
            (user-message "{l detail: :human}" (map (lambda (mark)
                                                      (get-string (get-range~ mark)))
                                                    (collect-forward-exprs~ expl 3)))))))
    
    (let ((pref (preferences)))
      (when (and pref (eq? (get-match-action~ pref) 'flash))
        (remove-all-text-actions)
        (remove-matching-highlights)
        (let ((highlight (find-matching-highlight (not (keyboard-input?)))))
          (when (and highlight (neq? flash-delay 'infinity))
            (flash-character (car highlight)))))))
  
  
  (method (highlight-matching-character pref)
    (define (highlight-character)
      (let ((highlight (find-matching-highlight)))
        (when highlight
          (add-matching-highlight (car highlight))
          (when (eq? (get-highlight-mode~ pref) 'both)
            (add-matching-highlight (cdr highlight))))))
    
    (remove-matching-highlights)
    (highlight-character))
  
  
  (method (find-matching-highlight (forward? #t))
    (define (find-backward pos)
      (unless (at-beginning?)
        (let ((previous (previous-cell pos)))
          (when (match-backwards? (get-char previous))
            (catch (Explore-Error err
                     (bell)
                     #f)
              (let ((expl <Text-Explorer> (new (explorer-class) model start: pos)))
                (when (backward-expr~ expl)
                  (let ((start (get-start~ expl)))
                    (cons (new-highlight start (next-cell start))
                          (new-highlight previous pos))))))))))
    
    (define (find-forward pos)
      (unless (at-end?)
        (when (match-forwards? (get-char pos))
          (catch (Explore-Error err
                   (bell)
                     #f)
            (let ((expl <Text-Explorer> (new (explorer-class) model start: pos)))
              (when (forward-expr~ expl)
                (let ((end (get-end~ expl)))
                  (cons (new-highlight (previous-cell end) end)
                        (new-highlight pos (next-cell pos))))))))))
    
    (define (new-highlight start end)
      (let ((range (new-range start end))
            (style (get-style 'Match)))
        (new Text-Highlight self range style show-unfocused?: #f)))
    
    (unless (macro-playing?~ (get-application))
      (when (empty-selection?)
        (let ((pos (get-caret)))
          (or (find-backward pos)
              (and forward? (find-forward pos)))))))
  
  
  (method (add-matching-highlight highlight)
    (add-highlight highlight)
    (invalidate-highlight highlight)
    (set! matching-highlights (cons highlight matching-highlights)))
  
  
  (method (remove-matching-highlights)
    (for-each (lambda (highlight)
                (remove-highlight highlight)
                (invalidate-highlight highlight))
              matching-highlights)
    (set! matching-highlights '()))
  
  
  (method override (selection-change)
    (let ((pref (preferences)))
      (when pref
        (case (get-match-action~ pref)
          ((flash) (flash-matching-character pref))
          ((highlight) (highlight-matching-character pref))))))
  
  
  ;;;
  ;;;; Java
  ;;;
    
  
  (method (on-browse-java evt)
    (browse-java))
  
  
  (method (browse-java)
    @wait
    (let ((expr (current-expr)))
      (if (is-not? expr Symbol)
          (bell)
        (let* ((classname (->string expr))
               (javaClass (lookupClass~ org.apache.bcel.Repository classname)))
          (if (not javaClass)
              (error "Unable to find java class: {a}" classname)
            (let* ((host (new-frame Java-Manager))
                   (manager (get-guest~ host)))
              (browse-classes~ manager (list classname))))))))


  ;;;
  ;;;; Read/Write
  ;;;
  
  
  (method (on-set-read/write evt)
    (let ((moniker (get-moniker~ (get-controller))))
      (set-read/write~ moniker)
      (update-status))))


;;;
;;;; Definitions-Menu
;;;


(class Definitions-Menu extends Context-Menu
  
  
  (property definitions  accessors generate)
  (property history-item accessors generate)
  
  
  (method override (finish rest)
    (nextmethod rest)
    (if (< (length definitions) 20)
        (for-each (lambda (definition)
                    (let ((title (present~ definition)))
                      (new Label-Item parent: self title: title action-handler: (new Event-Handler target: self method-name: 'on-action properties: (list definition: definition)))))
                  (sort definition<? definitions))
      (let* ((menu self)
             (create-item (lambda (user-data title parent)
                            (new Label-Item parent: parent title: title action-handler: (new Event-Handler target: menu method-name: 'on-action properties: (list definition: user-data)))))
             (get-string present~))
        (make-condensed-menu definitions create-item key: get-string))))
  
  
  (definition (definition<? x y)
    (string<? (present~ x) (present~ y)))
  
  
  (method (on-action evt)
    (add-history~ (get-application) history-item)
    (edit~ (get-property~ evt definition:))))


;;;
;;;; References-Menu
;;;


(class References-Menu extends Context-Menu
  
  
  (property target       accessors generate)
  (property definitions  accessors generate)
  (property history-item accessors generate)
  
  
  (method override (finish rest)
    (nextmethod rest)
    (if (< (length definitions) 20)
        (for-each (lambda (definition)
                    (let ((title (->string (present~ definition))))
                      (new Label-Item parent: self title: title action-handler: (new Event-Handler target: self method-name: 'on-action properties: (list definition: definition)))))
                  (sort definition<? definitions))
      (let* ((menu self)
             (create-item (lambda (user-data title parent)
                            (new Label-Item parent: parent title: title action-handler: (new Event-Handler target: menu method-name: 'on-action properties: (list definition: user-data)))))
             (get-string present~))
        (make-condensed-menu definitions create-item key: get-string))))
  
  
  (definition (definition<? x y)
    (string<? (present~ x) (present~ y)))
  
  
  (method (on-action evt)
    (add-history~ (get-application) history-item)
    (edit-textual-reference~ (get-property~ evt definition:) target))))
