;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Plain Text View
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.ui.text.Filter-Text-View jazz


(import (jazz.git)
        (jazz.graphic)
        (jazz.io)
        (jazz.jml)
        (jazz.library)
        (jazz.ui)
        (jazz.ui.dialog)
        (jazz.ui.view)
        (jazz.git.ui)) ;; should go away


;;;
;;;; Filter-Text-View
;;;


(class Filter-Text-View extends Plain-Text-View
  
  
  (property target-name initialize {} accessors generate)
  
  
  (form
    (<install> default-style: {Text-Style font: {Font Label}} left-padding: 2 top-padding: 2 accepts-returns?: #f focus-selects-all?: #t show-unfocused-selection?: #f))
  
  
  ;;;
  ;;;; Access
  ;;;
  
  
  (method (find-target)
    (when target-name
      (locate~ (get-guest) target-name)))
    
  
  ;;;
  ;;;; Events
  ;;;

  
  (method override (return-press key)
    (filter-target))
  
  
  (method public (filter-target)
    (define (determine-visible? row filter)
      (some? (lambda (cell)
               (when (get-title~ cell)
                 (search (get-title~ cell) filter ignore-case?: #t)))
             (get-children~ row)))
    
    (define (make-row-visible row visible?)
      (set-visible?~ row visible?)
      (when visible?
        (let loop ((node (get-father~ row)))
             (when node
               (set-visible?~ node #t)
               (loop (get-father~ node))))))
    
    (let ((target (find-target))
          (filter (->search-set (get-string-content))))
      (when target
        (with-cursor :wait
          (lambda ()
            ;; quicky
            (set-selection~ target '())
            (with-update-locked~ target
              (lambda ()
                (for-each-row~ target
                  (lambda (row rank)
                    (make-row-visible row (determine-visible? row filter)))))))))))))