;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Formatted Text Model
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.ui.text.Formatted-Text-Model jazz


(import (jazz.jml)
        (jazz.library)
        (jazz.platform)
        (jazz.ui)
        (jazz.ui.window))


(class Formatted-Text-Model extends Text-Model

  
  ;;;
  ;;;; External
  ;;;
  
  
  (method meta override (external-name . rest)
    'formatted-text)

  
  ;;;
  ;;;; Content
  ;;;

  
  (method override (empty-content)
    (new Formatted-Text
      formats: '()
      styles: '()
      paragraphs: (list (list #f (list "")))))
  
  
  (method override (get-content)
    (get-formatted-content))
  
  
  (method override (set-content text)
    (set-formatted-content (or text (empty-content))))


  ;;;
  ;;;; Input/Output
  ;;;
  
  
  (method override (read-moniker moniker)
    (read-formatted moniker))
  
  
  (method override (save-to moniker)
    (save-formatted moniker))

  
  ;;;
  ;;;; Headings
  ;;;
  
  
  (method public (for-each-heading proc)
    (let ((all '(Heading1 Heading2 Heading3 Heading4 Heading5)))
      (for-each-paragraph
        (lambda (line <fx> paragraph <Paragraph>)
          (let ((run (first-run~ paragraph)))
            (let ((style (and run (get-style~ run))))
              (when style
                (for-each (lambda (name)
                            (let ((heading (get-style name error?: #f)))
                              (when (and heading (inherits?~ style heading))
                                (proc name heading line (get-string~ paragraph)))))
                          all))))))))
  
  
  (method public (collect-headings)
    (let ((headings (new List-Factory)))
      (for-each-heading
        (lambda (name style line string)
           (put~ headings (list name style line string))))
      (get-output~ headings)))

  
  ;;;
  ;;;; Table Of Content
  ;;;
  
  
  @mvc
  (method override (insert-table-of-content)
    (let ((headings (collect-headings)))
      (insert-styled "Table Of Content" 'Heading1)
      (insert-newline)
      (for-each (lambda (heading)
                  (bind (name style line string) heading
                    (when (eq? name 'Heading1)
                      (insert-newline))
                    (let* ((start (get-start))
                           (line (get-line~ start)))
                      (insert-link string anchor: string)
                      (insert-newline)
                      (unless (eq? name 'Heading1)
                        (toggle-bulleted line)))))
                headings))
    (insert-newline)
    (insert-newline))


  ;;;
  ;;;; Headings
  ;;;
  
  
  (definition Heading-Levels
    '((Heading1 . 1)
      (Heading2 . 2)
      (Heading3 . 3)
      (Heading4 . 4)
      (Heading5 . 5)))
  
  
  (definition (heading-level heading)
    (let ((info (assq heading Heading-Levels)))
      (if info
          (cdr info)
        (error "Unable to get heading level of {t}" heading))))


  ;;;
  ;;;; Chapters
  ;;;
  
  
  @mvc
  (method override (get-chapters)
    (map (lambda (heading)
           (bind (name style line string) heading
             (list (heading-level name) (new Cell line 0) "" string)))
         (collect-headings)))
  
  
  @mvc
  (method override (get-first-chapter lst)
    #f)
  
  
  @mvc
  (method override (get-remaining-chapters lst)
    lst)))
