;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Formatted Text View
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.ui.text.Formatted-Text-View jazz


(import (jazz.jml)
        (jazz.library)
        (jazz.platform)
        (jazz.ui)
        (jazz.ui.window))


(class Formatted-Text-View extends Text-View


  (slot ruler initialize #f)
  
  
  (form
    (<install> wrap?: #t))

  
  ;;;
  ;;;; External
  ;;;
  
  
  (method meta override (external-name . rest)
    'formatted-text)
  
  
  (method override (default-extension)
    "ftx")
  
  
  (method override (extensions)
    '(("Formatted Texts" . "ftx")))
  
  
  ;;;
  ;;;; Actions
  ;;;
  

  (method override (focus-actions)
    (cons (find-actions 'formatted-text)
          (nextmethod)))

  
  ;;;
  ;;;; Host
  ;;;
  
  
  (method override (host-workspaces)
    '(formatted))
  
  
  ;;;
  ;;;; Controller
  ;;;
  
  
  @convert
  (class Formatted-Text-Controller extends Document-Controller
    
    
    (method (install-container)
      (install-scroller)
      (install-ruler))
  
  
    (method (install-ruler)
      (let* ((root (get-root~ document))
             (scroller (get-scroller~ document))
             (ruler (new Ruler parent: (get-content~ root))))
        (set-ruler~ document ruler)
        (set-parent~ scroller (get-content~ ruler))
        (set-client~ ruler document))))
  
  
  @convert
  (method override (new-controller)
    (new Formatted-Text-Controller self))


  ;;;
  ;;;; Ruler
  ;;;
  
  
  (method override (get-ruler)
    ruler)
  
  
  (method public (set-ruler r)
    (set! ruler r))

  
  ;;;
  ;;;; Content
  ;;;

  
  (method override (empty-content)
    (new Formatted-Text
      formats: '()
      styles: '()
      paragraphs: (list (list #f (list "")))))
  
  
  (method override (get-content)
    (get-formatted-content))
  
  
  (method override (set-content text)
    (set-formatted-content (either text (empty-content))))

  
  ;;;
  ;;;; Menu
  ;;;
  
  
  ;; until converted
  (method override (get-context-menu)
    #f)


  ;;;
  ;;;; Cursor
  ;;;


  (method override (cursor-update view <Point>)
    (show-text-cursor)
    (when (and enabled? selectable?)
      (let* ((pos (view->text view))
             (par (get-paragraph (get-line~ pos))))
        (if (< (get-h~ view) (paragraph-left~ par))
            (set-cursor :left-arrow)
          (let ((style (get-style-at pos)))
            (if (is? style Hyperlink-Style)
                (set-cursor :finger)
              (set-cursor :ibeam)))))))

  
  ;;;
  ;;;; Mouse
  ;;;


  (method override (mouse-down view)
    (when enabled?
      (let* ((pos (view->text view))
             (style (get-style-at pos)))
        (unless (is? style Hyperlink-Style)
          (nextmethod view)))))


  (method override (drag-up view . rest)
    (define (invoke-action action)
      (cond ((is? action Event-Handler)
             (invoke~ action self (apply new Event :hyperlink self (get-properties~ action))))
            (else
             (action))))
    
    (define (goto-anchor anchor)
      (for-each-heading
        (lambda (heading line string)
          (when (= string anchor)
            (set-selection (new Range$Cell$
                             (new Cell line 0)
                             (new Cell line (cardinality string))))))))
    
    (let ((mouse-selecting? mouse-selecting?))
      (nextmethod view)
      (when (and enabled? (not mouse-selecting?))
        (let* ((pos (view->text view))
               (style (get-style-at pos)))
          (when (is? style Hyperlink-Style)
            (let ((anchor (get-anchor~ style))
                  (action (get-action~ style)))
              (cond (action
                     (invoke-action action))
                    (anchor
                     (goto-anchor anchor))
                    (else
                     (bell)))))))))


  ;;;
  ;;;; Edition
  ;;;
  
  
  (method override (copy-selection)
    (nextmethod)
    (copy-formatted-selection))
  
  
  (method override (paste-clipboard)
    (paste-formatted-clipboard))


  ;;;
  ;;;; Input/Output
  ;;;
  
  
  (method override (read-moniker moniker)
    (read-formatted moniker))
  
  
  (method override (save-to moniker)
    (save-formatted moniker))

  
  ;;;
  ;;;; Headings
  ;;;
  
  
  (method public (for-each-heading proc)
    (let ((heading0 (get-style 'Heading0 error?: #f))
          (heading1 (get-style 'Heading1 error?: #f))
          (heading2 (get-style 'Heading2 error?: #f))
          (heading3 (get-style 'Heading3 error?: #f)))
      (when (and heading0 heading1 heading2 heading3)
        (let ((all (list heading0 heading1 heading2 heading3)))
          (for-each-paragraph
            (lambda (row <fx> paragraph <Paragraph>)
              (let* ((run (first-run~ paragraph))
                     (style (essay run (get-style~ run))))
                (when (memq? style all)
                  (proc (get-name~ style) row (get-string~ paragraph))))))))))
  
  
  (method public (collect-headings)
    (let ((headings (new List-Factory)))
      (for-each-heading
        (lambda (heading row string)
           (put~ headings (list heading row string))))
      (get-output~ headings)))

  
  ;;;
  ;;;; Table Of Content
  ;;;
  
  
  (method override (insert-table-of-content)
    (let ((headings (collect-headings)))
      (insert-styled "Table Of Content" 'Heading0)
      (insert-newline)
      (for-each (lambda (heading)
                  (bind (heading row string) heading
                    (when (eq? heading 'Heading0)
                      (insert-newline))
                    (let* ((start (get-start))
                           (line (get-line~ start)))
                      (insert-hyperlink string anchor: string)
                      (insert-newline)
                      (unless (eq? heading 'Heading0)
                        (toggle-bulleted line)))))
                headings))
    (insert-newline)
    (insert-newline))


  ;;;
  ;;;; Headings
  ;;;
  
  
  (definition Heading-Levels
    '((Heading0 . 0)
      (Heading1 . 1)
      (Heading2 . 2)
      (Heading3 . 3)
      (Heading4 . 4)
      (Heading5 . 5)))
  
  
  (definition (heading-level heading)
    (let ((info (assq heading Heading-Levels)))
      (if info
          (cdr info)
        (error "Unable to get heading level of {t}" heading))))


  ;;;
  ;;;; Chapters
  ;;;
  
  
  (method override (get-chapters)
    (map (lambda (heading)
           (bind (heading line string) heading
             (list (heading-level heading) (new Cell line 0) "" string)))
         (collect-headings)))
  
  
  (method override (get-first-chapter lst)
    #f)
  
  
  (method override (get-remaining-chapters lst)
    lst)))
