;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Image Style
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.ui.text.Image-Style jazz


(import (jazz.graphic)
        (jazz.ui))


(class Image-Style extends Text-Style
  
  
  (attributes (alignment font color highlight frame)
    (image   initialize #f)
    (scaled? initialize #f)
    (scaling initialize 1.0))
  
  
  (slot texture)
  
  
  ;;;
  ;;;; Size
  ;;;
  
  
  (method override (get-width)
    (get-width~ (get-image)))
  
  
  (method override (get-height)
    (get-height~ (get-image)))
  
  
  (method override (run-width run)
    (get-width))
  
  
  ;;;
  ;;;; Text
  ;;;
  
  
  (method override (propagate?)
    #f)
  
  
  ;;;
  ;;;; Wrap
  ;;;
  
  
  (method override (wrap context margin h v width tabs place break run)
    (place run)
    (+ h (get-width)))
  
  
  ;;;
  ;;;; Drawing
  ;;;
  
  
  (method override (draw-style surface <Surface> context string <Sequence> h <fx> v <fx> line-height <fx> tabs left enabled?)
    (let* ((width (get-width))
           (height (get-height))
           (top (justify-element height line-height)))
      (draw~ (get-image) surface context h (+ v top))
      width))))
