;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Link-Style Dialog
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.ui.text.Link-Style-Dialog jazz


(import (jazz.graphic)
        (jazz.jml)
        (jazz.library)
        (jazz.ui))


(class Link-Style-Dialog extends View
  
  
  (property text    initialize #f accessors generate)
  (property address initialize #f accessors generate)
  (property anchor  initialize #f accessors generate)
  
  
  (form
    (<install>                                      size: {Dimension 500 261}
      (<Label-View>            name: title          title: "Link" position: {Point 10 9} size: {Dimension 350 16} font: {Font Caption})
      (<Label-View>            name: description    title: "Please specify text, address and anchor" position: {Point 30 27} size: {Dimension 350 16} font: {Font Label})
      (<Horizontal-Line>                            position: {Point 0 50} size: {Dimension 500 8})
      (<Label-View>            name: text-label     title: "Text:" position: {Point 62 90} size: {Dimension 33 16} font: {Font Label})
      (<Border-View>           name: text-border    position: {Point 121 88} size: {Dimension 294 19} border-type: edge style: entry
        (<Scroller-View>                            hscroll?: #f vscroll?: #f
          (<!>                 name: content        layout-type: fill
            (<Name-Text-View>  name: text-text      accepts-returns?: #f show-unfocused-selection?: #f focus-selects-all?: #t tooltip?: #t tooltip-text: "Link text" return-press-handler: {Event-Handler :form on-return-press} escape-press-handler: {Event-Handler :form on-escape-press}))))
      (<Label-View>            name: address-label  title: "Address:" position: {Point 62 122} size: {Dimension 54 16} font: {Font Label})
      (<Border-View>           name: address-border position: {Point 121 120} size: {Dimension 294 19} border-type: edge style: entry
        (<Scroller-View>                            hscroll?: #f vscroll?: #f
          (<!>                 name: content        layout-type: fill
            (<Name-Text-View>  name: address-text   accepts-returns?: #f show-unfocused-selection?: #f focus-selects-all?: #t tooltip?: #t tooltip-text: "Link address" return-press-handler: {Event-Handler :form on-return-press} escape-press-handler: {Event-Handler :form on-escape-press}))))
      (<Label-View>            name: anchor-label   title: "Anchor:" position: {Point 62 154} size: {Dimension 54 16} font: {Font Label})
      (<Border-View>           name: anchor-border  position: {Point 121 152} size: {Dimension 294 19} border-type: edge style: entry
        (<Scroller-View>                            hscroll?: #f vscroll?: #f
          (<!>                 name: content        layout-type: fill
            (<Name-Text-View>  name: anchor-text    accepts-returns?: #f show-unfocused-selection?: #f focus-selects-all?: #t tooltip?: #t tooltip-text: "Link anchor" return-press-handler: {Event-Handler :form on-return-press} escape-press-handler: {Event-Handler :form on-escape-press}))))
      (<Horizontal-Line>                            position: {Point 0 213} size: {Dimension 500 8})
      (<Push-Button>           name: ok             title: "OK" position: {Point 167 227} size: {Dimension 80 24} default?: #t action-handler: {Event-Handler :host on-ok})
      (<Push-Button>           name: cancel         title: "Cancel" position: {Point 253 227} size: {Dimension 80 24} action-handler: {Event-Handler :host on-cancel})))
  
  
  (method override (finish rest)
    (nextmethod rest)
    (set-string-content~ (locate 'text-text) (or text ""))
    (set-string-content~ (locate 'address-text) (or address ""))
    (set-string-content~ (locate 'anchor-text) (or anchor "")))
  
  
  (method override (focus-default)
    (acquire-focus~ (locate 'text-text)))

  
  ;;;
  ;;;; Host
  ;;;
  
  
  (method meta override (host-title)
    "New")
  

  ;;;
  ;;;; Modal
  ;;;
  
  
  (method override (get-modal-result)
    (define (non-empty name)
      (let ((content (get-string-content~ (locate name))))
        (if (empty-string? content)
            #f
          content)))
    
    (values (non-empty 'text-text)
            (non-empty 'address-text)
            (non-empty 'anchor-text)))
  

  ;;;
  ;;;; Keyboard
  ;;;
  
  
  (method override (get-tab-stops)
    (list
      (locate 'text-text)
      (locate 'address-text)
      (locate 'anchor-text)))
  

  ;;;
  ;;;; Events
  ;;;
  
  
  ;; Should really be generic in the Dialog class
  (method override (on-return-press evt)
    (when (get-enabled?~ (locate 'ok))
      (validate-dialog)
      (let ((dialog (get-host)))
        (end-modal~ dialog (get-modal-result~ dialog)))))
  
  
  ;; Should really be generic in the Dialog class
  (method override (on-escape-press evt)
    (let ((dialog (get-host)))
      (cancel-modal~ dialog)))
  

  ;;;
  ;;;; Drawing
  ;;;
  
  
  (definition Header-Color
    (new Color red: 120 green: 120 blue: 255))

  
  (method override (draw surface context)
    (let ((size (get-size)))
      (gradient-fill-rect~ surface (new Rect 0 0 (get-width~ size) 50) (list (list 0 {Color White}) (list 1 Header-Color)))))))
