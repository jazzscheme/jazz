;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Paragraphs
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.ui.text.Paragraph jazz


(import (jazz.geometry)
        (jazz.graphic)
        (jazz.ui))


(proclaim (warn optimizations))


(class Paragraph extends Outline-Row


  (slot protected format <Format> initialize #f accessors generate)
  (slot protected string <string>               accessors generate)
  (slot protected runs   <list>                 accessors generate)
  (slot protected lines  <list>                 accessors generate)
  
  
  (method override (print output readably)
    (print-unreadable self output
      (lambda (output)
        (write string output))))
  

  ;; temp optimization that will not work
  ;; if a text embeds others views in itself
  (method override (set-size sz)
    (set! size sz))


  ;;;
  ;;;; Access
  ;;;
  
  
  (method public (get-length) <fx>
    (cast <fx> (cardinality string)))
  
  
  (method public (paragraph-left) <fx>
    (+ (get-h~ position) (get-left-margin~ format)))


  (method public (paragraph-top) <fx>
    (get-v~ position))
  
  
  ;;;
  ;;;; Size
  ;;;
  
  
  (method public (compute-width) <fx>
    (let ((width (get-left-margin~ format)))
      (for-each (lambda (run <Run>)
                  (increase! width (compute-width~ run)))
                runs)
      width))


  ;;;
  ;;;; Range
  ;;;


  ;; All these special cases need major cleanup!
  (method protected (range-region left-padding <fx> start end transformer)
    (let ((rs <fx> (or start 0))
          (re <fx> (or end (cardinality string)))
          (left <fx> (paragraph-left))
          (top <fx>  (paragraph-top))
          (width <fx> (get-width)))
      (cond ;; full paragraph
            ((and (= rs 0) (not end))
             (let ((rect (new Rect left top (+ left width) (+ top (get-height~ size)))))
               (new Region keep-rectangles?: #t rect: (transformer rect))))
            ;; end of the last line
            ((and (= rs re) (not end))
             (let* ((line <Line> (last lines))
                    (beginning (get-h~ (col->view~ line re #f)))
                    (right (+ left-padding (- width left)))
                    (rect (new Rect (+ left beginning) (+ top (get-top~ line)) (+ left right) (+ top (get-bottom~ line))))
                    (offset (offset-rect rect left top)))
               (new Region keep-rectangles?: #t rect: (transformer rect))))
            ;; partial range
            (else
             (let ((s (col->text rs))
                   (e (col->text re))
                   (w (+ left-padding (- width left)))
                   (region (new Region keep-rectangles?: #t)))
               (for-each-logical-range s e 0
                 (lambda (line <Line> beginning limit)
                   (with ((sub (range-region~ line left top w beginning (if (not end) #f limit) self transformer)))
                     (combine!~ region sub 'or))))
               region)))))
  
  
  (method (for-each-logical-range start <Cell> end <Cell> ignored proc <procedure>)
    (when (/= start end)
      (if (= (get-line~ start) (get-line~ end))
          (proc (get-line (get-line~ start)) (get-col~ start) (get-col~ end))
        (let ((beginning (get-line~ start))
              (limit (get-line~ end)))
          (loop (for n from beginning to limit)
                (let* ((line (get-line n))
                       (len (get-length~ line)))
                  (cond ((= n beginning) (proc line (get-col~ start) #f))
                        ((= n limit) (proc line #f (get-col~ end)))
                        (else (proc line #f #f)))))))))


  ;;;
  ;;;; Lines
  ;;;
  
  
  (method public (get-line n <fx>) <Line>
    (element lines n))
  
  
  (method public (get-line-at col <fx>) <Line>
    (get-line (get-line~ (col->text col))))


  ;;;
  ;;;; Runs
  ;;;
  
  
  (method public (get-run col <fx>) <Run+>
    (continuation-capture
      (lambda (return)
        (for-each-run runs
          (lambda (run <Run> offset <fx> limit <fx>)
            (when (and (> col offset) (<= col limit))
              (continuation-return return run))))
        #f)))
  
  
  (method public (first-run) <Run+>
    (if (null? runs)
        #f
      (car runs)))
  
  
  (method protected (range-runs start <fx> end <fx>)
    (let ((fact (new List-Factory))
          (make
           (lambda (run <Run> s <fx> e <fx>)
             (new Run (subseq! string s e) (get-style~ run)))))
      (for-each-range-run start end
        (lambda (where run offset limit)
          (case where
            ((inside)
             (put~ fact run))
            ((over)
             (put~ fact (make run start end)))
            ((left)
             (put~ fact (make run start limit)))
            ((right)
             (put~ fact (make run offset end))))))
      (get-output~ fact)))
  
  
  ;;        s        e
  ;;
  ;; o   l                   o    l    -> outside
  ;;           o   l                   -> inside
  ;;    o                   l          -> over
  ;;      o     l                      -> left
  ;;              o      l             -> right
  ;;
  (method (for-each-range-run start <fx> end <fx> proc)
    (for-each-run runs
      (lambda (run <Run> offset <fx> limit <fx>)
        (proc (cond ((or (<= limit start) (>= offset end))
                     'outside)
                    ((and (>= offset start) (<= limit end))
                     'inside)
                    ((and (< offset start) (> limit end))
                     'over)
                    ((< offset start)
                     'left)
                    (else
                     'right))
              run
              offset
              limit))))
  
  
  (method public (determine-run-range target)
    (continuation-capture
      (lambda (return)
        (for-each-run runs
          (lambda (run <Run> offset <fx> limit <fx>)
            (when (eq? run target)
              (continuation-return return (new Range offset limit)))))
        #f)))


  ;;;
  ;;;; Style
  ;;;
  
  
  (method protected (set-style start <fx> end <fx> style)
    (modify-style start end
      (lambda (s)
        style)))
  
  
  (method protected (set-text-alignment start <fx> end <fx> alignment)
    (modify-style start end
      (lambda (style <Style>)
        (extend~ style alignment: alignment))))
  
  
  (method protected (set-text-font start <fx> end <fx> font)
    (modify-style start end
      (lambda (style <Style>)
        (extend~ style font: font))))
  
  
  (method protected (set-text-color start <fx> end <fx> color)
    (modify-style start end
      (lambda (style <Style>)
        (extend~ style color: color))))
  
  
  (method protected (set-highlight-color start <fx> end <fx> color)
    (modify-style start end
      (lambda (style <Style>)
        (extend~ style highlight: color))))
  
  
  (method protected (set-frame-color start <fx> end <fx> color)
    (modify-style start end
      (lambda (style <Style>)
        (extend~ style frame: color))))
  
  
  (method protected (set-font-name start <fx> end <fx> name)
    (modify-style start end
      (lambda (style <Style>)
        (when (supports?~ style 'font)
          (extend~ style font: (extend~ (get-font~ style) font-name: name))))))
  
  
  (method protected (set-point-size start <fx> end <fx> size)
    (modify-style start end
      (lambda (style <Style>)
        (when (supports?~ style 'font)
          (extend~ style font: (extend~ (get-font~ style) point-size: size))))))
  
  
  (method protected (toggle-bold start <fx> end <fx>)
    (modify-style start end
      (lambda (style <Style>)
        (let ((font (get-font~ style)))
          (extend~ style font: (extend~ font bold?: (not (get-bold?~ font))))))))
  
  
  (method protected (toggle-italic start <fx> end <fx>)
    (modify-style start end
      (lambda (style <Style>)
        (let ((font (get-font~ style)))
          (extend~ style font: (extend~ (get-font~ style) italic?: (not (get-italic?~ font))))))))
  
  
  (method protected (toggle-underline start <fx> end <fx>)
    (modify-style start end
      (lambda (style <Style>)
        (let ((font (get-font~ style)))
          (extend~ style font: (extend~ (get-font~ style) underline?: (not (get-underline?~ font))))))))
  
  
  (method protected (modify-style start <fx> end <fx> proc)
    (let* ((model <Text-Model> parent)
           (start <fx> (or start 0))
           (end <fx> (or end (cardinality string)))
           (fact (new List-Factory))
           (split
            (lambda (run <Run> s <fx> e <fx>)
              (new Run (subseq! string s e) (get-style~ run))))
           (make
            (lambda (run <Run> s <fx> e <fx>)
              (let* ((style (get-style~ run))
                     (new-style (or (proc style) style)))
                (new Run (subseq! string s e) (intern-style~ model new-style))))))
      (for-each-range-run start end
        (lambda (where run offset limit)
          (case where
            ((outside)
             (put~ fact run))
            ((inside)
             (put~ fact (make run offset limit)))
            ((over)
             (put~ fact (split run offset start))
             (put~ fact (make run start end))
             (put~ fact (split run end limit)))
            ((left)
             (put~ fact (split run offset start))
             (put~ fact (make run start limit)))
            ((right)
             (put~ fact (make run offset end))
             (put~ fact (split run end limit))))))
      (set! runs (coalesce-runs (get-output~ fact)))))


  (method protected (remove-coloring default-style <Style>)
    (let ((modified? #f))
      (for-each (lambda (run <Run>)
                  (let ((style (get-style~ run)))
                    (when (and (is? style Text-Style) (get-color~ style))
                      (set-style~ run default-style)
                      (set! modified? #t))))
                runs)
      modified?))
  
  
  (definition (coalesce-runs runs <list>) <list>
    (if (null? runs)
        '()
      (let ((previous runs)
            (scan (cdr runs)))
        (while (not-null? scan)
          (let ((previous-run <Run> (car previous)))
            (let ((previous-style (get-style~ previous-run)))
              (if (or (neq? previous-style (get-style~ (car scan))) (not (propagate?~ previous-style)))
                  (set! previous scan)
                (grow-subseq! (get-string~ previous-run) (cast <fx> (cardinality (get-string~ (car scan)))))
                (set-cdr! previous (cdr scan)))
              (set! scan (cdr scan))))))
      runs))


  ;;;
  ;;;; Wrap
  ;;;
  
  
  (method protected (flatten) <void>
    (let ((line (new Line parent runs 0 0 0 0 0)))
      (set! lines (list line))
      (set! row-height (get-height~ line))))
  
  
  (method protected (wrap context width <fx>) <void>
    (let* ((model <Text-Model> parent)
           (rank 0)
           (offset 0)
           (justification (get-justification~ format))
           (margin (get-left-margin~ format))
           (spacing (get-paragraph-spacing~ model))
           (left margin)
           (top 0)
           (tabs (get-tabs~ model))
           (lines (new List-Factory))
           (lruns (new List-Factory))
           (place (lambda (run)
                    (put~ lruns run)))
           (break-line
            (lambda (right)
              (let* ((runs (get-output~ lruns))
                     (line-left (case justification ((#f left) 0) ((center) (center right width)) ((right) (justify right width 'tail))))
                     (line (new Line model runs rank offset line-left top right))
                     (height (get-height~ line)))
                (for-each (lambda (run <Run>) (height-update~ run height)) runs)
                (put~ lines line)
                (reset~ lruns)
                (set! left margin)
                (increase! top height)
                (increase! rank)
                (increase! offset (get-length~ line))
                top))))
      (for-each (lambda (run <Run>)
                  (set! left (wrap~ run context margin left top width tabs place break-line)))
                runs)
      (break-line left)
      (set! lines~self (get-output~ lines))
      (set! row-height (+ top spacing))))
  

  ;;;
  ;;;; Drawing
  ;;;
  
  
  (definition Bullet-Outside
    {Color Blue})
  
  (definition Bullet-Inside
    {Color red:  51 green: 102 blue: 255})

  
  (method override (draw surface context)
    (define (draw-bullet h <fx> v <fx> left <fx>) <void>
      (let* ((height (get-height~ (car lines)))
             (size (fxround (percent 40 height)))
             (outside (or (get-bullet-outside~ format) Bullet-Outside))
             (inside (or (get-bullet-inside~ format) Bullet-Inside))
             (vert (+ (fxround/ (- height size) 2) 1)))
        ;; Can you believe that drawing an ellipse of size 8 is buggy under Windows!!!
        (when (= size 8)
          (set! size 7))
        (ellipse~ surface (new Rect (- left 7 size) (+ v vert) (- left 7) (+ v vert size)) outside inside)))
    
    (let* ((model <Text-Model> parent)
           (tabs (get-tabs~ model))
           (left-margin (get-left-margin~ format))
           (right-margin (get-right-margin~ format))
           (background (get-background~ format))
           (h left-margin)
           (v 0))
      (when background
        (let ((rect (new Rect left-margin 0 (- (get-width) right-margin) (get-height))))
          (fill-rect~ surface rect background)))
      (when (get-bulleted?~ format)
        (draw-bullet h v left-margin))
      (for-each (lambda (line <Line>)
                  (draw-line~ line surface context h v tabs left-margin)
                  (increase! v (get-height~ line)))
                lines)))


  ;;;
  ;;;; Replace
  ;;;
  
  
  (method protected (replace-range start <fx> end str <string>) <void>
    (define (find-propagatable-style runs <list>)
      (continuation-capture
        (lambda (return)
          (for-each-reversed (lambda (run <Run>)
                               (let ((style (get-style~ run)))
                                 (when (propagate?~ style)
                                   (continuation-return return style))))
                             runs)
          (get-default-style~ parent))))
    
    (let* ((model <Text-Model> parent)
           (inserted <fx> (cardinality str))
           (end <fx> (or end (cardinality string)))
           (new-end (+ start inserted))
           (delta (- inserted (- end start)))
           (before (range-runs 0 start))
           (after (range-runs end (get-length)))
           (style (if (and (not-null? before)
                           (get-propagate-styles?~ model))
                      (find-propagatable-style before)
                    (get-default-style~ model))))
      (set! string (replace-subseq! string start end str))
      (let* ((replacement (new Run (subseq! string start new-end) style))
             (replacement-list (if (> (get-length~ replacement) 0) (list replacement) '())))
        (for-each-run before
          (lambda (run <Run> offset <fx> limit <fx>)
            (set-string~ run (subseq! string offset limit))))
        (for-each-run after
          (lambda (run <Run> offset <fx> limit <fx>)
            (set-string~ run (subseq! string (+ new-end offset) (+ new-end limit)))))
        (set! runs (coalesce-runs (append! before replacement-list after))))))
  
  
  (method protected (replace-runs start <fx> end replacement)
    (define (runs->str runs <list>) <string>
      (let ((output (open-output-string)))
        (for-each (lambda (run <Run>)
                    (print-content~ (get-string~ run) output))
                  runs)
        (get-output-string output)))
    
    (let* ((str (runs->str replacement))
           (inserted <fx> (cardinality str))
           (end <fx> (or end (cardinality string)))
           (new-end (+ start inserted))
           (delta (- inserted (- end start)))
           (before (range-runs 0 start))
           (after (range-runs end (get-length))))
      (set! string (replace-subseq! string start end str))
      (for-each-run before
        (lambda (run <Run> offset <fx> limit <fx>)
          (set-string~ run (subseq! string offset limit))))
      (for-each-run replacement
        (lambda (run <Run> offset <fx> limit <fx>)
          (let ((style (get-style~ run)))
            (when (is? style View-Style)
              (set-parent~ (get-view~ style) self)))
          (set-string~ run (subseq! string (+ start offset) (+ start limit)))))
      (for-each-run after
        (lambda (run <Run> offset <fx> limit <fx>)
          (set-string~ run (subseq! string (+ new-end offset) (+ new-end limit)))))
      (set! runs (coalesce-runs (append! before replacement after)))))
  
  
  (method protected (replace-beginning runs <list>) <void>
    (replace-runs 0 0 runs))
  
  
  (method protected (replace-ending runs <list>) <void>
    (let ((len (cast <fx> (cardinality string))))
      (replace-runs len len runs)))



  ;;;
  ;;;; Coordinates
  ;;;
  
  
  (method protected (view->col pos <Point>) <fx>
    (let ((pos (new Point (- (get-h~ pos) (get-left-margin~ format)) (max 0 (min (- (get-height) 1) (get-v~ pos))))))
      (continuation-capture
        (lambda (return)
          (for-each (lambda (line <Line>)
                      (let ((col (view->col~ line pos)))
                        (when col
                          (continuation-return return (+ (get-offset~ line) col)))))
                    lines)
          #f))))
  
  
  (method protected (col->view col <fx>) <Point>
    (let ((last (last lines)))
      (continuation-capture
        (lambda (return)
          (for-each (lambda (line <Line>)
                      (let* ((strict? (neq? line last))
                             (view (col->view~ line (- col (get-offset~ line)) strict?)))
                        (when view
                          (continuation-return return (new Point (+ (paragraph-left) (get-h~ view)) (get-v~ view))))))
                    lines)
          #f))))
  
  
  (method protected (col->view-extended col <fx>)
    (let ((last (last lines)))
      (continuation-capture
        (lambda (return)
          (for-each (lambda (line <Line>)
                      (let* ((strict? (neq? line last))
                             (view (col->view~ line (- col (get-offset~ line)) strict?)))
                        (when view
                          (continuation-return return (cons line (new Point (+ (paragraph-left) (get-h~ view)) (get-v~ view)))))))
                    lines)
          #f))))
  
  
  (method protected (col->text col <fx>) <Cell>
    (let ((last #f))
      (continuation-capture
        (lambda (return)
          (for-each (lambda (line <Line>)
                      (let ((text (col->text~ line col)))
                        (when text
                          (continuation-return return text)))
                      (set! last line))
                    lines)
          (new Cell (get-rank~ last) (get-length~ last))))))))
