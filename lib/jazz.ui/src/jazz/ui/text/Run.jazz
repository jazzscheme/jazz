;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Style Run
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2012
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.ui.text.Run jazz


(import (jazz.graphic)
        (jazz.ui))


(class Run extends Object
  
  
  (slot protected string <Subseq$string$> accessors generate)
  (slot protected style  <Style>          accessors generate)
  (slot protected height <fx>             getter    generate)
  
  
  (method override (initialize string <Subseq$string$> style <Style>)
    (nextmethod)
    (set! string~self string)
    (set! style~self style)
    (set! height~self (get-height~ style)))
  
  
  (method override (print output readably)
    (print-unreadable self output
      (lambda (output)
        (format output "{s} {s}"
                string
                style))))
  
  
  ;;;
  ;;;; String
  ;;;
  
  
  (method public (export-string)
    (coerce string String))
  
  
  (method public (get-length) <fx>
    (cast <fx> (cardinality string)))
  
  
  ;;;
  ;;;; Size
  ;;;
  
  
  (method public (compute-width) <fx>
    (run-width~ style self))


  ;;;
  ;;;; Scan
  ;;;


  (method protected (scan h start end tabs proc)
    (scan~ style h start end tabs self proc))
  
  
  ;;;
  ;;;; Wrap
  ;;;

  
  (method protected (wrap context margin h v width tabs place break)
    (wrap~ style context margin h v width tabs place break self))
  
  
  (method protected (height-update height)
    (height-update~ style height))
  
  
  ;;;
  ;;;; Drawing
  ;;;
  
  
  (method protected (draw-run surface <Surface> context h <fx> v <fx> line-height <fx> tabs left enabled?)
    (draw-style~ style surface context string h v line-height tabs left enabled?))))
