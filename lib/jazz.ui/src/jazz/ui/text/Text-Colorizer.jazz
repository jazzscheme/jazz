;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Text Colorizer
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2012
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.ui.text.Text-Colorizer jazz


(import (jazz.ui))


(class undocumented Text-Colorizer extends Object
  
  
  (slot model <Text-Model>)
  (slot row   <Integer+>     initialize #f)
  (slot col   <fx>)
  (slot runs  <List-Factory>)
  
  
  (method override (initialize mdl <Object>)
    (nextmethod)
    (set! model mdl)
    (set! col 0)
    (set! runs (new List-Factory)))
  
  
  (method public (apply-style start <Cell> end <Cell> name/style <Object>)
    (define (add-run n <fx> start <fx> end <fx> style <Object>)
      (when (or (not row) (/= n row))
        (finish-current)
        (set! row n)
        (set! col 0)
        (reset~ runs))
      (let* ((paragraph <Paragraph> (get-paragraph~ model row))
             (string (get-string~ paragraph)))
        (when (> start col)
          (let ((from 0))
            (for-each (lambda (run <Run>)
                        (let* ((str (get-string~ run))
                               (to (+ from (cast <fx> (cardinality str)))))
                          (when (and (< col to) (< from start))
                            (if (< to start)
                                (if (< col from)
                                    (put~ runs run)
                                  (put-run (subseq! string col to) (get-style~ run)))
                              (if (< col from)
                                  (put-run (subseq! string from start) (get-style~ run))
                                (put-run (subseq! string col start) (get-style~ run)))))
                          (set! from to)))
                      (get-runs~ paragraph))))
        (put-run (subseq! string start end) style)
        (set! col end)))
    
    (define (add-runs start <Cell> end <Cell> style <Object>)
      (let ((beginning (get-line~ start))
            (limit (get-line~ end)))
        (loop (for n from beginning to limit)
              (let ((paragraph <Paragraph> (get-paragraph~ model n)))
                (cond ((= n beginning) (add-run n (get-col~ start) (cardinality (get-string~ paragraph)) style))
                      ((= n limit) (add-run n 0 (get-col~ end) style))
                      (else (add-run n 0 (cardinality (get-string~ paragraph)) style)))))))
    
    (define (put-run string <Subseq$string$> style <Object>)
      (put~ runs (new Run string style)))
    
    (let ((sl (get-line~ start))
          (el (get-line~ end))
          (style (intern-style~ model (locate-style~ model name/style))))
      (if (= sl el)
          (add-run sl (get-col~ start) (get-col~ end) style)
        (add-runs start end style))))
  
  
  (method public (finish-current)
    (when (and row runs)
      (let* ((paragraph <Paragraph> (get-paragraph~ model row))
             (string (get-string~ paragraph))
             (len <fx> (cardinality string)))
        (when (> len col)
          (put~ runs (new Run (subseq! string col len) (get-default-style~ model))))
        (let ((runs (get-output~ runs)))
          (set-runs~ paragraph runs)
          (wrap-paragraph~ model #f paragraph)))))))
