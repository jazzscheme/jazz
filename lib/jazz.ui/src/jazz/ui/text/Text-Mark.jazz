;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Text Mark
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.ui.text.Text-Mark jazz


(import (jazz.graphic)
        (jazz.ui))


(class Text-Mark extends Object
  
  
  (slot text                getter generate)
  (slot range <Range$Cell$> getter generate)
  (slot strict?             getter generate)
  (slot change-proc         getter generate)
  
  
  (method override (initialize text range (strict?: strict? #t) (change-proc: change-proc #f))
    (nextmethod)
    (set! text~self text)
    (set! range~self range)
    (set! strict?~self strict?)
    (set! change-proc~self change-proc)
    (add-mark~ text self))
  
  
  ;;;
  ;;;; Access
  ;;;
  
  
  (method public (get-start)
    (get-start~ range))
  
  
  (method public (get-end)
    (get-end~ range))
  
  
  (method public (set-range r)
    @this-is-bugged-because-range-can-have-become-invalid-and-maybe-not-necessary?
    (when range
      (invalidate-range~ text range))
    (set! range r)
    @not-necessary?
    (when range
      (invalidate-range~ text range))
    (when change-proc
      (change-proc)))
  
  
  ;;;
  ;;;; Adjust
  ;;;
  
  
  (method protected (adjust start end caret)
    (define (cell-position cell)
      (cond ((and (nu=? start end)
                  (nu=? cell start))
             'at)
            ((nu<=? cell start)
             'before)
            ((nu>=? cell end)
             'after)
            (else
             'inside)))
    
    (define (adjust-cell cell)
      (let ((line-delta (- (get-line~ caret) (get-line~ end)))
            (col-delta (- (get-col~ caret) (get-col~ end))))
        (new Cell
          (+ (get-line~ cell) line-delta)
          (if (= (get-line~ cell) (get-line~ end))
              (+ (get-col~ cell) col-delta)
            (get-col~ cell)))))
    
    (define (touch)
      (when strict?
        (set-range (new Range$Cell$ caret caret))))
    
    (let ((mark-start (get-start~ range))
          (mark-end (get-end~ range)))
      (let ((start-pos (cell-position mark-start))
            (end-pos (cell-position mark-end)))
        (case end-pos
          ((before at))
          ((inside)
           (case start-pos
             ((before)
              (set-range (new Range$Cell$ mark-start start)))
             ((inside)
              (set-range (new Range$Cell$ caret caret))))
           (touch))
          ((after)
           (case start-pos
             ((before)
              (set-range (new Range$Cell$ mark-start (adjust-cell mark-end)))
              (touch))
             ((inside)
              (set-range (new Range$Cell$ caret (adjust-cell mark-end)))
              (touch))
             ((after at)
              (set-range (new Range$Cell$ (adjust-cell mark-start) (adjust-cell mark-end))))))))))))
