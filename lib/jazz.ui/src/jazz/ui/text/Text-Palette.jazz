;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Text Palette
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.ui.text.Text-Palette jazz


(import (jazz.designer)
        (jazz.graphic)
        (jazz.jml)
        (jazz.library)
        (jazz.system)
        (jazz.ui))


(class undocumented Text-Palette extends View
    
  
  (slot flow-layout)
  (slot client      initialize #f)


  (form
    (<install>                                       background: {Color Medium}
      (<Border-View>          name: style-border     size: {Dimension 120 21} border-insets: {Rect 2 2 2 2} border-color: {Color Medium}
        (<Border-View>                               border-color: {Color red: 200 green: 188 blue: 166}
          (<Text-Style-Combo> name: style            enabled?: #f)))
      (<Border-View>          name: font-border      size: {Dimension 120 21} border-insets: {Rect 2 2 2 2} border-color: {Color Medium}
        (<Border-View>                               border-color: {Color red: 200 green: 188 blue: 166}
          (<Text-Font-Combo>  name: font             enabled?: #f)))
      (<Border-View>          name: size-border      size: {Dimension 40 21} border-insets: {Rect 2 2 2 2} border-color: {Color Medium}
        (<Border-View>                               border-color: {Color red: 200 green: 188 blue: 166}
          (<Text-Size-Combo>  name: size             enabled?: #f)))
      (<Separator>)
      (<Toggle-Tool>          name: bold             size: {Dimension 22 22} tooltip?: #t tooltip-text: "Bold" resource: {Image-Resource "Bold"} portfolio: :images enabled?: #f action-handler: {Event-Handler :focus on-bold})
      (<Toggle-Tool>          name: italic           size: {Dimension 22 22} tooltip?: #t tooltip-text: "Italic" resource: {Image-Resource "Italic"} portfolio: :images enabled?: #f action-handler: {Event-Handler :focus on-italic})
      (<Toggle-Tool>          name: underline        size: {Dimension 22 22} tooltip?: #t tooltip-text: "Underline" resource: {Image-Resource "Underline"} portfolio: :images enabled?: #f action-handler: {Event-Handler :focus on-underline})
      (<Separator>)
      (<Radio-Tool>           name: alignment-bottom size: {Dimension 22 22} group: alignment tooltip?: #t tooltip-text: "Align Bottom" resource: {Image-Resource "AlignmentBottom"} portfolio: :images enabled?: #f action-handler: {Event-Handler :focus on-alignment alignment: bottom})
      (<Radio-Tool>           name: alignment-center size: {Dimension 22 22} group: alignment tooltip?: #t tooltip-text: "Align Center" resource: {Image-Resource "AlignmentCenter"} portfolio: :images enabled?: #f action-handler: {Event-Handler :focus on-alignment alignment: center})
      (<Radio-Tool>           name: alignment-top    size: {Dimension 22 22} group: alignment selected?: #t tooltip?: #t tooltip-text: "Align Top" resource: {Image-Resource "AlignmentTop"} portfolio: :images enabled?: #f action-handler: {Event-Handler :focus on-alignment alignment: top})
      (<Separator>)
      (<Radio-Tool>           name: justify-left     size: {Dimension 22 22} group: justification selected?: #t tooltip?: #t tooltip-text: "Justify Left" resource: {Image-Resource "JustifyLeft"} portfolio: :images enabled?: #f action-handler: {Event-Handler :focus on-justify justification: left})
      (<Radio-Tool>           name: justify-centered size: {Dimension 22 22} group: justification tooltip?: #t tooltip-text: "Justify Centered" resource: {Image-Resource "JustifyCentered"} portfolio: :images enabled?: #f action-handler: {Event-Handler :focus on-justify justification: centered})
      (<Radio-Tool>           name: justify-right    size: {Dimension 22 22} group: justification tooltip?: #t tooltip-text: "Justify Right" resource: {Image-Resource "JustifyRight"} portfolio: :images enabled?: #f action-handler: {Event-Handler :focus on-justify justification: right})
      (<Separator>)
      (<Toggle-Tool>          name: bulleted         size: {Dimension 22 22} tooltip?: #t tooltip-text: "Bulleted" resource: {Image-Resource "Bulleted"} portfolio: :images enabled?: #f action-handler: {Event-Handler :focus on-bulleted})
      (<Separator>)
      (<Push-Tool>            name: decrease-indent  size: {Dimension 22 22} tooltip?: #t tooltip-text: "Decrease Indent" resource: {Image-Resource "DecreaseIndent"} portfolio: :images enabled?: #f action-handler: {Event-Handler :focus on-decrease-indent})
      (<Push-Tool>            name: increase-indent  size: {Dimension 22 22} tooltip?: #t tooltip-text: "Increase Indent" resource: {Image-Resource "IncreaseIndent"} portfolio: :images enabled?: #f action-handler: {Event-Handler :focus on-increase-indent})
      (<Separator>)
      (<Text-Color-Combo>     name: text-color       size: {Dimension 31 22} enabled?: #f action-handler: {Event-Handler :focus on-text-color}
        (<!>                  name: body             color: {Color Dark-Blue} resource: {Image-Resource "TextColor"} tooltip-text: "Select Text Color" action-handler: {Event-Handler :focus on-text-color})
        (<!>                  name: pick             tooltip-text: "Text Color Menu" action-handler: {Event-Handler :focus on-pick-text-color}))
      (<Separator>                                   size: {Dimension 4 0})
      (<Text-Color-Combo>     name: highlight-color  size: {Dimension 31 22} enabled?: #f action-handler: {Event-Handler :focus on-highlight-color}
        (<!>                  name: body             color: {Color Dark-Red} resource: {Image-Resource "HighlightColor"} tooltip-text: "Select Highlight Color" action-handler: {Event-Handler :focus on-highlight-color})
        (<!>                  name: pick             tooltip-text: "Highlight Color Menu" action-handler: {Event-Handler :focus on-pick-highlight-color}))
      (<Separator>            name: ruler-separator)
      (<Toggle-Tool>          name: toggle-ruler     size: {Dimension 22 22} tooltip?: #t tooltip-text: "Toggle Ruler" resource: {Image-Resource "Ruler"} portfolio: :images enabled?: #f action-handler: {Event-Handler :focus on-toggle-ruler})
      (<Separator>            name: image-separator)
      (<Push-Tool>            name: insert-image     size: {Dimension 22 22} tooltip?: #t tooltip-text: "Insert Image" resource: {Image-Resource "MsgUser"} portfolio: :images enabled?: #f action-handler: {Event-Handler :form on-insert-image})
      (<Separator>            name: table-separator)
      (<Push-Tool>            name: insert-table     size: {Dimension 22 22} tooltip?: #t tooltip-text: "Insert Table" resource: {Image-Resource "DesignTable"} portfolio: :images enabled?: #f action-handler: {Event-Handler :form on-insert-table})))
    
  
  (method meta override (external-name . rest)
    'text-palette)
  
  
  (method override (mouse-activate?)
    #f)

  
  ;;;
  ;;;; Host
  ;;;
  
  
  (method meta override (host-icon)
    {Image-Resource "Document"})
  

  (method meta override (host-title)
    "Text")
  
  
  (method override (host-install)
    (let ((appl (get-application)))
      (add-focus-listener~ appl (new Event-Handler target: self method-name: 'on-focus-change))))
  
  
  (method override (host-uninstall)
    (let ((appl (get-application)))
      (remove-focus-listener~ appl self)))

  
  ;;;
  ;;;; Component
  ;;;


  (method override (finish initargs)
    (nextmethod initargs)
    (set! flow-layout (new Flow-Layout insets: {Rect 4 5 0 0}))
    (layout-view))
  
  
  (method override (layout)
    (layout~ flow-layout children (get-width) (get-height)))

  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method (on-focus-change evt)
    (let ((appl (get-application))
          (focus (get-focus~ evt)))
      @convert
      (when (and (is? old-focus Formatted-Text-View)
                 (text-listener?~ old-focus self))
        (remove-text-listener~ old-focus self))
      (when (and (is? focus Formatted-Text-View)
                 (not (text-listener?~ focus self)))
        (add-text-listener~ focus (new Event-Handler target: self method-name: 'on-text))
        (activate-text focus))
      (enable-buttons
        (and focus
             (or (and (is? focus Formatted-Text-View)
                      (text-listener?~ focus self))
                 (let ((host (get-host~ focus)))
                   (and host
                        (eq? (get-guest~ host) self))))))))
  
  
  (method (on-text evt)
    (case (get-kind~ evt)
      ((:selection-change) (selection-change))))
  
  
  (method (on-insert-image evt)
    (insert-view~ client (<form> (<Push-Button> title: "Push Me")))
    @w
    (let* ((moniker (choose-file))
           (style (new Image-Style moniker: moniker)))
      (insert-styled~ client " " style)))
  
  
  (method (on-insert-table evt)
    (insert-table~ client size: {Dimension 304 101} header?: #f node-column?: #f columns: '((width: 100) (width: 100) (width: 100)) row-count: 2))


  (method protected virtual (enable-buttons enabled?)
    (set-enabled?~ (locate 'style) enabled?)
    (set-enabled?~ (locate 'font) enabled?)
    (set-enabled?~ (locate 'size) enabled?)
    (set-enabled?~ (locate 'bold) enabled?)
    (set-enabled?~ (locate 'italic) enabled?)
    (set-enabled?~ (locate 'underline) enabled?)
    (set-enabled?~ (locate 'alignment-bottom) enabled?)
    (set-enabled?~ (locate 'alignment-center) enabled?)
    (set-enabled?~ (locate 'alignment-top) enabled?)
    (set-enabled?~ (locate 'justify-left) enabled?)
    (set-enabled?~ (locate 'justify-centered) enabled?)
    (set-enabled?~ (locate 'justify-right) enabled?)
    @waiting
    (set-enabled?~ (locate 'numbered) enabled?)
    (set-enabled?~ (locate 'bulleted) enabled?)
    (set-enabled?~ (locate 'decrease-indent) enabled?)
    (set-enabled?~ (locate 'increase-indent) enabled?)
    (set-enabled?~ (locate 'text-color) enabled?)
    (set-enabled?~ (locate 'highlight-color) enabled?)
    (set-enabled?~ (locate 'toggle-ruler) enabled?)
    (set-enabled?~ (locate 'insert-image) enabled?)
    (set-enabled?~ (locate 'insert-table) enabled?))

  
  ;;;
  ;;;; Text
  ;;;
  
  
  (method (activate-text text)
    (when (neq? text client)
      (set! client text)
      (set-client~ (locate 'style) client)
      (set-client~ (locate 'font) client)
      (set-client~ (locate 'size) client)
      (selection-change)))

  
  ;;;
  ;;;; Selection
  ;;;


  (method (selection-change)
    (selection-change~ (locate 'style))
    (selection-change~ (locate 'font))
    (selection-change~ (locate 'size))
    (let* ((end (get-end~ client))
           (format (get-format~ (get-paragraph~ client (get-line~ end))))
           (style (get-style-at~ client end))
           (alignment (or (get-alignment~ style) 'bottom))
           (font (and (is? style Text-Style) (get-font~ style))))
      (set-selected?~ (locate 'bold) (and font (get-bold?~ font)))
      (set-selected?~ (locate 'italic) (and font (get-italic?~ font)))
      (set-selected?~ (locate 'underline) (and font (get-underline?~ font)))
      (set-selected?~ (locate 'alignment-bottom) (eq? alignment 'bottom))
      (set-selected?~ (locate 'alignment-center) (eq? alignment 'center))
      (set-selected?~ (locate 'alignment-top) (eq? alignment 'top))
      (set-selected?~ (locate 'justify-left) (eq? (get-justification~ format) 'left))
      (set-selected?~ (locate 'justify-centered) (eq? (get-justification~ format) 'centered))
      (set-selected?~ (locate 'justify-right) (eq? (get-justification~ format) 'right))
      (set-selected?~ (locate 'bulleted) (get-bulleted?~ format))
      (typecase style
        ((View-Style)
         (let* ((view (get-view~ style))
                (designer (new Designer form: (new Form action: 'new model: (category-identifier (class-of client))) reference: view)))
           (set-selected~ (get-application) designer (list view))))
        (else
         (let ((designer (new Designer form: (new Form action: 'new model: (category-identifier (class-of client))) reference: client)))
           (set-selected~ (get-application) designer (list client)))))))))
