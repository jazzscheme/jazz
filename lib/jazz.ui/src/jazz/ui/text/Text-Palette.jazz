;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Text Palette
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2012
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.ui.text.Text-Palette jazz


(import (jazz.designer)
        (jazz.graphic)
        (jazz.graphic.pdf)
        (jazz.jml)
        (jazz.library)
        (jazz.system)
        (jazz.ui)
        (jazz.ui.dialog)
        (jazz.ui.view))


(class undocumented Text-Palette extends Layout-View
    
  
  (slot client initialize #f)


  (form
    (<install>                                           layout-type: flow layout-insets: {Rect 4 5 0 0} background: {Color Medium}
      (<Border-View>           name: style-border        size: {Dimension 120 22} border-insets: {Rect 2 2 2 1} border-color: {Color Medium}
        (<Border-View>                                   border-color: {Color red: 200 green: 188 blue: 166}
          (<Text-Style-Combo>  name: style               enabled?: #f)))
      (<Border-View>           name: font-border         size: {Dimension 140 22} border-insets: {Rect 2 2 2 1} border-color: {Color Medium}
        (<Border-View>                                   border-color: {Color red: 200 green: 188 blue: 166}
          (<Text-Font-Combo>   name: font                enabled?: #f)))
      (<Border-View>           name: size-border         size: {Dimension 40 22} border-insets: {Rect 2 2 2 1} border-color: {Color Medium}
        (<Border-View>                                   border-color: {Color red: 200 green: 188 blue: 166}
          (<Text-Size-Combo>   name: size                enabled?: #f)))
      (<Separator>)
      (<Toggle-Tool>           name: bold                size: {Dimension 22 22} tooltip?: #t tooltip-text: "Bold" resource: {Image-Resource "Bold"} portfolio: :images enabled?: #f action-handler: {Event-Handler :focus on-bold})
      (<Toggle-Tool>           name: italic              size: {Dimension 22 22} tooltip?: #t tooltip-text: "Italic" resource: {Image-Resource "Italic"} portfolio: :images enabled?: #f action-handler: {Event-Handler :focus on-italic})
      (<Toggle-Tool>           name: underline           size: {Dimension 22 22} tooltip?: #t tooltip-text: "Underline" resource: {Image-Resource "Underline"} portfolio: :images enabled?: #f action-handler: {Event-Handler :focus on-underline})
      (<Separator>)
      (<Text-Color-Combo>      name: text-color          size: {Dimension 31 22} enabled?: #f action-handler: {Event-Handler :focus on-text-color}
        (<!>                   name: body                color: {Color Dark-Blue} resource: {Image-Resource "TextColor"} tooltip-text: "Select Text Color" action-handler: {Event-Handler :focus on-text-color})
        (<!>                   name: pick                tooltip-text: "Text Color Menu" action-handler: {Event-Handler :focus on-pick-text-color}))
      (<Separator>                                       size: {Dimension 4 0})
      (<Text-Color-Combo>      name: highlight-color     size: {Dimension 31 22} enabled?: #f action-handler: {Event-Handler :focus on-highlight-color}
        (<!>                   name: body                color: {Color Dark-Green} resource: {Image-Resource "HighlightColor"} tooltip-text: "Select Highlight Color" action-handler: {Event-Handler :focus on-highlight-color})
        (<!>                   name: pick                tooltip-text: "Highlight Color Menu" action-handler: {Event-Handler :focus on-pick-highlight-color}))
      (<Separator>                                       size: {Dimension 4 0})
      (<Text-Color-Combo>      name: frame-color         size: {Dimension 31 22} enabled?: #f action-handler: {Event-Handler :focus on-frame-color}
        (<!>                   name: body                color: {Color Dark-Red} resource: {Image-Resource "FrameColor"} tooltip-text: "Select Frame Color" action-handler: {Event-Handler :focus on-frame-color})
        (<!>                   name: pick                tooltip-text: "Frame Color Menu" action-handler: {Event-Handler :focus on-pick-frame-color}))
      (<Separator>)
      (<Radio-Tool>            name: alignment-bottom    size: {Dimension 22 22} group: alignment tooltip?: #t tooltip-text: "Align Bottom" resource: {Image-Resource "AlignmentBottom"} portfolio: :images enabled?: #f action-handler: {Event-Handler :focus on-alignment alignment: bottom})
      (<Radio-Tool>            name: alignment-center    size: {Dimension 22 22} group: alignment tooltip?: #t tooltip-text: "Align Center" resource: {Image-Resource "AlignmentCenter"} portfolio: :images enabled?: #f action-handler: {Event-Handler :focus on-alignment alignment: center})
      (<Radio-Tool>            name: alignment-top       size: {Dimension 22 22} group: alignment selected?: #t tooltip?: #t tooltip-text: "Align Top" resource: {Image-Resource "AlignmentTop"} portfolio: :images enabled?: #f action-handler: {Event-Handler :focus on-alignment alignment: top})
      (<Separator>)
      (<Border-View>           name: format-border       size: {Dimension 120 22} border-insets: {Rect 2 2 2 1} border-color: {Color Medium}
        (<Border-View>                                   border-color: {Color red: 200 green: 188 blue: 166}
          (<Text-Format-Combo> name: format              enabled?: #f)))
      (<Separator>)
      (<Radio-Tool>            name: justify-left        size: {Dimension 22 22} group: justification selected?: #t tooltip?: #t tooltip-text: "Justify Left" resource: {Image-Resource "JustifyLeft"} portfolio: :images enabled?: #f action-handler: {Event-Handler :focus on-justify justification: left})
      (<Radio-Tool>            name: justify-center      size: {Dimension 22 22} group: justification tooltip?: #t tooltip-text: "Justify Centered" resource: {Image-Resource "JustifyCentered"} portfolio: :images enabled?: #f action-handler: {Event-Handler :focus on-justify justification: center})
      (<Radio-Tool>            name: justify-right       size: {Dimension 22 22} group: justification tooltip?: #t tooltip-text: "Justify Right" resource: {Image-Resource "JustifyRight"} portfolio: :images enabled?: #f action-handler: {Event-Handler :focus on-justify justification: right})
      (<Separator>)
      (<Toggle-Tool>           name: bulleted            size: {Dimension 22 22} tooltip?: #t tooltip-text: "Bulleted" resource: {Image-Resource "Bulleted"} portfolio: :images enabled?: #f action-handler: {Event-Handler :focus on-bulleted})
      (<Separator>)
      (<Push-Tool>             name: decrease-indent     size: {Dimension 22 22} tooltip?: #t tooltip-text: "Decrease Indent" resource: {Image-Resource "DecreaseIndent"} portfolio: :images enabled?: #f action-handler: {Event-Handler :focus on-decrease-indent})
      (<Push-Tool>             name: increase-indent     size: {Dimension 22 22} tooltip?: #t tooltip-text: "Increase Indent" resource: {Image-Resource "IncreaseIndent"} portfolio: :images enabled?: #f action-handler: {Event-Handler :focus on-increase-indent})
      (<Separator>             name: ruler-separator)
      (<Toggle-Tool>           name: toggle-ruler        size: {Dimension 22 22} tooltip?: #t tooltip-text: "Toggle Ruler" resource: {Image-Resource "Ruler"} portfolio: :images enabled?: #f action-handler: {Event-Handler :focus on-toggle-ruler})
      (<Separator>             name: link-separator)
      (<Push-Tool>             name: insert-link         size: {Dimension 22 22} tooltip?: #t tooltip-text: "Insert Link..." resource: {Image-Resource "InsertLink"} portfolio: :images enabled?: #f action-handler: {Event-Handler :form on-insert-link})
      (<Separator>             name: image-separator)
      (<Push-Tool>             name: insert-image        size: {Dimension 22 22} tooltip?: #t tooltip-text: "Insert Image..." resource: {Image-Resource "InsertImage"} portfolio: :images enabled?: #f action-handler: {Event-Handler :form on-insert-image})
      @wait
      (<Separator>             name: table-separator)
      @wait
      (<Push-Tool>             name: insert-table        size: {Dimension 22 22} tooltip?: #t tooltip-text: "Insert Table..." resource: {Image-Resource "DesignTable"} portfolio: :images enabled?: #f action-handler: {Event-Handler :form on-insert-table})
      (<Separator>             name: export-separator)
      (<Push-Tool>             name: export-pdf          size: {Dimension 22 22} tooltip?: #t tooltip-text: "Export to PDF..." resource: {Image-Resource "ExportPicture"} portfolio: :images enabled?: #f action-handler: {Event-Handler :form on-export-pdf})))
    
  
  (method meta override (external-name . rest)
    'Text)
  
  
  (method override (mouse-activate?)
    #f)

  
  ;;;
  ;;;; Host
  ;;;
  
  
  (method meta override (host-icon)
    {Image-Resource "Document"})
  

  (method meta override (host-title)
    "Text")
  
  
  (method override (client-activate)
    (let ((guest (current-document)))
      (if (is? guest Formatted-Text-View)
          (set-client guest)
        (set-client #f))))
  
  
  (method override (client-deactivate)
    (set-client #f))
  
  
  ;;;
  ;;;; Client
  ;;;


  (method public (get-client)
    client)

 
  (method public (set-client clt)
    (when (neq? clt client)
      (set! client clt)
      (when client
        (set-client~ (locate 'format) client)
        (set-client~ (locate 'style) client)
        (set-client~ (locate 'font) client)
        (set-client~ (locate 'size) client)
        (selection-change))
      (enable-buttons client)))

  
  ;;;
  ;;;; Events
  ;;;


  (method protected virtual (enable-buttons enabled?)
    (set-enabled?~ (locate 'format) enabled?)
    (set-enabled?~ (locate 'style) enabled?)
    (set-enabled?~ (locate 'font) enabled?)
    (set-enabled?~ (locate 'size) enabled?)
    (set-enabled?~ (locate 'bold) enabled?)
    (set-enabled?~ (locate 'italic) enabled?)
    (set-enabled?~ (locate 'underline) enabled?)
    (set-enabled?~ (locate 'alignment-bottom) enabled?)
    (set-enabled?~ (locate 'alignment-center) enabled?)
    (set-enabled?~ (locate 'alignment-top) enabled?)
    (set-enabled?~ (locate 'justify-left) enabled?)
    (set-enabled?~ (locate 'justify-center) enabled?)
    (set-enabled?~ (locate 'justify-right) enabled?)
    @wait
    (set-enabled?~ (locate 'numbered) enabled?)
    (set-enabled?~ (locate 'bulleted) enabled?)
    (set-enabled?~ (locate 'decrease-indent) enabled?)
    (set-enabled?~ (locate 'increase-indent) enabled?)
    (set-enabled?~ (locate 'text-color) enabled?)
    (set-enabled?~ (locate 'highlight-color) enabled?)
    (set-enabled?~ (locate 'frame-color) enabled?)
    (set-enabled?~ (locate 'toggle-ruler) enabled?)
    (set-enabled?~ (locate 'insert-link) enabled?)
    (set-enabled?~ (locate 'insert-image) enabled?)
    @wait
    (set-enabled?~ (locate 'insert-table) enabled?)
    (set-enabled?~ (locate 'export-pdf) enabled?))
  
  
  ;;;
  ;;;; Insert
  ;;;

  
  (method (on-insert-link evt)
    (define (replace (text: text #f) (address: address #f) (anchor: anchor #f) (range: range #f))
      (receive (text address anchor) (get-modal Link-Style-Dialog text: text address: address anchor: anchor)
        (let ((arguments
                `(base: Link
                  ,@(if address (list address: address) '())
                  ,@(if anchor (list anchor: anchor) '()))))
          (replace-styled~ client range (list (or text " ")) (apply new Link-Style arguments)))))
      
    (let* ((model (get-model~ client))
           (selection (get-selection~ client))
           (start (get-start~ selection))
           (end (get-end~ selection))
           (text (get-selected-string~ client))
           (style (get-style-at~ model end)))
      (cond ((nu=? start end)
             (if (is-not? style Link-Style)
                 (replace range: selection)
               (let ((paragraph (get-paragraph~ client (get-line~ end)))
                     (run (get-run-at~ client end)))
                 (let ((range (determine-run-range~ paragraph run)))
                   (let ((start (new Cell (get-line~ end) (get-start~ range)))
                         (end (new Cell (get-line~ end) (get-end~ range))))
                     (replace text: (export-string~ run) address: (get-address~ style) anchor: (get-anchor~ style) range: (new Range$Cell$ start end)))))))
            ((= (get-line~ start) (get-line~ end))
             (if (is-not? style Link-Style)
                 (replace text: text range: selection)
               (replace text: text address: (get-address~ style) anchor: (get-anchor~ style) range: selection)))
            (else
             (bell)))))
  
  
  (method (on-insert-image evt)
    (let* ((moniker (choose-file))
           (style (new Image-Style moniker: moniker)))
      (insert-styled~ client " " style)))
  
  
  (method (on-insert-table evt)
    (insert-table~ client size: {Dimension 304 101} header?: #f node-column?: #f columns: '((width: 100) (width: 100) (width: 100)) row-count: 2))
  
  
  (method (on-export-pdf evt)
    ;; needs cleanup
    (let ((class (class-of client))
          (moniker (get-moniker~ client))
          (page-setup (new Page-Setup)))
      (let ((page-content (get-content~ page-setup))
            (text (new class)))
        (let ((model (get-model~ text)))
          (set-width~ text (get-width~ page-content))
          (set-moniker~ text moniker)
          (with-printing~ (get-model~ text)
            (lambda ()
              (set-height-noevent~ text (scrollee-height~ text))
              (document->pdf text (choose-new-file default-extension: "pdf" extensions: '(("PDF files" . "pdf"))))))))))

  
  ;;;
  ;;;; Selection
  ;;;


  (method (selection-change)
    (selection-change~ (locate 'format))
    (selection-change~ (locate 'style))
    (selection-change~ (locate 'font))
    (selection-change~ (locate 'size))
    (let* ((model (get-model~ client))
           (end (get-end~ client))
           (format (get-format~ (get-paragraph~ model (get-line~ end))))
           (style (get-style-at~ model end))
           (alignment (or (get-alignment~ style) 'bottom))
           (font (and (is? style Text-Style) (get-font~ style))))
      (set-selected?~ (locate 'bold) (and font (get-bold?~ font)))
      (set-selected?~ (locate 'italic) (and font (get-italic?~ font)))
      (set-selected?~ (locate 'underline) (and font (get-underline?~ font)))
      (set-selected?~ (locate 'alignment-bottom) (eq? alignment 'bottom))
      (set-selected?~ (locate 'alignment-center) (eq? alignment 'center))
      (set-selected?~ (locate 'alignment-top) (eq? alignment 'top))
      (set-selected?~ (locate 'justify-left) (eq? (get-justification~ format) 'left))
      (set-selected?~ (locate 'justify-center) (eq? (get-justification~ format) 'center))
      (set-selected?~ (locate 'justify-right) (eq? (get-justification~ format) 'right))
      (set-selected?~ (locate 'bulleted) (get-bulleted?~ format))
      (typecase style
        ((View-Style)
         (let* ((view (get-view~ style))
                (designer (new Designer form: (new Form action: 'new model: (category-identifier (class-of client))) reference: view)))
           (set-selected~ (get-application) designer (list view))))
        (else
         (let ((designer (new Designer form: (new Form action: 'new model: (category-identifier (class-of client))) reference: client)))
           (set-selected~ (get-application) designer (list client)))))))))
