;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Text Style Combo
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library protected jazz.ui.text.Text-Style-Combo jazz


(import (jazz.library)
        (jazz.ui)
        (jazz.utilities))


(class undocumented Text-Style-Combo extends Text-Combo
  
  
  ;;;
  ;;;; Client
  ;;;
  
  
  (method (client-update)
    (let ((names (accumulate (get-all-styles)
                             (function (name)
                               (list name (->string name)))
                             List)))
      (set-choices names)))
  
  
  (method (get-all-styles)
    (let ((formats (remove-nils (accumulate (get-formats~ client) exemplar-name)))
          (styles (remove-nils (accumulate (get-styles~ client) exemplar-name))))
      (union formats styles)))
  
  
  ;;;
  ;;;; Selection
  ;;;
  
  
  (method (selection-change)
    (let* ((end (get-end~ client))
           (style (get-style-at~ client end)))
      (set-content (->string (either (get-name~ style) (get-base~ style))))))
  
  
  ;;;
  ;;;; Choice
  ;;;
  
  
  (method (combo-choice)
    (set-selection-style~ client (get-value))
    (selection-change))
  
  
  ;;;
  ;;;; Utilities
  ;;;
  
  
  (method (exemplar-name exemplar)
    (get-name~ exemplar))))
