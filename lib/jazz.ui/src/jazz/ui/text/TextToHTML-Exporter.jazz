;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Text -> HTML Export
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library protected jazz.ui.text.TextToHTML-Exporter jazz


(import (jazz.library)
        (jazz.ui)
        (jazz.utilities))


(class TextToHTML-Exporter extends Object
    
  
  (slot text)
  (slot printer)
  
  
  (method (initialize text printer)
    (nextmethod)
    (set! text~self text)
    (set! printer~self printer))
  
  
  (method public (export-html)
    (print-header)
    (to-html text #f)
    (print-footer))
  
  
  (method (to-html element in-table?)
    (typecase element
      ((Text-View) (text->html element in-table?))
      ((Paragraph) (paragraph->html element in-table?))
      ((Tree-View) (tree->html element))
      ((Tree-Row) (row->html element))
      ((Tree-Label) (tree-label->html element))
      ((Tree-Label-Column) (tree-column->html element))
      ((Table-Border) (tree->html (locate~ element 'tree)
                                (get-shown?~ (locate~ element 'header))))
      ((Table-Cell) (to-html (locate~ element 'text) in-table?))
      (else (error "Unsupported element: {t}" element))))
  
  
  (method (paragraph->html paragraph in-table?)
    (let* ((fmt (get-format~ paragraph))
           (bulleted? (get-bulleted?~ fmt)))
      (when bulleted?
        (format printer "<UL type=disc><LI style='margin-left:{a}in;font-size:12.0pt;font-family:\"Times New Roman\"'>{%}"
                (/ (- (get-left-margin~ fmt) 16) 64)))
      (for-each (function (run)
                  (run->html run in-table?))
                (get-runs~ paragraph))
      (when bulleted?
        (format printer "</LI></UL>{%}"))
      (unless bulleted?
        (format printer "<BR>{%}"))))
  
  
  @future
  (method (run->html run in-table?)
    (let* ((style (get-style~ run))
           (default? (eqv? (get-name~ style) 'Default))
           (color (get-value~ style color:)))
      ;; Tags opening
      (when (not default?)
        (when (not-null? color) (format printer "<COLOR={a}>" (get-name~ color))))
      ;; Content printing
      (format printer "{a}" (get-string~ run))
      ;; Tags closing
      (when (not default?)
        (when (not-null? color) (format printer "</COLOR>")))))
  
  
  (method (run->html run in-table?)
    (let ((style (get-style~ run)))
      (if (is? style View-Style)
          (to-html (get-view~ style) in-table?)
        (let ((name (get-name~ style))
              (string (get-string~ run)))
          (typecase style
            ((Hyperlink-Style)
             (format printer "<A href=\"#{a}\">{a}</A>" string string))
            ((Text-Style)
             (case name
               ((Heading0) (format printer "<H1><A name=\"{a}\">{a}</A></H1>" string string))
               ((Heading1) (format printer "<H2><A name=\"{a}\">{a}</A></H2>" string string))
               ((Heading2) (format printer "<H3><A name=\"{a}\">{a}</A></H3>" string string))
               ((Heading3) (format printer "<H4><A name=\"{a}\">{a}</A></H4>" string string))
               (else (format printer "{a}" string)))))))))
  
  
  (method (text->html element in-table?)
    (for-each (function (paragraph)
                (paragraph->html paragraph in-table?))
              (get-paragraphs~ element)))
  
  
  (method (tree->html tree header?)
    @w
    (format printer "<TABLE BORDER=\"0\" style=\"border: 1px solid black\" CELLSPACING=\"0\" BGCOLOR=WHITE>{%}")
    (format printer "<TABLE BORDER=\"1\" CELLSPACING=\"0\" BGCOLOR=WHITE>{%}")
    (when header?
      (format printer "<TR>{%}")
      (for-each (function (column)
                  (format printer "<TH>")
                  (to-html column #t)
                  (format printer "</TH>{%}"))
                (get-columns~ tree))
      (format printer "</TR>{%}"))
    (for-each-row~ tree row->html)
    (format printer "</TABLE>{%}"))
  
  
  (method (row->html row rank)
    (format printer "<TR>")
    (let ((in-table? #t)
          (first? #t))
      (for-each (function (child)
                  (format printer "<TD VALIGN=\"TOP\">")
                  (when (and first? (/= (get-level~ row) 0))
                    (format printer "-- "))
                  (to-html child in-table?)
                  (format printer "</TD>{%}")
                  (set! first? #f))
                (get-children~ row)))
    (format printer "</TR>{%}"))
  
  
  (method (tree-label->html cell)
    (let ((string (localize (get-title~ cell))))
      (if (empty-string? string)
          (format printer "&nbsp;")
        (format printer "{a}" string))))
  
  
  (method (tree-column->html column)
    (format printer "{a}" (localize (get-title~ column))))
  
  
  (method public (print-header (name: name "") (header?: header? #f) (header-level: header-level 2) (style-sheet: style-sheet {}))
    (format printer "<HTML>{%}")
    (format printer "<HEAD>{%}")
    (when (/= name "")
      (format printer "<TITLE>{a}</TITLE>{%}" (localize name)))
    (when style-sheet
      (format printer "<LINK REL=STYLESHEET HREF=\"{a}\" TYPE=\"text/css\">{%}"
        style-sheet))
    (format printer "</HEAD>{%}")
    (format printer "{%}")
    (when header?
      @am
      (print-title name header-level centered?: #t))
    @w
    (format printer "<BODY BGCOLOR=#b7d6d9>{%}"))
  
  
  (method public (print-footer)
    (format printer "</BODY>{%}")
    (format printer "</HTML>"))))
