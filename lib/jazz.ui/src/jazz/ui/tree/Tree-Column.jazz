;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Tree Columns
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2012
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.ui.tree.Tree-Column jazz


(import (jazz.geometry)
        (jazz.graphic)
        (jazz.jml)
        (jazz.library)
        (jazz.locale)
        (jazz.ui)
        (jazz.ui.view))


(class Tree-Column extends Component
  
  
  (property protected title         initialize {Locales all: ""} accessors explicit)
  (property protected width         initialize 0                 accessors explicit)
  (property protected background    initialize #f                accessors explicit)
  (property protected justification initialize '(1 2)            accessors explicit)
  (property protected user-data     initialize #f                accessors generate)
  
  
  (slot protected rank    initialize #f accessors generate)
  (slot protected borders initialize #f accessors generate)
  (slot protected down?   initialize #f)
  (slot           tree    initialize #f accessors generate)
  
  
  (method override (print output readably)
    (print-unreadable self output
      (lambda (output)
        (format output "{s} {a}"
                name
                title))))
  
  
  (method override (set-parent parent)
    (nextmethod parent)
    (set! tree parent))
  
  
  (method override (finish rest)
    (nextmethod rest)
    (set! tree parent))
  
  
  ;;;
  ;;;; Access
  ;;;
  
  
  (method public (get-title)
    title)
  
  
  (method public (set-title value)
    (set! title value)
    (when (and (initialized?)
               tree
               (get-player~ tree))
      (let ((header (get-header~ tree)))
        (when header
          (invalidate-column-header~ header self)))))
  
  
  (method public (get-width)
    (if (get-visible?) width 0))
  
  
  (method public (set-width value)
    (set! width value)
    (when tree
      (invalidate-columns~ tree)
      (invalidate-view~ tree)))
  
  
  (method public (get-background)
    background)
  
  
  (method public (set-background value)
    (set! background value)
    (when tree
      (invalidate-view~ tree)))
  
  
  (method public (get-justification)
    justification)
  
  
  (method public (set-justification just)
    (set! justification just)
    (when tree
      (invalidate-view~ tree)))
  
  
  (method override (set-visible? flag)
    (nextmethod flag)
    (when tree
      (invalidate-columns~ tree)
      (fill-column~ tree)
      (invalidate-view~ tree)))
  
  
  ;;;
  ;;;; Cells
  ;;;
  
  
  (method public virtual (cell-class)
    )
  
  
  (method public virtual (new-empty-cell)
    (new (cell-class) title: ""))
  
  
  ;;;
  ;;;; Parts
  ;;;
  
  
  (method public virtual (find-part cell pos)
    'content)
  
  
  ;;;
  ;;;; Rects
  ;;;
  
  
  (method protected virtual (content-rect row cell width height)
    (let ((h (content-h (get-level~ row))))
      (new Rect h 0 width height)))
    
  
  (method protected virtual (content-h level)
    0)
    
  
  (method protected virtual (text-h level)
    0)
  
  
  ;;;
  ;;;; Sorting
  ;;;
  
  
  (method protected virtual (sort-value row data)
    (get-sort-value~ data))


  ;;;
  ;;;; Tooltip
  ;;;
  
  
  (method public virtual (get-header-tooltip)
    (get-column-tooltip~ tree self))
  
  
  (method public virtual (get-data-tooltip data)
    #f)


  ;;;
  ;;;; Mouse
  ;;;
  
  
  (method public virtual (header-down pos)
    (set! down? #t)
    (invalidate-column-header~ (get-header~ tree) self))
  
  
  (method public virtual (header-move pos)
    )
  
  
  (method public virtual (header-up pos)
    (set! down? #f)
    (invalidate-column-header~ (get-header~ tree) self)
    (header-click~ tree self))
  
  
  (method public virtual (header-double-click pos)
    (header-down pos))
  
  
  (method public virtual (mouse-down cell pos shift? control?)
    (acquire-focus~ tree)
    (column-mouse-down cell pos shift? control?))
  
  
  (method public virtual (column-mouse-down cell pos shift? control?)
    (process-selection~ tree cell shift? control? 'mouse))
  
  
  (method public virtual (drag-move cell pos)
    )
  
  
  (method public virtual (drag-up cell pos)
    )
  
  
  (method public virtual (double-click cell pos)
    )
  
  
  (method public virtual (context-menu cell pos)
    (call-context-menu~ tree pos))
  
  
  ;;;
  ;;;; Layout
  ;;;
  
  
  (method public virtual (layout-cell row data h v width height)
    (when (is? data View)
      (let ((merge-cell (get-merge-cell~ tree (new Site row self))))
        (if merge-cell
            (set-rect~ data (acquire~ row tree (merge-cell-rect~ tree merge-cell)))
          (set-position~ data (new Point h v))
          (set-size~ data (new Dimension width height))))))
  
  
  ;;;
  ;;;; Drawing
  ;;;

  
  (method public virtual (draw-data surface context row data width height)
    (draw-at surface context row data 0 0 width height))
  
  
  (method public virtual (draw-at surface context row data h v width height)
    (draw-background surface context row data width height))
  
  
  (method public virtual (draw-background surface context row data width height)
    (let ((rect (new Rect 0 0 width height)))
      (let ((background (cond ((debug-paint?)
                               (cycle-debug-color!))
                              ((not (view-enabled?~ parent))
                               {Color Medium})
                              (else
                               (background-color row data context)))))
        (when (and background (neq? background 'none))
          (fill-rect~ surface rect background)))
      (when (is? data Tree-Data)
        (let ((frame-color (get-frame-color~ data)))
          (when frame-color
            (frame-rect~ surface rect frame-color))))))
  
  
  (method (background-color row data context)
    (let ((selected? (getf context selected?:)))
      (if (and selected? (cell-selected? context))
          (selection-color~ tree)
        (or (and (is? data Tree-Data) (get-background~ data))
            (get-cell-background~ tree)
            (or (get-background~ (get-look~ tree))
                (get-background~ row)
                {Color Tree-Background})))))
  
  
  (method protected (cell-selected? context)
    (case (get-selection-mode~ tree)
      ((cell) (let ((line (getf context line:))
                    (col (column->col~ tree self)))
                (or (some? (lambda (cell)
                             (and (= line (get-line~ cell))
                                  (= col (get-col~ cell))))
                           (get-selection~ tree))
                    (let ((merge-cell (get-merge-cell~ tree (cell->site~ tree (new Cell line col)))))
                      (when merge-cell
                        (merge-cell-selected?~ tree merge-cell))))))
      ((node) (let ((col (column->col~ tree self)))
                (= col 0)))
      ((row) (let ((line (getf context line:)))
               (memv? line (get-selection~ parent))))))
  
  
  (method public virtual (draw-header surface context h v width height look sorted spaced? flat? enabled?)
    (draw-header-at surface h v width height look (localize title) down? sorted spaced? flat? enabled?))
  
  
  (method (draw-header-at surface h v width height look title down? sorted spaced? flat? enabled?)
    (if down?
        (draw-sunken-button surface h v width height look title sorted spaced? flat? enabled?)
      (draw-raised-button surface h v width height look title sorted spaced? flat? enabled?)))
  
  
  (method (draw-raised-button surface h v width height look title sorted spaced? flat? enabled?)
    (let ((thick (if flat? -1 -2)))
      ;; when spaced, it's the background that draws the right side shadow
      (let* ((outer (new Rect h v (+ h width) (+ v height)))
             (inner (expand-rect outer 1 1 (if spaced? 0 thick) thick))
             (text-h (header-title-h surface width height look title))
             (background (get-background~ look))
             (color (if enabled? (or (get-title-color~ look) {Color Black}) {Color Dark})))
        (unless (eq? background 'none)
          (if flat?
              (if spaced?
                  (let ((smaller (expand-rect outer 0 0 0 -1)))
                    (draw-edge~ surface smaller inner: 'raised edges: '(top left)))
                (draw-edge~ surface outer inner: 'raised edges: 'rectangle))
            (draw-edge~ surface outer inner: 'raised outer: 'raised edges: '(right bottom))
            (let ((rect (expand-rect outer 0 0 -1 -1)))
              (draw-edge~ surface rect inner: 'raised edges: '(top left))))
          (fill-rect~ surface inner (if (debug-paint?) (cycle-debug-color!) (or background (header-color~ tree)))))
        (with-clipping-transformation~ surface h v width (- height 1) #f
          (lambda ()
            (draw-text~ surface text-h 1 title color)
            (draw-sorted surface width 0 title sorted))))))
  
  
  (method (draw-sunken-button surface h v width height look title sorted spaced? flat? enabled?)
    (let* ((outer (new Rect h v (+ h width) (+ v height)))
           (inner (inflate-rect outer -1 -1))
           (text-h (+ (header-title-h surface width height look title) 1))
           (background (get-background~ look))
           (color (if enabled? (or (get-title-color~ look) {Color Black}) {Color Dark})))
      (unless (eq? background 'none)
        (set-color~ surface {Color Dark})
        (frame-rect~ surface outer {Color Dark})
        (fill-rect~ surface inner (if (debug-paint?) (cycle-debug-color!) (or background (header-color~ tree)))))
      (with-clipping-transformation~ surface h v width (- height 1) #f
        (lambda ()
          (draw-text~ surface text-h 2 title color)
          (draw-sorted surface (+ width 1) 1 title sorted)))))
  
  
  (method protected virtual (header-title-offset look)
    (if (eq? (get-background~ look) 'none)
        0
      2))
    
  
  (method protected (header-title-h surface width height look title)
    (+ (header-title-offset look) (get-h~ (justify-title surface (- width 4) height title justification))))
  
  
  (method protected (justify-title surface width height title justification)
    (justify-lazy (lambda ()
                    (get-text-extent~ surface title))
                  (lambda ()
                    (new Dimension width height))
                  (if (pair? justification)
                      justification
                    (list justification justification))))

  
  (definition (draw-sorted surface h v title sorted)
    (when sorted
      (set-color~ surface {Color Dark})
      (let ((h (- h 10))
            (v (+ v 6))
            (size 4))
        (case sorted
          ((ascending) (draw-arrow-tip~ surface h v size 'up))
          ((descending #f) (draw-arrow-tip~ surface h v size 'down))))))

  
  ;;;
  ;;;; Debugging
  ;;;
  
  
  (method public virtual (get-debugged cell pos)
    (values cell #f))
  
  
  ;;;
  ;;;; Descriptor
  ;;;
  
  
  (method meta override (get-class-descriptor (context: context #f))
    (new Tree-Column-Descriptor)))


;;;
;;;; Design
;;;


(submodule design


(import (jazz.designer))


(class Tree-Column-Descriptor extends Component-Descriptor
  
  
  (form
    (<install>                                     image: {Image-Resource "Green"}
      (<properties~>
        (<Property-Descriptor> name: title
          (<Localized-Domain>  name: domain))
        (<Property-Descriptor> name: width
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: background
          (<Value-Domain>      name: domain        nullable?: #t))
        (<Property-Descriptor> name: justification
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: user-data
          (<Value-Domain>      name: domain        nullable?: #t))))))))
