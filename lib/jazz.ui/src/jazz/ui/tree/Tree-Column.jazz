;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Tree Columns
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.ui.tree.Tree-Column jazz


(import (jazz.geometry)
        (jazz.graphic)
        (jazz.library)
        (jazz.locale)
        (jazz.ui)
        (jazz.ui.view))


(class Tree-Column extends Component
  
  
  (property protected title         initialize ""     getter get-title           setter set-title)
  (property protected width         initialize 0      getter get-width           setter set-width)
  (property protected background    initialize {}     getter get-background      setter set-background)
  (property protected justification initialize '(1 2) getter get-justification   setter set-justification)
  
  
  (slot protected down? initialize #f)
  
  
  (method override (print printer readably)
    (print-unreadable self printer
      (lambda (printer)
        (format printer "{s} {a}"
                title
                width))))
  
  
  ;;;
  ;;;; Access
  ;;;
  
  
  (method public (get-title)
    title)
  
  
  (method public (set-title value)
    (set! title value)
    (when (get-player~ parent)
      (let ((header (get-header~ parent)))
        (when header
          (invalidate-column-header~ header self)))))
  
  
  (method public (get-width)
    (if (get-visible?) width 0))
  
  
  (method public (set-width value)
    (set! width value)
    (invalidate-columns~ parent)
    (invalidate-view~ parent))
  
  
  (method public (get-background)
    background)
  
  
  (method public (set-background value)
    (set! background value)
    (invalidate-view~ parent))
  
  
  (method public (get-justification)
    justification)
  
  
  (method public (set-justification just)
    (set! justification just)
    (invalidate-view~ parent))
  
  
  (method override (set-visible? flag)
    (nextmethod flag)
    (invalidate-columns~ parent)
    (invalidate-view~ parent))
  
  
  ;;;
  ;;;; Cells
  ;;;
  
  
  (method public virtual (cell-class)
    )
  
  
  (method public virtual (new-empty-cell)
    (new (cell-class) title: ""))
  
  
  ;;;
  ;;;; Parts
  ;;;
  
  
  (method public virtual (find-part cell pos)
    'content)
  
  
  ;;;
  ;;;; Rects
  ;;;
  
  
  (method protected virtual (content-rect row cell width height)
    (let ((h (content-h (get-level~ row))))
      (new Rect h 0 width height)))
    
  
  (method protected virtual (content-h level)
    0)
    
  
  (method protected virtual (text-h level)
    0)
  
  
  ;;;
  ;;;; Sorting
  ;;;
  
  
  (method protected virtual (sort-value row data)
    (get-sort-value~ data))


  ;;;
  ;;;; Tooltip
  ;;;
  
  
  (method public virtual (get-header-tooltip)
    (get-column-tooltip~ parent self))
  
  
  (method public virtual (get-data-tooltip data)
    {})


  ;;;
  ;;;; Mouse
  ;;;
  
  
  (method public virtual (header-down pos)
    (set! down? #t)
    (invalidate-column-header~ (get-header~ parent) self))
  
  
  (method public virtual (header-move pos)
    )
  
  
  (method public virtual (header-up pos)
    (set! down? #f)
    (invalidate-column-header~ (get-header~ parent) self)
    (header-click~ parent self))
  
  
  (method public virtual (header-double-click pos)
    (header-down pos))
  
  
  (method public virtual (mouse-down cell pos shift? control?)
    (acquire-focus~ parent)
    (complete-mouse-down cell pos shift? control?))
  
  
  (method public virtual (complete-mouse-down cell pos shift? control?)
    (process-selection~ parent cell shift? control?))
  
  
  (method public virtual (drag-move cell pos)
    )
  
  
  (method public virtual (drag-up cell pos)
    )
  
  
  (method public virtual (double-click cell pos)
    )
  
  
  (method public virtual (context-menu cell pos)
    (call-context-menu~ parent pos))
  
  
  ;;;
  ;;;; Layout
  ;;;
  
  
  (method public virtual (layout-cell row data h v width height)
    (when (is? data View)
      (set-position~ data (new Point h v))
      (set-size~ data (new Dimension width height))))
  
  
  ;;;
  ;;;; Drawing
  ;;;
  
  
  (definition Text-Color
    {Color name: Black})

  
  (method public (paint-data surface context lh <fx> lv <fx> h v width height row data sh <fx> sv <fx> sc <fl> sc? <bool>)
    (let ((selected? (getf context selected?:)))
      (with-transform~ surface lh lv width height sh sv sc sc?
        (lambda ()
          (draw-data surface context row data width height)))))

  
  (method public virtual (draw-data surface context row data width height)
    (draw-at surface context row data 0 0 width height))
  
  
  (method public virtual (draw-at surface context row data h v width height)
    (draw-background surface context row data width height))
  
  
  (method public virtual (draw-background surface context row data width height)
    (let ((rect (new Rect 0 0 width height)))
      (let ((color (if *debug-paint* (cycle-debug-color!) (background-color data context))))
        (fill-rect~ surface rect color))
      (when (is? data Tree-Data)
        (let ((frame-color (get-frame-color~ data)))
          (when frame-color
            (frame-rect~ surface rect frame-color))))))
  
  
  (method (background-color data context)
    (let ((selected? (getf context selected?:)))
      (if (and selected? (cell-selected? context))
          (selection-color~ parent)
        (either (essay (is? data Tree-Data) (get-background~ data))
                (get-cell-background~ parent)
                {Color name: White}))))
  
  
  (method protected (cell-selected? context)
    (case (get-selection-mode~ parent)
      ((cell) (let ((row-rank (getf context row-rank:))
                    (col-rank (column-rank~ parent self)))
                (some? (lambda (cell)
                         (and (= row-rank (get-row~ cell))
                              (= col-rank (get-col~ cell))))
                       (get-selection~ parent))))
      ((node) (let ((col-rank (column-rank~ parent self)))
                (= col-rank 0)))
      ((row) #t)))
  
  
  (method public virtual (draw-header surface context lh lv h v width height sorted spaced? flat?)
    (draw-header-at surface lh lv h v width height (localize title) down? sorted spaced? flat?))
  
  
  (method (draw-header-at surface lh lv h v width height title down? sorted spaced? flat?)
    (if down?
        (draw-sunken-button surface lh lv h v width height title sorted spaced? flat?)
      (draw-raised-button surface lh lv h v width height title sorted spaced? flat?)))
    
  
  (method (draw-raised-button surface lh lv h v width height title sorted spaced? flat?)
    (let ((thick (if flat? -1 -2)))
      ;; when spaced, it's the background that draws the right side shadow
      (let* ((outer (new Rect h v (+ h width) (+ v height)))
             (inner (expand-rect outer 1 1 (if spaced? 0 thick) thick))
             (text-h (header-title-h surface width height title)))
        (if flat?
            (if spaced?
                (let ((smaller (expand-rect outer 0 0 0 -1)))
                  (draw-edge~ surface smaller inner: 'raised edges: '(top left)))
              (draw-edge~ surface outer inner: 'raised edges: 'rectangle))
          (draw-edge~ surface outer inner: 'raised outer: 'raised edges: '(right bottom))
          (let ((rect (expand-rect outer 0 0 -1 -1)))
            (draw-edge~ surface rect inner: 'raised edges: '(top left))))
        (fill-rect~ surface inner (either background (header-color~ parent)))
        (set-text-color~ surface {Color name: Black})
        (with-transform~ surface (+ lh h) (+ lv v) width (- height 1) 0 0 1.0 #f
          (lambda ()
            (draw-text~ surface text-h 1 title)
            (draw-sorted surface text-h 0 title sorted))))))
    
  
  (method protected virtual (header-title-h surface width height title)
    (+ 2 (get-h~ (justify-title surface (- width 4) height title justification))))
  
  
  (method protected (justify-title surface width height title justification)
    (let ((extent (get-text-extent~ surface title)))
      (justify extent (new Dimension width height) justification)))

  
  (definition (draw-sorted surface h v title sorted)
    (when sorted
      (set-color~ surface {Color name: Dark})
      (let* ((width (get-text-width~ surface title))
             (h (+ h (+ width 6)))
             (v (+ v 6))
             (size 4))
        (case sorted
          ((ascending) (draw-arrow-tip~ surface h v size 'up))
          ((descending) (draw-arrow-tip~ surface h v size 'down))))))
  
  
  (method (draw-sunken-button surface lh lv h v width height title sorted spaced? flat?)
    (let* ((outer (new Rect h v (+ h width) (+ v height)))
           (inner (inflate-rect outer -1 -1))
           (text-h (+ (header-title-h surface width height title) 1)))
      (set-color~ surface {Color name: Dark})
      (frame-rect~ surface outer {Color name: Dark})
      (fill-rect~ surface inner (either background (header-color~ parent)))
      (set-text-color~ surface {Color name: Black})
      (with-transform~ surface (+ lh h) (+ lv v) width (- height 1) 0 0 1.0 #f
        (lambda ()
          (draw-text~ surface text-h 2 title)
          (draw-sorted surface (+ text-h 1) 1 title sorted)))))

  
  ;;;
  ;;;; Debugging
  ;;;
  
  
  (method public virtual (get-debugged cell pos)
    (values cell {}))
  
  
  ;;;
  ;;;; Descriptor
  ;;;
  
  
  (method meta override (get-class-descriptor)
    (new Tree-Column-Descriptor)))


;;;
;;;; Design
;;;


(submodule design


(import (jazz.designer))


(class Tree-Column-Descriptor extends Component-Descriptor
  
  
  (method override (class-image class)
    {Bitmap-Resource "Green"})
  
  
  (method override (component-can-move-component? component)
    #f)
  
  
  (method override (class-property-presentation class property)
    (case (field-name property)
      ((title) "Title")
      ((width) "Width")
      ((background) "Background")
      ((justification) "Justification")
      (else (nextmethod class property)))))))
