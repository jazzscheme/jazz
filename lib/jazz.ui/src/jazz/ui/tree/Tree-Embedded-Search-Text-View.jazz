;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Tree Embedded Search Text View
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.ui.tree.Tree-Embedded-Search-Text-View jazz


(import (jazz.ide)
        (jazz.platform)
        (jazz.system)
        (jazz.ui)
        (jazz.ui.view)
        (jazz.ui.window))


(class undocumented Tree-Embedded-Search-Text-View extends IDE-Text-View
  
  
  (slot tree)
  

  ;;;
  ;;;; Access
  ;;;
  
  
  (method public (set-tree t)
    (set! tree t))
  

  ;;;
  ;;;; Tree
  ;;;
  
  
  (method (get-tree)
    tree)
  
  
  (method (get-cell)
    (get-edited-cell~ (get-tree)))
  
  
  (method (get-cell-values)
    (let ((cell (get-cell)))
      (values (get-row~ cell) (get-col~ cell))))
  

  ;;;
  ;;;; Actions
  ;;;
  

  (method override (focus-actions)
    (cons (find-actions 'tree-embedded-search-text)
          (nextmethod)))
  
  
  ;; delegate the shortcut
  (method override (upward-compound)
    (toggle-play-recording~ (get-guest)))
  
  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method override (focus-lose)
    (nextmethod)
    (delay-event
      (lambda ()
        (end-edition))))
  
  
  (method override (return-press evt)
    (let ((guest (get-guest)))
      (end-edition)
      (let ((search (get-search~ guest)))
        (if (null? (get-contexts~ (get-find-targets~ search)))
            (bell)
          (on-search~ search evt)))))
  
  
  (method (on-end-edition key)
    (end-edition))
  
  
  (method override (tab-press key modifiers)
    (let ((shift? (shift-key? modifiers)))
      (if (and (has-completion?) (not shift?))
          (end-completion)
        (let* ((tree (get-tree))
               (tab-manager (find-tab-manager~ tree))
               (to-view (navigated-view~ tab-manager tree shift?))
               (to-navigable? (and to-view (neq? to-view tree)))
               (width (get-columns-count~ tree))
               (height (get-visible-count~ tree)))
          (receive (row col) (get-cell-values)
            (if (and to-navigable? shift? (= row 0) (= col 0))
                (navigate-tab~ tab-manager tree shift?)
              (let* ((max-col (- width 1))
                     (row-direction (cond ((and shift? (= col 0)) -1)
                                          ((and (not shift?) (= col max-col)) 1)
                                          (else 0)))
                     (row (modulo (+ row height row-direction) height))
                     (col (modulo (+ col width (if shift? -1 1)) width))
                     (cell (new Cell row col)))
              (if (and to-navigable? (not shift?) (= row 0) (= col 0))
                  (navigate-tab~ tab-manager tree shift?)
                (when (select-cell~ tree cell)
                  (end-edition))))))))))
  
  
  (method override (left-arrow-move extend? word?)
    (if word?
        (select-left~ (get-tree) (get-cell))
      (nextmethod extend? word?)))
  
  
  (method override (right-arrow-move extend? word?)
    (if word?
        (select-right~ (get-tree) (get-cell))
      (nextmethod extend? word?)))
  
  
  (method override (up-arrow-move extend? scroll?)
    (select-up~ (get-tree) (get-cell)))
  
  
  (method override (down-arrow-move extend? scroll?)
    (select-down~ (get-tree) (get-cell) #f))
  
  
  (method (end-edition)
    (when player
      (end-edition~ (get-tree))))))
