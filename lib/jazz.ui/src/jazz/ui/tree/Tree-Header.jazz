;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Tree Header
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library protected jazz.ui.tree.Tree-Header jazz


(import (jazz.graphic)
        (jazz.library)
        (jazz.ui)
        (jazz.ui.window)
        (jazz.utilities))


;; One thing to be carefull is that even though the tree header can reside in a scroller
;; it will not be scrolled. It will be the tree that is scrolled, so that the header
;; has to explicitly consult the tree's scrolled position for it's operations...


(class Tree-Header extends Header-View
    
  
  (slot protected resizing?          initialize #f)
  (slot protected autofiting?        initialize #f)
  (slot protected resize-last-h      initialize {})
  (slot protected resized-column     initialize {})
  (slot protected resized-column-ref initialize 0)

  
  (method override (finish rest)
    (nextmethod rest)
    (invalidate-layout)
    (let ((content (child 'content)))
      (set! client (get-scroll-client~ content))))


  ;;;
  ;;;; Columns
  ;;;
    
  
  (method public (get-column n)
    (element (get-columns) n))
  
  
  (method public (column-rank column)
    (find (get-columns) column))


  ;;;
  ;;;; Borders
  ;;;
  
  
  (method (borders-left borders)
    (car borders))
  
  
  (method (borders-right borders)
    (cdr borders))
  
  
  (method public (get-borders col)
    (element (get-columns-borders) col))
  
  
  (method public (column-width col)
    (bind (left . right) (get-borders col)
      (- right left)))
  
  
  ;;;
  ;;;; Header
  ;;;
  
  
  (method (get-columns)
    (get-columns~ client))
  
  
  (method (get-columns-count)
    (get-columns-count~ client))
  
  
  (method (get-columns-borders)
    (get-columns-borders~ client))

  
  (method (invalidate-columns)
    (invalidate-columns~ client))

  
  (method (invalidate-borders)
    (invalidate-borders~ client))

  
  (method (layout-column column)
    (layout-column~ client column))
  
  
  (method (end-resizing)
    (when client
      (layout-scrollee~ client)
      (invalidate-view~ client)))


  ;;;
  ;;;; Events
  ;;;
  
  
  (method override (size-change size)
    (nextmethod size)
    (when client
      (layout-scrollee~ client)))
  

  ;;;
  ;;;; Scroll
  ;;;
  
  
  (method override (set-scroller view)
    (set-scroller~ client view))
  
  
  (method override (get-scroll-client)
    (get-scroll-client~ client))
  
  
  (method (get-hscroll-amount)
    (if client (get-h~ (get-position~ client)) 0))


  ;; most probably not called as it was missing the orientation parameter in the old jazz!
  (method override (on-vscroll code thumb-pos orientation)
    (when client
      (on-vscroll~ client code thumb-pos orientation)))


  ;; most probably not called as it was missing the orientation parameter in the old jazz!
  (method override (on-hscroll code thumb-pos orientation)
    (when client
      (on-hscroll~ client code thumb-pos orientation)))


  ;;;
  ;;;; Drawing
  ;;;
  
  
  (method override (draw surface context lh lv)
    (let ((clipper (get-logical-clipper~ surface)))
      (let ((height (get-header-height)))
        (when (< (get-top~ clipper) height)
          (fill-rect~ surface clipper {Color name: Dark})
          (when client
            (let* ((h (get-hscroll-amount))
                   (cs (get-column-spacing~ client))
                   (sorted-column (get-sorted-column~ client))
                   (sort-ascending? (get-sort-ascending?~ client))
                   (spaced? (/= cs 0))
                   (flat? (flat-look?))
                   (rank 0))
              (for-each (lambda (column)
                          (let ((width (get-width~ column))
                                (sorted (if (and sorted-column (= rank sorted-column)) (if sort-ascending? 'ascending 'descending) {})))
                            (draw-header~ column surface context h 0 width height sorted spaced? flat?)
                            (increase! h (+ width cs))
                            (increase! rank)))
                        (get-columns))))))))


  ;;;
  ;;;; Cursor
  ;;;


  (method override (cursor-update pos)
    (if (or resizing? (resized-col (- (get-h~ pos) (get-hscroll-amount))))
        (set-cursor :west-east)
      (set-cursor :arrow)))
  

  ;;;
  ;;;; Tooltip
  ;;;
  
  
  (method (calculate-tooltip-bounds column)
    (let ((hscrolled (get-hscroll-amount)))
      (offset-rect (header-rect column) hscrolled 0)))
  
  
  (method override (get-tooltip-bounds pos)
    (let* ((hscrolled (get-hscroll-amount))
           (h (- (get-h~ pos) hscrolled))
           (col (h->col h)))
      (when col
        (calculate-tooltip-bounds (get-column col)))))
  
  
  (method override (get-tooltip-context pos)
    (when pos
      (let* ((hscrolled (get-hscroll-amount))
             (h (- (get-h~ pos) hscrolled))
             (col (h->col h)))
        (when col
          (let ((column (get-column col)))
            (let ((text (get-header-tooltip~ column)))
              (when text
                (let ((rect (offset-rect (header-rect column) hscrolled 0)))
                  (new Tooltip-Context
                    view: self
                    text: text
                    bounds: rect)))))))))


  ;;;
  ;;;; Mouse
  ;;;
  
  
  (method override (mouse-down pos)
    (when pos
      (acquire-capture)
      (set! autofiting? #f)
      (let ((h (- (get-h~ pos) (get-hscroll-amount)))
            (v (get-v~ pos)))
        (let ((col (resized-col h)))
          (if (not col)
              (let ((col (h->col h)))
                (when col
                  (let ((column (get-column col)))
                    (header-down~ column (header-coordinates col pos)))))
            (set! resizing? #t)
            (set! resize-last-h h)
            (set! resized-column (get-column col))
            (set! resized-column-ref col))))))
  
  
  (method override (drag-move pos)
    (when pos
      (let ((h (- (get-h~ pos) (get-hscroll-amount)))
            (v (get-v~ pos)))
        (if (not resizing?)
            (let ((col (h->col h)))
              (when col
                (let ((column (get-column col)))
                  (header-move~ column (header-coordinates col pos)))))
          (let ((delta (- h resize-last-h)))
            (when (/= delta 0)
              (set! resize-last-h h)
              (resize-column resized-column (+ (get-width~ resized-column) delta))))))))
  
  
  (method override (drag-up pos . rest)
    (when pos
      (let ((h (- (get-h~ pos) (get-hscroll-amount)))
            (v (get-v~ pos)))
        (if (not resizing?)
            (unless autofiting?
              (let ((col (h->col h)))
                (when col
                  (let ((column (get-column col)))
                    (header-up~ column (header-coordinates col pos))))))
          (set! resizing? #f)
          (set! resized-column {})
          (set-filled-column~ (get-client) #f)
          (end-resizing))
        (release-capture))))
  
  
  (method override (double-click pos)
    (when pos
      (let ((h (- (get-h~ pos) (get-hscroll-amount)))
            (v (get-v~ pos)))
        (let ((col (resized-col h)))
          (if col
              (begin
                (autofit-column (get-column col))
                (set! autofiting? #t))
            (let ((col (h->col h)))
              (when col
                (let ((column (get-column col)))
                  (header-double-click~ column (header-coordinates col pos))))))))))
  
  
  (method (resize-column column width)
    (when (>= width 0)
      (let ((delta (- width (get-width~ column)))
            (left (+ (borders-right (get-borders (column-rank~ client column))) (get-hscroll-amount))))
        (set-width~ column width)
        (invalidate-columns)
        (invalidate-borders)
        (layout-column column)
        (scroll-view delta 0 (new Rect (- left 2) 0 (get-width) (get-height)))
        (update-view))))
  
  
  (method (autofit-column column)
    (let ((tree client)
          (col (column-rank~ client column))
          (max 0))
      (for-each-visible-row~ tree
        (lambda (row rank)
          (let ((data (get-child~ row col)))
            (when (is? data Tree-Label)
              (let ((title (get-title~ data)))
                (let ((width (+ (text-h~ column (get-level~ row))
                                (text-width~ (get-font~ tree) title)
                                2)))
                  (when (> width max)
                    (set! max width))))))))
      (when (> max 0)
        (resize-column column max))))
  
  
  (method (header-coordinates col pos)
    (point- pos (header-position col)))
  
  
  (method (resized-col h)
    (continuation-capture
      (lambda (return)
        (loop (for borders in (get-columns-borders))
              (for col from 0 below (get-columns-count))
              (bind (left . right) borders
                (when (near? h right 4)
                  (continuation-return return col))))
        {})))
    
  
  ;;;
  ;;;; Headers
  ;;;
  
  
  (method public (invalidate-column-header column)
    (when (get-finished?)
      (let ((rect (header-rect column)))
        (invalidate-rect rect))))
  
  
  (method public (header-rect column)
    (bind (left . right) (get-borders (column-rank column))
      (new Rect left 0 right (get-height))))
  

  ;;;
  ;;;; Coordinates
  ;;;
  
  
  (method (header-position col)
    (new Point (borders-left (get-borders col)) 0))
  

  (method (h->col h)
    (continuation-capture
      (lambda (return)
        (loop (for borders in (get-columns-borders))
              (for n from 0 below (get-columns-count))
              (bind (left . right) borders
                (when (and (>= h left) (<= h right))
                  (continuation-return return n))))
        {})))


  ;;;
  ;;;; Designer
  ;;;
  
  
  (method meta override (get-class-image)
    {Bitmap-Resource "MsgMenu"})))
