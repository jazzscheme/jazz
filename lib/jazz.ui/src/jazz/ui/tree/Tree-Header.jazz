;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Tree Header
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.ui.tree.Tree-Header jazz


(import (jazz.geometry)
        (jazz.graphic)
        (jazz.library)
        (jazz.ui)
        (jazz.ui.window))


;; One thing to be carefull is that even though the tree header can reside in a scroller
;; it will not be scrolled. It will be the tree that is scrolled, so that the header
;; has to explicitly consult the tree's scrolled position for it's operations...


(class Tree-Header extends Header-View
  
  
  (definition min-column-width
    9)
  
  
  (slot protected resizing?          initialize #f)
  (slot protected autofiting?        initialize #f)
  (slot protected resized-column     initialize {})
  (slot protected resized-column-ref initialize 0)
  (slot protected resize-start-width initialize {})
  (slot protected resize-start-h     initialize {})
  (slot protected initial-row        initialize {})

  
  (method override (finish rest)
    (nextmethod rest)
    (invalidate-layout))


  ;;;
  ;;;; Client
  ;;;
  
  
  (method override (find-client)
    (get-scroll-client~ (child 'content)))


  ;;;
  ;;;; Columns
  ;;;
    
  
  (method public (get-column n)
    (element (get-columns) n))
  
  
  (method public (column-rank column)
    (find (get-columns) column))


  ;;;
  ;;;; Borders
  ;;;
  
  
  (definition (borders-left borders)
    (car borders))
  
  
  (definition (borders-right borders)
    (cdr borders))
  
  
  (method public (get-borders col)
    (element (get-columns-borders) col))
  
  
  (method public (column-width col)
    (bind (left . right) (get-borders col)
      (- right left)))
  
  
  ;;;
  ;;;; Header
  ;;;
  
  
  (method (get-columns)
    (get-columns~ (get-client)))
  
  
  (method (get-columns-count)
    (get-columns-count~ (get-client)))
  
  
  (method (get-columns-borders)
    (get-columns-borders~ (get-client)))

  
  (method (invalidate-columns)
    (invalidate-columns~ (get-client)))

  
  (method (invalidate-borders)
    (invalidate-borders~ (get-client)))

  
  (method (layout-column column)
    (layout-column~ (get-client) column))
  
  
  ;;;
  ;;;; Selector
  ;;;
  

  (method (get-rows)
    (get-root-rows~ (get-client)))
  
  
  (method public (invalidate-row-selector row)
    (when (get-finished?)
      (let ((rect (selector-rect row)))
        (invalidate-rect rect))))
  
  
  (method public (selector-rect row)
    (let ((height (get-height~ parent)))
      (new Rect 0 0 (get-selector-width) (+ height (get-selector-width)))))
  

  ;;;
  ;;;; Events
  ;;;
  
  
  (method override (size-change size)
    (nextmethod size)
    (let ((client (get-client)))
      (when client
        (layout-scrollee~ client))))
  

  ;;;
  ;;;; Scroll
  ;;;
  
  
  (method override (set-scroller view)
    (set-scroller~ (get-client) view))
  
  
  (method override (get-scroll-client)
    (get-scroll-client~ (get-client)))
  
  
  (method (get-hscroll-amount)
    (let ((client (get-client)))
      (if client (+ (get-selector-width) (get-h~ (get-position~ client)) 0))))


  (method (get-vscroll-amount)
    (let ((client (get-client)))
      (if client (+ (get-header-height) (get-v~ (get-position~ client)) 0))))
  
  
  ;; most probably not called as it was missing the orientation parameter in the old jazz!
  (method override (on-vscroll code thumb-pos orientation)
    (let ((client (get-client)))
      (when client
        (on-vscroll~ client code thumb-pos orientation))))


  ;; most probably not called as it was missing the orientation parameter in the old jazz!
  (method override (on-hscroll code thumb-pos orientation)
    (let ((client (get-client)))
      (when client
        (on-hscroll~ client code thumb-pos orientation))))


  ;;;
  ;;;; Drawing
  ;;;
  
  
  (method override (draw surface context lh lv)
    (define (draw-intersection client h v width height)
      (let ((thick (if (flat-look?) -1 -2)))
        (let* ((outer (new Rect h v (+ h width) (+ v height)))
               (inner (expand-rect outer 1 1 thick thick)))
          (let ((smaller (expand-rect outer 0 0 0 -1)))
            (draw-edge~ surface smaller inner: 'raised edges: '(top left)))
          (fill-rect~ surface inner (either background (header-color~ client)))
          (set-text-color~ surface {Color name: Black}))))
    
    (let ((client (get-client))
          (clipper (get-logical-clipper~ surface)))
      (let ((height (get-header-height)))
        (when (< (get-top~ clipper) height)
          (fill-rect~ surface clipper (either background {Color name: Dark}))
          (when client
            (let* ((h (get-hscroll-amount))
                   (cs (get-column-spacing~ client))
                   (sorted-column (get-sorted-column~ client))
                   (sort-ascending? (get-sort-ascending?~ client))
                   (spaced? (/= cs 0))
                   (columns (get-columns))
                   (last-column (essay (not-null? columns) (last columns)))
                   (flat? (flat-look?))
                   (enabled? (get-enabled?~ client))
                   (rank 0))
              (for-each (lambda (column)
                          (when (get-visible?~ column)
                            (let ((width (get-width~ column))
                                  (sorted (if (and sorted-column (= rank sorted-column)) (if sort-ascending? 'ascending 'descending) {}))
                                  (spaced? (and spaced? (not (eq? column last-column)))))
                              (draw-header~ column surface context lh lv h 0 width height sorted spaced? flat? enabled?)
                              (increase! h (+ width cs))
                              (increase! rank))))
                        columns)))
          (when selector?
            (let ((v (get-vscroll-amount))
                  (cs (get-row-spacing~ client)))
              (iterate (get-rows)
                       (lambda (row)
                         (let ((row-height (get-height~ row)))
                           (draw-selector~ row surface context 0 v (get-selector-width) row-height (flat-look?))
                           (increase! v (+ row-height cs))))))
            (draw-intersection client 0 0 (get-selector-width) (get-header-height)))))))


  ;;;
  ;;;; Cursor
  ;;;


  (method override (cursor-update pos)
    (if (or resizing? (resized-col (- (get-h~ pos) (get-hscroll-amount))))
        (set-cursor :west-east)
      (set-cursor :arrow)))
  

  ;;;
  ;;;; Tooltip
  ;;;
  
  
  (method (calculate-tooltip-bounds column)
    (let ((hscrolled (get-hscroll-amount)))
      (offset-rect (header-rect column) hscrolled 0)))
  
  
  (method override (get-tooltip-bounds pos)
    (let* ((hscrolled (get-hscroll-amount))
           (h (- (get-h~ pos) hscrolled))
           (col (h->col h)))
      (when col
        (calculate-tooltip-bounds (get-column col)))))
  
  
  (method override (get-tooltip-context pos)
    (when pos
      (let* ((hscrolled (get-hscroll-amount))
             (h (- (get-h~ pos) hscrolled))
             (col (h->col h)))
        (when col
          (let ((column (get-column col)))
            (let ((text (get-header-tooltip~ column)))
              (when text
                (let ((rect (offset-rect (header-rect column) hscrolled 0)))
                  (new Tooltip-Context
                    view: self
                    text: text
                    bounds: rect)))))))))


  ;;;
  ;;;; Mouse
  ;;;
  
  
  (method override (mouse-down pos)
    (when pos
      (acquire-capture)
      (set! autofiting? #f)
      (let ((h (- (get-h~ pos) (get-hscroll-amount)))
            (v (- (get-v~ pos) (get-vscroll-amount))))
        (let ((col (resized-col h)))
          (if (not col)
              (let ((col (h->col h)))
                (when col
                  (let ((column (get-column col)))
                    (header-down~ column (header-coordinates col pos)))))
            (set! resizing? #t)
            (set! resized-column (get-column col))
            (set! resized-column-ref col)
            (set! resize-start-width (get-width~ resized-column))
            (set! resize-start-h h)))
        @wait-buggy-when-resizing-a-column-and-scrolled-vertically
        (let ((tree (get-client)))
          (let ((row-no (v->row~ tree v)))
            (when row-no
              (let ((row (get-row~ tree row-no)))
                (set! initial-row row-no)
                (selector-down~ row))))))))
  
  
  (method override (drag-move pos)
    (when pos
      (let ((h (- (get-h~ pos) (get-hscroll-amount)))
            (v (- (get-v~ pos) (get-vscroll-amount))))
        (if (not resizing?)
            (let ((col (h->col h)))
              (when col
                (let ((column (get-column col)))
                  (header-move~ column (header-coordinates col pos)))))
          (let ((delta (- h resize-start-h)))
            (let ((width (max (+ resize-start-width delta) min-column-width)))
              (resize-column resized-column width))))
        @wait-buggy-when-resizing-a-column-and-scrolled-vertically
        (when initial-row
          (let ((client (get-client)))
            (let ((row-no (v->row~ client v)))
              (when row-no
                (let ((row (get-row~ client row-no)))
                  (selector-move~ row initial-row)))))))))
  
  
  (method override (drag-up pos . rest)
    (when pos
      (let ((h (- (get-h~ pos) (get-hscroll-amount)))
            (v (- (get-v~ pos) (get-vscroll-amount))))
        (if (not resizing?)
            (unless autofiting?
              (let ((col (h->col h)))
                (when col
                  (let ((column (get-column col)))
                    (header-up~ column (header-coordinates col pos)))))
              @wait-buggy-when-resizing-a-column-and-scrolled-vertically
              (when initial-row
                (let ((tree client))
                  (let ((row (get-row~ tree initial-row)))
                    (selector-up~ row)))))
          (set! resizing? #f)
          (set! resized-column {})
          (set! initial-row {}))
        (release-capture))))
  
  
  (method override (double-click pos)
    (when pos
      (let ((h (- (get-h~ pos) (get-hscroll-amount)))
            (v (get-v~ pos)))
        (let ((col (resized-col h)))
          (if col
              (begin
                (autofit-column (get-column col))
                (set! autofiting? #t))
            (let ((col (h->col h)))
              (when col
                (let ((column (get-column col)))
                  (header-double-click~ column (header-coordinates col pos))))))))))
  
  
  (method (resize-column column width)
    (when (>= width 0)
      (let ((delta (- width (get-width~ column)))
            (left (+ (borders-right (get-borders (column-rank~ (get-client) column))) (get-hscroll-amount))))
        (set-filled-column~ client {})
        (set-width~ column width)
        (invalidate-columns)
        (invalidate-borders)
        (layout-column column)
        (layout-scrollee~ client)
        (invalidate-view)
        (update-view)
        @buggy-when-going-outside-right-edge-of-tree
        (scroll-view delta 0 (new Rect (- left 2) 0 (get-width) (get-height))))))
  
  
  (method (autofit-column column)
    (let ((client (get-client)))
      (let ((tree client)
            (col (column-rank~ client column))
            (max-width 0))
        (for-each-visible-row~ tree
          (lambda (row rank)
            (let ((data (get-child~ row col)))
              (when (is? data Tree-Label)
                (let ((title (get-title~ data)))
                  (when title
                    (let ((width (+ (text-h~ column (get-level~ row))
                                    (text-width~ (get-font~ tree) title)
                                    2)))
                      (when (> width max-width)
                        (set! max-width width)))))))))
        (resize-column column (max max-width min-column-width)))))
  
  
  (method (header-coordinates col pos)
    (point- pos (header-position col)))
  
  
  (method (resized-col h)
    (continuation-capture
      (lambda (return)
        (loop (for borders in (get-columns-borders))
              (for col from 0 below (get-columns-count))
              (bind (left . right) borders
                (when (near? h right 4)
                  (continuation-return return col))))
        {})))
    
  
  ;;;
  ;;;; Headers
  ;;;
  
  
  (method public (invalidate-column-header column)
    (when (get-finished?)
      (let ((rect (header-rect column)))
        (invalidate-rect rect))))
  
  
  (method public (header-rect column)
    (bind (left . right) (get-borders (column-rank column))
      (new Rect left 0 right (get-height))))
  

  ;;;
  ;;;; Coordinates
  ;;;
  
  
  (method (header-position col)
    (new Point (borders-left (get-borders col)) 0))


  (method (h->col h)
    (continuation-capture
      (lambda (return)
        (loop (for borders in (get-columns-borders))
              (for n from 0 below (get-columns-count))
              (bind (left . right) borders
                (when (and (>= h left) (<= h right))
                  (continuation-return return n))))
        {})))))
