;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Tree Node Column
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.ui.tree.Tree-Node-Column jazz


(import (jazz.graphic)
        (jazz.jml)
        (jazz.locale)
        (jazz.ui)
        (jazz.ui.view))


(class Tree-Node-Column extends Tree-Label-Column
  
  
  (property protected controls?          initialize #t  accessors explicit)
  (property protected toplevel-controls? initialize #t  accessors explicit)
  (property protected display-images?    initialize #t  accessors explicit)
  (property protected display-levels?    initialize #t  accessors explicit)
  
  
  (slot image-offset initialize 1)
  
  
  ;;;
  ;;;; Access
  ;;;


  (method public (get-controls?)
    controls?)


  (method public (set-controls? flag)
    (set! controls? flag)
    (invalidate-view~ parent))


  (method public (get-toplevel-controls?)
    toplevel-controls?)


  (method public (set-toplevel-controls? flag)
    (set! toplevel-controls? flag)
    (invalidate-view~ parent))


  (method public (get-display-images?)
    display-images?)


  (method public (set-display-images? flag)
    (set! display-images? flag)
    (invalidate-view~ parent))


  (method public (get-display-levels?)
    display-levels?)


  (method public (set-display-levels? flag)
    (set! display-levels? flag)
    (invalidate-view~ parent))
  
  
  (method public (set-image-offset offset)
    (set! image-offset offset)
    (invalidate-view~ parent))
  
  
  ;;;
  ;;;; Cells
  ;;;
  
  
  (method override (cell-class)
    Tree-Node)
  

  ;;;
  ;;;; Mouse
  ;;;
  
  
  (method override (column-mouse-down cell pos shift? control?)
    (let ((row (get-row~ parent (get-line~ cell))))
      (case (find-part cell pos)
        ((control) (expand/collapse~ parent row))
        ((content) (process-selection~ parent cell shift? control? 'mouse)))))
  
  
  (method override (double-click cell pos)
    (expand/collapse~ parent (get-row~ parent (get-line~ cell))))
  

  ;;;
  ;;;; Parts
  ;;;
  
  
  (method override (find-part cell pos)
    (let ((h (get-h~ pos))
          (v (get-v~ pos))
          (level (get-level~ (get-row~ parent (get-line~ cell)))))
      (let ((base (level-h level)))
        (if (and controls? (or (> level 0) toplevel-controls?) (and (>= h (+ base 4)) (>= v 4) (< h (+ base 13)) (< v 13)))
            'control
          'content))))
  

  ;;;
  ;;;; Text
  ;;;
  
  
  (method protected (row-text-left row)
    (- (text-h (get-level~ row)) 1))
  
  
  (method protected (text-rect row data width height force-node?)
    (let* ((title (localize (get-title~ data)))
           (h (- (text-h (get-level~ row)) 1))
           (max (- width h 2))
           (font (or (get-font~ data) (effective-font~ parent))))
      (let ((extent (text-extent~ font title)))
        (let* ((title-width (get-width~ extent))
               (width (min (if (or force-node? (<= (get-columns-count~ parent) 1)) title-width width) max)))
          (new Rect h 0 (+ h width 4) height)))))
  

  ;;;
  ;;;; Regions
  ;;;
  
  
  (method protected (control-rect row top)
    (let ((h (control-h (get-level~ row))))
      (new Rect (+ h 4) (+ top 4) (+ h 13) (+ top 13))))
  
  
  (method protected (plus/minus-rect row top)
    (let ((h (control-h (get-level~ row))))
      (new Rect (+ h 5) (+ top 5) (+ h 12) (+ top 12))))
  
  
  (method protected (image-rect row top)
    (let ((h (image-h (get-level~ row))))
      (new Rect (+ h 0) (+ top 0) (+ h 16) (+ top 16))))
  
  
  ;;;
  ;;;; Layout
  ;;;
  
  
  (method override (layout-cell row data h v width height)
    (when (is? data View)
      (let ((offset (image-h (get-level~ row))))
        (set-position~ data (new Point (+ h offset) v))
        (set-size~ data (new Dimension (- width offset) height)))))
  
  
  ;;;
  ;;;; Drawing
  ;;;

  
  (method override (draw-data surface context row data width height)
    (draw-background surface context row data width height)
    (draw-level surface row data width height)
    (draw-control surface row data width height)
    (draw-image surface context row data width height)
    (draw-title surface context row data 0 0 width height))
  
  
  (method override (draw-background surface context row data width height)
    (let ((background (or (get-cell-background~ parent) (get-background~ (get-look~ parent)) (or (get-background~ row) {Color Tree-Background}))))
      (let ((cell-rect (new Rect 0 0 width height)))
        (unless (eq? background 'none)
          (fill-rect~ surface cell-rect (if (debug-paint?) (cycle-debug-color!) background)))
        (let ((selected? (getf context selected?:)))
          (if (and selected? (cell-selected? context))
              (let ((rect (text-rect row data width height #f)))
                (let ((background (or (get-background~ (get-look~ parent)) (get-background~ parent))))
                  (when (and background (neq? background 'none))
                    (let ((r (new Rect 0 0 (get-left~ rect) height)))
                      (fill-rect~ surface r background))))
                (fill-rect~ surface rect (selection-color~ parent)))
            (let ((background (get-background~ data)))
              (when background
                (let ((rect (text-rect row data width height #t)))
                  (if (pair? background)
                      (apply (~ gradient-fill surface) rect background)
                    (fill-rect~ surface rect background))))))))
      (let ((frame-color (get-frame-color~ data)))
        (when frame-color
          (let ((rect (text-rect row data width height #t)))
            (frame-rect~ surface rect frame-color))))))
  
  
  (method public (draw-level surface row data width <fx> height <fx>)
    (let ((line-color (or (get-line-color~ (get-look~ parent)) {Color Black})))
      (when (and display-levels? (neq? line-color 'none))
        (set-style~ surface 'alternate)
        (set-color~ surface line-color)
        (set-line-width~ surface 1)
        (let ((level (get-level~ row))
              (row-v (get-v~ (get-position~ row))))
          (loop (for n from level downto 1)
                (let ((h (level-h n))
                      (sf? (visible-sibling-follows?~ row)))
                  (if (/= n level)
                      (when sf?
                        (let ((adjust (if (even? row-v) 0 1)))
                          (line~ surface (+ h 8) adjust (+ h 8) (+ height adjust))))
                    (let* ((half (fxround/ height 2))
                           (top-adjusted (if (even? row-v) 0 -1))
                           (half-adjusted (+ half (if (and (odd? height) (odd? row-v)) 1 0)))
                           (horz-adjusted (+ half-adjusted (if (and (odd? row-v) (even? height)) 1 0))))
                      (line~ surface (+ h 8) top-adjusted (+ h 8) (if sf? height half-adjusted))
                      (line~ surface (+ h 8) horz-adjusted (+ h 19) horz-adjusted)))
                  (set! row (get-father~ row)))))
        (set-style~ surface 'solid)
        (set-color~ surface {Color Black}))))
  
  
  (method protected (draw-control surface row data width height)
    (let* ((look (get-look~ parent))
           (level (get-level~ row))
           (toplevel? (= level 0)))
      (when (and (expandable?~ row) controls? (or (not toplevel?) toplevel-controls?))
        (let ((h (control-h level))
              (line-color (or (get-line-color~ look) {Color Black})))
          (unless (eq? line-color 'none)
            (let ((rect (new Rect (+ h 4) 4 (+ h 13) 13)))
              (frame-rect~ surface rect line-color))
            (let ((background (or (get-background~ look) (get-background~ parent))))
              (when (and background (neq? background 'none))
                (let ((rect (new Rect (+ h 5) 5 (+ h 12) 12)))
                  (fill-rect~ surface rect background))))
            (set-color~ surface line-color)
            (set-line-width~ surface 1)
            (line~ surface (+ h 6) 8 (+ h 11) 8)
            (when (neq? (get-state~ row) 'expanded)
              (line~ surface (+ h 8) 6 (+ h 8) 11)))))))
  
  
  (method (draw-image surface context row data width height)
    (let ((h (image-h (get-level~ row)))
          (image (get-image~ data)))
      (when (and display-images? image)
        (let ((background (or (get-background~ (get-look~ parent)) {Color Tree-Background})))
          (if (or (not background) (eq? background 'none))
              (draw-image~ (get-portfolio~ parent) surface context image h 0)
            (draw-opaque-image~ (get-portfolio~ parent) surface context image background h 0))))))
  
  
  (method override (draw-title surface context row data h v width height)
    (let ((title (localize (or (get-title~ data) ""))))
      (let ((h (text-h (get-level~ row)))
            (v (get-v~ (title-position surface width height title)))
            (font (or (get-font~ data) (effective-font~ parent))))
        (set-font~ surface font)
        (draw-text~ surface h v title (cell-color (get-color~ data) context)))))
  
  
  (method override (header-title-offset look)
    2)
  
  
  (method (level-h level)
    (- (* level (get-indentation~ parent))
       (if (or (= level 0) toplevel-controls?) 0 16)))
  
  
  (method (control-h level)
    (level-h level))
  
  
  (method public (image-h level)
    (+ (control-h level) (if (or (/= level 0) toplevel-controls?) 16 0) (if display-images? image-offset 0)))
  
  
  (method override (content-h level)
    (+ (image-h level) (if display-images? 14 0)))
  
  
  (method override (text-h level)
    (+ (image-h level) (if display-images? 16 0) (if display-images? 3 4)))
  
  
  ;;;
  ;;;; Debugging
  ;;;
  
  
  (method override (get-debugged cell pos)
    (values cell (find-part cell pos)))
  
  
  ;;;
  ;;;; Descriptor
  ;;;
  
  
  (method meta override (get-class-descriptor (context: context #f))
    (new Tree-Node-Descriptor)))


;;;
;;;; Design
;;;


(submodule design


(import (jazz.designer)
        (jazz.library))


(class Tree-Node-Descriptor extends Tree-Label-Descriptor
  
  
  (form
    (<install>                                          image: {Image-Resource "Blue"}
      (<properties~>
        (<Property-Descriptor> name: controls?
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: toplevel-controls?
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: display-images?
          (<Value-Domain>      name: domain))))))))
