;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Tree Rows
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library protected jazz.ui.tree.Tree-Row jazz


(import (jazz.ui)
        (jazz.utilities))


(class Tree-Row extends Outline-Row
  
  
  (property protected user-data initialize {} getter get-user-data  setter set-user-data)
  
  
  (slot protected node-width initialize {} getter generate)
  
  
  (method (default-size)
    {Dimension 100 17})


  ;;;
  ;;;; Initialization
  ;;;


  (method (initialize (parent: parent {}) (father: father {}) (level: level {}) (state: state 'collapsed) (row-height: row-height {}) (children: children '()) (visible?: visible? #t) (user-data: user-data {}))
    (nextmethod)
    (set! parent~self parent)
    (set! father~self father)
    (set! level~self level)
    (set! state~self state)
    (set! row-height~self row-height)
    (set-children children)
    (set! user-data~self user-data)
    (set-installed? #t)
    (set-finished? #t)
    (set-visible-flag visible?))

  
  ;;;
  ;;;; Access
  ;;;
  
  
  (method public (get-tree)
    parent)
  
  
  (method public (get-user-data)
    user-data)
  
  
  (method public (set-user-data data)
    (set! user-data data))
  
  
  ;;;
  ;;;; Children
  ;;;
  
  
  (method (set-children list)
    (when (not-null? list)
      (let ((node (car list)))
        (when (is? node Tree-Node)
          (set! node-width (text-width~ (get-font~ parent) (localize (get-title~ node)))))))
    (for-each (function (child)
                (if (is? child View)
                    (set-parent~ child self)
                  (add-child child)))
              list))
    
  
  (method (replace-child rank child)
    (let ((current (element children rank)))
      (if (is? current View)
          (set-parent~ current {})
        (set! children (remove! current children)))
      (if (is? child View)
          (begin
            (set-parent~ child self)
            (set! children (insert! (remove! child children) rank child)))
        (set! children (insert! children rank child)))
      (layout-scrollee~ parent)))
  
  
  (method public (get-child rank)
    (element children rank))
  
  
  (method public (get-node-child)
    (find-if (function (child)
               (is? child Tree-Node))
             children))
  
  
  (method public (get-path-child)
    (find-if (function (child)
               (is? child Tree-Path))
             children))

  
  ;;;
  ;;;; Flatten
  ;;;
  
  
  (method public (flatten root-row)
    (let ((tree (get-tree)))
      (for-each (function (son)
                  (if (flatten-row?~ tree son)
                      (disconnect~ son)
                    (flatten~ son root-row)))
                sons)))
  
  
  (method public (disconnect)
    (let* ((path (get-path-child))
           (father-row (essay path (get-father-row~ path)))
           (root-row (get-root-row~ (get-tree)))
           (position (son-rank~ root-row (first (get-spine)))))
      (change-father root-row position: position)
      (set-descendants-level 0)))
  
  
  (method public (reconnect)
    (let ((father-row (get-father-row)))
      (set-descendants-level (+ 1 (get-level~ father-row)))
      (change-father father-row)))
  
  
  (method public virtual (disconnected?)
    (let ((father-row (get-father-row)))
      (essay father-row (/= father-row father))))
  
  
  (method public virtual (get-father-row)
    (let ((path (get-path-child)))
      (essay path (get-father-row~ path))))

  
  ;;;
  ;;;; State
  ;;;
  
  
  (method public virtual (auto-collapsable?)
    (collapsable?))
  
  
  ;;;
  ;;;; Layout
  ;;;
  
  
  (method public (layout)
    (let ((tree (get-tree)))
      (when (and tree children)
        (let ((h 0)
              (cs (get-column-spacing~ tree))
              (height (get-effective-height)))
          (for-each (function (column cell)
                      (let ((width (get-width~ column)))
                        (layout-cell~ column self cell h 0 width height)
                        (increase! h (+ width cs))))
                    (get-columns~ tree)
                    children)))))
  
  
  (method (get-effective-width)
    node-width)
  
  
  ;;;
  ;;;; Mouse
  ;;;
  
  
  (method public virtual (context-menu pos)
    )
  
  
  (method public virtual (double-click pos)
    )
  
  
  ;;;
  ;;;; Drawing
  ;;;
  
  
  (method (draw-children surface context lh lv sh sv sc sc?)
    (let* ((h 0)
           (v 0)
           (tree (get-tree))
           (cs (get-column-spacing~ tree))
           (height (get-height)))
      (for-each (function (column cell)
                  (when (get-visible?~ column)
                    (let ((width (get-width~ column)))
                      (if (is-not? cell View)
                          (paint-cell~ column surface context (+ lh h) (+ lv v) h v width height self cell sh sv sc sc?)
                        (when (and (is? cell Tree-Cell-View) (get-draw-preserved?~ cell))
                          (paint-cell~ column surface context (+ lh h) (+ lv v) h v width height self (get-preserved-data~ cell) sh sv sc sc?))
                        (when (is? column Tree-Node-Column)
                          (draw-level~ column surface self cell width height)
                          (draw-control~ column surface self cell width height))
                        (let ((pos (get-position~ cell)))
                          (paint-drawing~ cell surface context (+ lh (get-h~ pos)) (+ lv (get-v~ pos)) sh sv sc sc?)))
                      (increase! h (+ width cs)))))
                (get-columns~ tree)
                children)))
  
  
  (method (draw-selection surface)
    )

  
  ;;;
  ;;;; Content
  ;;;
  
  
  (method public (find-by-title title)
    (find-if (function (row)
               (string=? (get-title~ (first-child~ row)) title))
             sons))
  
  
  ;;;
  ;;;; Auto
  ;;;
  
  
  (method public virtual (auto-inplace?)
    #f)
  
  
  (method public virtual (auto-expand)
    (when (expandable?)
      (expand/collapse~ parent self)))
  
  
  (method public virtual (auto-select)
    )
  
  
  (method public virtual (auto-collapse)
    (when (collapsable?)
      (collapse~ parent self)))))
