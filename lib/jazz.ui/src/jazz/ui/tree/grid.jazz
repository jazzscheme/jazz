;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Grid
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Jeremie Lasalle Ratelle.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module jazz.ui.tree.grid jazz


(import (jazz.graphic)
        (jazz.jml)
        (jazz.library)
        (jazz.system)
        (jazz.ui))


(definition public (call-with-row/column-data row column proc)
  (proc (get-user-data~ row) (get-provider-data~ column)))


;;;
;;;; Data-Provider
;;;


(interface Data-Provider
  
  
  (method public virtual abstract (get-domain row-data column-data))
  (method public virtual abstract (get-data row-data column-data fail succeed))
  (method public virtual abstract (set-data row-data column-data value))
  (method public virtual abstract (read-only? row-data column-data)))


(class Provider-Data extends Component
  
  
  (method override (default-name)
    'provider-data))


;;;
;;;; Grid-Controller
;;;


(interface Grid-Controller
  
  
  (method public virtual abstract (get-focus-actions))
  (method public virtual abstract (focus-update-actions))
  (method public virtual abstract (selection-cell? row column))
  (method public virtual abstract (get-context-menu))
  (method public virtual abstract (on-selection-change evt))
  (method public virtual abstract (get-tab-stops))
  (method public virtual abstract (copy-selection))
  (method public virtual abstract (cut-selection))
  (method public virtual abstract (delete-selection))
  (method public virtual abstract (paste-clipboard))
  (method public virtual abstract (can-copy?))
  (method public virtual abstract (can-cut?))
  (method public virtual abstract (can-delete?))
  (method public virtual abstract (can-paste?))
  (method public virtual abstract (cell-editable? row column))
  (method public virtual abstract (merge? master-row-data row-data column-data))
  (method public virtual abstract (grid-populate))
  (method public virtual abstract (get-domain row column))
  (method public virtual abstract (get-data row column))
  (method public virtual abstract (set-data row column value)))
  

;;;
;;;; Grid-Column
;;;


(class Grid-Tree-Column extends Tree-Label-Column
  
  
  (form
    (<install> justification: (1 1)))
  
  
  (method (get-provider-data)
    (child 'provider-data))
  
  
  (method override (draw-data surface context row data width height)
    (let ((provider (get-provider~ parent)))
      (call-with-row/column-data row self
        (lambda (row-data column-data)
          (get-data~ provider row-data column-data
            (lambda ()
              (nextmethod surface context row data width height))
            (lambda (value)
              (let ((domain (get-domain~ provider row-data column-data)))
                (draw-data~ domain surface context value self row data width height)))))))))


;;;
;;;; Grid-Tree
;;;


(class Grid-Tree extends Tree-View
  
  
  (form
    (<install> default-row-height: 15 row-spacing: 1 column-spacing: 1 background: {Color Medium-Gray} empty-background: {Color Medium-Gray} multiple-selection?: #t filled-column: #f selection-mode: cell selection-handler: {Event-Handler :self on-selection-change}))
  
  
  (method (get-provider)
    (child 'provider))
  
  
  (method (get-controller)
    (child 'controller))
  
  
  (method virtual (get-widget)
    (find-ascendant Grid-Tree-Widget))
  
  
  (method override (focus-actions)
    (let ((actions (get-focus-actions~ (get-controller))))
      (if actions
          (cons actions (nextmethod))
        (nextmethod))))
  
  
  (method override (focus-update-actions)
    (focus-update-actions~ (get-controller)))
  
  
  (method (selected-cells-data)
    (let ((cells (remove-duplicates (get-selection) test: cell=?)))
      (values (map (compose* get-user-data~ get-row get-line~) cells)
              (map (compose* get-provider-data~ get-column get-col~) cells))))
  
  
  (method (cell-data-values cell)
    (receive (row column) (cell-values cell)
      (values (get-user-data~ row) (get-provider-data~ column))))
  
  
  ;;;
  ;;;; Handlers
  ;;;
  
  
  (method override (mouse-down view)
    (let ((cell (view->tree view)))
      (when cell
        (end-edition)
        (receive (row column) (cell-values cell)
          (if (selection-cell?~ (get-controller) row column)
              (nextmethod view)
            (select-cell cell))))))
  
  
  (method override (context-menu pos)
    (with-context-click pos
      (lambda ()
        (let ((menu (get-context-menu~ (get-controller))))
          (when menu
            (track-popup-menu menu pos))))))
  
  
  (method (on-selection-change evt)
    (on-selection-change~ (get-controller) evt)
    (update-focus-actions~ (get-application)))
  
  
  (method (editor-arrow-press tab-view evt)
    (let* ((text? (is? tab-view Text-View))
           (next-move (dispatch (class-of tab-view) (if text? 'arrow-move 'arrow-press))))
      (let ((direction (get-property~ evt direction:))
            (internal? (if text? (not (get-property~ evt word?:)) (get-control?~ evt))))
        (case direction
          ((left)  (if internal? (next-move evt) (select-left edited-cell)))
          ((right) (if internal? (next-move evt) (select-right edited-cell)))
          ((up)    (select-up edited-cell))
          ((down)  (select-down edited-cell))))))
  
  
  (method override (arrow-press evt)
    (define (select-direction next-cell)
      (let ((cell (next-cell (get-single-selection))))
        (when cell
          (select-cell cell))))
    
    (let ((direction (get-property~ evt direction:)))
      (select-direction (case direction
                          ((left)  cell-left)
                          ((right) cell-right)
                          ((up)    cell-up)
                          ((down)  cell-down)))))
  
  
  (method (editor-return-press tab-view evt)
    (on-tab-press~ tab-view evt))
  
  
  (method override (navigate-tab from backward?)
    (let ((stops (get-tab-stops)))
      (if (not-null? stops)
          (if (eq? from (get-creator))
              (let ((cell (if backward?
                              (last stops)
                            (first stops))))
                (when cell
                  (when (eq? cell from)
                    (set! cell (navigated-view cell backward?)))
                  (if (is? cell Cell)
                      (select-cell cell)
                    (navigate-tab~ cell self backward?))))
            (let ((sel (navigated-view (car (get-selection)) backward? test: cell=?)))
              (if (and sel (is? sel Cell))
                  (select-cell sel)
                (navigate-tab~ sel self backward?))))
        (nextmethod from backward?))))
  
  
  (method override (get-tab-stops)
    (get-tab-stops~ (get-controller)))
  
  
  ;;;
  ;;;; Copy
  ;;;
  
  
  (method override (copy-selection)
    (copy-selection~ (get-controller)))
  
  
  (method override (cut-selection)
    (cut-selection~ (get-controller)))
  
  
  (method override (delete-selection)
    (delete-selection~ (get-controller)))
  
  
  (method override (paste-clipboard)
    (paste-clipboard~ (get-controller)))
  
  
  (method override (can-copy?)
    (can-copy?~ (get-controller)))
  
  
  (method override (can-cut?)
    (can-cut?~ (get-controller)))
  
  
  (method override (can-paste?)
    (can-paste?~ (get-controller)))
  
  
  (method override (can-delete?)
    (can-delete?~ (get-controller)))
  
  
  ;;;
  ;;;; Edition
  ;;;
  
  
  (method (prepare-and-focus-entry entry)
    (let ((view-to-focus (tab-view~ entry)))
      (set-arrow-press-handler~ view-to-focus (new Event-Handler execute: (lambda (evt) (editor-arrow-press view-to-focus evt))))
      (set-return-press-handler~ view-to-focus (new Event-Handler execute: (lambda (evt) (editor-return-press view-to-focus evt))))
      (acquire-focus~ view-to-focus)
      (select-all~ view-to-focus)))
  
  
  (method virtual (new-editor)
    (new Border-View border-type: 'edge style: 'entry))
  
  
  (method virtual (setup-entry editor domain)
    (setup-entry~ domain editor #f))
  
  
  (method override (select-cell cell)
    (let ((provider (get-provider)))
      (receive (row-data column-data) (cell-data-values cell)
        (acquire-focus)
        (set-single-selection cell)
        (unless (read-only?~ provider row-data column-data)
          (get-data~ provider row-data column-data
            (const #f)
            (lambda (value)
              (let ((domain (get-domain~ provider row-data column-data))
                    (editor (new-editor)))
                (let* ((entry (setup-entry editor domain))
                       (after-end (lambda (cell)
                                    (receive (row-data column-data) (cell-data-values cell)
                                      (when (get-modified?~ entry)
                                        (set-data~ provider row-data column-data (get-value~ entry)))))))
                  (set-value~ entry value)
                  (edit-cell cell editor: editor close-editor?: #f after-end: after-end)
                  (prepare-and-focus-entry entry)))))))))
  
  
  (method (populate proc)
    (remove-every-row)
    (with-update-locked proc)
    (merge-grid-cells)
    (update-highlight))
  
  
  ;;;
  ;;;; Highlight
  ;;;
  
  
  (method virtual (update-frame-highlight)
    (set-border-color~ (get-widget) (get-frame-color~ (get-controller))))
  
  
  (method virtual (update-cell-highlight tree-data cell)
    (receive (row-data column-data) (cell-data-values cell)
      (let ((current-color (get-frame-color~ tree-data))
            (color (get-cell-color~ (get-controller) row-data column-data)))
        (unless (eq? current-color color)
          (set-frame-color~ tree-data color)
          (invalidate-cell cell)))))
  
  
  (method virtual (get-editor-widget editor)
    (find-ascendant~ child Border-View))
  
      
  (method virtual (update-editor-highlight tree-data cell)
    (let ((border (get-editor-widget (get-editor~ tree-data))))
      (receive (row-data column-data) (cell-data-values cell)
        (let ((current-color (get-border-color~ border))
              (color (get-editor-color~ (get-controller) row-data column-data)))
          (unless (eq? current-color color)
            (set-border-color~ border color))))))
  
  
  (method (update-cells-hightlight)
    (for-each-visible-row
      (lambda (row line)
        (for-each-column
          (lambda (column col)
            (let ((tree-data (get-child~ row col))
                  (cell (new Cell line col)))
              (typecase child
                ((Tree-Label)
                 (update-cell-highlight tree-data cell))
                ((Tree-Data-View)
                 (update-editor-highlight tree-data cell)))))))))
          
  
  
  (method (update-highlight)
    (update-frame-highlight)
    (update-cells-hightlight))
  
  
  ;;;
  ;;;; Merge cells
  ;;;
  
  (method (merge-column-cells column col)
    (let (iterate-master-rows (master (get-next~ (get-root-row))))
      (when master
        (let (iterate-rows (current (get-next~ master)) (to-merge 0))
          (if (and current (merge?~ (get-controller) (get-user-data~ master) (get-user-data~ current) (get-provider-data~ column)))
              (iterate-rows (get-next~ current) (+ to-merge 1))
            (let ((cell (new Cell (row->line master) col)))
              (merge-cells cell (+ to-merge 1) 1)
              (iterate-master-rows current)))))))
  
  
  (method (merge-grid-cells)
    (for-each-column merge-column-cells))
  
  
  (method (update-cell cell update)
    (let ((label (if (and edited-cell (cell=? cell edited-cell)) (get-preserved-data~ cell-editor) (get-cell-data cell))))
      (receive (row column) (cell-values cell)
        (update row column label)
        (invalidate-cell cell)))))


(class Grid-Tree-Widget extends Border-View
  
  
  (form
    (<install>                                         border-type: edge style: entry
      (<Scroller-View>              name: scroller     style: document vscroll?: #t hscroll?: #t
        (<content~>                                    layout-type: fill
          (<Tree-Header>            name: grid-header  style: document @a (background: {Color Medium-Gray} empty-background: {Color Medium-Gray})
            (<content~>
              (<Grid-Tree>          name: grid)))))))))
