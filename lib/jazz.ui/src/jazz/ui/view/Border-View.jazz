;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Border Views
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.ui.view.Border-View jazz


(import (jazz.geometry)
        (jazz.graphic)
        (jazz.markup)
        (jazz.skin)
        (jazz.ui)
        (jazz.view))


(class Border-View extends Layout-View

  
  ;; none edge raised palette shadow solid
  (property border-type   initialize 'solid         accessors explicit)
  (property border-color  initialize {Color Black}  accessors explicit)
  (property border-insets initialize {Rect 1 1 1 1} accessors explicit)
  (property border-sides  initialize 'all           accessors explicit)


  (form
    (<install> layout-type: fill))
  
  
  (method override (mouse-activate? self)
    #f)

  
  ;;;
  ;;;; Access
  ;;;
  
  
  (method public (get-border-type self)
    border-type)
  
  
  (method public (set-border-type self type)
    (set! border-type type)
    (recalculate-border-insets self)
    (invalidate-borders self))
  
  
  (method public (get-border-color self)
    border-color)
  
  
  (method public (set-border-color self color)
    (set! border-color color)
    (invalidate-borders self))
  
  
  (method public (get-border-insets self)
    border-insets)
  
  
  (method public (set-border-insets self insets)
    (set! border-insets insets)
    (layout-view self))
  
  
  (method protected virtual (recalculate-border-insets self)
    (case border-type
      ((none) (set-border-insets self {Rect 0 0 0 0}))
      ((solid) (set-border-insets self {Rect 1 1 1 1}))
      ((edge raised palette) (set-border-insets self (case style ((entry) {Rect 1 1 1 1}) (else {Rect 2 2 2 2}))))
      ((shadow) (set-border-insets self {Rect 1 1 3 3}))))
  
  
  (method public (get-border-sides self)
    border-sides)
  
  
  (method public (set-border-sides self sides)
    (set! border-sides sides)
    (invalidate-borders self))
  
  
  ;;;
  ;;;; Style
  ;;;

  
  (method override (style-update self)
    (recalculate-border-insets self))

  
  ;;;
  ;;;; Client
  ;;;


  (method override (add-child self child)
    (nextmethod self child)
    (when (is? child View)
      (layout-view self)))
  

  ;;;
  ;;;; Layout
  ;;;
  
  
  (method override (fill-position self)
    (+ (nextmethod self)
       (new Point (get-left border-insets) (get-top border-insets))))
  
  
  (method override (fill-size self)
    (- (nextmethod self)
       (new Dimension
         (+ (get-left border-insets) (get-right border-insets))
         (+ (get-top border-insets) (get-bottom border-insets)))))
  
  
  ;;;
  ;;;; Widget
  ;;;
  
  
  (method override (inner? self view)
    (memq? view children))
  
  
  (method override (inner-widget self)
    (let ((view (first-view self)))
      (if (and (eq? layout-type 'fill)
               view)
          (inner-widget view)
        self)))
  
  
  ;;;
  ;;;; Invalidate
  ;;;
  
  
  (method (invalidate-borders self)
    (invalidate-border self insets: border-insets))
  

  ;;;
  ;;;; Drawing
  ;;;

  
  (method override (draw self surface context)
    (define (standardize-sides)
      (listify border-sides))
    
    (let ((bounds (get-bounds self)))
      (if (not (view-enabled? self))
          (frame-rect surface bounds {Color Dark})
        (case border-type
          ((none))
          ((solid)
           (when border-color
             (case border-sides
               ((none))
               ((all) (frame-rect surface bounds border-color))
               (else (frame-partial-rect surface bounds (standardize-sides) border-color)))))
          ((edge)
           (let ((skin (get-skin self)))
             (cond ((and (eq? style 'entry) (get-edge-flat? skin))
                    (frame-rect surface bounds {Color Entry-Border}))
                   ((and (eq? style 'outline) (get-edge-flat? skin))
                    (let ((inner (inflate-rect bounds -1 -1)))
                      (frame-rect surface inner {Color Outline-Border})))
                   (else
                    (draw-edge surface bounds outer: 'sunken inner: (case (get-left border-insets) ((1) #f) ((2) 'sunken)) edges: 'rectangle)))))
          ((raised)
           (draw-edge surface bounds inner: 'raised outer: 'raised edges: 'rectangle))
          ((shadow)
           (let ((inner (expand-rect bounds 0 0 (- 1 (get-right border-insets)) (- 1 (get-bottom border-insets)))))
             (frame-rect surface inner border-color)
             (set-color surface {Color Black})
             (set-line-width surface 1)
             (line surface (get-right inner) 2 (get-right inner) (get-bottom bounds))
             (line surface (+ (get-right inner) 1) 2 (+ (get-right inner) 1) (get-bottom bounds))
             (line surface 2 (get-bottom inner) (get-right bounds) (get-bottom inner))
             (line surface 2 (+ (get-bottom inner) 1) (get-right bounds) (+ (get-bottom inner) 1))))))))
  
  
  (method override (draw-children self surface nodes context)
    (nextmethod self surface nodes context)
    (case border-type
      ((palette)
       (let ((bounds (get-bounds self)))
         (draw-edge surface bounds outer: 'sunken inner: 'raised edges: '(top))))))
  
  
  ;;;
  ;;;; Skin
  ;;;
  
  
  (method override (get-skin self)
    (case style
      ((entry) (find-skin 'ui:border/entry))
      ((outline) (find-skin 'ui:border/outline))))
  
  
  ;;;
  ;;;; Descriptor
  ;;;
  
  
  (method meta override (get-class-descriptor self (context: context #f))
    (new jazz.ui.descriptors:Border-View-Descriptor))))
