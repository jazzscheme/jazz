;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Border Views
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.ui.view.Border-View jazz


(import (jazz.geometry)
        (jazz.graphic)
        (jazz.designer)
        (jazz.jml)
        (jazz.library)
        (jazz.ui)
        (jazz.ui.skin))


(class Border-View extends Layout-View

  
  ;; none edge raised palette shadow solid
  (property border-type   initialize 'solid              accessors explicit)
  (property border-color  initialize {Color name: Black} accessors explicit)
  (property border-insets initialize {Rect 1 1 1 1}      accessors explicit)
  (property style         initialize #f                  accessors explicit)


  (form
    (<install> layout-type: fill))

  
  ;;;
  ;;;; Access
  ;;;
  
  
  (method public (get-border-type)
    border-type)
  
  
  (method public (set-border-type type)
    (set! border-type type)
    (recalculate-border-insets)
    (invalidate-borders))
  
  
  (method public (get-border-color)
    border-color)
  
  
  (method public (set-border-color color)
    (set! border-color color)
    (invalidate-borders))
  
  
  (method public (get-border-insets)
    border-insets)
  
  
  (method public (set-border-insets insets)
    (set! border-insets insets)
    (layout-view))


  (method public (get-style)
    style)


  (method public (set-style value)
    (set! style value)
    (recalculate-border-insets))
  
  
  (method protected virtual (recalculate-border-insets)
    (case border-type
      ((none) (set-border-insets {Rect 0 0 0 0}))
      ((edge raised palette) (set-border-insets (case style ((entry) {Rect 1 1 1 1}) (else {Rect 2 2 2 2}))))
      ((shadow) (set-border-insets {Rect 1 1 3 3}))))

  
  ;;;
  ;;;; Client
  ;;;


  (method override (add-child child)
    (nextmethod child)
    (when (is? child View)
      (layout-view)))
  

  ;;;
  ;;;; Layout
  ;;;
  
  
  (method override (fill-position)
    (+ (nextmethod)
       (new Point (get-left~ border-insets) (get-top~ border-insets))))
  
  
  (method override (fill-size)
    (- (nextmethod)
       (new Dimension
         (+ (get-left~ border-insets) (get-right~ border-insets))
         (+ (get-top~ border-insets) (get-bottom~ border-insets)))))
  
  
  ;;;
  ;;;; Outer
  ;;;
  
  
  (method override (inner? view)
    (memq? view children))
  
  
  ;;;
  ;;;; Invalidate
  ;;;
  
  
  (method (invalidate-borders)
    (invalidate-border insets: border-insets))
  

  ;;;
  ;;;; Drawing
  ;;;

  
  (method override (draw surface context lh lv)
    (let ((bounds (get-bounds)))
      (if (not (view-enabled?))
          (frame-rect~ surface bounds {Color name: Dark})
        (case border-type
          ((none)
           (unspecified))
          ((solid)
           (when border-color
             (frame-rect~ surface bounds border-color)))
          ((edge)
           (let ((skin (view-skin)))
             (cond ((and (eq? style 'entry) (get-edge-flat?~ skin))
                    (frame-rect~ surface bounds {Color name: Entry-Border}))
                   ((and (eq? style 'outline) (get-edge-flat?~ skin))
                    (let ((inner (inflate-rect bounds -1 -1)))
                      (frame-rect~ surface inner {Color name: Outline-Border})))
                   (else
                    (draw-edge~ surface bounds outer: 'sunken inner: (case (get-left~ border-insets) ((1) #f) ((2) 'sunken)) edges: 'rectangle)))))
          ((raised)
           (draw-edge~ surface bounds inner: 'raised outer: 'raised edges: 'rectangle))
          ((shadow)
           (let ((inner (expand-rect bounds 0 0 (- 1 (get-right~ border-insets)) (- 1 (get-bottom~ border-insets)))))
             (frame-rect~ surface inner border-color)
             (set-color~ surface {Color name: Black})
             (set-line-width~ surface 1)
             (line~ surface (get-right~ inner) 2 (get-right~ inner) (get-bottom~ bounds))
             (line~ surface (+ (get-right~ inner) 1) 2 (+ (get-right~ inner) 1) (get-bottom~ bounds))
             (line~ surface 2 (get-bottom~ inner) (get-right~ bounds) (get-bottom~ inner))
             (line~ surface 2 (+ (get-bottom~ inner) 1) (get-right~ bounds) (+ (get-bottom~ inner) 1))))))))
  
  
  (method override (draw-children surface nodes context lh lv sh sv sc sc?)
    (nextmethod surface nodes context lh lv sh sv sc sc?)
    (case border-type
      ((palette)
        (let ((bounds (get-bounds)))
          (draw-edge~ surface bounds outer: 'sunken inner: 'raised edges: '(top))))))
  
  
  ;;;
  ;;;; Skin
  ;;;
  
  
  (method override (view-skin)
    (case style
      ((entry) (find-skin 'border/entry))
      ((outline) (find-skin 'border/outline))))
  
  
  ;;;
  ;;;; Descriptor
  ;;;
  
  
  (method meta override (get-class-descriptor)
    (new Border-View-Descriptor)))


;;;
;;;; Design
;;;


(submodule design


(import (jazz.designer))

(class Border-Type-Domain extends Enumeration-Domain

  (definition Choices
    '((none    "None")
      (solid   "Solid")
      (edge    "Edge")
      (raised  "Raised")
      (palette "Palette")
      (shadow  "Shadow")))
  
  (method override (finish rest)
    (nextmethod rest)
    (set-choices Choices)))

(register-autoclass Border-Type-Domain)

(class Border-View-Descriptor extends Layout-View-Descriptor
  
  (form
    (<install>
      (<properties~>
        (<Property-Descriptor>  name: border-type   title: "Border Type"
          (<Border-Type-Domain> name: domain))
        (<Property-Descriptor>  name: border-color  title: "Border Color"
          (<Color-Domain>       name: domain))
        (<Property-Descriptor>  name: border-insets title: "Border Insets")
        (<Property-Descriptor>  name: style         title: "Style"))))
  
  )))
