;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Check Boxes
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.ui.view.Check-Box jazz


(import (jazz.geometry)
        (jazz.graphic)
        (jazz.locale)
        (jazz.platform)
        (jazz.skin)
        (jazz.tree)
        (jazz.ui)
        (jazz.view))


(class Check-Box extends View
  
  
  (definition box-size
    13)
  
  
  (property checked?    initialize #f            accessors explicit)
  (property selectable? initialize #f            accessors generate)
  (property editable?   initialize #t            accessors generate)
  (property color       initialize {Color Black} accessors explicit)
  (property flat?       initialize #f            accessors generate)
  
  
  (slot tracking? initialize #f)
  (slot inside?   initialize #f)
  
  
  (method override (default-size self)
    {Dimension 100 16})
  
  
  (method override (get-sort-value self)
    (localize title))
  
  
  ;;;
  ;;;; Access
  ;;;


  (method public (get-checked? self)
    checked?)
  

  (method public (set-checked? self flag)
    (set! checked? flag)
    (call-content-change self #f)
    (invalidate-view self))


  (method public (get-color self)
    color)


  (method public (set-color self value)
    (set! color value)
    (invalidate-view self))
  
  
  ;;;
  ;;;; State
  ;;;
  
  
  (method package virtual (change-state self reverse?)
    (set-checked? self (not checked?)))
  
  
  (method (process-change-state self)
    (change-state self (shift-down?))
    (set-modified? self #t)
    (if (not outline-view)
        (process-action self self)
      (process-action outline-view self)))
  
  
  ;;;
  ;;;; Regions
  ;;;
  
  
  (method package (text-extent self)
    (let ((title (localize title)))
      (text-extent (effective-font self) title)))
  
  
  (method (box-rect self)
    (let* ((title (localize title))
           (extent (if title (text-extent self) #f))
           ;; quicky
           (center? (not extent))
           (h (if center? (quotient (- (get-width self) box-size) 2) 0))
           (v (quotient (- (get-height self) (if extent (get-height extent) box-size)) 2)))
      (new Rect h v (+ h box-size) (+ v box-size))))
  
  
  ;;;
  ;;;; Drawing
  ;;;
  
  
  (method override (draw self surface context)
    (define (effective-selected?)
      (if (not outline-view)
          (getf context selected?:)
        (cell-selected? (outline-column self) context)))
    
    (let* ((title (localize title))
           (extent (if title (text-extent self) #f))
           ;; quicky
           (center? (not extent))
           (box-h (if center? (quotient (- (get-width self) box-size) 2) 0))
           (box-v (quotient (- (get-height self) (if extent (get-height extent) box-size)) 2))
           (box-rect (new Rect box-h box-v (+ box-h box-size) (+ box-v box-size)))
           (enabled? (view-enabled? self))
           (grayed? (or (not enabled?) (and tracking? inside?))))
      (unless flat?
        (draw-edge surface box-rect inner: 'sunken outer: 'sunken edges: 'rectangle))
      (fill-rect surface (inflate-rect box-rect -2 -2) (if grayed? {Color Medium} {Color White}))
      (draw-check self surface (+ 3 box-h) (+ 3 box-v) grayed?)
      (when title
        (let ((selected? (effective-selected?))
              (text-h (+ 18 box-h))
              (text-v box-v))
          (when selected?
            (let ((color (if (is? outline-view Tree-View) (selection-color outline-view) {Color Focused-Selection}))
                  (rect
                   (if (and (is? outline-view Tree-View) (eq? (get-selection-mode outline-view) 'cell))
                       (new Rect (- text-h 3) (- text-v 2) (get-width self) (+ text-v (get-height extent) 2))
                     (new Rect (- text-h 3) (- text-v 2) (+ text-h (get-width extent) 3) (+ text-v (get-height extent) 2)))))
              (fill-rect surface rect color)))
          (set-font surface (effective-font self))
          (draw-text surface text-h text-v title (text-color self selected?)
            enabled?: (or enabled? selected?))))))
  
  
  (method package virtual (draw-check self surface h v grayed?)
    (when checked?
      (set-color surface (if grayed? {Color Dark} {Color Black}))
      (draw-check surface h v)))
  
  
  ;;;
  ;;;; Skin
  ;;;
  
  
  (method override (get-skin self)
    (find-skin 'ui:check))
  
  
  (method (text-color self selected?)
    (let ((skin (get-skin self)))
      (or (get-text-color skin)
          (determine-color color enabled? selected?)
          {Color White})))


  ;;;
  ;;;; Focus
  ;;;


  (method override (focus-gained self)
    (nextmethod self)
    (when outline-view
      (focus-gained outline-view)))


  (method override (focus-lost self)
    (nextmethod self)
    (when outline-view
      (focus-lost outline-view)))
  
  
  ;;;
  ;;;; Keyboard
  ;;;
  
  
  (method override (key-press self evt)
    (case (get-key evt)
      ((#\space)
       (process-change-state self))
      (else
       (when outline-view
         (call-key-press outline-view evt)))))
  
  
  (method override (arrow-press self evt)
    (when outline-view
      (call-arrow-press outline-view evt)))
  
  
  (method override (return-press self evt)
    (when outline-view
      (call-return-press outline-view evt)))
  
  
  (method override (escape-press self evt)
    (when outline-view
      (call-escape-press outline-view evt)))
  
  
  ;;;
  ;;;; Mouse
  ;;;
  
  
  (method override (mouse-down self evt)
    (when outline-view
      (outline-select self))
    (when (and (view-enabled? self) editable? (or (not outline-view) (in-rect? (get-position evt) (box-rect self))))
      (set! tracking? #t)
      (set! inside? #t)
      (acquire-capture self)
      (invalidate-view self)))
  
  
  (method override (drag-move self evt)
    (when tracking?
      (let ((over? (over-view? self (get-position evt))))
        (when (neq? over? inside?)
          (set! inside? over?)
          (invalidate-view self)))))
  
  
  (method override (drag-up self evt . rest)
    (when tracking?
      (release-capture self)
      (set! tracking? #f)
      (when inside?
        (when selectable?
          (acquire-focus self))
        (process-change-state self))))
  
  
  ;;;
  ;;;; Descriptor
  ;;;
  
  
  (method meta override (get-class-descriptor self (context: context #f))
    (new jazz.ui.descriptors:Check-Box-Descriptor))))
