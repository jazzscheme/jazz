;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Color Choose
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.ui.view.Color-Choose jazz


(import (jazz.application)
        (jazz.graphic)
        (jazz.handler)
        (jazz.markup)
        (jazz.ui)
        (jazz.view))


;;;
;;;; Color-Choose
;;;


(class Color-Choose extends Layout-View
  
  
  (property color    <void>               accessors explicit)
  (property feedback        initialize #f accessors generate)
  (property symbolize?      initialize #t accessors generate)
  
  
  (form
    (<install>                            return-press-handler: {Event-Handler :form on-return-press}
      (<Hue-View>        name: hue        position: {Point  10  10} size: {Dimension 410  50})
      (<Saturation-View> name: saturation position: {Point  10  70} size: {Dimension 200  30})
      (<Value-View>      name: value      position: {Point 220  70} size: {Dimension 200  30})
      (<Color-View>      name: color      position: {Point 430  13} size: {Dimension  85  85})))
  
  
  (method override (finish self initargs)
    (nextmethod self initargs)
    (when (not (get-value (locate self 'hue)))
      (set-color self (hsv->color 0. 1. 1.))))
  
  
  ;;;
  ;;;; Events
  ;;;
  
  
  ;; quicky
  (method override (on-escape-press self evt)
    (if escape-press-handler
        (call-escape-press self evt)
      (close-popups (current-toplevel))))
  
  
  ;;;
  ;;;; Color
  ;;;
  
  
  (method public (get-color self)
    (hsv->color (get-hue self)
                (get-saturation self)
                (get-value self)))
  
  
  (method public (set-color self value)
    (when value
      (receive (h s v) (color->hsv value)
        (set-value (locate self 'hue) h)
        (set-value (locate self 'saturation) s)
        (set-value (locate self 'value) v))
      (update self)))
  
  
  (method package (get-hue self)
    (get-value (locate self 'hue)))
  
  (method package (get-saturation self)
    (get-value (locate self 'saturation)))
  
  (method package (get-value self)
    (get-value (locate self 'value)))
  
  
  (method package (update self)
    (invalidate-view (locate self 'hue))
    (invalidate-view (locate self 'saturation))
    (invalidate-view (locate self 'value))
    (let ((color (get-color self)))
      (set-background (locate self 'color) color)
      (when feedback
        (update-view self)
        (feedback color)))))


;;;
;;;; Slider-View
;;;


(class Slider-View extends View
  
  
  (slot reticule <fl> initialize #f)
  (slot value    <fl> initialize #f)
  
  
  ;;;
  ;;;; Value
  ;;;
  
  
  (method public (get-reticule self)
    reticule)
  
  
  (method public (set-reticule self r <fl>)
    (set! reticule (cast <fl> (between 0 r (reticule-max self))))
    (set! value (cast <fl> (reticule->value self reticule))))
  
  
  (method public (get-value self)
    value)
  
  
  (method public (set-value self v <fl>)
    (set-reticule self (value->reticule self v)))
  
  
  (method protected (value->reticule self value)
    (/ (* value (reticule-span self)) (value-max self)))
  
  
  (method protected (reticule->value self reticule)
    (/ (* reticule (value-max self)) (reticule-span self)))
  
  
  (method protected (reticule-span self)
    (- (cast <fl> (get-width self)) 6.))
  
  
  (method protected (reticule-max self)
    (- (reticule-span self) 1.))
  
  
  (method protected virtual (value-max self)
    )
  
  
  ;;;
  ;;;; Mouse
  ;;;
  
  
  (method override (mouse-down self evt)
    (acquire-capture self)
    (set-reticule self (pos->reticule (get-position evt)))
    (update parent))
  
  
  (method override (drag-move self evt)
    (set-reticule self (pos->reticule (get-position evt)))
    (update parent))
  
  
  (method override (drag-up self evt . rest)
    (release-capture self))
  
  
  (definition (pos->reticule pos)
    (- (cast <fl> (get-h pos)) 3.))
  
  
  ;;;
  ;;;; Draw
  ;;;
  
  
  (method (draw-reticule self surface)
    (when reticule
      (let ((height (get-height self)))
        (set-color surface {Color Black})
        (set-line-width surface 1)
        (line surface (+ reticule 3) 3 (+ reticule 3) (- height 3))
        (draw-arrow-tip surface (+ reticule 1) 0 3 'down)
        (draw-arrow-tip surface (+ reticule 1) (- height 3) 3 'up)))))


;;;
;;;; Hue-View
;;;


(class Hue-View extends Slider-View
  
  
  ;;;
  ;;;; Value
  ;;;
  
  
  (method override (value-max self)
    360)
  
  
  ;;;
  ;;;; Draw
  ;;;
  
  
  (method override (draw self surface context)
    (let ((height (get-height self))
          (s (get-saturation parent))
          (v (get-value parent)))
      (loop (for r <fl> from 0. to (reticule-max self))
            (do (let ((h (reticule->value self r)))
                  (let ((color (hsv->color h s v))
                        (r (fxround r)))
                    (fill-rect surface (new Rect (+ r 3) 3 (+ r 4) (- height 3)) color))))))
    (draw-reticule self surface)))


;;;
;;;; Saturation-View
;;;


(class Saturation-View extends Slider-View
  
  
  ;;;
  ;;;; Value
  ;;;
  
  
  (method override (value-max self)
    1)
  
  
  ;;;
  ;;;; Draw
  ;;;
  
  
  (method override (draw self surface context)
    (let ((height (get-height self))
          (h (get-hue parent))
          (v (get-value parent)))
      (loop (for r <fl> from 0. to (reticule-max self))
            (do (let ((s (reticule->value self r)))
                  (let ((color (hsv->color h s v))
                        (r (fxround r)))
                    (fill-rect surface (new Rect (+ r 3) 3 (+ r 4) (- height 3)) color))))))
    (draw-reticule self surface)))


;;;
;;;; Value-View
;;;


(class Value-View extends Slider-View
  
  
  ;;;
  ;;;; Value
  ;;;
  
  
  (method override (value-max self)
    1)
  
  
  ;;;
  ;;;; Draw
  ;;;
  
  
  (method override (draw self surface context)
    (let ((height (get-height self))
          (h (get-hue parent))
          (s (get-saturation parent)))
      (loop (for r <fl> from 0. to (reticule-max self))
            (do (let ((v (reticule->value self r)))
                  (let ((color (hsv->color h s v))
                        (r (fxround r)))
                    (fill-rect surface (new Rect (+ r 3) 3 (+ r 4) (- height 3)) color))))))
    (draw-reticule self surface)))


;;;
;;;; Color-View
;;;


(class Color-View extends View))
