;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Color Choose
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.ui.view.Color-Choose jazz


(import (jazz.application)
        (jazz.graphic)
        (jazz.handler)
        (jazz.jml)
        (jazz.ui))


;;;
;;;; Color-Choose
;;;


(class Color-Choose extends Layout-View
  
  
  (property color    <void>               accessors explicit)
  (property feedback        initialize #f accessors generate)
  (property symbolize?      initialize #t accessors generate)
  
  
  (form
    (<install>                            return-press-handler: {Event-Handler :form on-return-press}
      (<Hue-View>        name: hue        position: {Point  10  10} size: {Dimension 410  50})
      (<Saturation-View> name: saturation position: {Point  10  70} size: {Dimension 200  30})
      (<Value-View>      name: value      position: {Point 220  70} size: {Dimension 200  30})
      (<Color-View>      name: color      position: {Point 430  13} size: {Dimension  85  85})))
  
  
  (method override (finish initargs)
    (nextmethod initargs)
    (when (not (get-value~ (locate 'hue)))
      (set-color (hsv->color 0. 1. 1.))))
  
  
  ;;;
  ;;;; Events
  ;;;
  
  
  ;; quicky
  (method override (on-escape-press evt)
    (if escape-press-handler
        (call-escape-press evt)
      (close-popups~ (get-toplevel))))
  
  
  ;;;
  ;;;; Color
  ;;;
  
  
  (method public (get-color)
    (hsv->color (get-hue)
                (get-saturation)
                (get-value)))
  
  
  (method public (set-color value)
    (when value
      (receive (h s v) (color->hsv value)
        (set-value~ (locate 'hue) h)
        (set-value~ (locate 'saturation) s)
        (set-value~ (locate 'value) v))
      (update)))
  
  
  (method protected (get-hue)
    (get-value~ (locate 'hue)))
  
  (method protected (get-saturation)
    (get-value~ (locate 'saturation)))
  
  (method protected (get-value)
    (get-value~ (locate 'value)))
  
  
  (method protected (update)
    (invalidate-view~ (locate 'hue))
    (invalidate-view~ (locate 'saturation))
    (invalidate-view~ (locate 'value))
    (let ((color (get-color)))
      (set-background~ (locate 'color) color)
      (when feedback
        (update-view)
        (feedback color)))))


;;;
;;;; Slider-View
;;;


(class Slider-View extends View
  
  
  (slot reticule <fl> initialize #f)
  (slot value    <fl> initialize #f)
  
  
  ;;;
  ;;;; Value
  ;;;
  
  
  (method public (get-reticule)
    reticule)
  
  
  (method public (set-reticule r <fl>)
    (set! reticule (cast <fl> (between 0 r (reticule-max))))
    (set! value (cast <fl> (reticule->value reticule))))
  
  
  (method public (get-value)
    value)
  
  
  (method public (set-value v <fl>)
    (set-reticule (value->reticule v)))
  
  
  (method protected (value->reticule value)
    (/ (* value (reticule-span)) (value-max)))
  
  
  (method protected (reticule->value reticule)
    (/ (* reticule (value-max)) (reticule-span)))
  
  
  (method protected (reticule-span)
    (- (cast <fl> (get-width)) 6.))
  
  
  (method protected (reticule-max)
    (- (reticule-span) 1.))
  
  
  (method protected virtual (value-max)
    )
  
  
  ;;;
  ;;;; Mouse
  ;;;
  
  
  (method override (mouse-down evt)
    (acquire-capture)
    (set-reticule (pos->reticule (get-position~ evt)))
    (update~ parent))
  
  
  (method override (drag-move evt)
    (set-reticule (pos->reticule (get-position~ evt)))
    (update~ parent))
  
  
  (method override (drag-up evt . rest)
    (release-capture))
  
  
  (definition (pos->reticule pos)
    (- (cast <fl> (get-h~ pos)) 3.))
  
  
  ;;;
  ;;;; Draw
  ;;;
  
  
  (method (draw-reticule surface)
    (when reticule
      (let ((height (get-height)))
        (set-color~ surface {Color Black})
        (set-line-width~ surface 1)
        (line~ surface (+ reticule 3) 3 (+ reticule 3) (- height 3))
        (draw-arrow-tip~ surface (+ reticule 1) 0 3 'down)
        (draw-arrow-tip~ surface (+ reticule 1) (- height 3) 3 'up)))))


;;;
;;;; Hue-View
;;;


(class Hue-View extends Slider-View
  
  
  ;;;
  ;;;; Value
  ;;;
  
  
  (method override (value-max)
    360)
  
  
  ;;;
  ;;;; Draw
  ;;;
  
  
  (method override (draw surface context)
    (let ((height (get-height))
          (s (get-saturation~ parent))
          (v (get-value~ parent)))
      (loop (for r <fl> from 0. to (reticule-max))
            (do (let ((h (reticule->value r)))
                  (let ((color (hsv->color h s v))
                        (r (fxround r)))
                    (fill-rect~ surface (new Rect (+ r 3) 3 (+ r 4) (- height 3)) color))))))
    (draw-reticule surface)))


;;;
;;;; Saturation-View
;;;


(class Saturation-View extends Slider-View
  
  
  ;;;
  ;;;; Value
  ;;;
  
  
  (method override (value-max)
    1)
  
  
  ;;;
  ;;;; Draw
  ;;;
  
  
  (method override (draw surface context)
    (let ((height (get-height))
          (h (get-hue~ parent))
          (v (get-value~ parent)))
      (loop (for r <fl> from 0. to (reticule-max))
            (do (let ((s (reticule->value r)))
                  (let ((color (hsv->color h s v))
                        (r (fxround r)))
                    (fill-rect~ surface (new Rect (+ r 3) 3 (+ r 4) (- height 3)) color))))))
    (draw-reticule surface)))


;;;
;;;; Value-View
;;;


(class Value-View extends Slider-View
  
  
  ;;;
  ;;;; Value
  ;;;
  
  
  (method override (value-max)
    1)
  
  
  ;;;
  ;;;; Draw
  ;;;
  
  
  (method override (draw surface context)
    (let ((height (get-height))
          (h (get-hue~ parent))
          (s (get-saturation~ parent)))
      (loop (for r <fl> from 0. to (reticule-max))
            (do (let ((v (reticule->value r)))
                  (let ((color (hsv->color h s v))
                        (r (fxround r)))
                    (fill-rect~ surface (new Rect (+ r 3) 3 (+ r 4) (- height 3)) color))))))
    (draw-reticule surface)))


;;;
;;;; Color-View
;;;


(class Color-View extends View))
