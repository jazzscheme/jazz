;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Color Combo
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.ui.view.Color-Combo jazz


(import (jazz.graphic)
        (jazz.jml)
        (jazz.library)
        (jazz.library.exemplar)
        (jazz.ui))


(class undocumented Color-Combo extends Combo-Box
  
  
  (form
    (<install>                              background: {Color White}
      (<Layout-View>    name: color-contour size: {Dimension 15 15} background: {Color White} layout-type: fill layout-insets: {Rect 1 2 2 2}
        (<Border-View>  name: color-border  border-type: solid border-color: {Color Black}
          (<Color-View> name: color)))))
  
  
  (method override (form-model form)
    (case (get-name~ form)
      ((body) Color-Text-View)
      (else (nextmethod form))))

  
  ;;;
  ;;;; Access
  ;;;
  
  
  (method public (get-color)
    (get-background~ (locate 'color)))
  
  
  (method public (set-color color)
    (set-color-value color)
    (let ((text (locate 'body)))
      (set-string-content~ text (if (not color) "" (present~ color)))
      (select-all~ text)))
  
  
  (method (set-color-value color)
    (set-background~ (locate 'color) color))

  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method override (content-change origin)
    (set-color-value (parse-exemplar Color (get-content)))
    (set-modified? #t))
  
  
  (method override (button-action)
    (let ((pos (new Point (- (get-width) 12) (get-height))))
      (popup (new Color-Picker colors: #f action-handler: (new Event-Handler target: self method-name: 'on-color-picked)) pos initiator: self)))
  
  
  (method (on-color-picked evt)
    (let ((color (get-property~ evt color:)))
      (close-popups)
      (set-color color)
      (content-change 'popup)))
  
  
  ;;;
  ;;;; Layout
  ;;;
  
  
  (method override (layout)
    (let ((size (get-size))
          (width (get-height))
          (countour (locate 'color-contour)))
      (set-position~ countour {Point 0 0})
      (set-position~ (locate 'scroller) (new Point (get-right~ countour) 0))
      (set-size~ (locate 'scroller) (new Dimension (- (get-width~ size) (get-width~ countour) 15) (get-height~ size)))
      (set-position~ (locate 'pick) (new Point (- (get-width~ size) width) 0))
      (set-size~ (locate 'pick) (new Dimension width width)))))


;;;
;;;; Color-View
;;;


(class Color-View extends View
  
  
  (method override (draw surface context lh lv)
    (nextmethod surface context lh lv)
    (when (not background)
      (let ((size (get-size)))
        (set-color~ surface {Color Black})
        (set-line-width~ surface 1)
        (line~ surface (get-width~ size) 0 0 (get-height~ size)))))))
