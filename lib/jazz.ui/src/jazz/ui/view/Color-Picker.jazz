;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Color Picker
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2012
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.ui.view.Color-Picker jazz


(import (jazz.geometry)
        (jazz.graphic)
        (jazz.jml)
        (jazz.ui)
        (jazz.ui.view))


(class undocumented Color-Picker extends Layout-View


  (property colors   initialize #f accessors explicit)
  (property geometry initialize #f accessors explicit)
  
  
  (form
    (<install>                    background: {Color Medium} layout-type: border layout-insets: {Rect 4 4 4 4}
      (<View>        name: colors location: center)
      (<Layout-View>              size: {Dimension 100 20} location: south layout-type: fill layout-insets: {Rect 4 0 4 4}
        (<More-Tool> name: more   title: "More Colors..."))))

  
  ;;;
  ;;;; Access
  ;;;


  (method public (get-colors)
    colors)


  (method public (set-colors value)
    (set! colors value)
    (invalidate-tools)
    (layout-view))


  (method public (get-geometry)
    geometry)


  (method public (set-geometry value)
    (set! geometry value)
    (layout-view))
  
  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method override (set-action-handler handler)
    (set! action-handler handler)
    (for-each (lambda (tool)
                (set-action-handler~ tool handler))
              (get-children~ (locate 'colors)))
    (set-action-handler~ (locate 'more) handler))

  
  ;;;
  ;;;; Colors
  ;;;
  
  
  (definition Default-Colors
    '(#f
      
      {Color White}
      {Color Black}
      
      {Color Light-Red}
      {Color Red}
      {Color Dark-Red}
      
      {Color Light-Orange}
      {Color Orange}
      {Color Dark-Orange}
      
      {Color Light-Yellow}
      {Color Yellow}
      {Color Dark-Yellow}
      
      {Color Light-Green}
      {Color Green}
      {Color Dark-Green}
      
      {Color Light-Blue}
      {Color Blue}
      {Color Dark-Blue}
      
      {Color Light-Purple}
      {Color Purple}
      {Color Dark-Purple}
      
      {Color Light-Gray}
      {Color Gray}
      {Color Dark-Gray}))
  
  
  (method (effective-colors)
    (or colors Default-Colors))

  
  ;;;
  ;;;; Tools
  ;;;
  
  
  (method (invalidate-tools)
    (let ((view (locate 'colors)))
      (for-each close~ (get-children~ view))
      (for-each (lambda (color)
                  (new Color-Tool parent: view size: {Dimension 18 18} color: color action-handler: action-handler))
                (effective-colors))))
  
  
  ;;;
  ;;;; Layout
  ;;;
  
  
  (method override (layout)
    (let* ((view (locate 'colors))
           (children (get-children~ view)))
      (when (not-null? children)
        (let* ((geometry (or geometry {Cell 3 8}))
               (lines (get-line~ geometry))
               (columns (get-col~ geometry)))
          (for-each (lambda (h)
                      (for-each (lambda (v)
                                  (let* ((n (+ (* h lines) v))
                                         (tool (element children n)))
                                    (set-position~ tool (new Point (+ 2 (* h 18)) (+ 2 (* v 18))))))
                                (naturals 0 lines)))
                    (naturals 0 columns))
          (set-size (new Dimension (+ 2 (* columns 18) 2 8) (+ 2 (* lines 18) 2 8 30))))))
    (nextmethod)))


;;;
;;;; Color-Tool
;;;


(class Color-Tool extends Push-Tool
  
  
  (property client)
  (property color  initialize #f accessors generate)
  
  
  (method override (get-tooltip?)
    #t)
  
  
  (method override (get-tooltip-text)
    (if (not color)
        "No Color"
      (present~ color)))
  
  
  (method override (action-properties)
    (list color: color))
  
  
  (method override (mouse-enter)
    (set-state 'highlighted)
    (invalidate-view))
  
  
  (method override (mouse-leave)
    (set-state 'inactive)
    (invalidate-view))
  
  
  (method override (mouse-up pos)
    (process-action self))
  
  
  (method override (up)
    )
  
  
  (method override (draw-highlighted surface)
    (if mouse-down?
        (draw-pushed surface)
      (nextmethod surface)))
  
  
  (method override (draw-tool surface context)
    (nextmethod surface context)
    (let* ((rect (get-bounds))
           (outside (inflate-rect rect -3 -3))
           (inside (inflate-rect outside -1 -1)))
      (frame-rect~ surface outside {Color Dark})
      (if color
          (fill-rect~ surface inside color)
        (set-color~ surface {Color Dark})
        (set-line-width~ surface 1)
        (line~ surface (get-right~ inside) (get-top~ inside) (get-left~ inside) (get-bottom~ inside))))))


;;;
;;;; More-Tool
;;;


(class More-Tool extends Label-Tool
  
  
  (method override (mouse-enter)
    (set-state 'highlighted)
    (invalidate-view))
  
  
  (method override (mouse-leave)
    (set-state 'inactive)
    (invalidate-view))
  
  
  (method override (mouse-up pos)
    (close-popups)
    (process-action self (list color: (choose-color))))
  
  
  (method override (up)
    )
  
  
  (method override (draw-highlighted surface)
    (if mouse-down?
        (draw-pushed surface)
      (nextmethod surface)))))
