;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Combo Boxes
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.ui.view.Combo-Box jazz


(import (jazz.event)
        (jazz.handler)
        (jazz.locale)
        (jazz.menu)
        (jazz.skin)
        (jazz.ui)
        (jazz.view)
        (jazz.window))


(class Combo-Box extends Combo-Text
  
  
  ;;;
  ;;;; Lexicon
  ;;;
  
  
  ;; choice  : #f or (value presented1 presented2 ...)
  ;; value   : any valid object
  ;; content : the string content of the combo text
  ;; entry   : the effective entry used by the combo box (as an example, the datatype-row class
  ;;           overrides the get-entry and set-entry methods so that content can be Text, 16 and
  ;;           the combo still works correctly, in effect ignoring the optional size part)


  (property nullable?       initialize #f  accessors generate)
  (property condensed?      initialize #f  accessors generate)
  (property choices         initialize '() accessors explicit)
  (property choices-updater initialize #f  accessors explicit)
  (property entry-test      initialize #f  accessors generate)
  
  
  (slot selected initialize #f)

  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method override (button-action self)
    (when selectable?
      (acquire-focus (get-body self)))
    (when (and (get-editable? self)
               (update-choices self))
      (let ((menu (new-choices-menu self))
            (pick (get-pick self)))
        (define (determine-width)
          (let ((border (popups-border (get-window-manager))))
            (- (get-width self) border border)))
        
        (cond (menu
               (receive (pos alternate-pos) (combo-popup-positions self menu)
                 (layout-menu menu width: (determine-width))
                 (track-popup-menu self menu pos alternate-position: alternate-pos)))
              (else
               (bell)
               (set-state self (if (picker-view? self (mouse-view self)) 'highlighted 'inactive)))))))
  
  
  (method protected (combo-popup-positions self view)
    (values (new Point -1 (+ (get-height self) 1))
            (new Point -1 (- (+ 5 (get-height view))))))
  
  
  (method package virtual (on-action self evt)
    (let ((choice (get-user-data (get-sender evt)))
          (text (get-body self)))
      (set-choice self choice)
      (select-all (get-body self))
      (set-modified? text #t)
      (call-content-change self 'popup)
      (combo-choice self)))
  
  
  (method protected virtual (combo-choice self)
    )
  
  
  ;;;
  ;;;; Access
  ;;;


  (method public (get-choices-updater self)
    choices-updater)


  (method public (set-choices-updater self value)
    (set! choices-updater value)
    (when (and (eq? kind 'pick) choices-updater)
      (set-enabled? (get-pick self) #t)))
  
  
  ;;;
  ;;;; Menu
  ;;;
  
  
  (method protected virtual (update-choices self)
    (if (and choices-updater (null? choices))
        (choices-updater self)
      #t))
  
  
  (method protected virtual (new-choices-menu self)
    (let ((current (get-entry self))
          (handler (or action-handler (new Event-Handler target: self method-name: 'on-action))))
      (define (checked? choice title)
        (if editable?
            (string=? title (standardize-content self current))
          (eq? choice selected)))
      
      (define (create-combo-item choice title parent)
        (let ((checked? (checked? choice title)))
          (new Combo-Item parent: parent title: title checked?: checked? user-data: choice action-handler: handler)))
      
      (define (new-choices-menu-plain menu)
        (for-each (lambda (choice)
                    (if (not choice)
                        (new Separator-Item parent: menu)
                      (let ((title (present-choice self choice)))
                        (create-combo-item choice title menu))))
                  choices))
      
      (define (new-choices-menu-condensed menu)
        (make-condensed-menu menu choices create-combo-item key: (~ present-choice self)))
      
      (and choices
           (let ((menu (new (context-menu-class self))))
             (if condensed?
                 (new-choices-menu-condensed menu)
               (new-choices-menu-plain menu))
             menu))))
  
  
  (method protected virtual (context-menu-class self)
    Context-Menu)
  
  
  ;;;
  ;;;; Choice
  ;;;


  (method public (get-choices self)
    choices)


  (method public (set-choices self value)
    (let ((old (get-choice self)))
      (set! choices value)
      (when (eq? kind 'pick)
        (set-enabled? (get-pick self) (or choices-updater (not-null? choices))))
      (when old
        (set-choice self old))))
  
  
  (method (get-choice self)
    (define (collect-matches entry)
      (let ((test (or entry-test nu=?))
            (queue (new-queue)))
        (for-each (lambda (choice)
                    (when choice
                      (bind (value . presented) choice
                        (define (tryout string)
                          (let ((localized (localize string)))
                            (when (test entry localized)
                              (enqueue queue choice))))
                        
                        (if (not presented)
                            (tryout (value->presented self value))
                          (for-each tryout presented)))))
                  choices)
        (queue-list queue)))
    
    (let ((matches (collect-matches (get-entry self))))
      (if (and selected (memq? selected matches))
          selected
        (and (not-null? matches)
             (car matches)))))
  
  
  ;;;
  ;;;; Presented
  ;;;
  
  
  (method public (present-choices self)
    (format "{l detail: :reader separator: \", \"}"
            (map (~ present-choice self) choices)))
  
  
  (method package (present-choice self choice)
    (and choice
         (bind (value . presented) choice
           (if (not presented)
               (value->presented self value)
             (localize (first presented))))))
  
  
  ;;;
  ;;;; Value
  ;;;
  
  
  (method public (present-value self value)
    (let ((choice (value->choice self value)))
      (if (not choice)
          (value->presented self value)
        (present-choice self choice))))
  
  
  (method (value->choice self value)
    (assoc value choices))
  
  
  (method (choice->value self choice)
    (car choice))
  
  
  (method public virtual (value->presented self value)
    (if (not value)
        "{}"
      (->string (localize value))))
  
  
  (method public virtual (invalid->value self presented)
    (signal (new Parse-Error message: (format "Invalid value: {a}" presented))))
  
  
  (method public (valid? self value)
    (boolean (value->choice self value)))
  
  
  ;;;
  ;;;; Content
  ;;;
  
  
  (method public virtual (get-entry self)
    (get-content self))
  
  
  (method public virtual (set-entry self content)
    (set-content self content))
  
  
  (method public (valid-value? self)
    (boolean (get-choice self)))
  
  
  (method public (get-value self)
    (let ((choice (get-choice self)))
      (if (not choice)
          (invalid->value self (get-content self))
        (car choice))))
  
  
  (method public (set-value self value (generate-event?: generate-event? #f))
    (set-choice self (value->choice self value) generate-event?: generate-event?))
  
  
  (method public (set-choice self choice (generate-event?: generate-event? #f))
    (set! selected choice)
    (set-entry self (present-value self (choice->value self choice)))
    (when generate-event?
      (call-content-change self #f)))
  
  
  (method protected virtual (standardize-content self content)
    content)
  
  
  ;;;
  ;;;; Validate
  ;;;
  
  
  (method override (validate-content self)
    (let* ((unique? (= 1 (length choices)))
           (unique (and unique? (car choices)))
           (unique-entry (and unique? (present-choice self unique)))
           (type (if unique? 'question 'message))
           (no (if unique? (format "Accept Unique Item: {a}" unique-entry) #f)))
      (catch (Parse-Error err
               (case (message-box (exception-reason err) type: type yes: "Change It" no: no)
                 ((yes)
                  (focus-body self)
                  (signal-cancel))
                 ((no)
                  (set-entry self unique-entry))))
        (get-value self))))
  
  
  ;;;
  ;;;; Descriptor
  ;;;
  
  
  (method meta override (get-class-descriptor self (context: context #f))
    (new jazz.ui.descriptors:Combo-Box-Descriptor)))


;;;
;;;; Combo-Item
;;;


(class Combo-Item extends Check-Item
  
  
  (method override (effective-font self)
    (let ((skin (find-skin 'ui:combo)))
      (or (get-text-font skin)
          (nextmethod self))))))
