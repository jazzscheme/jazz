;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Combo Boxes
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.ui.view.Combo-Box jazz


(import (jazz.graphic)
        (jazz.jml)
        (jazz.library)
        (jazz.locale)
        (jazz.platform)
        (jazz.ui)
        (jazz.ui.view))


(class Combo-Box extends Combo-Text
  
  
  ;;;
  ;;;; Lexicon
  ;;;
  
  
  ;; choice  : #f or (value presented1 presented2 ...)
  ;; value   : any valid object
  ;; content : the string content of the combo text
  ;; entry   : the effective entry used by the combo box (as an example, the datatype-row class
  ;;           overrides the get-entry and set-entry methods so that content can be Text, 16 and
  ;;           the combo still works correctly, in effect ignoring the optional size part)


  (property nullable?       initialize #f  accessors generate)
  (property condensed?      initialize #f  accessors generate)
  (property choices         initialize '() accessors explicit)
  (property choices-updater initialize #f  accessors explicit)
  (property entry-test      initialize #f  accessors generate)
  
  
  (slot selected initialize #f)

  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method override (button-action)
    (when selectable?
      (acquire-focus~ (get-body)))
    (when (update-choices)
      (let ((menu (new-choices-menu))
            (pick (get-pick)))
        (cond (menu
               (receive (pos alternate-pos) (combo-popup-positions menu)
                 (layout-menu~ menu width: (- (get-width) 4))
                 (track-popup-menu menu pos alternate-position: alternate-pos)))
              (else
               (bell)
               (set-state (if (picker-view? (mouse-view)) 'highlighted 'inactive)))))))
  
  
  (method protected (combo-popup-positions view)
    (values (new Point -1 (+ (get-height) 1))
            (new Point -1 (- (+ 5 (get-height~ view))))))
  
  
  (method protected virtual (on-action evt)
    (let ((choice (get-user-data~ (get-sender~ evt)))
          (text (get-body)))
      (set-choice choice)
      (select-all~ (get-body))
      (set-modified?~ text #t)
      (call-content-change 'popup)
      (combo-choice)))
  
  
  (method protected virtual (combo-choice)
    )
  
  
  ;;;
  ;;;; Access
  ;;;


  (method public (get-choices-updater)
    choices-updater)


  (method public (set-choices-updater value)
    (set! choices-updater value)
    (when (and (eq? kind 'pick) choices-updater)
      (set-enabled?~ (get-pick) #t)))
  
  
  ;;;
  ;;;; Menu
  ;;;
  
  
  (method protected virtual (update-choices)
    (if (and choices-updater (null? choices))
        (choices-updater self)
      #t))
  
  
  (method protected virtual (new-choices-menu)
    (let ((current (get-entry))
          (handler (or action-handler (new Event-Handler target: self method-name: 'on-action))))
      (define (checked? choice title)
        (if selected
            (eq? choice selected)
          (string=? title current)))
      
      (define (create-check-item choice title parent)
        (let ((checked? (checked? choice title)))
          (new Check-Item parent: parent title: title checked?: checked? user-data: choice action-handler: handler)))
      
      (define (new-choices-menu-plain menu)
        (for-each (lambda (choice)
                    (if (not choice)
                        (new Separator-Item parent: menu)
                      (let ((title (present-choice choice)))
                        (create-check-item choice title menu))))
                  choices))
      
      (define (new-choices-menu-condensed menu)
        (make-condensed-menu~ menu choices create-check-item key: present-choice))
      
      (when choices
        (let ((menu (new Context-Menu)))
          (if condensed?
              (new-choices-menu-condensed menu)
            (new-choices-menu-plain menu))
          menu))))
  
  
  ;;;
  ;;;; Choice
  ;;;


  (method public (get-choices)
    choices)


  (method public (set-choices value)
    (let ((old (get-choice)))
      (set! choices value)
      (when (eq? kind 'pick)
        (set-enabled?~ (get-pick) (or choices-updater (not-null? choices))))
      (when old
        (set-choice old))))
  
  
  (method (get-choice)
    (define (collect-matches entry)
      (let ((test (or entry-test nu=?))
            (queue (new-queue)))
        (for-each (lambda (choice)
                    (when choice
                      (bind (value . presented) choice
                        (define (tryout string)
                          (let ((localized (localize string)))
                            (when (test entry localized)
                              (enqueue queue choice))))
                        
                        (if (not presented)
                            (tryout (value->presented value))
                          (for-each tryout presented)))))
                  choices)
        (queue-list queue)))
    
    (let ((matches (collect-matches (get-entry))))
      (if (and selected (memq? selected matches))
          selected
        (and (not-null? matches)
             (car matches)))))
  
  
  ;;;
  ;;;; Presented
  ;;;
  
  
  (method public (present-choices)
    (format "{l detail: :reader separator: \", \"}"
            (map present-choice choices)))
  
  
  (method protected (present-choice choice)
    (when choice
      (bind (value . presented) choice
        (if (not presented)
            (value->presented value)
          (localize (first presented))))))
  
  
  ;;;
  ;;;; Value
  ;;;
  
  
  (method public (present-value value)
    (let ((choice (value->choice value)))
      (if (not choice)
          (value->presented value)
        (present-choice choice))))
  
  
  (method (value->choice value)
    (assoc value choices))
  
  
  (method (choice->value choice)
    (car choice))
  
  
  (method public virtual (value->presented value)
    (if (not value)
        "{}"
      (->string (localize value))))
  
  
  (method public virtual (invalid->value presented)
    (signal (new Parse-Error message: (format "Invalid value: {a}" presented))))
  
  
  ;;;
  ;;;; Content
  ;;;
  
  
  (method public virtual (get-entry)
    (get-content))
  
  
  (method public virtual (set-entry content)
    (set-content content))
  
  
  (method public (valid-value?)
    (boolean (get-choice)))
  
  
  (method public (get-value)
    (let ((choice (get-choice)))
      (if (not choice)
          (invalid->value (get-content))
        (car choice))))
  
  
  (method public (set-value value (generate-event?: generate-event? #f))
    (set-choice (value->choice value) generate-event?: generate-event?))
  
  
  (method public (set-choice choice (generate-event?: generate-event? #f))
    (set! selected choice)
    (set-entry (present-value (choice->value choice)))
    (when generate-event?
      (call-content-change #f)))
  
  
  ;;;
  ;;;; Validate
  ;;;
  
  
  (method override (validate-content)
    (let* ((unique? (= 1 (length choices)))
           (unique (and unique? (car choices)))
           (unique-entry (and unique? (present-choice unique)))
           (type (if unique? 'question 'message))
           (no (if unique? (format "Accept Unique Item: {a}" unique-entry) #f)))
      (catch (Parse-Error err
               (case (message-box (exception-reason err) type: type yes: "Change It" no: no)
                 ((yes)
                  (focus-body)
                  (throw-cancel))
                 ((no)
                  (set-entry unique-entry))))
        (get-value))))
  
  
  ;;;
  ;;;; Descriptor
  ;;;
  
  
  (method meta override (get-class-descriptor)
    (new Combo-Box-Descriptor)))


;;;
;;;; Design
;;;


(submodule design


(import (jazz.designer))


(class Combo-Box-Descriptor extends Combo-View-Descriptor
  
  
  (form
    (<install>
      (<properties~>
        (<Property-Descriptor> name: condensed? title: "Condensed")
        (<Property-Descriptor> name: choices title: "Choices")
        (<Property-Descriptor> name: nullable? title: "Nullable")
        (<Property-Descriptor> name: choices-updater title: "Choices Updater")
        (<Property-Descriptor> name: entry-test title: "Entry Test")))))))
