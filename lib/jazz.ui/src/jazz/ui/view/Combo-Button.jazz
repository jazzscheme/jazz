;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Combo Buttons
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.ui.view.Combo-Button jazz


(import (jazz.geometry)
        (jazz.graphic)
        (jazz.skin)
        (jazz.ui))


(class undocumented Combo-Button extends Push-Tool

  
  ;;;
  ;;;; Access
  ;;;
  
  
  (method public (get-combo self)
    parent)
  
  
  ;;;
  ;;;; Control
  ;;;
  
  
  (method override (get-state self)
    (child-state parent self))
  
  
  (method override (mouse-enter self)
    (unless surrogate
      (enter-child parent self)))
  
  
  (method override (mouse-leave self)
    (unless surrogate
      (leave-child parent self)))


  (method override (mouse-down self evt)
    (child-down parent self))


  (method override (drag-up self evt . rest)
    (child-up parent self))
  
  
  ;;;
  ;;;; Mouse
  ;;;


  (method override (down self)
    (when (view-enabled? self)
      (when (eq? (get-kind parent) 'pick)
        (process-action self self))))


  (method override (up self)
    (when (eq? (get-kind parent) 'choose)
      (process-action self self)))
  
  
  ;;;
  ;;;; Popup
  ;;;
  
  
  (method override (close-popups self (event: event #f) (all?: all? #f) (exclude: exclude #f) (initiator: initiator #f))
    (unless (memq? event '(mouse-down double-click))
      (nextmethod self event: event all?: all? exclude: exclude initiator: initiator)
      (invalidate-view self)))
  
  
  ;;;
  ;;;; Drawing
  ;;;
  
  
  (method override (light-color self)
    {Color Light-Background})
  
  
  (method override (dark-color self)
    {Color Dark})
    
    
  (method override (draw-inactive self surface)
    (when (highlight-pick? parent)
      (let ((bounds (get-bounds self))
            (skin (find-skin 'ui:combo)))
        (frame-rect surface bounds (or (get-button-border skin) (if (view-enabled? self) {Color Light} {Color Medium}))))))
  
  
  (method override (draw-tool self surface context)
    (case (get-kind parent)
      ((pick) (draw-arrow self surface))
      ((choose) (draw-ellipsis self surface))))
  
  
  (method (draw-arrow self surface)
    (let ((skin (find-skin 'ui:combo)))
      (set-color surface (or (get-arrow-color skin) (if (view-enabled? self) {Color Black} {Color Dark})))
      (let* ((size (get-size self))
             (offset (get-offset self))
             (h (+ offset (- (quotient (get-width size) 2) 2)))
             (v (+ offset (- (quotient (get-height size) 2) 1))))
        (draw-arrow-tip surface h v 3 'down))))
  
  
  (method (draw-ellipsis self surface)
    (let ((title "..."))
      (let ((pos (justify-lazy (lambda () (get-text-extent surface title))
                               (lambda () size)
                               '(center center))))
        (draw-text surface (get-h pos) (get-v pos) title {Color Black} enabled?: (view-enabled? self)))))
  
  
  (method package (get-offset self)
    (if (memq? (get-state self) '(pushed choose))
        1
      0))
  
  
  ;;;
  ;;;; Recording
  ;;;
  
  
  (method override (record-actions? self)
    (record-actions? (get-combo self)))))
