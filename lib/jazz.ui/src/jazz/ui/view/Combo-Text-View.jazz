;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Combo Text View
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.ui.view.Combo-Text-View jazz


(import (jazz.action)
        (jazz.skin)
        (jazz.text)
        (jazz.ui))


(class undocumented Combo-Text-View extends Text-View
  
  
  (method override (new-model self)
    (let ((model (new Text-Model base-style: {Text-Style Text-Base} left-padding: 2 top-padding: 2))
          (skin (find-skin 'ui:combo)))
      (let ((left (get-left-padding skin))
            (top (get-top-padding skin)))
        (when left
          (set-left-padding model left))
        (when top
          (set-top-padding model top)))
      model))
  
  
  ;;;
  ;;;; Access
  ;;;
  
  
  (method package (get-combo self)
    (get-parent (get-parent parent)))
    

  ;;;
  ;;;; Actions
  ;;;
  
  
  (method override (focus-actions self)
    (cons (find-actions 'combo-text)
          (nextmethod self)))
  
  
  (method (on-push-button self evt)
    (let ((combo (get-combo self)))
      (push-button combo)))

  
  ;;;
  ;;;; Keyboard
  ;;;
  
  
  (method override (return-press self evt)
    (call-content-change (get-combo self) 'return))

  
  ;;;
  ;;;; Mouse
  ;;;
  
  
  (method override (mouse-activate? self)
    selectable?)
  
  
  (method override (mouse-enter self)
    (if selectable?
        (nextmethod self)
      (unless surrogate
        (let ((combo (get-combo self)))
          (enter-child combo (get-pick combo))))))
  
  
  (method override (mouse-leave self)
    (if selectable?
        (nextmethod self)
      (unless surrogate
        (let ((combo (get-combo self)))
          (leave-child combo (get-pick combo))))))
  
  
  (method override (mouse-down self evt)
    (if selectable?
        (nextmethod self evt)
      (let ((combo (get-combo self)))
        (child-down combo (get-pick combo)))))


  (method override (drag-up self evt . rest)
    (if selectable?
        (nextmethod self evt)
      (let ((combo (get-combo self)))
        (child-up combo (get-pick combo)))))
  
  
  ;;;
  ;;;; Popup
  ;;;
  
  
  (method override (close-popups self (event: event #f) (all?: all? #f) (exclude: exclude #f) (initiator: initiator #f))
    (when (or (neq? (get-state (get-combo self)) 'choose) (not (memq? event '(mouse-down double-click))))
      (nextmethod self event: event all?: all? exclude: exclude initiator: initiator)
      (invalidate-view self)))
  
  
  ;;;
  ;;;; Completion
  ;;;
  
  
  (method override (auto-complete? self)
    (get-complete? (get-combo self)))


  (method override (completion-name self pos)
    (unless (text-constituent? syntax (get-char self (if (has-selection? self) (get-end self) pos)))
      (let ((prev (previous-cell self pos)))
        (when prev
          (let ((line (get-line pos)))
            (get-string self (new Range$Cell$ (new Cell line 0) pos)))))))
  
  
  (method override (complete-name? self size)
    (>= size 1))
  
  
  (method override (symbol-completions self name)
    (let* ((combo (get-combo self))
           (choices (get-choices combo))
           (domain (map (lambda (choice) (present-choice combo choice)) choices))
           (completer (new Symbol-Completer domain)))
      (complete completer name test: di=?)))
  
  
  (method override (completions-prefix self completions)
    (prefix completions test: di=?))))
