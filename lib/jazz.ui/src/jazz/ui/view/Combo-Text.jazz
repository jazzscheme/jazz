;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Combo Text
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.ui.view.Combo-Text jazz


(import (jazz.document)
        (jazz.graphic)
        (jazz.locale)
        (jazz.markup)
        (jazz.outline)
        (jazz.text)
        (jazz.ui))


(class Combo-Text extends Combo-View


  (property selectable?       initialize #f  accessors generate)
  (property editable?         initialize #t  accessors explicit)
  (property complete?         initialize #f  accessors explicit)
  (property content    <void> initialize #f  accessors explicit)
  

  (form
    (<install>
      (<Scroller-View>       name: scroller
        (<!>                 name: content
          (<Combo-Text-View> name: body     selectable?: #f editable?: #f accepts-returns?: #f show-unfocused-selection?: #f focus-selects-all?: #t)))))

  
  (method override (default-size self)
    {Dimension 100 17})


  ;;;
  ;;;; Editable
  ;;;
  
  
  (method package (get-editable? self)
    editable?)
  
  
  (method package (set-editable? self flag)
    (set! editable? flag)
    (let ((text (get-body self))
          (pick (get-pick self)))
      (set-editable? text flag)
      (set-selectable? text flag)
      (set-background text (if flag {Color White} {Color Medium}))
      (set-visible? pick flag)))
  
  
  ;;;
  ;;;; Access
  ;;;
  
  
  (method public (get-text self)
    (get-body self))


  (method public (get-complete? self)
    complete?)


  (method public (set-complete? self value)
    (set! complete? value)
    (when complete?
      (let ((text (get-body self)))
        (set-selectable? text #t)
        (set-editable? text #t))))
  
  
  ;;;
  ;;;; Control
  ;;;
  
  
  (method override (highlight-pick? self)
    #t)

  
  ;;;
  ;;;; Enabled
  ;;;
  
  
  (method override (set-enabled? self flag)
    (set! enabled? flag)
    (set-enabled? (get-body self) flag)
    (set-background (get-body self) (if flag {Color White} {Color Medium}))
    (set-enabled? (get-pick self) flag)
    (invalidate-view self))
  
  
  ;;;
  ;;;; Edition
  ;;;
  
  
  (method public (edit self)
    (focus-body self))
  
  
  (method (focus-body self)
    (let ((text (get-body self)))
      (acquire-focus text)
      (select-all text)))
  
  
  ;;;
  ;;;; Content
  ;;;
  
  
  (method public (get-content self)
    (get-string-content (get-body self)))
  
  
  (method public (set-content self content)
    (set-string-content (get-body self) (if content (localize content) "")))
  
  
  (method override (get-modified? self)
    (get-modified? (get-document-controller (get-body self))))
  
  
  (method override (set-modified? self flag)
    (set-modified? (get-document-controller (get-body self)) flag))
  
  
  ;;;
  ;;;; Layout
  ;;;
  
  
  (method override (layout self)
    (let ((size (get-size self))
          (text (get-body self))
          (scroller (locate self 'scroller))
          (pick (get-pick self)))
      (let ((width (min (get-height self) (+ (get-top-padding text) (get-default-row-height (get-model text)) 0))))
        (set-position scroller {Point 0 0})
        (let ((scroller-width (if (get-visible? pick)
                                  (- (get-width size) width)
                                (get-width size))))
          (set-size scroller (new Dimension scroller-width (get-height size))))
        (set-position pick (new Point (- (get-width size) width) (pick-v self)))
        (set-size pick (new Dimension width width)))))
  
  
  (method protected virtual (pick-v self)
    0)
  
  
  ;;;
  ;;;; Descriptor
  ;;;
  
  
  (method meta override (get-class-descriptor self (context: context #f))
    (new jazz.ui.descriptors:Combo-Text-Descriptor))))
