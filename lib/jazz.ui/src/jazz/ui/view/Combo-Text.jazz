;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Combo Text
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.ui.view.Combo-Text jazz


(import (jazz.graphic)
        (jazz.jml)
        (jazz.library)
        (jazz.locale)
        (jazz.platform)
        (jazz.ui)
        (jazz.ui.view))


(class Combo-Text extends Combo-View


  (property selectable?       initialize #f  accessors generate)
  (property editable?         initialize #f  accessors explicit)
  (property complete?         initialize #f  accessors explicit)
  (property content    <void> initialize {}  accessors explicit)
  

  (form
    (<install>
      (<Scroller-View>       name: scroller
        (<!>                 name: content
          (<Combo-Text-View> name: body     left-padding: 2 top-padding: 2 selectable?: #f editable?: #f accepts-returns?: #f show-unfocused-selection?: #f focus-selects-all?: #t default-style: {Text-Style name: Default font: {Font name: Label}})))))

  
  (method override (default-size)
    {Dimension 100 17})


  ;;;
  ;;;; Editable
  ;;;
  
  
  (method (get-editable?)
    editable?)
  
  
  (method (set-editable? flag)
    (set! editable? flag)
    (let ((text (get-body))
          (pick (get-pick)))
      (set-editable?~ text flag)
      (set-selectable?~ text flag)
      (set-background~ text (if flag {Color name: White} {Color name: Medium}))
      (set-visible?~ pick flag)))
  
  
  ;;;
  ;;;; Access
  ;;;


  (method public (get-complete?)
    complete?)


  (method public (set-complete? value)
    (set! complete? value)
    (when complete?
      (let ((text (get-body)))
        (set-selectable?~ text #t)
        (set-editable?~ text #t))))
  
  
  ;;;
  ;;;; Control
  ;;;
  
  
  (method override (highlight-pick?)
    #t)

  
  ;;;
  ;;;; Enabled
  ;;;
  
  
  (method override (set-enabled? flag)
    (set! enabled? flag)
    (set-enabled?~ (get-body) flag)
    (set-background~ (get-body) (if flag {Color name: White} {Color name: Medium}))
    (set-enabled?~ (get-pick) flag)
    (invalidate-view))

  
  ;;;
  ;;;; Outer
  ;;;
  
  
  (method override (inner? view)
    (memq? view children))
  
  
  ;;;
  ;;;; Edition
  ;;;
  
  
  (method public (edit)
    (focus-body))
  
  
  (method (focus-body)
    (let ((text (get-body)))
      (acquire-focus~ text)
      (select-all~ text)))
  
  
  ;;;
  ;;;; Content
  ;;;
  
  
  (method public (get-content)
    (get-string-content~ (get-body)))
  
  
  (method public (set-content content)
    (set-string-content~ (get-body) (if content (localize content) "")))
  
  
  (method override (get-modified?)
    (get-modified?~ (get-controller~ (get-body))))
  
  
  (method override (set-modified? flag)
    (set-modified?~ (get-controller~ (get-body)) flag))
  
  
  ;;;
  ;;;; Layout
  ;;;
  
  
  (method override (layout)
    (let ((size (get-size))
          (scroller (locate 'scroller))
          (pick (get-pick))
          (width (get-height)))
      (set-position~ scroller {Point 0 0})
      (set-size~ scroller (new Dimension (- (get-width~ size) width) (get-height~ size)))
      (set-position~ pick (new Point (- (get-width~ size) width) 0))
      (set-size~ pick (new Dimension width width))))
  
  
  ;;;
  ;;;; Descriptor
  ;;;
  
  
  (method meta override (get-class-descriptor)
    (new Combo-Text-Descriptor)))


;;;
;;;; Design
;;;


(submodule design


(import (jazz.designer))


(class Combo-Text-Descriptor extends Combo-View-Descriptor
  
  
  (method override (class-property-presentation class property)
    (case (field-name property)
      ((selectable?) "Selectable")
      ((editable?) "Editable")
      ((complete?) "Complete")
      ((content) "Content")
      (else (nextmethod class property)))))))
