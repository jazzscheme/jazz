;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Combo View
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.ui.view.Combo-View jazz


(import (jazz.handler)
        (jazz.jml)
        (jazz.ui)
        (jazz.view))


(class undocumented Combo-View extends View
  

  (property kind initialize 'pick accessors explicit)


  (slot state initialize 'inactive)
  
  
  (form
    (<install>
      (<Combo-Button> name: pick action-handler: {Event-Handler :form on-pick})))

  
  ;;;
  ;;;; Access
  ;;;
  
  
  (method public (get-body self)
    (locate self 'body))
  
  
  (method public (get-pick self)
    (locate self 'pick))


  (method public (get-kind self)
    kind)


  (method public (set-kind self value)
    (if (not (memq? kind '(pick choose)))
        (error "Unknown combo kind: {t}" kind)
      (set! kind value)
      (when (eq? kind 'choose)
        (set-enabled? (get-pick self) #t))
      (invalidate-view self)))
  
  
  (method public (get-state self)
    state)
  
  
  (method public (set-state self value)
    (set! state value)
    (invalidate-view self))

  
  ;;;
  ;;;; Picker
  ;;;
  
  
  (method (picker-view? self view)
    (let ((text (get-body self))
          (pick (get-pick self)))
      (if (get-selectable? text)
          (eq? view pick)
        (or (eq? view text)
            (eq? view pick)))))

  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method package (on-pick self evt)
    (button-action self))
  
  
  (method protected virtual (button-action self)
    )
  
  
  (method public (push-button self)
    (unwind-protect
        (begin
          (set-state self 'pushed)
          (button-action self))
      (set-state self 'inactive)))
  
  
  ;;;
  ;;;; Control
  ;;;
  
  
  (method public (child-state self child)
    (let ((name (get-name child)))
      (case state
        ((choose choose-failed out-choose) (case name ((body) 'highlighted) ((pick) 'pushed)))
        (else state))))
  
  
  (method public virtual (highlight-pick? self)
    #f)

  
  ;;;
  ;;;; Widget
  ;;;
  
  
  (method override (inner? self view)
    (memq? view children))
  
  
  ;;;
  ;;;; Popup
  ;;;
  
  
  (method override (popup-destroy self popup)
    (case state
      ((choose) (set-state self 'highlighted))
      ((out-choose) (set-state self 'inactive)))
    (invalidate-view self))
  
  
  ;;;
  ;;;; Layout
  ;;;
  
  
  (method override (layout self)
    (let ((body (get-body self))
          (pick (get-pick self)))
      (set-position body {Point 0 0})
      (set-size body {Dimension 22 22})
      (set-position pick {Point 22 0})
      (set-size pick {Dimension 9 22})))
  
  
  ;;;
  ;;;; Mouse
  ;;;

  
  (method public (enter-child self child)
    (when (get-enabled? child)
      (case state
        ((inactive) (set-state self 'highlighted))
        ((out-pushed) (set-state self 'pushed))
        ((out-choose) (set-state self 'choose)))
      (invalidate-view self)))

  
  (method public (leave-child self child)
    (case state
      ((highlighted) (set-state self 'inactive))
      ((pushed) (set-state self 'out-pushed))
      ((choose) (set-state self 'out-choose)))
    (invalidate-view self))

  
  (method public (child-down self child)
    (when (view-enabled? self)
      (case (get-name child)
        ((body)
         (set-state self 'pushed)
         (down child))
        ((pick)
         (case state
           ((highlighted)
            (set-state self 'choose)
            (down child))
           ((choose)
            (close-popups self)
            (set-state self 'highlighted)))))
      (invalidate-view self)))

  
  (method public (child-up self child)
    (when (view-enabled? self)
      (unwind-protect
          (up child)
        (if (eq? kind 'choose)
            (set-state self 'inactive)
          (case state
            ((pushed choose-failed) (set-state self 'highlighted))
            ((out-pushed) (set-state self 'inactive))))
        (invalidate-view self))))
  
  
  ;;;
  ;;;; Descriptor
  ;;;
  
  
  (method meta override (get-class-descriptor self (context: context #f))
    (new jazz.ui.descriptors:Combo-View-Descriptor))))
