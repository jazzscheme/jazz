;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Connectors
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.ui.view.Connector jazz


(import (jazz.designer)
        (jazz.graphic)
        (jazz.ui))


(class undocumented Connector extends Line-View


  (property client initialize #f accessors generate)
  (property start  initialize #f accessors explicit)
  (property end    initialize #f accessors explicit)
  
  
  (slot start-view initialize #f)
  (slot end-view   initialize #f)

  
  ;;;
  ;;;; Access
  ;;;


  (method public (get-start self)
    start)


  (method public (set-start self value)
    (set! start value)
    (when start-view
      (ending-removed self start-view)
      (set! start-view #f)))


  (method public (get-end self)
    end)


  (method public (set-end self value)
    (set! end value)
    (when end-view
      (ending-removed self end-view)
      (set! end-view #f)))
  
  
  ;;;
  ;;;; Client
  ;;;
  
  
  (method protected virtual (default-client self)
    parent)
  

  ;;;
  ;;;; Find
  ;;;
  
  
  (method public (get-start-view self)
    (or start-view (and start (set! start-view (setup-ending self start)))))
  
  
  (method public (get-end-view self)
    (or end-view (and end (set! end-view (setup-ending self end)))))
  
  
  (method (setup-ending self name)
    (let ((client (if client (find-component self client) (default-client self))))
      (when client
        (let ((view (find-ending self client name)))
          (when view
            (ending-added self view)
            view)))))
  
  
  (method protected virtual (find-ending self client name)
    (find-component client name))
  
  
  (method protected virtual (ending-added self view)
    )
  
  
  (method protected virtual (ending-removed self view)
    )
  

  ;;;
  ;;;; Update
  ;;;
  
  
  (method public (update self)
    (let ((s (get-start-view self))
          (e (get-end-view self)))
      (when (and s e)
        (let* ((s (get-center s))
               (e (get-center e))
               (lw (fxceiling (+ (/ (cast <fl> (line-width self)) 2) Tolerance)))
               (top (- (min (get-v s) (get-v e)) lw))
               (left (- (min (get-h s) (get-h e)) lw))
               (right (+ (max (get-h s) (get-h e)) lw))
               (bottom (+ (max (get-v s) (get-v e)) lw)))
          (set-rect self (new Rect left top right bottom))
          (let ((p (get-position self)))
            (set-from self (- s p))
            (set-to self (- e p)))))))
  

  ;;;
  ;;;; Drawing
  ;;;
  
  
  
  (definition Unselected-Color
    {Color Black})
  
  
  (method protected virtual (unselected-color self)
    Unselected-Color)

  
  (method override (line-color self)
    @cant-find-selected-color
    (let ((rank (selection-rank surrogate)))
      (if rank
          (selected-color (get-editor surrogate) rank)
        (unselected-color self))))
  
  
  ;;;
  ;;;; Descriptor
  ;;;
  
  
  (method meta override (get-class-descriptor self (context: context #f))
    (new jazz.ui.descriptors:Connector-Descriptor))))
