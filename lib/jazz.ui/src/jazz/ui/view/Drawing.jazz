;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Drawable Figures
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;    Assem Hakmeh
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.ui.view.Drawing jazz


(import (jazz.geometry)
        (jazz.graphic)
        (jazz.ui)
        (jazz.ui.view)
        (jazz.ui.window))


(class Drawing extends Figure
  
  
  ;;;
  ;;;; Player
  ;;;
  
  
  (method public virtual (get-player)
    (and parent (get-player~ parent)))
  
  
  (method public virtual (set-player plr)
    (for-each (lambda (child)
                (when (is? child Drawing)
                  (set-player~ child plr)))
              children))

  
  ;;;
  ;;;; Lie
  ;;;
  
  
  (method public (get-lie) <Point>
    (view->device {Point 0 0}))
  
  
  (method public (set-lie lie <Point>) <void>
    (set-position (nu+ (device->view lie) position)))

  
  ;;;
  ;;;; Root
  ;;;
  
  
  (method public virtual (get-root) <View+>
    (let ((player (get-player)))
      (when player
        (get-root~ player))))
  
  
  (method public (get-rootmost) <View>
    (define (rootmost view)
      (let ((parent (get-parent~ view)))
        (if (not parent)
            view
          (rootmost parent))))
    
    (or (get-root) (rootmost self)))

  
  ;;;
  ;;;; Coordinates
  ;;;


  (method public (acquire origin <Drawing> shape)
    (define (common-ancestor l1 l2)
      (let (iter (ancestor #f) (s1 l1) (s2 l2))
        (if (and (not-null? s1) (not-null? s2) (eq? (car s1) (car s2)))
            (iter (car s1) (cdr s1) (cdr s2))
          ancestor)))
    
    (if (eq? origin self)
        shape
      (let ((root (get-rootmost))
            (origin-root (get-rootmost~ origin)))
        (if (eq? root origin-root)
            (let ((surface (transformation-surface))
                  (ancestor (common-ancestor (get-ancestry) (get-ancestry~ origin))))
              (let ((device-shape (with-view-transformation~ origin surface ancestor
                                    (lambda ()
                                      (logical->device~ surface shape)))))
                (with-view-transformation surface ancestor
                  (lambda ()
                    (device->logical~ surface device-shape)))))
          (let ((player (get-player))
                (origin-player (get-player~ origin)))
            (if (and player origin-player)
                (acquire~ self (get-root) (acquire~ player origin-player (acquire~ (get-root~ origin) origin shape)))
              ;; quick hack that needs to be fixed for some regressions like mouse-move or mouse-up
              ;; that can occur when they get called playerless because their window was closed for
              ;; example when double-clicking a found binding in the View Shortcut Bindings tree
              shape
              @quick-hack
              (error "Unable to acquire {s}" shape)))))))
  
  
  (method public (view->device shape)
    (with-transformation-surface
      (lambda (surface)
        (logical->device~ surface shape))))
  
  
  (method public (device->view shape)
    (with-transformation-surface
      (lambda (surface)
        (device->logical~ surface shape))))

  
  ;;;
  ;;;; Size
  ;;;


  (method override (get-size)
    size)
  

  (method override (set-size sz <Dimension>)
    (when (/= sz size)
      (set! size sz)
      (invalidate-layout)
      (when (get-finished?)
        (call-layout))))
  
  
  (method public virtual (set-size-noevent sz <Dimension>)
    (set! size sz))
  

  (method public (get-width) <fx>
    (get-width~ size))
  
  
  (method public (set-width width <fx>) <void>
    (set-size (new Dimension width (get-height))))


  (method public (get-height) <fx>
    (get-height~ size))
  
  
  (method public (set-height height <fx>)
    (set-size (new Dimension (get-width) height)))
  
  
  (method public (set-height-noevent height <fx>)
    (set-size-noevent (new Dimension (get-width) height)))
  
  
  (method public (get-left) <fx>
    (get-h~ position))
  
  
  (method public (get-top) <fx>
    (get-v~ position))
  
  
  (method public (get-right) <fx>
    (+ (get-h~ position) (get-width~ size)))
  
  
  (method public (get-bottom) <fx>
    (+ (get-v~ position) (get-height~ size)))

  
  (method public (get-bounds) <Rect>
    (size-rect (get-size)))
  
  
  (method public (get-rect) <Rect>
    (position/size->rect (get-position) (get-size)))
  
  
  (method public (set-rect rect <Rect>) <void>
    (set-position (rect-position rect))
    (set-size (rect-size rect)))
  
  
  (method public (grow-rect dh dv dwidth dheight)
    (let ((pos (+ (get-position) (new Point dh dv)))
          (size (+ (get-size) (new Dimension dwidth dheight))))
      (set-size size)
      (set-position pos)))
  
  
  ;;;
  ;;;; Transformation
  ;;;
  

  (method public virtual (get-transformation)
    #f)

  
  ;;;
  ;;;; Visibility
  ;;;
  
  
  (method public (view-visible?)
    (let ((player (get-player)))
      (and player (get-visible?) (if parent
                                     (view-visible?~ parent)
                                   (eq? self (get-root~ player))))))

  
  ;;;
  ;;;; Transparency
  ;;;

  
  (method public virtual (get-opaque?)
    #t)

  
  (method public virtual (get-transparent?)
    #f)
  
  
  ;;;
  ;;;; Layout
  ;;;
  
  
  (method protected (invalidate-layout)
    (set-layout-valid? #f))
  
  
  (method protected (call-layout)
    (unless (or (get-layout-valid?) (and (inhibit-layouts?) (not (get-visible?))))
      (layout)
      (set-layout-valid? #t)))
  
  
  (method public (layout-drawing)
    ;; No need to layout if the drawing is not initialized, because
    ;; conclude will call layout once the initialization process is done.
    (when (get-finished?)
      (invalidate-layout)
      (call-layout)))
  
  
  (method public virtual (layout)
    )
  
  
  (method public virtual (adjust?)
    #f)
  
  
  (method public virtual (adjust-fit)
    )
  
  
  (method public virtual (adjust)
    )

  
  ;;;
  ;;;; Iterate
  ;;;
  
  
  (method public (for-each-view proc <procedure> (include-invisibles?: include-invisibles? #f))
    (loop (for child in children)
          (when (and (is? child View)
                     (or include-invisibles? (get-visible?~ child)))
            (proc child))))
  
  
  (method public (for-each-view-reversed proc <procedure> (include-invisibles?: include-invisibles? #f))
    (for-each-reversed (lambda (child)
                         (when (and (is? child View)
                                    (or include-invisibles? (get-visible?~ child)))
                           (proc child)))
                       children))
  
  
  ;;;
  ;;;; Hierarchy
  ;;;
  
  
  (definition *transformation-surface*
    #f)
  
  
  (method (transformation-surface)
    (unless *transformation-surface*
      (set! *transformation-surface* (new Memory-Surface #f {Dimension 4096 4096})))
    *transformation-surface*
    @doesnt-work-as-is
    (get-offscreen~ (get-root) #f))
  
  
  (method public (with-transformation-surface proc)
    (let ((surface (transformation-surface)))
      (with-view-transformation surface (get-rootmost)
        (lambda ()
          (proc surface)))))
  
  
  (method public (with-clipped-transformation-surface proc)
    (let ((surface (transformation-surface)))
      (with-clipping-view-transformation surface (get-rootmost)
        (lambda ()
          (proc surface)))))
  
  
  (method public (with-pristine-clipped-surface proc)
    (let ((surface (transformation-surface)))
      (with-pristine-clipping-transformation~ surface
        (lambda ()
          (proc surface)))))
  
  
  (method public (find-drawing pos <Point> (ignore: ignore #f))
    (with-pristine-clipped-surface
      (lambda (surface)
        (find-in-drawing surface pos ignore))))
  
  
  (method public (find-in-drawing surface <Surface> device-pos <Point> ignore)
    (unless (and ignore (memq? self ignore))
      (with-self-transformation surface
        (lambda ()
          (let ((pos (device->logical~ surface device-pos)))
            (when (in-drawing? pos size)
              (or (find-subdrawing surface device-pos pos ignore)
                  (unless (get-transparent?)
                    self))))))))
  
  
  (method protected virtual (find-subdrawing surface <Surface> device-pos <Point> pos <Point> ignore)
    (continuation-capture
      (lambda (return)
        (for-each-view-reversed
          (lambda (view <View>)
            (let ((found (find-in-drawing~ view surface device-pos ignore)))
              (when found
                (continuation-return return found)))))
        #f)))
  
  
  (method protected virtual (in-drawing? pos <Point> size <Dimension>)
    (in-size? pos size))


  ;;;
  ;;;; Invalidation
  ;;;
  
  
  (method public (invalidate-drawing)
    (let ((rect (get-rect)))
      (invalidate-rect~ parent rect)))

  
  ;;;
  ;;;; Drawing
  ;;;


  (method public (paint-root surface <Surface> update-region <Region>) <void>
    (let ((handle (get-handle~ (get-player))))
      (with ((dirty-region (copy-region update-region)))
        @buggy
        (combine-and!~ dirty-region (get-offscreen-invalid-region handle))
        (bind (view draw-self? . nodes) (painting-tree surface dirty-region)
          (paint surface draw-self? nodes '())
          (validate-offscreen-region handle dirty-region)))))
  
  
  (method public (paint-drawing surface <Surface> context <list>) <void>
    (with ((region (new Region rect: (logical->device~ surface (get-clipper~ surface)))))
      (bind (view draw-self? . nodes) (painting-tree surface region)
        (paint surface draw-self? nodes context))))
  
  
  (method public (render-drawing surface <Surface> context <list>) <void>
    (with ((region (new Region rect: (logical->device~ surface (get-clipper~ surface)))))
      (bind (view draw-self? . nodes) (painting-tree surface region)
        (render surface draw-self? nodes context))))
  
  
  (method public (painting-tree surface region <Region>)
    (define (region-tree surface view region)
      (let ((nodes '()))
        (with ((update (copy-region region)))
          (with ((coverage (if (get-opaque?~ view) (new Region rect: (logical->device~ surface (get-bounds~ view))) (new Region))))
            (for-each-view-reversed~ view
              (lambda (child)
                (with-self-transformation~ child surface
                  (lambda ()
                    (with ((child-region (new Region rect: (logical->device~ surface (get-bounds~ child)))))
                      (with ((intersection (region-intersection update child-region)))
                        (when (not (empty?~ intersection))
                          (receive (child-coverage node) (region-tree surface child intersection)
                            (set! nodes (cons node nodes))
                            (combine-diff!~ update child-coverage)
                            (combine-or!~ coverage child-coverage)
                            (close~ child-coverage)))))))))
            (values (region-intersection region coverage) (cons view (cons (not (empty?~ update)) nodes)))))))
    
    (define (rectangle-tree surface view clip-rect)
      (let ((nodes '())
            (cover-rect (and (get-opaque?~ view) clip-rect)))
        (let ((cover (if cover-rect 'rect 'none)))
          (for-each-view-reversed~ view
            (lambda (child)
              (with-self-transformation~ child surface
                (lambda ()
                  (when (neq? cover 'all)
                    (let ((child-rect (logical->device~ surface (get-bounds~ child))))
                      (when (rect-intersect? clip-rect child-rect)
                        (let ((child-clip (rect-intersection clip-rect child-rect)))
                          (receive (child-cover node) (rectangle-tree surface child child-clip)
                            (set! nodes (cons node nodes))
                            (when child-cover
                              (if (nu=? clip-rect child-cover)
                                  (set! cover 'all)
                                (case cover
                                  ((none)
                                   (set! cover-rect child-cover)
                                   (set! cover 'rect))
                                  ((rect)
                                   (if (rect-in-rect? cover-rect child-cover)
                                       (set! cover-rect child-cover)
                                     (when (not (rect-in-rect? child-cover cover-rect))
                                       (set! cover 'region)
                                       (set! cover-rect #f))))))))))))))))
          (values cover-rect (cons view (cons (neq? cover 'all) nodes))))))
  
    (define (full-tree view)
      (let ((nodes '()))
        (for-each-view-reversed~ view
          (lambda (child)
            (set! nodes (cons (full-tree child) nodes))))
        (cons view (cons #t nodes))))
    
    (define (toplevel-tree surface view clip-rect)
      (let ((nodes '()))
        (for-each-view-reversed~ view
          (lambda (child)
            (with-self-transformation~ child surface
              (lambda ()
                (let ((child-rect (logical->device~ surface (get-bounds~ child))))
                  (when (rect-intersect? clip-rect child-rect)
                    (set! nodes (cons (full-tree child) nodes))))))))
        (cons view (cons #t nodes))))
    
    (case (or (painting-tree-algorithm~ surface) (get-platform-painting-tree-algorithm))
      ((region)
       (receive (coverage node) (region-tree surface self region)
         (close~ coverage)
         node))
      ((rectangle)
       (receive (coverage node) (rectangle-tree surface self (get-box~ region))
         node))
      ((toplevel)
       (toplevel-tree surface self (get-box~ region)))
      ((full)
       (full-tree self))))

  
  (method public (paint surface <Surface> draw-self? <bool> nodes <list> context <list>) <void>
    (if (not (get-offscreen?))
        (paint-content surface draw-self? nodes context)
      (let ((offscreen (get-offscreen surface)))
        (set-clipper~ offscreen (get-clipper~ surface))
        (paint-content offscreen draw-self? nodes context)
        (blit-surface~ surface offscreen))))
  
  
  (method public (paint-content surface <Surface> draw-self? <bool> nodes <list> context <list>) <void>
    (with-clipping-self-transformation surface
      (lambda ()
        (render surface draw-self? nodes context))))

  
  (method public virtual (render surface <Surface> draw-self? <bool> nodes <list> context <list>) <void>
    (when draw-self?
      (if (debug-paint?)
          (when (is? self View)
            (fill-rect~ surface (get-bounds) (cycle-debug-color!)))
        (draw-background surface context))
      (draw-content surface context))
    (draw-children surface nodes context))

  
  (method public virtual (draw-background surface <Surface> context) <void>
    )
  
  
  (method public virtual (draw-content surface <Surface> context <list>) <void>
    (draw surface context))
    
  
  (method public virtual (draw surface <Surface> context <list>) <void>
    )

  
  (method public virtual (draw-children surface <Surface> nodes <list> context <list>) <void>
    (for-each (lambda (node)
                (bind (drawing draw-self? . nodes) node
                  (paint~ drawing surface draw-self? nodes context)))
              nodes))


  ;;;
  ;;;; Offscreen
  ;;;
  
  
  (method protected virtual (get-offscreen surface <Surface+>)
    )


  ;;;
  ;;;; Clipping
  ;;;
  
  
  (method protected (with-view-transformation surface <Surface> root <View> thunk <procedure>)
    (if (eq? self root)
        (with-pristine-transformation~ surface
          thunk)
      (with-view-transformation~ parent surface root
        (lambda ()
          (with-self-transformation surface
            thunk)))))
  
  
  (method protected (with-self-transformation surface <Surface> thunk <procedure>)
    (with-transformation~ surface (get-h~ position) (get-v~ position) (get-transformation)
      thunk))
  
  
  (method protected (with-clipping-view-transformation surface <Surface> root <View> thunk <procedure>)
    (if (eq? self root)
        (with-pristine-clipping-transformation~ surface
          thunk)
      (with-clipping-view-transformation~ parent surface root
        (lambda ()
          (with-clipping-self-transformation surface
            thunk)))))
  
  
  (method protected virtual (with-clipping-self-transformation surface <Surface> thunk <procedure>)
    (with-clipping-transformation~ surface (get-h~ position) (get-v~ position) (get-width~ size) (get-height~ size) (get-transformation)
      thunk))
  
  
  (method public (get-view-clipper)
    (with-clipped-transformation-surface
      (lambda (surface)
        (get-clipper~ surface))))
  
  
  (method public virtual (get-offscreen?)
    #f)
  
  
  (method public virtual (set-offscreen? flag <bool>)
    )


  ;;;
  ;;;; Layer
  ;;;
  
  
  (method public virtual (get-layer)
    #f)
  
  
  (method public virtual (set-layer value)
    )


  ;;;
  ;;;; Effect
  ;;;
  
  
  (method public virtual (get-effect)
    #f)
  
  
  (method public virtual (set-effect value)
    )))
