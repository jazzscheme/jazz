;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Frame Buttons
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.ui.view.Frame-Button jazz


(import (jazz.geometry)
        (jazz.graphic)
        (jazz.resource)
        (jazz.graphic)
        (jazz.view))


(class undocumented Frame-Button extends View
  
  
  (property type initialize #f accessors explicit)
  
  
  (slot state initialize 'inactive)
  
  
  ;;;
  ;;;; Access
  ;;;
  
  
  (method public (get-type self)
    type)
  
  
  (method public (set-type self value)
    (set! type value)
    (invalidate-view self))
  
  
  ;;;
  ;;;; State
  ;;;
  
  
  (method public (get-state self)
    state)
  
  
  (method public (set-state self value)
    (set! state value)
    (invalidate-view self))
  
  
  ;;;
  ;;;; Mouse
  ;;;
  
  
  (method override (mouse-activate? self)
    #f)


  (method override (mouse-enter self)
    (when (and (view-enabled? self) (or (not (get-mouse-down?)) (eq? (get-mouse-down-view) self)))
      (case (get-state self)
        ((inactive) (set-state self 'highlighted))
        ((out-pushed) (set-state self 'pushed)))))


  (method override (mouse-leave self)
    (when (and (view-enabled? self) (or (not (get-mouse-down?)) (eq? (get-mouse-down-view) self)))
      (case (get-state self)
        ((highlighted) (set-state self 'inactive))
        ((pushed) (set-state self 'out-pushed)))))
  
  
  (method override (mouse-down self evt)
    (set-state self 'pushed))
  
  
  (method override (drag-up self evt . rest)
    (when (view-enabled? self)
      (unwind-protect
          (up self)
        (case (get-state self)
          ((pushed) (set-state self 'highlighted))
          ((out-pushed) (set-state self 'inactive))))))


  (method package (up self)
    (when (eq? (get-state self) 'pushed)
      (process-action self self)))
  
  
  ;;;
  ;;;; Drawing
  ;;;
  
  
  (method override (draw self surface context)
    (define (type-icon type)
      (case type
        ((maximize) {Image-Resource "Maximize"})
        ((restore)  {Image-Resource "Restore"})
        ((close)    {Image-Resource "Close"})))
    
    (let ((top (center 14 (get-height self))))
      @comment-not-that-these-icons-are-currently-16x16
      (draw-opaque-image (get-images-portfolio (current-application)) surface context (type-icon type) {Color Medium} 0 top)
      (let ((rect (new Rect 0 top 16 (+ top 14))))
        (draw-caption surface rect type (if (eq? state 'pushed) #t #f)))))))
