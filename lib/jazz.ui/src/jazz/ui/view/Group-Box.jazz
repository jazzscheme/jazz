;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Group Boxes
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library protected jazz.ui.view.Group-Box jazz


(import (jazz.graphic)
        (jazz.platform.cairo)
        (jazz.ui)
        (jazz.ui.look)
        (jazz.utilities))


(class Group-Box extends Container

  
  (property flat? initialize #f getter get-flat? setter set-flat?)
  (property style initialize {} getter get-style setter set-style)
  
  
  ;;;
  ;;;; Access
  ;;;


  (method public (get-flat?)
    flat?)


  (method public (set-flat? value)
    (set! flat? value)
    (invalidate-view))


  (method public (get-style)
    style)


  (method public (set-style value)
    (set! style value)
    (invalidate-view))
  
  
  (method (set-title value)
    (nextmethod value)
    (layout-view))

  
  ;;;
  ;;;; Look
  ;;;
  
  
  (method (flat-look?)
    (case style
      ((styled) (get-element~ (get-look) 'group/border/flat?))
      (else flat?)))

  
  ;;;
  ;;;; Layout
  ;;;
  
  
  (method (layout)
    (let* ((size (get-size))
           (box-width (get-width~ size))
           (box-height (get-height~ size))
           (metrics (get-metrics~ font))
           (ascent (get-ascent~ metrics))
           (left (if flat? 1 2))
           (top (cond (title (+ ascent 1)) (flat? 1) (else 2)))
           (width (- box-width (if flat? 2 4)))
           (height (- box-height (if title (+ ascent 1) (if flat? 1 2)) (if flat? 1 2)))
           (content (get-content)))
      (set-position~ content (new Point left top))
      (set-size~ content (new Dimension width height))))
      
  
  ;;;
  ;;;; Drawing
  ;;;

  
  (method (draw surface context lh lv)
    (let* ((title (localize (get-title)))
           (size (get-size))
           (width (get-width~ size))
           (height (get-height~ size))
           (offset 9)
           (color {Color name: Medium})
           (flat? (flat-look?))
           (frame-color (case style ((entry) {Color name: Entry-Border}) (else {Color name: Group-Border})))
           (rect (get-bounds)))
      (let* ((metrics (get-text-metrics~ surface))
             (extent (and title (get-text-extent~ surface title)))
             (top (if title (fxceiling (/ (cairo_font_extents_t-ascent-ref metrics) 2)) 0)))
        (cairo_font_extents_t-free metrics)
        (if flat?
            (frame-rect~ surface (new Rect 0 top width height) frame-color)
          (draw-edge~ surface (new Rect 0 top width height) inner: 'raised outer: 'sunken edges: 'rectangle))
        (when title
          (fill-rect~ surface (new Rect (- offset 2) 0 (+ offset (get-width~ extent) 2) (get-height~ extent)) color)
          (set-text-color~ surface {Color name: Black})
          (draw-text~ surface offset 0 title)))))))
