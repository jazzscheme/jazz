;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Group Boxes
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.ui.view.Group-Box jazz


(import (jazz.cairo)
        (jazz.graphic)
        (jazz.locale)
        (jazz.skin)
        (jazz.ui))


(class Group-Box extends Base-Container
  
  
  (property flat?        initialize #f accessors explicit)
  (property border-color initialize #f accessors explicit)
  
  
  ;;;
  ;;;; Access
  ;;;
  
  
  (method public (get-flat? self)
    flat?)


  (method public (set-flat? self value)
    (set! flat? value)
    (invalidate-view self))
  
  
  (method public (get-border-color self)
    border-color)


  (method public (set-border-color self value)
    (set! border-color value)
    (invalidate-view self))
  
  
  (method override (set-title self value)
    (nextmethod self value)
    (layout-view self))

  
  ;;;
  ;;;; Layout
  ;;;
  
  
  (method override (layout self)
    (let* ((size (get-size self))
           (box-width (get-width size))
           (box-height (get-height size))
           (metrics (get-metrics (effective-font self)))
           (ascent (get-ascent metrics))
           (flat? (flat-look? self (get-skin self)))
           (left (if flat? 1 2))
           (top (cond (title (+ ascent 1)) (flat? 1) (else 2)))
           (width (- box-width (if flat? 2 4)))
           (height (- box-height (if title (+ ascent 1) (if flat? 1 2)) (if flat? 1 2)))
           (content (get-content self)))
      (set-position content (new Point left top))
      (set-size content (new Dimension width height))))
      
  
  ;;;
  ;;;; Drawing
  ;;;

  
  (method override (draw self surface context)
    (let* ((title (localize (get-title self)))
           (skin (get-skin self))
           (size (get-size self))
           (width (get-width size))
           (height (get-height size))
           (offset 9)
           (color (or (get-background skin) {Color Medium}))
           (flat? (flat-look? self skin))
           (border-color (or border-color {Color Entry-Border}))
           (rect (get-bounds self)))
      (let* ((metrics (get-text-metrics surface))
             (extent (and title (get-text-extent surface title)))
             (top (if title (fxceiling (/ (cairo_font_extents_t-ascent-ref metrics) 2)) 0)))
        (cairo_font_extents_t-free metrics)
        (let ((title-rect (and title (new Rect (- offset 2) 0 (+ offset (get-width extent) 2) (get-height extent)))))
          (define (draw-border)
            (if flat?
                (frame-rect surface (new Rect 0 top width height) border-color)
              (draw-edge surface (new Rect 0 top width height) inner: 'raised outer: 'sunken edges: 'rectangle)))
          
          (when title
            (unless (eq? color 'none)
              (fill-rect surface rect color))
            (if (not title)
                (draw-border)
              (with-clipout surface rect title-rect
                (lambda ()
                  (draw-border))))
            (draw-text surface offset 0 title (text-color self skin)))))))

  
  ;;;
  ;;;; Skin
  ;;;
  
  
  (method override (get-skin self)
    (find-skin 'ui:group))
  
  
  (method (text-color self skin)
    (or (get-text-color skin)
        {Color Black}))
  
  
  (method (flat-look? self skin)
    (let ((border-flat? (get-border-flat? skin)))
      (if (specified? border-flat?)
          border-flat?
        flat?)))
  
  
  ;;;
  ;;;; Descriptor
  ;;;
  
  
  (method meta override (get-class-descriptor self (context: context #f))
    (new jazz.ui.descriptors:Group-Box-Descriptor))))
