;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Header View
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.ui.view.Header-View jazz


(import (jazz.designer)
        (jazz.jml)
        (jazz.library)
        (jazz.ui)
        (jazz.ui.skin))


(class Header-View extends Base-Container


  (property flat?     initialize #f accessors explicit)
  (property shown?    initialize #t accessors explicit)
  (property selector? initialize #f accessors explicit)
  
  
  (slot client initialize #f)
  
  
  (method override (default-name)
    'header)


  ;;;
  ;;;; Access
  ;;;


  (method public (get-flat?)
    flat?)


  (method public (set-flat? value)
    (when (neq? value flat?)
      (set! flat? value)
      (layout-view)))


  (method public (get-shown?)
    shown?)
  

  (method public (set-shown? value)
    (when (neq? value shown?)
      (set! shown? value)
      (layout-view)))
  
  
  (method public (get-selector?)
    selector?)
  
  
  (method public (set-selector? value)
    (when (neq? value selector?)
      (set! selector? value)
      (layout-view)))


  ;;;
  ;;;; Client
  ;;;
  
  
  (method public (get-client)
    (or client (let ((clt (find-client)))
                 (set! client clt)
                 clt)))
  
  
  (method public (set-client clt)
    (set! client clt))
  
  
  (method protected virtual (find-client)
    #f)
  
  
  ;;;
  ;;;; Outer
  ;;;
  
  
  (method override (content-inner? view)
    #t)

  
  ;;;
  ;;;; Layout
  ;;;
  
  
  (method override (layout)
    (let ((content (get-content)))
      (when content
        (let ((size (get-size)))
          (set-position~ content (content-position size))
          (set-size~ content (content-size size))))))
  
  
  (method (content-position size)
    (new Point (get-selector-width) (get-header-height)))
  
  
  (method (content-size size)
    (new Dimension
      (get-width~ size)
      (- (get-height~ size) (get-header-height))))
  
  
  (method public virtual (get-header-height)
    (if shown? (if flat? 15 16) 0))

  
  (method public virtual (get-selector-width)
    (if selector? (if flat? 15 16) 0))


  ;;;
  ;;;; Skin
  ;;;
  
  
  (method override (get-look)
    (case style
      ((tool) (find-look 'header/tool))
      ((document) (find-look 'header/document))
      (else (find-look 'header))))
  
  
  ;;;
  ;;;; Descriptor
  ;;;
  
  
  (method meta override (get-class-descriptor)
    (new Header-View-Descriptor)))


;;;
;;;; Design
;;;


(submodule design


(import (jazz.designer))


(class Header-View-Descriptor extends Layout-View-Descriptor
  
  
  (form
    (<install>
      (<properties~>
        (<Property-Descriptor> name: flat?     title: "Flat"
          (<Boolean-Domain>    name: domain))
        (<Property-Descriptor> name: shown?    title: "Shown"
          (<Boolean-Domain>    name: domain))
        (<Property-Descriptor> name: selector? title: "Selector"))))
  
  
  (method override (class-image class)
    {Image-Resource "AlignmentTop"}))))
