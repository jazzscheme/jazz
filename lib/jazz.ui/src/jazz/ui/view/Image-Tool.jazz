;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Image Tools
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.ui.view.Image-Tool jazz


(import (jazz.ui))


(class Image-Tool extends Tool-Button


  (property portfolio         initialize {} getter get-portfolio         setter set-portfolio)
  (property resource          initialize {} getter get-resource          setter set-resource)
  (property disabled-resource initialize {} getter get-disabled-resource setter set-disabled-resource)
  
  
  (slot image          initialize (new Image view-position: {Point 2 2}))
  (slot disabled-image initialize (new Image view-position: {Point 2 2}))
  
  
  ;;;
  ;;;; Access
  ;;;


  (method public (get-portfolio)
    (get-portfolio~ image))


  (method public (set-portfolio portfolio)
    (let ((portfolio (if (is? portfolio Portfolio) portfolio (child portfolio))))
      (set-portfolio~ image portfolio)
      (set-portfolio~ disabled-image portfolio))
    (invalidate-view))


  (method public (get-resource)
    (get-resource~ image))


  (method public (set-resource name)
    (when (not (get-disabled-resource))
      (set-disabled-resource (default-disabled-resource name)))
    (set-resource~ image name)
    (invalidate-view))


  (method public (get-disabled-resource)
    (get-resource~ disabled-image))


  (method public (set-disabled-resource name)
    (set-resource~ disabled-image name)
    (invalidate-view))
  
  
  (method public (preload-images)
    (preload-image~ image)
    (preload-image~ disabled-image))
  
  
  ;;;
  ;;;; Drawing
  ;;;


  (method override (draw-tool surface context)
    (let ((offset (if (eq? (get-state) 'pushed) 2 1)))
      (draw-image surface context offset offset)))


  (method protected (draw-image surface context h v)
    (draw~ (if (get-enabled?)
               image
             disabled-image)
      surface
      context
      h v))
  
  
  ;;;
  ;;;; Descriptor
  ;;;
  
  
  (method meta override (get-class-descriptor)
    (new Image-Tool-Descriptor)))


;;;
;;;; Design
;;;


(submodule design


(import (jazz.designer))


(class Image-Tool-Descriptor extends Layout-View-Descriptor
  
  
  (method override (class-property-presentation class property)
    (case (field-name property)
      ((portfolio) "Portfolio")
      ((resource) "Resource")
      ((disabled-resource) "Disabled Resource")
      (else (nextmethod class property)))))))
