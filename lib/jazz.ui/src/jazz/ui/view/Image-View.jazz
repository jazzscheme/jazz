;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Image Views
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.ui.view.Image-View jazz


(import (jazz.document)
        (jazz.graphic)
        (jazz.view)
        (jazz.window))


(class undocumented Image-View extends View implements Document


  (property portfolio      initialize #f          accessors explicit)
  (property resource       initialize #f          accessors explicit)
  (property moniker        initialize #f          accessors explicit)
  (property image-position initialize {Point 0 0} accessors explicit)
  (property image-size     initialize #f          accessors explicit)
  (property fill-mode      initialize 'position   accessors explicit)


  (slot image               initialize (new Image) getter generate)
  (slot dragging?           initialize #f)
  (slot base-position       initialize #f)
  (slot document-controller initialize #f)
  
  
  (method override (save-content self moniker));;abstract
  (method override (default-extension self));;abstract
  (method override (extensions self));;abstract
  (method override (focus-document self));;abstract
  (method override (current-history-item self));;abstract
  (method override (compare-moniker self moniker));;abstract
  
  
  (method meta override (external-name self . rest)
    'image-view)
  
  
  (method override (finish self rest)
    (set-size image size)
    (nextmethod self rest))
  
  
  (method override (destroy self)
    (close image)
    (nextmethod self))

  
  ;;;
  ;;;; Host
  ;;;
  
  
  (method override (install-in-host self host)
    (nextmethod self host)
    (let ((size (get-size host)))
      (set-size self size)
      (set-image-size self size)))
  
  
  (method override (size-change self size)
    (nextmethod self size)
    (set-image-size self size)
    (invalidate-view self))
  
  
  (method override (host-workspaces self)
    '(image))


  ;;;
  ;;;; Controller
  ;;;


  (method override (get-document-controller self)
    (unless document-controller
      (set! document-controller (new-document-controller self)))
    document-controller)


  (method override (new-document-controller self)
    (new Document-Controller self))
  
  
  (method override (install-scroller? self)
    #t)
  
  
  (method package (get-moniker self)
    (get-moniker (get-document-controller self)))
  
  
  (method package (set-moniker self moniker)
    (set-moniker image moniker)
    (set-moniker (get-document-controller self) moniker))
  
  
  (method override (load-content self moniker)
    (set-moniker image moniker)
    (invalidate-view self))
  
  
  (method override (verify-reload self)
    )
  
  
  (method override (reload-moniker self moniker)
    )


  (method override (get-modified? self)
    (get-modified? (get-document-controller self)))


  (method override (set-modified? self state)
    (set-modified? (get-document-controller self) state))
  
  
  (method package (update-status self)
    (update-status (get-document-controller self)))
  
  
  (method package (update-moniker-time self moniker)
    (update-moniker-time (get-document-controller self) moniker))


  (method override (tool-update self tool?)
    )


  (method override (console-update self console?)
    )

  
  ;;;
  ;;;; Drawing
  ;;;


  (method override (draw self surface context)
    (draw-at self surface context 0 0)
    (unless (view-enabled? self)
      (let ((color (or background (copy-object {Color Medium} #f))))
        (set-alpha color 0.85)
        (fill-rect surface (get-bounds self) color))))
  
  
  (method package virtual (draw-at self surface context h v)
    (draw-image self surface context h v))


  (method package (draw-image self surface context h v)
    (fill-at image surface context h v (get-bounds self)))
    
  
  ;;;
  ;;;; Mouse
  ;;;
  

  (method override (mouse-down self evt)
    (when scroller
      (set! dragging? #t)
      (set! base-position (get-position evt))
      (acquire-capture self)))
  
  
  (method override (drag-move self evt)
    (when dragging?
      (let ((position (get-position evt)))
        (move-figure self (- (get-h position) (get-h base-position))
                     (- (get-v position) (get-v base-position))))))
  
  
  (method override (drag-up self evt . rest)
    (when dragging?
      (release-capture self)
      (set! dragging? #f)))

  
  ;;;
  ;;;; Access
  ;;;


  (method public (get-portfolio self)
    (get-portfolio image))


  (method public (set-portfolio self portfolio)
    (set-portfolio image (if (is? portfolio Portfolio) portfolio (child self portfolio)))
    (invalidate-view self))


  (method public (get-resource self)
    (get-resource image))


  (method public (set-resource self name)
    (set-resource image name)
    (invalidate-view self))


  (method public (get-image-position self)
    (get-position image))


  (method public (set-image-position self pos)
    (set-position image pos)
    (invalidate-view self))


  (method public (get-image-size self)
    (get-size image))


  (method public (set-image-size self size)
    (set-size image size)
    (invalidate-view self))


  (method public (get-fill-mode self)
    (get-fill-mode image))


  (method public (set-fill-mode self mode)
    (set-fill-mode image mode)
    (invalidate-view self))
  
  
  (method public (set-handle self handle)
    (set-handle image handle)
    (invalidate-view self))
  
  
  ;;;
  ;;;; Events
  ;;;


  (method override (cursor-update self evt)
    (set-cursor (if scroller :finger :arrow)))
    
    
    ;;;
    ;;;; Session
    ;;;
    
    
  (method override (save-session self)
    @to-convert
    (let* ((host (get-host))
           (info
            (list (external-name)
                  moniker:  (get-moniker)
                  position: (get-position host)
                  size:     (get-size host))))
      (push-property properties 'Opened-Windows info)))
  
  
  ;;;
  ;;;; Descriptor
  ;;;
  
  
  (method meta override (get-class-descriptor self (context: context #f))
    (new jazz.ui.descriptors:Image-View-Descriptor))))
