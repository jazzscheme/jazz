;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Label Tools
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.ui.view.Label-Tool jazz


(import (jazz.geometry)
        (jazz.graphic)
        (jazz.locale)
        (jazz.ui))


(class Label-Tool extends Tool-Button
  
  
  (property justification initialize 'center             accessors explicit)
  (property color         initialize {Color name: Black} accessors explicit)
  
  
  (method override (default-size)
    {Dimension 100 20})
  
  
  ;;;
  ;;;; Access
  ;;;
  
  
  (method public (get-justification)
    justification)
  
  
  (method public (set-justification value)
    (set! justification value)
    (invalidate-view))


  (method public (get-color)
    color)


  (method public (set-color value)
    (set! color value)
    (invalidate-view))

  
  ;;;
  ;;;; Drawing
  ;;;


  (method override (draw-tool surface context)
    (let ((offset (if (eq? (get-state) 'pushed) 1 0)))
      (let* ((title (localize title))
             (extent (get-text-extent~ surface title))
             (pos (justify extent (get-size) (list justification 'center))))
        (set-text-color~ surface color)
        (draw-text~ surface (+ offset (get-h~ pos)) (+ offset (get-v~ pos)) title enabled?))))))
