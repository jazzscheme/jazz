;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Labels
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2012
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.ui.view.Label-View jazz


(import (jazz.designer)
        (jazz.geometry)
        (jazz.graphic)
        (jazz.jml)
        (jazz.library)
        (jazz.locale)
        (jazz.system)
        (jazz.ui)
        (jazz.ui.window))


(class Label-View extends View


  (property justification initialize 'head         accessors explicit)
  (property color         initialize {Color Black} accessors explicit)
  (property shadow?       initialize #f            accessors explicit)
  
  
  (method override (default-size)
    {Dimension 100 16})
  
  
  ;;;
  ;;;; Access
  ;;;
  
  
  (method public (get-justification)
    justification)
  
  
  (method public (set-justification value)
    (set! justification value)
    (invalidate-view))


  (method public (get-color)
    color)


  (method public (set-color value)
    (set! color value)
    (invalidate-view))


  (method public (get-shadow?)
    shadow?)


  (method public (set-shadow? value)
    (set! shadow? value)
    (invalidate-view))

  
  ;;;
  ;;;; Title
  ;;;
  
  
  (method protected virtual (label-title)
    title)

  
  ;;;
  ;;;; Font
  ;;;
  
  
  (method override (effective-font)
    (let ((font (and style (get-font~ style))))
      (or font (nextmethod))))

  
  ;;;
  ;;;; Style
  ;;;
  
  
  (method override (style-update)
    (adjust-size))

  
  ;;;
  ;;;; Layout
  ;;;
  
  
  (method override (preferred-size)
    (let ((title (localize (label-title))))
      (if (not title)
          (default-size)
        (let ((extent (text-extent~ (effective-font) title)))
          (new Dimension
            (get-width~ extent)
            (max 16 (get-height~ extent)))))))
  
  
  ;;;
  ;;;; Mouse Copy
  ;;;
  
  
  (method override (cursor-update evt)
    (if (get-alt?~ evt)
        (set-cursor :finger)
      (nextmethod evt)))
  
  
  (method override (mouse-data pos)
    title)
  
  
  ;;;
  ;;;; Drawing
  ;;;
  
  
  (method override (draw surface context)
    (let ((title (localize (or (label-title) ""))))
      (let ((pos (justify-lazy (lambda () (get-text-extent~ surface title))
                               (lambda () (get-size))
                               (if (pair? justification) justification (list justification 'center)))))
        (if style
            (let ((h (get-h~ pos))
                  (v (get-v~ pos))
                  (line-height (get-height))
                  (tabs '())
                  (left 0)
                  (enabled? (view-enabled?)))
              (draw-style~ style surface context title h v line-height tabs left enabled?))
          (when shadow?
            (draw-text~ surface (+ (get-h~ pos) 2) (+ (get-v~ pos) 2) title {Color Medium-Gray}))
          (let ((enabled? (view-enabled?)))
            (draw-text~ surface (get-h~ pos) (get-v~ pos) title (if enabled? color {Color Dark}) enabled?: enabled?))))))
  
  
  ;;;
  ;;;; Descriptor
  ;;;
  
  
  (method meta override (get-class-descriptor (context: context #f))
    (new Label-View-Descriptor)))


;;;
;;;; Design
;;;


(submodule design


(import (jazz.designer))


(class Label-View-Descriptor extends View-Descriptor
  
  
  (form
    (<install>                                        image: {Image-Resource "Text"}
      (<properties~>                                  default: title
        (<Property-Descriptor>    name: justification
          (<Justification-Domain> name: domain))
        (<Property-Descriptor>    name: color
          (<Color-Domain>         name: domain))
        (<Property-Descriptor>    name: shadow?       standard?: #f
          (<Boolean-Domain>       name: domain))))))))
