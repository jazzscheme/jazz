;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Labels
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.ui.view.Label-View jazz


(import (jazz.geometry)
        (jazz.graphic)
        (jazz.locale)
        (jazz.skin)
        (jazz.text)
        (jazz.ui)
        (jazz.view)
        (jazz.window))


(class Label-View extends View


  (property justification initialize 'head accessors explicit)
  (property color         initialize #f    accessors explicit)
  (property shadow?       initialize #f    accessors explicit)
  
  
  (method override (default-size self)
    {Dimension 100 16})
  
  
  ;;;
  ;;;; Access
  ;;;
  
  
  (method public (get-justification self)
    justification)
  
  
  (method public (set-justification self value)
    (set! justification value)
    (invalidate-view self))


  (method public (get-color self)
    color)


  (method public (set-color self value)
    (set! color value)
    (invalidate-view self))


  (method public (get-shadow? self)
    shadow?)


  (method public (set-shadow? self value)
    (set! shadow? value)
    (invalidate-view self))

  
  ;;;
  ;;;; Title
  ;;;
  
  
  (method protected virtual (label-title self)
    title)

  
  ;;;
  ;;;; Font
  ;;;
  
  
  (method override (effective-font self)
    (let ((font (and style (get-font style))))
      (or font (nextmethod self))))

  
  ;;;
  ;;;; Style
  ;;;
  
  
  (method override (style-update self)
    (adjust-size self))

  
  ;;;
  ;;;; Layout
  ;;;
  
  
  (method override (preferred-size self)
    (let ((title (localize (label-title self))))
      (if (not title)
          (default-size self)
        (let ((font (effective-font self)))
          (let ((extent (text-extent font title)))
            (new Dimension
              (get-width extent)
              ;; quick usage of shadow-height until
              ;; it is correctly part of getting extent
              (max 16 (+ (get-height extent) (shadow-height font)))))))))
  
  
  ;;;
  ;;;; Mouse Copy
  ;;;
  
  
  (method override (cursor-update self evt)
    (if (mouse-copy? self evt)
        (set-cursor :finger)
      (nextmethod self evt)))
  
  
  (method override (mouse-data self pos)
    title)
  
  
  ;;;
  ;;;; Drawing
  ;;;
  
  
  (method override (draw-background self surface context)
    (let ((skin (get-skin self)))
      (when (or background (neq? (get-background skin) 'none))
        (nextmethod self surface context))))
  
  
  (method override (draw self surface context)
    (let ((title (localize (or (label-title self) ""))))
      (let ((pos (justify-lazy (lambda () (get-text-extent surface title))
                               (lambda () (get-size self))
                               (if (pair? justification) justification (list justification 'center)))))
        (if style
            (let ((h (get-h pos))
                  (v (get-v pos))
                  (line-height (get-height self))
                  (tabs '())
                  (left 0)
                  (enabled? (view-enabled? self)))
              (draw-style style surface context title h v line-height tabs left enabled?))
          (when shadow?
            (draw-text surface (+ (get-h pos) 2) (+ (get-v pos) 2) title {Color Medium-Gray}))
          (let ((enabled? (view-enabled? self)))
            (draw-text surface (get-h pos) (get-v pos) title (text-color self) enabled?: enabled?))))))
  
  
  ;;;
  ;;;; Skin
  ;;;
  
  
  (method override (get-skin self)
    (find-skin 'ui:label))
  
  
  (method protected virtual (text-color self)
    (let ((skin (get-skin self)))
      (if enabled?
          (or color (get-text-color skin) {Color Black})
        {Color Dark})))
  
  
  ;;;
  ;;;; Descriptor
  ;;;
  
  
  (method meta override (get-class-descriptor self (context: context #f))
    (new jazz.ui.descriptors:Label-View-Descriptor))))
