;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Layout View
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.ui.view.Layout-View jazz


(import (jazz.designer)
        (jazz.geometry)
        (jazz.library)
        (jazz.ui))


(class Layout-View extends View
  
  
  (property layout-type          initialize #f             accessors explicit)
  (property layout-insets        initialize {Rect 0 0 0 0} accessors explicit)
  (property layout-justification initialize 'center        accessors explicit)
  (property layout-padding       initialize 0              accessors explicit)
  
  
  ;;;
  ;;;; Access
  ;;;
  
  
  (method public (get-layout-type)
    layout-type)
  
  
  (method public (set-layout-type type)
    (when (neq? type layout-type)
      (set! layout-type type)
      (when layout-type
        (layout-view))))
  
  
  (method public (get-layout-insets)
    layout-insets)
  
  
  (method public (set-layout-insets insets)
    (set! layout-insets insets)
    (when layout-type
      (layout-view)))
  
  
  (method public (get-layout-justification)
    layout-justification)
  
  
  (method public (set-layout-justification just)
    (set! layout-justification just)
    (when layout-type
      (layout-view)))
  
  
  (method public (get-layout-padding)
    layout-padding)
  
  
  (method public (set-layout-padding pad)
    (set! layout-padding pad)
    (when layout-type
      (layout-view)))

  
  ;;;
  ;;;; Outer
  ;;;
  
  
  (method override (inner? view)
    (and layout-type (memq? view children)))

  
  ;;;
  ;;;; Layout
  ;;;
  
  
  (method override (layout)
    (case layout-type
      ((#f))
      ((fill)
       (let ((position (fill-position))
             (size (fill-size)))
         (for-each (lambda (child)
                     (when (is? child View)
                       (set-position~ child position)
                       (set-size~ child size)))
                   children)))
      ((fit)
       (let ((child (first-child)))
         (when child
           (set-position~ child (rect-position layout-insets))
           (set-size-noevent (new Dimension
                               (+ (get-left~ layout-insets) (get-width~ child) (get-right~ layout-insets))
                               (+ (get-top~ layout-insets) (get-height~ child) (get-bottom~ layout-insets)))))))
      ((center)
       (let ((size (get-size)))
         (for-each (lambda (child)
                     (when (is? child View)
                       (let ((pos (center (get-size~ child) size)))
                         (set-position~ child pos))))
                   children)))
      ((justify)
       (let* ((bounds (get-bounds))
              (rect (expand-rect bounds (get-left~ layout-insets) (get-top~ layout-insets) (- (get-right~ layout-insets)) (- (get-bottom~ layout-insets))))
              (topleft (rect-position rect))
              (size (rect-size rect)))
         (for-each (lambda (child)
                     (when (is? child View)
                       (let* ((justification (either (get-location~ child) layout-justification))
                              (pos (nu+ topleft (justify (get-size~ child) size justification))))
                         (set-position~ child pos))))
                   children)))
      ((border)
       (let ((ly (new Border-Layout insets: layout-insets padding: layout-padding)))
         (layout~ ly children (get-width) (get-height))))
      ((snap)
       (let ((ly (new Snap-Layout insets: layout-insets justification: layout-justification padding: layout-padding)))
         (layout~ ly self children (get-width) (get-height))))
      ((flow)
       (let ((ly (new Flow-Layout insets: layout-insets justification: layout-justification padding: layout-padding)))
         (layout~ ly children (get-width) (get-height))))
      ((box)
       (let ((ly (new Flow-Layout insets: layout-insets justification: layout-justification padding: layout-padding fill?: #t)))
         (layout~ ly children (get-width) (get-height))))
      (else
       (error "Unknown layout type: {s}" layout-type))))
  
  
  (method protected virtual (fill-position) <Point>
    (new Point (get-left~ layout-insets) (get-top~ layout-insets)))
  
  
  (method protected virtual (fill-size) <Dimension>
    (- (get-size) (new Dimension (+ (get-left~ layout-insets) (get-right~ layout-insets)) (+ (get-top~ layout-insets) (get-bottom~ layout-insets)))))
  
  
  ;;;
  ;;;; Descriptor
  ;;;
  
  
  (method meta override (get-class-descriptor)
    (new Layout-View-Descriptor)))


;;;
;;;; Design
;;;


(submodule design


(import (jazz.designer))


(class Layout-View-Descriptor extends View-Descriptor
  
  
  @too-many-icons!
  (method override (class-image class)
    {Image-Resource "Layout"})
  
  
  (method override (class-property-presentation class property)
    (case (field-name property)
      ((layout-type)          "Layout Type")
      ((layout-insets)        "Layout Insets")
      ((layout-justification) "Layout Justification")
      ((layout-padding)       "Layout Padding")
      (else (nextmethod class property))))
    
  
  (method override (class-get-domain class property)
    (case (field-name property)
      ((layout-type) (new Type-Combo-Domain))
      ((layout-justification) (new Justification-Combo-Domain))
      ((layout-insets) (new Rect-Domain))
      (else (nextmethod class property)))))


;;;
;;;; Type-Combo-Domain
;;;


(class Type-Combo-Domain extends Enumeration-Domain
  
  
  (definition Choices
    '((() "None")
      (fill "Fill")
      (fit "Fit")
      (center "Center")
      (justify "Justify")
      (border "Border")
      (snap "Snap")
      (flow "Flow")
      (box "Box")))
  
  
  (method override (initialize . rest)
    (apply nextmethod rest)
    (set-choices Choices)))


;;;
;;;; Justification-Combo-Domain
;;;


(class Justification-Combo-Domain extends Enumeration-Domain
  
  
  (definition Choices
    '((() "None")
      (head "Head")
      (center "Center")
      (tail "Tail")
      ((head head) "Head Head")
      ((head center) "Head Center")
      ((head tail) "Head Tail")
      ((center head) "Center Head")
      ((center center) "Center Center")
      ((center tail) "Center Tail")
      ((tail head) "Tail Head")
      ((tail center) "Tail Center")
      ((tail tail) "Tail Tail")))
  
  
  (method override (initialize . rest)
    (apply nextmethod rest)
    (set-choices Choices)))))
