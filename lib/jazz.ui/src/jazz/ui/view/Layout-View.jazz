;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Layout View
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.ui.view.Layout-View jazz


(import (jazz.geometry)
        (jazz.layout)
        (jazz.view))


(class Layout-View extends View
  
  
  ;; fill    : make every child fill the layout
  ;; fit     : fit layout around children
  ;; center  : center children in layout
  ;; justify : justify children in layout
  ;; border  : west north right south center layout
  ;; snap    : snap around a center and adjust layout
  ;; flow    : flow the children accross the layout
  ;; box
  ;; gravity
  ;; radial
  (property layout-type          initialize #f             accessors explicit)
  (property layout-insets        initialize {Rect 0 0 0 0} accessors explicit)
  (property layout-justification initialize 'center        accessors explicit)
  (property layout-padding       initialize 0              accessors explicit)
  (property layout-fit           initialize #f             accessors explicit)
  
  
  ;;;
  ;;;; Access
  ;;;
  
  
  (method public (get-layout-type self)
    layout-type)
  
  
  (method public (set-layout-type self type)
    (when (neq? type layout-type)
      (set! layout-type type)
      (when layout-type
        (layout-view self))))
  
  
  (method public (get-layout-insets self)
    layout-insets)
  
  
  (method public (set-layout-insets self insets)
    (set! layout-insets insets)
    (when layout-type
      (layout-view self)))
  
  
  (method public (get-layout-justification self)
    layout-justification)
  
  
  (method public (set-layout-justification self just)
    (set! layout-justification just)
    (when layout-type
      (layout-view self)))
  
  
  (method public (get-layout-padding self)
    layout-padding)
  
  
  (method public (set-layout-padding self pad)
    (set! layout-padding pad)
    (when layout-type
      (layout-view self)))
  
  
  (method public (get-layout-fit self)
    layout-fit)
  
  
  (method public (set-layout-fit self fit)
    (when (neq? fit layout-fit)
      (set! layout-fit fit)
      (when layout-fit
        (layout-view self))))

  
  ;;;
  ;;;; Widget
  ;;;
  
  
  (method override (inner? self view)
    #f
    @old-inner
    (and layout-type (memq? view children)))

  
  ;;;
  ;;;; Layout
  ;;;
  
  
  (method (fill-layout self)
    (let ((op (case layout-justification
                ((horizontal) layout-fill-horizontal)
                ((vertical) layout-fill-vertical)
                (else layout-fill))))
      (op (get-views self) (fill-position self) (fill-size self))))
  
  
  (method override (layout self)
    (case layout-type
      ((#f))
      ((gravity)) ;; done in resize
      ((fill)
       (fill-layout self))
      ((fit)
       (let ((ly (new Fit-Layout insets: layout-insets)))
         (layout ly self)))
      ((center)
       (let ((size (get-size self)))
         (for-each (lambda (child)
                     (when (is? child View)
                       (let ((pos (center (get-size child) size)))
                         (set-position child pos))))
                   children)))
      ((justify)
       (let* ((bounds (get-bounds self))
              (rect (expand-rect bounds (get-left layout-insets) (get-top layout-insets) (- (get-right layout-insets)) (- (get-bottom layout-insets))))
              (topleft (rect-position rect))
              (size (rect-size rect)))
         (for-each (lambda (child)
                     (when (is? child View)
                       (let ((proportion (get-proportion child)))
                         (when proportion
                           (bind (width height) proportion
                             (define (adjust inner outer)
                               (cond ((eq? inner 'bounds)
                                      outer)
                                     ((pair? inner)
                                      (bind (bounds incr) inner
                                        (assert (eq? bounds 'bounds)
                                          (+ outer incr))))
                                     (else
                                      inner)))
                             
                             (let ((size (new Dimension
                                           (adjust width (get-width size))
                                           (adjust height (get-height size)))))
                               (set-size child size)))))
                       (let ((justification (or (get-location child) layout-justification)))
                         (unless (eq? justification 'none)
                           (cond ((eq? justification 'fill)
                                  (set-position child {Point 0 0})
                                  (set-size child size))
                                 ((and (pair? justification)
                                       (eq? (car justification) 'attach))
                                  (let ((linked (find-component self (cadr justification)))
                                        (spacing 42))
                                    (case (get-layout-justification linked)
                                      ((horizontal)
                                       (let ((pos (nu+ (get-position linked) (new Dimension (+ (get-width linked) spacing) 0))))
                                         (set-position child pos)))
                                      ((vertical)
                                       (let ((pos (nu+ (get-position linked) (new Dimension 0 (+ (get-height linked) spacing)))))
                                         (set-position child pos)))
                                      (else
                                       (error "Unsupported justification: {s}" (get-layout-justification linked))))))
                                 (else
                                  (let ((pos (nu+ topleft (justify (get-size child) size justification))))
                                    (set-position child pos))))))))
                   children)))
      ((border)
       (let ((ly (new Border-Layout insets: layout-insets padding: layout-padding fit: layout-fit justification: layout-justification)))
         (layout ly children (get-width self) (get-height self))))
      ((snap)
       (let ((ly (new Snap-Layout insets: layout-insets justification: layout-justification padding: layout-padding)))
         (layout ly self children (get-width self) (get-height self))))
      ((flow)
       (let ((ly (new Flow-Layout insets: layout-insets justification: layout-justification padding: layout-padding)))
         (layout ly children (get-width self) (get-height self))))
      ((box)
       (let ((ly (new Flow-Layout insets: layout-insets justification: layout-justification padding: layout-padding fill?: #t)))
         (layout ly children (get-width self) (get-height self))))
      ((radial)
       (let ((ly (new Radial-Layout insets: layout-insets justification: layout-justification padding: layout-padding)))
         (layout ly children (get-width self) (get-height self))))
      (else
       (error "Unknown layout type: {s}" layout-type)))
    (adjust self))
  
  
  (method override (resize self dh dv)
    (define (expand-location location)
      (define (invalid)
        (error "Ill-formed location property: {s}" location))
      
      (cond ((not location)
             (values #f #f))
            ((pair? location)
             (bind (h-location v-location) location
               (values (case h-location
                         ((move fill #f)
                          h-location)
                         (else
                          (invalid)))
                       (case v-location
                         ((move fill #f)
                          v-location)
                         (else
                          (invalid))))))
            ((symbol? location)
             (case location
               ((move)   (values 'move 'move))
               ((h-move) (values 'move #f))
               ((v-move) (values #f 'move))
               ((fill)   (values 'fill 'fill))
               ((h-fill) (values 'fill #f))
               ((v-fill) (values #f 'fill))
               (else     (invalid))))
            (else
             (invalid))))
    
    (define (resize-child view location)
      (receive (h-location v-location) (expand-location location)
        (move-figure view
          (if (eq? h-location 'move) dh 0)
          (if (eq? v-location 'move) dv 0))
        (size-figure view
          (if (eq? h-location 'fill) dh 0)
          (if (eq? v-location 'fill) dv 0))))
    
    (nextmethod self dh dv)
    (when (eq? layout-type 'gravity)
      (for-each (lambda (child)
                  (when (is? child View)
                    (let ((location (get-location child)))
                      (when location
                        (resize-child child location)))))
                (get-children self))))
  
  
  (method override (adjust? self)
    (boolean layout-fit))
  
  
  (method override (adjust-fit self)
    (when layout-fit
      (layout-view self)
      (let ((scroller (get-scroller self)))
        (when scroller
          (update-scrollbars self)))))
  
  
  (method override (adjust self)
    (case layout-fit
      ((#f))
      ((around)
       (let ((left #f)
             (top #f)
             (right 0)
             (bottom 0))
         (for-each (lambda (child)
                     (when (and (is? child View) (get-visible? child))
                       (let ((rect (get-rect child)))
                         (set! left (if (not left) (get-left rect) (min left (get-left rect))))
                         (set! top (if (not top) (get-top rect) (min top (get-top rect))))
                         (set! right (max right (get-right rect)))
                         (set! bottom (max bottom (get-bottom rect))))))
                   children)
         (if (not left)
             (set-size self (new Dimension
                         (+ (get-left layout-insets) (get-right layout-insets))
                         (+ (get-top layout-insets) (get-bottom layout-insets))))
           (let ((dh (- (get-left layout-insets) left))
                 (dv (- (get-top layout-insets) top)))
             (for-each (lambda (child)
                         (when (and (is? child View) (get-visible? child))
                           (move-figure child dh dv)))
                       children))
           (let ((size (new Dimension
                         (+ (get-left layout-insets) (- right left) (get-right layout-insets))
                         (+ (get-top layout-insets) (- bottom top) (get-bottom layout-insets)))))
             (set-size self size)))))))
  
  
  (method protected virtual (fill-position self) <Point>
    (new Point (get-left layout-insets) (get-top layout-insets)))
  
  
  (method protected virtual (fill-size self) <Dimension>
    (- (get-size self) (new Dimension (+ (get-left layout-insets) (get-right layout-insets)) (+ (get-top layout-insets) (get-bottom layout-insets)))))
  
  
  ;;;
  ;;;; Descriptor
  ;;;
  
  
  (method override (get-location-choices self)
    (case layout-type
      ((gravity) '(move h-move v-move fill h-fill v-fill (move fill) (fill move)))
      ((justify) '(<offset> (<width-offset> <height-offset>)))
      ((border snap) '(north south west east center))
      ((flow box) '(head center tail (head <offset>) (center <offset>) (tail <offset>)))
      (else #f)))
  
  
  (method meta override (get-class-descriptor self (context: context #f))
    (new jazz.ui.descriptors:Layout-View-Descriptor))))
