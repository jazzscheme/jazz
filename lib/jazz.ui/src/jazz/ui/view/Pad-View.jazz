;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Pad View
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library protected jazz.ui.view.Pad-View jazz


(import (jazz.ui))


(class Pad-View extends View
  
  
  ;;;
  ;;;; Layout
  ;;;


  (method override (size-change size)
    (nextmethod size)
    (layout-view))
  
  
  (method override (layout)
    (let* ((size (get-size))
           (proc
            (lambda (child visible?)
              (set-visible?~ child visible?)
              (set-position~ child {Point 0 0})
              (set-size~ child size))))
      (for-each (lambda (child)
                  (when (eq? (get-location~ child) 'selection)
                    (proc child #t)))
                children)
      (for-each (lambda (child)
                  (when (neq? (get-location~ child) 'selection)
                    (proc child #f)))
                children)))
  
  
  ;;;
  ;;;; Children
  ;;;
  
  
  (method public (add-view view)
    (set-parent~ view self))
  
  
  (method public (remove-view view)
    (set-parent~ view {}))
    
  
  (method public (remove-children)
    (for-each (lambda (child)
                (set-visible?~ child #f)
                (set-parent~ child {})
                (when (is? child Host-View)
                  (host-uninstall~ (get-guest~ child))))
              children))

  
  ;;;
  ;;;; Selected
  ;;;
  
  
  (method public (get-selection)
    (find-if (lambda (child)
               (eq? (get-location~ child) 'selection))
             children))
  
  
  (method public (set-selection target)
    (for-each (lambda (child)
                (set-location~ child (if (eq? child target) 'selection {})))
              children)
    (layout-view))
  
  
  (method public (select-next)
    (let ((next (next-child (get-selection))))
      (set-selection next)
      (focus-host~ (get-host~ next))
      next))))
