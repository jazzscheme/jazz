;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Push Buttons
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.ui.view.Push-Button jazz


(import (jazz.geometry)
        (jazz.graphic)
        (jazz.jml)
        (jazz.locale)
        (jazz.skin)
        (jazz.view))


(class Push-Button extends View
  
  
  (property default? initialize #f accessors explicit)
  (property flat?    initialize #f accessors generate)
  
  
  (slot state initialize 'inactive)
  
  
  (form
    (<install> background: {Color Medium}))
  
  
  (method override (mouse-activate?)
    #f)
  
  
  ;;;
  ;;;; Access
  ;;;
  
  
  (method public (get-default?)
    default?)
  
  
  (method public (set-default? flag)
    (set! default? flag)
    (invalidate-view))


  ;;;
  ;;;; State
  ;;;
  
  
  (method public (get-state)
    state)
  
  
  (method public (set-state value)
    (set! state value)
    (invalidate-view))
  
  
  ;;;
  ;;;; Layout
  ;;;
  
  
  (method override (default-size)
    {Dimension 100 22})
  
  
  (method override (preferred-size)
    (let ((title (localize title)))
      (if (not title)
          (default-size)
        (new Dimension (+ (get-width~ (text-extent~ (effective-font) title)) 50) 22))))
  
  
  ;;;
  ;;;; Mouse
  ;;;


  (method override (mouse-enter)
    (when (and (view-enabled?) (or (not mouse-down?) (eq? mouse-down-view self)))
      (case (get-state)
        ((inactive) (set-state 'highlighted))
        ((out-pushed) (set-state 'pushed)))))


  (method override (mouse-leave)
    (when (and (view-enabled?) (or (not mouse-down?) (eq? mouse-down-view self)))
      (case (get-state)
        ((highlighted) (set-state 'inactive))
        ((pushed) (set-state 'out-pushed)))))
  
  
  (method override (mouse-down evt)
    (when (view-enabled?)
      (set-state 'pushed)))
  
  
  (method override (drag-up evt . rest)
    (when (view-enabled?)
      (unwind-protect
          (up)
        (case (get-state)
          ((pushed) (set-state 'highlighted))
          ((out-pushed) (set-state 'inactive))))))


  (method (up)
    (when (eq? (get-state) 'pushed)
      (process-action self)))
  
  
  ;;;
  ;;;; Drawing
  ;;;
  
  
  (method override (draw-background surface context)
    (let ((skin (get-skin)))
      (when (neq? (get-background~ skin) 'none)
        (nextmethod surface context))))
  
  
  (method override (draw surface context)
    (let ((title (or (localize title) ""))
          (offset (case state ((pushed) 1) (else 0)))
          (rect (get-bounds))
          (skin (get-skin))
          (enabled? (view-enabled?)))
      (let ((background? (neq? (get-background~ skin) 'none)))
        (when default?
          (when background?
            (frame-rect~ surface rect (if enabled? {Color Black} {Color Dark}))
            (set! rect (inflate-rect rect -1 -1))))
        (if (not background?)
            (unless (eq? style 'text)
              (frame-rect~ surface rect {Color red: 100 green: 100 blue: 100})
              (let ((from (if enabled? {Color Dark-Red alpha: .5} {Color Dark alpha: .5}))
                    (to {Color red: 0 green: 0 blue: 0 alpha: .5}))
                (gradient-fill-rect~ surface (inflate-rect rect -1 -1) (list (list 0 from) (list 1 to)) direction: 'vertical)))
          (if flat?
              (draw-edge~ surface rect outer: 'raised edges: 'rectangle)
            (draw-push-button~ surface rect (if (eq? state 'pushed) #t #f))))
        (let* ((size (get-size))
               (width (get-width~ size))
               (height (get-height~ size))
               (extent (get-text-extent~ surface title))
               (h (quotient (- width (get-width~ extent)) 2))
               (v (- (quotient (- height (get-height~ extent)) 2) (if (eq? style 'text) 1 0)))
               (color (if background?
                          (if enabled? {Color Black} {Color Dark})
                        (if enabled? {Color red: .809 green: .701 blue: .263} {Color red: 130 green: 130 blue: 130}))))
          (when (not background?)
            (set-font~ surface {Font Label-User}))
          (draw-text~ surface (+ h offset) (+ v offset) title color enabled?: enabled?)))))
  
  
  ;;;
  ;;;; Skin
  ;;;
  
  
  (method override (get-skin)
    (find-skin 'ui:button))
  
  
  ;;;
  ;;;; Descriptor
  ;;;
  
  
  (method meta override (get-class-descriptor (context: context #f))
    (new jazz.ui.descriptors:Push-Button-Descriptor))))
