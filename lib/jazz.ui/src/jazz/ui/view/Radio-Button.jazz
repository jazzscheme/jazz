;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Radio Buttons
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2012
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.ui.view.Radio-Button jazz


(import (jazz.geometry)
        (jazz.graphic)
        (jazz.jml)
        (jazz.locale)
        (jazz.ui))


(class Radio-Button extends View implements (Groupable Selectable)
  
  
  (definition box-size
    13)
  
  
  (property set              initialize #f accessors generate)
  (property group            initialize #f accessors explicit)
  (property selected?        initialize #f accessors explicit)
  (property radio-background initialize #f accessors generate)
  (property editable?        initialize #t accessors generate)
  
  
  (slot tracking? initialize #f)
  (slot inside?   initialize #f)
  
  
  (method override (default-size)
    {Dimension 100 16})

  
  ;;;
  ;;;; Groupable
  ;;;


  (method override (get-group)
    group)


  (method override (set-group value)
    (set! group value))

  
  ;;;
  ;;;; Selectable
  ;;;


  (method override (get-selected?)
    selected?)
  

  (method override (set-selected? flag)
    (when (neq? flag selected?)
      (let ((current (get-current-selection)))
        (set-selected-state flag)
        (when current
          (set-selected-state~ current (not flag))))))
  
  
  (method override (unselect)
    (when selected?
      (set-selected-state #f)))
  
  
  (method (get-current-selection)
    (continuation-capture
      (lambda (return)
        (for-each-button
          (lambda (button)
            (when (get-selected?~ button)
              (continuation-return return button))))
        #f)))
  
  
  (method (for-each-button proc)
    (for-each (lambda (child)
                (when (and (is? child Radio-Button)
                           (eqv? group (get-group~ child)))
                  (proc child)))
              (if set
                  (get-members~ set)
                (get-children~ parent))))
  
  
  (method (set-selected-state flag)
    (set! selected? flag)
    (invalidate-view))
  
  
  ;;;
  ;;;; State
  ;;;
  
  
  (method (process-change-state)
    (set-selected? #t)
    (set-modified? #t)
    (if (not outline-view)
        (process-action self)
      (process-action~ outline-view self)))

  
  ;;;
  ;;;; Layout
  ;;;
  
  
  (method override (preferred-size)
    (let ((title (localize title)))
      (if (not title)
          (default-size)
        (let ((extent (text-extent~ (effective-font) title)))
          (new Dimension
            (+ 20 (get-width~ extent))
            (max 18 (get-height~ extent)))))))
  
  
  (method (box-rect)
    (let* ((title (or (localize title) ""))
           (height (if (or (not title) (empty-string? title)) 13 (get-height~ (text-extent~ (effective-font) title))))
           (h 18)
           (v (quotient (- (get-height) height) 2)))
      (new Rect 0 (+ v 1) box-size (+ v box-size 1))))
  
  
  ;;;
  ;;;; Drawing
  ;;;
  
  
  (method override (draw surface context)
    (define (effective-selected?)
      (if (not outline-view)
          (getf context selected?:)
        (cell-selected?~ (outline-column) context)))
    
    (let* ((title (or (localize title) ""))
           (extent (get-text-extent~ surface title))
           (height (if (or (not title) (empty-string? title)) 13 (get-height~ extent)))
           (h 18)
           (v (quotient (- (get-height) height) 2)))
      (let ((enabled? (view-enabled?)))
        (draw-radio-button~ surface (new Rect 0 (+ v 1) box-size (+ v box-size 1)) selected?: selected? inactive?: (or (not enabled?) (and tracking? inside?)) radio-background: radio-background)
        (let* ((selected? (effective-selected?))
               (box-h 0)
               (box-v (quotient (- (get-height) (if extent (get-height~ extent) box-size)) 2))
               (text-h (+ 18 box-h))
               (text-v box-v))
          (when selected?
            (let ((color (if (is? outline-view Tree-View) (selection-color~ outline-view) {Color Focused-Selection}))
                  (rect
                   (if (and (is? outline-view Tree-View) (eq? (get-selection-mode~ outline-view) 'cell))
                       (new Rect (- text-h 3) (- text-v 2) (get-width) (+ text-v (get-height~ extent) 2))
                     (new Rect (- text-h 3) (- text-v 2) (+ text-h (get-width~ extent) 3) (+ text-v (get-height~ extent) 2)))))
              (fill-rect~ surface rect color)))
        (set-text-color~ surface (if enabled?
                                     (or (determine-color~ {Color Black} enabled? selected?)
                                         {Color White})
                                   {Color Dark}))
        (draw-text~ surface h v title enabled?)))))


  ;;;
  ;;;; Focus
  ;;;


  (method override (focus-gained)
    (nextmethod)
    (when outline-view
      (focus-gained~ outline-view)))


  (method override (focus-lost)
    (nextmethod)
    (when outline-view
      (focus-lost~ outline-view)))
  
  
  ;;;
  ;;;; Keyboard
  ;;;
  
  
  (method override (key-press evt)
    (case (get-key~ evt)
      ((#\space)
       (process-change-state))))
  
  
  (method override (arrow-press evt)
    (when outline-view
      (call-arrow-press~ outline-view evt)))
  
  
  (method override (return-press evt)
    (when outline-view
      (call-return-press~ outline-view evt)))
  
  
  (method override (escape-press evt)
    (when outline-view
      (call-escape-press~ outline-view evt)))
  
  
  ;;;
  ;;;; Mouse
  ;;;
  
  
  (method override (mouse-down evt)
    (when outline-view
      (outline-select))
    (when (and (view-enabled?) editable? (or (not outline-view) (in-rect? (get-position~ evt) (box-rect))))
      (set! tracking? #t)
      (set! inside? #t)
      (acquire-capture)
      (invalidate-view)))
  
  
  (method override (drag-move evt)
    (when tracking?
      (let ((over? (over-view? (get-position~ evt))))
        (when (neq? over? inside?)
          (set! inside? over?)
          (invalidate-view)))))
  
  
  (method override (drag-up evt . rest)
    (when tracking?
      (release-capture)
      (set! tracking? #f)
      (when inside?
        (process-change-state))))
  
  
  ;;;
  ;;;; Descriptor
  ;;;
  
  
  (method meta override (get-class-descriptor (context: context #f))
    (new Radio-Button-Descriptor)))


;;;
;;;; Design
;;;


(submodule design


(import (jazz.designer))


(class Radio-Button-Descriptor extends View-Descriptor
  
  
  (form
    (<install>
      (<properties~>                                  default: title
        (<Property-Descriptor> name: set              nullable?: #t
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: group            nullable?: #t
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: selected?
          (<Boolean-Domain>    name: domain))
        (<Property-Descriptor> name: editable?
          (<Boolean-Domain>    name: domain))
        (<Property-Descriptor> name: radio-background
          (<Color-Domain>      name: domain           nullable?: #t))))))))
