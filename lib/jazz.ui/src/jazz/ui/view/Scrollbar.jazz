;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Scrollbars
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;    Assem Hakmeh
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.ui.view.Scrollbar jazz


(import (jazz.event)
        (jazz.geometry)
        (jazz.graphic)
        (jazz.skin)
        (jazz.ui)
        (jazz.view))


(class Scrollbar extends View
  
  
  (definition autorepeat-delay
    0.3)
  
  (definition autorepeat-period
    0.001)
  
  
  (property orientation         initialize 'vert       accessors explicit)
  (property pos         <fx>    initialize 0           accessors explicit)
  (property range       <Range> initialize {Range 0 9} accessors explicit)
  (property line-height <fx>    initialize 1           accessors explicit)
  (property page-height <fx>    initialize 3           accessors explicit)
  (property flat?       <bool>  initialize #f          accessors explicit)
  (property scroll-proc         initialize #f          accessors generate)
  
  
  (slot tracking?          initialize #f)
  (slot tracking-start     initialize #f)
  (slot tracking-start-pos initialize #f)
  (slot autorepeat-pulse   initialize #f)

  
  (method override (print self output readably)
    (print-unreadable self output
      (lambda (output)
        (format output "{a} {a} {a} {a}" position size pos range))))
  
  
  ;;;
  ;;;; Access
  ;;;


  (method public (get-orientation self)
    orientation)
  

  (method public (set-orientation self orient)
    (when (neq? orient orientation)
      (set! orientation orient)
      (invalidate-view self)))


  (method public (get-pos self) <fx>
    pos)
  

  (method public (set-pos self p <fx> (redraw?: redraw? #f))
    (define (min-pos) <fx>
      (get-start range))
    
    (define (max-pos) <fx>
      (- (get-end range) page-height))
    
    (let ((new-pos (max (min p (max-pos)) (min-pos))))
      (when (/= new-pos pos)
        (set! pos new-pos)
        (if (cond-expand
              (mac #t)
              (else redraw?))
            (redraw-scrollbar self)
          (invalidate-view self)))))


  (method public (get-range self) <Range>
    range)
  

  (method public (set-range self rg)
    (when (not (range=? rg range)) @parameterized-fix-me (/= rg range)
      (set! range rg)
      (invalidate-view self)))


  (method public (get-line-height self) <fx>
    line-height)
  

  (method public (set-line-height self height)
    (when (/= height line-height)
      (set! line-height height)
      (invalidate-view self)))


  (method public (get-page-height self) <fx>
    page-height)
  

  (method public (set-page-height self height)
    (when (/= height page-height)
      (set! page-height height)
      (invalidate-view self)))
  
  
  (method public (set-info self min max line page)
    (set-range self (new Range min max))
    (set-line-height self line)
    (set-page-height self page))
  

  (method public (get-flat? self) <bool>
    flat?)


  (method public (set-flat? self value)
    (when (neq? value flat?)
      (set! flat? value)
      (invalidate-view self)))

  
  ;;;
  ;;;; Client
  ;;;
  
  
  (method public (get-client self)
    parent)
  
  
  ;;;
  ;;;; Scroll
  ;;;
  
  
  (method (call-scroll self action (thumb-pos #f))
    (if scroll-proc
        (scroll-proc self action line-height page-height thumb-pos orientation)
      (scroll-action (get-client self) action line-height page-height thumb-pos orientation)))
  
  
  ;;;
  ;;;; Line
  ;;;
  
  
  (method (line-up self)
    (call-scroll self 'line-up)
    (setup-autorepeat self 'line-up))
  
  
  (method (line-down self)
    (call-scroll self 'line-down)
    (setup-autorepeat self 'line-down))
  
  
  ;;;
  ;;;; Page
  ;;;
  
  
  (method (page-up self)
    (call-scroll self 'page-up)
    (setup-autorepeat self 'page-up))
  
  
  (method (page-down self)
    (call-scroll self 'page-down)
    (setup-autorepeat self 'page-down))

  
  ;;;
  ;;;; Geometry
  ;;;
  
  
  (method (get-breadth self) <fx>
    (case orientation
      ((vert) (get-width self))
      ((horz) (get-height self))))
  
  
  (method (get-extent self) <fx>
    (case orientation
      ((vert) (get-height self))
      ((horz) (get-width self))))
  
  
  (method (new-rect self left top right bottom) <Rect>
    (case orientation
      ((vert) (new Rect left top right bottom))
      ((horz) (new Rect top left bottom right))))
  
  
  (method (get-place self point) <fx>
    (case orientation
      ((vert) (get-v point))
      ((horz) (get-h point))))
  
  
  ;;;
  ;;;; Rectangles
  ;;;
  
  
  (method (up-rect self) <Rect>
    (let ((b (get-breadth self)))
      (new-rect self 0 0 b b)))
  
  
  (method (down-rect self) <Rect>
    (let ((b (get-breadth self))
          (e (get-extent self)))
      (new-rect self 0 (- e b) b e)))
  
  
  (method (thumb-range self)
    (let ((b (get-breadth self))
          (e (get-extent self))
          (r (- (get-end range) (get-start range))))
      (and (> r 0)
           (let* ((shaft (- e b b))
                  (thumb (max 6 (fxround (cast <fl> (* (min 1 (/ (cast <fl> page-height) r)) shaft)))))
                  (thumb-pos (+ b (fxround (cast <fl> (* (/ (cast <fl> pos) (- r page-height)) (- shaft thumb)))))))
             (values thumb-pos (+ thumb-pos thumb))))))
    
  
  (method (thumb-rect self)
    (let ((info (thumb-range self)))
      (and info
           (receive (start end) info
             (let ((b (get-breadth self)))
               (new-rect self 0 start b end))))))
  
  
  ;;;
  ;;;; Mouse
  ;;;
  
  
  (method override (mouse-activate? self)
    (let ((host (get-host self)))
      (and (is? host Internal-Frame-Host)
           (not (front? host)))))
  
  
  (method override (mouse-down self evt)
    (define (start-tracking pos)
      (set! tracking? #t)
      (set! tracking-start (get-place self pos))
      (set! tracking-start-pos (get-pos self)))
    
    (acquire-capture self)
    (let ((pos (get-position evt)))
      (cond ((in-rect? pos (up-rect self)) (line-up self))
            ((in-rect? pos (down-rect self)) (line-down self))
            ((in-rect? pos (thumb-rect self)) (start-tracking pos))
            (else
             (let ((place (get-place self pos))
                   (info (thumb-range self)))
               (when info
                 (receive (start end) info
                   (cond ((<= place start) (page-up self))
                         ((>= place end) (page-down self))))))))))
  
  
  (method override (drag-move self evt)
    (define (track-thumb)
      (let* ((b (get-breadth self))
             (e (get-extent self))
             (r (- (get-end range) (get-start range)))
             (dv (- (get-place self (get-position evt)) tracking-start))
             (shaft (- e b b))
             (dp (quotient (* dv r) shaft)))
        (call-scroll self 'thumb-track (+ tracking-start-pos dp))))
    
    (when tracking?
      (track-thumb)))
  
  
  (method override (drag-up self evt . rest)
    (define (end-tracking)
      (set! tracking? #f))
    
    (kill-autorepeat self)
    (release-capture self)
    (when tracking?
      (end-tracking)))
  
  
  ;;;
  ;;;; Drawing
  ;;;
  
  
  (definition Flat-Color
    #f)
  
  (definition Background-Color
    #f)
  
  
  (method (get-flat-color self)
    (unless Flat-Color
      (set! Flat-Color (flat-color)))
    Flat-Color)
  
  
  (definition (flat-color)
    (if (white? {Color Light})
        {Color red: 194 green: 188 blue: 176}
      {Color red: 200 green: 188 blue: 166}))
  
  
  (method (get-background-color self)
    (unless Background-Color
      (set! Background-Color (background-color)))
    Background-Color)
  
  
  (definition (background-color)
    (let ((color {Color Light}))
      (if (white? color)
          {Color red: 242 green: 240 blue: 227}
        color)))
  
  
  (method override (draw self surface <Surface> context)
    (define (draw-button rect direction)
      (draw-raised surface rect)
      (let ((inflated (inflate-rect rect -1 -1)))
        (fill-rect surface inflated (if (debug-paint?) (cycle-debug-color!) {Color Medium}))
        (set-color surface {Color Black})
        (let ((dh (if (eq? orientation 'horz) 1 0))
              (dv (if (eq? orientation 'horz) -1 0)))
          (draw-arrow-tip surface (+ (get-left inflated) 3 dh) (+ (get-top inflated) 4 dv) 3 direction))))
    
    (define (draw-plain-arrow rect direction)
      (let ((inflated (inflate-rect rect -1 -1))
            (dh (if (eq? orientation 'horz) 1 0))
            (dv (if (eq? orientation 'horz) -1 0)))
        (set-color surface {Color Entry-Border})
        (draw-arrow-tip surface (+ (get-left inflated) 2 dh) (+ (get-top inflated) 4 dv) 4 direction)))
    
    (let ((skin (get-skin self)))
      (let ((bounds (get-bounds self))
            (up-rect (up-rect self))
            (down-rect (down-rect self))
            (thumb-rect (thumb-rect self))
            (background (or (get-background skin) (get-background-color self)))
            (thumb (get-thumb skin))
            (flat? (get-flat? skin)))
        (when (neq? background 'none)
          (fill-background surface bounds (if (debug-paint?) (cycle-debug-color!) background)))
        (cond ((eq? background 'none)
               (draw-plain-arrow up-rect (case orientation ((vert) 'up) ((horz) 'left)))
               (draw-plain-arrow down-rect (case orientation ((vert) 'down) ((horz) 'right))))
              (flat?
               (draw-button up-rect (case orientation ((vert) 'up) ((horz) 'left)))
               (draw-button down-rect (case orientation ((vert) 'down) ((horz) 'right))))
              (else
               (draw-scroll-bar surface up-rect (case orientation ((vert) 'up) ((horz) 'left)))
               (draw-scroll-bar surface down-rect (case orientation ((vert) 'down) ((horz) 'right)))))
        (when thumb-rect
          (if flat?
              (if (eq? background 'none)
                  (frame-rect surface thumb-rect {Color Entry-Border})
                (draw-raised surface thumb-rect))
            (draw-edge surface thumb-rect inner: 'raised outer: 'raised edges: 'rectangle))
          (let ((width (if flat? 1 2)))
            (let ((inflated (inflate-rect thumb-rect (- width) (- width))))
              (when (neq? background 'none)
                (fill-background surface inflated (if (debug-paint?) (cycle-debug-color!) (or thumb {Color Medium}))))))
          @interesting
          (let* ((height (rect-height thumb-rect))
                 (v (+ (get-top thumb-rect) (quotient (- height 8) 2))))
            (set-color surface {Color Light})
            (set-line-width surface 1)
            (line surface 3 v 8 v)
            (line surface 3 (+ v 3) 8 (+ v 3))
            (line surface 3 (+ v 6) 8 (+ v 6))
            (set-color surface {Color Dark})
            (line surface 4 (+ v 1) 9 (+ v 1))
            (line surface 4 (+ v 4) 9 (+ v 4))
            (line surface 4 (+ v 7) 9 (+ v 7)))))))

  
  ;;;
  ;;;; Skin
  ;;;
  
  
  (method override (get-skin self)
    (case style
      ((tool) (find-skin 'ui:scrollbar/tool))
      ((document) (find-skin 'ui:scrollbar/document))
      (else (find-skin 'ui:scrollbar))))

  
  ;;;
  ;;;; Opaqueness
  ;;;
  
  
  (method override (get-opaque? self)
    (let ((skin (get-skin self)))
      (let ((background (or (get-background skin) (get-background-color self))))
        (neq? background 'none))))
  
  
  ;;;
  ;;;; Auto Repeat
  ;;;


  (method (setup-autorepeat self action)
    (define (pulse-action)
      (case action
        ((line-up)   (line-up self))
        ((line-down) (line-down self))
        ((page-up)   (page-up self))
        ((page-down) (page-down self))))
    
    (when (not autorepeat-pulse)
      (set! autorepeat-pulse (new Pulse 'autorepeat autorepeat-period pulse-action delay: autorepeat-delay))))
  

  (method (kill-autorepeat self)
    (when autorepeat-pulse
      (close autorepeat-pulse)
      (set! autorepeat-pulse #f)))
  
  
  ;;;
  ;;;; Descriptor
  ;;;
  
  
  (method meta override (get-class-descriptor self (context: context #f))
    (new jazz.ui.descriptors:Scrollbar-Descriptor))))
