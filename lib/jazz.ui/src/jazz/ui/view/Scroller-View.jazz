;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Scroller Views
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.ui.view.Scroller-View jazz


(import (jazz.graphic)
        (jazz.ui)
        (jazz.ui.skin)
        (jazz.view))


(class Scroller-View extends Base-Container

  
  (property client   initialize #f accessors explicit)
  (property vscroll? initialize #f accessors generate)
  (property hscroll? initialize #f accessors generate)
  (property flat?    initialize #f accessors generate)
  
  
  (slot vscroll initialize #f getter generate)
  (slot hscroll initialize #f getter generate)
  
  
  (method override (default-name)
    'scroller)
  
  
  (method override (finish rest)
    (nextmethod rest)
    (unless client
      (set-client (get-scroll-client~ (get-content)))))
  
  
  (method override (form-model form)
    (case (get-name~ form)
      ((content) Scrollee-View)
      (else (nextmethod form))))

  
  ;;;
  ;;;; Client
  ;;;
  
  
  (method public (get-client)
    client)
  
  
  (method public (set-client clt)
    (when (neq? clt client)
      (set! client clt)
      (when client
        (invalidate-layout)
        (set-scroller~ client self)
        (layout-scrollee~ client))))
  
  
  ;;;
  ;;;; Widget
  ;;;
  
  
  (method override (inner? view)
    (or (nextmethod view)
        (eq? view vscroll)
        (eq? view hscroll)))
  
  
  (method override (content-inner? view)
    #t)

  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method override (size-change size)
    (nextmethod size)
    ;; If the client is not the content as for tree headers, then let the
    ;; client container's own size-change take care of laying out the scrolle...
    (when (and client (eq? client (get-client~ (get-content))))
      (layout-scrollee~ client)
      (layout-scrollee-patch~ client)))
  
  
  ;;;
  ;;;; Layout
  ;;;
  
  
  (method override (layout)
    (let ((v? (vscroll-active?))
          (h? (hscroll-active?)))
      (define (content-position size)
        {Point 0 0})
      
      (define (content-size size)
        (new Dimension
          (- (get-width~ size) (if v? scrollbar-size 0))
          (- (get-height~ size) (if h? scrollbar-size 0))))
      
      (define (vscroll-position size)
        (new Point (- (get-width~ size) scrollbar-size) 0))
      
      (define (vscroll-size size)
        (new Dimension scrollbar-size (- (get-height~ size) (if h? scrollbar-size 0))))
      
      (define (hscroll-position size)
        (new Point 0 (- (get-height~ size) scrollbar-size)))
      
      (define (hscroll-size size)
        (new Dimension (- (get-width~ size) (if v? scrollbar-size 0)) scrollbar-size))
      
      (let ((size (get-size)))
        (let ((content (find-child 'content)))
          (when content
            (set-position~ content (content-position size))
            (set-size~ content (content-size size))
            (when client
              (layout-scrollee~ client))))
        (when (and v? vscroll)
          (set-position~ vscroll (vscroll-position size))
          (set-size~ vscroll (vscroll-size size)))
        (when (and h? hscroll)
          (set-position~ hscroll (hscroll-position size))
          (set-size~ hscroll (hscroll-size size))))))
  

  ;;;
  ;;;; Drawing
  ;;;

  
  (method override (draw surface context)
    (when (and vscroll? hscroll?)
      (let ((look (find-look 'scrollbar)))
        (unless (eq? (get-background~ look) 'none)
          (let ((bounds (get-bounds)))
            (let ((r (get-right~ bounds))
                  (b (get-bottom~ bounds)))
              (let ((rect (new Rect (- r scrollbar-size) (- b scrollbar-size) r b)))
                (fill-rect~ surface rect {Color Medium}))))))))

  
  ;;;
  ;;;; Scroll
  ;;;
  
  
  (method override (set-scroll-pos pos (redraw?: redraw? #f))
    (when vscroll (set-pos~ vscroll (get-v~ pos) redraw?: redraw?))
    (when hscroll (set-pos~ hscroll (get-h~ pos) redraw?: redraw?)))
    
  
  (method override (set-scroll-info part min max line page)
    (case part
      ((vert) (when vscroll (set-info~ vscroll min max line page)))
      ((horz) (when hscroll (set-info~ hscroll min max line page)))))


  (method override (scroll-action action line page thumb-pos orientation)
    (define (scroll amount)
      (scroll~ client (case orientation
                        ((vert) (new Point 0 amount))
                        ((horz) (new Point amount 0)))
        redraw?: #t))
    
    (when client
      (case action
        ((line-up)     (scroll    line))
        ((line-down)   (scroll (- line)))
        ((page-up)     (scroll    page))
        ((page-down)   (scroll (- page)))
        ((thumb-track) (scroll (- (case orientation
                                    ((vert) (get-scrolled-distance-v~ client))
                                    ((horz) (get-scrolled-distance-h~ client)))
                                  thumb-pos))))))


  ;;;
  ;;;; Scrollbar
  ;;;
  
  
  (method (vscroll-active?)
    (and vscroll (get-visible?~ vscroll)))
  
  
  (method public (set-vscroll-needed? flag)
    (when (and vscroll? (neq? (boolean flag) (boolean (vscroll-active?))))
      (if flag
          (if vscroll
              (show~ vscroll)
            (set! vscroll (new Scrollbar parent: self orientation: 'vert flat?: flat? style: style)))
        (when vscroll
          (hide~ vscroll)))
      (layout-view)))
  
  
  (method (hscroll-active?)
    (and hscroll (get-visible?~ hscroll)))
  
  
  (method public (set-hscroll-needed? flag)
    (when (and hscroll? (neq? flag (boolean hscroll)))
      (if (not hscroll)
          (set! hscroll (new Scrollbar parent: self orientation: 'horz flat?: flat? style: style))
        (close~ hscroll)
        (set! hscroll #f))
      (layout-view)))
  
  
  ;;;
  ;;;; Descriptor
  ;;;
  
  
  (method meta override (get-class-descriptor (context: context #f))
    (new jazz.ui.designer:Scroller-View-Descriptor))))
