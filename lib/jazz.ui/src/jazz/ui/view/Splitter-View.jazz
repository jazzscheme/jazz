;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Splitter View
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.ui.view.Splitter-View jazz


(import (jazz.application)
        (jazz.event)
        (jazz.figure)
        (jazz.geometry)
        (jazz.graphic)
        (jazz.handler)
        (jazz.layout)
        (jazz.skin)
        (jazz.ui)
        (jazz.view)
        (jazz.window))


;;;
;;;; Splitter-View
;;;


(class Splitter-View extends View


  (property separator     initialize 'resize        accessors explicit)
  (property state         initialize 'split         accessors explicit)
  (property target        initialize #f             accessors explicit)
  (property orientation   initialize 'horz          accessors explicit)
  (property mode          initialize 'relative      accessors explicit)
  (property division      initialize 50             accessors explicit)
  (property insets        initialize {Rect 0 0 0 0} accessors explicit)
  (property after-handler initialize #f             accessors generate)
  (property preferences   initialize #f             accessors generate)
  
  
  (slot split-layout     initialize (new Split-Layout))
  (slot bar-bounds       initialize #f)
  (slot dragging?        initialize #f)
  (slot previous         initialize #f)
  (slot preserved-insets initialize #f accessors generate)

  
  ;;;
  ;;;; Access
  ;;;
  
  
  (method public (get-separator self)
    separator)
  
  
  (method public (set-separator self value)
    (set! separator value)
    (when (get-finished? self)
      (layout-view self)))
  
  
  (method public (get-state self)
    state)
  
  
  (method public (set-state self value)
    (set! state value)
    (when (get-finished? self)
      (layout-view self)))
  
  
  (method public (get-target self)
    target)
  
  
  (method public (set-target self value)
    (set! target value)
    (when (get-finished? self)
      (layout-view self)))
  
  
  (method public (get-orientation self)
    orientation)
  
  
  (method public (set-orientation self value)
    (set! orientation value)
    (when (get-finished? self)
      (layout-view self)))
  
  
  (method public (get-mode self)
    mode)
  
  
  (method public (set-mode self value)
    (set! mode value)
    (when (get-finished? self)
      (layout-view self)))
  
  
  (method public (get-division self)
    division)
  
  
  (method public (set-division self value)
    (set! division value)
    (when (get-finished? self)
      (layout-view self)))
  
  
  (method public (get-insets self)
    insets)
  
  
  (method public (set-insets self value)
    (set! insets value)
    (when (get-finished? self)
      (layout-view self)))

  
  ;;;
  ;;;; View
  ;;;
  
  
  (method override (default-size self)
    {Dimension 400 200})

  
  ;;;
  ;;;; Layout
  ;;;


  (method override (size-change self size)
    (nextmethod self size)
    (layout-view self))

  
  (method override (layout self)
    (unless (null? children)
      (let ((size (get-size self))
            (mode (if dragging? 'absolute mode)))
        (set! bar-bounds (layout split-layout self children (get-width size) (get-height size) separator: separator state: state target: target orientation: orientation mode: mode division: division insets: insets)))))

  
  ;;;
  ;;;; Children
  ;;;
  
  
  (method public (remove-children self)
    (for-each (lambda (child)
                (when (is? child Splitter-View)
                  (remove-children child))
                (when (is? child Pad-View)
                  (remove-children child))
                (if (is? child Splitter-View)
                    (close child)
                  (set-visible? child #f)
                  (set-parent child #f)
                  (when (is? child Host-View)
                    (host-uninstall (get-guest child)))))
              children))

  
  ;;;
  ;;;; Widget
  ;;;
  
  
  @not-correct
  (method override (inner? view)
    (memq? view children))
  
  
  ;;;
  ;;;; Workspace
  ;;;
  
  
  (method public (workspace-zoomable? self view)
    (let ((brother (brother-view self view)))
      (or (is-not? brother Host-View)
          (let ((guest (get-guest brother)))
            (workspace-minimisable? guest)))))
  
  
  (method public (brother-view self view)
    (find-if (lambda (child)
               (neq? child view))
             children))

  
  ;;;
  ;;;; Zoom
  ;;;
  
  
  (method public (get-zoomable? self)
    (assert preferences)
    (get-zoomable? preferences))
  
  
  (method public (zoomed? self)
    (eq? state 'zoom))
  
  
  (method public (zoom self view)
    (set! state 'zoom)
    (set! target view)
    (layout-view self))
  
  
  (method public (rezoom self)
    (set! state 'zoom)
    (layout-view self))
  
  
  (method public (unzoom self)
    (set! state 'split)
    (layout-view self))
  
  
  (method public (toggle-zoom self target)
    (with-locked-update
      (lambda ()
        (if (eq? state 'split)
            (zoom self target)
          (unzoom self)))))
  
  
  (method public (get-effective-target self)
    (if (is? target Figure)
        target
      (find-located self target)))
  
  
  ;;;
  ;;;; Cursor
  ;;;


  (method override (cursor-update self evt)
    (let ((pos (get-position evt)))
      (if (and (eq? separator 'resize) bar-bounds (or dragging? (in-rect? pos bar-bounds)))
          (case orientation
            ((horz) (set-cursor :vertical-splitter))
            ((vert) (set-cursor :horizontal-splitter)))
        (nextmethod self evt))))
  

  ;;;
  ;;;; Drawing
  ;;;
  
  
  (method override (draw self surface context)
    (let ((skin (get-skin self)))
      (let ((background (get-background skin)))
        (when (and (eq? state 'split) bar-bounds)
          (unless (eq? background 'none)
            (if background
                (fill-rect surface bar-bounds (if (debug-paint?) (cycle-debug-color!) background))
              (case separator
                ((resize)
                 (fill-rect surface bar-bounds {Color Medium}))
                ((edge)
                 (case orientation
                   ((horz) (draw-edge surface bar-bounds inner: 'raised outer: 'sunken edges: '(left)))
                   ((vert) (draw-edge surface bar-bounds inner: 'raised outer: 'sunken edges: '(top)))))
                ((line)
                 (case orientation
                   ((horz) (draw-edge surface bar-bounds inner: 'raised edges: '(left)))
                   ((vert) (draw-edge surface bar-bounds inner: 'raised edges: '(top)))))))))
        (when (not (empty-rect? insets))
          (fill-insets surface (get-bounds self) insets (if (debug-paint?) (cycle-debug-color!) (or background {Color Medium})))))))
  
  
  ;;;
  ;;;; Skin
  ;;;
  
  
  (method override (get-skin self)
    (case style
      ((document) (find-skin 'ui:splitter/document))
      (else (find-skin 'ui:splitter))))
  
  
  ;;;
  ;;;; Conversion
  ;;;
  
  
  (method (absolute->relative self division)
    (let ((size (case orientation
                  ((horz) (get-width self))
                  ((vert) (get-height self)))))
      (percentage division size)))
  
  
  (method (relative->absolute self division)
    (let* ((size (case orientation
                   ((horz) (get-width self))
                   ((vert) (get-height self))))
           (pct (fxround (percent (abs division) size))))
      (if (positive? division)
          (set! division pct)
        (set! division (- size pct)))
      division))
  
  
  ;;;
  ;;;; Mouse
  ;;;
  
  
  (method override (mouse-down self evt)
    (let ((pos (get-position evt)))
      (when (and (eq? separator 'resize) bar-bounds (in-rect? pos bar-bounds))
        (set! dragging? #t)
        (set! previous (case orientation ((horz) (get-h pos)) ((vert) (get-v pos))))
        (when (eq? mode 'relative)
          (set! division (relative->absolute self division)))
        (acquire-capture self))))
  
  
  (method override (drag-move self evt)
    (when dragging?
      (let* ((pos (get-position evt))
             (n (case orientation ((horz) (get-h pos)) ((vert) (get-v pos))))
             (delta (- n previous))
             (size (case orientation ((horz) (get-width (get-size self))) ((vert) (get-height (get-size self)))))
             (limit (quotient size 20))
             (new-division (+ division delta)))
        (when (= (sign division) (sign new-division))
          (set! division (cond ((> (abs new-division) (- size limit))
                                (* (- size limit) (sign new-division)))
                               ((< (abs new-division) limit)
                                (* limit (sign new-division)))
                               (else
                                new-division)))
          (set! previous n)
          (parameterize ((inhibit-layouts? #t)
                         (inhibit-invalidates? #t))
            (layout-view self))
          (redraw-view self)
          (call-after-handler self)))))
  
  
  (method override (drag-up self evt . rest)
    (define (save-preferences)
      (let ((designer (get-workspaces-designer (current-application))))
        (when (and preferences designer @wait (descendant-owned-by-reference? designer preferences))
          (set-property designer preferences 'division division))))
    
    (when dragging?
      (release-capture self)
      (when (eq? mode 'relative)
        (set! division (absolute->relative self division)))
      (set! dragging? #f)
      (save-preferences)))
 
  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method (call-after-handler self)
    (when after-handler
      (invoke-handler self after-handler (make-event Event after: self))))
  
  
  ;;;
  ;;;; Descriptor
  ;;;
  
  
  (method override (get-location-choices self)
    '(first second))
  
  
  (method meta override (get-class-descriptor self (context: context #f))
    (new jazz.ui.descriptors:Splitter-View-Descriptor))))
