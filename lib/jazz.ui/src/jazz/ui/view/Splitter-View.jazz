;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Splitter View
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.ui.view.Splitter-View jazz


(import (jazz.geometry)
        (jazz.graphic)
        (jazz.jml)
        (jazz.library)
        (jazz.system)
        (jazz.ui)
        (jazz.ui.skin)
        (jazz.ui.view)
        (jazz.ui.window))


;;;
;;;; Splitter-View
;;;


(class Splitter-View extends View


  (property separator     initialize 'resize        accessors explicit)
  (property state         initialize 'split         accessors explicit)
  (property target        initialize #f             accessors explicit)
  (property orientation   initialize 'horz          accessors explicit)
  (property mode          initialize 'relative      accessors explicit)
  (property division      initialize 50             accessors explicit)
  (property insets        initialize {Rect 0 0 0 0} accessors explicit)
  (property after-handler initialize #f             accessors generate)
  (property preferences   initialize #f             accessors generate)
  
  
  (slot split-layout     initialize (new Split-Layout))
  (slot bar-bounds       initialize #f)
  (slot dragging?        initialize #f)
  (slot previous         initialize #f)
  (slot preserved-insets initialize #f accessors generate)

  
  ;;;
  ;;;; Access
  ;;;
  
  
  (method public (get-separator)
    separator)
  
  
  (method public (set-separator value)
    (set! separator value)
    (when (get-finished?)
      (layout-view)))
  
  
  (method public (get-state)
    state)
  
  
  (method public (set-state value)
    (set! state value)
    (when (get-finished?)
      (layout-view)))
  
  
  (method public (get-target)
    target)
  
  
  (method public (set-target value)
    (set! target value)
    (when (get-finished?)
      (layout-view)))
  
  
  (method public (get-orientation)
    orientation)
  
  
  (method public (set-orientation value)
    (set! orientation value)
    (when (get-finished?)
      (layout-view)))
  
  
  (method public (get-mode)
    mode)
  
  
  (method public (set-mode value)
    (set! mode value)
    (when (get-finished?)
      (layout-view)))
  
  
  (method public (get-division)
    division)
  
  
  (method public (set-division value)
    (set! division value)
    (when (get-finished?)
      (layout-view)))
  
  
  (method public (get-insets)
    insets)
  
  
  (method public (set-insets value)
    (set! insets value)
    (when (get-finished?)
      (layout-view)))

  
  ;;;
  ;;;; View
  ;;;
  
  
  (method override (default-size)
    {Dimension 400 200})

  
  ;;;
  ;;;; Layout
  ;;;


  (method override (size-change size)
    (nextmethod size)
    (layout-view))

  
  (method override (layout)
    (unless (null? children)
      (let ((size (get-size))
            (mode (if dragging? 'absolute mode)))
        (set! bar-bounds (layout~ split-layout children (get-width~ size) (get-height~ size) separator: separator state: state target: target orientation: orientation mode: mode division: division insets: insets)))))

  
  ;;;
  ;;;; Children
  ;;;
  
  
  (method public (remove-children)
    (for-each (lambda (child)
                (when (is? child Splitter-View)
                  (remove-children~ child))
                (when (is? child Pad-View)
                  (remove-children~ child))
                (if (is? child Splitter-View)
                    (close~ child)
                  (set-visible?~ child #f)
                  (set-parent~ child #f)
                  (when (is? child Host-View)
                    (host-uninstall~ (get-guest~ child)))))
              children))

  
  ;;;
  ;;;; Widget
  ;;;
  
  
  (method override (inner? view)
    (memq? view children))
  
  
  ;;;
  ;;;; Workspace
  ;;;
  
  
  (method public (workspace-zoomable? view)
    (let ((brother (brother-view view)))
      (or (is-not? brother Host-View)
          (let ((guest (get-guest~ brother)))
            (workspace-minimisable?~ guest)))))
  
  
  (method public (brother-view view)
    (find-if (lambda (child)
               (neq? child view))
             children))

  
  ;;;
  ;;;; Zoom
  ;;;
  
  
  (method public (get-zoomable?)
    (assert preferences)
    (get-zoomable?~ preferences))
  
  
  (method public (zoom view)
    (set! state 'zoom)
    (set! target view)
    (layout-view))
  
  
  (method public (rezoom)
    (set! state 'zoom)
    (layout-view))
  
  
  (method public (unzoom)
    (set! state 'split)
    (layout-view))
  
  
  (method public (get-effective-target)
    (if (is? target Figure)
        target
      (find-located target)))
  
  
  ;;;
  ;;;; Cursor
  ;;;


  (method override (cursor-update pos)
    (if (and (eq? separator 'resize) bar-bounds (or dragging? (in-rect? pos bar-bounds)))
        (case orientation
          ((horz) (set-cursor :vertical-splitter))
          ((vert) (set-cursor :horizontal-splitter)))
      (nextmethod pos)))
  

  ;;;
  ;;;; Drawing
  ;;;
  
  
  (method override (draw surface context)
    (let ((look (get-look)))
      (let ((background (get-background~ look)))
        (when (and (eq? state 'split) bar-bounds)
          (if background
              (fill-rect~ surface bar-bounds (if (debug-paint?) (cycle-debug-color!) background))
            (case separator
              ((resize)
               (fill-rect~ surface bar-bounds {Color Medium}))
              ((edge)
               (case orientation
                 ((horz) (draw-edge~ surface bar-bounds inner: 'raised outer: 'sunken edges: '(left)))
                 ((vert) (draw-edge~ surface bar-bounds inner: 'raised outer: 'sunken edges: '(top)))))
              ((line)
               (case orientation
                 ((horz) (draw-edge~ surface bar-bounds inner: 'raised edges: '(left)))
                 ((vert) (draw-edge~ surface bar-bounds inner: 'raised edges: '(top))))))))
        (when (not (empty-rect? insets))
          (fill-insets~ surface (get-bounds) insets (if (debug-paint?) (cycle-debug-color!) (or background {Color Medium})))))))
  
  
  ;;;
  ;;;; Skin
  ;;;
  
  
  (method override (get-look)
    (case style
      ((document) (find-look 'splitter/document))
      (else (find-look 'splitter))))
  
  
  ;;;
  ;;;; Conversion
  ;;;
  
  
  (method (absolute->relative division)
    (let ((size (case orientation
                  ((horz) (get-width))
                  ((vert) (get-height)))))
      (percentage division size)))
  
  
  (method (relative->absolute division)
    (let* ((size (case orientation
                   ((horz) (get-width))
                   ((vert) (get-height))))
           (pct (fxround (percent (abs division) size))))
      (if (positive? division)
          (set! division pct)
        (set! division (- size pct)))
      division))
  
  
  ;;;
  ;;;; Mouse
  ;;;
  
  
  (method override (mouse-down pos)
    (when (and (eq? separator 'resize) bar-bounds (in-rect? pos bar-bounds))
      (set! dragging? #t)
      (set! previous (case orientation ((horz) (get-h~ pos)) ((vert) (get-v~ pos))))
      (when (eq? mode 'relative)
        (set! division (relative->absolute division)))
      (acquire-capture)))
  
  
  (method override (drag-move pos)
    (when dragging?
      (let* ((n (case orientation ((horz) (get-h~ pos)) ((vert) (get-v~ pos))))
             (delta (- n previous)))
        (increase! division delta)
        (set! previous n)
        (parameterize ((inhibit-layouts? #t)
                       (inhibit-invalidates? #t))
          (layout-view))
        (redraw-view)
        (call-after-handler))))
  
  
  (method override (drag-up pos . rest)
    (define (save-preferences)
      (let ((designer (get-workspaces-designer~ (get-application))))
        (when (and preferences designer)
          (set-property~ designer preferences 'division division))))
    
    (when dragging?
      (release-capture)
      (when (eq? mode 'relative)
        (set! division (absolute->relative division)))
      (set! dragging? #f)
      (save-preferences)))
 
  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method (call-after-handler)
    (when after-handler
      (invoke-handler self after-handler (new Event after: self))))
  
  
  ;;;
  ;;;; Descriptor
  ;;;
  
  
  (method meta override (get-class-descriptor)
    (new Splitter-View-Descriptor)))


;;;
;;;; Design
;;;


(submodule design


(import (jazz.designer))


(class Splitter-View-Descriptor extends View-Descriptor
  
  
  (form
    (<install>                                     image: {Image-Resource "TileVertically"}
      (<properties~>
        (<Property-Descriptor> name: separator     title: "Separator"
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: state         title: "State"
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: target        title: "Target"
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: orientation   title: "Orientation"
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: mode          title: "Mode"
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: division      title: "Division"
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: insets        title: "Insets"
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: after-handler title: "After Handler" category: handler
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: preferences   title: "Preferences"
          (<Value-Domain>      name: domain)))))))


;;;
;;;; Splitter-View.Standard
;;;


(define-form Splitter-View.Standard
  (<Splitter-View>
    (<Layout-View> layout-type: fill location: first)
    (<Layout-View> layout-type: fill location: second))))
