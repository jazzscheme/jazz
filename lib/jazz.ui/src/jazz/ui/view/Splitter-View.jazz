;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Splitter View
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.ui.view.Splitter-View jazz


(import (jazz.geometry)
        (jazz.graphic)
        (jazz.jml)
        (jazz.library)
        (jazz.ui)
        (jazz.ui.skin)
        (jazz.ui.window))


(class Splitter-View extends View


  (property separator     initialize 'resize        accessors generate)
  (property state         initialize 'split         accessors generate)
  (property target        initialize #f             accessors generate)
  (property orientation   initialize 'horz          accessors generate)
  (property mode          initialize 'absolute      accessors generate)
  (property division      initialize 100            accessors generate)
  (property insets        initialize {Rect 0 0 0 0} accessors generate)
  (property full?         initialize #f             accessors generate)
  (property after-handler initialize #f             accessors generate)
  (property preferences   initialize #f             accessors generate)
  
  
  (slot split-layout     initialize (new Split-Layout))
  (slot bar-bounds       initialize #f)
  (slot dragging?        initialize #f)
  (slot previous         initialize #f)
  (slot preserved-insets initialize #f accessors generate)

  
  ;;;
  ;;;; Layout
  ;;;


  (method override (size-change size)
    (nextmethod size)
    (layout-view))

  
  (method override (layout)
    (unless (null? children)
      (let ((size (get-size))
            (mode (if dragging? 'absolute mode)))
        (set! bar-bounds (layout~ split-layout children (get-width~ size) (get-height~ size) separator: separator state: state target: target orientation: orientation mode: mode division: division insets: insets)))))

  
  ;;;
  ;;;; Children
  ;;;
  
  
  (method public (remove-children)
    (for-each (lambda (child)
                (when (is? child Splitter-View)
                  (remove-children~ child))
                (when (is? child Pad-View)
                  (remove-children~ child))
                (if (is? child Splitter-View)
                    (close~ child)
                  (set-visible?~ child #f)
                  (set-parent~ child #f)
                  (when (is? child Host-View)
                    (host-uninstall~ (get-guest~ child)))))
              children))
  
  
  ;;;
  ;;;; Workspace
  ;;;
  
  
  (method public (workspace-zoomable? view)
    (define (get-brother view)
      (find-if (lambda (child)
                 (neq? child view))
               children))
    
    (let ((brother (get-brother view)))
      (or (is-not? brother Host-View)
          (let ((guest (get-guest~ brother)))
            (workspace-minimisable?~ guest)))))

  
  ;;;
  ;;;; Zoom
  ;;;
  
  
  (method public (zoom view)
    (set! state 'zoom)
    (set! target view)
    (layout-view))
  
  
  (method public (rezoom)
    (set! state 'zoom)
    (layout-view))
  
  
  (method public (unzoom)
    (set! state 'split)
    (layout-view))
  
  
  (method public (get-effective-target)
    (if (is? target Figure)
        target
      (find-located target)))
  
  
  ;;;
  ;;;; Cursor
  ;;;


  (method override (cursor-update pos)
    (if (and (eq? separator 'resize) bar-bounds (or dragging? (in-rect? pos bar-bounds)))
        (case orientation
          ((horz) (set-cursor :vertical-splitter))
          ((vert) (set-cursor :horizontal-splitter)))
      (nextmethod pos)))
  

  ;;;
  ;;;; Drawing
  ;;;
  
  
  (method override (draw surface context lh lv)
    (let ((look (get-look)))
      (let ((background (get-background~ look)))
        (when (and (eq? state 'split) bar-bounds)
          (if background
              (fill-rect~ surface bar-bounds background)
            (case separator
              ((resize)
               (fill-rect~ surface bar-bounds {Color name: Medium}))
              ((edge)
               (case orientation
                 ((horz) (draw-edge~ surface bar-bounds inner: 'raised outer: 'sunken edges: '(left)))
                 ((vert) (draw-edge~ surface bar-bounds inner: 'raised outer: 'sunken edges: '(top)))))
              ((line)
               (case orientation
                 ((horz) (draw-edge~ surface bar-bounds inner: 'raised edges: '(left)))
                 ((vert) (draw-edge~ surface bar-bounds inner: 'raised edges: '(top))))))))
        (when (not (empty-rect? insets))
          (fill-insets~ surface (get-bounds) insets (or background {Color name: Medium}))))))
  
  
  ;;;
  ;;;; Skin
  ;;;
  
  
  (method override (get-look)
    (find-look 'splitter))
  
  
  ;;;
  ;;;; Conversion
  ;;;
  
  
  (method (absolute->relative division)
    (let ((size (case orientation
                  ((horz) (get-width))
                  ((vert) (get-height)))))
      (percentage division size)))
  
  
  (method (relative->absolute division)
    (let* ((size (case orientation
                   ((horz) (get-width))
                   ((vert) (get-height))))
           (pct (fxround (percent (abs division) size))))
      (if (positive? division)
          (set! division pct)
        (set! division (- size pct)))
      division))
  
  
  ;;;
  ;;;; Mouse
  ;;;
  
  
  (method override (mouse-down pos)
    (when (and (eq? separator 'resize) bar-bounds (in-rect? pos bar-bounds))
      (set! dragging? #t)
      (set! previous (case orientation ((horz) (get-h~ pos)) ((vert) (get-v~ pos))))
      (when (eq? mode 'relative)
        (set! division (relative->absolute division)))
      (acquire-capture)))
  
  
  (method override (drag-move pos)
    (when dragging?
      (let* ((n (case orientation ((horz) (get-h~ pos)) ((vert) (get-v~ pos))))
             (delta (- n previous)))
        (increase! division delta)
        (set! previous n)
        (layout-view)
        (update-view)
        (call-after-handler))))
  
  
  (method override (drag-up pos . rest)
    (when dragging?
      (release-capture)
      (when (eq? mode 'relative)
        (set! division (absolute->relative division)))
      (set! dragging? #f)))
 
  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method (call-after-handler)
    (when after-handler
      (invoke-handler self after-handler (new Event after: self))))
  
  
  ;;;
  ;;;; Descriptor
  ;;;
  
  
  (method meta override (get-class-descriptor)
    (new Splitter-View-Descriptor)))


;;;
;;;; Design
;;;


(submodule design


(import (jazz.designer))


(class Splitter-View-Descriptor extends View-Descriptor
  
  
  (form
    (<install>
      (<properties~>
        (<Property-Descriptor> name: separator title: "Separator")
        (<Property-Descriptor> name: state title: "State")
        (<Property-Descriptor> name: target title: "Target")
        (<Property-Descriptor> name: orientation title: "Orientation")
        (<Property-Descriptor> name: mode title: "Mode")
        (<Property-Descriptor> name: division title: "Division")
        (<Property-Descriptor> name: insets title: "Insets")
        (<Property-Descriptor> name: full? title: "Full")
        (<Property-Descriptor> name: after-handler title: "After Handler")
        (<Property-Descriptor> name: preferences title: "Preferences"))))
  
  
  @too-many-icons!
  (method override (class-image class)
    {Image-Resource "TileVertically"}))))
