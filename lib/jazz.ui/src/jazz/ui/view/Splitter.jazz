;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Splitters
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.ui.view.Splitter jazz


(import (jazz.event)
        (jazz.handler)
        (jazz.view)
        (jazz.window))


(class Splitter extends View
  
  
  (property orientation  initialize 'vert accessors generate)
  (property move-handler initialize #f    accessors generate)
  
  
  (slot dragging?     initialize #f)
  (slot base-position initialize #f)
  (slot displacement  initialize #f)

  
  ;;;
  ;;;; Cursor
  ;;;


  (method override (cursor-update self evt)
    (set-cursor
      (case orientation
        ((vert) :vertical-splitter)
        ((horz) :horizontal-splitter))))
  
  
  ;;;
  ;;;; Mouse
  ;;;
  

  (method override (mouse-down self evt)
    (set! dragging? #t)
    (set! base-position (get-position evt))
    (set! displacement {Point 0 0})
    (acquire-capture self))
  
  
  (method override (drag-move self evt)
    (when dragging?
      (let ((delta (nu- (get-position evt) base-position)))
        (set! displacement (nu+ displacement delta))
        (case orientation
          ((vert)
           (move-figure self (get-h delta) 0)
           (process-move self self (get-h delta)))
          ((horz)
           (move-figure self 0 (get-v delta))
           (process-move self self (get-v delta)))))))
  
  
  (method override (drag-up self evt . rest)
    (when dragging?
      (release-capture self)
      (set! dragging? #f)))


  ;;;
  ;;;; Move
  ;;;
  
  
  (method public virtual (process-move self sender delta)
    (when move-handler
      (let ((evt (make-event Event :move sender delta: delta)))
        (invoke-handler self move-handler evt))))
  
  
  ;;;
  ;;;; Descriptor
  ;;;
  
  
  (method meta override (get-class-descriptor self (context: context #f))
    (new jazz.ui.descriptors:Splitter-Descriptor))))
