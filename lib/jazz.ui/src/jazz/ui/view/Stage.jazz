;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Stage
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library protected jazz.ui.view.Stage jazz


(import (jazz.graphic)
        (jazz.jml)
        (jazz.system)
        (jazz.ui)
        (jazz.ui.view)
        (jazz.ui.window)
        (jazz.ui.workspace)
        (jazz.utilities))


(class Stage extends View
    
  
  (slot maximized?  initialize #f)
  (slot fullscreen? initialize #f)

  
  (form
    (<install> background: {Color name: Dark}))
  
  
  ;;;
  ;;;; Border
  ;;;
  
  
  (method public (get-border)
    parent)
  
  
  ;;;
  ;;;; Activation
  ;;;
  
  
  (method public virtual (stage-activate)
    (when maximized?
      (set-caption~ (get-toplevel) {}))
    (for-each-docked
      (lambda (view)
        (client-deactivate~ view))))
  
  
  (method public virtual (stage-deactivate)
    )
  
  
  ;;;
  ;;;; Maximized
  ;;;
  
  
  (method public (get-maximized?)
    maximized?)
  
  
  (method public (set-maximized? value)
    (if value
        (maximize)
      (restore)))
  
  
  (method public (toggle-maximized)
    (set-maximized? (not maximized?)))
  
  
  (method override (maximize)
    (with-locked-update
      (lambda ()
        (let* ((border (get-border))
               (toplevel (get-toplevel))
               (appl (get-application))
               (menubar (find-menubar~ appl))
               (current (first-view))
               (workspace (selected-workspace)))
          (set! maximized? #t)
          (when workspace
            (set-maximized?~ workspace #t))
          (set-caption?~ toplevel #t)
          (for-each (lambda (frame)
                      (when (get-visible?~ frame)
                        (maximize~ (get-host~ frame))
                        (maximize~ (get-guest~ frame))))
                    children)
          (maximize~ border)
          (when menubar
            (maximize~ menubar))
          (when current
            (set-caption~ toplevel (get-title~ current)))))))
  
  
  (method override (restore)
    (with-locked-update
      (lambda ()
        (let* ((border (get-border))
               (toplevel (get-toplevel))
               (appl (get-application))
               (menubar (find-menubar~ appl)))
          (set! maximized? #f)
          (set-maximized?~ (selected-workspace) #f)
          (set-caption?~ toplevel #f)
          (for-each (lambda (frame)
                      (when (get-visible?~ frame)
                        (restore~ (get-host~ frame))
                        (restore~ (get-guest~ frame))))
                    children)
          (restore~ border)
          (when menubar
            (restore~ menubar))))))
  
  
  ;;;
  ;;;; Full
  ;;;
  
  
  (method public (get-fullscreen?)
    fullscreen?)
  
  
  (method public (set-fullscreen? value)
    (when (neq? value fullscreen?)
      (set! fullscreen? value)
      (let ((border (get-border)))
        (layout-stage~ border (get-size~ border)))))
  
  
  ;;;
  ;;;; Backgound
  ;;;


  (method public virtual (install-wallpaper)
    )
  
  
  ;;;
  ;;;; Layout
  ;;;
  
  
  (method override (size-change size)
    (nextmethod size)
    (layout-frames size))
  
  
  (method (layout-frames size)
    (when maximized?
      (for-each (lambda (frame)
                  (when (get-visible?~ frame)
                    (maximize-bounds~ (get-host~ frame) size)))
                children)))
    

  ;;;
  ;;;; Draw
  ;;;
  
  
  ;; temp optimization until a generic solution in the painting algorithm
  (method override (draw-children surface context lh lv sh sv sc sc?)
    (define (draw children opaques)
      (when (not-null? children)
        (let ((drawing (car children)))
          (if (not (get-visible?~ drawing))
              (draw (cdr children) opaques)
            (let ((pos (get-position~ drawing)))
              (let ((lh (+ lh (get-h~ pos)))
                    (lv (+ lv (get-v~ pos))))
                (let ((rect (h/v/size->rect lh lv size)))
                  (draw (cdr children) (cons rect opaques))
                  (unless (some? (lambda (opaque)
                                   (rect-in-rect? rect opaque))
                                 opaques)
                    (paint~ drawing surface context lh lv sh sv sc sc?)))))))))
    
    (draw (reverse children) '()))
  
  
  ;;;
  ;;;; Mouse
  ;;;
  
  
  (method override (mouse-down pos)
    (acquire-focus))))
