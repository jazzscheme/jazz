;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Stage
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.ui.view.Stage jazz


(import (jazz.application)
        (jazz.graphic)
        (jazz.markup)
        (jazz.ui)
        (jazz.view)
        (jazz.window)
        (jazz.workspace))


(class Stage extends View
    
  
  (slot maximized?         initialize #f)
  (slot fullscreen?        initialize #f)
  (slot figure-preferences initialize #f accessors generate)

  
  (form
    (<install> background: {Color Dark}))
                
  
  (method meta override (external-name self . rest)
    'stage)
  
  
  ;;;
  ;;;; Border
  ;;;
  
  
  (method public (get-border self)
    parent)
  
  
  ;;;
  ;;;; Activation
  ;;;
  
  
  (method public virtual (stage-activate self)
    (set-caption? (current-toplevel) maximized?))
  
  
  (method public virtual (stage-empty-activate self)
    (assert (get-player self))
    (for-each-window-docked
      client-deactivate)
    (set-caption (current-toplevel) #f))
  
  
  (method override (focus-gained self)
    (unless (workspace-activation?)
      (set-current-stage self)))
  
  
  ;;;
  ;;;; Maximized
  ;;;
  
  
  (method public (get-maximized? self)
    maximized?)
  
  
  (method public (set-maximized? self value)
    (if value
        (maximize self)
      (restore self)))
  
  
  (method public (toggle-maximized self)
    (set-maximized? self (not maximized?)))
  
  
  (method override (maximize self)
    (let* ((border (get-border self))
           (toplevel (current-toplevel))
           (player (get-player self))
           (appl (get-application))
           (menubar (find-menubar appl))
           (current (first-view self)))
      (set! maximized? #t)
      (set-caption? toplevel #t)
      (for-each (lambda (frame)
                  (when (get-visible? frame)
                    (maximize (get-host frame))
                    (maximize (get-guest frame))))
                children)
      (maximize border)
      (when menubar
        (maximize menubar))
      (when current
        (set-caption toplevel (get-title current)))))
  
  
  (method override (restore self)
    (let* ((border (get-border self))
           (toplevel (current-toplevel))
           (appl (get-application))
           (menubar (find-menubar appl)))
      (set! maximized? #f)
      (set-caption? toplevel #f)
      (for-each (lambda (frame)
                  (when (get-visible? frame)
                    (restore (get-host frame))
                    (restore (get-guest frame))))
                children)
      (restore border)
      (when menubar
        (restore menubar))))
  
  
  ;;;
  ;;;; Full
  ;;;
  
  
  (method public (get-fullscreen? self)
    fullscreen?)
  
  
  (method public (set-fullscreen? self value)
    (when (neq? value fullscreen?)
      (set! fullscreen? value)
      (let ((border (get-border self)))
        (layout-stage border (get-size border)))))
  
  
  ;;;
  ;;;; Backgound
  ;;;


  (method public virtual (install-wallpaper self)
    )
  
  
  ;;;
  ;;;; Layout
  ;;;
  
  
  (method override (size-change self size)
    (define (layout-frames)
      (when maximized?
        (for-each (lambda (frame)
                    (when (get-visible? frame)
                      (maximize-bounds (get-host frame) size)))
                  children)))
    
    (nextmethod self size)
    (layout-frames))
  
  
  ;;;
  ;;;; Mouse
  ;;;
  
  
  (method override (mouse-down self evt)
    (acquire-focus self))))
