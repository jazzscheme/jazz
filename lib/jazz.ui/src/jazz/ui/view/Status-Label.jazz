;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Status Labels
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library protected jazz.ui.view.Status-Label jazz


(import (jazz.graphic)
        (jazz.jml)
        (jazz.locale)
        (jazz.system)
        (jazz.ui)
        (jazz.utilities))


(class Status-Label extends View
    
  
  (property icon initialize {} getter get-icon setter set-icon)

  
  (form
    (<install> background: {Color name: Medium}))
  
  
  (method (mouse-activate?)
    #f)
  
  
  ;;;
  ;;;; Access
  ;;;


  (method public (get-icon)
    icon)


  (method public (set-icon icn)
    (set! icon icn))
  
  
  (method (set-title title)
    (unless (and (empty-string? title) (empty-string? title~self))
      (nextmethod title)))
  
  
  ;;;
  ;;;; Drawing
  ;;;
  
  
  (method (draw-background surface context)
    (when background
      (let* ((bounds (get-bounds))
             (rect (inflate-rect bounds -1 -1)))
        (fill-rect~ surface rect background))))
  
  
  (method (draw surface context lh lv)
    (draw-edge~ surface (get-bounds) outer: 'sunken edges: 'rectangle)
    (draw-icon surface context)
    (draw-body surface))
  
  
  (method (draw-icon surface context)
    (when icon
      (let ((appl (get-application))
            (left 2)
            (top 2))
        (draw-image~ (get-icons-cache~ appl) surface context icon left top))))
  
  
  (method (draw-body surface)
    (when title
      (let ((title (localize title))
            (left (if icon 20 3))
            (top 4))
        (set-font~ surface {Font name: Caption})
        (set-text-color~ surface {Color name: Black})
        (draw-text~ surface left top title))))))
