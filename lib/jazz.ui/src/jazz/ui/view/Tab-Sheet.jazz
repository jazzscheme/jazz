;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Tab Sheet
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.ui.view.Tab-Sheet jazz


(import (jazz.geometry)
        (jazz.graphic)
        (jazz.jml)
        (jazz.library)
        (jazz.ui))


(class Tab-Sheet extends Focus-Container implements Container


  (property title-color        initialize #f accessors explicit)
  (property header-color       initialize #f getter    generate   setter explicit)
  (property header-end-color   initialize #f accessors explicit)
  (property border-color       initialize #f getter    generate   setter explicit)
  (property closable?          initialize #f accessors generate)


  (slot protected borders                            accessors generate)
  (slot protected close-button-enter?  initialize #f accessors generate)
  (slot protected close-button-down?   initialize #f accessors generate)
  
  
  (form
    (<install>
      (<Content-View> name: content)))
  

  ;;;
  ;;;; Access
  ;;;
  
  
  (method override (get-content)
    (child 'content))
  
  
  (method override (set-title value)
    (nextmethod value)
    (update-borders~ parent)
    (invalidate-header))


  (method public (get-title-color)
    (if (is-enabled?)
        title-color
      {Color Dark}))


  (method public (set-title-color value)
    (set! title-color value)
    (invalidate-header))


  (method public (set-header-color value)
    (set! header-color value)
    (invalidate-header))


  (method public (get-header-end-color)
    (if header-end-color
        header-end-color
      (let ((backgound (get-background)))
        (if background
            background
          {Color Medium}))))


  (method public (set-header-end-color value)
    (set! header-end-color value)
    (invalidate-header))


  (method public (set-border-color value)
    (set! border-color value)
    (invalidate-header))


  ;;;
  ;;;; Enabled
  ;;;
  
  
  (method public (is-enabled?)
    (and enabled? (view-enabled?~ parent)))


  (method override (set-enabled? flag)
    (set! enabled? flag)
    (invalidate-header))


  ;;;
  ;;;; Tab
  ;;;
  
  
  (method (invalidate-header)
    (let ((rank (sheet->rank~ parent self)))
      (when rank
        (invalidate-header~ parent rank))))


  ;;;
  ;;;; View
  ;;;

  
  (method override (get-transparent?)
    #t)
  
  
  ;;;
  ;;;; Layout
  ;;;
  
  
  (method override (layout)
    (let ((content (find-child 'content)))
      (when content
        (let ((size (get-size)))
          (set-position~ content {Point 1 20})
          (set-size~ content (new Dimension (- (get-width~ size) 2) (- (get-height~ size) 21)))))))


  ;;;
  ;;;; Focus
  ;;;
  
  
  (method override (container-focusable?)
    (eq? (selected-sheet~ parent) self))
  
  
  (method override (ensure-container-focusable)
    (set-selection~ parent (child-rank~ parent self) focus?: #f))
  
  
  ;;;
  ;;;; Descriptor
  ;;;
  
  
  (method meta override (get-class-descriptor)
    (new Tab-Sheet-Descriptor))


  ;;;
  ;;;; Close
  ;;;


  (method (in-close-button? pt)
    (and closable? (in-rect? pt (get-close-button-borders~ parent self))))


  (method (invalidate-close-button)
    (when closable?
      (invalidate-rect~ parent (get-close-button-borders~ parent self))))


  (method public (close-button-enter)
    (set-close-button-enter? #t)
    (set-close-button-enter~ parent self)
    (invalidate-close-button))


  (method public (close-button-leave)
    (set-close-button-enter? #f)
    (set-close-button-down? #f)
    (set-close-button-enter~ parent #f)
    (invalidate-close-button))


  (method public (close-button-down)
    (set-close-button-down? #t)
    (invalidate-close-button))


  (method public (close-button-up)
    (set-close-button-down? #f)
    (invalidate-close-button))
  
  
  ;;;
  ;;;; Inner
  ;;;
  
  
  (method override (content-inner? view)
    #f)
  )


;;;
;;;; Design
;;;


(submodule design


(import (jazz.designer))


(class Tab-Sheet-Descriptor extends Layout-View-Descriptor
  
  
  (form
    (<install>
      (<properties~>           default: title
        (<Property-Descriptor> name: title-color title: "Title Color")
        (<Property-Descriptor> name: header-color)
        (<Property-Descriptor> name: header-end-color)
        (<Property-Descriptor> name: border-color)
        (<Property-Descriptor> name: closable?))))
  
  
  (method override (class-image class)
    {Image-Resource "OpenedFolder"}))))
