;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Tab Sheet
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.ui.view.Tab-Sheet jazz


(import (jazz.geometry)
        (jazz.graphic)
        (jazz.markup)
        (jazz.ui))


(class Tab-Sheet extends Focus-Container implements Container


  (property title-color      initialize #f accessors explicit)
  (property header-color     initialize #f getter    generate setter explicit)
  (property header-end-color initialize #f accessors explicit)
  (property border-color     initialize #f getter    generate setter explicit)
  (property closable?        initialize #f accessors generate)


  (slot protected borders                           accessors generate)
  (slot protected close-button-enter? initialize #f accessors generate)
  (slot protected close-button-down?  initialize #f accessors generate)
  
  
  (form
    (<install>
      (<Content-View> name: content)))
  

  ;;;
  ;;;; Access
  ;;;
  
  
  (method override (get-content self)
    (child self 'content))


  (method public (get-title-color self)
    (if (is-enabled? self)
        title-color
      {Color Dark}))


  (method public (set-title-color self value)
    (set! title-color value)
    (invalidate-header self))


  (method public (set-header-color self value)
    (set! header-color value)
    (invalidate-header self))


  (method public (get-header-end-color self)
    (if header-end-color
        header-end-color
      (let ((backgound (get-background self)))
        (if background
            background
          {Color Medium}))))


  (method public (set-header-end-color self value)
    (set! header-end-color value)
    (invalidate-header self))


  (method public (set-border-color self value)
    (set! border-color value)
    (invalidate-header self))
  

  ;;;
  ;;;; Title
  ;;;
  
  
  (method override (adjust-title self)
    (update-borders parent)
    (invalidate-header self))


  ;;;
  ;;;; Enabled
  ;;;
  
  
  (method public (is-enabled? self)
    (and enabled? (view-enabled? parent)))


  (method override (set-enabled? self flag)
    (set! enabled? flag)
    (invalidate-header self))


  ;;;
  ;;;; Tab
  ;;;
  
  
  (method package (invalidate-header self)
    (let ((rank (sheet->rank parent self)))
      (when rank
        (invalidate-header parent rank))))


  ;;;
  ;;;; View
  ;;;

  
  (method override (get-transparent? self)
    #t)
  
  
  ;;;
  ;;;; Layout
  ;;;
  
  
  (method override (layout self)
    (let ((content (find-child self 'content)))
      (when content
        (let ((size (get-size self))
              (height (if (eq? (get-background (get-skin parent)) 'none) (if (get-separator? parent) 30 21) 20)))
          (set-position content (new Point 1 height))
          (set-size content (new Dimension (- (get-width size) 2) (- (get-height size) height 1)))))))


  ;;;
  ;;;; Focus
  ;;;
  
  
  (method override (container-focusable? self)
    (eq? (selected-sheet parent) self))
  
  
  (method override (ensure-container-focusable self)
    (set-selection parent (child-rank parent self) focus?: #f))
  
  
  ;;;
  ;;;; Descriptor
  ;;;
  
  
  (method meta override (get-class-descriptor self (context: context #f))
    (new jazz.ui.descriptors:Tab-Sheet-Descriptor))


  ;;;
  ;;;; Close
  ;;;


  (method package (in-close-button? self pt)
    (and closable? (in-rect? pt (get-close-button-borders parent self))))


  (method (invalidate-close-button self)
    (when closable?
      (invalidate-rect parent (get-close-button-borders parent self))))


  (method public (close-button-enter self)
    (set-close-button-enter? self #t)
    (set-close-button-enter parent self)
    (invalidate-close-button self))


  (method public (close-button-leave self)
    (set-close-button-enter? self #f)
    (set-close-button-down? self #f)
    (set-close-button-enter parent #f)
    (invalidate-close-button self))


  (method public (close-button-down self)
    (set-close-button-down? self #t)
    (invalidate-close-button self))


  (method public (close-button-up self)
    (set-close-button-down? self #f)
    (invalidate-close-button self))
  
  
  ;;;
  ;;;; Inner
  ;;;
  
  
  (method override (content-inner? self view)
    #f)))
