;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Tab View
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2012
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.ui.view.Tab-View jazz


(import (jazz.geometry)
        (jazz.graphic)
        (jazz.jml)
        (jazz.library)
        (jazz.locale)
        (jazz.system)
        (jazz.ui)
        (jazz.ui.view))


(class Tab-View extends View


  (definition close-border-left  -20)
  (definition close-border-top     3)
  (definition close-border-right  -4)
  (definition close-border-bottom 17)

  
  (property orientation     initialize 'top accessors explicit)
  (property keep-one-sheet? initialize #t   accessors generate)
  
  
  (slot padding             initialize 10)
  (slot headers-height      initialize 20)
  (slot selection           initialize 0)
  (slot close-button-enter  initialize #f   accessors generate)
  
  
  (method override (default-size)
    {Dimension 400 200})
  
  
  ;;;
  ;;;; Access
  ;;;
  
  
  (method public (get-orientation)
    orientation)
  
  
  (method public (set-orientation o)
    (set! orientation o)
    (invalidate-view))


  (method public (get-content)
    (locate 'content))


  ;;;
  ;;;; Mouse
  ;;;
  
  
  (method override (mouse-down evt)
    (let ((pos (get-position~ evt)))
      (let ((header (find-tab-sheet pos)))
        (when header
          (if (and (selected-sheet? header) (in-close-button?~ header pos))
              (close-button-down~ header)
            (set-selection (find-header pos) user-origin: #t))))))
  
  
  (method override (mouse-up evt)
    (let ((pos (get-position~ evt)))
      (let ((header (find-tab-sheet pos)))
        (when header
          (when (and (selected-sheet? header)
                     (in-close-button?~ header pos)
                     (get-close-button-down?~ header)
                     (or (not keep-one-sheet?)
                         (and keep-one-sheet?
                              (> (length children) 1))))
            (close-button-up~ header)
            (remove-child header))))))
  
  
  (method override (mouse-move pos)
    (let ((header (find-tab-sheet pos)))
      (if header
          (if (and (selected-sheet? header) (in-close-button?~ header pos))
              (unless (and close-button-enter
                           (eq? close-button-enter header))
                (when close-button-enter
                  (close-button-leave~ close-button-enter))
                (close-button-enter~ header))
            (when close-button-enter
              (close-button-leave~ close-button-enter)))
        (when close-button-enter
          (close-button-leave~ close-button-enter)))))
  
  
  (method override (drag-move pos)
    (mouse-move pos))


  (method override (mouse-leave)
    (when close-button-enter
      (close-button-leave~ close-button-enter)))


  ;;;
  ;;;; Menu
  ;;;
  
  
  (method override (context-menu evt)
    (let ((pos (get-position~ evt)))
      (with-context-click pos
        (lambda ()
          (when (get-control?~ evt)
            (let ((menu (new Context-Menu)))
              (make-condensed-menu~ menu
                (enabled-sheets)
                (lambda (user-data title parent)
                  (new Label-Item parent: parent title: title action-handler: (new Event-Handler execute: (lambda (evt) (set-selection (sheet->rank user-data) user-origin: #t)))))
                key: get-title~)
              (layout-menu~ menu)
              (track-popup-menu menu pos)))))))


  ;;;
  ;;;; Headers
  ;;;

  
  (method package (update-borders)
    (let ((n 0)
          (h 2))
      (for-each (lambda (header)
                  (let* ((title (localize (get-title~ header)))
                         (closable? (and (get-closable?~ header)
                                         (or (not keep-one-sheet?)
                                             (and keep-one-sheet?
                                                  (> (length children) 1)))))
                         (next (+ h padding (if title (+ (get-width~ (text-extent~ (effective-font) title)) (if closable? 8 0)) 10) padding)))
                    (set-borders~ header (cons h next))
                    (increase! n)
                    (set! h next)))
                children)))

  
  (method (find-header pt)
    (let ((h (get-h~ pt))
          (v (get-v~ pt)))
      (when (< v headers-height)
        (continuation-capture
          (lambda (return)
            (for-each (lambda (header n)
                        (when (is-enabled?~ header)
                          (bind (left . right) (get-borders~ header)
                            (when (and (>= h left) (< h right))
                              (continuation-return return n)))))
                      children
                      (naturals 0 (length children)))
            #f)))))


  (method (find-tab-sheet pt)
    (let ((rank (find-header pt)))
      (if rank
          (list-ref children rank)
        #f)))
  
  
  (method (get-close-button-borders header)
    (bind (lf . rg) (get-borders~ header)
      (let ((selected? (eq? header (selected-sheet))))
        (let ((left (if selected? 4 2))
              (top (if selected? 0 2)))
          (offset-rect (new Rect (+ rg close-border-left) close-border-top (+ rg close-border-right) close-border-bottom)
                       left
                       top)))))
  
  
  ;;;
  ;;;; Component
  ;;;
  
  
  (method override (add-child child)
    (let ((empty? (null? children)))
      (nextmethod child)
      (when (not empty?)
        (set-visible?~ child #f))
      (update-borders)
      (layout-view)
      (when empty?
        (set-selection 0 focus?: #f))))
  
  
  (method override (remove-child child)
    (if (destroying?)
        (nextmethod child)
      (when (and (> selection 0)
                 (>= selection (child-rank child)))
        (set! selection (- selection 1)))
      (when (= (length children) 1)
        (invalidate-header selection)
        (set-visible?~ (sheet-ranked selection) #f)
        (set! selection #f))
      (nextmethod child)
      (update-borders)
      (layout-view)
      (invalidate-view)
      (set-selection selection force?: #t focus?: #f)))
  
  
  ;;;
  ;;;; Selection
  ;;;
  
  
  (method public (get-selection)
    selection)
  
  
  (method public virtual (set-selection sel (focus?: focus? #t) (force?: force? #f) (user-origin: user-origin #f))
    (let ((old selection))
      (when (or force? (not (eqv? sel old)))
        (when old
          (let ((sheet (sheet-ranked old)))
            (set-visible?~ sheet #f)))
        (set! selection sel)
        (when sel
          (let ((sheet (sheet-ranked sel)))
            (set-visible?~ sheet #t)
            (when focus?
              (focus-host~ sheet))))
        (when old
          (invalidate-header old))
        (when selection
          (invalidate-header selection))
        (call-selection-handler old selection force? user-origin)
        (when player
          (simulate-mouse-move~ player)))))


  (method public (invalidate-header n)
    (bind (lf . rg) (get-borders~ (sheet-ranked n))
      (invalidate-rect (new Rect (- lf 2) 0 (+ rg 2) headers-height))))


  (method public (get-selection-name)
    (get-name~ (selected-sheet)))
  
  
  (method public (set-selection-name name (focus?: focus? #t))
    (let* ((sheet (child name))
           (rank (child-rank sheet)))
      (set-selection rank focus?: focus?)))
  
  
  (method public (selected-sheet? sheet)
    (eq? sheet (selected-sheet)))
  
  
  (method public (selected-sheet)
    (and selection (sheet-ranked selection)))
  
  
  (method public (sheet->rank sheet)
    (find children sheet))
  
  
  (method (sheet-ranked n)
    (child-ranked n))
  
  
  ;;;
  ;;;; Sheet
  ;;;
  
  
  (method public (all-sheets)
    children)
  
  
  (method public (enabled-sheets)
    (collect-if is-enabled?~ children))
  
  
  (method public (remove-every-sheet)
    (close-children))
  
  
  ;;;
  ;;;; Layout
  ;;;
  
  
  (method override (layout)
    (let ((size (get-size)))
      (for-each (lambda (child)
                  (when (is? child Tab-Sheet)
                    (set-position~ child {Point 0 0})
                    (set-size~ child size)))
                children)))


  ;;;
  ;;;; Drawing
  ;;;

  
  (method override (draw-children surface nodes context)
    (define (draw-top surface clipper size)
      (let ((left    0)
            (top     0)
            (right   (get-width~ size))
            (bottom  (get-height~ size)))
        (let ((content (if (null? children) top (+ top headers-height -1))))
          (let ((content-rect (new Rect left content right bottom)))
            (unless (rect-inside-border? clipper content-rect {Rect 1 1 2 2})
              (set-font~ surface {Font Label})
              (set-color~ surface {Color Light})
              (set-line-width~ surface 1)
              (draw-edge~ surface content-rect inner: 'raised outer: 'raised edges: '(right bottom))
              (set-color~ surface {Color Light})
              (move-to~ surface 0 content)
              (line-to~ surface 0 bottom)
              (set-color~ surface {Color Light})
              (if (null? children)
                  (line~ surface 0 0 right 0)
                (let ((h (cdr (get-borders~ (last children)))))
                  (line~ surface h content (- right 1) content)))))
          (when (< (get-top~ clipper) content)
            (let ((left-clip (get-left~ clipper))
                  (right-clip (get-right~ clipper)))
              (let (iter (headers children) (n 0))
                (when (not-null? headers)
                  (let ((header (car headers))
                        (selected? (= n selection)))
                    (bind (lf . rg) (get-borders~ header)
                      (when selected?
                        (decrease! lf 2)
                        (increase! rg 2))
                      (when (< lf right-clip)
                        (when (> rg left-clip)
                          (let* ((title (localize (get-title~ header)))
                                 (title-color (get-title-color~ header))
                                 (border-color (get-border-color~ header))
                                 (header-color (get-header-color~ header))
                                 (header-end-color (get-header-end-color~ header))
                                 (previous? (= (+ n 1) selection))
                                 (next? (= (- n 1) selection))
                                 (top (if selected? 0 2))
                                 (background {Color red: 200 green: 198 blue: 187}))
                            ;; background
                            (cond ((debug-paint?)
                                   (let ((rect (new Rect (+ lf 1) (+ top 1) (- rg 2) content)))
                                     (fill-rect~ surface rect (cycle-debug-color!))))
                                  (header-color
                                    (let ((rect (new Rect (+ lf (if next? 3 1) 2) (+ top 2 1) (- rg 3) content)))
                                      (gradient-fill~ surface rect (list (list 0 header-color) (list 1 header-end-color)) direction: 'vertical)))
                                  ((not selected?)
                                   (let ((rect (new Rect (+ lf 1) (+ top 1) (- rg 2) content)))
                                     (fill-rect~ surface rect background))))
                            ;; border
                            (when border-color
                              (set-color~ surface border-color)
                              (move-to~ surface (+ lf 2) (+ top 2))
                              (line-to-preserve~ surface (- rg 4) (+ top 2))
                              (line-to-preserve~ surface (- rg 4) (- content 2))
                              (line-to-preserve~ surface (+ lf 2) (- content 2))
                              (line-to~ surface (+ lf 2) (+ top 2)))
                            ;; right
                            (unless previous?
                              (draw-edge~ surface (new Rect lf (+ top 2) rg content) inner: 'raised outer: 'raised edges: '(right))
                              (set-color~ surface background)
                              (move-to~ surface (- rg 2) (+ top 1))
                              (line-to~ surface (- rg 1) (+ top 2)))
                            ;; top
                            (set-color~ surface (if selected? {Color Light} {Color red: 243 green: 243 blue: 241}))
                            (move-to~ surface (- rg 2) top)
                            (line-to-preserve~ surface (+ lf (if next? 1 2)) top)
                            ;; left
                            (unless next?
                              (line-to-preserve~ surface lf (+ top 2))
                              (line-to~ surface lf content))
                            ;; bottom
                            (unless selected?
                              (move-to~ surface lf content)
                              (line-to~ surface rg content))
                            ;; title
                            (when title
                              (set-text-color~ surface (or title-color {Color Black}))
                              (draw-text~ surface (+ lf 5) (+ top 3) title))
                            ;; close
                            (when (and (get-closable?~ header)
                                       selected?
                                       (or (not keep-one-sheet?)
                                           (and keep-one-sheet?
                                                (> (length children) 1))))
                              (let ((rect (get-close-button-borders header)))
                                (draw-caption~ surface rect 'close (get-close-button-down?~ header) (get-close-button-enter?~ header))))))
                        (iter (cdr headers)
                              (+ n 1))))))))))))
    
    (define (draw-bottom surface clipper size)
      ;; todo
      )
    
    (nextmethod surface nodes context)
    (let ((clipper (get-clipper~ surface))
          (size (get-size)))
      (case orientation
        ((top) (draw-top surface clipper size))
        ((bottom) (draw-bottom surface clipper size)))))
  
  
  ;;;
  ;;;; Descriptor
  ;;;
  
  
  (method meta override (get-class-descriptor)
    (new Tab-View-Descriptor)))


;;;
;;;; Design
;;;


(submodule design


(import (jazz.designer))


(class Tab-View-Descriptor extends View-Descriptor
  
  
  (form
    (<install>
      (<properties~>
        (<Property-Descriptor> name: orientation     standard?: #f
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: keep-one-sheet? standard?: #f
          (<Value-Domain>      name: domain)))))
  
  
  (method override (component-surrogate-class component)
    Tab-View-Surrogate)
  
  
  (method override (component-get-categorized-addable-classes component)
    (list
      (list
        (reference Tab-Sheet)))))))
