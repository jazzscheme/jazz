;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Tab View
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.ui.view.Tab-View jazz


(import (jazz.event)
        (jazz.geometry)
        (jazz.graphic)
        (jazz.handler)
        (jazz.locale)
        (jazz.menu)
        (jazz.skin)
        (jazz.ui)
        (jazz.view)
        (jazz.window))


(class Tab-View extends View


  (definition close-border-left  -20)
  (definition close-border-top     3)
  (definition close-border-right  -4)
  (definition close-border-bottom 17)

  
  (property orientation     initialize 'top accessors explicit)
  (property keep-one-sheet? initialize #t   accessors generate)
  (property separator?      initialize #f   accessors generate)
  
  
  (slot padding             initialize 10)
  (slot headers-height      initialize 20)
  (slot selection           initialize 0)
  (slot close-button-enter  initialize #f   accessors generate)
  
  
  (method override (default-size self)
    {Dimension 400 200})
  
  
  ;;;
  ;;;; Access
  ;;;
  
  
  (method public (get-orientation self)
    orientation)
  
  
  (method public (set-orientation self o)
    (set! orientation o)
    (invalidate-view self))


  (method public (get-content self)
    (locate self 'content))


  ;;;
  ;;;; Mouse
  ;;;
  
  
  (method override (mouse-down self evt)
    (let ((pos (get-position evt)))
      (let ((header (find-tab-sheet self pos)))
        (when header
          (if (and (selected-sheet? self header) (in-close-button? header pos))
              (close-button-down header)
            (set-selection self (find-header self pos) user-origin: #t))))))
  
  
  (method override (mouse-up self evt)
    (let ((pos (get-position evt)))
      (let ((header (find-tab-sheet self pos)))
        (when header
          (when (and (selected-sheet? self header)
                     (in-close-button? header pos)
                     (get-close-button-down? header)
                     (or (not keep-one-sheet?)
                         (and keep-one-sheet?
                              (> (length children) 1))))
            (close-button-up header)
            (remove-child self header))))))
  
  
  (method override (mouse-move self evt)
    (let ((pos (get-position evt)))
      (let ((header (find-tab-sheet self pos)))
        (if header
            (if (and (selected-sheet? self header) (in-close-button? header pos))
                (unless (and close-button-enter
                             (eq? close-button-enter header))
                  (when close-button-enter
                    (close-button-leave close-button-enter))
                  (close-button-enter header))
              (when close-button-enter
                (close-button-leave close-button-enter)))
          (when close-button-enter
            (close-button-leave close-button-enter))))))
  
  
  (method override (drag-move self evt)
    (mouse-move self evt))


  (method override (mouse-leave self)
    (when close-button-enter
      (close-button-leave close-button-enter)))


  ;;;
  ;;;; Menu
  ;;;
  
  
  (method override (context-menu self evt)
    (let ((pos (get-position evt)))
      (with-context-click self pos
        (lambda ()
          (when (get-control? evt)
            (let ((menu (new Context-Menu)))
              (make-condensed-menu menu
                (enabled-sheets self)
                (lambda (user-data title parent)
                  (new Label-Item parent: parent title: title action-handler: (new Event-Handler execute: (lambda (evt) (set-selection self (sheet->rank self user-data) user-origin: #t)))))
                key: get-title)
              (layout-menu menu)
              (track-popup-menu self menu pos)))))))


  ;;;
  ;;;; Headers
  ;;;

  
  (method package (update-borders self)   ;; Quick fix : a little scaling if the tabs go beyond the width of the view.
    (let ((view-width (get-width self))   ;; No text clipping, no "...", all the text will still be printed.
          (transparent? (eq? (get-background (get-skin self)) 'none)))
      (let ((padding (if transparent? 5 padding)))
        (let loop ((n 0)
                   (h 2)
                   (borders (list))
                   (chx-in children)
                   (chx-out (list)))
             (if (pair? chx-in)
                 (let* ((header (car chx-in))
                        (title (localize (get-title header)))
                        (closable? (and (get-closable? header)
                                        (or (not keep-one-sheet?)
                                            (and keep-one-sheet?
                                                 (> (length children) 1)))))
                        (next (+ h padding (if title (+ (get-width (text-extent (effective-font self) title))
                                                        (if closable? 8 0)) 10) padding)))
                   (loop (+ n 1) next (cons (cons h next) borders) (cdr chx-in) (cons header chx-out)))
               (when (pair? chx-out)
                 (let ((max (cdr (car borders))))
                   (if (and (> max view-width) (not (= view-width 0)))
                       (let* ((scale (let ((r (/ view-width max)))  
                                       (lambda (border) 
                                         (cons (inexact->exact (round (* r (car border))))
                                               (inexact->exact (round (* r (cdr border)))))))))
                         (for-each (lambda (header border) (set-borders header (scale border)))
                                   chx-out borders))
                     (for-each set-borders chx-out borders)))))))))

  
  (method package (find-header self pt)
    (let ((h (get-h pt))
          (v (get-v pt)))
      (and (< v (effective-headers-height self))
           (continuation-capture
             (lambda (return)
               (for-each (lambda (header n)
                           (when (is-enabled? header)
                             (bind (left . right) (get-borders header)
                               (when (and (>= h left) (< h right))
                                 (continuation-return return n)))))
                         children
                         (naturals 0 (length children)))
               #f)))))


  (method (find-tab-sheet self pt)
    (let ((rank (find-header self pt)))
      (if rank
          (list-ref children rank)
        #f)))
  
  
  (method package (get-close-button-borders self header)
    (bind (lf . rg) (get-borders header)
      (let ((selected? (eq? header (selected-sheet self))))
        (let ((left (if selected? 4 2))
              (top (if selected? 0 2)))
          (offset-rect (new Rect (+ rg close-border-left) close-border-top (+ rg close-border-right) close-border-bottom)
                       left
                       top)))))
  
  
  ;;;
  ;;;; Component
  ;;;
  
  
  (method override (add-child self child)
    (let* ((empty? (null? children)))
      (nextmethod self child)
      (when (not empty?)
        (set-visible? child #f))
      (update-borders self)
      (layout-view self)
      (when empty?
        (set-selection self 0 focus?: #f))))
  
  
  (method override (remove-child self child)
    (if (destroying? self)
        (nextmethod self child)
      (when (and (> selection 0)
                 (>= selection (child-rank self child)))
        (set! selection (- selection 1)))
      (when (= (length children) 1)
        (invalidate-header self selection)
        (set-visible? (sheet-ranked self selection) #f)
        (set! selection #f))
      (nextmethod self child)
      (update-borders self)
      (layout-view self)
      (invalidate-view self)
      (set-selection self selection force?: #t focus?: #f)))
  
  
  ;;;
  ;;;; Selection
  ;;;
  
  
  (method public (get-selection self)
    selection)
  
  
  (method public virtual (set-selection self sel (focus?: focus? #t) (force?: force? #f) (user-origin: user-origin #f))
    (let ((old selection))
      (when (or force? (not (eqv? sel old)))
        (when old
          (let ((sheet (sheet-ranked self old)))
            (set-visible? sheet #f)))
        (set! selection sel)
        (when sel
          (let ((sheet (sheet-ranked self sel)))
            (set-visible? sheet #t)
            (when focus?
              (focus-host sheet))))
        (when old
          (invalidate-header self old))
        (when selection
          (invalidate-header self selection))
        (call-selection-handler self old selection force? user-origin)
        (when player
          (simulate-mouse-move player)))))


  (method public (invalidate-header self n)
    (bind (lf . rg) (get-borders (sheet-ranked self n))
      (invalidate-rect self (new Rect (- lf 2) 0 (+ rg 2) (effective-headers-height self)))))
  
  
  (method public (invalidate-headers self)
    (invalidate-rect self (new Rect 0 0 (get-width self) (effective-headers-height self))))


  (method public (get-selection-name self)
    (get-name (selected-sheet self)))
  
  
  (method public (set-selection-name self name (focus?: focus? #t))
    (let* ((sheet (child self name))
           (rank (child-rank self sheet)))
      (set-selection self rank focus?: focus?)))
  
  
  (method public (selected-sheet? self sheet)
    (eq? sheet (selected-sheet self)))
  
  
  (method public (selected-sheet self)
    (and selection (sheet-ranked self selection)))
  
  
  (method public (sheet->rank self sheet)
    (find children sheet))
  
  
  (method (sheet-ranked self n)
    (child-ranked self n))
  
  
  ;;;
  ;;;; Sheet
  ;;;
  
  
  (method public (all-sheets self)
    children)
  
  
  (method public (enabled-sheets self)
    (collect-if is-enabled? children))
  
  
  (method public (remove-every-sheet self)
    (close-children self))
  
  
  ;;;
  ;;;; Layout
  ;;;
  
  
  (method override (layout self)
    (let ((size (get-size self)))
      (for-each (lambda (child)
                  (when (is? child Tab-Sheet)
                    (set-position child {Point 0 0})
                    (set-size child size)))
                children)))
  
  
  (method (effective-headers-height self)
    (let ((transparent? (eq? (get-background (get-skin self)) 'none)))
      (if (and transparent? separator?)
          (+ headers-height 4)
        headers-height)))


  ;;;
  ;;;; Drawing
  ;;;

  
  (method override (draw-children self surface nodes context)
    (define (draw-top surface clipper size)
      (let ((left    0)
            (top     0)
            (right   (get-width size))
            (bottom  (get-height size))
            (transparent? (eq? (get-background (get-skin self)) 'none)))
        (let ((content (if (null? children) top (+ top (effective-headers-height self) -1))))
          (unless (and transparent? (not separator?))
            (let ((content-rect (new Rect left content right bottom)))
              (unless (rect-inside-border? clipper content-rect {Rect 1 1 2 2})
                (set-font surface {Font Label})
                (set-color surface (if transparent? {Color red: .308 green: .381 blue: .448} {Color Light}))
                (set-line-width surface 1)
                (unless transparent?
                  (draw-edge surface content-rect inner: 'raised outer: 'raised edges: '(right bottom))
                  (set-color surface {Color Light})
                  (move-to surface 0 content)
                  (line-to surface 0 bottom)
                  (set-color surface {Color Light}))
                (if (null? children)
                    (line surface 0 0 right 0)
                  (let ((h (cdr (get-borders (last children)))))
                    (line surface h content (if transparent? right (- right 1)) content))))))
          (when (< (get-top clipper) content)
            (let ((left-clip (get-left clipper))
                  (right-clip (get-right clipper)))
              (let (iter (headers children) (n 0))
                (when (not-null? headers)
                  (let ((header (car headers))
                        (selected? (= n selection)))
                    (bind (lf . rg) (get-borders header)
                      (unless transparent?
                        (when selected?
                          (decrease! lf 2)
                          (increase! rg 2)))
                      (when (< lf right-clip)
                        (when (> rg left-clip)
                          (let* ((title (localize (get-title header)))
                                 (title-color (get-title-color header))
                                 (border-color (get-border-color header))
                                 (header-color (get-header-color header))
                                 (header-end-color (get-header-end-color header))
                                 (previous? (= (+ n 1) selection))
                                 (next? (= (- n 1) selection))
                                 (top (if selected? 0 2))
                                 (background {Color red: 200 green: 198 blue: 187}))
                            ;; background
                            (unless transparent?
                              (cond ((debug-paint?)
                                     (let ((rect (new Rect (+ lf 1) (+ top 1) (- rg 2) content)))
                                       (fill-rect surface rect (cycle-debug-color!))))
                                    (header-color
                                      (let ((rect (new Rect (+ lf (if next? 3 1) 2) (+ top 2 1) (- rg 3) content)))
                                        (gradient-fill-rect surface rect (list (list 0 header-color) (list 1 header-end-color)) direction: 'vertical)))
                                    ((not selected?)
                                     (let ((rect (new Rect (+ lf 1) (+ top 1) (- rg 2) content)))
                                       (fill-rect surface rect background)))))
                            ;; border
                            (unless transparent?
                              (when border-color
                                (set-color surface border-color)
                                (move-to surface (+ lf 2) (+ top 2))
                                (line-to-preserve surface (- rg 4) (+ top 2))
                                (line-to-preserve surface (- rg 4) (- content 2))
                                (line-to-preserve surface (+ lf 2) (- content 2))
                                (line-to surface (+ lf 2) (+ top 2))))
                            ;; right
                            (unless transparent?
                              (unless previous?
                                (draw-edge surface (new Rect lf (+ top 2) rg content) inner: 'raised outer: 'raised edges: '(right))
                                (set-color surface background)
                                (move-to surface (- rg 2) (+ top 1))
                                (line-to surface (- rg 1) (+ top 2))))
                            ;; top
                            (unless transparent?
                              (set-color surface (if selected? {Color Light} {Color red: 243 green: 243 blue: 241}))
                              (move-to surface (- rg 2) top)
                              (line-to-preserve surface (+ lf (if next? 1 2)) top))
                            ;; left
                            (unless transparent?
                              (unless next?
                                (line-to-preserve surface lf (+ top 2))
                                (line-to surface lf content)))
                            ;; bottom
                            (unless (and transparent? (not separator?))
                              (unless selected?
                                (when transparent?
                                  (set-color surface {Color red: .308 green: .381 blue: .448}))
                                (move-to surface (if transparent? (- lf 2) lf) content)
                                (line-to surface rg content)))
                            ;; title
                            (when title
                              (draw-text surface (+ lf 5) (if transparent? 5 (+ top 3)) title (if transparent? (if selected? {Color red: .005 green: .796 blue: .918} {Color Medium-Gray}) (or title-color {Color Black}))))
                            ;; close
                            (when (and (get-closable? header)
                                       selected?
                                       (or (not keep-one-sheet?)
                                           (and keep-one-sheet?
                                                (> (length children) 1))))
                              (let ((rect (get-close-button-borders self header)))
                                (draw-caption surface rect 'close (get-close-button-down? header) (get-close-button-enter? header))))))
                        (iter (cdr headers)
                              (+ n 1))))))))))))
    
    (define (draw-bottom surface clipper size)
      ;; todo
      )
    
    (nextmethod self surface nodes context)
    (let ((clipper (get-clipper surface))
          (size (get-size self)))
      (case orientation
        ((top) (draw-top surface clipper size))
        ((bottom) (draw-bottom surface clipper size)))))
  
  
  ;;;
  ;;;; Skin
  ;;;
  
  
  (method override (get-skin self)
    (find-skin 'ui:tab))
  
  
  ;;;
  ;;;; Descriptor
  ;;;
  
  
  (method meta override (get-class-descriptor self (context: context #f))
    (new jazz.ui.descriptors:Tab-View-Descriptor))))
