;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Toggle Tools
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.ui.view.Toggle-Tool jazz


(import (jazz.graphic)
        (jazz.ui))


(class Toggle-Tool extends Image-Tool
  

  (property selected? initialize #f accessors explicit)
  
  
  (method override (default-size self)
    {Dimension 22 22})
  
  
  ;;;
  ;;;; Drawing
  ;;;


  (method override (draw-frame self surface)
    (if (and selected? (memq? (get-state self) '(inactive highlighted out-pushed)))
        (draw-pushed self surface)
      (nextmethod self surface)))


  (method override (draw-tool self surface context)
    (let ((offset (if (or selected? (eq? (get-state self) 'pushed)) 2 1)))
      (draw-image self surface context offset offset)))
  
  
  (method override (draw-background self surface context)
    (let ((state (get-state self)))
      (if selected?
          (let ((bounds (get-bounds self)))
            (fill-rect surface bounds {Color Light-Background}))
        (nextmethod self surface context))))
  
  
  ;;;
  ;;;; Mouse
  ;;;


  (method override (up self)
    (when (eq? (get-state self) 'pushed)
      (toggle-selected? self)
      (process-action self self)))
  
  
  ;;;
  ;;;; Selected
  ;;;


  (method public (get-selected? self)
    selected?)


  (method public (set-selected? self flag)
    (when (neq? flag selected?)
      (set! selected? flag)
      (invalidate-view self)))


  (method public (toggle-selected? self)
    (set-selected? self (not selected?)))))
