;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Tool Buttons
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.ui.view.Tool-Button jazz


(import (jazz.geometry)
        (jazz.graphic)
        (jazz.skin)
        (jazz.ui)
        (jazz.view))


(class Tool-Button extends Layout-View

  
  ;; inactive
  ;; highlighted
  ;; pushed
  ;; out-pushed
  (slot state initialize 'inactive)

  
  (method override (default-size self)
    {Dimension 100 22})
  
  
  (method override (mouse-activate? self)
    #f)
  
  
  ;;;
  ;;;; State
  ;;;
  
  
  (method public virtual (get-state self)
    state)
  
  
  (method public virtual (set-state self value)
    (set! state value)
    (invalidate-view self))

  
  ;;;
  ;;;; Enabled
  ;;;
  
  
  (method override (set-enabled? self flag)
    (when (not flag)
      (set-state self 'inactive))
    (nextmethod self flag))
  
  
  ;;;
  ;;;; Drawing
  ;;;
  
  
  (method override (draw-background self surface context)
    (when (memq? (get-state self) '(highlighted pushed))
      (let ((skin (get-skin self)))
        (let ((highlight (get-highlight skin)))
          (when highlight
            (let ((rect (expand-rect (get-bounds self) 1 1 -1 -1)))
              (if (is? highlight Color)
                  (frame-rect surface rect highlight)
                (fill-background surface rect highlight))))))))


  (method override (draw self surface context)
    (draw-frame self surface)
    (draw-tool self surface context))


  (method protected virtual (draw-frame self surface)
    (case (get-state self)
      ((inactive) (draw-inactive self surface))
      ((highlighted) (draw-highlighted self surface))
      ((pushed) (draw-pushed self surface))
      ((out-pushed) (draw-out-pushed self surface))))
  
  
  (method protected virtual (draw-inactive self surface)
    )


  (method protected virtual (draw-highlighted self surface)
    (if (is? (get-highlight (get-skin self)) Color)
        (draw-inactive self surface)
      (draw-border self surface (light-color self) (dark-color self))))


  (method protected virtual (draw-pushed self surface)
    (if (is? (get-highlight (get-skin self)) Color)
        (draw-inactive self surface)
      (draw-border self surface (dark-color self) (light-color self))))
  
  
  (method protected virtual (light-color self)
    {Color Light})
  
  
  (method protected virtual (dark-color self)
    {Color Dark})


  (method protected virtual (draw-out-pushed self surface)
    )


  (method (draw-border self surface upper lower)
    (let ((rect (get-bounds self)))
      (let ((left   0)
            (top    0)
            (right  (- (get-right rect) 1))
            (bottom (- (get-bottom rect) 1)))
        (set-color surface upper)
        (set-line-width surface 1)
        (move-to surface left bottom)
        (line-to surface left top)
        (line-to surface right top)
        (set-color surface lower)
        (move-to surface left bottom)
        (line-to-no-stroke surface right bottom)
        (line-to surface right top))))


  (method protected virtual (draw-tool self surface context)
    )
  
  
  ;;;
  ;;;; Skin
  ;;;
  
  
  (method override (get-skin self)
    (find-skin 'ui:tool))
  
  
  ;;;
  ;;;; Mouse
  ;;;


  (method override (mouse-enter self)
    (when (and (view-enabled? self) (or (not (get-mouse-down?)) (eq? (get-mouse-down-view) self)))
      (case (get-state self)
        ((inactive) (set-state self 'highlighted))
        ((out-pushed) (set-state self 'pushed)))))


  (method override (mouse-leave self)
    (when (or (not (get-mouse-down?)) (eq? (get-mouse-down-view) self))
      (case (get-state self)
        ((highlighted) (set-state self 'inactive))
        ((pushed) (set-state self 'out-pushed)))))


  (method override (mouse-down self evt)
    (when (view-enabled? self)
      (set-state self 'pushed)
      (down self)
      (invalidate-view self)))


  (method public virtual (down self)
    )


  (method override (drag-up self evt . rest)
    (when (view-enabled? self)
      (unwind-protect
          (up self)
        (case (get-state self)
          ((pushed) (set-state self 'highlighted))
          ((out-pushed) (set-state self 'inactive))))))


  (method public virtual (up self)
    )))
