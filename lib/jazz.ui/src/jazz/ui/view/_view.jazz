;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; View Definitions
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.ui.view jazz


(import (jazz.graphic)
        (jazz.library)
        (jazz.ui)
        (jazz.ui.offscreen)
        (jazz.ui.window)
        (jazz.utilities))


;;;
;;;; Mouse
;;;


(definition mouse-in          {})
(definition mouse-down?       #f)
(definition mouse-right-down? #f)
(definition mouse-down-view   {})
(definition mouse-down-point  {})


;; Support for mouse down actions that have to occur at mouse up time
;; See Application.activate for an example usage
(definition delayed-mouse-action
  {})


(definition public (get-delayed-mouse-action)
  delayed-mouse-action)

(definition public (set-delayed-mouse-action action)
  (set! delayed-mouse-action action))


(definition public (get-mouse-in)
  mouse-in)

(definition public (set-mouse-in view)
  (set! mouse-in view))


(definition public (get-mouse-down?)
  mouse-down?)

(definition public (set-mouse-down? flag)
  (set! mouse-down? flag))


(definition public (get-mouse-right-down?)
  mouse-right-down?)

(definition public (set-mouse-right-down? flag)
  (set! mouse-right-down? flag))


(definition public (get-mouse-down-view)
  mouse-down-view)

(definition public (set-mouse-down-view view)
  (set! mouse-down-view view))


(definition public (get-mouse-down-point)
  mouse-down-point)

(definition public (set-mouse-down-point point)
  (set! mouse-down-point point))


(definition public (mouse-view)
  (either Captured-View mouse-in))


;; This covers the special case where a mouse-down event triggers
;; a modal dialog. In this case, Windows will not generate the
;; mouse-up event, hence this bizarre code...
(definition public (toplevel-deactivate)
  (set! mouse-down? #f)
  (set! mouse-down-view {})
  (set! mouse-down-point {}))


;;;
;;;; Cursor
;;;


(definition public (with-cursor cursor proc (duration: duration {}))
  (unwind-protect
      (begin
        (set-cursor cursor)
        (when duration
          (sleep duration))
        (proc))
    (update-cursor)))


(definition public (update-cursor)
  (when (and mouse-in (in-player?~ mouse-in))
    (call-cursor-update~ mouse-in (mouse-position~ mouse-in))))


;;;
;;;; Dnd
;;;


(definition Current-Drag-Drop
  {})


(definition public (current-drag-drop)
  Current-Drag-Drop)

(definition public (set-current-drag-drop drag-drop)
  (set! Current-Drag-Drop drag-drop))


;;;
;;;; Capture
;;;


(definition Captured-View
  {})


(definition public (get-captured-view)
  Captured-View)

(definition public (set-captured-view view)
  (set! Captured-View view))


(definition (release-captured-view)
  (when Captured-View
    (set! Captured-View {})
    (unset-capture)))


;;;
;;;; External
;;;


;; first draft
(definition public (external-name guest-class)
  (identifier-name (type-name guest-class)))


;;;
;;;; Host
;;;


(definition public (get-focused-host)
  (let ((focus (get-focus)))
    (when focus
      (get-host~ focus))))


(definition public (focused-host? host)
  (eq? host (get-focused-host)))


;;;
;;;; Guest
;;;


(definition (new-guest guest-class rest)
  (apply new guest-class rest))


;;;
;;;; Dialog
;;;


(definition public (get-modal guest-class . rest)
  (receive (process? dialog/result) (apply new-dialog guest-class host-visible?: #f rest)
    (if (not process?)
        dialog/result
      (process-modal~ dialog/result))))


(definition public (new-dialog guest-class . rest)
  (bind-keywords ((host-title {}) (host-sizable? #f) (host-closable? #t) (host-visible? #t) (guest {}) (initialize {}) . others) rest
    (let* ((player (new (dialog-class~ guest-class) sizable?: host-sizable? closable?: host-closable? visible?: #f))
           (host (get-root~ player))
           (guest (either guest (new-guest guest-class others)))
           (size (either (host-size~ guest-class) (get-size~ guest)))
           (pos (either (host-position~ guest-class) (center-dialog size))))
      (set-title~ player (either host-title (host-title~ guest-class) "Dialog"))
      (set-size~ player size)
      (set-position~ player pos)
      (set-guest~ host guest)
      ;; Should initialisations done here generate errors, at least
      ;; parent install is still not done at this point.
      (when initialize
        (initialize host guest))
      (if (has-dialog-result?~ guest)
          (values #f (get-modal-result~ player))
        (when host-visible?
          (set-visible?~ player #t))
        (select-foreground-window (get-handle~ player))
        (values #t host)))))


(definition public (center-dialog inner)
  (let* ((outer (get-size~ (get-desktop)))
         (pos (center inner outer)))
    (new Point (get-h~ pos) (- (get-v~ pos) 50))))


;;;
;;;; Palette
;;;


(definition Palettes
  (make-table test: eq?))


(definition public (singleton-palette guest-class name . rest)
  (let ((ref (either name (type-name guest-class))))
    (either (table-ref Palettes ref #f)
            (let ((palette
                    ;; quick until I decide on the right solution
                    (if (procedure? guest-class)
                        (guest-class)
                      (new-palette guest-class host-visible?: #f))))
              (table-set! Palettes ref palette)
              palette))))


(definition public (new-palette guest-class . rest)
  (bind-keywords ((host-title {}) (host-position (host-position~ guest-class)) (host-size (host-size~ guest-class)) (host-visible? #t) (guest {}) (initialize {}) . others) rest
    (let* ((player (new (palette-class~ guest-class) visible?: #f))
           (host (get-root~ player)))
      (set-title~ player (either host-title (host-title~ guest-class) "Palette"))
      (when host-position
        (set-position~ player host-position))
      (when host-size
        (set-size~ player host-size))
      ;; It is important to set the palette's size before installing the guest
      ;; in order to minimize layouting by having the size right the first time!
      (let ((guest (either guest (new-guest guest-class others))))
        (set-guest~ host guest)
        ;; Should initialisations done here generate errors, at least
        ;; parent install is still not done at this point
        (when initialize
          (initialize host guest))
        (layout-view~ host)
        (when host-visible?
          (fade-in~ player))
        host))))


(definition public (show-palette guest-class . rest)
  (let ((palette (find-host~ (get-root~ (get-toplevel)) guest-class)))
    (if (not palette)
        (apply new-palette guest-class rest)
      (let ((guest (get-guest~ palette))
            (initialize (getf rest :initialize)))
        (when initialize
          (initialize palette guest))
        (client-activate~ guest)
        (let ((visible? (get-visible?~ palette)))
          (bring-to-front~ palette)
          (unless visible?
            (fade-in~ palette)))
        palette))))


(definition (reset-palettes)
  (set! Palettes (make-table test: eq?)))


;;;
;;;; Docked
;;;


(definition Dockeds
  (make-table test: eq?))


(definition public (singleton-docked guest-class name . rest)
  (let ((ref (either name (external-name guest-class))))
    (either (table-ref Dockeds ref #f)
            (let ((palette (new-docked guest-class name: name)))
              (table-set! Dockeds ref palette)
              palette))))


(definition public (new-docked guest-class . rest)
  (bind-keywords ((host-title {}) (host-location {}) . others) rest
    (let ((host (new Docked-Host visible?: #f)))
      (set-title~ host (either host-title (host-title~ guest-class) "Docked"))
      (when host-location
        (set-location~ host host-location))
      (set-guest~ host (new-guest guest-class others))
      host)))


(definition (reset-dockeds)
  (set! Dockeds (make-table test: eq?)))


;;;
;;;; Frame
;;;


(definition public (new-event guest-class . rest)
  (apply new-frame guest-class rest))


(definition public (new-frame guest-class . rest)
  (bind-keywords ((host-title {}) (host-position (host-position~ guest-class)) (host-size (host-size~ guest-class)) (host-workspace {}) (host-visible? #t) (host-focus? #t) (guest {}) (initialize {}) . others) rest
    (let ((host (new Frame-Host parent: (get-stage) visible?: #f)))
      (set-title~ host (either host-title (host-title~ guest-class) "Frame"))
      (when host-position
        (set-position~ host host-position))
      (when host-size
        (set-size~ host host-size))
      (when host-workspace
        (set-workspace~ host host-workspace))
      ;; It is important to set the frame's size before installing the guest
      ;; in order to minimize layouting by having the size right the first time!
      (let ((guest (either guest (new-guest guest-class others))))
        (set-guest~ host guest)
        ;; Should initialisations done here generate errors, at least
        ;; parent install is still not done at this point
        (when initialize
          (initialize host guest))
        (ensure-displayed~ host)
        (when host-visible?
          (bring-to-front~ host)
          (set-visible?~ host #t)
          (when host-focus?
            (focus-host~ host)))
        host))))


;;;
;;;; External Frame
;;;


(definition public (new-external-frame guest-class . rest)
  (bind-keywords ((host-title {}) (host-position (host-position~ guest-class)) (host-size (host-size~ guest-class)) (host-visible? #t) (guest {}) (initialize {}) . others) rest
    (let* ((player (new Frame visible?: #f))
           (host (get-root~ player)))
      (set-title~ player (either host-title (host-title~ guest-class) "Frame"))
      (when host-position
        (set-position~ player host-position))
      (when host-size
        (set-size~ player host-size))
      ;; It is important to set the frame's size before installing the guest
      ;; in order to minimize layouting by having the size right the first time!
      (let ((guest (either guest (new-guest guest-class others))))
        (set-guest~ host guest)
        ;; Should initialisations done here generate errors, at least
        ;; parent install is still not done at this point
        (when initialize
          (initialize host guest))
        (layout-view~ host)
        (when host-visible?
          (fade-in~ player))
        host))))


;;;
;;;; Toolbar
;;;


(definition Toolbars
  (make-table test: eq?))


(definition public (singleton-toolbar guest-class name . rest)
  (let ((ref (either name (type-name guest-class))))
    (either (table-ref Toolbars ref #f)
            (let ((palette (new-toolbar guest-class name: name)))
              (table-set! Toolbars ref palette)
              palette))))


(definition public (new-toolbar guest-class . rest)
  (bind-keywords ((host-title {}) (host-location {}) . others) rest
    (let ((host (new Toolbar-Host visible?: #f)))
      (set-title~ host (either host-title (host-title~ guest-class) "Toolbar"))
      (when host-location
        (set-location~ host host-location))
      (set-guest~ host (new-guest guest-class others))
      host)))


(definition (reset-toolbars)
  (set! Toolbars (make-table test: eq?)))


;;;
;;;; Progress
;;;


(definition (with-progress proc (threaded?: threaded? #t) (name: name {}) (progress-reporter: progress-reporter Progress-Reporter) (cancelable?: cancelable? #t) (abnormal-cleanup: abnormal-cleanup {}))
  (unimplemented 'with-progress)
  @convert-thread
  (if (not threaded?)
      (proc (new User-Reporter))
    (receive (process? dialog) (new-dialog progress-reporter host-closable?: cancelable? guest-context: context)
      (let ((reporter (get-guest~ dialog)))
        (when (not cancelable?)
          (disable-cancel~ reporter))
        (new Thread
          name: (either name "Worker Thread")
          context: self
          execute: (function (thread)
                     (let* ((result)
                            (resignal {})
                            (abnormal
                              (function (sig)
                                (when abnormal-cleanup
                                  (abnormal-cleanup))
                                (set! resignal sig))))
                       (unwind-protect
                           ;; Conceptually, the with-progress proc is executed in the same thread as the caller...
                           ;; The fact that we are using a thread for user interface responsiveness should not affect
                           ;; the semantics of proc which is why we resignal forwardable signals through the signal-modal
                           ;; definition which will resignal them to the calling thread
                           (catch (Signal sig
                                          (if (forwardable?~ sig)
                                              (abnormal sig)
                                            (signal sig)))
                             (set! result (proc reporter)))
                         (if resignal
                             (signal-modal~ dialog resignal)
                           (end-modal~ dialog result))))))
        (process-modal~ dialog)))))


;;;
;;;; Message
;;;


(definition public (message-box text (class: class {}) (type: type 'message) (title: title {}) (size: size {}) (icon: icon {}) (content: content {}) (sound: sound 'default) (selection: selection {}) (yes: yes {}) (no: no {}) (cancel: cancel {}) (actions: actions '()) (default-button: default-button {}) (process-keys?: process-keys? #t) (sizable?: sizable? #f))
  (receive (process? dialog) (new-dialog (either class Message-Box) host-visible?: #f host-sizable?: sizable?)
    (let ((guest (get-guest~ dialog)))
      (process-box~ guest text
        type: type
        title: title
        size: size
        icon: icon
        content: content
        sound: sound
        selection: selection
        yes: yes
        no: no
        cancel: cancel
        actions: actions
        default-button: default-button
        process-keys?: process-keys?))))


;;;
;;;; Safety
;;;


(definition public (with-safe-execution context thunk (continue-text: continue-text {}) (continue-handler: continue-handler {}))
  (call-with-catch Error
        (function (err)
          (let ((invite (format "The following error occured while {a}:" context))
                (message (get-message~ err)))
            (let ((text
                    (format "{a}{%}{%}{a}{a}"
                            invite
                            message
                            (if (not continue-handler)
                                ""
                              (format "{%}{%}Press Continue {a}, Exit to exit immediately"
                                      (either continue-text "to bypass this problem"))))))
              (if (not continue-handler)
                  (begin
                    (message-box text yes: "Exit")
                    (exit))
                (case (message-box text
                                   type: 'question
                                   yes: "Continue"
                                   no: "Exit")
                  ((yes) (continue-handler err))
                  ((no) (exit)))))))
    thunk))


;;;
;;;; Request
;;;


;; These should really be hooks to modify the dialog at creation time...


(definition public (request-string (class: class String-Request) (title: title {}) (prefix: prefix {}) (initial-value: initial-value {}) (accepts-empty?: accepts-empty? #t) (unicity-domain: unicity-domain {}) (validator: validator {}))
  (receive (process? dialog) (new-dialog class)
    (let* ((view (get-guest~ dialog))
           (prfx (locate~ view 'prefix))
           (text (locate~ view 'text)))
      (set-title~ dialog (either title "Enter String"))
      (set-accepts-empty?~ view accepts-empty?)
      (set-unicity-domain~ view unicity-domain)
      (set-validator~ view validator)
      (set-title~ prfx (either prefix "String:"))
      (set-string-content~ text (if initial-value (->string initial-value) ""))
      (select-all~ text)
      (acquire-focus~ text)
      (let ((string (process-modal~ dialog)))
        (if (empty-string? string)
            {}
          string)))))


(definition public (request-name (title: title {}) (prefix: prefix {}) . others)
  (let* ((title (either title "Enter Name"))
         (prefix (either prefix "Name:"))
         (string (apply request-string title: title prefix: prefix others)))
    (if (not string)
        {}
      (string->symbol string))))


(definition public (request-text (class: class Text-Request) (title: title {}) (initial-text: initial-text {}))
  (unimplemented 'request-text)
  @Text-Request
  (receive (process? dialog) (new-dialog class)
    (let* ((view (get-guest~ dialog))
           (text (locate~ view 'text)))
      (set-title~ dialog (either title "Enter Text"))
      (set-string-content~ text (either initial-text ""))
      (select-all~ text)
      (acquire-focus~ text)
      (let ((string (process-modal~ dialog)))
        (if (empty-string? string)
            {}
          string)))))


(definition public (request-date (class: class Date-Request) (title: title {}) (prefix: prefix {}) (initial-date: initial-date {}))
  (unimplemented 'request-date)
  @Date-Request
  (receive (process? dialog) (new-dialog class)
    (let* ((view (get-guest~ dialog))
           (prfx (locate~ view 'prefix))
           (text (locate~ view 'text)))
      (set-title~ dialog (either title "Enter Date"))
      (set-title~ prfx (either prefix "Date:"))
      (set-string-content~ text (if initial-date (present~ initial-date) ""))
      (select-all~ text)
      (acquire-focus~ text)
      (let ((string (process-modal~ dialog)))
        (if (empty-string? string)
            {}
          (parse-string~ Date string))))))


;;;
;;;; Various
;;;


(definition public (get-workspace-preferences)
  (get-workspace-preferences~ (get-toplevel)))

(definition public (set-workspace-preferences preferences)
  (set-workspace-preferences~ (get-toplevel) preferences))


(definition public (get-stage-border)
  (get-parent~ (get-stage)))


(definition public (get-output-log)
  (get-output-log~ (get-application)))


(definition public (get-active-results)
  (get-active-results~ (get-application)))


(definition public (find-palette class)
  (let ((toplevel (get-toplevel)))
    (when toplevel
      (either (find-type~ toplevel class)
              (find-palette~ toplevel class)))))


(definition public (select-palette class (name: name {}) (workspace: workspace 'home) (focus?: focus? #f))
  (let ((guest (find-palette class))
        (proc
          (function (view)
            (when view
              (let* ((host (get-host~ view))
                     (parent (get-parent~ host)))
                (when (is? parent Pad-View)
                  (set-selection~ parent host))
                (for-each-splitter (if (is? parent Splitter-View) host parent)
                  (function (splitter view)
                    (when (and (eq? (get-state~ splitter) 'zoom)
                               (neq? (get-zoomed~ splitter) view))
                      (unzoom~ splitter))))
                (when focus?
                  (focus-host~ host))
                view)))))
    (if guest
        (proc guest)
      (when workspace
        (apply-preferences~ (get-preferences (list 'workspaces workspace)))
        (proc (find-palette class))))))


(definition public (for-each-docked proc)
  (for-each-palette~ (get-toplevel)
    (function (palette)
      (when (is? palette Docked-Host)
        (proc (get-guest~ palette))))))


(definition public (for-each-splitter view proc)
  (let ((splitter (get-parent~ view))
        (splitter-class Splitter-View))
    (while (is? splitter splitter-class)
      (proc splitter view)
      (set! view splitter)
      (set! splitter (get-parent~ splitter)))))


(definition public (current-frame)
  (let ((stage (get-stage)))
    (when stage
      (first-view~ stage))))


(definition public (current-document)
  (let ((frame (current-frame)))
    (when (is? frame Frame-Host)
      (get-guest~ frame))))


(definition public (current-guest)
  (let ((host (get-focused-host)))
    (when host
      (get-guest~ host))))


(definition public (focus-guest)
  (let ((focus (get-focus)))
    (when focus
      (get-guest~ focus))))


;;;
;;;; Focus
;;;


;; It is critical that this variable be used instead of calling get-window-focus
;; because on X11 the callback to focus-gain is asynchronous and we want to know
;; the window that has actually received and processed the focus-gain event.
(definition *focused-window*
  {})


(definition public (get-focused-window)
  *focused-window*)

(definition public (set-focused-window window)
  (set! *focused-window* window))


(definition *focus*
  {})


(definition public (get-focus)
  *focus*)


(definition public (set-focus view)
  (when (neq? view *focus*)
    (let ((player (essay view (get-player~ view))))
      (if (and player (neq? player *focused-window*))
          (begin
            (set-previously-focused-view~ player view)
            (set-window-focus player))
        (let ((old *focus*))
          (when *focus*
            (let ((old-host (essay old (get-host~ old))))
              (when old-host
                (deactivate-focus~ old-host)))
            (let ((focus *focus*))
              (set! *focus* {})
              (call-focus-lose~ focus view)))
          (set! *focus* {})
          (when view
            (call-focus-gain~ view old))
          (set! *focus* view)
          (let ((host (essay view (get-host~ view))))
            (when host
              (activate-focus~ host)))
          (when (process-active?)
            (process-focus-change~ (get-application) old view)))))))


(definition public (get-focus-actions view)
  (focus-actions~ view))


(definition public (refresh-focus-actions view)
  (when (eq? view (get-focus))
    (set-focus-actions~ (get-application) (get-focus-actions view))))


;;;
;;;; Debug
;;;


(definition *debug-paint*
  #f)


(definition *debug-colors*
  '({Color name: Dark-Red}
    {Color name: Dark-Orange}
    {Color name: Dark-Yellow}
    {Color name: Dark-Green}
    {Color name: Dark-Blue}
    {Color name: Dark-Purple}))

(definition *nb-debug-colors*
  (length *debug-colors*))

(definition *current-debug-color*
  0)


(definition public (cycle-debug-color!)
  (prog1 (element *debug-colors* *current-debug-color*)
    (set! *current-debug-color* (modulo (+ *current-debug-color* 1) *nb-debug-colors*))))


(definition public (debug-paint? . rest)
  (if (null? rest)
      *debug-paint*
    (set! *debug-paint* (car rest))))


;;;
;;;; Debugger
;;;


(definition public (cleanup-mouse-processing)
  (release-captured-view)
  (complete-drag-and-drop)
  (complete-drag-up #f))


(definition (complete-drag-and-drop)
  (when Current-Drag-Drop
    (drag-end~ (get-view~ (get-source~ Current-Drag-Drop)))))


(definition (complete-drag-up dragging?)
  (when mouse-down?
    (let ((pos (mouse-position~ mouse-down-view)))
      (process-drag-up~ mouse-down-view pos dragging?)))))
