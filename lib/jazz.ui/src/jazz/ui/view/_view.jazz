;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; View Definitions
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module jazz.ui.view jazz


(import (jazz.application)
        (jazz.debuggee)
        (jazz.event)
        (jazz.feedback)
        (jazz.graphic)
        (jazz.library)
        (jazz.platform)
        (jazz.process)
        (jazz.snapshot)
        (jazz.ui)
        (jazz.ui.window)
        (jazz.ui.workspace))


;;;
;;;; Mouse
;;;


(definition package mouse-in          #f)
(definition package mouse-down?       #f)
(definition package mouse-right-down? #f)
(definition package mouse-down-view   #f)
(definition package mouse-down-point  #f)


;; Support for mouse down actions that have to occur at mouse up time
;; See Application.activate for an example usage
(definition delayed-mouse-action
  #f)


(definition public (get-delayed-mouse-action)
  delayed-mouse-action)

(definition public (set-delayed-mouse-action action)
  (set! delayed-mouse-action action))


(definition public (get-mouse-in)
  mouse-in)

(definition public (set-mouse-in view)
  (set! mouse-in view))

(definition public (reset-mouse-in)
  (set! mouse-in #f))


(definition public (get-mouse-down?)
  mouse-down?)

(definition public (set-mouse-down? flag)
  (set! mouse-down? flag))


(definition public (get-mouse-right-down?)
  mouse-right-down?)

(definition public (set-mouse-right-down? flag)
  (set! mouse-right-down? flag))


(definition public (get-mouse-down-view)
  mouse-down-view)

(definition public (set-mouse-down-view view)
  (set! mouse-down-view view))


(definition public (get-mouse-down-point)
  mouse-down-point)

(definition public (set-mouse-down-point point)
  (set! mouse-down-point point))


(definition public (mouse-view)
  (or Captured-View mouse-in))


;; This covers the special case where a mouse-down event triggers
;; a modal dialog. In this case, Windows will not generate the
;; mouse-up event, hence this bizarre code...
(definition public (toplevel-deactivate)
  (set! mouse-down? #f)
  (set! mouse-down-view #f)
  (set! mouse-down-point #f))


;;;
;;;; Cursor
;;;


(definition public (with-cursor cursor proc (duration: duration #f))
  (unwind-protect
      (begin
        (set-cursor cursor)
        (when duration
          (sleep duration))
        (proc))
    (update-cursor)))


(definition public (update-cursor)
  (when (and mouse-in (in-player?~ mouse-in) (get-cursor-visible?~ (get-player~ mouse-in)))
    (let ((event (make-event Mouse-Event :mouse-move #f position: (mouse-position~ mouse-in))))
      (call-cursor-update~ mouse-in event))))


;;;
;;;; Dnd
;;;


(definition Current-Drag-Drop
  #f)


(definition public (current-drag-drop)
  Current-Drag-Drop)

(definition public (set-current-drag-drop drag-drop)
  (set! Current-Drag-Drop drag-drop))


;;;
;;;; Capture
;;;


(definition Captured-View
  #f)


(definition public (get-captured-view)
  Captured-View)

(definition public (set-captured-view view)
  (set! Captured-View view))


(definition package (release-captured-view)
  (when Captured-View
    (set! Captured-View #f)
    (unset-capture)))


;;;
;;;; External
;;;


;; first draft
(definition public (external-name guest-class)
  (category-name guest-class))


;;;
;;;; Host
;;;


(definition public (get-focused-host)
  (let ((focus (get-focus)))
    (when focus
      (get-host~ focus))))


(definition public (focused-host? host)
  (eq? host (get-focused-host)))


;;;
;;;; Guest
;;;


(definition (new-guest guest-class rest)
  (apply new guest-class rest))


;;;
;;;; Dialog
;;;


(definition public (get-modal guest-class . rest)
  (receive (process? dialog/result) (apply new-dialog guest-class host-visible?: #f rest)
    (if (not process?)
        dialog/result
      (process-modal~ dialog/result))))


(definition public (new-dialog guest-class . rest)
  (bind-keywords ((host-title #f) (host-miniaturizable? #f) (host-sizable? #f) (host-closable? #t) (host-visible? #t) (guest #f) (initialize #f) . others) rest
    (let ((guest (or guest (new-guest guest-class others))))
      (when initialize
        (initialize guest))
      (let* ((player (new (dialog-class~ guest-class) miniaturizable?: host-miniaturizable? sizable?: host-sizable? closable?: host-closable? visible?: #f))
             (host (get-root~ player))
             (size (or (host-size~ guest-class) (get-size~ guest)))
             (pos (or (host-position~ guest-class) (position-dialog size))))
        (set-title~ player (or host-title (host-title~ guest-class) "Dialog"))
        (set-size~ player size)
        (set-position~ player pos)
        (set-guest~ host guest)
        (if (has-dialog-result?~ guest)
            (values #f (get-modal-result~ player))
          (when host-visible?
            (set-visible?~ player #t))
          @is-this-really-necessary?
          (select-foreground~ player)
          (focus-host~ host)
          (values #t host))))))


(definition public (position-dialog size)
  (monitor-center (current-monitor) size))


;;;
;;;; Palette
;;;


(definition package Palettes
  (make-table test: eq?))


(definition public (find-singleton-palette name)
  (table-ref Palettes name #f))


(definition public (singleton-palette guest-class name . rest)
  (let ((ref (or name (category-identifier guest-class))))
    (or (table-ref Palettes ref #f)
        (let ((palette
                ;; quick solution until we decide on the right approach
                (if (procedure? guest-class)
                    (guest-class)
                  (apply new-palette guest-class host-visible?: #f rest))))
          (table-set! Palettes ref palette)
          palette))))


(definition public (new-palette guest-class . rest)
  (bind-keywords ((host-title #f) (host-position (host-position~ guest-class)) (host-size (host-size~ guest-class)) (host-visible? #t) (guest #f) (initialize #f) . others) rest
    (let ((guest (or guest (new-guest guest-class others))))
      (when initialize
        (initialize guest))
      (let* ((player (new (palette-class~ guest-class) visible?: #f))
             (host (get-root~ player))
             (size (or host-size (get-size~ host)))
             (pos (or host-position (position-palette size))))
        (set-title~ player (or host-title (host-title~ guest-class) "Palette"))
        (set-position~ player pos)
        (when host-size
          (set-size~ player host-size))
        ;; It is important to set the palette's size before installing the guest
        ;; in order to minimize layouting by having the size right the first time!
        (set-guest~ host guest)
        (layout-view~ host)
        (when host-visible?
          (fade-in~ player)
          (focus-host~ host))
        host))))


(definition public (show-palette guest-class . rest)
  (let* ((host (apply singleton-palette guest-class (external-name~ guest-class) rest))
         (guest (get-guest~ host))
         (palette (get-player~ host))
         (initialize (getf rest initialize:)))
    (when initialize
      (initialize guest))
    (client-activate~ guest)
    (let ((visible? (get-visible?~ palette)))
      (bring-to-front~ palette)
      (unless visible?
        (fade-in~ palette))
      (focus-host~ host))
    palette))


(definition package (singleton-palette-name target)
  (table-search (lambda (name host)
                  (when (eq? host target)
                    name))
                Palettes))

(definition package (singleton-palette-named name)
  (find-singleton-palette name))


(definition public (position-palette size)
  (nu- (monitor-center (current-monitor) size)
       {Dimension 0 100}))


(definition public (collect-palettes)
  (collect-if (lambda (window)
                (is? window Palette))
              (get-windows~ (palette-parent))))


(definition package (reset-palettes)
  (set! Palettes (make-table test: eq?)))


;;;
;;;; Docked
;;;


(definition package Dockeds
  (make-table test: eq?))


(definition public (find-singleton-docked name)
  (table-ref Dockeds name #f))


(definition public (singleton-docked guest-class . rest)
  (let ((name (external-name~ guest-class)))
    (or (find-singleton-docked name)
        (let ((palette (apply new-docked guest-class name: name rest)))
          (table-set! Dockeds name palette)
          palette))))


(definition public (named-singleton-docked guest-class name . rest)
  (let ((name (or name (external-name~ guest-class))))
    (or (find-singleton-docked name)
        (let ((palette (apply new-docked guest-class name: name rest)))
          (table-set! Dockeds name palette)
          palette))))


(definition public (new-docked guest-class . rest)
  (bind-keywords ((host-title #f) (host-location #f) . others) rest
    (let ((host (new Docked-Host visible?: #f)))
      (set-title~ host (or host-title (host-title~ guest-class) "Docked"))
      (when host-location
        (set-location~ host host-location))
      (set-guest~ host (new-guest guest-class others))
      host)))


(definition package (singleton-docked-name target)
  (table-search (lambda (name host)
                  (when (eq? host target)
                    name))
                Dockeds))

(definition package (singleton-docked-named name)
  (find-singleton-docked name))


(definition package (reset-dockeds)
  (set! Dockeds (make-table test: eq?)))


;;;
;;;; Stage
;;;


(definition package *stages*
  '())

(definition package *current-stage*
  #f)


(definition public (get-stages)
  *stages*)

(definition public (get-active-stages)
  (collect-if in-player?~ *stages*))


(definition public (first-stage)
  (first (get-active-stages)))

(definition public (last-stage)
  (last (get-active-stages)))


(definition public (current-stage)
  *current-stage*)

(definition public (set-current-stage stage (activate?: activate? #t))
  (unless (eq? stage *current-stage*)
    (let ((previous *current-stage*))
      (set! *current-stage* stage)
      (when stage
        (set! *stages* (cons stage (remove! stage *stages*))))
      (when previous
        (invalidate-border~ (get-border~ previous)))
      (when stage
        (invalidate-border~ (get-border~ stage))
        (stage-activate~ stage))))
  (when activate?
    (activate-current-frame))
  (update-menubar-buttons~ (get-application)))

(definition public (reset-current-stage)
  (set-current-stage #f))


(definition public (create-stage)
  (let ((stage (new-stage~ (get-application))))
    (set! *stages* (cons stage *stages*))
    stage))


(definition public (current-stage-border)
  (let ((stage (current-stage)))
    (when stage
      (get-parent~ stage))))


(definition public (all-frames (include-invisibles?: include-invisibles? #f))
  (append (all-internal-frames include-invisibles?: include-invisibles?)
          (all-external-frames include-invisibles?: include-invisibles?)))


(definition public (all-internal-frames (include-invisibles?: include-invisibles? #f))
  (collect-if (lambda (frame)
                (and (is? frame Internal-Frame-Host)
                     (or include-invisibles? (get-visible?~ frame))))
              (get-frames)))


(definition public (all-external-frames (include-invisibles?: include-invisibles? #f))
  (collect-if (lambda (frame)
                (and (is? frame External-Frame-Host)
                     (or include-invisibles? (get-visible?~ frame))))
              (get-frames)))


(definition public (first-frame)
  (let ((frames (current-stage-frames)))
    (if (null? frames)
        #f
      (first frames))))


(definition public (second-frame)
  (let ((frames (current-stage-frames)))
    (if (>= (length frames) 2)
        (second frames)
      #f)))


(definition public (last-frame)
  (let ((frames (current-stage-frames)))
    (if (null? frames)
        #f
      (last frames))))


(definition public (collect-frames)
  (collect-if (lambda (frame)
                (let ((guest (get-guest~ frame)))
                  (or (is-not? guest Document)
                      (not (get-tool?~ (get-document-controller~ guest))))))
              (all-frames)))


(definition public (find-frame-if-guest pred)
  (find-if pred (all-frames include-invisibles?: #t) key: get-guest~))


(definition public (find-frame-host guest-type)
  (find-if (lambda (view)
             (and (is? view Host-View)
                  (is? (get-guest~ view) guest-type)))
           (all-frames include-invisibles?: #t)))


(definition public (find-frame-guest guest-type)
  (let ((host (find-frame-host guest-type)))
    (when host
      (get-guest~ host))))


;;;
;;;; Popup
;;;


(definition public (close-popup popup)
  (pop-focuses popup)
  (close-popup~ (get-window-manager) popup)
  (remove-popup popup))


(definition public (close-all-popups)
  (for-each close-popup (get-popups)))


;;;
;;;; Workspace
;;;


(definition public (delete-stage)
  (let ((designer (get-workspaces-designer~ (get-application)))
        (current-stage (current-stage)))
    (let ((stage (get-figure-preferences~ current-stage)))
      (let ((splitter (get-parent~ stage)))
        (if (is-not? splitter Splitter-Preferences)
            (bell)
          (let ((splitter-view (get-parent~ (get-border~ current-stage))))
            (delete-stages designer stage splitter current-stage splitter-view)))))))


(definition public (delete-other-stages)
  (let ((designer (get-workspaces-designer~ (get-application)))
        (current-stage (current-stage)))
    (let ((stage (get-figure-preferences~ current-stage)))
      (let ((splitter (get-parent~ stage)))
        (if (is-not? splitter Splitter-Preferences)
            (bell)
          (receive (preference view) (find-top-stage current-stage)
            (delete-stages designer stage preference current-stage view)))))))


(definition public (find-top-stage stage)
  (define (find-splitter preference view)
    (let ((parent (get-parent~ preference)))
      (if (stage-splitter? parent)
          (find-splitter parent (get-parent~ view))
        (values preference view))))
  
  (let ((preference (get-figure-preferences~ stage)))
    (find-splitter preference (get-border~ stage))))


(definition public (stage-splitter? splitter)
  (and (is? splitter Splitter-Preferences)
       (every? (lambda (pref)
                 (or (is? pref Stage-Preferences)
                     (stage-splitter? pref)))
               (get-children~ splitter))))


(definition (delete-stages designer stage splitter stage-view closed-view)
  (define (only-stages? view)
    (or (is? view Stage-Preferences)
        (and (is? view Splitter-Preferences)
             (every? only-stages? (get-children~ view)))))
  
  (define (move-frames destroyed-stages stage-view)
    (for-each (lambda (stage)
                (for-each (lambda (frame)
                            (if (find-frame-brother stage-view frame)
                                (close~ frame)
                              (set-parent~ frame stage-view)
                              (send-to-back~ frame)))
                          (get-children~ stage)))
              destroyed-stages))
  
  (let ((parent (get-parent~ splitter)))
    (if (or (not (can-relocate-component?~ designer stage parent))
            (not (only-stages? splitter)))
        (bell)
      (set-property~ designer stage 'location (get-location~ splitter))
      (relocate-component~ designer stage parent)
      (remove-child~ designer splitter)
      (let ((border-view (get-border~ stage-view)))
        (let ((parent-view (get-parent~ closed-view))
              (destroyed-stages (remove! stage-view (collect-descendants~ closed-view Stage))))
          (move-frames destroyed-stages stage-view)
          (set-location~ border-view (get-location~ closed-view))
          (set-parent~ border-view parent-view)
          (close~ closed-view)
          (layout-view~ parent-view)))
      (update-window-actions~ (get-application)))))


(definition protected (find-frame-brother stage frame)
  (and (is? frame Host-View)
       (let ((guest (get-guest~ frame)))
         (and (is? guest Text-View)
              (let ((model (get-model~ guest)))
                (find-if (lambda (actual-frame)
                           (and (is? actual-frame Host-View)
                                (let ((actual-guest (get-guest~ actual-frame)))
                                  (and (is? actual-guest Text-View)
                                       (eq? (get-model~ actual-guest) model)))))
                         (get-views~ stage)))))))


(definition public (split-stage-vertically)
  (split-stage 'vert))


(definition public (split-stage-horizontally)
  (split-stage 'horz))


(definition (split-stage direction)
  (let ((designer (get-workspaces-designer~ (get-application)))
        (current-stage (current-stage)))
    (if (not current-stage)
        (bell)
      (let ((stage-preferences (get-figure-preferences~ current-stage))
            (frame (first-view~ current-stage)))
        (let ((parent-preferences (get-parent~ stage-preferences))
              (new-splitter-preferences (new Splitter-Preferences))
              (new-stage-preferences (new Stage-Preferences)))
          (let ((splitter-location (get-location~ stage-preferences))
                (splitter-orientation direction)
                (splitter-mode 'relative)
                (splitter-division 50))
            (when (descendant-owned-by-reference?~ designer stage-preferences)
              (add-child~ designer new-splitter-preferences parent-preferences)
              (relocate-component~ designer stage-preferences new-splitter-preferences)
              (add-child~ designer new-stage-preferences new-splitter-preferences)
              (set-property~ designer new-splitter-preferences 'location splitter-location)
              (set-property~ designer new-splitter-preferences 'orientation splitter-orientation)
              (set-property~ designer new-splitter-preferences 'mode splitter-mode)
              (set-property~ designer new-splitter-preferences 'division splitter-division)
              (set-property~ designer stage-preferences 'location 'first)
              (set-property~ designer new-stage-preferences 'location 'second)
              (set-property~ designer new-stage-preferences 'maximized? (get-maximized?~ stage-preferences)))
            (let ((border (get-border~ current-stage)))
              (let ((parent (get-parent~ border))
                    (splitter (new Splitter-View))
                    (stage (remember-stage~ new-stage-preferences)))
                (set-parent~ border splitter)
                (set-parent~ splitter parent)
                (set-parent~ (get-parent~ stage) splitter)
                (set-location~ splitter splitter-location)
                (set-orientation~ splitter splitter-orientation)
                (set-mode~ splitter splitter-mode)
                (set-division~ splitter splitter-division)
                (set-location~ border 'first)
                (set-location~ (get-parent~ stage) 'second)
                (set-maximized?~ stage (get-maximized?~ current-stage))
                (layout-view~ (get-parent~ splitter))
                (layout-view~ splitter)
                (set-current-stage stage activate?: (not (front-frame)))
                (when (is? frame Host-View)
                  (let ((splitted (split-view~ (get-guest~ frame))))
                    (when splitted
                      (remember-workspace-stage~ splitted))))
                (activate-current-frame)))
            (update-window-actions~ (get-application))))))))


(definition public (move-frame)
  (let ((frame (current-frame)))
    (let ((stage (if frame (get-stage~ frame) (current-stage))))
      (let ((next-stage (navigate-next-stage)))
        (if (not next-stage)
            (bell)
          (when frame
            (set-parent~ frame next-stage)
            (maximize/restore~ frame)
            (remember-workspace-stage~ frame)))))))


(definition public (clone-frame)
  (let ((frame (current-frame)))
    (if (is-not? frame Host-View)
        (bell)
      (let ((stage (get-stage~ frame)))
        (let ((next-stage (navigate-next-stage)))
          (if (not next-stage)
              (bell)
            (let ((brother (find-frame-brother next-stage frame)))
              (if brother
                  (focus-host~ brother)
                (let ((splitted (split-view~ (get-guest~ frame))))
                  (if (not splitted)
                      (bell)
                    (set-parent~ splitted next-stage)
                    (maximize/restore~ splitted)
                    (remember-workspace-stage~ splitted)))))))))))


(definition public (tie-frame-model)
  (let ((frame (current-frame)))
    (if (is-not? frame Host-View)
        (bell)
      (let ((guest (get-guest~ frame))
            (stage (get-figure-preferences~ (current-stage)))
            (designer (get-workspaces-designer~ (get-application))))
        (let ((guest-model (category-name (class-of guest))))
          (set-property~ designer stage 'guest-model (new Reference guest-model))
          (user-message "Stage tied to {s}" guest-model))))))


(definition public (untie-stage)
  (let ((stage (get-figure-preferences~ (current-stage)))
        (designer (get-workspaces-designer~ (get-application))))
    (set-property~ designer stage 'guest-model #f)
    (user-message "Stage untied")))


(definition public (next-stage stage)
  (let ((stages (get-active-stages)))
    (let ((count (length stages)))
      (when (>= count 2)
        (next-element stages stage)))))


(definition public (previous-stage stage)
  (let ((stages (get-active-stages)))
    (let ((count (length stages)))
      (when (>= count 2)
        (previous-element stages stage)))))


(definition public (navigate-next-stage)
  (define (bring-stage-to-front stage)
    (set! *stages* (cons stage (remove! stage *stages*))))
  
  (let ((stages (get-active-stages)))
    (when (>= (length stages) 2)
      (let ((stage (last-stage)))
        (bring-stage-to-front stage)
        (activate-stage stage)
        stage))))


(definition public (navigate-previous-stage)
  (define (send-stage-to-back stage)
    (set! *stages* (append (remove! stage *stages*) (list stage))))
  
  (let ((stages (get-active-stages)))
    (when (>= (length stages) 2)
      (let ((stage (first-stage)))
        (send-stage-to-back stage)
        (let ((stage (first-stage)))
          (activate-stage stage)
          stage)))))


(define (activate-stage stage)
  (let ((frame (first-view~ stage)))
    (if frame
        (focus-host~ frame)
      (acquire-focus~ stage))))


;;;
;;;; Frame Management
;;;


(definition *active-frame*
  #f)


(definition package (active-frame)
  *active-frame*)

(definition package (set-active-frame frame)
  (set! *active-frame* frame))


(definition package (activate-current-frame)
  (let ((front (front-frame))
        (active *active-frame*))
    (when (neq? front active)
      (when active
        (deactivate-frame~ active))
      (if front
          (activate-frame~ front)
        (let ((stage (current-stage)))
          (when stage
            (stage-empty-activate~ stage)))))))


(definition public (front-frame)
  (let ((stage (current-stage)))
    (when stage
      (first-view~ stage))))


(definition public (current-stage-frames)
  (let ((stage (current-stage)))
    (if stage
        (get-views~ stage)
      '())))


;;;
;;;; Frame Region
;;;


(definition public (frame-region frame <Rect> (insets: insets (new Rect 1 1 1 1)))
  (let ((left   (get-left~ frame))
        (top    (get-top~ frame))
        (right  (get-right~ frame))
        (bottom (get-bottom~ frame))
        (region (new Region)))
    (with ((l (new Region rect: (new Rect left                          top                             (+ left (get-left~ insets)) bottom)))
           (t (new Region rect: (new Rect left                          top                             right                       (+ top (get-top~ insets)))))
           (r (new Region rect: (new Rect (- right (get-right~ insets)) top                             right                       bottom)))
           (b (new Region rect: (new Rect left                          (- bottom (get-bottom~ insets)) right                       bottom))))
      (combine-or!~ region l)
      (combine-or!~ region t)
      (combine-or!~ region r)
      (combine-or!~ region b)
      region)))


;;;
;;;; Frame
;;;


(define-setting default-frame-kind
  'internal)


(definition public (new-frame guest/class . rest)
  (bind-keywords ((kind #f) . others) rest
    (case (or kind (default-frame-kind))
      ((internal) (apply new-internal-frame guest/class others))
      ((external) (apply new-external-frame guest/class others)))))


;;;
;;;; Internal Frame
;;;


(definition Internal-Frame-Cascade-Position
  {Point 25 25})


(definition Internal-Frame-Cascade-Step
  {Dimension 22 22})


(definition (collect-frames-positions host guest)
  (let* ((stage (get-stage~ host))
         (maximized? (get-maximized?~ stage)))
    (collect (lambda (frame)
               (and (is? frame Internal-Frame-Host)
                    @for-correct-cascading
                    (eq? (class-of (get-guest~ frame)) (class-of guest))
                    (if maximized?
                        (get-preserved-position~ frame)
                      (get-position~ frame))))
             (get-views~ stage))))


(definition (cascade-frame-position host guest)
  (cascade-position Internal-Frame-Cascade-Position
                    Internal-Frame-Cascade-Step
                    (collect-frames-positions host guest)))


(definition public (new-internal-frame guest/class . rest)
  (let ((guest-class (if (class? guest/class) guest/class (class-of guest/class)))
        (guest (if (class? guest/class) #f guest/class)))
    (bind-keywords ((host-title #f) (host-position (host-position~ guest-class)) (host-size (host-size~ guest-class)) (host-workspace #f) (host-visible? #t) (host-focus? #t) (initialize #f) . others) rest
      (define (determine-stage)
        (let ((stages (get-active-stages)))
          (continuation-capture
            (lambda (return)
              ;; find a tie match
              (for-each (lambda (stage)
                          (let ((guest-model (get-guest-model~ (get-figure-preferences~ stage))))
                            (when (and guest-model (subtype? guest-class (resolve-reference~ guest-model)))
                              (continuation-return return stage))))
                        stages)
              ;; prefer untied stages
              (for-each (lambda (stage)
                          (let ((guest-model (get-guest-model~ (get-figure-preferences~ stage))))
                            (when (not guest-model)
                              (continuation-return return stage))))
                        stages)
              ;; else
              (current-stage)))))
      
      (let ((guest (or guest (new-guest guest-class others))))
        (when initialize
          (initialize guest))
        (let ((host (new Internal-Frame-Host parent: (determine-stage) visible?: #f)))
          (set-title~ host (or host-title (host-title~ guest-class) "Frame"))
          (set-position~ host (or host-position (cascade-frame-position host guest)))
          (set-size~ host (or host-size (nu+ (get-size~ guest) {Dimension 8 28})))
          (when host-workspace
            (set-workspace~ host host-workspace))
          (set-guest~ host guest)
          (when host-visible?
            (ensure-displayed~ host)
            (bring-to-front~ host)
            (set-visible?~ host #t)
            (remember-workspace-stage~ host)
            (when host-focus?
              (focus-host~ host)))
          host)))))


;;;
;;;; Cascade
;;;


(definition public (cascade-position position step positions)
  (let (iterate (pos position))
    (if (member? pos positions test: nu=?)
        (iterate (nu+ pos step))
      pos)))


;;;
;;;; External Frame
;;;


(definition public (new-external-frame guest/class . rest)
  (let ((guest-class (if (class? guest/class) guest/class (class-of guest/class)))
        (guest (if (class? guest/class) #f guest/class)))
    (bind-keywords ((host-title #f) (host-position (host-position~ guest-class)) (host-size (host-size~ guest-class)) (host-workspace #f) (host-visible? #t) (host-focus? #t) (initialize #f) . others) rest
      (let ((guest (or guest (new-guest guest-class others))))
        (when initialize
          (initialize guest))
        (let* ((player (new External-Frame visible?: #f))
               (host (get-root~ player)))
          (set-title~ host (or host-title (host-title~ guest-class) "Frame"))
          (when host-position
            (set-position~ player host-position))
          (when host-size
            (set-size~ player host-size))
          ;; It is important to set the frame's size before installing the guest
          ;; in order to minimize layouting by having the size right the first time!
          (set-guest~ host guest)
          (layout-view~ host)
          (when host-visible?
            (fade-in~ player)
            (when host-focus?
              (focus-host~ host))
            (activate-frame~ host))
          host)))))


;;;
;;;; Toolbar
;;;


(definition package Toolbars
  (make-table test: eq?))


(definition public (get-toolbar name)
  (table-ref Toolbars name #f))


(definition public (singleton-toolbar guest-class name . rest)
  (let ((ref (or name (category-identifier guest-class))))
    (or (table-ref Toolbars ref #f)
        (let ((palette (new-toolbar guest-class name: name)))
          (table-set! Toolbars ref palette)
          palette))))


(definition public (new-toolbar guest-class . rest)
  (bind-keywords ((host-title #f) (host-location #f) . others) rest
    (let ((host (new Toolbar-Host visible?: #f)))
      (set-title~ host (or host-title (host-title~ guest-class) "Toolbar"))
      (when host-location
        (set-location~ host host-location))
      (set-guest~ host (new-guest guest-class others))
      host)))


(definition package (reset-toolbars)
  (set! Toolbars (make-table test: eq?)))


;;;
;;;; Scrollbar
;;;


(definition public scrollbar-size
  13)


;;;
;;;; Progress
;;;


(definition public (with-progress proc (threaded?: threaded? #t) (name: name #f) (progress-reporter: progress-reporter Progress-Reporter) (cancelable?: cancelable? #t) (abnormal-cleanup: abnormal-cleanup #f))
  (if (not threaded?)
      (proc (new User-Reporter))
    (receive (process? dialog) (new-dialog progress-reporter host-closable?: cancelable?)
      (let ((reporter (get-guest~ dialog)))
        (when (not cancelable?)
          (disable-cancel~ reporter))
        (thread-start!
          (new-thread
            (lambda ()
              (let ((result (proc reporter)))
                (post-event
                  (lambda ()
                    (end-modal~ dialog result)))))
            'progress))
        (process-modal~ dialog)))))


;;;
;;;; Message
;;;


;; Type
;; - message
;; - question
;; - confirmation
;; - problem
;; - error
;; - custom


(definition public (message-box text
                                (class: class #f)
                                (type: type 'message)
                                (title: title #f)
                                (size: size #f)
                                (icon: icon #f)
                                (content: content #f)
                                (content-spacing: content-spacing #f)
                                (sound: sound 'default)
                                (selection: selection #f)
                                (yes: yes #f)
                                (no: no #f)
                                (cancel: cancel #f)
                                (actions: actions '())
                                (default-button: default-button #f)
                                (process-keys?: process-keys? #t)
                                (miniaturizable?: miniaturizable? #f)
                                (sizable?: sizable? #f))
  (receive (process? dialog) (new-dialog (or class Message-Box) host-visible?: #f host-miniaturizable?: miniaturizable? host-sizable?: sizable?)
    (let ((guest (get-guest~ dialog)))
      (process-box~ guest text
        type: type
        title: title
        size: size
        icon: icon
        content: content
        content-spacing: content-spacing
        sound: sound
        selection: selection
        yes: yes
        no: no
        cancel: cancel
        actions: actions
        default-button: default-button
        process-keys?: process-keys?))))


(definition public (warn-cancel . rest)
  (message-box (apply format rest))
  (signal-cancel))


;;;
;;;; Safety
;;;


(definition public (with-safe-execution context thunk (continue-text: continue-text #f) (continue-handler: continue-handler #f))
  (define (ask-continue err)
    (let ((text (format "The following error occurred while {a}:{%}{%}{a}{%}{%}Press Continue {a}, Exit to exit immediately"
                        context
                        (exception-reason err)
                        (or continue-text "to bypass this problem"))))
      (let ((result (message-box text type: 'confirmation yes: "Continue" no: "Debug Now" cancel: "Exit")))
        (case result
          ((yes)
           (post-stop err)
           #t)
          ((no)
           #f)
          ((cancel)
           (exit))))))
  
  (define (warn-exit err)
    (let ((text (format "The following error occurred while {a}:{%}{%}{a}"
                        context
                        (exception-reason err))))
      (message-box text yes: "Exit")
      (exit)))
  
  (if (or (get-controller-debugger) (not (safe-execution?~ (get-process))))
      (thunk)
    (with-exception-filter
      (lambda (obj)
        (let ((err (wrap-exception obj)))
          (if continue-handler
              (ask-continue err)
            (warn-exit err))))
      (lambda (err)
        (continue-handler err))
      thunk)))


(definition public (with-catched-exception filter thunk)
  (define (ask err)
    (let ((text (exception-reason err)))
      (let ((result (message-box text type: 'question yes: "OK" no: "Debug")))
        (case result
          ((yes)
           #t)
          ((no)
           #f)))))
  
  (with-exception-filter
    (lambda (obj)
      (if (filter obj)
          (let ((err (wrap-exception obj)))
            (ask err))
        #f))
    (lambda (err)
      (signal-cancel))
    thunk))


(definition public (with-safe-explore proc (action: action 'ask))
  (with-exception-filter
    (lambda (obj)
      (let ((exc (and (object? obj) (is? obj Explore-Error) obj)))
        (when exc
          (let ((result (case action
                          ((ask)
                           (message-box (exception-reason exc) type: 'confirmation yes: "Show Me" no: "Debug" cancel: "Ignore"))
                          ((ignore)
                           'cancel))))
            (when (eq? result 'yes)
              (let ((source (get-source~ exc))
                    (range (get-range~ exc)))
                (edit-document~ (get-application) source selection: range)))
            (neq? result 'no)))))
    (lambda (exc)
      (signal-cancel))
    proc))


;;;
;;;; Request
;;;


;; These should really be hooks to modify the dialog at creation time...


(definition public (choose-color . rest)
  (apply get-modal Color-Request rest))


(definition public (request-string (class: class String-Request) (title: title #f) (prefix: prefix #f) (initial-value: initial-value #f) (accepts-empty?: accepts-empty? #t) (unicity-domain: unicity-domain #f) (validator: validator #f))
  (receive (process? host) (new-dialog class)
    (let* ((view (get-guest~ host))
           (text (locate~ view 'text)))
      (set-title~ (get-player~ host) (or title "Enter String"))
      (set-accepts-empty?~ view accepts-empty?)
      (set-unicity-domain~ view unicity-domain)
      (set-validator~ view validator)
      (set-prefix~ view (or prefix "String:"))
      (set-string-content~ text (if initial-value (->string initial-value) ""))
      (select-all~ text)
      (acquire-focus~ text)
      (let ((string (process-modal~ host)))
        (if (empty-string? string)
            #f
          string)))))


(definition public (request-name . rest)
  (bind-keywords ((title #f) (prefix #f) . others) rest
    (let* ((title (or title "Enter Name"))
           (prefix (or prefix "Name:"))
           (string (apply request-string title: title prefix: prefix others)))
      (if (not string)
          #f
        (string->symbol string)))))


(definition public (request-text (class: class Text-Request) (title: title #f) (initial-text: initial-text #f))
  (unimplemented 'request-text)
  @Text-Request
  (receive (process? dialog) (new-dialog class)
    (let* ((view (get-guest~ dialog))
           (text (locate~ view 'text)))
      (set-title~ dialog (or title "Enter Text"))
      (set-string-content~ text (or initial-text ""))
      (select-all~ text)
      (acquire-focus~ text)
      (let ((string (process-modal~ dialog)))
        (if (empty-string? string)
            #f
          string)))))


(definition public (request-date (class: class Date-Request) (title: title #f) (prefix: prefix #f) (initial-date: initial-date #f))
  (unimplemented 'request-date)
  @Date-Request
  (receive (process? dialog) (new-dialog class)
    (let* ((view (get-guest~ dialog))
           (text (locate~ view 'text)))
      (set-title~ dialog (or title "Enter Date"))
      (set-prefix~ view (or prefix "Date:"))
      (set-string-content~ text (if initial-date (present~ initial-date) ""))
      (select-all~ text)
      (acquire-focus~ text)
      (let ((string (process-modal~ dialog)))
        (if (empty-string? string)
            #f
          (parse-string~ Date string))))))


(definition public (request-list content (class: class List-Request) (title: title #f) (invite: invite #f) (present: present #f) (selected: selected #f) (multiple-selection?: multiple-selection? #f))
  (receive (process? host) (new-dialog class)
    (let ((view (get-guest~ host))
          (player (get-player~ host)))
      (when title
        (set-title~ player title))
      (when invite
        (set-invite~ view invite))
      (when present
        (set-present~ view present))
      (set-multiple-selection?~ view multiple-selection?)
      (set-content~ view content)
      (when selected
        (set-selected~ view selected))
      (process-modal~ host))))


;;;
;;;; Various
;;;


(definition public (get-output-log)
  (get-output-log~ (get-application)))


(definition public (get-active-results)
  (get-active-results~ (get-application)))


(definition public (all-windows)
  (let ((toplevel (get-toplevel)))
    (if toplevel
        (cons toplevel (get-windows~ toplevel))
      '())))


(definition public (select-docked class (name: name #f) (workspace: workspace 'home) (focus?: focus? #f))
  (define (select-view view)
    (when view
      (let* ((host (get-host~ view))
             (parent (get-parent~ host)))
        (when (is? parent Pad-View)
          (set-selection~ parent host))
        (ensure-unzoomed (if (is? parent Splitter-View) host parent))
        (when focus?
          (focus-host~ host))
        view)))
  
  (let ((guest (find-docked class)))
    (if guest
        (select-view guest)
      (when workspace
        (apply-preferences~ (get-workspace workspace))
        (select-view (find-docked class))))))


(definition public (find-docked class)
  (continuation-capture
    (lambda (return)
      (for-each-docked
        (lambda (view)
          (when (is? view class)
            (continuation-return return view))))
      #f)))


(definition public (for-each-docked proc)
  (for-each (lambda (window)
              (for-each-docked~ window
                proc))
            (all-windows)))


(definition public (docked-views)
  (let ((docked-views '()))
    (for-each-docked (lambda (view)
                       (set! docked-views (cons view docked-views))))
    docked-views))


(definition public (for-each-splitter view proc)
  (let ((splitter (get-parent~ view))
        (splitter-class Splitter-View))
    (while (is? splitter splitter-class)
      (proc splitter view)
      (set! view splitter)
      (set! splitter (get-parent~ splitter)))))


(definition public (ensure-unzoomed view)
  (for-each-splitter view
    (lambda (splitter view)
      (when (and (eq? (get-state~ splitter) 'zoom)
                 (neq? (get-effective-target~ splitter) view))
        (unzoom~ splitter)))))


(definition public (current-frame)
  (first-frame))


(definition public (current-document)
  (let ((frame (current-frame)))
    (when (is? frame Frame-Host)
      (get-guest~ frame))))


(definition public (current-guest)
  (let ((host (get-focused-host)))
    (when host
      (get-guest~ host))))


(definition public (focused-host)
  (let ((focus (get-focus)))
    (when focus
      (get-host~ focus))))


(definition public (focused-guest)
  (let ((focus (get-focus)))
    (when focus
      (get-guest~ focus))))


;;;
;;;; Focus
;;;


(definition *previous-focus-continuations*
  '())


(definition *capture-previous-focus-continuations?*
  #f)


(definition public (get-previous-focus-continuations)
  *previous-focus-continuations*)


(definition public (set-capture-previous-focus-continuations state)
  (set! *previous-focus-continuations* state))


(definition public (capture-focus-continuation)
  (when (null? *previous-focus-continuations*)
    (register-snapshot-callbacks get-previous-focus-continuations))
  (when (> (length *previous-focus-continuations*) 2)
    (set! *previous-focus-continuations* (butlast *previous-focus-continuations*)))
  (continuation-capture
    (lambda (cont)
      (set! *previous-focus-continuations* (cons cont *previous-focus-continuations*)))))


(definition public (get-focus)
  (let ((player (get-focused-window)))
    (when (is? player View-Player)
      (get-view-focus~ player))))


(definition public (set-focus new-focus)
  (let ((old-focus (get-focus)))
    (when (neq? new-focus old-focus)
      (when *capture-previous-focus-continuations?*
        (capture-focus-continuation))
      (ensure-focusable~ new-focus)
      (let ((old-player (get-focused-window))
            (new-player (get-player~ new-focus)))
        (assert new-player)
        (if (eq? old-player new-player)
            (begin
              (unfocus-view~ old-player)
              (focus-view~ new-player new-focus))
          (set-view-focus~ new-player new-focus)
          (bring-to-front~ new-player)
          (set-window-focus new-player))
        (clear-pushed-focuses~ new-player)))))


(definition public (push-focus new-focus)
  (let ((old-focus (get-focus)))
    (when (neq? new-focus old-focus)
      (ensure-focusable~ new-focus)
      (let ((player (get-focused-window)))
        (when (is? player View-Player)
          (push-view-focus~ player new-focus))))))


(definition public (pop-focus)
  (let ((player (get-focused-window)))
    (when (is? player View-Player)
      (pop-view-focus~ player))))


(definition package (pop-focuses popup)
  (let ((player (get-window-focus)))
    (when (is? player View-Player)
      (pop-view-focuses~ player popup))))


(definition package (pop-all-focuses)
  (let ((player (get-window-focus)))
    (when (is? player View-Player)
      (pop-all-view-focuses~ player))))


(definition public (set-default-focus)
  (acquire-focus~ (get-root~ (get-toplevel))))


(definition public (get-focus-actions view)
  (let ((surrogate (get-surrogate~ view)))
    (if surrogate
        (focus-actions~ surrogate)
      (focus-actions~ view))))


(definition public (refresh-focus-actions view)
  (when (eq? view (get-focus))
    (set-focus-actions~ (get-application) (get-focus-actions view))))


;;;
;;;; Debug
;;;


(definition *debug-colors*
  (color-cycle (hsv->color 0. 0.9 1.) 10 25))

(definition *nb-debug-colors*
  (length *debug-colors*))

(definition *current-debug-color*
  0)


(definition public (cycle-debug-color!)
  (prog1 (element *debug-colors* *current-debug-color*)
    (set! *current-debug-color* (modulo (+ *current-debug-color* 1) *nb-debug-colors*))))


;;;
;;;; Debugger
;;;


(definition package (cleanup-mouse-processing)
  (release-captured-view)
  (complete-drag-and-drop)
  (complete-drag-up #f))


(definition package (complete-drag-and-drop)
  (when Current-Drag-Drop
    (drag-end~ (get-view~ (get-source~ Current-Drag-Drop)))))


(definition package (complete-drag-up dragging?)
  (when mouse-down?
    (let ((pos (mouse-position~ mouse-down-view)))
      (let ((event (new Mouse-Event :mouse-up #f NoModifiers position: pos)))
        (process-drag-up~ mouse-down-view event dragging?))))))
