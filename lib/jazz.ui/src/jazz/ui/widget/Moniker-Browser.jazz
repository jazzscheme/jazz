;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Moniker Browser
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library protected jazz.ui.widget.Moniker-Browser jazz


(import (jazz.graphic)
        (jazz.io)
        (jazz.io.protocol)
        (jazz.jml)
        (jazz.library)
        (jazz.platform)
        (jazz.system)
        (jazz.ui)
        (jazz.utilities))


(class undocumented Moniker-Browser extends View
  

  (property mode             initialize 'open getter get-mode             setter set-mode)
  (property protocol         initialize 'file getter get-protocol         setter set-protocol)
  (property parameters       initialize '()   getter get-parameters       setter set-parameters)
  (property display-logical? initialize {}    getter get-display-logical? setter set-display-logical?)
  (property anchors          initialize {}    getter get-anchors          setter set-anchors)
  (property read-only?       initialize #f    getter get-read-only?       setter set-read-only?)


  (form
    (<install>                                size: {Dimension 142 20}
      (<Scroller-View>         name: scroller hscroll?: #f vscroll?: #f
        (<!>                   name: content  layout-type: fill
          (<Moniker-Text-View> name: text     accepts-returns?: #f show-unfocused-selection?: #f left-padding: 2 top-padding: 2 return-press-handler: {Event-Handler :form on-return-press} receive-files-handler: {Event-Handler :form on-receive-files})))
      (<Moniker-Button>        name: browse   background: {Color name: Medium} image-name: {Bitmap-Resource "Open"} portfolio: :icons action-handler: {Event-Handler :form on-browse} receive-files-handler: {Event-Handler :form on-receive-files})))
  
  
  ;;;
  ;;;; Events
  ;;;
 
  
  (method (on-browse evt)
    (browse-moniker))
  
  
  (method (on-return-press evt)
    (when return-press-handler
      (invoke~ return-press-handler self evt)))
  
  
  (method (on-receive-files evt)
    (let ((pos (get-property~ evt position:))
          (files (get-property~ evt files:)))
      (if receive-files-handler
          ;; rectify sender in event
          (invoke~ receive-files-handler self (new Event :receive-files self position: pos files: files))
        (let ((handler (get-protocol-handler protocol)))
          (if (and (= (length files) 1) (is? (car files) handler))
              (set-moniker (car files))
            (bell))))))
    
  
  ;;;
  ;;;; Access
  ;;;


  (method public (get-mode)
    mode)


  (method public (set-mode value)
    (set! mode value)
    (let ((browse (locate 'browse)))
      (case mode
        ((open) (set-image-name~ browse {Bitmap-Resource "Open"}))
        ((save) (set-image-name~ browse {Bitmap-Resource "Save"})))))

  
  (method public (get-protocol)
    protocol)
  
  
  (method public (set-protocol value)
    (set! protocol value))


  (method public (get-parameters)
    parameters)


  (method public (set-parameters value)
    (set! parameters value))


  (method public (get-display-logical?)
    display-logical?)


  (method public (set-display-logical? value)
    (set! display-logical? value))


  (method public (get-anchors)
    anchors)


  (method public (set-anchors value)
    (set! anchors value))
  
  
  (method public (get-text)
    (locate 'text))

  
  ;;;
  ;;;; Outer
  ;;;
  
  
  (method (inner? view)
    (memq? view children))
    
  
  ;;;
  ;;;; Layout
  ;;;
  
  
  (method (layout)
    (let ((size (get-size)))
      (set-position~ (locate 'scroller) (scroller-position size))
      (set-size~ (locate 'scroller) (scroller-size size))
      (set-position~ (locate 'browse) (browse-position size))
      (set-size~ (locate 'browse) (browse-size size))))
  
  
  (method (scroller-position size)
    {Point 0 0})
  
  
  (method (scroller-size size)
    (new Dimension (- (get-width~ size) 17) 19))
  
  
  (method (browse-position size)
    (new Point (- (get-width~ size) 17) 0))
  
  
  (method (browse-size size)
    {Dimension 17 17})
  
  
  ;;;
  ;;;; Browse
  ;;;
  
  
  (method public (browse-moniker)
    (let* ((handler (get-protocol-handler protocol))
           (arguments (augment mode: mode actual: (get-moniker) parameters))
           (moniker (apply moniker-modal handler arguments)))
      (set-moniker moniker)
      (let ((text (get-text)))
        (acquire-focus~ text)
        (set-caret~ text (text-ending~ text))
        (ensure-displayed~ text force-horizontal: 'tail reposition?: #t))))
    
  
  ;;;
  ;;;; Content
  ;;;

  
  (method public (get-moniker)
    (let ((string (get-string-content~ (get-text))))
      (unless (empty-string? string)
        (if (not (alias-displayed?))
            (let ((handler (get-protocol-handler protocol))
                  (parameters (tokenise-filename string)))
              (anchorize~ (moniker-new handler parameters) anchors: anchors))
          (let ((content (read-string-content string)))
            (bind (protocol . parameters) content
              (let* ((handler (get-protocol-handler protocol))
                     (moniker (moniker-new handler parameters)))
                (typecase moniker
                  ((Directory-Group) moniker)
                  ((Pathname) (anchorize~ moniker anchors: anchors))
                  (else moniker)))))))))
  
  
  (method public (set-moniker moniker (update?: update? #t))
    (set-string-content~ (get-text) (if (not moniker) "" (present-moniker moniker)))
    (when update?
      (moniker-update)))
  
  
  (method protected virtual (moniker-update)
    )
  
  
  (method public (present-moniker moniker)
    (if (not moniker)
        "{}"
      (if (not (alias-displayed?))
          (if (is? moniker Pathname)
              (parse~ moniker)
            (->string moniker))
        (format "{a}: {a}"
                (get-protocol~ (class-of moniker))
                (present~ moniker)))))
  
  
  (method (alias-displayed?)
    (if (not display-logical?)
        (display-aliases?~ (get-application))
      display-logical?))
  
  
  (method (get-modified?)
    (get-modified?~ (get-controller~ (get-text))))
  
  
  (method (set-modified? flag)
    (set-modified?~ (get-controller~ (get-text)) flag))
  
  
  ;;;
  ;;;; Read-Only
  ;;;


  (method public (get-read-only?)
    read-only?)


  (method public (set-read-only? value)
    (set! read-only? value)
    (set-editable?~ (get-text) (not read-only?))
    (set-enabled?~ (locate 'browse) (not read-only?))))


;;;
;;;; Moniker-Button
;;;


(class Moniker-Button extends Push-Tool
  
  
  (method (light-color)
    {Color name: Light-Background})
  
  
  (method (dark-color)
    {Color name: Dark})
  
  
  (method (draw-inactive surface)
    (let ((bounds (get-bounds)))
      (frame-rect~ surface bounds (if (get-enabled?) {Color name: Light} {Color name: Medium}))))
  
  
  (method (draw-tool surface context)
    (draw-ellipsis surface))
  
  
  (method (draw-ellipsis surface)
    (let* ((size (get-size))
           (offset (get-offset))
           (title "...")
           (extent (get-text-extent~ surface title))
           (pos (justify extent size 'center)))
      (set-text-color~ surface {Color name: Black})
      (draw-text~ surface (+ (get-h~ pos) 1) (get-v~ pos) title enabled?)))
  
  
  (method (get-offset)
    (if (memq? (get-state) '(pushed choose))
        1
      0)))


(register-autoclass Moniker-Button))
