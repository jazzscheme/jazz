;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Moniker Widget
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.ui.widget.Moniker-Widget jazz


(import (jazz.io)
        (jazz.io.protocol)
        (jazz.jml)
        (jazz.library)
        (jazz.system)
        (jazz.ui)
        (jazz.ui.view))


(class Moniker-Widget extends Combo-Text
  

  (property mode                   initialize 'open accessors explicit)
  (property protocol               initialize 'file accessors generate)
  (property parameters             initialize '()   accessors generate)
  (property display-logical?                        accessors generate)
  (property display-protocol?                       accessors generate)
  (property anchors                initialize #f    accessors generate)
  (property moniker-update-handler initialize #f    accessors generate)


  (form
    (<install>                kind: choose selectable?: #t editable?: #t
      (<!>     name: scroller
        (<!>   name: content
          (<!> name: body     return-press-handler: {Event-Handler :form on-return-press} receive-files-handler: {Event-Handler :form on-receive-files})))
      (<!>     name: pick     portfolio: :images resource: {Image-Resource "Open"} action-handler: {Event-Handler :form on-browse} receive-files-handler: {Event-Handler :form on-receive-files})))
  
  
  ;;;
  ;;;; Events
  ;;;
 
  
  (method (on-browse evt)
    (browse-moniker))
  
  
  (method override (on-return-press evt)
    (when return-press-handler
      (invoke-handler self return-press-handler evt)))
  
  
  (method (on-receive-files evt)
    (let ((pos (get-property~ evt position:))
          (files (get-property~ evt files:)))
      (if receive-files-handler
          ;; correct sender in event
          (invoke-handler self receive-files-handler (make-event Event :receive-files self position: pos files: files))
        (let ((handler (get-protocol-handler protocol)))
          (if (and (= (length files) 1) (is? (car files) handler))
              (set-moniker (car files))
            (bell))))))
    
  
  ;;;
  ;;;; Access
  ;;;


  (method public (get-mode)
    mode)


  (method public (set-mode value)
    (set! mode value)
    (let ((browse (get-pick)))
      (case mode
        ((open) (set-resource~ browse {Image-Resource "Open"}))
        ((save) (set-resource~ browse {Image-Resource "Save"})))))

  
  (method public (call-moniker-update)
    (if moniker-update-handler
        (invoke-handler self moniker-update-handler (make-event Event :update self))
      (moniker-update)))
  
  
  ;;;
  ;;;; Browse
  ;;;
  
  
  (method public (browse-moniker)
    (define (get-moniker-safe)
      (catch (Parse-Error err
               (message-box (get-message~ err))
               (signal-cancel))
        (get-moniker)))
    
    (let* ((handler (get-protocol-handler protocol))
           (actual (get-moniker-safe))
           (arguments (augment mode: mode actual: actual parameters))
           (moniker (apply moniker-modal handler arguments)))
      (set-moniker moniker)
      (focus-body)))
    
  
  ;;;
  ;;;; Content
  ;;;

  
  (method public (get-moniker)
    (define (parse-protocol string)
      (if (not (protocol-displayed?))
          (values protocol string)
        (let ((pos (find string #\:)))
          (assert pos
            (values protocol (substring string (+ pos 1) (string-length string)))))))
    
    (let ((string (get-content)))
      (unless (empty-string? string)
        (if (not (alias-displayed?))
            (let ((handler (get-protocol-handler protocol))
                  (parts (list (tokenise-filename string))))
              (anchorize~ (moniker-new handler parts) anchors: anchors))
          (receive (protocol arguments) (parse-protocol string)
            (let ((handler (get-protocol-handler protocol))
                  (parts (read-delimited-string arguments #\,)))
              (let ((moniker (moniker-new handler parts)))
                (typecase moniker
                  ((Directory-Group) moniker)
                  ((Pathname) (anchorize~ moniker anchors: anchors))
                  (else moniker)))))))))
  
  
  (method public (set-moniker moniker (generate-event?: generate-event? #t))
    (set-content (if (not moniker) "" (present-moniker moniker)))
    (when generate-event?
      (call-moniker-update)))
  
  
  (method protected virtual (moniker-update)
    )
  
  
  (method public (present-moniker moniker)
    (cond ((not moniker)
           "{}")
          ((not (alias-displayed?))
           (if (is? moniker Pathname)
               (parse~ moniker)
             (->string moniker)))
          ((not (protocol-displayed?))
           (present~ moniker))
          (else
           (format "{a}: {a}"
                   (get-protocol~ (class-of moniker))
                   (present~ moniker)))))
  
  
  (method (alias-displayed?)
    (if (unspecified? display-logical?)
        (display-aliases?~ (get-application))
      display-logical?))
  
  
  (method (protocol-displayed?)
    (if (unspecified? display-protocol?)
        (display-protocol?~ (get-application))
      display-protocol?))
  
  
  ;;;
  ;;;; Descriptor
  ;;;
  
  
  (method meta override (get-class-descriptor (context: context #f))
    (new jazz.ui.designer:Moniker-Widget-Descriptor)))


;;;
;;;; Protocol
;;;


(definition public (get-protocol-handler protocol)
  (case (if (keyword? protocol) (keyword->symbol protocol) protocol)
    ((file) File)
    ((dir) Directory)
    ((group) Directory-Group)
    ((manifest) Manifest)
    (else (signal (new Parse-Error message: (format "Unknown protocol: {t}" protocol)))))))
