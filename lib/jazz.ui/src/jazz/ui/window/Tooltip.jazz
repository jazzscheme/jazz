;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Tooltips
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2012
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.ui.window.Tooltip jazz


(import (jazz.ui))


(class Tooltip extends Transient)

;; run-away methods - eats all memory
;; mouse-hover calls itself until find-window returns non-Tooltip

  @disable-all (
  
  (method (with-passing-through proc)
    (let ((preserved (get-passing-through?)))
      (unwind-protect
          (begin
            (set-passing-through? #t)
            (proc))
        (set-passing-through? preserved))))
  
  
  (method (pass-through h v proc)
    (let* ((pos (new Point h v))
           (window (find-window~ owner (acquire~ owner self pos))))
      (when window
        (let ((acquired (acquire~ window self pos)))
          (with-passing-through
            (lambda ()
              (proc window (get-h~ acquired) (get-v~ acquired))))))))
  
  
  (method (mouse-hover h v)
    (pass-through h v
      (lambda (window h v)
        (mouse-hover~ window h v))))
  
  
  (method (mouse-down h v)
    (pass-through h v
      (lambda (window h v)
        (mouse-down~ window h v))))
  
  
  (method (mouse-move h v)
    (pass-through h v
      (lambda (window h v)
        (mouse-move~ window h v))))
  
  
  (method (mouse-up h v)
    (pass-through h v
      (lambda (window h v)
        (mouse-up~ window h v))))
  
  
  (method (double-click h v)
    (pass-through h v
      (lambda (window h v)
        (double-click~ window h v))))
  
  
  (method (context-menu h v)
    (pass-through h v
      (lambda (window h v)
        (context-menu~ window h v))))))
