;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Toplevel Windows
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library protected jazz.ui.window.Toplevel jazz


(import (jazz.jml)
        (jazz.locale)
        (jazz.system)
        (jazz.ui)
        (jazz.ui.view)
        (jazz.ui.window)
        (jazz.utilities))


(class Toplevel extends Overlapped

  
  (property fullscreen?  initialize #f getter get-fullscreen?  setter set-fullscreen?)
  (property caption-base initialize {} getter get-caption-base setter set-caption-base)
  (property caption      initialize {} getter get-caption      setter set-caption)
  (property caption?     initialize #f getter get-caption?     setter set-caption?)


  (slot workspace-preferences initialize {})


  (form
    (<install> visible?: #f))

  
  ;;;
  ;;;; Events
  ;;;


  (method (on-activate kind)
    (when (eq? kind 'inactive)
      (toplevel-deactivate))
    (nextmethod kind))

  
  ;;;
  ;;;; Root
  ;;;
  
  
  (method (prepare-root)
    )

  
  ;;;
  ;;;; Workspace
  ;;;
  
  
  (method public (get-workspace-preferences)
    workspace-preferences)
  
  
  (method public (set-workspace-preferences preferences)
    (set! workspace-preferences preferences))
  
  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method (mouse-activate?)
    #t)
  
  
  (method (activate-app status)
    (catch Cancel-Signal
      (let ((appl (get-application)))
        (if (= status 0)
            (deactivate~ appl)
          (activate~ appl))))
    processed)


  (method (show)
    (set-visible-flag #t)
    (let ((pref (get-preferences {} error?: #f)))
      (assert handle)
      (case (if pref (get-toplevel-state~ pref) 'restored)
        ((maximized) (show-maximized handle))
        ((restored) (show-restored handle))))
    (let ((appl (get-application)))
      (show-undisplayed-message~ appl)
      (workspace-installed~ appl))
    (update-window)
    (simulate-mouse-move))
  
  
  (method (close-with-confirm)
    (exit-process~ (get-process)))
    
  
  ;;;
  ;;;; Fullscreen
  ;;;


  (method public (get-fullscreen?)
    fullscreen?)


  (method public (set-fullscreen? value)
    (when (neq? value fullscreen?)
      (set! fullscreen? value)))

  
  ;;;
  ;;;; Base
  ;;;
  
  
  (method public (get-caption-base)
    caption-base)
  

  (method public (set-caption-base value)
    (set! caption-base value)
    (invalidate-title))
    
  
  ;;;
  ;;;; Caption
  ;;;
  
  
  (method public (get-caption)
    caption)
  
  
  (method public (set-caption value)
    (set! caption value)
    (invalidate-title))
  
  
  (method public (get-caption?)
    caption?)
  
  
  (method public (set-caption? value)
    (set! caption? value)
    (invalidate-title))
    
  
  ;;;
  ;;;; Title
  ;;;
  
  
  (method (invalidate-title)
    (set-title (effective-title)))
  
  
  (method protected virtual (effective-title)
    (if (or (not caption) (not caption?))
        (localize caption-base)
      (format "{a} - {a}" (localize caption-base) caption)))
  
  
  ;;;
  ;;;; Palettes
  ;;;
  
  
  (method public (get-palettes)
    (collect-if (function (window)
                  (and (is? window Palette)
                       (get-visible?~ window)))
                children))))
