;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; View Player
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.ui.window.View-Player jazz


(import (jazz.graphic)
        (jazz.locale)
        (jazz.platform)
        (jazz.system)
        (jazz.ui)
        (jazz.ui.view)
        (jazz.ui.window))
  

(class View-Player extends Window


  ;; close-root  : close the root view
  ;; detach-root : detach the root without closing it
  ;; hide        : hide the player window
  (property close-behavior initialize 'close-root accessors generate)
  (property caption-base   initialize {}          accessors explicit)
  (property caption        initialize {}          accessors explicit)
  (property caption?       initialize #f          accessors explicit)

  
  (slot root       initialize {})
  (slot view-focus initialize {} accessors generate)

  
  ;;;
  ;;;; Initialization
  ;;;
  
  
  (method override (prepare rest)
    (nextmethod rest)
    (prepare-root)
    (destroy-mandatory))
  
  
  (method protected virtual (prepare-root)
    (set-root (new-root)))

  
  (method protected virtual (new-root)
    (new Host-View offscreen?: #t))
  
  
  (method override (find-to-modify name test)
    (if (eq? name 'root)
        (get-root)
      (nextmethod name test)))
  
  
  ;;;
  ;;;; Destruction
  ;;;
  
  
  (method override (close)
    (if (eq? close-behavior 'hide)
        (set-visible? #f)
      (nextmethod)))
  
  
  (method override (destroy)
    (define (close-root)
      (when root
        (close~ root)
        (set! root {})))
    
    (if (eq? close-behavior 'detach-root)
        (detach-root)
      (close-root))
    (nextmethod))
    
  
  ;;;
  ;;;; Caption
  ;;;
  
  
  (method public (get-caption-base)
    caption-base)
  

  (method public (set-caption-base value)
    (set! caption-base value)
    (invalidate-title))
  
  
  (method public (get-caption)
    caption)
  
  
  (method public (set-caption value)
    (set! caption value)
    (invalidate-title))
  
  
  (method public (get-caption?)
    caption?)
  
  
  (method public (set-caption? value)
    (set! caption? value)
    (invalidate-title))
    
  
  ;;;
  ;;;; Title
  ;;;
  
  
  (method (invalidate-title)
    (define (effective-title)
      (if (or (not caption) (not caption?))
          (if caption-base
              (localize caption-base)
            "")
        (if caption-base
            (format "{a} - {a}" (localize caption-base) caption)
          caption)))
    
    (set-title (effective-title)))

  
  ;;;
  ;;;; Window
  ;;;


  (method override (erase-background surface)
    (if (and root (get-offscreen?~ root))
        processed
      (nextmethod surface)))

  
  ;;;
  ;;;; Root
  ;;;
  
  
  (method public (get-root)
    root)
  
  
  (method public (set-root value (detach?: detach? #t))
    (when (neq? value root)
      (when detach?
        (detach-root))
      (set! root value)
      (set-name~ root 'root)
      (set-parent~ root {})
      (set-player~ root self)
      (set-offscreen?~ root #t)
      (layout-window)))
  
  
  (method (detach-root)
    (when root
      (set-player~ root {})
      (set-offscreen?~ root #f)
      (set! root {})))
  
  
  ;;;
  ;;;; Layout
  ;;;
  
  
  (method override (size-change state size)
    (nextmethod state size)
    (layout-window))
  
  
  (method override (layout)
    (when root
      (set-position~ root {Point 0 0})
      (set-size~ root (get-size))))
  
  
  ;;;
  ;;;; Error
  ;;;
  
  
  (slot in-error? initialize #f)
  
  
  (method public (get-in-error?)
    in-error?)
  
  
  (method public (set-in-error? flag)
    (set! in-error? flag)
    (invalidate-window))
  
  
  (definition Error-Color
    {Color name: Dark-Red})
  
  
  ;;;
  ;;;; Paint
  ;;;
  
  
  (method override (paint region . platform-data)
    (define (paint-in-error surface bounds)
      (fill-rect~ surface bounds Error-Color))
    
    (with-platform-painting self platform-data
      (lambda (surface)
        (let ((clipper (if (is? region Rect) region (get-box~ region))))
          (setup-clipper~ surface clipper)
          (if in-error?
              (paint-in-error surface clipper)
            (set! in-error? #t)
            (paint~ root surface '() 0 0 0 0 1.0 #f)
            (set! in-error? #f))))))
  
  
  ;;;
  ;;;; Receive Files
  ;;;
  
  
  (method override (receive-files pos files)
    (unless in-error?
      (dispatch-receive-files~ root pos files))
    processed)
  
  
  ;;;
  ;;;; Mouse
  ;;;
  
  
  (method override (mouse-down h v)
    (if in-error?
        (bell)
      (dispatch-mouse-down~ root h v))
    processed)
  
  
  (method override (mouse-move h v)
    (unless in-error?
      (dispatch-mouse-move~ root h v))
    processed)
  
  
  (method (simulate-mouse-move)
    (let ((pos (mouse-position)))
      (let ((view (find-view pos)))
        (when view
          (dispatch-mouse-move~ root (get-h~ pos) (get-v~ pos))))))
  
  
  (method override (mouse-up h v)
    (unless in-error?
      (dispatch-mouse-up~ root h v))
    processed)
  
  
  (method override (double-click h v)
    (unless in-error?
      (dispatch-double-click~ root h v))
    processed)
  
  
  (method override (context-menu h v)
    (if in-error?
        (set-in-error? #f)
      (dispatch-context-menu~ root h v))
    processed)
  
  
  (method override (middle-mouse-down h v)
    (unless in-error?
      (dispatch-middle-mouse-down~ root h v))
    processed)
  
  
  (method override (middle-mouse-up h v)
    (unless in-error?
      (dispatch-middle-mouse-up~ root h v))
    processed)
  
  
  (method override (right-mouse-down h v)
    (unless in-error?
      (dispatch-right-mouse-down~ root h v))
    processed)
  
  
  (method override (right-mouse-up h v)
    (unless in-error?
      (dispatch-right-mouse-up~ root h v))
    unprocessed)
  
  
  (method override (mouse-leave)
    (when mouse-in
      (call-mouse-leave~ mouse-in)
      (cancel-tooltip-tracking~ mouse-in)
      (reset-mouse-in)))


  ;;;
  ;;;; Palette
  ;;;
  
  
  (method public (for-each-docked proc)
    (when root
      (for-each-view-docked~ root proc)))
  
  
  (method public (find-docked type)
    (when root
      (find-view-docked~ root type)))


  ;;;
  ;;;; Popup
  ;;;
  
  
  (method public (popup class . initargs)
    (define (new-popup)
      (apply new class
        owner: (get-overlapped)
        visible?: #f
        initargs))
    
    (let ((popup (new-popup)))
      (set-popups (cons popup (get-popups)))
      popup))
  
  
  (method public (close-popups (all?: all? #f) (exclude: exclude {}))
    (when (and (get-popups) (not (get-passing-through?)))
      (let* ((overlapped (get-overlapped))
             (owners (get-owners~ overlapped)))
        (for-each (lambda (popup)
                    (when (and (or all? (not (memq? popup owners))) (or (not exclude) (not (memq? popup exclude))))
                      (close-popup popup)))
                  (get-popups)))))
  

  ;;;
  ;;;; Focus
  ;;;
  
  
  (method override (focus-gain)
    (set-focused-window self)
    (when (and view-focus (in-player?~ view-focus))
      (focus-view view-focus)
      (focus-delegate~ view-focus))
    processed)
  
  
  (method override (focus-lose)
    (unfocus-view)
    (set-focused-window {})
    processed)
  
  
  (method package (focus-view new-focus)
    (set! view-focus new-focus)
    (call-focus-gained~ view-focus)
    (let ((host (get-host~ view-focus)))
      (when host
        (activate-focus~ host)))
    (when (process-active?)
      (process-focus-change~ (get-application) view-focus)))
  
  
  (method package (unfocus-view)
    (when view-focus
      (let ((focus view-focus))
        (let ((container (get-focus-container~ focus)))
          (when container
            (preserve-focused~ container focus)))
        (let ((host (get-host~ focus)))
          (when host
            (deactivate-focus~ host)))
        (call-focus-lose~ focus)
        (set! view-focus (focus-master~ focus))
        (call-focus-lost~ focus))))
  
  
  (method package (reset-focus)
    (when view-focus
      (unfocus-view)
      (set! view-focus {})))
  
  
  ;;;
  ;;;; Keyboard
  ;;;
  
  
  (method override (key-press char)
    (when (or (not Key-Hook)
              (not (Key-Hook char)))
      (let ((popups (get-popups)))
        (if (null? popups)
            (dispatch-key-press~ root char)
          (unless (popup-key-press~ (car popups) char)
            (close-popups)
            (dispatch-key-press~ root char)))))
    processed)
  
  
  ;;;
  ;;;; Descriptor
  ;;;
  
  
  (method meta override (get-class-descriptor)
    (new View-Player-Descriptor)))


;;;
;;;; Design
;;;


(submodule design


(import (jazz.designer))


(class View-Player-Descriptor extends Figure-Descriptor
  
  
  (method override (component-get-components component)
    (cons (get-root~ component) (get-children~ component))))))
