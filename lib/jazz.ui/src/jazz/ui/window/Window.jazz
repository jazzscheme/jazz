;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Window
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;    Assem Hakmeh
;;;    Jeremie Lasalle Ratelle
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.ui.window.Window jazz


(import (jazz.geometry)
        (jazz.graphic)
        (jazz.locale)
        (jazz.system)
        (jazz.ui)
        (jazz.ui.screen)
        (jazz.ui.view)
        (jazz.ui.window))


(class Window extends Figure
 

  (property title initialize #f accessors explicit)
  

  (slot handle initialize #f accessors generate)


  ;;;
  ;;;; Initialization
  ;;;


  (method protected virtual (opengl?)
    #f)
  
  
  (method override (initially-visible?)
    #f)


  (method override (default-parent)
    (window-default-parent self))


  (method override (prepare rest)
    (define (setup-handle handle)
      (set-window handle self)
      (set-handle handle))
    
    (nextmethod rest)
    (setup-handle (prepare-handle self rest)))
  
  
  (method override (conclude rest)
    (nextmethod rest)
    (size-change 'restored (get-size)))
  
  
  (method public (open?)
    (boolean handle))


  (method override (show)
    (nextmethod)
    (assert handle)
    (show-window handle)
    (invalidate-offscreen))


  (method override (hide)
    (nextmethod)
    (assert handle)
    (hide-window handle))
  
  
  (method public (minimize)
    (assert handle)
    (minimize-window handle))
  
  
  (method public (get-state)
    (assert handle)
    (get-window-state handle))
  
  
  (method public (set-state state)
    (assert handle)
    (case state
      ((minimized) (minimize-window handle))
      ((maximized) (maximize-window handle))
      ((restored) (restore-window handle))
      (else (error "Unknown window state: {s}" state))))
  
  
  (method public (get-placement)
    (get-window-placement handle))
  
  
  (method public (set-placement info)
    (assert handle)
    (set-window-placement handle info))
  
  
  (method public (maximize)
    (assert handle)
    (show-maximized handle))


  (method override (close)
    (set-visible? #f)
    (destroy-component)
    (destroy-window handle)
    (set-window handle #f)
    (set-handle #f))

  
  (method override (print output readably)
    (print-unreadable self output
      (lambda (output)
        (if (not handle)
            (format output "orphaned")
          (let ((position (get-position))
                (size (get-size)))
            (if (or (not title) (empty-string? title))
                (format output "{a} {a}" position size)
              (format output "{s} {a} {a}" title position size)))))))
  
  
  (method (invalidate-offscreen)
    (let ((rect (size-rect (get-size))))
      (invalidate-offscreen-rect handle rect)))
  
  
  ;;;
  ;;;; Component
  ;;;


  (method override (add-child child)
    (set! children (cons child children)))
  
  
  (method override (add-form parent-form child-form)
    (set-parent~ parent-form child-form))


  ;;;
  ;;;; Unprocessed
  ;;;
  
  
  (method protected virtual (unprocessed-message)
    unprocessed)


  ;;;
  ;;;; Paint
  ;;;


  (method protected virtual (erase-background handle)
    (assert handle)
    (platform-erase-background handle))
  

  (method protected virtual (paint region . platform-data)
    (with-platform-painting self platform-data
      (lambda (surface)
        (draw surface))))
  
  
  ;; quick hack
  (method protected virtual (paint-cocoa context rect)
    )
  
  
  (definition *colors*
    '({Color Dark-Red}
      {Color Dark-Orange}
      {Color Dark-Yellow}
      {Color Dark-Green}
      {Color Dark-Blue}
      {Color Dark-Purple}
      {Color Ochre}))
  
  (definition *nb-colors*
    (length *colors*))
  
  (definition *current-color*
    0)
  

  (definition (draw-placeholder surface)
    (set-color~ surface (cycle-debug-color!))
    (paint~ surface))
  

  (method protected virtual (draw surface)
    )


  ;;;
  ;;;; Mouse
  ;;;
  
  
  (method protected virtual (mouse-wheel h v delta)
    (let ((view (get-mouse-in)))
      (if view
          (let ((acquired #f))
            (mouse-wheel~ view acquired delta)
            processed)
        unprocessed)))

  
  (method protected virtual (mouse-down h v)
    unprocessed)
  
  
  (method protected virtual (mouse-move h v)
    unprocessed)
  
  
  (method protected virtual (call-mouse-moved x y)
    (if manage-captured?
        (begin
          (mouse-moved (- x (get-h~ warp-delta)) (- y (get-v~ warp-delta)))
          (recenter-cursor))
      (mouse-moved x y)))
  
  
  (method protected virtual (mouse-moved x y)
    (mouse-move (fxround x) (fxround y)))
  
  
  (method protected virtual (mouse-up h v)
    unprocessed)
  
  
  (method protected virtual (double-click h v)
    (mouse-down h v))
  
  
  (method protected virtual (middle-mouse-down h v)
    unprocessed)
  
  
  (method protected virtual (middle-mouse-up h v)
    unprocessed)
  
  
  (method protected virtual (right-mouse-down h v)
    unprocessed)
  
  
  (method protected virtual (right-mouse-up h v)
    unprocessed)
  
  
  (method protected virtual (right-double-click h v)
    (right-mouse-down h v))
  
  
  (method protected virtual (context-menu h v)
    unprocessed)


  ;;;
  ;;;; Capture
  ;;;
  
  
  (method public (acquire-capture)
    (assert handle)
    (set-capture handle))
  
  
  (method public (release-capture)
    (unset-capture))


  ;;;
  ;;;; Cursor
  ;;;


  (slot cursor-visible?  initialize #t getter generate)
  (slot cursor-captured? initialize #f getter generate)
  (slot manage-captured? initialize #f getter generate)
  (slot manage-preserved initialize #f getter generate)
  (slot warp-delta       initialize #f getter generate)
  
  
  (method public (show-cursor)
    (platform-show-cursor handle)
    (set! cursor-visible? #t))
  
  
  (method public (hide-cursor)
    (platform-hide-cursor handle)
    (set! cursor-visible? #f))
  
  
  (method public (capture-cursor)
    (when (and (not cursor-captured?) (get-active?~ (get-application)))
      (let ((manage? (not (platform-capture-cursor handle))))
        (set! cursor-visible? #f)
        (set! cursor-captured? #t)
        (set! manage-captured? manage?)
        (when manage?
          (hide-cursor)
          (let ((pos (mouse-position))
                (center (center-cursor)))
            (set! manage-preserved pos)
            (set! warp-delta (nu- center pos))
            (set-mouse-position center))))))
  
  
  (method (center-cursor)
    (new Point (fxround/ (get-width) 2) (fxround/ (get-height) 2)))
  
  
  (method (recenter-cursor)
    (set-mouse-position (center-cursor)))
  
  
  (method public (release-cursor)
    (when cursor-captured?
      (platform-release-cursor handle)
      (when manage-captured?
        (set-mouse-position manage-preserved)
        (show-cursor))
      (set! cursor-visible? #t)
      (set! cursor-captured? #f)
      (set! manage-captured? #f)
      (set! manage-preserved #f)
      (set! warp-delta #f)))

  
  (method protected virtual (cursor-update hit)
    (if hit
        processed
      unprocessed))


  ;;;
  ;;;; Keyboard
  ;;;
  
  
  (method (system-key-down)
    (update-cursor)
    processed)
  
  
  (method (system-key-up)
    (update-cursor)
    processed)
    
  
  (method protected virtual (key-down code)
    (update-cursor)
    unprocessed)
  
  
  (method protected virtual (key-up code)
    (update-cursor)
    unprocessed)
  
  
  (method (call-key-press char)
    (unless (invalid-character? char)
      (key-press char)))


  (method public virtual (key-press char)
    unprocessed)


  ;;;
  ;;;; Focus
  ;;;
  
  
  (method package virtual (reset-focus)
    )


  ;;;
  ;;;; Timer
  ;;;
  
  
  (definition timer-names
    (make-table test: eq?))
  
  (definition timer-ids
    (make-table test: eq?))
  
  (definition timer-id
    0)
  
  
  (method public (register-timer name elapse proc)
    (define (unique-id)
      (prog1 timer-id
        (increase! timer-id)))
    
    (let ((id (unique-id)))
      (table-set! timer-names name id)
      (table-set! timer-ids id proc)
      (platform-set-timer handle id elapse)))
  
  
  (method public (unregister-timer name)
    (let ((id (table-ref timer-names name)))
      (platform-kill-timer handle id)
      (table-clear timer-names name)
      (table-clear timer-ids id)))
  
  
  (method protected (timer-pulse id)
    (let ((proc (table-ref timer-ids id)))
      (proc)))
  
  
  ;;;
  ;;;; User
  ;;;
  
  
  (method protected virtual (user-notification wparam lparam)
    )


  ;;;
  ;;;; Handlers
  ;;;
  
  
  (method public (call-position-change h v)
    (position-change (new Point h v)))
  
  
  (method protected virtual (position-change position)
    unprocessed)


  (method public (call-size-change state width height)
    (if (get-installed?)
        (size-change state (new Dimension width height))
      unprocessed))


  (method protected virtual (size-change state size)
    unprocessed)
  
  
  (method protected virtual (mouse-enter)
    unprocessed)
  
  
  (method protected virtual (mouse-leave)
    unprocessed)
  
  
  (method protected virtual (mouse-activate?)
    #f)


  (method protected virtual (on-mouse-activate)
    unprocessed)


  ;; when a toplevel window (including palettes) is activated or deactivated
  (method protected virtual (on-activate kind)
    (if (eq? kind 'inactive)
        (on-deactivate-palette)
      (on-activate-palette))
    unprocessed)

  
  (method protected virtual (on-activate-palette)
    )
  
  
  (method protected virtual (on-deactivate-palette)
    )


  ;; Called when a toplevel window (including palettes)
  ;; is activated by a change of the active application
  (method protected virtual (activate-application)
    unprocessed)


  ;; Called when a toplevel window (including palettes)
  ;; is deactivated by a change of the active application
  (method protected virtual (deactivate-application)
    unprocessed)


  (method protected virtual (on-close evt)
    (close-window))
  
  
  (method public virtual (close-window)
    (close))


  (method protected virtual (focus-gain)
    unprocessed)


  (method protected virtual (focus-lose)
    unprocessed)
  
  
  ;;;
  ;;;; Drop Files
  ;;;
  
  
  (method (drop-files wparam)
    (platform-drop-files self wparam))
  
  
  (method protected virtual (receive-files pos files)
    )
  
  
  ;;;
  ;;;; Fade
  ;;;
  
  
  ;; tofix : this will need a complete rethinking for multi-platform...
  ;; should use cairo...
  ;; also the menubar should only fade-in the first menu so that wiggling
  ;; between all the menus is zero delay after the first one popped
  (method public (fade-in (fade-speed: fade-speed #f))
    @w
    (set-alpha-blending handle 0)
    (set-visible? #t)
    @w(
    (update-window)
    (let* ((max 255)
           (delay 0.15)
           (now (current-seconds))
           (start now))
      (while (< now (+ start delay))
        (set-alpha-blending handle (fxceiling (* (- now start) (/ (cast <fl> max) delay))))
        (set! now (current-seconds)))
      (set-alpha-blending handle max))
    (set-layered? handle #f)))
  
  
  (method public (fade-out (to: to 0) (step: step 5))
    @need-to-get-layered-attributes
    (let ((alpha))
      (loop (for n from 0 to to by step)
            (set-alpha-blending handle n)
            (set! alpha n))
      (unless (= alpha to)
        (set-alpha-blending handle to))))


  ;;;
  ;;;; Management
  ;;;


  (method public (opened?)
    (boolean handle))


  (method public (get-external-frame)
    (if (is? self External-Frame)
        self
      (when parent
        (get-frame~ parent))))
  
  
  (method public (get-overlapped)
    (if (is? self Overlapped)
        self
      (get-overlapped~ parent)))
  

  (method public virtual (get-title)
    title)
  

  (method public virtual (set-title value)
    (set! title value)
    (assert handle)
    (platform-set-window-title handle (localize title)))
  

  (method public (get-window-title)
    (assert handle)
    (platform-get-window-title handle))
  

  (method public (acquire window <Window> shape)
    (assert handle)
    (typecase shape
      ((Point)
       (acquire-point handle (get-handle~ window) shape))
      ((Rect)
       (acquire-rect handle (get-handle~ window) shape))
      (else
       (error "Unable to acquire {t}" shape))))
  
  
  (method override (get-position) <Point>
    (assert handle)
    (platform-get-frame-position handle))
  
  
  (method override (set-position pos <Point>) <void>
    (assert handle)
    (unless (nu=? pos (get-position))
      (platform-set-frame-position handle pos)))
  
  
  (method public (move-window dh <fx> dv <fx>)
    (let ((pos (get-position)))
      (set-position (new Point (+ (get-h~ pos) dh) (+ (get-v~ pos) dv)))))
  
  
  (method override (get-size) <Dimension>
    (assert handle)
    (platform-get-content-size handle))
  
  
  (method override (set-size new-size <Dimension>) <void>
    (assert handle)
    (platform-set-content-size handle new-size))
  
  
  (method public (size-window dwidth <fx> dheight <fx>)
    (let ((size (get-size)))
      (set-size (new Dimension (+ (get-width~ size) dwidth) (+ (get-height~ size) dheight)))))
  
  
  (method public (grow-rect dh dv dwidth dheight)
    (let ((pos (+ (get-position) (new Point dh dv)))
          (size (+ (get-size) (new Dimension dwidth dheight))))
      (set-size size)
      (set-position pos)))


  (method public (get-width) <fx>
    (get-width~ (get-size)))

  
  (method public (get-height) <fx>
    (get-height~ (get-size)))
  
  
  (method public (get-frame-size) <Dimension>
    (assert handle)
    (platform-get-frame-size handle))


  (method public (set-frame-size size)
    (assert handle)
    (platform-set-frame-size handle size))
  

  (method public (get-frame-rect) <Rect>
    (assert handle)
    (platform-get-frame-rect handle))
  
  
  (method public (set-frame-rect rect)
    (assert handle)
    (platform-set-frame-rect handle rect))
  

  (method public (get-bounds) <Rect>
    (assert handle)
    (platform-get-bounds handle))

  
  (method public (ensure-displayed)
    (let ((outer (if (not parent) (get-size~ (get-desktop)) (get-size~ parent)))
          (rect (get-frame-rect)))
      (receive (new-position new-size) (fit-within outer rect padding: 8)
        (set-size new-size)
        (set-position new-position))))


  (cond-expand
    (cocoa
     (method public (mouse-position) <Point>
       (platform-mouse-position handle)))
    (else
     (method public (mouse-position) <Point>
       (acquire (get-desktop) (platform-mouse-position)))))


  (cond-expand
    (cocoa
     (method public (set-mouse-position pos)
       (platform-set-mouse-position handle (get-h~ pos) (get-v~ pos))))
    (else
     (method public (set-mouse-position pos)
       (let ((pos (acquire~ (get-desktop) self pos)))
         (platform-set-mouse-position (get-h~ pos) (get-v~ pos))))))


  (method public (mouse-window)
    (find-window (mouse-position)))


  (method public (mouse-in-window?)
    (point-in-window? (mouse-position)))


  (method public (point-in-window? point)
    (let ((size (get-frame-size)))
      (and (in-interval? (get-h~ point) 0 (get-width~ size))
           (in-interval? (get-v~ point) 0 (get-height~ size)))))


  (method public (find-window point)
    (let ((pos (acquire~ (get-desktop) self point)))
      (get-window (platform-window-from-point pos))))


  (method public (flash-window)
    (platform-flash-window handle))


  (method public (move x y cx cy)
    (assert handle)
    (platform-move-window handle x y cx cy))


  (method public (acquire-focus)
    (set-window-focus self))
  
  
  (method public (center-window)
    (set-position (center-screen (primary-screen) (get-frame-size))))
  
  
  (method public (enter-modal overlapped)
    (assert handle)
    (platform-enter-modal handle (and overlapped (get-handle~ overlapped))))
  
  
  (cond-expand
    (cocoa
      (method public (run-modal)
        (assert handle)
        (platform-run-modal handle)))
    (else
      (method public (run-modal)
        (process-events))))
  
  
  (method public (exit-modal overlapped)
    (assert handle)
    (platform-exit-modal handle (and overlapped (get-handle~ overlapped))))
  
  
  (method public (disable-window)
    (assert handle)
    (platform-disable-window handle))
  
  
  (method public (enable-window)
    (assert handle)
    (platform-enable-window handle))


  (method public (get-client-rect)
    (assert handle)
    (platform-get-client-rect handle))


  (method public virtual (scroll-window delta rect clip-rect)
    (assert handle)
    (if (inhibit-updates?)
        (invalidate-rect clip-rect)
      (platform-scroll-window handle delta rect clip-rect))
    (let ((proc (debug-flicker)))
      (when proc
        (proc))))

  
  (method public (invalidate-rect rect)
    (assert handle)
    (platform-invalidate-rect handle rect))

  
  (method public (invalidate-region region)
    (assert handle)
    (platform-invalidate-region handle region))

  
  (method public (invalidate-window)
    (assert handle)
    (platform-invalidate-window handle))

  
  (method public (redraw-window (rect: rect #f) (region: region #f))
    (assert handle)
    (if (inhibit-updates?)
        (cond (rect (invalidate-rect rect))
              (region (invalidate-region region))
              (else (invalidate-window)))
      (if (or rect region)
          (platform-redraw-window handle rect region)
        (platform-redraw-window handle (get-client-rect) #f))))


  (method public (invalidate-border (insets: insets {Rect 1 1 1 1}))
    (with ((region (border-region insets: insets)))
      (invalidate-region region)))


  (method public (redraw-border (insets: insets {Rect 1 1 1 1}))
    (with ((region (border-region insets: insets)))
      (redraw-window region: region)))


  (method public (border-region (insets: insets {Rect 1 1 1 1}))
    (frame-region (get-client-rect) insets: insets))


  (method public (update-window)
    (assert handle)
    (if (inhibit-updates?)
        (invalidate-window)
      (platform-update-window handle)))
  
  
  (method public (show-noactivate)
    (assert handle)
    (platform-show-noactivate handle))
  
  
  (method public (hide-noactivate)
    (assert handle)
    (platform-hide-noactivate handle))


  ;;;
  ;;;; Children
  ;;;


  (method public (first-window)
    (let ((windows (get-windows)))
      (if (null? windows)
          #f
        (first windows))))
  
  
  (method public (get-windows (include-invisibles?: include-invisibles? #f))
    (collect-if (lambda (child)
                  (and (is? child Window)
                       (or include-invisibles? (get-visible?~ child))))
                (get-children)))


  (method public (front-window?)
    (eq? self (first-window~ parent)))


  ;;;
  ;;;; Layer
  ;;;
  
  
  (method override (bring-to-front)
    (nextmethod)
    (assert handle)
    (platform-bring-window-to-front handle))


  (method override (send-to-back)
    (nextmethod)
    (assert handle)
    (platform-send-window-to-back handle))
  
  
  (method public (select-foreground)
    (platform-select-foreground-window handle))
  

  ;;;
  ;;;; Layout
  ;;;


  (method override (get-location)
    location)


  (method override (set-location loc)
    (set! location loc))
  
  
  (method public (layout-window)
    (layout))
  
  
  (method public virtual (layout)
    )
  
  
  ;;;
  ;;;; View
  ;;;
  
  
  (method public (mouse-view)
    (find-view (mouse-position)))
  
  
  (method public (find-view pos)
    (let ((window (find-window pos)))
      (when (is? window View-Player)
        (let ((root (get-root~ window)))
          (find-drawing~ root (acquire~ window self pos))))))
  
  
  (method public (to-view shape view)
    (let* ((player (get-player~ view))
           (acquired (acquire~ player self shape)))
      (acquire~ view (get-root~ player) acquired)))


  ;;;
  ;;;; Debugging
  ;;;
  
  
  (method public virtual (debug-window pos)
    (unimplemented 'debug-window)
    @Development
    (set-%~ Development self))


  (method public virtual (describe-window pos)
    (unimplemented 'describe-window)
    @WINSTYLE(
    (format :console "{%}")
    (format :console "Class:            {s}{%}" (class-of self))
    (format :console "Name:             {s}{%}" (get-name))
    (format :console "Class Background: {s}{%}" (get-class-background))
    (format :console "Clip Children?:   {s}{%}" (mask-bit-set? (get-style) WS_CLIPCHILDREN))
    (format :console "Clip Siblings?:   {s}{%}" (mask-bit-set? (get-style) WS_CLIPSIBLINGS))
    (format :console "Position:         {s}{%}" (get-position))
    (format :console "Size:             {s}{%}" (get-size))
    (format :console "Window rect:      {s}{%}" (get-bounds))
    (format :console "Client rect:      {s}{%}" (get-client-rect))
    (format :console "Style:            {s}{%}" (bits->names (get-style) WINSTYLE))
    (format :console "Extended Style:   {s}{%}" (bits->names (get-ex-style) WINEXSTYLE))))))
