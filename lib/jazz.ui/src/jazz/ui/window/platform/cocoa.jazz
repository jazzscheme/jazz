;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Platform-dependant Window Definitions (Cocoa)
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Jeremie Lasalle Ratelle.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2012
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.ui.window.platform.cocoa jazz


(export (jazz.ui.window.platform.independant))

(import (jazz.geometry)
        (jazz.graphic)
        (jazz.io)
        (jazz.library)
        (jazz.platform)
        (jazz.platform.cairo)
        (jazz.platform.cocoa)
        (jazz.system)
        (jazz.ui)
        (time))


(definition public unprocessed '(unprocessed))
(definition public processed '(processed))


;;;
;;;; Window
;;;


(definition public Windows-Table
  (make-table test: eqv?))


(definition public inline (get-window hwnd)
  (let ((hwnd (if (foreign? hwnd) (foreign-address hwnd) hwnd)))
    (table-ref Windows-Table hwnd #f)))


(definition public inline (set-window hwnd window)
  (table-set! Windows-Table (foreign-address hwnd) window))


(definition public (platform-get-window-handle-title handle)
  (platformGetWindowTitle handle))


(definition public (set-window-title handle title)
  (platformSetWindowTitle handle title))


(definition package (window-parent window)
  (let ((parent (get-parent~ window)))
    (if parent
        (get-handle~ parent)
      #f)))


(definition package (window-default-parent window)
  (typecase window
    ((Popup) (get-toplevel))
    (else #f)))


(definition package (prepare-handle window rest)
  (platformCreateWindow (opengl?~ window)))


(definition (create-window-handle window rest)
  )


(definition package (destroy-window handle)
  (platformDestroyWindow handle))


(definition package (close-requested)
  (let ((process (get-process)))
    (if process
        (exit-process~ process)
      (exit))))


(definition (dispatch-message window msg)
  )


(set-get-window get-window)


;;;
;;;; Messages
;;;


;; ste?
(definition package (setup-events)
  )


;; ste?
(definition package (process-messages-single-threaded process thunk)
  (declare (proper-tail-calls))
  (let (loop)
    (platformPollEvents)
    (thread-process-call-ste~ process thunk)
    (sleep .01)
    (when (thread-loop? (current-thread))
      (loop))))


;; ste?
(definition package (message-available?)
  (platformEventAvailable))


;; unfinished
(definition package (process-messages)
  (define (process)
    (declare (proper-tail-calls))
    (let (loop)
      ;; not sure if this may cause performance problems
      (thread-execute (primordial-thread) 'execute-event
        (lambda ()
          (platformPollEvents)))
      ;(thunk)
      (sleep .01)
      (when (thread-loop? (current-thread))
        (loop))))
  
  (new-thread process 'message))


(definition package (show-window handle)
  (platformShowWindow handle))


(definition package (show-maximized handle)
  (show-window handle))


(definition package (show-restored handle)
  (show-window handle))


(definition package (hide-window handle)
  )


(definition package (bring-window-to-top handle)
  (platform-bring-window-to-front handle))


(definition package (get-window-state handle)
  'restored)


(definition package (set-window-state handle state)
  )


(definition package (get-window-placement handle)
  (list (get-window-state handle)
        (platform-get-position handle #f)
        (platform-get-window-size handle)))


(definition package (set-window-placement handle info)
  (bind (state position size) info
    (set-window-state handle state)
    (platform-set-position handle position)
    (platform-set-window-size handle size)))


(definition package (minimize-window handle)
  (unimplemented 'minimize-window))


(definition package (maximize-window handle)
  (unimplemented 'maximize-window))


(definition package (restore-window handle)
  (unimplemented 'restore-window))


(definition package (platform-erase-background handle)
  (unimplemented 'platform-erase-background))


(definition (convert-key char keycode)
  (case char
    ((#\x10) (case keycode
               ((122) 'F1)
               ((120) 'F2)
               ((99)  'F3)
               ((118) 'F4)
               ((96)  'F5)
               ((97)  'F6)
               ((98)  'F7)
               ((100) 'F8)))
    ((#\esc) 'Escape)
    ((#\backspace) 'Backspace)
    ((#\return) 'Return)
    ((#\space)  'Space)
    ((#\tab) 'Tab)
    ((#\x1c) 'Left)
    ((#\x1d) 'Right)
    ((#\x1e) 'Top)
    ((#\x1f) 'Down)
    (else    char)))


;;;
;;;; Shortcuts
;;;


(definition public Symbolic-Keys
  (list->table
    (list
      (cons #\esc   'Escape)
      (cons #\space 'Space))))


@comment
(definition public Symbolic-Keys
  (list->table
    (list
      (cons VK_OEM_MINUS  #\-)
      (cons VK_OEM_PLUS   #\+)
      (cons VK_OEM_COMMA  #\,)
      (cons VK_OEM_PERIOD #\.)
      (cons VK_OEM_1      #\;)
      (cons VK_OEM_2      #\/)
      (cons VK_OEM_3      #\~)
      (cons VK_OEM_4      #\[)
      (cons VK_OEM_5      #\\)
      (cons VK_OEM_6      #\])
      (cons VK_OEM_7      #\')
      (cons VK_F1         'F1)
      (cons VK_F2         'F2)
      (cons VK_F3         'F3)
      (cons VK_F4         'F4)
      (cons VK_F5         'F5)
      (cons VK_F6         'F6)
      (cons VK_F7         'F7)
      (cons VK_F8         'F8)
      (cons VK_F9         'F9)
      (cons VK_F10        'F10)
      (cons VK_F11        'F11)
      (cons VK_F12        'F12)
      (cons VK_ESCAPE     'Escape)
      (cons VK_BACK       'Backspace)
      (cons VK_RETURN     'Return)
      (cons VK_SPACE      'Space)
      (cons VK_TAB        'Tab)
      (cons VK_HOME       'Home)
      (cons VK_END        'End)
      (cons VK_LEFT       'Left)
      (cons VK_UP         'Up)
      (cons VK_RIGHT      'Right)
      (cons VK_DOWN       'Down)
      (cons VK_PRIOR      'Prior)
      (cons VK_NEXT       'Next)
      (cons VK_INSERT     'Insert)
      (cons VK_PAUSE      'Pause)
      (cons VK_DELETE     'Delete)
      (cons VK_ADD        'Add)
      (cons VK_SUBTRACT   'Subtract)
      (cons VK_MULTIPLY   'Multiply)
      (cons VK_DIVIDE     'Divide))
    test: eqv?))


(definition (translate-shortcut key)
  (let ((appl (get-application)))
    (if (not appl)
        #f
      (let ((symbolic (table-ref Symbolic-Keys key key)))
        (let ((shortcut (new Shortcut (modifiers-keys) symbolic)))
          (dispatch-shortcut~ appl shortcut))))))


(set-translate-shortcut-hook translate-shortcut)


(definition public (symbolic-key->code key)
  (table-find Symbolic-Keys key))


(definition current-mouse-x 0)
(definition current-mouse-y 0)


(definition (process-window-message handler event userdata)
  )

@convert-cocoa
(set-process-window-message process-window-message)


;;;
;;;; Toplevel
;;;


(definition (get-toplevel-hwnd)
  (let ((toplevel (get-toplevel)))
    (when toplevel
      (get-handle~ toplevel))))


;;;
;;;; Monitors
;;;


(definition public platform-current-monitor
  #f)


(definition public platform-all-monitors
  #f)


;;;
;;;; Capture
;;;


(definition public (set-capture handle)
  #f)


(definition public (unset-capture)
  #f)


(definition package (with-platform-painting window platform-data proc)
  (let* ((context (car platform-data))
         (surface (new Surface (cairo_quartz_surface_create_for_cg_context context (get-width~ window) (get-height~ window)))))
    (unwind-protect
        (proc surface)
      (close~ surface))))


(definition public (with-window-surface window proc)
  (unimplemented 'with-window-surface)
  @wait
  (let* ((screen-no (XDefaultScreen x11-default-display))
         (visual    (XDefaultVisual x11-default-display screen-no)))
    (cairo_xlib_surface_create x11-default-display (get-handle~ window) visual (get-width~ window) (get-height~ window))))


(definition (set-alpha-blending handle n)
  ;; todo
  #f)


;;;
;;;; Timer
;;;


;; todo
(definition public (platform-set-timer handle id elapse)
  )


;; todo
(definition public (platform-kill-timer handle id)
  )


;;;
;;;; Tracking
;;;


(definition public (track-mouse-leave handle)
  )


(definition public (cancel-mouse-leave-tracking handle)
  )


;;;
;;;; Management
;;;


(definition package (platform-set-parent handle parent)
  )


(definition package (platform-get-first-child handle)
  (unimplemented 'platform-get-first-child)
  @wait
  (let ((num-of-children (XNumberOfChildren x11-default-display handle)))
    (if (= 0 num-of-children)
        #f
      (XGetChildHandle x11-default-display handle 0))))


(definition package (platform-get-first-visible-child handle)
  (unimplemented 'platform-get-first-visible-child)
  @wait
  (let ((num-of-children (XNumberOfChildren x11-default-display handle)))
    (if (= 0 num-of-children)
        #f
      (let (loop (n 0))
        (if (= n num-of-children)
            #f
          (let ((child-handle (XGetChildHandle x11-default-display handle n)))
            (if (platform-is-window-visible? child-handle)
                child-handle
              (loop (+ n 1)))))))))


(definition package (platform-is-window-visible? handle)
  (unimplemented 'platform-is-window-visible?)
  @wait
  (let ((infos (XWindowAttributes-make)))
    (XGetWindowAttributes x11-default-display handle infos)
    (= (XWindowAttributes-map_state-ref infos) IsViewable)))


(definition public (acquire-point to-handle from-handle shape)
  ;; TODO
  shape)


(definition public (acquire-rect to-handle from-handle shape)
  ;; TODO
  shape)


(definition package (platform-get-position handle parent-handle)
  (with-NSPoint #f
    (lambda (pos)
      (platformGetWindowPos handle pos)
      (NSPoint->point pos))))


(definition package (platform-set-position handle pos)
  (with-NSPoint pos
    (lambda (pos)
      (platformSetWindowPos handle pos))))


(definition package (platform-get-size handle)
  (with-NSSize #f
    (lambda (size)
      (platformGetWindowSize handle size)
      (NSSize->dimension size))))


(definition package (platform-get-window-size handle)
  (with-NSSize #f
    (lambda (size)
      (platformGetWindowSize handle size)
      (NSSize->dimension size))))


(definition package (platform-set-window-size handle size)
  (with-NSSize size
    (lambda (size)
      (platformSetWindowSize handle size))))


(definition package (platform-get-rect handle parent-handle)
  (with-NSRect #f
    (lambda (rect)
      (platformGetWindowFrame handle rect)
      (NSRect->rect rect))))


;; needs fixing as macosx using bottom coordinate
(definition package (platform-set-rect handle rect)
  (with-NSRect rect
    (lambda (rect)
      (platformSetWindowFrame handle rect))))


(definition package (platform-get-bounds handle)
  (with-NSRect #f
    (lambda (rect)
      (platformGetWindowBounds handle rect)
      (NSRect->rect rect))))


(definition package (platform-mouse-position handle)
  (with-NSPoint #f
    (lambda (pos)
      (platformGetMousePosition handle pos)
      (NSPoint->point pos))))


(definition package (platform-set-mouse-position handle x y)
  (with-NSPoint (new Point x y)
    (lambda (pos)
      (platformSetMousePosition handle pos))))


(definition package (platform-window-from-point point)
  ;; todo
  #f)


(definition package (platform-child-window-from-point handle point)
  ;; todo
  #f)


(definition package (platform-move-window handle x y cx cy)
  (unimplemented 'platform-move-window))


(definition package (platform-window-enabled? handle)
  (unimplemented 'platform-window-enabled?))


(definition package (platform-enable-window handle)
  ;; todo
  )


(definition package (platform-disable-window handle)
  ;; todo
  )


(definition package (platform-get-client-rect handle)
  (let ((size (platform-get-size handle)))
    (new Rect 0 0 (get-width~ size) (get-height~ size))))


(definition package (platform-scroll-window handle delta rect clip-rect)
  (platform-invalidate-rect handle clip-rect)
  @w (platform-update-window handle))


(definition package (platform-invalidate-rect handle rect)
  ;; quick hack
  ;; bug probably due to coordinate system being flipped even if i use isFlipped = YES
  ;; maybe because the view is flipped but not the window!?
  (set! rect (size-rect (platform-get-size handle)))
  (with-NSRect rect
    (lambda (rect)
      (platformInvalidateRect handle rect))))


(definition package (platform-invalidate-region handle region)
  (for-each (lambda (rect)
              (platform-invalidate-rect handle rect))
            (get-rectangles~ region)))


(definition package (platform-invalidate-window handle)
  (let ((rect (size-rect (platform-get-size handle))))
    (platform-invalidate-rect handle rect)))


(definition package (platform-redraw-window handle rect region)
  ;; quick
  (platform-invalidate-window handle))


(definition package (platform-get-update-rect handle)
  (unimplemented 'platform-get-update-rect))


(definition package (platform-get-update-region handle)
  (unimplemented 'platform-get-update-region))


(definition package (platform-redraw-view-only view handle)
  (let ((rct (acquire~ (get-root~ view) view (get-bounds~ view))))
    (platform-invalidate-rect handle rct)))


(definition package (platform-update-window handle)
  @wait
  (when handle
    (let* ((size (platform-get-size handle))
           (rct (new Rect 0 0 (get-width~ size) (get-height~ size))))
      (platform-invalidate-rect handle rct))))


(definition package (platform-show-noactivate handle)
  (show-window handle))


(definition package (platform-hide-noactivate handle)
  (hide-window handle))


(definition package (platform-bring-window-to-front handle)
  )


(definition package (platform-send-window-to-back handle)
  )


(definition package (platform-select-foreground-window handle)
  )


(definition package (platform-flash-window handle)
  )


;;;
;;;; Focus
;;;


(definition current-focus #f)


(definition package (platform-get-focus)
  @COCOA
  (platformGetFocus)
  current-focus)


(definition package (platform-set-focus handle)
  (set! current-focus handle)
  (platformSetFocus handle))


;;;
;;;; Cursor
;;;


(definition public Current-Cursor
  #f)


@unimplemented
(definition public Cursors
  (list
    (list :arrow               IDC_ARROW)
    (list :wait                IDC_WAIT)
    (list :ibeam               IDC_IBEAM)
    (list :cross               IDC_CROSS)
    (list :finger              IDC_HAND)
    (list :all                 IDC_SIZEALL)
    (list :west-east           IDC_SIZEWE)
    (list :no                  IDC_NO)
    (list :move                (new Cursor-Resource "Move"))
    (list :opened-hand         (new Cursor-Resource "OpenedHand"))
    (list :closed-hand         (new Cursor-Resource "ClosedHand"))
    (list :zoom                (new Cursor-Resource "Zoom"))
    (list :zoom-in             (new Cursor-Resource "ZoomIn"))
    (list :zoom-out            (new Cursor-Resource "ZoomOut"))
    (list :spy                 (new Cursor-Resource "Spy"))
    (list :left-arrow          (new Cursor-Resource "LeftArrow"))
    (list :vertical-splitter   (new Cursor-Resource "VerticalSplitter"))
    (list :horizontal-splitter (new Cursor-Resource "HorizontalSplitter"))))


(definition (load-cursor cursor)
  (unimplemented 'load-cursor))


(definition (get-named-cursor name)
  (unimplemented 'get-named-cursor)
  @unimp
  (let ((info (assq name Cursors)))
    (if (not info)
        (error "Unknown cursor: {t}" name)
      (cadr info))))


(definition public (get-cursor)
  Current-Cursor)


(definition public (set-cursor cursor)
  #f
  @unimp
  (unless #f @to-fix-this-doesnt-work-when-switching-overlapped-windows! (= cursor Current-Cursor)
    (set! Current-Cursor cursor)
    (let ((cursor (if (symbol? cursor) (get-named-cursor cursor) cursor)))
      (SetCursor (load-cursor cursor)))))


(definition *cursor-visible?*
  #t)


(definition public (cursor-visible?)
  *cursor-visible?*)


(definition public (hide-cursor)
  @COCOA
  (platformHideCursor (get-handle~ (window-to-use-hack)))
  (set! *cursor-visible?* #f))


(definition public (show-cursor)
  @COCOA
  (platformShowCursor (get-handle~ (window-to-use-hack)))
  (set! *cursor-visible?* #t))


;;;
;;;; Desktop
;;;


(definition package (platform-get-desktop)
  (unimplemented 'platform-get-desktop))


;;;
;;;; Drag and Drop
;;;


(definition package (platform-drop-files window temp)
  (unimplemented 'platform-drop-files)))
