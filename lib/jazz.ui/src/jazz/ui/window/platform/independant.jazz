;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Platform-independant Window Definitions
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2012
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;    Jeremie Lasalle Ratelle
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.ui.window.platform.independant jazz


;;;
;;;; Single Thread
;;;


(definition *events-single-threaded?*
  #t)


(definition public (get-events-single-threaded?)
  *events-single-threaded?*)


(definition public (set-events-single-threaded? flag)
  (set! *events-single-threaded?* flag))


;;;
;;;; Event
;;;


(definition public (event-thread)
  (primordial-thread))


(definition public (event-thread?)
  (eq? (current-thread) (event-thread)))


(definition public (delay-event thunk)
  (thread-write (event-thread)
    thunk))


(definition public (post-event thunk)
  (thread-post (event-thread) 'post-event
    thunk))


(definition public (block-event thunk)
  (thread-block (event-thread) 'block-event
    thunk))


(definition public (execute-event thunk)
  (thread-execute (event-thread) 'execute-event
    thunk))


(definition public (call-event thunk)
  (thread-call (event-thread) 'call-event
    thunk))


;;;
;;;; Monitor
;;;


(class Monitor extends Object
  
  
  (slot primary?     getter generate)
  (slot display-area getter generate)
  (slot work-area    getter generate)
  
  
  (method override (initialize primary? display-area work-area)
    (nextmethod)
    (set! primary?~self primary?)
    (set! display-area~self display-area)
    (set! work-area~self work-area))
  
  
  (method override (print output readably)
    (print-unreadable self output
      (lambda (output)
        (format output "{?:primary ~}{s}" primary? display-area))))))
