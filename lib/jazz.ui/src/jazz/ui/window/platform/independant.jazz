;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Platform-independant Window Definitions
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2012
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;    Jeremie Lasalle Ratelle
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.ui.window.platform.independant jazz


(import (jazz.graphic))


;;;
;;;; Single Thread
;;;


(definition *events-single-threaded?*
  #t)


(definition public (get-events-single-threaded?)
  *events-single-threaded?*)


(definition public (set-events-single-threaded? flag)
  (set! *events-single-threaded?* flag))


;;;
;;;; Priority Queue
;;;


(class Priority-Queue extends Object
  
  
  (slot queue-vector)
  (slot mutex           initialize (make-mutex))
  (slot mutex-condition initialize (make-condition))
  
  
  (method override (initialize priority-count)
    (nextmethod)
    (set! queue-vector
          (list->vector (map (lambda (n) (new-queue))
                             (naturals 0 priority-count)))))
  
  
  (method public (empty?)
    (mutex-lock! mutex)
    (prog1 (not (top-queue))
      (mutex-unlock! mutex)))
  
  
  (method (top-queue)
    (let (iter (priority (- (vector-length queue-vector) 1)))
      (if (>= priority 0)
          (let ((queue (element queue-vector priority)))
            (if (null? (queue-list queue))
                (iter (- priority 1))
              queue))
        #f)))
  
  
  (method public (push obj (priority 0))
    (assert (< priority (vector-length queue-vector)))
    (mutex-lock! mutex)
    (enqueue (element queue-vector priority) obj)
    (condition-signal! mutex-condition)
    (mutex-unlock! mutex))
  
  
  (method public (pop)
    (let (iter)
      (mutex-lock! mutex)
      (let ((queue (top-queue)))
        (if queue
            (prog1 (dequeue queue)
              (mutex-unlock! mutex))
          (mutex-unlock! mutex mutex-condition)
          (iter))))))


;;;
;;;; Offscreen
;;;


(definition protected offscreen-invalid-regions
  (make-table test: eq? weak-keys: #t))


(definition public (get-offscreen-invalid-region handle)
  (or (table-ref offscreen-invalid-regions handle #f)
      (let ((region (new Region)))
        (table-set! offscreen-invalid-regions handle region)
        region)))


(definition public (invalidate-offscreen-region handle region)
  (let ((actual (get-offscreen-invalid-region handle)))
    (combine-or!~ actual region)))


(definition public (invalidate-offscreen-rect handle rect)
  (let ((actual (get-offscreen-invalid-region handle)))
    (with ((region (new Region rect: rect)))
      (combine-or!~ actual region))))


(definition public (validate-offscreen-region handle region)
  (let ((actual (get-offscreen-invalid-region handle)))
    (combine-diff!~ actual region)))


;;;
;;;; Event
;;;


(definition public (event-thread)
  (primordial-thread))


(definition public (event-thread?)
  (eq? (current-thread) (event-thread)))


(definition public (delay-event thunk)
  (if (get-events-single-threaded?)
      (write-delayed-event thunk)
    (delay-event22 thunk)))


(definition public (post-event thunk)
  (if (get-events-single-threaded?)
      (thread-post (event-thread) 'post-event
        thunk)
    (post-event22 thunk)))


(definition public (block-event thunk)
  (if (get-events-single-threaded?)
      (thread-block (event-thread) 'block-event
        thunk)
    (block-event22 thunk)))


(definition public (execute-event thunk)
  (if (get-events-single-threaded?)
      (thread-execute (event-thread) 'execute-event
        thunk)
    (execute-event22 thunk)))


(definition public (call-event thunk)
  (if (get-events-single-threaded?)
      (thread-call (event-thread) 'call-event
        thunk)
    (call-event22 thunk)))


(definition *event-queue*
  (new Priority-Queue 3))


(definition (wait-for-event thunk name priority)
  (let ((mutex (make-mutex name)))
    (mutex-lock! mutex)
    (push~ *event-queue*
      (lambda ()
        (unwind-protect
            (thunk)
          (mutex-unlock! mutex))) priority)
    (mutex-lock! mutex)))


(definition public (delay-event22 thunk)
  (push~ *event-queue* thunk 2))


(definition public (message-event22 thunk)
  (wait-for-event thunk 'post-event 1))


(definition public (post-event22 thunk)
  (if (event-thread?)
      (thunk)
    (push~ *event-queue* thunk 0)))


(definition public (block-event22 thunk)
  (if (event-thread?)
      (thunk)
    (wait-for-event thunk 'block-event 0)))


(definition public (execute-event22 thunk)
  (if (event-thread?)
      (thunk)
    (wait-for-event thunk 'execute-event 0)))


(definition public (call-event22 thunk)
  (if (event-thread?)
      (thunk)
    (let ((result #f))
      (wait-for-event (lambda () (set! result (thunk))) 'call-event 0)
      result)))


(definition public (process-event22)
  (let ((msg (pop~ *event-queue*)))
    (let ((msg? (not (eof-object? msg))))
      (when msg?
        (let ((thunk msg))
          (thunk)))
      msg?)))


;;;
;;;; Monitor
;;;


(class Monitor extends Object
  
  
  (slot primary?     getter generate)
  (slot display-area getter generate)
  (slot work-area    getter generate)
  
  
  (method override (initialize primary? display-area work-area)
    (nextmethod)
    (set! primary?~self primary?)
    (set! display-area~self display-area)
    (set! work-area~self work-area))
  
  
  (method override (print output readably)
    (print-unreadable self output
      (lambda (output)
        (format output "{?:primary ~}{s}" primary? display-area))))))
