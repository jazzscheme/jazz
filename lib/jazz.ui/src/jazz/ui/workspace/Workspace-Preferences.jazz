;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Workspace Preferences
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.ui.workspace.Workspace-Preferences jazz


(import (jazz.designer)
        (jazz.jml)
        (jazz.library)
        (jazz.system)
        (jazz.ui)
        (jazz.ui.view)
        (jazz.ui.window)
        (jazz.ui.workspace))


(class undocumented Workspace-Preferences extends Figure-Preferences


  (property shortcut    initialize {} accessors generate)
  (property frame-model initialize {} accessors generate)
  (property fullscreen? initialize #f accessors generate)
  
  
  (form
    (<install> icon: {Bitmap-Resource "Workspace"}))

  
  ;;;
  ;;;; Applying
  ;;;
  
  
  (method override (apply-preferences . rest)
    (when (selected-workspace)
      (deactivate~ (selected-workspace)))
    (unwind-protect
        (begin
          (set-locked-activations? #t)
          (activate))
      (set-locked-activations? #f)))
  
  
  ;;;
  ;;;; Activation
  ;;;
  
  
  (method (activate)
    (define (close-palettes)
      (for-each close~ (collect-palettes)))
    
    (define (collect-visibilities)
      (let ((frames (get-children~ (get-stage))))
        (collect (lambda (frame)
                   (let ((visible? (get-visible?~ frame))
                         (guest (get-guest~ frame)))
                     (when guest
                       (let ((ws (get-workspace~ frame)))
                         (let ((lst (if ws (list ws) (effective-host-workspaces~ guest))))
                           (cons frame
                                 (or (memq? name lst)
                                     (and (null? lst) visible?))))))))
                 frames)))
    
    (define (process-frames visibilities flag)
      (for-each (lambda (info)
                  (bind (frame . visible?) info
                    (when (eq? visible? flag)
                      (set-visible?~ frame visible?)
                      @wait-bug-fix-on-x11
                      (unless maximized?
                        (ensure-displayed~ frame)))))
                visibilities)
      (when flag
        (process-activation)))
    
    (define (process-activation)
      (let* ((stage (get-stage))
             (frames (get-views~ stage)))
        (if (null? frames)
            (stage-activate~ stage)
          (for-each-docked
            client-activate~))))
    
    (define (process-palettes)
      (for-each (lambda (preferences)
                  (unless (eq? (get-location~ preferences) 'root)
                    (let ((title (get-title~ preferences))
                          (position (get-position~ preferences))
                          (size (get-size~ preferences))
                          (root-preferences (first-child~ preferences))
                          (palette (new Palette close-behavior: 'detach-root visible?: #f)))
                      (apply-root~ root-preferences palette)
                      (when title
                        (set-title~ palette title))
                      (if (and position size)
                          (set-placement~ palette position size)
                        (maximize~ palette))
                      (set-visible?~ palette #t))))
                children))
    
    (let ((appl (get-application))
          (stage (get-stage))
          (toplevel (get-toplevel))
          (visibilities (collect-visibilities)))
      (with-locked-update
        (lambda ()
          (close-palettes)
          (full-screen-stage~ appl #f)
          (process-frames visibilities #f)
          (let ((root-preferences (find-child-located 'root)))
            (when root-preferences
              (let ((previous-root (get-root~ toplevel)))
                (when previous-root
                  (set-offscreen?~ previous-root #f)))
              (apply-root~ root-preferences toplevel)))
          (set-workspace-preferences self)
          (set-selected-workspace self)
          (update-menubar-buttons~ appl)
          (update-status)
          (process-application-event~ appl 'workspace 'activate self workspace: self)
          (full-screen-stage~ appl fullscreen?)
          (process-palettes)
          (if (and position size)
              (set-placement~ toplevel position size)
            (when (get-visible?~ toplevel)
              (restore-state~ toplevel)))
          (process-frames visibilities #t)
          (let ((first (first-view~ stage)))
            (when first
              (focus-host~ first)))))))
  
  
  (method public (update-status)
    (let* ((appl (get-application))
           (status (find-status-bar~ appl))
           (label (essay status (find-component~ status 'workspace))))
      (when label
        (set-title~ label (get-title))
        (set-icon~ label (get-icon)))))
  
  
  (method (deactivate)
    (process-application-event~ (get-application) 'workspace 'deactivate self workspace: self))
  
  
  ;;;
  ;;;; Descriptor
  ;;;
  
  
  (method meta override (get-class-descriptor)
    (new Workspace-Preferences-Descriptor)))


;;;
;;;; Design
;;;


(submodule design


(import (jazz.designer))


(class Workspace-Preferences-Descriptor extends Figure-Preferences-Descriptor
  
  
  (method meta override (get-domain property)
    (case (field-name property)
      ((fullscreen?) (new Boolean-Domain))
      (else (nextmethod property))))

  
  (method override (class-property-presentation class property)
    (case (field-name property)
      ((fullscreen?) "Fullscreen?")
      ((shortcut) "Shortcut")
      ((frame-model) "Frame Model")
      (else (nextmethod class property))))
  
  
  (method override (component-get-addable-classes component)
    (list
      Splitter-Preferences
      Pad-Preferences
      {}
      Docked-Preferences
      Stage-Preferences))
    
  
  (method override (component-get-categorized-properties component)
    '(title icon fullscreen? shortcut frame-model))

  
  (method override (component-get-row-instance component property)
    (case (field-name property)
      ((fullscreen?) (new Boolean-Row))
      (else (nextmethod component property)))))))
