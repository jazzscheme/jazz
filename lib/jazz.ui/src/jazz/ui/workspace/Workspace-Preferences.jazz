;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Workspace Preferences
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2012
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.ui.workspace.Workspace-Preferences jazz


(import (jazz.debuggee)
        (jazz.designer)
        (jazz.jml)
        (jazz.library)
        (jazz.system)
        (jazz.ui)
        (jazz.ui.view)
        (jazz.ui.window)
        (jazz.ui.workspace))


(class undocumented Workspace-Preferences extends Figure-Preferences


  (property shortcut    initialize #f accessors generate)
  (property frame-model initialize #f accessors generate)
  (property fullscreen? initialize #f accessors generate)
  
  
  (form
    (<install> icon: {Image-Resource "Workspace"}))

  
  ;;;
  ;;;; Applying
  ;;;
  
  
  (method override (apply-preferences (restore-focus?: restore-focus? #t))
    (without-local-debugger
      (lambda ()
        (with-locked-update
          (lambda ()
            (parameterize ((inhibit-layouts? #t))
              (when (selected-workspace)
                (deactivate~ (selected-workspace)))
              (assert (not (workspace-activation?)))
              (parameterize ((workspace-activation? #t))
                (activate restore-focus?: restore-focus?))))))))
  
  
  ;;;
  ;;;; Activation
  ;;;
  
  
  (method (activate (restore-focus?: restore-focus? #t))
    (define (close-palettes)
      (for-each close~ (collect-palettes)))
    
    (define (process-palettes)
      (for-each (lambda (preferences)
                  (unless (eq? (get-location~ preferences) 'root)
                    (let ((title (get-title~ preferences))
                          (position (get-position~ preferences))
                          (size (get-size~ preferences))
                          (root-preferences (first-child~ preferences))
                          (palette (new Palette close-behavior: 'detach-root visible?: #f)))
                      (apply-root~ root-preferences palette)
                      (when title
                        (set-title~ palette title))
                      (if (and position size)
                          (set-placement~ palette (list 'restored position size))
                        (maximize~ palette))
                      (set-visible?~ palette #t))))
                children))
    
    (define (collect-visibilities)
      (let ((frames (all-internal-frames include-invisibles?: #t)))
        (reverse!
          (collect (lambda (frame)
                     (let ((visible? (get-visible?~ frame))
                           (guest (get-guest~ frame)))
                       (when guest
                         (let ((workspaces (effective-host-workspaces~ guest)))
                           (cons frame
                                 (or (memq? name workspaces)
                                     (and (null? workspaces) visible?)))))))
                   frames))))
    
    (define (hide-frames visibilities)
      (for-each (lambda (info)
                  (bind (frame . visible?) info
                    (when (not visible?)
                      (set-visible?~ frame #f))))
                visibilities))
    
    (define (show-frames visibilities)
      (let ((active-stages (get-active-stages))
            (current #f))
        (for-each (lambda (info)
                    (bind (frame . visible?) info
                      (when visible?
                        (let ((preferred (intersection active-stages (get-workspace-stages~ frame))))
                          (if (not-null? preferred)
                              (set-parent~ frame (car preferred))
                            (let ((stage (current-stage)))
                              (set-parent~ frame stage)
                              (remember-workspace-stage~ frame))))
                        (if (get-visible?~ frame)
                            (maximize/restore~ frame)
                          (set-visible?~ frame #t))
                        @wait-bug-fix-on-x11
                        (unless maximized?
                          (ensure-displayed~ frame))
                        (set! current frame))))
                  visibilities)
        current))
    
    (define (process-activation)
      (let ((frames (all-internal-frames)))
        (if (null? frames)
            (let ((stage (current-stage)))
              (when stage
                (stage-empty-activate~ stage)))
          (for-each-docked
            client-activate~))))
    
    (define (focus-stage)
      (let ((stage (current-stage)))
        (when stage
          (let ((frame (first-view~ stage)))
            (if frame
                (focus-host~ frame)
              (acquire-focus~ stage))))))
    
    (let ((appl (get-application))
          (toplevel (get-toplevel))
          (visibilities (collect-visibilities))
          (focus (get-focus))
          (stage (current-stage)))
      (close-palettes)
      (full-screen-stage~ appl #f)
      (hide-frames visibilities)
      (reset-current-stage)
      (let ((root-preferences (find-located 'root)))
        (when root-preferences
          (let ((previous-root (get-root~ toplevel)))
            (when previous-root
              (set-offscreen?~ previous-root #f)))
          (apply-root~ root-preferences toplevel)))
      (process-palettes)
      (set-workspace-preferences self)
      (set-selected-workspace self)
      (update-status)
      (full-screen-stage~ appl fullscreen?)
      (if (and position size)
          (set-placement~ toplevel (list 'restored position size))
        (when (get-visible?~ toplevel)
          (restore-state~ toplevel)))
      (let ((current-frame (show-frames visibilities)))
        (update-windowing-actions~ appl)
        (update-menubar-buttons~ appl)
        (process-application-event~ appl 'workspace 'activate self workspace: self)
        (process-activation)
        (when (and stage (in-player?~ stage))
          (set-current-stage stage))
        (if (and restore-focus? focus (in-player?~ focus))
            (acquire-focus~ focus)
          (if (and current-frame (is? current-frame Focus-Container))
              (focus-host~ current-frame)
            (focus-stage))))
      (verify-reloads~ appl)))
  
  
  (method (deactivate)
    (process-application-event~ (get-application) 'workspace 'deactivate self workspace: self))
  
  
  (method public (update-status)
    (let* ((appl (get-application))
           (status (find-status-bar~ appl))
           (label (and status (find-component~ status 'workspace))))
      (when label
        (set-title~ label (get-title))
        (set-icon~ label (get-icon)))))
  
  
  ;;;
  ;;;; Descriptor
  ;;;
  
  
  (method meta override (get-class-descriptor (context: context #f))
    (new Workspace-Preferences-Descriptor)))


;;;
;;;; Design
;;;


(submodule design


(import (jazz.designer))


(class Workspace-Preferences-Descriptor extends Figure-Preferences-Descriptor
  
  
  (form
    (<install>
      (<properties~>
        (<Property-Descriptor> name: shortcut
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: frame-model
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: fullscreen?
          (<Boolean-Domain>    name: domain)))))

  
  (method meta override (get-domain property)
    (case (field-name property)
      ((fullscreen?) (new Boolean-Domain))
      (else (nextmethod property))))
  
  
  (method override (component-get-categorized-addable-classes component)
    (list
      (list
        (reference Splitter-Preferences)
        (reference Pad-Preferences))
      (list
        (reference Docked-Preferences)
        (reference Stage-Preferences)))))))
