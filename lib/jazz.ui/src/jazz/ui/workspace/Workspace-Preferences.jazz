;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Workspace Preferences
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library protected jazz.ui.workspace.Workspace-Preferences jazz


(import (jazz.designer)
        (jazz.jml)
        (jazz.library)
        (jazz.platform)
        (jazz.ui)
        (jazz.ui.view)
        (jazz.ui.window)
        (jazz.ui.workspace)
        (jazz.utilities))


(class Workspace-Preferences extends Figure-Preferences


  (property shortcut             initialize {} accessors generate)
  (property frame-model          initialize {} accessors generate)
  (property fullscreen?          initialize #f accessors generate)
  (property maximized?           initialize #f accessors generate)
  (property preserve-visibility? initialize #f accessors generate)
  
  
  (slot to-restore initialize {})
  
  
  (form
    (<install> icon: {Bitmap-Resource "Workspace"}))

  
  ;;;
  ;;;; Applying
  ;;;
  
  
  (method (apply-preferences . rest)
    (let ((palette {}))
      (when (selected-workspace)
        (let ((host (get-focused-host)))
          (when (is? host Docked-Host)
            (set! palette (get-guest~ host))))
        (deactivate~ (selected-workspace)))
      (unwind-protect
          (begin
            (set-locked-activations? #t)
            (activate palette))
        (set-locked-activations? #f))))
  
  
  ;;;
  ;;;; Activation
  ;;;
  
  
  (method (activate palette)
    (let ((appl (get-application))
          (stage (get-stage))
          (toplevel (get-toplevel)))
      (with-locked-update
        (function ()
          (close-palettes)
          (full-screen-stage~ appl #f)
          (let ((visibility (collect-visibility)))
            (process-frames visibility #f)
            (let ((previous-root (get-root~ toplevel))
                  (root-preferences (find-child-located 'root)))
              (when root-preferences
                (apply-root~ root-preferences toplevel)
                ;; quick solution to the memory leak that needs some thinking through
                (when previous-root
                  (let ((offscreen (slot-value previous-root 'offscreen)))
                    (when offscreen
                      (close~ offscreen))))))
            (set-workspace-preferences self)
            (set-selected-workspace self)
            (set-maximized?~ stage maximized?)
            (process-frames visibility #t))
          (process-activation)
          (update-menubar-buttons~ appl)
          (update-status)
          (process-application-event~ appl 'workspace 'activate self workspace: self)
          (if palette
              (select-palette (class-of palette) workspace: {} focus?: #t)
            (let ((first (first-view~ stage)))
              (when first
                (focus-host~ first))))
          (full-screen-stage~ appl fullscreen?)))))
  
  
  (method public (update-status)
    (let* ((appl (get-application))
           (status (get-status-bar~ appl))
           (label (essay status (find-component~ status 'workspace))))
      (when label
        (set-title~ label (get-title))
        (set-icon~ label (get-icon)))))
  
  
  (method (collect-visibility)
    (let* ((stage (get-stage))
           (frames (get-children~ stage)))
      (collect (function (frame)
                 (let ((visible? (get-visible?~ frame))
                       (guest (get-guest~ frame)))
                   (when guest
                     (let* ((ws (get-workspace~ frame))
                            (lst (if ws (list ws) (effective-host-workspaces~ guest))))
                       (if (or (and (memq? name lst) (or visible? (not preserve-visibility?) (memq? frame to-restore)))
                               (and (null? lst) visible?))
                           (cons frame #t)
                         (cons frame #f))))))
               frames)))
  
  
  (method (process-frames visibility flag)
    (for-each (function (info)
                (bind (frame . visible?) info
                  (when (eq? visible? flag)
                    (set-visible?~ frame visible?)
                    @wait-bug-fix-on-x11
                    (unless maximized?
                      (ensure-displayed~ frame)))))
              visibility))
  
  
  (method (process-activation)
    (let* ((stage (get-stage))
           (frames (get-views~ stage)))
      (if (null? frames)
          (stage-activate~ stage)
        (for-each-docked
          (function (view)
            (client-activate~ view))))))
  
  
  (method (deactivate)
    (process-application-event~ (get-application) 'workspace 'deactivate self workspace: self)
    (when preserve-visibility?
      (let* ((stage (get-stage))
             (frames (get-children~ stage)))
        (set! to-restore (collect-if (function (frame)
                                       (get-visible?~ frame))
                                     frames)))))


  ;;;
  ;;;; Designer
  ;;;
  
  
  (method meta (get-domain property)
    (case (field-name property)
      ((fullscreen? maximized? preserve-visibility?) (new Boolean-Domain))
      (else (nextmethod property))))

  
  (method meta (property-presentation property)
    (case (field-name property)
      ((fullscreen?) "Fullscreen?")
      ((maximized?) "Maximized?")
      ((shortcut) "Shortcut")
      ((frame-model) "Frame Model")
      ((preserve-visibility?) "Preserve Visibility?")
      (else (nextmethod property))))
  
  
  (method (get-addable-classes)
    (list
      Splitter-Preferences
      Pad-Preferences
      {}
      Docked-Preferences
      Stage-Preferences))
    
  
  (method (get-categorized-properties)
    '(title icon fullscreen? maximized? shortcut frame-model preserve-visibility?))

  
  (method (get-row-instance property)
    (case (field-name property)
      ((fullscreen? maximized? preserve-visibility?) (new Boolean-Row))
      (else (nextmethod property))))))
