;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Workspaces Preferences
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.ui.workspace.Workspaces-Preferences jazz


(import (jazz.designer)
        (jazz.jml)
        (jazz.ui))


(class undocumented Workspaces-Preferences extends Preferences


  (property active          initialize {}  accessors generate)
  (property toolbar-classes initialize '() accessors generate)
  (property associations    initialize '() accessors generate)
  
  
  (form
    (<install> title: "Workspaces"))
  
  
  ;;;
  ;;;; Walk
  ;;;

  
  @convert
  (method meta (walk-form analyser form)
    (let ((toolbar-classes (get-property~ form 'toolbar-classes)))
      (for-each (lambda (info)
                  (let ((toolbar-class (cdr info)))
                    (when (in-manifest? toolbar-class)
                      (push-reference~ analyser toolbar-class))))
                toolbar-classes)))
  
  
  ;;;
  ;;;; Descriptor
  ;;;
  
  
  (method meta override (get-class-descriptor)
    (new Workspaces-Preferences-Descriptor)))


;;;
;;;; Design
;;;


(submodule design


(import (jazz.designer))


(class Workspaces-Preferences-Descriptor extends Preferences-Descriptor
  
  
  (method override (component-can-rename-component? component)
    #f)
  
  
  (method override (component-can-delete-component? component)
    #f)
  
  
  (method override (component-can-move-component? component)
    #f)
  
  
  (method override (component-can-copy-component? component)
    #f)
  
  
  (method override (component-get-addable-classes component)
    (list
      Workspace-Preferences))
  
  
  (method override (component-get-addable-details component)
    '((name-info 150 #t) (shortcut 150 #f) (frame-model 150 #f) (fullscreen? 100 #f)))
  
  
  (method override (class-get-domain class property)
    (case (field-name property)
      ((toolbar-classes) (new Toolbar-Class-List-Row))
      ((associations) (new Association-List-Row))
      (else (nextmethod class property)))))


;;;
;;;; Toolbar-Class-List-Row
;;;


(class Toolbar-Class-List-Row extends List-Row
  
  
  (method override (get-subrow-class)
    Toolbar-Class-Row)
  
  
  (method override (add-value value class)
    (add-row self (car value) (cdr value) class: class))
  
  
  (method override (new-value)
    {}))


;;;
;;;; Toolbar-Class-Row
;;;


(class Toolbar-Class-Row extends Value-Row
  
  
  ;;;
  ;;;; Presentation
  ;;;
  
  
  (method override (present model)
    (format "{s}" model)))


;;;
;;;; Association-List-Row
;;;


(class Association-List-Row extends List-Row
  
  
  (method override (get-subrow-class)
    Association-Row)
  
  
  (method override (add-value value class)
    (add-row self (car value) (cdr value) class: class))
  
  
  (method override (new-value)
    {}))


;;;
;;;; Association-Row
;;;


(class Association-Row extends Value-Row
  
  
  ;;;
  ;;;; Presentation
  ;;;
  
  
  (method override (present model)
    (format "{s}" model)))))
