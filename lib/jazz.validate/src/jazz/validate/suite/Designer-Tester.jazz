;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Designer Tests
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library protected jazz.validate.suite.Designer-Tester jazz


(import (jazz.jml)
        (jazz.validate))


(class Designer-Tester extends Tester
  
  
  (form
    (<install> title: "Designer"))
  
  
  @convert (


  (method (test)
    @wait
    (invoke {} test-reference)
    @wait
    (invoke {} test-path))
  
  
  ;;;
  ;;;; Reference
  ;;;
  
  
  ;;  architecture
  ;;    X
  ;;      Y
  ;;        Z
  ;;    W
  
  
  (method (test-reference)
    (let* ((file {File Validate-Project "Development" "Support" "Test-Architecture-Form.jml"})
           (form (read-from-file file))
           (architecture (instantiate~ form))
           (designer (new Designer form: form reference: architecture))
           
           (X (locate~ architecture 'X))
           (Y (locate~ architecture 'Y))
           (Z (locate~ architecture 'Z))
           (W (locate~ architecture 'W))
           
           ;; set-property
           (T1 (locate~ architecture 'T1))
           ;; remove-property
           (T2 (locate~ architecture 'T2))
           (T3 (locate~ architecture 'T3))
           
           (in-branch
            (lambda (branch proc)
              (if (eq? branch #t)
                  (proc)
                (let ((old (get-active-branch~ architecture)))
                  (set-active-branch~ architecture branch)
                  (prog1
                      (proc)
                    (set-active-branch~ architecture old))))))
           
           (get
            (lambda (component property (branch: branch #t))
              (in-branch branch
                         (lambda ()
                           (read-property component property)))))
           
           (set
            (lambda (component property value (branch: branch #t))
              (set-property~ designer component property value branch: branch)))
           
           (rem
            (lambda (component property default-value (branch: branch #t))
              (remove-property~ designer component property default-value branch: branch)))
           
           (val
            (lambda (component property value (branch: branch #t))
              (when (/= (get component property branch: branch) value)
                (let ((message (format "(= (get {a} '{t}{a}) {t})" (get-name~ component) property (if (eq? branch #t) "" (format " branch: {a}" (essay branch (get-name~ branch)))) value)))
                  (if (null? suite)
                      (error "Assertion {a} failed" message)
                    (signal (new Tester-Error message #t))))))))
      
      ;; A branch when considered in relation to the active branch can be of three kind:
      ;; 1- The active branch itself
      ;; 2- A installed parent branch
      ;; 3- A dormant branch
      
      ;; Branch -> {}
      
      (set-active-branch~ architecture {})
      
      ;; set in the active branch
      (set T1 'description "A")
      (val T1 'description "A")
      
      ;; set in a dormant branch
      (set T1 'description "W" branch: W)
      (val T1 'description "A")
      (val T1 'description "W" branch: W)
      
      ;; remove in the active branch
      (rem T2 'description {})
      (val T2 'description {})
      
      ;; remove in the active branch
      (set T2 'description "A")
      (rem T2 'description {})
      (val T2 'description {})
      
      ;; remove in a dormant branch
      (set T2 'description "W" branch: W)
      (val T2 'description "W" branch: W)
      (rem T2 'description {} branch: W)
      (val T2 'description {} branch: W)
      
      ;; Branch -> X
      
      (set-active-branch~ architecture X)
      
      ;; set in a parent branch who owns the property
      (set T1 'description "2" branch: {})
      (val T1 'description "2" branch: X)
      
      ;; set in the active branch
      (set T1 'description "X")
      (val T1 'description "X" branch: X)
      
      ;; set in a parent branch who doesn't own the property
      (set T1 'description "3" branch: {})
      (val T1 'description "X" branch: X)
      
      ;; remove in a parent branch
      (set T2 'description "2" branch: {})
      (val T2 'description "2" branch: {})
      (rem T2 'description {} branch: {})
      (val T2 'description {} branch: {})
      
      ;; Branch -> Y
      
      (set-active-branch~ architecture Y)
      
      ;; Branch -> Z
      
      (set-active-branch~ architecture Z)
      
      ;; set in a parent branch
      (set T3 'no 7 branch: Y)
      (val T3 'no 2 branch: X)
      
      ;; Branch -> W
      
      (set-active-branch~ architecture W)))
  
  
  ;;;
  ;;;; Path
  ;;;
  
  
  (method (test-path)
    )))
)