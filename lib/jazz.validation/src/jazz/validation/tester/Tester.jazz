;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Testing
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2012
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.validation.tester.Tester jazz


(import (jazz.library)
        (jazz.snapshot)
        (jazz.debuggee))


(class Tester extends Component
  
  
  (property manager initialize #f accessors generate)
  (property suite   initialize #f accessors generate)
  (property title   initialize "" accessors generate)
  
  
  ;;;
  ;;;; Test
  ;;;
  
  
  (define *section*
    (make-parameter #f))

  
  (method public virtual (test)
    )
  
  
  (method protected (invoke section proc)
    (parameterize ((*section* section))
      (proc)))
  
  
  (method (validation-failed-with-snapshot exception (message #f))
    (let ((file (get-file~ (get-log~ manager))))
      (let ((directory (and file (get-directory~ file))))
        (let ((snapshot (and directory (snapshot-process exception: exception directory: directory))))
          (validation-failed (format "{?{a} : ~}{a}" message (if (is? exception Exception)
                                                                 (get-message~ exception)
                                                               (display-exception exception)))
                             class: (serialize-class Exception-Log-Node)
                             properties: (list 'snapshot (and snapshot (get-name~ snapshot))))))))
  
  
  (method (validate-failed message location)
    (log-failure~ manager suite title (*section*) message #f location #f))
  
  
  (method (validation-failed message (class: class #f) (location: location #f) (properties: properties #f))
    (log-failure~ manager suite title (*section*) message class location properties))))
