;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Jazz Validation Suite
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.validation.validate.Validation-Suite jazz


(import (jazz.validation))


(class Validation-Suite extends Object
  
  
  (slot feedback)
  (slot feedback-port)
  (slot failures)
  
  
  (method override (initialize (feedback: feedback #f) (feedback-port: feedback-port #f))
    (nextmethod)
    (set! feedback~self (or feedback default-feedback))
    (set! feedback-port~self (or feedback-port :terminal)))
  
  
  (method (default-feedback format-string . rest)
    (apply format feedback-port format-string rest)
    (format feedback-port "{%}"))
  
  
  (method public (validate (test: test #t) (report-success?: report-success? #t) (report-results?: report-results? #t))
    (define (validate-suite)
      (set! failures (new List-Factory))
      (for-each invoke-tester (if (pair? test) test (list test))))
    
    (define (invoke-tester class)
      (let ((tester (new class suite: self)))
        (feedback "Testing {a}..." (category-name (class-of tester)))
        (test~ tester)))
    
    (define (report-results (report-success?: report-success? #t))
      (let ((failed (get-output~ failures)))
        (if (null? failed)
            (when report-success?
              (format feedback-port "Test suite completed successfully.{%}"))
          (format feedback-port "The following assertions failed:{%}{%}")
          (for-each (lambda (failure)
                      (let ((tester (get-tester~ failure))
                            (section (get-section~ failure))
                            (message (get-message~ failure)))
                        (format feedback-port "{a}{a} : {a}{%}" tester (if section (format ".{a}" section) "") message)))
                    failed))))
    
    (validate-suite)
    (when report-results?
      (report-results report-success?: report-success?)))
  
  
  (method public (assertion-failed tester section message)
    (put~ failures (new Validation-Failure tester: tester section: section message: message)))
  
  
  (method public (collect-failures)
    (get-output~ failures))))
