;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Drawable Figures
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;    Assem Hakmeh
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.view.Drawing jazz


(import (jazz.figure)
        (jazz.geometry)
        (jazz.graphic)
        (jazz.ui)
        (jazz.view)
        (jazz.window))


(class Drawing extends Figure
  
  
  ;;;
  ;;;; Player
  ;;;
  
  
  (method public virtual (get-player self)
    (and parent (get-player parent)))
  
  
  (method public virtual (set-player self plr)
    (for-each (lambda (child)
                (when (is? child Drawing)
                  (set-player child plr)))
              children))

  
  ;;;
  ;;;; Lie
  ;;;
  
  
  (method public (get-lie self) <Point>
    (view->device self {Point 0 0}))
  
  
  (method public (set-lie self lie <Point>) <void>
    (set-position self (nu+ (device->view self lie) position)))

  
  ;;;
  ;;;; Root
  ;;;
  
  
  (method public virtual (get-root self) <View+>
    (let ((player (get-player self)))
      (and player
           (get-root player))))
  
  
  (method public (get-rootmost self) <View>
    (define (rootmost view)
      (let ((parent (get-parent view)))
        (if (not parent)
            view
          (rootmost parent))))
    
    (or (get-root self) (rootmost self)))

  
  ;;;
  ;;;; Coordinates
  ;;;


  (method public (acquire self origin <Drawing> shape)
    (define (common-ancestor l1 l2)
      (let (iter (ancestor #f) (s1 l1) (s2 l2))
        (if (and (not-null? s1) (not-null? s2) (eq? (car s1) (car s2)))
            (iter (car s1) (cdr s1) (cdr s2))
          ancestor)))
    
    (if (eq? origin self)
        shape
      (let ((root (get-rootmost self))
            (origin-root (get-rootmost origin)))
        (if (eq? root origin-root)
            (let ((surface (transformation-surface self))
                  (ancestor (common-ancestor (get-ancestry self) (get-ancestry origin))))
              (let ((device-shape (with-view-transformation origin surface ancestor
                                    (lambda ()
                                      (logical->device surface shape)))))
                (with-view-transformation self surface ancestor
                  (lambda ()
                    (device->logical surface device-shape)))))
          (let ((player (get-player self))
                (origin-player (get-player origin)))
            ;; quick hack to test root
            (let ((root (get-root self)))
              (if (and player origin-player root)
                  (acquire self root (acquire player origin-player (acquire (get-root origin) origin shape)))
                ;; quick hack that needs to be fixed for some regressions like mouse-move or mouse-up
                ;; that can occur when they get called playerless because their window was closed for
                ;; example when double-clicking a found binding in the View Shortcut Bindings tree
                shape
                @quick-hack
                (error "Unable to acquire {s}" shape))))))))
  
  
  (method public (view->device self shape)
    (with-transformation-surface self
      (lambda (surface)
        (logical->device surface shape))))
  
  
  (method public (device->view self shape)
    (with-transformation-surface self
      (lambda (surface)
        (device->logical surface shape))))

  
  ;;;
  ;;;; Size
  ;;;


  (method override (get-size self)
    size)
  

  (method override (set-size self sz <Dimension>)
    (when (/= sz size)
      (set! size sz)
      (invalidate-layout self)
      (when (get-finished? self)
        (call-layout self))))
  
  
  (method public virtual (set-size-noevent self sz <Dimension>)
    (set! size sz))
  

  (method public (get-width self) <fx>
    (get-width size))
  
  
  (method public (set-width self width <fx>) <void>
    (set-size self (new Dimension width (get-height self))))


  (method public (get-height self) <fx>
    (get-height size))
  
  
  (method public (set-height self height <fx>)
    (set-size self (new Dimension (get-width self) height)))
  
  
  (method public (set-height-noevent self height <fx>)
    (set-size-noevent self (new Dimension (get-width self) height)))
  
  
  (method public (get-left self) <fx>
    (get-h position))
  
  
  (method public (get-top self) <fx>
    (get-v position))
  
  
  (method public (get-right self) <fx>
    (+ (get-h position) (get-width size)))
  
  
  (method public (get-bottom self) <fx>
    (+ (get-v position) (get-height size)))

  
  (method public (get-bounds self) <Rect>
    (size-rect (get-size self)))
  
  
  (method public (get-rect self) <Rect>
    (position/size->rect (get-position self) (get-size self)))
  
  
  (method public (set-rect self rect <Rect>) <void>
    (set-position self (rect-position rect))
    (set-size self (rect-size rect)))
  
  
  (method public (grow-rect self dh dv dwidth dheight)
    (let ((pos (+ (get-position self) (new Point dh dv)))
          (size (+ (get-size self) (new Dimension dwidth dheight))))
      (set-size self size)
      (set-position self pos)))
  
  
  ;;;
  ;;;; Transformation
  ;;;
  

  (method public virtual (get-transformation self)
    #f)

  
  ;;;
  ;;;; Visibility
  ;;;
  
  
  (method public (view-visible? self)
    (let ((player (get-player self)))
      (and player
           (get-visible? self)
           (if parent
               (view-visible? parent)
             (eq? self (get-root player))))))

  
  ;;;
  ;;;; Opaqueness
  ;;;

  
  (method public virtual (get-opaque? self)
    #t)

  
  ;;;
  ;;;; Transparency
  ;;;

  
  (method public virtual (get-transparent? self)
    #f)
  
  
  ;;;
  ;;;; Layout
  ;;;
  
  
  (method protected (invalidate-layout self)
    (set-layout-valid? self #f))
  
  
  (method protected (call-layout self)
    (unless (or (get-layout-valid? self) (and (inhibit-layouts?) (not (get-visible? self))))
      (layout self)
      (set-layout-valid? self #t)))
  
  
  (method public (layout-drawing self)
    ;; No need to layout if the drawing is not initialized, because
    ;; conclude will call layout once the initialization process is done.
    (when (get-finished? self)
      (invalidate-layout self)
      (call-layout self)))
  
  
  (method public virtual (layout self)
    )
  
  
  (method public virtual (adjust? self)
    #f)
  
  
  (method public virtual (adjust-fit self)
    )
  
  
  (method public virtual (adjust self)
    )

  
  ;;;
  ;;;; Iterate
  ;;;
  
  
  (method public (for-each-view self proc <procedure> (include-invisibles?: include-invisibles? #f))
    (loop (for child in children)
          (when (and (is? child View)
                     (or include-invisibles? (get-visible? child)))
            (proc child))))
  
  
  (method public (for-each-view-reversed self proc <procedure> (include-invisibles?: include-invisibles? #f))
    (for-each-reversed (lambda (child)
                         (when (and (is? child View)
                                    (or include-invisibles? (get-visible? child)))
                           (proc child)))
                       children))
  
  
  ;;;
  ;;;; Hierarchy
  ;;;
  
  
  (definition *transformation-surface*
    #f)
  
  
  (method (transformation-surface self)
    (unless *transformation-surface*
      (set! *transformation-surface* (new Memory-Surface #f {Dimension 4096 4096} retina?: #t)))
    *transformation-surface*
    @doesnt-work-as-is
    (get-offscreen (get-root) #f))
  
  
  (method public (with-transformation-surface self proc)
    (let ((surface (transformation-surface self)))
      (with-view-transformation self surface (get-rootmost self)
        (lambda ()
          (proc surface)))))
  
  
  (method public (with-clipped-transformation-surface self proc)
    (let ((surface (transformation-surface self)))
      (with-clipping-view-transformation self surface (get-rootmost self)
        (lambda ()
          (proc surface)))))
  
  
  (method public (with-pristine-clipped-surface self proc)
    (let ((surface (transformation-surface self)))
      (with-pristine-clipping-transformation surface
        (lambda ()
          (proc surface)))))
  
  
  (method public (find-drawing self pos <Point> (ignore: ignore #f))
    (with-pristine-clipped-surface self
      (lambda (surface)
        (find-in-drawing self surface pos ignore))))
  
  
  (method public (find-in-drawing self surface <Surface> device-pos <Point> ignore)
    (and (or (not ignore) (not (memq? self ignore)))
         (with-self-transformation self surface
           (lambda ()
             (let ((pos (device->logical surface device-pos)))
               (and (in-drawing? self pos size)
                    (or (find-subdrawing self surface device-pos pos ignore)
                        (and (not (get-transparent? self))
                             self))))))))
  
  
  (method protected virtual (find-subdrawing self surface <Surface> device-pos <Point> pos <Point> ignore)
    (continuation-capture
      (lambda (return)
        (for-each-view-reversed self
          (lambda (view <View>)
            (let ((found (find-in-drawing view surface device-pos ignore)))
              (when found
                (continuation-return return found)))))
        #f)))
  
  
  (method protected virtual (in-drawing? self pos <Point> size <Dimension>)
    (in-size? pos size))


  ;;;
  ;;;; Invalidation
  ;;;
  
  
  (method public (invalidate-drawing self)
    (let ((rect (get-rect self)))
      (invalidate-rect parent rect)))

  
  ;;;
  ;;;; Drawing
  ;;;


  (method public (paint-root self surface <Surface> update-region <Region>) <void>
    (let ((handle (get-handle (get-player self))))
      (with ((dirty-region (copy-region update-region)))
        @buggy
        (combine-and! dirty-region (get-offscreen-invalid-region handle))
        (bind (view draw-self? . nodes) (painting-tree self surface dirty-region)
          (paint self surface draw-self? nodes '())
          (validate-offscreen-region handle dirty-region)))))
  
  
  (method public (paint-drawing self surface <Surface> context <list>) <void>
    (with ((region (new Region rect: (logical->device surface (get-clipper surface)))))
      (bind (view draw-self? . nodes) (painting-tree self surface region)
        (paint self surface draw-self? nodes context))))
  
  
  (method public (render-drawing self surface <Surface> context <list>) <void>
    (with ((region (new Region rect: (logical->device surface (get-clipper surface)))))
      (bind (view draw-self? . nodes) (painting-tree self surface region)
        (render self surface draw-self? nodes context))))
  
  
  (method public (painting-tree self surface region <Region>)
    (define (region-tree surface view region)
      (let ((nodes '()))
        (with ((update (copy-region region)))
          (with ((coverage (if (get-opaque? view) (new Region rect: (logical->device surface (get-bounds view))) (new Region))))
            (for-each-view-reversed view
              (lambda (child)
                (with-self-transformation child surface
                  (lambda ()
                    (with ((child-region (new Region rect: (logical->device surface (get-bounds child)))))
                      (with ((intersection (region-intersection update child-region)))
                        (when (not (empty? intersection))
                          (receive (child-coverage node) (region-tree surface child intersection)
                            (set! nodes (cons node nodes))
                            (combine-diff! update child-coverage)
                            (combine-or! coverage child-coverage)
                            (close child-coverage)))))))))
            (values (region-intersection region coverage) (cons view (cons (not (empty? update)) nodes)))))))
  
    (define (full-tree view)
      (let ((nodes '()))
        (for-each-view-reversed view
          (lambda (child)
            (set! nodes (cons (full-tree child) nodes))))
        (cons view (cons #t nodes))))
    
    (define (toplevel-tree surface view clip-rect)
      (let ((nodes '()))
        (for-each-view-reversed view
          (lambda (child)
            (with-self-transformation child surface
              (lambda ()
                (let ((child-rect (logical->device surface (get-bounds child))))
                  (when (rect-intersect? clip-rect child-rect)
                    (set! nodes (cons (full-tree child) nodes))))))))
        (cons view (cons #t nodes))))
    
    (case (or (painting-tree-algorithm surface) 'region)
      ((region)
       (receive (coverage node) (region-tree surface self region)
         (close coverage)
         node))
      ((toplevel)
       (toplevel-tree surface self (get-box region)))
      ((full)
       (full-tree self))))

  
  (method public (paint self surface <Surface> draw-self? <bool> nodes <list> context <list>) <void>
    (if (or (not (get-offscreen? self))
            (inhibit-offscreen?))
        (paint-content self surface draw-self? nodes context)
      (let ((offscreen (get-offscreen self surface)))
        (set-clipper offscreen (get-clipper surface))
        (clear offscreen)
        (paint-content self offscreen draw-self? nodes context)
        (blit-surface surface offscreen))))
  
  
  (method public (paint-content self surface <Surface> draw-self? <bool> nodes <list> context <list>) <void>
    (with-clipping-self-transformation self surface
      (lambda ()
        (render self surface draw-self? nodes context))))

  
  (method public virtual (render self surface <Surface> draw-self? <bool> nodes <list> context <list>) <void>
    (when draw-self?
      (if (debug-paint?)
          (when (is? self View)
            (fill-rect surface (get-bounds self) (cycle-debug-color!)))
        (draw-background self surface context))
      (draw-content self surface context))
    (draw-children self surface nodes context))

  
  (method public virtual (draw-background self surface <Surface> context) <void>
    )
  
  
  (method public virtual (draw-content self surface <Surface> context <list>) <void>
    (draw self surface context))
    
  
  (method public virtual (draw self surface <Surface> context <list>) <void>
    )

  
  (method public virtual (draw-children self surface <Surface> nodes <list> context <list>) <void>
    (for-each (lambda (node)
                (bind (drawing draw-self? . nodes) node
                  (paint drawing surface draw-self? nodes context)))
              nodes))


  ;;;
  ;;;; Offscreen
  ;;;
  
  
  (method protected virtual (get-offscreen self surface <Surface+>)
    )


  ;;;
  ;;;; Clipping
  ;;;
  
  
  (method package (with-view-transformation self surface <Surface> root <View> thunk <procedure>)
    (if (eq? self root)
        (with-pristine-transformation surface
          thunk)
      (with-view-transformation parent surface root
        (lambda ()
          (with-self-transformation self surface
            thunk)))))
  
  
  (method package (with-self-transformation self surface <Surface> thunk <procedure>)
    (with-transformation surface (get-h position) (get-v position) (get-transformation self)
      thunk))
  
  
  (method package (with-clipping-view-transformation self surface <Surface> root <View> thunk <procedure>)
    (if (eq? self root)
        (with-pristine-clipping-transformation surface
          thunk)
      (with-clipping-view-transformation parent surface root
        (lambda ()
          (with-clipping-self-transformation self surface
            thunk)))))
  
  
  (method package virtual (with-clipping-self-transformation self surface <Surface> thunk <procedure>)
    (with-clipping-transformation surface (get-h position) (get-v position) (get-width size) (get-height size) (get-transformation self)
      thunk))
  
  
  (method public (get-view-clipper self)
    (with-clipped-transformation-surface self
      (lambda (surface)
        (get-clipper surface))))
  
  
  (method public virtual (get-offscreen? self)
    #f)
  
  
  (method public virtual (set-offscreen? self flag <bool>)
    )


  ;;;
  ;;;; Layer
  ;;;
  
  
  (method public virtual (get-layer self)
    #f)
  
  
  (method public virtual (set-layer self value)
    )


  ;;;
  ;;;; Effect
  ;;;
  
  
  (method public virtual (get-effect self)
    #f)
  
  
  (method public virtual (set-effect self value)
    )))
