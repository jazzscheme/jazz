;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; View Definitions
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module jazz.view jazz


(export (jazz.view.autoload)
        (jazz.view.hubs))

(import (jazz.application)
        (jazz.component)
        (jazz.debuggee)
        (jazz.event)
        (jazz.figure)
        (jazz.graphic)
        (jazz.handler)
        (jazz.platform)
        (jazz.process)
        (jazz.snapshot)
        (jazz.text)
        (jazz.ui)
        (jazz.view.hubs)
        (jazz.window))


;;;
;;;; Focus-Event
;;;


(class Focus-Event extends Event


  (slot focus getter generate)


  (method override (initialize self kind sender modifiers focus)
    (nextmethod self kind sender modifiers)
    (set! self.focus focus))
  
  
  (method override (print self output readably)
    (print-unreadable self output
      (lambda (output)
        ))))


;;;
;;;; Keyboard-Event
;;;


(class Keyboard-Event extends Event
  
  
  ;;;
  ;;;; Access
  ;;;
  
  
  (method public (get-key self)
    (get-property self key:)))


;;;
;;;; Mouse-Event
;;;


(class Mouse-Event extends Event
  
  
  (slot count initialize #f accessors generate)
  
  
  ;;;
  ;;;; Access
  ;;;
  
  
  (method public (get-position self)
    (hook-event-access self)
    (get-property self position:))
  
  
  (method package (get-position-value self)
    (get-property self position:))
  
  
  (method public (get-h self)
    (get-h (get-position self)))
  

  (method public (get-v self)
    (get-v (get-position self))))


;;;
;;;; Selection-Event
;;;


(class Selection-Event extends Event
  
  
  (slot old           getter generate)
  (slot selection     getter generate)
  (slot origin        getter generate)
  (slot force-parent? getter generate)
  (slot force?        getter generate)
  (slot user-origin   getter generate)


  (method override (initialize self kind sender modifiers old selection (origin: origin #f) (force-parent?: force-parent? #f) (force?: force? #f) (user-origin: user-origin #f))
    (nextmethod self kind sender modifiers)
    (set! self.old old)
    (set! self.selection selection)
    (set! self.origin origin)
    (set! self.force-parent? force-parent?)
    (set! self.force? force?)
    (set! self.user-origin user-origin))


  (method override (print self output readably)
    (format output "~{{a} {s} {s} {s}{? {l}~}}"
            (category-name (class-of self))
            kind
            old
            selection
            properties)))


;;;
;;;; Selection-Handler
;;;


(class Selection-Handler extends Event-Handler
  
  
  (slot force? getter generate)
  
  
  (method override (initialize self . rest)
    (bind-keywords ((force? #t) . others) rest
      (apply nextmethod self others)
      (set! self.force? force?)))
  
  
  (method override (print self output readably)
    (format output "~{{a} {a} {a}{a}{a}}"
            (category-name (class-of self))
            (or target target-name)
            method-name
            (if force?
                ""
              (format " force?: {a}" force?))
            (if (null? properties)
                ""
              (format " {l detail: :reader}" properties)))))


;;;
;;;; Mouse
;;;


(definition package *mouse-in*          #f)
(definition package *mouse-down?*       #f)
(definition package *mouse-right-down?* #f)
(definition package *mouse-down-view*   #f)
(definition package *mouse-down-point*  #f)


;; Support for mouse down actions that have to occur at mouse up time
;; See Application.activate for an example usage
(definition delayed-mouse-action
  #f)


(definition public (get-delayed-mouse-action)
  delayed-mouse-action)

(definition public (set-delayed-mouse-action action)
  (set! delayed-mouse-action action))


(definition public (get-mouse-in)
  *mouse-in*)

(definition public (set-mouse-in view)
  (set! *mouse-in* view))

(definition public (reset-mouse-in)
  (set! *mouse-in* #f))


(definition public (get-mouse-down?)
  *mouse-down?*)

(definition public (set-mouse-down? flag)
  (set! *mouse-down?* flag))


(definition public (get-mouse-right-down?)
  *mouse-right-down?*)

(definition public (set-mouse-right-down? flag)
  (set! *mouse-right-down?* flag))


(definition public (get-mouse-down-view)
  *mouse-down-view*)

(definition public (set-mouse-down-view view)
  (set! *mouse-down-view* view))


(definition public (get-mouse-down-point)
  *mouse-down-point*)

(definition public (set-mouse-down-point point)
  (set! *mouse-down-point* point))


(definition public (active-mouse-view)
  (or Captured-View (get-mouse-in)))


;; This covers the special case where a mouse-down event triggers
;; a modal dialog. In this case, Windows will not generate the
;; mouse-up event, hence this bizarre code...
(definition public (toplevel-deactivate)
  (set-mouse-down? #f)
  (set-mouse-down-view #f)
  (set-mouse-down-point #f))


;;;
;;;; Cursor
;;;


(definition public (with-cursor cursor proc (duration: duration #f))
  (unwind-protect
      (begin
        (set-cursor cursor)
        (when duration
          (sleep duration))
        (proc))
    (update-cursor)))


(definition public (update-cursor)
  (when (and (get-mouse-in) (in-player? (get-mouse-in)) (get-cursor-visible? (get-player (get-mouse-in))))
    (let ((event (make-event Mouse-Event :mouse-move #f position: (mouse-position (get-mouse-in)))))
      (call-cursor-update (get-mouse-in) event))))


;;;
;;;; Dnd
;;;


(definition Current-Drag-Drop
  #f)


(definition public (current-drag-drop)
  Current-Drag-Drop)

(definition public (set-current-drag-drop drag-drop)
  (set! Current-Drag-Drop drag-drop))


;;;
;;;; Capture
;;;


(definition Captured-View
  #f)


(definition public (get-captured-view)
  Captured-View)

(definition public (set-captured-view view)
  (set! Captured-View view))


(definition package (release-captured-view)
  (when Captured-View
    (set! Captured-View #f)
    (unset-capture)))


;;;
;;;; Host
;;;


(definition public (get-focused-host)
  (let ((focus (active-focus)))
    (and focus
         (get-host focus))))


(definition public (focused-host? host)
  (eq? host (get-focused-host)))


;;;
;;;; Guest
;;;


(definition protected (new-guest guest-class rest)
  (apply new guest-class rest))


;;;
;;;; Dialog
;;;


(definition public (get-modal guest-class . rest)
  (receive (process? dialog/result) (apply new-dialog guest-class host-visible?: #f rest)
    (if (not process?)
        dialog/result
      (process-modal dialog/result))))


(definition public (new-dialog guest-class . rest)
  (bind-keywords ((host-title (host-title guest-class)) (host-miniaturizable? #f) (host-sizable? #f) (host-closable? #t) (host-visible? #t) (guest #f) (initialize #f) . others) rest
    (let ((guest (or guest (new-guest guest-class others))))
      (when initialize
        (initialize guest))
      (let* ((player (new (dialog-class guest-class) miniaturizable?: host-miniaturizable? sizable?: host-sizable? closable?: host-closable? visible?: #f))
             (host (get-root player))
             (size (or (host-size guest-class) (get-size guest)))
             (pos (or (host-position guest-class) (position-dialog size))))
        (set-title player (or host-title "Dialog"))
        (set-size player size)
        (set-position player pos)
        (set-guest host guest)
        (if (has-dialog-result? guest)
            (values #f (get-modal-result player))
          (when host-visible?
            (set-visible? player #t))
          @is-this-really-necessary?
          (select-foreground player)
          (focus-host host)
          (values #t host))))))


(definition public (position-dialog size)
  (monitor-center (current-monitor) size))


;;;
;;;; Palette
;;;


(definition package Palettes
  (make-table test: eq?))


(definition public (find-singleton-palette name)
  (table-ref Palettes name #f))


(definition public (singleton-palette guest-class name . rest)
  (let ((ref (or name (category-identifier guest-class))))
    (or (table-ref Palettes ref #f)
        (let ((palette
                ;; quick solution until we decide on the right approach
                (if (procedure? guest-class)
                    (guest-class)
                  (apply new-palette guest-class host-visible?: #f rest))))
          (table-set! Palettes ref palette)
          palette))))


(definition public (new-palette guest-class . rest)
  (bind-keywords ((host-title (host-title guest-class)) (host-position (host-position guest-class)) (host-size (host-size guest-class)) (host-visible? #t) (guest #f) (initialize #f) . others) rest
    (let ((guest (or guest (new-guest guest-class others))))
      (when initialize
        (initialize guest))
      (let* ((player (new (palette-class guest-class) visible?: #f))
             (host (get-root player))
             (size (or host-size (get-size host)))
             (pos (or host-position (position-palette size))))
        (set-title player (or host-title "Palette"))
        (set-position player pos)
        (when host-size
          (set-size player host-size))
        ;; It is important to set the palette's size before installing the guest
        ;; in order to minimize layouting by having the size right the first time!
        (set-guest host guest)
        (layout-view host)
        (when host-visible?
          (fade-in player)
          (focus-host host))
        host))))


(definition public (show-palette guest-class . rest)
  (let* ((host (apply singleton-palette guest-class (external-name guest-class) rest))
         (guest (get-guest host))
         (palette (get-player host))
         (initialize (getf rest initialize:)))
    (when initialize
      (initialize guest))
    (client-activate guest)
    (let ((visible? (get-visible? palette)))
      (bring-to-front palette)
      (unless visible?
        (fade-in palette))
      (focus-host host))
    palette))


(definition package (singleton-palette-name target)
  (table-search (lambda (name host)
                  (and (eq? host target)
                       name))
                Palettes))

(definition package (singleton-palette-named name)
  (find-singleton-palette name))


(definition public (position-palette size)
  (nu- (monitor-center (current-monitor) size)
       {Dimension 0 100}))


(definition public (collect-palettes)
  (collect-if (lambda (window)
                (is? window Palette))
              (get-windows (palette-parent))))


(definition package (reset-palettes)
  (set! Palettes (make-table test: eq?)))


;;;
;;;; Docked
;;;


(definition package Dockeds
  (make-table test: eq?))


(definition public (find-singleton-docked name)
  (table-ref Dockeds name #f))


(definition public (singleton-docked guest-class . rest)
  (let ((name (external-name guest-class)))
    (or (find-singleton-docked name)
        (let ((palette (apply new-docked guest-class name: name rest)))
          (table-set! Dockeds name palette)
          palette))))


(definition public (named-singleton-docked guest-class name . rest)
  (let ((name (or name (external-name guest-class))))
    (or (find-singleton-docked name)
        (let ((palette (apply new-docked guest-class name: name rest)))
          (table-set! Dockeds name palette)
          palette))))


(definition public (new-docked guest-class . rest)
  (bind-keywords ((host-title (host-title guest-class)) (host-location #f) . others) rest
    (let ((host (new Docked-Host visible?: #f)))
      (set-title host (or host-title "Docked"))
      (when host-location
        (set-location host host-location))
      (set-guest host (new-guest guest-class others))
      host)))


(definition package (singleton-docked-name target)
  (table-search (lambda (name host)
                  (and (eq? host target)
                       name))
                Dockeds))

(definition package (singleton-docked-named name)
  (find-singleton-docked name))


(definition package (reset-dockeds)
  (set! Dockeds (make-table test: eq?)))


;;;
;;;; Popup
;;;


(definition package locked-popup
  #f)

(definition package (get-locked-popup)
  locked-popup)

(definition package (set-locked-popup popup)
  (set! locked-popup popup))


(definition public (close-all-popups)
  (for-each close-popup (get-popups)))


;;;
;;;; Tooltip
;;;


(definition package *current-tooltip-context*
  #f)


(definition public (current-tooltip-context)
  *current-tooltip-context*)

(definition package (set-current-tooltip-context context)
  (set! *current-tooltip-context* context))


(definition package locked-tooltip
  #f)

(definition package (get-locked-tooltip)
  locked-tooltip)

(definition package (set-locked-tooltip tooltip)
  (set! locked-tooltip tooltip))


;;;
;;;; Frame Region
;;;


(definition public (frame-region frame <Rect> (insets: insets (new Rect 1 1 1 1)))
  (let ((left   (get-left frame))
        (top    (get-top frame))
        (right  (get-right frame))
        (bottom (get-bottom frame))
        (region (new Region)))
    (with ((l (new Region rect: (new Rect left                          top                             (+ left (get-left insets)) bottom)))
           (t (new Region rect: (new Rect left                          top                             right                       (+ top (get-top insets)))))
           (r (new Region rect: (new Rect (- right (get-right insets)) top                             right                       bottom)))
           (b (new Region rect: (new Rect left                          (- bottom (get-bottom insets)) right                       bottom))))
      (combine-or! region l)
      (combine-or! region t)
      (combine-or! region r)
      (combine-or! region b)
      region)))


;;;
;;;; Cascade
;;;


(definition public (cascade-position position step positions)
  (let (iterate (pos position))
    (if (member? pos positions test: nu=?)
        (iterate (nu+ pos step))
      pos)))


;;;
;;;; External Frame
;;;


(definition public (new-external-frame guest/class . rest)
  (let ((guest-class (if (class? guest/class) guest/class (class-of guest/class)))
        (guest (if (class? guest/class) #f guest/class)))
    (bind-keywords ((host-title (host-title guest-class)) (host-position (host-position guest-class)) (host-size (host-size guest-class)) (host-workspace #f) (host-visible? #t) (host-focus? #t) (initialize #f) . others) rest
      (let ((guest (or guest (new-guest guest-class others))))
        (when initialize
          (initialize guest))
        (let* ((player (new External-Frame visible?: #f))
               (host (get-root player)))
          (set-title host (or host-title "Frame"))
          (when host-position
            (set-position player host-position))
          (when host-size
            (set-size player host-size))
          ;; It is important to set the frame's size before installing the guest
          ;; in order to minimize layouting by having the size right the first time!
          (set-guest host guest)
          (layout-view host)
          (when host-visible?
            (fade-in player)
            (when host-focus?
              (focus-host host))
            (activate-frame host))
          host)))))


;;;
;;;; Toolbar
;;;


(definition package Toolbars
  (make-table test: eq?))


(definition public (get-toolbar name)
  (table-ref Toolbars name #f))


(definition public (singleton-toolbar guest-class name . rest)
  (let ((ref (or name (category-identifier guest-class))))
    (or (table-ref Toolbars ref #f)
        (let ((palette (new-toolbar guest-class name: name)))
          (table-set! Toolbars ref palette)
          palette))))


(definition public (new-toolbar guest-class . rest)
  (bind-keywords ((host-title (host-title guest-class)) (host-location #f) . others) rest
    (let ((host (new Toolbar-Host visible?: #f)))
      (set-title host host-title)
      (when host-location
        (set-location host host-location))
      (set-guest host (new-guest guest-class others))
      host)))


(definition package (reset-toolbars)
  (set! Toolbars (make-table test: eq?)))


;;;
;;;; Scrollbar
;;;


(definition public scrollbar-size
  13)


;;;
;;;; Progress
;;;


(definition public (with-progress proc (threaded?: threaded? #t) (name: name #f) (progress-reporter: progress-reporter Progress-Reporter) (cancelable?: cancelable? #t) (abnormal-cleanup: abnormal-cleanup #f))
  (if (not threaded?)
      (proc (new User-Reporter))
    (receive (process? dialog) (new-dialog progress-reporter host-closable?: cancelable?)
      (let ((reporter (get-guest dialog)))
        (when (not cancelable?)
          (jazz.reporter:disable-cancel reporter))
        (thread-start!
          (new-thread
            (lambda ()
              (let ((result (proc reporter)))
                (post-event
                  (lambda ()
                    (end-modal dialog result)))))
            'progress))
        (process-modal dialog)))))


;;;
;;;; Message
;;;


;; Type
;; - message
;; - question
;; - confirmation
;; - problem
;; - error
;; - custom


(definition public (message-box text
                                (class: class #f)
                                (type: type 'message)
                                (title: title #f)
                                (size: size #f)
                                (icon: icon #f)
                                (content: content #f)
                                (content-spacing: content-spacing #f)
                                (sound: sound 'default)
                                (selection: selection #f)
                                (yes: yes #f)
                                (no: no #f)
                                (cancel: cancel #f)
                                (actions: actions '())
                                (default-button: default-button #f)
                                (process-keys?: process-keys? #t)
                                (miniaturizable?: miniaturizable? #f)
                                (sizable?: sizable? #f))
  (receive (process? dialog) (new-dialog (or class Message-Box) host-visible?: #f host-miniaturizable?: miniaturizable? host-sizable?: sizable?)
    (let ((guest (get-guest dialog)))
      (process-box guest text
        type: type
        title: title
        size: size
        icon: icon
        content: content
        content-spacing: content-spacing
        sound: sound
        selection: selection
        yes: yes
        no: no
        cancel: cancel
        actions: actions
        default-button: default-button
        process-keys?: process-keys?))))


(definition public (warn-cancel . rest)
  (message-box (apply format rest))
  (signal-cancel))


;;;
;;;; Safety
;;;


(definition public (with-safe-execution context thunk (continue-text: continue-text #f) (continue-handler: continue-handler #f))
  (define (ask-continue err)
    (let ((text (format "The following error occurred while {a}:{%}{%}{a}{%}{%}Press Continue {a}, Quit to quit immediately"
                        context
                        (exception-reason err)
                        (or continue-text "to bypass this problem"))))
      (let ((result (message-box text type: 'confirmation yes: "Continue" no: "Debug Now" cancel: "Quit")))
        (case result
          ((yes)
           (post-stop err)
           #t)
          ((no)
           #f)
          ((cancel)
           (quit))))))
  
  (define (warn-quit err)
    (let ((text (format "The following error occurred while {a}:{%}{%}{a}"
                        context
                        (exception-reason err))))
      (message-box text yes: "Quit")
      (quit)))
  
  (if (or (get-controller-debugger) (not (safe-execution? (current-process))))
      (thunk)
    (catch-exception-filter
      (lambda (obj)
        (let ((err (wrap-exception obj)))
          (if continue-handler
              (ask-continue err)
            (warn-quit err))))
      (lambda (err)
        (continue-handler err))
      thunk)))


(definition public (with-catched-exception filter thunk)
  (define (ask err)
    (let ((text (exception-reason err)))
      (let ((result (message-box text type: 'question yes: "OK" no: "Debug")))
        (case result
          ((yes)
           #t)
          ((no)
           #f)))))
  
  (catch-exception-filter
    (lambda (obj)
      (if (filter obj)
          (let ((err (wrap-exception obj)))
            (ask err))
        #f))
    (lambda (err)
      (signal-cancel))
    thunk))


(definition protected safe-explore-action
  'ask)

(definition protected (set-safe-explore-action action)
  (set! safe-explore-action action))


(definition public (with-safe-explore thunk (action: action safe-explore-action))
  (catch Cancel-Signal
    (catch-exception-filter
      (lambda (obj)
        (let ((exc (and (object? obj) (is? obj Explore-Error) obj)))
          (when exc
            (let ((result (case action
                            ((ask)
                             (message-box (exception-reason exc) type: 'confirmation yes: "Show Me" no: "Debug" cancel: "Ignore"))
                            ((ignore)
                             'cancel))))
              (when (eq? result 'yes)
                (let ((source (get-source exc))
                      (range (get-range exc)))
                  (edit-document (current-application) source selection: range)))
              (neq? result 'no)))))
      (lambda (exc)
        #; ;; many exceptions are being shadowed but it is still
           ;; necessary as some cases are still throwing errors. uncomment
           ;; the raise to debug those shadowed exceptions
        (raise exc)
        (signal-cancel))
      thunk)))


;;;
;;;; Request
;;;


;; These should really be hooks to modify the dialog at creation time...


(definition public (choose-color . rest)
  (apply get-modal Color-Request rest))


(definition public (request-string (class: class String-Request) (title: title #f) (prefix: prefix #f) (initial-value: initial-value #f) (accepts-empty?: accepts-empty? #t) (unicity-domain: unicity-domain #f) (validator: validator #f))
  (receive (process? host) (new-dialog class host-visible?: #f)
    (let* ((view (get-guest host))
           (text (locate view 'text)))
      (set-title (get-player host) (or title "Enter String"))
      (set-accepts-empty? view accepts-empty?)
      (set-unicity-domain view unicity-domain)
      (set-validator view validator)
      (set-prefix view (or prefix "String:"))
      (set-string-content text (if initial-value (->string initial-value) ""))
      (select-all text)
      (acquire-focus text)
      (let ((string (process-modal host)))
        (if (empty-string? string)
            #f
          string)))))


(definition public (request-name . rest)
  (bind-keywords ((title #f) (prefix #f) . others) rest
    (let* ((title (or title "Enter Name"))
           (prefix (or prefix "Name:"))
           (string (apply request-string title: title prefix: prefix others)))
      (if (not string)
          #f
        (string->symbol string)))))


(definition public (request-text (class: class Text-Request) (title: title #f) (initial-text: initial-text #f))
  (unimplemented 'request-text)
  @Text-Request
  (receive (process? dialog) (new-dialog class host-visible?: #f)
    (let* ((view (get-guest dialog))
           (text (locate view 'text)))
      (set-title dialog (or title "Enter Text"))
      (set-string-content text (or initial-text ""))
      (select-all text)
      (acquire-focus text)
      (let ((string (process-modal dialog)))
        (if (empty-string? string)
            #f
          string)))))


(definition public (request-date (class: class Date-Request) (title: title #f) (prefix: prefix #f) (initial-date: initial-date #f))
  (unimplemented 'request-date)
  @Date-Request
  (receive (process? dialog) (new-dialog class host-visible?: #f)
    (let* ((view (get-guest dialog))
           (text (locate view 'text)))
      (set-title dialog (or title "Enter Date"))
      (set-prefix view (or prefix "Date:"))
      (set-string-content text (if initial-date (present initial-date) ""))
      (select-all text)
      (acquire-focus text)
      (let ((string (process-modal dialog)))
        (if (empty-string? string)
            #f
          (parse-string Date string))))))


(definition public (request-list content (class: class List-Request) (title: title #f) (invite: invite #f) (present: present #f) (selected: selected #f) (multiple-selection?: multiple-selection? #f))
  (receive (process? host) (new-dialog class host-visible?: #f)
    (let ((view (get-guest host))
          (player (get-player host)))
      (when title
        (set-title player title))
      (when invite
        (set-invite view invite))
      (when present
        (set-present view present))
      (set-multiple-selection? view multiple-selection?)
      (set-content view content)
      (when selected
        (set-selected view selected))
      (process-modal host))))


;;;
;;;; Various
;;;


(definition public (all-windows)
  (let ((toplevel (current-toplevel)))
    (if toplevel
        (cons toplevel (get-windows toplevel))
      '())))


(definition public (current-guest)
  (let ((host (get-focused-host)))
    (and host
         (get-guest host))))


(definition public (focused-host)
  (let ((focus (active-focus)))
    (and focus
         (get-host focus))))


(definition public (focused-guest)
  (let ((focus (active-focus)))
    (and focus
         (get-guest focus))))


;;;
;;;; Focus
;;;


(definition *previous-focus-continuations*
  '())


(definition *capture-previous-focus-continuations?*
  #f)


(definition public (get-previous-focus-continuations)
  *previous-focus-continuations*)


(definition public (set-capture-previous-focus-continuations state)
  (set! *previous-focus-continuations* state))


(definition public (capture-focus-continuation)
  (when (null? *previous-focus-continuations*)
    (register-snapshot-callbacks get-previous-focus-continuations))
  (when (> (length *previous-focus-continuations*) 2)
    (set! *previous-focus-continuations* (butlast *previous-focus-continuations*)))
  (continuation-capture
    (lambda (cont)
      (set! *previous-focus-continuations* (cons cont *previous-focus-continuations*)))))


(definition public (active-focus)
  (let ((player (get-focused-window)))
    (and (is? player Playable)
         (get-view-focus player))))


(definition public (change-active-focus new-focus)
  (let ((old-focus (active-focus)))
    (when (neq? new-focus old-focus)
      (when *capture-previous-focus-continuations?*
        (capture-focus-continuation))
      (ensure-focusable new-focus)
      (let ((old-player (get-focused-window))
            (new-player (get-player new-focus)))
        (assert new-player)
        ;; owner-window is for virtual players
        (if (eq? (and old-player (owner-window old-player)) (owner-window new-player))
            (begin
              (unfocus-view old-player)
              (focus-view new-player new-focus)
              ;; not redundant if virtual players
              (set-window-focus new-player))
          (set-view-focus new-player new-focus)
          (when (get-visible? new-player)
            (bring-to-front new-player)
            (set-window-focus new-player)))
        (clear-pushed-focuses new-player)))))


(definition public (push-focus new-focus)
  (let ((old-focus (active-focus)))
    (when (neq? new-focus old-focus)
      (ensure-focusable new-focus)
      (let ((player (get-focused-window)))
        (when (is? player Playable)
          (push-view-focus player new-focus))))))


(definition public (pop-focus)
  (let ((player (get-focused-window)))
    (when (is? player Playable)
      (pop-view-focus player))))


(definition package (pop-focuses popup)
  (let ((player (get-window-focus)))
    (when (is? player Playable)
      (pop-view-focuses player popup))))


(definition package (pop-all-focuses)
  (let ((player (get-window-focus)))
    (when (is? player Playable)
      (pop-all-view-focuses player))))


(definition public (set-root-focus)
  (acquire-focus (get-root (current-toplevel))))


(definition public (determine-focus-actions view)
  (let ((surrogate (get-surrogate view)))
    (if surrogate
        (focus-actions surrogate)
      (focus-actions view))))


(definition public (refresh-focus-actions view)
  (when (eq? view (active-focus))
    (set-focus-actions (current-application) (determine-focus-actions view))))


(definition protected focus-resetter
  #f)

(definition public (set-focus-resetter proc)
  (set! focus-resetter proc))


;;;
;;;; Debug
;;;


(definition *debug-colors*
  (color-cycle (hsv->color 0. 0.9 1.) 10 25))

(definition *nb-debug-colors*
  (length *debug-colors*))

(definition *current-debug-color*
  0)


(definition public (cycle-debug-color!)
  (prog1 (element *debug-colors* *current-debug-color*)
    (set! *current-debug-color* (modulo (+ *current-debug-color* 1) *nb-debug-colors*))))


;;;
;;;; Debugger
;;;


(definition package (cleanup-mouse-processing)
  (release-captured-view)
  (complete-drag-and-drop)
  (complete-drag-up #f))


(definition package (complete-drag-and-drop)
  (when Current-Drag-Drop
    (drag-end (get-view (get-source Current-Drag-Drop)))))


(definition package (complete-drag-up dragging?)
  (when (get-mouse-down?)
    (let ((pos (mouse-position (get-mouse-down-view))))
      (let ((event (new Mouse-Event :mouse-up #f NoModifiers position: pos)))
        (process-drag-up (get-mouse-down-view) event dragging?))))))
