;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; View Descriptors
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module jazz.view.descriptors jazz


(import (jazz.application)
        (jazz.designer.ui)
        (jazz.descriptor)
        (jazz.domain)
        (jazz.figure.descriptors)
        (jazz.graphic)
        (jazz.jml)
        (jazz.resource)
        (jazz.view))


;;;
;;;; View
;;;


(class View-Descriptor extends Figure-Descriptor
  
  
  (form
    (<install>                                               image: {Image-Resource "View"}
      (<properties~>
        (<Property-Descriptor> name: title
          (<Localized-Domain>  name: domain))
        (<Property-Descriptor> name: font                    standard?: #f
          (<Font-Domain>       name: domain                  nullable?: #t choices: (({Font Label} "Label") ({Font Label-Bold} "Label-Bold"))))
        (<Property-Descriptor> name: style                   standard?: #f
          (<Value-Domain>      name: domain                  nullable?: #t))
        (<Property-Descriptor> name: background
          (<Color-Domain>      name: domain                  nullable?: #t))
        (<Property-Descriptor> name: auto-size?              standard?: #f
          (<Boolean-Domain>    name: domain))
        (<Property-Descriptor> name: tooltip?                standard?: #f
          (<Boolean-Domain>    name: domain))
        (<Property-Descriptor> name: tooltip-text            standard?: #f
          (<Localized-Domain>  name: domain))
        (<Property-Descriptor> name: draggable?              standard?: #f
          (<Boolean-Domain>    name: domain))
        (<Property-Descriptor> name: drag-tolerance          standard?: #f
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: enabled?                standard?: #f
          (<Boolean-Domain>    name: domain))
        (<Property-Descriptor> name: navigable?              standard?: #f
          (<Boolean-Domain>    name: domain))
        (<Property-Descriptor> name: action
          (<Value-Domain>      name: domain))
        (<Property-Descriptor> name: outline-view            standard?: #f
          (<Value-Domain>      name: domain                  nullable?: #t))
        (<Property-Descriptor> name: offscreen?              standard?: #f
          (<Boolean-Domain>    name: domain))
        (<Property-Descriptor> name: scaling                 standard?: #f
          (<Value-Domain>      name: domain                  nullable?: #t))
        (<Property-Descriptor> name: rotation                standard?: #f
          (<Value-Domain>      name: domain                  nullable?: #t))
        (<Property-Descriptor> name: layer                   standard?: #f
          (<Value-Domain>      name: domain                  nullable?: #t))
        (<Property-Descriptor> name: effect                  standard?: #f
          (<Value-Domain>      name: domain                  nullable?: #t))
        (<Property-Descriptor> name: user-data               standard?: #f
          (<Value-Domain>      name: domain                  nullable?: #t))
        (<Property-Descriptor> name: focus-gained-handler    category: handler standard?: #f
          (<Handler-Domain>    name: domain))
        (<Property-Descriptor> name: focus-lose-handler      category: handler standard?: #f
          (<Handler-Domain>    name: domain))
        (<Property-Descriptor> name: cursor-update-handler   category: handler standard?: #f
          (<Handler-Domain>    name: domain))
        (<Property-Descriptor> name: mouse-enter-handler     category: handler standard?: #f
          (<Handler-Domain>    name: domain))
        (<Property-Descriptor> name: mouse-hover-handler     category: handler standard?: #f
          (<Handler-Domain>    name: domain))
        (<Property-Descriptor> name: mouse-leave-handler     category: handler standard?: #f
          (<Handler-Domain>    name: domain))
        (<Property-Descriptor> name: mouse-down-handler      category: handler standard?: #f
          (<Handler-Domain>    name: domain))
        (<Property-Descriptor> name: mouse-move-handler      category: handler standard?: #f
          (<Handler-Domain>    name: domain))
        (<Property-Descriptor> name: mouse-up-handler        category: handler standard?: #f
          (<Handler-Domain>    name: domain))
        (<Property-Descriptor> name: drag-move-handler       category: handler standard?: #f
          (<Handler-Domain>    name: domain))
        (<Property-Descriptor> name: drag-up-handler         category: handler standard?: #f
          (<Handler-Domain>    name: domain))
        (<Property-Descriptor> name: double-click-handler    category: handler standard?: #f
          (<Handler-Domain>    name: domain))
        (<Property-Descriptor> name: current-drop-handler    category: handler standard?: #f
          (<Handler-Domain>    name: domain))
        (<Property-Descriptor> name: receive-drop-handler    category: handler standard?: #f
          (<Handler-Domain>    name: domain))
        (<Property-Descriptor> name: receive-files-handler   category: handler standard?: #f
          (<Handler-Domain>    name: domain))
        (<Property-Descriptor> name: context-menu-handler    category: handler standard?: #f
          (<Handler-Domain>    name: domain))
        (<Property-Descriptor> name: key-press-handler       category: handler standard?: #f
          (<Handler-Domain>    name: domain))
        (<Property-Descriptor> name: arrow-press-handler     category: handler standard?: #f
          (<Handler-Domain>    name: domain))
        (<Property-Descriptor> name: escape-press-handler    category: handler standard?: #f
          (<Handler-Domain>    name: domain))
        (<Property-Descriptor> name: backspace-press-handler category: handler standard?: #f
          (<Handler-Domain>    name: domain))
        (<Property-Descriptor> name: return-press-handler    category: handler standard?: #f
          (<Handler-Domain>    name: domain))
        (<Property-Descriptor> name: tab-press-handler       category: handler standard?: #f
          (<Handler-Domain>    name: domain))
        (<Property-Descriptor> name: content-change-handler  category: handler standard?: #f
          (<Handler-Domain>    name: domain))
        (<Property-Descriptor> name: selection-handler       category: handler standard?: #f
          (<Handler-Domain>    name: domain))
        (<Property-Descriptor> name: action-handler          category: handler standard?: #f
          (<Handler-Domain>    name: domain)))))
  
  
  (method override (can-try-out? class)
    #t)
  
  
  (method override (try-out class)
    (let ((process (designer-process~ (get-application))))
      (try-out~ process (serialize-class class))))
  
  
  (method override (component-get-categorized-addable-classes component)
    (list
      (list
        (reference View))))
  
  
  (method override (component-surrogate-class component)
    View-Surrogate)))
