;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; HTTP Messages
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.webserver.HTTP-Message jazz


(class HTTP-Message extends Object ;; ABSTRACT
  
  
  (slot protocol initialize "HTTP/1.1"                getter generate)
  (slot headers  initialize '()                       getter generate)
  (slot content  initialize #f                        getter generate)
  (slot cookies  initialize (make-table test: equal?) getter generate) ;; this goes into/comes out of headers
  
  
  (method override (initialize self (content: content #f) (headers: headers '()))
    (nextmethod self)
    (set! self.headers headers)
    (set! self.content content))

  
  (method (crlf! self port)
    (write-subu8vector #u8(13 10) 0 2 port))
  

  ;;;
  ;;;; Headers
  ;;;
  
  
  (method public (get-header self name (default #f))
    (let ((maybe-header (assoc name headers)))
      (if maybe-header
          (cdr maybe-header)
          default)))
  
  
  (method public (set-header! self name value)
    (let ((old-header (assoc name headers)))
      (if old-header
          (set-cdr! old-header value)
          (set! headers (cons (cons name value) headers)))))
  
  
  (method (print-headers self port)
    (when content
      (set-header! self "Content-Length" 
                   ((if (string? content)
                        string-length
                      car) ;; assume it's a u8 content bag
                    content)))
    (map (lambda (header)
           (print-header self (car header) (cdr header) port))
         headers))
  
  
  (method (print-header self name value port)
    (format port "{a}: {a}" name value)
    (crlf! self port))
 

  (method package virtual (parse self port)
    )


  (method package virtual (send self port)
    )

  
  ;;;
  ;;;; Cookies
  ;;;


  (method public (get-cookie self name)
    (table-ref cookies name #f))
  
  
  (method public (add-cookie self cookie)
    (let ((name (get-name cookie)))
      (table-set! cookies name cookie)))))
