;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; HTTP Responses
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.webserver.HTTP-Response jazz


(import (jazz.network)
        (jazz.webserver))


(class HTTP-Response extends HTTP-Message
  
  
  (slot code getter generate)
  
  
  (method override (initialize (code: code #f) (content: content #f))
    (nextmethod)
    (set! code~self (or code 'ok))
    (set! content~self content))
  
  
  ;;;
  ;;;; Parsing
  ;;; FIXME, later
  
  
  @response-from-www.yahoo.com
  "HTTP/1.1 200 OK
   Date: Sun, 14 Aug 2005 22:50:44 GMT
   Cache-Control: private
   Vary: User-Agent
   Set-Cookie: FPB=4lsmeb11fvim4; expires=Thu, 01-Jun-2006 19:00:00 GMT; path=/; domain=www.yahoo.com
   Connection: close
   Transfer-Encoding: chunked
   Content-Type: text/html
                                                                
   7299
   ..."
  
  
  @response-from-jazz
  "HTTP/1.1 200 OK
   Connection: close
   Content-Type: text/html
   Content-Length: 1543
   Set-Cookie: SessionID=nil
                                                                
   ..."
  

  (method override (parse port)
    (define (parse-control)
      (let ((line (read-line port)))
        (set! protocol (substring line 0 8))
        (set! code (parse-code (substring line 9 12)))))

    (define (parse-headers)
      (let (loop (line (read-line port)))
        (unless (string=? "" line)
          (let ((header (split-header-line line)))
            (set-header! (car header) (cdr header))
            (loop (read-line port))))))
    
    (define (parse-regular-content)
      (let ((header-length (get-header "Content-Length")))
        (let ((numeric-header-length (if (and header-length
                                              (numeric? header-length)
                                              (>= (string->number header-length)))
                                         (string->number header-length)
                                       -1)))
          ; can't use read-chars here, as a HEAD request may return the Content-Length
          ; without actually specifying content. better to just use it to exit early
          ; if possible.
          (let (loop (length numeric-header-length)
                     (collected '()))
            (if (or (= length 0)
                    (not (char-ready? port)))
                (list->string (reverse collected))
              (let ((next-char (read-char port)))
                (if (eof-object? next-char)
                    (list->string (reverse collected))
                  (loop (- length 1)
                        (cons next-char collected)))))))))

    (define (parse-chunked-content)
      (define (read-chunk)
        ; no chunk extensions for now
        (let (loop (hex-characters '()))
          (let ((char (read-char port)))
            (if (eof-object? char)
                #f
              (if (or (eq? char #\return)
                      (eq? char #\newline)
                      (eq? char #\semi-colon))
                  (begin
                    (unless (eq? char #\newline)
                      (read-line port)) ; erase remainder
                    (let ((length (parse-hexadecimal (list->string (reverse hex-characters))))
                          (chunk-str ""))
                      (if (= length 0)
                          #f
                        (prog1
                            (read-chars length port)
                          (read-line port) ; trailing crlf not included in chunk size
                          ))))
                (loop (cons char hex-characters)))))))
      
      (let (loop (content ""))
        (let ((chunk-content (read-chunk)))
          (if chunk-content
              (loop (concatenate content chunk-content))
            content))))
    
    (define (parse-content)
      (let ((transfer-encoding (get-header "Transfer-Encoding")))
        (if (and transfer-encoding
                 (string=? transfer-encoding "chunked"))
            (set! content (parse-chunked-content))
          (set! content (parse-regular-content)))))
    
    (parse-control)
    (parse-headers)
    (parse-content))

  
  
  @fixme
  (method (parse-response port)
    (let ((line (read-line port))) ; read code
      (set! code (parse-code (substring line 9 12))))
    (receive (line headers) (read-line/headers port)
      (bind (version code code-text) (split line " ")
        (set! code~self (parse-code code))
        (parse-headers headers)
        (parse-cookies Cookie-Header)
        ;;(set! body~self (read-body port))
        )))
  
  
  ;;;
  ;;;; Output
  ;;;
  
  
  (method override (send port)
    (bind (code number text) (response-code-info code)
      (format port "HTTP/1.1 {a} {a}" number text))
    (crlf! port)
    (print-headers port)
    (iterate-table cookies (lambda (name cookie)
                             (format port "Set-Cookie: {a}={s};" name (get-value~ cookie))
                             (crlf! port)))
    (crlf! port)
    (when content
      (if (list? content)
          (write-u8-content content port)
        (format port "{a}" content)))))


(definition private (read-chars length port)
  ; assumes that there are length characters present
  (let ((str (make-string length)))
    (let ((n (read-substring str 0 length port)))
      (if (= n length)
          str
        "")))))
