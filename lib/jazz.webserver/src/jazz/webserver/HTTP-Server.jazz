;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; HTTP Server
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.webserver.HTTP-Server jazz


(import (jazz.markup)
        (jazz.network))


(class HTTP-Server extends TCP-Server
  
  
  (slot listeners initialize '())
  
  
  (method override (server-name)
    'http-server)
  
  
  (method override (connection-name)
    'http-connection)

  
  ;;;
  ;;;; Connection
  ;;;
  
  
  (method override (accept-connection port)
    (define (request-html)
      (let ((request (new HTTP-Request port: port)))
        (call-listeners-receive-request request)
        (with-error-reporting request
          (lambda ()
            (set-server request self)
            (setup-session request)
            (let* ((response/html (generate-response request))
                   (response
                     (if response/html
                         (request-response request response/html)
                       (request-response request (generate-not-found request) code: 'not-found))))
              (call-listeners-process-request request response)
              response)))))
    
    (let ((response (request-html)))
      ;; should log intelligently the error
      ;; a WSAECONNRESET error can occur correctly if the user sends a request
      ;; before the browser has received the response from the active one
      (catch Server-Error
        (send-message response port))))
  
  
  (method override (server-hit)
    (increase! hits)
    (call-listeners-hit))
  
  
  (method (with-error-reporting request thunk)
    (define (present-error err stack)
      (let ((text (exception-reason err)))
        `(<html>
           (<head>
             (<title> "Error"))
           (<body>
             ,@(if (not debug?)
                   (let ((msg (format "Application error ({a})" text)))
                     `((<h3> ,msg)))
                 `("The following server error occured:"
                   (<pre> ,text)
                   (<br>)
                   (<pre> ,stack)))))))
    
    (continuation-capture
      (lambda (return)
        (with-exception-handler
          (lambda (exc)
            (display (exception-reason exc))
            (pretty-print (execution-stack lexical-environment?: #t depth: 5))
            (let ((html '(<html>
                           (<head>
                             (<title> "Error"))
                           (<body>
                             (<h3> "Error")))))
              (request-response request html code: 'server-error))
            (return))
          thunk))))

  
  ;;;
  ;;;; Session
  ;;;
  
  
  (definition SessionID
    "SessionID")
  
  (definition NoSession
    "#f")
  
  
  (method (setup-session request)
    (let ((sessionid (get-cookie-value request SessionID)))
      (when (and sessionid (nu/=? sessionid NoSession))
        (let* ((session-id (parse-integer sessionid))
               (session (find-session HTTP-Session session-id)))
          (when session
            (set-session request session))))))
  
  
  (method (add-session-cookie response session)
    (let ((name SessionID)
          (value (if (not session)
                     NoSession
                   (->string (get-id session)))))
      (add-cookie response (new HTTP-Cookie name value))))

  
  ;;;
  ;;;; Response
  ;;;
  
  
  (method (request-response request response/html (code: code #f))
    (define (effective-html request html)
      (cond ((string? html)
             html)
            ((pair? html)
             (process-markup request html))
            (else
             (error "Unable to process: {s}" html))))
    
    (define (calculate-content-length body)
      (+ (cardinality body)
         (count #\newline body)))
    
    (if (is? response/html HTTP-Response)
        response/html
      (let* ((body (effective-html request response/html))
             (session (get-session request))
             (response (new HTTP-Response code: code body: body)))
        (add-connection-close response)
        (add-content-type response "text/html")
        (add-content-length response (calculate-content-length body))
        (add-session-cookie response session)
        response)))
  
  
  (method (add-connection-close response)
    (set-header! response "Connection" "close"))
  
  
  (method (add-content-type response type)
    (set-header! response "Content-Type" type))
  
  
  (method (add-location response location)
    (set-header! response "Location" location))
  
  
  (method (add-content-length response length)
    (set-header! response "Content-Length" (format "{a}" length)))

  
  ;;;
  ;;;; Generate
  ;;;
  
  
  (method protected virtual (generate-response request)
    #f)
  
  
  (method (generate-not-found request)
    `(<html>
       (<head>
         (<title> "Error"))
       (<body>
         "Unable to find resource"
         (<br>)
         (<br>)
         ,(request-content request))))

  
  ;;;
  ;;;; Markup
  ;;;
  
  
  (method protected virtual (markup-preferences)
    (new Markup-Preferences))
  
  
  (method protected virtual (markup-parser pref)
    (new XHTML-Parser preferences: pref))
  
  
  (method protected virtual (markup-renderer pref)
    (new XHTML-Renderer pref))
  
  
  (method (process-markup request markup)
    (let* ((pref (markup-preferences))
           (parser (markup-parser pref))
           (renderer (markup-renderer pref))
           (markup (parse parser markup))
           (output (open-output-string)))
      (render renderer markup output)
      (get-output-string output)))

  
  ;;;
  ;;;; Listeners
  ;;;
  
  
  (method public (add-listener listener)
    (set! listeners (cons listener listeners)))
  
  
  (method public (remove-listener listener)
    (set! listeners (remove! listener listeners)))
  
  
  (method (call-listeners-hit)
    (for-each (lambda (listener)
                (hit listener self))
              listeners))
  
  
  (method (call-listeners-receive-request request)
    (for-each (lambda (listener)
                (receive-request listener self request))
              listeners))
  
  
  (method (call-listeners-receive-pages-request request resource pages-class)
    (for-each (lambda (listener)
                (receive-pages-request listener self request resource pages-class))
              listeners))
  
  
  (method (call-listeners-process-request request response)
    (for-each (lambda (listener)
                (process-request listener self request response))
              listeners))

  
  ;;;
  ;;;; Debugging
  ;;;
  
  
  (method public (all-details request)
    `(,@(request-details request)
      ,@(session-details request)))
  
  
  (method public (debug-request request)
    `(<html>
       (<head>
         (<title> "Request"))
       (<body>
         ,(request-details request))))
  
  
  (method (request-details request)
    `((<h3> "Request")
      ,(request-content request)))
  
  
  (method (request-content request)
    (let (@convert (host (get-host request))
          @convert (port (get-port request))
          (operation (get-operation request))
          (resource (get-resource request))
          (version (get-version request))
          (headers (get-headers request))
          (cookies (get-cookies request))
          (parameters (get-parameters request)))
      `(<table> border: "1"
         @convert
         (<tr>
           (<td> "host")
           (<td> ,(->string host)))
         @convert
         (<tr>
           (<td> "port")
           (<td> ,(->string port)))
         (<tr>
           (<td> "operation")
           (<td> ,operation))
         (<tr>
           (<td> "resource")
           (<td> ,resource))
         (<tr>
           (<td> "version")
           (<td> ,version))
         (<tr>
           (<td> "headers")
           (<td> (<table>
                   ,@(map-table headers
                                (lambda (name value)
                                  `(<tr>
                                     (<td> ,name)
                                     (<td> ,value)))))))
         (<tr>
           (<td> "cookies")
           (<td> (<table>
                   ,@(map-table cookies
                                (lambda (name cookie)
                                  (let ((value (get-value cookie)))
                                    `(<tr>
                                       (<td> ,name)
                                       (<td> ,value))))))))
         ,@(if (null? parameters)
               '()
             `((<tr>
                 (<td> "parameters")
                 (<td> (<table>
                         ,@(map (lambda (parameter)
                                  (bind (name . value) parameter
                                    `(<tr>
                                       (<td> ,name)
                                       (<td> ,value))))
                                parameters)))))))))
  
  
  (method (session-details request)
    (let ((session (get-session request)))
      (if (not session)
          '()
        `((<h3> "Session")
          ,(session-content request session)))))
  
  
  (method (session-content request session)
    (let ((id (get-id session))
          (properties (get-properties session)))
      `(<table> border: "1"
         (<tr>
           (<td> "id")
           (<td> ,(->string id)))
         (<tr>
           (<td> "properties")
           (<td> (<table>
                   ,@(map-property (lambda (property value)
                                     `(<tr>
                                        (<td> ,(->string property))
                                        (<td> ,(->string value))))
                                   properties)))))))))
