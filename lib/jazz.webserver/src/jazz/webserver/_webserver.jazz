;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Webserver
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module jazz.webserver jazz


(export (jazz.webserver.autoload))


;;;
;;;; Response Codes
;;;


(definition private Response-Codes
  '((continue                         "100" "Continue")
    (switching-protocols              "101" "Switching Protocols")
    (ok                               "200" "OK")
    (created                          "201" "Created")
    (accepted                         "202" "Accepted")
    (non-authoritative-information    "203" "Non-Authoritative Information")
    (no-content                       "204" "No Content")
    (reset-content                    "205" "Reset Content")
    (partial-content                  "206" "Partial Content")
    (multiple-choices                 "300" "Multiple Choices")
    (moved-permanently                "301" "Moved Permanently")
    (found                            "302" "Found")
    (see-other                        "303" "See Other")
    (not-modified                     "304" "Not Modified")
    (use-proxy                        "305" "Use Proxy")
    (temporary-redirect               "307" "Temporary Redirect")
    (bad-request                      "400" "Bad Request")
    (unauthorized                     "401" "Unauthorized")
    (payment-required                 "402" "Payment Required")
    (forbidden                        "403" "Forbidden")
    (not-found                        "404" "Not Found")
    (not-allowed                      "405" "Method Not Allowed")
    (not-acceptable                   "406" "Not Acceptable")
    (proxy-authentication-required    "407" "Proxy Authentication Required")
    (request-time-out                 "408" "Request Time-out")
    (conflict                         "409" "Conflict")
    (gone                             "410" "Gone")
    (length-required                  "411" "Length Required")
    (precondition-failed              "412" "Precondition Failed")
    (request-entity-too-large         "413" "Request Entity Too Large")
    (request-uri-too-large            "414" "Request-URI Too Large")
    (unsupported-media-type           "415" "Unsupported Media Type")
    (requested-range-not-satisfiable  "416" "Requested range not satisfiable")
    (expectation-failed               "417" "Expectation Failed")
    (server-error                     "500" "Internal Server Error")
    (not-implemented                  "501" "Not Implemented")
    (bad-gateway                      "502" "Bad Gateway")
    (service-unavailable              "503" "Service Unavailable")
    (gateway-time-out                 "504" "Gateway Time-out")
    (http-version-not-supported       "505" "HTTP Version not supported")))


(definition public (parse-code code)
  (let ((info (find-in Response-Codes code key: second test: equal?)))
    (if info
        (car info)
      'unknown)))


(definition public (response-code-info code)
  (or (assq code Response-Codes)
      (error "Unknown response code: {s}" code)))


;;;
;;;; Parsing
;;;


(definition public (split-header-line line (separator: separator #\:))
  (let (loop (header '())
             (value (string->list line)))
    (if (empty? value)
        (cons (list->string header) "")
      (if (eq? (car value) separator)
          (let (trim-spaces (remaining (cdr value)))
            (if (or (null? remaining)
                    (neq? (car remaining) #\space))
                (cons (list->string header)
                      (list->string remaining))
              (trim-spaces (cdr remaining))))
        (loop (append header (cons (car value) '()))
              (cdr value))))))


;;;
;;;; Encoding
;;;


(definition public (url-decode string)
  (let ((output (open-output-string))
        (len (cardinality string))
        (n 0))
    (while (< n len)
      (let ((c (element string n)))
        (cond ((eqv? c #\+)
               (write-char #\space output)
               (increase! n))
              ((eqv? c #\%)
               (let ((value (parse-hexadecimal (subseq string (+ n 1) (+ n 3)))))
                 (write-char (integer->char value) output)
                 (increase! n 3)))
              (else
               (write-char c output)
               (increase! n)))))
    (get-output-string output)))


(definition public (url-encode string)
  (let ((output (open-output-string)))
    (for-each (lambda (c)
                (cond ((eqv? c #\space)
                       (format output "+"))
                      ((memv? c '(#\question-mark #\ampersand #\=))
                       (format output "%{x}" (char->integer c)))
                      (else
                       (write-char c output))))
              (string->list string))
    (get-output-string output)))


;;;
;;;; Hashing
;;;


(definition public (hmac-string
                     str
                     message
                     (algorithm: algorithm 'sha-1)
                     (block-size: block-size 64)
                     (raw-output: raw-output #f))

  (define (build-key)
    (if (> (string-length str) block-size)
        (digest-string str algorithm)
      (concatenate str (make-string (- block-size (string-length str)) #\x00))))

  (define (xor-string str1 str2)
    (list->string
      (map (lambda (chars)
             (integer->char
               (bitwise-xor (char->integer (car chars))
                            (char->integer (cadr chars)))))
           (zip (string->list str1)
                (string->list str2)))))

  (let ((key (build-key)))
    (let ((o-key-pad (xor-string (make-string block-size #\x5c) key))
          (i-key-pad (xor-string (make-string block-size #\x36) key)))
      (let ((inner-digest (list->string
                            (map integer->char
                                 (u8vector->list
                                   (digest-string (concatenate i-key-pad message) algorithm 'u8vector))))))
        (digest-string (concatenate o-key-pad inner-digest)
                       algorithm
                       (if raw-output 'u8vector 'hex)))))))
