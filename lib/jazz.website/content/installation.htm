<html>

<head>
  <link href="css/master.css" rel="stylesheet" type="text/css"/>
  <title>Installation</title>
</head>

<body>
<div id="page">
  <h1 id="title">JazzScheme</h1>
  <div id="sectionnav">
    <a class="section" href="index.htm">Home</a>
    <a class="section" href="news.htm">News</a>
    <a class="section" href="features.htm">Features</a>
    <a class="section" href="screenshots.htm">Screenshots</a>
    <a class="section" href="walkthroughs.htm">Walkthroughs</a>
    <a class="section" href="documentation.htm">Documentation</a>
    <a class="subsection" href="installation.htm">
      <b>Installation</b>
    </a>
    <a class="subsection" href="kernel.htm">Module System</a>
    <a class="subsection" href="jazz.htm">Jazz Platform</a>
    <a class="subsection" href="jedi.htm">Jedi IDE</a>
    <a class="subsection" href="samples.htm">Samples</a>
    <a class="section" href="development.htm">Development</a>
    <a class="section" href="download.htm">Download</a>
  </div>
  <div id="content">
    <div>
      <a name="#f"></a>
      <h3>Installation</h3>
      <ul>
        <li>
          <a href="installation.htm#installation.dependencies">Dependencies</a>
        </li>
        <li>
          <a href="installation.htm#installation.sources">Sources</a>
        </li>
        <li>
          <a href="installation.htm#installation.building">Building</a>
        </li>
        <ul>
          <li>
            <a href="installation.htm#installation.examples">Examples</a>
          </li>
          <li>
            <a href="installation.htm#installation.list">List</a>
          </li>
          <li>
            <a href="installation.htm#installation.delete">Delete</a>
          </li>
          <li>
            <a href="installation.htm#installation.configure">Configure</a>
          </li>
          <li>
            <a href="installation.htm#installation.make">Make</a>
          </li>
          <li>
            <a href="installation.htm#installation.install">Install</a>
          </li>
          <li>
            <a href="installation.htm#installation.quit">Quit</a>
          </li>
        </ul>
      </ul>
    </div>
    <div>
      <a name="installation.dependencies"></a>
      <h3>Dependencies</h3>
      <span>
        <p></p>
        <b>Gambit</b>
        <p></p>
You need to install the latest version of         <a href="http://www.iro.umontreal.ca/~gambit/">Gambit</a>
. You will also need to pull all the latest changes from the Gambit repository as Marc Feeley, Gambit's author, is often fixing bugs and adding new features to support JazzScheme development. Be sure you have made a 'make bootstrap' for Gambit before pulling. This is documented on Gambit's website but is a costly gotcha as it will force you to reinstall if you forget to do it. See Gambit's INSTALL.txt file for details on installing Gambit and see Gambit's website for details on accessing         <a href="http://dynamo.iro.umontreal.ca/~gambit/wiki/index.php/Source_code_repository">Gambit's public repository</a>
.         <p></p>
Note that JazzScheme relies on very few Gambit specific features and was designed with ease of porting to other Scheme systems in mind.         <p></p>
All compilation is done through the underlying Scheme. As Gambit uses GCC for backend, please refer to Gambit's documentation if you're experiencing GCC problems. On Windows, the only backend fully tested to work with JazzScheme is         <a href="http://www.mingw.org/">MinGW</a>
. Note that some people have reported problems when building JazzScheme with old versions of MinGW. Another reported problem was from someone having both Cygwin and MinGW installed, where MinGW would wrongly call Cygwin's gcc. Uninstalling Cygwin fixed the problem.       </span>
      <span>
        <p></p>
        <b>Cairo</b>
        <p></p>
If you plan on doing GUI development, you will need to install         <a href="http://cairographics.org/">Cairo</a>
. On Windows we precompiled it for you as a dll. On other systems, you should install it the usual way (with your package manager) and Jazz will use pkg-config to find the various paths. If you are on MacOS, the simplest way to install Cairo is through         <a href="http://www.macports.org/">macports</a>
. If you decide to compile your own versions of the libraries, pkg-config will need to know where they are installed. You should set the environment variable PKG_CONFIG_PATH to the appropriate directories.       </span>
      <span>
        <p></p>
        <b>X11 on the Mac</b>
        <p></p>
Due to a bug in Apple's installed version of X11, if you plan on using X11 on the Mac, you will need to install the latest X11 version from         <a href="http://xquartz.macosforge.org/">http://xquartz.macosforge.org/</a>
. This is the official apple site for X11 on the Mac. Note that depending on your settings, X11 may need to be manually started before launching Jedi.       </span>
    </div>
    <div>
      <a name="installation.sources"></a>
      <h3>Sources</h3>
JazzScheme uses       <a href="http://git.or.cz/">Git</a>
 to store all development files. You will need to have it installed on your machine to access the Jazz repository.       <span>
        <p></p>
        <b>Repository</b>
        <p></p>
The repository address is still private as JazzScheme has not been publicly released yet.      </span>
      <span>
        <p></p>
        <b>Troubleshooting</b>
        <p></p>
If you get an error like "fatal: unable to connect a socket (Connection timed out)" it may be that you are behind a firewall that blocks outbound connections on Git's port 9418.       </span>
      <span>
        <p></p>
        <b>Help</b>
        <p></p>
Some usefull Git links :        <ul>
          <li>
            <a href="http://www.kernel.org/pub/software/scm/git/docs/">Documentation</a>
          </li>
          <li>
            <a href="http://www.kernel.org/pub/software/scm/git/docs/user-manual.html">User Manual</a>
          </li>
          <li>
            <a href="http://www.kernel.org/pub/software/scm/git/docs/gittutorial.html">Tutorial</a>
          </li>
        </ul>
      </span>
      <span>
        <p></p>
        <b>User Scenario</b>
        <p></p>
<pre><span class="comment">;; clone the JazzScheme repository (only once)</span>
<span class="comment">;; this will create a 'jazz' directory containing all development files</span>
git clone &lt;repository address&gt; jazz
cd jazz

<span class="comment">;; after you clone the repository, you should never modify the master</span>
<span class="comment">;; branch as it will make subsequent pulls more prone to failure. This can</span>
<span class="comment">;; easily happen if you modify files in the Jazz source tree when experimenting</span>
<span class="comment">;; around. You should always work in your own branch, lets say 'work'</span>
git branch work
git checkout work

<span class="comment">;; pull from time to time to get the latest revision</span>
git checkout master
git pull
git checkout work
git rebase master</pre>      </span>
      <span>
        <p></p>
        <b>Contributor Scenario</b>
        <p></p>
<pre><span class="comment">;; clone the JazzScheme repository (only once)</span>
<span class="comment">;; this will create a 'jazz' directory containing all development files</span>
git clone &lt;repository address&gt; jazz
cd jazz

<span class="comment">;; add email and name information that will appear in patches you submit</span>
git config user.email "you@email.com"
git config user.name "Your Name"

<span class="comment">;; after you clone the repository, you should never modify the master</span>
<span class="comment">;; branch as it will be used by git-rebase. You should always work in your</span>
<span class="comment">;; own branch, lets say 'work'</span>
git branch work
git checkout work

<span class="comment">;; commit any changes you have made</span>
<span class="comment">;; the -a option is necessary if you added any new file to the source tree</span>
git commit -a -m "Some nice message describing your changes"

<span class="comment">;; pull to get the latest revision so you can rebase your changes</span>
git checkout master
git pull
git checkout work
git rebase master
<span class="comment">;; optional step: fix any rebase conflicts</span>
<span class="comment">;; see http://www.kernel.org/pub/software/scm/git/docs/git-rebase.html for details</span>
<span class="comment">;; edit and resolve conflicts in all the conflicting files</span>
git add &lt;list of resolved files&gt;
git rebase --continue

<span class="comment">;; send contributions as a series of patch files</span>
<span class="comment">;; make sure you do the previous step of rebasing your changes just before</span>
<span class="comment">;; doing this as this will greatly minimize risks of conflicts when the Jazz</span>
<span class="comment">;; maintainers apply your patches to the central repository</span>
git format-patch origin
&lt;email generated patch files to gcartier@jazzscheme.org&gt;</pre>      </span>
      <span>
        <p></p>
        <b>Maintainer Scenario</b>
        <p></p>
<pre><span class="comment">;; publish some changes</span>
git push pub master

<span class="comment">;; merge contributions</span>
git am -3 *.patch
<span class="comment">;; optional step: fix any am conflict</span>
git am --resolved</pre>      </span>
    </div>
    <div>
      <a name="installation.building"></a>
      <h3>Building</h3>
Building Jazz follows the usual configure / make methodology. The only unusual thing is that, as the underlying Scheme already represents a platform independant abstraction, there is no need to use the low-level GNU tools. The build system is fully implemented using the underlying Scheme.       <p></p>
Note that on Windows, building the platform target will generate many warnings. These are due to limitations in the current implementation of the foreign-function interface and can be safely ignored.       <p></p>
To load the build system using :      <p></p>
      <span>
        <p></p>
        <b>Gambit</b>
        <p></p>
Just launch gsc from Jazz's source install directory. The .gambcini file located there will automatically load the build system.       </span>
    </div>
    <div>
      <a name="installation.examples"></a>
      <h4 class="section2">Examples</h4>
      <span>
        <p></p>
        <b>Building the Jazz kernel and core modules</b>
        <p></p>
        <p></p>
<pre>$ <b>gsc</b>
JazzScheme Build System v2.0.0

$ <b>configure</b>
&lt;default&gt;
  system: gambit
  platform: windows
  safety: release

$ <b>make</b>
...</pre>      </span>
      <span>
        <p></p>
        <b>Building Jedi's critical modules</b>
        <p></p>
<pre>$ <b>gsc</b>
JazzScheme Build System v2.0.0

$ <b>make jedi</b>
...</pre>      </span>
    </div>
    <div>
      <a name="installation.list"></a>
      <h4 class="section2">List</h4>
List configurations.      <p></p>
<pre class="code">list</pre>    </div>
    <div>
      <a name="installation.delete"></a>
      <h4 class="section2">Delete</h4>
Delete a configuration.      <p></p>
<pre class="code">delete [<i>configuration</i>]</pre>    </div>
    <div>
      <a name="installation.configure"></a>
      <h4 class="section2">Configure</h4>
Register a new configuration.       <p></p>
To support multiple configurations, configurations can be optionaly be named.      <p></p>
Configurations are loaded / saved from the .configurations file located at the root. Using configure is basically an easy way to edit the .configurations file.       <p></p>
<pre class="code">configure
  [name: <i>name</i>]
  [title: <i>title</i>]
  [system: <i>system</i>]
  [platform: <i>platform</i>]
  [windowing: <i>windowing</i>]
  [safety: <i>safety</i>]
  [optimize?: <i>optimize?</i>]
  [include-source?: <i>include-source?</i>]
  [interpret?: <i>interpret?</i>]
  [install: <i>install</i>]</pre>      <p></p>
      <dl>
        <dt>
          <i>
            <code>name</code>
          </i>
        </dt>
        <dd>The optional configuration name. Must be alphanumeric.</dd>
      </dl>
      <p></p>
      <dl>
        <dt>
          <i>
            <code>title</code>
          </i>
        </dt>
        <dd>
The optional configuration title. Must be alphanumeric.           <p></p>
If present, this title will be used to name the installation directory.         </dd>
      </dl>
      <p></p>
      <dl>
        <dt>
          <i>
            <code>system</code>
          </i>
        </dt>
        <dd>
The underlying Scheme system (determined automatically)          <p></p>
          <ul>
            <li>gambit (the only fully supported scheme system at the moment)</li>
            <li>chicken</li>
            <li>...</li>
          </ul>
        </dd>
      </dl>
      <p></p>
      <dl>
        <dt>
          <i>
            <code>platform</code>
          </i>
        </dt>
        <dd>
The platform (will try and guess based on system type)          <p></p>
          <ul>
            <li>mac</li>
            <li>windows</li>
            <li>unix</li>
          </ul>
        </dd>
      </dl>
      <p></p>
      <dl>
        <dt>
          <i>
            <code>windowing</code>
          </i>
        </dt>
        <dd>
The windowing system (will try and guess based on system type)          <ul>
            <li>carbon (development started)</li>
            <li>x11 (almost there)</li>
            <li>#f (use default platform windowing)</li>
          </ul>
        </dd>
      </dl>
      <p></p>
      <p></p>
      <dl>
        <dt>
          <i>
            <code>safety</code>
          </i>
        </dt>
        <dd>
The runtime safety level          <p></p>
          <dl>
            <dt>core</dt>
            <dd>Core debug mode for debugging JazzScheme itself. Adds tests to make the kernel and core safe. </dd>
            <dt>debug</dt>
            <dd>Standard debug mode with tests to make user code safe. This is the recommanded safety for development. </dd>
            <dt>release (the default)</dt>
            <dd>Release mode for stable user code with no safety tests. If you plan on using the Jedi IDE, you may want to build using this safety level as it will run alot faster. </dd>
          </dl>
        </dd>
      </dl>
      <p></p>
      <dl>
        <dt>
          <i>
            <code>optimize?</code>
          </i>
        </dt>
        <dd>
This option adds optimization declares to the source code. Note that this will make debugging somewhat harder as the generated code will have gone through some transformations. At the moment it adds: proper-tail-calls, constant-fold and lambda-lift.           <ul>
            <li>#f</li>
            <li>#t (the default)</li>
          </ul>
        </dd>
      </dl>
      <p></p>
      <dl>
        <dt>
          <i>
            <code>include-source?</code>
          </i>
        </dt>
        <dd>
Include source in compiled code by compiling with Gambit's 'debug-source' option.           <p></p>
Note that this option is not needed anymore for using the statprof statistical profiler with compiled files since the new 'debug-location' option was added to Gambit.           <p></p>
Do not use this option unless you have a very specific need for it as it will result in much larger object files and due to a flaw in gcc also result in longer compile times.           <ul>
            <li>#f (the default)</li>
            <li>#t</li>
          </ul>
        </dd>
      </dl>
      <p></p>
      <dl>
        <dt>
          <i>
            <code>interpret?</code>
          </i>
        </dt>
        <dd>
An advanced option for Jazz developers to enable loading the kernel fully interpreted.           <ul>
            <li>#f (the default)</li>
            <li>#t</li>
          </ul>
        </dd>
      </dl>
      <p></p>
      <dl>
        <dt>
          <i>
            <code>install</code>
          </i>
        </dt>
        <dd>
The installation directory.           <p></p>
Having a separate installation directory for each configuration enables multiple configurations to be independently built. Any configuration dependent file will go inside the installation directory. Examples include: the Jazz kernel, built executables, libraries, compilation binaries, binary packages, ...           <p></p>
If the installation directory is not specified, it will default to bin/<configuration name> where <configuration name> is either :          <ul>
            <li>the configuration title if specified</li>
            <li>the configuration name if specified</li>
            <li>a name made by concatenating the following key configuration elements : the system, the platform, the windowing and the safety</li>
          </ul>
        </dd>
      </dl>
    </div>
    <div>
      <a name="installation.make"></a>
      <h4 class="section2">Make</h4>
Build target for the active configuration.      <p></p>
<pre class="code">make [<i>target</i>]</pre>      <p></p>
      <dl>
        <dt>
          <i>
            <code>target</code>
          </i>
        </dt>
        <dd>The target to build which defaults to 'jazz'.To support multiple configurations, a target can also be specified as target@configuration</dd>
      </dl>
      <p></p>
      <span>
        <p></p>
        <b>Targets</b>
        <p></p>
        <table class="terminology" width="400">
          <th>Target</th>
          <th>Description</th>
          <tr>
            <td>kernel</td>
            <td>the module system</td>
          </tr>
          <tr>
            <td>core</td>
            <td>the core modules</td>
          </tr>
          <tr>
            <td>jazz</td>
            <td>the jazz language modules</td>
          </tr>
          <tr>
            <td>platform</td>
            <td>the platform modules</td>
          </tr>
          <tr>
            <td>all</td>
            <td>jazz's modules</td>
          </tr>
          <tr>
            <td>jedi</td>
            <td>jedi's critical modules</td>
          </tr>
          <tr>
            <td>&lt;product&gt;</td>
            <td>builds &lt;product&gt;</td>
          </tr>
        </table>
      </span>
    </div>
    <div>
      <a name="installation.install"></a>
      <h4 class="section2">Install</h4>
There is no equivalent of make install due to the complexity of supporting multiple systems and user preferences. Since this step is also very simple to do manually, installing the built configuration is left to the user.       <p></p>
Depending on your system you will usually      <ul>
        <li>Copy the Jazz runtime files <need to detail this> to a standard system location or</li>
        <li>Modify your environment variables to point to the location of the Jazz executable</li>
      </ul>
      <p></p>
Note that at this time, modifying your environment variables is the preferred approach as some modules like Jedi are still dependent on source files.    </div>
    <div>
      <a name="installation.quit"></a>
      <h4 class="section2">Quit</h4>
Quit the build system.      <p></p>
<pre class="code">quit</pre>    </div>
    <div id="footer">
      <p>Copyright &copy; 1996-2008 Guillaume Cartier</p>
    </div>
  </div>
</div>
</body>

</html>
