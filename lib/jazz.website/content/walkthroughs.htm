<html>

<head>
  <link href="css/master.css" rel="stylesheet" type="text/css"/>
  <title>Walkthroughs</title>
</head>

<body>
<div id="page">
  <h1 id="title">JazzScheme</h1>
  <div id="sectionnav">
    <a class="section" href="index.htm">Home</a>
    <a class="section" href="news.htm">News</a>
    <a class="section" href="features.htm">Features</a>
    <a class="section" href="screenshots.htm">Screenshots</a>
    <a class="section" href="walkthroughs.htm">
      <b>Walkthroughs</b>
    </a>
    <a class="section" href="documentation.htm">Documentation</a>
    <a class="section" href="development.htm">Development</a>
    <a class="section" href="download.htm">Download</a>
  </div>
  <div id="content">
    <div>
      <a name="#f"></a>
      <h3>Walkthroughs</h3>
      <span>
        <p></p>
        <b>Installation</b>
        <p></p>
        <ul>
          <li>
            <a href="walkthroughs.htm#walkthrough.installing-repository">Installing from a Git repository</a>
          </li>
          <li>
            <a href="walkthroughs.htm#walkthrough.installing-unix">Installing from a Mac OS X / Linux binary release</a>
          </li>
          <li>
            <a href="walkthroughs.htm#walkthrough.installing-windows">Installing from a Windows binary release</a>
          </li>
        </ul>
      </span>
      <span>
        <p></p>
        <b>Jedi IDE</b>
        <p></p>
        <ul>
          <li>
            <a href="walkthroughs.htm#walkthrough.getting-started">Getting Started</a>
          </li>
          <li>
            <a href="walkthroughs.htm#walkthrough.cataloging-code">Cataloging an existing code base</a>
          </li>
          <li>
            <a href="walkthroughs.htm#walkthrough.debugging-gambit">Debugging an existing Gambit project</a>
          </li>
          <li>
            <a href="walkthroughs.htm#walkthrough.exploring-views">Exploring the interface under the hood</a>
          </li>
          <li>
            <a href="walkthroughs.htm#walkthrough.code">Executing code</a>
          </li>
        </ul>
      </span>
      <span>
        <p></p>
        <b>Jazz Platform</b>
        <p></p>
        <ul>
          <li>
            <a href="walkthroughs.htm#walkthrough.view">A simple graphical view</a>
          </li>
          <li>
            <a href="walkthroughs.htm#walkthrough.application">A basic application</a>
          </li>
        </ul>
      </span>
    </div>
    <div>
      <a name="walkthrough.installation"></a>
      <h3>Installation</h3>
      <span>
        <p></p>
        <b>Which install should I use?</b>
        <p></p>
If you want to stay closely up-to-date on JazzScheme development or plan on contributing, you should install from a Git repository. JazzScheme uses Git to store all development files.         <p></p>
Else, for every official release, we package full binaries for the following platforms :        <ul>
          <li>Mac OS X</li>
          <li>Windows</li>
          <li>Linux</li>
        </ul>
Binaries are a great way to tryout Jazz and the Jedi IDE without having to install Git or Gambit.       </span>
    </div>
    <div>
      <a name="walkthrough.installing-repository"></a>
      <h4 class="section2">Installing from a Git repository</h4>
To install from a repository you will need :       <ul>
        <li>
          <span>
            <a href="http://git.or.cz/">Git</a>
 installed on your machine          </span>
        </li>
        <li>
          <span>
The latest version of             <a href="http://www.iro.umontreal.ca/~gambit/">Gambit</a>
          </span>
        </li>
      </ul>
      <span>
        <p></p>
        <b>Clone the repository</b>
        <p></p>
Clone the JazzScheme repository (only once). This will create a 'jazz' directory containing all development files. <pre class="code_light">$ <b>cd ~</b>

$ <b>git clone &lt;repository address&gt; jazz</b>
Initialized empty Git repository in ~/jazz/.git/
got 0bf73166990a41c20627f6b935317bdc25a4e257
...
walk 1ba2fb1ad98ed81b62e2827639b71d6ec9b0ae9c
Checking out files: 100% (3284/3284), done.

$ <b>cd jazz</b></pre>      </span>
      <span>
        <p></p>
        <b>Create a branch</b>
        <p></p>
After you clone the repository, you should never modify the master branch as it will make subsequent pulls more prone to failure. This can easily happen if you modify files in the Jazz source tree when experimenting around. You should always work in your own branch, lets say 'work'. <pre class="code_light">$ <b>git branch work</b>

$ <b>git checkout work</b>
Switched to branch "work"</pre>      </span>
      <span>
        <p></p>
        <b>Build Jazz and the Jedi IDE</b>
        <p></p>
Building follows the usual configure / make methodology. The only unusual thing is that, as the underlying Scheme already represents a platform independant abstraction, there is no need to use the low-level GNU tools. The build system is fully implemented using the underlying Scheme, Gambit in this case. <pre class="code_light">$ <b>gsc</b>
JazzScheme Build System v2.0.0

% <b>configure</b>
&lt;default&gt;
  system: gambit
  platform: windows
  safety: release

% <b>make jedi</b>
...

% <b>make all</b>
...

% <b>quit</b></pre>      </span>
      <span>
        <p></p>
        <b>Launch the Jedi IDE</b>
        <p></p>
As the build system supports multiple configurations, first 'cd' into the install directory, on Windows this would be: "bin/GambitWindowsRelease", then launch Jedi. Note that launching the IDE is a good indicator of whether the installation was successful or not. <pre class="code_light">$ <b>cd bin/GambitWindowsRelease</b>

$ <b>./jedi</b></pre>      </span>
    </div>
    <div>
      <a name="walkthrough.installing-unix"></a>
      <h4 class="section2">Installing from a Mac OS X / Linux binary release</h4>
Installation should work the same for both Mac OS X and Linux. We'll suppose we are installing on Mac OS X for the example.       <span>
        <p></p>
        <b>Download and extract the binaries</b>
        <p></p>
After downloading the binaries, cd to the download directory, then decompress and depackage the binaries. <pre class="code_light">$ <b>gunzip jazz-2.0.0-macosx-intel32.tar.gz</b>

$ <b>tar -xvf jazz-2.0.0-macosx-intel32.tar</b>
...</pre>      </span>
      <span>
        <p></p>
        <b>Launch the Jedi IDE</b>
        <p></p>
First, 'cd' into the install directory, in this case: "bin/GambitMacX11Release", then launch Jedi. Note that launching the IDE is a good indicator of whether the installation was successful or not. <pre class="code_light">$ <b>cd bin/GambitMacX11Release</b>

$ <b>./jedi</b></pre>      </span>
    </div>
    <div>
      <a name="walkthrough.installing-windows"></a>
      <h4 class="section2">Installing from a Windows binary release</h4>
Note that all source files come with standard Windows CR-LF end of lines.       <span>
        <p></p>
        <b>Download and extract the binaries</b>
        <p></p>
After downloading the binaries, unzip them to a suitable directory.       </span>
      <span>
        <p></p>
        <b>Launch the Jedi IDE</b>
        <p></p>
Locate the Jedi executable inside the "bin/GambitWindowsRelease" directory and launch it. Note that launching the IDE is a good indicator of whether the installation was successful or not.       </span>
    </div>
    <div>
      <a name="walkthrough.jedi"></a>
      <h3>Jedi IDE</h3>
    </div>
    <div>
      <a name="walkthrough.getting-started"></a>
      <h4 class="section2">Getting Started</h4>
      <span>
        <p></p>
        <b>Installation</b>
        <p></p>
        <span>After installing JazzScheme, open up the bin directory and locate jedi.exe to launch Jedi, the JazzScheme IDE. </span>
      </span>
      <span>
        <p></p>
        <b>Login</b>
        <p></p>
Next, you will see the Login dialog used to create a new profile or select from a list of existing ones. For the example, we will call the new profile "Me". If you are used to Emacs bindings, Jedi supports a subset of the most common Emacs commands.         <p></p>
        <img src="images/walkthroughs/login_new.png"/>
        <p></p>
Press "Login". Your new profile will be created in the following directory :         <p></p>
        <code>~/.jazz/lib/jedi.profiles/profile/Me/</code>
        <p></p>
Here's a description of some important files that where created inside your new         <code>Me</code>
 profile directory :         <p></p>
        <ul>
          <li>settings/Bindings.jml</li>
          <li>settings/Preferences.jml</li>
          <li>settings/WebServers.jml</li>
          <li>settings/Workbench.jml</li>
          <li>_Me.jazz</li>
        </ul>
        <p></p>
The first 4 files are setting files automatically managed by Jazz. Still, it is a good idea to familiarize yourself with their content as they play an important role and are meant to be extremely readable.         <p></p>
The fourth file, is a Jazz class that represents you! It is a great place to put customization code or any code that you are experimenting with until it migrates to a full fledged independant class.       </span>
      <span>
        <p></p>
        <b>Login to an existing profile</b>
        <p></p>
Next time you login, as your profile directory will not be empty anymore, you will be presented the list of profiles found in it. Just select the desired profile from the list and click Login.         <p></p>
        <img src="images/walkthroughs/login_existing.png"/>
      </span>
      <span>
        <p></p>
        <b>Jedi IDE</b>
        <p></p>
Welcome to the Jedi IDE!        <p></p>
        <img src="images/walkthroughs/jedi.png"/>
      </span>
      <span>
        <p></p>
        <b>Workspaces</b>
        <p></p>
One thing you will notice if you look at the right end side of the toolbar, is a set of 4 icons :         <p></p>
        <img src="images/walkthroughs/workspaces.png"/>
        <p></p>
These buttons can be used to switch the active workspace. Workspaces are groups of related windows, tools, ... that are activated together.         <p></p>
Jedi comes with the following workspaces installed :         <ul>
          <li>
            <span>
              <img src="images/common/workspace_home.png"/>
Home            </span>
          </li>
          <li>
            <span>
              <img src="images/common/workspace_text.png"/>
Text            </span>
          </li>
          <li>
            <span>
              <img src="images/common/workspace_debugger.png"/>
Debugger            </span>
          </li>
          <li>
            <span>
              <img src="images/common/workspace_groupware.png"/>
Groupware            </span>
          </li>
        </ul>
        <p></p>
For instance, the text workspace gives you text related tools like Chapters and Hierarchy.         <p></p>
        <img src="images/walkthroughs/workspaces_text.png"/>
        <p></p>
Note that common tools like the Console are accessible in any workspace.       </span>
    </div>
    <div>
      <a name="walkthrough.cataloging-code"></a>
      <h4 class="section2">Cataloging an existing code base</h4>
For this walkthrough we will catalog the Gambit library.       <span>
        <p></p>
        <b>Workbench</b>
        <p></p>
First we need to add a project to the workbench for Gambit.         <p></p>
        <img src="images/walkthroughs/catalog_project.png"/>
        <span>
          <p></p>
          <b>Add Project</b>
          <p></p>
Note that a project is actually a full-fledged class. This gives projects alot of runtime flexibility but places some constraints on project names. Lets call the project: "Gambit-Project".           <p></p>
          <img src="images/walkthroughs/catalog_add.png"/>
        </span>
        <span>
          <p></p>
          <b>Properties</b>
          <p></p>
Right-click on the project's icon and select "Properties".           <p></p>
          <img src="images/walkthroughs/catalog_properties_menu.png"/>
          <p></p>
Then, click the "Title" property to edit it. We'll give the project a nicer title, simply "gambit".           <p></p>
          <img src="images/walkthroughs/catalog_properties.png"/>
        </span>
        <span>
          <p></p>
          <b>Import</b>
          <p></p>
Now add the Gambit library directory to the project by selecting "Import Directory..." from the project's context menu.           <p></p>
          <img src="images/walkthroughs/catalog_import.png"/>
          <p></p>
Locate your Gambit source directory and select "lib".           <p></p>
          <img src="images/walkthroughs/catalog_directory.png"/>
        </span>
        <span>
          <p></p>
          <b>Catalog</b>
          <p></p>
Now catalog the project's source files. This will scan every source file in the project and build a full cross-references catalog containing information for each definition and every symbol referenced.           <p></p>
          <img src="images/walkthroughs/catalog_catalog.png"/>
        </span>
        <span>
          <p></p>
          <b>Explore</b>
          <p></p>
With your newly built catalog, edit the Gambit code implementing the           <code>create-symbolic-link</code>
 primitive. Click inside the console and type           <code>create-sy</code>
. Notice how Jedi was able to complete the symbol now that it knows about every Gambit definition.           <p></p>
          <img src="images/walkthroughs/catalog_complete.png"/>
          <p></p>
Now press alt-period or F12. This should edit           <code>create-symbolic-link</code>
's definition. Pressing control-alt-period or shift-F12 would have displayed a list of every definition referencing the           <code>create-symbolic-link</code>
 symbol.         </span>
      </span>
    </div>
    <div>
      <a name="walkthrough.debugging-gambit"></a>
      <h4 class="section2">Debugging an existing Gambit project</h4>
      <ul>
        <li><span>Coming Soon</span></li>
      </ul>
    </div>
    <div>
      <a name="walkthrough.exploring-views"></a>
      <h4 class="section2">Exploring the interface under the hood</h4>
One feature of the IDE that can be very useful to newcomers is the view explorer. Invoke the view explorer by selecting the "Debug / Explore Views (F8)" menu. You can now explore every UI object by simply mousing over them.       <span>
        <p></p>
        <b>Properties</b>
        <p></p>
Hovering will show a tooltip describing the object.         <p></p>
        <img src="images/walkthroughs/explore_views.png"/>
        <p></p>
      </span>
      <span>
        <p></p>
        <b>Actions</b>
        <p></p>
Right-clicking on an object will let you choose various actions. Here lets select "Edit Action" as we are interested in seeing the code that implements this button's action.         <p></p>
        <img src="images/walkthroughs/explore_menu.png"/>
      </span>
      <span>
        <p></p>
        <b>Edit</b>
        <p></p>
Jedi will open a text editor on the definition of the button implementing "Compare Directories".         <p></p>
        <img src="images/walkthroughs/explore_edit.png"/>
      </span>
      <span>
        <p></p>
        <b>Guest</b>
        <p></p>
In Jazz, views that want to be relocatable use a host / guest mecanism where guests can be moved from one host to another. Almost every tool you see in the IDE is implemented as a guest.         <p></p>
Understanding this, we will edit the source code implementing the "Catalogs Manager". Open the tool using the menu "Tool / Catalogs Manager". Press F8, position the mouse anywhere over the catalogs manager and right-click "Edit Guest".         <p></p>
        <img src="images/walkthroughs/explore_catalogs.png"/>
      </span>
      <span>
        <p></p>
        <b>Form</b>
        <p></p>
Jazz implements UI elements through the use of a powerfull markup language where even inheritance relationships be specified between components. A component (here the catalogs manager) specifies its descendants tree through the use of the         <code>form</code>
 special form.         <p></p>
        <img src="images/walkthroughs/explore_form.png"/>
        <p></p>
For fun, lets add a new button to the catalogs manager. Duplicate the line containing         <code>&lt;Push-Button&gt;</code>
 and rename every occurence of         <code>update</code>
 to         <code>test</code>
. We should also change its position to lets say         <code>{Point 4 7}</code>
.         <p></p>
        <img src="images/walkthroughs/explore_form_modified.png"/>
        <p></p>
Now right-click anywhere inside the form and select "Evaluate".         <p></p>
        <img src="images/walkthroughs/explore_evaluate.png"/>
        <p></p>
Now all we need is to do is add the         <code>on-test</code>
 method that will get called when we press your new button. Lets put it just after the form and make it do a simple         <code>debug</code>
 to the console.         <p></p>
Don't forget to evaluate your method before trying out the new button!         <p></p>
        <img src="images/walkthroughs/explore_method.png"/>
        <p></p>
Now lets try your new button. Close the current catalogs manager and open a new one. Your new "Test" button should be there.         <p></p>
        <img src="images/walkthroughs/explore_catalogs_new.png"/>
        <p></p>
Pressing the "Test" button should display the message to the console.         <p></p>
        <img src="images/walkthroughs/explore_console.png"/>
      </span>
    </div>
    <div>
      <a name="walkthrough.code"></a>
      <h4 class="section2">Executing code</h4>
      <ul>
        <li>Coming Soon</li>
      </ul>
    </div>
    <div>
      <a name="walkthrough.jazz"></a>
      <h3>Jazz Platform</h3>
    </div>
    <div>
      <a name="walkthrough.view"></a>
      <h4 class="section2">A simple graphical view</h4>
      <ul>
        <li>Coming Soon</li>
      </ul>
    </div>
    <div>
      <a name="walkthrough.application"></a>
      <h4 class="section2">A basic application</h4>
      <ul>
        <li>Coming Soon</li>
      </ul>
    </div>
    <div id="footer">
      <p>Copyright &copy; 1996-2008 Guillaume Cartier</p>
    </div>
  </div>
</div>
</body>

</html>
