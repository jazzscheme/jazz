<html>

<head>
  <link href="css/master.css" rel="stylesheet" type="text/css"/>
  <title>Walkthroughs</title>
</head>

<body>
<div id="page">
  <h1 id="title">JazzScheme</h1>
  <div id="sectionnav">
    <a class="section" href="index.htm">Home</a>
    <a class="section" href="news.htm">News</a>
    <a class="section" href="features.htm">Features</a>
    <a class="section" href="screenshots.htm">Screenshots</a>
    <a class="section" href="walkthroughs.htm">
      <b>Walkthroughs</b>
    </a>
    <a class="section" href="documentation.htm">Documentation</a>
    <a class="section" href="development.htm">Development</a>
    <a class="section" href="download.htm">Download</a>
  </div>
  <div id="content">
    <div>
      <a name="#f"></a>
      <h3>Walkthroughs</h3>
      <span>
        <p></p>
        <b>Installation</b>
        <p></p>
        <ul>
          <li>
            <a href="walkthroughs.htm#walkthrough.installing-repository">Installing from a Git repository</a>
          </li>
          <li>
            <a href="walkthroughs.htm#walkthrough.installing-unix">Installing from a Mac OS X / Linux binary release</a>
          </li>
          <li>
            <a href="walkthroughs.htm#walkthrough.installing-windows">Installing from a Windows binary release</a>
          </li>
        </ul>
      </span>
      <span>
        <p></p>
        <b>Jedi IDE</b>
        <p></p>
        <ul>
          <li>
            <a href="walkthroughs.htm#walkthrough.cataloging-code">Cataloging an existing code base</a>
          </li>
          <li>
            <a href="walkthroughs.htm#walkthrough.debugging-gambit">Debugging an existing Gambit project</a>
          </li>
          <li>
            <a href="walkthroughs.htm#walkthrough.exploring-views">Exploring the interface under the hood</a>
          </li>
          <li>
            <a href="walkthroughs.htm#walkthrough.code">Executing code</a>
          </li>
          <li>
            <a href="walkthroughs.htm#walkthrough.class">Creating classes</a>
          </li>
        </ul>
      </span>
      <span>
        <p></p>
        <b>Jazz Platform</b>
        <p></p>
        <ul>
          <li>
            <a href="walkthroughs.htm#walkthrough.view">A simple graphical view</a>
          </li>
          <li>
            <a href="walkthroughs.htm#walkthrough.application">A basic application</a>
          </li>
        </ul>
      </span>
    </div>
    <div>
      <a name="walkthrough.installation"></a>
      <h3>Installation</h3>
    </div>
    <div>
      <a name="walkthrough.installing-repository"></a>
      <h4 class="section2">Installing from a Git repository</h4>
If you want to stay closely up-to-date on JazzScheme development or plan on contributing, you should install from a repository. JazzScheme uses Git to store all development files.       <p></p>
To install from a repository you will need :       <ul>
        <li>
          <span>
            <a href="http://git.or.cz/">Git</a>
 installed on your machine          </span>
        </li>
        <li>
          <span>
The latest version of             <a href="http://www.iro.umontreal.ca/~gambit/">Gambit</a>
          </span>
        </li>
      </ul>
      <span>
        <p></p>
        <b>Clone the repository</b>
        <p></p>
Clone the JazzScheme repository (only once). This will create a 'jazz' directory containing all development files. <pre class="code_light">$ <b>cd ~</b>

$ <b>git clone &lt;repository address&gt; jazz</b>
Initialized empty Git repository in ~/jazz/.git/
got 0bf73166990a41c20627f6b935317bdc25a4e257
...
walk 1ba2fb1ad98ed81b62e2827639b71d6ec9b0ae9c
Checking out files: 100% (3284/3284), done.

$ <b>cd jazz</b></pre>      </span>
      <span>
        <p></p>
        <b>Create a branch</b>
        <p></p>
After you clone the repository, you should never modify the master branch as it will make subsequent pulls more prone to failure. This can easily happen if you modify files in the Jazz source tree when experimenting around. You should always work in your own branch, lets say 'work'. <pre class="code_light">$ <b>git branch work</b>

$ <b>git checkout work</b>
Switched to branch "work"</pre>      </span>
      <span>
        <p></p>
        <b>Build Jazz and the Jedi IDE</b>
        <p></p>
Building follows the usual configure / make methodology. The only unusual thing is that, as the underlying Scheme already represents a platform independant abstraction, there is no need to use the low-level GNU tools. The build system is fully implemented using the underlying Scheme, Gambit in this case. <pre class="code_light">$ <b>gsc</b>
JazzScheme Build System v2.0.0

$ <b>configure</b>
&lt;default&gt;
  system: gambit
  platform: windows
  safety: release

$ <b>make jedi</b>
...

$ <b>make all</b>
...

$ <b>quit</b></pre>      </span>
      <span>
        <p></p>
        <b>Launch the Jedi IDE</b>
        <p></p>
As the build system supports multiple configurations, first 'cd' into the install directory, on Windows this would be: "bin/GambitWindowsRelease", then launch Jedi. Note that launching the IDE is a good indicator of whether the installation was successful or not. <pre class="code_light">$ <b>cd bin/GambitWindowsRelease</b>

$ <b>./jedi</b></pre>      </span>
    </div>
    <div>
      <a name="walkthrough.installing-unix"></a>
      <h4 class="section2">Installing from a Mac OS X / Linux binary release</h4>
For every official release, we package full binaries for the following platforms :      <ul>
        <li>Mac OS X</li>
        <li>Windows</li>
        <li>Linux</li>
      </ul>
Binaries are a great way to tryout Jazz and the Jedi IDE without having to install Git or Gambit.       <p></p>
Note however that this option is not ideal if you want to stay closely up-to-date on JazzScheme development by pulling from a Git repository or if you plan on contributing.       <p></p>
Installation should work the same for both Mac OS X and Linux. We'll suppose we are installing on Mac OS X for the example.       <span>
        <p></p>
        <b>Download and extract the binaries</b>
        <p></p>
After downloading the binaries, cd to the download directory, then decompress and depackage the binaries. <pre class="code_light">$ <b>gunzip jazz-2.0.0-macosx-intel32.tar.gz</b>

$ <b>tar -xvf jazz-2.0.0-macosx-intel32.tar</b>
...</pre>      </span>
      <span>
        <p></p>
        <b>Launch the Jedi IDE</b>
        <p></p>
First, 'cd' into the install directory, in this case: "bin/GambitMacX11Release", then launch Jedi. Note that launching the IDE is a good indicator of whether the installation was successful or not. <pre class="code_light">$ <b>cd bin/GambitMacX11Release</b>

$ <b>./jedi</b></pre>      </span>
    </div>
    <div>
      <a name="walkthrough.installing-windows"></a>
      <h4 class="section2">Installing from a Windows binary release</h4>
For every official release, we package full binaries for the following platforms :      <ul>
        <li>Mac OS X</li>
        <li>Windows</li>
        <li>Linux</li>
      </ul>
Binaries are a great way to tryout Jazz and the Jedi IDE without having to install Git or Gambit.       <p></p>
Note however that this option is not ideal if you want to stay closely up-to-date on JazzScheme development by pulling from a Git repository or if you plan on contributing.       <p></p>
All source files come with standard Windows CR-LF end of lines.       <span>
        <p></p>
        <b>Download and extract the binaries</b>
        <p></p>
After downloading the binaries, unzip them to a suitable directory.       </span>
      <span>
        <p></p>
        <b>Launch the Jedi IDE</b>
        <p></p>
Locate the Jedi executable inside the "bin/GambitWindowsRelease" directory and launch it. Note that launching the IDE is a good indicator of whether the installation was successful or not.       </span>
    </div>
    <div>
      <a name="walkthrough.jedi"></a>
      <h3>Jedi IDE</h3>
    </div>
    <div>
      <a name="walkthrough.cataloging-code"></a>
      <h4 class="section2">Cataloging an existing code base</h4>
For this walkthrough we will catalog the Gambit library.       <span>
        <p></p>
        <b>Workbench</b>
        <p></p>
First we need to add a project to the workbench for Gambit.         <p></p>
        <img src="images/walkthroughs/catalog_project.png"/>
        <span>
          <p></p>
          <b>Add Project</b>
          <p></p>
Note that a project is actually a full-fledged class. This gives projects alot of runtime flexibility but places some constraints on project names. Lets call the project: "Gambit-Project".           <p></p>
          <img src="images/walkthroughs/catalog_add.png"/>
        </span>
        <span>
          <p></p>
          <b>Properties</b>
          <p></p>
Right-click on the project's icon and select "Properties".           <p></p>
          <img src="images/walkthroughs/catalog_properties_menu.png"/>
          <p></p>
Then, click the "Title" property to edit it. We'll give the project a nicer title, simply "gambit".           <p></p>
          <img src="images/walkthroughs/catalog_properties.png"/>
        </span>
        <span>
          <p></p>
          <b>Import</b>
          <p></p>
Now add the Gambit library directory to the project by selecting "Import Directory..." from the project's context menu.           <p></p>
          <img src="images/walkthroughs/catalog_import.png"/>
          <p></p>
Locate your Gambit source directory and select "lib".           <p></p>
          <img src="images/walkthroughs/catalog_directory.png"/>
        </span>
        <span>
          <p></p>
          <b>Catalog</b>
          <p></p>
Now catalog the project's source files. This will scan every source file in the project and build a full cross-references catalog containing information for each definition and every symbol referenced.           <p></p>
          <img src="images/walkthroughs/catalog_catalog.png"/>
        </span>
        <span>
          <p></p>
          <b>Explore</b>
          <p></p>
With our newly built catalog, lets edit the Gambit code implementing the           <code>create-symbolic-link</code>
 primitive. Click the console and type           <code>create-sy</code>
. Notice how Jedi was able to complete the symbol.           <p></p>
          <img src="images/walkthroughs/catalog_complete.png"/>
          <p></p>
Now press alt-period or F12. This should edit           <code>create-symbolic-link</code>
's definition. Pressing control-alt-period or shift-F12 would have displayed a list of every definition referencing the           <code>create-symbolic-link</code>
 symbol.         </span>
      </span>
    </div>
    <div>
      <a name="walkthrough.debugging-gambit"></a>
      <h4 class="section2">Debugging an existing Gambit project</h4>
      <ul>
        <li><span>Coming Soon</span></li>
      </ul>
    </div>
    <div>
      <a name="walkthrough.exploring-views"></a>
      <h4 class="section2">Exploring the interface under the hood</h4>
One feature of the IDE that can be very usefull to newcomers is the view explorer. Invoke the view explorer by selecting the "Debug / Explore Views (F8)" menu. You can now explore every UI object by simply mousing over them.       <span>
        <p></p>
        <b>Properties</b>
        <p></p>
Hovering will show a tooltip describing the object.         <p></p>
        <img src="images/walkthroughs/explore_views.png"/>
        <p></p>
      </span>
      <span>
        <p></p>
        <b>Actions</b>
        <p></p>
Right-clicking on an object will let you choose various actions. Here lets select "Edit Action" as we are interested in seeing the code that implements this button's action.         <p></p>
        <img src="images/walkthroughs/explore_menu.png"/>
      </span>
    </div>
    <div>
      <a name="walkthrough.code"></a>
      <h4 class="section2">Executing code</h4>
      <b>
        <u>Warning! This walkthrough is somewhat outdated as it was written for the old pre-Gambit Jazz. </u>
      </b>
      <span>
        <p></p>
        <b>Installation</b>
        <p></p>
        <span>After installing JazzScheme, open up the bin directory and execute jedi.exe to start Jedi, the JazzScheme IDE.</span>
      </span>
      <span>
        <p></p>
        <b>Login</b>
        <p></p>
Next, you will see the Login dialog used to choose or create your Jedi user:        <p></p>
        <img src="images/walkthroughs/login.png"/>
        <p></p>
Note that the default setup you see here will create your new user in the standard Users directory located just under the distribution folder.         <p></p>
Next time you login, as your Users directory will not be empty anymore, you will be presented the list of users found in it. Just select your user from the list and click Login.      </span>
      <span>
        <p></p>
        <b>User</b>
        <p></p>
Logging in with a new user         <code>Me</code>
 will create 4 files inside your         <code>Me</code>
 user folder:        <p></p>
        <ul>
          <li><span>Bindings.jml</span></li>
          <li><span>Preferences.jml</span></li>
          <li><span>WebServers.jml</span></li>
          <li><span>Workbench.jml</span></li>
          <li><span>_Me.jazz</span></li>
        </ul>
        <p></p>
        <span>The first four files are setting files automatically managed by Jazz. Still, it is a good idea to familiarize yourself with their content as they play an important role and are meant to be extremelly readable.</span>
        <p></p>
        <span>The fourth file, is a Jazz class that represents you! It is a great place to put customization code or any code that you are experimenting with until it migrates to a full fledged independant class.</span>
      </span>
      <span>
        <p></p>
        <b>Console</b>
        <p></p>
The Console is used to evaluate Jazz code. Use it to experiment freely.        <p></p>
        <img src="images/walkthroughs/console.png"/>
        <p></p>
Select the Console either by clicking inside it or by using the Control-Alt-Space shortcut.         <ul>
          <li><span>Be carefull, the Console is a full fledged text. The freedom of beeing inside a freely editable text can be surprising to new users. Expressions to be evaluated must be entered at the end. Note that Control-Alt-Space can be used anytime to force a fresh prompt at the end.</span></li>
          <li><span>Tab and Shift-Tab can be used to insert previous expressions. Note that the previous expression does not replace the current line but is inserted. This enables one to type some text, use Tab to insert a previous expression, continue typing, ...</span></li>
          <li><span>Another convenient way to access previous expressions, is to place the cursor on the line you want and press Enter. This will copy that line to a fresh line at the bottom.</span></li>
        </ul>
      </span>
    </div>
    <div>
      <a name="walkthrough.class"></a>
      <h4 class="section2">Creating classes</h4>
      <b>
        <u>Warning! This walkthrough is somewhat outdated as it was written for the old pre-Gambit Jazz. </u>
      </b>
      <span>
        <p></p>
        <b>Workbench</b>
        <p></p>
Jazz code must reside inside a unit. A unit can be anyone of :        <ul>
          <li>Class</li>
          <li>Interface</li>
          <li>Package</li>
        </ul>
        <p></p>
To be accesible to Jazz, a unit must be installed in the Workbench. Use the Workbench Manager, the window at the top left to add new units to the workbench or import existing ones from the file system.        <p></p>
        <img src="images/walkthroughs/workbench_me.png"/>
      </span>
      <span>
        <p></p>
        <b>Workspaces</b>
        <p></p>
Now, open your Me.jazz user class by double-clicking it in the worbench. One thing you will notice if you look at the right end side of the toolbar, is that the current workspace is now the Text workspace.         <p></p>
        <img src="images/walkthroughs/workspaces_text.png"/>
        <p></p>
This happened automatically when you edited your Me.jazz class. Note that this workspace gives you access to text related tools like the Chapters and Hierarchy tools. Also note that common tools like the Console are accessible in any workspace.         <p></p>
Available workspaces are:        <ul>
          <li>Home</li>
          <li>Debugger</li>
          <li>Groupware</li>
          <li>Text</li>
        </ul>
        <p></p>
Note that there are other workspaces in the distribution, but because of their experimental or incomplete nature, they are not installed by default. One that is partially completed and that might be of interest is a full featured GUI designer.      </span>
      <span>
        <p></p>
        <b>Code</b>
        <p></p>
Enter the following method:        <p></p>
<pre class="code">(<span class="keyword">method</span> (<span class="definition">random-element</span> seq)
  (element seq (random (length seq))))</pre>        <p></p>
Evaluate it by placing the cursor anywhere inside it and hitting Enter. The         <code>random-element</code>
 method is now defined! You can easily experiment with it in the Console. Try evaluating         <code>(random-element '(a b c d e))</code>
 a couple times...      </span>
      <span>
        <p></p>
        <b>Free References</b>
        <p></p>
Enter the following method:<pre class="code">(<span class="keyword">method</span> (<span class="definition">count</span> target seq . rest)
  (bind-keywords ((key identity) (test eqv?)) rest
    (let ((total 0))
      (for-each (function (object)
                  (when (target (keyed object))
                    (increase total)))
                seq)
      total)))</pre>        <p></p>
When you evaluate it, you will get:        <p></p>
        <img src="images/walkthroughs/walk_error.png"/>
        <p></p>
The Jazz codewalker detected references to the free symbols         <code>keyed</code>
 and         <code>increase</code>
. Note that our typos where catched early without having to actually execute the code.         <p></p>
If you know where the free symbols are, you can click Ignore. Else, click the Highlight button that will highlight them for you:        <p></p>
<pre class="code">(<span class="keyword">method</span> (<span class="definition">count</span> target seq . rest)
  (bind-keywords ((key identity) (test eqv?)) rest
    (let ((total 0))
      (for-each (function (object)
                  (when (target (<span class="highlighted">keyed</span> object))
                    (<span class="highlighted">increase</span> total)))
                seq)
      total)))</pre>      </span>
      <span>
        <p></p>
        <b>Debugging</b>
        <p></p>
Correct the previous free references by changing         <code>keyed</code>
 to         <code>key</code>
 and         <code>increase</code>
 to         <code>increase!</code>
. You can now reevale the method by presse control-enter from anywhere inside the method.        <p></p>
Lets try our new method by evaluating         <code>(count 'a '(a b a a d c))</code>
 in the Console. You will get:        <p></p>
        <img src="images/walkthroughs/count_error.png"/>
        <p></p>
If you know what the problem is from just reading the error message, click Ignore. Else, click the Debug button that will bring up the debugger:        <p></p>
        <a href="images/walkthroughs/count_debugged.png"><img src="images/walkthroughs/count_debugged_small.png"/></a>
      </span>
    </div>
    <div>
      <a name="walkthrough.jazz"></a>
      <h3>Jazz Platform</h3>
    </div>
    <div>
      <a name="walkthrough.view"></a>
      <h4 class="section2">A simple graphical view</h4>
      <b>
        <u>Warning! This walkthrough is somewhat outdated as it was written for the old pre-Gambit Jazz. </u>
      </b>
      <span>
        <p></p>
        <b>Install</b>
        <p></p>
First, install the jazz.samples product in your Workbench. To do this, right-click your Workbench icon, select "Install Product..." and open inside your installation folder the Products/jazz.samples/jazz.samples.jazz file.      </span>
      <span>
        <p></p>
        <b>Run</b>
        <p></p>
Execute the following code at the Console:        <p></p>
<pre>(new-frame~ Mandelbrot)</pre>        <p></p>
This is a very simple view I did to show my son how the Mandelbrot set was calculated. Now it can be used to learn how Jazz graphical views work!        <p></p>
        <ul>
          <li>More coming soon. </li>
        </ul>
      </span>
    </div>
    <div>
      <a name="walkthrough.application"></a>
      <h4 class="section2">A basic application</h4>
      <ul>
        <li>Coming Soon</li>
      </ul>
    </div>
    <div id="footer">
      <p>Copyright &copy; 1996-2008 Guillaume Cartier</p>
    </div>
  </div>
</div>
</body>

</html>
