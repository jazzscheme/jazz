;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; JazzScheme Website
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(<website> name: jazz title: "JazzScheme"
  ;;;
  ;;;; Home
  ;;;
  (<section> name: home title: "Home"
    (<article> name: welcome title: "About JazzScheme"
      (<description>
        "JazzScheme is a development system based on extending the "
        (<a> href: "http://www.schemers.org/Documents/Standards/R5RS/HTML/" "Scheme")
        "programming language and the "
        (<a> href: "http://www.iro.umontreal.ca/~gambit/" "Gambit")
        "system. "
        "It includes a module system, hygienic macros, object-oriented programming, a full-featured cross-platform application framework, a fully programmable IDE and a build system that creates executable binaries for Mac OS X, Windows and Linux. JazzScheme has been used for more than 15 years to develop commercial software. "))
    (<article> name: news title: "News"
      (<description>
        (<node>
          (<span> "2011-04-12 - " (<a> href: "news.htm#2011-04-12" "JazzScheme 2.4, 2.5 and 2.6 released"))
          (<span> "2010-08-21 - " (<a> href: "news.htm#2010-08-21" "Presentation at the 2010 Workshop on Scheme and Functional Programming"))
          (<span> "2010-03-22 - " (<a> href: "news.htm#2010-03-22" "JazzScheme 2.3 released"))
          (<span> "2009-10-19 - " (<a> href: "news.htm#2009-10-19" "JazzScheme embraces its Scheme destiny!"))
          (<span> "2009-06-27 - " (<a> href: "news.htm#2009-06-27" "Auphelia Technologies to use JazzScheme for their new ERP software"))
          (<span> "2009-01-26 - " (<a> href: "news.htm#2009-01-26" "JazzScheme Publicly Released"))
          (<span> "2008-12-24 - " (<a> href: "news.htm#2008-12-24" "Closed-beta Release to the discusion group members"))
          (<span> "2008-11-27 - " (<a> href: "news.htm#2008-11-27" "Presentation at the MSLUG and closed-beta release"))
          (<span> "2008-11-06 - " (<a> href: "news.htm#2008-11-06" "X11 Port and Debugger Update"))
          (<span> "2008-09-26 - " (<a> href: "news.htm#2008-09-26" "Public Open-Source Release Update"))
          (<span> "2008-04-30 - " (<a> href: "news.htm#2008-04-30" "Contract awarded to use the new Gambit based JazzScheme"))
          (<span> "2008-04-29 - " (<a> href: "news.htm#2008-04-29" "Progress update"))
          (<span> "2008-02-04 - " (<a> href: "news.htm#2008-02-04" "New build system fully implemented in Gambit"))
          (<span> "2007-11-11 - " (<a> href: "news.htm#2007-11-11" "New Gambit based kernel now faster than the old C++ kernel!"))
          (<span> "2007-09-26 - " (<a> href: "news.htm#2007-09-26" "Jedi running under the new Gambit based kernel"))
          (<span> "2007-08-08 - " (<a> href: "news.htm#2007-08-08" "Presentation at the lispvan"))
          (<span> "2007-05-28 - " (<a> href: "news.htm#2007-05-28" "JazzScheme 1.0b6 available"))
          (<span> "2007-05-14 - " (<a> href: "news.htm#2007-05-14" "Work on porting JazzScheme to X11 and Macintosh started"))
          (<span> "2007-05-03 - " (<a> href: "news.htm#2007-05-03" "JazzScheme 1.0b5 available"))
          (<span> "2007-04-23 - " (<a> href: "news.htm#2007-04-23" "JazzScheme public beta released"))
          (<span> "2007-01-12 - " (<a> href: "news.htm#2007-01-12" "JazzScheme ported to Visual Studio 2005"))
          (<span> "2006-12-13 - " (<a> href: "news.htm#2006-12-13" "Presentation at the MSLUG"))
          (<span> "2006-12-12 - " (<a> href: "news.htm#2006-12-12" "Montreal company to use JazzScheme"))
          (<span> "2006-11-22 - " (<a> href: "news.htm#2006-11-22" "Website goes live")))))
    (<article> name: vision title: "Vision"
      (<description>
        "JazzScheme was born in 1996 out of some profound convictions:"
        (<node>
          (<span> "Lisp is one of the greatest tools to experiment with new concepts and implement them. ")
          (<span> "There is no single truth in computer science and Lisp's meta-language capabilities and dynamic nature makes it the ideal language to unify in a coherent approach many great paradigms like:")
          (<node>
            (<span> "Functional programming")
            (<span> "Object-Oriented programming")
            (<span> "Component programming"))
          ;;Richard Gabriel argue that Unix and C came to lead because implementation simplicity is as important as interface simplicity
          ;;(<span> "A language's implementation is as important as the language itself. The implementation should be totally transparent, available, simple, clean, user modifiable, ...")
          ;;(<span> "A language should not be only designed. It should come out of a constant interplay between dreams and design and using it in real world constraints and problems")
          (<span> "The Lisp community should not be dreaming of sophisticated GUIs and IDEs but instead be the one pushing the boundaries of what can be accomplished!"))
        (<cite> "&#8216;&#8216;A language that doesn't affect the way you think about programming, is not worth knowing.&#8217;&#8217; -- Alan J. Perlis")))
    (<article> name: mission title: "Mission"
      (<description>
        (<node>
          (<span> "Promote the use of Lisp based languages")
          (<node>
            (<span> "Not by trying to convince people of their advantages")
            (<span> "But by enabling people to create and commercialize radical products that would have been almost impossible to develop using mainstream languages (time, cost, feasibility, ...)"))
          (<span> "In the long run, enable more Lisp/Scheme programmers to develop at work in the language they love :)")
          (<span> "Bring back joy to programming!"))))
    (<article> name: os title: "Operating Systems"
      (<description>
        "The Jazz kernel runs on most operating systems. It is entirely written in mostly portable pure Scheme with the wonderfull" (<a> href: "http://www.iro.umontreal.ca/~gambit/" "Gambit") "Scheme system as primary target. "
        (<p>)
        "The cross-platform GUI is a high level framework written in Jazz that uses" (<a> href: "http://cairographics.org/" "Cairo") " for backend. "
        "It runs on Windows and X11. "
        "On Mac OS X, the X11 version can be used and works very well. "))
    (<article> name: license title: "License"
      (<description>
        "JazzScheme is released under a dual "
        (<a> href: "http://www.mozilla.org/MPL/MPL-1.1.html" "Mozilla Public License Version 1.1")
        " or "
        (<a> href: "http://www.gnu.org/copyleft/gpl.html" "GNU General Public License v2 or later")
        ". Choose whichever license you prefer. "))
    (<article> name: discussion-group title: "Community"
      (<description>
        "If you are interested in JazzScheme, you can join our discussion group at "
        (<a> href: "http://groups.google.com/group/jazzscheme" "http://groups.google.com/group/jazzscheme")
        @WAIT (<p>)
        @WAIT "You can also come chat with us on IRC in the #jazzscheme channel on Freenode. "))
    (<article> name: contact-info title: "Contact Info"
      (<description>
        (<a> href: "mailto:gcartier@jazzscheme.org" "gcartier@jazzscheme.org")))
      ;; (<article> name: roadmap title: "Roadmap")
      ;; (<article> name: future title: "Future")
      ;; (<article> name: help title: "Help")
      ;; (<article> name: description title: "Description")
      ;; (<article> name: goals title: "Goals")
      )
  ;;;
  ;;;; News
  ;;;
  (<section> name: news title: "News"
    (<article> title: "News"
      (<description>
        (<node>
          (<span> "2011-04-12 - " (<a> href: "news.htm#2011-04-12" "JazzScheme 2.4, 2.5 and 2.6 released"))
          (<span> "2010-08-21 - " (<a> href: "news.htm#2010-08-21" "Presentation at the 2010 Workshop on Scheme and Functional Programming"))
          (<span> "2010-03-22 - " (<a> href: "news.htm#2010-03-22" "JazzScheme 2.3 released"))
          (<span> "2009-10-19 - " (<a> href: "news.htm#2009-10-19" "JazzScheme embraces its Scheme destiny!"))
          (<span> "2009-06-27 - " (<a> href: "news.htm#2009-06-27" "Auphelia Technologies to use JazzScheme for their new ERP software"))
          (<span> "2009-01-26 - " (<a> href: "news.htm#2009-01-26" "JazzScheme Publicly Released"))
          (<span> "2008-12-24 - " (<a> href: "news.htm#2008-12-24" "Closed-beta Release to the discusion group members"))
          (<span> "2008-11-27 - " (<a> href: "news.htm#2008-11-27" "Presentation at the MSLUG and closed-beta release"))
          (<span> "2008-11-06 - " (<a> href: "news.htm#2008-11-06" "X11 Port and Debugger Update"))
          (<span> "2008-09-26 - " (<a> href: "news.htm#2008-09-26" "Public Open-Source Release Update"))
          (<span> "2008-04-30 - " (<a> href: "news.htm#2008-04-30" "Contract awarded to use the new Gambit based JazzScheme"))
          (<span> "2008-04-29 - " (<a> href: "news.htm#2008-04-29" "Progress update"))
          (<span> "2008-02-04 - " (<a> href: "news.htm#2008-02-04" "New build system fully implemented in Gambit"))
          (<span> "2007-11-11 - " (<a> href: "news.htm#2007-11-11" "New Gambit based kernel now faster than the old C++ kernel!"))
          (<span> "2007-09-26 - " (<a> href: "news.htm#2007-09-26" "Jedi running under the new Gambit based kernel"))
          (<span> "2007-08-08 - " (<a> href: "news.htm#2007-08-08" "Presentation at the lispvan"))
          (<span> "2007-05-28 - " (<a> href: "news.htm#2007-05-28" "JazzScheme 1.0b6 available"))
          (<span> "2007-05-14 - " (<a> href: "news.htm#2007-05-14" "Work on porting JazzScheme to X11 and Macintosh started"))
          (<span> "2007-05-03 - " (<a> href: "news.htm#2007-05-03" "JazzScheme 1.0b5 available"))
          (<span> "2007-04-23 - " (<a> href: "news.htm#2007-04-23" "JazzScheme public beta released"))
          (<span> "2007-01-12 - " (<a> href: "news.htm#2007-01-12" "JazzScheme ported to Visual Studio 2005"))
          (<span> "2006-12-13 - " (<a> href: "news.htm#2006-12-13" "Presentation at the MSLUG"))
          (<span> "2006-12-12 - " (<a> href: "news.htm#2006-12-12" "Montreal company to use JazzScheme"))
          (<span> "2006-11-22 - " (<a> href: "news.htm#2006-11-22" "Website goes live")))))
    (<article> name: 2011-04-12 title: "2011-04-12 - JazzScheme 2.4, 2.5 and 2.6 released"
      (<description>
        "JazzScheme 2.4, 2.5 and 2.6 are now available. "
        "See " (<a> href: "installation.htm" "Installation") " for details on installing Jazz and Jedi. "
        (<p>)
        (<br>)
        "NEW IN 2.5 and 2.6"
        (<br>)
        (<br>)
        "Setup"
        (<p>)
        (<node>
          "Now using Git submodules to manage the dependencies between Jedi, Jazz and Gambit"
          "Created a fully bootstrappable Gambit repository now included as a submodule of Jazz"
          "Added a jam script to manage everything build and repository related")
        (<p>)
        "Build"
        (<p>)
        (<node>
          "Use TCP ports for robust subprocess parallel build"
          "Added a -dry kernel build option"
          "Added .jamini to customize configure options")
        (<p>)
        "Kernel"
        (<p>)
        (<node>
          "Removed the hardcoded HOME/jazz_user repository"
          "Now generating a clean kernel-interpret script instead of the old .gambcini hack"
          "Added a kernel -nosource option to simulate the deployment environment"
          "Added support for specifying chained binary repositories"
          "Added a -l (local) option to jam to not update the submodules")
        (<p>)
        "Language"
        (<p>)
        (<node>
          "Added reference reification"
          "Added assertions to special forms and related validation suite test cases"
          "Exemplars are now full-fledged class-based prototypes"
          "Colors and fonts and all user configuration classes are now exemplars"
          "Module reference syntax is now a.b.c:x"
          "Changed core syntax from jazz. to jazz:"
          "Added scripting support through a script special-form and a load-script function")
        (<p>)
        "Library"
        (<p>)
        (<node>
          "Added Windows support for OpenGL GLUT"
          "Use the new continuation-checkpoint for C frames protection"
          "Implemented a cross-platform color chooser with user-customisable live feedback"
          "New hierarchical aliases"
          "Added push/pop-focus to implement keyboard-navigable menus"
          "Added location info to crash snapshots"
          "New grid infrastructure"
          "Added support for Gambit readtables"
          "Added basic JSON support"
          "Refactored the text to a model / view architecture")
        (<p>)
        "Jedi"
        (<p>)
        (<node>
          "Added a new workspace for formatted editing"
          "In the login dialog holding the shift key after login will skip the 'Always use this profile' setting"
          "Generalized versioned-directory"
          "Moved profiles to versioned .jedi dir"
          "Dynamic evaluation now collects export / import initial forms")
        (<p>)
        "Projects"
        (<p>)
        (<node>
          "Major rework of everything project related"
          "Projects are now pure data so that Jedi does not need access to the project modules anymore"
          "Pathnames imported in a project will be relative to the project when possible"
          "Can now create or install a project at any level in the workbench"
          "Added a projects manager window to activate / deactivate projects"
          "Added Synchronize Content to workbench directory menu"
          "Added searching project files"
          "Not finding the active-project doesn't stop Jedi from launching anymore")
        (<p>)
        "Search"
        (<p>)
        (<node>
          "Major recoding of everything search related"
          "Now cataloging a.b.X and a:b:c references"
          "Who-calls now automatically selects the first occurence"
          "Added declaration and selection searching"
          "Incremental search replace-all with replace highlighting"
          "Added n of m feedback to incremental search"
          "Added splitting support similar to emacs c-x c-1,2,3,0 using the new model / view text"
          "Integrated the highlighting framework to the incremental search")
        (<p>)
        "Designer"
        (<p>)
        (<node>
          "Major work on the UI designer")
        (<p>)
        "Customisation"
        (<p>)
        (<node>
          "Work on making every part of the UI skinnable"
          "Made the following UI elements user customisable :"
          (<node>
            "Bindings"
            "Colors"
            "Fonts"
            "Skins"
            "Text formats and styles"
            "Workspaces"))
        (<br>)
        "ON THE HORIZON"
        (<p>)
        (<node>
          "Support for multiple backends"
          "Experimental JavaScript backend"
          "Experimental Objective-C backend")
        (<p>)
        (<br>)
        "NEW IN 2.4"
        (<br>)
        (<br>)
        "Kernel"
        (<p>)
        (<node>
          " Added support for .jazz settings automatic versioning"
          " Added a script to walk all units that can be invoked with -run walk"
          " Added -emit to the kernel to save emitted scheme code"
          " Added a -build option to the kernel to build a product without its dependencies"
          " Now loading .buildini before setting up repositories"
          " Added (jazz.warn-interpreted? 'stack) to display load-stack"
          " .jazzini and .buildini are now also searched in the current directory"
          " Added -keep-c and -expansion options to -compile"
          " Improved error reporting for circular unit dependencies")
        (<p>)
        "Build System"
        (<p>)
        (<node>
          " Added a new mutable-bindings? build flag"
          " Obliterate timestamps in libraries, executables and .o1 to support stable builds"
          " Added make cleanlibrary and make cleanobject to the build system"
          " Added a new 'all' build system target to build jedi and all the samples"
          " Added support for multiple binary repositories"
          " Added a kernel option to specify the build repository: -build-repository"
          " Added kernel options for specifying repositories: -jazz-repository -user-repository -repositories")
        (<p>)
        "Language"
        (<p>)
        (<node>
          " Added types for DSSSL special markers (#!optional, #!key and #!rest)"
          " Added base64 module (from Gambit's examples)"
          " Now supporting slots in meta classes")
        (<p>)
        "Framework"
        (<p>)
        (<node>
          " Separated branches into traits and branches"
          " Unified view properties: action and action-handler"
          " Optimized merge-cell drawing"
          " Lexicon cleanup for outlines: site: row column, cell: line col"
          " Added a glyph index cache (major speed up)"
          " Added a cache for opaque images (major speed up)"
          " Now calling cairo_win32_surface_create_with_ddb to create the offscreen on Windows (5x speed up in the blit)"
          " Made memory surfaces use CAIRO_FORMAT_RGB24 (with 4x speed gain)"
          " Major optimization of the paint algorithm"
          " Added various flags to make component destruction a lot more robust"
          " Cleanup of the argument/setting concept that is now called parameter"
          " Work on external frames"
          " Major work in the focus activation code"
          " Removed flicker by adding a new user-feedback function to use when immediate update is needed"
          " Snapshots now save object content recursively controlled by max-depth: default 1"
          " Added basic support for fontconfig to access system fonts"
          " Unified focusable? and selectable? properties so that we now have in progression: enabled? selectable? editable?"
          " Added support for views in merged-cells"
          " Big cleanup of every image related module")
        (<p>)
        "IDE"
        (<p>)
        (<node>
          " Added a simple skins manager in the tools menu"
          " Skins are now user configurable from a Skins.jml settings file"
          " Added skin support"
          " Work on making IDE functionality more modular"
          " Added favorites support"
          " Added a new profiling-advice"
          " Added prefixed advice: (advice 'jazz.ui.* ...)"
          " Added debug-avice + Improved trace-advice output"
          " Added a new advice function and support for runtime introspection"
          " Added jazz.git.ui with a simple Git-Explorer class"
          " Various improvements to the SQL workspace"
          " Search dialog / Projects tab: Greatly improved response time + Everything can now be used (Whole Words, Ignore Case and even Regexp!)"
          " Now standardizing the profile argument so it doesn't need to be capitalized anymore"
          " Loging dialog default profile can now be specified using -default-profile"
          " The minibuffer can now be hidden/shown automatically"
          " Basic commands like c-a and c-e now auto exit incremental search"
          " First implementation of multi-stage management 'a la emacs'"
          " Added support for multiple independent stages"
          " Added support for many emacs c-x commands"
          " Added cataloging for colors and fonts")
        (<p>)
        "Editor"
        (<p>)
        (<node>
          " Improved ctrl-alt-i display-info to show declaration hierarchy"
          " Added a pulse-caret? text-preferences property"
          " Added missing tabulation for various common lisp forms"
          " Modified c-a logic to be more emacs compatible"
          " Improved Chapters / Hierarchy navigation with double-click, return, escape and c-g support"
          " Now sorting Chapters and Hierarchy by default"
          " Added support for highlighting matching characters"
          " Incremental search can now be used in any text including the console")
        (<p>)
        "Debugger"
        (<p>)
        (<node>
          " Added @ to remote processes"
          " Recuperate from calls to crashed debuggee"
          " Added an explicit Restarts palette"
          " Clicking a frame in a snapshot now edits the definition"
          " Started work on Swank backtrace and restarts"
          " Started experimental work on a Swank debugger"
          " Added support for viewing snapshot files in the debugger"
          " Fixed a long-standing crash in the remote inspector"
          " Now detaching from controller even on low-level calls to exit")
        (<p>)
        "Profiler"
        (<p>)
        (<node>
          " Implement remote profiler"
          " Unified the deterministic and the statistical profilers"
          " Basic port of the classic Jazz C++-based deterministic profiler"
          " Now using high performance counters in statprof"
          " Statprof now handles correctly FFI calls spawning multiple heartbeats"
          " Added performance counter (high resolution timers) support")
        (<p>)
        "WebServer"
        (<p>)
        (<node>
          " Initial Jazz webserver re-architecting."
          " Refactored contrib.webserver, simplified interface.")))
    (<article> name: 2010-08-21 title: "2010-08-21 - Presentation at the 2010 Workshop on Scheme and Functional Programming"
      (<description>
        (<p> "An article \"JazzScheme: Evolution of a Lisp-Based Development System\" has been submited and accepted for presentation at the " (<a> href: "http://www.iro.umontreal.ca/~sfp2010" "2010 Workshop on Scheme and Functional Programming. "))
        (<p>)
        (<p> "See you there!")))
    (<article> name: 2010-03-22 title: "2010-03-22 - JazzScheme 2.3 released"
      (<description>
        "JazzScheme 2.3 is now available. "
        "See " (<a> href: "installation.htm" "Installation") " for details on installing Jazz and Jedi. "
        (<p>)
        (<br>)
        "NEW IN 2.3"
        (<br>)
        (<br>)
        "  Kernel"
        (<br>)
        (<node>
          "Added -load option to load a specific module"
          "Added -eval option to evaluate code after loading the kernel"
          "Added -test option to run the validation suite of a product"
          "Added -force option to the kernel that can be used with -compile"
          "New crash handler that will output a backtrace when a crash occurs")
        (<br>)
        "  Build System"
        (<br>)
        (<node>
          "Static build of libraries"
          "The Jazz kernel can now be built as a library"
          "Build system is now fully scriptable"
          "Added an option to build executables without including the Gambit compiler"
          "Added new options to build without debug environments or debug location"
          "Added parallel build support specified by jobs: number-of-jobs"
          "Added a -link option (objects libraries all) to the build system")
        (<br>)
        "  Language"
        (<br>)
        (<node>
          "Module require/import/export are now special forms"
          "Added a validation suite for Jazz"
          "Added support for public / protected modules"
          "Import conflicts are now detected"
          "Major simplification and cleanup of everything related to literals"
          "Added walk-time argument count validation"
          "Implementated runtime library access of its exported symbols"
          "All Jazz exception handling now fully supports scheme exceptions"
          "Printing load stack in error message when cyclic dependencies occur"
          "Added override modifier to methods overriding a base virtual method"
          "Replaced function special-form with lambda in all modules"
          "Now supporting slots in meta classes"
          "Added initial support for type-safe enumerations")
        (<br>)
        "  Hygiene (many thanks to Alex Shinn)"
        (<br>)
        (<node>
          "Added support for hygienic macros using syntax-rules"
          "Initial define-syntax support"
          "Converted many macros to the new hygienic define-syntax")
        (<br>)
        "  Gambit"
        (<br>)
        (<node>
          "Added a new 'gambit' library that exports every Gambit procedure"
          "Now cataloging Gambit's define-type-of- special form"
          "Added an API to Gambit's structures and types"
          "Added support for s8/u8/.../f32/f64 homogeneous vectors")
        (<br>)
        "  Framework"
        (<br>)
        (<node>
          "Every repository and package is now automatically an alias"
          "Greatly improved load time of applications")
        (<br>)
        "  User Interface"
        (<br>)
        (<node>
          "Added support for merged cells in the tree view")
        (<br>)
        "  Cross-Platform"
        (<br>)
        (<node>
          "Many fix to X11 so it is now in a fairly usable state")
        (<br>)
        "  Libraries"
        (<br>)
        (<node>
          (<span>
            "Irregex"
            (<node>
              "Ported Alex Shinn's Irregex library"))
          (<span>
            "Match"
            (<node>
              "Ported Alex Shinn's Match library"))
          (<span>
            "Statprof"
            (<node>
              "Added support for keeping a backtrace for each registered call"))
          (<span>
            "Added base64 module (from Gambit's examples)")
          (<span>
            "Loading of a PNG image from a u8vector"))
        (<br>)
        "  IDE"
        (<br>)
        (<node>
          "Catalogs are now automatically updated on save in a background thread"
          "Regular expressions support in the multi-search/replace"
          "Added a define-expression macro enabling user expressions to extend the IDE"
          "Added basic arrow navigation in F8"
          "Added a new SQL workspace"
          "Started a Showcase view to showcase available widgets"
          "Launch time error now get reported after IDE has finished launching"
          "Made mouse copy work accross views and in plain texts"
          (<span>
            "Added Debug With... "
            "menu item to debug using any kernel (core, debug, ...)")
          "Added full-screen functionality"
          "Added register-user-completion(s) to user extend auto-completion"
          "Directories search is now done in a background thread"
          (<span>
            "Every text style can now be customized in the preferences. "
            "Have fun!")
          "Started work on workspaces composed of independent OS windows")
        (<br>)
        "  Emacs"
        (<br>)
        (<node>
          "Added support for all basic emacs commands"
          "Incremental search with highlight of every occurence found"
          "Added c-x c-f find-file, c-x c-F find-filename and c-x b find-buffer"
          "Adding M-y cyclic-paste behavior to emacs bindings"
          "An experimental implementation of paredit is available"
          )
        (<br>)
        "  Debugger"
        (<br>)
        (<node>
          "Major improvements to the remote debugger"
          "Inspectors now work with remote REPLs"
          "Added a Show Dynamic Environment button to the Variables pane"
          "Added access to selected frame local variables in REPL evaluations"
          "Started work on integrating Gambit's stepper in Jedi"
          "Now binding debuggee's current-input/output-port to the debugger's console"
          "The inspector can now inspect Gambit structures and types")
        (<br>)
        "  Designer"
        (<br>)
        (<node>
          "Started work on a full-fledged GUI designer")
        (<br>)
        "  Website"
        (<br>)
        (<node>
          "Added a new Hello World tutorial section"
          "Added a FAQ")
        (<p>)
        (<br>)
        "ON THE HORIZON"
        (<p>)
        (<node>
          "Prototype-based programming"
          "Static link of executables"
          "Finish work on the GUI designer")))
    (<article> name: 2009-10-19 title: "2009-10-19 - JazzScheme embraces its Scheme destiny!"
      (<description>
        (<p> "The last of the Jazz-specific constructs, namely using 'function' instead of 'lambda', was removed from the language. "
             "The decision was made after realizing it was time that Jazz fully embraced its Scheme destiny! ")
        (<p> "We plan on continuing to evolve the Jazz language, platform and IDE to make them ever more Scheme- and Lisp- friendly. ")))
    (<article> name: 2009-06-27 title: "2009-06-27 - Auphelia Technologies to use JazzScheme for their new ERP software"
      (<description>
        (<p> "After an exhaustive evaluation period, "
             (<a> href: "http://www.auphelia.com/" "Auphelia Technologies")
             " has decided to develop the backend of their new Enterprise Resource Planning product entirely in JazzScheme. "
             "Decision is still pending between Qt and JazzScheme for the desktop client but there is a definite preference at this point for using JazzScheme across the whole project. ")
        (<p> "One key element of the decision to use JazzScheme was the high complexity of the project. "
             "The project is not to create just another ERP software, but rather a complete dynamic ERP-creation platform. ")
        (<p> "On the technical side, the project will include development of the JazzScheme platform by three people over a period of about six months. "
             "Planned work includes: "
             (<node> "Documentation"
                     "Static builds of executables and libraries"
                     "Module system / Hygienic macros"
                     "Performance / Memory / Stability"
                     "UI / Interface designer"
                     "IDE / Remote debugger and profiler"))
        (<p> "Note that Gambit's author, Marc Feeley, has confirmed his participation part-time in the project! ")
        (<p> "Various job openings for highly-skilled people where also announced. For details, see: "
             (<a> href: "http://lispjobs.wordpress.com/2009/06/27/auphelia-technologies-erp/" "http://lispjobs.wordpress.com/2009/06/27/auphelia-technologies-erp/"))))
    (<article> name: 2009-01-26 title: "2009-01-26 - JazzScheme Publicly Released"
      (<description>
        "JazzScheme was publicly released today. "
        "Note that this is a Beta release. "
        (<p>)
        "Information on getting and building the sources can be found here: "
        (<a> href: "http://www.jazzscheme.org/installation.htm#installation.sources" "Sources")
        ". "
        (<p>)
        "Consequently, the JazzScheme google group is now freely accessible. "
        "Anyone can view the discussion threads and join the group. "))
    (<article> name: 2008-12-24 title: "2008-12-24 - Closed-beta Release to the discusion group members"
      (<description>
        "JazzScheme was released today as a closed-beta to the discusion group members. "
        (<p>)
        "The main goal of this release is to let people experiment with Jazz and the Jedi IDE and gather feedback in preparation for a public release. ")
      (<article> title: "Changes since the MSLUG presentation"
        (<description>
          (<division> title: "Project Management"
            "Project management has received a major overhaul. "
            "The result is hopefully a very flexible and intuitive to learn project management system that offers various project templates for easy learning. "
            "Only downside is that most of the tutorials on the website that where created for the MSLUG presentation are now somewhat out of date. "
            "Please take a look at them even then as they should help you get started. "
            "We will be working on and off to bring them up to date in the next few weeks. ")
          (<division> title: "Debugger"
            "Using new Gambit hooks, the debugger is now able to locate source code even if it is moved around. "
            "This is extremely useful for binary releases where the source code will end up in a different location than the one where it was when the compiled .o1 was generated. ")
          (<division> title: "Build System"
            "A serious memory problem in the build system has been solved. "
            "Before, building Jazz could end up taking up to 2G of memory! "
            "Now, after a quick peek of 700M when linking the kernel, the whole build process seldoms takes more than 200M of memory. ")
          (<division> title: "Kernel"
            "*Every* call to unsafe ## Gambit primitives is now wrapped in a safe %% macro that, depending on the safety chosen in the build configuration will be expanded to either a safe call for 'debug' safety or an unsafe call for 'release' safety. "
            "In theory, no code run in 'debug' should ever crash. "
            "Note that for performance reasons, the default safety is 'release' and thus by default jazz and jedi are built in 'release'. "
            "Should you encounter a serious crash in Jedi, as the build system supports multiple configurations, you can easily build a separate 'debug' version to try and solve the problem. ")
          (<division> title: "Emacs"
            "An emacs bindings was added to the Jedi IDE. "
            "Although there is no objective for Jedi to ever be an emacs clone, we sure plan on integrating every nice emacs concept. ")
          (<division> title: "User Profile"
            "Every user setting is saved in a 'profile'. "
            "If some of these settings are manually edited and corrupted, the IDE would fail to launch. "
            "Now, every profile setting will load safely and a generic one will be used should a problem ever occur so that in theory, no amount of corruption should ever stop the IDE from launching correctly. ")))
      (<article> title: "Todo before the public release"
        (<description>
          (<division> title: "Debugger"
            (<node>
              "The remote debugger is totally functional at the moment but is still missing many features"
              "Common Lisp debugger through SWANK"))
          (<division> title: "Documentation"
            "A lot of work remains to be done documentation wise. "
            "We plan to quickly bring the documentation to at least a point where every stable method has basic documentation so that it is easy for a programmer to know if a method is 'OK' to be used or not. "))))
    (<article> name: 2008-11-27 title: "2008-11-27 - Presentation at the MSLUG and closed-beta release"
      (<description>
        "November 27, I will be giving a presentation of JazzScheme at the next " (<a> href: "http://schemeway.dyndns.org/mslug/mslug-home" "MSLUG") " meeting. "
        (<p>)
        "This will also be the occasion for a closed-beta release to prepare for an upcoming public release. "
        (<p>)
        "After the meeting, I will send invitations to all JazzScheme group members to join the closed-beta. "
        "I warmly invite all of you to join in the fun! "
        (<p>)
        "Guillaume Cartier"
        (<p>)
        (<division> title: "Announcement"
        (<cite>
          "Date: Thursday, November 27, 2008" (<br>)
          "Time: 7:00pm - 9:00pm" (<br>)
          "Location: Room 3195, André-Aisenstadt Building, Université de Montréal" (<br>)
          "Street: 2920 chemin de la Tour" (<br>)
          "City/Town: Montreal, QC" (<br>)
          (<p>)
          "As some of you know, Guillaume Cartier has been working for the past 12 years on his JazzScheme system. It is a powerful and complete development environment for Scheme applications. You can read about it here:"
          (<p>)
          (<a> href: "http://www.jazzscheme.org" "http://www.jazzscheme.org")
          (<p>)
          "A couple of years ago, he decided to port the whole Jazz kernel to Gambit-C Scheme and to eventually release Jazz under an Open Source License. With the near completion of X11 support, the time to do a full public release is coming very close. "
          (<p>)
          "In order to help spot and iron out the remaining issues for a full public release, Guillaume will be doing a \"Closed Beta\" release to the participants of the MSLUG. The release will take place at the MSLUG meeting on November 27th. You are encouraged to bring your own laptop, as Guillaume will walk us through the installation of Jazz and the creation of a simple application. Note that Jazz should run on Windows *and* on systems featuring an X11 server. "
          (<p>)
          "Thanks to Marc Feeley, WiFi Internet access will be available at the meeting, which should help with the whole process. "
          (<p>)
          "Once everybody is up and going with the system, we'll merrily go down the mountain to the pub and celebrate the release. "
          (<p>)
          "Everybody is welcome. Please spread the news around and invite friends and colleagues. "
          (<p>)
          "Map of UdeM campus: " (<a> href: "http://www.stcum.qc.ca/metro/images/c56.pdf" "http://www.stcum.qc.ca/metro/images/c56.pdf")
          (<p>)
          (<a> href: "http://schemeway.dyndns.org/mslug/mslug-home" "http://schemeway.dyndns.org/mslug/mslug-home")))))
    (<article> name: 2008-11-06 title: "2008-11-06 - X11 Port and Debugger Update"
      (<description>
        (<division> title: "X11"
          "I am very happy to report that X11 has progressed by leaps and bounds in the last weeks. "
          "A big structural change to the windowing system where Jazz now manages everything inside the toplevel windows fixed nearly all the X11 problems. "
          "This change has also unified profoundly the windowing architecture of all platforms so that all platforms should now evolve much more uniformly towards stability and completeness. "
          (<p>)
          "Personally, I have worked exclusively on X11 for the last 2 weeks and it felt almost as good as working under the Windows version. "
          "The only things I missed where drag & drop (we are looking into it) and faster scrolling (we are looking into using XCopyArea to implement fast scrolling on X11). "
          "There are other shortcomings like dialogs not being modal at the moment so that you can crash the system by being a smart ... and breaking the modality but those are no show-stoppers to use the system as-is imo. "
          (<p>)
          "As the X11 port was the main hurdle to the open-source release, this is very good news. "
          "At this point, apart from small improvements, the main task that remains is writing documentation, tutorials, ... ")
        (<p>)
        (<division> title: "Debugging"
          "The other big change is that after being unsure for the last 2 years about what was the right approach to having the debugger fully understand the Jazz language, between :"
          (<p>)
          (<node>
            "1) writing my own interpreter for the Jazz language and"
            "2) fully integrating the Jazz macros with Gambit")
          (<p>)
          "I have finally decided after discussions with Marc Feeley that 2) was the right approach and so I rewrote all Jazz macros as ##define-syntax and added full Gambit source code annotations so that now every Gambit debugging feature works seamlessly with Jazz code like :"
          (<p>)
          (<node>
            "precise reporting of the position of an error in the source file"
            "stack backtrace with for every frame precise highlighting of the call site"
            "statprof statistical profiler is now integrated with Jedi "
            "..."))))
    (<article> name: 2008-09-26 title: "2008-09-26 - Public Open-Source Release Update"
      (<description>
        "Now that our first JazzScheme contract is over, here is an update on where we stand. "
        (<p>)
        "First of all, I am very happy to say that the contract was a complete success. "
        "It proved that developing a business application in the new Gambit based JazzScheme is a viable solution. "
        "I must say that development was a charm and on top, the client loves the result! "
        (<p>)
        "For some other very good news, during the contract, to support development we added many missing features to the Jazz platform : "
        (<p>)
        (<node>
          "Kernel unit and build system is now language agnostic"
          "Project management through a visual workbench"
          "GUI remote debugger"
          "Programmatic restarts"
          "Full unicode support throughout the IDE"
          "Printing support on Windows"
          "Windows COM support"
          "A new crash handler routine on Windows will dump a Gambit stack even on fatal crashes")
        (<p>)
        (<division> title: "Public Open-Source Release"
          "With those new features added, we are very close to a public open-source release of the JazzScheme platform. "
          (<p>)
          "The key feature that still needs work is X11. "
          "Unfortunately, the student who did the port now has less available time to spend on the project as his master's degree is taking a lot of his resources. "
          "We are still both working on X11 but it may take a while to complete. "
          (<p>)
          "Note that the port was advanced enough that the whole IDE was 90% functional. I would guess the work remaining to be around 2-3 weeks for someone both knowledgeable in X11 and in Jazz. "
          "Personally I do not have the time required to delve into X11 but if anyone with good X11 knowledge wants to team up, it could be a fun project and accelerate the completion of the X11 port. "
          "Just let me know. ")
        (<p>)
        (<division> title: "In Development"
          (<node>
            "Jedi as a Gambit IDE with full remote debugging"
            "Emacs inspired bindings for basic commands (almost complete)"))))
    (<article> name: 2008-04-30 title: "2008-04-30 - Contract awarded to use the new Gambit based JazzScheme"
      (<description>
        "I am very happy to announce that MetaScoop was awarded a contract to implement a full business application using the newly developed Gambit based JazzScheme. "
        (<p>)
        "Note that we will still be developing JazzScheme actively but with focus on more 'business' aspects like :"
        (<node>
          "Robustness and Performance"
          "Full database support on Windows using ADO"
          "Printing support on Windows"
          "Localization"
          "Distribution of built code")
        (<p>)
        "We expect work on the open-source release to resume in about 2 months where at this point finishing X11 will be pretty much all that remains. "))
    (<article> name: 2008-04-29 title: "2008-04-29 - Progress update"
      (<description>
        "Here's a summary of the most important developments in the last 2 months :"
        (<p>)
        (<division> title: "Build system"
          (<node>
            "Now using pkg-config to simplify build dependencies processing"
            "Added support for binary packages for a complete distribution solution"))
        (<division> title: "Gambit"
          "Support for the following Gambit features was added :"
          (<node>
            "TCP/IP"
            "Threading"
            "U8 vectors"))
        (<division> title: "Language"
          (<node>
            "Added branch prediction to the type system for nillable types and the 'or' special form"
            "Implemented a new 'meta' keyword that greatly simplifies metaclass programming"))
        (<division> title: "Cross-Platform"
          (<node>
            "Many improvements on X11"
            "Carbon work started up to the point where the Jedi IDE now fully loads"))
        (<division> title: "Web Server"
          "Ported the Web server / framework to the new Jazz. I must say that Gambit's TCP/IP support, threads, ports and u8vectors made this port a pure pleasure. "
          (<p>)
          "Two new samples where developed to demonstrate the new web framework :"
          (<node>
            "Gomoku"
            "Connect-4"))
        (<division> title: "Various"
          (<node>
            "Views now support arbitrary scaling"
            "Added printing support on windows"
            "Ported many parts of the visual GUI designer"))))
    (<article> name: 2008-02-04 title: "2008-02-04 - New build system fully implemented in Gambit"
      (<description>
        "Here's a summary of the most important developments since the last update (apart from a very nice Christmas vacation with my son :-) :"
        (<division> title: "Build system"
          "A new build system was developed to automate Jazz building and deployment. "
          "It follows the usual configure / make methodology and is fully implemented in Gambit making it highly portable. "
          "See the INSTALL file at the root of the distribution for details. "
          (<p>)
          (<node>
            (<span> "The build will now create a 'jazz' executable file that encapsulates the Jazz kernel. "
              "Use this executable to load Jazz code, launch Jazz applications, ...")
            (<span> "Under Linux, we are now using pkg-config to simplify building library depencies. ")))
        (<division> title: "Package system"
          "A new package system was developed to manage resources uniformly accross the development and deployment stages of a project. "
          (<p>)
          (<node>
            "With it, Jazz applications can be deployed as compiled binaries, source files or as a mix of both. "
            "Jazz will use a sha-1 digest of the source file to automatically determine if a file should be loaded interpreted or compiled. "))
        (<division> title: "Generic methods"
          "Jazz now implements generic dispatch on an arbitrary number of parameters. ")
        (<division> title: "Port fixes"
          (<node>
            "View debugging tools (F8) are now fully functional under Windows. "
            "Groupware compare directories and compare files. "
            "Login dialog. "
            "Users management. "))
        (<division> title: "X11"
          "A lot of progress was made on the X11 port which is now very close to being usable. ")
        (<division> title: "Time"
          "Ported the very nice Time Data Types and Procedures SRFI-19 to Jazz. ")
        (<division> title: "Various"
          (<node>
            "Many Gambit specific improvements related to performance and space. "
            "All jazz units have now been ported to the new kernel at least enough to load correctly. "))))
    (<article> name: 2007-11-11 title: "2007-11-11 - New Gambit based kernel now faster than the old C++ kernel!"
      (<description>
        "A lot has happened since the last news update a month 1/2 ago. Let me try and summarize the most important developments :"
        (<division> title: "Performance"
          "As I was saying in the last message, performance was very critical as this stage as it was so far behind the old Jazz as to make the new one unusable. The benchmark I have been using is editing Window.jazz a big file with lots of syntax coloring necessitating a lot of sexpr navigation. As every Lisp related tool must be able to navigate sexpr in text, those operations are so critical that in the old Jazz they where handcoded directly in C. So keep in mind that in the benchmark results, it is handcoded C code vs Jazz code generating Gambit code."
          (<p>)
          "First timing was :"
          (<p>)
          "Old Jazz : 0.3s"
          (<br>)
          "New Jazz : 28.5s"
          (<p>)
          "so 95x slower."
          (<p>)
          "We are now at 0.17s so 167x faster than the first version and 60% faster than the old handcoded C code. Note that there is still a lot of room to make this much faster but now that performance is acceptable we are going to put performance aside for a while in favor of other priorities. "
          (<p>)
          "Thanks to Guillaume Germain for his wonderful statprof statistical profiler which really helped in finding the hot spots to optimize. ")
        (<division> title: "Type System"
          "Jazz now supports a fairly complete and completely optional type system. "
          (<p>)
          "Every part of a Scheme program can now be type annotated. Note that usually, just annotating the type of the input parameters of a function will be sufficient, as the new type system will use type inference whenever possible to deduce the type of expressions. "
          (<p>)
          "To support the new type system, a new experimental specializer / template system is also available. Any comments / suggestions on this part are most welcome as it is unclear what is the best approach: templates a la c++, generics a la java, parameterized types, ... "
          (<p>)
          "Note that Jazz as a whole doesn't use the new type system a lot. I'd say that around 30 files out of Jazz's 3000+ files use the new type system. Annotating only those 30 something critical units resulted in huge performance improvements. Also note that the type annotations are purely optional and removing any of them will not change any code semantics. ")
        (<division> title: "IDE"
          "The IDE while still missing a lot of functionality has become functional enough for it to become usable. I now try and use it as my main development IDE over the old Jazz's IDE. "
          (<p>)
          "Mainly missing from the old Jazz IDE is debugging support. We are still relying on the Gambit console. Note that this is really not painful at all as the Jazz generated Scheme code is so close to the original code that reading a Gambit stack of Jazz code is almost identical as what a pure Jazz debugger stack would look like. ")
        (<division> title: "Scheme Compliance"
          "The old Jazz, although 'Scheme inspired' was never a full Scheme implementation. "
          (<p>)
          "Everything that Jazz was redefining from Scheme was rethought / renamed so that now I am very happy to report that Jazz is now a full R5RS Scheme (to be more precise: as R5RS as the underlying Scheme you are using is) system where any R5RS Scheme code can be run as is inside a Jazz unit or module. "
          (<p>)
          "If pure Scheme is used inside a Jazz unit or module, the resulting code will have no overhead and will be the exact same code. The Jazz module system will just validate at compile time that every symbol referenced exists in the underlying Scheme system and report any unresolved symbols. ")
        (<division> title: "Cross-Platform / X11"
          "The Jedi IDE while not functional, is now booting completely under X11! What was astonishing was that nothing was working, and a couple changes later, Jeremie had a version where *everything* was rendering perfectly! The port of the graphical code to Cairo really payed off there. I am very happy about this new development, especially as Jeremie was able to pull this off part time while studying for his master's degree. Gratz! "
          (<p>)
          "Public beta release is still planned for very early 2008. ")))
    (<article> name: 2007-09-26 title: "2007-09-26 - Jedi running under the new Gambit based kernel"
      (<description>
        "I am very happy to report that Jedi, the Jazz IDE is now running under the new Gambit based kernel. "
        "Lots of features where temporarely commented out but basically most of the language and the library has now been ported to the new kernel. "
        (<p>)
        "The port of 100+ C++ classes to Gambit was very demanding at first but now the development has really become a joy. "
        "Even though the start was difficult, developing the new kernel on Gambit's extremely robust, fast and flexible architecture has now surpassed all my expentations in development speed and quality of code that could be developed with it. "
        "Cheers to Gambit! "
        (<p>)
        "Next steps are: "
        (<node>
          "Complete the port"
          "Optimize the new kernel to make it as fast as Gambit can be (that's fast!)"
          "Port the library and IDE to Mac and X11 (this should be fairly fast at this point)")
        "I expect a first beta, beginning of 2008. "))
    (<article> name: 2007-08-08 title: "2007-08-08 - Presentation at the lispvan"
      (<description>
        "Guillaume Cartier gave a presentation of JazzScheme at the Vancouver Lisp Users Group. See "
        (<a> href: "http://bc.tech.coop/blog/070810.html" "Bill Clementson's Blog")
        " for a nice summary. "))
    (<article> name: 2007-05-28 title: "2007-05-28 - JazzScheme 1.0b6 available"
      (<description>
        "This version is a candidate for the public release. Only bug fixes are planned until the public release. See the " (<a> href: "new.htm" "What's New") " section for details. "))
    (<article> name: 2007-05-14 title: "2007-05-14 - Work on porting JazzScheme to X11 and Macintosh started"
      (<description>
        "Active work has started on porting the JazzScheme platform to other operating systems. Support is planned for the following platforms: Windows, X11 and Macintosh. "))
    (<article> name: 2007-05-03 title: "2007-05-03 - JazzScheme 1.0b5 available"
      (<description>
        "This version adds a lot of support for Scheme code edition which is now almost on par with Jazz code. See the " (<a> href: "new.htm" "What's New") " section for details. "))
    (<article> name: 2007-04-23 title: "2007-04-23 - JazzScheme public beta released"
      (<description>
        "First publicly available beta release of JazzScheme. "))
    (<article> name: 2007-01-12 title: "2007-01-12 - JazzScheme ported to Visual Studio 2005"
      (<description>
        "JazzScheme was successfully ported to Visual Studio 2005. "
        "This is a key milestone for Jazz, as with Microsoft's release of Visual Studio 2005 Express as a free downloadable package that can be used to build C++ applications with no licensing restrictions, Jazz can now be used as a 100% free development platform for building Windows applications. "))
    (<article> name: 2006-12-13 title: "2006-12-13 - Presentation at the MSLUG"
      (<description>
        "Guillaume Cartier gave a presentation of JazzScheme at the Montreal Lisp/Scheme User Group. See "
        (<a> href: "http://schemeway.dyndns.org/mslug" "http://schemeway.dyndns.org/mslug")
        " for details."))
    (<article> name: 2006-12-12 title: "2006-12-12 - Montreal company to use JazzScheme"
      (<description>
        (<a> href: "http://www.isaix.com" "IsaiX Technologies")
        " a high tech Montreal company, has decided to use JazzScheme for one of its top projects. Using JazzScheme, they plan on developing a real time scheduling engine for "
        (<a> href: "http://www.chyma.net" "Chyma")
        " their Health Care Industry product."))
    (<article> name: 2006-11-22 title: "2006-11-22 - Website goes live"
      (<description>
        "A first version of the JazzScheme website is now live!")))
  ;;;
  ;;;; Features
  ;;;
  (<section> name: features title: "Features"
    (<article> title: "Features"
      (<description>
        (<node>
          (<a> href: "features.htm#features.gambit" "Gambit Roots")
          (<a> href: "features.htm#features.kernel" "Build System")
          (<a> href: "features.htm#features.kernel" "Module System")
          (<a> href: "features.htm#features.jazz" "Jazz Platform")
          (<a> href: "features.htm#features.jedi" "Jedi IDE"))))
    (<article> name: features.gambit title: "Gambit Roots"
      (<description>
        "JazzScheme is entirely built using the " (<a> href: "http://www.iro.umontreal.ca/~gambit/" "Gambit") " system. "
        "Building on Gambit offers many benefits:"
        (<dl>
          (<dt> (<i> "Conformance"))
          (<dd>
            "Gambit conforms to the R4RS, R5RS and IEEE Scheme standards and implements all optional features including the full numeric tower. "))
        (<p>)
        (<dl>
          (<dt> (<i> "Portability"))
          (<dd>
            "Gambit runs on many platforms and because it is mostly written in Scheme and the compiler generates portable C, the system is easy to port to any platform with a decent C compiler. "))
        (<p>)
        (<dl>
          (<dt> (<i> "Performance"))
          (<dd>
            "Gambit is an extremely fast Scheme implementation. "
            "With appropriate declarations, programs generated by the compiler run roughly as fast as equivalent C programs. "
            "Thanks to an efficient implementation of continuations, the thread system is very efficient and can support millions of concurrent threads. "
            "For optimal performance, Gambit also offers a low-level API with no runtime checking. "))
        (<p>)
        (<dl>
          (<dt> (<i> "Reliability"))
          (<dd>
            "Gambit is a very robust Scheme implementation. "
            "Stable releases typically have very few bugs. "
            "Gambit has been used to develop large-scale real-world software in academic and commercial settings. "))
        (<p>)
        (<dl>
          (<dt> (<i> "Debugging"))
          (<dd>
            "Gambit comes with a full-featured repl based debugger and includes both an interpreter and a compiler for fast incremental development. "))
        (<p>)
        (<dl>
          (<dt> (<i> "Rich API"))
          (<dd>
            "Gambit offers a rich library including:"
            (<node>
              "C foreign-function interface"
              "Lightweight thread system that can support millions of concurrent threads"
              "Extended I/O (filesystem, networking, subprocesses, ...)"
              "Extensive Unicode support"
              "Homogeneous vectors"
              "Hashtables and weak references"
              "Extensible reader and printer"
              "...")))))
    (<article> name: features.kernel title: "Build System"
      (<description>
        "JazzScheme comes with a complete build system that can: "
        (<node>
          "Build libraries"
          "Build executables"
          "Build single module loadable libraries"
          "Manage dependencies automatically"
          "Support multiple configurations that can specify:"
          (<node>
            "Platform"
            "Safety level"
            "Debugging information"))))
    (<article> name: features.kernel title: "Module System"
      (<description>
        (<division> title: "Units"
          "The first layer of the module system is a language agnostic unit and package system where: "
          (<node>
            "Units are used to load and compile code"
            "Packages are used for deployment"))
        (<division> title: "Modules"
          "The functional layer can rely on a module system to manage code encapsulation. "
          (<node>
            "Import / Export of symbols"
            "Detects unresolved symbols and other problems at compile time"
            "Supports reexported submodules"))
        (<division> title: "Hygiene"
          "Built on top of the module system comes a rich hygienic macro system. "
          (<node>
            "Hygienic macros using syntax-rules"
            "Support for define-syntax"
            "Full support for non-hygienic macros"))))
    (<article> name: features.jazz title: "Jazz Platform"
      (<description>
        "The Jazz platform is implemented using the unit system as a collection of packages including:"
        (<division> title: "Functional Programming"
          (<node>
            "Optional parameters"
            "Keyword parameters"))
        (<division> title: "Object-Oriented Programming"
          (<node>
            "Classes with single inheritance and multiple interfaces implemented"
            "Metaclasses"
            "Single-dispatch 'a la' Java"
            "Generic multi-dispatch methods 'a la' CommonLisp"))
        (<division> title: "Component Programming"
          (<node>
            "Inheritance between component classes"
            "Markup language for persistance"))
        (<division> title: "Type System"
          (<node>
            "Fully optional"
            "Type inference"
            "Scheme integration"
            (<node>
              "Supports all Scheme primitive types"
              "Annotating fixnums and flonums will generate optimal numerical code")))
        (<division> title: "Numbers"
          (<node>
            "Generic arithmetic"))
        (<division> title: "Sequences")
        (<division> title: "Exceptions")
        (<division> title: "Markup")
        (<division> title: "Remoting"
          (<node>
            "Remoting"
            (<span> "Erlang-style processes using " (<a> href: "http://code.google.com/p/termite/" "Termite"))))
        (<division> title: "User Interface"
          (<node>
            "Cross-platform accross Mac OS X, Windows and X11"
            (<span> "High level 2D API through the use of the " (<a> href: "http://cairographics.org/" "Cairo") " library")))))
    (<article> name: features.jedi title: "Jedi IDE"
      (<description>
        "Jedi is a fully programmable IDE built entirely in Jazz. "
        (<division> title: "Languages Supported"
          (<node>
            (<span> "Jazz")
            (<span> "Scheme")
            (<span> "Common Lisp")
            (<span> "C++")
            (<span> "Java")))
        (<division> title: "Project Management"
          (<node>
            "Workbench to manage projects and files"
            "Catalogs to cross-reference source code"))
        (<division> title: "Project Development"
          (<node>
            "Test"
            "Debug"
            "Build"
            "Run"))
        (<division> title: "Source Code"
          (<i> "Text")
          (<node>
            "Syntax coloring"
            "Evaluate code")
          (<i> "Exploring")
          (<node>
            "Chapters browser"
            "Definitions browser"
            "Find definitions"
            "Find references"
            "History navigation"
            "Class browser")
          (<i> "Searching")
          (<node>
            "Incremental search"
            "Multiple simultaneous searches and replaces"
            "Ability to play a textual macro on replace")
          (<i> "Editing")
          (<node>
            "Clipboard stack"
            "Mouse copying"
            "Customisable symbol completion"
            "Code tabulation"
            "Textual macro recording"
            "Unlimited undo / redo"
            "Compare to saved"
            "Fully programmable"))
        (<division> title: "Debugging"
          (<node>
            "Remote Debugger"
            "Console to evaluate code"
            "Supports multiple threads"
            "Supports debugging multiple processes simultaneously"
            "Stack inspector with precise callsite highlighting"
            "Exact highlighting of errors"
            "Object inspector"
            "View explorer"))
        (<division> title: "Profiling"
          (<node>
            "Includes a statistical profiler"))
        (<division> title: "Collaborative Work"
          (<node>
            "Compare Directories"
            "Compare Files"))
        (<division> title: "Web Development"
          (<node>
            "Visually manage your servers")))))
  ;;;
  ;;;; Screenshots
  ;;;
  (<section> name: screenshots title: "Screenshots"
    (<article> title: "Screenshots"
      (<description>
        (<node>
          (<a> href: "screenshots.htm#jedi" "Jedi")
          (<a> href: "screenshots.htm#metamodeler" "MetaModeler")
          (<a> href: "screenshots.htm#pricing" "Pricing Manager")
          (<a> href: "screenshots.htm#companion" "Companion")
          (<a> href: "screenshots.htm#diablo" "Diablo"))))
    (<article> name: jedi title: "Jedi"
      (<description>
        "Jedi is the Jazz IDE. It is written entirely in Jazz. "
        (<division> title: "Text Editor"
          (<table> cellpadding: "8"
            (<tr>
              (<td>
                (<screenshot> label: "Jazz Code" preview: "images/screenshots/text_jazz_small.png" image: "images/screenshots/text_jazz.htm"))
              (<td>
                (<screenshot> label: "Scheme Code" preview: "images/screenshots/text_scheme_small.png" image: "images/screenshots/text_scheme.htm")))))
        (<division> title: "Debugger and Tools"
          (<table> cellpadding: "8"
            (<tr>
              (<td>
                (<screenshot> label: "Debugger" preview: "images/screenshots/debugger_small.png" image: "images/screenshots/debugger.htm"))
              (<td>
                (<screenshot> label: "View Explorer" preview: "images/screenshots/view_explorer_small.png" image: "images/screenshots/view_explorer.htm"))
              (<td>
                (<screenshot> label: "Search and Replace" preview: "images/screenshots/search_replace_small.png" image: "images/screenshots/search_replace.htm")))))
        (<division> title: "Group Work"
          (<table> cellpadding: "8"
            (<tr>
              (<td>
                (<screenshot> label: "Compare Directories" preview: "images/screenshots/compare_directories_small.png" image: "images/screenshots/compare_directories.htm"))
              (<td>
                (<screenshot> label: "Compare Files" preview: "images/screenshots/compare_files_small.png" image: "images/screenshots/compare_files.htm")))))))
    (<article> name: metamodeler title: "MetaModeler"
      (<description>
        "The MetaModeler is a database modeling tool developed by" (<a> href: "http://www.metascoop.com" "MetaScoop") ". It is also entirely written in Jazz. "
        (<table> cellpadding: "8"
          (<tr>
            (<td>
              (<screenshot> label: "Welcome" preview: "images/screenshots/metamodeler_welcome_small.png" image: "images/screenshots/metamodeler_welcome.htm"))
            (<td>
              (<screenshot> label: "Import" preview: "images/screenshots/metamodeler_import_small.png" image: "images/screenshots/metamodeler_import.htm"))
            (<td>
              (<screenshot> label: "Models" preview: "images/screenshots/metamodeler_models_small.png" image: "images/screenshots/metamodeler_models.htm"))
            (<td>
              (<screenshot> label: "Scripts" preview: "images/screenshots/metamodeler_scripts_small.png" image: "images/screenshots/metamodeler_scripts.htm")))
          (<tr>
            (<td>
              (<screenshot> label: "Analysis" preview: "images/screenshots/metamodeler_analysis_small.png" image: "images/screenshots/metamodeler_analysis.htm"))))))
    (<article> name: pricing title: "Pricing Manager"
      (<description>
        "A rule based pricing manager prototype developed by for a company in the travel industry. "
        "This application was used to run simulations of rule effects on pricing scenarios"
        (<table> cellpadding: "8"
          (<tr>
            (<td>
              (<screenshot> label: "Manager" preview: "images/screenshots/pricing_manager_small.png" image: "images/screenshots/pricing_manager.htm"))))))
    (<article> name: companion title: "Companion"
      (<description>
        "A visual mapping tool used to map various hierarchical structures including Java classes and XML data. "
        (<table> cellpadding: "8"
          (<tr>
            (<td>
              (<screenshot> label: "Companion" preview: "images/screenshots/companion_small.png" image: "images/screenshots/companion.htm"))))))
    (<article> name: diablo title: "Diablo"
      (<description>
        "Jazz can do graphical games too!"
        (<table> cellpadding: "8"
          (<tr>
            (<td>
              (<screenshot> label: "Diablo" preview: "images/screenshots/diablo_small.png" image: "images/screenshots/diablo.htm")))))))
  ;;;
  ;;;; Tutorials
  ;;;
  (<section> name: tutorials title: "Tutorials"
    (<article> title: "Tutorials"
      (<description>
        (<division> title: "Installation"
          (<node>
            (<a> href: "tutorials.htm#tutorial.installing-linux" "Installing a Mac OS X / Linux binary release")
            (<a> href: "tutorials.htm#tutorial.installing-windows" "Installing a Windows binary release")))
        (<division> title: "Jedi IDE"
          (<node>
            (<a> href: "tutorials.htm#tutorial.getting-started" "Getting started")
            (<a> href: "tutorials.htm#tutorial.cataloging-code" "Cataloging an existing code base")
            (<a> href: "tutorials.htm#tutorial.exploring-views" "Exploring the interface under the hood")
            (<a> href: "tutorials.htm#tutorial.code" "Executing code")
            (<a> href: "tutorials.htm#tutorial.building-jedi" "Building from the Git sources repository")))
        (<division> title: "Jazz Platform"
          (<node>
            (<a> href: "tutorials.htm#tutorial.building-jazz" "Building from the Git sources repository")))
        (<division> title: "Hello World in many flavors!"
          (<node>
            (<a> href: "tutorials.htm#tutorial.console-evaluation" "Console evaluation")
            (<a> href: "tutorials.htm#tutorial.scheme-context" "Evaluating Scheme code")
            (<a> href: "tutorials.htm#tutorial.jazz-context" "Evaluating Jazz code")
            (<a> href: "tutorials.htm#tutorial.units" "Units")
            (<a> href: "tutorials.htm#tutorial.modules" "Modules")
            (<a> href: "tutorials.htm#tutorial.processes" "Processes")))))
    (<article> name: tutorial.installation title: "Installation"
      (<description>
        (<division> title: "What does a Jedi binary release contain?"
          (<p> "For every official release, we package full Jedi / Jazz binaries for the following platforms :")
          (<node>
            "Mac OS X"
            "Windows"
            "Linux")
          "Binary releases are a great way to tryout the Jedi IDE or experiment with the Jazz language and platform. "
          (<p>)
          "Every binary release contains :"
          (<node>
            "Precompiled binaries for Jedi and Jazz. "
            "Complete source code of Jedi and Jazz. "
            "A local copy of the Jedi .git sources repository. "
            "A local copy of the Jazz .git sources repository. ")
          (<p>)
          (<span> "See " (<a> href: "download.htm#releases" "Releases") " for available releases and " (<a> href: "installation.htm#installation.dependencies" "Dependencies") " for external dependencies."))
        (<division> title: "Keeping up-to-date"
          (<p>)
          "If you want to stay closely up-to-date on JazzScheme development or plan on contributing, you should build the latest version from the Git sources repository. "
          "As binary releases also include the local .git sources repositories they can be used as a great starting point to pull and build the latest version as the build system will only build files that changed since the release. "))
      (<article> name: tutorial.installing-linux title: "Installing a Mac OS X / Linux binary release"
        (<description>
          "Installation should work the same for both Mac OS X and Linux. "
          "We'll suppose we are installing on Mac OS X for the example. "
          (<division> title: "Download and extract the binaries"
            "After downloading the binaries, cd to the download directory, then decompress and depackage the binaries. "
            (<pre> class: "code_light"
              "$ " (<b> "gunzip jazz-2.0.0-macosx-intel32.tar.gz") "\n"
              "\n"
              "$ " (<b> "tar -xvf jazz-2.0.0-macosx-intel32.tar") "\n"
              "..."))
      (<division> title: "Launch the Jedi IDE"
        "You will find the Jedi executable inside the \"bin\" folder. "
        "Launching Jedi is a good indicator of whether the installation was successful or not. "
        (<pre> class: "code_light" "$ " (<b> "bin/jedi")))))
      (<article> name: tutorial.installing-windows title: "Installing a Windows binary release"
        (<description>
          "Note that all source files come with standard Windows CR-LF end of lines. "
          (<division> title: "Download and extract the binaries"
            "After downloading the binaries, unzip them to a suitable directory. ")
      (<division> title: "Launch the Jedi IDE"
        "You will find the Jedi executable inside the \"bin\" folder. "
        "Launching Jedi is a good indicator of whether the installation was successful or not. ")))
      )
    (<article> name: tutorial.jedi title: "Jedi IDE"
      (<description>
        )
      (<article> name: tutorial.getting-started title: "Getting started"
        (<description>
        (<division> title: "Installation"
          (<span> "After installing JazzScheme, open up the bin directory and locate jedi.exe to launch Jedi, the JazzScheme IDE. "))
        (<division> title: "Login"
          "Next, you will see the Login dialog used to create a new profile or select from a list of existing ones. "
          "For the example, we will call the new profile \"Me\". "
          "If you are used to Emacs bindings, Jedi supports a subset of the most common Emacs commands. "
          (<p>)
          (<img> src: "images/tutorials/login_new.png")
          (<p>)
          "Press \"Login\". "
          "Your new profile will be created in the following directory : "
          (<p>)
          (<code> "~/.jedi/profiles/lib/profile.me/")
          (<p>)
          "Here's a description of some important files that where created inside your new " (<code> "Me") " profile directory : "
          (<p>)
          (<node>
            "settings/Bindings.jml"
            "settings/Preferences.jml"
            "settings/Servers.jml"
            "settings/Workbench.jml"
            "_Me.jazz")
          (<p>)
          "The first 4 files are setting files automatically managed by Jazz. "
          "Still, it is a good idea to familiarize yourself with their content as they play an important role and are meant to be extremely readable. "
          (<p>)
          "The fourth file, is a Jazz class that represents you! "
          "It is a great place to put customization code or any code that you are experimenting with until it migrates to a full fledged independent class. ")
        (<division> title: "Login to an existing profile"
          "Next time you login, as your profile directory will not be empty anymore, you will be presented the list of profiles found in it. "
          "Just select the desired profile from the list and click Login. "
          (<p>)
          (<img> src: "images/tutorials/login_existing.png"))
        (<division> title: "Jedi IDE"
          "Welcome to the Jedi IDE!"
          (<p>)
          (<img> src: "images/tutorials/jedi.png"))
        (<division> title: "Workspaces"
          "One thing you will notice if you look at the right end side of the toolbar, is a set of 4 icons : "
          (<p>)
          (<img> src: "images/tutorials/workspaces.png")
          (<p>)
          "These buttons can be used to switch the active workspace. "
          "Workspaces are groups of related windows, tools, ... that are activated together. "
          (<p>)
          "Jedi comes with the following workspaces installed : "
          (<node>
            (<span> (<img> src: "images/common/workspace_home.png") "Home")
            (<span> (<img> src: "images/common/workspace_text.png") "Text")
            (<span> (<img> src: "images/common/workspace_debugger.png") "Debugger")
            (<span> (<img> src: "images/common/workspace_groupware.png") "Groupware"))
          (<p>)
          "For instance, the text workspace gives you text related tools like Chapters and Hierarchy. "
          (<p>)
          (<img> src: "images/tutorials/workspaces_text.png")
          (<p>)
          "Note that common tools like the Console are accessible in any workspace. ")))
      (<article> name: tutorial.cataloging-code title: "Cataloging an existing code base"
        (<description>
          "For this tutorial we will catalog the Gambit library. "
          (<division> title: "Project"
            "First we need a new project for Gambit. "
            (<p>)
            (<img> src: "images/tutorials/catalog_project.png")
          (<division> title: "New Project"
            "Note that a project is actually a full-fledged class. "
            "This gives projects a lot of runtime flexibility but places some constraints on project names. "
            "Lets call the project: \"gambit\". "
            (<p>)
            (<img> src: "images/tutorials/catalog_add.png"))
          (<division> title: "Import"
            "Now add the Gambit library directory to the project by selecting \"Import Directory...\" from the project's context menu. "
            (<p>)
            (<img> src: "images/tutorials/catalog_import.png")
            (<p>)
            "Locate your Gambit source directory and select \"lib\". "
            (<p>)
            (<img> src: "images/tutorials/catalog_directory.png"))
          (<division> title: "Catalog"
            "Now catalog the project's source files. "
            "This will scan every source file in the project and build a full cross-references catalog containing information for each definition and every symbol referenced. "
            (<p>)
            (<img> src: "images/tutorials/catalog_catalog.png"))
          (<division> title: "Explore"
            "With your newly built catalog, edit the Gambit code implementing the " (<code> "create-symbolic-link") " primitive. "
            "Click inside the console and type " (<code> "create-sy") ". "
            "Notice how Jedi was able to complete the symbol now that it knows about every Gambit definition. "
            (<p>)
            (<img> src: "images/tutorials/catalog_complete.png")
            (<p>)
            "Now press \"alt-period\" or \"F12\". "
            "This should edit " (<code> "create-symbolic-link") "'s definition. "
            (<p>)
            "Pressing \"control-alt-period\" or \"shift-F12\" displays a list of every definition referencing the current symbol. "
            "Try it on " (<code> "##path&#8209;expand") " for fun. "))))
    (<article> name: tutorial.exploring-views title: "Exploring the interface under the hood"
      (<description>
        "One feature of the IDE that can be very useful to newcomers is the view explorer. "
        "Invoke the view explorer by selecting the \"Debug / Explore Views (F8)\" menu. "
        "You can now explore every UI object by simply mousing over them. "
        (<division> title: "Properties"
          "Hovering will show a tooltip describing the object. "
          (<p>)
          (<img> src: "images/tutorials/explore_views.png")
          (<p>))
        (<division> title: "Actions"
          "Right-clicking on an object will let you choose various actions. "
          "Here lets select \"Edit Action\" as we are interested in seeing the code that implements this button's action. "
          (<p>)
          (<img> src: "images/tutorials/explore_menu.png"))
        (<division> title: "Edit"
          "Jedi will open a text editor on the definition of the button implementing \"Compare Directories\". "
          (<p>)
          (<img> src: "images/tutorials/explore_edit.png"))
        (<division> title: "Guest"
          "In Jazz, views that want to be relocatable use a host / guest mecanism where guests can be moved from one host to another. "
          "Almost every tool you see in the IDE is implemented as a guest. "
          (<p>)
          "Understanding this, we will edit the source code implementing the \"Catalogs Manager\". "
          "Open the tool using the menu \"Tool / Catalogs Manager\". "
          "Press F8, position the mouse anywhere over the catalogs manager and right-click \"Edit Guest\". "
          (<p>)
          (<img> src: "images/tutorials/explore_catalogs.png"))
        (<division> title: "Form"
          "Jazz implements UI elements through the use of a powerfull markup language where even inheritance relationships be specified between components. "
          "A component (here the catalogs manager) specifies its descendants tree through the use of the " (<code> "form") " special form. "
          (<p>)
          (<img> src: "images/tutorials/explore_form.png")
          (<p>)
          "For fun, lets add a new button to the catalogs manager. "
          "Duplicate the line containing " (<code> "<Push-Button>") " and rename every occurence of " (<code> "update") " to " (<code> "test") ". "
          "We should also change its position to lets say " (<code> "{Point 4 7}") ". "
          (<p>)
          (<img> src: "images/tutorials/explore_form_modified.png")
          (<p>)
          "Now right-click anywhere inside the form and select \"Evaluate\". "
          (<p>)
          (<img> src: "images/tutorials/explore_evaluate.png")
          (<p>)
          "Now all we need is to do is add the " (<code> "on-test") " method that will get called when we press your new button. "
          "Lets put it just after the form and make it do a simple " (<code> "debug") " to the console. "
          (<p>)
          "Don't forget to evaluate your method before trying out the new button! "
          (<p>)
          (<img> src: "images/tutorials/explore_method.png")
          (<p>)
          "Now lets try your new button. "
          "Close the current catalogs manager and open a new one. "
          "Your new \"Test\" button should be there. "
          (<p>)
          (<img> src: "images/tutorials/explore_catalogs_new.png")
          (<p>)
          "Pressing the \"Test\" button should display the message to the console. "
          (<p>)
          (<img> src: "images/tutorials/explore_console.png"))))
    (<article> name: tutorial.code title: "Executing code"
      (<description>
        (<division> title: "Console"
          "The Console is a great place to evaluate code. "
          "Use it to experiment freely. "
          (<p>)
          (<img> src: "images/tutorials/console.png")
          (<p>)
          "Select the Console either by clicking inside it or by using the Control-Alt-Space shortcut. "
          (<node>
            (<span> "Be careful, the Console is a full fledged text. "
              "The freedom of being inside a freely editable text can be surprising to new users. "
              "Expressions to be evaluated must be entered at the end. "
              "Note that Control-Alt-Space can be while inside the console to force a fresh prompt at the end. ")
            (<span> "The keys bound to move-upward and move-downward (alt-P and alt-N) can be used to insert previous or next expressions. "
              "Note that the previous expression does not replace the current line but is inserted instead. "
              "This enables one to type some text, use alt-P to insert a previous expression, continue typing, ...")
            (<span> "Another convenient way to access previous expressions, is to place the cursor on the line you want and press Enter. "
              "This will copy that line to a fresh line at the bottom. ")))
        (<division> title: "Context"
          "To support the Scheme and Jazz dialects, the console has a context that can be modified. "
          "Use " (<code> ",(in)") " to display the current context. "
          (<p>)
          (<img> src: "images/tutorials/context_display.png"))
        (<division> title: "Scheme"
          "No context (#f) corresponds to Scheme evaluation. "
          (<p>)
          (<img> src: "images/tutorials/context_scheme.png")
          (<p>)
          "Notice how the definition was entered on multiple lines. "
          "The console is a full-fledged repl that simply sends every input line to the remote debuggee in this case the Jedi IDE itself that is waiting for the read to complete. "
          "To help distinguish between sent and unsent input, the console colors sent input in " (<span> class: "console_sent" "green") " and unsent input in " (<span> class: "console_unsent" "red") ". "
          (<p>)
          (<img> src: "images/tutorials/context_input.png"))
        (<division> title: "Unit"
          "Lets try and evaluate code in the context of a unit. "
          (<p>)
          (<img> src: "images/tutorials/context_unit.png"))
        (<division> title: "Object"
          "The context can also be a specific object. "
          "Various important objects have aliases that can be used to quickly refer to them like for instance :profile for your profile object. "
          (<p>)
          (<img> src: "images/tutorials/context_me.png"))
        (<division> title: "Profile class"
          "For more flexibility, you can execute code from your profile class. "
          "Open your Me.jazz profile class by double-clicking it in the worbench. "
          (<p>)
          (<img> src: "images/tutorials/workbench_me.png"))
        (<division> title: "Code"
          "Enter the following method inside the Me class: "
          (<p>)
          (<pre> class: "code"
            "(" (<span> class: "keyword" "method") " (" (<span> class: "definition" "random-element") " seq)\n"
            "  (element seq (random (length seq))))")
          (<p>)
          "You should have something like : "
          (<p>)
          (<img> src: "images/tutorials/method_random.png")
          (<p>)
          "Evaluate it by placing the cursor anywhere inside the method and pressing control-Enter. "
          "The " (<code> "random-element") " method is now defined! "
          "You can easily experiment with it in the Console. "
          "Try evaluating " (<code> "(random-element '(a b c d e))") " a couple times... ")
        (<division> title: "Unresolved Symbols"
          "Now for something a bit more complex, enter the following method inside your Me class: "
          (<pre> class: "code"
            "(" (<span> class: "keyword" "method") " (" (<span> class: "definition" "count") " target seq (key: key identity) (test: test eqv?))\n"
            "  (let ((total 0))\n"
            "    (for-each (lambda (object)\n"
            "                (when (target (keyed object))\n"
            "                  (increase total)))\n"
            "              seq)\n"
            "    total))")
          (<p>)
          "When you evaluate it, you will get the following error displayed in the console: "
          (<p>)
          (<img> src: "images/tutorials/unresolved_console.png")
          (<p>)
          "The Jazz codewalker detected unresolved symbols in your code. "
          "Note that our typos where catched early without having to actually execute the code. "
          (<p>)
          "Also note in the upper-right corner that the debugger is notifying you. "
          "In this case, one of the debugged processes's thread reported an exception. "
          (<p>)
          (<img> src: "images/tutorials/unresolved_notify.png"))
        (<division> title: "Debugger"
          "Clicking the debugger's red icon will bring you to the debugger's workspace. "
          (<p>)
          (<img> src: "images/tutorials/unresolved_debugger.png"))
        (<division> title: "Exception"
          "If you want more detail on the exception, select the \"Exception\" palette just next to the \"Frames\" one. "
          "For walk problems, selecting a row will highlight the source code locations in red. "
          (<p>)
          (<img> src: "images/tutorials/unresolved_exception.png")
          (<p>)
          "Now that you understand the error and how to correct it, the first thing you should do is return the thread in error to the previous repl level. "
          "Do this by right-clicking the thread in error (here the \"Primordial\" thread) in the \"Threads\" palette and selecting \"Resume event loop\". "
          (<p>)
          (<img> src: "images/tutorials/unresolved_resume.png"))
        (<division> title: "Restarts"
          "For the curious about why we are resuming an event loop and not a repl. "
          "In a GUI the event loop acts as a stable looping point that can be restarted after an exception has occured just like a repl. "
          (<p>)
          "Note that restarting the event loop is just a special case of invoking an active restart. "
          "As you can see in the previous image, there where actually 2 restarts that could have been invoked : "
          (<node>
            "Quit process"
            "Resume event loop"))
        (<division> title: "Runtime Exception"
          "Now correct the previous unresolved symbols by changing " (<code> "keyed") " to " (<code> "key") " and " (<code> "increase") " to " (<code> "increase!") "and re-evaluate the method. "
          (<p>)
          "Lets try our new method by evaluating " (<code> "(count 'a '(a b a a d c))") " in the Console. You will get the following runtime exception: "
          (<p>)
          (<img> src: "images/tutorials/exception.png")
          (<p>)
          "If you know what the problem is from just reading the error message, you can clear the repl level directly from the console by pressing control-D. "
          "Else, once again click the debugger's red icon :"
          (<p>)
          "Click the \"Me.count\" frame in the \"Frames\" palette to see the frame's source code and variables : "
          (<p>)
          (<img> src: "images/tutorials/exception_debugger.png")
          (<p>)
          "From the value of the \"target\" variable it should be clear that we forgot the " (<code> "test") " call. "
          (<p>)
          "Corrected, we finally have our working version of " (<code> "count") "!"
          (<p>)
          (<pre> class: "code"
            "(" (<span> class: "keyword" "method") " (" (<span> class: "definition" "count") " target seq (key: key identity) (test: test eqv?))\n"
            "  (let ((total 0))\n"
            "    (for-each (lambda (object)\n"
            "                (when (test target (key object))\n"
            "                  (increase! total)))\n"
            "              seq)\n"
            "    total))")
          (<p>)
          (<img> src: "images/tutorials/code_corrected.png"))))
      (<article> name: tutorial.building-jedi title: "Building from the Git sources repository"
        (<description>
          "To build Jedi from the Git sources repository you will need : "
          (<node>
            (<span> (<a> href: "http://git.or.cz/" "Git") " installed on your machine"))
          (<division> title: "Clone the repository"
            "Clone the Jedi repository (only once). "
            "This will create a 'jedi' directory containing all development files. "
            (<pre> class: "code_light"
              "$ " (<b> "git clone git://github.com/jazzscheme/jedi.git") "\n"
              "Initialized empty Git repository in ~/jedi/.git/\n"
              "got 0bf73166990a41c20627f6b935317bdc25a4e257\n"
              "...\n"
              "walk 1ba2fb1ad98ed81b62e2827639b71d6ec9b0ae9c\n"
              "Checking out files: 100% (3284/3284), done.\n"
              "\n"
              "$ " (<b> "cd jedi")))
        (<division> title: "Build the Jedi IDE"
          "The build system follows the usual configure / make methodology but as the underlying Scheme system already represents a platform independent abstraction, there is no need to use the low-level GNU tools. "
          "The build system is fully implemented in Scheme, accessed using the ./jaz script. "
          (<pre> class: "code_light"
            "$ " (<b> "./jaz") "\n"
            "JazzScheme Build System v2.6\n"
            "\n"
            "% " (<b> "configure") "\n"
            "<default>\n"
            "  system: gambit\n"
            "  platform: windows\n"
            "  safety: release\n"
            "  ...\n"
            "\n"
            "% " (<b> "make") "\n"
            "...\n"
            "\n"
            "% " (<b> "quit")))
      (<division> title: "Launch Jedi"
        "You will find the Jedi executable inside the \"bin\" folder. "
        "Launching Jedi is a good indicator of whether the installation was successful or not. "
        (<pre> class: "code_light" "$ " (<b> "bin/jedi"))))))
    
    (<article> name: tutorial.jazz title: "Jazz Platform"
      (<description>)
      (<article> name: tutorial.building-jazz title: "Building from the Git sources repository"
        (<description>
          "To build Jazz from the Git sources repository you will need : "
          (<node>
            (<span> (<a> href: "http://git.or.cz/" "Git") " installed on your machine"))
          (<division> title: "Clone the repository"
            "Clone the Jazz repository (only once). "
            "This will create a 'jazz' directory containing all development files. "
            (<pre> class: "code_light"
              "$ " (<b> "git clone git://github.com/jazzscheme/jazz.git") "\n"
              "Initialized empty Git repository in ~/jazz/.git/\n"
              "got 0bf73166990a41c20627f6b935317bdc25a4e257\n"
              "...\n"
              "walk 1ba2fb1ad98ed81b62e2827639b71d6ec9b0ae9c\n"
              "Checking out files: 100% (3284/3284), done.\n"
              "\n"
              "$ " (<b> "cd jazz")))
        (<division> title: "Build Jazz"
          "The build system follows the usual configure / make methodology but as the underlying Scheme system already represents a platform independent abstraction, there is no need to use the low-level GNU tools. "
          "The build system is fully implemented in Scheme, accessed using the ./jaz script. "
          (<pre> class: "code_light"
            "$ " (<b> "./jaz") "\n"
            "JazzScheme Build System v2.6\n"
            "\n"
            "% " (<b> "configure") "\n"
            "<default>\n"
            "  system: gambit\n"
            "  platform: windows\n"
            "  safety: release\n"
            "  ...\n"
            "\n"
            "% " (<b> "make") "\n"
            "...\n"
            "\n"
            "% " (<b> "quit")))
      (<division> title: "Try out the samples"
        "You will find the Jazz kernel executable inside the \"bin\" folder. "
        "You launch a sample by using the -run command. "
        (<pre> class: "code_light" "$ " (<b> "bin/kernel -run c4"))))))
    (<article> name: tutorial.hello-world title: "Hello World in many flavors!"
      (<description>)
      (<article> name: tutorial.console-evaluation title: "Console evaluation"
        (<description>
          (<p> "The Jedi console is a full-fledged REPL with history navigation, tab completion and syntax highlighting. ")
          (<p> (<example>
                 (<line> (<blue> "Jedi v2.1.24 beta"))
                 (<line>)
                 (<line> (<ochre> "> ") (<green> "'hello-world"))
                 (<line> (<blue> "hello-world"))
                 (<line> (<ochre> "> "))))))
      (<article> name: tutorial.scheme-context title: "Evaluating Scheme code"
        (<description>
          (<p> "The Jedi console supports multiple languages. The evaluation context determines how evaluation is done. ")
          (<p> "To evaluate pure Scheme code, set the console context to no context by using the ',(in #f)' command. ")
          (<p> (<example>
                 (<line> (<ochre> "> ") (<green> ",(in #f)"))
                 (<line> (<blue> "#f"))
                 (<line> (<ochre> "> ") (<green> "(define (hello-world)"))
                 (<line> (<green> "    (list 'hello 'world))"))
                 (<line> (<ochre> "> ") (<green> "(hello-world)"))
                 (<line> (<blue> "(hello world)"))
                 (<line> (<ochre> "> "))))
          (<p> "Lets try some Gambit specific stuff. ")
          (<p> (<example>
                 (<line> (<ochre> "> ") (<green> "(define (hello-world)"))
                 (<line> (<green> "    (##list 'hello 'world 'from 'gambit (system-version)))"))
                 (<line> (<ochre> "> ") (<green> "(hello-world)"))
                 (<line> (<blue> "(hello world from gambit 405002)"))
                 (<line> (<ochre> "> "))))))
      (<article> name: tutorial.jazz-context title: "Evaluating Jazz code"
        (<description>
          (<division> title: "Module context"
            (<p> "Jazz code must exist inside a module. ")
            (<p> "Let's change the context to jazz.debuggee so we can directly access the debugging functions of that module. ")
            (<p> (<example>
                   (<line> (<ochre> "> ") (<green> ",(in 'jazz.debuggee)"))
                   (<line> (<blue> "jazz.debuggee"))
                   (<line> (<ochre> "> ") (<green> "(inspect (list 'hello 'world))"))
                   (<line> (<ochre> "> ")))))
          (<division> title: "Object context"
            (<p> "The context can also be set to a specific object. Let's set the context to the Jedi application giving us direct access to its fields. ")
            (<p> (<example>
                   (<line> (<ochre> "> ") (<green> ",(in (current-application))"))
                   (<line> (<blue> "{Jedi #3}"))
                   (<line> (<ochre> "> ") (<green> "(list 'hello 'world 'from self (process-version))"))
                   (<line> (<blue> "(hello world from {Jedi #3} {Version 2 1 24 beta})"))
                   (<line> (<ochre> "> "))))
            (<p> "Various key objects have keyword aliases, the most important one being ':profile' for your profile instance. "
              "Let's set the context to it and define a new hello-world method in our profile. ")
            (<p> "Note that for simplicity, every profile related tutorial will assume your profile name is 'Me'. "
              "If you want to be able to try out the examples as-is, login to Jedi, create a profile named 'Me' and log in using it. ")
            (<p> (<example>
                   (<line> (<ochre> "> ") (<green> ",(in :profile)"))
                   (<line> (<blue> "{Me #42}"))
                   (<line> (<ochre> "> ") (<green> "(method (hello-world)"))
                   (<line> (<green> "    (list 'hello 'world 'from self))"))
                   (<line> (<ochre> "> ") (<green> "(hello-world)"))
                   (<line> (<blue> "(hello world from {Me #42})"))
                   (<line> (<ochre> "> ")))))))
      (<article> name: tutorial.units title: "Units"
        (<description>
          (<division> title: "Units"
            (<p> "For our first unit, we will use the existing Projects repository located at ~/.jedi/projects and the existing profile.me package located at ~/.jedi/profiles/lib/profile.me. ")
            (<p> "1- Create the unit ~/.jedi/profiles/lib/profile.me/hello/unit.scm, containing: ")
            (<p> (<example>
                   (<line> "(" (<blue> "unit") " " (<green> "hello.unit"))
                   (<line>)
                   (<line> "(display " (<ochre> "\"Hello World!\"") "))")))
            (<p> "In the console: ")
            (<p> (<example>
                   (<line> (<ochre> "> ") (<green> "(require hello.unit)"))
                   (<line> (<blue> "Hello World!"))
                   (<line> (<ochre> "> ")))))
          (<division> title: "Packages"
            (<p> "In this sample we will create a simple package inside the existing Projects repository. "
              "We will do it manually without using the IDE repository management tools. ")
            (<p> "1- Create the package definition file ~/.jedi/projects/lib/world/.package, containing: ")
            (<p> (<example>
                   "(" (<blue> "package") " " (<green> "world") ")"))
            (<p> "2- Create the unit ~/.jedi/projects/lib/world/hello/unit2.scm, containing: ")
            (<p> (<example>
                   (<line> "(" (<blue> "unit") " " (<green> "hello.unit2"))
                   (<line>)
                   (<line> "(display " (<ochre> "\"Hello World2!\"") "))")))
            (<p> "3- Because Jedi's runtime has already cached packages, you can either restart the IDE or go to the \"Repositories\" palette, right click the \"Projects\" repository and select \"Scan for new Packages\". ")
            (<p> "In the console: ")
            (<p> (<example>
                   (<line> (<ochre> "> ") (<green> "(require hello.unit2)"))
                   (<line> (<blue> "Hello World2!"))
                   (<line> (<ochre> "> ")))))
          (<division> title: "Repositories"
            (<p> "Let's now create a new 'Tutorial' repository manually without using the IDE repository-management tools. ")
            (<p> "1- Create the repository definition file ~/tutorial/.repository, containing: ")
            (<p> (<example>
                   "(" (<blue> "repository") " " (<green> "Tutorial") ")"))
            (<p> "2- Move the previously-created world package to the new repository. E.g. move the ~/.jedi/projects/lib/world/ directory inside ~/tutorial/. ")
            (<p> "This ability to transparently move packages from one repository to another one is a key feature of the unit system. ")
            (<p> "3- Add the following entry to your ~/.jazz/.jazzini initialization file: ")
            (<p> (<example>
                   "(jazz.install-repository-if-exists " (<ochre> "\"~/tutorial/\"") ")"))
            (<p> "4- Restart the IDE")
            (<p> "In the console: ")
            (<p> (<example>
                    (<line> (<ochre> "> ") (<green> "(require hello.unit2)"))
                    (<line> (<blue> "Hello World2!"))
                    (<line> (<ochre> "> ")))))))
      (<article> name: tutorial.modules title: "Modules"
        (<description>
          (<division> title: "Modules"
            (<p> "Let's create our first jazz module. "
              "Note that since a module is a unit, everything above applies to it too. ")
            (<p> "1- Create the module ~/tutorial/world/hello/module.jazz, containing: ")
            (<p> (<example>
                   (<line> "(" (<blue> "module") " " (<green> "hello.module") " jazz")
                   (<line>)
                   (<line> "(" (<blue> "definition") " " (<blue> "public") " (" (<green> "hello-world") ")")
                   (<line> "  (inspect (list hello world))))")))
            (<p> "In the console: ")
            (<p> (<example>
                   (<line> (<ochre> "> ") (<green> "(import hello.module)"))
                   (<line> (<blue> "Walk problems encountered"))
                   (<line> (<blue> "  In hello.module"))
                   (<line> (<blue> "    At hello-world"))
                   (<line> (<blue> "      Unresolved symbol: inspect"))
                   (<line> (<blue> "      Unresolved symbol: hello"))
                   (<line> (<blue> "      Unresolved symbol: world"))
                   (<line> (<ochre> "1> "))))
            (<p> "We receive this walk-time error as modules code-walk their code and will report any unresolved symbols. ")
            (<p> "First let's clear the error level by pressing control-d in the console: ")
            (<p> (<example>
                   (<line> (<ochre> "1> "))
                   (<line> (<ochre> "> "))))
            (<p> "And now let's fix the unresolved symbols: ")
            (<p> (<example>
                   (<line> "(" (<blue> "module") " " (<green> "hello.module") " jazz")
                   (<line>)
                   (<line> "(" (<blue> "import") " (jazz.debuggee))")
                   (<line>)
                   (<line> "(" (<blue> "definition") " " (<blue> "public") " (" (<green> "hello-world") ")")
                   (<line> "  (inspect (list 'hello 'world))))")))
            (<p> "In the console: ")
            (<p> (<example>
                   (<line> (<ochre> "> ") (<green> "(import hello.module)"))
                   (<line> (<ochre> "> ") (<green> "(hello-world)"))
                   (<line> (<ochre> "> ")))))
          (<division> title: "Native Scheme access"
            (<p> "We will now use the 'native' special-form to access Scheme code from a Jazz module. ")
            (<p> "Note that we are using a unit for our Scheme code solely so it is easier to load using the 'require' special-form. "
              "The code could also be in a pure Scheme file that we would then load manually using Scheme's load function. ")
            (<p> "1- Create the Scheme unit ~/tutorial/world/hello/native.scm, containing: ")
            (<p> (<example>
                   (<line> "(" (<blue> "unit") " " (<green> "hello.native"))
                   (<line>)
                   (<line> "(" (<blue> "define") " (" (<green> "hello-world") ")")
                   (<line> "  (list 'hello 'world 'from 'the 'Scheme 'world!)))")))
            (<p> "2- Create the Jazz module ~/tutorial/world/hello/access.jazz, containing: ")
            (<p> (<example>
                   (<line> "(" (<blue> "module") " " (<green> "hello.access") " jazz")
                   (<line>)
                   (<line> "(" (<blue> "require") " hello.native)")
                   (<line>)
                   (<line> "(" (<blue> "native") " " (<green> "hello-world") ")")
                   (<line>)
                   (<line> "(display (hello-world)))")))
            (<p> "In the console: ")
            (<p> (<example>
                   (<line> (<ochre> "> ") (<green> "(require hello.access)"))
                   (<line> (<blue> "(hello world from the Scheme world!)"))
                   (<line> (<ochre> "> ")))))
          (<division> title: "Products"
            "Finally, let's create a product so we can run the previous code from the command line. "
            (<p> "1- Create the unit that will run the product ~/tutorial/world/hello/run.jazz, containing: ")
            (<p> (<example>
                   (<line> "(" (<blue> "module") " " (<green> "hello.run") " jazz")
                   (<line>)
                   (<line> "(register-product-run 'hello")
                   (<line> "  (lambda (descriptor)")
                   (<line> "    (load-unit 'hello.access))))")))
            (<p> "2- Modify the existing world package to register the product ~/tutorial/world/.package:")
            (<p> (<example>
                   (<line> "(" (<blue> "package") " " (<green> "world"))
                   (<line> "  ")
                   (<line> "  (" (<blue> "products") " (hello (run hello.run))))")))
            (<p> "From the command line: ")
            (<p> (<example>
                   (<line> "$ bin/kernel -run hello")
                   (<line> "(hello world from the Scheme world!)"))))))
      (<article> name: tutorial.processes title: "Processes"
        (<description>
          (<p> "Now let's try our first IDE-generated process. ")
          (<p> "1- Create an 'hello-process' process by selecting the menu item \"File / New Project...\": ")
          (<img> src: "images/tutorials/hello_process.png")
          (<p> "If we expand 'hello-process' in the Workbench: ")
          (<img> src: "images/tutorials/hello_process_workbench.png")
          (<p> "We see the IDE has generated the following files for us:")
          (<node>
            "The package: ~/tutorial/hello-process/.package"
            "The process unit: ~/tutorial/hello-process/src/hello-process/process.jazz"
            "The run unit: ~/tutorial/hello-process/src/hello-process/run.jazz"
            "The Jedi manifest: ~/tutorial/hello-process/src/project/hello-process/Hello-Process-Manifest.jazz"
            "The Jedi project: ~/tutorial/hello-process/src/project/hello-process/Hello-Process-Project.jazz")
          (<p> "2- Let's modify the generated process code: ")
          (<p> (<example>
                 (<line> (<purple> ";;;=============="))
                 (<line> (<purple> ";;;  JazzScheme"))
                 (<line> (<purple> ";;;=============="))
                 (<line> (<purple> ";;;"))
                 (<line> (<purple> ";;;;") (<red> " Hello-Process"))
                 (<line> (<purple> ";;;"))
                 (<line>)
                 (<line>)
                 (<line> "(" (<blue> "module") " " (<green> "hello-process.process") " jazz")
                 (<line>)
                 (<line>)
                 (<line> "(" (<blue> "import") " (jazz.platform)")
                 (<line> "        (jazz.process))")
                 (<line>)
                 (<line>)
                 (<line> "(" (<blue> "class") " " (<green> "Hello-Process-Process") " " (<blue> "extends") " Process")
                 (<line> "  ")
                 (<line> "  ")
                 (<line> "  (" (<blue> "method") " " (<blue> "override") " (" (<green> "start-process") ")")
                 (<line> "    (system-message " (<ochre> "\"Hello World!\"") ")")
                 (<line> "    (quit-process))))")))
          (<p> "Now let's run it using the menu item \"Project / Run\" or from the command line by launching 'kernel -run hello-process'.")
          (<img> src: "images/tutorials/hello_process_run.png")))))
  ;;;
  ;;;; Community
  ;;;
  (<section> name: community title: "Community"
    (<article> title: "Community"
      (<description>
        (<node>
          @wait(<a> href: "http://64.235.209.250/jazzwiki" "Wiki")
          (<a> href: "http://github.com/jazzscheme/jazz/commits/master" "Changelog")
          @wait(<a> href: "community.htm#community.bugs" "Reporting Bugs")
          (<a> href: "community.htm#community.group" "Discussion Group")
          (<a> href: "community.htm#community.contributing" "Contributing")
          @wait
          (<a> href: "roadmap.htm" "Roadmap"))
        (<division> title: "IRC"
          "Come chat with us in the #jazzscheme or #gambit channels on Freenode. ")))
    @wait(<article> name: community.bugs title: "Reporting Bugs"
      (<description>
        (<p> "Bugs can be logged using "
        (<a> href: "http://64.235.209.250/bugzilla" "Bugzilla")
        ". ")))
    (<article> name: community.group title: "Discussion Group"
      (<description>
        (<p> "If you feel a problem you encountered could be of interest to other users or have any suggestions or comments, please send them to the "
          (<a> href: "http://groups.google.com/group/jazzscheme" "JazzScheme Discussion Group")
          ". ")))
    (<article> name: community.contributing title: "Contributing"
      (<description>
        (<p> "Contributions of any kind are always welcome. "
          "We will be working closely with contributors to make sure contributed code is of the highest quality and integrates well with the existing system. "
          "If you are a beginning Jazz programmer, this can be a great learning experience!")))
  ;;;
  ;;;; Roadmap
  ;;;
   @wait (<section> name: roadmap title: "Roadmap"
      (<article> title: "Roadmap"
      (<description>
        (<node>
          (<a> href: "roadmap.htm#roadmap.high" "High Priority")
          (<a> href: "roadmap.htm#roadmap.medium" "Medium Priority")
          (<a> href: "roadmap.htm#roadmap.low" "Low Priority")
          (<a> href: "roadmap.htm#roadmap.asneeded" "To be done As Needed"))
        "Note that these entries represent my own development priorities at this point in time and can change depending on :"
        (<node>
          "Community feedback,"
          "Time and resources availability,"
          "Collaboration proposals,"
          "Contracts priorities,"
          "...")))
      (<article> name: roadmap.high title: "High Priority"
      (<description>
        (<div> class: "project-first" (<span> class: "project" "JazzScheme Public Release") " (medium project, 95% complete, work in progress)")
        (<p>) (<i> "Description")
        (<p>)
        (<span> "Complete the work needed on JazzScheme for a public release.")
        (<p>) (<i> "Todo")
        (<p>)
        (<node>
          "Documentation"
          "Tutorials"
          "...")))
      (<article> name: roadmap.medium title: "Medium Priority"
      (<description>
        (<div> class: "project-first" (<span> class: "project" "License Module") " (small project, 60% complete)")
        (<p>) (<i> "Description")
        (<p>)
        (<span> "The goal of this module is to have all necessary licensing services to distribute trial versions of products.")
        (<p>)
        (<div> class: "project" (<span> class: "project" "Web Server / Framework") " (large project, 50% complete)")
        (<p>) (<i> "Description")
        (<p>)
        (<span> "Module to support building static and dynamic websites in Jazz.")
        (<p>) (<i> "Todo")
        (<node>
          "Complete the actual first draft implementation of the Web Server."
          "Consider the pros and cons of a continuation based approach to Web servers."
          "Build a nice modern framework for web development propably based on Ajax like concepts."
          "Optimize markup, especially markup transformations.")))
      (<article> name: roadmap.low title: "Low Priority"
      (<description>
        (<div> class: "project-first" (<span> class: "project" "Dependencies Analyser") " (medium project, 80% complete)")
        (<p>) (<i> "Description")
        (<p>)
        (<span> "At the moment, Jazz has a solid module system that can be used to build applications. "
          "What is needed is a solution to the problem of complex frameworks like Jazz where including one module can potentially include almost all other modules because of all the cross-module references.")
        (<p>)
        (<div> class: "project" (<span> class: "project" "Java Interface") " (large project, 40% complete)")
        (<p>) (<i> "Description")
        (<p>)
        (<span> "Using JNI, enable Jazz code to seamlessly call Java classes and vice-versa.")
        (<p>)
        (<p>) (<i> "Notes")
        (<p>)
        (<node>
          (<span> "At the moment, we are already able to call Java code. "))
        (<p>)
        (<p>) (<i> "Todo")
        (<p>)
        (<node>
          (<span> "Garbage collector support. ")
          "Finish all the details.")
        (<p>)
        (<div> class: "project" (<span> class: "project" ".Net Interface") " (large project, 0% complete)")
        (<p>) (<i> "Description")
        (<p>)
        (<span> "Enable Jazz code to seamlessly call .Net classes and vice-versa.")
        (<p>)
        (<div> class: "project" (<span> class: "project" "GUI Designer") " (medium project, 75% complete)")
        (<p>) (<i> "Description")
        (<p>)
        (<span> "Create a GUI designer for Jazz views and layouts.")
        (<p>) (<i> "Todo")
        (<p>)
        (<node>
          "The GUI designer is pretty much functional for basic editing. What is needed is support for layouts and for Jazz's usage of container views.")))
      (<article> name: roadmap.asneeded title: "To be done As Needed"
      (<description>
        (<div> class: "project" (<span> class: "project" "Logging / Resources Monitoring / Performance Profiling") " (small project, 80% complete)")
        (<p>) (<i> "Description")
        (<p>)
        (<span> "At the moment Jazz has a nice logging framework, basic resources monitoring and a simple yet useful performance profiler. ")
        (<p>) (<i> "Todo")
        (<p>)
        (<node>
          "Unify logging, resources monitoring and performance profiling using markup."
          "Make all three aware of the others such that resources or performance overhead of any of the three will not be included in the final reports.")
        (<p>)
        (<div> class: "project" (<span> class: "project" "Iteration Framework") " (small project, 0% complete)")
        (<p>) (<i> "Description")
        (<p>)
        (<span> "At the moment, Jazz supports internal iterator mainly through " (<code> "for-each") " and user extensible external iterators. "
          "What is needed for simplicity and performance is a way to support user extensible internal iterators.")
        (<p>)
        (<div> class: "project" (<span> class: "project" "Styled Text") " (medium project, 70% complete)")
        (<p>) (<i> "Description")
        (<p>)
        (<span> "The Jazz text already supports embedding views in a fashion similar to HTML but it needs more work. ")
        (<p>)
        (<p>) (<i> "Goals")
        (<p>)
        (<node>
          "Simplify GUI design."
          "Simplify building applications where both a desktop version and a web version are needed.")
        (<p>)
        (<p>) (<i> "Todo")
        (<p>)
        (<node>
          "Implement the upward-downward text rendering algorithm for internal objects resizing."
          "Clean the text by implementing most of the good concepts of CSS.")))))
  ;;;
  ;;;; Repository
  ;;;
  @to-remove
  (<section> name: repository title: "Repository"
    (<article> title: "Repository"
      (<description>
        "Sources can be downloaded from any of the following " (<a> href: "http://git.or.cz/" "Git") " repositories : "
          (<node>
                (<span> (<a> href: "git://github.com/jazzscheme/jazz.git" "git://github.com/jazzscheme/jazz.git")))))
    (<article> title: "Building"
      (<description>
        "Building instruction can be found here: "
        (<a> href: "installation.htm#installation.building" "installation.htm#installation.building"))))
  ;;;
  ;;;; Documentation
  ;;;
  (<section> name: documentation title: "Documentation"
    (<article> title: "Documentation"
      (<description>
        (<node>
          (<a> href: "documentation.htm#documentation.roots" "Roots")
          (<a> href: "documentation.htm#documentation.paradigms" "Paradigms")
          (<a> href: "documentation.htm#documentation.license" "License")
          (<a> href: "installation.htm" "Installation")
          (<a> href: "kernel.htm" "Module System")
          (<a> href: "jazz.htm" "Jazz Platform")
          (<a> href: "jedi.htm" "Jedi IDE")
          (<a> href: "samples.htm" "Samples")
          (<a> href: "reference.htm" "Reference"))))
      ;; (<article> name: history title: "History")
    (<article> name: documentation.roots title: "Roots"
      (<description>
        "Jazz borrows ideas from the following languages :"
        (<node>
          (<span> "Scheme for its clean design and flexibility")
          (<span> "Common Lisp for its rich library and many great concepts")
          (<span> "Java for its simple object system (but adds many missing features)")
          (<span> "Visual Basic (yes even VB!) for its rapid development environment"))))
    (<article> name: documentation.paradigms title: "Paradigms"
      (<description>
        "Jazz supports in a unified and coherent approach the following paradigms :"
        (<node>
          (<span> "Functional programming")
          (<span> "Object-oriented programming")
          (<span> "Component programming"))))
    (<article> name: documentation.license title: "License"
      (<description>
        "JazzScheme is released under a dual "
        (<a> href: "http://www.mozilla.org/MPL/MPL-1.1.html" "Mozilla Public License Version 1.1")
        " or "
        (<a> href: "http://www.gnu.org/copyleft/gpl.html" "GNU General Public License v2 or later")
        ". You can choose whichever license you prefer."))
    (<section> name: kernel title: "Module System" manual?: #t index?: #f projects: (kernel)
      )
    (<section> name: jazz title: "Jazz Platform" manual?: #t projects: (jazz)
      )
    (<section> name: jedi title: "Jedi IDE" manual?: #t index?: #f projects: (jedi)
      )
    (<section> name: samples title: "Samples"
      (<article> title: "Samples"
        (<description>
          (<node>
            (<a> href: "samples.htm#sample.world" "World")
            (<a> href: "samples.htm#sample.mandelbrot" "Mandelbrot")
            (<a> href: "samples.htm#sample.c4" "C4")
            (<a> href: "samples.htm#sample.gomoku" "Gomoku")
            (<a> href: "samples.htm#sample.gameserver" "Game Server")
            (<a> href: "samples.htm#sample.jedi" "Jedi"))
          (<p>)
      "To build / run / test a sample, open it's project in the workbench and double-click it's icon (the ruler with a pen icon). "
      "This will activate the project and make it the current project. "
      "You can then use the Project menu to interact with it. "
      (<p>)
      "Note that there is no need to build a sample before running it. "
      "Jazz support running any unit interpreted. "
      "The only exception is units containing FFI code but no sample uses any FFI at the moment. "))
    (<article> name: sample.world title: "World"
      (<description>
        "The classical hello world sample. "))
    (<article> name: sample.mandelbrot title: "Mandelbrot"
      (<description>
        "A simple window to explain how Mandelbrot sets are calculated that I did with my son. "
        (<p>)
        "Use the Test menu item to create a new Mandelbrot window. "))
    (<article> name: sample.c4 title: "C4"
      (<description>
        "The Connect-4 game with a simple minimax AI. "
        (<p>)
        "Winner is first one to put 4 circles in a line. "))
    (<article> name: sample.gomoku title: "Gomoku"
      (<description>
        "The classic japanese game with a simple minimax AI. "
        (<p>)
        "Winner is first one to put 5 stones in a line. "))
    (<article> name: sample.gameserver title: "Game Server"
      (<description>
        "A sample web server."
        (<p>)
        "You can launch the game server using either of the following methods :"
        (<p>)
        (<node>
          (<span>
            "Select the Game Server project by double-clicking it and then launch the project using the Project / Debug command. "
            "You can use the game server console to control the server. "
            "Type help for help. ")
          (<span>
            "Select the Servers window and double click the Game row to start the server inside the IDE."))
        (<p>)
        "To try the server enter the following address in any browser :"
        (<p>)
        (<a> href: "http://localhost:8080/Games")))
        (<article> name: sample.jedi title: "Jedi"
          (<description>
            "The Jedi IDE is itself the largest sample of Jazz code available. "
            "Anything you see in Jedi can be done in your applications. "
            "The full source code of Jedi is included for you to explore and discover how everything is done. ")))
    (<section> name: reference title: "Reference" manual?: #t projects: (:reference)
      ))
  ;;;
  ;;;; Download
  ;;;
  (<section> name: download title: "Download"
    (<article> title: "Download"
      (<description>
        (<node>
          (<a> href: "download.htm#releases" "Jedi Binary Releases")
          @old
          (<a> href: "packages.htm" "Packages"))
        (<division> title: "What does a Jedi binary release contain?"
          "Every binary release contains :"
          (<node>
            "Precompiled binaries for Jedi and Jazz. "
            "Complete source code of Jedi and Jazz. "
            "A local copy of the Jedi .git sources repository. "
            "A local copy of the Jazz .git sources repository. ")
          (<p>)
          "To install a binary release, simply extract it anywhere you want and then launch"
          (<node>
            (<span> "the Jazz kernel: " (<code> "bin/kernel") " or")
            (<span> "the Jedi IDE: " (<code> "bin/jedi")))
          (<span> "See " (<a> href: "tutorials.htm#tutorial.installation" "Installation") " for step by step tutorials of the installation process for each platform. ")
          (<p>)
          "Note that as Jedi binary releases contain a complete Jazz runtime environment they can be a great way to experiment with the Jazz language and platform. "
          )
        (<division> title: "Keeping up-to-date"
          "As a binary release includes the local .git sources repositories, you can pull the latest version at any time and then use ./jaz to update your binaries "
          "(see " (<a> href: "installation.htm#installation.building" "Building") " for details). "
          "Note that the build system will only build files that changed since the release. "
          )
        @wait
        (<division> title: "Repository"
          "There is no installer at the moment. "
          "Please install the sources from one of the following Git repositories and then build jazz following these "
          (<a> href: "installation.htm#installation.building" "instructions")
          ". "
          (<node>
                (<span> (<a> href: "git://github.com/jazzscheme/jazz.git" "git://github.com/jazzscheme/jazz.git"))))))
    (<article> name: download.releases title: "Jedi Binary Releases"
      (<description>
        (<node>
          (<a> href: "download.htm#download.2.6" "Jedi 2.6")))
    (<article> name: download.2.6 title: "Jedi 2.6"
      (<description>
        (<division> title: "Mac OS X"
          (<node>
            (<span> (<a> href: "http://www-etud.iro.umontreal.ca/~lasallej/jedi-2.6-macosx-intel32.tar.gz" "jedi-2.6-macosx-intel32.tar.gz"))))
        (<division> title: "Windows"
          (<node>
            (<span> (<a> href: "http://www-etud.iro.umontreal.ca/~lasallej/jedi-2.6-windows-mingw.zip" "jedi-2.6-windows-mingw.zip"))))
        (<division> title: "Linux"
          (<node>
            (<span> (<a> href: "http://www-etud.iro.umontreal.ca/~lasallej/jedi-2.6-linux-intel32.tar.gz" "jedi-2.6-linux-intel32.tar.gz"))))))))
  ;;;
  ;;;; Installation
  ;;;
  (<section> name: installation title: "Installation"
      (<article> title: "Installation"
        (<description>
          (<node>
            (<a> href: "installation.htm#installation.dependencies" "Dependencies")
            (<a> href: "installation.htm#installation.jazz" "Jazz")
            (<a> href: "installation.htm#installation.jedi" "Jedi")
            )))
      (<article> name: installation.dependencies title: "Dependencies"
        (<description>
          (<division> title: "Cairo"
            "If you plan on using Jedi or Jazz GUI libraries, you will need to install "
            (<a> href: "http://cairographics.org/" "Cairo")
            ". "
            "On Windows, we precompiled it for you as a DLL so it is already installed. "
            "On other systems, you should install it the usual way with your package manager and Jazz will use "
            (<code> "pkg-config")
            " to find the various paths. "
            "If you are on Mac OS X, the simplest way to install Cairo is through macports. "
            "See the next section for details on installing macports if you don't already have it. "
            "With macports installed, installing cairo is easy. "
            "Simply execute the following command from any terminal: "
            (<code> "\"sudo port install cairo\"")
            ". "
            "Note that on systems that support both binary and development packages you should install the "
            (<code> "cairo-dev")
            " development package. ")
          (<division> title: "Macports"
            "You install macports from "
            (<a> href: "http://www.macports.org/" "http://www.macports.org/")
            ". "
            "Note that a standard Mac OS X Package (.pkg) Installer is available. "
            "After the installation, you will need to edit your " (<code> "~/.bash_profile") " file. "
            "Add " (<code> "/opt/local/bin") " to your " (<code> "PATH") " variable if it is not already there, and add the following line anywhere: "
            (<code> "\"export PKG_CONFIG_PATH=/opt/local/lib/pkgconfig\"")
            ". ")
          (<division> title: "X11 on the Mac"
            "Due to a bug in Apple's installed version of X11, if you plan on using X11 on the Mac, you will need to install the latest X11 from Apple's official site for X11: "
            (<a> href: "http://xquartz.macosforge.org/" "http://xquartz.macosforge.org/")
            ". "
            "Note that depending on your settings, X11 may need to be manually started before launching the Jedi IDE. ")))
      (<article> name: installation.jazz title: "Jazz"
        (<description>
          (<division> title: "Building from the sources"
            "If you want to stay closely up-to-date on Jazz development or plan on contributing, you should build the latest version from the Git sources repository "
            "(see " (<a> href: "development.htm#development.building" "Building") " for details). ")
          (<p>)
          "A quick and simple way to experiment quickly with the Jazz language and platform is to install a Jedi binary release " "(see " (<a> href: "download.htm#releases" "Jedi Binary Releases") " for a list of available releases)" " as it will include a complete pre-built Jazz runtime environment. "
          ))
      (<article> name: installation.jedi title: "Jedi"
        (<description>
          (<division> title: "Binary releases"
            "To install a binary release, simply extract it anywhere you want and then launch"
            (<node>
              (<span> "the Jazz kernel: " (<code> "bin/kernel") " or")
              (<span> "the Jedi IDE: " (<code> "bin/jedi")))
            (<span> "See " (<a> href: "download.htm#releases" "Releases") " for available releases and " (<a> href: "tutorials.htm#tutorial.installation" "Installation") " for step by step tutorials of the installation process for each platform. "))
          (<division> title: "Building from the sources"
            "If you want to stay closely up-to-date on Jedi / Jazz development or plan on contributing, you should build the latest version from the Git sources repository. "
            (<p>)
            "See " (<a> href: "development.htm" "Development") " for details and " (<a> href: "tutorials.htm#tutorial.building-jedi" "Building from the Git sources repository") " for a step by step tutorial of the build process. "))))
  ;;;
  ;;;; Development
  ;;;
  (<section> name: development title: "Development"
      (<article> title: "Development"
        (<description>
          (<node>
            (<a> href: "development.htm#development.dependencies" "Dependencies")
            (<a> href: "development.htm#development.sources" "Sources")
            (<a> href: "development.htm#development.building" "Building")
            (<node>
              (<a> href: "development.htm#development.examples" "Examples")
              (<a> href: "development.htm#development.scripting" "Scripting")
              (<a> href: "development.htm#development.configure" "configure")
              (<a> href: "development.htm#development.make" "make")
              (<a> href: "development.htm#development.clean" "make clean")
              (<a> href: "development.htm#development.cleankernel" "make cleankernel")
              (<a> href: "development.htm#development.cleanobject" "make cleanobject")
              (<a> href: "development.htm#development.cleanlibrary" "make cleanlibrary")
              (<a> href: "development.htm#development.install" "make install")
              (<a> href: "development.htm#development.list" "list")
              (<a> href: "development.htm#development.delete" "delete")
              (<a> href: "development.htm#development.quit" "quit")
              (<a> href: "development.htm#development.troubleshooting" "Troubleshooting")))))
    (<article> name: development.dependencies title: "Dependencies"
        (<description>
          (<division> title: "Cairo"
            "If you plan on doing GUI development, you will need to install "
            (<a> href: "http://cairographics.org/" "Cairo")
            ". "
            "On Windows, we precompiled it for you as a DLL so it is already installed. "
            "On other systems, you should install it the usual way with your package manager and Jazz will use "
            (<code> "pkg-config")
            " to find the various paths. "
            "If you are on Mac OS X, the simplest way to install Cairo is through macports. "
            "See the next section for details on installing macports if you don't already have it. "
            "With macports installed, installing cairo is easy. "
            "Simply execute the following command from any terminal: "
            (<code> "\"sudo port install cairo\"")
            ". "
            "Note that on systems that support both binary and development packages you should install the "
            (<code> "cairo-dev")
            " development package. ")
          (<division> title: "Macports"
            "You install macports from "
            (<a> href: "http://www.macports.org/" "http://www.macports.org/")
            ". "
            "Note that a standard Mac OS X Package (.pkg) Installer is available. "
            "After the installation, you will need to edit your " (<code> "~/.bash_profile") " file. "
            "Add " (<code> "/opt/local/bin") " to your " (<code> "PATH") " variable if it is not already there, and add the following line anywhere: "
            (<code> "\"export PKG_CONFIG_PATH=/opt/local/lib/pkgconfig\"")
            ". ")
          (<division> title: "X11 on the Mac"
            "Due to a bug in Apple's installed version of X11, if you plan on using X11 on the Mac, you will need to install the latest X11 from Apple's official site for X11: "
            (<a> href: "http://xquartz.macosforge.org/" "http://xquartz.macosforge.org/")
            ". "
            "Note that depending on your settings, X11 may need to be manually started before launching the Jedi IDE. ")
          (<division> title: "MinGW"
            "On Windows, the only backend fully tested to work with JazzScheme is "
            (<a> href: "http://www.mingw.org/" "MinGW")
            ". "
            "Note that some people have reported problems when building JazzScheme with old versions of MinGW. "
            "Another reported problem was from someone having both Cygwin and MinGW installed, where MinGW would wrongly call Cygwin's gcc. "
            "Uninstalling Cygwin fixed the problem. "
            "Also, as both MinGW and Git come with their own shell, the simplest way to have a shell supporting both, which is required to build Jazz, is to select the \"Run Git and included Linux tools from the Windows Command Prompt\" when installing Git and then using the MinGW shell.")))
    (<article> name: development.sources title: "Sources"
        (<description>
          "JazzScheme uses " (<a> href: "http://git.or.cz/" "Git") " to store and access all development files. "
          (<division> title: "Repositories"
            "The JazzScheme repositories are hosted at github :"
            (<node>
              (<span> (<a> href: "git://github.com/jazzscheme/jazz.git" "git://github.com/jazzscheme/jazz.git"))
              (<span> (<a> href: "git://github.com/jazzscheme/jedi.git" "git://github.com/jazzscheme/jedi.git")))
            "If you plan on using the Jedi IDE, only clone the Jedi repository as it will automatically include the Jazz repository as a submodule. ")
          (<division> title: "Help"
            "Some useful Git links :"
            (<node>
              (<a> href: "http://www.kernel.org/pub/software/scm/git/docs/" "Documentation")
              (<a> href: "http://www.kernel.org/pub/software/scm/git/docs/user-manual.html" "User Manual")
              (<a> href: "http://www.kernel.org/pub/software/scm/git/docs/gittutorial.html" "Tutorial")))
          (<division> title: "Troubleshooting"
            "If you get an error like \"fatal: unable to connect a socket (Connection timed out)\" it may be that you are behind a firewall that blocks outbound connections on Git's port 9418. "))
          (<article> name: development.scenarios title: "Scenarios"
          (<description>
            (<division> title: "Jedi User"
              (<pre>
                (<span> class: "comment" ";; Clone the Jedi repository (only once).") "\n"
                (<span> class: "comment" ";; This will create a 'jedi' directory containing all development files.") "\n"
                "$ git clone git://github.com/jazzscheme/jedi.git\n"
                "$ cd jedi\n"
                "\n"
                (<span> class: "comment" ";; Pull from time to time to get the latest revision.") "\n"
                "$ git pull"))
          (<division> title: "Jazz Contributor"
            (<pre>
              (<span> class: "comment" ";; Clone the Jazz repository (only once).") "\n"
              (<span> class: "comment" ";; This will create a 'jazz' directory containing all development files.") "\n"
              "$ git clone git://github.com/jazzscheme/jazz.git\n"
              "$ cd jazz\n"
              "\n"
              (<span> class: "comment" ";; Add email and name information that will appear in patches you submit.") "\n"
              "$ git config user.email \"you@email.com\"\n"
              "$ git config user.name \"Your Name\"\n"
              "\n"
              (<span> class: "comment" ";; Create a public branch that will be used to rebase your changes.") "\n"
              "$ git branch public\n"
              "\n"
              (<span> class: "comment" ";; Commit changes you made and want to contribute.") "\n"
              (<span> class: "comment" ";; Note that the -a option is necessary if you added any new files.") "\n"
              "$ git commit -a -m \"Some message describing your changes\"\n"
              "\n"
              (<span> class: "comment" ";; Pull from time to time to get the latest revision and rebase your changes.") "\n"
              (<span> class: "comment" ";; Rebasing your changes before sending your changes as patches will greatly") "\n"
              (<span> class: "comment" ";; minimize risks of conflicts when the Jazz maintainers apply your patches to") "\n"
              (<span> class: "comment" ";; the central repository.") "\n"
              "$ git checkout public\n"
              "$ git pull origin master\n"
              "$ git checkout master\n"
              "$ git rebase public\n"
              (<span> class: "comment" ";; Optional step: fix any rebase conflicts.") "\n"
              (<span> class: "comment" ";; See http://www.kernel.org/pub/software/scm/git/docs/git-rebase.html for details.") "\n"
              (<span> class: "comment" ";; Edit and resolve conflicts in all the conflicting files.") "\n"
              "$ git add <list of resolved files>\n"
              "$ git rebase --continue\n"
              "\n"
              (<span> class: "comment" ";; Send contributions as a series of patch files.") "\n"
              "$ git format-patch origin\n"
              "<email generated patch files to gcartier@jazzscheme.org>"))
          (<division> title: "Maintainer Scenario"
            (<pre>
              (<span> class: "comment" ";; Publish some changes.") "\n"
              "$ git push pub master\n"
              "\n"
              (<span> class: "comment" ";; Merge contributions.") "\n"
              "$ git am -3 *.patch\n"
              (<span> class: "comment" ";; Optional step: fix any am conflict.") "\n"
              "$ git am --resolved")))))
    (<article> name: development.building title: "Building"
        (<description>
          "The same methodology is used to build Jazz or Jedi. "
          "Simply invoke the ./jaz script from the Jazz or the Jedi source directory. "
          "Jam will take care of updating any Git submodule dependencies and of building all the source files that have changed since the last build. "
          (<p>)
          "The build system follows the usual configure / make methodology but as the underlying Scheme system already represents a platform independent abstraction, there is no need to use the low-level GNU tools. "
          "The build system is fully implemented in Scheme, accessed using the ./jaz script."
          (<p>)
          "Do not worry about the many warnings generated when building the platform modules. "
          "These are due to limitations in the current implementation of Gambit's foreign-function interface and can be safely ignored. "
          (<p>)
          "A full build of Jazz or Jedi will take about 10mn on a MacBook Pro and require about 2G of memory to build without disk swapping. ")
        (<article> name: development.examples title: "Examples"
          (<description>
          (<division> title: "Building Jazz"
            (<p>)
            (<pre>
              "$ cd jazz\n"
              "$ " (<b> "./jaz") "\n"
              "JazzScheme Build System v2.6\n"
              "\n"
              (<span> class: "comment" ";; Create the default configuration") "\n"
              "% " (<b> "configure") "\n"
              "<default>\n"
              "  system: gambit\n"
              "  platform: windows\n"
              "  safety: release\n"
              "  ...\n"
              "\n"
              (<span> class: "comment" ";; Build the default target: 'all'") "\n"
              "% " (<b> "make") "\n"
              "..."))
            (<division> title: "Building Jedi"
              (<pre>
                "$ cd jedi\n"
                "$ " (<b> "./jaz") "\n"
                "JazzScheme Build System v2.6\n"
                "\n"
                (<span> class: "comment" ";; Create the default configuration") "\n"
                "% " (<b> "configure") "\n"
                "<default>\n"
                "  system: gambit\n"
                "  platform: windows\n"
                "  safety: release\n"
                "  ...\n"
                "\n"
                (<span> class: "comment" ";; Build the default target: 'jedi'") "\n"
                "% " (<b> "make") "\n"
                "..."))
            (<division> title: "Building many targets at a time"
              (<pre>
                "$ cd jedi\n"
                "$ " (<b> "./jaz") "\n"
                "JazzScheme Build System v2.6\n"
                "\n"
                (<span> class: "comment" ";; This will build :") "\n"
                (<span> class: "comment" ";; - the jazz target in the default configuration") "\n"
                (<span> class: "comment" ";; - the platform target in the debug configuration") "\n"
                (<span> class: "comment" ";; - the default target in the release configuration") "\n"
                "% " (<b> "make jazz platform@debug @release") "\n"
                "..."))))
        (<article> name: development.scripting title: "Scripting"
          (<description>
            "Launching the build system using jam with no options starts it in interactive mode which is unsuitable for batch scripting. "
            (<p>)
            "For scripting, the build system can be invoked directly from the command line : "
            (<p>)
            (<pre> "$ ./jaz [options]")))
        (<article> name: development.configure title: "configure"
          (<description>
            "Register a new configuration. "
            (<p>)
            "To support multiple configurations, configurations can optionaly be named."
            (<p>)
            "Configurations are loaded / saved from the .configurations file located at the root. "
            "Using configure is basically an easy way to edit the .configurations file. "
            (<p>)
            (<pre> class: "code"
              "configure\n"
              "  [name: " (<i> "name") "]\n"
              "  [system: " (<i> "system") "]\n"
              "  [platform: " (<i> "platform") "]\n"
              "  [windowing: " (<i> "windowing") "]\n"
              "  [safety: " (<i> "safety") "]\n"
              "  [optimize?: " (<i> "optimize?") "]\n"
              "  [debug-environments?: " (<i> "debug-environments?") "]\n"
              "  [debug-location?: " (<i> "debug-location?") "]\n"
              "  [debug-source?: " (<i> "debug-source?") "]\n"
              "  [debug-foreign?: " (<i> "debug-foreign?") "]\n"
              "  [mutable-bindings?: " (<i> "mutable-bindings?") "]\n"
              "  [kernel-interpret?: " (<i> "kernel-interpret?") "]\n"
              "  [destination: " (<i> "destination") "]")
            (<p>)
            (<dl>
              (<dt> (<i> (<code> "name")))
              (<dd>
                "The optional name. Must be alphanumeric."))
            (<p>)
            (<dl>
              (<dt> (<i> (<code> "system")))
              (<dd>
                "The underlying Scheme system (determined automatically)"
                (<p>)
                (<node>
                  "gambit (the only fully supported scheme system at the moment)"
                  "chicken"
                  "...")))
            (<p>)
            (<dl>
              (<dt> (<i> (<code> "platform")))
              (<dd>
                "The platform (will try and guess based on system type)"
                (<p>)
                (<node>
                  "mac"
                  "windows"
                  "linux")))
            (<p>)
            (<dl>
              (<dt> (<i> (<code> "windowing")))
              (<dd>
                "The windowing system (will try and guess based on system type)"
                (<node>
                  "carbon (development started)"
                  "x11 (almost there)"
                  "#f (use default platform windowing)")))
            (<p>)
            (<p>)
            (<dl>
              (<dt> (<i> (<code> "safety")))
              (<dd>
                "The runtime safety level"
                (<p>)
                (<dl>
                  (<dt> "core")
                  (<dd>
                    "Core debug mode for debugging JazzScheme itself. "
                    "Adds tests to make the kernel and core safe. ")
                  (<dt> "debug")
                  (<dd>
                    "Standard debug mode with tests to make user code safe. "
                    "This is the recommanded safety for development. ")
                  (<dt> "release (the default)")
                  (<dd>
                    "Release mode for stable user code with no safety tests. "
                    "If you plan on using the Jedi IDE, you may want to build using this safety level as it will run a lot faster. "))))
            (<p>)
            (<dl>
              (<dt> (<i> (<code> "optimize?")))
              (<dd>
                "This option adds optimization declares to the source code. "
                "Note that this will make debugging somewhat harder as the generated code will have gone through some transformations. "
                "At the moment it adds: proper-tail-calls, constant-fold and lambda-lift. "
                (<node>
                  "#f"
                  "#t (the default)")))
            (<p>)
            (<dl>
              (<dt> (<i> (<code> "debug-source?")))
              (<dd>
                "Include source in compiled code by compiling with Gambit's 'debug-source' option. "
                (<p>)
                "Note that this option is not needed anymore for using the statprof statistical profiler with compiled files since the new 'debug-location' option was added to Gambit. "
                (<p>)
                "Do not use this option unless you have a very specific need for it as it will result in much larger object files and due to a flaw in gcc also result in longer compile times. "
                (<node>
                  "#f (the default)"
                  "#t")))
            (<p>)
            (<dl>
              (<dt> (<i> (<code> "debug-foreign?")))
              (<dd>
                "Generate code that can log every transition from Gambit to the external world and back using the CFFI. "
                ))
            (<p>)
            (<dl>
              (<dt> (<i> (<code> "mutable-bindings?")))
              (<dd>
                "Generate code that enables mutation of every bindings including standard and extended Gambit bindings. "
                ))
            (<p>)
            (<dl>
              (<dt> (<i> (<code> "kernel-interpret?")))
              (<dd>
                "An advanced option for Jazz developers to enable loading the kernel fully interpreted. "
                (<node>
                  "#f (the default)"
                  "#t")))
            (<p>)
            (<dl>
              (<dt> (<i> (<code> "destination")))
              (<dd>
                "The optional build destination (defaults to \"bin\"). "
                (<p>)
                "The destination specifies the directory where files will be built relative to the current directory. "
                (<p>)
                "Note that being able to specify an explicit build destination enables building multiple configurations under the current directory. "))))
        (<article> name: development.make title: "make"
          (<description>
            "Build target for a configuration. "
            (<p>)
            (<pre> class: "code" "make [" (<i> "target") "@" (<i> "configuration") "] ...")
            (<p>)
            (<dl>
              (<dt> (<i> (<code> "target")))
              (<dd>
                "The optional target to build which defaults to " (<code> "'all'") " for Jazz and " (<code> "'jedi'") " for Jedi. "
                (<p>)
                (<table> class: "terminology" width: "400"
                  (<th> "Target") (<th> "Description")
                  (<tr> (<td> "kernel") (<td> "the unit system"))
                  (<tr> (<td> "core") (<td> "the module system"))
                  (<tr> (<td> "scheme") (<td> "the scheme dialect"))
                  (<tr> (<td> "jazz") (<td> "the jazz dialect"))
                  (<tr> (<td> "platform") (<td> "the platform packages"))
                  (<tr> (<td> "jedi") (<td> "the jedi ide"))
                  (<tr> (<td> "all") (<td> "all the pre-installed packages"))
                  (<tr> (<td> "clean") (<td> "remove all build files"))
                  (<tr> (<td> "cleankernel") (<td> "remove all kernel files"))
                  (<tr> (<td> "cleanobject") (<td> "remove all object files"))
                  (<tr> (<td> "cleanlibrary") (<td> "remove all library files"))
                  (<tr> (<td> "<product>") (<td> "user <product>")))))
            (<p>)
            (<dl>
              (<dt> (<i> (<code> "configuration")))
              (<dd>
                "The optional configuration which defaults to the default configuration. "))))
        (<article> name: development.clean title: "make clean"
          (<description>
            "Clean a configuration by removing all build files. "
            (<p>)
            (<pre> class: "code" "make [clean@" (<i> "configuration") "] ...")
            (<p>)
            (<dl>
              (<dt> (<i> (<code> "configuration")))
              (<dd>
                "The optional configuration which defaults to the default configuration. "))))
        (<article> name: development.cleankernel title: "make cleankernel"
          (<description>
            "Clean a configuration's kernel by removing all kernel files. "
            (<p>)
            (<pre> class: "code" "make [cleankernel@" (<i> "configuration") "] ...")
            (<p>)
            (<dl>
              (<dt> (<i> (<code> "configuration")))
              (<dd>
                "The optional configuration which defaults to the default configuration. "))))
        (<article> name: development.cleanobject title: "make cleanobject"
          (<description>
            "Clean a configuration's object files. "
            (<p>)
            (<pre> class: "code" "make [cleanobject@" (<i> "configuration") "] ...")
            (<p>)
            (<dl>
              (<dt> (<i> (<code> "configuration")))
              (<dd>
                "The optional configuration which defaults to the default configuration. "))))
        (<article> name: development.cleanlibrary title: "make cleanlibrary"
          (<description>
            "Clean a configuration's library files. "
            (<p>)
            (<pre> class: "code" "make [cleanlibrary@" (<i> "configuration") "] ...")
            (<p>)
            (<dl>
              (<dt> (<i> (<code> "configuration")))
              (<dd>
                "The optional configuration which defaults to the default configuration. "))))
        (<article> name: development.install title: "make install"
          (<description>
          "There is no equivalent of make install due to the complexity of supporting multiple systems and user preferences. "
          "Since this step is also very simple to do manually, installing the built configuration is left to the user. "
          (<p>)
          "Depending on your system you will usually"
          (<node>
            "Copy the built files to standard system locations or"
            "Modify your environment variables to point to the location of the Jazz executable")
          (<p>)
          "Note that at this time, modifying your environment variables is the preferred approach as some units like Jedi are still dependent on source files."))
        (<article> name: development.list title: "list"
          (<description>
          "List configurations."
          (<p>)
          (<pre> class: "code" "list")))
        (<article> name: development.delete title: "delete"
          (<description>
          "Delete a configuration."
          (<p>)
          (<pre> class: "code"
            "delete [" (<i> "configuration") "]")
            (<p>)
            (<dl>
              (<dt> (<i> (<code> "configuration")))
              (<dd>
                "The optional configuration which defaults to the default configuration. "))))
        (<article> name: development.quit title: "quit"
          (<description>
          "Quit the build system."
            (<p>)
            (<pre> class: "code" "quit")))
        (<article> name: development.troubleshooting title: "Troubleshooting"
          (<description>
            "The following instructions presuppose basic knowledge of Gambit's REPL (Read Eval Print Loop) that is used for debugging Gambit code. "
            "See Gambit's manual for details. "
            (<p>)
            "If you get an error while building, and the message is not enough to understand the problem, you can follow the following instructions to get a full-fledged Gambit REPL to explore the problem further. "
            (<p>)
            "First, you have to determine if the error is occuring while building the kernel or while building a product. "
            "Each build step displays a message of the following format: " (<code> "'make <target>'") ". Any " (<code> "<target>") " other than " (<code> "'kernel'") " means that it is a product that is being built. "
            (<p>)
            (<node>
              (<span>
                "If the problem is in building the kernel, launch the build system in debug mode with: " (<code> "'./jaz debug'") ". "
                "This will disable the build system's own REPL and get you a Gambit REPL. To build configuration " (<code> "<configuration-name>") ", execute: " (<code> "(jazz.make '<configuration-name>)") ". "
                "Note that " (<code> "<configuration-name>") " is optional if you want to build the default configuration. ")
              (<span>
                "Else, find the built " (<code> "'kernel.exe'") " kernel located inside the build directory and launch it like this: "
                 (<code> "kernel&nbsp;-make&nbsp;target@configuration:image&nbsp;-debug") ". "))))))
  ;;;
  ;;;; Packages
  ;;;
  @old
  (<section> name: packages title: "Packages"
    (<article> name: download.packages title: "Packages"
      (<description>
        "To install a package, simply uncompress it inside your HOME/.jedi/projects/lib folder."
        (<division> title: "Samples"
          (<table> class: "terminology"
            (<th> "Package") (<th> "Description")
            (<tr> (<td> (<a> href: "http://www-etud.iro.umontreal.ca/~lasallej/jazz.sample.paradigms.tar.gz" "jazz.sample.paradigms")) (<td> "Sample code to showcase various programming paradigms in Jazz"))
            (<tr> (<td> (<a> href: "http://www-etud.iro.umontreal.ca/~lasallej/profile.paradigms.tar.gz" "profile.paradigms")) (<td> "Profile to tryout the jazz.sample.paradigms package"))))
        (<br>)
        (<br>))))
  ;;;
  ;;;; FAQ
  ;;;
  (<section> name: faq title: "FAQ"
    (<article> title: "FAQ"
      (<description>
        (<division> title: "Build System"
          (<node>
            (<a> href: "#faq.build.afterpull" "Do I have to make clean and remake jazz and jedi every time I update from git?")
            (<a> href: "#faq.build.parallel" "Can Jazz be built in parallel?")
            (<a> href: "#faq.build.scripting" "Can the build system be scripted?")
            (<a> href: "#faq.build.static" "Can Jazz be used to build stand-alone executables?")))
        (<division> title: "Jazz Platform"
          (<node>
            (<a> href: "#faq.jazz.executable" "Is there a binary that can be used to evaluate Jazz code in a non-GUI REPL?")
            (<a> href: "#faq.jazz.definition" "What is the difference between define and definition?")
            (<a> href: "#faq.jazz.referencedoc" "Is there a reference manual somewhere?")
            (<a> href: "#faq.jazz.importconflicts" "Why do I get import conflicts?")
            (<a> href: "#faq.jazz.importexport" "Where can import and export be used?")
            (<a> href: "#faq.jazz.units" "How does the runtime locate units?")
            (<a> href: "#faq.jazz.paradigms" "What are the programming paradigms available in Jazz?")
            (<a> href: "#faq.jazz.product" "What is the meaning of a product?")
            (<a> href: "#faq.jazz.shortcuthook" "Is there a way to intercept every event?")
            (<a> href: "#faq.jazz.gambit" "Can every feature of Gambit be accessed from Jazz code?")
            (<a> href: "#faq.jazz.reader" "Why can't I use a @foo variable in my code?")
            (<a> href: "#faq.jazz.repositorypackagealiases" "Is there an easy way to refer to files inside repositories and packages?")
            (<a> href: "#faq.jazz.todo" "Is there a TODO file for Jazz developers somewhere?")
            (<a> href: "#faq.jazz.webframework" "Does Jazz include a web framework?")
            (<a> href: "#faq.jazz.crash" "What options do I have to solve a crash?")))
        (<division> title: "Jedi IDE"
          (<node>
            (<a> href: "#faq.jedi.console" "Can I evaluate pure Scheme code at the console?")
            (<a> href: "#faq.jedi.gambitrepl" "Does the console support the same set of command as the Gambit REPL?")
            (<a> href: "#faq.jedi.gettingstarted" "What are the code introspection tools available in Jedi to help me get started?")
            (<a> href: "#faq.jedi.profileproblems" "Why doesn't my profile load anymore?")
            (<a> href: "#faq.jedi.customcolors" "Can I customize colors?")
            (<a> href: "#faq.jedi.customfonts" "Can I customize fonts?")
            (<a> href: "#faq.jedi.customstyles" "Can I customize styles?")
            (<a> href: "#faq.jedi.customskins" "Can I customize skins?")
            (<a> href: "#faq.jedi.customworkspaces" "Can I customize workspaces?")))))
    
    (<article> title: "Build System"
      (<description>
        (<division> name: faq.build.afterpull title: "Do I have to make clean and remake jazz and jedi every time I update from git?"
          
          (<p> "Not at all! A simple '" (<code> "make") "' will do. ")
          (<p> "Here's a quick rundown on what's involved after doing a git pull: ")
          (<p> "Few changes in a module force recompilation of other modules, because Jazz was designed to minimize compilation dependencies. Some of those changes include modifying a macro, or moving an exported symbol to another module. "
               "The build system takes advantage of this and recompiles only changed files. "
               "This is why a '" (<code> "make") "' will do. ")
          (<p> "When changes to Jazz require a full rebuild, like when a low-level kernel macro is modified in a way it generates incompatible code, there is a file containing kernel/versions that the build system consults, with entries like: ")
          (<p> (<pre> class: "code_light"
                 "(version: 201016)\n"
                 "(version: 201015 gambit-version: 405001 gambit-stamp: 20090827151242)\n"
                 "(version: 201014 rebuild: all)\n"
                 "(version: 201011 rebuild: kernel)"))
          (<p> "For example, with the entries above, if your last pull retrieved version 2.01.010, then the '(version: 201014 rebuild: all)' entry above tells the build system it must recompile everything. "
               "All this to say that you should never have to worry about it as the developers of Jazz have means to automate rebuilding any parts of Jazz. ")
          (<p> "A note about the way we implemented dependency-checking to automatically determine when a module's imports have become invalid -- i.e. because some imported symbol was moved or deleted. "
               "We had a choice to do dependency checks at runtime, but it would incur a non-trivial cost. So we integrated the check into the build system instead. "
               "So it is possible that just launching Jedi after a pull might not work and a '" (<code> "make") "' will fix this. ")
          (<p> "Finally, you should always consult the NEWS file after doing a pull. "
               "This is where we describe any breaking changes not covered by the build system and the corrective actions to take. "
               "Here's an example: ")
          (<p> (<pre> class: "code_light"
                 "Release 2.0.21\n"
                 "==============\n"
                 "Because a slot was added to the Lisp-Entry class, you will need to manually delete\n"
                 "your catalogs before launching Jedi."))
          (<p> "In summary, just do '" (<code> "make") "' and have fun. :-)"))
          
        (<division> name: faq.build.parallel title: "Can Jazz be built in parallel?"
          (<p> "Yes. The number of parallel processes for building can be specified using the " (<code> "jobs:") " parameter to " (<code> "make") " (-j -job or j: can also be used).")
          (<p> "Here's an example that could be used on a machine with two cores: ")
          (<p> (<pre> class: "code_light"
                      "% ./jaz make jobs: 2 "))
          (<p> "Another way to specify the number of parallel jobs is to add the following line to $HOME/.jazz/.buildini -- a file that is loaded by the build system: ")
          (<p> (<pre> class: "code_light"
                      "(jazz.build-jobs 2) ")))
          
        (<division> name: faq.build.scripting title: "Can the build system be scripted without using the REPL?"
          (<p> "Yes. The build system is fully scriptable. "
               "For instance, without entering the build system's interactive REPL, you can configure and build Jazz and Jedi like this: ")
          (<p> (<pre> class: "code_light"
                 "% ./jaz configure -safety release\n"
                 "\n"
                 "% ./jaz make\n"
                 "make kernel\n"
                 "make core\n"
                 "make jazz\n"
                 "\n"
                 "% ./jaz make jedi\n"
                 "make kernel\n"
                 "make core\n"
                 "make jazz\n"
                 "make platform\n"
                 "make jedi\n"
                 "...")))
          
        (<division> name: faq.build.static title: "Can Jazz be used to build stand-alone executables?"
          (<p> "Yes and no. First, lets clarify a few things. ")
          (<p> "Systems that build applications usually fall into two categories: ")
          (<p> (<ordered> "Systems that build statically-linked applications where the runtime is statically linked into the application. "
                          "Systems that build applications where the application is dependant on a runtime existing somewhere on the client machine. "))
          (<p> "This may surprise a few, but Jazz falls into first category -- statically-linked applications. "
               "The fact that the built executable doesn't contain the code inside the binary but rather as a series of Gambit .o1 files next to it is an unrelated implementation detail. "
               "The runtime is there specifically for each application. ")
          (<p> "Ideally, I see Jazz applications as being either: ")
          (<p> (<node> "A minimal binary implementing the kernel + packages containing an .o1 for each of their modules. "
                       "A minimal binary implementing the kernel + each package linked as a shared library. "
                       "A statically linked binary which statically includes the kernel and all packages. "))
          (<p> "The first is the most friendly to developers, the last is the friendliest for end-users, and the second is a nice balance. "
               "At the moment only the first is implemented, but we are working on the other two."))))
          
    (<article> title: "Jazz Platform"
      (<description>
        (<division> name: faq.jazz.executable title: "Is there a binary that can be used to evaluate Jazz code in a non-GUI REPL?"
          (<p> "No. Even though Jazz was designed so it can be used independently of Jedi, there is no binary that implements a non-GUI Jazz REPL at the moment. "
               "We have started work on that but it is a low priority since it would be a pale substitute for Jedi; for example, a console-based REPL will not be able to handle debugging multiple threads or processes well. "))
        
        (<division> name: faq.jazz.definition title: "What is the difference between define and definition?"
          (<p> "A definition that is public behaves like a define with an export of the definition name. ")
          (<p> "One of Jazz's design goals is to avoid modifying any Scheme primitive or syntax, so it is not possible to specify access rights (private or public) to a define. "))
        
        (<division> name: faq.jazz.referencedoc title: "Is there a reference manual somewhere?"
          (<p> "A first draft of a complete documentation of the whole Jazz framework is available on the website "
               (<a> href: "http://www.jazzscheme.org/reference.htm" "here")
               ". ")
          (<p> "This documentation is auto-generated from the code and contains the signature of every public and protected declaration. "))
        
        (<division> name: faq.jazz.importconflicts title: "Why do I get import conflicts?"
          (<p> "If a module imports two different modules that each export the same symbol, an error is generated at compile time. ")
          (<p> "This feature is key in large systems where there are often tens of imports per module, so import order is unimportant. "))
        
        (<division> name: faq.jazz.importexport title: "Where can import and export be used?"
          (<p> "Import and export statements can appear anywhere at the top-level of a module. "
               "This of course extends to statements inside a top-level cond-expand or begin. ")
          (<p> "Note that in Jedi, they can be evaluated like any other toplevel form. "))
        
        (<division> name: faq.jazz.units title: "How does the runtime locate units?"
          (<p> "Units are named with hierarchical names where the components are separated by periods. "
               "For instance a.b.c is really the hierarchy (a b c). "
               "There are many approaches to mapping units names to persistent OS files. Jazz uses the simple approach of mapping directly onto the directory hierarchy. ")
          (<p> "In Jazz, the dynamically discovered runtime entities are the packages. "
               "Each package defines a root for its units. "
               "For a simple example, if there is a package P containing three units -- a, a.b.c and foo -- then the file hierarchy would be: ")
          (<p> (<pre>
                 "P/\n"
                 "  .package\n"
                 "  foo.jazz\n"
                 "  a/\n"
                 "    _a.jazz\n"
                 "    b/\n"
                 "      c.jazz"))
          (<p> "The above is using the *nix convention for slashes, but the same layout applies on Windows. ")
          (<p> "A note about the _a.jazz convention: "
               "Since a folder cannot contain code, we have a problem when there is both a unit named 'a' and a folder named 'a\' in 'a.b.c', as conceptually the code for unit 'a' really goes into folder 'a\'. "
               "To resolve this, Jazz considers the 'a/_a.jazz' file as 'a.jazz'. "
               "So in the previous example, the 'a.b.c' unit could be represented either by 'a/b/c.jazz' or 'a/b/c/_c.jazz'. "
               "It would be possible to put the code for the unit 'a' at the toplevel in 'a.jazz' but I find it inelegant that 'a.jazz' and the 'a\' folder that is its descendant are two separate objects at the OS's file-system level. ")
          (<p> "Since a package can contain files other than code -- like documentation and other languages -- it is convenient to specify an arbitrary root. That is what default packages do with the '(root \"src\")' entry in .package. "))
        
        (<division> name: faq.jazz.paradigms title: "What are the programming paradigms available in Jazz?"
          (<p> "Jazz supports any mix of the following three: ")
          (<p> (<node> "Functional"
                       "Object-Oriented with Generic methods"
                       "Object-Oriented with Encapsulated methods"))
          (<p> "The jazz.sample.paradigms package in the standard distribution showcases the pros and cons of each paradigm through a simple simulation of an LDAP server. Please see the lib/jazz.sample.paradigms/Paradigms.txt file for details. "))
        
        (<division> name: faq.jazz.product title: "What is the meaning of a product?"
          (<p> "A product is a Jazz concept totally independent of the Jedi IDE. ")
          (<p> "From the doc: ")
          (<p> (<pre>
                 "> A product is the runtime implementation of some user level entity that can\n"
                 "> be run and built. They correspond to targets in the build system. For\n"
                 "> instance, when doing 'make jedi', the build system will find the 'jedi'\n"
                 "> product and ask it to build itself."))
          (<p> "A product is simply some Scheme code that registers two functions: ")
          (<p> (<node> "one that builds your code"
                       "one that runs your code "))
          (<p> "For example, let's say you'd like to run some Mandelbrot code and you name your product 'mandelbrot'. "
               "Then: ")
          (<p> (<node> "to build your code run: make mandelbrot"
                       "to execute your code run: kernel -run mandelbrot"))
          (<p> "For example: ")
          (<p> (<node> "Jedi can be executed by running: kernel -run jedi"
                       "The Connect-4 sample can be executed by running: kernel -run c4"))
          (<p> "You may be wandering how jazz finds the code. "
               "This relates to the repositories / packages / units system. "
               "Jedi can create all those automatically for you, so if you do it by yourself you will need to familiarize yourself with how they work. "
               "There is some preliminary documentation " (<a> href: "http://www.jazzscheme.org/kernel.htm" "here") ". ")
          (<p> "I also suggest you look at jazz.sample.c4 for a simple example of a package containing a product can be run and that builds an executable. "))
        
        (<division> name: faq.jazz.shortcuthook title: "Is there a way to intercept every event?"
          (<p> "Yes, using 'set-shortcut-hook' on the application. Insert the following code snippet in your profile class to try it out: ")
          (<p> (<example>
                 (<line> "(" (<blue> "method override") " (" (<green> "test") ")")
                 (<line> "  (set-shortcut-hook (current-application)")
                 (<line> "    (lambda (shortcut)")
                 (<line> "      (debug shortcut)")
                 (<line> "      " (<ochre> "#f") ")))")
                 (<line>)
                 (<line> "(" (<blue> "method override") " (" (<green> "test-shift") ")")
                 (<line> "  (set-shortcut-hook (current-application) #f))")))
          (<p> "Doing: c-t foo c-p c-n c-s-t will output '{Shortcut #\\F} {Shortcut #\\O} {Shortcut #\\O} {Shortcut :control #\\P} {Shortcut :control #\\N} {Shortcut :control :shift #\\T}' to the console with the above snippet. ")
          (<p> "The hooking function provided to 'set-shortcut-hook' should return: ")
          (<p> (<node> "#f says it wants default handling to occur. "
                       "#t says it consumed the shortcut, and so stop default handling. "))

          (<p> "Note that for a finished application, Jazz supports high-level binding tables that associate code to shortcuts. "
               "But for fast experimentation or different needs, this hook can be useful. "
               "One example is the Tools / View Shortcut Bindings dialog that uses a hook to allow the user to enter a shortcut interactively. "))
          
        (<division> name: faq.jazz.gambit title: "Can every feature of Gambit be accessed from Jazz code?"
          (<p> "Yes. Jazz has a new 'gambit' module that can be imported to gain access to every Gambit procedure from Jazz code. ")
          (<p> "As an example: ")
          (<p> (<example>
                 (<line> "(" (<blue> "module") " " (<green> "my-lib") " jazz")
                 (<line>)
                 (<line> "(" (<blue> "import") " (gambit))")
                 (<line>)
                 (<line> "(" (<blue> "define") " (" (<green> "test") ")")
                 (<line> "  (let ((vec (f64vector 2.0 3.2 4.6)))")
                 (<line> "    (pp (fl> (f64vector-ref vec 2) 1.0))))")
                 (<line>)
                 (<line> "(test))")))
          (<p> "Note that many of those functions are already exported from the 'jazz' module. "
               "Most have the same name, but some have a different name as their underlying code tries to be portable accross Scheme implementations, mainly Gambit, Chicken, PLT and Bigloo. "))
          
        (<division> name: faq.jazz.reader title: "Why can't I use a @foo variable in my code?"
          (<p> "Jazz defines some read-time syntax, and @ is a read-time named comment. ")
          (<p> "'@wait-bug-fix (define (some-code) ...)' for example. ")
          (<p> "So using @ is restricted to the above use in Jazz code. "
               "However, for this reason Jazz loader consults file extensions so it knows what readtable to use when reading a file. "
               "Files with .jazz will use the Jazz readtable while others will use Gambit's default one. ")
          (<p> "Therefore you can either: ")
          (<p> (<ordered> "Leave external code in a separate pure Scheme .scm file and load it using (load ...)"
                          "Put it in a Jazz unit of Scheme code, also in a .scm file. "))
          (<p> "The only difference is if your unit is -- as an example -- '(unit external-foo ...)', then loading can be done cleanly by the unit system by adding '(require (external-foo))' as the first declaration of your module that wants to use it. ")
          (<p> "To access Scheme symbols, use the special form '(native symbol)'. "
               "So if your external unit defines 'Foo', put '(native Foo)' somewhere in your module. ")
          (<p> "If there are many modules that need that symbol, create an export lib. Call it something like 'external-exports', put the '(native Foo)' in it, and have the other modules import 'external-exports' instead. "))
          
        (<division> name: faq.jazz.repositorypackagealiases title: "Is there an easy way to refer to files inside repositories and packages?"
          (<p> "Yes. An important role of packages in to enable code location transparency. "
               "The unit system allows packages to be moved from one repository to another without having to change any code refering to them; e.g. a package downloaded from an internet repository to a local repository. ")
          (<p>  "This is useful, but to be complete, there must a means to refer transparently to files located inside a package, for example source files and image resources. "
                "For this, every repository and package automatically register an alias. As an example an image resource in the 'myorg.mypackage package' can be specified as: ")
          (<p> (<pre> class: "code_light"
                      "{File myorg.mypackage \"images\" \"someimage.png\"}"))
          (<p> "If 'myorg.mypackage' is moved, all file references will still be valid as the 'myorg.mypackage' alias is dynamically determined by the unit system. ")
          (<p> "Also, since every file and directory created through the Jedi IDE goes through an anchorizing mechanism to determine the most specific alias available, this means that everything created by the IDE which containing filesystem references -- like the catalogs -- will automatically use aliases for files located inside packages, making them 100% movable with no change to code. "))
          
        (<division> name: faq.jazz.todo title: "Is there a TODO file for Jazz developers somewhere?"
          (<p> "devel/Todo.txt is the main todo file. "))
          
        (<division> name: faq.jazz.webframework title: "Does Jazz include a web framework?"
          (<p> "Yes, Jazz has a webserver module. ")
          (<p> "For an example please look at the jazz.sample.gameserver that comes in the standard Jazz distribution. "
               "It is a webserver that implements two simple games, Connect-4 and Gomoku. ")
          (<p> "To try it out, use the menu item 'Project / Select...' and select 'Game Server'. "
               "Although it can run interpreted, I suggest you start by building the project: 'Project / Build' as the AI is quite demanding. ")
          (<p> "To run the game server accessible at 'http://localhost:8080' there are three methods: ")
          (<p> (<ordered> "From inside the IDE, select the 'View / Servers' palette and from there double-click the server to start or stop it. "
                          "Launch the Game Server project with 'Project / Debug'. The launched process will start the webserver and the webserver's control panel becomes accessible in the Console's 'Game Server primordial' tab. "
                          "Or as you would do in production: double-click the 'bin/gameserver.exe' binary that building the project generated. The webserver's control-panel will use the OS console since the process is not connected to the Jedi remote debugger. "))
          (<p> "Please note that this webserver is a naive implementation not meant for production. It will need more work before being able to serve high volumes although it was rebuilt on the Gambit webserver which offers decent performance. "))
        
        (<division> name: faq.jazz.crash title: "What options do I have to solve a crash?"
          (<p> "Here are a few options: ")
          (<p>)
          (<node>
            (<span>
              "Crash handler"
              (<p>)
              "The Jazz kernel which is the part present in every Jazz application, installs OS code that automatically handles crashes and tries to dump a stack backtrace of all the active threads. "
              (<p>)
              "It does so by handling signals on Linux and by using the SetUnhandledExceptionFilter API on Windows. "
              (<p>)
              "If the system has just begun booting up, the backtrace will be outputted to the standard error, else a file like Jedi_2010-07-05_16-19-42.snapshot will be created in ~/.jazz/crashes. "
              "This file can be viewed by a regular text editor but should ideally be viewed by opening it in Jedi where it will be presented in the debugger the same as if the error had just occurred live. "
              "Note that because generating a snapshot is a touchy process because the crash may be because of a corrupted state, sometimes the snapshot will only contain partial data up to a point where the snapshot generation crashed again. "))
          (<p>)
          (<node>
            (<span>
              "Using a debug build"
              (<p>)
              "If the crash is due to high-level code crashing (i.e. not a problem crashing inside an FFI call, more something like passing a wrong type like in (car 2) or (append #f '(1 2))), using a debug build is the way to go. "
              "By default, the build system when you do 'configure' uses safety: release where many checks are turned off for performance reason (for instance, release mode inserts the following Gambit (declare (not safe)) declaration in every module). "
              "To build a debug build, start the build system and do: configure name: debug safety: debug destination: \"jazz:debug\". "
              "Then build that configuration with: make jedi@d. "
              "The newly built kernel and jedi executables can be found in build/debug. "))
          (<p> "If those two don't solve the problem, then it pretty much boils down to being able to reproduce the problem to be able to track the exact cause.")
          (<p>)
          (<p> "PS: We recently added complete runtime advising to Jazz similar to CommonLisp's defadvice function where the new advise function can be used to advise any function or method, a complete module or even the whole runtime. "
            "We plan to use this new functionality to add a precise profiler and code coverage tool to Jazz but maybe it could also be used to automatically track every call being made so we know exactly the last calls made before any crash! "))))
    
    (<article> title: "Jedi IDE"
      (<description>
        (<division> name: faq.jedi.console title: "Can I evaluate pure Scheme code at the console?"
          (<p> "Yes, the Jedi console supports both Scheme and Jazz. "
               "Which language is used for evaluation is determined by the current context; you can obtaine that by evaluating ',(in)'. "
               "Since Jazz is almost a superset of Scheme, the default context of evaluating as Jazz code usually works just fine. ")
          (<p> "The various context related command are: ")
          (<p> (<node> ",(in) to display the current context"
                       ",(in context) sets the current context to the result of evaluating context where the result can be: "
                       (<node> "#f to set the context to Scheme"
                               "a symbol to set the context to that unit"
                               "an object will enable code to access internal fields of that object"
                               "some special objects have aliases to set them: "
                               (<node> ":me for your profile class"
                                        ":process for the current process")))))
        
        (<division> name: faq.jedi.gambitrepl title: "Does the console support the same set of command as the Gambit REPL?"
          (<p> "No. The Jazz console doesn't implement the same ',cmd' text-based behaviors that the Gambit console does. "
               "It might eventually but it is a low-priority project as almost every command has a Jedi equivalent. ")
          (<p> "The console does support ctrl-d to clear one level of error since it is useful when you already know what the problem is. "))
        
        (<division> name: faq.jedi.gettingstarted title: "What are the code introspection tools available in Jedi to help me get started?"
          (<p> "Getting started in Jazz can indeed be challenging. "
               "The good news is that once over first bump it is easy to learn further by example using all the code introspection tools available in the Jedi IDE, as almost everything available in Jazz is used somewhere in Jedi. "
               "For instance: ")
          (<p> (<node>
                 (<span> "You see a button that does something and are wondering how it works:"
                   (<node>
                     "Press F8, move your mouse over the button, right-click and select 'Edit Action' (or 'Edit Action Handler' depending) and you'll be taken to the source code implementing that button. "))
                 (<span> "Same thing for menu items:"
                   (<node> "Just open the menu, press F8, move your mouse over the item, right-click, ... "))
                 (<span> "If the code you are looking for happens through a shortcut:"
                   (<node> (<span> "Go to the Tools / View Shortcut Bindings... "
                                   "menu item (ctrl-shift-k), press the shortcut and double-click the desired binding, and you'll be taken to the source code that implements that binding. ")))))
          
          (<p> "Once in the code it should be simple to navigate further since Jazz catalogs all source-code for definitions and references. "
               "First, you might want to make sure your catalogs are up-to-date by going to the Tools / Catalogs Manager window and pressing Update. Note that once this is done, the IDE will maintain your catalogs automatically with any change you make to the source code; you only have to manually update after pulling new changes. "
               "When this is complete, put the text selection in any symbol you want and press:")
          (<p> (<node> "F12 to edit that definition or"
                       "Shift-F12 to view a list of all definitions using that symbol. ")))
        
        (<division> name: faq.jedi.profileproblems title: "Why doesn't my profile load anymore?"
          (<p> "When you can't load Jedi due to profile problems, please consult the NEWS file at the root of the Jazz source tree to see if there were breaking changes to the profiles. "
               "If not, one solution that will always work is to create a new profile and then compare the new profile's directory content with the broken one. You can use Jedi's Compare Directories tool for this. "
               "This should help you discover what change is creating problems. "))
        
        (<division> name: faq.jedi.customcolors title: "Can I customize colors?"
          (<p> "Here is an example Colors.jml file inside your profile settings directory that will make text and tree backgrounds light purple: ")
          (<p> (<example>
                 (<line> "...")
                 (<line> "")
                 (<line> "  (" (<purple> "<Colors-Preferences>"))
                 (<line> "    (" (<purple> "<Color-Preferences>") " name: Text-Background base: Light-Purple)")
                 (<line> "    (" (<purple> "<Color-Preferences>") " name: Tree-Background base: Light-Purple)")
                 (<line> "  )")
                 (<line> "")
                 (<line> "...")))
          (<p> "Properties available for Color-Preferences are: ")
          (<p> (<node> " base - An optional list of color names from which to inherit"
                       " red - Red part"
                       " green - Green part"
                       " blue - Blue part"
                       " alpha - Alpha component"))
          (<p> "Note that Jedi catalogs colors so you can use F12 on any color to see its definition and related colors. "))

        (<division> name: faq.jedi.customfonts title: "Can I customize fonts?"
          (<p> "Here is an example Fonts.jml file inside your profile settings directory that will make code fonts 14 point: ")
          (<p> "For Windows")
          (<p> (<example>
                 (<line> "...")
                 (<line> "")
                 (<line> "  (" (<purple> "<Fonts-Preferences>"))
                 (<line> "    (" (<purple> "<Font-Preferences>") " name: Code      font-name: \"Courier New\" point-size: 18)")
                 (<line> "    (" (<purple> "<Font-Preferences>") " name: Code-Bold font-name: \"Courier New\" point-size: 18 bold?: #t)")
                 (<line> "  )")
                 (<line> "")
                 (<line> "...")))
          (<p> "For the other platforms")
          (<p> (<example>
                 (<line> "...")
                 (<line> "")
                 (<line> "  (" (<purple> "<Fonts-Preferences>"))
                 (<line> "    (" (<purple> "<Font-Preferences>") " name: Code      font-name: 'vera-mono point-size: 18)")
                 (<line> "    (" (<purple> "<Font-Preferences>") " name: Code-Bold font-name: 'vera-mono point-size: 18 bold?: #t)")
                 (<line> "  )")
                 (<line> "")
                 (<line> "...")))
          (<p> "Properties available for Font-Preferences are: ")
          (<p> (<node> " base - An optional list of font names from which to inherit"
                       " font-name - The name of the font"
                       " point-size - The point size of the font"
                       " bold? - Is the text bold"
                       " italic? - Is the text italic"
                       " underline? - Is the text underlined"))
          (<p> "Note that Jedi catalogs fonts so you can use F12 on any font to see its definition and related fonts. "))
        
        (<division> name: faq.jedi.customstyles title: "Can I customize styles?"
          (<p> "Here is an example Styles.jml file inside your profile settings directory that will make declarations really stand out! ")
          (<p> (<example>
                 (<line> "...")
                 (<line> "")
                 (<line> "  (" (<purple> "<Styles-Preferences>"))
                 (<line> "    (" (<purple> "<Trait>") "                  name: declaration")
                 (<line> "      (" (<purple> "<install>") "                                                  highlight: {Color Light-Red} frame: {Color Red}))")
                 (<line> "    (" (<purple> "<Text-Style-Preferences>") " name: Text-Declaration              traits: declaration)")
                 (<line> "    (" (<purple> "<Text-Style-Preferences>") " name: Text-Documented-Declaration   traits: declaration)")
                 (<line> "    (" (<purple> "<Text-Style-Preferences>") " name: Text-Undocumented-Declaration traits: declaration)")
                 (<line> "  )")
                 (<line> "")
                 (<line> "...")))
          (<p> "Properties available for Text-Style-Preferences are: ")
          (<p> (<node> " base - An optional list of style names from which to inherit"
                       " alignment - The vertical alignment of the text"
                       " font - The font of the text"
                       " color - The color of the text"
                       " highlight - The color of the text background"
                       " frame - The color of the text frame"))
          (<p> "Note that Jedi catalogs styles so you can use F12 on any style to see its definition and related styles. "))
        
        (<division> name: faq.jedi.customskins title: "Can I customize skins?"
          (<p> "Here is an example Skins.jml file inside your profile settings directory that will use the default skin and draw a gradient in the stage background: ")
          (<p> (<example>
                 (<line> "...")
                 (<line> "")
                 (<line> "  (" (<purple> "<Skins>") "                       active: custom")
                 (<line> "    (" (<purple> "<Default-Skin>") " name: custom title: \"Custom\"")
                 (<line> "      (" (<purple> "<stage~>") "                  background: {Gradient horizontal {Color Red} {Color Blue}}))")
                 (<line> "    ...")
                 (<line> "  )")
                 (<line> "")
                 (<line> "..."))))

        (<division> name: faq.jedi.customworkspaces title: "Can I customize workspaces?"
          (<p> "Yes, Jedi workspaces are fully configurable using the Workspaces.jml file inside your profile settings directory. ")
          (<p> "You can remove any unwanted workspaces, change the one active on startup, or make any changes you want to those already there. ")
          (<p> "If the only changes you want to do are splitting a workspace vertically or horizontally, this can be done using the Workspace menu items: Split Vertically and Split Horizontally. ")
          ))))
  ;;;
  ;;;; Forums
  ;;;
  ;; (<section> name: forums title: "Forums")
  ;;;
  ;;;; Blogs
  ;;;
  ;; (<section> name: blogs title: "Blogs")
  ;;;
  ;;;; Resources
  ;;;
  ;; (<section> name: resources title: "Resources"
  ;;   (<article> name: external-links title: "External Links"))
 )
