;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; JazzScheme Website
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(<website> name: jazz title: "JazzScheme"
  (<section> name: home title: "Home"
    (<article> name: welcome title: "About JazzScheme"
      (<description>
        "JazzScheme is an open source programming language based on Scheme. "
        "It includes a full featured development platform and a sophisticated programmable IDE. The platform has been used for more than 10 years to develop high-quality commercial applications. "))
    (<article> name: news title: "News"
      (<description>
        (<node>
          (<span> "2008-11-06 - " (<a> href: "news.htm#2008-11-06" "X11 Port and Debugger Update"))
          (<span> "2008-09-26 - " (<a> href: "news.htm#2008-09-26" "Public Open-Source Release Update"))
          (<span> "2008-04-30 - " (<a> href: "news.htm#2008-04-30" "Contract awarded to use the new Gambit based JazzScheme"))
          (<span> "2008-04-29 - " (<a> href: "news.htm#2008-04-29" "Progress update"))
          (<span> "2008-02-04 - " (<a> href: "news.htm#2008-02-04" "New build system fully implemented in Gambit"))
          (<span> "2007-11-11 - " (<a> href: "news.htm#2007-11-11" "New Gambit based kernel now faster than the old C++ kernel!"))
          (<span> "2007-09-26 - " (<a> href: "news.htm#2007-09-26" "Jedi running under the new Gambit based kernel"))
          (<span> "2007-08-08 - " (<a> href: "news.htm#2007-08-08" "Presentation at the lispvan"))
          (<span> "2007-05-28 - " (<a> href: "news.htm#2007-05-28" "JazzScheme 1.0b6 available"))
          (<span> "2007-05-14 - " (<a> href: "news.htm#2007-05-14" "Work on porting JazzScheme to X11 and Macintosh started"))
          (<span> "2007-05-03 - " (<a> href: "news.htm#2007-05-03" "JazzScheme 1.0b5 available"))
          (<span> "2007-04-23 - " (<a> href: "news.htm#2007-04-23" "JazzScheme public beta released"))
          (<span> "2007-01-12 - " (<a> href: "news.htm#2007-01-12" "JazzScheme ported to Visual Studio 2005"))
          (<span> "2006-12-13 - " (<a> href: "news.htm#2006-12-13" "Presentation at the MSLUG"))
          (<span> "2006-12-12 - " (<a> href: "news.htm#2006-12-12" "Montreal company to use JazzScheme"))
          (<span> "2006-11-22 - " (<a> href: "news.htm#2006-11-22" "Website goes live")))))
    (<article> name: vision title: "Vision"
      (<description>
        "JazzScheme was born in 1996 out of some profound convictions:"
        (<node>
          (<span> "Lisp is one of the greatest tools to experiment with new concepts and implement them.")
          (<span> "There is not a single truth in computer science and Lisp's meta-language capabilities and dynamic nature makes it the ideal language to unify in a coherent approach many great paradigms like:")
          (<node>
            (<span> "Functional programming")
            (<span> "Object-Oriented programming")
            (<span> "Component programming"))
          ;;Richard Gabriel argue that Unix and C came to lead because implementation simplicity is as important as interface simplicity
          ;;(<span> "A language's implementation is as important as the language itself. The implementation should be totally transparent, available, simple, clean, user modifiable, ...")
          ;;(<span> "A language should not be only designed. It should come out of a constant interplay between dreams and design and using it in real world constraints and problems")
          (<span> "The Lisp community should not be dreaming of sophisticated GUIs and IDEs but instead be the one pushing the boundaries of what can be accomplished!"))
        (<cite> "&#8216;&#8216;A language that doesn't affect the way you think about programming, is not worth knowing.&#8217;&#8217; -- Alan J. Perlis")))
    (<article> name: mission title: "Mission"
      (<description>
        (<node>
          (<span> "Promote the use of Lisp based languages")
          (<node>
            (<span> "Not by trying to convince people of their advantages")
            (<span> "But by enabling people to create and commercialize radical products that would have been almost impossible to develop using mainstream languages (time, cost, feasibility, ...)"))
          (<span> "In the long run, enable more Lisp/Scheme programmers to develop at work in the language they love :)")
          (<span> "Bring back joy to programming!"))))
    (<article> name: os title: "Operating Systems"
      (<description>
        "The Jazz kernel runs on most operating systems. It is entirely written in mostly portable pure Scheme with the wonderfull" (<a> href: "http://www.iro.umontreal.ca/~gambit/" "Gambit") "Scheme system as primary target. "
        (<p>)
        "The multi-platform GUI is a high level framework written in Jazz that uses" (<a> href: "http://cairographics.org/" "Cairo") " for backend. "
        "It runs on Windows and X11. "
        "On MacOS, the X11 version can be used and works very well. "))
    (<article> name: license title: "License"
      (<description>
        "JazzScheme is released under a dual "
        (<a> href: "http://www.mozilla.org/MPL/MPL-1.1.html" "Mozilla Public License Version 1.1")
        " or "
        (<a> href: "http://www.gnu.org/copyleft/gpl.html" "GNU General Public License v2 or later")
        ". Choose whichever license you prefer."))
    (<article> name: discussion-group title: "User Community"
      (<description>
        "If you are interested in JazzScheme, you can join our discussion group at "
        (<a> href: "http://groups.google.com/group/jazzscheme" "http://groups.google.com/group/jazzscheme")
        @WAIT (<p>)
        @WAIT "You can also come chat with us in the #jazzscheme channel on Freenode."))
    (<article> name: contact-info title: "Contact Info"
      (<description>
        (<a> href: "mailto:gcartier@jazzscheme.org" "gcartier@jazzscheme.org")))
      ;; (<article> name: roadmap title: "Roadmap")
      ;; (<article> name: future title: "Future")
      ;; (<article> name: help title: "Help")
      ;; (<article> name: description title: "Description")
      ;; (<article> name: goals title: "Goals")
      )
  (<section> name: news title: "News"
    (<article> title: "News"
      (<description>
        (<node>
          (<span> "2008-11-06 - " (<a> href: "news.htm#2008-11-06" "X11 Port and Debugger Update"))
          (<span> "2008-09-26 - " (<a> href: "news.htm#2008-09-26" "Public Open-Source Release Update"))
          (<span> "2008-04-30 - " (<a> href: "news.htm#2008-04-30" "Contract awarded to use the new Gambit based JazzScheme"))
          (<span> "2008-04-29 - " (<a> href: "news.htm#2008-04-29" "Progress update"))
          (<span> "2008-02-04 - " (<a> href: "news.htm#2008-02-04" "New build system fully implemented in Gambit"))
          (<span> "2007-11-11 - " (<a> href: "news.htm#2007-11-11" "New Gambit based kernel now faster than the old C++ kernel!"))
          (<span> "2007-09-26 - " (<a> href: "news.htm#2007-09-26" "Jedi running under the new Gambit based kernel"))
          (<span> "2007-08-08 - " (<a> href: "news.htm#2007-08-08" "Presentation at the lispvan"))
          (<span> "2007-05-28 - " (<a> href: "news.htm#2007-05-28" "JazzScheme 1.0b6 available"))
          (<span> "2007-05-14 - " (<a> href: "news.htm#2007-05-14" "Work on porting JazzScheme to X11 and Macintosh started"))
          (<span> "2007-05-03 - " (<a> href: "news.htm#2007-05-03" "JazzScheme 1.0b5 available"))
          (<span> "2007-04-23 - " (<a> href: "news.htm#2007-04-23" "JazzScheme public beta released"))
          (<span> "2007-01-12 - " (<a> href: "news.htm#2007-01-12" "JazzScheme ported to Visual Studio 2005"))
          (<span> "2006-12-13 - " (<a> href: "news.htm#2006-12-13" "Presentation at the MSLUG"))
          (<span> "2006-12-12 - " (<a> href: "news.htm#2006-12-12" "Montreal company to use JazzScheme"))
          (<span> "2006-11-22 - " (<a> href: "news.htm#2006-11-22" "Website goes live")))))
    (<article> name: 2008-11-06 title: "2008-11-06 - X11 Port and Debugger Update"
      (<description>
        (<division> title: "X11"
          "I am very happy to report that X11 has progressed by leaps and bounds in the last weeks. "
          "A big structural change to the windowing system where Jazz now manages everything inside the toplevel windows fixed nearly all the X11 problems. "
          "This change has also unified profoundly the windowing architecture of all platforms so that all platforms should now evolve much more uniformly towards stability and completeness. "
          (<p>)
          "Personally, I have worked exclusively on X11 for the last 2 weeks and it felt almost as good as working under the Windows version. "
          "The only things I missed where drag & drop (we are looking into it) and faster scrolling (we are looking into using XCopyArea to implement fast scrolling on X11). "
          "There are other shortcomings like dialogs not being modal at the moment so that you can crash the system by being a smart ... and breaking the modality but those are no show-stoppers to use the system as-is imo. "
          (<p>)
          "As the X11 port was the main hurdle to the open-source release, this is very good news. "
          "At this point, apart from small improvements, the main task that remains is writing documentation, walkthroughs, ...")
        (<p>)
        (<division> title: "Debugging"
          "The other big change is that after being unsure for the last 2 years about what was the right approach to having the debugger fully understand the Jazz language, between :"
          (<p>)
          (<node>
            "1) writing my own interpreter for the Jazz language and"
            "2) fully integrating the Jazz macros with Gambit")
          (<p>)
          "I have finally decided after discussions with Marc Feeley that 2) was the right approach and so I rewrote all Jazz macros as ##define-syntax and added full Gambit source code annotations so that now every Gambit debugging feature works seamlessly with Jazz code like :"
          (<p>)
          (<node>
            "precise reporting of the position of an error in the source file"
            "stack backtrace with for every frame precise highlighting of the call site"
            "statprof statistical profiler is now integrated with Jedi "
            "..."))))
    (<article> name: 2008-09-26 title: "2008-09-26 - Public Open-Source Release Update"
      (<description>
        "Now that our first JazzScheme contract is over, here is an update on where we stand. "
        (<p>)
        "First of all, I am very happy to say that the contract was a complete success. "
        "It proved that developing a business application in the new Gambit based JazzScheme is a viable solution. "
        "I must say that development was a charm and on top, the client loves the result! "
        (<p>)
        "For some other very good news, during the contract, to support development we added many missing features to the Jazz platform : "
        (<p>)
        (<node>
          "Kernel module and build system is now language agnostic"
          "Project management through a visual workbench"
          "GUI remote debugger"
          "Programmatic restarts"
          "Full unicode support throughout the IDE"
          "Printing support on Windows"
          "Windows COM support"
          "A new crash handler routine on Windows will dump a Gambit stack even on fatal crashes")
        (<p>)
        (<division> title: "Public Open-Source Release"
          "With those new features added, we are very close to a public open-source release of the JazzScheme platform. "
          (<p>)
          "The key feature that still needs work is X11. "
          "Unfortunately, the student who did the port now has less available time to spend on the project as his master's degree is taking a lot of his resources. "
          "We are still both working on X11 but it may take a while to complete. "
          (<p>)
          "Note that the port was advanced enough that the whole IDE was 90% functional. I would guess the work remaining to be around 2-3 weeks for someone both knowledgeable in X11 and in Jazz. "
          "Personally I do not have the time required to delve into X11 but if anyone with good X11 knowledge wants to team up, it could be a fun project and accelerate the completion of the X11 port. "
          "Just let me know. ")
        (<p>)
        (<division> title: "In Development"
          (<node>
            "Jedi as a Gambit IDE with full remote debugging"
            "Emacs inspired bindings for basic commands (almost complete)"))))
    (<article> name: 2008-04-30 title: "2008-04-30 - Contract awarded to use the new Gambit based JazzScheme"
      (<description>
        "I am very happy to announce that MetaScoop was awarded a contract to implement a full business application using the newly developed Gambit based JazzScheme."
        (<p>)
        "Note that we will still be developing JazzScheme actively but with focus on more 'business' aspects like :"
        (<node>
          "Robustness and Performance"
          "Full database support on Windows using ADO"
          "Printing support on Windows"
          "Localization"
          "Distribution of built code")
        (<p>)
        "We expect work on the open-source release to resume in about 2 months where at this point finishing X11 will be pretty much all that remains."))
    (<article> name: 2008-04-29 title: "2008-04-29 - Progress update"
      (<description>
        "Here's a summary of the most important developments in the last 2 months :"
        (<p>)
        (<division> title: "Build system"
          (<node>
            "Now using pkg-config to simplify build dependencies processing"
            "Added support for binary packages for a complete distribution solution"))
        (<division> title: "Gambit"
          "Support for the following Gambit features was added :"
          (<node>
            "TCP/IP"
            "Threading"
            "U8 vectors"))
        (<division> title: "Language"
          (<node>
            "Added branch prediction to the type system for nillable types and the 'or' special form"
            "Implemented a new 'meta' keyword that greatly simplifies metaclass programming"))
        (<division> title: "Multi-platform"
          (<node>
            "Many improvements on X11"
            "Carbon work started up to the point where the Jedi IDE now fully loads"))
        (<division> title: "Web Server"
          "Ported the Web server / framework to the new Jazz. I must say that Gambit's TCP/IP support, threads, ports and u8vectors made this port a pure pleasure."
          (<p>)
          "Two new samples where developed to demonstrate the new web framework :"
          (<node>
            "Gomoku"
            "Connect-4"))
        (<division> title: "Various"
          (<node>
            "Views now support arbitrary scaling"
            "Added printing support on windows"
            "Ported many parts of the visual GUI designer"))))
    (<article> name: 2008-02-04 title: "2008-02-04 - New build system fully implemented in Gambit"
      (<description>
        "Here's a summary of the most important developments since the last update (apart from a very nice Christmas vacation with my son :-) :"
        (<division> title: "Build system"
          "A new build system was developed to automate Jazz building and deployment. "
          "It follows the usual configure / make methodology and is fully implemented in Gambit making it highly portable. "
          "See the INSTALL file at the root of the distribution for details. "
          (<p>)
          (<node>
            (<span> "The build will now create a 'jazz' executable file that encapsulates the Jazz kernel. "
              "Use this executable to load Jazz code, launch Jazz applications, ...")
            (<span> "Under Unix, we are now using pkg-config to simplify building library depencies. ")))
        (<division> title: "Package system"
          "A new package system was developed to manage resources uniformly accross the development and deployment stages of a project. "
          (<p>)
          (<node>
            "With it, Jazz applications can be deployed as compiled binaries, source files or as a mix of both. "
            "Jazz will use a sha-1 digest of the source file to automatically determine if a file should be loaded interpreted or compiled. "))
        (<division> title: "Generic methods"
          "Jazz now implements generic dispatch on an arbitrary number of parameters.")
        (<division> title: "Port fixes"
          (<node>
            "View debugging tools (F8) are now fully functional under Windows. "
            "Groupware compare directories and compare files. "
            "Login dialog. "
            "Users management. "))
        (<division> title: "X11"
          "A lot of progress was made on the X11 port which is now very close to beeing usable. ")
        (<division> title: "Time"
          "Ported the very nice Time Data Types and Procedures SRFI-19 to Jazz. ")
        (<division> title: "Various"
          (<node>
            "Many Gambit specific improvements related to performance and space. "
            "All jazz modules have now been ported to the new kernel at least enough to load correctly. "))))
    (<article> name: 2007-11-11 title: "2007-11-11 - New Gambit based kernel now faster than the old C++ kernel!"
      (<description>
        "A lot has happened since the last news update a month 1/2 ago. Let me try and summarize the most important developments :"
        (<division> title: "Performance"
          "As I was saying in the last message, performance was very critical as this stage as it was so far behind the old Jazz as to make the new one unusable. The benchmark I have been using is editing Window.jazz a big file with lots of syntax coloring necessitating a lot of sexpr navigation. As every Lisp related tool must be able to navigate sexpr in text, those operations are so critical that in the old Jazz they where handcoded directly in C. So keep in mind that in the benchmark results, it is handcoded C code vs Jazz code generating Gambit code."
          (<p>)
          "First timing was :"
          (<p>)
          "Old Jazz : 0.3s"
          (<br>)
          "New Jazz : 28.5s"
          (<p>)
          "so 95x slower."
          (<p>)
          "We are now at 0.17s so 167x faster than the first version and 60% faster than the old handcoded C code. Note that there is still a lot of room to make this much faster but now that performance is acceptable we are going to put performance aside for a while in favor of other priorities. "
          (<p>)
          "Thanks to Guillaume Germain for his wonderful statprof statistical profiler which really helped in finding the hot spots to optimize.")
        (<division> title: "Type System"
          "Jazz now supports a fairly complete and completely optional type system."
          (<p>)
          "Every part of a Scheme program can now be type annotated. Note that usually, just annotating the type of the input parameters of a function will be sufficient, as the new type system will use type inference whenever possible to deduce the type of expressions. "
          (<p>)
          "To support the new type system, a new experimental specializer / template system is also available. Any comments / suggestions on this part are most welcome as it is unclear what is the best approach: templates a la c++, generics a la java, parameterized types, ... "
          (<p>)
          "Note that Jazz as a whole doesn't use the new type system a lot. I'd say that around 30 files out of Jazz's 3000+ files use the new type system. Annotating only those 30 something critical modules resulted in huge performance improvements. Also note that the type annotations are purely optional and removing any of them will not change any code semantics. ")
        (<division> title: "IDE"
          "The IDE while still missing a lot of functionality has become functional enough for it to become usable. I now try and use it as my main development IDE over the old Jazz's IDE."
          (<p>)
          "Mainly missing from the old Jazz IDE is debugging support. We are still relying on the Gambit console. Note that this is really not painful at all as the Jazz generated Scheme code is so close to the original code that reading a Gambit stack of Jazz code is almost identical as what a pure Jazz debugger stack would look like. ")
        (<division> title: "Scheme Compliance"
          "The old Jazz, although 'Scheme inspired' was never a full Scheme implementation."
          (<p>)
          "Everything that Jazz was redefining from Scheme was rethought / renamed so that now I am very happy to report that Jazz is now a full R5RS Scheme (to be more precise: as R5RS as the underlying Scheme you are using is) system where any R5RS Scheme code can be run as is inside a Jazz module or library. "
          (<p>)
          "If pure Scheme is used inside a Jazz module or library, the resulting code will have no overhead and will be the exact same code. The Jazz library system will just validate at compile time that every symbol referenced exists in the underlying Scheme system and report any unresolved symbols. ")
        (<division> title: "Multi-platform / X11"
          "The Jedi IDE while not functional, is now booting completely under X11! What was astonishing was that nothing was working, and a couple changes later, Jeremie had a version where *everything* was rendering perfectly! The port of the graphical code to Cairo really payed off there. I am very happy about this new development, especially as Jeremie was able to pull this off part time while studying for his master's degree. Gratz! "
          (<p>)
          "Public beta release is still planned for very early 2008.")))
    (<article> name: 2007-09-26 title: "2007-09-26 - Jedi running under the new Gambit based kernel"
      (<description>
        "I am very happy to report that Jedi, the Jazz IDE is now running under the new Gambit based kernel. "
        "Lots of features where temporarely commented out but basically most of the language and the library has now been ported to the new kernel. "
        (<p>)
        "The port of 100+ C++ classes to Gambit was very demanding at first but now the development has really become a joy. "
        "Even though the start was difficult, developing the new kernel on Gambit's extremely robust, fast and flexible architecture has now surpassed all my expentations in development speed and quality of code that could be developed with it. "
        "Cheers to Gambit! "
        (<p>)
        "Next steps are: "
        (<node>
          "Complete the port"
          "Optimize the new kernel to make it as fast as Gambit can be (that's fast!)"
          "Port the library and IDE to Mac and X11 (this should be fairly fast at this point)")
        "I expect a first beta, beginning of 2008."))
    (<article> name: 2007-08-08 title: "2007-08-08 - Presentation at the lispvan"
      (<description>
        "Guillaume Cartier gave a presentation of JazzScheme at the Vancouver Lisp Users Group. See "
        (<a> href: "http://bc.tech.coop/blog/070810.html" "Bill Clementson's Blog")
        " for a nice summary."))
    (<article> name: 2007-05-28 title: "2007-05-28 - JazzScheme 1.0b6 available"
      (<description>
        "This version is a candidate for the public release. Only bug fixes are planned until the public release. See the " (<a> href: "new.htm" "What's New") " section for details."))
    (<article> name: 2007-05-14 title: "2007-05-14 - Work on porting JazzScheme to X11 and Macintosh started"
      (<description>
        "Active work has started on porting the JazzScheme platform to other operating systems. Support is planned for the following platforms: Windows, X11 and Macintosh."))
    (<article> name: 2007-05-03 title: "2007-05-03 - JazzScheme 1.0b5 available"
      (<description>
        "This version adds a lot of support for Scheme code edition which is now almost on par with Jazz code. See the " (<a> href: "new.htm" "What's New") " section for details."))
    (<article> name: 2007-04-23 title: "2007-04-23 - JazzScheme public beta released"
      (<description>
        "First publicly available beta release of JazzScheme."))
    (<article> name: 2007-01-12 title: "2007-01-12 - JazzScheme ported to Visual Studio 2005"
      (<description>
        "JazzScheme was successfully ported to Visual Studio 2005. "
        "This is a key milestone for Jazz, as with Microsoft's release of Visual Studio 2005 Express as a free downloadable package that can be used to build C++ applications with no licensing restrictions, Jazz can now be used as a 100% free development platform for building Windows applications."))
    (<article> name: 2006-12-13 title: "2006-12-13 - Presentation at the MSLUG"
      (<description>
        "Guillaume Cartier gave a presentation of JazzScheme at the Montreal Lisp/Scheme User Group. See "
        (<a> href: "http://schemeway.dyndns.org/mslug" "http://schemeway.dyndns.org/mslug")
        " for details."))
    (<article> name: 2006-12-12 title: "2006-12-12 - Montreal company to use JazzScheme"
      (<description>
        (<a> href: "http://www.isaix.com" "IsaiX Technologies")
        " a high tech Montreal company, has decided to use JazzScheme for one of its top projects. Using JazzScheme, they plan on developing a real time scheduling engine for "
        (<a> href: "http://www.chyma.net" "Chyma")
        " their Health Care Industry product."))
    (<article> name: 2006-11-22 title: "2006-11-22 - Website goes live"
      (<description>
        "A first version of the JazzScheme website is now live!")))
  (<section> name: features title: "Features"
    (<article> title: "Features"
      (<description>
        (<node>
          (<a> href: "features.htm#features.jazz" "Jazz Platform")
          (<a> href: "features.htm#features.jedi" "Jedi IDE"))))
    (<article> name: features.jazz title: "Jazz Platform"
      (<description>
        (<division> title: "Scheme Roots"
          (<node>
            "R5RS"
            "Full access to the Gambit API"))
        (<division> title: "Module / Package system"
          (<node>
            "Integrated build system"))
        (<division> title: "Runtime Model"
          (<node>
            "Interpreted"
            "Compiled"))
        (<division> title: "Functional Programming"
          (<node>
            "Optional parameters"
            "Keyword parameters"))
        (<division> title: "Object-Oriented Programming"
          (<node>
            "Classes with single inheritance and multiple interfaces implemented"
            "Metaclasses"
            "Single-dispatch 'a la' Java"
            "Generic multi-dispatch methods 'a la' CommonLisp"))
        (<division> title: "Component Programming"
          (<node>
            ))
        (<division> title: "Type System"
          (<node>
            "Fully optional"
            "Type inference"
            "Scheme integration"
            (<node>
              "Supports all Scheme primitive types"
              "Annotating fixnums and flonums will generate optimal numerical code")))
        (<division> title: "Cross-Platform UI Library"
          (<node>
            (<span> "High level 2D API through the use of the " (<a> href: "http://cairographics.org/" "Cairo") " library")))))
    (<article> name: features.jedi title: "Jedi IDE"
      (<description>
        (<division> title: "Languages Edited"
          (<node>
            (<span> "Jazz")
            (<span> "Scheme")
            (<span> "Common Lisp")
            (<span> "C++")
            (<span> "Java")))
        (<division> title: "Project Management")
        (<division> title: "Product Development")
        (<division> title: "Text Editor"
          (<node>
            "Edit definitions"
            "Cross-reference database to browse references"
            "Browser metaphor navigation"
            "Syntax coloring"
            "Textual macro recording"
            "Mouse copying"
            "Unlimited undo / redo"
            "Clipboard stack"
            "Customisable code completion"
            "Code indentation"
            "Chapters browser"
            "Definitions browser"
            "Compare to saved"
            "Fully programmable"))
        (<division> title: "Debugging"
          (<node>
            "Remote Debugger"
            "Console to evaluate code"
            "Stack inspector supporting threads"))
        (<division> title: "Profiling"
          (<node>
            "Includes a precise statistical profiler"))
        (<division> title: "Search & Replace"
          (<node>
            "Multiple simultaneous searches and replaces"
            "Ability to play textual macro on replace"))
        (<division> title: "Collaborative Work"
          (<node>
            "Compare Directories"
            "Compare Files"))
        (<division> title: "Web Development"))))
  (<section> name: screenshots title: "Screenshots"
    (<article> title: "Screenshots"
      (<description>
        (<node>
          (<a> href: "screenshots.htm#jedi" "Jedi")
          (<a> href: "screenshots.htm#metamodeler" "MetaModeler")
          (<a> href: "screenshots.htm#pricing" "Pricing Manager")
          (<a> href: "screenshots.htm#companion" "Companion")
          (<a> href: "screenshots.htm#diablo" "Diablo"))))
    (<article> name: jedi title: "Jedi"
      (<description>
        "Jedi is the Jazz IDE. It is written entirely in Jazz."
        (<division> title: "Text Editor"
          (<table> cellpadding: "8"
            (<tr>
              (<td>
                (<screenshot> label: "Jazz Code" preview: "images/screenshots/text_jazz_small.png" image: "images/screenshots/text_jazz.htm"))
              (<td>
                (<screenshot> label: "Scheme Code" preview: "images/screenshots/text_scheme_small.png" image: "images/screenshots/text_scheme.htm")))))
        (<division> title: "Debugger and Tools"
          (<table> cellpadding: "8"
            (<tr>
              (<td>
                (<screenshot> label: "Debugger" preview: "images/screenshots/debugger_small.png" image: "images/screenshots/debugger.htm"))
              (<td>
                (<screenshot> label: "View Explorer" preview: "images/screenshots/view_explorer_small.png" image: "images/screenshots/view_explorer.htm"))
              (<td>
                (<screenshot> label: "Search and Replace" preview: "images/screenshots/search_replace_small.png" image: "images/screenshots/search_replace.htm")))))
        (<division> title: "Group Work"
          (<table> cellpadding: "8"
            (<tr>
              (<td>
                (<screenshot> label: "Compare Directories" preview: "images/screenshots/compare_directories_small.png" image: "images/screenshots/compare_directories.htm"))
              (<td>
                (<screenshot> label: "Compare Files" preview: "images/screenshots/compare_files_small.png" image: "images/screenshots/compare_files.htm")))))))
    (<article> name: metamodeler title: "MetaModeler"
      (<description>
        "The MetaModeler is a database modeling tool developed by" (<a> href: "http://www.metascoop.com" "MetaScoop") ". It is also entirely written in Jazz."
        (<table> cellpadding: "8"
          (<tr>
            (<td>
              (<screenshot> label: "Welcome" preview: "images/screenshots/metamodeler_welcome_small.png" image: "images/screenshots/metamodeler_welcome.htm"))
            (<td>
              (<screenshot> label: "Import" preview: "images/screenshots/metamodeler_import_small.png" image: "images/screenshots/metamodeler_import.htm"))
            (<td>
              (<screenshot> label: "Models" preview: "images/screenshots/metamodeler_models_small.png" image: "images/screenshots/metamodeler_models.htm"))
            (<td>
              (<screenshot> label: "Scripts" preview: "images/screenshots/metamodeler_scripts_small.png" image: "images/screenshots/metamodeler_scripts.htm")))
          (<tr>
            (<td>
              (<screenshot> label: "Analysis" preview: "images/screenshots/metamodeler_analysis_small.png" image: "images/screenshots/metamodeler_analysis.htm"))))))
    (<article> name: pricing title: "Pricing Manager"
      (<description>
        "A rule based pricing manager prototype developed by for a company in the travel industry. "
        "This application was used to run simulations of rule effects on pricing scenarios"
        (<table> cellpadding: "8"
          (<tr>
            (<td>
              (<screenshot> label: "Manager" preview: "images/screenshots/pricing_manager_small.png" image: "images/screenshots/pricing_manager.htm"))))))
    (<article> name: companion title: "Companion"
      (<description>
        "A visual mapping tool used to map various hierarchical structures including Java classes and XML data."
        (<table> cellpadding: "8"
          (<tr>
            (<td>
              (<screenshot> label: "Companion" preview: "images/screenshots/companion_small.png" image: "images/screenshots/companion.htm"))))))
    (<article> name: diablo title: "Diablo"
      (<description>
        "Jazz can do graphical games too!"
        (<table> cellpadding: "8"
          (<tr>
            (<td>
              (<screenshot> label: "Diablo" preview: "images/screenshots/diablo_small.png" image: "images/screenshots/diablo.htm")))))))
  (<section> name: walkthroughs title: "Walkthroughs"
    (<article> title: "Walkthroughs"
      (<description>
        (<division> title: "Installation"
          (<node>
            (<a> href: "walkthroughs.htm#walkthrough.installation" "Basic installation")
            (<a> href: "walkthroughs.htm#walkthrough.windows" "Windows initial setup")))
        (<division> title: "Jedi IDE"
          (<node>
            (<a> href: "walkthroughs.htm#walkthrough.key-bindings" "Setting up key bindings")
            (<a> href: "walkthroughs.htm#walkthrough.cataloging" "Cataloging existing code")
            (<a> href: "walkthroughs.htm#walkthrough.debugging-gambit" "Debugging existing Gambit code")
            (<a> href: "walkthroughs.htm#walkthrough.code" "Executing code")
            (<a> href: "walkthroughs.htm#walkthrough.class" "Creating classes")))
        (<division> title: "Jazz Platform"
          (<node>
            (<a> href: "walkthroughs.htm#walkthrough.view" "A simple graphical view")
            (<a> href: "walkthroughs.htm#walkthrough.application" "A basic application")))))
    (<article> name: walkthrough.installation title: "Basic installation"
      (<description>
        (<node>
          (<span> "Coming Soon"))))
    (<article> name: walkthrough.windows title: "Windows initial setup"
      (<description>
        (<node>
          (<span> "Coming Soon"))))
    (<article> name: walkthrough.key-bindings title: "Setting up key bindings"
      (<description>
        (<node>
          (<span> "Coming Soon"))))
    (<article> name: walkthrough.cataloging title: "Cataloging existing code"
      (<description>
        (<node>
          (<span> "Coming Soon"))))
    (<article> name: walkthrough.debugging-gambit title: "Debugging existing Gambit code"
      (<description>
        (<node>
          (<span> "Coming Soon"))))
    (<article> name: walkthrough.code title: "Executing code"
      (<description>
        (<division> title: "Installation"
          (<node>
            (<span> "After installing JazzScheme, open up the bin directory and execute jedi.exe to start Jedi, the JazzScheme IDE.")))
        (<division> title: "Login"
          (<node>
            (<div>
              (<span> "Next, you will see the Login dialog used to choose or create your Jedi user:")
              (<p>)
              (<img> src: "screenshots/login.png")
              (<p>)
              (<span> "Note that the default setup you see here will create your new user in the standard Users directory located just under the distribution folder. ")
              (<p>))
            (<span> "Next time you login, as your Users directory will not be empty anymore, you will be presented the list of users found in it. "
              "Just select your user from the list and click Login.")))
        (<division> title: "User"
          (<node>
            (<span> "Logging in with a new user " (<code> "Me") " will create 4 files inside your " (<code> "Me") " user folder:")
            (<node>
              (<span> "Connections.jml")
              (<span> "Preferences.jml")
              (<span> "Workbench.jml")
              (<span> "Me.jazz"))
            (<span> "The first three files, are setting files automatically managed by Jazz. "
              "Still, it is a good idea to familiarize yourself with their content as they play an important role and are meant to be extremelly readable.")
            (<span> "The fourth file, is a Jazz class that represents you! "
              "It is a great place to put customization code or any code that you are experimenting with until it migrates to a full fledged independant class.")))
        (<division> title: "Console"
          (<node>
            (<span> "The Console is used to evaluate Jazz code. Use it to experiment freely."
              (<p>)
              (<img> src: "screenshots/console.png")
              (<p>))
            (<span> "Select the Console either by clicking inside it or by using the Control-Alt-Space shortcut. ")
            (<node>
              (<span> "Be carefull, the Console is a full fledged text. "
                "The freedom of beeing inside a freely editable text can be surprising to new users. "
                "Expressions to be evaluated must be entered at the end. "
                "Note that Control-Alt-Space can be used anytime to force a fresh prompt at the end.")
              (<span> "Tab and Shift-Tab can be used to insert previous expressions. Note that the previous expression does not replace the current line but is inserted. "
                "This enables one to type some text, use Tab to insert a previous expression, continue typing, ...")
              (<span> "Another convenient way to access previous expressions, is to place the cursor on the line you want and press Enter. This will copy that line to a fresh line at the bottom."))))))
    (<article> name: walkthrough.class title: "Creating classes"
      (<description>
        (<division> title: "Workbench"
          (<node>
            (<span> "Jazz code must reside inside a unit. A unit can be anyone of:")
            (<node>
              "Class"
              "Interface"
              "Package")
            (<span> "To be accesible to Jazz, a unit must be installed in the Workbench. "
              "Use the Workbench Manager, the window at the top left to add new units to the workbench or import existing ones from the file system."
              (<p>)
              (<img> src: "screenshots/workbench_me.png")
              (<p>))))
        (<division> title: "Workspaces"
          (<node>
            (<span> "Now, open your Me.jazz user class by double-clicking it in the worbench. "
              "One thing you will notice if you look at the right end side of the toolbar, is that the current workspace is now the Text workspace. "
              (<p>)
              (<img> src: "screenshots/workspaces_text.png")
              (<p>)
              "This happened automatically when you edited your Me.jazz class. "
              "Note that this workspace gives you access to text related tools like the Chapters and Hierarchy tools. "
              "Also note that common tools like the Console are accessible in any workspace. "
              (<p>)
              "Available workspaces are:"
              (<node>
                "Home"
                "Debugger"
                "Groupware"
                "Text")
              (<p>)
              "Note that there are other workspaces in the distribution, but because of their experimental or incomplete nature, they are not installed by default. "
              "One that is partially completed and that might be of interest is a full featured GUI designer.")))
        (<division> title: "Code"
          (<node>
            (<span> "Enter the following method:"
              (<p>)
              (<pre> "(" (<span> class: "keyword" "method") " (" (<span> class: "definition" "random-element") " seq)
                       (element seq (random (length seq))))")
              (<p>)
              (<span> "Evaluate it by placing the cursor anywhere inside it and hitting Enter. "
                "The " (<code> "random-element") " method is now defined! "
                "You can easily experiment with it in the Console. "
                "Try evaluating " (<code> "(random-element '(a b c d e))") " a couple times..."))))
        (<division> title: "Free References"
          (<node>
            (<span> "Enter the following method:"
              (<pre> "(" (<span> class: "keyword" "method") " (" (<span> class: "definition" "count") " target seq . rest)
                       (bind-keywords ((key identity) (test eqv?)) rest
                         (let ((total 0))
                           (for-each (function (object)
                                       (when (target (keyed object))
                                         (increase total)))
                                     seq)
                           total)))")
              (<p>)
              (<span> "When you evaluate it, you will get:")
              (<p>)
              (<img> src: "screenshots/walk_error.png")
              (<p>)
              (<span> "The Jazz codewalker detected references to the free symbols " (<code> "keyed") " and " (<code> "increase") ". "
                "Note that our typos where catched early without having to actually execute the code. ")
              (<p>)
              (<span> "If you know where the free symbols are, you can click Ignore. Else, click the Highlight button that will highlight them for you:"
                (<p>)
                (<pre> "(" (<span> class: "keyword" "method") " (" (<span> class: "definition" "count") " target seq . rest)
                         (bind-keywords ((key identity) (test eqv?)) rest
                           (let ((total 0))
                             (for-each (function (object)
                                         (when (target (" (<span> class: "highlighted" "keyed") " object))
                                           (" (<span> class: "highlighted" "increase") " total)))
                                       seq)
                             total)))")
                (<p>)))))
        (<division> title: "Debugging"
          (<node>
            (<span> "Correct the previous free references by changing " (<code> "keyed") " to " (<code> "key") " and " (<code> "increase") " to " (<code> "increase!") ". You can now reevale the method by presse control-enter from anywhere inside the method.")
            (<span> "Lets try our new method by evaluating " (<code> "(count 'a '(a b a a d c))") " in the Console. You will get:"
              (<p>)
              (<img> src: "screenshots/count_error.png")
              (<p>)
              (<span> "If you know what the problem is from just reading the error message, click Ignore. Else, click the Debug button that will bring up the debugger:"
                (<p>)
                (<a> href: "screenshots/count_debugged.png" (<img> src: "screenshots/count_debugged_small.png"))
                (<p>)))))))
    (<article> name: walkthrough.view title: "A simple graphical view"
      (<description>
        (<division> title: "Install"
          (<node>
            (<span> "First, install the jazz.samples product in your Workbench. "
              "To do this, right-click your Workbench icon, select \"Install Product...\" and open inside your installation folder the Products/jazz.samples/jazz.samples.jazz file.")))
        (<division> title: "Run"
          (<node>
            (<span> "Execute the following code at the Console:"
              (<p>)
              (<pre> "(new-frame~ Mandelbrot)")
              (<p>)
              (<span> "This is a very simple view I did to show my son how the Mandelbrot set was calculated. "
                "Now it can be used to learn how Jazz graphical views work!")
              (<p>))
            (<span> "More coming Soon")))))
    (<article> name: walkthrough.application title: "A basic application"
      (<description>
        (<node>
          (<span> "Coming Soon")))))
  (<section> name: documentation title: "Documentation"
    (<article> title: "Documentation"
      (<description>
        (<node>
          (<a> href: "documentation.htm#documentation.license" "License")
          (<a> href: "documentation.htm#documentation.roots" "Roots")
          (<a> href: "documentation.htm#documentation.paradigms" "Paradigms"))))
      ;; (<article> name: history title: "History")
    (<article> name: documentation.license title: "License"
      (<description>
        "JazzScheme is released under a dual "
        (<a> href: "http://www.mozilla.org/MPL/MPL-1.1.html" "Mozilla Public License Version 1.1")
        " or "
        (<a> href: "http://www.gnu.org/copyleft/gpl.html" "GNU General Public License v2 or later")
        ". You can choose whichever license you prefer."))
    (<article> name: documentation.roots title: "Roots"
      (<description>
        "Jazz borrows ideas from the following languages :"
        (<node>
          (<span> "Scheme for its clean design and flexibility")
          (<span> "Common Lisp for its rich library and many great concepts")
          (<span> "Java for its simple object system (but adds many missing features)")
          (<span> "Visual Basic (yes even VB!) for its rapid development environment"))))
    (<article> name: documentation.paradigms title: "Paradigms"
      (<description>
        "Jazz supports in a unified and coherent approach the following paradigms :"
        (<node>
          (<span> "Functional programming")
          (<span> "Object-oriented programming")
          (<span> "Component programming"))))
    (<section> name: installation title: "Installation"
      (<article> title: "Installation"
        (<description>
          (<node>
            (<a> href: "installation.htm#installation.dependencies" "Dependencies")
            (<a> href: "installation.htm#installation.sources" "Sources")
            (<a> href: "installation.htm#installation.building" "Building")
            (<node>
              (<a> href: "installation.htm#installation.examples" "Examples")
              (<a> href: "installation.htm#installation.list" "List")
              (<a> href: "installation.htm#installation.delete" "Delete")
              (<a> href: "installation.htm#installation.configure" "Configure")
              (<a> href: "installation.htm#installation.make" "Make")
              (<a> href: "installation.htm#installation.install" "Install")
              (<a> href: "installation.htm#installation.quit" "Quit")))))
      (<article> name: installation.dependencies title: "Dependencies"
        (<description>
          (<division> title: "Gambit"
            "You need to install the latest version of "
            (<a> href: "http://www.iro.umontreal.ca/~gambit/" "Gambit")
            ". "
            "You will also need to pull all the latest changes from the Gambit repository as Marc Feely, Gambit's author, is often fixing bugs and adding new features to support JazzScheme development. "
            "Be sure you have made a 'make bootstrap' for Gambit before pulling. "
            "This is documented on Gambit's website but is a costly gotcha as it will force you to reinstall if you forget to do it. "
            "See Gambit's INSTALL.txt file for details on installing Gambit and see Gambit's website for details on accessing "
            (<a> href: "http://dynamo.iro.umontreal.ca/~gambit/wiki/index.php/Source_code_repository" "Gambit's public repository")
            ". "
            (<p>)
            "Note that JazzScheme relies on very few Gambit specific features and was designed with ease of porting to other Scheme systems in mind. "
            (<p>)
            "All compilation is done through the underlying Scheme. "
            "As Gambit uses GCC for backend, please refer to Gambit's documentation if you're experiencing GCC problems. "
            "On Windows, the only backend fully tested to work with JazzScheme is "
            (<a> href: "http://www.mingw.org/" "MinGW")
            ". "
            "Note that some people have reported problems when building JazzScheme with old versions of MinGW. "
            "Another reported problem was from someone having both Cygwin and MinGW installed, where MinGW would wrongly call Cygwin's gcc. "
            "Uninstalling Cygwin fixed the problem. ")
          (<division> title: "Cairo"
            "If you plan on doing GUI development, you will need to install "
            (<a> href: "http://cairographics.org/" "Cairo")
            ". "
            "On Windows we precompiled it for you as a dll. "
            "On other systems, you should install it the usual way (with your package manager) and Jazz will use pkg-config to find the various paths. "
            "If you are on MacOS, the simplest way to install Cairo is through "
            (<a> href: "http://www.macports.org/" "macports")
            ". "
            "If you decide to compile your own versions of the libraries, pkg-config will need to know where they are installed. "
            "You should set the environment variable PKG_CONFIG_PATH to the appropriate directories. ")
          (<division> title: "X11 on the Mac"
            "Due to a bug in Apple's installed version of X11, if you plan on using X11 on the Mac, you will need to install the latest X11 version from "
            (<a> href: "http://xquartz.macosforge.org/" "http://xquartz.macosforge.org/")
            ". "
            "This is the official apple site for X11 on the Mac. "
            "Note that depending on your settings, X11 may need to be manually started before launching Jedi. ")))
      (<article> name: installation.sources title: "Sources"
        (<description>
          "JazzScheme uses Git to store all development files. You will need to install Git to access the Jazz repository. "
          (<division> title: "Repository"
            "The repository is currently hosted at git://64.235.209.250/git/jazz"
            (<p>)
            "If you get an error like \"fatal: unable to connect a socket (Connection timed out)\" it may be that you are behind a firewall that blocks outbound connections on Git's port 9418. ")
          (<division> title: "Help"
            "Some usefull Git links :"
            (<node>
              (<a> href: "http://www.kernel.org/pub/software/scm/git/docs/" "Documentation")
              (<a> href: "http://www.kernel.org/pub/software/scm/git/docs/user-manual.html" "User Manual")
              (<a> href: "http://www.kernel.org/pub/software/scm/git/docs/gittutorial.html" "Tutorial")))
          (<division> title: "User Scenario"
            (<xmp>
              #"  ;; clone the JazzScheme repository (only once)
  git clone git://64.235.209.250/git/jazz
  cd jazz

  ;; After you clone the public repo, you should never modify the master
  ;; branch as it will make subsequent pulls more prone to failure. This can
  ;; easily happen when experimenting around. You should always work in your
  ;; own branch, lets say 'work'
  git branch work
  git checkout work

  ;; pull from time to time to get the latest revision
  git checkout master
  git pull
  git checkout work
  git rebase master
  <optional step: fix any rebase conflicts>
    <edit and resolve conflicts in all the conflicting files>
    <git add the resolved files>
    git rebase --continue
    <see http://www.kernel.org/pub/software/scm/git/docs/git-rebase.html for
    details>"#))
          (<division> title: "Contributor Scenario"
            (<xmp>
              #"  ;; clone the JazzScheme repository (only once)
  git clone git://64.235.209.250/git/jazz
  cd jazz

  git config user.email "you@email.com"
  git config user.name "Your Name"

  ;; After you clone the public repo, you should never modify the master
  ;; branch as it will be used by git-rebase. You should always work in your
  ;; own branch, lets say 'work'
  git branch work
  git checkout work

  ;; commit any changes you have made
  ;; the -a option is necessary if you added any new file to the Jazz tree
  git commit -a -m "Some nice message describing your changes"

  ;; pull from time to time to get the latest revision and rebase your changes
  git checkout master
  git pull
  git checkout work
  git rebase master
  <optional step: fix any rebase conflicts>
    <edit and resolve conflicts in all the conflicting files>
    <git add the resolved files>
    git rebase --continue
    <see http://www.kernel.org/pub/software/scm/git/docs/git-rebase.html for
    details>

  ;; send contributions as a series of patch files
  ;; make sure you do the previous step of rebasing your changes just before
  ;; doing this as this will greatly minimize risks of conflicts when the Jazz
  ;; maintainers apply your patches to the central repository
  git format-patch origin
  <email generated patch files to gcartier@jazzscheme.org>"#
  ))
          (<division> title: "Maintainer Scenario"
            (<xmp>
              #"  ;; publish some changes
  git push pub master

  ;; merge contributions
  git am -3 *.patch
  <optional step: fix any am conflicts>
    git am --resolved"#))))
      (<article> name: installation.building title: "Building"
        (<description>
          "Building Jazz follows the usual configure / make methodology. "
          "The only unusual thing is that, as the underlying Scheme already represents a platform independant abstraction, there is no need to use the low-level GNU tools. "
          "The build system is fully implemented using the underlying Scheme. "
          (<p>)
          "Note that on Windows, building the platform target will generate many warnings. "
          "These are due to limitations in the current implementation of the foreign-function interface and can be safely ignored. "
          (<p>)
          "To load the build system using :"
          (<p>)
          (<division> title: "Gambit"
            "Just launch gsc from Jazz's source install directory. "
            "The .gambcini file located there will automatically load the build system. "))
        (<article> name: installation.examples title: "Examples"
          (<description>
          (<division> title: "Building the Jazz kernel and core modules"
            (<p>)
            (<xmp> #"  gsc
  Jazz 2.0b1 Build System

  $ configure
  <default>
    system: gambit
    platform: windows
    safety: release

  $ make
  ..."#))
            (<division> title: "Building Jedi's critical modules"
              (<xmp> #"  gsc
  Jazz 2.0b1 Build System

  $ make jedi
  ..."#))))
        (<article> name: installation.list title: "List"
          (<description>
          "List configurations."
          (<p>)
          (<xmp> "list")))
        (<article> name: installation.delete title: "Delete"
          (<description>
          "Delete a configuration."
          (<p>)
          (<xmp> "delete [configuration]")))
        (<article> name: installation.configure title: "Configure"
          (<description>
          "Register a new configuration. "
          (<p>)
          "To support multiple configurations, configurations can be optionaly be named."
          (<p>)
          "Configurations are loaded / saved from the .configurations file located at the root. "
          "Using configure is basically an easy way to edit the .configurations file. "
          (<p>)
          (<xmp> #"configure
  [name: name]
  [title: title]
  [system: system]
  [platform: platform]
  [windowing: windowing]
  [safety: safety]
  [optimize?: optimize?]
  [include-source?: include-source?]
  [interpret?: interpret?]
  [install: install]

name
  The optional configuration name. Must be alphanumeric.

title
  The optional configuration title. Must be alphanumeric.

  If present, this title will be used to name the installation directory.

system
  The underlying Scheme system (automatically determined)
  - gambit (the only fully supported scheme system at the moment)
  - chicken
  - ...

platform
  The platform (will try and guess based on system type)
  - mac
  - windows
  - unix

windowing
  The windowing system (will try and guess based on system type)
  - carbon (development started)
  - x11 (almost there)
  - #f (use default platform windowing)

safety
  The runtime safety level
  - core
      Core debug mode for debugging JazzScheme itself. Adds tests to make the
      kernel and core safe.
  - debug
      Standard debug mode with tests to make user code safe. This is the
      recommanded safety for development.
  - release (the default)
      Release mode for stable user code with no safety tests. If you plan on
      using the Jedi IDE, you may want to build using this safety level as it
      will run alot faster.

optimize?
  This option adds optimization declares to the source code. Note that this
  will make debugging somewhat harder as the generated code will have gone
  through some transformations. At the moment it adds: proper-tail-calls,
  constant-fold and lambda-lift.
  - #f
  - #t (the default)

include-source?
  Include source in compiled code by compiling with Gambit's 'debug-source'
  option. This option is usefull for using the statprof statistical profiler
  with compiled files. Note that using this option will result in much larger
  object files and due to a flaw in gcc also result in longer compile times.
  - #f (the default)
  - #t

interpret?
  An advanced option for Jazz developers to enable loading the kernel fully
  interpreted.
  - #f (the default)
  - #t

install
  The installation directory.

  Having a separate installation directory for each configuration enables multiple
  configurations to be independently built. Any configuration dependent file will go
  inside the installation directory. Examples include: the Jazz kernel, built executables,
  libraries, compilation binaries, binary packages, ...

  If the installation directory is not specified, it will default to
  bin/<configuration name> where <configuration name> is either :
  - the configuration title if specified
  - the configuration name if specified
  - a name made by concatenating the following key configuration elements : the system,
    the platform, the windowing and the safety"#)))
        (<article> name: installation.make title: "Make"
          (<description>
          "Build target for the active configuration."
          (<p>)
          (<xmp> #"make [target]

target
  The target to build which defaults to 'jazz'.

  To support multiple configurations, a target can also be specified as
  target@configuration

  - kernel    : the module system
  - core      : the core modules
  - jazz      : the jazz language modules
  - platform  : the platform modules
  - all       : jazz's modules
  - jedi      : jedi's critical modules
  - <product> : builds <product>"#)))
        (<article> name: installation.install title: "Install"
          (<description>
          "There is no equivalent of make install due to the complexity of supporting multiple systems and user preferences. "
          "Since this step is also very simple to do manually, installing the built configuration is left to the user. "
          (<p>)
          "Depending on your system you will usually"
          (<node>
            "Copy the Jazz runtime files <need to detail this> to a standard system location or"
            "Modify your environment variables to point to the location of the Jazz executable")
          (<p>)
          "Note that at this time, modifying your environment variables is the preferred approach as some modules like Jedi are still dependent on source files."))
        (<article> name: installation.quit title: "Quit"
          (<description>
          "Quit the build system."))))
    (<section> name: kernel-manual title: "Module System" manual?: #t index?: #f projects: (kernel)
      )
    (<section> name: jazz-manual title: "Jazz Platform" manual?: #t projects: (jazz)
      )
    (<section> name: jedi-manual title: "Jedi IDE" manual?: #t index?: #f projects: (jedi)
      )
    (<section> name: samples title: "Samples"
      (<article> title: "Samples"
        (<description>
          (<node>
            (<a> href: "samples.htm#sample.world" "World")
            (<a> href: "samples.htm#sample.mandelbrot" "Mandelbrot")
            (<a> href: "samples.htm#sample.c4" "C4")
            (<a> href: "samples.htm#sample.gomoku" "Gomoku")
            (<a> href: "samples.htm#sample.game-server" "Game Server")
            (<a> href: "samples.htm#sample.jedi" "Jedi"))
          (<p>)
      "To build / run / test a sample, open it's project in the workbench and double-click it's product icon (the ruler with a pen icon). "
      "This will activate the product and make it the current product. "
      "You can then use the Product menu to interact with it. "
      (<p>)
      "Note that there is no need to build a sample before running it. "
      "Jazz support running any module interpreted. "
      "The only exception is modules containing FFI code but no sample uses any FFI at the moment. "))
    (<article> name: sample.world title: "World"
      (<description>
        "The classical hello world sample. "))
    (<article> name: sample.mandelbrot title: "Mandelbrot"
      (<description>
        "A simple window to explain how Mandelbrot sets are calculated that I did with my son. "
        (<p>)
        "Use the Test menu item to create a new Mandelbrot window. "))
    (<article> name: sample.c4 title: "C4"
      (<description>
        "The Connect-4 game with a simple minimax AI. "
        (<p>)
        "Winner is first one to put 4 circles in a line. "))
    (<article> name: sample.gomoku title: "Gomoku"
      (<description>
        "The classic japanese game with a simple minimax AI. "
        (<p>)
        "Winner is first one to put 5 stones in a line. "))
    (<article> name: sample.game-server title: "Game Server"
      (<description>
        "A sample web server."
        (<p>)
        "You can launch the game server using either of the following methods :"
        (<p>)
        (<node>
          (<span>
            "Select the Game Server product by double-clicking it and then launch the product using the Product / Debug command. "
            "You can use the game server console to control the server. "
            "Type help for help. ")
          (<span>
            "Select the Servers window and double click the Game row to start the server inside the IDE."))
        (<p>)
        "To try the server enter the following address in any browser :"
        (<p>)
        (<a> href: "http://localhost:8080/Games")))
        (<article> name: sample.jedi title: "Jedi"
          (<description>
            ))))
  
  ;; (<section> name: forums title: "Forums")
  ;; (<section> name: blogs title: "Blogs")
  ;; (<section> name: wiki title: "Wiki")
  ;; (<section> name: resources title: "Resources"
  ;;   (<article> name: external-links title: "External Links"))
  (<section> name: development title: "Development"
    (<article> title: "Development"
      (<description>
        (<node>
          (<a> href: "development.htm#development.reporting-bugs" "Reporting Bugs")
          (<a> href: "development.htm#development.contributing" "Contributing")
          (<a> href: "development.htm#development.contact" "Contact Info"))))
    (<article> name: development.reporting-bugs title: "Reporting Bugs"
      (<description>
        (<p> "For now, please send bugs and suggestions to the Jazz discussion group at "
          (<a> href: "http://groups.google.com/group/jazzscheme" "http://groups.google.com/group/jazzscheme")
          " or directly to "
          (<a> href: "mailto:gcartier@jazzscheme.org" "gcartier@jazzscheme.org"))))
    (<article> name: development.contributing title: "Contributing"
      (<description>
        (<p> "Contributions of any kind are always welcome! "
          "We will be working closely with contributors to make sure contributed code is of the highest quality and integrates well with the existing system. "
          "If you are a beginning Jazz programmer, this can be a great learning experience!")))
    (<article> name: development.contact title: "Contact Info"
      (<description>
        (<a> href: "mailto:gcartier@jazzscheme.org" "gcartier@jazzscheme.org")))
    (<section> name: roadmap title: "Roadmap"
      (<article> title: "Roadmap"
      (<description>
        (<node>
          (<a> href: "roadmap.htm#roadmap.high" "High Priority")
          (<a> href: "roadmap.htm#roadmap.medium" "Medium Priority")
          (<a> href: "roadmap.htm#roadmap.low" "Low Priority")
          (<a> href: "roadmap.htm#roadmap.asneeded" "To be done As Needed"))
        "Note that these entries represent my own development priorities at this point in time and can change depending on :"
        (<node>
          "Community feedback,"
          "Time and resources availability,"
          "Collaboration proposals,"
          "Contracts priorities,"
          "...")))
      (<article> name: roadmap.high title: "High Priority"
      (<description>
        (<div> class: "project-first" (<span> class: "project" "JazzScheme Public Release") " (medium project, 95% complete, work in progress)")
        (<p>) (<i> "Description")
        (<p>)
        (<span> "Complete the work needed on JazzScheme for a public release.")
        (<p>) (<i> "Todo")
        (<p>)
        (<node>
          "Documentation"
          "Walkthroughs"
          "...")))
      (<article> name: roadmap.medium title: "Medium Priority"
      (<description>
        (<div> class: "project-first" (<span> class: "project" "License Module") " (small project, 60% complete)")
        (<p>) (<i> "Description")
        (<p>)
        (<span> "The goal of this module is to have all necessary licensing services to distribute trial versions of products.")
        (<p>)
        (<div> class: "project" (<span> class: "project" "Web Server / Framework") " (large project, 50% complete)")
        (<p>) (<i> "Description")
        (<p>)
        (<span> "Module to support building static and dynamic websites in Jazz.")
        (<p>) (<i> "Todo")
        (<node>
          "Complete the actual first draft implementation of the Web Server."
          "Consider the pros and cons of a continuation based approach to Web servers."
          "Build a nice modern framework for web development propably based on Ajax like concepts."
          "Optimize JML, especially JML transformations.")))
      (<article> name: roadmap.low title: "Low Priority"
      (<description>
        (<div> class: "project-first" (<span> class: "project" "Dependencies Analyser") " (medium project, 80% complete)")
        (<p>) (<i> "Description")
        (<p>)
        (<span> "At the moment, Jazz has a solid module system that can be used to build applications. "
          "What is needed is a solution to the problem of complex frameworks like Jazz where including one module can potentially include almost all other modules because of all the cross-module references.")
        (<p>)
        (<div> class: "project" (<span> class: "project" "Java Interface") " (large project, 40% complete)")
        (<p>) (<i> "Description")
        (<p>)
        (<span> "Using JNI, enable Jazz code to seamlessly call Java classes and vice-versa.")
        (<p>)
        (<p>) (<i> "Notes")
        (<p>)
        (<node>
          (<span> "At the moment, we are already able to call Java code. "))
        (<p>)
        (<p>) (<i> "Todo")
        (<p>)
        (<node>
          (<span> "Garbage collector support. ")
          "Finish all the details.")
        (<p>)
        (<div> class: "project" (<span> class: "project" ".Net Interface") " (large project, 0% complete)")
        (<p>) (<i> "Description")
        (<p>)
        (<span> "Enable Jazz code to seamlessly call .Net classes and vice-versa.")
        (<p>)
        (<div> class: "project" (<span> class: "project" "GUI Designer") " (medium project, 75% complete)")
        (<p>) (<i> "Description")
        (<p>)
        (<span> "Create a GUI designer for Jazz views and layouts.")
        (<p>) (<i> "Todo")
        (<p>)
        (<node>
          "The GUI designer is pretty much functional for basic editing. What is needed is support for layouts and for Jazz's usage of container views.")))
      (<article> name: roadmap.asneeded title: "To be done As Needed"
      (<description>
        (<div> class: "project" (<span> class: "project" "Logging / Resources Monitoring / Performance Profiling") " (small project, 80% complete)")
        (<p>) (<i> "Description")
        (<p>)
        (<span> "At the moment Jazz has a nice logging framework, basic resources monitoring and a simple yet usefull performance profiler. ")
        (<p>) (<i> "Todo")
        (<p>)
        (<node>
          "Unify logging, resources monitoring and performance profiling using JML."
          "Make all three aware of the others such that resources or performance overhead of any of the three will not be included in the final reports.")
        (<p>)
        (<div> class: "project" (<span> class: "project" "Iteration Framework") " (small project, 0% complete)")
        (<p>) (<i> "Description")
        (<p>)
        (<span> "At the moment, Jazz supports internal iterator mainly through " (<code> "for-each") " and user extensible external iterators. "
          "What is needed for simplicity and performance is a way to support user extensible internal iterators.")
        (<p>)
        (<div> class: "project" (<span> class: "project" "Styled Text") " (medium project, 70% complete)")
        (<p>) (<i> "Description")
        (<p>)
        (<span> "The Jazz text already supports embedding views in a fashion similar to HTML but it needs more work. ")
        (<p>)
        (<p>) (<i> "Goals")
        (<p>)
        (<node>
          "Simplify GUI design."
          "Simplify building applications where both a desktop version and a web version are needed.")
        (<p>)
        (<p>) (<i> "Todo")
        (<p>)
        (<node>
          "Implement the upward-downward text rendering algorithm for internal objects resizing."
          "Clean the text by implementing most of the good concepts of CSS.")))))
  (<section> name: download title: "Download"
    (<article> title: "Download"
      (<description>
        (<b> "This section is empty as JazzScheme has not been publicly released yet.")))
    (<article> title: "Closed Beta"
      (<description>
        "If you want to get in early on the fun there will be a closed beta available to the members of the JazzScheme discussion group in the next few weeks. "
        "You can join the group at "
        (<a> href: "http://groups.google.com/group/jazzscheme" "http://groups.google.com/group/jazzscheme")
        (<br>)(<br>))))
  ;; (<section> name: faq title: "FAQ")
  )
