;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Jazz Website
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2012
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module jazz.website jazz


(export (jazz.website.autoload))

(import (jazz.website.autoload)
        (jazz.io)
        (jazz.jml)
        (jazz.system))


;;;
;;;; Transformation
;;;


(definition public generate-manual?
  (make-parameter #t))


;;;
;;;; Website
;;;


(definition public (generate-website site content)
  (let* ((site (load-jml site))
         (transformed (transform-jml site (new JazzWebsite-Transformation title: "World" copyright: "Copyright &copy; 2012 Guillaume Cartier")))
         (pages (get-children~ transformed)))
    (for-each (lambda (page)
                (user-feedback "Rendering {a}..." (get-property~ page 'path))
                (render-website-page content page))
              pages)
    (user-feedback "Website generated")))


(definition public (render-website-page content page)
  (let* ((file (new-file~ content (format "{a}.htm" (get-property~ page 'path))))
         (preferences (new JML-Preferences))
         (renderer (new XHTML-Renderer preferences))
         (html (first-child~ page)))
    ;; why does using UTF-8 char-encoding not work with accents in the generated HTML page
    (call-with-output-file (path-settings file char-encoding: 'ISO-8859-1)
      (lambda (output)
        (render~ renderer html output)))))


(definition public (export-latest-news site)
  (let* ((site (load-jml site))
         (news (second (get-children~ (find-name~ site 'news))))
         (latest (first (get-children~ news))))
    (let ((output (open-output-string))
          (left-margin 0)
          (right-margin 70)
          (column 0))
      (define (render node)
        (typecase node
          ((JML-Text)
           (render-text (get-text~ node)))
          (else
           (let ((tag (get-tag~ node)))
             (case tag
               ((division) (render-division node))
               ((p) (render-paragraph node))
               ((b) (render-bold node))
               ((br) (render-break node))
               ((node) (render-node node))
               ((span) (render-span node))
               ((cite) (render-cite node))
               ((a) (render-anchor node))
               (else (error "Unable to render tag: {s}" tag)))))))
      
      (define (render-children node)
        (for-each render (get-children~ node)))
      
      (define (render-text text)
        (let ((words (remove-empty (split text " "))))
          (for-each (lambda (word)
                      (let ((right (+ column (cardinality word))))
                        (cond ((>= right right-margin)
                               (break))
                              ((> column 0)
                               (print " ")))
                        (print word)))
                    words)))
      
      (define (render-division node)
        (let ((title (get-property~ node 'title)))
          (paragraph)
          (print (upcase title))
          (paragraph)
          (with-margins left-margin #f
            (lambda ()
              (render-children node)))))
      
      (define (render-paragraph node)
        (paragraph))
      
      (define (render-bold node)
        (render-text (upcase (get-text~ (first-child~ node)))))
      
      (define (render-break node)
        (break))
      
      (define (render-node node)
        (for-each (lambda (subnode)
                    (print "-")
                    (with-margins (+ left-margin 2) #f
                      (lambda ()
                        (render subnode)
                        (break))))
                  (get-children~ node)))
      
      (define (render-span node)
        (render-children node))
      
      (define (render-cite node)
        (render-children node))
      
      (define (render-anchor node)
        (let ((href (get-property~ node 'href))
              (text (get-text~ (first-child~ node))))
          (if (equal? href text)
              (print href)
            (print (format "{a}: {a}" text href)))))
      
      (define (with-margins left right thunk)
        (let ((old-left left-margin)
              (old-right right-margin))
          (when left
            (set! left-margin left))
          (when right
            (set! right-margin left))
          (thunk)
          (set! left-margin old-left)
          (set! right-margin old-right)))
      
      (define (print str)
        (when (and (= column 0) (> left-margin 0))
          (format output "{a}" (make-string left-margin #\space)))
        (display str output)
        (increase! column (cardinality str)))
      
      (define (break)
        (format output "{%}")
        (set! column 0))
      
      (define (paragraph)
        (when (> column 0)
          (break))
        (break))
      
      (render-children latest)
      (user-message "Latest news rendered to clipboard")
      (get-output-string output)))))
