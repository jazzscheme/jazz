;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Jazz Website
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module jazz.website jazz


(export (jazz.website.autoload))

(import (jazz.website.autoload)
        (jazz.foreign)
        (jazz.io)
        (jazz.jml)
        (jazz.library.component)
        (jazz.system))


;;;
;;;; Transformation
;;;


(definition public generate-manual?
  (make-parameter #t))

(definition public generate-reference?
  (make-parameter #t))


;;;
;;;; Doc Generation
;;;


(definition public (extract-doc modules-info reference-dir (sort?: sort? #t))
  (define (extract-toplevel-doc info)
    (bind (name . units) (if (symbol? info) (cons info '()) info)
      (user-feedback "Extracting {a}..." name)
      (create-directories~ reference-dir)
      (call-with-output-file (path-settings (new-file~ reference-dir (format "{a}.jml" name)))
        (lambda (port)
          (let ((form (parse-form `(data jazz.ide.data.doc (form ,(extract-unit/module-doc name units))))))
            (print-form-data form port))))))
  
  (define (extract-unit/module-doc name units)
    (load-build)
    (let ((unit (outline-unit (if (null? units) name (car units)))))
      (typecase unit
        ((Unit-Declaration) (extract-unit-doc name unit))
        ((Module-Declaration) (extract-module-doc name unit)))))
  
  (define (extract-unit-doc name declaration)
    `(<Unit-Doc> name: ,name title: ,(symbol->string name)))
  
  (define (extract-module-doc name declaration)
    (let ((declarations (filter-access/compatibility-declarations (resolve-declarations (queue-list (get-children~ declaration))))))
      (let ((sorted (if sort? (sort string<? declarations key: (lambda (decl) (symbol->string (get-name~ decl)))) declarations)))
        `(<Module-Doc> name: ,name title: ,(symbol->string name)
           ,@(collect extract-declaration-doc sorted)))))
  
  (define (extract-declaration-doc declaration)
    (typecase declaration
      ((Export-Declaration) (extract-export-doc declaration))
      ((Export-Syntax-Declaration) (extract-export-doc declaration))
      ((Define-Declaration) (extract-define-doc declaration))
      ((Define-Macro-Declaration) (extract-define-macro-doc declaration))
      ((Definition-Declaration) (extract-definition-doc declaration))
      ((Generic-Declaration) (extract-generic-doc declaration))
      ((Macro-Declaration) (extract-macro-doc declaration))
      ((Syntax-Declaration) (extract-syntax-doc declaration))
      ((Class-Declaration) (extract-class-doc declaration))
      ((Interface-Declaration) (extract-interface-doc declaration))
      ((Property-Declaration) (extract-property-doc declaration))
      ((Slot-Declaration) (extract-slot-doc declaration))
      ((Method-Declaration) (extract-method-doc declaration))
      ((C-Type-Declaration) (extract-c-type-doc declaration))
      ((C-Definition-Declaration) (extract-c-definition-doc declaration))
      ((C-Named-Declare-Declaration) #f)
      (else (debug 'Unknown (category-identifier (class-of declaration))) `(<Doc> name: ,(get-name~ declaration)))))
  
  (define (extract-export-doc declaration)
    `(<Export-Doc> name: ,(extract-locator declaration) title: ,(symbol->string (get-name~ declaration))))
  
  (define (extract-define-doc declaration)
    `(<Definition-Doc> name: ,(extract-locator declaration) title: ,(symbol->string (get-name~ declaration))
       parameters: ,(extract-signature (get-signature~ declaration))
       ,@(extract-result-type declaration)))
  
  (define (extract-define-macro-doc declaration)
    `(<Syntax-Doc> name: ,(extract-locator declaration) title: ,(symbol->string (get-name~ declaration))
       parameters: ,(extract-signature (get-signature~ declaration))
       ,@(extract-result-type declaration)))
  
  (define (extract-definition-doc declaration)
    `(<Definition-Doc> name: ,(extract-locator declaration) title: ,(symbol->string (get-name~ declaration))
       parameters: ,(extract-signature (get-signature~ declaration))
       ,@(extract-result-type declaration)))
  
  (define (extract-generic-doc declaration)
    `(<Generic-Doc> name: ,(extract-locator declaration) title: ,(symbol->string (get-name~ declaration))
       parameters: ,(extract-signature (get-signature~ declaration))
       ,@(extract-result-type declaration)))
  
  (define (extract-macro-doc declaration)
    `(<Syntax-Doc> name: ,(extract-locator declaration) title: ,(symbol->string (get-name~ declaration))
       parameters: ,(extract-signature (get-signature~ declaration))
       ,@(extract-result-type declaration)))
  
  (define (extract-syntax-doc declaration)
    `(<Syntax-Doc> name: ,(extract-locator declaration) title: ,(symbol->string (get-name~ declaration))
       parameters: ,(extract-signature (get-signature~ declaration))
       ,@(extract-result-type declaration)))
  
  (define (extract-class-doc declaration)
    (define (filter-accessors declarations)
      (let ((accessor-names (make-table test: eq?))
            (queue (new-queue)))
        (for-each (lambda (decl)
                    (cond ((is? decl Slot-Declaration)
                           (let ((getter-name (get-getter-name~ decl))
                                 (setter-name (get-setter-name~ decl)))
                             (when getter-name
                               (table-set! accessor-names getter-name #t))
                             (when setter-name
                               (table-set! accessor-names setter-name #t))
                             (enqueue queue decl)))
                          ((is? decl Method-Declaration)
                           (unless (table-ref accessor-names (get-name~ decl) #f)
                             (enqueue queue decl)))
                          (else
                           (enqueue queue decl))))
                  declarations)
        (queue-list queue)))
    
    (let ((name (symbol->string (get-name~ declaration)))
          (ascendant (get-ascendant~ declaration))
          (interfaces (get-interfaces~ declaration)))
      (unless (or (ends-with? name "-Class")
                  (ends-with? name "~Class"))
        `(<Class-Doc> name: ,(extract-locator declaration) title: ,name
           ascendant: ,(if ascendant (extract-locator (resolve-binding ascendant)) #f)
           interfaces: ,(map extract-locator (resolve-declarations interfaces))
           ,@(map extract-declaration-doc (filter-accessors (filter-access/compatibility-declarations (queue-list (get-children~ declaration)))))))))
  
  (define (extract-interface-doc declaration)
    (let ((ascendants (get-ascendants~ declaration)))
      `(<Interface-Doc> name: ,(extract-locator declaration) title: ,(symbol->string (get-name~ declaration))
         ascendants: ,(map extract-locator (resolve-declarations ascendants))
         ,@(map extract-declaration-doc (filter-access/compatibility-declarations (queue-list (get-children~ declaration)))))))
  
  (define (extract-slot-doc declaration)
    `(<Slot-Doc> name: ,(extract-locator declaration) title: ,(symbol->string (get-name~ declaration))))
  
  (define (extract-property-doc declaration)
    (let ((getter (get-getter-name~ declaration))
          (setter (get-setter-name~ declaration)))
      `(<Property-Doc> name: ,(extract-locator declaration) title: ,(symbol->string (get-name~ declaration))
         ,@(if getter `(getter: ,getter) '())
         ,@(if setter `(setter: ,setter) '()))))
  
  (define (extract-method-doc declaration)
    (define (extract-propagation-list)
      (let ((propagation (get-propagation~ declaration)))
        (list propagation: propagation)))
    
    `(<Method-Doc> name: ,(extract-locator declaration) title: ,(symbol->string (get-name~ declaration))
       access: ,(get-access~ declaration)
       ,@(extract-propagation-list)
       parameters: ,(extract-signature (get-signature~ declaration))
       ,@(extract-result-type declaration)))
  
  (define (extract-c-type-doc declaration)
    `(<C-Type-Doc> name: ,(extract-locator declaration) title: ,(symbol->string (get-name~ declaration))))
  
  (define (extract-c-definition-doc declaration)
    `(<C-Definition-Doc> name: ,(extract-locator declaration) title: ,(symbol->string (get-name~ declaration))))

  (define (extract-signature signature)
    (define (extract-parameter parameter)
      (let ((name (get-name~ parameter))
            (type (get-type~ parameter)))
        (if (not type)
            name
          (list name (type->specifier type)))))
    
    (if (not signature)
        #f
      (let ((positional (get-positional~ signature))
            (optional (get-optional~ signature))
            (named (get-named~ signature))
            (rest (get-rest~ signature)))
        `(,@(if (null? positional) '() (list positional: (map extract-parameter positional)))
          ,@(if (null? optional) '() (list optional: (map extract-parameter optional)))
          ,@(if (null? named) '() (list named: (map extract-parameter named)))
          ,@(if (not rest) '() (list rest: (extract-parameter rest)))))))
  
  (define (extract-result-type declaration)
    (let ((type (get-type~ declaration)))
      (if (is? type Function-Type)
          (let ((result (get-result~ type)))
            (if (and result (is-not? result (class-of Any)))
                `(result-type: ,(type->specifier (get-result~ type)))
              '()))
        '())))
  
  ;; temp hack to obtain the same format as when sub-modules are well integrated
  (define (extract-locator declaration)
    (let ((locator (get-locator~ declaration)))
      (let ((names (reverse! (split-reference locator))))
        (let ((len (length names)))
          (cond ((and (>= len 2) (eq? (first names) (second names)))
                 (apply compose-reference (reverse! (cons (first names) (cddr names)))))
                ((and (>= len 3) (eq? (second names) (third names)))
                 (apply compose-reference (reverse! (cons (first names) (cons (second names) (cdddr names))))))
                (else
                 locator))))))
  
  (define (resolve-declarations declarations)
    (map (lambda (decl)
           (resolve-binding decl))
         declarations))
  
  (define (filter-access/compatibility-declarations declarations)
    (collect-if (lambda (decl)
                  (and (let ((access (get-access~ decl)))
                         (or (eq? access 'public)
                             (is? decl Property-Declaration)
                             (and (eq? access 'protected)
                                  (is? decl Method-Declaration)
                                  (memq? (get-propagation~ decl) '(virtual chained)))))
                       (eq? (get-compatibility~ decl) 'uptodate)))
                declarations))
  
  (for-each extract-toplevel-doc modules-info)
  (user-feedback "Done"))


;;;
;;;; Website
;;;


(definition public (generate-website site content reference-dir)
  (let* ((site (load-jml site))
         (transformed (transform-jml site (new JazzWebsite-Transformation title: "World" copyright: "Copyright &copy; 2012 Guillaume Cartier" reference-dir: reference-dir)))
         (pages (get-children~ transformed)))
    (for-each (lambda (page)
                (user-feedback "Rendering {a}..." (get-property~ page 'path))
                (render-website-page content page))
              pages)
    (user-feedback "Website generated")))


(definition public (render-website-page content page)
  (let* ((file (new-file~ content (format "{a}.htm" (get-property~ page 'path))))
         (preferences (new JML-Preferences))
         (renderer (new XHTML-Renderer preferences))
         (html (first-child~ page)))
    ;; why does using UTF-8 char-encoding not work with accents in the generated HTML page
    (call-with-output-file (path-settings file char-encoding: 'ISO-8859-1)
      (lambda (output)
        (render~ renderer html output)))))


(definition public (export-latest-news site)
  (let* ((site (load-jml site))
         (news (second (get-children~ (find-name~ site 'news))))
         (latest (first (get-children~ news))))
    (let ((output (open-output-string))
          (left-margin 0)
          (right-margin 70)
          (column 0))
      (define (render node)
        (typecase node
          ((JML-Text)
           (render-text (get-text~ node)))
          (else
           (let ((tag (get-tag~ node)))
             (case tag
               ((division) (render-division node))
               ((p) (render-paragraph node))
               ((b) (render-bold node))
               ((br) (render-break node))
               ((node) (render-node node))
               ((span) (render-span node))
               ((cite) (render-cite node))
               ((a) (render-anchor node))
               (else (error "Unable to render tag: {s}" tag)))))))
      
      (define (render-children node)
        (for-each render (get-children~ node)))
      
      (define (render-text text)
        (let ((words (remove-empty (split text " "))))
          (for-each (lambda (word)
                      (let ((right (+ column (cardinality word))))
                        (cond ((>= right right-margin)
                               (break))
                              ((> column 0)
                               (print " ")))
                        (print word)))
                    words)))
      
      (define (render-division node)
        (let ((title (get-property~ node 'title)))
          (paragraph)
          (print (upcase title))
          (paragraph)
          (with-margins left-margin #f
            (lambda ()
              (render-children node)))))
      
      (define (render-paragraph node)
        (paragraph))
      
      (define (render-bold node)
        (render-text (upcase (get-text~ (first-child~ node)))))
      
      (define (render-break node)
        (break))
      
      (define (render-node node)
        (for-each (lambda (subnode)
                    (print "-")
                    (with-margins (+ left-margin 2) #f
                      (lambda ()
                        (render subnode)
                        (break))))
                  (get-children~ node)))
      
      (define (render-span node)
        (render-children node))
      
      (define (render-cite node)
        (render-children node))
      
      (define (render-anchor node)
        (let ((href (get-property~ node 'href))
              (text (get-text~ (first-child~ node))))
          (if (equal? href text)
              (print href)
            (print (format "{a}: {a}" text href)))))
      
      (define (with-margins left right thunk)
        (let ((old-left left-margin)
              (old-right right-margin))
          (when left
            (set! left-margin left))
          (when right
            (set! right-margin left))
          (thunk)
          (set! left-margin old-left)
          (set! right-margin old-right)))
      
      (define (print str)
        (when (and (= column 0) (> left-margin 0))
          (format output "{a}" (make-string left-margin #\space)))
        (display str output)
        (increase! column (cardinality str)))
      
      (define (break)
        (format output "{%}")
        (set! column 0))
      
      (define (paragraph)
        (when (> column 0)
          (break))
        (break))
      
      (render-children latest)
      (user-message "Latest news rendered to clipboard")
      (get-output-string output)))))
