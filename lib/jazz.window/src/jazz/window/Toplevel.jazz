;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Toplevel Windows
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.window.Toplevel jazz


(import (jazz.application)
        (jazz.geometry)
        (jazz.markup)
        (jazz.preferences)
        (jazz.settings)
        (jazz.view)
        (jazz.window))


(class Toplevel extends Overlapped

  
  (property fullscreen? initialize #f accessors explicit)


  (slot previous-state        initialize #f getter generate)
  (slot previous-position     initialize #f getter generate)
  (slot previous-size         initialize #f getter generate)
  (slot workspace-preferences initialize #f accessors generate)


  (form
    (<install> visible?: #f))

  
  ;;;
  ;;;; Root
  ;;;
  
  
  (method override (prepare-root self)
    )
  
  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method override (mouse-activate? self)
    #t)


  (method override (activate self kind)
    (when (eq? kind 'inactive)
      (toplevel-deactivate))
    (nextmethod self kind))
  
  
  (method override (activate-application self)
    (let ((appl (current-application)))
      (when appl
        (catch Cancel-Signal
          (activate appl))))
    processed)
  
  
  (method override (deactivate-application self)
    (let ((appl (current-application)))
      (when appl
        (catch Cancel-Signal
          (deactivate appl))))
    processed)
  
  
  (method override (position-change self position)
    (let ((pref (get-workspace-preferences self)))
      (when (and pref (or (not (get-position pref)) (not (get-size pref))))
        (set! previous-position (get-position self))))
    (nextmethod self position))
  
  
  (method override (size-change self state size)
    (let ((pref (get-workspace-preferences self)))
      (when (and pref (or (not (get-position pref)) (not (get-size pref))))
        (set! previous-state state)
        (when (eq? state 'restored)
          (set! previous-size (get-frame-size self)))))
    (nextmethod self state size))


  (method override (show self)
    (set! visible? #t)
    (let ((pref (current-preferences #f error?: #f)))
      (assert handle)
      (let ((state (symbol-parameter "toplevel-state" 'jazz.ui.toplevel-state (or (get-toplevel-state pref) 'restored)))
            (monitor (symbol-parameter "toplevel-monitor" 'jazz.ui.toplevel-monitor (get-toplevel-monitor pref)))
            (position (point-parameter "toplevel-position" 'jazz.ui.toplevel-position (get-toplevel-position pref)))
            (size (dimension-parameter "toplevel-size" 'jazz.ui.toplevel-size (get-toplevel-size pref))))
        (define (position-toplevel)
          (if monitor
              (let ((monitor (find-monitor monitor)))
                (let ((monitor-position (rect-position (get-work-area monitor))))
                  (if position
                      (set-position self (nu+ monitor-position position))
                    (unless (get-primary? monitor)
                      (set-position self monitor-position)))))
            (when position
              (set-position self position))))
        
        (define (size-toplevel)
          (when size
            (set-frame-size self size)))
        
        (case (if pref state 'restored)
          ((maximized)
           (position-toplevel)
           (size-toplevel)
           (show-maximized handle)
           (set! previous-state 'maximized))
          ((restored)
           (show-restored handle)
           (position-toplevel)
           (size-toplevel)
           (set! previous-state 'restored)
           (set! previous-position (get-position self))
           (set! previous-size (get-frame-size self))))))
    (let ((appl (current-application)))
      (show-undisplayed-message appl)
      (workspace-installed appl))
    (update-window self)
    (simulate-mouse-move self))
  
  
  (method override (close-window self)
    (close-requested))
    
  
  ;;;
  ;;;; State
  ;;;
  
  
  (method package (restore-state self)
    (case previous-state
      ((maximized) (maximize self))
      ((restored) (set-placement self (list previous-state previous-position previous-size)))))
    
  
  ;;;
  ;;;; Fullscreen
  ;;;


  (method public (get-fullscreen? self)
    fullscreen?)


  (method public (set-fullscreen? self value)
    (when (neq? value fullscreen?)
      (set! fullscreen? value)))
  
  
  ;;;
  ;;;; Palettes
  ;;;
  
  
  (method public (get-palettes self)
    (collect-if (lambda (window)
                  (and (is? window Palette)
                       (get-visible? window)))
                children))))
