;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; View Player
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.window.View-Player jazz


(import (jazz.application)
        (jazz.graphic)
        (jazz.locale)
        (jazz.menu)
        (jazz.process)
        (jazz.ui)
        (jazz.view)
        (jazz.window))


(class View-Player extends Window implements Playable


  ;; close-root  : close the root view
  ;; detach-root : detach the root without closing it
  ;; hide        : hide the player window
  (property close-behavior initialize 'close-root accessors generate)
  (property caption-base   initialize #f          accessors explicit)
  (property caption        initialize #f          accessors explicit)
  (property caption?       initialize #f          accessors explicit)

  
  (slot root           initialize #f)
  (slot view-focus     initialize #f)
  (slot pushed-focuses initialize '())

  
  ;;;
  ;;;; Initialization
  ;;;
  
  
  (method override (prepare self rest)
    (nextmethod self rest)
    (prepare-root self)
    (destroy-mandatory self))
  
  
  (method protected virtual (prepare-root self)
    (set-root self (new-root self)))

  
  (method protected virtual (new-root self)
    (new Host-View offscreen?: #t))
  
  
  (method override (find-to-modify self name test)
    (if (eq? name 'root)
        (get-root self)
      (nextmethod self name test)))
  
  
  (method override (get-origin self)
    self)
  
  
  ;;;
  ;;;; Destruction
  ;;;
  
  
  (method override (close self)
    (if (eq? close-behavior 'hide)
        (set-visible? self #f)
      (nextmethod self)))
  
  
  (method override (destroy self)
    (define (close-root)
      (when root
        (close root)
        (set! root #f)))
    
    (if (eq? close-behavior 'detach-root)
        (detach-root self)
      (close-root))
    (nextmethod self))
    
  
  ;;;
  ;;;; Access
  ;;;
  
  
  (method override (get-view-focus self)
    view-focus)
  
  
  (method override (set-view-focus self focus)
    (set! view-focus focus))
  
  
  (method override (get-pushed-focuses self)
    pushed-focuses)
    
  
  ;;;
  ;;;; Caption
  ;;;
  
  
  (method public (get-caption-base self)
    caption-base)
  

  (method public (set-caption-base self value)
    (set! caption-base value)
    (invalidate-title self))
  
  
  (method public (get-caption self)
    caption)
  
  
  (method public (set-caption self value)
    (set! caption value)
    (invalidate-title self))
  
  
  (method public (get-caption? self)
    caption?)
  
  
  (method public (set-caption? self value)
    (set! caption? value)
    (invalidate-title self))
    
  
  ;;;
  ;;;; Title
  ;;;
  
  
  (method protected virtual (effective-title self)
    (if (or (not caption) (not caption?))
        (if caption-base
            (localize caption-base)
          "")
      (let ((caption (localize caption)))
        (if caption-base
            (format "{a} - {a}" (localize caption-base) caption)
          caption))))
  
  
  (method package (invalidate-title self)
    (set-title self (effective-title self)))

  
  ;;;
  ;;;; Window
  ;;;


  (method override (erase-background self surface)
    (if (and root (get-offscreen? root))
        processed
      (nextmethod self surface)))

  
  ;;;
  ;;;; Root
  ;;;
  
  
  (method override (get-root self)
    root)
  
  
  (method override (set-root self value (detach?: detach? #t) (offscreen?: offscreen? #t))
    (when (neq? value root)
      (when detach?
        (detach-root self))
      (set! root value)
      (set-name root 'root)
      (set-parent root #f)
      (set-player root self)
      (set-offscreen? root offscreen?)
      (layout-window self)))
  
  
  (method (detach-root self)
    (when root
      (set-player root #f)
      (set-offscreen? root #f)
      (set! root #f)))
  
  
  ;;;
  ;;;; Layout
  ;;;
  
  
  (method override (size-change self state size)
    (nextmethod self state size)
    (layout-window self))
  
  
  (method override (layout self)
    (when root
      (parameterize ((inhibit-layouts? #t)
                     (inhibit-invalidates? #t))
        (set-position root {Point 0 0})
        (set-size root (get-size self)))
      (redraw-window self)))
  
  
  ;;;
  ;;;; Error
  ;;;
  
  
  (slot in-error? initialize #f)
  
  
  (method public (get-in-error? self)
    in-error?)
  
  
  (method public (set-in-error? self flag)
    (set! in-error? flag)
    (invalidate-window self))
  
  
  (definition Error-Color
    {Color Dark-Red})
  
  
  ;;;
  ;;;; Paint
  ;;;
  
  
  (method override (paint self update-region . platform-data)
    (define (paint-in-error surface bounds)
      (fill-rect surface bounds Error-Color))
    
    (let ((proc (debug-flicker)))
      (when proc
        (proc)))
    (with-platform-painting self platform-data
      (lambda (surface)
        (let ((update-rect (get-box update-region)))
          (set-clipper surface update-rect)
          (if in-error?
              (paint-in-error surface update-rect)
            (set! in-error? #t)
            ;; quick hack
            (when root
              (paint-root root surface update-region))
            (set! in-error? #f))))))
  
  
  ;; quick hack
  (cond-expand
    (cocoa
     (import jazz.platform.cocoa)
     
     ;; quick hack to have a cocoa specific method
     (method override (paint-cocoa self context rect)
       ;; quick hack until i understand why desktop gets called here
       (unless (is? self Desktop)
         (with ((update-region (new Region rect: (NSRect->rect rect))))
           (paint self update-region context)))))
    (else))
  
  
  ;;;
  ;;;; Receive Files
  ;;;
  
  
  (method override (receive-files self pos files)
    (unless in-error?
      (dispatch-receive-files root pos files))
    processed)
  
  
  ;;;
  ;;;; Mouse
  ;;;
  
  
  (method override (mouse-down self h v)
    (if in-error?
        (bell)
      (parameterize ((event-type 'mouse))
        (root-mouse-down root h v)))
    processed)
  
  
  (method (simulate-mouse-down self (pos #f))
    (let ((pos (or pos (mouse-position self))))
      (let ((view (find-view self pos)))
        (when view
          (root-mouse-down root (get-h pos) (get-v pos))))))
  
  
  (method override (mouse-move self h v)
    (unless in-error?
      (parameterize ((event-type 'mouse))
        (dispatch-mouse-move root h v)))
    processed)
  
  
  (method package (simulate-mouse-move self (pos #f))
    (let ((pos (or pos (mouse-position self))))
      (let ((view (find-view self pos)))
        (when view
          (dispatch-mouse-move root (get-h pos) (get-v pos))))))
  
  
  (method (simulate-global-mouse-move self)
    (let ((pos (mouse-position self)))
      (let ((player (find-window self pos)))
        (when (is? player View-Player)
          (let ((root (get-root player)))
            (dispatch-mouse-move root (get-h pos) (get-v pos)))))))
  
  
  (method override (mouse-up self h v)
    (unless in-error?
      (parameterize ((event-type 'mouse))
        (root-mouse-up root h v)))
    processed)
  
  
  (method override (double-click self h v)
    (unless in-error?
      (parameterize ((event-type 'mouse))
        (root-double-click root h v)))
    processed)
  
  
  (method override (multiple-click self count h v)
    (unless in-error?
      (parameterize ((event-type 'mouse))
        (root-multiple-click root count h v)))
    processed)
  
  
  (method override (context-menu self h v)
    (if in-error?
        (set-in-error? self #f)
      (parameterize ((event-type 'mouse))
        (root-context-menu root h v)))
    processed)
  
  
  (method override (middle-mouse-down self h v)
    (unless in-error?
      (parameterize ((event-type 'mouse))
        (root-middle-mouse-down root h v)))
    processed)
  
  
  (method override (middle-mouse-up self h v)
    (unless in-error?
      (parameterize ((event-type 'mouse))
        (root-middle-mouse-up root h v)))
    processed)
  
  
  (method override (right-mouse-down self h v)
    (unless in-error?
      (parameterize ((event-type 'mouse))
        (root-right-mouse-down root h v)))
    processed)
  
  
  (method override (right-mouse-up self h v)
    (unless in-error?
      (parameterize ((event-type 'mouse))
        (root-right-mouse-up root h v)))
    unprocessed)
  
  
  (method override (mouse-leave self)
    (when (and (get-mouse-in) (eq? (get-player (get-mouse-in)) self))
      (dispatch-mouse-leave (get-mouse-in))
      (cancel-tooltip-tracking (get-mouse-in))
      (reset-mouse-in)))


  ;;;
  ;;;; Palette
  ;;;
  
  
  (method public (for-each-docked self proc)
    (when root
      (for-each-view-docked root proc)))
  
  
  (method public (find-docked self type)
    (and root
         (find-view-docked root type)))


  ;;;
  ;;;; Popup
  ;;;
  
  
  (method public (popup self class . initargs)
    (define (new-popup)
      (apply new class
        owner: (get-overlapped self)
        visible?: #f
        initargs))
    
    (let ((popup (new-popup)))
      (set-popups (cons popup (get-popups)))
      popup))
  
  
  (method override (close-popups self (all?: all? #f) (exclude: exclude #f) (initiator: initiator #f))
    (let ((manager (get-window-manager)))
      (close-popups manager self all?: all? exclude: exclude initiator: initiator)))
  
  
  (method public (force-close-popups self (all?: all? #f) (exclude: exclude #f) (initiator: initiator #f))
    (let ((popups (get-popups)))
      (when (and popups (not (get-passing-through?)))
        (let* ((overlapped (get-overlapped self))
               (owners (get-owners overlapped)))
          (for-each (lambda (popup)
                      (when (and (or all? (not (memq? popup owners)))
                                 (or (not exclude) (not (memq? popup exclude)))
                                 (or (not initiator) (eq? (get-initiator popup) initiator))
                                 (neq? popup (get-locked-popup)))
                        (close-popup popup)))
                    popups)))))
  

  ;;;
  ;;;; Focus
  ;;;
  
  
  (method override (focus-gain self)
    (set-focused-window self)
    (when (and view-focus (in-player? view-focus))
      (parameterize ((activating-window? #t))
        (focus-view self view-focus)
        (focus-delegate view-focus)))
    processed)
  
  
  (method override (focus-lose self)
    (parameterize ((window-losing-focus? #t))
      (unfocus-view self))
    (set-focused-window #f)
    processed)
  
  
  (method override (focus-view self new-focus (process-focus-change? #t))
    (set! view-focus new-focus)
    (call-focus-gained view-focus)
    (let ((host (get-host view-focus)))
      (when host
        (activate-focus host)))
    (when (and process-focus-change? (process-active?))
      (process-focus-change (current-application) view-focus)))
  
  
  (method override (unfocus-view self)
    (when view-focus
      (let ((focus view-focus))
        (let ((container (get-focus-container focus)))
          (when container
            (preserve-focused container focus)))
        (let ((host (get-host focus)))
          (when host
            (deactivate-focus host)))
        (call-focus-lose focus)
        (set! view-focus (focus-master focus))
        (call-focus-lost focus))))
  
  
  (method override (reset-focus self)
    (nextmethod self)
    (when view-focus
      (unfocus-view self)
      (set! view-focus #f)))
  
  
  (method package (push-view-focus self new-focus)
    (when view-focus
      (set! pushed-focuses (cons view-focus pushed-focuses)))
    ;; quick hack to fix correctly
    (unless (is? view-focus Menubar)
      (let ((focus view-focus))
        (when focus
          (call-focus-lose focus))))
    (focus-view self new-focus #f))
  
  
  (method package (pop-view-focus self)
    (when (has-pushed-focuses? self)
      (let ((new-focus (car pushed-focuses)))
        (set! pushed-focuses (cdr pushed-focuses))
        (when view-focus
          (call-focus-lose view-focus))
        (parameterize ((activating-window? #t))
          (focus-view self new-focus #f)))))
  
  
  (method package (pop-view-focuses self popup)
    (let (iterate)
      (let ((focus view-focus))
        (when (and view-focus
                   (eq? (get-player view-focus) popup)
                   (has-pushed-focuses? self))
          (pop-view-focus self)
          (iterate)))))
  
  
  (method package (pop-all-view-focuses self)
    (let (iterate)
      (when (has-pushed-focuses? self)
        (pop-view-focus self)
        (iterate))))
  
  
  (method override (clear-pushed-focuses self)
    (set! pushed-focuses '()))
  
  
  (method package (has-pushed-focuses? self)
    (not-null? pushed-focuses))
  
  
  ;;;
  ;;;; Keyboard
  ;;;
  
  
  (method override (key-press self char)
    (parameterize ((event-type 'keyboard))
      (dispatch-key-press root char))
    processed)
  
  
  ;;;
  ;;;; Descriptor
  ;;;
  
  
  (method meta override (get-class-descriptor self (context: context #f))
    (new jazz.window.descriptors:View-Player-Descriptor))))
