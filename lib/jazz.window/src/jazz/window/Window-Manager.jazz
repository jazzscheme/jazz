;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Window Manager
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.window.Window-Manager jazz


(import (jazz.component)
        (jazz.geometry)
        (jazz.ui)
        (jazz.view)
        (jazz.window))


(class Window-Manager extends Object
  
  
  (method package virtual (popups-border self)
    2)
  
  
  (method package virtual (popup self origin-view <View> view <View> position/location (padding: padding #f) (alternate-position: alternate-position #f) (initiator: initiator #f) (class: class Popup) (border: border #f) (fade-speed: fade-speed #f) (effect: effect #f) (close-behavior: close-behavior #f))
    (let* ((player (get-player origin-view))
           (work-area (get-work-area (current-monitor)))
           (alternate (and alternate-position (to-desktop origin-view alternate-position)))
           (position (to-desktop origin-view position/location))
           (size (+ (get-size view) {Dimension 4 4}))
           (padding (or padding {Dimension 0 0}))
           (border (or border (new Border-View name: 'border border-type: 'raised)))
           (popup (popup player class position: (fit-point position alternate size work-area padding) size: size close-behavior: close-behavior)))
      (set-initiator popup (or initiator origin-view))
      (set-parent border (get-root popup))
      (set-position border {Point 0 0})
      (set-size border (get-size popup))
      (set-guest (get-host border) view)
      (set-parent view border)
      (set-visible? view #t)
      (layout-view border)
      (set-effect (get-root popup) effect)
      (fade-in popup fade-speed: fade-speed)
      popup))
  
  
  (method package virtual (close-popups self player (all?: all? #f) (exclude: exclude #f) (initiator: initiator #f))
    (force-close-popups player all?: all? exclude: exclude initiator: initiator))
  
  
  (method package virtual (close-popup self popup)
    (close popup))))
