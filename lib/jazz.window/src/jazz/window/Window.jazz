;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Window
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;    Assem Hakmeh
;;;    Jeremie Lasalle Ratelle
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.window.Window jazz


(import (jazz.application)
        (jazz.figure)
        (jazz.geometry)
        (jazz.graphic)
        (jazz.locale)
        (jazz.screen)
        (jazz.settings)
        (jazz.ui)
        (jazz.view)
        (jazz.window))


(class Window extends Figure implements Windowable
 

  (property title initialize #f accessors explicit)
  

  (slot handle initialize #f accessors generate)


  ;;;
  ;;;; Initialization
  ;;;


  (method package virtual (opengl? self)
    #f)
  
  
  (method override (initially-visible? self)
    #f)


  (method override (default-parent self)
    (window-default-parent self))


  (method override (prepare self rest)
    (define (setup-handle handle)
      (register-window handle self)
      (set-handle self handle))
    
    (nextmethod self rest)
    (setup-handle (prepare-handle self rest)))
  
  
  (method override (conclude self rest)
    (nextmethod self rest)
    (size-change self 'restored (get-size self)))
  
  
  (method public (open? self)
    (boolean handle))


  (method override (show self)
    (nextmethod self)
    (assert handle)
    (show-window handle)
    (invalidate-offscreen self))


  (method override (hide self)
    (nextmethod self)
    (assert handle)
    (hide-window handle))
  
  
  (method public (minimize self)
    (assert handle)
    (minimize-window handle))
  
  
  (method public (get-state self)
    (assert handle)
    (get-window-state handle))
  
  
  (method public (set-state self state)
    (assert handle)
    (case state
      ((minimized) (minimize-window handle))
      ((maximized) (maximize-window handle))
      ((restored) (restore-window handle))
      (else (error "Unknown window state: {s}" state))))
  
  
  (method public (get-placement self)
    (get-window-placement handle))
  
  
  (method public (set-placement self info)
    (assert handle)
    (set-window-placement handle info))
  
  
  (method public (maximize self)
    (assert handle)
    (show-maximized handle))


  (method override (close self)
    (set-visible? self #f)
    (destroy-component self)
    (destroy-window handle)
    (register-window handle #f)
    (set-handle self #f))

  
  (method override (print self output readably)
    (print-unreadable self output
      (lambda (output)
        (if (not handle)
            (format output "orphaned")
          (let ((position (get-position self))
                (size (get-size self)))
            (if (or (not title) (empty-string? title))
                (format output "{a} {a}" position size)
              (format output "{s} {a} {a}" title position size)))))))
  
  
  (method (invalidate-offscreen self)
    (let ((rect (size-rect (get-size self))))
      (invalidate-offscreen-rect handle rect)))
  
  
  ;;;
  ;;;; Component
  ;;;


  (method override (add-child self child)
    (set! children (cons child children)))
  
  
  (method override (add-form self parent-form child-form)
    (set-parent parent-form child-form))


  ;;;
  ;;;; Unprocessed
  ;;;
  
  
  (method protected virtual (unprocessed-message self)
    unprocessed)


  ;;;
  ;;;; Paint
  ;;;


  (method protected virtual (erase-background self handle)
    (assert handle)
    (platform-erase-background handle))
  

  (method package virtual (paint self region . platform-data)
    (with-platform-painting self platform-data
      (lambda (surface)
        (draw self surface))))
  
  
  ;; quick hack
  (method package virtual (paint-cocoa self context rect)
    )
  
  
  (definition *colors*
    '({Color Dark-Red}
      {Color Dark-Orange}
      {Color Dark-Yellow}
      {Color Dark-Green}
      {Color Dark-Blue}
      {Color Dark-Purple}
      {Color Ochre}))
  
  (definition *nb-colors*
    (length *colors*))
  
  (definition *current-color*
    0)
  

  (method (draw-placeholder self surface)
    (set-color surface (cycle-debug-color!))
    (paint surface))
  

  (method package virtual (draw self surface)
    )


  ;;;
  ;;;; Mouse
  ;;;
  
  
  (method package virtual (mouse-wheel self h v delta)
    unprocessed)

  
  (method package virtual (mouse-down self h v)
    unprocessed)
  
  
  (method protected virtual (mouse-move self h v)
    unprocessed)
  
  
  (method protected virtual (simulate-mouse-move self (pos #f))
    )
  
  
  (method package virtual (call-mouse-moved self x y)
    (if (and manage-captured? cursor-positionable?)
        (mouse-moved self (- x (get-h warp-delta)) (- y (get-v warp-delta)))
      (mouse-moved self x y)))
  
  
  (method package virtual (mouse-moved self x y)
    (mouse-move self (fxround x) (fxround y)))
  
  
  (method package virtual (mouse-up self h v)
    unprocessed)
  
  
  (method package virtual (double-click self h v)
    (mouse-down self h v))
  
  
  (method package virtual (multiple-click self count h v)
    (if (odd? count)
        (mouse-down self h v)
      (double-click self h v)))
  
  
  (method package virtual (middle-mouse-down self h v)
    unprocessed)
  
  
  (method package virtual (middle-mouse-up self h v)
    unprocessed)
  
  
  (method package virtual (right-mouse-down self h v)
    unprocessed)
  
  
  (method package virtual (right-mouse-up self h v)
    unprocessed)
  
  
  (method protected virtual (right-double-click self h v)
    (right-mouse-down self h v))
  
  
  (method package virtual (context-menu self h v)
    unprocessed)


  ;;;
  ;;;; Capture
  ;;;
  
  
  (method override (acquire-capture self)
    (assert handle)
    (set-capture handle))
  
  
  (method override (release-capture self)
    (unset-capture))


  ;;;
  ;;;; Cursor
  ;;;


  (slot cursor-visible?      initialize #t)
  (slot cursor-captured?     initialize #f getter generate)
  (slot cursor-positionable? initialize #t getter generate)
  (slot manage-captured?     initialize #f getter generate)
  (slot manage-preserved     initialize #f getter generate)
  (slot warp-delta           initialize #f getter generate)
  
  
  (method override (get-cursor-visible? self)
    cursor-visible?)
  
  
  (method override (show-cursor self)
    (platform-show-cursor handle)
    (set! cursor-visible? #t))
  
  
  (method override (hide-cursor self)
    (platform-hide-cursor handle)
    (set! cursor-visible? #f))
  
  
  (method public (capture-cursor self)
    (when (and (not cursor-captured?) (get-active? (current-application)))
      (let ((manage? (not (platform-capture-cursor handle))))
        (set! cursor-visible? #f)
        (set! cursor-captured? #t)
        ;; for instance VMware by letting the host OS handle the mouse
        ;; makes it impossible to position the cursor programmatically
        (set! cursor-positionable? (cond-expand
                                     (x11 #f)
                                     (else (find-setting 'jazz.cursor-positionable? #t))))
        (set! manage-captured? manage?)
        (when manage?
          (hide-cursor self)
          (when cursor-positionable?
            (let ((pos (mouse-position self))
                  (center (cursor-center self)))
              (set! manage-preserved pos)
              (set! warp-delta (nu- center pos))
              (set-mouse-position self center)))))))
  
  
  (method (cursor-center self)
    (new Point (fxround/ (get-width self) 2) (fxround/ (get-height self) 2)))
  
  
  (method public (release-cursor self)
    (when cursor-captured?
      (platform-release-cursor handle)
      (when manage-captured?
        (when cursor-positionable?
          (set-mouse-position self manage-preserved))
        (show-cursor self))
      (set! cursor-visible? #t)
      (set! cursor-captured? #f)
      (set! manage-captured? #f)
      (set! manage-preserved #f)
      (set! warp-delta #f)))

  
  (method package virtual (cursor-update self hit)
    (if hit
        processed
      unprocessed))
  
  
  ;;;
  ;;;; Tracking
  ;;;
  
  
  (method override (track-mouse-leave self)
    (platform-track-mouse-leave handle))
  
  
  (method override (cancel-mouse-leave-tracking self)
    (platform-cancel-mouse-leave-tracking handle))


  ;;;
  ;;;; Keyboard
  ;;;
  
  
  (method (system-key-down self)
    (update-cursor)
    processed)
  
  
  (method (system-key-up self)
    (update-cursor)
    processed)
    
  
  (method package virtual (key-down self code)
    (update-cursor)
    unprocessed)
  
  
  (method package virtual (key-up self code)
    (update-cursor)
    unprocessed)
  
  
  (method package (call-key-press self char)
    (unless (invalid-character? char)
      (key-press self char)))


  (method public virtual (key-press self char)
    unprocessed)


  ;;;
  ;;;; Focus
  ;;;
  
  
  (method override (get-focus self)
    self)
  
  
  (method override (set-focus self)
    (platform-set-focus handle))
  
  
  (method package virtual (reset-focus self)
    )


  ;;;
  ;;;; Timer
  ;;;
  
  
  (definition timer-names
    (make-table test: eq?))
  
  (definition timer-ids
    (make-table test: eq?))
  
  (definition timer-id
    0)
  
  
  (method public (register-timer self name elapse proc)
    (define (unique-id)
      (prog1 timer-id
        (increase! timer-id)))
    
    (let ((id (unique-id)))
      (table-set! timer-names name id)
      (table-set! timer-ids id proc)
      (platform-set-timer handle id elapse)))
  
  
  (method public (unregister-timer self name)
    (let ((id (table-ref timer-names name)))
      (platform-kill-timer handle id)
      (table-clear timer-names name)
      (table-clear timer-ids id)))
  
  
  (method protected (timer-pulse self id)
    (let ((proc (table-ref timer-ids id)))
      (proc)))


  ;;;
  ;;;; Handlers
  ;;;
  
  
  (method package virtual (call-position-change self h v)
    (position-change self (new Point h v)))
  
  
  (method package virtual (position-change self position)
    unprocessed)


  (method package virtual (call-size-change self state width height)
    (if (get-installed? self)
        (size-change self state (new Dimension width height))
      unprocessed))


  (method package virtual (size-change self state size)
    unprocessed)
  
  
  (method package virtual (mouse-enter self)
    unprocessed)
  
  
  (method package virtual (mouse-leave self)
    unprocessed)
  
  
  (method package virtual (mouse-activate? self)
    #f)


  (method package virtual (mouse-activate self)
    unprocessed)


  ;; when a toplevel window (including palettes) is activated or deactivated
  (method package virtual (activate self kind)
    (if (eq? kind 'inactive)
        (deactivate-palette self)
      (activate-palette self))
    unprocessed)

  
  (method protected virtual (activate-palette self)
    )
  
  
  (method protected virtual (deactivate-palette self)
    )


  ;; Called when a toplevel window (including palettes)
  ;; is activated by a change of the active application
  (method package virtual (activate-application self)
    unprocessed)


  ;; Called when a toplevel window (including palettes)
  ;; is deactivated by a change of the active application
  (method package virtual (deactivate-application self)
    unprocessed)
  
  
  (method public virtual (close-window self)
    (close self))


  (method override (focus-gain self)
    unprocessed)


  (method override (focus-lose self)
    unprocessed)
  
  
  ;;;
  ;;;; Drop Files
  ;;;
  
  
  (method package (drop-files self wparam)
    (platform-drop-files self wparam))
  
  
  (method package virtual (receive-files self pos files)
    )
  
  
  ;;;
  ;;;; Fade
  ;;;
  
  
  ;; tofix : this will need a complete rethinking for multi-platform...
  ;; should use cairo...
  ;; also the menubar should only fade-in the first menu so that wiggling
  ;; between all the menus is zero delay after the first one popped
  (method public (fade-in self (fade-speed: fade-speed #f))
    @w
    (set-alpha-blending handle 0)
    (set-visible? self #t)
    @w(
    (update-window)
    (let* ((max 255)
           (delay 0.15)
           (now (current-monotonic))
           (start now))
      (while (< now (+ start delay))
        (set-alpha-blending handle (fxceiling (* (- now start) (/ (cast <fl> max) delay))))
        (set! now (current-monotonic)))
      (set-alpha-blending handle max))
    (set-layered? handle #f)))
  
  
  (method public (fade-out self (to: to 0) (step: step 5))
    @need-to-get-layered-attributes
    (let ((alpha))
      (loop (for n from 0 to to by step)
            (set-alpha-blending handle n)
            (set! alpha n))
      (unless (= alpha to)
        (set-alpha-blending handle to))))


  ;;;
  ;;;; Management
  ;;;


  (method public (opened? self)
    (boolean handle))


  (method public (get-external-frame self)
    (if (is? self External-Frame)
        self
      (and parent
           (get-frame parent))))
  
  
  (method override (get-overlapped self)
    (if (is? self Overlapped)
        self
      (get-overlapped parent)))
  

  (method public virtual (get-title self)
    title)
  

  (method public virtual (set-title self value)
    (set! title value)
    (assert handle)
    (platform-set-window-title handle (localize title)))
  

  (method public (get-window-title self)
    (assert handle)
    (platform-get-window-title handle))
  

  (method override (acquire self window <Windowable> shape)
    (assert handle)
    (typecase shape
      ((Point)
       (acquire-point handle (get-handle window) shape))
      ((Rect)
       (acquire-rect handle (get-handle window) shape))
      (else
       (error "Unable to acquire {t}" shape))))
  
  
  (method override (get-position self) <Point>
    (assert handle)
    (platform-get-frame-position handle))
  
  
  (method override (set-position self pos <Point>) <void>
    (assert handle)
    (unless (nu=? pos (get-position self))
      (platform-set-frame-position handle pos)))
  
  
  (method public (move-window self dh <fx> dv <fx>)
    (let ((pos (get-position self)))
      (set-position self (new Point (+ (get-h pos) dh) (+ (get-v pos) dv)))))
  
  
  (method override (get-size self) <Dimension>
    (assert handle)
    (platform-get-content-size handle))
  
  
  (method override (set-size self new-size <Dimension>) <void>
    (assert handle)
    (platform-set-content-size handle new-size))
  
  
  (method public (size-window self dwidth <fx> dheight <fx>)
    (let ((size (get-size self)))
      (set-size self (new Dimension (+ (get-width size) dwidth) (+ (get-height size) dheight)))))
  
  
  (method public (grow-rect self dh dv dwidth dheight)
    (let ((pos (+ (get-position self) (new Point dh dv)))
          (size (+ (get-size self) (new Dimension dwidth dheight))))
      (set-size self size)
      (set-position self pos)))


  (method public (get-width self) <fx>
    (get-width (get-size self)))

  
  (method public (get-height self) <fx>
    (get-height (get-size self)))
  
  
  (method public (get-frame-size self) <Dimension>
    (assert handle)
    (platform-get-frame-size handle))


  (method public (set-frame-size self size)
    (assert handle)
    (platform-set-frame-size handle size))
  

  (method public (get-frame-rect self) <Rect>
    (assert handle)
    (platform-get-frame-rect handle))
  
  
  (method public (set-frame-rect self rect)
    (assert handle)
    (platform-set-frame-rect handle rect))
  

  (method public (get-bounds self) <Rect>
    (assert handle)
    (platform-get-bounds handle))

  
  (method public (ensure-displayed self)
    (let ((outer (if (not parent) (get-size (get-desktop)) (get-size parent)))
          (rect (get-frame-rect self)))
      (receive (new-position new-size) (fit-within outer rect padding: 8)
        (set-size self new-size)
        (set-position self new-position))))


  (cond-expand
    (cocoa
     (method override (mouse-position self) <Point>
       (platform-mouse-position handle)))
    (else
     (method override (mouse-position self) <Point>
       (acquire self (get-desktop) (platform-mouse-position)))))


  (cond-expand
    (cocoa
     (method public (set-mouse-position self pos)
       (platform-set-mouse-position handle (get-h pos) (get-v pos))))
    (else
     (method public (set-mouse-position self pos)
       (let ((pos (acquire (get-desktop) self pos)))
         (platform-set-mouse-position (get-h pos) (get-v pos))))))


  (method public (mouse-window self)
    (find-window self (mouse-position self)))


  (method public (mouse-in-window? self)
    (point-in-window? self (mouse-position self)))


  (method public (point-in-window? self point)
    (let ((size (get-frame-size self)))
      (and (in-interval? (get-h point) 0 (get-width size))
           (in-interval? (get-v point) 0 (get-height size)))))


  (method public (find-window self point)
    (let ((pos (acquire (get-desktop) self point)))
      (registered-window (platform-window-from-point pos))))


  (method public (flash-window self)
    (platform-flash-window handle))


  (method public (move self x y cx cy)
    (assert handle)
    (platform-move-window handle x y cx cy))


  (method public (acquire-focus self)
    (set-window-focus self))
  
  
  (method public (center-window self)
    (let ((screen (primary-screen)))
      ;; until implemented on all platforms
      (when screen
        (set-position self (center-screen screen (get-frame-size self))))))
  
  
  (method public (enter-modal self overlapped)
    (assert handle)
    (platform-enter-modal handle (and overlapped (get-handle overlapped))))
  
  
  (cond-expand
    (cocoa
      (method public (run-modal self done?)
        (assert handle)
        (platform-run-modal handle done?)))
    (else
      (method public (run-modal self done?)
        (process-events done?))))
  
  
  (method public (exit-modal self overlapped)
    (assert handle)
    (platform-exit-modal handle (and overlapped (get-handle overlapped))))
  
  
  (method public (disable-window self)
    (assert handle)
    (platform-disable-window handle))
  
  
  (method public (enable-window self)
    (assert handle)
    (platform-enable-window handle))


  (method public (get-client-rect self)
    (assert handle)
    (platform-get-client-rect handle))


  (method override (scroll-window self delta rect clip-rect)
    (assert handle)
    (if (inhibit-updates?)
        (invalidate-rect self clip-rect)
      (platform-scroll-window handle delta rect clip-rect))
    (let ((proc (debug-flicker)))
      (when proc
        (proc))))

  
  (method override (invalidate-rect self rect)
    (assert handle)
    (platform-invalidate-rect handle rect))

  
  (method override (invalidate-region self region)
    (assert handle)
    (platform-invalidate-region handle region))

  
  (method public (invalidate-window self)
    (assert handle)
    (platform-invalidate-window handle))

  
  (method override (redraw-window self (rect: rect #f) (region: region #f))
    (assert handle)
    (if (inhibit-updates?)
        (cond (rect (invalidate-rect self rect))
              (region (invalidate-region self region))
              (else (invalidate-window self)))
      (if (or rect region)
          (platform-redraw-window handle rect region)
        (platform-redraw-window handle (get-client-rect self) #f))))
  
  
  (method override (redraw-scrollbar self view)
    (platform-redraw-scrollbar view handle))


  (method public (invalidate-border self (insets: insets {Rect 1 1 1 1}))
    (with ((region (border-region self insets: insets)))
      (invalidate-region self region)))


  (method public (redraw-border self (insets: insets {Rect 1 1 1 1}))
    (with ((region (border-region self insets: insets)))
      (redraw-window self region: region)))


  (method public (border-region self (insets: insets {Rect 1 1 1 1}))
    (frame-region (get-client-rect self) insets: insets))


  (method override (update-window self)
    (assert handle)
    (platform-update-window handle))
  
  
  (method public (show-noactivate self)
    (assert handle)
    (platform-show-noactivate handle))
  
  
  (method public (hide-noactivate self)
    (assert handle)
    (platform-hide-noactivate handle))


  ;;;
  ;;;; Children
  ;;;


  (method public (first-window self)
    (let ((windows (get-windows self)))
      (if (null? windows)
          #f
        (first windows))))
  
  
  (method public (get-windows self (include-invisibles?: include-invisibles? #f))
    (collect-if (lambda (child)
                  (and (is? child Window)
                       (or include-invisibles? (get-visible? child))))
                (get-children self)))


  (method public (front-window? self)
    (eq? self (first-window parent)))


  ;;;
  ;;;; Layer
  ;;;
  
  
  (method override (bring-to-front self)
    (nextmethod self)
    (assert handle)
    (platform-bring-window-to-front handle))


  (method override (send-to-back self)
    (nextmethod self)
    (assert handle)
    (platform-send-window-to-back handle))
  
  
  (method public (select-foreground self)
    (platform-select-foreground-window handle))
  

  ;;;
  ;;;; Layout
  ;;;


  (method override (get-location self)
    location)


  (method override (set-location self loc)
    (set! location loc))
  
  
  (method public (layout-window self)
    (layout self))
  
  
  (method public virtual (layout self)
    )
  
  
  ;;;
  ;;;; View
  ;;;
  
  
  (method public (mouse-view self)
    (find-view self (mouse-position self)))
  
  
  (method public (find-view self pos (ignore: ignore #f))
    (let ((window (find-window self pos)))
      (and (is? window Playable)
           (let ((root (get-root window)))
             (and root
                  (find-drawing root (acquire window self pos) ignore: ignore))))))
  
  
  (method public (to-view self shape view)
    (let* ((player (get-player view))
           (acquired (acquire player self shape)))
      (acquire view (get-root player) acquired)))


  ;;;
  ;;;; Debugging
  ;;;
  
  
  (method public virtual (debug-window self pos)
    (unimplemented 'debug-window)
    @Development
    (set-% Development self))


  (method public virtual (describe-window self pos)
    (unimplemented 'describe-window)
    @WINSTYLE(
    (format :console "{%}")
    (format :console "Class:            {s}{%}" (class-of self))
    (format :console "Name:             {s}{%}" (get-name))
    (format :console "Class Background: {s}{%}" (get-class-background))
    (format :console "Clip Children?:   {s}{%}" (mask-bit-set? (get-window-style) WS_CLIPCHILDREN))
    (format :console "Clip Siblings?:   {s}{%}" (mask-bit-set? (get-window-style) WS_CLIPSIBLINGS))
    (format :console "Position:         {s}{%}" (get-position))
    (format :console "Size:             {s}{%}" (get-size))
    (format :console "Window rect:      {s}{%}" (get-bounds))
    (format :console "Client rect:      {s}{%}" (get-client-rect))
    (format :console "Style:            {s}{%}" (bits->names (get-window-style) WINSTYLE))
    (format :console "Extended Style:   {s}{%}" (bits->names (get-window-ex-style) WINEXSTYLE))))))
