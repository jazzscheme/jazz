;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Window Definitions
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module jazz.window jazz


(export (jazz.window.platform.cocoa   (cond cocoa))
        (jazz.window.platform.windows (cond windows))
        (jazz.window.platform.x11     (cond x11))
        (jazz.window.autoload)
        (jazz.window.hubs))

(import (jazz.application)
        (jazz.component)
        (jazz.process)
        (jazz.ui)
        (jazz.debuggee)
        (jazz.geometry)
        (jazz.graphic)
        (jazz.window.platform.cocoa   (cond cocoa))
        (jazz.window.platform.windows (cond windows))
        (jazz.window.platform.x11     (cond x11))
        (jazz.window.hubs))


;;;
;;;; Manager
;;;


(definition window-manager
  #f)

(definition public (get-window-manager)
  window-manager)

(definition public (set-window-manager manager)
  (set! window-manager manager))


;;;
;;;; Desktop
;;;


(definition desktop #f)


(definition Desktop-Surface #f)


(definition public (desktop-surface)
  (unless Desktop-Surface
    (set! Desktop-Surface (new Memory-Surface #f {Dimension 0 0})))
  Desktop-Surface)


(definition public (get-desktop)
  (unless desktop
    (set! desktop (platform-create-desktop)))
  desktop)


;;;
;;;; Monitors
;;;


(definition public (current-monitor)
  (if (and platform-current-monitor (current-toplevel))
      (platform-current-monitor)
    (desktop-monitor)))


(definition public (auxiliary-monitor)
  (let ((current (current-monitor)))
    (or (find-if (lambda (monitor)
                   (not (monitor=? monitor current)))
                 (all-monitors))
        current)))


(definition public (primary-monitor)
  (find-if (lambda (monitor)
             (get-primary? monitor))
           (all-monitors)))


(definition public (secondary-monitor)
  (or (find-if (lambda (monitor)
                 (not (get-primary? monitor)))
               (all-monitors))
      (current-monitor)))


(definition public (find-monitor kind)
  (case kind
    ((current) (current-monitor))
    ((auxiliary) (auxiliary-monitor))
    ((primary) (primary-monitor))
    ((secondary) (secondary-monitor))
    (else (error "Unknown monitor kind: {s}" kind))))


(definition public (all-monitors)
  (if platform-all-monitors
      (platform-all-monitors)
    (list (desktop-monitor))))


(definition public (desktop-monitor)
  (let ((desktop (get-desktop)))
    (let ((area (position/size->rect (get-position desktop) (get-size desktop))))
      (new Monitor #t area area))))


(definition public (monitor-center monitor size)
  (let ((area (get-work-area monitor)))
    (let ((area-position (rect-position area))
          (area-size (rect-size area)))
      (nu+ area-position (center size area-size)))))


(definition public (monitor=? x y)
  (and (eqv? (get-primary? x) (get-primary? y))
       (nu=? (get-display-area x) (get-display-area y))))


;;;
;;;; Activation
;;;


(definition public activating-window?
  (make-parameter #f))


;;;
;;;; Management
;;;


(definition public (select-foreground-window handle)
  (assert handle)
  (platform-select-foreground-window handle))


;;;
;;;; Loop
;;;


(definition public (process-events (done? #f))
  (declare (proper-tail-calls))
  (define (present-event-loop-restart)
    (let ((loop (current-loop)))
      (and loop
           (let ((level (get-level loop)))
             (format "Resume event loop{a}"
                     (if (= level 0)
                         ""
                       (format " {a}" level)))))))
  
  (let ((process (current-process))
        (preserved-pump (message-thread)))
    (let ((pump (process-messages)))
      (set-message-thread pump)
      (setup-process-events process)
      (thread-start-loop pump)
      (thread-start! pump)
      (unwind-protect
          (let (restart-loop)
            (with-restart-catcher 'resume-loop (present-event-loop-restart)
              (lambda ()
                (catch Cancel-Signal
                  (with-exception-debugger (get-exception-debugger)
                    (lambda ()
                      (thread-process-loop process done?))))))
            (unless (and done? (done?))
              (restart-loop)))
        (set-message-thread preserved-pump)
        (thread-stop-loop pump)))))


;;;
;;;; Update
;;;


(definition public (with-locked-update thunk)
  (parameterize ((inhibit-updates? #t)
                 (inhibit-invalidates? #t))
    (thunk)
    (invalidate-window (current-toplevel))))


;;;
;;;; Keyboard
;;;


(definition package Key-Hook
  #f)


(definition public (get-key-hook)
  Key-Hook)


(definition public (set-key-hook hook)
  (set! Key-Hook hook))


;;;
;;;; Mouse
;;;


(definition public (mouse-copy-down? evt)
  (platform-mouse-copy-down? evt))


;;;
;;;; Overlappeds
;;;


(definition Overlappeds
  '())


(definition public (get-overlappeds)
  Overlappeds)

(definition public (set-overlappeds lst)
  (set! Overlappeds lst))


(definition public (register-overlapped overlapped)
  (set-overlappeds (cons overlapped (get-overlappeds))))

(definition public (unregister-overlapped overlapped)
  (set-overlappeds (remove! overlapped (get-overlappeds))))


;;;
;;;; Palettes
;;;


(cond-expand
  (windows
    (definition package (palette-parent)
      (current-toplevel)))
  (else
    (definition package (palette-parent)
      (get-desktop))))


;;;
;;;; Popups
;;;


(definition Passing-Through?
  #f)


(definition public (get-passing-through?)
  Passing-Through?)

(definition public (set-passing-through? flag)
  (set! Passing-Through? flag))


(definition Popups
  '())


(definition public (get-popups)
  Popups)

(definition public (set-popups lst)
  (set! Popups lst))

(definition package (remove-popup popup)
  (set! Popups (remove! popup Popups)))


(definition public (current-popup)
  (and (not-null? Popups)
       (let ((popup (car Popups)))
         (get-root popup))))


;;;
;;;; Frames
;;;


(definition *active-frames*
  '())


(definition public (active-frames)
  *active-frames*)

(definition public (set-active-frames lst)
  (set! *active-frames* lst))


(definition public (register-active-frame frame)
  (set-active-frames (cons frame (active-frames))))

(definition public (unregister-active-frame frame)
  (set-active-frames (remove! frame (active-frames))))
 
 
(definition public (bring-frame-to-front frame)
  (set-active-frames (cons frame (remove! frame (active-frames)))))

(definition public (send-frame-to-back frame)
  (set-active-frames (append (remove! frame (active-frames)) (list frame))))


;;;
;;;; Windows
;;;


(definition public (process-windows (include-invisibles?: include-invisibles? #f))
  (collect-if (lambda (overlapped)
                (or include-invisibles? (get-visible? overlapped)))
              (get-overlappeds)))


;;;
;;;; Window Focus
;;;


(definition public (get-window-focus)
  (let ((focus (platform-get-focus)))
    (and focus
         (let ((window (registered-window focus)))
           ;; can happen during destroy on x11
           (and window
                (get-focus window))))))


(definition public (set-window-focus window)
  (when (neq? window (get-focused-window))
    (when (get-visible? window)
      (set-focus window))))


;; It is critical that this variable be used instead of calling get-window-focus
;; because on X11 the callback to focus-gain is asynchronous and we want to know
;; the window that has actually received and processed the focus-gain event.
(definition *focused-window*
  #f)


(definition public (get-focused-window)
  (and *focused-window* (get-focus *focused-window*)))

(definition public (set-focused-window window)
  (set! *focused-window* (and window (owner-window window))))


;;;
;;;; Debug
;;;


(definition public debug-flicker
  (make-parameter #f)))
