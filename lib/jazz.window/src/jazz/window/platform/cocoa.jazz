;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Cocoa Windows
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Jeremie Lasalle Ratelle.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.window.platform.cocoa jazz


(export (jazz.window.platform.independent))

(import (jazz.action)
        (jazz.application)
        (jazz.cairo)
        (jazz.event)
        (jazz.geometry)
        (jazz.graphic)
        (jazz.io)
        (jazz.platform)
        (jazz.platform.cocoa)
        (jazz.process)
        (jazz.resource)
        (jazz.screen)
        (jazz.syntax (phase syntax))
        (jazz.ui)
        (jazz.version)
        (jazz.window.autoload)
        (jazz.window.hubs)
        (jazz.window.platform.independent))


(definition public unprocessed '(unprocessed))
(definition public processed '(processed))


;; patch around scrollRect being slower in 10.14
;; because views now always allocate a backing store
;; and scrollRect somehow invalidates the whole view
(definition patch-version-10.14-scrollrect?
  (let ((version (platformOperatingSystemVersion)))
    (>= (get-minor version) 14)))


;;;
;;;; Window
;;;


(definition public Windows-Table
  (make-table test: eqv?))


(definition public inline (registered-window hwnd)
  (let ((hwnd (if (foreign? hwnd) (foreign-address hwnd) hwnd)))
    (table-ref Windows-Table hwnd #f)))


(definition public inline (register-window hwnd window)
  (table-set! Windows-Table (foreign-address hwnd) window))


(definition public (platform-get-window-title handle)
  (platformGetWindowTitle handle))


(definition public (platform-set-window-title handle title)
  (platformSetWindowTitle handle title))


(definition package (window-parent window)
  (let ((parent (get-parent window)))
    (if parent
        (get-handle parent)
      #f)))


(definition package (window-default-parent window)
  (typecase window
    ((Popup) (current-toplevel))
    (else #f)))


(generic (window-kind (<Window> window) rest)
  PLATFORM_WINDOW)


(specific (window-kind (<Dialog> window) rest)
  PLATFORM_DIALOG)


(specific (window-kind (<Popup> window) rest)
  PLATFORM_POPUP)


(specific (window-kind (<Desktop> window) rest)
  PLATFORM_DESKTOP)


(generic (window-closable? (<Window> window) rest)
  #t)


(generic (window-miniaturizable? (<Window> window) rest)
  #t)


(generic (window-resizable? (<Window> window) rest)
  #t)


(specific (window-resizable? (<Popup> window) rest)
  #f)


(definition package (prepare-handle window rest)
  (let ((mode (if (request-fullscreen?)
                  PLATFORM_WINDOWED
                PLATFORM_WINDOWED))
        (kind (window-kind window rest))
        (closable? (window-closable? window rest))
        (miniaturizable? (window-miniaturizable? window rest))
        (resizable? (window-resizable? window rest))
        (opengl? (opengl? window)))
    (platformCreateWindow 600 400 mode kind "Jazz" closable? miniaturizable? resizable? opengl? use-retina?)))


(definition (create-window-handle window rest)
  )


(definition package (destroy-window handle)
  (platformCloseWindow handle))


(definition package (close-requested)
  (let ((process (current-process)))
    (if process
        (quit-process process)
      (quit))))


(definition (dispatch-message window msg)
  )


;;;
;;;; Messages
;;;


(definition package (process-messages)
  (define (process)
    (declare (proper-tail-calls))
    (let (loop)
      (let ((time (current-monotonic)))
        (site (message)
          (synchronize-event
            (lambda ()
              (poll-events))))
        (let ((sleep (message-sleep-get))
              (period (message-period-get))
              (duration (- (current-monotonic) time)))
          (sleep period duration)))
      (when (thread-loop? (current-thread))
        (loop))))
  
  (new-thread process 'message))


(definition public (get-ignore-key-repeat?)
  (platformGetIgnoreKeyRepeat))


(definition public (set-ignore-key-repeat? ignore?)
  (platformSetIgnoreKeyRepeat ignore?))


(definition package (show-window handle)
  (platformShowWindow handle)
  (platformSetFocus handle))


(definition package (show-maximized handle)
  (let ((rect (get-content-rect (main-screen))))
    (platform-set-frame-position handle (rect-position rect))
    (platform-set-frame-size handle (rect-size rect))
    (show-window handle)))


(definition package (show-restored handle)
  (show-window handle))


(definition package (hide-window handle)
  (platformHideWindow handle))


(definition package (get-window-state handle)
  'restored)


(definition package (set-window-state handle state)
  )


(definition package (get-window-placement handle)
  (list (get-window-state handle)
        (platform-get-frame-position handle)
        (platform-get-frame-size handle)))


(definition package (set-window-placement handle info)
  ;; temporarely comment out because maximizing the toplevel is done by
  ;; the mac so we can have stale info about the previous window placement
  @wait
  (bind (state position size) info
    (set-window-state handle state)
    (platform-set-frame-position handle position)
    (platform-set-frame-size handle size)))


(definition package (minimize-window handle)
  (platformIconifyWindow handle))


(definition package (maximize-window handle)
  (unimplemented 'maximize-window))


(definition package (restore-window handle)
  (unimplemented 'restore-window))


(definition package (platform-erase-background handle)
  (unimplemented 'platform-erase-background))


;;;
;;;; Shortcuts
;;;


(definition public Symbolic-Keys
  (list->table
    (list
      (cons #\u0100 'Escape)
      (cons #\u0101 'Return)
      (cons #\u0102 'Tab)
      (cons #\u0103 'Backspace)
      (cons #\u0105 'Delete)
      (cons #\u014f 'Return)
      (cons #\u0122 'F1)
      (cons #\u0123 'F2)
      (cons #\u0124 'F3)
      (cons #\u0125 'F4)
      (cons #\u0126 'F5)
      (cons #\u0127 'F6)
      (cons #\u0128 'F7)
      (cons #\u0129 'F8)
      (cons #\u012a 'F9)
      (cons #\u012b 'F10)
      (cons #\u012c 'F11)
      (cons #\u012d 'F12)
      (cons #\u010c 'Home)
      (cons #\u010d 'End)
      (cons #\u0107 'Left)
      (cons #\u0109 'Up)
      (cons #\u0106 'Right)
      (cons #\u0108 'Down)
      (cons #\u010a 'Prior)
      (cons #\u010b 'Next)
      (cons #\esc   'Escape)
      (cons #\space 'Space))))


(definition (translate-shortcut key)
  (let ((appl (current-application)))
    (if (not appl)
        #f
      (let ((symbolic (table-ref Symbolic-Keys key key)))
        (let ((shortcut (new Shortcut (modifiers-keys) symbolic)))
          (dispatch-shortcut appl shortcut))))))


(definition public (symbolic-key->code key)
  (table-find Symbolic-Keys key))


(definition current-mouse-x 0)
(definition current-mouse-y 0)


;;;
;;;; Forward
;;;


(set-registered-window registered-window)
(set-translate-shortcut translate-shortcut)
(set-debug-primordial
  (lambda (msg)
    (send-event
      (lambda ()
        (debug-line msg)))))


;;;
;;;; Toplevel
;;;


(definition (current-toplevel-hwnd)
  (let ((toplevel (current-toplevel)))
    (and toplevel
         (get-handle toplevel))))


;;;
;;;; Monitors
;;;


(definition public platform-current-monitor
  #f)


(definition public platform-all-monitors
  #f)


;;;
;;;; Capture
;;;


(definition public (set-capture handle)
  #f)


(definition public (unset-capture)
  #f)


(definition package (with-platform-painting window platform-data proc)
  (let* ((context (car platform-data))
         (surface (new Surface (cairo_quartz_surface_create_for_cg_context context (get-width window) (get-height window)))))
    (unwind-protect
        (proc surface)
      (close surface))))


(definition public (with-window-surface window proc)
  (unimplemented 'with-window-surface)
  @wait
  (let* ((screen-no (XDefaultScreen x11-default-display))
         (visual    (XDefaultVisual x11-default-display screen-no)))
    (cairo_xlib_surface_create x11-default-display (get-handle window) visual (get-width window) (get-height window))))


(definition (set-alpha-blending handle n)
  ;; todo
  #f)


;;;
;;;; Timer
;;;


;; todo
(definition public (platform-set-timer handle id elapse)
  )


;; todo
(definition public (platform-kill-timer handle id)
  )


;;;
;;;; Tracking
;;;


(definition public (platform-track-mouse-leave handle)
  )


(definition public (platform-cancel-mouse-leave-tracking handle)
  )


;;;
;;;; Layout
;;;


(definition public (acquire-point to-handle from-handle shape)
  (let ((delta (nu- (platform-get-content-position from-handle) (platform-get-content-position to-handle))))
    (nu+ shape delta)))


(definition public (acquire-rect to-handle from-handle shape)
  (let ((left-top (acquire-point to-handle from-handle (new Point (get-left shape) (get-top shape))))
        (right-bottom (acquire-point to-handle from-handle (new Point (get-right shape) (get-bottom shape)))))
    (corners->rect left-top right-bottom)))


(definition (window-cartesian->pos screen-height rect-height pt)
  (let ((bottom (NSPoint-y-ref pt)))
    (let ((top (+ bottom rect-height)))
      (new Point
        (fxround (NSPoint-x-ref pt))
        (fxround (- screen-height top))))))


(definition (window-pos->cartesian screen-height rect-height pos)
  (let ((top (get-v pos)))
    (let ((bottom (+ top rect-height)))
      (new-NSPoint
        (fl (get-h pos))
        (- screen-height (fl bottom))))))


(definition (window-cartesian->rect handle rect)
  (let ((height (platformGetWindowScreenFrameHeight handle))
        (origin (NSRect-origin-ref rect))
        (size (NSRect-size-ref rect)))
    (let ((x (NSPoint-x-ref origin))
          (y (NSPoint-y-ref origin)))
      (let ((bottom (NSPoint-y-ref origin)))
        (let ((top (+ bottom (NSSize-height-ref size))))
          (new Rect
            (fxround x)
            (fxround (- height top))
            (fxround (+ x (NSSize-width-ref size)))
            (fxround (- height bottom))))))))


(definition (window-rect->cartesian handle rect)
  (let ((height (platformGetWindowScreenFrameHeight handle))
        (l (get-left rect))
        (t (get-top rect))
        (r (get-right rect))
        (b (get-bottom rect)))
    (new-NSRect (cast <fl> l)
                (cast <fl> (- height b))
                (cast <fl> (- r l))
                (cast <fl> (- b t)))))


(definition package (platform-get-frame-position handle)
  (with-NSPoint #f
    (lambda (pos)
      (platformGetWindowFramePos handle pos)
      (window-cartesian->pos (platformGetWindowScreenFrameHeight handle) (platformGetWindowFrameHeight handle) pos))))


(definition package (platform-set-frame-position handle pos)
  (with-NSPoint (window-pos->cartesian (platformGetWindowScreenFrameHeight handle) (platformGetWindowFrameHeight handle) pos)
    (lambda (pos)
      (platformSetWindowFramePos handle pos))))


(definition package (platform-get-frame-size handle)
  (with-NSSize #f
    (lambda (size)
      (platformGetWindowFrameSize handle size)
      (NSSize->dimension size))))


(definition package (platform-set-frame-size handle size)
  (let ((rect (platform-get-frame-rect handle)))
    (set-right rect (+ (get-left rect) (get-width size)))
    (set-bottom rect (+ (get-top rect) (get-height size)))
    (platform-set-frame-rect handle rect)))


(definition package (platform-get-frame-rect handle)
  (with-NSRect #f
    (lambda (rect)
      (platformGetWindowFrameRect handle rect)
      (window-cartesian->rect handle rect))))


(definition package (platform-set-frame-rect handle rect)
  (with-NSRect (window-rect->cartesian handle rect)
    (lambda (rect)
      (platformSetWindowFrameRect handle rect))))


(definition package (platform-get-content-position handle)
  (with-NSPoint #f
    (lambda (pos)
      (platformGetWindowContentPos handle pos)
      (window-cartesian->pos (platformGetWindowScreenFrameHeight handle) (platformGetWindowContentHeight handle) pos))))


(definition package (platform-get-content-size handle)
  (with-NSSize #f
    (lambda (size)
      (platformGetWindowContentSize handle size)
      (NSSize->dimension size))))


(definition package (platform-set-content-size handle size)
  (let ((rect (platform-get-content-rect handle)))
    (set-right rect (+ (get-left rect) (get-width size)))
    (set-bottom rect (+ (get-top rect) (get-height size)))
    (platform-set-content-rect handle rect)))


(definition package (platform-get-content-rect handle)
  (with-NSRect #f
    (lambda (rect)
      (platformGetWindowContentRect handle rect)
      (window-cartesian->rect handle rect))))


(definition package (platform-set-content-rect handle rect)
  (with-NSRect (window-rect->cartesian handle rect)
    (lambda (rect)
      (platformSetWindowContentRect handle rect))))


(definition package (platform-get-bounds handle)
  (with-NSRect #f
    (lambda (rect)
      (platformGetWindowViewRect handle rect)
      (NSRect->rect rect))))


(definition package (platform-mouse-position handle)
  (with-NSPoint #f
    (lambda (pos)
      (platformGetMousePosition handle pos)
      (NSPoint->point pos))))


(definition package (platform-set-mouse-position handle x y)
  (with-NSPoint (new Point x y)
    (lambda (pos)
      (platformSetMousePosition handle pos))))


(definition package (platform-window-from-point point)
  ;; quick hack
  (current-toplevel-hwnd))


(definition package (platform-move-window handle x y cx cy)
  (unimplemented 'platform-move-window))


(definition package (platform-enter-modal handle overlapped)
  (when overlapped
    (mouse-leave (registered-window overlapped))
    (platform-disable-window overlapped))
  (platformEnterModal handle))


(definition package (platform-run-modal handle done?)
  (declare (proper-tail-calls))
  (let (loop)
    (when (and (platformRunModal handle) (not (done?)))
      (jazz-heartbeat)
      (sleep .01)
      (loop))))


(definition package (platform-exit-modal handle overlapped)
  (when overlapped
    (platform-enable-window overlapped)
    (mouse-enter (registered-window overlapped))
    (simulate-mouse-move (registered-window overlapped)))
  (platformExitModal handle))


(definition package (platform-disable-window handle)
  (platformDisableWindow handle))


(definition package (platform-enable-window handle)
  (platformEnableWindow handle))


(definition package (platform-get-client-rect handle)
  (let ((size (platform-get-content-size handle)))
    (new Rect 0 0 (get-width size) (get-height size))))


(definition package (platform-scroll-window handle delta rect clip-rect)
  (if patch-version-10.14-scrollrect?
      (platform-invalidate-rect handle clip-rect)
    (invalidate-offscreen-rect handle rect)
    (let* ((dh (get-x delta))
           (dv (get-y delta))
           (rect (rect-intersection rect clip-rect))
           (dst-rect (offset-rect rect dh dv))
           (modified-rect (rect-intersection (rect-union rect dst-rect) clip-rect)))
      ;; scroll rect
      (let ((rect (offset-rect (rect-intersection dst-rect rect) (- dh) (- dv))))
        (with-NSRect rect
          (lambda (rect)
            (with-NSSize (distance->dimension delta)
              (lambda (delta)
                (platformScrollRect handle rect delta))))))
      ;; invalidate rects
      (let ((ml (get-left modified-rect))
            (mt (get-top modified-rect))
            (mr (get-right modified-rect))
            (mb (get-bottom modified-rect)))
        (when (< dh 0)
          (platform-invalidate-rect handle (new Rect (+ mr dh) mt mr mb)))
        (when (< dv 0)
          (platform-invalidate-rect handle (new Rect ml (+ mb dv) mr mb)))
        (when (> dh 0)
          (platform-invalidate-rect handle (new Rect ml mt (+ ml dh) mb)))
        (when (> dv 0)
          (platform-invalidate-rect handle (new Rect ml mt mr (+ mt dv)))))
      ;; update window
      (platform-update-window handle))))


(definition package (platform-invalidate-rect handle rect)
  (invalidate-offscreen-rect handle rect)
  (with-NSRect rect
    (lambda (rect)
      (platformInvalidateRect handle rect))))


(definition package (platform-invalidate-region handle region)
  (iterate-rectangles region
    (lambda (rect)
      (platform-invalidate-rect handle rect))))


(definition package (platform-invalidate-window handle)
  (let ((rect (size-rect (platform-get-content-size handle))))
    (platform-invalidate-rect handle rect)))


(definition package (platform-redraw-window handle rect region)
  (cond (rect (platform-invalidate-rect handle rect))
        (region (platform-invalidate-region handle region)))
  (platform-update-window handle))


(definition package (platform-get-update-rect handle)
  (unimplemented 'platform-get-update-rect))


(definition package (platform-get-update-region handle)
  (unimplemented 'platform-get-update-region))


(definition package (platform-redraw-scrollbar view handle)
  (let ((rct (acquire (get-root view) view (get-bounds view))))
    ;; clear any invalidations
    (platform-update-window handle)
    ;; going through the offscreen to redraw the
    ;; scrollbar is extremely costly on retina display
    (parameterize ((inhibit-offscreen? #t))
      (platform-invalidate-rect handle rct)
      (platform-update-window handle))))


(definition package (platform-update-window handle)
  (if (inhibit-updates?)
      (platform-invalidate-window handle)
    (platformDisplayIfNeeded handle)))


(definition package (platform-show-noactivate handle)
  (show-window handle))


(definition package (platform-hide-noactivate handle)
  (hide-window handle))


(definition package (platform-bring-window-to-front handle)
  (platformBringWindowToFront handle))


(definition package (platform-send-window-to-back handle)
  (platformSendWindowToBack handle))


(definition package (platform-select-foreground-window handle)
  )


(definition package (platform-flash-window handle)
  )


;;;
;;;; Focus
;;;


(definition package (platform-get-focus)
  (platformGetFocus))


(definition package (platform-set-focus handle)
  (platformSetFocus handle))


;;;
;;;; Mouse
;;;


(definition package (platform-mouse-copy-down? evt)
  (or (get-alt? evt) (get-meta? evt)))


;;;
;;;; Cursor
;;;


(definition public Current-Cursor
  #f)

(definition public Cursor-Cache
  (make-table test: eqv?))


(definition public Cursors
  (list
    (list :arrow               PLATFORM_ARROWCURSOR)
    (list :wait                PLATFORM_ARROWCURSOR)
    (list :ibeam               PLATFORM_IBEAMCURSOR)
    (list :cross               PLATFORM_CROSSHAIRCURSOR)
    (list :finger              PLATFORM_POINTINGHANDCURSOR)
    (list :all                 PLATFORM_CROSSHAIRCURSOR)
    (list :west-east           PLATFORM_ARROWCURSOR)
    (list :no                  (cons {Cursor-Resource "no"} {Point 5 5}))
    (list :move                (cons {Cursor-Resource "move"} {Point 5 5}))
    (list :opened-hand         PLATFORM_OPENHANDCURSOR)
    (list :closed-hand         PLATFORM_CLOSEDHANDCURSOR)
    (list :zoom                PLATFORM_ARROWCURSOR)
    (list :zoom-in             PLATFORM_ARROWCURSOR)
    (list :zoom-out            PLATFORM_ARROWCURSOR)
    (list :spy                 PLATFORM_ARROWCURSOR)
    (list :left-arrow          PLATFORM_ARROWCURSOR)
    (list :vertical-splitter   PLATFORM_RESIZELEFTRIGHTCURSOR)
    (list :horizontal-splitter PLATFORM_RESIZEUPDOWNCURSOR)))


(definition (load-cursor name)
  (define (load id/resource)
    (if (number? id/resource)
        (platformGetSystemCursor id/resource)
      (bind (resource . hotspot) id/resource
        (let ((path (parse (get-resource (current-application) 'cursor (get-name resource)))))
          (with-NSPoint hotspot
            (lambda (pos)
              (platformMakeCursor path pos)))))))
  
  (or (table-ref Cursor-Cache name #f)
      (let ((cursor (load (get-named-cursor name))))
        (table-set! Cursor-Cache name cursor)
        cursor)))


(definition (get-named-cursor name)
  (let ((info (assq name Cursors)))
    (if info
        (cadr info)
      (error "Unknown cursor: {t}" name))))


(definition public (get-cursor)
  Current-Cursor)


(definition public (set-cursor name)
  (let ((name (or name :arrow)))
    (unless #f @to-fix-this-doesnt-work-when-switching-overlapped-windows! (= name Current-Cursor)
      (set! Current-Cursor name)
      (platformSetCursor (load-cursor name)))))


(definition public (platform-show-cursor handle)
  (platformShowCursor handle))


(definition public (platform-hide-cursor handle)
  (platformHideCursor handle))


(definition public (platform-capture-cursor handle)
  (platformCaptureCursor handle)
  #t)


(definition public (platform-release-cursor handle)
  (platformReleaseCursor handle))


;;;
;;;; Desktop
;;;


(definition package (platform-create-desktop)
  (let ((screen (primary-screen))
        (desktop (new Desktop)))
    (platform-set-frame-rect (get-handle desktop) (get-frame-rect screen))
    desktop))


(definition package (platform-get-desktop)
  (unimplemented 'platform-get-desktop))


;;;
;;;; Drag and Drop
;;;


(definition package (platform-drop-files window filenames)
  (define (received-files)
    (map (lambda (id)
           (let ((filename (id->string id)))
             (let ((pathname (new (case (pathname-type filename) ((directory) Directory) (else File)) (tokenise-filename filename))))
               (anchorize pathname))))
         (nsarray->list filenames)))
  
  (let ((pos {Point 0 0}) ;; quicky
        (files (received-files)))
    (receive-files window pos files))))
