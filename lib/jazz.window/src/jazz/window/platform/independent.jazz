;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Platform-independent Window Definitions
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;    Jeremie Lasalle Ratelle
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.window.platform.independent jazz


(import (jazz.graphic)
        (jazz.snapshot))


;;;
;;;; Fullscreen
;;;


(definition public request-fullscreen?
  (make-parameter #f))


;;;
;;;; Offscreen
;;;


(definition protected offscreen-invalid-regions
  (make-table test: eq? weak-keys: #t))


(definition public (get-offscreen-invalid-region handle)
  (or (table-ref offscreen-invalid-regions handle #f)
      (let ((region (new Region)))
        (table-set! offscreen-invalid-regions handle region)
        region)))


(definition public (offscreen-region-invalid? handle)
  (not (empty? (get-offscreen-invalid-region handle))))


(definition public (invalidate-offscreen-region handle region)
  (let ((actual (get-offscreen-invalid-region handle)))
    (combine-or! actual region)))


(definition public (invalidate-offscreen-rect handle rect)
  (let ((actual (get-offscreen-invalid-region handle)))
    (with ((region (new Region rect: rect)))
      (combine-or! actual region))))


(definition public (validate-offscreen-region handle region)
  (let ((actual (get-offscreen-invalid-region handle)))
    (combine-diff! actual region)))


(definition public (validate-offscreen handle)
  (let ((actual (get-offscreen-invalid-region handle)))
    (empty! actual)))


;;;
;;;; Event Capture
;;;


(definition *previous-event-continuations*
  '())


(definition *capture-previous-event-continuations?*
  #f)


(definition public (get-previous-event-continuations)
  *previous-event-continuations*)


(definition public (set-capture-previous-event-continuations state)
  (set! *previous-event-continuations* state))


(definition public (capture-event-continuation)
  (when (null? *previous-event-continuations*)
    (register-snapshot-continuations get-previous-event-continuations))
  (when (> (length *previous-event-continuations*) 4)
    (set! *previous-event-continuations* (butlast *previous-event-continuations*)))
  (continuation-capture
    (lambda (cont)
      (set! *previous-event-continuations* (cons cont *previous-event-continuations*)))))


;;;
;;;; Message
;;;


(definition *message-thread*
  #f)


(definition public (message-thread)
  *message-thread*)

(definition package (set-message-thread thread)
  (set! *message-thread* thread))


(definition message-period <fl>
  .01)

(definition public (message-period-get)
  message-period)

(definition public (message-period-set! period)
  (set! message-period period))


(definition message-sleep
  (lambda (period duration)
    (sleep period)))

(definition public (message-sleep-get)
  message-sleep)

(definition public (message-sleep-set! sleep)
  (set! message-sleep sleep))


;;;
;;;; Monitor
;;;


(class Monitor extends Object
  
  
  (slot primary?     getter generate)
  (slot display-area getter generate)
  (slot work-area    getter generate)
  
  
  (method override (initialize self primary? display-area work-area)
    (nextmethod self)
    (set! self.primary? primary?)
    (set! self.display-area display-area)
    (set! self.work-area work-area))
  
  
  (method override (print self output readably)
    (print-unreadable self output
      (lambda (output)
        (format output "{?:primary ~}{s}" primary? display-area))))))
