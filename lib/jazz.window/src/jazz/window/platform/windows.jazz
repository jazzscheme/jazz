;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Windows Windows
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;    Assem Hakmeh
;;;    Jeremie Lasalle Ratelle
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.window.platform.windows jazz


(export (jazz.window.platform.independent))

(import (jazz.action)
        (jazz.application)
        (jazz.cairo)
        (jazz.debuggee)
        (jazz.event)
        (jazz.foreign)
        (jazz.geometry)
        (jazz.graphic)
        (jazz.io)
        (jazz.platform)
        (jazz.process)
        (jazz.resource)
        (jazz.screen)
        (jazz.snapshot)
        (jazz.syntax (phase syntax))
        (jazz.ui)
        (jazz.window.autoload)
        (jazz.window.platform.independent))


;;;
;;;; Processed
;;;


(definition public unprocessed '(unprocessed))
(definition public processed '(processed))


(definition (processed-result return)
  (if (and (pair? return) (eq? (car return) 'processed))
      (if (null? (cdr return))
          0
        (cadr return))
    0))


;;;
;;;; Window
;;;


(definition public Windows-Table
  (make-table test: eqv?))


(definition public inline (registered-window hwnd)
  (let ((hwnd (if (foreign? hwnd) (foreign-address hwnd) hwnd)))
    (table-ref Windows-Table hwnd #f)))


(definition public inline (register-window hwnd window)
  (if window
      (table-set! Windows-Table (foreign-address hwnd) window)
    (table-clear Windows-Table (foreign-address hwnd))))


;; So that the window<->hwnd association can be made on the very first windows message
(definition in-creation #f)


(definition (set-in-creation in)
  (set! in-creation in))


(definition (get-in-creation)
  in-creation)


(generic (window-class (<Window> window))
  CLASS_ATOM)


(definition package (class-style)
  (bitwise-ior CS_DBLCLKS))


(definition package (class-background)
  (GetSysColorBrush COLOR_BTNFACE))


(definition package (get-class-background handle)
  (GetClassLong handle GCL_HBRBACKGROUND))


(definition package CLASS_ATOM
  #f)


(definition (register-window-class)
  (let ((instance (process-instance))
        (background (class-background))
        (wc (WNDCLASSEX-make)))
    (WNDCLASSEX-cbSize-set! wc         (WNDCLASSEX-sizeof))
    (WNDCLASSEX-style-set! wc          (class-style))
    (WNDCLASSEX-lpfnWndProc-set! wc    call-process-hwnd-message)
    (WNDCLASSEX-cbClsExtra-set! wc     0)
    (WNDCLASSEX-cbWndExtra-set! wc     0)
    (WNDCLASSEX-hInstance-set! wc      instance)
    (WNDCLASSEX-hIcon-set! wc          (load-product-icon 32 32))
    (WNDCLASSEX-hCursor-set! wc        NULL)
    (WNDCLASSEX-hbrBackground-set! wc  background)
    (WNDCLASSEX-lpszMenuName-set! wc   NULL)
    (WNDCLASSEX-lpszClassName-set! wc  "JWindow")
    (WNDCLASSEX-hIconSm-set! wc        (load-product-icon 16 16))
    (set! CLASS_ATOM (RegisterClassEx wc))
    (WNDCLASSEX-free wc)))


(definition package (load-product-icon cx cy)
  (LoadImage (process-instance) "app" IMAGE_ICON cx cy LR_SHARED)
  @convert-launch-from-kernel-support!?
  (let ((product (or (jazz-product) 'jazz)))
    (let ((file (string-append kernel-install (format "build/products/{a}/{a}.ico" product product))))
      (if (file-exists? file)
          (LoadImage NULL file IMAGE_ICON cx cy LR_LOADFROMFILE)
        NULL))))


(register-window-class)


(generic (window-style (<Window> window) rest)
  (bitwise-ior WS_CHILD
               WS_CLIPCHILDREN
               WS_CLIPSIBLINGS))


(specific (window-style (<External-Frame> frame) rest)
  (bitwise-ior WS_POPUP
               WS_OVERLAPPEDWINDOW
               WS_SYSMENU
               WS_CLIPCHILDREN
               WS_CLIPSIBLINGS))


(specific (window-style (<Popup> popup) rest)
  (bitwise-ior WS_POPUP
               WS_CLIPCHILDREN))


(specific (window-style (<Internal-Popup> popup) rest)
  (bitwise-ior WS_POPUP
               WS_CLIPCHILDREN))


(specific (window-style (<Palette> palette) rest)
  (bitwise-ior WS_POPUP
               WS_OVERLAPPEDWINDOW
               WS_CLIPCHILDREN))


(specific (window-style (<Toplevel> toplevel) rest)
  (bitwise-ior WS_CLIPSIBLINGS
               WS_CLIPCHILDREN
               WS_POPUP
               WS_OVERLAPPEDWINDOW
               WS_MINIMIZEBOX
               WS_SYSMENU))


(specific (window-style (<Dialog> dialog) rest)
  (bitwise-ior WS_CLIPCHILDREN
               WS_CLIPSIBLINGS
               WS_POPUP
               WS_BORDER
               WS_OVERLAPPED
               WS_CAPTION
               WS_DLGFRAME
               (if (getf rest sizable?: not-found: #t) WS_THICKFRAME 0)
               (if (getf rest closable?: not-found: #t) WS_SYSMENU 0)))


(generic (window-ex-style (<Window> window) rest)
  0)


(specific (window-ex-style (<External-Frame> frame) rest)
  0)


(specific (window-ex-style (<Popup> window) rest)
  WS_EX_TOOLWINDOW)


(specific (window-ex-style (<Internal-Popup> window) rest)
  WS_EX_TOOLWINDOW)


(specific (window-ex-style (<Palette> palette) rest)
  WS_EX_TOOLWINDOW)


(specific (window-ex-style (<Toplevel> toplevel) rest)
  WS_EX_APPWINDOW)


(specific (window-ex-style (<Dialog> dialog) rest)
  WS_EX_DLGMODALFRAME)


(definition package (window-parent window)
  (let ((parent (get-parent window)))
    (if parent
        (get-handle parent)
      NULL)))


(definition package (window-default-parent window)
  (typecase window
    ((Dialog) (current-toplevel))
    (else #f)))


(generic (create-handle (<Window> window) rest)
  (CreateWindowEx
    (window-ex-style window rest)
    CLASS_ATOM
    @temp
    (window-class window)
    NULL
    (window-style window rest)
    0 0 500 500
    (window-parent window)
    NULL
    (process-instance)
    NULL))


(specific (create-handle (<Desktop> desktop) rest)
  (GetDesktopWindow))


(definition package (prepare-handle window rest)
  (bind-keywords ((hwnd #f) . others) rest
    (set-in-creation window)
    (let ((hwnd (create-handle window rest)))
      (if (not hwnd)
          (error "Unable to create window {t} error {t}"
                 (list class: (window-class window) style: (window-style window rest) ex-style: (window-ex-style window rest) parent: (window-parent window))
                 (GetLastError))
        (DragAcceptFiles hwnd #t)
        hwnd))))


(definition package (get-window-state handle)
  (let ((placement (WINDOWPLACEMENT-make)))
    (WINDOWPLACEMENT-length-set! placement (WINDOWPLACEMENT-sizeof))
    (GetWindowPlacement handle placement)
    (prog1 (state-value->symbolic (WINDOWPLACEMENT-showCmd-ref placement))
      (WINDOWPLACEMENT-free placement))))


(definition (state-value->symbolic value)
  (ecase value
    ((SW_SHOWMINIMIZED) 'minimized)
    ((SW_SHOWMAXIMIZED) 'maximized)
    (else 'restored)))


(definition (state-symbolic->value symbol)
  (case symbol
    ((minimized) SW_SHOWMINIMIZED)
    ((maximized) SW_SHOWMAXIMIZED)
    (else SW_SHOWNORMAL)))


(definition package (get-window-placement handle)
  (let ((placement (WINDOWPLACEMENT-make)))
    (WINDOWPLACEMENT-length-set! placement (WINDOWPLACEMENT-sizeof))
    (GetWindowPlacement handle placement)
    (prog1 (let ((state (WINDOWPLACEMENT-showCmd-ref placement))
                 (rect (WINDOWPLACEMENT-rcNormalPosition-ref placement)))
             (let ((left (RECT-left-ref rect))
                   (top (RECT-top-ref rect))
                   (right (RECT-right-ref rect))
                   (bottom (RECT-bottom-ref rect)))
               (list (state-value->symbolic state)
                     (new Point left top)
                     (new Dimension (- right left) (- bottom top)))))
      (WINDOWPLACEMENT-free placement))))


(definition package (set-window-placement handle info)
  (bind (state position size) info
    (let ((placement (WINDOWPLACEMENT-make)))
      (WINDOWPLACEMENT-length-set! placement (WINDOWPLACEMENT-sizeof))
      (WINDOWPLACEMENT-showCmd-set! placement (state-symbolic->value state))
      (let ((rect (WINDOWPLACEMENT-rcNormalPosition-ref placement)))
        (RECT-left-set! rect (get-h position))
        (RECT-top-set! rect (get-v position))
        (RECT-right-set! rect (+ (get-h position) (get-width size)))
        (RECT-bottom-set! rect (+ (get-v position) (get-height size))))
      (SetWindowPlacement handle placement)
      (WINDOWPLACEMENT-free placement))))


(definition package (show-window handle)
  (ShowWindow handle SW_SHOWNORMAL))


(definition package (show-maximized handle)
  (ShowWindow handle SW_MAXIMIZE))


(definition package (show-restored handle)
  (ShowWindow handle SW_RESTORE))


(definition package (hide-window handle)
  (ShowWindow handle SW_HIDE))
 
 
(definition package (minimize-window handle)
  (ShowWindow handle SW_MINIMIZE))


(definition package (maximize-window handle)
  (ShowWindow handle SW_MAXIMIZE))

 
(definition package (restore-window handle)
  (ShowWindow handle SW_RESTORE))


(definition package (destroy-window handle)
  (DestroyWindow handle))


(definition package (close-requested)
  ;; on Windows Vista and upward, the close message must go through to completion
  (delay-event
    (lambda ()
      (let ((process (current-process)))
        (if process
            (quit-process process)
          (quit)))))
  processed)


(definition (dispatch-message window msg <int> wparam <int> lparam <int>)
  (let ((return (process-window-message window msg wparam lparam)))
    (if (eq? return unprocessed)
        (DefWindowProc (get-handle window) msg wparam lparam)
      (processed-result return))))


;;;
;;;; Monitors
;;;


(definition (new-monitor handle)
  (let ((info (MONITORINFO-make)))
    (MONITORINFO-cbSize-set! info (MONITORINFO-sizeof))
    (GetMonitorInfo handle info)
    (prog1 (new Monitor
             (/= (MONITORINFO-dwFlags-ref info) 0)
             (RECT->rect (MONITORINFO-rcMonitor-ref info))
             (RECT->rect (MONITORINFO-rcWork-ref info)))
      (MONITORINFO-free info))))


(definition public platform-current-monitor
  (lambda ()
    (new-monitor (MonitorFromWindow (get-handle (current-toplevel)) 0))))


(definition public platform-all-monitors
  (lambda ()
    (let ((queue (new-queue)))
      (EnumDisplayMonitors #f #f enum-monitors-proc (object->serial queue))
      (map new-monitor (queue-list queue)))))


;;;
;;;; Messages
;;;


(definition package (process-messages)
  (define (process)
    (declare (proper-tail-calls))
    (let ((hwnd (current-toplevel-hwnd))
          (thread (current-thread)))
      (let (loop)
        (let ((time (current-monotonic)))
          (synchronize-event
            (lambda ()
              (poll-messages hwnd translate-shortcut)))
          (let ((sleep (message-sleep-get))
                (period (message-period-get))
                (period-inactive (message-period-inactive-get))
                (duration (- (current-monotonic) time)))
            (sleep (if application-active? period period-inactive) duration)))
        (when (thread-loop? thread)
          (loop)))))
  
  (new-thread process 'message))


(definition public (get-ignore-key-repeat?)
  #f)


(definition public (set-ignore-key-repeat? flag)
  )


;;;
;;;; Callback
;;;


(definition (message-callback hwnd <foreign> msg <int> wparam <int> lparam <int>)
  (declare (proper-tail-calls))
  (let ((window (registered-window hwnd)))
    (when (and (not window) (get-in-creation))
      (set! window (get-in-creation))
      (set-handle window hwnd)
      (register-window hwnd window)
      (set-in-creation #f))
    (if (not window)
        (DefWindowProc hwnd msg wparam lparam)
      (dispatch-message window msg wparam lparam))))


(set-process-hwnd-message message-callback)


;;;
;;;; Shortcuts
;;;


;; - standard usage -
;; ()                     : letters
;; (:shift)               : capital letters
;; (:control)             : mostly for focus
;; (:alt)                 : mostly for focus
;; (:control :alt)        : mostly for platform standards and window selection
;; (:control :shift)      : mostly for window selection
;; (:alt :shift)          : workspace management
;; (:control :alt :shift) : favorite files


(definition public Symbolic-Keys
  (list->table
    (list
      (cons VK_OEM_MINUS  #\-)
      (cons VK_OEM_PLUS   #\+)
      (cons VK_OEM_COMMA  #\,)
      (cons VK_OEM_PERIOD #\.)
      (cons VK_OEM_1      #\;)
      (cons VK_OEM_2      #\/)
      (cons VK_OEM_3      #\~)
      (cons VK_OEM_4      #\[)
      (cons VK_OEM_5      #\\)
      (cons VK_OEM_6      #\])
      (cons VK_OEM_7      #\')
      (cons VK_F1         'F1)
      (cons VK_F2         'F2)
      (cons VK_F3         'F3)
      (cons VK_F4         'F4)
      (cons VK_F5         'F5)
      (cons VK_F6         'F6)
      (cons VK_F7         'F7)
      (cons VK_F8         'F8)
      (cons VK_F9         'F9)
      (cons VK_F10        'F10)
      (cons VK_F11        'F11)
      (cons VK_F12        'F12)
      (cons VK_ESCAPE     'Escape)
      (cons VK_BACK       'Backspace)
      (cons VK_RETURN     'Return)
      (cons VK_SPACE      'Space)
      (cons VK_TAB        'Tab)
      (cons VK_HOME       'Home)
      (cons VK_END        'End)
      (cons VK_LEFT       'Left)
      (cons VK_UP         'Up)
      (cons VK_RIGHT      'Right)
      (cons VK_DOWN       'Down)
      (cons VK_PRIOR      'Prior)
      (cons VK_NEXT       'Next)
      (cons VK_INSERT     'Insert)
      (cons VK_PAUSE      'Pause)
      (cons VK_DELETE     'Delete)
      (cons VK_ADD        'Add)
      (cons VK_SUBTRACT   'Subtract)
      (cons VK_MULTIPLY   'Multiply)
      (cons VK_DIVIDE     'Divide))
    test: eqv?))


(definition (translate-shortcut msg)
  (define (key code)
    (and (/= code VK_SHIFT)
         (/= code VK_CONTROL)
         (/= code VK_MENU)
         (/= code VK_LMENU)
         (or (table-ref Symbolic-Keys code #f)
             (integer->char code))))
  
  (let ((appl (current-application)))
    (if (not appl)
        #f
      (let ((message (MSG-message-ref msg)))
        (if (or (= message WM_KEYDOWN)
                (= message WM_SYSKEYDOWN))
            (let ((key (key (MSG-wParam-ref msg))))
              (if key
                  (dispatch-shortcut appl (new Shortcut (modifiers-keys) key))
                #f))
          #f)))))


(definition public (symbolic-key->code key)
  (table-find Symbolic-Keys key))


;;;
;;;; Messages
;;;


(definition raw-input-vector
  (make-s64vector 2))


(definition (process-window-message window msg <int> wparam <int> lparam <int>)
  (define get-x-lparam signed-loword)
  (define get-y-lparam signed-hiword)
  (define get-wheel-delta-wparam signed-hiword)
  
  (define (convert-state wparam)
    (ecase wparam
      ((SIZE_MINIMIZED) 'minimized)
      ((SIZE_MAXIMIZED) 'maximized)
      (else             'restored)))
  
  (define (wheel-point d)
    (if (shift-down?)
        (new Point d 0)
      (new Point 0 d)))
  
  (ecase msg
    ((WM_ERASEBKGND)      (erase-background window wparam))
    ((WM_PAINT)           (paint window))
    ((WM_SETCURSOR)       (cursor-update window (= (loword lparam) HTCLIENT)))
    ((WM_INPUT)           (fillRawMouseInput lparam raw-input-vector)
                          (let ((dx (s64vector-ref raw-input-vector 0))
                                (dy (s64vector-ref raw-input-vector 1)))
                            (call-mouse-input window dx dy)))
    ((WM_MOUSEMOVE)       (call-mouse-moved window (cast <fl> (device->user (get-x-lparam lparam))) (cast <fl> (device->user (get-y-lparam lparam)))))
    ((WM_MOUSEWHEEL)      (let ((global (new Point (get-x-lparam lparam) (get-y-lparam lparam))))
                            (let ((local (acquire-point (get-handle window) (cache-desktop-window) global)))
                              (mouse-wheel window (device->user (get-h local)) (device->user (get-v local)) (wheel-point (quotient (get-wheel-delta-wparam wparam) 3))))))
    ((WM_LBUTTONDOWN)     (mouse-down window (device->user (get-x-lparam lparam)) (device->user (get-y-lparam lparam))))
    ((WM_LBUTTONUP)       (mouse-up window (device->user (get-x-lparam lparam)) (device->user (get-y-lparam lparam))))
    ((WM_LBUTTONDBLCLK)   (double-click window (device->user (get-x-lparam lparam)) (device->user (get-y-lparam lparam))))
    ((WM_MBUTTONDOWN)     (middle-mouse-down window (device->user (get-x-lparam lparam)) (device->user (get-y-lparam lparam))))
    ((WM_MBUTTONUP)       (middle-mouse-up window (device->user (get-x-lparam lparam)) (device->user (get-y-lparam lparam))))
    ((WM_RBUTTONDOWN)     (right-mouse-down window (device->user (get-x-lparam lparam)) (device->user (get-y-lparam lparam))))
    ((WM_RBUTTONUP)       (right-mouse-up window (device->user (get-x-lparam lparam)) (device->user (get-y-lparam lparam))))
    ((WM_RBUTTONDBLCLK)   (right-double-click window (device->user (get-x-lparam lparam)) (device->user (get-y-lparam lparam))))
    ((WM_CONTEXTMENU)     (let ((pos (acquire-point (get-handle window) (platform-get-desktop) (new Point (get-x-lparam lparam) (get-y-lparam lparam)))))
                            (context-menu window (device->user (get-h pos)) (device->user (get-v pos)))))
    ((WM_SYSKEYDOWN)      (if (= wparam VK_MENU) (system-key-down window) unprocessed))
    ((WM_SYSKEYUP)        (if (= wparam VK_MENU) (system-key-up window) unprocessed))
    ((WM_KEYDOWN)         (key-down window wparam))
    ((WM_KEYUP)           (key-up window wparam))
    ((WM_CHAR)            (call-key-press window (integer->char wparam)))
    ((WM_MOVE)            (call-position-change window (get-x-lparam lparam) (get-y-lparam lparam)))
    ((WM_SIZE)            (call-size-change window (convert-state wparam) (device->user (get-x-lparam lparam)) (device->user (get-y-lparam lparam))))
    ((WM_MOUSELEAVE)      (mouse-leave window))
    ((WM_MOUSEACTIVATE)   (if (mouse-activate? window)
                              (mouse-activate window)
                            (list 'processed MA_NOACTIVATE)))
    ((WM_ACTIVATE)        (let ((active? (/= (loword wparam) WA_INACTIVE)))
                            (let ((kind (if active? 'active 'inactive)))
                              (activate window kind))))
    ((WM_ACTIVATEAPP)     (if (/= wparam 0)
                              (activate-application window)
                            (deactivate-application window)))
    ((WM_GETMINMAXINFO)   (SetWindowMinSize lparam 600 400))
    ((WM_CLOSE)           (close-window window))
    ((WM_SETFOCUS)        (focus-gain window))
    ((WM_KILLFOCUS)       (focus-lose window))
    ((WM_DROPFILES)       (drop-files window wparam))
    ((WM_SETTINGCHANGE)   (settings-change window wparam))
    ((WM_POWERBROADCAST)  (ecase wparam
                            ((PBT_APMSUSPEND)
                             (sleep-process (current-process)))
                            ((PBT_APMRESUMEAUTOMATIC)
                             (wake-process (current-process)))))
    ((WM_TIMER)           (timer-pulse window wparam))
    ((WM_USER)            (user-notification (current-application) wparam lparam))
    (else                 (unprocessed-message window))))


(definition public (set-capture handle)
  (SetCapture handle))


(definition public (unset-capture)
  (ReleaseCapture))


(definition package (with-painting window proc)
  (let ((handle (get-handle window)))
    (let ((ps (PAINTSTRUCT-make)))
      (BeginPaint handle ps)
      (unwind-protect
          (proc)
        (EndPaint handle ps)
        (PAINTSTRUCT-free ps))))
  processed)


(definition (settings-change window wparam)
  (ecase wparam
    ((SPI_SETWORKAREA)
     @not-correct-to-call-set-fullscreen?
     (when (is? window Toplevel)
       (set-fullscreen? window #t)))))


;;;
;;;; Style
;;;


(definition public (get-window-style handle)
  (GetWindowLong handle GWL_STYLE))


(definition public (set-window-style handle style)
  (SetWindowLong handle GWL_STYLE style))


(definition public (get-window-ex-style handle)
  (GetWindowLong handle GWL_EXSTYLE))


(definition public (set-window-ex-style handle style)
  (SetWindowLong handle GWL_EXSTYLE style))


(definition (child-window? handle)
  (mask-bit-set? (get-window-style handle) WS_CHILD))


;;;
;;;; Toplevel
;;;


(definition (current-toplevel-hwnd)
  (let ((toplevel (current-toplevel)))
    (and toplevel
         (get-handle toplevel))))


;;;
;;;; Layers
;;;


(definition (get-layered? handle)
  (mask-bit-set? (get-window-ex-style handle) WS_EX_LAYERED))


(definition (set-layered? handle flag)
  (SetWindowLong handle GWL_EXSTYLE (mask-bit-set (GetWindowLong handle GWL_EXSTYLE) WS_EX_LAYERED flag)))


(definition (set-alpha-blending handle n)
  (set-layered? handle #t)
  (SetLayeredWindowAttributes handle 0 n LWA_ALPHA)
  (RedrawWindow handle NULL NULL (bitwise-ior RDW_ERASE RDW_INVALIDATE)))


;;;
;;;; Timer
;;;


(definition public (platform-set-timer handle id elapse)
  (SetTimer handle id elapse NULL))


(definition public (platform-kill-timer handle id)
  (KillTimer handle id))


;;;
;;;; Tracking
;;;


(definition public (platform-track-mouse-leave handle)
  (track-mouse-event handle TME_LEAVE))


(definition public (platform-cancel-mouse-leave-tracking handle)
  (track-mouse-event handle (bitwise-ior TME_CANCEL TME_LEAVE)))


(definition (track-mouse-event handle flags (time: time HOVER_DEFAULT))
  (let ((rec (TRACKMOUSEEVENT-make)))
    (TRACKMOUSEEVENT-cbSize-set! rec (TRACKMOUSEEVENT-sizeof))
    (TRACKMOUSEEVENT-dwFlags-set! rec flags)
    (TRACKMOUSEEVENT-hwndTrack-set! rec handle)
    (TRACKMOUSEEVENT-dwHoverTime-set! rec time)
    (TrackMouseEvent rec)
    (TRACKMOUSEEVENT-free rec)))


;;;
;;;; Layout
;;;


(definition public (acquire-point to-handle from-handle shape)
  (when (not to-handle)
    (error "No window handle"))
  (let ((acquired (point->POINT shape)))
    (MapWindowPoints from-handle to-handle acquired 1)
    (prog1 (POINT->point acquired)
      (POINT-free acquired))))


(definition public (acquire-rect to-handle from-handle shape)
  (let ((acquired (rect->RECT shape)))
    (MapWindowPoints from-handle to-handle (RECT->POINTS acquired) 2)
    (prog1 (RECT->rect acquired)
      (RECT-free acquired))))


(definition package (platform-get-frame-position handle) <Point>
  (let ((rect (RECT-make)))
    (GetWindowRect handle rect)
    (prog1 (new Point (RECT-left-ref rect) (RECT-top-ref rect))
      (RECT-free rect))))


(definition package (platform-set-frame-position handle pos)
  (SetWindowPos handle NULL (user->device (get-h pos)) (user->device (get-v pos)) 0 0 (bitwise-ior SWP_NOSIZE SWP_NOZORDER SWP_NOACTIVATE)))


(definition package (platform-get-frame-size handle) <Dimension>
  (let ((rect (RECT-make)))
    (GetWindowRect handle rect)
    (prog1 (new Dimension (- (RECT-right-ref rect)  (RECT-left-ref rect))
                          (- (RECT-bottom-ref rect) (RECT-top-ref rect)))
      (RECT-free rect))))


(definition package (platform-set-frame-size handle size)
  (SetWindowPos handle NULL 0 0 (get-width size) (get-height size) (bitwise-ior SWP_NOCOPYBITS SWP_NOMOVE SWP_NOZORDER SWP_NOACTIVATE)))


(definition package (platform-get-frame-rect handle) <Rect>
  (let ((pos (platform-get-frame-position handle))
        (size (platform-get-frame-size handle)))
    (position/size->rect pos size)))


(definition package (platform-set-frame-rect handle rect)
  (SetWindowPos handle NULL (get-left rect) (get-top rect) (rect-width rect) (rect-height rect) (bitwise-ior SWP_NOZORDER SWP_NOACTIVATE)))


(definition package (platform-get-content-rect handle)
  (position/size->rect {Point 0 0} (platform-get-content-size handle)))


(definition package (platform-get-content-size handle) <Dimension>
  (let ((rect (RECT-make)))
    (GetClientRect handle rect)
    (prog1 (device->user (new Dimension (RECT-right-ref rect) (RECT-bottom-ref rect)))
      (RECT-free rect))))


(definition package (platform-get-content-device-size handle) <Dimension>
  (let ((rect (RECT-make)))
    (GetClientRect handle rect)
    (prog1 (new Dimension (RECT-right-ref rect) (RECT-bottom-ref rect))
      (RECT-free rect))))


(definition package (platform-set-content-size handle size)
  (let ((frame-border (nu- (platform-get-frame-size handle) (platform-get-content-device-size handle))))
    (platform-set-frame-size handle (nu+ (user->device size) frame-border))))


(definition package (platform-mouse-position handle) <Point>
  (let ((point (POINT-make)))
    (GetCursorPos point)
    (prog1 (let ((pt (new Point (POINT-x-ref point) (POINT-y-ref point))))
             (device->user (acquire-point handle (platform-get-desktop) pt)))
      (POINT-free point))))


(definition package (platform-set-mouse-position handle point)
  (let ((pt (acquire-point (platform-get-desktop) handle (user->device point))))
    (SetCursorPos (get-h pt) (get-v pt))))


(definition package (platform-window-from-point point)
  (let ((pt (POINT-make)))
    (POINT-x-set! pt (get-h point))
    (POINT-y-set! pt (get-v point))
    (prog1 (WindowFromPoint pt)
      (POINT-free pt))))


(definition package (platform-move-window handle x y cx cy)
  (MoveWindow handle x y cx cy #t))


(definition package (platform-enter-modal handle overlapped)
  (when overlapped
    (platform-disable-window overlapped)))


(definition package (platform-exit-modal handle overlapped)
  (when overlapped
    (platform-enable-window overlapped)))


(definition package (platform-disable-window handle)
  (EnableWindow handle #f))


(definition package (platform-enable-window handle)
  (EnableWindow handle #t))


(definition package (platform-scroll-window handle delta rect clip-rect)
  (invalidate-window-rect handle rect)
  (let ((flags SW_INVALIDATE))
    (let ((rect (rect->RECT rect))
          (clip-rect (rect->RECT clip-rect)))
      (prog1 (ScrollWindowEx handle (get-x delta) (get-y delta) rect clip-rect NULL NULL flags)
        (RECT-free rect)
        (RECT-free clip-rect)))))


(definition (platform-invalidate? handle)
  (let ((window (registered-window handle)))
    (and window (invalidate? window))))


(definition package (platform-invalidate-rect handle rect)
  ;; is this test correct or was it a patch made during the port
  (when handle
    (invalidate-window-rect handle rect)
    (when (platform-invalidate? handle)
      (with-RECT (user->device rect)
        (lambda (rect)
          (InvalidateRect handle rect #f))))))


(definition package (platform-invalidate-region handle region)
  (iterate-rectangles region
    (lambda (rect)
      (platform-invalidate-rect handle rect))))


(definition package (platform-invalidate-window handle)
  ;; is this test correct or was it a patch made during the port
  (when handle
    (let ((rect (size-rect (platform-get-content-size handle))))
      (invalidate-window-rect handle rect))
    (when (platform-invalidate? handle)
      (InvalidateRect handle NULL #f))))


(definition package (platform-redraw-window handle rect region)
  ;; is this test correct or was it a patch made during the port
  (when handle
    (cond (region (invalidate-window-region handle region))
          (rect (invalidate-window-rect handle rect)))
    ;; Changed RDW_NOCHILDREN to RDW_ALLCHILDREN so that a redraw-window on the
    ;; toplevel would redraw it's children. Hope it doesn't break any code...
    (let ((flags (bitwise-ior RDW_ERASENOW RDW_UPDATENOW RDW_INVALIDATE RDW_ALLCHILDREN)))
      (let ((rect (cond (rect (rect->RECT (user->device rect)))
                        (region (rect->RECT (user->device (get-box region))))
                        (else NULL))))
        (prog1 (RedrawWindow handle rect NULL flags)
          (when rect
            (RECT-free rect)))))))


(definition package (platform-update-window handle)
  (if (inhibit-updates?)
      (platform-invalidate-window handle)
    (UpdateWindow handle)))
  
  
(definition package (platform-show-noactivate handle)
  (SetWindowPos handle HWND_TOP 0 0 0 0 (bitwise-ior SWP_SHOWWINDOW SWP_NOACTIVATE SWP_NOMOVE SWP_NOSIZE)))
  
  
(definition package (platform-hide-noactivate handle)
  (SetWindowPos handle 0 0 0 0 0 (bitwise-ior SWP_HIDEWINDOW SWP_NOACTIVATE SWP_NOMOVE SWP_NOSIZE)))


(definition package (platform-bring-window-to-front handle)
  (BringWindowToTop handle))


(definition package (platform-send-window-to-back handle)
  (SetWindowPos handle HWND_BOTTOM 0 0 0 0 (bitwise-ior SWP_NOMOVE SWP_NOSIZE)))


(definition package (platform-select-foreground-window handle)
  (SetForegroundWindow handle))


(definition package (platform-user-attention handle)
  (FlashWindow handle #t))


(definition package (platform-get-window-title handle)
  (let* ((size (+ (GetWindowTextLength handle) 1))
         (buffer (WCHAR-array-make size)))
    (GetWindowText handle buffer size)
    (let ((str (WCHAR-string buffer)))
      (WCHAR-array-free buffer)
      str)))


(definition package (platform-set-window-title handle title)
  (SetWindowText handle title))


;;;
;;;; Focus
;;;


(definition package (platform-get-focus)
  (GetFocus))


(definition package (platform-set-focus handle)
  ;; Note that setting the focus on an inactive is not correct
  ;; An explicit call to BringWindowToTop must be made beforehand
  (SetFocus handle))


;;;
;;;; Mouse
;;;


(definition package (platform-mouse-copy-down? evt)
  (get-alt? evt))


;;;
;;;; Cursor
;;;


;;; We need a platform independent interface for this.

(definition public Current-Cursor
  #f)

(definition public Cursor-Cache
  (make-table test: eqv?))


(definition public Cursors
  (list
    (list :arrow               IDC_ARROW)
    (list :wait                IDC_WAIT)
    (list :ibeam               IDC_IBEAM)
    (list :cross               IDC_CROSS)
    (list :finger              IDC_HAND)
    (list :all                 IDC_SIZEALL)
    (list :west-east           IDC_SIZEWE)
    (list :no                  IDC_NO)
    (list :move                {Cursor-Resource "Move"})
    (list :opened-hand         {Cursor-Resource "OpenedHand"})
    (list :closed-hand         {Cursor-Resource "ClosedHand"})
    (list :zoom                {Cursor-Resource "Zoom"})
    (list :zoom-in             {Cursor-Resource "ZoomIn"})
    (list :zoom-out            {Cursor-Resource "ZoomOut"})
    (list :spy                 {Cursor-Resource "Spy"})
    (list :left-arrow          {Cursor-Resource "LeftArrow"})
    (list :vertical-splitter   {Cursor-Resource "VerticalSplitter"})
    (list :horizontal-splitter {Cursor-Resource "HorizontalSplitter"})))


(definition (load-cursor cursor)
  (define (cursor-name cursor)
    (if (number? cursor)
        cursor
      (get-name cursor)))
  
  (define (load name)
    (if (number? name)
        (LoadCursorInt name)
      (let ((path (parse (get-resource (current-application) 'cursor name))))
        (LoadImage NULL path IMAGE_CURSOR 0 0 LR_LOADFROMFILE))))
  
  (let ((name (cursor-name cursor)))
    (or (table-ref Cursor-Cache name #f)
        (let ((cursor (load name)))
          (table-set! Cursor-Cache name cursor)
          cursor))))


(definition (get-named-cursor name)
  (let ((info (assq name Cursors)))
    (if info
        (cadr info)
      (error "Unknown cursor: {t}" name))))


(definition public (get-cursor)
  Current-Cursor)


(definition public (set-cursor cursor)
  (unless #f @to-fix-this-doesnt-work-when-switching-overlapped-windows! (= cursor Current-Cursor)
          (set! Current-Cursor cursor)
          (let ((cursor (if (symbol? cursor) (get-named-cursor cursor) cursor)))
            (SetCursor (load-cursor cursor)))))


(definition public (platform-show-cursor handle)
  (while (< (ShowCursor #t) 0)
    ))


(definition public (platform-hide-cursor handle)
  (while (>= (ShowCursor #f) 0)
    ))


(definition public (platform-capture-cursor handle)
  (enableRawMouseInput handle))


(definition public (platform-release-cursor handle)
  (disableRawMouseInput handle))


;;;
;;;; Redraw Scrollbar
;;;


(definition package (platform-redraw-scrollbar view hwnd)
  (let ((hrgn (CreateRectRgn 0 0 0 0)))
    ;; preserve the current update region
    (GetUpdateRgn hwnd hrgn #f)
    ;; reset it
    (ValidateRect hwnd NULL)
    ;; redraw the view only
    (jazz.view:redraw-view view)
    ;; reinvalidate the preserved update region
    (InvalidateRgn hwnd hrgn #f)
    (DeleteObject hrgn)))


;;;
;;;; Desktop
;;;


(definition package (platform-create-desktop)
  (new Desktop))


(definition package (platform-get-desktop)
  (cache-desktop-window))


(definition desktop-window
  #f)

(definition (cache-desktop-window)
  (or desktop-window
      (let ((window (GetDesktopWindow)))
        (set! desktop-window window)
        window)))


;;;
;;;; Drop Files
;;;


(definition package (platform-drop-files window wparam)
  (define (received-files hdrop)
    (let ((count (DragQueryFile hdrop #xFFFFFFFF NULL 0)))
      (map (lambda (n)
             (let* ((size MAX_PATH)
                    (buffer (WCHAR-array-make size)))
               (WCHAR-array-set! buffer 0 #\nul)
               (DragQueryFile hdrop n buffer size)
               (let* ((filename (WCHAR-string buffer))
                      (pathname (new (case (pathname-type filename) ((directory) Directory) (else File)) (tokenise-windows filename))))
                 (prog1 (anchorize pathname)
                   (WCHAR-array-free buffer)))))
           (naturals 0 count))))
  
  (let ((hdrop (WPARAM->HDROP wparam)))
    (let ((files (received-files hdrop))
          (pt (POINT-make)))
      (DragQueryPoint hdrop pt)
      (DragFinish hdrop)
      (receive-files window (device->user (POINT->point pt)) files)
      (POINT-free pt)))))
