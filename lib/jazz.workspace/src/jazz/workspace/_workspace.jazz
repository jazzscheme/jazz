;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Workspaces
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module jazz.workspace jazz


(export
  (jazz.workspace.ui (autoload Workspace-Button)))

(import (jazz.application)
        (jazz.command)
        (jazz.debuggee)
        (jazz.document)
        (jazz.feedback)
        (jazz.figure.preferences)
        (jazz.jml)
        (jazz.menu)
        (jazz.preferences)
        (jazz.reference)
        (jazz.resource)
        (jazz.syntax)
        (jazz.text)
        (jazz.ui)
        (jazz.view)
        (jazz.window))


;;;
;;;; Workspaces
;;;


(definition Selected-Workspace
  #f)


(definition public workspace-activation?
  (make-parameter #f))


(definition public (get-workspace-preferences)
  (get-workspace-preferences~ (get-toplevel)))

(definition public (set-workspace-preferences preferences)
  (set-workspace-preferences~ (get-toplevel) preferences))


(definition public (get-workspaces-preferences (error?: error? #t))
  (let ((designer (get-workspaces-designer~ (get-application))))
    (if (not designer)
        (when error?
          (error "Could not find workspaces"))
      (get-reference~ designer))))


(definition public (get-workspaces)
  (get-children~ (get-workspaces-preferences)))


(definition public (find-workspace name)
  (find-component~ (get-workspaces-preferences) name))


(definition public (get-workspace name)
  (or (find-workspace name)
      (error "Unknown workspace: {t}" name)))


(definition public (selected-workspace)
  Selected-Workspace)

(definition public (set-selected-workspace workspace)
  (set! Selected-Workspace workspace))


(definition public (select-workspace name)
  (apply-preferences~ (get-workspace name)))


(definition public (select-current-workspace)
  (apply-preferences~ (get-workspace-preferences)))


(definition public (select-next-workspace)
  (let* ((current (get-workspace-preferences))
         (workspaces (collect-type Workspace-Preferences (get-workspaces)))
         (rank (find workspaces current))
         (next (element workspaces (modulo (+ rank 1) (length workspaces)))))
    (unless (eq? next current)
      (apply-preferences~ next))))


(definition public (select-previous-workspace)
  (let* ((current (get-workspace-preferences))
         (workspaces (collect-type Workspace-Preferences (get-workspaces)))
         (rank (find workspaces current))
         (previous-rank (if (= rank 0) (- (length workspaces) 1) (- rank 1)))
         (previous (element workspaces previous-rank)))
    (unless (eq? previous current)
      (apply-preferences~ previous))))


;;;
;;;; Docked
;;;


(definition public (select-docked class (name: name #f) (workspace: workspace 'home) (focus?: focus? #f))
  (define (select-view view)
    (when view
      (let* ((host (get-host~ view))
             (parent (get-parent~ host)))
        (when (is? parent Pad-View)
          (set-selection~ parent host))
        (ensure-unzoomed (if (is? parent Splitter-View) host parent))
        (when focus?
          (focus-host~ host))
        view)))
  
  (let ((guest (find-docked class)))
    (if guest
        (select-view guest)
      (when workspace
        (apply-preferences~ (get-workspace workspace))
        (select-view (find-docked class))))))


(definition public (find-docked class)
  (continuation-capture
    (lambda (return)
      (for-each-docked
        (lambda (view)
          (when (is? view class)
            (continuation-return return view))))
      #f)))


(definition public (for-each-docked proc)
  (for-each (lambda (window)
              (for-each-docked~ window
                proc))
            (all-windows)))


(definition public (docked-views)
  (let ((docked-views '()))
    (for-each-docked (lambda (view)
                       (set! docked-views (cons view docked-views))))
    docked-views))


(definition public (for-each-splitter view proc)
  (let ((splitter (get-parent~ view))
        (splitter-class Splitter-View))
    (while (is? splitter splitter-class)
      (proc splitter view)
      (set! view splitter)
      (set! splitter (get-parent~ splitter)))))


(definition public (ensure-unzoomed view)
  (for-each-splitter view
    (lambda (splitter view)
      (when (and (eq? (get-state~ splitter) 'zoom)
                 (neq? (get-effective-target~ splitter) view))
        (unzoom~ splitter)))))


;;;
;;;; Stage
;;;


(definition package *stages*
  '())

(definition package *current-stage*
  #f)


(definition public (get-stages)
  *stages*)

(definition public (get-active-stages)
  (collect-if in-player?~ *stages*))


(definition public (first-stage)
  (first (get-active-stages)))

(definition public (last-stage)
  (last (get-active-stages)))


(definition public (current-stage)
  *current-stage*)

(definition public (set-current-stage stage (activate?: activate? #t))
  (unless (eq? stage *current-stage*)
    (let ((previous *current-stage*))
      (set! *current-stage* stage)
      (when stage
        (set! *stages* (cons stage (remove! stage *stages*))))
      (when previous
        (invalidate-border~ (get-border~ previous)))
      (when stage
        (invalidate-border~ (get-border~ stage))
        (stage-activate~ stage))))
  (when activate?
    (activate-current-frame))
  (update-menubar-buttons~ (get-application)))

(definition public (reset-current-stage)
  (set-current-stage #f))


(definition public (create-stage)
  (let ((stage (new-stage~ (get-application))))
    (set! *stages* (cons stage *stages*))
    stage))


(definition public (current-stage-border)
  (let ((stage (current-stage)))
    (when stage
      (get-parent~ stage))))


(definition public (all-frames (include-invisibles?: include-invisibles? #f))
  (append (all-internal-frames include-invisibles?: include-invisibles?)
          (all-external-frames include-invisibles?: include-invisibles?)))


(definition public (all-internal-frames (include-invisibles?: include-invisibles? #f))
  (collect-if (lambda (frame)
                (and (is? frame Internal-Frame-Host)
                     (or include-invisibles? (get-visible?~ frame))))
              (get-frames)))


(definition public (all-external-frames (include-invisibles?: include-invisibles? #f))
  (collect-if (lambda (frame)
                (and (is? frame External-Frame-Host)
                     (or include-invisibles? (get-visible?~ frame))))
              (get-frames)))


(definition public (first-frame)
  (let ((frames (current-stage-frames)))
    (if (null? frames)
        #f
      (first frames))))


(definition public (second-frame)
  (let ((frames (current-stage-frames)))
    (if (>= (length frames) 2)
        (second frames)
      #f)))


(definition public (last-frame)
  (let ((frames (current-stage-frames)))
    (if (null? frames)
        #f
      (last frames))))


(definition public (collect-frames)
  (collect-if (lambda (frame)
                (let ((guest (get-guest~ frame)))
                  (or (is-not? guest Document)
                      (not (get-tool?~ (get-document-controller~ guest))))))
              (all-frames)))


(definition public (find-frame-if-guest pred)
  (find-if pred (all-frames include-invisibles?: #t) key: get-guest~))


(definition public (find-frame-host guest-type)
  (find-if (lambda (view)
             (and (is? view Host-View)
                  (is? (get-guest~ view) guest-type)))
           (all-frames include-invisibles?: #t)))


(definition public (find-frame-guest guest-type)
  (let ((host (find-frame-host guest-type)))
    (when host
      (get-guest~ host))))


;;;
;;;; Frame
;;;


(definition *active-frame*
  #f)


(definition package (active-frame)
  *active-frame*)

(definition package (set-active-frame frame)
  (set! *active-frame* frame))


(definition package (activate-current-frame)
  (let ((front (front-frame))
        (active *active-frame*))
    (when (neq? front active)
      (when active
        (deactivate-frame~ active))
      (if front
          (activate-frame~ front)
        (let ((stage (current-stage)))
          (when stage
            (stage-empty-activate~ stage)))))))


(definition public (front-frame)
  (let ((stage (current-stage)))
    (when stage
      (first-view~ stage))))


(definition public (current-stage-frames)
  (let ((stage (current-stage)))
    (if stage
        (get-views~ stage)
      '())))


(definition public (current-frame)
  (first-frame))


(definition public (current-document)
  (let ((frame (current-frame)))
    (when (is? frame Frame-Host)
      (get-guest~ frame))))


;;;
;;;; New Frame
;;;


(define-setting default-frame-kind
  'internal)


(definition public (new-frame guest/class . rest)
  (bind-keywords ((kind #f) . others) rest
    (case (or kind (default-frame-kind))
      ((internal) (apply new-internal-frame guest/class others))
      ((external) (apply new-external-frame guest/class others)))))


;;;
;;;; Internal Frame
;;;


(definition Internal-Frame-Cascade-Position
  {Point 25 25})


(definition Internal-Frame-Cascade-Step
  {Dimension 22 22})


(definition (collect-frames-positions host guest)
  (let* ((stage (get-stage~ host))
         (maximized? (get-maximized?~ stage)))
    (collect (lambda (frame)
               (and (is? frame Internal-Frame-Host)
                    @for-correct-cascading
                    (eq? (class-of (get-guest~ frame)) (class-of guest))
                    (if maximized?
                        (get-preserved-position~ frame)
                      (get-position~ frame))))
             (get-views~ stage))))


(definition (cascade-frame-position host guest)
  (cascade-position Internal-Frame-Cascade-Position
                    Internal-Frame-Cascade-Step
                    (collect-frames-positions host guest)))


(definition public (new-internal-frame guest/class . rest)
  (let ((guest-class (if (class? guest/class) guest/class (class-of guest/class)))
        (guest (if (class? guest/class) #f guest/class)))
    (bind-keywords ((host-title #f) (host-position (host-position~ guest-class)) (host-size (host-size~ guest-class)) (host-workspace #f) (host-visible? #t) (host-focus? #t) (initialize #f) . others) rest
      (define (determine-stage)
        (let ((stages (get-active-stages)))
          (continuation-capture
            (lambda (return)
              ;; find a tie match
              (for-each (lambda (stage)
                          (let ((guest-model (get-guest-model~ (get-figure-preferences~ stage))))
                            (when (and guest-model (subtype? guest-class (resolve-reference~ guest-model)))
                              (continuation-return return stage))))
                        stages)
              ;; prefer untied stages
              (for-each (lambda (stage)
                          (let ((guest-model (get-guest-model~ (get-figure-preferences~ stage))))
                            (when (not guest-model)
                              (continuation-return return stage))))
                        stages)
              ;; else
              (current-stage)))))
      
      (let ((guest (or guest (new-guest guest-class others))))
        (when initialize
          (initialize guest))
        (let ((host (new Internal-Frame-Host parent: (determine-stage) visible?: #f)))
          (set-title~ host (or host-title (host-title~ guest-class) "Frame"))
          (set-position~ host (or host-position (cascade-frame-position host guest)))
          (set-size~ host (or host-size (nu+ (get-size~ guest) {Dimension 8 28})))
          (when host-workspace
            (set-workspace~ host host-workspace))
          (set-guest~ host guest)
          (when host-visible?
            (ensure-displayed~ host)
            (bring-to-front~ host)
            (set-visible?~ host #t)
            (remember-workspace-stage~ host)
            (when host-focus?
              (focus-host~ host)))
          host)))))


;;;
;;;; Workspace
;;;


(definition public (delete-stage)
  (let ((designer (get-workspaces-designer~ (get-application)))
        (current-stage (current-stage)))
    (let ((stage (get-figure-preferences~ current-stage)))
      (let ((splitter (get-parent~ stage)))
        (if (is-not? splitter Splitter-Preferences)
            (bell)
          (let ((splitter-view (get-parent~ (get-border~ current-stage))))
            (delete-stages designer stage splitter current-stage splitter-view)))))))


(definition public (delete-other-stages)
  (let ((designer (get-workspaces-designer~ (get-application)))
        (current-stage (current-stage)))
    (let ((stage (get-figure-preferences~ current-stage)))
      (let ((splitter (get-parent~ stage)))
        (if (is-not? splitter Splitter-Preferences)
            (bell)
          (receive (preference view) (find-top-stage current-stage)
            (delete-stages designer stage preference current-stage view)))))))


(definition public (find-top-stage stage)
  (define (find-splitter preference view)
    (let ((parent (get-parent~ preference)))
      (if (stage-splitter? parent)
          (find-splitter parent (get-parent~ view))
        (values preference view))))
  
  (let ((preference (get-figure-preferences~ stage)))
    (find-splitter preference (get-border~ stage))))


(definition public (stage-splitter? splitter)
  (and (is? splitter Splitter-Preferences)
       (every? (lambda (pref)
                 (or (is? pref Stage-Preferences)
                     (stage-splitter? pref)))
               (get-children~ splitter))))


(definition (delete-stages designer stage splitter stage-view closed-view)
  (define (only-stages? view)
    (or (is? view Stage-Preferences)
        (and (is? view Splitter-Preferences)
             (every? only-stages? (get-children~ view)))))
  
  (define (move-frames destroyed-stages stage-view)
    (for-each (lambda (stage)
                (for-each (lambda (frame)
                            (if (find-frame-brother stage-view frame)
                                (close~ frame)
                              (set-parent~ frame stage-view)
                              (send-to-back~ frame)))
                          (get-children~ stage)))
              destroyed-stages))
  
  (let ((parent (get-parent~ splitter)))
    (if (or (not (can-relocate-component?~ designer stage parent))
            (not (only-stages? splitter)))
        (bell)
      (set-property~ designer stage 'location (get-location~ splitter))
      (relocate-component~ designer stage parent)
      (remove-child~ designer splitter)
      (let ((border-view (get-border~ stage-view)))
        (let ((parent-view (get-parent~ closed-view))
              (destroyed-stages (remove! stage-view (collect-descendants~ closed-view Stage))))
          (move-frames destroyed-stages stage-view)
          (set-location~ border-view (get-location~ closed-view))
          (set-parent~ border-view parent-view)
          (close~ closed-view)
          (layout-view~ parent-view)))
      (update-window-actions~ (get-application)))))


(definition protected (find-frame-brother stage frame)
  (and (is? frame Host-View)
       (let ((guest (get-guest~ frame)))
         (and (is? guest Text-View)
              (let ((model (get-model~ guest)))
                (find-if (lambda (actual-frame)
                           (and (is? actual-frame Host-View)
                                (let ((actual-guest (get-guest~ actual-frame)))
                                  (and (is? actual-guest Text-View)
                                       (eq? (get-model~ actual-guest) model)))))
                         (get-views~ stage)))))))


(definition public (split-stage-vertically)
  (split-stage 'vert))


(definition public (split-stage-horizontally)
  (split-stage 'horz))


(definition (split-stage direction)
  (let ((designer (get-workspaces-designer~ (get-application)))
        (current-stage (current-stage)))
    (if (not current-stage)
        (bell)
      (let ((stage-preferences (get-figure-preferences~ current-stage))
            (frame (first-view~ current-stage)))
        (let ((parent-preferences (get-parent~ stage-preferences))
              (new-splitter-preferences (new Splitter-Preferences))
              (new-stage-preferences (new Stage-Preferences)))
          (let ((splitter-location (get-location~ stage-preferences))
                (splitter-orientation direction)
                (splitter-mode 'relative)
                (splitter-division 50))
            (when (descendant-owned-by-reference?~ designer stage-preferences)
              (add-child~ designer new-splitter-preferences parent-preferences)
              (relocate-component~ designer stage-preferences new-splitter-preferences)
              (add-child~ designer new-stage-preferences new-splitter-preferences)
              (set-property~ designer new-splitter-preferences 'location splitter-location)
              (set-property~ designer new-splitter-preferences 'orientation splitter-orientation)
              (set-property~ designer new-splitter-preferences 'mode splitter-mode)
              (set-property~ designer new-splitter-preferences 'division splitter-division)
              (set-property~ designer stage-preferences 'location 'first)
              (set-property~ designer new-stage-preferences 'location 'second)
              (set-property~ designer new-stage-preferences 'maximized? (get-maximized?~ stage-preferences)))
            (let ((border (get-border~ current-stage)))
              (let ((parent (get-parent~ border))
                    (splitter (new Splitter-View))
                    (stage (remember-stage~ new-stage-preferences)))
                (set-parent~ border splitter)
                (set-parent~ splitter parent)
                (set-parent~ (get-parent~ stage) splitter)
                (set-location~ splitter splitter-location)
                (set-orientation~ splitter splitter-orientation)
                (set-mode~ splitter splitter-mode)
                (set-division~ splitter splitter-division)
                (set-location~ border 'first)
                (set-location~ (get-parent~ stage) 'second)
                (set-maximized?~ stage (get-maximized?~ current-stage))
                (layout-view~ (get-parent~ splitter))
                (layout-view~ splitter)
                (set-current-stage stage activate?: (not (front-frame)))
                (when (is? frame Host-View)
                  (let ((splitted (split-view~ (get-guest~ frame))))
                    (when splitted
                      (remember-workspace-stage~ splitted))))
                (activate-current-frame)))
            (update-window-actions~ (get-application))))))))


(definition public (move-frame)
  (let ((frame (current-frame)))
    (let ((stage (if frame (get-stage~ frame) (current-stage))))
      (let ((next-stage (navigate-next-stage)))
        (if (not next-stage)
            (bell)
          (when frame
            (set-parent~ frame next-stage)
            (maximize/restore~ frame)
            (remember-workspace-stage~ frame)))))))


(definition public (clone-frame)
  (let ((frame (current-frame)))
    (if (is-not? frame Host-View)
        (bell)
      (let ((stage (get-stage~ frame)))
        (let ((next-stage (navigate-next-stage)))
          (if (not next-stage)
              (bell)
            (let ((brother (find-frame-brother next-stage frame)))
              (if brother
                  (focus-host~ brother)
                (let ((splitted (split-view~ (get-guest~ frame))))
                  (if (not splitted)
                      (bell)
                    (set-parent~ splitted next-stage)
                    (maximize/restore~ splitted)
                    (remember-workspace-stage~ splitted)))))))))))


(definition public (tie-frame-model)
  (let ((frame (current-frame)))
    (if (is-not? frame Host-View)
        (bell)
      (let ((guest (get-guest~ frame))
            (stage (get-figure-preferences~ (current-stage)))
            (designer (get-workspaces-designer~ (get-application))))
        (let ((guest-model (category-name (class-of guest))))
          (set-property~ designer stage 'guest-model (new Reference guest-model))
          (user-message "Stage tied to {s}" guest-model))))))


(definition public (untie-stage)
  (let ((stage (get-figure-preferences~ (current-stage)))
        (designer (get-workspaces-designer~ (get-application))))
    (set-property~ designer stage 'guest-model #f)
    (user-message "Stage untied")))


(definition public (next-stage stage)
  (let ((stages (get-active-stages)))
    (let ((count (length stages)))
      (when (>= count 2)
        (next-element stages stage)))))


(definition public (previous-stage stage)
  (let ((stages (get-active-stages)))
    (let ((count (length stages)))
      (when (>= count 2)
        (previous-element stages stage)))))


(definition public (navigate-next-stage)
  (define (bring-stage-to-front stage)
    (set! *stages* (cons stage (remove! stage *stages*))))
  
  (let ((stages (get-active-stages)))
    (when (>= (length stages) 2)
      (let ((stage (last-stage)))
        (bring-stage-to-front stage)
        (activate-stage stage)
        stage))))


(definition public (navigate-previous-stage)
  (define (send-stage-to-back stage)
    (set! *stages* (append (remove! stage *stages*) (list stage))))
  
  (let ((stages (get-active-stages)))
    (when (>= (length stages) 2)
      (let ((stage (first-stage)))
        (send-stage-to-back stage)
        (let ((stage (first-stage)))
          (activate-stage stage)
          stage)))))


(define (activate-stage stage)
  (let ((frame (first-view~ stage)))
    (if frame
        (focus-host~ frame)
      (acquire-focus~ stage))))


;;;
;;;; Workspaces-Preferences
;;;


(class undocumented Workspaces-Preferences extends Preferences


  (property active       initialize #f  accessors generate)
  (property associations initialize '() accessors generate)
  
  
  (form
    (<install> title: "Workspaces"))
  
  
  ;;;
  ;;;; Descriptor
  ;;;
  
  
  (method meta override (get-class-descriptor (context: context #f))
    (new jazz.workspace.designer:Workspaces-Preferences-Descriptor)))


;;;
;;;; Workspace-Preferences
;;;


(class undocumented Workspace-Preferences extends Figure-Preferences


  (property shortcut    initialize #f accessors generate)
  (property frame-model initialize #f accessors generate)
  (property fullscreen? initialize #f accessors generate)
  
  
  (form
    (<install> icon: {Image-Resource "Workspace"}))

  
  ;;;
  ;;;; Applying
  ;;;
  
  
  (method override (apply-preferences (restore-focus?: restore-focus? #t))
    (without-local-debugger
      (lambda ()
        (with-locked-update
          (lambda ()
            (parameterize ((inhibit-layouts? #t))
              (when (selected-workspace)
                (deactivate~ (selected-workspace)))
              (assert (not (workspace-activation?)))
              (parameterize ((workspace-activation? #t))
                (activate restore-focus?: restore-focus?))))))))
  
  
  ;;;
  ;;;; Activation
  ;;;
  
  
  (method (activate (restore-focus?: restore-focus? #t))
    (define (close-palettes)
      (for-each close~ (collect-palettes)))
    
    (define (process-palettes)
      (for-each (lambda (preferences)
                  (unless (eq? (get-location~ preferences) 'root)
                    (let ((title (get-title~ preferences))
                          (position (get-position~ preferences))
                          (size (get-size~ preferences))
                          (root-preferences (first-child~ preferences))
                          (palette (new Palette close-behavior: 'detach-root visible?: #f)))
                      (apply-root~ root-preferences palette)
                      (when title
                        (set-title~ palette title))
                      (if (and position size)
                          (set-placement~ palette (list 'restored position size))
                        (maximize~ palette))
                      (set-visible?~ palette #t))))
                children))
    
    (define (collect-visibilities)
      (let ((frames (all-internal-frames include-invisibles?: #t)))
        (reverse!
          (collect (lambda (frame)
                     (let ((visible? (get-visible?~ frame))
                           (guest (get-guest~ frame)))
                       (when guest
                         (let ((workspaces (effective-host-workspaces~ guest)))
                           (cons frame
                                 (or (memq? name workspaces)
                                     (and (null? workspaces) visible?)))))))
                   frames))))
    
    (define (hide-frames visibilities)
      (for-each (lambda (info)
                  (bind (frame . visible?) info
                    (when (not visible?)
                      (set-visible?~ frame #f))))
                visibilities))
    
    (define (show-frames visibilities)
      (let ((active-stages (get-active-stages))
            (current #f))
        (for-each (lambda (info)
                    (bind (frame . visible?) info
                      (when visible?
                        (let ((preferred (intersection active-stages (get-workspace-stages~ frame))))
                          (if (not-null? preferred)
                              (set-parent~ frame (car preferred))
                            (let ((stage (current-stage)))
                              (set-parent~ frame stage)
                              (remember-workspace-stage~ frame))))
                        (if (get-visible?~ frame)
                            (maximize/restore~ frame)
                          (set-visible?~ frame #t))
                        @wait-bug-fix-on-x11
                        (unless maximized?
                          (ensure-displayed~ frame))
                        (set! current frame))))
                  visibilities)
        current))
    
    (define (process-activation)
      (let ((frames (all-internal-frames)))
        (if (null? frames)
            (let ((stage (current-stage)))
              (when stage
                (stage-empty-activate~ stage)))
          (for-each-docked
            client-activate~))))
    
    (define (focus-stage)
      (let ((stage (current-stage)))
        (when stage
          (let ((frame (first-view~ stage)))
            (if frame
                (focus-host~ frame)
              (acquire-focus~ stage))))))
    
    (let ((appl (get-application))
          (toplevel (get-toplevel))
          (visibilities (collect-visibilities))
          (focus (get-focus))
          (stage (current-stage)))
      (close-palettes)
      (full-screen-stage~ appl #f)
      (hide-frames visibilities)
      (reset-current-stage)
      (let ((root-preferences (find-located 'root)))
        (when root-preferences
          (let ((previous-root (get-root~ toplevel)))
            (when previous-root
              (set-offscreen?~ previous-root #f)))
          (apply-root~ root-preferences toplevel)))
      (process-palettes)
      (set-workspace-preferences self)
      (set-selected-workspace self)
      (update-status)
      (full-screen-stage~ appl fullscreen?)
      (if (and position size)
          (set-placement~ toplevel (list 'restored position size))
        (when (get-visible?~ toplevel)
          (restore-state~ toplevel)))
      (let ((current-frame (show-frames visibilities)))
        (update-windowing-actions~ appl)
        (update-menubar-buttons~ appl)
        (process-application-event~ appl 'workspace 'activate self workspace: self)
        (process-activation)
        (when (and stage (in-player?~ stage))
          (set-current-stage stage))
        (if (and restore-focus? focus (in-player?~ focus))
            (acquire-focus~ focus)
          (if (and current-frame (is? current-frame Focus-Container))
              (focus-host~ current-frame)
            (focus-stage))))
      (verify-reloads~ appl)))
  
  
  (method (deactivate)
    (process-application-event~ (get-application) 'workspace 'deactivate self workspace: self))
  
  
  (method public (update-status)
    (let* ((appl (get-application))
           (status (find-status-bar~ appl))
           (label (and status (find-component~ status 'workspace))))
      (when label
        (set-title~ label (get-title))
        (set-icon~ label (get-icon)))))
  
  
  ;;;
  ;;;; Descriptor
  ;;;
  
  
  (method meta override (get-class-descriptor (context: context #f))
    (new jazz.workspace.designer:Workspace-Preferences-Descriptor)))


;;;
;;;; Toolbar-Preferences
;;;


(class undocumented Toolbar-Preferences extends Figure-Preferences
  
  
  (property model initialize #f accessors generate)


  (form
    (<install> icon: {Image-Resource "Window"}))
  
  
  ;;;
  ;;;; Applying
  ;;;
  
  
  (method override (apply-root player)
    (set-root~ player (singleton-toolbar (get-class) model))
    (apply-to (get-root~ player)))
  
  
  (method override (apply-preferences (parent #f))
    (assert parent)
    (let ((host (singleton-toolbar (get-class) model)))
      (set-parent~ host parent)
      (when title
        (set-title~ host title))
      (set-location~ host location)
      (client-activate~ (get-guest~ host))
      (set-visible?~ host #t)))
  
  
  (method (apply-to toolbar)
    (when title
      (set-title~ toolbar title))
    (set-location~ toolbar location)
    (client-activate~ (get-guest~ toolbar))
    (set-visible?~ toolbar #t))
  
  
  (define default-toolbar-classes
    (<environment>
      ((:menubar    . {Class-Reference Menubar})
       (:toolbar    . {Class-Reference Toolbar})
       (:status     . {Class-Reference Status-Toolbar})
       (:command    . {Class-Reference Command-Toolbar})
       (:minibuffer . {Class-Reference Minibuffer-Toolbar}))))
  
  
  (method (get-class)
    (define (get-reference)
      (if (symbol? model)
          (let ((pair (or (assq model (get-toolbar-classes~ (get-preferences-root))) (assq model (get-data~ default-toolbar-classes)))))
            (if (not pair)
                (error "Unknown toolbar class: {s}" model)
              (cdr pair)))
        model))
    
    (resolve-reference~ (get-reference)))
  
  
  ;;;
  ;;;; Descriptor
  ;;;
  
  
  (method meta override (get-class-descriptor (context: context #f))
    (new jazz.workspace.designer:Toolbar-Preferences-Descriptor)))


;;;
;;;; Splitter-Preferences
;;;


(class undocumented Splitter-Preferences extends Figure-Preferences


  (property separator   initialize 'resize        accessors generate)
  (property state       initialize 'split         accessors generate)
  (property target      initialize #f             accessors generate)
  (property orientation initialize 'horz          accessors generate)
  (property mode        initialize 'absolute      accessors generate)
  (property division    initialize #f             accessors generate)
  (property insets      initialize {Rect 0 0 0 0} accessors generate)
  (property zoomable?   initialize #t             accessors generate)
  
  
  (form
    (<install> title: "Splitter" icon: {Image-Resource "Splitter"}))

  
  ;;;
  ;;;; Applying
  ;;;
  
  
  (method override (apply-root player)
    (set-root~ player (new Splitter-View offscreen?: #t preferences: self))
    (apply-to (get-root~ player)))
  
  
  (method override (apply-preferences (parent #f))
    (assert parent)
    (apply-to (new Splitter-View parent: parent preferences: self)))
  
  
  (method (apply-to splitter)
    (remove-children~ splitter)
    (apply-properties splitter)
    (for-each (lambda (pref)
                (apply-preferences~ pref splitter))
              children)
    (for-each (lambda (child)
                (when (is? child Host-View)
                  (host-install~ (get-guest~ child))))
              (get-children~ splitter))
    (layout-view~ splitter))
  
  
  (method protected (apply-properties splitter)
    (set-separator~ splitter separator)
    (set-state~ splitter state)
    (set-target~ splitter target)
    (set-orientation~ splitter orientation)
    (set-mode~ splitter mode)
    (set-division~ splitter division)
    (set-insets~ splitter insets)
    (set-visible?~ splitter (get-visible?))
    (set-location~ splitter location))
  
  
  ;;;
  ;;;; Descriptor
  ;;;
  
  
  (method meta override (get-class-descriptor (context: context #f))
    (new jazz.workspace.designer:Splitter-Preferences-Descriptor)))


;;;
;;;; Menubar-Preferences
;;;


(class Menubar-Preferences extends Splitter-Preferences
  
  
  (form
    (<install>               separator: edge mode: absolute division: 21 orientation: vert zoomable?: #f
      (<Toolbar-Preferences> location: first model: :menubar))))


;;;
;;;; Mainbar-Preferences
;;;


(class Mainbar-Preferences extends Splitter-Preferences
  
  
  (form
    (<install>               separator: edge mode: absolute division: 27 orientation: vert zoomable?: #f
      (<Toolbar-Preferences> location: first model: :toolbar))))


;;;
;;;; Status-Preferences
;;;


(class Status-Preferences extends Splitter-Preferences
  
  
  (form
    (<install>               separator: line mode: absolute division: -23 orientation: vert zoomable?: #f
      (<Toolbar-Preferences> location: second model: :status))))


;;;
;;;; Commandbar-Preferences
;;;


(class Commandbar-Preferences extends Splitter-Preferences
  
  
  (form
    (<install>               separator: edge mode: absolute division: -27 orientation: vert
      (<Toolbar-Preferences> location: second model: :command))))


;;;
;;;; Minibuffer-Preferences
;;;


(class Minibuffer-Preferences extends Splitter-Preferences
  
  
  (form
    (<install>               separator: edge mode: absolute division: -17 orientation: vert state: zoom target: first
      (<Toolbar-Preferences> location: second model: :minibuffer))))


;;;
;;;; Stage-Preferences
;;;


(class undocumented Stage-Preferences extends Figure-Preferences
  
  
  (property maximized?  initialize #t accessors generate)
  (property guest-model initialize #f accessors generate)
  
  
  (slot stage initialize #f)
  
  
  (form
    (<install> title: "Stage" icon: {Image-Resource "Stage"}))
  
  
  ;;;
  ;;;; Applying
  ;;;
  
  
  (method override (apply-root player)
    (set-root~ player (get-parent~ (remember-stage)))
    (set-offscreen?~ (get-root~ player) #t)
    (apply-to (get-root~ player)))
  
  
  (method override (apply-preferences (parent #f))
    (assert parent)
    (let ((stage-border (get-parent~ (remember-stage))))
      (set-parent~ stage-border parent)
      (apply-to stage-border)))
  
  
  (method (apply-to stage-border)
    (set-location~ stage-border location)
    (set-visible?~ stage-border (get-visible?))
    (set-maximized?~ stage maximized?))
  
  
  (method (remember-stage)
    (unless stage
      (set! stage (create-stage))
      (set-figure-preferences~ stage self))
    (unless (current-stage)
      (set-current-stage stage))
    stage)
  
  
  ;;;
  ;;;; Descriptor
  ;;;
  
  
  (method meta override (get-class-descriptor (context: context #f))
    (new jazz.workspace.designer:Stage-Preferences-Descriptor)))


;;;
;;;; Pad-Preferences
;;;


(class undocumented Pad-Preferences extends Figure-Preferences
  
  
  (form
    (<install> title: "Pad" icon: {Image-Resource "Pad"}))
  
  
  ;;;
  ;;;; Applying
  ;;;
  
  
  (method override (apply-root player)
    (set-root~ player (new Pad-View offscreen?: #t preferences: self))
    (apply-to (get-root~ player)))
  
  
  (method override (apply-preferences (parent #f))
    (assert parent)
    (apply-to (new Pad-View parent: parent preferences: self)))
  
  
  (method (apply-to pad)
    (remove-children~ pad)
    (set-location~ pad location)
    (set-visible?~ pad (get-visible?))
    (for-each (lambda (pref)
                (apply-preferences~ pref pad))
              children)
    (for-each (lambda (child)
                (when (is? child Host-View)
                  (host-install~ (get-guest~ child))))
              (get-children~ pad))
    (layout-view~ pad))
  
  
  ;;;
  ;;;; Descriptor
  ;;;
  
  
  (method meta override (get-class-descriptor (context: context #f))
    (new jazz.workspace.designer:Pad-Preferences-Descriptor)))


;;;
;;;; Docked-Preferences
;;;


(class undocumented Docked-Preferences extends Figure-Preferences


  (property identifier initialize #f accessors generate)
  (property model     initialize #f accessors generate)
  (property caption?  initialize #t accessors generate)
  (property zoomable? initialize #t accessors generate)
  
  
  ;;;
  ;;;; Applying
  ;;;
  
  
  (method override (apply-preferences (parent #f))
    (assert parent)
    (let* ((class (resolve-reference~ model))
           (host (create-host class)))
      (set-parent~ host parent)
      (setup-host host)
      (client-activate~ (get-guest~ host))
      (set-visible?~ host #t)))
  
  
  (method protected virtual (create-host class)
    (named-singleton-docked class name))
  
  
  (method protected virtual (setup-host host)
    (when title
      (set-title~ host title))
    (when icon
      (set-icon~ host icon))
    (set-caption?~ host caption?)
    (set-zoomable?~ host zoomable?)
    (set-location~ host location)
    (set-preferences~ host self))
  
  
  ;;;
  ;;;; Descriptor
  ;;;
  
  
  (method meta override (get-class-descriptor (context: context #f))
    (new jazz.workspace.designer:Docked-Preferences-Descriptor))))
