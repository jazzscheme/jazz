;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Workspace UI
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.workspace.ui jazz


(import (jazz.geometry)
        (jazz.graphic)
        (jazz.locale)
        (jazz.ui))


(class undocumented Workspace-Button extends Radio-Tool
  
  
  (property visit?   initialize #f getter generate)
  (property problem? initialize #f getter generate)
  
  
  ;;;
  ;;;; Notify
  ;;;
  
  
  (method public (notify self visit? problem?)
    (set! self.visit? visit?)
    (set! self.problem? problem?)
    (invalidate-view self))

  
  ;;;
  ;;;; Layout
  ;;;
  
  
  (method override (preferred-size self)
    (if (not title)
        (default-size self)
      (new Dimension (+ 32 (text-width (effective-font self) (localize title))) 22)))
  
  
  ;;;
  ;;;; Drawing
  ;;;
  
  
  (definition problem-border
    {Color Dark-Red})
  
  (definition visit-start
    {Color Light-Red})
  
  (definition visit-end
    {Color Red})


  (method override (draw-frame self surface)
    (if problem?
        (frame-round-rect surface (get-bounds self) problem-border)
      (nextmethod self surface)))
  

  (method override (draw-tool self surface context)
    (let ((offset (if (or selected? (eq? (get-state self) 'pushed)) 2 1)))
      (if (not title)
          (draw-image self surface context offset offset)
        (let ((title (localize title))
              (offset (if (or selected? (eq? (get-state self) 'pushed)) 1 0)))
          (let ((center (justify-lazy (lambda () (nu+ {Dimension 24 0} (get-text-extent surface title)))
                                      (lambda () (get-size self))
                                      '(center center))))
            (draw-image self surface context (+ offset (get-h center)) offset)
            (draw-text surface (+ (+ 20 offset) (get-h center)) (+ offset (get-v center)) title {Color Black} enabled?: (view-enabled? self)))))))

  
  (method override (draw-background self surface context)
    (if visit?
        (gradient-fill-rect surface (expand-rect (get-bounds self) 1 1 -1 -1) (list (list 0 visit-start) (list 0.5 visit-end) (list 1 visit-start)) direction: 'vertical)
      (nextmethod self surface context)))))
