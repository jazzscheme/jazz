;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Zlib
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module jazz.zlib jazz


(export (jazz.zlib.foreign))
(import (jazz.zlib.foreign))


(definition default-chunk
  32768)


(definition public (zlib-deflate in (level: level #f) (gzip?: gzip? #f) (chunk: chunk #f))
  (let ((stream (z_stream-make)))
    (z_stream-zalloc-set! stream #f)
    (z_stream-zfree-set! stream #f)
    (z_stream-opaque-set! stream #f)
    (let ((ret (deflate-init2 stream (or level Z_DEFAULT_COMPRESSION) Z_DEFLATED (+ MAX_WBITS (if gzip? GZIP_WBITS 0)) DEFAULT_MEM_LEVEL Z_DEFAULT_STRATEGY)))
      (assert (= ret Z_OK))
      (call-with-output-u8vector '()
        (lambda (port)
          (let ((chunk (or chunk default-chunk)))
            (let ((out (make-u8vector chunk)))
              (z_stream-avail_in-set! stream (u8vector-length in))
              (z_stream-next_in-setup! stream in)
              (let (inner)
                (z_stream-avail_out-set! stream chunk)
                (z_stream-next_out-setup! stream out)
                (let ((ret (deflate stream Z_FINISH)))
                  (assert (/= ret Z_STREAM_ERROR))
                  (let ((avail (z_stream-avail_out-ref stream)))
                    (let ((have (- chunk avail)))
                      (write-subu8vector out 0 have port))
                    (when (= avail 0)
                      (inner)))))
              (deflate-end stream))))))))


(definition public (zlib-inflate in (gzip?: gzip? #f) (chunk: chunk #f))
  (let ((stream (z_stream-make)))
    (z_stream-zalloc-set! stream #f)
    (z_stream-zfree-set! stream #f)
    (z_stream-opaque-set! stream #f)
    (z_stream-avail_in-set! stream 0)
    (z_stream-next_in-set! stream #f)
    (let ((ret (inflate-init2 stream (+ DEFAULT_WBITS (if gzip? GZIP_WBITS 0)))))
      (assert (= ret Z_OK))
      (call-with-output-u8vector '()
        (lambda (port)
          (let ((chunk (or chunk default-chunk)))
            (let ((out (make-u8vector chunk)))
              (z_stream-avail_in-set! stream (u8vector-length in))
              (z_stream-next_in-setup! stream in)
              (let (inner)
                (z_stream-avail_out-set! stream chunk)
                (z_stream-next_out-setup! stream out)
                (let ((ret (inflate stream Z_NO_FLUSH)))
                  (assert (/= ret Z_STREAM_ERROR))
                  (let ((avail (z_stream-avail_out-ref stream)))
                    (let ((have (- chunk avail)))
                      (write-subu8vector out 0 have port))
                    (when (= avail 0)
                      (inner)))))
              (inflate-end stream))))))))


(definition public (zlib-inflate! out in (gzip?: gzip? #f))
  (let ((stream (z_stream-make)))
    (z_stream-zalloc-set! stream #f)
    (z_stream-zfree-set! stream #f)
    (z_stream-opaque-set! stream #f)
    (z_stream-avail_in-set! stream 0)
    (z_stream-next_in-set! stream #f)
    (let ((ret (inflate-init2 stream (+ DEFAULT_WBITS (if gzip? GZIP_WBITS 0)))))
      (assert (= ret Z_OK))
      (z_stream-avail_in-set! stream (u8vector-length in))
      (z_stream-next_in-setup! stream in)
      (z_stream-avail_out-set! stream (u8vector-length out))
      (z_stream-next_out-setup! stream out)
      (let ((ret (inflate stream Z_NO_FLUSH)))
        (assert (/= ret Z_STREAM_ERROR))
        (let ((avail (z_stream-avail_out-ref stream)))
          (inflate-end stream)
          (if (= avail 0)
              #f
            out)))))))
