;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Zlib Foreign
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.zlib.foreign jazz


(import (jazz.foreign (phase syntax))
        (jazz.platform.types))


(c-include "<stdlib.h>")
(c-include "<zlib.h>")


(c-enumerant Z_OK "S32")
(c-enumerant Z_NULL "S32")
(c-enumerant Z_STREAM_END "S32")
(c-enumerant Z_NO_FLUSH "S32")
(c-enumerant Z_STREAM_ERROR "S32")
(c-enumerant Z_NEED_DICT "S32")
(c-enumerant Z_DATA_ERROR "S32")
(c-enumerant Z_MEM_ERROR "S32")
(c-enumerant Z_FINISH "S32")
(c-enumerant Z_NO_COMPRESSION "S32")
(c-enumerant Z_BEST_SPEED "S32")
(c-enumerant Z_BEST_COMPRESSION "S32")
(c-enumerant Z_DEFAULT_COMPRESSION "S32")
(c-enumerant Z_DEFLATED "S32")
(c-enumerant MAX_WBITS "S32")
(c-enumerant Z_DEFAULT_STRATEGY "S32")


(constant DEFAULT_MEM_LEVEL 8)
(constant DEFAULT_WBITS 15)
(constant GZIP_WBITS 16)


(c-structure z_stream
  (char* next_in)
  (uint avail_in)
  (ulong total_in)
  (char* next_out)
  (uint avail_out)
  (ulong total_out)
  (char-string msg)
  (void* state)
  (void* zalloc)
  (void* zfree)
  (void* opaque)
  (int data_type)
  (ulong adler)
  (ulong reserved))


(c-external (z_stream-next_in-setup! z_stream* scheme-object) void
  #/C/
    z_stream* stream = (z_stream*) ___arg1;
    stream->next_in = ___CAST(___U8*,___BODY(___arg2));
//#)


(c-external (z_stream-next_out-setup! z_stream* scheme-object) void
  #/C/
    z_stream* stream = (z_stream*) ___arg1;
    stream->next_out = ___CAST(___U8*,___BODY(___arg2));
//#)


(c-external (deflate-init2 z_stream* int int int int int) int "deflateInit2")
(c-external (deflate z_stream* int) int "deflate")
(c-external (deflate-end z_stream*) void "deflateEnd")

(c-external (inflate-init2 z_stream* int) int "inflateInit2")
(c-external (inflate z_stream* int) int "inflate")
(c-external (inflate-end z_stream*) void "inflateEnd"))
