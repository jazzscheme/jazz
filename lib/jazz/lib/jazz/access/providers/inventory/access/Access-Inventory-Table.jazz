;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Access Inventory Table
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2007
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.access.providers.inventory.access.Access-Inventory-Table jazz


(import (jazz.access)
        (jazz.library)
        (jazz.utilities))


(class Access-Inventory-Table extends Inventory-Table
  
  
  (slot handle)
  (slot indexes initialize 'not-loaded)
  
  
  (method (initialize inventory parent handle)
    (nextmethod inventory parent)
    (set! handle~self handle)
    (destroy-mandatory))
  
  
  (method (destroy)
    (corelease handle)
    (nextmethod))
  
  
  ;;;
  ;;;; Database
  ;;;
  
  
  (method (get-owner)
    {})
  
  
  (method public (get-handle)
    handle)
  
  
  (method (get-title)
    (get-Name~ handle))
  
  
  (method (get-linked?)
    (not (empty-string? (get-SourceTableName~ handle))))
  
  
  (method (get-connect)
    (get-Connect~ handle))
  
  
  (method (set-connect connect)
    (put-Connect~ handle connect))

  
  (method (get-source-table-name)
    (get-SourceTableName~ handle))
 
  
  (method (set-source-table-name source-table-name)
    (put-SourceTableName~ handle source-table-name))
 
  
  (method (get-validation-rule)
    (let ((value (get-ValidationRule~ handle)))
      (if (empty-string? value)
          {}
        value)))
  
  
  (method (set-validation-rule value)
    (put-ValidationRule~ handle (either value "")))
  
  
  (method (get-validation-text)
    (let ((value (get-ValidationText~ handle)))
      (if (empty-string? value)
          {}
        value)))
  
  
  (method (set-validation-text value)
    (put-ValidationText~ handle (either value "")))
  
    
  (method (get-description)
    (get-property "Description"))
  
  
  (method (set-description value)
    (set-property "Description" value))
  
  
  ;;;  
  ;;;; Keys
  ;;;
  
  
  (method public (get-primary-key)
    (with-closed ((indexes (get-Indexes~ handle)))
      (let ((fact (new List-Factory)))
        (loop (for n from 0 below (get-Count~ indexes))
              (let ((index (get-Item~ indexes n)))
                (if (get-Primary~ index)
                    (put~ fact (new Access-Inventory-Primary-Key inventory self (new Access-Inventory-Index inventory self index)))
                  (corelease index))))
        (car (get-output~ fact)))))
  
  
  (method public (create-primary-key name fields/orders)
    (let ((primary-index (CreateIndex~ handle name)))
      (put-Primary~ primary-index #t)
      (for-each (function (field/order)
                  (bind (field order) field/order
                    (with-closed ((field (CreateField~ primary-index field {} {})))
                      (when (eq? order 'descending)
                        (put-Attributes~ field DAO.dbDescending))
                      (with-closed ((fields (get-Fields~ primary-index))
                                    (index-fields (coquery fields DAO.IndexFields)))
                        (Append~ index-fields field)))))
                  fields/orders)
      (new Access-Inventory-Primary-Key inventory self (new Access-Inventory-Index inventory self primary-index))))
    

  (method (remove-primary-key name)
    (let ((index (get-index name)))
      (with-closed ((indexes-handle (get-Indexes~ handle)))
        (Delete~ indexes-handle name))))
  
  
  (method (append-primary-key primary-key)
    (with-closed ((indexes-handle (get-Indexes~ handle)))
      (Append~ indexes-handle (get-handle~ (get-index~ primary-key)))))
    
    
  ;;;
  ;;;; Columns
  ;;;
  
  
  (method (get-columns)
    (with-closed ((fields (get-Fields~ handle)))
      (loop (for n from 0 below (get-Count~ fields))
            (collect (new Access-Inventory-Column inventory self #f (get-Item~ fields n))))))
  
  
  (method (get-column name)
    (with-closed ((fields (get-Fields~ handle)))
      (new Access-Inventory-Column inventory self #f (get-Item~ fields name))))
  
  
  (method (create-column name)
    (new Access-Inventory-Column inventory self #f (CreateField~ handle name {} {})))
  
  
  (method (append-column column)
    (with-closed ((fields (get-Fields~ handle)))
      (Append~ fields (get-handle~ column))))

  
  (method (remove-column name)
    (with-closed ((fields (get-Fields~ handle)))
      (Delete~ fields name)))
  
  
  ;;;
  ;;;; Indexes
  ;;;
  
  
  (method (indexes-loaded?)
    (neq? indexes 'not-loaded))
  
  
  (method (load-indexes)
    (unless (indexes-loaded?)
      (set! indexes (get-effective-indexes))))


  (method (get-indexes)
    (load-indexes)
    indexes)
  
  
  (method (get-effective-indexes)
    (with-closed ((indexes (get-Indexes~ handle)))
      (let ((fact (new List-Factory)))
        (loop (for n from 0 below (get-Count~ indexes))
              (let ((index (get-Item~ indexes n)))
                (if (and (not (get-Foreign~ index))
                         (not (get-Primary~ index)))
                    (put~ fact (new Access-Inventory-Index inventory self index))
                  (corelease index))))
        (get-output~ fact))))
  
  
  (method (get-index name)
    (find-if (function (index)
               (= (get-title~ index) name))
             (get-indexes)))
  
  
  (method (create-index name)
    (new Access-Inventory-Index inventory self (CreateIndex~ handle name)))
  
  
  (method (append-index new-index)
    (load-indexes)
    (with-closed ((indexes-handle (get-Indexes~ handle)))
      (Append~ indexes-handle (get-handle~ new-index)))
    (set! indexes (cons new-index indexes)))

  
  (method (remove-index name)
    (let ((index (get-index name)))
      (with-closed ((indexes-handle (get-Indexes~ handle)))
        (Delete~ indexes-handle name))
      (set! indexes (remove! index indexes))))
  

  ;;;
  ;;;; Triggers
  ;;;
  
  
  (method (get-triggers)
    '())
  
  
  (method (get-trigger name . rest)
    {})
  
  
  (method (triggers-unsupported)
    (error "Access doesn't support triggers"))
  
  
  (method (create-trigger name)
    (triggers-unsupported))
  
  
  (method (append-trigger trigger)
    (triggers-unsupported))
  
  
  (method (delete-trigger name)
    (triggers-unsupported))
  
  
  ;;;
  ;;;; Constraints
  ;;;
  
  
  (method (get-constraints)
    '())
  
  
  (method (get-constraint name . rest)
    {})
  
  
  (method (constraints-unsupported)
    (error "Access doesn't support constraints"))
  
  
  (method (create-constraint name)
    (constraints-unsupported))
  
  
  (method (append-constraint constraint)
    (constraints-unsupported))
  
  
  (method (delete-constraint name)
    (constraints-unsupported))
  
  
  ;;;
  ;;;; Properties
  ;;;
  
  
  (constant Property-Inexistant
    #x800A0CC6)
  
  
  (constant Object-Already-Existant
    #x800A0D27)
  
  
  (constant Element-Not-Found
    #x800A0CC1)
  
  
  (method (get-property property-name)
    (with-closed ((properties (get-Properties~ handle))
                  (property (cotry (get-Item~ properties property-name) (Property-Inexistant {}))))
      (if (null? property)
          {}
        (get-Value~ property))))

  
  (method (set-property property-name value)
    (with-closed ((properties (get-Properties~ handle)))
      (if value
          (with-closed ((property (CreateProperty~ handle property-name DAO.dbText value {})))
            (cotry (Append~ properties property) (Object-Already-Existant (set-existant-property property-name value))))
        (cotry (Delete~ properties property-name) (Element-Not-Found)))))

  
  ;; it seems that because this method is only called by the one above
  ;; that the cotry for Property-Inexistant is completelly useless...
  (method (set-existant-property property-name value)
    (with-closed ((properties (get-Properties~ handle))
                  (property (cotry (get-Item~ properties property-name) (Property-Inexistant {}))))
      (when property
        (put-Value~ property value))))))
