;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Status Break Listener
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2007
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.ui.view.Status-Break-Listener jazz


(import (jazz.ui)
        (jazz.literals)
        (jazz.library)
        (jazz.utilities))


(class Status-Break-Listener extends Object
    
  
  (constant Break-Color {Color name: Orange})
  (constant Error-Color {Color red: 225 green: 30 blue: 30})


  (method (initialize)
    (nextmethod)
    (let ((listener (new Event-Handler target: self method-name: 'on-level-change)))
      (add-level-change-listener~ (get-loop~ (get-application)) listener)))


  (method (destroy)
    (remove-level-change-listener~ (get-loop~ (get-application)) self)
    (nextmethod))


  (method (on-level-change evt)
    (let* ((loop (get-sender~ evt))
           (level (get-level~ loop))
           (type  (get-type~ loop))
           (status (get-status-bar~ (get-application))))
      (when status
        (for-each (function (child)
                    (set-background~ child (break-color level type)))
                  (get-children~ status)))))
  
  
  (method (break-color level type)
    (if (= level 0)
        {Color name: Medium}
      (case type
        ((break) Break-Color)
        (else Error-Color))))))
