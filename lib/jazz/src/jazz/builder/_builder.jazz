;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Builder
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.builder jazz


(export (jazz.builder.autoload))

(import (jazz.io)
        (jazz.utilities))


;;;
;;;; Kernel
;;;


@wait
(definition public (build-kernel
                     (name: name {})
                     (system: system {})
                     (platform: platform {})
                     (windowing: windowing {})
                     (safety: safety {})
                     (optimize?: optimize? #t)
                     (include-source?: include-source? #f)
                     (interpret?: interpret? #f)
                     (destination: destination {}))
  (build-executable #f
    name:            name
    system:          system
    platform:        platform
    windowing:       windowing
    safety:          safety
    optimize?:       optimize?
    include-source?: include-source?
    interpret?:      interpret?
    destination:     destination
    kernel?:         #t
    console?:        #t))


@wait
(definition public (find-kernel name system platform windowing safety destination)
  (let ((dir (destination-directory name system platform windowing safety destination kernel-source)))
    (new File (tokenise-filename (concatenate dir "jazz" (executable-extension kernel-platform))))))


@wait
(definition public (require-kernel
                     (system: system {})
                     (platform: platform {})
                     (windowing: windowing {})
                     (safety: safety {})
                     (optimize?: optimize? {})
                     (include-source?: include-source? {})
                     (interpret?: interpret? {})
                     (destination: destination {}))
  (let ((kernel (find-kernel system platform windowing safety destination)))
    (if (exists?~ kernel)
        kernel
      (build-kernel
        system: system
        platform: platform
        windowing: windowing
        safety: safety
        optimize?: optimize?
        include-source?: include-source?
        interpret?: interpret?
        destination: destination)
      (if (exists?~ kernel)
          kernel
        (error "Unable to build kernel")))))


(definition public (find-kernel)
  (let ((filename (concatenate kernel-install "jazz" (executable-extension kernel-platform))))
    (new File (tokenise-filename filename))))


(definition public (require-kernel)
  (either (find-kernel)
          (error "Unable to find kernel")))


(definition public (launch-kernel kernel (runtime-arguments: runtime-arguments {}) (arguments: arguments {}) (show-console?: show-console? #f) (wait?: wait? #f))
  (let* ((runtime-arg   (either runtime-arguments '()))
         (arguments-arg (either arguments '()))
         (arguments     (append runtime-arg arguments-arg)))
    @debug
    (debug kernel arguments)
    (open-process
      (list
        path: (parse~ kernel)
        directory: (parse~ (get-parent~ kernel))
        arguments: arguments
        ;; this is not yet quite what we want as an access to the terminal
        ;; will not dynamically show the console when using show-console: #f
        stdin-redirection: #f
        stdout-redirection: #f
        stderr-redirection: #f
        show-console: show-console?)))))
