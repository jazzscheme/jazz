;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Projects
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.builder.project.Project jazz


(import (jazz.builder)
        (jazz.builder.workbench)
        (jazz.designer)
        (jazz.io)
        (jazz.jml)
        (jazz.library)
        (jazz.runtime)
        (jazz.ui)
        (jazz.ui.view)
        (jazz.utilities))


(class Project extends Project-File
  
  
  (property title              initialize {}  accessors generate)
  (property icon               initialize {}  accessors generate)
  (property owner              initialize {}  accessors generate)
  (property copyright          initialize {}  accessors generate)
  (property version            initialize {}  accessors generate)
  (property include-extensions initialize {}  accessors generate)
  (property documentation      initialize {}  accessors generate)
  (property editable?          initialize nil accessors generate)
  (property active?            initialize #t  accessors generate)
  (property catalog?           initialize #f  accessors generate)
  (property catalog-extensions initialize {}  accessors generate)
  (property catalog-heuristics initialize {}  accessors generate)
  (property module-name        initialize {}  accessors generate)


  (slot workbench)
  (slot parent-project initialize {})
  (slot catalog        initialize {})
  
  
  (form
    (<install> build?: #f))

  
  (method (initer-property? name)
    (or (nextmethod name)
        (eq? name 'workbench)))
  
  
  (method (default-name)
    (identifier-name (type-name (class-of self))))
  
  
  (method (prepare rest)
    (nextmethod rest)
    (let ((arg (getf rest workbench:)))
      (when arg
        (set! workbench arg))))
  
  
  (method (print printer readably)
    (print-unreadable self printer
      (function (printer)
        (format printer "{a}"
                title))))


  ;;;
  ;;;; Access
  ;;;


  (method public (get-workbench)
    workbench)


  (method public (set-workbench value)
    (set! workbench value))


  (method public (get-parent-project)
    parent-project)


  (method public (set-parent-project value)
    (set! parent-project value))
  
  
  (method public virtual (project-title)
    (either title (->string (type-name (class-of self)))))


  (method public (get-catalog)
    catalog)


  (method public (set-catalog value)
    (set! catalog value))


  ;;;
  ;;;; Concrete
  ;;;
  
  
  (method public virtual (concrete?)
    #f)


  ;;;
  ;;;; Source
  ;;;
  
  
  @convert
  (method (get-effective-source)
    (get-manifest-source name))


  ;;;
  ;;;; Catalog
  ;;;
  
  
  (method (require-catalog)
    (unless catalog
      (set! catalog (create/register-catalog)))
    catalog)
  
  
  (method (create/register-catalog)
    (let ((catalog (create-catalog)))
      (add-catalog~ (get-cataloguer~ (get-application)) catalog)
      catalog))
  
  
  (method (create-catalog)
    (new Project-Catalog self (catalog-name) (catalog-output) {} {} {} {} #t #t #t))
  
  
  (method protected virtual (catalog-name)
    (if title
        (string->symbol title)
      name))
  
  
  (method protected virtual (catalog-output)
    (new File (list 'Profile "catalogs" (format "{a}.jcat" (catalog-name)))))


  ;;;
  ;;;; Editable
  ;;;
  
  
  (method public virtual (get-effective-editable?)
    (if (nil? editable?)
        (get-effective-editable?~ parent-project)
      editable?))


  ;;;
  ;;;; Files
  ;;;
  
  
  (method public (for-each-file proc (type Project-File))
    (for-each-descendant
      (function (descendant level)
        (when (is? descendant type)
          (proc descendant)))))


  (method public (collect-files (type Project-File))
    (let ((fact (new List-Factory)))
      (for-each-file
        (function (file)
          (when (is? file type)
            (put~ fact file))))
      (get-output~ fact)))
  
  
  (method public (fold-files proc seed (type Project-File))
    (letrec ((fold
               (function (x f s)
                 (let ((ps (if (is? x type)
                               (f x s)
                             s)))
                   (if (eq? ps :skip)
                       {}
                     (for-each (function (c)
                                 (fold c f ps))
                               (get-children~ x))
                     ps)))))
      (fold self proc seed)))


  ;;;
  ;;;; Index
  ;;;
  
  
  (method (add-to-index name component)
    (set-workbench (find-workbench))
    (add-to-project~ workbench self name component))
  
  
  (method (remove-from-index name component)
    (remove-from-project~ workbench self name component))
  
  
  (method protected virtual (find-workbench)
    (let ((project (either creator workbench)))
      (if (is? project Workbench)
          project
        (find-ascendant Workbench))))


  ;;;
  ;;;; Name
  ;;;
  
  
  (method public virtual (project-name)
    )


  ;;;
  ;;;; Test
  ;;;


  (method public virtual (project-test)
    (message-box "This project doesn't define a project-test method"))


  ;;;
  ;;;; Run
  ;;;
  
  
  (method public virtual (project-run . rest)
    (message-box "This project doesn't define a project-run method"))
  
  
  (method public virtual (run-arguments)
    {})


  ;;;
  ;;;; Debug
  ;;;
  
  
  (method public virtual (project-debug . rest)
    (message-box "This project doesn't define a project-debug method"))
  
  
  (method public virtual (debug-arguments)
    {})


  ;;;
  ;;;; Build
  ;;;


  (method public virtual (project-build)
    (message-box "This project doesn't define a project-build method"))


  ;;;
  ;;;; Clean
  ;;;


  (method public virtual (project-clean)
    (message-box "This project doesn't define a project-clean method"))


  ;;;
  ;;;; Designer
  ;;;
  
  
  (method meta (get-class-image)
    {Bitmap-Resource "Project"})
  
  
  (method meta (property-presentation property)
    (case (field-name property)
      ((title) "Title")
      ((icon) "Icon")
      ((owner) "Owner")
      ((copyright) "Copyright")
      ((version) "Version")
      ((include-extensions) "Include Extensions")
      ((documentation) "Documentation")
      ((active?) "Active?")
      ((editable?) "Editable?")
      ((catalog?) "Catalog?")
      ((catalog-extensions) "Catalog Extensions")
      ((catalog-heuristics) "Catalog Heuristics")
      (else (nextmethod property))))
  
  
  (method (presentation-property? property)
    (memq? (field-name property) '(title)))
  
  
  (method (get-presentation)
    (either title (->string (type-name (class-of self)))))
  
  
  (method (set-presentation designer presentation)
    (set-property~ designer self title: presentation))
  
  
  (method (addable-class? class)
    (or (subtype? class Project-File)
        (subtype? class Project-Group)))
  
  
  (method (get-addable-classes)
    (list
      Project-Group
      ;{}
      ;Project-Dependency
      ;{}
      ;Jazz-File
      ;C-File
      ;Java-File
      ))
  
  
  (method (get-row-instance property)
    (case (field-name property)
      ((title) (new String-Row nullable?: #t))
      ((include-extensions catalog-extensions catalog-heuristics) (new Value-Row))
      ((documentation) (new File-Row))
      ((catalog? active?) (new Boolean-Row))
      (else (nextmethod property))))
  
  
  (method (get-categorized-properties)
    '(title
      @wait icon @wait owner @wait copyright @wait version
      include-extensions
      @wait
      documentation
      @wait
      active?
      catalog? catalog-extensions catalog-heuristics))))
