;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Repositories Manager
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.builder.repositories.Repositories-Manager jazz


(import (jazz.builder)
        (jazz.io)
        (jazz.jml)
        (jazz.library)
        (jazz.literals)
        (jazz.ui)
        (jazz.ui.dialog)
        (jazz.ui.view)
        (jazz.utilities))


(class Repositories-Manager extends Layout-View


  (form
    (<install>                                           layout-type: fill
      (<Layout-View>                name: tools)
      (<Scroller-View>              name: scroller       vscroll?: #t hscroll?: #t flat?: #t
        (<!>                        name: content        layout-type: fill
          (<Tree-Header>            name: header         shown?: #f
            (<!>                    name: content
              (<Tree-View>          name: repositories   portfolio: :icons show-header?: #f multiple-selection?: #t context-menu-handler: {Event-Handler :form on-context-menu}
                (<Tree-Node-Column>                      title: "Repositories" width: 329))))))))
  
  
  (method meta (external-name . rest)
    'repositories-manager)

  
  ;;;
  ;;;; Host
  ;;;
  
  
  (method meta (host-icon)
    {Bitmap-Resource "Repositories"})
  
  
  (method meta (host-title)
    "Repositories")
  
  
  (method (install-in-host host)
    (setup-repositories))
  
  
  (method (setup-repositories)
    (update))
  
  
  ;;;
  ;;;; Docked
  ;;;
  
  
  (method (get-tools-view)
    (locate 'tools))
  
  
  (method (focus-default)
    (let ((tree (get-tree)))
      (acquire-focus~ tree)))

  
  ;;;
  ;;;; Access
  ;;;
  
  
  (method (get-tree)
    (locate 'repositories))

  
  ;;;
  ;;;; Update
  ;;;
  
  
  (method (update)
    (let ((tree (get-tree)))
      (with-update-locked~ tree
        (function ()
          (remove-every-row~ tree)
          (let ((repositories-row (add-row~ tree state: 'expanded children: (list (new Tree-Node title: "Repositories" image: {Bitmap-Resource "Repositories"})) user-data: {})))
            (for-each (function (repository)
                        (let ((name (repository-name repository)))
                          (let ((title (->string name))
                                (image {Bitmap-Resource "Repository"}))
                            (let ((repository-row (add-row~ tree father: repositories-row children: (list (new Tree-Node title: title image: image)) user-data: repository)))
                              (for-each (function (package)
                                          (let ((name (package-name package)))
                                            (let ((title (->string name))
                                                  (image {Bitmap-Resource "Package"}))
                                              (add-row~ tree father: repository-row children: (list (new Tree-Node title: title image: image)) user-data: package))))
                                        (sort string<=? (repository-packages repository) key: (function (package) (->string (package-name package)))))))))
                      (get-repositories)))))))
  
  
  ;;;
  ;;;; Repositories
  ;;;
  
  
  (method (on-add-repository evt)
    (let ((file (choose-file title: "Choose Repository" filenames: '(".repository"))))
      ))
  
  
  (method (on-install-repository evt)
    )
  
  
  (method (on-refresh-repositories evt)
    )
  
  
  ;;;
  ;;;; Repository
  ;;;
  
  
  (method (on-edit-repository evt)
    (for-each edit-repository (selected-objects)))
  
  
  (method (edit-repository repository)
    (append 1 2)
    (let ((dir (new Directory (tokenise-filename (repository-directory repository)))))
      (edit-document~ (get-application) (new-file~ dir ".repository"))))
  
  
  (method (on-add-package evt)
    (let ((file (choose-file title: "Choose Package" filenames: '(".package"))))
      ))
  
  
  (method (on-install-package evt)
    )
  
  
  (method (on-remove-repository evt)
    )
  
  
  (method (on-refresh-packages evt)
    )
  
  
  ;;;
  ;;;; Package
  ;;;
  
  
  (method (on-edit-package evt)
    (for-each edit-package (selected-objects)))
  
  
  (method (edit-package package)
    (let ((dir (new Directory (tokenise-filename (repository-directory (package-repository package))))))
      (edit-document~ (get-application) (new-file~ dir (list (->string (package-name package)) ".package")))))
  
  
  (method (on-install-in-workbench evt)
    )
  
  
  (method (on-remove-package evt)
    )
  
  
  ;;;
  ;;;; Selection
  ;;;
  
  
  (method (selected-kind object)
    (cond ((not object)
           'repositories)
          ((repository? object)
           'repository)
          ((package? object)
           'package)))
  
  
  (method (selected-kind/objects)
    (let ((objects (get-selected-data~ (get-tree))))
      (if (null? objects)
          (values {} {})
        (let ((kind (uniform objects key: selected-kind)))
          (if (not kind)
              (values {} {})
            (values kind objects))))))
  
  
  (method (selected-objects)
    (receive (kind objects) (selected-kind/objects)
      objects))

  
  ;;;
  ;;;; Menu
  ;;;
  
  
  (method (on-context-menu evt)
    (let* ((sender (get-sender~ evt))
           (pos (get-position~ evt))
           (acquired (acquire sender pos)))
      (with-context-click~ sender pos
        (function ()
          (let ((menu (new-menu)))
            (when menu
              (track-popup-menu menu acquired)))))))
  
  
  (method public (new-menu)
    (receive (kind objects) (selected-kind/objects)
      (if (not kind)
          {}
        (case kind
          ((repositories) (new-repositories-menu objects))
          ((repository) (new-repository-menu objects))
          ((package) (new-package-menu objects))))))
  
  
  (method (new-repositories-menu objects)
    (let ((menu (new Repositories-Menu client: (get-tree))))
      (cleanup-separators~ menu)
      (layout-menu~ menu)
      menu))
  
  
  (method (new-repository-menu objects)
    (let ((menu (new Repository-Menu client: (get-tree))))
      (when (> (length objects) 1)
        (set-visible?~ (locate~ menu 'add-package-separator) #f)
        (set-visible?~ (locate~ menu 'add-package) #f)
        (set-visible?~ (locate~ menu 'install-package-separator) #f)
        (set-visible?~ (locate~ menu 'install-package) #f))
      (cleanup-separators~ menu)
      (layout-menu~ menu)
      menu))
  
  
  (method (new-package-menu objects)
    (let ((menu (new Package-Menu client: (get-tree))))
      (cleanup-separators~ menu)
      (layout-menu~ menu)
      menu)))


;;;
;;;; Repositories-Menu
;;;


(class Repositories-Menu extends Context-Menu
  
  
  (form
    (<install>
      (<Label-Item> name: add-repository       title: "Add Repository..." icon: {Bitmap-Resource "Add"} action: {Action repositories-manager add-repository})
      (<Separator-Item>)
      (<Label-Item> name: install-repository   title: "Install Repository..." icon: {Bitmap-Resource "Import"} action: {Action repositories-manager install-repository}))))


;;;
;;;; Repository-Menu
;;;


(class Repository-Menu extends Context-Menu
  
  
  (form
    (<install>
      (<Label-Item>     name: edit-repository           title: "Edit" icon: {Bitmap-Resource "Edit"} action: {Action repositories-manager edit-repository})
      (<Separator-Item> name: add-package-separator)
      (<Label-Item>     name: add-package               title: "Add Package..." icon: {Bitmap-Resource "Add"} action: {Action repositories-manager add-package})
      (<Separator-Item>)
      (<Label-Item>     name: refresh-packages          title: "Refresh Packages" icon: {Bitmap-Resource "Refresh"} action: {Action repositories-manager refresh-packages})
      (<Separator-Item>)
      (<Label-Item>     name: remove-repository         title: "Remove" icon: {Bitmap-Resource "Remove"} action: {Action repositories-manager remove-repository}))))


;;;
;;;; Package-Menu
;;;


(class Package-Menu extends Context-Menu
  
  
  (form
    (<install>
      (<Label-Item> name: edit-package    title: "Edit" icon: {Bitmap-Resource "Edit"} action: {Action repositories-manager edit-package})
      (<Separator-Item>)
      (<Label-Item> name: install-package title: "Install in Workbench" icon: {Bitmap-Resource "Import"} action: {Action repositories-manager install-in-workbench})))))
