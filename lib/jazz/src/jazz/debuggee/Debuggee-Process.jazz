;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Debuggee Process
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.debuggee.Debuggee-Process jazz


(import (jazz.debuggee)
        (jazz.debuggee.stub))


(class Debuggee-Process extends Object
  
  
  (method public (get-title)
    (current-process-present))
  
  
  (method public (get-icon)
    (current-process-icon))
  
  
  ;;;
  ;;;; Control
  ;;;
  
  
  (method public (detach-process)
    (detach-from-controller))
  
  
  (method public (exit-process)
    (let ((process (get-process)))
      (if (not process)
          (begin
            (detach-from-controller)
            (exit))
        (thread-post (primordial-thread) 'exit-process
          (function ()
            (exit-process~ process))))))
  
  
  ;;;
  ;;;; Process
  ;;;
  
  
  (method public (get-toplevel-hwnd)
    @convert
    (get-handle~ (get-toplevel)))
  
  
  ;;;
  ;;;; State
  ;;;
  
  
  (method (get-threads)
    (map (function (thread)
           (new Debuggee-Thread-Local-Proxy (new Debuggee-Thread thread)))
         (top-threads)))
  
  
  ;;;
  ;;;; Thread
  ;;;
  
  
  (method (break-thread thread-proxy)
    (let ((thread (get-thread~ (get-object~ thread-proxy))))
      (thread-interrupt! thread
        (function ()
          (break)))))
  
  
  ;;;
  ;;;; Restart
  ;;;
  
  
  (method (restart-stop restart-proxy)
    (let ((debuggee-restart (get-object~ restart-proxy)))
      (let ((thread (get-thread~ debuggee-restart))
            (restart (get-restart~ debuggee-restart)))
        (thread-post thread 'restart-stop
          (function ()
            (invoke-restart restart))))))
  
  
  ;;;
  ;;;; Stop
  ;;;
  
  
  (method (continue-stop stop-proxy)
    (let ((stop (get-object~ stop-proxy)))
      (let ((thread (get-thread~ stop))
            (continuation (get-continuation~ stop)))
        (thread-post thread 'continue-stop
          (function ()
            (continuation-return continuation #f))))))
  
  
  ;;;
  ;;;; Console
  ;;;
  
  
  (method (console-input thread-proxy str)
    (let ((thread (get-thread~ (get-object~ thread-proxy))))
      (let ((port (thread-console-pump-port thread)))
        (if (not str)
            (close-port port)
          (display str port)
          (force-output port)))))
  
  
  ;;;
  ;;;; Evaluate
  ;;;
  
  
  (method (module/library-form? expr)
    (and (pair? expr)
         (memq? (car expr) '(module library))))
  
  
  (method (evaluate-expressions expressions)
    (let ((expressions (with-jazz-readtable
                         (function ()
                           (map read-string-element expressions)))))
      (map (function (expr)
             (if (module/library-form? expr)
                 (let ((module-name (cadr expr)))
                   (load-module module-name)
                   (locate-library-declaration module-name)
                   (parameterize ((requested-module-name module-name))
                     (->string (eval expr) :reader)))
               (->string (eval expr) :reader)))
           expressions)))
  
  
  ;;;
  ;;;; Inspector
  ;;;
  
  
  @convert
  (method public remote (inspect serial kind)
    (inspect-value (serial->object serial)))))
