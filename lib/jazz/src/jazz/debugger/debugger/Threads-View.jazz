;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Threads View
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.debugger.debugger.Threads-View jazz


(import (jazz.debuggee)
        (jazz.debuggee.stub)
        (jazz.debugger)
        (jazz.io)
        (jazz.jml)
        (jazz.jrm)
        (jazz.language.jazz)
        (jazz.library)
        (jazz.literals)
        (jazz.platform)
        (jazz.ui)
        (jazz.ui.dialog)
        (jazz.ui.view)
        (jazz.ui.window)
        (jazz.utilities))


(class Threads-View extends Layout-View


  (property process initialize {} getter get-process setter set-process)
  

  (form
    (<install>                                 layout-type: border
      (<Layout-View>          name: tools
        (<Push-Tool>          name: restart    size: {Dimension 22 22} tooltip?: #t tooltip-text: "Restart" image-name: {Bitmap-Resource "Restart"} portfolio: :icons action-handler: {Event-Handler :form on-restart})
        (<Push-Tool>          name: break      size: {Dimension 22 22} tooltip?: #t tooltip-text: "Break" image-name: {Bitmap-Resource "Break"} portfolio: :icons action-handler: {Event-Handler :form on-break})
        (<Push-Tool>          name: continue   size: {Dimension 22 22} tooltip?: #t tooltip-text: "Continue" image-name: {Bitmap-Resource "Continue"} portfolio: :icons action-handler: {Event-Handler :form on-continue})
        (<Separator>                           size: {Dimension 5 0})
        (<Toggle-Tool>        name: detailed   size: {Dimension 22 22} location: tail tooltip?: #t tooltip-text: "Show Detailed Information" image-name: {Bitmap-Resource "Info"} portfolio: :icons action-handler: {Event-Handler :form on-toggle-detailed})
        (<Separator>                           size: {Dimension 2 0})
        (<Push-Tool>          name: update     size: {Dimension 22 22} location: tail tooltip?: #t tooltip-text: "Refresh" image-name: {Bitmap-Resource "Refresh"} portfolio: :icons action-handler: {Event-Handler :form on-update}))
      (<Scroller-View>        name: scroller   location: center vscroll?: #t flat?: #t
        (<!>                  name: content    layout-type: fill
          (<Tree-Header>      name: header     shown?: #f
            (<!>              name: content
              (<Threads-Tree> name: threads    multiple-selection?: #f selection-mode: row selection-handler: {Selection-Handler :form on-select-thread #t} context-menu-handler: {Event-Handler :form on-context-menu} double-click-handler: {Event-Handler :form on-double-click})))))))

  
  (method meta (external-name . rest)
    'threads-view)

  
  ;;;
  ;;;; Host
  ;;;
  
  
  (method meta (host-icon)
    {Bitmap-Resource "Threads"})
  
  
  (method meta (host-title)
    "Threads")
  
  
  ;;;
  ;;;; Docked
  ;;;
  
  
  (method (get-tools-view)
    (locate 'tools))
  
  
  (method (focus-default)
    (let ((tree (locate 'threads)))
      (acquire-focus~ tree)))

  
  ;;;
  ;;;; Component
  ;;;


  (method (install rest)
    (nextmethod rest)
    (update))

  
  ;;;
  ;;;; Access
  ;;;


  (method public (get-process)
    process)


  (method public (set-process value)
    (set! process value)
    (update))
  
  
  (method (show-detailed?)
    (get-selected?~ (locate 'detailed)))

  
  ;;;
  ;;;; Events
  ;;;


  (method (resize dh dv)
    (nextmethod dh dv)
    (size-figure~ (locate 'scroller) dh dv))
  
  
  (method (on-context-menu evt)
    (let* ((sender (get-sender~ evt))
           (pos (get-position~ evt))
           (acquired (acquire sender pos)))
      (with-context-click~ sender pos
        (function ()
          (let ((menu (new-context-menu (selected-thread))))
            (when menu
              (track-popup-menu menu acquired)))))))
  
  
  (method (on-double-click evt)
    )
  
  
  (method (on-toggle-detailed evt)
    (update))


  (method (on-select-thread evt)
    (update-tools)
    (thread-change))
  
  
  (method (on-break evt)
    (let ((thread (selected-thread)))
      (with-thread-refresh thread
        (function ()
          (break-thread~ process (get-reference~ thread))))))
  
  
  (method (on-continue evt)
    (let ((thread (selected-thread)))
      (let ((stop (get-active-stop~ thread)))
        (with-thread-refresh thread
          (function ()
            (continue-stop~ process stop))))))
  
  
  (method (on-update evt)
    (update))
  
  
  (method (with-thread-refresh thread thunk)
    (thread-start!
      (new-thread
        (function ()
          (sleep .1)
          (execute-event
            (function ()
              (update))))))
    (thunk))
  
  
  ;; not used for the moment
  (method (event-thread-local-proxy? thread)
    (when (eq? (get-debugger~ thread) (get-local-debugger~ (get-application)))
      (let ((thread-proxy (get-reference~ thread)))
        (and (is? thread-proxy Debuggee-Thread-Local-Proxy)
             (eq? (get-thread~ (get-object~ thread-proxy)) event-thread)))))
  
  
  (method (restart-stop restart)
    (let ((thread (selected-thread)))
      (with-thread-refresh thread
        (function ()
          (restart-stop~ process restart)))))
  
  
  (method (update-tools)
    (define (enable restart break continue)
      (set-enabled?~ (locate 'restart) restart)
      (set-enabled?~ (locate 'break) break)
      (set-enabled?~ (locate 'continue) continue))
    
    (let ((thread (selected-thread)))
      (if (not thread)
          (enable #f #f #f)
        (let ((stop (get-active-stop~ thread)))
          (if (not stop)
              (enable #f #f #f)
            (enable #f #f #f @wait (eq? (get-kind~ stop) 'break)))))))
  
  ;;;
  ;;;; Update
  ;;;
  
  
  (definition System-Threads
    '(message-pump
      debuggee-console-pump
      debugger-console-pump
      remote-listener
      remote-connection
      repl))
  
  
  (method (with-preserving-update tree thunk)
    (with-preserved-selection~ tree
      thunk
      use: 'data
      test: debugged=?
      generate-event?: #t))


  (method protected (update)
    (with-system-exception-debugger
      (function ()
        (let ((detailed? (show-detailed?))
              (tree (locate 'threads)))
          (with-update-locked~ tree
            (function ()
              (with-preserving-update tree
                (function ()
                  (remove-every-row~ tree)
                  (let ((problem? (update-threads tree detailed?: detailed?)))
                    (when process
                      (set-debugged-problem? process problem?)
                      (highlight-process~ (get-processes-view) process)))))))))))
  
  
  (method (update-threads tree (detailed?: detailed? #f))
    (define (debugged-threads debugger process threads)
      (map (function (object)
             (new Debugged-Thread debugger process object))
           threads))
    
    (define (thread-title thread stop)
      (let ((name (present-thread-name (get-name~ thread)))
            (state (get-state~ thread)))
        (if (not detailed?)
            (if stop
                (format "{a} - {a}" name (stop-title stop))
              (->string name))
          (format "{a} - {a}" name state))))
    
    (define (thread-image thread stop)
      (if (not stop)
          {Bitmap-Resource "ThreadRun"}
        (case (get-kind~ stop)
          ((exception) {Bitmap-Resource "ThreadError"})
          (else {Bitmap-Resource "ThreadBreak"}))))
    
    (define (thread-frame-color thread)
      (if (get-debugged-problem? thread)
          {Color name: Dark-Red}
        {}))
    
    (define (thread-background thread)
      (if (get-debugged-visit? thread)
          (get-visit-highlight)
        {}))
    
    (define (stop-title stop)
      (let ((reason (get-reason~ stop)))
        (if (not reason)
            "Break"
          (let ((line (car (split reason "\n"))))
            line))))
    
    (when process
      (let ((debugger (get-debugger~ process))
            (problem? #f))
        (for-each (function (thread)
                    ;; quicky until a cleaner solution
                    (when (or detailed? (not (memq? (get-name~ thread) System-Threads)))
                      (let ((stop (get-active-stop~ thread)))
                        (set-debugged-problem? thread (boolean stop))
                        (let ((title (thread-title thread stop))
                              (image (thread-image thread stop))
                              (frame-color (thread-frame-color thread))
                              (background (thread-background thread)))
                          (when stop
                            (set! problem? #t))
                          (add-row~ tree state: 'expanded children: (list (new Tree-Node title: title image: image frame-color: frame-color background: background)) user-data: thread)))))
                  (debugged-threads debugger process (get-threads~ process)))
        problem?)))

  
  ;;;
  ;;;; Edition
  ;;;
  
  
  (method (thread-change)
    (let ((thread (selected-thread)))
      (when thread
        (set-debugged-visit? thread #f)
        (highlight-thread thread))
      (let ((view (get-frames-view)))
        (set-process~ view process)
        (set-thread~ view thread)
        (select-first-frame~ view))
      (let ((view (get-detail-view)))
        (set-thread~ view thread))))
  
  
  ;;;
  ;;;; Selection
  ;;;
  
  
  (method public (selected-thread)
    (let ((row (selected-row)))
      (when row
        (get-user-data~ row))))
  
  
  (method (selected-row)
    (let* ((tree (locate 'threads))
           (n (get-single-selection~ tree)))
      (when n
        (get-row~ tree n))))
  
  
  (method (set-selected-thread thread)
    (let ((tree (locate 'threads)))
      (let ((row (thread-row tree thread)))
        (when row
          (set-single-selection~ tree (row-rank~ tree row))))))
  
  
  (method (thread-row tree thread)
    (continuation-capture
      (function (return)
        (for-each-row~ tree
          (function (row rank)
            (when (debugged=? (get-user-data~ row) thread)
              (continuation-return return row))))
        {})))
  
  
  (method (highlight-thread thread)
    (let ((tree (locate 'threads)))
      (let ((row (thread-row tree thread)))
        (when row
          (let ((cell (new Cell (row-rank~ tree row) 0)))
            (let ((data (get-cell-data~ tree cell)))
              (set-frame-color~ data (if (get-debugged-problem? thread) {Color name: Dark-Red} #f))
              (set-background~ data (if (get-debugged-visit? thread) (get-visit-highlight) #f)))
            (invalidate-cell~ tree cell))))))
  
  
  ;;;
  ;;;; Menu
  ;;;
  
  
  (method (new-context-menu object)
    (typecase object
      ((Debugged-Thread) (new-thread-menu object))
      (else {})))
  
  
  (method (new-thread-menu thread)
    (let ((menu (new Thread-Menu))
          (stop (get-active-stop~ thread)))
      (if (not stop)
          #f @wait (new Label-Item parent: menu title: "Break" icon: {Bitmap-Resource "Break"} action-handler: {Event-Handler :form on-break})
        (for-each (function (restart)
                    (let ((title (get-message~ restart))
                          (icon {Bitmap-Resource "Restart"}))
                      (new Label-Item parent: menu title: title icon: icon action-handler: (new Event-Handler execute: (function (event) (restart-stop restart))))))
                  (reverse (get-restarts~ stop)))
        @wait
        (new Separator-Item parent: menu)
        @wait
        (new Label-Item parent: menu title: "Continue" icon: {Bitmap-Resource "Continue"} action-handler: {Event-Handler :form on-continue}))
      (cleanup-separators~ menu)
      (layout-menu~ menu)
      menu)))


;;;
;;;; Threads-Tree
;;;


(class Threads-Tree extends Tree-View
  
  
  (form
    (<install>            portfolio: :icons
      (<Tree-Node-Column> title: "Thread" width: 431 toplevel-controls?: #f))))


(register-autoclass Threads-Tree)


;;;
;;;; Thread-Menu
;;;


(class Thread-Menu extends Context-Menu))
