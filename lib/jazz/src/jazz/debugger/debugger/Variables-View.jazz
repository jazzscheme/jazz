;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Variables View
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.debugger.debugger.Variables-View jazz


(import (jazz.debuggee)
        (jazz.debugger)
        (jazz.jml)
        (jazz.language.jazz)
        (jazz.language.jazz.inspector)
        (jazz.library)
        (jazz.ui)
        (jazz.utilities))


(class Variables-View extends Layout-View

  
  (property process initialize {} getter get-process setter set-process)
  (property frame   initialize {} getter get-frame   setter set-frame)


  (form
    (<install>                                       layout-type: fill
      (<Scroller-View>               name: scroller  vscroll?: #t hscroll?: #t flat?: #t
        (<!>                         name: content   layout-type: fill
          (<Tree-Header>                             flat?: #t
            (<!>                     name: content
              (<Variables-Inspector> name: variables multiple-selection?: #f selection-mode: row
                ;; remove the toplevel-controls? when the variables are inspectable once again
                (<!>                 name: name      width: 130 toplevel-controls?: #f)
                (<!>                 name: value     width: 303))))))))
  
  
  (method meta (external-name . rest)
    'variables-view)

  
  ;;;
  ;;;; Host
  ;;;
  
  
  (method meta (host-icon)
    {Bitmap-Resource "Spy"})
  
  
  (method meta (host-title)
    "Variables")
  
  
  ;;;
  ;;;; Docked
  ;;;
  
  
  (method (focus-default)
    (let ((tree (locate 'variables)))
      (acquire-focus~ tree)))

  
  ;;;
  ;;;; Component
  ;;;
  
  
  ;; The listener approach is correct but needs a bit more work as it will
  ;; not work if the variables view has not been created when an exception occurs


  (method (install rest)
    (nextmethod rest)
    @buggy
    (let ((listener (new Event-Handler target: self method-name: 'on-frame-change)))
      (add-debugger-listener listener)
      (destroy-mandatory)))


  (method (destroy)
    @buggy
    (remove-debugger-listener self)
    (nextmethod))

  
  ;;;
  ;;;; Access
  ;;;


  (method public (get-process)
    (get-process~ (locate 'variables)))


  (method public (set-process process)
    (set-process~ (locate 'variables) process))


  (method public (get-frame)
    frame)


  (method public (set-frame frm)
    (set! frame frm)
    (set-client~ (locate 'variables) (essay frame (cons frame :frame))))

  
  ;;;
  ;;;; Events
  ;;;


  (method (resize dh dv)
    (nextmethod dh dv)
    (size-figure~ (locate 'scroller) dh dv))
  
  
  (method public (on-frame-change evt)
    (let ((frame (get-property~ evt frame:)))
      (set-process {})
      (set-frame frame)
      @convert
      (typecase frame
        ((Frame-Snapshot)
         (set-process {})
         (set-frame frame))
        (else
         (set-process {})
         (set-frame {}))))))


;;;
;;;; Inspector
;;;


(class Variables-Inspector extends Inspector
  
  
  (method (inspect data kind)
    (if (is? data Debugged-Frame)
        (map (function (variable)
               (let ((name (get-variable-name~ data variable))
                     (value (get-variable-value~ data variable)))
                 (list name #f value #f #f)))
             (get-variables~ data))
      (case kind
        ((frame:) (inspect-frame data))
        ((context:) (inspect-slots data))
        (else (nextmethod data kind)))))
  
  
  (method (inspect-frame frame)
    (typecase frame
      ((Frame-Snapshot)
       (let ((parameters (get-parameters~ frame)))
         (map (function (parameter rank)
                (if (pair? parameter)
                    (bind (name value) parameter
                      (list name 0 value #f {}))
                  (list rank 0 parameter #f {})))
              parameters
              (naturals 0 (length parameters)))))))))
