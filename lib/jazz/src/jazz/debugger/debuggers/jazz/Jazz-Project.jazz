;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Jazz Projects
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.debugger.debuggers.jazz.Jazz-Project jazz


(import (jazz.builder)
        (jazz.builder.workbench)
        (jazz.designer)
        (jazz.io)
        (jazz.jrm)
        (jazz.library)
        (jazz.network)
        (jazz.utilities))


(class Jazz-Project extends Project
  
  
  (property product initialize {} accessors generate)
  (property kernel  initialize {} accessors generate)


  ;;;
  ;;;; Concrete
  ;;;
  
  
  (method (concrete?)
    #t)


  ;;;
  ;;;; Launch
  ;;;
  
  
  (method (launch (debug?: debug? #f) (profile: profile {}) (command-action: command-action {}) (command-arguments: command-arguments {}) (show-console?: show-console? #f) (wait?: wait? #f))
    (let ((ide (get-process)))
      (when debug?
        (start-remote-listener)
        (start-jazz-debugger~ ide))
      (let* ((runtime-arg   (list))
             (product-arg   (list "-run" (->string product)))
             (debugger-arg  (if debug? (list "-debugger" (encode-host/port (listening-host~ (get-remote-listener)) (listening-port~ (get-remote-listener)))) '()))
             (profile       (either profile (default-profile)))
             (profile-arg   (if profile (list "-profile" (->string profile)) '()))
             (action-arg    (if command-action (list command-action) '()))
             (arguments-arg (if command-arguments command-arguments '()))
             (arguments     (append runtime-arg action-arg product-arg debugger-arg profile-arg arguments-arg)))
        (save-all~ ide)
        (launch-kernel (project-kernel)
          ;; runtime-arguments: (list "-:m250000,h1000000")
          arguments: arguments
          show-console?: show-console?))))
  
  
  (method protected virtual (default-profile)
    {})
  
  
  (method public (project-kernel)
    (either kernel (require-kernel)))


  ;;;
  ;;;; Designer
  ;;;
  
  
  (method meta (get-class-image)
    {Bitmap-Resource "ConcreteProject"})
  
  
  (method meta (property-presentation property)
    (case (field-name property)
      ((product) "Product")
      ((kernel) "Kernel")
      (else (nextmethod property))))
  
  
  (method (get-categorized-properties)
    '(title
      product
      include-extensions
      catalog? catalog-extensions catalog-heuristics
      kernel))
  
  
  (method (get-row-instance property)
    (case (field-name property)
      ((kernel) (new File-Row nullable?: #t parameters: '(extensions: ("exe"))))
      (else (nextmethod property))))))
