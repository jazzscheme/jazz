;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Jazz Projects
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.debugger.debuggers.jazz.Jazz-Project jazz


(import (jazz.builder)
        (jazz.builder.workbench)
        (jazz.io)
        (jazz.jrm)
        (jazz.library)
        (jazz.utilities))


(class Jazz-Project extends Project
  
  
  (property product initialize {} accessors generate)


  ;;;
  ;;;; Concrete
  ;;;
  
  
  (method (concrete?)
    #t)


  ;;;
  ;;;; Launch
  ;;;
  
  
  (method (launch (configuration: configuration {}) (debug?: debug? #f) (profile: profile {}) (command-action: command-action {}) (command-arguments: command-arguments {}) (show-console?: show-console? #f) (wait?: wait? #f))
    (let ((ide (get-process)))
      (when debug?
        (start-remoting-server)
        (start-jazz-debugger~ ide))
      ;; TODO: finish the experimental interpreted? to be able
      ;; to launch a product using a fully interpreted kernel
      (let* ((interpreted?       #f)
             (runtime-arg        (list))
             (product-arg        (list "-run" (->string product)))
             (debug-arg          (if debug? (list "-debug" "true") '()))
             (controllerhost-arg (if debug? (list "-controllerhost" (host->string (listening-host~ (get-remoting-server)))) '()))
             (controllerport-arg (if debug? (list "-controllerport" (port->string (listening-port~ (get-remoting-server)))) '()))
             (profile            (either profile (default-profile)))
             (profile-arg        (if profile (list "-profile" (->string profile)) '()))
             (action-arg         (if command-action (list command-action) '()))
             (arguments-arg      (if command-arguments command-arguments '()))
             (arguments          (append runtime-arg action-arg product-arg debug-arg controllerhost-arg controllerport-arg profile-arg arguments-arg))
             (executable         (find-executable configuration interpreted?)))
        (save-all~ ide)
        @debug
        (debug executable arguments)
        (open-process
          (list
            path: (if interpreted? (get-name~ executable) (parse~ executable))
            directory: (parse~ (get-parent~ executable))
            arguments: arguments
            ;; this is not yet quite what we want as an access to the terminal
            ;; will not dynamically show the console when using show-console: #f
            stdin-redirection: #f
            stdout-redirection: #f
            stderr-redirection: #f
            show-console: show-console?)))))
  
  
  (method protected virtual (default-profile)
    {})
  
  
  (method protected virtual (find-executable configuration interpreted?)
    (let ((ide (get-process)))
      (cond (interpreted?
              (actual-runtime~ ide safety: 'debug))
            ((not configuration)
             (actual-runtime~ ide))
            (else
             (find-runtime~ ide configuration)))))


  ;;;
  ;;;; Designer
  ;;;
  
  
  (method meta (get-class-image)
    {Bitmap-Resource "ConcreteProject"})
  
  
  (method meta (property-presentation property)
    (case (field-name property)
      ((product) "Product")
      (else (nextmethod property))))
  
  
  (method (get-categorized-properties)
    '(title
      product
      include-extensions
      icon owner copyright version
      catalog? catalog-extensions catalog-heuristics))))
