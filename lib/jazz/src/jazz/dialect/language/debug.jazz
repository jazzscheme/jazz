;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Debug
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.dialect.language.debug jazz.dialect


(proclaim (warn optimizations))


(import (jazz.dialect.kernel)
        (jazz.dialect.language.format)
        (jazz.dialect.language.functional))


;;;
;;;; Console
;;;


(definition *console-port-getter*
  {})


(definition public (set-console-port-getter getter)
  (set! *console-port-getter* getter))


(definition public (get-console-port)
  (if (not *console-port-getter*)
      (terminal-port)
    (*console-port-getter*)))


(definition public (console-input-port)
  (get-console-port))

(definition public (console-output-port)
  (get-console-port))


(definition public (force-console)
  (force-output (get-console-port)))


(register-printer :console get-console-port)


;;;
;;;; Output
;;;


(definition public (console . rest)
  (console-string (format "{l detail: :describe}" rest)))


(definition public (console-string string (color: color {}))
  (let ((output (console-output-port)))
    (if (not output)
        (terminal-string string)
      (format output "{a}{%}" string)
      @wait-new-console-completion (
      (format output #"\($\)\(color Debug {a}\)\(%\){%}"# string)
      (format output #"\(prompt\){%}"#)
      )
      (force-output output)))
  (unspecified))


(definition public debug
  console)

(definition public debug-string
  console-string)


(definition public (primordial-debug . rest)
  (thread-execute (primordial-thread) 'debug
    (lambda ()
      (apply debug rest))))


;;;
;;;; Stack
;;;


(definition public (continuation-stack cont (dynamic-environment?: dynamic-environment? #f) (lexical-environment?: lexical-environment? #f) (depth: depth #f))
  (define (package-variable variable)
    (bind (name value mutable?) variable
      (list name value)))
  
  (define (package-variables variables)
    (map package-variable variables))
  
  (let ((stack (get-continuation-stack cont depth)))
    (map (lambda (cont)
           (let ((name (get-continuation-name cont)))
             (cond ((and (not dynamic-environment?) (not lexical-environment?))
                    name)
                   ((not dynamic-environment?)
                    (cons name (package-variables (get-continuation-lexical-environment cont))))
                   (else
                    (cons name (append (package-variables (get-continuation-dynamic-environment cont))
                                       (package-variables (get-continuation-lexical-environment cont))))))))
         stack)))


(definition public (execution-stack (dynamic-environment?: dynamic-environment? #f) (lexical-environment?: lexical-environment? #f) (depth: depth #f))
  (continuation-capture
    (lambda (cont)
      (continuation-stack cont dynamic-environment?: dynamic-environment? lexical-environment?: lexical-environment? depth: depth))))


;;;
;;;; Debuggee
;;;


(definition public (break . rest)
  (apply (module-ref 'jazz.debuggee 'break-internal) rest))


(definition public (inspect . rest)
  (apply (module-ref 'jazz.debuggee 'inspect-internal) rest))


(definition public (start-repl . rest)
  (apply (module-ref 'jazz.debuggee 'start-repl-internal) rest)))
