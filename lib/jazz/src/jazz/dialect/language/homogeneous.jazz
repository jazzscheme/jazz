;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Homogeneous Vectors
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.dialect.language.homogeneous jazz.dialect


(proclaim (warn optimizations))


(import (jazz.dialect.kernel)
        (jazz.dialect.language.functional)
        (jazz.dialect.language.object))


;;;
;;;; S8Vector
;;;


(class S8Vector-Class extends Sequence-Class
  
  
  (method override (allocate-sequence len)
    (make-s8vector len)))


(class primitive S8Vector metaclass S8Vector-Class extends Sequence
  
  
  (method override (initialize . rest)
    (native-class "s8vectors"))


  @convert
  (method (object-similar? object)
    (and (vector? object)
         (zero? (cardinality self))
         (zero? (cardinality object))))
  
  
  (method override (sequence-element n)
    (s8vector-ref self n))
  
  
  (method override (sequence-set-element! n obj)
    (s8vector-set! self n obj))
  
  
  (method override (sequence-cardinality)
    (s8vector-length self))
  
  
  (method override (sequence-tail n)
    (list->s8vector (tail (s8vector->list self) n)))
  
  
  (method override (sequence-last)
    (element self (- (cardinality self) 1)))
  
  
  (method override (sequence-butlast)
    (list->s8vector (butlast (s8vector->list self)))))


(specialize inline (element vector <s8vector> n) <object>
  (s8vector-ref vector n))


(specialize inline (set-element! vector <s8vector> n obj) <void>
  (s8vector-set! vector n obj))


(specialize inline (cardinality vector <s8vector>) <int>
  (s8vector-length vector))


;;;
;;;; U8Vector
;;;


(class U8Vector-Class extends Sequence-Class
  
  
  (method override (allocate-sequence len)
    (make-u8vector len)))


(class primitive U8Vector metaclass U8Vector-Class extends Sequence
  
  
  (method override (initialize . rest)
    (native-class "u8vectors"))


  @convert
  (method (object-similar? object)
    (and (vector? object)
         (zero? (cardinality self))
         (zero? (cardinality object))))
  
  
  (method override (sequence-element n)
    (u8vector-ref self n))
  
  
  (method override (sequence-set-element! n obj)
    (u8vector-set! self n obj))
  
  
  (method override (sequence-cardinality)
    (u8vector-length self))
  
  
  (method override (sequence-tail n)
    (list->u8vector (tail (u8vector->list self) n)))
  
  
  (method override (sequence-last)
    (element self (- (cardinality self) 1)))
  
  
  (method override (sequence-butlast)
    (list->u8vector (butlast (u8vector->list self)))))


(specialize inline (element vector <u8vector> n) <object>
  (u8vector-ref vector n))


(specialize inline (set-element! vector <u8vector> n obj) <void>
  (u8vector-set! vector n obj))


(specialize inline (cardinality vector <u8vector>) <int>
  (u8vector-length vector))


;;;
;;;; S16Vector
;;;


(class S16Vector-Class extends Sequence-Class
  
  
  (method override (allocate-sequence len)
    (make-s16vector len)))


(class primitive S16Vector metaclass S16Vector-Class extends Sequence
  
  
  (method override (initialize . rest)
    (native-class "s16vectors"))


  @convert
  (method (object-similar? object)
    (and (vector? object)
         (zero? (cardinality self))
         (zero? (cardinality object))))
  
  
  (method override (sequence-element n)
    (s16vector-ref self n))
  
  
  (method override (sequence-set-element! n obj)
    (s16vector-set! self n obj))
  
  
  (method override (sequence-cardinality)
    (s16vector-length self))
  
  
  (method override (sequence-tail n)
    (list->s16vector (tail (s16vector->list self) n)))
  
  
  (method override (sequence-last)
    (element self (- (cardinality self) 1)))
  
  
  (method override (sequence-butlast)
    (list->s16vector (butlast (s16vector->list self)))))


(specialize inline (element vector <s16vector> n) <object>
  (s16vector-ref vector n))


(specialize inline (set-element! vector <s16vector> n obj) <void>
  (s16vector-set! vector n obj))


(specialize inline (cardinality vector <s16vector>) <int>
  (s16vector-length vector))


;;;
;;;; U16Vector
;;;


(class U16Vector-Class extends Sequence-Class
  
  
  (method override (allocate-sequence len)
    (make-u16vector len)))


(class primitive U16Vector metaclass U16Vector-Class extends Sequence
  
  
  (method override (initialize . rest)
    (native-class "u16vectors"))


  @convert
  (method (object-similar? object)
    (and (vector? object)
         (zero? (cardinality self))
         (zero? (cardinality object))))
  
  
  (method override (sequence-element n)
    (u16vector-ref self n))
  
  
  (method override (sequence-set-element! n obj)
    (u16vector-set! self n obj))
  
  
  (method override (sequence-cardinality)
    (u16vector-length self))
  
  
  (method override (sequence-tail n)
    (list->u16vector (tail (u16vector->list self) n)))
  
  
  (method override (sequence-last)
    (element self (- (cardinality self) 1)))
  
  
  (method override (sequence-butlast)
    (list->u16vector (butlast (u16vector->list self)))))


(specialize inline (element vector <u16vector> n) <object>
  (u16vector-ref vector n))


(specialize inline (set-element! vector <u16vector> n obj) <void>
  (u16vector-set! vector n obj))


(specialize inline (cardinality vector <u16vector>) <int>
  (u16vector-length vector))


;;;
;;;; S32Vector
;;;


(class S32Vector-Class extends Sequence-Class
  
  
  (method override (allocate-sequence len)
    (make-s32vector len)))


(class primitive S32Vector metaclass S32Vector-Class extends Sequence
  
  
  (method override (initialize . rest)
    (native-class "s32vectors"))


  @convert
  (method (object-similar? object)
    (and (vector? object)
         (zero? (cardinality self))
         (zero? (cardinality object))))
  
  
  (method override (sequence-element n)
    (s32vector-ref self n))
  
  
  (method override (sequence-set-element! n obj)
    (s32vector-set! self n obj))
  
  
  (method override (sequence-cardinality)
    (s32vector-length self))
  
  
  (method override (sequence-tail n)
    (list->s32vector (tail (s32vector->list self) n)))
  
  
  (method override (sequence-last)
    (element self (- (cardinality self) 1)))
  
  
  (method override (sequence-butlast)
    (list->s32vector (butlast (s32vector->list self)))))


(specialize inline (element vector <s32vector> n) <object>
  (s32vector-ref vector n))


(specialize inline (set-element! vector <s32vector> n obj) <void>
  (s32vector-set! vector n obj))


(specialize inline (cardinality vector <s32vector>) <int>
  (s32vector-length vector))


;;;
;;;; U32Vector
;;;


(class U32Vector-Class extends Sequence-Class
  
  
  (method override (allocate-sequence len)
    (make-u32vector len)))


(class primitive U32Vector metaclass U32Vector-Class extends Sequence
  
  
  (method override (initialize . rest)
    (native-class "u32vectors"))


  @convert
  (method (object-similar? object)
    (and (vector? object)
         (zero? (cardinality self))
         (zero? (cardinality object))))
  
  
  (method override (sequence-element n)
    (u32vector-ref self n))
  
  
  (method override (sequence-set-element! n obj)
    (u32vector-set! self n obj))
  
  
  (method override (sequence-cardinality)
    (u32vector-length self))
  
  
  (method override (sequence-tail n)
    (list->u32vector (tail (u32vector->list self) n)))
  
  
  (method override (sequence-last)
    (element self (- (cardinality self) 1)))
  
  
  (method override (sequence-butlast)
    (list->u32vector (butlast (u32vector->list self)))))


(specialize inline (element vector <u32vector> n) <object>
  (u32vector-ref vector n))


(specialize inline (set-element! vector <u32vector> n obj) <void>
  (u32vector-set! vector n obj))


(specialize inline (cardinality vector <u32vector>) <int>
  (u32vector-length vector))


;;;
;;;; S64Vector
;;;


(class S64Vector-Class extends Sequence-Class
  
  
  (method override (allocate-sequence len)
    (make-s64vector len)))


(class primitive S64Vector metaclass S64Vector-Class extends Sequence
  
  
  (method override (initialize . rest)
    (native-class "s64vectors"))


  @convert
  (method (object-similar? object)
    (and (vector? object)
         (zero? (cardinality self))
         (zero? (cardinality object))))
  
  
  (method override (sequence-element n)
    (s64vector-ref self n))
  
  
  (method override (sequence-set-element! n obj)
    (s64vector-set! self n obj))
  
  
  (method override (sequence-cardinality)
    (s64vector-length self))
  
  
  (method override (sequence-tail n)
    (list->s64vector (tail (s64vector->list self) n)))
  
  
  (method override (sequence-last)
    (element self (- (cardinality self) 1)))
  
  
  (method override (sequence-butlast)
    (list->s64vector (butlast (s64vector->list self)))))


(specialize inline (element vector <s64vector> n) <object>
  (s64vector-ref vector n))


(specialize inline (set-element! vector <s64vector> n obj) <void>
  (s64vector-set! vector n obj))


(specialize inline (cardinality vector <s64vector>) <int>
  (s64vector-length vector))


;;;
;;;; U64Vector
;;;


(class U64Vector-Class extends Sequence-Class
  
  
  (method override (allocate-sequence len)
    (make-u64vector len)))


(class primitive U64Vector metaclass U64Vector-Class extends Sequence
  
  
  (method override (initialize . rest)
    (native-class "u64vectors"))


  @convert
  (method (object-similar? object)
    (and (vector? object)
         (zero? (cardinality self))
         (zero? (cardinality object))))
  
  
  (method override (sequence-element n)
    (u64vector-ref self n))
  
  
  (method override (sequence-set-element! n obj)
    (u64vector-set! self n obj))
  
  
  (method override (sequence-cardinality)
    (u64vector-length self))
  
  
  (method override (sequence-tail n)
    (list->u64vector (tail (u64vector->list self) n)))
  
  
  (method override (sequence-last)
    (element self (- (cardinality self) 1)))
  
  
  (method override (sequence-butlast)
    (list->u64vector (butlast (u64vector->list self)))))


(specialize inline (element vector <u64vector> n) <object>
  (u64vector-ref vector n))


(specialize inline (set-element! vector <u64vector> n obj) <void>
  (u64vector-set! vector n obj))


(specialize inline (cardinality vector <u64vector>) <int>
  (u64vector-length vector))


;;;
;;;; F32Vector
;;;


(class F32Vector-Class extends Sequence-Class
  
  
  (method override (allocate-sequence len)
    (make-f32vector len)))


(class primitive F32Vector metaclass F32Vector-Class extends Sequence
  
  
  (method override (initialize . rest)
    (native-class "f32vectors"))


  @convert
  (method (object-similar? object)
    (and (vector? object)
         (zero? (cardinality self))
         (zero? (cardinality object))))
  
  
  (method override (sequence-element n)
    (f32vector-ref self n))
  
  
  (method override (sequence-set-element! n obj)
    (f32vector-set! self n obj))
  
  
  (method override (sequence-cardinality)
    (f32vector-length self))
  
  
  (method override (sequence-tail n)
    (list->f32vector (tail (f32vector->list self) n)))
  
  
  (method override (sequence-last)
    (element self (- (cardinality self) 1)))
  
  
  (method override (sequence-butlast)
    (list->f32vector (butlast (f32vector->list self)))))


(specialize inline (element vector <f32vector> n) <object>
  (f32vector-ref vector n))


(specialize inline (set-element! vector <f32vector> n obj) <void>
  (f32vector-set! vector n obj))


(specialize inline (cardinality vector <f32vector>) <int>
  (f32vector-length vector))


;;;
;;;; F64Vector
;;;


(class F64Vector-Class extends Sequence-Class
  
  
  (method override (allocate-sequence len)
    (make-f64vector len)))


(class primitive F64Vector metaclass F64Vector-Class extends Sequence
  
  
  (method override (initialize . rest)
    (native-class "f64vectors"))


  @convert
  (method (object-similar? object)
    (and (vector? object)
         (zero? (cardinality self))
         (zero? (cardinality object))))
  
  
  (method override (sequence-element n)
    (f64vector-ref self n))
  
  
  (method override (sequence-set-element! n obj)
    (f64vector-set! self n obj))
  
  
  (method override (sequence-cardinality)
    (f64vector-length self))
  
  
  (method override (sequence-tail n)
    (list->f64vector (tail (f64vector->list self) n)))
  
  
  (method override (sequence-last)
    (element self (- (cardinality self) 1)))
  
  
  (method override (sequence-butlast)
    (list->f64vector (butlast (f64vector->list self)))))


(specialize inline (element vector <f64vector> n) <object>
  (f64vector-ref vector n))


(specialize inline (set-element! vector <f64vector> n obj) <void>
  (f64vector-set! vector n obj))


(specialize inline (cardinality vector <f64vector>) <int>
  (f64vector-length vector)))
