;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Parse
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library protected jazz.dialect.language.parse jazz.dialect


(proclaim (warn optimizations))


(import (jazz.dialect.language.exception)
        (jazz.dialect.language.format)
        (jazz.dialect.language.functional))


(definition public (parse-integer string)
  (if (and (not (empty-string? string)) (numeric? string))
      (read-string-element string)
    (signal (new Convertion-Error object: string type: "integer"))))


(definition public (parse-hexadecimal string)
  (read-string-element (format "#x{a}" string)))


(definition public (parse-boolean string)
  (cond ((not string) #f)
        ((or (ci=? string "#f") (ci=? string "false")) #f)
        ((or (ci=? string "#t") (ci=? string "true")) #t)
        (else (signal (new Convertion-Error object: string type: "boolean")))))


(definition public (parse-strings string (separator: separator ","))
  (if (or (empty-string? string) (= string "{}"))
      {}
    (map (function (string)
           (trim-spaces string))
         (split string separator))))


(definition public (parse-delimited-string string (separator: separator ","))
  (map (function (string)
         (parse-strings string separator: " "))
       (parse-strings string separator: separator))))
