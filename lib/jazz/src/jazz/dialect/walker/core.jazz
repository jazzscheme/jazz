;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Core Walker
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library protected jazz.dialect.walker.core jazz.dialect


(import (jazz.dialect.kernel)
        (jazz.dialect.language.exception)
        (jazz.dialect.language.format)
        (jazz.dialect.language.functional)
        (jazz.dialect.language.object))


;;;
;;;; Walk-Binding
;;;


(class Walk-Binding extends Type)


;;;
;;;; Lexical-Binding
;;;


(class Lexical-Binding extends Walk-Binding
  
  
  (slot name getter generate)
  (slot type getter generate)
  
  
  (method (print output detail)
    (print-unreadable self output
      (function (output)
        (format output "{s}" (get-name))))))


;;;
;;;; Declaration
;;;


(class Declaration extends Lexical-Binding
  
  
  (slot access        getter generate)
  (slot compatibility getter generate)
  (slot attributes    getter generate)
  (slot toplevel      getter generate)
  (slot parent        getter generate)
  (slot locator       getter generate)
  (slot source        getter generate))


;;;
;;;; Declaration-Reference
;;;


(class Declaration-Reference extends Object
  
  
  (slot name        getter generate)
  (slot declaration getter generate))


;;;
;;;; Library-Reference
;;;


(class Library-Reference extends Declaration-Reference)


;;;
;;;; Export-Reference
;;;


(class Export-Reference extends Declaration-Reference
  
  
  (slot library-reference getter generate))


;;;
;;;; Autoload-Reference
;;;


(class Autoload-Reference extends Export-Reference)


;;;
;;;; Module-Declaration
;;;


(class Module-Declaration extends Declaration
  
  
  (slot requires getter generate))


;;;
;;;; Namespace-Declaration
;;;


(class Namespace-Declaration extends Declaration
  
  
  (slot lookups         getter generate)
  (slot children-lookup getter generate)
  (slot body            getter generate))


;;;
;;;; Library-Declaration
;;;


(class Library-Declaration extends Namespace-Declaration
  
  
  (slot dialect-name    getter generate)
  (slot dialect-invoice getter generate)
  (slot requires        getter generate)
  (slot exports         getter generate)
  (slot imports         getter generate)
  (slot proclaims       getter generate)
  (slot literals        getter generate)
  (slot variables       getter generate)
  (slot references      getter generate)
  (slot inclusions      getter generate)
  (slot autoloads       getter generate))


;;;
;;;; Library-Invoice
;;;


(class Library-Invoice extends Object
  
  
  (slot name    getter generate)
  (slot library getter generate)
  (slot phase   getter generate)
  (slot version getter generate)
  (slot only    getter generate)
  (slot except  getter generate)
  (slot prefix  getter generate)
  (slot rename  getter generate)
  
  
  (method (print printer readably)
    (print-unreadable self printer
      (function (printer)
        (format printer "on {s}"
          name)))))


;;;
;;;; Export-Invoice
;;;


(class Export-Invoice extends Library-Invoice
  
  
  (slot autoload getter generate))


;;;
;;;; Import-Invoice
;;;


(class Import-Invoice extends Library-Invoice
  
  
  (slot hit? getter generate))


;;;
;;;; Export
;;;


(class Export-Declaration extends Declaration
  
  
  (slot symbol getter generate))


;;;
;;;; Autoload
;;;


(class Autoload-Declaration extends Declaration
  
  
  (slot library          getter generate)
  (slot exported-library getter generate)
  (slot declaration      getter generate))


;;;
;;;; Macro
;;;


(class Macro-Declaration extends Declaration
  
  
  (slot signature getter generate)
  (slot body      getter generate))


;;;
;;;; Syntax
;;;


(class Syntax-Declaration extends Declaration
  
  
  (slot signature getter generate)
  (slot body      getter generate))


;;;
;;;; C-Type
;;;


(class C-Type-Declaration extends Declaration
  
  
  (slot kind          getter generate)
  (slot expansion     getter generate)
  (slot base-type     getter generate)
  (slot pointer-types getter generate)
  (slot inclusions    getter generate)
  (slot c-to-scheme   getter generate)
  (slot scheme-to-c   getter generate)
  (slot declare       getter generate))


;;;
;;;; C-Definition
;;;


(class C-Definition-Declaration extends Declaration
  
  
  (slot signature       getter generate)
  (slot parameter-types getter generate)
  (slot result-type     getter generate)
  (slot c-name          getter generate)
  (slot scope           getter generate)
  (slot body            getter generate))


;;;
;;;; Walk-Location
;;;


(class package Walk-Location extends Object
  
  
  (slot module-locator      getter generate)
  (slot declaration-locator getter generate)
  (slot locat               getter generate)
  
  
  (method (initialize module-locator declaration-locator locat)
    (nextmethod)
    (set! module-locator~self module-locator)
    (set! declaration-locator~self declaration-locator)
    (set! locat~self locat))
  
  
  (method (fold-literal)
    `(new Walk-Location ',module-locator ',declaration-locator ',locat))
  
  
  (method (print printer readably)
    (format printer "~{{a} {s} {s} {s}}"
            (identifier-name (type-name (class-of self)))
            module-locator
            declaration-locator
            locat)))


;;;
;;;; Walk-Problem
;;;


(class package Walk-Problem extends Error
  
  
  (slot location getter generate))


;;;
;;;; Walk-Problems
;;;


(class package Walk-Problems extends Error
  
  
  (slot warnings getter generate)
  (slot errors   getter generate))


;;;
;;;; Walk-Warning
;;;


(class package Walk-Warning extends Walk-Problem)


;;;
;;;; Walk-Error
;;;


(class package Walk-Error extends Walk-Problem)


;;;
;;;; Unresolved-Error
;;;


(class package Unresolved-Error extends Walk-Error
  
  
  (slot symbol getter generate))


;;;
;;;; Signature
;;;


(class Signature extends Object
  
  
  (slot mandatory  getter generate)
  (slot positional getter generate)
  (slot optional   getter generate)
  (slot named      getter generate)
  (slot rest       getter generate))


;;;
;;;; Symbol-Binding
;;;


(class Symbol-Binding extends Lexical-Binding)


;;;
;;;; Variable
;;;


(class Variable extends Symbol-Binding
  
  
  (slot reference-count getter generate))


;;;
;;;; NextMethod-Variable
;;;


(class NextMethod-Variable extends Variable)


;;;
;;;; Parameter
;;;


(class Parameter extends Variable)


;;;
;;;; Dynamic-Parameter
;;;


(class Dynamic-Parameter extends Parameter
  
  
  (slot class getter generate))


;;;
;;;; Optional-Parameter
;;;


(class Optional-Parameter extends Parameter
  
  
  (slot default getter generate))


;;;
;;;; Named-Parameter
;;;


(class Named-Parameter extends Parameter
  
  
  (slot default getter generate))


;;;
;;;; Rest-Parameter
;;;


(class Rest-Parameter extends Parameter)


;;;
;;;; Expression
;;;


(class Expression extends Object
  
  
  (slot type   getter generate)
  (slot source getter generate))


;;;
;;;; Proclaim
;;;


(class Proclaim extends Expression
  
  
  (slot clauses getter generate))


;;;
;;;; Constant
;;;


(class Constant extends Expression
  
  
  (slot expansion getter generate))


;;;
;;;; Delay
;;;


(class Delay extends Expression
  
  
  (slot expression getter generate))


;;;
;;;; Quasiquote
;;;


(class Quasiquote extends Expression
  
  
  (slot form getter generate))


;;;
;;;; Reference
;;;


(class Reference extends Expression
  
  
  (slot binding getter generate)
  
  
  (method (print printer readably)
    (print-unreadable self printer
      (function (printer)
        (format printer "to {s}"
          binding)))))


;;;
;;;; Assignment
;;;


(class Assignment extends Expression
  
  
  (slot binding getter generate)
  (slot value   getter generate))


;;;
;;;; Lambda
;;;


(class Lambda extends Expression
  
  
  (slot signature getter generate)
  (slot body      getter generate))


;;;
;;;; Let
;;;


(class Let extends Expression
  
  
  (slot bindings getter generate)
  (slot body     getter generate))


;;;
;;;; Named Let
;;;


(class Named-Let extends Let
  
  
  (slot variable getter generate))


;;;
;;;; Letstar
;;;


(class Letstar extends Expression
  
  
  (slot bindings getter generate)
  (slot body     getter generate))


;;;
;;;; Letrec
;;;


(class Letrec extends Expression
  
  
  (slot bindings getter generate)
  (slot body     getter generate))


;;;
;;;; Receive
;;;


(class Receive extends Expression
  
  
  (slot variables  getter generate)
  (slot expression getter generate)
  (slot body       getter generate))


;;;
;;;; Body
;;;


(class Body extends Expression
  
  
  (slot internal-defines getter generate)
  (slot expressions      getter generate))


;;;
;;;; Internal Define
;;;


(class Internal-Define extends Expression
  
  
  (slot variable getter generate)
  (slot value    getter generate))


;;;
;;;; Begin
;;;


(class Begin extends Expression
  
  
  (slot expressions getter generate))


;;;
;;;; Do
;;;


(class Do extends Expression
  
  
  (slot bindings getter generate)
  (slot test     getter generate)
  (slot result   getter generate)
  (slot body     getter generate))


;;;
;;;; Call
;;;


(class Call extends Expression
  
  
  (slot operator  getter generate)
  (slot arguments getter generate))


;;;
;;;; If
;;;


(class If extends Expression
  
  
  (slot test getter generate)
  (slot yes  getter generate)
  (slot no   getter generate))


;;;
;;;; Cond
;;;


(class Cond extends Expression
  
  
  (slot clauses getter generate))


;;;
;;;; Case
;;;


(class Case extends Expression
  
  
  (slot target  getter generate)
  (slot clauses getter generate))


;;;
;;;; And
;;;


(class And extends Expression
  
  
  (slot expressions getter generate))


;;;
;;;; Or
;;;


(class Or extends Expression
  
  
  (slot expressions getter generate))


;;;
;;;; Declare
;;;


(class Declare extends Expression
  
  
  (slot declarations getter generate))


;;;
;;;; C Include
;;;


(class C-Include extends Expression
  
  
  (slot name getter generate))


;;;
;;;; C Declare
;;;


(class C-Declare extends Expression
  
  
  (slot code getter generate))


;;;
;;;; C Named Declare
;;;


(class C-Named-Declare-Declaration extends Declaration
  
  
  (slot code getter generate))


;;;
;;;; C Initialize
;;;


(class C-Initialize extends Expression
  
  
  (slot code getter generate))


;;;
;;;; C Function
;;;


(class C-Function extends Expression
  
  
  (slot expansion getter generate))


;;;
;;;; Parameterize
;;;


(class Parameterize extends Expression
  
  
  (slot bindings getter generate)
  (slot body     getter generate))


;;;
;;;; Time Special
;;;


(class Time-Special extends Expression
  
  
  (slot expression getter generate)))
