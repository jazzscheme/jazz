;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Debuggee
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.language.jazz.debuggee jazz


(import (jazz.jml)
        (jazz.language.jazz)
        (jazz.library)
        (jazz.literals)
        (jazz.platform)
        (jazz.ui)
        (jazz.ui.development)
        (jazz.ui.offscreen)
        (jazz.ui.view)
        (jazz.ui.window)
        (jazz.utilities))


(definition In-Pick?
  #f)

(definition All-Pickers
  '())

(definition Highlight-Figure?
  #f)

(definition Highlighted-Player
  {})

(definition Highlighted-View
  {})

(definition Highlighted-Root-Rect
  {})

(definition Highlighted-View-Rect
  {})

(definition Highlighted-Row-Rect
  {})

(definition Report-Figure?
  #f)

(definition Obscure-Unhighlighted?
  #f)


(definition public (pick-figure (include: include {})
                                (exclude: exclude {})
                                (click: click {})
                                (menu: menu {})
                                (highlight: highlight {})
                                (highlight-figure?: highlight-figure? #t)
                                (report-figure?: report-figure? #t)
                                (obscure-unhighlighted?: obscure-unhighlighted? #t)
                                (tooltips?: tooltips? #t))
  (unless In-Pick?
    (with-locked-update
      (function ()
        (let ((windows (process-windows))
              (toplevel (get-toplevel)))
          (when (not-null? windows)
            (setup-pick)
            (set! All-Pickers '())
            (set! Highlight-Figure? highlight-figure?)
            (set! Report-Figure? report-figure?)
            (set! Obscure-Unhighlighted? obscure-unhighlighted?)
            (for-each (function (overlapped)
                        (when (and (or (not include) (memq? overlapped include))
                                   (or (not exclude) (not (memq? overlapped exclude))))
                          (install-overlays overlapped click menu highlight tooltips?)
                          (invalidate-window~ overlapped)
                          (set! All-Pickers (cons overlapped All-Pickers))))
                      windows)
            (simulate-mouse-move)
            (set! In-Pick? #t)))))))


(definition (setup-pick)
  (inhibit-view-cursor #t)
  (set-escape-handler end-pick))


(definition (install-overlays overlapped click menu highlight tooltips?)
  (for-each-window overlapped
    (function (window)
      (let ((root (get-root~ window)))
        (new Picker-Overlay
          parent: root
          position: {Point 0 0}
          size: (get-size~ root)
          click: click
          menu: menu
          highlight: highlight
          tooltips?: tooltips?)))))


(definition (remove-overlays overlapped)
  (for-each-window overlapped
    (function (window)
      (let ((root (get-root~ window)))
        (when root
          (let ((overlay (find-type~ root Picker-Overlay)))
            (when overlay
              (close~ overlay))))))))


(definition (for-each-window overlapped proc)
  (for-each-descendant~ overlapped
    (function (window level)
      (when (and ;; because on windows overlapped can be descendants of the toplevel
                 ;; this test is necessary to not process those overlapped twice
                 (or (eq? window overlapped) (is-not? window Overlapped))
                 (is? window View-Player) (get-visible?~ window))
        (proc window)))))


(definition (simulate-mouse-move)
  (let ((view (mouse-view)))
    (when view
      (let* ((player (get-player~ view))
             (display (get-display~ view))
             (root (get-root~ view))
             (overlapped (get-overlapped~ view))
             (picker (find-picker overlapped))
             (pos (mouse-position~ view)))
        (receive (player view root-rect view-rect row-rect) (highlight-info view pos)
          (set! Highlighted-Player player)
          (set! Highlighted-View view)
          (set! Highlighted-Root-Rect root-rect)
          (set! Highlighted-View-Rect view-rect)
          (set! Highlighted-Row-Rect row-rect))))))


(definition (find-picker overlapped)
  (find-if (function (picker)
             (eq? picker overlapped))
           All-Pickers))


(definition (end-pick)
  (set! In-Pick? #f)
  (inhibit-view-cursor #f)
  (setup-highlight {} {})
  (set-escape-handler {})
  (close-pickers))


(definition (close-pickers)
  (for-each remove-overlays All-Pickers)
  (set! All-Pickers '()))


;;;
;;;; Highlight
;;;


(definition (setup-highlight view pos)
  (receive (player view root-rect view-rect row-rect) (highlight-info view pos)
    (when (or (neq? player Highlighted-Player)
              (neq? view Highlighted-View)
              (nu/=? view-rect Highlighted-View-Rect)
              (nu/=? row-rect Highlighted-Row-Rect))
      (let ((old-player Highlighted-Player))
        (set! Highlighted-Player player)
        (set! Highlighted-View view)
        (set! Highlighted-Root-Rect root-rect)
        (set! Highlighted-View-Rect view-rect)
        (set! Highlighted-Row-Rect row-rect)
        (if (and player (eq? player old-player))
            (redraw-window~ player)
          (when old-player
            (redraw-window~ old-player))
          (when player
            (redraw-window~ player)))))))


(definition (highlight-info view pos)
  (if (not view)
      (values {} {} {} {} {})
    (let* ((player (get-player~ view))
           (display (get-display~ view))
           (root (get-root~ view))
           (root-rect (get-bounds~ root))
           (view-rect (acquire~ root display (get-bounds~ display)))
           (view-row-rect (determine-row-rect view pos))
           (row-rect (essay view-row-rect (acquire~ root view view-row-rect))))
      (values player view root-rect view-rect row-rect))))


(definition (determine-row-rect view pos)
  (when (is? view Tree-View)
    (let ((cell (view->tree~ view pos)))
      (when cell
        (cell-rect~ view cell)))))


;;;
;;;; Overlay
;;;


(class Picker-Overlay extends View
  
  
  (property click     accessors generate)
  (property menu      accessors generate)
  (property highlight accessors generate)
  (property tooltips? accessors generate)
  
  
  ;;;
  ;;;; Cursor
  ;;;
  
  
  (method (cursor-update pos)
    (set-cursor :spy))
  
  
  ;;;
  ;;;; Tooltip
  ;;;
  
  
  (method (get-tooltip?)
    tooltips?)
  
  
  (method (get-formatted-tooltip?)
    #t)
  
  
  (method (get-tooltip-context pos)
    (receive (view pos) (find-view-info pos)
      (when view
        (let* ((view-player (get-player~ view))
               (view-root (get-root~ view))
               (view-bounds (get-bounds~ view))
               (root (get-root))
               (row-rect (determine-row-rect view pos))
               (rect (acquire~ view-root view (either row-rect view-bounds)))
               (bounds (acquire~ player view-player rect)))
          (new Tooltip-Context
            view: self
            text: (display-description (view-describe view pos))
            bounds: bounds
            font: {Font name: Label})))))
  
  
  (method (display-description description)
    (cons "Properties"
          (map (function (info)
                 (bind (name value) info
                   (list :bulleted (format "{a}: {s}" name value))))
               description)))
  
  
  ;;;
  ;;;; Mouse
  ;;;
  
  
  (method (mouse-move pos)
    (nextmethod pos)
    (receive (view pos) (find-view-info pos)
      (when highlight
        (let ((proc (if (eq? highlight #t)
                        setup-highlight
                      highlight)))
          (proc view pos)))
      (when Report-Figure?
        (if (not view)
            (user-message "{a}" self)
          (user-message "{a} {a}" view pos)))))
  
  
  (method (mouse-up pos)
    (nextmethod pos)
    (receive (view pos) (find-view-info pos)
      (with-locked-update
        (function ()
          (end-pick)
          (click view pos)))))
  
  
  (method (find-view-info pos)
    (let* ((root (get-root))
           (root-pos (acquire~ root self pos))
           (view (find-drawing~ root root-pos ignore: (list self)))
           (view-pos (essay view (acquire~ view root root-pos))))
      (values view view-pos)))
  
  
  ;;;
  ;;;; Menu
  ;;;
  
  
  (method (context-menu pos)
    (if (not menu)
        (nextmethod pos)
      (close-popups)
      (receive (view pos) (find-view-info pos)
        (let ((root (get-root))
              (menu (menu view pos)))
          (setup-actions menu view pos)
          (track-popup-menu~ root menu (acquire~ root view pos))
          processed))))
  
  
  (method (setup-actions menu view pos)
    (for-each (function (item)
                (let* ((action-handler (get-action-handler~ item))
                       (execute (function (event)
                                  (end-pick)
                                  (when action-handler
                                    (let* ((properties (augment view: view pos: pos (get-properties~ action-handler)))
                                           (event (apply new Action-Event :action self properties)))
                                      (invoke~ action-handler self event))))))
                  (set-action-handler~ item (new Event-Handler execute: execute))))
              (get-children~ menu)))
  
  
  ;;;
  ;;;; Draw
  ;;;
  
  
  (definition Overlay-Color
    {Color name: Black alpha: 0.25})
  
  
  (definition Highlight-Color
    {Color red: 109 green: 109 blue: 177})
  
  (definition Highlight-Pen
    (new Pen style: 'solid width: 2 color: Highlight-Color))
  
  
  (method (draw surface context lh lv)
    (if (or (not Highlighted-Player) (neq? (get-root) (get-root~ Highlighted-Player)))
        (when Obscure-Unhighlighted?
          (fill-rect~ surface (get-bounds) Overlay-Color))
      (if (not Highlight-Figure?)
          (rectangle~ surface Highlighted-Root-Rect Highlight-Pen {})
        (if Highlighted-Row-Rect
            (rectangle~ surface Highlighted-Row-Rect Highlight-Pen {})
          (when (and Highlighted-View-Rect (nu/=? Highlighted-View-Rect Highlighted-Root-Rect))
            (rectangle~ surface Highlighted-View-Rect Highlight-Pen {}))))))))
