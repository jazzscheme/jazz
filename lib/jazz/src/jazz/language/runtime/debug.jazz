;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Debug
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.language.runtime.debug jazz.dialect


(proclaim (warn optimizations))


(import (jazz.language.runtime.kernel)
        (jazz.language.runtime.format)
        (jazz.language.runtime.functional))


;;;
;;;; Console
;;;


(definition *console-port-getter*
  #f)


(definition public (set-console-port-getter getter)
  (set! *console-port-getter* getter))


(definition public (get-console-port)
  (if (not *console-port-getter*)
      (terminal-port)
    (*console-port-getter*)))


(definition public (attached-console-port)
  (if (not *console-port-getter*)
      (and (controlling-terminal?) (terminal-port))
    (*console-port-getter*)))


(definition public (console-input-port)
  (get-console-port))

(definition public (console-output-port)
  (get-console-port))


(definition public (force-console)
  (force-output (get-console-port)))


(register-printer :console get-console-port)


;;;
;;;; Log
;;;


(definition platform-log
  #f)

(definition package (set-platform-log log)
  (set! platform-log log))


;;;
;;;; Output
;;;


(definition *console-clear*
  #f)


(definition public (set-console-clear clear)
  (set! *console-clear* clear))


(definition console-mutex
  (make-mutex 'console))

(definition (with-console-mutex thunk)
  (mutex-lock! console-mutex)
  (prog1 (thunk)
    (mutex-unlock! console-mutex)))


(definition public (console-string string (color: color #f))
  (with-console-mutex
    (lambda ()
      (let ((output (attached-console-port)))
        (if (not output)
            (when platform-log
              (platform-log string))
          (format output "{a}" string)
          @wait-new-console-completion (
                                        (format output #"\($\)\(color Debug {a}\)\(%\)"# string)
                                        (format output #"\(prompt\){%}"#)
                                        )
          (force-output output)))
      (unspecified))))


(definition public (console-line string (color: color #f))
  (with-console-mutex
    (lambda ()
      (let ((output (attached-console-port)))
        (if (not output)
            (when platform-log
              (platform-log string))
          (format output "{a}{%}" string)
          @wait-new-console-completion (
                                        (format output #"\($\)\(color Debug {a}\)\(%\){%}"# string)
                                        (format output #"\(prompt\){%}"#)
                                        )
          (force-output output)))
      (unspecified))))


(definition public (console . rest)
  (console-line (format "{l detail: :describe}" rest)))


(definition public (debug-line . rest)
  (apply console-line rest))


(definition public (debug-string . rest)
  (apply console-string rest))


(definition public (debug . rest)
  (apply console rest))


(definition public (clear-debug)
  (if (not *console-clear*)
      (clear-terminal)
    (*console-clear*)))


;;;
;;;; Stack
;;;


(definition procedure-name-cache <table>
  (make-table test: eq?))


(definition public (get-procedure-name procedure)
  (define (present-anonymous)
    (let ((output (open-output-string)))
      (write procedure output)
      (get-output-string output)))
  
  (if procedure
      (or (table-ref procedure-name-cache procedure #f)
          (let ((name (or (procedure-name procedure)
                          @wait-check-all-use-cases
                          (present-anonymous))))
            (table-set! procedure-name-cache procedure name)
            name))
    "(interaction)"))


(definition public (get-continuation-name cont)
  (get-procedure-name (continuation-creator cont)))


(definition public (continuation-stack cont (dynamic-environment?: dynamic-environment? #f) (lexical-environment?: lexical-environment? #f) (identifiers?: identifiers? #f) (depth: depth #f))
  (define (package-name name)
    (if (and identifiers? (symbol? name))
        (reference-name name)
      name))
  
  (define (package-variable variable)
    (bind (name value mutable?) variable
      (list name value)))
  
  (define (package-variables variables)
    (map package-variable variables))
  
  (let ((stack (get-continuation-stack cont depth)))
    (map (lambda (cont)
           (let ((name (package-name (get-continuation-name cont))))
             (cond ((and (not dynamic-environment?) (not lexical-environment?))
                    name)
                   ((not dynamic-environment?)
                    (cons name (package-variables (get-continuation-lexical-environment cont))))
                   (else
                    (cons name (append (package-variables (get-continuation-dynamic-environment cont))
                                       (package-variables (get-continuation-lexical-environment cont))))))))
         stack)))


(definition public (execution-stack (dynamic-environment?: dynamic-environment? #f) (lexical-environment?: lexical-environment? #f) (identifiers?: identifiers? #f) (depth: depth #f))
  (continuation-capture
    (lambda (cont)
      (continuation-stack cont dynamic-environment?: dynamic-environment? lexical-environment?: lexical-environment? identifiers?: identifiers? depth: depth))))


;;;
;;;; Debuggee
;;;


(definition public (break . rest)
  (apply (module-ref 'jazz.debuggee 'break-internal) rest))


(definition public (inspect . rest)
  (apply (module-ref 'jazz.debuggee 'inspect-internal) rest))


(definition public (advise . rest)
  (apply (module-ref 'jazz.debuggee 'advise-internal) rest))

(definition public (unadvise . rest)
  (apply (module-ref 'jazz.debuggee 'unadvise-internal) rest))


(definition public (debug-advice . rest)
  (apply (module-ref 'jazz.debuggee 'debug-advice-internal) rest))


(definition public (count-advice . rest)
  (apply (module-ref 'jazz.debuggee 'count-advice-internal) rest))


(definition public (time-advice . rest)
  (apply (module-ref 'jazz.debuggee 'time-advice-internal) rest))


(definition public (trace . rest)
  (apply (module-ref 'jazz.debuggee 'trace-internal) rest))

(definition public (untrace . rest)
  (apply (module-ref 'jazz.debuggee 'untrace-internal) rest))


(definition public (start-repl . rest)
  (apply (module-ref 'jazz.debuggee 'start-repl-internal) rest))


(definition public (start-jazz-repl . rest)
  (apply (module-ref 'jazz.debuggee 'start-jazz-repl-internal) rest))


(definition public (load-object . rest)
  (apply (module-ref 'jazz.debuggee 'load-object-internal) rest)))
