;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Geometry
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.language.runtime.geometry jazz.dialect


(proclaim (warn optimizations))


(import (jazz.language.runtime.kernel)
        (jazz.language.runtime.format)
        (jazz.language.runtime.functional)
        (jazz.language.runtime.object))


(native private jazz:error)


;;;
;;;; Cell
;;;


(class Cell extends Numeric
  
  
  (state ()
    (slot line <fx> accessors generate)
    (slot col  <fx> accessors generate))
  
  
  (method override (initialize self l <fx> c <fx>)
    (set! line l)
    (set! col c))
  
  
  (method override (copy-object self deep?)
    (new Cell line col))


  (method override (compare-object self target)
    (if (is-not? target Cell)
        :incompatible
      (let ((compared (compare line (get-line target))))
        (if (not (eq? compared :equal))
            compared
          (compare col (get-col target))))))


  (method override (di-compare-object self target)
    (if (is-not? target Cell)
        :incompatible
      (let ((compared (di-compare line (get-line target))))
        (if (not (eq? compared :equal))
            compared
          (di-compare col (get-col target))))))
  
  
  (method override (print self output readably)
    (format output "~{{a} {a} {a}}"
            (category-name (class-of self))
            line
            col))


  (method override (numeric-norm self)
    (error "Cannot norm {t}" self))


  (method override (numeric-add self n)
    (cond ((is? n Cell) (new Cell (+ line (get-line n)) (+ col (get-col n))))
          ((integer? n) (new Cell line (+ col n)))
          (else (error "Cannot add {t} to {t}" n self))))


  (method override (numeric-negate self)
    (new Cell (- line) (- col)))


  (method override (numeric-multiply self n)
    (if (integer? n)
        (new Cell (* line n) (* col n))
      (error "Cannot multiply {t} to {t}" n self)))


  (method override (numeric-inverse self)
    (error "Cannot inverse {t}" self))
  
  
  (method public (increase-line self (delta <fx> 1))
    (set! line (+ line delta)))
  
  
  (method public (increase-col self (delta <fx> 1))
    (set! col (+ col delta))))


(definition public inline (allocate-cell line <fx> col <fx>) <Cell>
  (allocate Cell line col))

(specialize inline (new class <category<Cell>> line col) <Cell>
  (allocate-cell line col))


(specialize inline as copy-cell (copy c <Cell>) <Cell>
  (new Cell (get-line c) (get-col c)))


(specialize inline as cell=? (= c1 <Cell> c2 <Cell>) <bool>
  (and (= (get-line c1) (get-line c2))
       (= (get-col c1) (get-col c2))))


(specialize as cell<? (< c1 <Cell> c2 <Cell>) <bool>
  (let ((l1 (get-line c1))
        (l2 (get-line c2)))
    (or (< l1 l2)
        (and (= l1 l2)
             (< (get-col c1) (get-col c2))))))


(specialize as cell<=? (<= c1 <Cell> c2 <Cell>) <bool>
  (let ((l1 (get-line c1))
        (l2 (get-line c2)))
    (or (< l1 l2)
        (and (= l1 l2)
             (<= (get-col c1) (get-col c2))))))


(specialize as cell>? (> c1 <Cell> c2 <Cell>) <bool>
  (let ((l1 (get-line c1))
        (l2 (get-line c2)))
    (or (> l1 l2)
        (and (= l1 l2)
             (> (get-col c1) (get-col c2))))))


(specialize as cell>=? (>= c1 <Cell> c2 <Cell>) <bool>
  (let ((l1 (get-line c1))
        (l2 (get-line c2)))
    (or (> l1 l2)
        (and (= l1 l2)
             (>= (get-col c1) (get-col c2))))))


(specialize inline as cell+ (+ c1 <Cell> c2 <Cell>) <Cell>
  (new Cell
    (+ (get-line c1) (get-line c2))
    (+ (get-col c1) (get-col c2))))


(specialize inline (+ c <Cell> n <int>) <Cell>
  (new Cell
    (get-line c)
    (+ (get-col c) n)))


(specialize inline as cell- (- c1 <Cell> c2 <Cell>) <Cell>
  (new Cell
    (- (get-line c1) (get-line c2))
    (- (get-col c1) (get-col c2))))


(specialize inline (- c <Cell> n <int>) <Cell>
  (new Cell
    (get-line c)
    (- (get-col c) n)))


(definition public (cell-hash c <Cell>)
  (fxwrap+ (eqv?-hash (get-line c))
           (eqv?-hash (get-col c))))


;;;
;;;; Range
;;;


(class Range extends Object
  
  
  (state ()
    (slot start)
    (slot end))
    
    
  (method override (initialize self s e)
    (nextmethod self)
    (set! start s)
    (set! end e))
  
  
  (method override (copy-object self deep?)
    (new Range start end))


  (method override (compare-object self target)
    (cond ((is-not? target Range)
           :incompatible)
          ((and (= start (get-start target)) (= end (get-end target)))
           :equal)
          (else
           :not-equal)))
  
  
  (method override (print self output readably)
    (format output "~{{a} {s} {s}}"
            (category-name (class-of self))
            start
            end))
  
  
  (method public inline (get-start self)
    start)
  
  
  (method public inline (get-end self)
    end)
  
  
  (method public virtual (extent self)
    (- end start))
  
  
  (method public virtual (extended? self)
    (not (= start end)))
  
  
  (method public virtual (empty? self)
    (= start end))
  
  
  (method public (inside? self n)
    (and (>= n start)
         (< n end)))


  (method public (before? self n)
    (< n start))


  (method public (after? self n)
    (> n end))
  
  
  (method public (intersect? self range)
    (and (< (get-start range) end)
         (>= (get-end range) start)))


  (method public (intersect self range)
    (when (intersect? self range)
      (new (class-of self) (max start (get-start range)) (min end (get-end range))))))


(definition public inline (allocate-range start end) <Range>
  (allocate Range start end))

(specialize inline (new class <category<Range>> start end) <Range>
  (allocate-range start end))


(specialize inline as range=? (= r1 <Range> r2 <Range>) <bool>
  (and (= (get-start r1) (get-start r2))
       (= (get-end r1) (get-end r2))))


;;;
;;;; Range$Cell$
;;;


(class Range$Cell$ extends Object
  
  
  (state ()
    (slot start <Cell> getter generate)
    (slot end   <Cell> getter generate))
  
  
  (method override (initialize self s <Cell> e <Cell>)
    (nextmethod self)
    (set! start s)
    (set! end e))
  
  
  (method override (copy-object self deep?)
    (new Range$Cell$ start end))


  (method override (compare-object self target)
    (cond ((is-not? target Range$Cell$)
           :incompatible)
          ((and (= start (get-start target)) (= end (get-end target)))
           :equal)
          (else
           :not-equal)))
  
  
  (method override (print self output readably)
    (format output "~{{a} {s} {s}}"
            (category-name (class-of self))
            start
            end))
  
  
  (method public virtual (extent self) <Cell>
    (- end start))
  
  
  (method public virtual (extended? self)
    (not (= start end)))
  
  
  (method public virtual (empty? self)
    (= start end))
  
  
  (method public (inside? self n <Cell>) <bool>
    (and (>= n start)
         (< n end)))


  (method public (before? self n <Cell>) <bool>
    (< n start))


  (method public (after? self n <Cell>) <bool>
    (> n end))
  
  
  (method public (intersect? self range <Range$Cell$>) <bool>
    (and (< (get-start range) end)
         (>= (get-end range) start)))


  (method public (intersect self range <Range$Cell$>)
    (when (intersect? self range)
      (new (class-of self) (max start (get-start range)) (min end (get-end range))))))


(definition public inline (allocate-range$Cell$ start <Cell> end <Cell>) <Range$Cell$>
  (allocate Range$Cell$ start end))

(specialize inline (new class <category<Range$Cell$>> start end) <Range$Cell$>
  (allocate-range$Cell$ start end))


(specialize inline (= r1 <Range$Cell$> r2 <Range$Cell$>) <bool>
  (and (= (get-start r1) (get-start r2))
       (= (get-end r1) (get-end r2))))


;;;
;;;; Point
;;;


(class Point extends Numeric
  
  
  (state ()
    (slot h <fx> getter generate)
    (slot v <fx> getter generate))
  
  
  (method override (initialize self h <fx> v <fx>)
    (nextmethod self)
    (set! self.h h)
    (set! self.v v))
  
  
  (method override (copy-object self deep?)
    (new Point h v))


  (method override (compare-object self target)
    (cond ((is-not? target Point)
           :incompatible)
          ((let ((target-point <Point> target))
             (and (= h (get-h target-point)) (= v (get-v target-point))))
           :equal)
          (else
           :not-equal)))
  
  
  (method override (print self output readably)
    (format output "~{Point {a} {a}}"
            h
            v))
  
  
  (method override (numeric-norm self)
    (sqrt (+ (expt h 2) (expt v 2))))


  (method override (numeric-add self n)
    (cond ((is? n Point) (new Point (+ h (get-h n)) (+ v (get-v n))))
          ((is? n Distance) (new Point (+ h (get-x n)) (+ v (get-y n))))
          ((is? n Dimension) (new Point (+ h (get-width n)) (+ v (get-height n))))
          ((integer? n) (new Point (+ h n) v))
          (else (error "Cannot add {t} to {t}" n self))))


  (method override (numeric-negate self)
    (new Point (- h) (- v)))


  (method override (numeric-multiply self n)
    (if (integer? n)
        (new Point (* h n) (* v n))
      (error "Cannot multiply {t} to {t}" n self)))


  (method override (numeric-inverse self)
    (error "Cannot inverse {t}" self)))


(definition public inline (allocate-point h <fx> v <fx>) <Point>
  (allocate Point h v))

(specialize inline (new class <category<Point>> h v) <Point>
  (allocate-point h v))


(specialize inline as point=? (= p1 <Point> p2 <Point>) <bool>
  (and (= (get-h p1) (get-h p2))
       (= (get-v p1) (get-v p2))))


(specialize inline as point+ (+ p1 <Point> p2 <Point>) <Point>
  (new Point
    (+ (get-h p1) (get-h p2))
    (+ (get-v p1) (get-v p2))))


(specialize inline (+ p <Point> n <int>) <Point>
  (new Point
    (+ (get-h p) n)
    (get-v p)))


(specialize inline as point- (- p1 <Point> p2 <Point>) <Point>
  (new Point
    (- (get-h p1) (get-h p2))
    (- (get-v p1) (get-v p2))))


(specialize inline (- p <Point> n <int>) <Point>
  (new Point
    (- (get-h p) n)
    (get-v p)))


(specialize inline (- p <Point>) <Point>
  (new Point
    (- (get-h p))
    (- (get-v p))))


(specialize inline as point* (* p <Point> n <int>) <Point>
  (new Point
    (* (get-h p) n)
    (* (get-v p) n)))


;;;
;;;; Point$fl$
;;;


(class Point$fl$ extends Numeric
  
  
  (state ()
    (slot h <fl> getter generate)
    (slot v <fl> getter generate))
  
  
  (method override (initialize self h <fl> v <fl>)
    (nextmethod self)
    (set! self.h h)
    (set! self.v v))
  
  
  (method override (copy-object self deep?)
    (new Point$fl$ h v))


  (method override (compare-object self target)
    (cond ((is-not? target Point$fl$)
           :incompatible)
          ((let ((target-point Point$fl$ target))
             (and (= h (get-h target-point)) (= v (get-v target-point))))
           :equal)
          (else
           :not-equal)))
  
  
  (method override (print self output readably)
    (format output "~{Point$fl$ {a} {a}}"
            h
            v))
  
  
  (method override (numeric-norm self)
    (sqrt (+ (expt h 2) (expt v 2))))


  (method override (numeric-add self n)
    (cond ((is? n Point$fl$) (new Point$fl$ (+ h (get-h n)) (+ v (get-v n))))
          (else (error "Cannot add {t} to {t}" n self))))


  (method override (numeric-negate self)
    (new Point$fl$ (- h) (- v)))


  (method override (numeric-multiply self n)
    (if (real? n)
        (new Point$fl$ (* h n) (* v n))
      (error "Cannot multiply {t} to {t}" n self)))


  (method override (numeric-inverse self)
    (error "Cannot inverse {t}" self)))


;;;
;;;; Distance
;;;


(class Distance extends Numeric
  
  
  (state ()
    (slot x <fx> getter generate)
    (slot y <fx> getter generate))
  
  
  (method override (initialize self x <fx> y <fx>)
    (nextmethod self)
    (set! self.x x)
    (set! self.y y))
  
  
  (method override (copy-object self deep?)
    (new Distance x y))


  (method override (compare-object self target)
    (if (is-not? target Distance)
        :incompatible
      (let ((compared (compare x (get-x target))))
        (if (neq? compared :equal)
            compared
          (compare y (get-y target))))))
  
  
  (method override (print self output readably)
    (format output "~{Distance {a} {a}}"
            x
            y))


  (method override (numeric-norm self)
    (error "Cannot norm {t}" self))


  (method override (numeric-add self n)
    (cond ((is? n Distance) (new Distance (+ x (get-x n)) (+ y (get-y n))))
          ((is? n Point) (new Distance (+ x (get-h n)) (+ y (get-v n))))
          ((integer? n) (new Distance (+ x n) y))
          (else (error "Cannot add {t} to {t}" n self))))


  (method override (numeric-negate self)
    (new Distance (- x) (- y)))


  (method override (numeric-multiply self n)
    (if (integer? n)
        (new Distance (* x n) (* y n))
      (error "Cannot multiply {t} to {t}" n self)))


  (method override (numeric-inverse self)
    (error "Cannot inverse {t}" self)))


(definition public inline (allocate-distance x <fx> y <fx>) <Distance>
  (allocate Distance x y))

(specialize inline (new class <category<Distance>> x y) <Distance>
  (allocate-distance x y))


(specialize inline as distance=? (= d1 <Distance> d2 <Distance>) <bool>
  (and (= (get-x d1) (get-x d2))
       (= (get-y d1) (get-y d2))))


(specialize inline as distance+ (+ d1 <Distance> d2 <Distance>) <Distance>
  (new Distance
    (+ (get-x d1) (get-x d2))
    (+ (get-y d1) (get-y d2))))


(specialize inline as distance- (- d1 <Distance> d2 <Distance>) <Distance>
  (new Distance
    (- (get-x d1) (get-x d2))
    (- (get-y d1) (get-y d2))))


(specialize inline (- d <Distance>) <Distance>
  (new Distance
    (- (get-x d))
    (- (get-y d))))


(specialize inline as distance* (* d <Distance> n <int>) <Distance>
  (new Distance
    (* (get-x d) n)
    (* (get-y d) n)))


(definition public (distance-min d1 <Distance> d2 <Distance>) <Distance>
  (new Distance
    (min (get-x d1) (get-x d2))
    (min (get-y d1) (get-y d2))))


(definition public (distance-max d1 <Distance> d2 <Distance>) <Distance>
  (new Distance
    (max (get-x d1) (get-x d2))
    (max (get-y d1) (get-y d2))))


;;;
;;;; Dimension
;;;


(class Dimension extends Numeric
  
  
  (state ()
    (slot width  <fx> getter generate)
    (slot height <fx> getter generate))
  
  
  (method override (initialize self w <fx> h <fx>)
    (nextmethod self)
    (set! width w)
    (set! height h))
  
  
  (method override (copy-object self deep?)
    (new Dimension width height))


  (method override (compare-object self target)
    (if (is-not? target Dimension)
        :incompatible
      (let ((compared (compare width (get-width target))))
        (if (neq? compared :equal)
            compared
          (compare height (get-height target))))))
  
  
  (method override (print self output readably)
    (format output "~{Dimension {a} {a}}"
            width
            height))


  (method override (numeric-norm self)
    (error "Cannot norm {t}" self))


  (method override (numeric-add self n)
    (cond ((is? n Dimension) (new Dimension (+ width (get-width n)) (+ height (get-height n))))
          ((is? n Point) (new Dimension (+ width (get-h n)) (+ height (get-v n))))
          ((integer? n) (new Dimension (+ width n) height))
          (else (error "Cannot add {t} to {t}" n self))))


  (method override (numeric-negate self)
    (new Dimension (- width) (- height)))


  (method override (numeric-multiply self n)
    (if (integer? n)
        (new Dimension (* width n) (* height n))
      (error "Cannot multiply {t} to {t}" n self)))


  (method override (numeric-inverse self)
    (error "Cannot inverse {t}" self)))


(definition public inline (allocate-dimension width <fx> height <fx>) <Dimension>
  (allocate Dimension width height))

(specialize inline (new class <category<Dimension>> width height) <Dimension>
  (allocate-dimension width height))


(specialize inline as dimension=? (= d1 <Dimension> d2 <Dimension>) <bool>
  (and (= (get-width d1) (get-width d2))
       (= (get-height d1) (get-height d2))))


(specialize inline as dimension+ (+ d1 <Dimension> d2 <Dimension>) <Dimension>
  (new Dimension
    (+ (get-width d1) (get-width d2))
    (+ (get-height d1) (get-height d2))))


(specialize inline as dimension- (- d1 <Dimension> d2 <Dimension>) <Dimension>
  (new Dimension
    (- (get-width d1) (get-width d2))
    (- (get-height d1) (get-height d2))))


(specialize inline as dimension* (* d <Dimension> n <int>) <Dimension>
  (new Dimension
    (* (get-width d) n)
    (* (get-height d) n)))


(definition public (dimension-min d1 <Dimension> d2 <Dimension>) <Dimension>
  (new Dimension
    (min (get-width d1) (get-width d2))
    (min (get-height d1) (get-height d2))))


(definition public (dimension-max d1 <Dimension> d2 <Dimension>) <Dimension>
  (new Dimension
    (max (get-width d1) (get-width d2))
    (max (get-height d1) (get-height d2))))


;;;
;;;; Dimension$fl$
;;;


(class Dimension$fl$ extends Numeric
  
  
  (state ()
    (slot width  <fl> getter generate)
    (slot height <fl> getter generate))
  
  
  (method override (initialize self w <fl> h <fl>)
    (nextmethod self)
    (set! width w)
    (set! height h))
  
  
  (method override (copy-object self deep?)
    (new Dimension$fl$ width height))


  (method override (compare-object self target)
    (if (is-not? target Dimension$fl$)
        :incompatible
      (let ((compared (compare width (get-width target))))
        (if (neq? compared :equal)
            compared
          (compare height (get-height target))))))
  
  
  (method override (print self output readably)
    (format output "~{Dimension$fl$ {a} {a}}"
            width
            height))


  (method override (numeric-norm self)
    (error "Cannot norm {t}" self))


  (method override (numeric-add self n)
    (cond ((is? n Dimension$fl$) (new Dimension$fl$ (+ width (get-width n)) (+ height (get-height n))))
          ((is? n Point$fl$) (new Dimension$fl$ (+ width (get-h n)) (+ height (get-v n))))
          ((flonum? n) (new Dimension$fl$ (+ width n) height))
          (else (error "Cannot add {t} to {t}" n self))))


  (method override (numeric-negate self)
    (new Dimension$fl$ (- width) (- height)))


  (method override (numeric-multiply self n)
    (if (flonum? n)
        (new Dimension$fl$ (* width n) (* height n))
      (error "Cannot multiply {t} to {t}" n self)))


  (method override (numeric-inverse self)
    (error "Cannot inverse {t}" self)))


;;;
;;;; Rect
;;;


(class Rect extends Object
  
  
  (state ()
    (slot left   <fx> accessors generate)
    (slot top    <fx> accessors generate)
    (slot right  <fx> accessors generate)
    (slot bottom <fx> accessors generate))
  
  
  (method meta override (coerce-object self object)
    (typecase object
      ((Point) (new Rect (get-h object) (get-v object) 0 0))
      (else (nextmethod self object))))
  
  
  (method override (initialize self l <fx> t <fx> r <fx> b <fx>)
    (nextmethod self)
    (set! left l)
    (set! top t)
    (set! right r)
    (set! bottom b))
  
  
  (method override (copy-object self deep?)
    (new Rect left top right bottom))


  (method override (compare-object self target)
    (cond ((is-not? target Rect)
           :incompatible)
          ((and (= left (get-left target)) (= top (get-top target)) (= right (get-right target)) (= bottom (get-bottom target)))
           :equal)
          (else
           :not-equal)))
  
  
  (method override (print self output readably)
    (format output "~{{a} {a} {a} {a} {a}}"
            (category-name (class-of self))
            left
            top
            right
            bottom)))


(definition public inline (rect? obj)
  (is? obj Rect))


(definition public inline (allocate-rect left <fx> top <fx> right <fx> bottom <fx>) <Rect>
  (allocate Rect left top right bottom))

(specialize inline (new class <category<Rect>> left top right bottom) <Rect>
  (allocate-rect left top right bottom))


(specialize inline as rect=? (= r1 <Rect> r2 <Rect>) <bool>
  (and (= (get-left r1) (get-left r2))
       (= (get-top r1) (get-top r2))
       (= (get-right r1) (get-right r2))
       (= (get-bottom r1) (get-bottom r2))))


(definition public inline (empty-rect? rect)
  (and (= (get-left rect) 0)
       (= (get-top rect) 0)
       (= (get-right rect) 0)
       (= (get-bottom rect) 0)))


(definition public inline (empty-rect$fl$? rect)
  (and (= (get-left rect) 0.)
       (= (get-top rect) 0.)
       (= (get-right rect) 0.)
       (= (get-bottom rect) 0.)))


;;;
;;;; Rect$fl$
;;;


(class Rect$fl$ extends Object
  
  
  (state ()
    (slot left   <fl> accessors generate)
    (slot top    <fl> accessors generate)
    (slot right  <fl> accessors generate)
    (slot bottom <fl> accessors generate))
  
  
  (method meta override (coerce-object self object)
    (typecase object
      ((Point) (new Rect$fl$ (get-h object) (get-v object) 0 0))
      (else (nextmethod self object))))
  
  
  (method override (initialize self l <fl> t <fl> r <fl> b <fl>)
    (nextmethod self)
    (set! left l)
    (set! top t)
    (set! right r)
    (set! bottom b))
  
  
  (method override (copy-object self deep?)
    (new Rect$fl$ left top right bottom))


  (method override (compare-object self target)
    (cond ((is-not? target Rect$fl$)
           :incompatible)
          ((and (= left (get-left target)) (= top (get-top target)) (= right (get-right target)) (= bottom (get-bottom target)))
           :equal)
          (else
           :not-equal)))
  
  
  (method override (print self output readably)
    (format output "~{{a} {a} {a} {a} {a}}"
            (category-name (class-of self))
            left
            top
            right
            bottom)))


(definition public inline (rect$fl$? obj)
  (is? obj Rect$fl$))


(definition public inline (allocate-rect$fl$ left <fl> top <fl> right <fl> bottom <fl>) <Rect$fl$>
  (allocate Rect$fl$ left top right bottom))

(specialize inline (new class <category<Rect$fl$>> left top right bottom) <Rect$fl$>
  (allocate-rect$fl$ left top right bottom))


(specialize inline as rect$fl$=? (= r1 <Rect$fl$> r2 <Rect$fl$>) <bool>
  (and (= (get-left r1) (get-left r2))
       (= (get-top r1) (get-top r2))
       (= (get-right r1) (get-right r2))
       (= (get-bottom r1) (get-bottom r2))))


;;;
;;;; Conversion
;;;


(definition public (point->distance pt <Point>) <Distance>
  (new Distance (get-h pt) (get-v pt)))


(definition public (point->dimension pt <Point>) <Dimension>
  (new Dimension (get-h pt) (get-v pt)))


(definition public (distance->point dist <Distance>) <Point>
  (new Point (get-x dist) (get-y dist)))


(definition public (distance->dimension dist <Distance>) <Dimension>
  (new Dimension (get-x dist) (get-y dist)))


(definition public (dimension->point dim <Dimension>) <Point>
  (new Point (get-width dim) (get-height dim)))


(definition public (dimension->distance dim <Dimension>) <Distance>
  (new Distance (get-width dim) (get-height dim))))
