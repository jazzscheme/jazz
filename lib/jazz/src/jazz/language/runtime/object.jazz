;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Object
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.language.runtime.object jazz.dialect


(proclaim (warn optimizations))


(import (jazz.language.runtime.hubs)
        (jazz.language.runtime.kernel))


(native private jazz:error)


;;;
;;;; Object
;;;


(class primitive Object metaclass Object-Class
  
  
  (method core chained (initialize self)
    )

  
  (method core chained (destroy self)
    )
  
  
  (method core public virtual (call-print self output detail)
    (print self output detail))
  
  
  (method core virtual (print-object self output detail)
    )
  
  
  (method core virtual (tree-fold self down up here seed environment)
    )
  
  
  (method public virtual (print self output detail)
    (if (object? self)
        (print-unreadable self output
          (lambda (output)
            ))
      (print-detail self output detail)))
  
  
  (method protected (print-detail self output detail)
    (if (eq? detail :human)
        (display self output)
      (write self output)))
  
  
  (method package virtual (assemble self)
    )
  
  
  (method public virtual (class-actions self)
    '())
  
  
  (method public virtual (focus-actions self)
    '())
  
  
  (method public virtual (guest-actions self)
    '())
  
  
  (method public virtual (hash-object self)
    (error "No hashing defined for {t}" self))
  
  
  (method package virtual (copy-object self deep?)
    (error "Unable to copy {t}" self))


  (method package virtual (compare-object self object)
    :incompatible)


  (method package virtual (ci-compare-object self object)
    :incompatible)


  (method package virtual (di-compare-object self object)
    :incompatible)


  (method protected virtual (describe-object self output)
    (print self output #t))


  (method public virtual (initialized? self)
    ;; todo
    #t)


  (method public virtual (close self)
    (destroy self))


  (method public virtual (destroying? self)
    ;; todo
    #f)


  (method public virtual (destroyed? self)
    ;; todo
    #f)
  
  
  (method public virtual (walk-references self proc)
    )
  
  
  (method public virtual (setup-context self context)
    )
  
  
  (method public virtual (get-sort-value self)
    #f)
  
  
  (method package virtual (coerce-string self)
    (error "{t} cannot be coerced into a string" self))
  
  
  (method package virtual (iterate-object self)
    (error "{t} is not an iterable type" self))


  ;;;
  ;;;; Marshall
  ;;;
  
  
  (method protected virtual (marshall-size self)
    )
  
  
  (method protected virtual (marshall-to self obj content)
    )
  
  
  (method protected virtual (unmarshall-from self obj content)
    )


  ;;;
  ;;;; Compare
  ;;;


  (method protected virtual (object-similar? self object)
    (eq? self object))


  (method package virtual (object-alphabetic? self)
    (error "{t} is not an alphabetic type" self))


  (method package virtual (object-numeric? self)
    (error "{t} is not an alphabetic type" self))


  (method package virtual (object-alphanumeric? self)
    (error "{t} is not an alphabetic type" self))


  (method package virtual (object-whitespace? self)
    (error "{t} is not an alphabetic type" self))


  (method package virtual (object-upper-case? self)
    (error "{t} is not an alphabetic type" self))


  (method package virtual (object-lower-case? self)
    (error "{t} is not an alphabetic type" self))


  (method package virtual (object-upcase self)
    (error "{t} is not an alphabetic type" self))


  (method package virtual (object-downcase self)
    (error "{t} is not an alphabetic type" self))


  (method package virtual (object-capitalize self)
    (error "{t} is not an alphabetic type" self)))


(definition public inline (compare a <Object> b <Object>)
  (if (eqv? a b)
      :equal
    (compare-object a b)))


(definition public inline (ci-compare a <Object> b <Object>)
  (if (eqv? a b)
      :equal
    (ci-compare-object a b)))


(definition public inline (di-compare a <Object> b <Object>)
  (if (eqv? a b)
      :equal
    (di-compare-object a b)))


(definition public (copy obj <Object>)
  (subcopy obj #f))


(definition public (subcopy obj <Object> deep? <bool>)
  (copy-object obj deep?))


(definition public (print-unreadable object <Object> output proc)
  (let ((class-name (reference-name (get-name (class-of object))))
        (string (with-exception-catcher
                  (lambda (exc)
                    "@error@")
                  (lambda ()
                    (let ((output (open-output-string)))
                      (proc output)
                      (get-output-string output)))))
        (serial (object->serial object)))
    (display "{" output)
    (display class-name output)
    (unless (string=? string "")
      (display " " output)
      (display string output))
    (display " #" output)
    (display serial output)
    (display "}" output)))


(definition package (native-class name)
  (error "Scheme primitives must be used to create {a}" name))


(definition public (hash obj <Object>)
  (hash-object obj))


;;;
;;;; Memory leak detection
;;;


(definition protected backtrace-allocated?
  (global-setting 'backtrace-allocated? #f))


(definition public *allocated* <table>
  (make-table weak-keys: #t test: eq?))

(definition public (allocated obj (info (if backtrace-allocated?
                                            (jazz.language.runtime.debug:execution-stack)
                                          #t)))
  (table-set! *allocated* obj info)
  (make-will obj
    (lambda (obj)
      (let ((info (table-ref *allocated* obj #f)))
        (when info
          (leaked obj info))))))

(definition public (freed obj)
  (if (table-ref *allocated* obj #f)
      (table-set! *allocated* obj)
    (terminal 'not 'allocated 'or 'double 'freed obj)))


(definition *leaks-mutex*
  (make-mutex))

(definition *leaks*
  '())

(definition public (leaks)
  *leaks*)

(definition (leaked obj info)
  (mutex-lock! *leaks-mutex*)
  (set! *leaks* (cons (cons obj info) *leaks*))
  (mutex-unlock! *leaks-mutex*)))
