;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Tell
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.language.runtime.tell jazz.dialect


(proclaim (warn optimizations))


(import (jazz.language.runtime.hubs)
        (jazz.language.runtime.kernel)
        (jazz.language.runtime.format)
        (jazz.language.runtime.functional))


(native private jazz:error)


(definition public tell-precision
  3)

(definition public (set-tell-precision precision)
  (set! tell-precision precision))


(definition public (tell . rest)
  (define (tell-flonum obj)
    (if (not tell-precision)
        (format :terminal "{a}" obj)
      (format :terminal "{r precision: :v}" obj tell-precision)))
  
  (define (tell-sequence prefix seq)
    (format :terminal "{a}" prefix)
    (format :terminal "(")
    (let ((first? #t))
      (iterate seq
        (lambda (obj)
          (if first?
              (set! first? #f)
            (format :terminal " "))
          (tell-object obj))))
    (format :terminal ")"))
  
  (define (tell-object obj)
    (cond ((flonum? obj)    (tell-flonum obj))
          ((pair? obj)      (tell-sequence "" obj))
          ((vector? obj)    (tell-sequence "#" obj))
          ((u8vector? obj)  (tell-sequence "u8" obj))
          ((s8vector? obj)  (tell-sequence "s8" obj))
          ((u16vector? obj) (tell-sequence "u16" obj))
          ((s16vector? obj) (tell-sequence "s16" obj))
          ((u32vector? obj) (tell-sequence "u32" obj))
          ((s32vector? obj) (tell-sequence "s32" obj))
          ((u64vector? obj) (tell-sequence "u64" obj))
          ((s64vector? obj) (tell-sequence "s64" obj))
          ((f32vector? obj) (tell-sequence "f32" obj))
          ((f64vector? obj) (tell-sequence "f64" obj))
          (else (format :terminal "{a}" obj))))
  
  (let ((first? #t))
    (for-each (lambda (obj)
                (if first?
                    (set! first? #f)
                  (format :terminal " "))
                (tell-object obj))
              rest))
  (format :terminal "{%}")))
