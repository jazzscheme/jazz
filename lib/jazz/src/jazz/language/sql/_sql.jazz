;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; SQL Language
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.language.sql jazz


(export (jazz.language.sql.autoload))
(import (jazz.language.sql.autoload)
        (jazz.io)
        (jazz.library.component)
        (jazz.schema)
        (jazz.ui)
        (jazz.ui.view)
        (jazz.utilities))


;;;
;;;; Data Source
;;;


(definition Active-Data-Source
  {})


(definition public (get-active-data-source)
  Active-Data-Source)


(definition public (set-active-data-source data-source)
  (set! Active-Data-Source data-source)
  @convert-this-is-gui
  (let ((guest (get-sql-connections)))
    (when guest
      (set-property~ (get-designer~ guest) (get-client~ guest) 'default-source (essay data-source (get-name~ data-source)))
      (invalidate-view~ (get-tree~ guest))
      (get-active-connection))))


(definition public (get-active-connection)
  (when Active-Data-Source
    (let* ((name (get-name~ Active-Data-Source))
           (connection (get-connection name data-source: Active-Data-Source)))
      ;; In case an external source closed the connection
      (when (eq? (get-state~ connection) 'closed)
        (open~ connection Active-Data-Source))
      connection)))


;;;
;;;; Connections
;;;


(definition Active-Connections
  '())


(definition (find-connection name)
  (assoc-value name Active-Connections #f))


(definition (get-connection name (data-source: data-source {}))
  (either (find-connection name)
          (when data-source
            (let ((connection (new-connection data-source)))
              (set! Active-Connections (cons (cons name connection) Active-Connections))
              connection))))


(definition (new-connection data-source)
  (new-connection~ data-source))


(definition (close-connections)
  (for-each (function (info)
              (bind (name . connection) info
                (close~ connection)))
            Active-Connections)
  (set! Active-Connections '())
  (set-active-data-source {}))


(definition Connections-File
  {File Profile "settings" "Connections.jml"})


(definition (load-connections)
  (let ((file Connections-File))
    (if (exists?~ file)
        (instantiate~ (read-from-file file))
      (new Data-Sources))))


(definition (read-connections)
  (with-safe-execution "loading the connections"
    (function ()
      (let ((process (get-process))
            (connections (load-connections)))
        (install-context~ process connections)
        connections))
    continue-handler:
    (function (err)
      )))


;;;
;;;; Utilities
;;;


(definition public (parse-sql-command request)
  (let* ((request (trim-whitespace request))
         (pos (find-if whitespace? request return: 'position)))
    (upcase
      (if (null? pos)
          request
        (subseq request 0 pos))))))
