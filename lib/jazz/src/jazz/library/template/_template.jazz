;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Template Expansion
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.library.template jazz


(import (jazz.io)
        (jazz.library))


(definition name-delimiter-start
  #\%)

(definition name-delimiter-end
  #\%)

(definition content-delimiter-start
  #\%)

(definition content-delimiter-end
  #\%)


(definition public (copy-template template destination associations (non-expanded-nodes: non-expanded-nodes '()) (non-expanded-leaves: non-expanded-leaves '()))
  (let ((name-expander (new Template-Expander delimiter-start: name-delimiter-start delimiter-end: name-delimiter-end))
        (content-expander (new Template-Expander delimiter-start: content-delimiter-start delimiter-end: content-delimiter-end)))
    (define (expand-name name)
      (continuation-capture
        (function (return)
          (let ((output (open-output-string)))
            (expand~ name-expander name associations output
              printer: (function (name value output)
                         (if (list? value)
                             (continuation-return return value)
                           (format output "{a}" value))))
            (get-output-string output)))))
    
    (define (expand-pathname pathname)
      (new-brother~ pathname (expand-name (get-name~ pathname))))
    
    (define (copy-file template destination)
      (let ((destination (expand-pathname destination)))
        (unless (exists?~ destination)
          (if (member? (get-name~ destination) non-expanded-leaves test: ci=?)
              (copy-file~ template destination)
            (call-with-output-file (list path: (parse~ destination) eol-encoding: platform-eol-encoding)
              (function (output)
                (expand~ content-expander template associations output)))))))
    
    (define (copy-directory template destination)
      (let ((destination (expand-pathname destination)))
        (if (member? (get-name~ destination) non-expanded-nodes test: ci=?)
            (unless (exists?~ destination)
              (copy-directory~ template destination touch-files?: #t))
          (unless (exists?~ destination)
            (create-directories~ destination))
          (iterate-directory~ template
            (function (path kind)
              (let ((name (car path)))
                (case kind
                  ((file)
                   (copy-file (new-file~ template name) (new-file~ destination name)))
                  ((directory)
                   (copy-directory (new-directory~ template name) (new-directory~ destination name))))))
            full?: #f
            files?: #t
            directories?: #t
            recursive?: #f))))
    
    (define (copy-pathname template destination)
      (if (file? template)
          (copy-file template destination)
        (copy-directory template destination)))
    
    (copy-pathname template destination))))
