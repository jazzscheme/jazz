;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Literals
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.literals.constructors jazz


(import (jazz.catalog)
        (jazz.database)
        (jazz.io)
        (jazz.jrm)
        (jazz.language.c)
        (jazz.language.css)
        (jazz.language.java)
        (jazz.language.javascript)
        (jazz.language.lisp)
        (jazz.language.lua)
        (jazz.language.properties)
        (jazz.language.python)
        (jazz.library)
        (jazz.network)
        (jazz.schema)
        (jazz.ui)
        (time))


;;;
;;;; Point
;;;


(definition (construct-point h v)
  (new Point h v))


;;;
;;;; Dimension
;;;


(definition (construct-dimension width height)
  (new Dimension width height))


;;;
;;;; Cell
;;;


(definition (construct-cell row col)
  (new Cell row col))


;;;
;;;; Rect
;;;


(definition (construct-rect left top right bottom)
  (new Rect left top right bottom))


;;;
;;;; Range
;;;


(definition (construct-range start end)
  (new Range start end))


;;;
;;;; Action
;;;


(definition (construct-action action-context action-name . properties)
  (new Action action-context action-name properties))


;;;
;;;; Exception Detail
;;;


(definition (construct-exception-detail icon title location children)
  (new Exception-Detail icon title location children))


;;;
;;;; Walk Location
;;;


(definition (construct-walk-location module-locator declaration-locator locat)
  (new Walk-Location module-locator declaration-locator locat))


;;;
;;;; Box
;;;


(definition (construct-box . rest)
  (if (null? rest)
      (new Box)
    (new Box (car rest))))


;;;
;;;; Shortcut
;;;


(definition (construct-shortcut . rest)
  (new Shortcut (butlast rest) (last rest)))


;;;
;;;; Locales
;;;


(definition (construct-locales . rest)
  (apply new Locales rest))


;;;
;;;; Color
;;;


(definition (construct-color . rest)
  (bind-keywords ((name {}) . others) rest
    (if name
        (registered-color name (getf others alpha:))
      (apply new Color rest))))


;;;
;;;; Font
;;;


(definition (construct-font . rest)
  (bind-keywords ((name {}) . others) rest
    (if name
        (registered-font name)
      (apply new Font rest))))


;;;
;;;; Pen
;;;


(definition (construct-pen (name: name {}))
  (registered-pen name))


;;;
;;;; File
;;;


(definition (construct-file . rest)
  (new File rest))


;;;
;;;; Directory
;;;


(definition (construct-directory . rest)
  (new Directory rest))


;;;
;;;; Directory-Group
;;;


(definition (construct-directory-group . rest)
  (new Directory-Group rest))


;;;
;;;; Host
;;;


(definition (construct-host . rest)
  (apply new Host rest))


;;;
;;;; Datatype
;;;


(definition (construct-datatype . rest)
  (new Datatype))


;;;
;;;; Systype
;;;


(definition (construct-systype name size precision scale default-value)
  (new Systype name size precision scale default-value))


;;;
;;;; IOR
;;;


(definition (construct-ior host port remotable reference values)
  (new IOR host port remotable reference values))


;;;
;;;; GUID
;;;


;; convert
@wait
(definition (construct-guid . rest)
  (new GUID))


;;;
;;;; Format
;;;


(definition (construct-format . rest)
  (apply new Format rest))


;;;
;;;; Text-Style
;;;


(definition (construct-text-style . rest)
  (apply new Text-Style rest))


;;;
;;;; Hyperlink-Style
;;;


(definition (construct-hyperlink-style . rest)
  (apply new Hyperlink-Style rest))


;;;
;;;; Text
;;;


(definition (construct-text . rest)
  (apply new Text rest))


;;;
;;;; Formatted-Text
;;;


(definition (construct-formatted-text . rest)
  (apply new Formatted-Text rest))


;;;
;;;; Bitmap-Resource
;;;


(definition (construct-bitmap-resource name)
  (new Bitmap-Resource name))


;;;
;;;; Icon-Resource
;;;


(definition (construct-icon-resource name)
  (new Icon-Resource name))


;;;
;;;; Cursor-Resource
;;;


(definition (construct-cursor-resource name)
  (new Cursor-Resource name))


;;;
;;;; Event
;;;


(definition (construct-event kind . properties)
  (new Event kind {} properties))


;;;
;;;; Event-Handler
;;;


(definition (construct-event-handler target-name method-name . properties)
  (new Event-Handler target-name: target-name method-name: method-name properties: properties))


;;;
;;;; Selection-Handler
;;;


(definition (construct-selection-handler target-name method-name force? . properties)
  (new Selection-Handler target-name: target-name method-name: method-name force?: force? properties: properties))


;;;
;;;; Version
;;;


(definition (construct-version major minor (revision 0) (stage {}))
  (new Version major minor revision stage))


;;;
;;;; C
;;;


(definition (construct-c-file-entry file time . definitions)
  (new C-File-Entry {} file (seconds->time time) definitions))


(definition (construct-c-category-entry name)
  (new C-Category-Entry name))


(definition (construct-c-define-entry name line column)
  (new C-Define-Entry name line column))


(definition (construct-c-include-entry name line column)
  (new C-Include-Entry name line column))


(definition (construct-c-export-entry name line column)
  (new C-Export-Entry name line column))


;;;
;;;; CSS
;;;


(definition (construct-css-file-entry file time . definitions)
  (new CSS-File-Entry {} file (seconds->time time) definitions))


(definition (construct-css-entry name line column)
  (new CSS-Entry name line column))


;;;
;;;; Java
;;;


(definition (construct-java-file-entry file time . definitions)
  (new Java-File-Entry {} file (seconds->time time) definitions))


;;;
;;;; JavaScript
;;;


(definition (construct-javascript-file-entry file time . definitions)
  (new JavaScript-File-Entry {} file (seconds->time time) definitions))


(definition (construct-javascript-variable-entry name line column)
  (new JavaScript-Variable-Entry name line column))


(definition (construct-javascript-function-entry name line column)
  (new JavaScript-Function-Entry name line column))


;;;
;;;; Lua
;;;


(definition (construct-lua-file-entry file time . definitions)
  (new Lua-File-Entry {} file (seconds->time time) definitions))


(definition (construct-lua-function-entry name line column)
  (new Lua-Function-Entry name line column))


;;;
;;;; Properties
;;;


(definition (construct-properties-file-entry file time . definitions)
  (new Properties-File-Entry {} file (seconds->time time) definitions))


(definition (construct-properties-entry name line column)
  (new Properties-Entry name line column))


;;;
;;;; Python
;;;


(definition (construct-python-file-entry file time . definitions)
  (new Python-File-Entry {} file (seconds->time time) definitions))


(definition (construct-python-class-entry name line column)
  (new Python-Class-Entry name line column))


(definition (construct-python-def-entry name line column)
  (new Python-Def-Entry name line column))


;;;
;;;; Lisp
;;;


(definition (construct-lisp-file-entry file time . definitions)
  (new Lisp-File-Entry {} file (seconds->time time) definitions))


(definition (construct-lisp-entry name signature line column end-line end-column references . definitions)
  (new Lisp-Entry name signature line column end-line end-column definitions references)))
