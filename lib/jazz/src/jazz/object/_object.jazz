;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Jazz Object
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2012
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module jazz.object scheme


(import (dialect.core)
        (scheme.core (phase syntax))
        (jazz.dialect.classes.foundation))


(native private jazz:format)
(native private jazz:naturals)
(native private jazz:Object-Class)
(native private jazz:add-slot)
(native private jazz:new-core-class)
(native private jazz:$$object$$)


;;;
;;;; Time
;;;


(define-class Time-Special2 Expression (constructor: allocate-time2)
  ((expressions getter: generate)))


(define-method (emit-expression (Time-Special2 expression) declaration environment backend)
  (let ((expressions-emit (emit-expressions (get-time-special2-expressions expression) declaration environment backend)))
    (new-code
      (emit 'time backend expression declaration environment expressions-emit)
      Any
      #f)))


(define (walk-time2 walker resume declaration environment form-src)
  (let ((form (strip-syntactic-closures form-src)))
    (let ((forms (cdr form)))
      (allocate-time2 #f #f (walk-list walker resume declaration environment forms)))))


(define-walker-special time2 jazz walk-time2))
