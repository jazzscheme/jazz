;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Carbon Clipboard
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Jeremie Lasalle Ratelle.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.platform.carbon.clipboard jazz


(import (jazz.platform.carbon.carbon-types))


(c-include "<Carbon/Carbon.h>")
(c-include "<stdio.h>")
(c-include "<stdlib.h>")


(definition *clipboard* #f)


(definition public (carbon-initialize-clipboard)
  (let ((func (c-function () PasteboardRef
                  "PasteboardRef board;
                   PasteboardCreate( kPasteboardClipboard, &board);
                   ___result_voidstar = board;")))
    (set! *clipboard* (func))))


(definition public (carbon-set-clipboard-text text)
  (let ((func (c-function (PasteboardRef scheme-object) void
                  "CFDataRef textData = NULL;
                   int len = (___INT(___U8VECTORLENGTH(___arg2))) - 2;
                   ___U8 *vec = ___CAST(___U8*, ___BODY_AS(___arg2, ___tSUBTYPED)) + 2;
                   PasteboardClear(___arg1);
                   PasteboardSynchronize(___arg1);
                   textData = CFDataCreate( kCFAllocatorDefault, vec, len );
                   PasteboardPutItemFlavor( ___arg1, (PasteboardItemID)1, CFSTR(\"public.utf16-plain-text\"), textData, 0 );")))
    (func *clipboard* text)))


(definition public (carbon-get-clipboard-text)
   (let ((func (c-function (PasteboardRef) scheme-object
                 "___SCMOBJ r = ___FAL;
                  PasteboardSyncFlags syncFlags = PasteboardSynchronize(___arg1);
                  OSStatus err;
                  ItemCount itemCount;
                  UInt32 itemIndex = 1;
                  if (noErr == (err = PasteboardGetItemCount(___arg1, &itemCount))
                  &&  itemCount > 0)
                  {
                      PasteboardItemID itemID;
                      CFArrayRef flavorTypeArray;
                      if (noErr == (err = PasteboardGetItemIdentifier(___arg1, itemIndex, &itemID))
                      &&  noErr == (err = PasteboardCopyItemFlavors(___arg1, itemID, &flavorTypeArray)))
                      {
                          CFIndex flavorCount;
                          CFIndex flavorIndex;
                          flavorCount = CFArrayGetCount(flavorTypeArray);
                          for (flavorIndex = 0; flavorIndex < flavorCount; flavorIndex++)
                          {
                              CFStringRef flavorType = (CFStringRef)CFArrayGetValueAtIndex(flavorTypeArray, flavorIndex);
                              CFDataRef flavorData;
                              if (UTTypeConformsTo(flavorType, CFSTR(\"public.utf16-plain-text\"))
                              &&  noErr == (err = PasteboardCopyItemFlavorData(___arg1, itemID, flavorType, &flavorData)))
                              {
                                  const UInt8* flavorBytes = CFDataGetBytePtr(flavorData);
                                  CFIndex flavorDataSize = CFDataGetLength(flavorData);
                                  CFRelease(flavorData);
                                  r = ___EXT(___alloc_scmobj) (___sU8VECTOR, flavorDataSize+1, ___STILL);
                                  ___U8 *vec = ___CAST(___U8*, ___BODY_AS(r, ___tSUBTYPED));
                                  memcpy(vec, flavorBytes, flavorDataSize);
                                  break;
                              }
                          }
                          CFRelease(flavorTypeArray);
                      }
                  }
                  ___result = r;")))
     (func *clipboard*))))
