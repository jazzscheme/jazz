;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Component Object Model
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library COM jazz


@WAIT (


  (method public (category-guid category)
    (category-property category guid:))


  (method public (category-helpstring category)
    (category-property category :helpstring))


  (method public (clsid<-progid progid)
    (let* ((clsid (create-guid))
           (err (CLSIDFromProgID progid clsid)))
      (if (succeeded? err)
          clsid
        (system-error err))))
  
  
  (method public (coinitialize)
    (CoInitializeEx NULL COINIT_APARTMENTTHREADED))


  (method public (comarshal object)
    (->string object :reader))


  (method public (counmarshal string)
    (read-string-element string))


  ;;;
  ;;;; CoClosure
  ;;;


  (method public (coclosure? object)
    (is? object CoClosure))


  ;;;
  ;;;; CoExternal
  ;;;


  (method public (com-external? object)
    (is? object CoExternal))


  (external Jazz int             (com-external-cooffset                     Object)                                                                                            "JzCoExternalCooffset")
  (external Jazz bool            (com-external-has-hresult?                 Object)                                                                                            "JzCoExternalHasHResult")
  (external Jazz Object          (com-external-retval                       Object)                                                                                            "JzCoExternalRetval")
  (external Jazz bool            (com-external-unimplemented?               Object)                                                                                            "JzCoExternalIsUnimplemented")


  ;;;
  ;;;; CoFactory
  ;;;


  (external Jazz void            (register-cofactory                      Object int)                                                                                        "JzRegisterCoFactory")
  (external Jazz void            (unregister-cofactory                    Object)                                                                                            "JzUnregisterCoFactory")
  (external Jazz int             (cofactory-new-instance                  Object Object)                                                                                     "JzCoFactoryNewInstance")
  (external Jazz Object          (cofactory-coserver                      Object)                                                                                            "JzCoFactoryCoServer")
  (external Jazz Object          (cofactory-instances                     Object)                                                                                            "JzCoFactoryInstances")


  ;;;
  ;;;; CoInterface
  ;;;


  (external Jazz Object          (cocreate-instance                       Object Object bool)                                                                                "JzCoCreateInstance")
  (external Jazz int             (coquery-interface                       Object Object)                                                                                     "JzCoQueryInterface")
  (external Jazz int             (corelease-interface                     Object)                                                                                            "JzCoReleaseInterface")
  (external Jazz bool            (com-interface-bound?                      Object)                                                                                            "JzIsCoInterfaceBound")
  (external Jazz int             (com-interface-pointer                     Object)                                                                                            "JzCoInterfacePointer")


  (method public (conew com-class)
    (let ((interface (class-default-cointerface com-class)))
      (new (interface-com-interface interface)
        (cofactory-new-instance
          (find-cofactory~ (get-application) com-class)
          (category-guid interface)))))


  (method public (cocreate com-class (interface: interface (class-default-cointerface com-class)) (error?: error? #t))
    (let ((instance (cocreate-instance (category-guid com-class) (category-guid interface) error?)))
      (when instance
        (new (interface-com-interface interface)
          instance))))
  
  
  (method public (cobind vptr interface)
    (new (interface-com-interface interface)
      vptr))


  (method public (coquery com-interface interface)
    (new (interface-com-interface interface)
      (coquery-interface com-interface (category-guid interface))))


  (method public (corelease com-interface)
    (corelease-interface com-interface))
  
  
  (method public (com-class? object)
    (and (class? object)
         (subtyped? object 'CoObject)))
  
  
  (method public (com-interface? object)
    (and (interface? object)
         (subtyped? object 'IUnknown)))


  ;;;
  ;;;; CoFunction
  ;;;


  (method public (cofunction? object)
    (is? object cofunction))


  (external Jazz Object          (cofunction-costub                       Object)                                                                                            "JzCoFunctionCoStub")


  ;;;
  ;;;; CoObject
  ;;;


  ;;;
  ;;;; CoStub
  ;;;


  ;;;
  ;;;; CoUtilities
  ;;;


  (external Jazz bool            (succeeded?                              int)                                                                                               "JzSucceeded")
  (external Jazz bool            (failed?                                 int)                                                                                               "JzFailed")
  (external Jazz int             (hresult-severity                        int)                                                                                               "JzHResultSeverity")
  (external Jazz int             (hresult-facility                        int)                                                                                               "JzHResultFacility")
  (external Jazz int             (hresult-code                            int)                                                                                               "JzHResultCode")
  (external Jazz Object          (read-variant                            int)                                                                                               "JzReadVariant")
  (external Jazz void            (write-variant                           int Object bool)                                                                                   "JzWriteVariant")
  (external Jazz Object          (get-ignored-coerrors)                                                                                                                      "JzGetIgnoredCoerrors")
  (external Jazz void            (set-ignored-coerrors                    Object)                                                                                            "JzSetIgnoredCoerrors")
  (external Jazz int             (get-returned-coerror)                                                                                                                      "JzGetReturnedCoerror")


  (method public (decompose-hresult hresult)
    (values
      (hresult-severity hresult)
      (hresult-facility hresult)
      (hresult-code hresult)))
  
  
  (method public (assert-hresult hresult)
    (unless (succeeded? hresult)
      (set-clipboard-text (->string hresult))
      (error "COM error #x{x}" hresult)))
  
  
  (method public (without-coerrors coerrors call proc)
    (let ((preserved-ignored-coerrors (get-ignored-coerrors)))
      (unwind-protect
          (begin
            (set-ignored-coerrors coerrors)
            (let ((result (call))
                  (hresult (get-returned-coerror)))
              (proc hresult result)))
        (set-ignored-coerrors preserved-ignored-coerrors)))))
)