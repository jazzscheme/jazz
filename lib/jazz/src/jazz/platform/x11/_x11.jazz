;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; X11
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Jeremie Lasalle Ratelle.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.platform.x11 jazz


(import (jazz.platform.types)
        (jazz.platform.x11.x11-types))


(c-include "<X11/Xlib.h>")
(c-include "<X11/Xutil.h>")
(c-include "<X11/Xatom.h>")
(c-include "<stdlib.h>")
(c-include "<string.h>")
(c-include "<unistd.h>")


(c-constant None                     #x00000000)
(c-constant PointerRoot              1)
(c-constant CopyFromParent           #x00000000)
(c-constant InputOutput              1)
(c-constant CurrentTime              0)


(c-constant CWBackPixel              #x0002)
(c-constant CWBitGravity             #x0010)
(c-constant CWOverrideRedirect       #x0100)


(c-constant StaticGravity            10)


;;;
;;;; Event Masks
;;;


(c-constant NoEventMask              #x00000000)
(c-constant KeyPressMask             #x00000001)
(c-constant KeyReleaseMask           #x00000002)
(c-constant ButtonPressMask          #x00000004)
(c-constant ButtonReleaseMask        #x00000008)
(c-constant EnterWindowMask          #x00000010)
(c-constant LeaveWindowMask          #x00000020)
(c-constant PointerMotionMask        #x00000040)
(c-constant PointerMotionHintMask    #x00000080)
(c-constant Button1MotionMask        #x00000100)
(c-constant Button2MotionMask        #x00000200)
(c-constant Button3MotionMask        #x00000400)
(c-constant Button4MotionMask        #x00000800)
(c-constant Button5MotionMask        #x00001000)
(c-constant ButtonMotionMask         #x00002000)
(c-constant KeymapStateMask          #x00004000)
(c-constant ExposureMask             #x00008000)
(c-constant VisibilityChangeMask     #x00010000)
(c-constant StructureNotifyMask      #x00020000)
(c-constant ResizeRedirectMask       #x00040000)
(c-constant SubstructureNotifyMask   #x00080000)
(c-constant SubstructureRedirectMask #x00100000)
(c-constant FocusChangeMask          #x00200000)
(c-constant PropertyChangeMask       #x00400000)
(c-constant ColormapChangeMask       #x00800000)
(c-constant OwnerGrabButtonMask      #x01000000)


;;;
;;;; Event Types
;;;


(c-constant KeyPress         2)
(c-constant KeyRelease       3)
(c-constant ButtonPress      4)
(c-constant ButtonRelease    5)
(c-constant MotionNotify     6)
(c-constant EnterNotify      7)
(c-constant LeaveNotify      8)
(c-constant FocusIn          9)
(c-constant FocusOut         10)
(c-constant KeymapNotify     11)
(c-constant Expose           12)
(c-constant GraphicsExpose   13)
(c-constant NoExpose         14)
(c-constant VisibilityNotify 15)
(c-constant CreateNotify     16)
(c-constant DestroyNotify    17)
(c-constant UnmapNotify      18)
(c-constant MapNotify        19)
(c-constant MapRequest       20)
(c-constant ReparentNotify   21)
(c-constant ConfigureNotify  22)
(c-constant ConfigureRequest 23)
(c-constant GravityNotify    24)
(c-constant ResizeRequest    25)
(c-constant CirculateNotify  26)
(c-constant CirculateRequest 27)
(c-constant PropertyNotify   28)
(c-constant SelectionClear   29)
(c-constant SelectionRequest 30)
(c-constant SelectionNotify  31)
(c-constant ColormapNotify   32)
(c-constant ClientMessage    33)
(c-constant MappingNotify    34)
(c-constant LASTEvent        35)


;;;
;;;; Attribute masks
;;;


(c-constant CWBackPixmap        #x00000001)
(c-constant CWBackPixel         #x00000002)
(c-constant CWBorderPixmap      #x00000004)
(c-constant CWBorderPixel       #x00000008)
(c-constant CWBitGravity        #x00000010)
(c-constant CWWinGravity        #x00000020)
(c-constant CWBackingStore      #x00000040)
(c-constant CWBackingPlanes     #x00000080)
(c-constant CWBackingPixel      #x00000100)
(c-constant CWOverrideRedirect  #x00000200)
(c-constant CWSaveUnder         #x00000400)
(c-constant CWEventMask         #x00000800)
(c-constant CWDontPropagate     #x00001000)
(c-constant CWColormap          #x00002000)
(c-constant CWCursor            #x00004000)


;;;
;;;; Mouse constants
;;;


(c-constant Button1 1)
(c-constant Button2 2)
(c-constant Button3 3)
(c-constant Button4 4)
(c-constant Button5 5)
(c-constant Button6 6)
(c-constant Button7 7)


;;;
;;;; Keyboard constants
;;;


(c-constant ShiftMask              0)
(c-constant LockMask               1)
(c-constant ControlMask            2)
(c-constant Mod1Mask               3)
(c-constant Mod2Mask               4)
(c-constant Mod3Mask               5)
(c-constant Mod4Mask               6)
(c-constant Mod5Mask               7)



(c-constant XK_BackSpace      #xFF08)
(c-constant XK_Tab            #xFF09)
(c-constant XK_Linefeed       #xFF0A)
(c-constant XK_Clear          #xFF0B)
(c-constant XK_Return         #xFF0D)
(c-constant XK_Pause          #xFF13)
(c-constant XK_Scroll_Lock    #xFF14)
(c-constant XK_Sys_Req        #xFF15)
(c-constant XK_Escape         #xFF1B)

(c-constant XK_Home           #xFF50)
(c-constant XK_Left           #xFF51)
(c-constant XK_Up             #xFF52)
(c-constant XK_Right          #xFF53)
(c-constant XK_Down           #xFF54)
(c-constant XK_Prior          #xFF55)
(c-constant XK_Page_Up        #xFF55)
(c-constant XK_Next           #xFF56)
(c-constant XK_Page_Down      #xFF56)
(c-constant XK_End            #xFF57)
(c-constant XK_Begin          #xFF58)

(c-constant XK_Select         #xFF60)
(c-constant XK_Print          #xFF61)
(c-constant XK_Execute        #xFF62)
(c-constant XK_Insert         #xFF63)
(c-constant XK_Undo           #xFF65)
(c-constant XK_Redo           #xFF66)
(c-constant XK_Menu           #xFF67)
(c-constant XK_Find           #xFF68)
(c-constant XK_Cancel         #xFF69)
(c-constant XK_Help           #xFF6A)
(c-constant XK_Break          #xFF6B)
(c-constant XK_Mode_switch    #xFF7E)
(c-constant XK_script_switch  #xFF7E)
(c-constant XK_Num_Lock       #xFF7F)

(c-constant XK_KP_Add         #xFFAB)
(c-constant XK_KP_Subtract    #xFFAD)
(c-constant XK_KP_Decimal     #xFFAE)
(c-constant XK_KP_Divide      #xFFAF)

(c-constant XK_F1             #xFFBE)
(c-constant XK_F2             #xFFBF)
(c-constant XK_F3             #xFFC0)
(c-constant XK_F4             #xFFC1)
(c-constant XK_F5             #xFFC2)
(c-constant XK_F6             #xFFC3)
(c-constant XK_F7             #xFFC4)
(c-constant XK_F8             #xFFC5)
(c-constant XK_F9             #xFFC6)
(c-constant XK_F10            #xFFC7)
(c-constant XK_F11            #xFFC8)
(c-constant XK_F12            #xFFC9)

(c-constant XK_Shift_L        #xffe1)
(c-constant XK_Shift_R        #xffe2)
(c-constant XK_Control_L      #xffe3)
(c-constant XK_Control_R      #xffe4)
(c-constant XK_Caps_Lock      #xffe5)
(c-constant XK_Shift_Lock     #xffe6)
(c-constant XK_Meta_L         #xffe7)
(c-constant XK_Meta_R         #xffe8)
(c-constant XK_Alt_R          #xffe9)
(c-constant XK_Alt_L          #xffea)
(c-constant XK_Mode_switch    #xff7e)


(c-constant XK_Delete         #xFFFF)


(c-constant XK_space          #x020)
(c-constant XK_exclam         #x021)
(c-constant XK_quotedbl       #x022)
(c-constant XK_numbersign     #x023)
(c-constant XK_dollar         #x024)
(c-constant XK_percent        #x025)
(c-constant XK_ampersand      #x026)
(c-constant XK_apostrophe     #x027)
(c-constant XK_parenleft      #x028)
(c-constant XK_parenright     #x029)
(c-constant XK_asterisk       #x02a)
(c-constant XK_plus           #x02b)
(c-constant XK_comma          #x02c)
(c-constant XK_minus          #x02d)
(c-constant XK_period         #x02e)
(c-constant XK_slash          #x02f)

(c-constant XK_0              #x030)
(c-constant XK_1              #x031)
(c-constant XK_2              #x032)
(c-constant XK_3              #x033)
(c-constant XK_4              #x034)
(c-constant XK_5              #x035)
(c-constant XK_6              #x036)
(c-constant XK_7              #x037)
(c-constant XK_8              #x038)
(c-constant XK_9              #x039)

(c-constant XK_colon          #x03a)
(c-constant XK_semicolon      #x03b)
(c-constant XK_less           #x03c)
(c-constant XK_equal          #x03d)
(c-constant XK_greater        #x03e)
(c-constant XK_question       #x03f)
(c-constant XK_at             #x040)

(c-constant XK_A              #x041)
(c-constant XK_B              #x042)
(c-constant XK_C              #x043)
(c-constant XK_D              #x044)
(c-constant XK_E              #x045)
(c-constant XK_F              #x046)
(c-constant XK_G              #x047)
(c-constant XK_H              #x048)
(c-constant XK_I              #x049)
(c-constant XK_J              #x04a)
(c-constant XK_K              #x04b)
(c-constant XK_L              #x04c)
(c-constant XK_M              #x04d)
(c-constant XK_N              #x04e)
(c-constant XK_O              #x04f)
(c-constant XK_P              #x050)
(c-constant XK_Q              #x051)
(c-constant XK_R              #x052)
(c-constant XK_S              #x053)
(c-constant XK_T              #x054)
(c-constant XK_U              #x055)
(c-constant XK_V              #x056)
(c-constant XK_W              #x057)
(c-constant XK_X              #x058)
(c-constant XK_Y              #x059)
(c-constant XK_Z              #x05a)

(c-constant XK_bracketleft    #x05b)
(c-constant XK_backslash      #x05c)
(c-constant XK_bracketright   #x05d)
(c-constant XK_asciicircum    #x05e)
(c-constant XK_underscore     #x05f)
(c-constant XK_grave          #x060)

(c-constant XK_a              #x061)
(c-constant XK_b              #x062)
(c-constant XK_c              #x063)
(c-constant XK_d              #x064)
(c-constant XK_e              #x065)
(c-constant XK_f              #x066)
(c-constant XK_g              #x067)
(c-constant XK_h              #x068)
(c-constant XK_i              #x069)
(c-constant XK_j              #x06a)
(c-constant XK_k              #x06b)
(c-constant XK_l              #x06c)
(c-constant XK_m              #x06d)
(c-constant XK_n              #x06e)
(c-constant XK_o              #x06f)
(c-constant XK_p              #x070)
(c-constant XK_q              #x071)
(c-constant XK_r              #x072)
(c-constant XK_s              #x073)
(c-constant XK_t              #x074)
(c-constant XK_u              #x075)
(c-constant XK_v              #x076)
(c-constant XK_w              #x077)
(c-constant XK_x              #x078)
(c-constant XK_y              #x079)
(c-constant XK_z              #x07a)

(c-constant XK_braceleft      #x07b)
(c-constant XK_bar            #x07c)
(c-constant XK_braceright     #x07d)
(c-constant XK_asciitilde     #x07e)


;;;
;;;; Visibility constants
;;;


(c-constant IsUnmapped   0)
(c-constant IsUnviewable 1)
(c-constant IsViewable   2)


;;;
;;;; Focus constants
;;;


(c-constant NotifyAncestor         0)
(c-constant NotifyVirtual          1)
(c-constant NotifyInferior         2)
(c-constant NotifyNonlinear        3)
(c-constant NotifyNonlinearVirtual 4)
(c-constant NotifyPointer          5)
(c-constant NotifyPointerRoot      6)
(c-constant NotifyDetailNone       7)


(c-constant RevertToNone           None)
(c-constant RevertToPointerRoot    PointerRoot)
(c-constant RevertToParent         2)


;;;
;;;; Cursors Constants
;;;


(c-constant XC_X_cursor 0)
(c-constant XC_arrow 2)
(c-constant XC_crosshair 34)
(c-constant XC_hand2 60)
(c-constant XC_left_ptr 68)
(c-constant XC_sb_h_double_arrow 108)
(c-constant XC_sb_v_double_arrow 116)
(c-constant XC_watch 150)
(c-constant XC_xterm 152)


;;;
;;;; XChangeProperty modes
;;;


(definition PropModeReplace 0)


(definition (generate-x11-atoms)
  (set! WM_PROTOCOLS                      (XInternAtom default-x11-display "WM_PROTOCOLS" #f))
  (set! WM_DELETE_WINDOW                  (XInternAtom default-x11-display "WM_DELETE_WINDOW" #f))
  (set! _NET_WM_WINDOW_TYPE               (XInternAtom default-x11-display "_NET_WM_WINDOW_TYPE" #f))
  (set! _NET_WM_WINDOW_TYPE_DIALOG        (XInternAtom default-x11-display "_NET_WM_WINDOW_TYPE_DIALOG" #f))
  (set! _NET_WM_WINDOW_TYPE_DROPDOWN_MENU (XInternAtom default-x11-display "_NET_WM_WINDOW_TYPE_DROPDOWN_MENU" #f))
  (set! _NET_WM_WINDOW_TYPE_TOOLTIP       (XInternAtom default-x11-display "_NET_WM_WINDOW_TYPE_TOOLTIP" #f))
  (set! _NET_WM_WINDOW_TYPE_NORMAL        (XInternAtom default-x11-display "_NET_WM_WINDOW_TYPE_NORMAL" #f))
  (set! XA_CLIPBOARD                      (XInternAtom default-x11-display "CLIPBOARD" #f))
  (set! XdndAware                         (XInternAtom default-x11-display "XdndAware" #f))
  (set! XdndEnter                         (XInternAtom default-x11-display "XdndEnter" #f))
  (set! XdndLeave                         (XInternAtom default-x11-display "XdndLeave" #f))
  (set! XdndSelection                     (XInternAtom default-x11-display "XdndSelection" #f))
  (set! XdndPosition                      (XInternAtom default-x11-display "XdndPosition" #f))
  (set! XdndDrop                          (XInternAtom default-x11-display "XdndDrop" #f))
  (set! XdndStatus                        (XInternAtom default-x11-display "XdndStatus" #f))
  (set! XdndFinished                      (XInternAtom default-x11-display "XdndFinished" #f))
  (set! XdndTypeList                      (XInternAtom default-x11-display "XdndTypeList" #f))
  (set! XdndActionCopy                    (XInternAtom default-x11-display "XdndActionCopy" #f))
  (set! text/uri-list                     (XInternAtom default-x11-display "text/uri-list" #f)))

;;;
;;;; Base Atoms
;;;


(definition XA_PRIMARY 1)
(definition XA_ATOM 4)
(definition XA_STRING 31)
(definition XA_CLIPBOARD {})


;;;
;;;; Drag and Drop
;;;


(definition XdndVersion 5)

(definition XdndAware {})
(definition XdndEnter {})
(definition XdndLeave {})
(definition XdndSelection {})
(definition XdndPosition {})
(definition XdndDrop {})
(definition XdndStatus {})
(definition XdndFinished {})
(definition XdndTypeList {})
(definition XdndActionCopy {})

;;;
;;;; Drag and Drop MIME
;;;


(definition text/uri-list {})


;;;
;;;; _NET_WM_WINDOW_TYPE
;;;


(definition _NET_WM_WINDOW_TYPE {})
(definition _NET_WM_WINDOW_TYPE_DIALOG {})
(definition _NET_WM_WINDOW_TYPE_DROPDOWN_MENU {})
(definition _NET_WM_WINDOW_TYPE_TOOLTIP {})
(definition _NET_WM_WINDOW_TYPE_NORMAL {})


;;;
;;;; WM_PROTOCOLS
;;;


(definition WM_PROTOCOLS {})
(definition WM_DELETE_WINDOW {})


;;;
;;;; Utility Structures
;;;


(c-structure XRectangle
  (short x)
  (short y)
  (ushort width)
  (ushort height))


;;;
;;;; Attributes structure
;;;


(c-structure  XWindowAttributes
  (int x)
  (int y)
  (int width)
  (int height)
  (int border_width)
  (int depth)
  (Visual* visual)
  (Window root)
  (int class)
  (int bit_gravity)
  (int win_gravity)
  (int backing_store)
  (ulong backing_planes)
  (ulong backing_pixel)
  (Bool save_under)
  (Colormap colormap)
  (Bool map_installed)
  (int map_state)
  (long all_event_masks)
  (long your_event_mask)
  (long do_not_propagate_mask)
  (Bool override_redirect)
  (Screen* screen))


(c-structure XSetWindowAttributes
  (Pixmap background_pixmap)
  (ulong background_pixel)
  (Pixmap border_pixmap)
  (ulong border_pixel)
  (int bit_gravity)
  (int win_gravity)
  (int backing_store)
  (ulong backing_planes)
  (ulong backing_pixel)
  (Bool save_under)
  (long event_mask)
  (long do_not_propagate_mask)
  (Bool override_redirect)
  (Colormap colormap)
  (Cursor cursor))


;;;
;;;; Events Structures
;;;


(c-structure XAnyEvent
  (int type)
  (ulong serial)
  (Bool send_event)
  (Display* display)
  (Window window))


(c-structure XButtonEvent
  (int type)
  (ulong serial)
  (Bool send_event)
  (Display* display)
  (Window window)
  (Window root)
  (Window subwindow)
  (Time time)
  (int x)
  (int y)
  (int x_root)
  (int y_root)
  (uint state)
  (uint button)
  (Bool same_screen))


(c-structure XClientMessageEvent
  (int type)
  (ulong serial)
  (Bool send_event)
  (Display* display)
  (Window window)
  (Atom message_type)
  (int format))


(definition XClientMessageEvent-b-ref
  (c-function (XClientMessageEvent*) char*
    "___result_voidstar = ___arg1->data.b;"))


(definition XClientMessageEvent-s-ref
  (c-function (XClientMessageEvent*) short*
    "___result_voidstar = ___arg1->data.s;"))


(definition XClientMessageEvent-l-ref
  (c-function (XClientMessageEvent*) long*
    "___result_voidstar = ___arg1->data.l;"))
  
  
(c-structure XKeyEvent
  (int type)
  (ulong serial)
  (Bool send_event)
  (Display* display)
  (Window window)
  (Window root)
  (Window subwindow)
  (Time time)
  (int x)
  (int y)
  (int x_root)
  (int y_root)
  (uint state)
  (uint keycode)
  (Bool same_screen))


(c-structure XMotionEvent
  (int type)
  (ulong serial)
  (Bool send_event)
  (Display* display)
  (Window window)
  (Window root)
  (Window subwindow)
  (Time time)
  (int x)
  (int y)
  (int x_root)
  (int y_root)
  (uint state)
  (char is_hint)
  (Bool same_screen))


(c-structure XFocusChangeEvent
  (int type)
  (ulong serial)
  (Bool send_event)
  (Display* display)
  (Window window)
  (int mode)
  (int detail))


(c-structure XExposeEvent
  (int type)
  (ulong serial)
  (Bool send_event)
  (Display* display)
  (Window window)
  (int x)
  (int y)
  (int width)
  (int height)
  (int count))


(c-structure XConfigureEvent
  (int type)
  (ulong serial)
  (Bool send_event)
  (Display* display)
  (Window event)
  (Window window)
  (int x)
  (int y)
  (int width)
  (int height)
  (int border_width)
  (Window above)
  (Bool override_redirect))


(c-structure XSelectionClearEvent
  (int type)
  (ulong serial)
  (Bool send_event)
  (Display* display)
  (Window window)
  (Atom selection)
  (Time time))


(c-structure XSelectionRequestEvent
  (int type)
  (ulong serial)
  (Bool send_event)
  (Display* display)
  (Window owner)
  (Window requestor)
  (Atom selection)
  (Atom target)
  (Atom property)
  (Time time))


(c-structure XSelectionEvent
  (int type)
  (ulong serial)
  (Bool send_event)
  (Display* display)
  (Window requestor)
  (Atom selection)
  (Atom target)
  (Atom property)
  (Time time))


(c-structure XEvent
  (int type)
  (XAnyEvent xany)
  (XKeyEvent xkey)
  (XButtonEvent xbutton)
  (XMotionEvent xmotion)
  (XFocusChangeEvent xfocus)
  (XExposeEvent xexpose)
  (XConfigureEvent xconfigure)
  (XSelectionClearEvent xselectionclear)
  (XSelectionRequestEvent xselectionrequest)
  (XSelectionEvent xselection)
  (XClientMessageEvent xclient))


(c-structure XErrorEvent
  (int type)
  (Display* display)
  (ulong serial)
  (byte error_code)
  (byte request_code)
  (byte minor_code)
  (XID resourceid))


(c-type XERRORPROC (function (Display* XErrorEvent*) int))


;; Incomplete
(c-structure XGCValues
  (int function))


;;;
;;;; Functions
;;;


(c-external void         (XClearArea             Display* Window int int uint uint Bool))
(c-external void         (XCopyArea              Display* Drawable Drawable GC int int uint uint int int))
(c-external Display*     (XOpenDisplay           char*))
(c-external int          (XCloseDisplay          Display*))
(c-external int          (XDefaultScreen         Display*))
(c-external Screen*      (XScreenOfDisplay       Display* int))
(c-external Window       (XRootWindow            Display* int))
(c-external ulong        (XBlackPixel            Display* int))
(c-external ulong        (XWhitePixel            Display* int))
(c-external Window       (XCreateSimpleWindow    Display* Window int int uint uint uint ulong ulong))
(c-external int          (XMapWindow             Display* Window))
(c-external int          (XFlush                 Display*))
(c-external Visual*      (XDefaultVisual         Display* int))
(c-external void         (XNextEvent             Display* XEvent*))
(c-external void         (XSelectInput           Display* Window long))
(c-external void         (XDestroyWindow         Display* Window))
(c-external void         (XUnmapWindow           Display* Window))
(c-external Window       (XCreateWindow          Display* Window int int uint uint uint int uint Visual* ulong XSetWindowAttributes*))
(c-external Status       (XGetWindowAttributes   Display* Window XWindowAttributes*))
(c-external void         (XMoveWindow            Display* Window int int))
(c-external void         (XResizeWindow          Display* Window uint uint))
(c-external KeyCode      (XKeysymToKeycode       Display* KeySym))
(c-external KeySym       (XKeycodeToKeysym       Display* KeyCode int))
(c-external void         (XReparentWindow        Display* Window Window int int))
(c-external void         (XSetInputFocus         Display* Window int Time))
(c-external int          (XPending               Display*))
(c-external void         (XRaiseWindow           Display* Window))
(c-external void         (XDestroyWindow         Display* Window))
(c-external void         (XSync                  Display* Bool))
(c-external void         (XSynchronize           Display* Bool))
(c-external void         (XBell                  Display* int))
(c-external ulong        (XWhitePixel            Display* int))
(c-external void         (XMoveResizeWindow      Display* Window int int uint uint))
(c-external void         (XLowerWindow           Display* Window))
(c-external void         (XSetErrorHandler       XERRORPROC))
(c-external Atom         (XInternAtom            Display* char-string Bool))
(c-external int          (getpid))
(c-external int          (ConnectionNumber       Display*))
(c-external Bool         (XCheckTypedEvent       Display* int XEvent*))
(c-external Cursor       (XCreateFontCursor      Display* uint))
(c-external void         (XDefineCursor          Display* Window Cursor))
(c-external void         (XSetSelectionOwner     Display* Atom Window Time))
(c-external void         (XChangeProperty        Display* Window Atom Atom int int uint8* int))
(c-external Window       (XGetSelectionOwner     Display* Atom))
(c-external void         (XConvertSelection      Display* Atom Atom Atom Window Time))
(c-external Status       (XSendEvent             Display* Window Bool long XEvent*))
(c-external GC           (XCreateGC              Display* Drawable ulong XGCValues*))
(c-external void         (XFreeGC                Display* GC))
(c-external void         (XSetClipRectangles     Display* GC int int XRectangle* int int))



;;;
;;;; Custom functions
;;;


(definition (ChangeProperty display window property type mode data)
  (let* ((format    (cond ((u8vector? data) 8)
                          ((u32vector? data) 32)
                          (else (error "Format not supported"))))
         (nelements (case format
                      ((8)  (u8vector-length data))
                      ((32) (u32vector-length data))))
        
         (data      (case format
                      ((8)  (u8vector->uint8* data))
                      ((32) (let ((pointer (u32vector->uint32* data)))
                              (uint32*->uint8* pointer))))))
    (XChangeProperty display window property type format mode data nelements)
    (uint8*-free data)))


(definition rgb-pixel
  (c-function (Display* short short short) ulong
    "XColor xcol;
     xcol.red = ___arg2 << 8;
     xcol.green = ___arg3 << 8;
     xcol.blue = ___arg4 << 8;
     XAllocColor(___arg1, DefaultColormap(___arg1, XDefaultScreen (___arg1)), &xcol);
     ___result = xcol.pixel;"))


(definition select
  (c-function (int fd_set* fd_set* fd_set* long long) int
    "struct timeval time;
     time.tv_sec = ___arg5;
     time.tv_usec = ___arg6;
     ___result = select( ___arg1, ___arg2, ___arg3, ___arg4, &time );"))


(definition (setup-fdset . fds)
  (let ((alloc-fdset (c-function () fd_set*
                       "fd_set *set = malloc(sizeof(fd_set));
                        FD_ZERO(set);
                        ___result_voidstar = set;"))
        (set-fdset (c-function (int fd_set*) void
                     "FD_SET(___arg1, ___arg2);")))
     (let ((set (alloc-fdset)))
       (for-each (function (fd)
                   (set-fdset fd set))
                 fds)
       set)))


(definition ProcessClientMessage
  (c-function (Display* XClientMessageEvent*) Bool
    "Atom wm_delete_window = XInternAtom(___arg1, \"WM_DELETE_WINDOW\", False);
     if( ___arg2->data.l[0] == wm_delete_window )
       ___result = True;
     else
       ___result = False;"))


(definition (XWindowEvent display window mask event)
  (let ((func (c-function (Display* Window int XEvent*) void
                "XWindowEvent(___arg1, ___arg2, ___arg3, ___arg4);")))
    (func display window mask event)))


(definition (XTranslateCoordinates disp src_win dst_win x y)
  (let ((pt ((c-function (Display* Window Window int int) int*
                  "int *point = malloc(2*sizeof(int));
                  Window tmp;
                  XTranslateCoordinates( ___arg1, ___arg2, ___arg3, ___arg4, ___arg5, point, point+1, &tmp);
                  ___result_voidstar = point;") disp src_win dst_win x y)))
      (values (int*-ref pt 0) (int*-ref pt 1))))


(definition XNumberOfChildren
  (c-function (Display* Window) uint
    "Window root;
     Window parent;
     Window *children;
     unsigned int num;
     Window ret;
     XQueryTree( ___arg1, ___arg2, &root, &parent, &children, &num);
     if( num != 0) { XFree(children); }
     ___result = num;"))


(definition XGetChildHandle
  (c-function (Display* Window int) Window
    "Window root;
     Window parent;
     Window *children;
     unsigned int num;
     Window ret;
     XQueryTree( ___arg1, ___arg2, &root, &parent, &children, &num);
     ret = *(children+num-___arg3-1);
     if( num != 0) { XFree(children); }
     ___result = ret;"))


(definition XButtonDown?
  (c-function (Display*) Bool
    "Window root_return;
     Window child_return;
     int root_x_return, root_y_return, win_x_return, win_y_return;
     unsigned int mods;
     XQueryPointer( ___arg1, DefaultRootWindow(___arg1), &root_return, &child_return, &win_x_return, &win_y_return,
                    &win_x_return, &win_y_return, &mods );
     ___result = mods & Button1Mask;"))


(definition XKeyDown?
  (c-function (Display* int) Bool
    "char keys[32];
     XQueryKeymap(___arg1, keys);
     ___result = keys[___arg2/8] & (1 << (___arg2%8));"))


(definition (XMousePosition disp win)
  (let ((coords ((c-function (Display* Window) int*
                          "int *coords = calloc(2, sizeof(int));
                           Window x,y;
                           int a,b;
                           unsigned int c;
                           XQueryPointer( ___arg1, ___arg2, &x, &y, coords, coords+1, &a, &b, &c);
                           ___result_voidstar = coords;") disp win)))
    (let ((x (int*-ref coords 0))
	  (y (int*-ref coords 1)))
      (int*-free coords)
      (values x y))))


(definition XMouseWindow
  (c-function (Display* Window) Window
     "Window root_return, child_return;
      int root_x_return, root_y_return, win_x_return, win_y_return;
      unsigned int mask_return;
      XQueryPointer( ___arg1, ___arg2, &root_return, &child_return, &root_x_return, &root_y_return, &win_x_return, &win_y_return, &mask_return );
      ___result = child_return;"))


(definition XInvalidateRect
  (c-function (Display* Window int int int int) void
    "XEvent exp;
     exp.xexpose.type = Expose;
     exp.xexpose.window = ___arg2;
     exp.xexpose.x = ___arg3;
     exp.xexpose.y = ___arg4;
     exp.xexpose.width = ___arg5;
    exp.xexpose.height = ___arg6;
    exp.xexpose.count = 0;
    XSendEvent( ___arg1, ___arg2, True, ExposureMask, &exp );"))


(definition (XGetInputFocus display)
  (let ((ret ((c-function (Display*) int*
                  "Window win;
                   int *ret = calloc(2, sizeof(int));
                   XGetInputFocus(___arg1, &win, ret+1);
                   *ret = (int)win;
                   ___result_voidstar = ret;") display)))
    (values (int*-ref ret 0) (int*-ref ret 1))))


(definition (XGetWindowProperty display window property long_offset long_length delete req_type)
  (let ((actual_type_return-pt   (ulong*-alloc 1))
        (actual_format_return-pt (int*-alloc 1))
        (nitems_return-pt        (ulong*-alloc 1))
        (bytes_after_return-pt   (ulong*-alloc 1))
        (prop_return-pt          (uint8**-alloc 1))
        (func                    (c-function (Display* Window Atom long long Bool Atom Atom* int* ulong* ulong* uint8**) int "XGetWindowProperty")))
  (func display window property long_offset long_length delete req_type actual_type_return-pt actual_format_return-pt nitems_return-pt bytes_after_return-pt prop_return-pt)
  (let ((nitems_return        (ulong*-ref nitems_return-pt 0))
        (prop_return          (uint8**-ref prop_return-pt 0))
        (actual_format_return (int*-ref actual_format_return-pt 0))
        (actual_type_return   (ulong*-ref actual_type_return-pt 0))
        (bytes_after_return   (ulong*-ref bytes_after_return-pt 0)))
    (ulong*-free actual_type_return-pt)
    (ulong*-free nitems_return-pt)
    (ulong*-free bytes_after_return-pt)
    (int*-free actual_format_return-pt)
    (uint8**-free prop_return-pt)
    (values actual_type_return actual_format_return nitems_return bytes_after_return prop_return))))


(definition GetPropertyString
  (c-function (Display* Window Atom) char-string
    "unsigned char *ret;
     Atom type;
     int format;
     unsigned long nitems;
     unsigned long bytes_after_return;
     XGetWindowProperty(___arg1,___arg2,___arg3,0,100000,False,XA_STRING,&type,&format,&nitems,&bytes_after_return,&ret);
     ___result = (char*)ret;"))


(definition (XRetrieveSelection display toplevel selection target timestamp)
  (XConvertSelection display selection target None toplevel timestamp)
  (let ((ev (XEvent-make)))
    (let loop ((i 0)
               (return #f))
         (if (and (< i 1000000) (not return))
             (loop (+ i 1) (XCheckTypedEvent display SelectionNotify ev))
           (let* ((property (if return (XSelectionEvent-property-ref (XEvent-xselection-ref ev)) None))
                  (result (if (= property None)
                              #f
                            (XGetWindowProperty display toplevel (XSelectionEvent-property-ref (XEvent-xselection-ref ev)) 0 100000 #f target))))
             (XEvent-free ev)
             result)))))

     
(definition (XGetClipboardString display toplevel)
  (let ((owner (XGetSelectionOwner display XA_CLIPBOARD)))
    (if (= owner toplevel)
        (GetPropertyString display toplevel XA_PRIMARY)
      (XConvertSelection display XA_CLIPBOARD XA_STRING None toplevel CurrentTime)
      (let ((ev (XEvent-make)))
        (let loop ((i 0)
                   (return #f))
          (if (and (< i 1000000) (not return))
              (loop (+ i 1) (XCheckTypedEvent display SelectionNotify ev))
            (let* ((property (if return (XSelectionEvent-property-ref (XEvent-xselection-ref ev)) None))
                   (result (if (= property None)
                               ""
                             (GetPropertyString display toplevel (XSelectionEvent-property-ref (XEvent-xselection-ref ev))))))
              (XEvent-free ev)
              result)))))))


(definition (XSetClipboardString display window string)
    (XChangeProperty display window XA_PRIMARY XA_STRING 8 PropModeReplace (char-string->uint8* string) (string-length string))
    (XSetSelectionOwner display XA_CLIPBOARD window CurrentTime))


(definition (XSendClipboardString display toplevel requestor selection target property)
  (let ((string (GetPropertyString display toplevel XA_PRIMARY)))
    (XChangeProperty display requestor property target 8 PropModeReplace (char-string->uint8* string) (string-length string))
    (let* ((ev (XEvent-make))
           (xselection (XEvent-xselection-ref ev)))
      (XSelectionEvent-type-set! xselection SelectionNotify)
      (XSelectionEvent-send_event-set! xselection #t)
      (XSelectionEvent-display-set! xselection display)
      (XSelectionEvent-requestor-set! xselection requestor)
      (XSelectionEvent-selection-set! xselection selection)
      (XSelectionEvent-target-set! xselection target)
      (XSelectionEvent-property-set! xselection property)
      (XSelectionEvent-time-set! xselection CurrentTime)
      (XSendEvent display requestor #f 0 ev)
      (XEvent-free ev))))


(definition XSetWMName
  (c-function (Display* Window char-string) void
    "XTextProperty textProp;
     XStringListToTextProperty(&___arg3, 1, &textProp);
     XSetWMName(___arg1, ___arg2, &textProp);"))


(definition XGetErrorText
  (c-function (Display* int) char-string
    "char buffer[255];
     XGetErrorText(___arg1, ___arg2, buffer, 255);
     ___result = buffer;"))


(definition XSetWMProtocols
  (c-function (Display* Window Atom) void
    "XSetWMProtocols( ___arg1, ___arg2, &___arg3, 1 );"))


;;;
;;;; Error functions
;;;


(definition x11-error-handler
  #f)

(definition public (x11-set-error-handler proc)
  (set! x11-error-handler proc)
  (XSetErrorHandler x11-call-error-handler))

(c-definition (x11-call-error-handler display error) (Display* XErrorEvent*) int "x11_call_error_handler" ""
  (x11-error-handler display error))


(definition public (synchronize-x11 flag)
  (XSynchronize default-x11-display flag))


;;;
;;;; Display
;;;


(definition default-x11-display
  #f)


(definition public (get-default-x11-display)
  default-x11-display)


(definition public (set-default-x11-display display)
  (set! default-x11-display display))


;;;
;;;; Display Port
;;;


(definition (wait-on-port port timeout)
  (##wait-for-io! (device-port-rcondvar port) timeout))


(definition (device-port-rcondvar port)
  (##vector-ref port 44))


(definition x11-display-port #f)


(definition (get-x11-display-port)
  x11-display-port)


(definition (set-x11-display-port port)
  (set! x11-display-port port))


;;;
;;;; Process
;;;


(definition public (relinquish-process)
  )


(definition public (GetCurrentProcessId)
  (getpid))


;;;
;;;; Message
;;;


(definition (system-message text . rest)
  (display text)
  (newline))


;;;
;;;; Cursors
;;;


(definition public Cursors
  {})


(definition (x11-create-cursors)
  (set! Cursors (list
                  (list :arrow               (XCreateFontCursor default-x11-display XC_left_ptr))
                  (list :wait                (XCreateFontCursor default-x11-display XC_watch))
                  (list :vertical-splitter   (XCreateFontCursor default-x11-display XC_sb_h_double_arrow))
                  (list :horizontal-splitter (XCreateFontCursor default-x11-display XC_sb_v_double_arrow))
                  (list :ibeam               (XCreateFontCursor default-x11-display XC_xterm))
                  (list :finger              (XCreateFontCursor default-x11-display XC_hand2))
                  (list :cross               (XCreateFontCursor default-x11-display XC_crosshair))
                  (list :left-arrow          (XCreateFontCursor default-x11-display XC_arrow))
                  @a((list :all                 IDC_SIZEALL)
                     (list :west-east           IDC_SIZEWE)
                     (list :no                  IDC_NO)
                     (list :move                (new Cursor-Resource "Move"))
                     (list :opened-hand         (new Cursor-Resource "OpenedHand"))
                     (list :closed-hand         (new Cursor-Resource "ClosedHand"))
                     (list :zoom                (new Cursor-Resource "Zoom"))
                     (list :zoom-in             (new Cursor-Resource "ZoomIn"))
                     (list :zoom-out            (new Cursor-Resource "ZoomOut"))
                     (list :spy                 (new Cursor-Resource "Spy")))))))
