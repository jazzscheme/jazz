;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Relocate
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module jazz.script.relocate jazz


(import (jazz.io)
        (jazz.platform.library))


;;;
;;;; Relocate
;;;


(definition (relocate)
  (split-command-line (command-arguments) '() '("debugger" "r" "run") #f
    (lambda (commands options remain)
      (case (length remain)
        ((3)
         (bind (dirname old-prefix new-prefix) remain
           (let ((dir (new-directory (current-directory-get) (tokenise-filename dirname))))
             (relocate-directory dir old-prefix new-prefix))))
        ((4)
         (bind (dirname filename old-prefix new-prefix) remain
           (let ((dir (new-directory (current-directory-get) (tokenise-filename dirname))))
             (let ((file (new-file dir (tokenise-filename filename))))
               (relocate-file dir file old-prefix new-prefix)))))
        (else
         (error "Expected 3 or 4 arguments"))))))


(definition (relocate-directory dir old-prefix new-prefix)
  (let ((executables 0)
        (libraries 0))
    (iterate-directory dir
      (lambda (file)
        (receive (exe lib) (relocate-file dir file old-prefix new-prefix)
          (increase! executables exe)
          (increase! libraries lib)))
      files?: #t
      directories?: #f
      recursive?: #t)
    (format :terminal "relocated {a} executables and {a} libraries{%}" executables libraries)))


(definition (relocate-file dir file old-prefix new-prefix)
  (let ((executables 0)
        (libraries 0))
    (define (executable? file)
      (and (or (ends-with? (get-name file) "-1.0")
               (not (get-extension file)))
           (let ((filename (parse file)))
             (and (not (string-contains? filename "gstreamer/etc"))
                  (not (string-contains? filename "gstreamer/share"))
                  (not (ends-with? filename "/gst-shell"))
                  (not (ends-with? filename "/gst-validate-launcher"))))))
    
    (define (shared? file)
      (filename=? (get-extension file) "dylib"))
    
    (define (bundle? file)
      (filename=? (get-extension file) "so"))
    
    (unless (symbolic-link? file)
      (let ((kind (cond ((executable? file) (increase! executables) 'executable)
                        ((shared? file) (increase! libraries) 'shared)
                        ((bundle? file) (increase! libraries) 'bundle)
                        (else #f))))
        (when kind
          (relocate-subfile dir file kind old-prefix new-prefix))))
    (values executables libraries)))


;;;
;;;; Run
;;;


(register-product-run 'relocate
  (lambda (descriptor)
    (relocate))))
