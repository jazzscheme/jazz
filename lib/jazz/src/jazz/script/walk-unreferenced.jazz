;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Walk Unreferenced
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module jazz.script.walk-unreferenced jazz


(import (jazz.io)
        (jazz.runtime))
  

;;;
;;;; Unreferenced
;;;


(define (walk-unreferenced)
  (define (collect-unreferenced-imports unit-name)
    (catch (Walk-Problems exc
             #f)
      (let ((declaration (parameterize ((analysis-mode? #t))
                           (walk-unit unit-name))))
        (when (is? declaration Module-Declaration)
          (collect (lambda (import)
                     (when (not (get-hit?~ import))
                       (get-name~ import)))
                   (get-imports~ declaration))))))
  
  (let ((all '())
        (count 0))
    (iterate-units
      (lambda (unit-name)
        (terminal 'walking unit-name)
        (let ((unreferenced (collect-unreferenced-imports unit-name)))
          (when (and unreferenced (not (null? unreferenced)))
            (set! all (cons (cons unit-name unreferenced) all))
            (increase! count)))))
    (call-with-output-file (list path: "~/walk-unreferenced.jazz" eol-encoding: (get-eol-encoding))
      (lambda (port)
        (pretty-print (sort string<? all key: (lambda (info) (symbol->string (car info))))
                      port)))
    (format :console "Found {a} unreferenced{a} sent to ~~/walk-unreferenced.jazz" (format-cardinality count) (format-plural count))))


;;;
;;;; Run
;;;


(register-product-run 'walk-unreferenced
  (lambda (descriptor)
    (walk-unreferenced))))
