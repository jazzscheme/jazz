;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Walk
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module jazz.script.walk jazz


(import (jazz.io)
        (jazz.runtime))


;;;
;;;; Walk
;;;


(define (walk)
  (call-with-output-file (list path: "~/walk-problems.jazz" eol-encoding: (get-eol-encoding))
    (lambda (problems-port)
      (call-with-output-file (list path: "~/walk-unresolved.jazz" eol-encoding: (get-eol-encoding))
        (lambda (unresolved-port)
          (call-with-output-file (list path: "~/walk-unreferenced.jazz" eol-encoding: (get-eol-encoding))
            (lambda (unreferenced-port)
              (let ((problems-count 0)
                    (unresolved (make-table test: eq?))
                    (unresolved-count 0)
                    (unreferenced '())
                    (unreferenced-count 0))
                (define (walk-with-catch unit-name)
                  (catch (Walk-Problems exc
                           ;; problems
                           (format problems-port ";;;{%}")
                           (format problems-port ";;;; {a}{%}" unit-name)
                           (format problems-port ";;;{%}")
                           (format problems-port "{%}{%}")
                           (display-exception exc problems-port)
                           (format problems-port "{%}{%}")
                           (increase! problems-count)
                           ;; unresolved
                           (let ((problems (append (get-warnings exc) (get-errors exc))))
                             (for-each (lambda (problem)
                                         (when (is? problem Unresolved-Error)
                                           (table-add unresolved (get-symbol problem) unit-name)
                                           (increase! unresolved-count)))
                                       problems))
                           #f)
                    (parameterize ((analysis-mode? #t))
                      (walk-unit unit-name))))
                
                ;; problems
                (iterate-units
                  (lambda (unit-name)
                    (terminal 'walking unit-name)
                    (let ((declaration (walk-with-catch unit-name)))
                      ;; unreferenced
                      (when (is? declaration Module-Declaration)
                        (let ((unreferenced-imports
                                (collect (lambda (import)
                                           (and (not (get-hit? import))
                                                (get-name import)))
                                         (get-imports declaration))))
                          (when (not (null? unreferenced-imports))
                            (set! unreferenced (cons (cons unit-name unreferenced-imports) unreferenced))
                            (increase! unreferenced-count)))))))
                ;; unresolved
                (for-each (lambda (info)
                            (bind (symbol . units) info
                              (pretty-print (cons symbol (remove-duplicates units)) unresolved-port)))
                          (sort string<? (table->list unresolved) key: (lambda (info) (symbol->string (car info)))))
                ;; unreferenced
                (for-each (lambda (info)
                            (pretty-print info unreferenced-port))
                          (sort string<? unreferenced key: (lambda (info) (symbol->string (car info)))))
                ;; summary
                (format :console "Found {a} problem{a}, {a} unresolved and {a} unreferenced"
                  (format-cardinality problems-count)
                  (format-plural problems-count)
                  (format-cardinality unresolved-count)
                  (format-cardinality unreferenced-count))))))))))


;;;
;;;; Run
;;;


(register-product-run 'walk
  (lambda (descriptor)
    (walk))))
