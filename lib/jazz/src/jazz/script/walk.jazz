;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Walk
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module jazz.script.walk jazz


(import (jazz.io)
        (jazz.runtime))


;;;
;;;; Walk
;;;


(definition public (walk-run)
  (cond ((command-argument? "unresolved")
         (walk-unresolved))
        (else
         (walk-problems))))


;;;
;;;; Problems
;;;


(define (walk-problems)
  (call-with-output-file (list path: "~/problems.jazz" eol-encoding: (get-eol-encoding))
    (lambda (port)
      (let ((count 0))
        (define (walk-with-catch unit-name)
          (catch (Walk-Problems exc
                   (format port ";;;{%}")
                   (format port ";;;; {a}{%}" unit-name)
                   (format port ";;;{%}")
                   (format port "{%}{%}")
                   (display-exception exc port)
                   (format port "{%}{%}")
                   (increase! count))
            (walk-unit unit-name)))
        
        (iterate-units walk-with-catch feedback:
          (lambda (unit-name)
            (terminal 'walking unit-name)))
        (format :console "Found {a} problem{a} sent to ~~/problems.jazz" count (format-plural count))))))


;;;
;;;; Unresolved
;;;


(define (walk-unresolved)
  (let ((unresolved (make-table test: eq?)))
    (define (walk unit-name)
      (catch (Walk-Problems exc
               (let ((problems (append (get-warnings~ exc) (get-errors~ exc))))
                 (for-each (lambda (problem)
                             (when (is? problem Unresolved-Error)
                               (table-add unresolved (get-symbol~ problem) unit-name)))
                           problems)))
        (walk-unit unit-name)))
    
    (iterate-units walk feedback:
      (lambda (unit-name)
        (terminal 'walking unit-name)))
    
    (call-with-output-file (list path: "~/unresolved.jazz" eol-encoding: (get-eol-encoding))
      (lambda (port)
        (pp (table-keys unresolved) port)
        (pp (remove-duplicates (apply append (table-values unresolved))) port)))))


;;;
;;;; Run
;;;


(register-product-run 'walk
  (lambda (descriptor)
    (walk-run))))
