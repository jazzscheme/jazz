;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Applications
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.system.application.Application jazz


(import (jazz.builder.workbench)
        (jazz.console)
        (jazz.debuggee)
        (jazz.debugger)
        (jazz.designer)
        (jazz.io)
        (jazz.jml)
        (jazz.jrm)
        (jazz.language.jazz)
        (jazz.language.jazz.debuggee)
        (jazz.library)
        (jazz.library.component)
        (jazz.library.listener)
        (jazz.library.template)
        (jazz.literals)
        (jazz.platform)
        (jazz.profile)
        (jazz.runtime)
        (jazz.system)
        (jazz.system.application)
        (jazz.system.process)
        (jazz.ui)
        (jazz.ui.clipboard)
        (jazz.ui.dialog)
        (jazz.ui.login)
        (jazz.ui.look)
        (jazz.ui.view)
        (jazz.ui.window)
        (jazz.ui.workspace)
        (jazz.utilities)
        (time))


(class Application extends Process implements (Context-Provider History-Provider Event-Consumer Save-Environment-Listener)


  (slot toplevel                 initialize {})
  (slot stage-border             initialize {})
  (slot stage                    initialize {})
  (slot menubar                  initialize {})
  (slot status-bar               initialize {})
  (slot profile-name             initialize {})
  (slot profile-module           initialize {})
  (slot profile-class            initialize {})
  (slot profile-bindings         initialize {})
  (slot profile                  initialize {})
  (slot focus-listeners          initialize '())
  (slot application-listeners    initialize (make-table test: eq?))
  (slot selected-owner           initialize {})
  (slot selected                 initialize {})
  (slot selected-listeners       initialize '())
  (slot event-consumer           initialize self)
  (slot history-manager          initialize (new History-Manager self))
  (slot depots-preferences       initialize {})
  (slot active?                  initialize #f)
  (slot application-actions      initialize '())
  (slot profile-actions          initialize '())
  (slot guest-actions            initialize '())
  (slot focus-actions            initialize '())
  (slot bindings-designer        initialize {})
  (slot shortcut-table           initialize {})
  (slot shortcut-hook            initialize {})
  (slot resources                initialize (make-table test: equal?))
  
  
  (method meta (external-name . rest)
    'application)

  
  ;;;
  ;;;; Access
  ;;;


  (method (get-toplevel)
    toplevel)


  (method public (get-stage)
    stage)


  (method public (get-menubar)
    menubar)


  (method public (set-menubar bar)
    (set! menubar bar))


  (method public (get-status-bar)
    status-bar)


  (method public (set-status-bar status)
    (set! status-bar status))


  (method public (get-profile)
    profile)


  (method public (get-resources)
    resources)


  ;;;
  ;;;; Startup
  ;;;


  (method (prepare-environment)
    (nextmethod)
    (set-application self)
    (setup-shortcuts)
    @test-java
    (test-java)
    (let ((flat-look (new Flat-Look))
          (windows-look (new Windows-Look)))
      (set-looks (list flat-look windows-look))
      (set-look flat-look))
    (setup-resources)
    (initialize-platform)
    (when (use-profile?)
      (log-profile)))

  
  (method (start-environment)
    (nextmethod)
    (setup-bindings)
    (initialize-toplevel)
    (initialize-stage)
    @unimplemented
    (setup-depots)
    (initialize-clipboard)
    (register-clipboard-formats))


  (method (finalize-environment)
    (nextmethod)
    (set-cursor :arrow)
    (splash-screen)
    (when stage
      (install-wallpaper~ stage)))

  
  (method (setup-profile)
    (when (use-profile?)
      (create-profile)
      (set-profile-actions (get-class-actions profile))))
  
  
  (method (finish-environment)
    (nextmethod)
    (add-save-environment-listener self)
    (when profile
      (with-safe-execution "initing the profile"
        (function ()
          (init~ profile))
        continue-handler:
        (function (err)
          )))
    (reload-session)
    (remove-splash-screen))
  
  
  (method (finish-process)
    (nextmethod)
    (select-default-workspace)
    (update-focus-actions)
    (update-windowing-actions))
  
  
  (method (conclude-environment)
    (nextmethod)
    (set-visible?~ toplevel #t)
    (when (run-loop?)
      (select-foreground-window (get-handle~ toplevel)))
    (when profile
      (with-safe-execution "finalizing the profile"
        (function ()
          (finalize~ profile))
        continue-handler:
        (function (err)
          ))))

  
  (method (conclude-process)
    (nextmethod)
    (when controller-debugger
      (start-repl-thread event-thread {} (get-console-port))))
  
  
  ;;;
  ;;;; Termination
  ;;;
  
  
  (method (terminate-process)
    (nextmethod)
    (unregister-alias 'Profile)
    (reset-palettes)
    (reset-dockeds)
    (reset-toolbars)
    (when toplevel
      (close~ toplevel)
      (set! toplevel {})
      (set! stage-border {})
      (set! stage {})
      (set! menubar {})
      (set! status-bar {})
      (set! profile-name {})
      (set! profile-module {})
      (set! profile-class {})
      (set! profile-bindings {})
      (set! profile {})))


  ;;;
  ;;;; Java
  ;;;
  
  
  @test-java
  (definition Java-Classpath
    '({File "C:" "Java" "j2sdk1.4.2_04" "jre" "lib" "rt.jar"}
      {File "C:" "Java" "BCEL" "lib" "bcel-5.1.jar"}
      {File "C:" "Java" "JDBC" "msbase.jar"}
      {File "C:" "Java" "JDBC" "msutil.jar"}
      {File "C:" "Java" "JDBC" "mssqlserver.jar"}))
  
  
  @test-java
  (method (test-java)
    (setup-jvm classpath: Java-Classpath)
    (c-test)
    (let* ((loader (getSystemClassLoader~ java.lang.ClassLoader))
           (class (forName~ java.lang.Class "yo" #t loader)))
      (message-box (format "{a}" class))))


  ;;;
  ;;;; Loop
  ;;;


  (method (start-loop)
    (setup-events)
    (process-events))
  
  
  (method (resume-loop-action)
    (when toplevel
      (select-foreground-window (get-handle~ toplevel))))


  ;;;
  ;;;; Clipboard
  ;;;
  
  
  (method public virtual (clipboard-prefix)
    (format "{a}_{a}_"
            (process-name)
            (present~ (process-version))))
  
  
  (method protected virtual (register-clipboard-formats)
    (register-jazz-clipboard-formats))


  ;;;
  ;;;; Clipboard Stack
  ;;;

  
  (definition Clipboard-Stack
    '())
  
  (definition Max-Stack
    256)
  
  
  (method public (get-clipboard-stack)
    Clipboard-Stack)
  
  
  (method public (empty-clipboard-stack?)
    (null? Clipboard-Stack))
  
  
  (method public (add-clipboard)
    (let ((text (get-clipboard-text)))
      (when text
        (set! Clipboard-Stack (cons text Clipboard-Stack))
        (trim-clipboard))))
  
  
  (method public (push-clipboard-list list)
    (let ((pushed (length list)))
      (if (> pushed Max-Stack)
          (error "Unable to push list of {a} onto the clipboard stack" pushed)
        (set! Clipboard-Stack (append list Clipboard-Stack))
        (trim-clipboard))))
  
  
  (method (trim-clipboard)
    (when (> (length Clipboard-Stack) Max-Stack)
      (set-cdr! (tail Clipboard-Stack (- Max-Stack 1)) '())))
  
  
  (method public (pop-clipboard)
    (let ((string (car Clipboard-Stack)))
      (set! Clipboard-Stack (cdr Clipboard-Stack))
      (set-clipboard-text string)
      string))
  
  
  (method public (on-paste-from-stack evt)
    (let ((focus (get-focus)))
      (if (is-not? focus Text-View)
          (bell)
        (if (null? Clipboard-Stack)
            (bell)
          (pop-clipboard))
        (paste-clipboard~ focus))))
  
  
  (method public (on-pop-clipboard-stack evt)
    (if (null? Clipboard-Stack)
        (bell)
      (let ((string (pop-clipboard)))
        (user-message "Popped {s} from clipboard stack" string))))

  
  ;;;
  ;;;; History
  ;;;
  
  
  (method public (on-add-history evt)
    (add-current~ history-manager))
  
  
  (method public (on-backward-history evt)
    (go-backward-history~ history-manager))
  
  
  (method public (on-forward-history evt)
    (go-forward-history~ history-manager))
  
  
  (method public (add-history item)
    (add-history~ history-manager item))
  
  
  (method (current-history-item)
    (let ((frame (current-frame)))
      (when frame
        (let ((guest (get-guest~ frame)))
          (when (is? guest Document)
            (current-history-item~ guest))))))
  
  
  (method public (update-history-actions)
    (let ((backward (get-backward-history~ history-manager))
          (forward (get-forward-history~ history-manager)))
      (set-action-enabled? {Action application backward-history} (not-null? backward))
      (set-action-enabled? {Action application forward-history} (not-null? forward))))


  ;;;
  ;;;; Recording
  ;;;
  
  
  (method public virtual (get-recorder)
    {})


  ;;;
  ;;;; Profile
  ;;;
  
  
  (method protected virtual (use-profile?)
    #f)
  
  
  (method protected virtual (use-profile-logging?)
    #f)
  
  
  (method (log-profile)
    (let ((use-logging? (use-profile-logging?)))
      (let ((profile-arg (and (or (not use-logging?) (not (shift-down?))) (or (jazz-profile) (argument/setting "profile" 'profile)))))
        (receive (name module) (cond (profile-arg (standard-profile (->string profile-arg)))
                                     (use-logging? (login-profile))
                                     (else (system-profile)))
          (set! profile-name name)
          (set! profile-module module)
          (set! profile-class (compose-name module name))
          (install-profile)
          (load-profile-jazzini)))))
  
  
  (method (load-profile-jazzini)
    (let ((file {File Profile ".jazzini"}))
      (when (exists?~ file)
        (load (parse~ file)))))
  
  
  (method (standard-profile title)
    (let ((name (string->symbol title))
          (module-name (string->symbol (format "profile.{a}" (downcase title)))))
      (values name module-name)))
  
  
  (method (system-profile)
    (values 'Me 'jazz.profile)
    @convert
    (standard-profile (get-system-user-name)))

  
  (method (login-profile)
    (receive (name module bindings always-use?) (choose-login)
      (set! profile-bindings bindings)
      (when settings
        (set-setting~ settings 'profile (if always-use? name #f))
        (save-content~ settings)
        (when always-use?
          (message-box (format "Jedi will now always start using profile {a}. To select another profile, keep the shift key pressed when starting Jedi or delete the 'profile' entry from your HOME/.jedi/.settings file."
                               name))))
      (values name module)))

  
  (method (install-profile)
    (let ((source (find-module-source profile-class)))
      (when (not source)
        (install-new-profile)
        (set! source (find-module-source profile-class)))
      (register-alias 'Profile (get-list~ (get-parent~ source)))))

  
  (method (install-new-profile)
    (let ((associations (list (cons 'profile profile-name)
                              (cons 'profile-lowercase (downcase (symbol->string profile-name)))
                              (cons 'profile-module profile-module)
                              (cons 'profile-bindings (either profile-bindings 'jazz)))))
      (copy-template {Directory Jazz "lib" "jedi" "templates" "profile"}
                     {Directory Home}
                     associations
                     non-expanded-nodes: '("catalogs")))
    (let ((repository (find-repository 'User)))
      (let ((package-name profile-module)
            (package-path (concatenate (repository-directory repository) (format "{a}/.package" profile-module))))
        (repository-add-package repository (load-package repository package-name package-path)))))
  
  
  (method (standard-manifest-module name)
    (string->symbol (format "profile.{a}.{a}-Manifest" name name)))

  
  (method (create-profile)
    (with-safe-execution "creating the profile"
      (function ()
        (set! profile (new (load-profile-class profile-class))))
      continue-text: (list (format "to bypass this problem by using a generic profile class"))
      continue-handler:
      (function (err)
        (set! profile (new Me)))))


  ;;;
  ;;;; Closing
  ;;;
  
  
  (method (preserve-environment)
    (nextmethod)
    (call-save-environment-listeners))
  
  
  (method (close-environment)
    ;; called before closing frames because saving a class form
    ;; can potentialy modify an opened text
    (call-exit-listeners)
    (confirm-all-close)
    (close-all)
    (save-bindings)
    @wait
    (save-page-setup)
    (nextmethod))
      
  
  (method public (confirm-all-close)
    (let ((stage (get-stage))
          (frame-dependent-document?
           (function (frame)
             (and (is? frame Host-View)
                  (let ((guest (get-guest~ frame)))
                    (and (is? guest Document)
                         (let ((controller (get-controller~ guest)))
                           (dependent-document?~ controller))))))))
      (when stage
        (for-each (function (frame)
                    (unless (frame-dependent-document? frame)
                      (confirm-close~ frame)))
                  (get-children~ stage)))))
  
  
  (method (close-all)
    (let ((stage (get-stage)))
      (when stage
        (close-children~ stage))))


  ;;;
  ;;;; Splash
  ;;;
  
  
  (definition Splash-Screen
    {})
  
  (definition Splash-End
    {})
  
  
  (method protected virtual (splash-screen)
    )
  
  
  (method (show-splash-screen (duration: duration {}))
    (set! Splash-Screen (show-splash))
    (set! Splash-End (essay duration (+ (time->seconds (current-time)) duration))))
  
  
  (method (remove-splash-screen)
    (when Splash-Screen
      (let ((time (time->seconds (current-time))))
        (when (and Splash-End (> Splash-End time))
          (sleep (- Splash-End time)))
        (remove-splash Splash-Screen))))
  
  
  (method protected virtual (show-splash)
    )
  
  
  (method protected virtual (remove-splash splash-screen)
    )


  ;;;
  ;;;; Help
  ;;;
  
  
  (method public (on-about evt)
    (show-about))
  
  
  (method public virtual (show-about)
    (let ((name (process-name))
          (owner (process-owner))
          (copyright (process-copyright))
          (licensee (process-licensee))
          (version (present~ (process-version)))
          (email (process-email)))
      (message-box
        (append!
         (list
          (list (list font: {Font name: Text} color: {Color name: Dark-Blue} (format "{a} v{a}" name version)))
          (list))
         (when owner
           (list
            (list (list font: {Font name: Text} (format "Copyright {a}{a}" (if copyright (format "{a} " copyright) "") owner)))
            (list)))
         (when licensee
           (list
            (list "This product is licensed to " (list licensee))
            (list)))
         (when email
           (list
            (list "Send comments, suggestions, bugs,... to:")
            (list email))))
        title: (format "About {a}" name))))


  ;;;
  ;;;; Exit
  ;;;
  

  (slot exit-listeners initialize '())
  
  
  (method public (add-exit-listener listener)
    (set! exit-listeners (cons listener exit-listeners)))
  
  
  (method public (remove-exit-listener listener)
    (set! exit-listeners (remove! listener exit-listeners)))
  
  
  (method public (call-exit-listeners)
    (for-each (function (listener)
                (prepare-exit~ listener))
              exit-listeners))


  ;;;
  ;;;; Activation
  ;;;
  
  
  (method public (get-active?)
    active?)
  
  
  (method public virtual (deactivate)
    (close-popups~ toplevel)
    (set-mouse-in {})
    (set! active? #f))
  
  
  (method public virtual (activate)
    (set! active? #t)
    ;; Necessary because verify-reloads can pop a dialog
    (if (mouse-clicked?)
        (set-delayed-mouse-action
          (function ()
            (verify-reloads)))
      (verify-reloads)))
  
  
  (method public (verify-reloads)
    (when stage
      (for-each (function (view)
                  (when (is? view Frame-Host)
                    (let ((guest (get-guest~ view)))
                      (when (is? guest Document)
                        (verify-reload~ (get-controller~ guest))))))
                (get-views~ stage include-invisibles?: #t))))
  
  
  (method public (verify-reload moniker)
    (let ((frame (find-document moniker)))
      (when frame
        (let ((document (get-guest~ frame)))
          (verify-reload~ (get-controller~ document))))))


  ;;;
  ;;;; Environment
  ;;;
  

  (slot save-environment-listeners initialize '())
  
  
  (method public (add-save-environment-listener listener)
    (set! save-environment-listeners (cons listener save-environment-listeners)))
  
  
  (method public (remove-save-environment-listener listener)
    (set! save-environment-listeners (remove! listener save-environment-listeners)))
  
  
  (method public (call-save-environment-listeners)
    (for-each (function (listener)
                (save-environment~ listener))
              save-environment-listeners))
  
  
  ;;;
  ;;;; Session
  ;;;
  
  
  (method public (reload-session)
    (reload-opened-windows))
  
  
  (method public virtual (reload-opened-windows)
    )
  
  
  (method public virtual (reload-component class properties)
    )

  
  (method (save-environment)
    (save-application)
    (save-all-guest))
  
  
  (method (save-application)
    (when preferences-root
      @convert/wait
      (set-property~ preferences-designer preferences-root active-context: context branch: {})
      (set-property~ preferences-designer preferences-root current-directory: (get-current-directory) branch: {})))
  
  
  (method (save-all-guest)
    @wait
    (let ((stage (get-stage)))
      (when stage
        (for-each (function (frame)
                    (when (is? frame Host-Frame)
                      (let ((guest (get-guest~ frame)))
                        (when guest
                          (save-guest~ guest session-designer session)))))
                  (get-children~ stage)))))

  
  ;;;
  ;;;; Aliases
  ;;;
  
  
  (method public virtual (display-aliases?)
    #t)
  
  
  (method public virtual (display-protocol?)
    #t)
  
  
  (method public virtual (application-anchors)
    (append! (table-keys (get-aliases))
             (let ((workbench (get-workbench)))
               (if (not workbench)
                   '()
                 (table-keys (get-projects-table~ workbench))))))

  
  ;;;
  ;;;; Focus
  ;;;
  
  
  (method public (add-focus-listener listener)
    (set! focus-listeners (add-listener listener focus-listeners)))
  
  
  (method public (remove-focus-listener listener)
    (set! focus-listeners (remove-listener listener focus-listeners)))

  
  (method public (process-focus-change old-focus new-focus)
    (when focus-listeners
      (let ((evt (new Focus-Event :focus-change self old-focus new-focus)))
        (for-each (function (listener)
                    (invoke~ listener self evt))
                  focus-listeners)))
    (update-focus-actions))
  
  
  (method public virtual (update-focus-actions)
    (let* ((focus (get-focus))
           (view? (and focus (is? focus View))))
      (when preferences-root
        (set-action-enabled? {Action view undo} (and view? (can-undo?~ focus)))
        (set-action-enabled? {Action view redo} (and view? (can-redo?~ focus)))
        (set-action-enabled? {Action view cut} (and view? (can-cut?~ focus)))
        (set-action-enabled? {Action view copy} (and view? (can-copy?~ focus)))
        (set-action-enabled? {Action view paste} (and view? (can-paste?~ focus)))
        (set-action-enabled? {Action application paste-from-stack} (and view? (can-paste?~ focus) (not-null? Clipboard-Stack)))
        (set-action-enabled? {Action application pop-clipboard-stack} (not-null? Clipboard-Stack))
        (set-action-enabled? {Action view paste-properties} (and view? (can-paste-properties?~ focus)))
        (set-action-enabled? {Action view delete} (and view? (can-delete?~ focus)))
        (set-action-enabled? {Action view select-all} (and view? (can-select-all?~ focus)))
        (when view?
          (focus-update-actions~ focus)))))
  
  
  ;;;
  ;;;; Selected
  ;;;
  
  
  (method public (add-selected-listener listener)
    (set! selected-listeners (add-listener listener selected-listeners)))
  
  
  (method public (remove-selected-listener listener)
    (set! selected-listeners (remove-listener listener selected-listeners)))
  
  
  (method public (get-selected)
    selected)
  
  
  (method public (get-selected-owner)
    selected-owner)
  
  
  (method public (set-selected owner sel (force?: force? #f))
    (let ((new-owner? (neq? owner selected-owner)))
      (when (or force? new-owner? (neq? sel selected))
        (process-selected-change owner selected sel force?))))
  
  
  (method public (close-selected owner)
    (when (eq? owner selected-owner)
      (set! selected-owner {})
      (process-selected-change {} selected {} #f)))

  
  (method (process-selected-change owner old-selected new-selected force?)
    (set! selected-owner owner)
    (set! selected new-selected)
    (when (and selected-listeners (not (exiting-process?)))
      (let ((evt (new Selected-Event :selected-change self owner old-selected new-selected force?: force?)))
        (for-each (function (listener)
                    (invoke~ listener self evt))
                  selected-listeners))))

  
  ;;;
  ;;;; Application
  ;;;
  
  
  (method public (add-application-listener category listener)
    (set-application-listeners category (add-listener listener (get-application-listeners category))))
  
  
  (method public (remove-application-listener category listener)
    (set-application-listeners category (remove-listener listener (get-application-listeners category))))

  
  (method public (process-application-event category kind sender . properties)
    (let ((listeners (get-application-listeners category)))
      (let ((evt (apply new Application-Event kind sender properties)))
        (for-each (function (listener)
                    (invoke~ listener self evt))
                  listeners))))
  
  
  (method (get-application-listeners category)
    (table-ref application-listeners category '()))
  
  
  (method (set-application-listeners category listeners)
    (table-set! application-listeners category listeners))

  
  ;;;
  ;;;; Depot
  ;;;
  
  
  (method public (get-depots-preferences)
    depots-preferences)
  
  
  (method (setup-depots)
    (load-depots-preferences))
  
  
  (method (depots-file)
    {File Profile "settings" "Depots.jml"})
  
  
  (method (load-depots-preferences)
    (with-safe-execution "loading the depots"
      (function ()
        (let ((file (depots-file)))
          (when (and (is-alias? 'Profile) (exists?~ file))
            (let ((preferences (instantiate~ (read-from-file file))))
              (install-context preferences)
              (set! depots-preferences preferences)))))))
  
  
  (method public virtual (get-depot-classes)
    '())

  
  ;;;
  ;;;; Frames
  ;;;
  
  
  (method public virtual (default-frame-class)
    {})


  (method public virtual (file-frame-class file)
    (let ((extension (get-extension~ file)))
      (either (extension-frame-class extension)
              (error "Unknown file extension: {a}" extension))))


  (method public virtual (extension-frame-class ext)
    (either (profile-extension-frame-class ext)
            (known-extension-frame-class ext)
            (unknown-extension-frame-class)))
  
  
  (method (profile-extension-frame-class ext)
    (when profile
      (extension-frame-class~ profile ext)))


  (method public virtual (known-extension-frame-class ext)
    {})
  
  
  (method public virtual (unknown-extension-frame-class)
    {})


  (method public virtual (frame-class (file: file {}))
    (if (not file)
        (default-frame-class)
      (file-frame-class file)))
  
  
  (method (get-default-frame-class)
    (let* ((pref (get-workspace-preferences))
           (model (get-frame-model~ pref)))
      (if model
          (autoload model)
        (default-frame-class))))

  
  ;;;
  ;;;; Toplevel
  ;;;
  
  
  (method (initialize-toplevel)
    (set! toplevel (new-toplevel))
    (ensure-displayed~ toplevel)
    (initialize-actions))
  
  
  (method public virtual (new-toplevel)
    (new Toplevel))
  
  
  (method (initialize-actions)
    (set-application-actions (get-class-actions self)))

  
  ;;;
  ;;;; Stage
  ;;;
  
  
  (method (initialize-stage)
    (set! stage (new-stage)))
  
  
  (method public virtual (new-stage)
    (new (stage-class) parent: (new Stage-Border) name: 'stage))
  
  
  (method protected virtual (stage-class)
    Stage)
  
  
  ;;;
  ;;;; Shortcuts
  ;;;
  
  
  (method (setup-shortcuts)
    (set! shortcut-table (make-table test: shortcut=? hash: shortcut-hash)))
      
  
  (method (register-actions-shortcuts old-actions new-actions)
    (when shortcut-table
      (for-each (function (actions)
                  (for-each (function (action-item)
                              (when (get-visible?~ action-item)
                                (let ((shortcut (get-shortcut~ action-item)))
                                  ;; the second test is necessary because bindings can be changed on-the-fly in the ide
                                  (when (and shortcut (table-ref shortcut-table shortcut #f))
                                    (table-remove! shortcut-table shortcut action-item)))))
                            (get-children~ actions)))
                old-actions)
      (for-each-reversed (function (actions)
                           (for-each (function (action-item)
                                       (when (get-visible?~ action-item)
                                         (let ((shortcut (get-shortcut~ action-item)))
                                           (when shortcut
                                             (table-add shortcut-table shortcut action-item)))))
                                     (get-children~ actions)))
                         new-actions)))
  
  
  (method public (update-shortcut action-item old-shortcut new-shortcut)
    (when old-shortcut
      (table-remove! shortcut-table old-shortcut action-item))
    (when new-shortcut
      (table-add shortcut-table new-shortcut action-item)))
  
  
  (method public (dispatch-shortcut shortcut)
    (if shortcut-hook
        (shortcut-hook shortcut)
      (let ((action-items (get-bound-actions shortcut)))
        (when (not-null? action-items)
          (invoke~ (car action-items) self {})
          #t))))
  
  
  (method public (get-bound-actions shortcut)
    (table-ref shortcut-table shortcut '()))
  
  
  (method public (get-shortcut-hook)
    shortcut-hook)
  
  
  (method public (set-shortcut-hook value)
    (set! shortcut-hook value))
  
  
  ;;;
  ;;;; Bindings
  ;;;
  
  
  (definition Bindings-File
    {File Profile "settings" "Bindings.jml"})
  
  
  (method (setup-bindings)
    (with-safe-execution "loading the bindings"
      (function ()
        (let ((bindings (load-bindings)))
          (set-bindings bindings)
          (set! bindings-designer (new Designer form: (get-form~ bindings) reference: bindings))
          (let ((active (either (get-active-bindings~ (get-preferences #f)) 'jazz)))
            (let ((branch (locate-component~ bindings active)))
              (when (is? branch Branch)
                (set-active-branch~ bindings branch))))))
      continue-handler:
      (function (err)
        )))
  
  
  (method protected virtual (load-bindings)
    (let ((file Bindings-File))
      (if (and (is-alias? 'Profile) (exists?~ file))
          (instantiate~ (read-from-file file))
        (default-bindings))))
  
  
  (method protected virtual (default-bindings)
    (new Application-Bindings))
  
  
  (method (save-bindings)
    (when (and bindings-designer (get-modified?~ bindings-designer) (file? (get-origin~ (get-form~ bindings-designer))))
      (save~ bindings-designer)))
  
  
  (method public (get-bindings-designer)
    bindings-designer)
  
  
  ;;;
  ;;;; Actions
  ;;;
  
  
  (method public (set-application-actions actions-list)
    (register-actions-shortcuts application-actions actions-list)
    (set! application-actions actions-list))
  
  
  (method public (set-profile-actions actions-list)
    (register-actions-shortcuts profile-actions actions-list)
    (set! profile-actions actions-list))


  (method public (set-guest-actions actions-list)
    (register-actions-shortcuts guest-actions actions-list)
    (set! guest-actions actions-list))
  
  
  (method public (set-focus-actions actions-list)
    (register-actions-shortcuts focus-actions actions-list)
    (set! focus-actions actions-list))

  
  ;;;
  ;;;; Menubar
  ;;;
  
  
  (method public (get-menubar-class)
    (let ((pref (get-preferences 'workspaces)))
      (when pref
        (let* ((classes (get-toolbar-classes~ pref))
               (model-info (assq :menubar classes)))
          (when model-info
            (autoload-class (cdr model-info)))))))
  
  
  (method public (find-menubar)
    (let ((menubar-class (get-menubar-class)))
      (when menubar-class
        (find-palette~ toplevel menubar-class))))
  
  
  (method public (update-menubar-buttons)
    (when menubar
      (update-buttons~ menubar)))

  
  ;;;
  ;;;; Status
  ;;;
  
  
  (definition Undisplayed-Message
    {})


  (method public (set-status-message msg)
    (let ((message (get-message-view)))
      (if (not message)
          (set! Undisplayed-Message msg)
        (set! Undisplayed-Message {})
        (set-title~ message (cond ((not msg) "")
                                  ((is? msg Locales) msg)
                                  (else (->string msg)))))))
  
  
  (method public (get-message-view)
    (when status-bar
      (find-component~ status-bar 'message)))
  
  
  (method public (show-undisplayed-message)
    (when Undisplayed-Message
      (set-status-message Undisplayed-Message)
      (set! Undisplayed-Message {})))

  
  ;;;
  ;;;; Actions
  ;;;
  
  
  (method (class-actions)
    (cons (find-actions 'application)
          (nextmethod)))


  ;;;
  ;;;; Alias
  ;;;
  
  
  (method (process-alias name)
    (case name
      ((:application)  self)
      ((:toplevel)     (get-toplevel))
      ((:stage)        (get-stage))
      ((:frame)        (current-frame))
      ((:document)     (current-document))
      ((:guest)        (current-guest))
      ((:focus-guest)  (focus-guest))
      ((:focus)        (get-focus))
      ((:profile)      (get-profile))
      ((:icons)        (get-icons-cache))
      ((:small-icons)  (get-small-icons-cache))
      ((:large-icons)  (get-large-icons-cache))
      ((:invite-icons) (get-invite-icons-cache))
      ((:banner-icons) (get-banner-icons-cache))
      (else            (nextmethod name))))
  
  
  ;;;
  ;;;; Menus
  ;;;
  
  
  (method public virtual (text-menu text)
    (new-text-context-menu~ text))


  ;;;
  ;;;; Message
  ;;;
  
  
  (method (show-message-box text rest)
    (if (not (get-bindings))
        (apply system-message text rest)
      (apply ui-message-box text rest)))
  
  
  (method (message-box-available?)
    (boolean (get-bindings)))
  
  
  ;;;
  ;;;; Log
  ;;;
  
  
  (method public virtual (get-output-log)
    {})
  
  
  ;;;
  ;;;; Results
  ;;;
  
  
  (definition All-Results
    {})
  
  (definition Active-Results
    {})
  
  
  (method public virtual (navigable-results)
    (must-implement 'navigable-results "results navigation"))
  
  
  (method (get-navigable-results)
    (unless All-Results
      (set! All-Results (navigable-results)))
    All-Results)
  
  
  (method public (get-active-results)
    (unless Active-Results
      (set! Active-Results (car (get-navigable-results))))
    Active-Results)
  
  
  (method public (set-active-results results)
    (set! Active-Results results))
  
  
  ;;;
  ;;;; Locales
  ;;;


  (method public (select-locale locale)
    (let ((status (get-status-bar)))
      (when status
        (let ((label (locate-component~ status 'locales)))
          (when label
            (set-title~ label (localize (present-locale locale))))))))
  
  
  (method public (locale-update)
    ;; All this should of course be event based but it will do for now...
    (layout-menu~ (get-menubar))
    (redraw-window~ (get-toplevel)))
  
  
  ;;;
  ;;;; Workspace
  ;;;
  
  
  (method (select-default-workspace)
    (define (find-workspace)
      (let ((pref (get-preferences 'workspaces error?: #f)))
        (if (not pref)
            (default-workspace)
          (let ((active (get-active~ pref)))
            (if (not active)
                (default-workspace)
              (child~ pref active))))))
    
    (apply-preferences~ (find-workspace)))
  
  
  (method (default-workspace)
    (new Default-Workspace))
  
  
  (method public (on-select-workspace evt)
    (select-workspace (get-property~ evt workspace:)))
  
  
  (method public (on-next-workspace evt)
    (select-next-workspace))
  
  
  (method public (on-previous-workspace evt)
    (select-previous-workspace))
  
  
  (method public virtual (on-workspace evt)
    (case (get-kind~ evt)
      ((activate)
       (let ((workspace (get-property~ evt workspace:)))
         (activate-workspace-item workspace)
         (activate-workspace-button workspace)))))
  
  
  (method public (activate-workspace-item workspace)
    (let ((item (find-component~ menubar 'workspace)))
      (when item
        (let ((menu (get-content~ item)))
          (let ((radio (locate-component~ menu (get-name~ workspace))))
            (if (not radio)
                (unselect-elements~ menu class: Radio-Item group: 'workspace)
              (set-selected?~ radio #t)))))))
  
  
  (method public (activate-workspace-button workspace)
    (let ((toolbar (find-toolbar)))
      (when toolbar
        (let ((radio (locate-component~ toolbar (get-name~ workspace))))
          (if (not radio)
              (unselect-elements~ toolbar class: Radio-Tool group: 'workspace)
            (set-visit?~ radio #f)
            (set-selected?~ radio #t))))))

  
  (method public (select-workspace name)
    (apply-preferences~ (get-preferences (list 'workspaces name))))
  
  
  (method public (select-next-workspace)
    (let* ((current (get-workspace-preferences))
           (workspaces (collect-type Workspace-Preferences (get-children~ (get-preferences 'workspaces))))
           (rank (find workspaces current))
           (next (element workspaces (modulo (+ rank 1) (length workspaces)))))
      (unless (eq? next current)
        (apply-preferences~ next))))
  
  
  (method protected (select-previous-workspace)
    (let* ((current (get-workspace-preferences))
           (workspaces (collect-type Workspace-Preferences (get-children~ (get-preferences 'workspaces))))
           (rank (find workspaces current))
           (previous-rank (if (= rank 0) (- (length workspaces) 1) (- rank 1)))
           (previous (element workspaces previous-rank)))
      (unless (eq? previous current)
        (apply-preferences~ previous))))
  
  
  (method public virtual (workspace-installed)
    )
  
  
  (method public (on-zoom-horizontally evt)
    (with-locked-update
      (function ()
        (let ((started? #f))
          (continuation-capture
            (function (return)
              (for-each-splitter (get-stage-border)
                (function (splitter window)
                  (if (eq? (get-orientation~ splitter) 'vert)
                      (when started?
                        (continuation-return return))
                    (if (eq? (get-state~ splitter) 'split)
                        (if (workspace-zoomable?~ splitter window)
                            (zoom~ splitter window)
                          (continuation-return return))
                      (unzoom~ splitter))
                    (set! started? #t))))))))))
  
  
  (method public (on-zoom-vertically evt)
    (with-locked-update
      (function ()
        (let ((started? #f)
              (border (get-stage-border)))
          (continuation-capture
            (function (return)
              (for-each-splitter border
                (function (splitter window)
                  (if (eq? (get-orientation~ splitter) 'horz)
                      (when started?
                        (continuation-return return))
                    (if (eq? (get-state~ splitter) 'split)
                        (zoom~ splitter window)
                      (unzoom~ splitter))
                    (set! started? #t))
                  (when (eq? window border)
                    (continuation-return return))))))))))
  
  
  (method public (on-maximize/restore evt)
    (let ((stage (get-stage)))
      (if (get-maximized?~ stage)
          (restore~ stage)
        (maximize~ stage))))
  
  
  (method public (on-full-screen evt)
    (let ((pref (get-preferences {})))
      (when (not (get-fullscreen-warned?~ pref))
        (message-box "Warning: There is currently only one way of exiting the fullscreen mode which is by using the Alt-Shift Backspace shortcut for Full Screen toggle")
        (set-property~ preferences-designer pref 'fullscreen-warned? #t)))
    (let ((fullscreen? (not (get-fullscreen?~ (get-toplevel)))))
      (set-fullscreen?~ (selected-workspace) fullscreen?)
      (full-screen-stage fullscreen?)))
  
  
  (method public (full-screen-stage fullscreen?)
    (full-screen (get-stage-border) fullscreen?))
  
  
  (method public (toggle-full-screen window)
    (let ((fullscreen? (not (get-fullscreen?~ (get-toplevel)))))
      (full-screen window fullscreen?)))
  
  
  (method public (full-screen window fullscreen?)
    (let ((toplevel (get-toplevel))
          (stage (get-stage)))
      (when (neq? fullscreen? (get-fullscreen?~ toplevel))
        (with-locked-update
          (function ()
            (set-fullscreen?~ toplevel fullscreen?)
            (set-fullscreen?~ stage fullscreen?)
            (for-each-splitter window
              (function (splitter window)
                (set-full?~ splitter fullscreen?)
                (if fullscreen?
                    (zoom~ splitter window)
                  (unzoom~ splitter)))))))))


  ;;;
  ;;;; Toolbar
  ;;;
  
  
  (method public (get-toolbar-class)
    (let ((pref (get-preferences 'workspaces)))
      (when pref
        (let* ((classes (get-toolbar-classes~ pref))
               (model-info (assq :toolbar classes)))
          (when model-info
            (autoload-class (cdr model-info)))))))
  
  
  (method public (find-toolbar)
    (let ((toolbar-class (get-toolbar-class)))
      (when toolbar-class
        (find-palette~ toplevel toolbar-class))))


  ;;;
  ;;;; Context
  ;;;
  
  
  (method (get-context-text)
    {})
   
  
  ;;;
  ;;;; Classes
  ;;;
  
  
  (method public virtual (get-text-class)
    Plain-Text-View)


  ;;;
  ;;;; Resources
  ;;;
  
  
  (method (setup-resources)
    (if (find-alias 'Jazz)
        (begin
          (setup-resources-directory 'bitmap {Directory Jazz "lib" "jazz" "resources" "bitmaps"} "png")
          (setup-resources-directory 'cursor {Directory Jazz "lib" "jazz" "resources" "cursors"} "cur")
          (setup-resources-directory 'icon   {Directory Jazz "lib" "jazz" "resources" "icons"} "png"))
      (setup-resources-directory 'bitmap {Directory Bin "lib" "jazz" "resources" "bitmaps"} "png")
      (setup-resources-directory 'cursor {Directory Bin "lib" "jazz" "resources" "cursors"} "cur")
      (setup-resources-directory 'icon   {Directory Bin "lib" "jazz" "resources" "icons"} "png")))
  
  
  (method (setup-resources-directory type directory extension)
    (when (exists?~ directory)
      (iterate-directory~ directory
        (function (file)
          (when (ci=? (get-extension~ file) extension)
            (register-resource type (get-base~ file) file))))))
  
  
  (method public (register-resource type name file)
    (table-set! resources (cons type name) file))
  
  
  (method public (get-resource type name)
    (or (table-ref resources (cons type name) #f)
        (error "Unknown {a} resource: {s}" type name)))


  ;;;
  ;;;; Icons
  ;;;
  
  
  (definition Icons-Cache
    {})
  
  (definition Small-Icons-Cache
    {})
  
  (definition Large-Icons-Cache
    {})
  
  (definition Invite-Icons-Cache
    {})
  
  (definition Banner-Icons-Cache
    {})
  
  
  (method public (get-icons-cache)
    (unless Icons-Cache
      (set! Icons-Cache (new Portfolio width: 16 height: 16)))
    Icons-Cache)
  
  
  (method public (get-small-icons-cache)
    (unless Small-Icons-Cache
      (set! Small-Icons-Cache (new Portfolio width: 12 height: 12)))
    Small-Icons-Cache)
  
  
  (method public (get-large-icons-cache)
    (unless Large-Icons-Cache
      (set! Large-Icons-Cache (new Portfolio width: 32 height: 32)))
    Large-Icons-Cache)
  
  
  (method public (get-invite-icons-cache)
    (unless Invite-Icons-Cache
      (set! Invite-Icons-Cache (new Portfolio width: 52 height: 52)))
    Invite-Icons-Cache)
  
  
  (method public (get-banner-icons-cache)
    (unless Banner-Icons-Cache
      (set! Banner-Icons-Cache (new Portfolio width: 1200 height: 200)))
    Banner-Icons-Cache)


  ;;;
  ;;;; Catalog
  ;;;


  (method public virtual (get-cataloguer)
    {})


  (method public virtual (get-catalog-context)
    {})


  ;;;
  ;;;; Feedback
  ;;;

  
  (method (user-feedback message)
    )


  ;;;
  ;;;; Events
  ;;;
  

  (method (get-event-consumer)
    event-consumer)
  
  
  (method (set-event-consumer consumer)
    (set! event-consumer consumer))


  (method (deliver-event handler target proc event)
    (proc target event))


  (method public virtual (record-event? event)
    #t)


  ;;;
  ;;;; Console
  ;;;


  (method public (fresh-prompt (text: text {}))
    (let ((text (either text (get-console-text))))
      (when text
        (fresh-prompt~ text)
        (ensure-displayed~ text))))
  
  
  (method public (on-console evt)
    (let ((had-focus? (is? (get-focus) Console-Text-View)))
      (show-console)
      (when had-focus?
        (fresh-prompt))))
  
  
  (method public (show-console (class: class Console-Manager)
                               (workspace: workspace 'home)
                               (focus?: focus? #t))
    (let ((manager (select-palette class workspace: workspace)))
      (when (and manager focus?)
        (let ((text (get-text~ manager)))
          (if (not text)
              (bell)
            (acquire-focus~ text))))))
  
  
  @wait
  (method public (on-sql-console evt)
    (let ((had-focus? (is? (get-focus) SQL-Console-Text-View)))
      (show-console class: SQL-Console-Manager workspace: 'sql)
      (when had-focus?
        (fresh-prompt text: (get-sql-console-text)))))
  
  
  @wait
  (method (on-sql-connections evt)
    (select-palette SQL-Connections-Manager workspace: 'sql focus?: #t))
  
  
  @wait
  (method (on-sql-inventory evt)
    (select-palette Inventory-Browser workspace: 'sql focus?: #t))
  
  
  @wait
  (method (on-sql-tree-output evt)
    (select-palette SQL-Tree-Output 'sql focus?: #t))


  ;;;
  ;;;; Debug
  ;;;
  
  
  (method (process-debuggee-loop)
    (if (and (local-proxy? controller-debugger)
             (event-thread?))
        (with-jazz-exception-debugger
          process-events)
      (nextmethod)))


  ;;;
  ;;;; Debugger
  ;;;
  
  
  (method (exception-reported)
    ;; so as not to get recursive exceptions
    (catch Exception
      (cleanup-mouse-processing)))
  
  
  @convert
  (method (present-execution-context exception type prefix?)
    (present~ (new Exception-Presenter) exception type: type prefix?: prefix?))

  
  ;;;
  ;;;; Search
  ;;;
  
  
  (method public virtual (get-search-manager)
    {})
  
  
  (method public virtual (get-search-results)
    (get-guest~ (singleton-docked Search-Results {})))
  
  
  (method public (active-search)
    (let ((manager (get-search-manager)))
      (when manager
        (get-search~ (get-guest~ manager)))))
  
  
  ;; This needs cleanup as it cannot be done for every application
  (method public (update-search-actions)
    (let* ((stage (get-stage))
           (frames (if (not stage) '() (get-views~ stage)))
           (count (length frames))
           (results (get-search-results))
           (results-count (get-visible-count~ (get-tree~ results)))
           (results-stack-count (length (get-results-stack~ results)))
           (in-modal? (in-modal?)))
      (set-action-enabled? {Action application edit-next} (>= results-count 1))
      (set-action-enabled? {Action application edit-previous} (>= results-count 1))
      (set-action-enabled? {Action application edit-current} (>= results-count 1))
      @wait
      (set-action-enabled? {Action application pop-results} (> results-stack-count 1))
      (set-action-enabled? {Action application find-forward} (>= count 1))
      (set-action-enabled? {Action application find-backward} (>= count 1))
      (set-action-enabled? {Action application replace} (>= count 1))
      (set-action-enabled? {Action application replace&find-forward} (>= count 1))
      (set-action-enabled? {Action application replace-all} (>= count 1))
      (set-action-enabled? {Action application replace-all-selected} (>= results-count 1))))


  ;;;
  ;;;; Search Menu
  ;;;
  
  
  (method public (on-find evt)
    (update-search 'text 'active-window))
  
  
  (method public (on-find-in-text evt)
    (update-search 'text {}))
  
  
  (method public (on-find-in-directories evt)
    (update-search 'directories {}))
  
  
  (method public (on-find-in-projects evt)
    (update-search 'projects {}))
  
  
  (method (update-search tab domain)
    (let* ((focus (get-focus))
           (internal? (is? focus Tree-Embedded-Search-Text-View))
           (string (if (and (not internal?) (is? focus Text-View)) (get-selected-string~ focus) {}))
           (palette (get-search-manager))
           (player (get-player~ palette))
           (manager (get-guest~ palette))
           (tab-view (locate~ manager 'tab))
           (same-tab? (eq? tab (get-selection-name~ tab-view))))
      (if (and (not domain)
               (eq? (get-window-focus) player)
               same-tab?)
          (next-radio~ (get-search~ manager))
        (when tab
          (set-selection-name~ tab-view tab)
          (when domain
            (set-search-domain~ (get-search~ manager) domain))))
      (bring-to-front~ player)
      (set-visible?~ player #t)
      (for-each (function (search)
                  (let ((targets (get-search-targets~ search)))
                    (unless (or (not string)
                                (and (not-null? targets)
                                     (equal? string (first (first targets)))))
                      (set-search-targets~ search (list (list string ""))))))
                (get-searches~ manager))
      (when (or (not internal?) (not same-tab?))
        (select-search~ (get-search~ manager)))))
  
  
  (method public (end-search-edition)
    (let* ((palette (get-search-manager))
           (manager (get-guest~ palette))
           (search (get-search~ manager))
           (tree (get-targets-tree~ search)))
      (end-edition~ tree)))


  (method public (on-edit-next evt)
    (edit-next~ (get-active-results)))


  (method public (on-edit-previous evt)
    (edit-previous~ (get-active-results)))


  (method public (on-edit-current evt)
    (edit-current~ (get-active-results)))


  (method public (on-pop-results evt)
    (clear-results~ (get-search-results)))


  (method public (on-find-forward evt)
    (let ((search (active-search)))
      (if (not search)
          (let ((text (get-text-view~ (get-guest~ (first-view~ stage)))))
            (let ((targets (get-find-targets (get-constituent-test~ (get-syntax~ text)))))
              (unless (select-next~ text targets)
                (bell))))
        (on-find-forward~ search evt))))


  (method public (on-find-backward evt)
    (let ((search (active-search)))
      (if (not search)
          (let ((text (get-text-view~ (get-guest~ (first-view~ stage)))))
            (let ((targets (get-find-targets (get-constituent-test~ (get-syntax~ text)))))
              (unless (select-previous~ text targets)
                (bell))))
        (on-find-backward~ search evt))))


  (method public (on-replace evt)
    (let ((search (active-search)))
      (if (not search)
          (bell)
        (on-replace~ search evt))))


  (method public (on-replace&find-forward evt)
    (let ((search (active-search)))
      (if (not search)
          (bell)
        (on-replace&find-forward~ search evt))))


  (method public (on-replace-all evt)
    (let ((search (active-search)))
      (if (not search)
          (bell)
        (on-replace-all~ search evt))))


  (method public (on-replace-all-selected evt)
    (let ((search (active-search)))
      (if (not search)
          (bell)
        (on-replace-all-selected~ search evt))))

  
  ;;;
  ;;;; Execute
  ;;;
  
  
  (method public (on-command-shell evt)
    (select-command-mode 'execute))
  
  
  (method public virtual (get-command-shell)
    (let ((toolbar (find-toolbar)))
      (when toolbar
        (locate-component~ toolbar 'command-shell))))
  
  
  (method public virtual (get-command-text)
    (let ((shell (get-command-shell)))
      (when shell
        (get-text~ shell))))
  
  
  (method public (select-command-mode mode)
    (select-mode~ (get-command-text) mode))


  ;;;
  ;;;; Search Context
  ;;;


  (method public (get-search-targets)
    (let ((search (active-search)))
      (if (not search)
          (get-setting 'Search-Targets)
        (get-search-targets~ search))))
  
  
  (method public (set-search-targets targets)
    (let ((search (active-search)))
      (if (not search)
          #f @convert (set-setting 'Search-Targets targets)
        (set-search-targets~ search targets))))


  (method public (get-find-targets (constituent-test {}))
    (let ((search (active-search)))
      (if (not search)
          (map (function (target)
                 (make-search-context (first target)
                   whole-words?: (get-whole-words?)
                   ignore-case?: (get-ignore-case?)
                   constituent-test: constituent-test))
               (get-search-targets))
        (get-find-targets~ search constituent-test))))


  (method public (get-replace-targets)
    (let ((search (active-search)))
      (if (not search)
          (map second (get-search-targets))
        (get-replace-targets~ search))))

  
  (method public (get-whole-words?)
    (let ((search (active-search)))
      (if (not search)
          (get-setting 'Search-Whole-Words?)
        (get-whole-words?~ search))))
    
  
  (method public (get-ignore-case?)
    (let ((search (active-search)))
      (if (not search)
          (get-setting 'Search-Ignore-Case?)
        (get-ignore-case?~ search))))
    
  
  (method public (get-preserve-case?)
    (let ((search (active-search)))
      (if (not search)
          (get-setting 'Search-Preserve-Case?)
        (get-preserve-case?~ search))))
    
  
  (method public (get-play-recording?)
    (let ((search (active-search)))
      (if (not search)
          (get-setting 'Search-Play-Recording?)
        (get-play-recording?~ search))))

  
  (method public (get-expression?)
    (let ((search (active-search)))
      (if (not search)
          (get-setting 'Search-Expression?)
        (get-expression?~ search))))


  ;;;
  ;;;; Files
  ;;;


  (method public virtual (on-new evt)
    (new-event (get-default-frame-class)))
    

  (method public virtual (on-open evt)
    (open-files))
  
  
  (method public (open-files (directory: directory {}))
    (let ((files (choose-file directory: directory extensions: (open-extensions) multiple-selection?: #t)))
      (for-each edit-file
                (sort string>? files key: (function (file) (get-name~ file))))))
  
  
  (method public virtual (receive-files pos pathnames)
    (if (and (= (length pathnames) 1) (directory? (car pathnames)))
        (let ((dir (car pathnames)))
          (set-current-directory dir)
          (user-message "Current directory set to {a}" (parse~ dir)))
      (let ((class (cond ((alt-down?) Jazz-Plain-Text-View)
                         ((shift-down?) Jazz-Text-View)
                         (else {}))))
        (for-each (function (pathname)
                    (when (file? pathname)
                      (if class
                          (edit-document pathname class: class)
                        (edit-file pathname))))
                  pathnames))))
  
  
  (method public virtual (edit-file file)
    (edit-document file))
  
  
  ;; a quicky... this should really be up to the current workspace
  (method public virtual (open-extensions)
    {})


  (method public (find-document moniker)
    (find-if (function (frame)
               (and (is? frame Frame-Host)
                    (let ((guest (get-guest~ frame)))
                      (and (is? guest Document)
                           (let ((guest-moniker (get-moniker~ (get-controller~ guest))))
                             (and guest-moniker
                                  (pathname=? guest-moniker moniker)))))))
             (get-children~ stage)))
  
  
  (method public (edit-document moniker
                                (class: class {})
                                (workspace: workspace {})
                                (selection: selection {})
                                (char-encoding: char-encoding {})
                                (wrap?: wrap? #f)
                                (force-new?: force-new? #f)
                                (activate-focus?: activate-focus? #t)
                                (visible?: visible? #t)
                                (return-new?: return-new? #f))
    (when moniker
      (if (not (exists?~ moniker))
          (error "Unable to locate document: {t}" moniker)
        (let ((file moniker))
          (let* ((frame (if force-new? {} (find-document file)))
                 (result (function (frame new?) (if return-new? (values frame new?) frame))))
            (if (not frame)
                (let ((class (either class (file-frame-class file))))
                  (with-cursor :wait
                    (function ()
                      (result (new-frame class
                                         host-workspace: workspace
                                         host-visible?: visible?
                                         host-focus?: activate-focus?
                                         initialize: (function (host document)
                                                       (set-char-encoding~ document char-encoding)
                                                       (set-moniker~ (get-controller~ document) moniker)
                                                       (when wrap?
                                                         (set-wrap?~ document #t))
                                                       (when selection
                                                         (set-selection-safe~ document selection ensure-displayed?: 'center-caret))))
                              #t))))
              (when selection
                (let ((document (get-guest~ frame)))
                  (set-selection-safe~ document selection ensure-displayed?: 'center-caret)))
              (when visible?
                (bring-to-front~ frame)
                (set-visible?~ frame #t)
                (when activate-focus?
                  (focus-host~ frame)))
              (verify-reload~ (get-controller~ (get-guest~ frame)))
              (result frame #f)))))))
  
  
  (method public (edit-help-document moniker)
    (let* ((frame (edit-document moniker))
           (text (get-guest~ frame)))
      (set-editable?~ text #f)))
  
  
  (method public (edit-filename filename)
    (let* ((workbench (get-workbench))
           (project-file (find-filename~ workbench filename)))
      (if (not project-file)
          (error "Unable to locate filename: {t}" filename)
        (let* ((frame (edit-document (get-source~ project-file)))
               (text (get-guest~ frame)))
          (verify-reload~ (get-controller~ text))))))
  
  
  (method public virtual (edit-category name)
    )
  
  
  (method public virtual (on-close evt)
    (let ((frame (first-view~ stage)))
      (when frame
        (close-with-confirm~ frame))))

  
  (method public virtual (on-close-all evt)
    (for-each (function (view)
                (when (is? view Frame-Host)
                  (let ((guest (get-guest~ view)))
                    (when (and (is? guest Document) (close-on-close-all?~ (get-controller~ guest)))
                      (confirm-close~ view)
                      (close~ view)))))
              (get-views~ stage)))
        
    
  (method public virtual (on-save-all evt)
    (save-all))
  
  
  (method public virtual (on-print evt)
    (let ((guest (current-guest)))
      (print-document~ guest)))

   
  (method public virtual (on-print-layout evt)
    (let ((guest (current-guest)))
      (print-layout~ guest)))

  
  (method public virtual (on-print-preview evt)
    (let ((guest (current-guest)))
      (print-preview~ guest)))
  
  
  (method public virtual (on-quit-application evt)
    (exit-process))
  
  
  (method public (save-all (class: class Document) (save-unanchored?: save-unanchored? #t))
    (let ((save-documents
            (function (main-documents?)
              (for-each (function (window)
                          (when (is? window Frame-Host)
                            (let ((guest (get-guest~ window)))
                              (when (is? guest Document)
                                (let ((controller (get-controller~ guest)))
                                  (when (and (is? guest class)
                                             (or save-unanchored? (get-moniker~ guest))
                                             (xor main-documents? (dependent-document?~ controller))
                                             (get-modified?~ (get-controller~ guest)))
                                    (save~ guest)))))))
                        (get-views~ stage include-invisibles?: #t)))))
      ;; saving dependent documents will make their main document modified
      (save-documents #f)
      (save-documents #t)))


  ;;;
  ;;;; Definitions
  ;;;

  
  (method public virtual (edit-definitions object . rest)
    )

  
  (method public virtual (edit-references object . rest)
    )


  ;;;
  ;;;; Context
  ;;;
  
  
  (method (context-update)
    (nextmethod)
    (modify-catalogs)
    (modify-profile)
    (user-message "Context set to {a}" context))
  
  
  (method (modify-catalogs)
    (let ((pref (get-preferences 'catalogs error?: #f)))
      (when pref
        (let ((cataloguer (get-cataloguer)))
          (for-each (function (config)
                      (let* ((name (get-name~ config))
                             (catalog (get-catalog~ cataloguer name error?: #f)))
                        (when catalog
                          (set-active?~ catalog (get-active?~ config)))))
                    (get-children~ pref))))))

  
  (method (modify-profile)
    (when profile
      (close~ profile))
    (let ((pref (get-preferences {} error?: #f)))
      (when pref
        (let ((class (either (get-profile-class~ pref) Profile)))
          (when class
            (set! profile (new (autoload class)))))))
    (when profile
      (init~ profile))
    (when profile
      (finalize~ profile)))
  

  ;;;
  ;;;; Favorites
  ;;;

  
  (method (on-add-to-favorites evt)
    (let ((guest (current-document)))
      (if (not guest)
          (bell)
        (add-to-favorites~ guest))))

  
  ;;;
  ;;;; Preferences
  ;;;
  
  
  (method (default-preferences)
    (new Application-Preferences))

  
  ;;;
  ;;;; Page Setup
  ;;;
  
  
  (definition Default-Page-Setup
    {})
  
  (definition Default-Page-Setup-Designer
    {})
  
  (definition Default-Page-Setup-Form
    (form>>
      (<Page-Setup>)))
  
  (definition Default-Page-Setup-File
    {File Profile "settings" "PageSetup.jml"})
  
  
  (method public (set-default-page-setup page-setup)
    (set! Default-Page-Setup page-setup))
  
  
  (method public (default-page-setup)
    (when (not Default-Page-Setup)
      (setup-page-setup))
    Default-Page-Setup)
  
  
  (method public (default-page-setup-designer)
    (when (not Default-Page-Setup-Designer)
      (setup-page-setup))
    Default-Page-Setup-Designer)
  
  
  (method virtual (setup-page-setup)
    (let* ((file Default-Page-Setup-File)
           (form (if (and (is-alias? 'Profile) (exists?~ file)) (read-from-file file) Default-Page-Setup-Form)))
      (set! Default-Page-Setup (instantiate~ form))
      (set! Default-Page-Setup-Designer (new Designer form: (get-form~ Default-Page-Setup) reference: Default-Page-Setup))))
  
  
  (method virtual (save-page-setup)
    (when (and Default-Page-Setup-Designer (file? (get-origin~ (get-form~ Default-Page-Setup-Designer))))
      (let ((form (get-form~ Default-Page-Setup-Designer)))
        (when (not (get-origin~ form))
          (set-origin~ form Default-Page-Setup-File)))
      (save~ Default-Page-Setup-Designer)))


  ;;;
  ;;;; Documentation
  ;;;
  
  
  (method public virtual (get-documentation-cataloguer)
    {})
  
  
  ;;;
  ;;;; Scaling
  ;;;
  
  
  (method (on-zoom-out evt)
    (let ((view (scaled-view (get-property~ evt what:))))
      (if (not view)
          (bell)
        (let ((scaling (get-scaling~ view)))
          (scale-view view (- scaling 0.25) #t)))))
  
  
  (method (on-zoom-in evt)
    (let ((view (scaled-view (get-property~ evt what:))))
      (if (not view)
          (bell)
        (let ((scaling (get-scaling~ view)))
          (scale-view view (+ scaling 0.25) #t)))))
  
  
  (method (on-unzoom evt)
    (let ((view (scaled-view (get-property~ evt what:))))
      (if (not view)
          (bell)
        (scale-view view 1.0 #f))))
  
  
  (method (scaled-view what)
    (case what
      ((document) (current-document))
      ((mouse-view) (mouse-view))))
  
  
  (method (scale-view view scaling scaled?)
    (user-message "Scaling set to {a}" scaling)
    (set-scaling~ view scaling)
    (set-scaled?~ view scaled?))



  ;;;
  ;;;; Capture
  ;;;
  
  
  (method (on-capture-document evt)
    (pick-figure
      click: (function (view pos) (capture-document view))
      highlight: #t
      highlight-figure?: #f
      obscure-unhighlighted?: #f
      report-figure?: #f
      tooltips?: #f))
  
  
  (method (on-capture-mouse-document evt)
    (let ((view (mouse-view)))
      (if (not view)
          (bell)
        (capture-document view))))
  
  
  (definition (capture-document view)
    (let ((host (get-host~ view)))
      (if (not host)
          (bell)
        (let ((guest (get-guest~ view)))
          (if (not guest)
              (bell)
            (export-picture~ guest))))))
  
  
  (method (on-capture-host evt)
    (pick-figure
      click: (function (view pos) (capture-host view))
      highlight: #t
      highlight-figure?: #f
      obscure-unhighlighted?: #f
      report-figure?: #f
      tooltips?: #f))
  
  
  (method (on-capture-mouse-host evt)
    (let ((view (mouse-view)))
      (if (not view)
          (bell)
        (capture-host view))))
  
  
  (definition (capture-host view)
    (let ((host (get-host~ view)))
      (if (not host)
          (bell)
        (export-picture~ host))))


  ;;;
  ;;;; Windows
  ;;;
  
  
  (method public virtual (update-windowing-actions)
    (unless (exiting-process?)
      (update-history-actions)
      (update-window-actions)
      (update-menubar-buttons)))
  
  
  (method public (update-window-actions)
    (let ((stage (get-stage)))
      (when stage
        (let* ((frames (get-views~ stage))
               (count (length frames))
               (in-modal? (in-modal?)))
          (set-action-enabled? {Action application close}             (and (>= count 1) (not in-modal?)))
          (set-action-enabled? {Action application close-all}         (and (>= count 1) (not in-modal?)))
          (set-action-enabled? {Action guest save}                    (and (>= count 1) (not in-modal?)))
          (set-action-enabled? {Action guest save-as}                 (and (>= count 1) (not in-modal?)))
          (set-action-enabled? {Action application save-all}          (and (>= count 1) (not in-modal?)))
          (set-action-enabled? {Action guest revert-saved}            (and (>= count 1) (not in-modal?)))
          (set-action-enabled? {Action guest compare-saved}           (and (>= count 1) (not in-modal?)))
          (set-action-enabled? {Action application page-setup}        (and (>= count 1) (not in-modal?)))
          (set-action-enabled? {Action application print-layout}      (and (>= count 1) (not in-modal?)))
          (set-action-enabled? {Action application print-preview}     (and (>= count 1) (not in-modal?)))
          (set-action-enabled? {Action application print}             (and (>= count 1) (not in-modal?)))
          (set-action-enabled? {Action application next-frame}        (and (>= count 2) (not in-modal?)))
          (set-action-enabled? {Action application previous-frame}    (and (>= count 2) (not in-modal?)))
          (set-action-enabled? {Action application current-frame}     (and (>= count 1) (not in-modal?)))
          @wait
          (set-action-enabled? {Action application toggle-frame}      (and (>= count 1) (not in-modal?)))
          @wait
          (set-action-enabled? {Action application cascade}           (and (>= count 1) (not in-modal?)))
          (set-action-enabled? {Action application tile-horizontally} (and (>= count 2) (not in-modal?)))
          (set-action-enabled? {Action application tile-vertically}   (and (>= count 2) (not in-modal?)))))))
  
  
  (method public virtual (on-next-frame evt)
    (let* ((stage (get-stage))
           (first (first-view~ stage)))
      (send-to-back~ first)
      (focus-host~ (current-frame))))
  
  
  (method public virtual (on-previous-frame evt)
    (let* ((stage (get-stage))
           (last (last-view~ stage)))
      (bring-to-front~ last)
      (focus-host~ (current-frame))))
  
  
  (method public virtual (on-current-frame evt)
    (let* ((stage (get-stage))
           (first (first-view~ stage)))
      (focus-host~ first)))
  
  
  (method public virtual (on-toggle-frame evt)
    (let ((text (current-document)))
      (if (is? text Text-View)
          (toggle-text text)
        (bell))))


  (method (toggle-text text)
    (let ((file (get-moniker~ (get-controller~ text))))
      (if (not file)
          (bell)
        (let ((ext (get-extension~ file)))
          (cond ((member? ext C-Extensions test: ci=?) (toggle-c-text file))
                (else (bell)))))))
  
  
  (method (toggle-c-text file)
    (let* ((base (get-base~ file))
           (ext (get-extension~ file))
           (toggled (if (ci=? ext "h") "cpp" "h"))
           (filename (format "{a}.{a}" base toggled)))
      (edit-filename filename)))
  
  
  (method public virtual (on-cascade evt)
    (let* ((stage (get-stage))
           (frames (get-views~ stage)))
      (unimplemented 'on-cascade)))
  
  
  (method public virtual (on-tile-horizontally evt)
    (let* ((stage (get-stage))
           (frames (get-views~ stage))
           (count (length frames))
           (width (get-width~ stage))
           (height (get-height~ stage))
           (h (quotient height count))
           (t 0))
      (with-locked-update
        (function ()
          (restore~ stage)
          (for-each (function (frame)
                      (set-position~ frame (new Point 0 t))
                      (set-size~ frame (new Dimension width h))
                      (increase! t h))
                    frames)))))
  
  
  (method public virtual (on-tile-vertically evt)
    (let* ((stage (get-stage))
           (frames (get-views~ stage))
           (count (length frames))
           (width (get-width~ stage))
           (height (get-height~ stage))
           (w (quotient width count))
           (l 0))
      (with-locked-update
        (function ()
          (restore~ stage)
          (for-each (function (frame)
                      (set-position~ frame (new Point l 0))
                      (set-size~ frame (new Dimension w height))
                      (increase! l w))
                    frames)))))
    
  
  (method public virtual (on-select-window evt)
    (let ((window (get-property~ evt window:)))
      (bring-to-front~ window)
      (focus-host~ window)))))
