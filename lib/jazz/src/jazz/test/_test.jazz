;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Test
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2012
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module jazz.test jazz:


;;;
;;;; Dialect
;;;


@dialect (
(import (jazz (except car)))

(debug (car '(1 2))))


;;;
;;;; Import
;;;


;; *** ERROR IN jazz:table-merge-reporting-conflicts!, "lib\\dialect\\src\\dialect\\runtime.scm"@860.11 -- Import conflicts detected in jazz.test imports
;; : ((first jazz.test.c:first jazz.language.runtime.functional:first))


@import (
(import (jazz.test.c))

(debug Console-Manager Console-Preferences))


;;;
;;;; Include
;;;


@include (
(include "i.jazz")

(debug (foo)))


;;;
;;;; Hook
;;;


@hook (
(definition public (foo)
  (hook foo.bar
    (bar)))


(definition (bar)
  2))


;;;
;;;; Redefinition
;;;


@redefinition (
(import (jazz.library))


(definition foo
  2)

(definition foo
  3)


(class Foo extends Component
  
  
  (slot name initialize #f))


(class X extends Object
  
  
  (method (m)
    2)
  
  (method (m)
    3)))


;;;
;;;; Snapshot
;;;


@snapshot (
(import (jazz.io)
        (jazz.snapshot))


(initialize-aliases)
(snapshots-directory {Directory Home})
(debug (snapshot-process))
(exit))


;;;
;;;; Scheme Classes
;;;


@scheme-classes (
(import (jazz.test.scheme))


(let ((foo (allocate-foo Foo 2 3 5)))
  (debug foo)
  (debug (get-foo-x foo))
  (set-foo-x foo 7)
  (debug (get-foo-x foo))))


;;;
;;;; Special
;;;


@special
(import (jazz.test.jazz)
        (jazz.test.c))


;;;
;;;; JavaScript
;;;


@javascript (
(require (jazz.backend.javascript)
         (dialect.development))


;(expand 'jazz.test.backend backend: 'javascript)
(expand 'jazz.sample.module backend: 'javascript))


;;;
;;;; Backend
;;;


@backend (
(require (jazz.backend.describe)
         (dialect.development))


;(expand 'jazz.test.backend backend: 'describe)
(expand 'jazz.sample.module backend: 'describe))


;;;
;;;; Fmt
;;;


@fmt (
(import fmt.implementation.test-fmt))


;;;
;;;; Mac Crash
;;;


@mac-crash (
(import (jazz.platform)
        (jazz.platform.cairo)
        (jazz.system)
        (jazz.ui))


(definition package (test)
  (initialize-windowing get-setting)
  (let ((window (new Window))
        (visual (XDefaultVisual x11-default-display (XDefaultScreen x11-default-display))))
    (debug (cairo_xlib_surface_create x11-default-display (get-handle~ window) visual (get-width~ window) (get-height~ window)))))


(test))


;;;
;;;; Walk Failed
;;;


@walk-failed (
(debug (walk-failed? 2))
(debug (walk-failed? (let 1)))
(debug (walk-failed? (let 1) :warning))
(debug (walk-failed? (let 1) :error)))


;;;
;;;; Handler
;;;


@handler (
(import (jazz.jml)
        (jazz.library))


(definition (some-handler evt)
  (debug 'ca-marche evt))


(class C extends Component
  
  
  (property handler   initialize #f accessors generate)
  (property reference initialize #f accessors generate)
  
  
  (form
    (<install> handler: {Event-Handler :reference some-handler})))


(define (test)
  (let ((c (new C)))
    (let ((handler (get-handler~ c))
          (event (make-event Event 'some c)))
      (invoke~ handler c event))))


(test))


;;;
;;;; Reference Reification
;;;


@reference-reification (
(import jazz.ui)


(class C extends Object)


(define (dr reference)
  (debug reference (resolve-runtime-reference reference) (serialize-runtime-reference reference)))


(dr (reference reverse))
(dr (reference collect))
(dr (reference View))
(dr (reference C))
(dr (let ((x 2))
      (reference x))))


;;;
;;;; Local Syntax
;;;


@local-syntax (

(import (jazz.test.b (phase syntax)))

@wait
(define-local-syntax when2
  (sc-macro-transformer
    (lambda (form env)
      (let ((form (strip-source-info form)))
        `(if ,(make-syntactic-closure env '() (cadr form))
             (begin
               ,@(map (lambda (form)
                        (make-syntactic-closure env '() form))
                      (cddr form)))
           #f)))))

@wait
(define-local-syntax swap!
  (sc-macro-transformer
    (lambda (form env)
      (let ((form (strip-source-info form)))
        (let ((var1 (make-syntactic-closure env '() (cadr form)))
              (var2 (make-syntactic-closure env '() (caddr form))))
          `(let ((value ,var1))
             (set! ,var1 ,var2)
             (set! ,var2 value)))))))

@wait
(definition (test-test!)
  (let ((va 5))
    (test! - (+ 2 va) va)))

@wait
(definition (test-swap!)
  (let ((x 3)
        (value 4))
    (swap! x value)
    value))

@wait
(class X extends Object
  
  (method (foo)
    (let ((x 3)
          (value 4))
      (swap! x value)
      value)))

@wait
(definition (test-when2 x)
  (when2 x (+ x 2))
  x))


;;;
;;;; Local Macros
;;;


@local-macro (
(definition var-1 5)
(definition var-2 6)

(local-macro (def f-name sym var)
  `(definition (,f-name ,sym)
     (,sym ,var)))

(local-macro (gen-defs sym-f1 sym-f2)
  `(begin
     (def f1 ,sym-f1 var-1)
     (def f2 ,sym-f2 var-2)))

(gen-defs XXX YYY))


;;;
;;;; Advice
;;;


@advise (
(import (jazz.test.advise))

(trace 'jazz.test.advise)

(bar)

(let ((x (new X)))
  (yo~ x))

(let ((y (new Y)))
  (yum~ y))

(untrace 'jazz.test.advise)

(bar))


;;;
;;;; Expand
;;;


@expand (
(import (jazz.io)
        (jazz.runtime))


(definition (expand-all-with-feedback)
  (let ((directory {Directory Home "expansions"}))
    (load-unit 'dialect.development)
    (create-directories~ directory)
    (iterate-units
      (lambda (unit-name)
        (terminal 'expanding unit-name)
        (expand-to-file unit-name file: (parse~ (new-file~ directory (format "{a}.scm" unit-name))))))))


(initialize-aliases)
(expand-all-with-feedback))


;;;
;;;; REPL
;;;


@repl (
(import (jazz.debuggee))

(set-default-context #f)
(start-repl))


;;;
;;;; Stepper
;;;


@stepper
(definition public (foo x)
  (define (fact n)
    (if (= n 0)
        1
      (* n (fact (- n 1)))))
  
  (step)
  (fact (+ x 2 (+ x 3 4))))


;;;
;;;; Designer
;;;


@designer (
(import (jazz.designer)
        (jazz.graphic)
        (jazz.io)
        (jazz.jml)
        (jazz.library)
        (jazz.system)
        (jazz.system.application)
        (jazz.ui)
        (jazz.ui.view)
        (jazz.ui.window))


(class My-Search extends Layout-View
  
  
  (form
    (<install>
      (<Push-Button>                   name: search     title: "Search" position: {Point 755 14} size: {Dimension 80 24} action-handler: {Event-Handler :form on-search} default?: #t)
      (<Group-Box>                     name: group      position: {Point 10 8} size: {Dimension 280 97} title: "Group")
      (<Border-View>                   name: border     position: {Point 311 43} size: {Dimension 373 91} border-type: edge style: ()
        (<Scroller-View>                                vscroll?: #t
          (<content~>                                   layout-type: fill
            (<Tree-Header>
              (<content~>
                (<Tree-View>           name: tree       font: {Font Label-User} default-row-height: 15
                  (<Tree-Node-Column>  name: node       title: "Find" width: 176 toplevel-controls?: #f display-images?: #f)
                  (<Tree-Label-Column> name: label      title: "Replace" width: 173)))))))
      (<Check-Box>                     name: checkbox   title: "Check-Box" position: {Point 360 283} size: {Dimension 100 18})
      (<Combo-Box>                     name: combo      position: {Point 180 297})
      (<Radio-Button>                  name: radio      position: {Point 128 190} title: "Radio")
      (<Label-View>                    name: label      position: {Point 291 214} title: "Label")
      (<Tab-View>                      name: tab        position: {Point 85 348} size: {Dimension 450 120}
        (<Tab-Sheet>                                    position: {Point 113 36} title: "Sheet")
        (<Tab-Sheet>                                    position: {Point 379 44} title: "Very Long Name"))
      (<Horizontal-Line>               name: horizontal position: {Point 412 249})
      (<Vertical-Line>                 name: vertical   position: {Point 541 232})
      (<Image-View>                    name: image      position: {Point 33 221})
      (<Layout-View>                   name: layout     position: {Point 574 216}))))


(class My-App extends Application
  
  
  (method override (finish-process)
    (nextmethod)
    (new-frame View-Editor client: (new My-Search)))

  
  ;;;
  ;;;; Preferences
  ;;;
  
  
  (method override (persist-preferences?)
    #f)
  
  
  (method override (default-preferences)
    (new My-Preferences))
  
  
  (method override (default-bindings)
    (new My-Bindings)))


(class My-Preferences extends Application-Preferences
  
  
  (form
    (<install>                toplevel-state: maximized toolbar-classes: ((:menubar . {Class-Reference Menubar}) (:toolbar . {Class-Reference Toolbar}) (:status . {Class-Reference Status-Toolbar}))
      (<workspaces~>          active: designer
        (<Designer-Workspace>)))))


(class My-Bindings extends Application-Bindings
  
  
  (form
    (<install>
      (<Combo-Text-Actions>                name: combo-text)
      (<Components-Viewer-Actions>         name: components-viewer)
      (<Components-Tree-Actions>           name: components-tree)
      (<Traits-Tree-Actions>               name: traits-tree)
      (<View-Editor-Actions>               name: view-editor)
      (<View-Surrogate-Actions>            name: view-surrogate))))


(definition public (run)
  (boot-environment~ (new My-App))))


;;;
;;;; To Fix
;;;


@to-fix-this-seems-related-to-having-an-exception-handler (
(define (bar)
  ("adf"))

(define (foo)
  (bar))

(foo))


@to-fix-only-in-compiled (
(class A extends Object
  
  (method (get-row)
    (append 1 2)))

(class X extends Object
  
  (method public (foo outline locked?)
    (if locked?
        (get-row-from~ outline)
      (get-row~ outline))))

(foo~ (new X) (new A) #f))


;;;
;;;; Application
;;;


@app (
(import (jazz.graphic)
        (jazz.jml)
        (jazz.library)
        (jazz.system)
        (jazz.system.application)
        (jazz.ui)
        (jazz.ui.view)
        (jazz.ui.window))


(class My-App extends Application
  
  
  (method override (show-toplevel)
    )
  
  
  (method override (finish-process)
    (nextmethod)
    (new-palette My-Test host-title: "Test" host-size: {Dimension 600 450})))


(class My-Palette extends Palette
  
  
  (method override (close-window)
    (nextmethod)
    (exit)))


(class My-Test extends View
  
  
  (form
    (<install>
      (<Push-Button>                              title: "Hello" position: {Point 50 50})
      (<Border-View>                              position: {Point 50 100} size: {Dimension 500 300} border-type: edge style: ()
        (<Scroller-View>                          vscroll?: #t
          (<content~>                             layout-type: fill
            (<Tree-Header>
              (<content~>
                (<Tree-View>           name: tree font: {Font Label-User} default-row-height: 15
                  (<Tree-Node-Column>             title: "Foo" width: 200 toplevel-controls?: #f display-images?: #f)
                  (<Tree-Label-Column>            title: "Bar" width: 100)
                  (<Tree-Label-Column>            title: "Baz" width: 100)))))))))
  
  
  (method meta override (palette-class)
    My-Palette))


(definition public (run)
  (boot-environment~ (new My-App))))


;;;
;;;; Fold
;;;


@fold (
(import (jazz.io))


(call-with-output-file (list path: "~/walk.jazz" eol-encoding: (get-eol-encoding))
  (lambda (port)
    (pp (fold-declaration (walk-unit 'jazz.sample.module) cons cons '()) port))))


;;;
;;;; Literals
;;;


@w
(debug '(a b {Point 2 3}))


;;;
;;;; Dispatch
;;;


@getters
(class Blah extends Object
  (slot warnings   getter generate)
  (slot errors     getter generate)
  (slot literals   getter generate)
  (slot variables  getter generate)
  (slot references getter generate)
  (slot inclusions getter generate)
  (slot autoloads  getter generate))

@done (
(class A extends Object)

(class X extends Object
  
  (method (foo)
    2)
  
  (method virtual (bar)
    3))

(class Y extends X
  
  (method (bar)
    5))

(define (new-a)
  (new A))

(define (new-x)
  (new X))

(define (new-y)
  (new Y))

(define (call-foo obj)
  (debug 'foo obj (foo~ obj)))

(define (call-bar obj)
  (debug 'bar obj (bar~ obj)))

(call-foo (new-x))
(call-foo (new-y))
(catch (Exception exc
         (debug exc))
  (call-foo (new-a)))

(call-bar (new-x))
(call-bar (new-y))
(catch (Exception exc
         (debug exc))
  (call-bar (new-a))))


;;;
;;;; Sample
;;;


@w (
(import (jazz.jml)
        (jazz.library)
        (jazz.ui))


(define f1
  {Point 2 3})

(define f2
  '(a b))

(define f3
  '(a b ({Color red: 190 green: 190 blue: 230})))


(define x
  #f)


(foo~ x)
(bar~ x 1)


(class X extends Component
  
  
  (slot a initialize 2)
  (slot b)
  
  
  (form
    (<install> a: 2 b: {Dimension 3 5}
      (<Component> name: yo)))
  
  
  (definition f
    #f)
  
  
  (method (foo)
    2)
  
  
  (method virtual (bar)
    3))


(class Y extends X
  
  
  (method (bar)
    5)))


;;;
;;;; Generic
;;;


@done (
(class X extends Object)
(generic (foo (<X> x)))
(specific (foo (<X> x)) '(X))
(class Y extends X)
(specific (foo (<Y> y)) (cons 'Y (nextmethod y)))
(define (zz) (debug (foo (new Y))))
(zz))


;;;
;;;; Thread
;;;


@comment (
(definition (test-execute)
  (thread-execute
    (thread-start!
      (new-thread
        thread-loop
        'delegated))
    (lambda ()
      (sleep 1)
      (debug 'delegated (current-thread))))
  (debug 'delegator (current-thread)))
  
  
(definition (test-delegate)
  (debug
    'delegator
    (current-thread)
    (thread-call
      (thread-start!
        (new-thread
          thread-loop
          'delegated))
      (lambda ()
        (sleep 1)
        (debug 'delegated (current-thread))
        23))))
  
  
(definition (test-exception)
  (debug
    'delegator
    (current-thread)
    (thread-call
      (thread-start!
        (new-thread
          thread-loop
          'delegated))
      (lambda ()
        (sleep 1)
        (debug 'delegated (current-thread))
        (error "ouch")))))


(definition (test)
  (debug
    (+ (thread-call
         (thread-start!
           (new-thread
             thread-loop
             'delegated))
         (lambda ()
           (sleep .1)
           2))
       (thread-call
         (thread-start!
           (new-thread
             thread-loop
             'delegated))
         (lambda ()
           (sleep .1)
           3)))))


;(test-execute)
;(test-delegate)
;(test-exception)
;(test)
)


;;;
;;;; Exception
;;;


@buggy(
(class XX extends Exception)


(definition (foo)
  (catch XX
    (debug 1)
    (throw (new XX))
    (debug 2)))


(definition (bar)
  (catch (XX x (debug x))
    (debug 3)
    (throw (new XX))
    (debug 4)))


(definition (baz)
  (debug 5)
  (throw (new XX))
  (debug 6)))


;;;
;;;; Meta
;;;


@meta
(class Y extends X
  
  
  (method meta (f)
    2))


@expansion
(begin
  (class Y~Class207 extends (:class X)
    
    
    (method (f)
      2))
  
  
  (class Y metaclass Y~Class207 extends X
    ))


@not-uniform-for-interfaces (
(interface I)
(interface J)


(interface K extends (I J)
  
  
  (method meta (f)
    3)))


;;;
;;;; Generics
;;;


@done (
(class U extends Object)
(class V extends U)


;; (jazz.expand-define-generic '(test.foo (test.X x) (test.U u) a b))
;; (jazz.expand-define-specific '(test.foo (test.X x) (test.U u) a b) '(+ a b))
(generic (foo (<X> x) @w u (<U> u) a b)
  (+ a b))
(specific (foo (<Y> x) @w u (<U> u) a b)
  (list (nextmethod x u a b) a b))


(generic (baz (<X> x) @w u (<U> u) . rest)
  (apply + rest))
(specific (baz (<Y> x) @w u (<U> u) . rest)
  (apply list (apply nextmethod x u rest) rest))


(native jazz:display-tree)
(native test.foo!generic)
(native test.baz!generic)


(newline)
(display "--------------------------------")
(newline)
(jazz.debug (foo (new X) (new U) 1 2))
(jazz.debug (foo (new Y) (new U) 1 2))

(newline)
(display "--------------------------------")
(newline)
(jazz.debug (baz (new X) (new U) 1 2))
(jazz.debug (baz (new Y) (new U) 1 2)))


;;;
;;;; Various
;;;


@w(
(import (test.pt))


(definition (f)
  (loop (repeat 1000000)
        (let ((pt (POINT-make)))
          pt)))

(definition (pt)
  (POINT-make)))


@w
(for-each debug "Hello")


@w
(let ((axis (new Axis 0)))
  (axis-grow axis 10)
  (set-element! axis 5 'a)
  (for-each debug axis))


@w
(definition (f c <Cell+>)
  (if (not c)
      #f
    (= c c)))


@w(
(definition (f x <fl>)
  x)

(debug (f 2.3) (f 3))

@w(
(definition (g x) <fl>
  x)

(+ (g 1) (g 1))
(debug (g 2.3) (g 2)))

(definition (h x)
  (let ((y <fl> x))
    y))

(debug (h 2.3) (h 3)))


@w(
(definition (foo)
  (length (new Subseq))
  (length (new Axis 0)))


(new Cell 1 2)
(new-cell 2 3)


(+ (new Cell 1 2) (new-cell 2 3))
(cell+ (new Cell 1 2) (new-cell 2 3)))


@w
(import (jazz.git)
        (jazz.io)
        (jazz.jml)
        (jazz.library)
        (jazz.platform)
        (jazz.ui)
        (jazz.ui.dialog)
        (jazz.ui.view)
        (jazz.ui.window)
        (jazz.system)
        (test.a))


;;;
;;;; Types
;;;


@w
(definition (f)
  (let iter ((n 0))
    (+ n n)
    (iter "boum")))


@w
(class TC extends Object
  
  
  (slot row <Integer+> initialize 1)
  (slot col <fx>       initialize 3)


  (method (f)
    (when row
      (subseq! "Hello" 0 col)))


  (method (g)
    (subseq! "Hello" 0 col)))


@w
(definition (f)
  (list (class-of (f~ (new TC)))
        (class-of (g~ (new TC)))))


;;;
;;;; CFFI
;;;


@w(
(debug 'init1 (init1))

(debug 'scalar1 (scalar1 2))
(debug 'scalar2 (scalar2 3))
(debug 'scalar3 (scalar3 '(a)))

(let ((t1 (typ1 2 3))
      (t2 (typ2 2 3)))
  (debug 'typ1 t1 (foreign-tags t1) (still-obj-refcount t1))
  (debug 'typ2 t2 (foreign-tags t2) (still-obj-refcount t2))
  (gc)
  (debug 'typ3 (typ3 t1 t2)))

(let ((t4 (typ4 2 3))
      (t5 (typ5 2 3)))
  (debug 'typ4 t4 (foreign-tags t4) (still-obj-refcount t4))
  (debug 'typ5 t5 (foreign-tags t5) (still-obj-refcount t5))
  (gc)
  (debug 'typ6 (typ6 t4 t5)))

(debug 'constant (list ca cb))
(debug 'enumeration (list ea eb ec))

(let ((s1 (make-S1)))
  (debug 's1 s1 (foreign-tags s1) (still-obj-refcount s1))
  (debug 'struct1a (struct1a s1))
  (debug 'struct1c (struct1c s1)))

(debug 'func1 (func1)))


;;;
;;;; Iteration
;;;


@w(
(definition (iter-list lst proc)
  (when lst
    (proc (car lst))
    (iter-list (cdr lst) proc)))


(definition (iter-node node proc)
  (letrec ((iter
             (lambda (node)
               (proc node)
               (for-each iter (get-children~ node)))))
    (iter node)))


(definition (iter obj proc)
  (cond ((null/pair? obj) (iter-list obj proc))
        ((is? obj JML-Node) (iter-node obj proc))))


(definition (foldl-list x f s)
  (if (not x)
      s
    (foldl-list (cdr x) f (f (car x) s))))


(definition (foldr-list x f s)
  (if (not x)
      s
    (f (car x) (foldr-list (cdr x) f s))))


(definition (foldl-node x f s)
  (foldl (get-children~ x)
         (lambda (c s)
           (foldl-node c f s))
         (f x s)))


(definition (foldr-node x f s)
  )


(definition (foldl-component x f s)
  (foldl (get-children~ x)
         (lambda (c s)
           (foldl-component c f s))
         (f x s)))


(definition (foldr-component x f s)
  )


(definition (foldl x f s)
  (cond ((null/pair? x) (foldl-list x f s))
        ((is? x JML-Node) (foldl-node x f s))
        ((is? x Component) (foldl-component x f s))))


(definition (foldr x f s)
  (cond ((null/pair? x) (foldr-list x f s))
        ((is? x JML-Node) (foldr-node x f s))
        ((is? x Component) (foldr-component x f s))))


(definition (iter-map proc obj)
  (let ((fact (new List-Factory)))
    (iter obj
          (lambda (x)
            (put~ fact (proc x))))
    (get-output~ fact)))


(definition (iter-linearize obj)
  (iter-map identity obj))


(definition (fold-map proc obj)
  (foldr obj
         (lambda (x lst)
           (cons (proc x) lst))
         #f))


(definition (foldl-map proc obj)
  (foldl obj
         (lambda (x lst)
           (cons (proc x) lst))
         #f))


(definition (fold-linearize obj)
  (fold-map identity obj))


(definition (fold x f s)
  (cond ((null/pair? x) (foldl-list x f s))
        ((is? x JML-Node) (fold-node x f s))
        ((is? x Component) (fold-component x f s))))


(definition (fold-node x f s)
  (let ((ps (f x s)))
    (for-each (lambda (c)
                (fold-node c f ps))
              (get-children~ x))
    ps))


(definition (fold-component x f s)
  (let ((ps (f x s)))
    (for-each (lambda (c)
                (fold-component c f ps))
              (get-children~ x))
    ps))


(definition (component->jml x)
  (fold x
        (lambda (c p)
          (new JML-Element p (category-name (class-of c)) properties: (list 'name (get-name~ c) 'position (get-position~ c) 'size (get-size~ c) 'serial (object->serial c))))
        #f))


(definition (pprint-component x)
  (pretty-print~
    (component->jml x)
    :console))


(definition (ppc x)
  (pprint-component x))


(definition (test x)
  (ppc x))))
