(module jazz.test.b jazz

(import (scheme.language.syntax-rules (phase syntax)))

#;
(define-syntax public when2
  (sc-macro-transformer
    (lambda (form env)
      (let ((form (strip-source-info form)))
        `(if ,(make-syntactic-closure env '() (cadr form))
             (begin
               ,@(map (lambda (form)
                        (make-syntactic-closure env '() form))
                      (cddr form)))
           #f)))))

#;
(define-syntax public swap!
  (syntax-rules ()
    ((_ var1 var2)
     (let ((value var1))
       (set! var1 var2)
       (set! var2 value)))))

#;
(define-syntax public test!
  (sc-macro-transformer
    (lambda (form env)
      (let ((form (strip-source-info form)))
        (let ((func (make-syntactic-closure env '() (cadr form)))
              (var1 (make-syntactic-closure env '() (caddr form)))
              (var2 (make-syntactic-closure env '() (cadddr form))))
          `(let ((value ,var1))
             (,func value ,var2)))))))

(define-syntax public swap!
  (sc-macro-transformer
    (lambda (form env)
      (let ((form (strip-source-info form)))
        (let ((var1 (make-syntactic-closure env '() (cadr form)))
              (var2 (make-syntactic-closure env '() (caddr form))))
          `(let ((value ,var1))
             (set! ,var1 ,var2)
             (set! ,var2 value))))))))
