;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Binding Tests
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.validate.suite.Binding-Tester jazz


(import (jazz.jml)
        (jazz.validation))


(class Binding-Tester extends Tester
  
  
  (form
    (<install> title: "Binding"))


  (method override (test self)
    (invoke self "Let" test-let)
    (invoke self "Letrec" test-letrec)
    (invoke self "With" test-with)
    (invoke self "Bind" test-bind)
    (invoke self "Function" test-function))
  
  
  ;;;
  ;;;; Let
  ;;;


  (method (test-let self)
    (check (= (let ((x 2)) x) 2))
    (check (= (let ((x 2)) (+ x x)) 4))
    (check (= (let ((x 2) (y 3)) (+ x y y)) 8))
    (check (= (let ((x 2)) (let ((y 3)) (+ x y y))) 8))
    (check (= (let ((x 2)) (set! x 3) x) 3))
    (check (= (let ((x #f) (y #f)) (set! x 2) (set! y 3) (+ x y)) 5))
    (check (= (let ((x 2)) (let ((x (+ x x))) x)) 4))
  
    @what-the-fuck
    (check (equal? (reverse
                        (let ((lst '()) (x 2))
                          (set! lst (cons x lst))
                          (let ((x 3))
                            (set! lst (cons x lst))
                            (let ((x 5))
                              (set! lst (cons x lst)))
                            (set! lst (cons x lst)))
                          (set! lst (cons x lst)))
                        (set! lst (cons x lst)))
                      '(2 3 5 3 2)))
    
    @Interpreted
    (begin
      
      @free-reporting-is-now-done-at-the-category-level
      (check (error? (code-walk '(let ((x 2))
                                      (let ((y 3)))
                                      (+ x y))
                                   self
                                   '())))))
  
  
  ;;;
  ;;;; Letrec
  ;;;


  (method (test-letrec self)
    (check (= (letrec ((fact
                            (lambda (n)
                              (if (= n 0)
                                  1
                                (* n (fact (- n 1)))))))
                   (fact 5))
                 120))
    
    @Interpreted
    (begin
      (check (error? ((lambda (x)
                           (letrec ((x (+ x x)))
                             x))
                         3)))))
  
  
  ;;;
  ;;;; With
  ;;;
  
  
  (method (test-with self)
    )
  
  
  ;;;
  ;;;; Bind
  ;;;


  (method (test-bind self)
    (check (= (bind (x y z) (list 1 2 3) (+ x y z)) 6))
    
    @Interpreted
    (begin
      
      (check (error? (bind (x y) (list 1) (+ x y))))))
  
  
  ;;;
  ;;;; Function
  ;;;


  (method (test-function self)
    (check (= ((lambda () 2)) 2))
    (check (= ((lambda (x) x) 2) 2))
    (check (= ((lambda (x y) (+ x y)) 2 3) 5))
    (check (equal? ((lambda x x)) '()))
    (check (equal? ((lambda (x . y) y) 1 2 3 4) '(2 3 4)))
    (check (= (let ((x 2)) ((lambda () x))) 2))


    (check (= (let ((x 2)) ((lambda () x))) 2))
    (check (= (let ((x 2)) ((lambda () (set! x 3) x))) 3))
  
  
    (check (equal? (map (lambda (x) (* x x)) '(1 2 3 4 5)) '(1 4 9 16 25)))
    (check (equal? (let ((list '()))
                            (for-each (lambda (x)
                                        (set! list (cons (* x x) list)))
                                      '(1 2 3 4 5))
                            (reverse list))
                          '(1 4 9 16 25))))))
