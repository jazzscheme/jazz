;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Designer Tests
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.validate.suite.Designer-Tester jazz


(import (jazz.jml)
        (jazz.validation))


(class Designer-Tester extends Tester
  
  
  (form
    (<install> title: "Designer"))
  
  
  @convert (


  (method (test)
    @wait
    (invoke #f test-reference)
    @wait
    (invoke #f test-path))
  
  
  ;;;
  ;;;; Reference
  ;;;
  
  
  ;;  architecture
  ;;    X
  ;;      Y
  ;;        Z
  ;;    W
  
  
  (method (test-reference)
    (let* ((file {File Validate-Project "Development" "Support" "Test-Architecture-Form.jml"})
           (form (read-form file))
           (architecture (instantiate~ form))
           (designer (new Designer form: form reference: architecture))
           
           (X (locate~ architecture 'X))
           (Y (locate~ architecture 'Y))
           (Z (locate~ architecture 'Z))
           (W (locate~ architecture 'W))
           
           ;; set-property
           (T1 (locate~ architecture 'T1))
           ;; remove-property
           (T2 (locate~ architecture 'T2))
           (T3 (locate~ architecture 'T3))
           
           (in-trait
            (lambda (trait proc)
              (if (eq? trait #t)
                  (proc)
                (let ((old (get-active-trait~ architecture)))
                  (set-active-trait~ architecture trait)
                  (prog1
                      (proc)
                    (set-active-trait~ architecture old))))))
           
           (get
            (lambda (component property (trait: trait #t))
              (in-trait trait
                        (lambda ()
                          (read-property component property)))))
           
           (set
            (lambda (component property value (trait: trait #t))
              (set-property~ designer component property value trait: trait)))
           
           (rem
            (lambda (component property default-value (trait: trait #t))
              (remove-property~ designer component property default-value trait: trait)))
           
           (val
            (lambda (component property value (trait: trait #t))
              (when (/= (get component property trait: trait) value)
                (let ((message (format "(= (get {a} '{t}{a}) {t})" (get-name~ component) property (if (eq? trait #t) "" (format " trait: {a}" (and trait (get-name~ trait)))) value)))
                  (if (null? suite)
                      (error "Assertion {a} failed" message)
                    (signal (new Tester-Error message #t))))))))
      
      ;; A trait when considered in relation to the active trait can be of three kind:
      ;; 1- The active trait itself
      ;; 2- An installed parent trait
      ;; 3- A dormant trait
      
      ;; Trait -> #f
      
      (set-active-trait~ architecture #f)
      
      ;; set in the active trait
      (set T1 'description "A")
      (val T1 'description "A")
      
      ;; set in a dormant trait
      (set T1 'description "W" trait: W)
      (val T1 'description "A")
      (val T1 'description "W" trait: W)
      
      ;; remove in the active trait
      (rem T2 'description #f)
      (val T2 'description #f)
      
      ;; remove in the active trait
      (set T2 'description "A")
      (rem T2 'description #f)
      (val T2 'description #f)
      
      ;; remove in a dormant trait
      (set T2 'description "W" trait: W)
      (val T2 'description "W" trait: W)
      (rem T2 'description #f trait: W)
      (val T2 'description #f trait: W)
      
      ;; Trait -> X
      
      (set-active-trait~ architecture X)
      
      ;; set in a parent trait who owns the property
      (set T1 'description "2" trait: #f)
      (val T1 'description "2" trait: X)
      
      ;; set in the active trait
      (set T1 'description "X")
      (val T1 'description "X" trait: X)
      
      ;; set in a parent trait who doesn't own the property
      (set T1 'description "3" trait: #f)
      (val T1 'description "X" trait: X)
      
      ;; remove in a parent trait
      (set T2 'description "2" trait: #f)
      (val T2 'description "2" trait: #f)
      (rem T2 'description #f trait: #f)
      (val T2 'description #f trait: #f)
      
      ;; Trait -> Y
      
      (set-active-trait~ architecture Y)
      
      ;; Trait -> Z
      
      (set-active-trait~ architecture Z)
      
      ;; set in a parent trait
      (set T3 'no 7 trait: Y)
      (val T3 'no 2 trait: X)
      
      ;; Trait -> W
      
      (set-active-trait~ architecture W)))
  
  
  ;;;
  ;;;; Path
  ;;;
  
  
  (method (test-path)
    )))
)