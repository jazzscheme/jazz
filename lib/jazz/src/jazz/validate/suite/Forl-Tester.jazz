;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Forl Tests
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2012
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.validate.suite.Forl-Tester jazz


(import (jazz.jml)
        (jazz.validation))


(class Forl-Tester extends Tester
  
  
  (form
    (<install> title: "Forl"))


  (method override (test)
    (invoke "With" test-with)
    (invoke "Repeat" test-repeat)
    (invoke "For" test-for)
    (invoke "Conditional" test-conditional)
    (invoke "Do" test-do)
    (invoke "Sum" test-sum)
    (invoke "Collect" test-collect)
    (invoke "Some" test-some)
    (invoke "Every" test-every)
    (invoke "Return" test-return)
    (invoke "Finally" test-finally)
    (invoke "Forl" test-forl))
  
  
  ;;;
  ;;;; With
  ;;;


  (method (test-with)
    (validate (equal? (forl (with x = 2)
                            (with y = (+ x x))
                            (list x y))
                      '(2 4))))
  
  
  ;;;
  ;;;; Repeat
  ;;;


  (method (test-repeat)
    (validate (= (let ((count 0))
                   (forl (repeat 10)
                         (increase! count))
                   count)
                 10))
    (validate (equal? (forl (repeat 5)
                            (for x in (naturals 0 10))
                            (collect x))
                      (naturals 0 5))))
  
  
  ;;;
  ;;;; For
  ;;;


  (method (test-for)
    (test-for-in)
    (test-for-in-vector)
    (test-for-in-sequence)
    (test-for-in-properties)
    (test-for-from)
    (test-for-first)
    (test-for-=))


  (method (test-for-in)
    (validate (equal? (forl (for x in '(1 2 3) remainder r)
                            (collect (cons x (and (not-null? r) (car r)))))
                      '((1 . 2) (2 . 3) (3 . #f)))))


  (method (test-for-in-vector)
    (validate (equal? (forl (for x in-vector (list->vector (naturals 0 5)))
                            (collect x))
                      (naturals 0 5))))
  
  
  (method (test-for-in-sequence)
    (validate (equal? (forl (for x in-sequence (naturals 0 10))
                            (collect x))
                      (naturals 0 10))))
  
  
  (method (test-for-in-properties)
    (validate (equal? (forl (for (p v) in-properties '(a: 2 b: 3))
                            (collect (cons (keyword->symbol p) v)))
                      '((a . 2) (b . 3)))))
  
  
  (method (test-for-from)
    (validate (equal? (forl (for x from 0 below 15)
                            (collect x))
                      (naturals 0 15)))
    (validate (equal? (forl (for x from 10 downto 0 by 2)
                            (collect x))
                      '(10 8 6 4 2 0))))
  
  
  (method (test-for-first)
    (validate (equal? (forl (for f first #t then #f)
                            (for x in (naturals 0 5))
                            (collect (cons x f)))
                      '((0 . #t) (1 . #f) (2 . #f) (3 . #f) (4 . #f)))))
  
  
  (method (test-for-=)
    (validate (equal? (forl (for x in (naturals 0 5))
                            (for y = (* x x))
                            (collect y))
                      '(0 1 4 9 16))))
  
  
  ;;;
  ;;;; Conditional
  ;;;
  
  
  (method (test-conditional)
    (validate (equal? (forl (for x in (naturals 0 10))
                            (when (even? x)
                              (collect x into even))
                            (unless (even? x)
                              (collect x into odd))
                            (finally (list even odd)))
                      '((0 2 4 6 8) (1 3 5 7 9))))
    (validate (equal? (forl (for x in (naturals 0 10))
                            (if (even? x)
                                (collect x into even)
                              (collect x into odd))
                            (finally (list even odd)))
                      '((0 2 4 6 8) (1 3 5 7 9)))))
  
  
  ;;;
  ;;;; Do
  ;;;
  
  
  (method (test-do)
    (validate (= (let ((count 0))
                   (forl (repeat 10)
                         (do (increase! count)))
                   count)
                 10)))
  
  
  ;;;
  ;;;; Sum
  ;;;
  
  
  (method (test-sum)
    (validate (equal? (forl (for x in (naturals 0 10))
                            (sum x))
                      45))
    (validate (equal? (forl (for x from 1 to 3)
                            (sum (* x x) into s)
                            (sum (* x x x) info c)
                            (finally (list s c)))
                      '(14 36))))
  
  
  ;;;
  ;;;; Collect
  ;;;
  
  
  (method (test-collect)
    (validate (equal? (forl (for x from 1 to 3)
                            (collect (* x x)))
                      '(1 4 9))))
  
  
  ;;;
  ;;;; Some
  ;;;
  
  
  (method (test-some)
    (validate (not (forl (for x in '(1 3 5))
                         (some (even? x)))))
    (validate (forl (for x from 0 to 10)
                    (some (> x 5)))))
  
  
  ;;;
  ;;;; Every
  ;;;
  
  
  (method (test-every)
    (validate (forl (for x in '(1 3 5))
                    (every (odd? x))))
    (validate (not (forl (for x from 0 to 10)
                         (every (> x 5))))))
  
  
  ;;;
  ;;;; Return
  ;;;
  
  
  (method (test-return)
    (validate (equal? (forl (for x in (naturals 0 10))
                            (collect x)
                            (when (= x 6)
                              (return)))
                      '(0 1 2 3 4 5 6))))
  
  
  ;;;
  ;;;; Finally
  ;;;
  
  
  (method (test-finally)
    (validate (equal? (forl (for x from 1 to 3)
                            (collect (* x x) into s)
                            (finally (list squares: s)))
                      '(squares: (1 4 9)))))
  
  
  ;;;
  ;;;; Forl
  ;;;
  

  (method (test-forl)
    (validate (equal? (let ((last #f))
                        (forl (for x in (naturals 0 10))
                              (when (= x 6)
                                (return last))
                              (set! last (* x x))))
                      25))
    (validate (equal? (let ((last #f))
                        (forl (for x in (naturals 0 10))
                              (set! last (* x x))
                              (when (= x 6)
                                (return last))))
                      36)))))
