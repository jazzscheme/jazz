;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Format Tests
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.validate.suite.Format-Tester jazz


(import (jazz.jml)
        (jazz.locale)
        (jazz.validate)
        (jazz.validation))


(class Format-Tester extends Tester
  
  
  (form
    (<install> title: "Format"))


  (method override (test)
    (invoke #f test-format))
  
  
  ;;;
  ;;;; Format
  ;;;


  (method (test-format)
    ;; base
    (validate rpt (equal? (format "hello") "hello"))
    ;; ascii
    (validate rpt (equal? (format "{a}" 2) "2"))
    ;; sexpr
    (validate rpt (equal? (format "{s}" "hello") "\"hello\""))
    ;; text
    (validate rpt (equal? (format "{t}" 2) "2"))
    (validate rpt (equal? (format "{t}" "hello") "\"hello\""))
    ;; print
    (validate rpt (equal? (format "{p}" "hello" :human) "hello"))
    (validate rpt (equal? (format "{p}" "hello" :reader) "\"hello\""))
    ;; char
    (validate rpt (equal? (format "{c}" #\a) "a"))
    ;; unsigned
    @unimplemented
    (validate rpt (equal? (format "{u}" -1) "4294967295"))
    ;; hexadecimal
    (validate rpt (equal? (format "{x}" #xA) "a"))
    ;; binary
    (validate rpt (equal? (format "{b}" #b1010) "1010"))
    ;; real
    (validate rpt (equal? (format "{r}" 2.3) "2.300"))
    (validate rpt (equal? (format "{r precision: 5}" 2.3) "2.30000"))
    ;; list
    (validate rpt (equal? (format "{l detail: :human}" '("a" "b")) "a b"))
    ;; properties
    (validate rpt (equal? (format "{k}" '(:a 2 :b 3)) " :a 2 :b 3"))
    ;; column
    (validate rpt (equal? (format "{_}") " "))
    (validate rpt (equal? (format "{_ :v}" 3) "   "))
    ;; tab
    (validate rpt (equal? (format "{&}") (string #\tab)))
    ;; newline
    (validate rpt (equal? (format "{%}") (string #\newline)))
    ;; freshline
    (validate rpt (equal? (format "{$}") "\n"))
    ;; localize
    ;; wait (validate rpt (equal? (format "{z}" "yes") "yes"))
    ;; conditional
    (validate rpt (equal? (format "{?foo{a}bar{c}~}ZZZ{a}" #f #\* 'yyy) "ZZZyyy"))
    (validate rpt (equal? (format "{?foo{a}bar{c}~}ZZZ{a}" 'hello #\* 'yyy) "foohellobar*ZZZyyy"))
    (validate rpt (equal? (format "{?:foo{a}bar{c}~}ZZZ{a}" #f #f #f 'yyy) "ZZZyyy"))
    (validate rpt (equal? (format "{?:foo{a}bar{c}~}ZZZ{a}" #t 'hello #\* 'yyy) "foohellobar*ZZZyyy"))
    ;; justification
    (validate rpt (equal? (format "{s width: 5}" 2) "2    "))
    (validate rpt (equal? (format "{s width: 5 justify: :left}" 2) "2    "))
    (validate rpt (equal? (format "{s width: 5 justify: :right padding: #\\x}" 2) "xxxx2"))
    (validate rpt (equal? (format "{s width: 3}" 12345) "12345"))
    (validate rpt (equal? (format "{s width: :v justify: :v padding: :v}" 2 5 :right #\x) "xxxx2"))
    ;; error
    @wait
    (validate rpt (error? (format "{q}")))
    @wait
    (validate rpt (error? (format "{a}")))
    @wait
    (validate rpt (error? (format "{a}" 2 3)))
    @wait
    (validate rpt (error? (format "{a :some}" 2))))))
