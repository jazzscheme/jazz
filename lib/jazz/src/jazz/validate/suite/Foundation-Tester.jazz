;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Foundation Tests
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.validate.suite.Foundation-Tester jazz


(import (jazz.markup)
        (jazz.validation))


(class Foundation-Tester extends Tester
  
  
  (form
    (<install> title: "Foundation"))


  (method override (test self)
    (invoke self #f test-foundation))
  
  
  ;;;
  ;;;; Foundation
  ;;;


  (method (test-foundation self)
    ;; require
    (check (declaration-failed? (require 2)))
    (check (declaration-failed? (require (2))))
    
    ;; export
    (check (declaration-failed? (export 2)))
    (check (declaration-failed? (export (2))))
    (check (declaration-failed? (export (a 2))))
    (check (declaration-failed? (export (a (b)))))
    
    ;; import
    (check (declaration-failed? (import 2)))
    (check (declaration-failed? (import (2))))
    (check (declaration-failed? (import (a 2))))
    (check (declaration-failed? (import (a (b)))))
    
    ;; proclaim
    (check (declaration-failed? (define (foo) (proclaim (warn optimizations)))))
    (check (declaration-failed? (proclaim 2)))
    (check (declaration-failed? (proclaim (a))))
    (check (declaration-failed? (proclaim (a b))))
    (check (declaration-failed? (proclaim (warn))))
    (check (declaration-failed? (proclaim (warn foo))))
    
    ;; native
    (check (declaration-failed? (native)))
    (check (declaration-failed? (native 2)))
    (check (declaration-failed? (native a b)))
    
    ;; native-syntax
    (check (declaration-failed? (native-syntax)))
    (check (declaration-failed? (native-syntax 2)))
    (check (declaration-failed? (native-syntax a b)))
    
    ;; macro
    ;; local-macro
    ;; syntax
    ;; define-syntax
    ;; define-local-syntax
    ;; let-syntax
    ;; letrec-syntax
    ;; walk-failed?
    )))
