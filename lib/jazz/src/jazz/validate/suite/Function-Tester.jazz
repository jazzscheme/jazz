;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Function Tests
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2012
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.validate.suite.Function-Tester jazz


(import (jazz.jml)
        (jazz.validation))


(class Function-Tester extends Tester
  
  
  (form
    (<install> title: "Function"))
  
  
  @convert (


  (method (test)
    (invoke "Dynamic Closure" test-dynamic-closure)
    (invoke "Indefinite extent" test-indefinite-extent)
    @wait-outer-binding
    (invoke "Outer Binding" test-outer-binding)
    (invoke "Rest Binding" test-rest-binding)
    (invoke "Function" test-function)
    (invoke "Recursivity" test-recursivity))
  
  
  ;;;
  ;;;; Dynamic Closure
  ;;;


  (method (add x list)
    (map (lambda (y)
           (+ x y))
         list))

  
  (method (test-dynamic-closure)
    (validate (= (add 10 '(1 2 3)) '(11 12 13))))
  
  
  ;;;
  ;;;; Indefinite extent
  ;;;


  (method (adder x)
    (lambda (n)
      (+ n x)))

  
  (definition add10
    (adder 10))
  
  
  (method (foo x)
    (let ((y (+ x x)))
      (lambda (n)
        (+ n x y))))
  
  
  (definition foo5
    (foo 5))
    
  
  (definition holder
    #f)

  
  (method (bar)
    (set! holder #f)
    (let ((proc
           (lambda (n flag)
             (let ((p
                    (lambda ()
                      n)))
               (if flag p (holder))))))
      (set! holder (proc 5 #t))
      (proc 7 #f)))

  
  (method (test-indefinite-extent)
    (validate (= (map add10 '(1 2 3)) '(11 12 13)))
    (validate (= (map foo5 '(1 2 3)) '(16 17 18)))
    (validate (= (bar) 5)))
  
  
  ;;;
  ;;;; Outer Binding
  ;;;


  @wait-outer-binding
  (let ((x 0))
    (method (count)
      (prog1 x
        (increase! x))))

  
  @wait-outer-binding
  (method (test-outer-binding)
    (validate (= (count) 0))
    (validate (= (count) 1))
    (validate (= (count) 2))
    (validate (= (count) 3)))
  
  
  ;;;
  ;;;; Rest Binding
  ;;;

  
  (method (yoo . rest)
    (let ((x 10))
      (cons x rest)))
  
  
  (method (test-rest-binding)
    (validate (= (yoo 1 2 3) '(10 1 2 3))))
  
  
  ;;;
  ;;;; Function
  ;;;


  (method (with-proc proc)
    (proc 2 3))
  
  
  (method (fn a b c)
    (* a b c))
  
  
  (method (test-with z)
    (with-proc
      (lambda (x y)
        (fn x y z))))
  
  
  (method (test-function)
    (validate (= ((lambda (w) (test-with w)) 5) 30)))
  
  
  ;;;
  ;;;; Recursivity
  ;;;


  (method (fact n)
    (if (= n 0)
        1
      (* n (fact (- n 1)))))
  
  
  (method (test-recursivity)
    (validate (= (fact 5) 120)))))
)