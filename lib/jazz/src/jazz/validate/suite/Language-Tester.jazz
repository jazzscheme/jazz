;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Language Tests
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.validate.suite.Language-Tester jazz


(import (jazz.markup)
        (jazz.validation))


(class Language-Tester extends Tester
  
  
  (form
    (<install> title: "Language"))
  
  
  (method override (test self)
    (invoke self #f test-language)
    (invoke self #f test-predicates))
  
  
  ;;;
  ;;;; Language
  ;;;
  
  
  (method (test-language self)
    (define (square x) (* x x))
    (define (double-proc proc x) (* (proc x) 2))
    
    ;; comments
    (check (eq? 5 (+ 1 4 @comment-next-sexp (+ 1 2))))
    (check @comment-next-step #f #t)
    
    ;; lambda
    (check (walk-failed? (lambda)))
    (check (eq? 16 ((lambda (x) (* x x)) 4)))
    (check (error-occurred? ((lambda x (* x x)) 2)))
    (check (procedure? (lambda ())))
    (check (walk-failed? (lambda (()))))
    (check (walk-failed? (lambda (1))))
    (check (walk-failed? (lambda (display 1))))
    
    ;; functional syntax
    (check (procedure? square))
    (check (eq? 4 (square 2)))
    (check (eq? 8 (double-proc square 2)))
    
    ;; error throwing
    (check (walk-failed? (throw)))
    (check (walk-failed? (throw new Error)))
    (check (walk-failed? (throw (new Error) (new Error))))
    (check (error-occurred? (throw (new Error))))
    (check (error-occurred? (throw 1)))
    
    ;; error catching
    (check (walk-failed? (catch)))
    (check (walk-failed? (catch ()
                              (throw (new Error)))))
    (check (walk-failed? (catch (throw (new Error)) 
                              (Error error))))
    (check (walk-failed? (catch 1)))
    (check (error-occurred? (catch (Error error #f)
                                 (throw 'foo)))))
  
  
  ;;;
  ;;;; Predicates
  ;;;
  
  
  (method (test-predicates self)
    ;; equal?
    (check (error-occurred? (equal?)))
    (check (error-occurred? (equal? 'foo)))
    (check (error-occurred? (equal? 'foo 'bar 'test))))))
