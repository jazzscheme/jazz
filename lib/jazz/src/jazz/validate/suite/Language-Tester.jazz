;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Language Tests
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.validate.suite.Language-Tester jazz


(import (jazz.jml)
        (jazz.validation))


(class Language-Tester extends Tester
  
  
  (form
    (<install> title: "Language"))
  
  
  (method override (test self)
    (invoke self #f test-language)
    (invoke self #f test-binding)
    (invoke self #f test-conditionals))
  
  
  ;;;
  ;;;; Language
  ;;;
  
  
  (method (test-language self)
    ;; required defines
    (define (square x) (* x x))
    (define (double-proc proc x) (* (proc x) 2))
    
    ;; comments
    (success? (eq? 5 (+ 1 4 @comment-next-sexp (+ 1 2))))
    (success? @comment-next-step #f #t)
    
    ;; lambda
    (success? (walk-failed? (lambda)))
    (success? (eq? 16 ((lambda (x) (* x x)) 4)))
    (success? (error-occurred? ((lambda x (* x x)) 2)))
    (success? (procedure? (lambda ())))
    (success? (walk-failed? (lambda (()))))
    (success? (walk-failed? (lambda (1))))
    (success? (walk-failed? (lambda (display 1))))
    
    ;; functional syntax
    (success? (procedure? square))
    (success? (eq? 4 (square 2)))
    (success? (eq? 8 (double-proc square 2)))
    
    ;; error throwing
    (success? (walk-failed? (throw)))
    (success? (walk-failed? (throw new Error)))
    (success? (walk-failed? (throw (new Error) (new Error))))
    (success? (error-occurred? (throw (new Error))))
    (success? (error-occurred? (throw 1)))
    
    ;; error catching
    (success? (walk-failed? (catch)))
    (success? (walk-failed? (catch ()
                              (throw (new Error)))))
    (success? (walk-failed? (catch (throw (new Error)) 
                              (Error error))))
    (success? (walk-failed? (catch 1)))
    (success? (error-occurred? (catch (Error error #f)
                                 (throw 'foo)))))
  
  
  ;;;
  ;;;; Binding
  ;;;
  
  
  (method (test-binding self)
    ;; define
    (define foo 1)
    (define (bar) 1)
    @crash
    (success? (walk-failed? (let () (define))))
    @crash
    (success? (walk-failed? (let () (define a))))
    (success? (eq? foo 1))
    (success? (not (equal? 'foo 1)))
    (success? (procedure? bar))
    (success? (eq? (bar) 1))
    (success? (walk-failed? (let () (define (a 1)))))
    (success? (walk-failed? unresolved-symbol))
    (success? (walk-failed? (unresolved-symbol)))
    
    ;; define-macro
    (success? (walk-failed? (let () (define-macro))))
    (success? (walk-failed? (let () (define-macro a))))
    
    ;; let
    (success? (eq? 2 (let () 2)))
    (success? (procedure? (let (func (arg 'val)) func)))
    (success? (procedure? (let (func) func)))
    (success? (walk-failed? (let)))
    (success? (walk-failed? (let (()))))
    (success? (walk-failed? (let ((())))))
    (success? (walk-failed? (let ((a)))))
    (success? (walk-failed? (let ((a 1) (b a)) a)))
    (success? (walk-failed? (let 1)))
    (success? (walk-failed? (let ((fact (lambda (n)
                                          (if (= 0 n)
                                              1
                                            (* n (fact (- n 1)))))))
                              (fact 3))))
    (success? (let (opposite (bool #f))
                (if bool 
                    bool 
                  (opposite (not bool)))))
    
    ;; let*
    (success? (walk-failed? (let*)))
    (success? (eq? 25 (let* ((func (lambda (x) (* x x)))
                             (val (func 5)))
                        val)))
    (success? (eq? 4 (let* ((a 2)
                            (b (* a 2)))
                       b)))
    @not-failing
    (success? (walk-failed? (let* ())))
    (success? (walk-failed? (let* ((a b) (b 2)) b)))
    (success? (walk-failed? (let* ((fact (lambda (n)
                                           (if (= 0 n)
                                               1
                                             (* n (fact (- n 1)))))))
                              (fact 3))))
    
    ;; letrec
    (success? (walk-failed? (letrec)))
    @this-error-is-not-trapped-by-gambit
    (success? (neq? 2 (letrec ((a 2) (b a)) b)))
    @this-error-is-not-trapped-by-gambit
    (success? (not (walk-failed? (letrec ((a b) (b 2)) b))))
    (success? (eq? 6 (letrec ((fact (lambda (n)
                                      (if (= 0 n)
                                          1
                                        (* n (fact (- n 1)))))))
                       (fact 3))))
    
    ;; bind
    @incorrectly-returns-no-error-when-compiled
    (success? (error-occurred? (bind (a) 1)))
    @crashed-when-compiled
    (success? (error-occurred? (bind (a) (1))))
    @incorrectly-returns-no-error-when-compiled
    (success? (error-occurred? (bind (a b) '(1))))
    (success? (walk-failed? (bind (a b) (list 1 a))))
    (success? (equal? '(2 3) (bind (first . rest) '(1 2 3) rest)))
    
    ;; receive
    (success? (walk-failed? (receive)))
    (success? (eq? 1 (receive (x) 1 x)))
    @crashed-when-compiled
    (success? (error-occurred? (receive (x) (1) x)))
    (success? (list? (receive (x) '(1) x)))
    (success? (eq? -3 (receive (x y) (values 2 5) (- x y))))
    (success? (error-occurred? (receive (x y) '(2 5) (- x y))))
    @wait-for-crash-proof-test-method
    (begin 
      (receive x 1 x))
    
    ;; set!
    (success? (walk-failed? (set!)))
    (success? (walk-failed? (set! test)))
    (success? (walk-failed? (set! 'test 3)))
    (success? (walk-failed? (set! foo 2 3)))
    (success? (not (walk-failed? (set! foo 10)))))
  
  
  ;;;
  ;;;; Conditionals
  ;;;
  
  
  (method (test-conditionals self)
    ;; if
    (success? (walk-failed? (if)))
    (success? (walk-failed? (if #t)))
    (success? (eq? 1 (if #t 1 2)))
    (success? (eq? 3 (if #f 1 2 3)))
    
    ;; when
    (success? (walk-failed? (when)))
    @convert
    (success? (eq? 2 (when (lambda ()) 2)))
    
    ;; unless
    (success? (walk-failed? (unless)))
    @convert
    (success? (not (unless (lambda ()) 3)))
    
    ;; cond
    (success? (walk-failed? (cond ())))
    @not-failing
    (success? (walk-failed? (cond (else 1) (else 2))))
    (success? (walk-failed? (cond 1 2)))
    
    ;; equal?
    (success? (error-occurred? (equal?)))
    (success? (error-occurred? (equal? 'foo)))
    (success? (error-occurred? (equal? 'foo 'bar 'test)))
    
    ;; ecase
    (success? (walk-failed? (ecase)))
    ;;; Important : This is on the jazzscheme website in the tutorial
    ;;;             and actually does not work! This should be fixed.
    (success? (walk-failed? (ecase 1
                              (0 (display "zero"))
                              (1 (display "one"))
                              (2 (display "two")))))
    
    ;; typecase
    (success? (walk-failed? (typecase)))
    (success? (eq? 2 (typecase "Test string"
                       ((List) 1)
                       ((String) 2))))
    (success? (eq? 2 (typecase "Test string"
                       ((List) 1)
                       ((String) 2)
                       ((String) 3)))))))
