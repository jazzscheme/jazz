;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Loop Tests
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2012
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.validate.suite.Loop-Tester jazz


(import (jazz.jml)
        (jazz.validation))


(class Loop-Tester extends Tester
  
  
  (form
    (<install> title: "Loop"))


  (method override (test)
    (invoke "With" test-with)
    (invoke "Repeat" test-repeat)
    (invoke "For" test-for)
    (invoke "Some" test-some)
    (invoke "Every" test-every)
    (invoke "When" test-when)
    (invoke "Unless" test-unless)
    (invoke "Do" test-do)
    (invoke "Sum" test-sum)
    (invoke "Collect" test-collect)
    (invoke "Return" test-return)
    (invoke "Finally" test-finally)
    (invoke "Loop" test-loop))
  
  
  ;;;
  ;;;; With
  ;;;


  (method (test-with)
    (validate (equal? (loop (with x = 2)
                            (with y = (+ x x))
                            (return (list x y)))
                      '(2 4))))
  
  
  ;;;
  ;;;; Repeat
  ;;;


  (method (test-repeat)
    (let ((count 0))
      (loop (repeat 10)
            (increase! count))
      (validate (= count 10))))
  
  
  ;;;
  ;;;; For
  ;;;


  (method (test-for)
    (test-for-in)
    (test-for-in-vector)
    (test-for-in-sequence)
    (test-for-in-properties)
    (test-for-from)
    (test-for-first)
    (test-for-=))


  (method (test-for-in)
    (let ((queue (new-queue)))
      (loop (for x in '(1 2 3) remainder r)
            (enqueue queue (cons x (and (not-null? r) (car r)))))
      (validate (equal? (queue-list queue) '((1 . 2) (2 . 3) (3 . #f))))))


  (method (test-for-in-vector)
    (let ((queue (new-queue)))
      (loop (for x in-vector (list->vector (naturals 0 10)))
            (enqueue queue x))
      (validate (equal? (queue-list queue) (naturals 0 10)))))
  
  
  (method (test-for-in-sequence)
    (let ((queue (new-queue)))
      (loop (for x in-sequence (naturals 0 10))
            (enqueue queue x))
      (validate (equal? (queue-list queue) (naturals 0 10)))))
  
  
  (method (test-for-in-properties)
    (let ((queue (new-queue)))
      (loop (for (p v) in-properties '(a: 2 b: 3))
            (enqueue queue (cons (keyword->symbol p) v)))
      (validate (equal? (queue-list queue) '((a . 2) (b . 3))))))
  
  
  (method (test-for-from)
    (let ((queue (new-queue)))
      (loop (for x from 0 below 10)
            (enqueue queue x))
      (validate (equal? (queue-list queue) (naturals 0 10)))))
  
  
  (method (test-for-first)
    (validate (equal? (loop (for f first #t then #f)
                            (for x in (naturals 0 5))
                            (collect (cons x f)))
                      '((0 . #t) (1 . #f) (2 . #f) (3 . #f) (4 . #f)))))
  
  
  (method (test-for-=)
    (validate (equal? (loop (for x in (naturals 0 5))
                            (for y = (* x x))
                            (collect y))
                      '(0 1 4 9 16))))
  
  
  ;;;
  ;;;; Some
  ;;;
  
  
  (method (test-some)
    (validate (not (loop (for x in '(1 3 5))
                         (some (even? x)))))
    (validate (loop (for x from 0 to 10)
                    (some (> x 5)))))
  
  
  ;;;
  ;;;; Every
  ;;;
  
  
  (method (test-every)
    (validate (loop (for x in '(1 3 5))
                    (every (odd? x))))
    (validate (not (loop (for x from 0 to 10)
                         (every (> x 5))))))
  
  
  ;;;
  ;;;; When
  ;;;
  
  
  (method (test-when)
    (validate (equal? (loop (for n in (naturals 0 10))
                            (when (even? n)
                              (collect n in even))
                            (when (odd? n)
                              (sum n in odd))
                            (finally (list even odd)))
                      '((0 2 4 6 8) 25))))
  
  
  ;;;
  ;;;; Unless
  ;;;
  
  
  (method (test-unless)
    )
  
  
  ;;;
  ;;;; Do
  ;;;
  
  
  (method (test-do)
    )
  
  
  ;;;
  ;;;; Sum
  ;;;
  
  
  (method (test-sum)
    )
  
  
  ;;;
  ;;;; Collect
  ;;;
  
  
  (method (test-collect)
    )
  
  
  ;;;
  ;;;; Return
  ;;;
  
  
  (method (test-return)
    )
  
  
  ;;;
  ;;;; Finally
  ;;;
  
  
  (method (test-finally)
    )
  
  
  ;;;
  ;;;; Loop
  ;;;
  

  (method (test-loop)
    (loop (for f first #t then #f)
          (for x in (naturals 0 10))))))
