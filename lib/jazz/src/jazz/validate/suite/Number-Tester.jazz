;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Number Tests
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.validate.suite.Number-Tester jazz


(import (jazz.markup)
        (jazz.validation))


(class Number-Tester extends Tester
  
  
  (form
    (<install> title: "Number"))


  (method override (test self)
    (invoke self "predicate" test-number)
    (invoke self "bit" test-bit))
  
  
  ;;;
  ;;;; Number
  ;;;


  (method (test-number self)
    (check (= 0 (+)))
    (check (= 5 (+ 1 1 3)))
    
    (check (= (- 2) -2))
    (check (= (- 3.5) -3.5))
    (check (= (- 10 3.2) 6.8))
    (check (= (- 10 3 2 1) 4))
  
    (check (= 1 (*)))
    (check (= 60 (* 1 1 3 4 5)))
    
    (check (= (/ 4) 0.25))
    (check (= (/ 3 0.25) 12))
    (check (= (/ 24 2 2 2) 3))
  
    (check (=))
    (check (= 1))
    (check (= 1 1 1 1))
    (check (not (= 1 1 2 1)))
  
    @todo
    (check (not (/=)))
    @todo
    (check (not (/= 1)))
    (check (not (/= 1 1)))
    (check (/= 1 2))
  
    (check (< 1))
    (check (< 1 2 3 6))
    (check (not (< 1 1)))
    (check (not (< 1 4 2)))
  
    (check (= (max 1) 1))
    (check (= (max 1 7 4 3 8 2) 8))
    (check (= (max 8 1 7 4 3 2) 8))
    (check (= (max 1 7 4 3 2 8) 8))
    (check (= (min 1) 1))
    (check (= (min 7 4 3 1 8 2) 1))
    (check (= (min 1 7 4 3 8 2) 1))
    (check (= (min 7 4 3 8 2 1) 1))
    
    (check (error-occurred? (-)))
    (check (error-occurred? (/)))
    
    (check (error-occurred? (max)))
    (check (error-occurred? (min)))
    
    (check (error-occurred? (/ 2 0))))
  
  
  ;;;
  ;;;; Bit
  ;;;


  (method (test-bit self)
    (check (= (bitwise-and 5) 5))
    (check (= (bitwise-and 1 4) 0))
    (check (= (bitwise-and 6 14 2) 2))
    (check (= (bitwise-ior 5) 5))
    (check (= (bitwise-ior 6 1) 7)))))
