;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Object Tests
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.validate.suite.Object-Tester jazz


(import (jazz.jml)
        (jazz.validation))


(class Object-Tester extends Tester
  
  
  (form
    (<install> title: "Object"))
  
  
  @convert (


  (method (test self)
    (invoke self "Definition" test-definition)
    (invoke self "Slot" test-slot)
    (invoke self "Self" test-self)
    (invoke self "Super" test-super)
    (invoke self "Reference" test-reference)
    (invoke self "Inheritance" test-inheritance)
    (invoke self "Interface" test-interface)
    (invoke self "Inner" test-inner)
    (invoke self "Meta" test-meta))
  
  
  ;;;
  ;;;; Definition
  ;;;


  (method (test-definition self)
    )
  
  
  ;;;
  ;;;; Slot
  ;;;


  (method (test-slot self)
    )
  
  
  ;;;
  ;;;; Self
  ;;;


  (method (test-self self)
    )
  
  
  ;;;
  ;;;; Super
  ;;;


  (method (test-super self)
    )
  
  
  ;;;
  ;;;; Reference
  ;;;


  (method (test-reference self)
    )
  
  
  ;;;
  ;;;; Inheritance
  ;;;


  (method (test-inheritance self)
    )
  
  
  ;;;
  ;;;; Interface
  ;;;


  (method (test-interface self)
    )
  
  
  ;;;
  ;;;; Inner
  ;;;


  (method (test-inner self)
    )
  
  
  ;;;
  ;;;; Meta
  ;;;


  (method (test-meta self)
    )))
  
  
@convert (


;;       X
;;      / \
;;     Y   W
;;    /
;;   Z


(class X extends Object
  
  (definition public virtual foo 10)
  (definition goo 15)
  
  (slot bar initialize 5)
  
  (method public (toto self)
    bar)
  
  (method public (tutu self x)
    (* x bar))
  
  (method public (tata self)
    X2)
  
  (method public (yuyu self)
    (let ((bar 11))
      (list bar self.bar)))
  
  (method public (yiyi self)
    (let ((bar 11))
      (set! bar 12)
      (set! self.bar 7)
      (list bar self.bar))))


(class Y extends X
  
  (definition public foo 20)
  
  (method public virtual (bah self x)
    x))


(class Z extends Y
  
  (method (bah self x)
    (+ x x)))


(class W extends X
  
  (slot hoo initialize (new Cell 0 0)))


(method (test-part1 self)
  (success? (neq? (get-hoo (new W)) (get-hoo (new W))))
  
  (success? W)
  (success? Y)
  (success? Z)
  
  @Interpreted
  (begin
    (success? (error? (get-goo Z))))
  
  (success? (= (get-foo (new X)) 10)))


(definition public X1 #f)
(definition public X2 #f)


(method (call-bah self obj x)
  (bah obj x))

(method (call-bah2 self obj x)
  (bah obj x))


(method (test-part2 self)
  (set! X1 (new X))
  (set! X2 (new X))
  
  (success? (= (get-foo X1) 10))
  (success? (= (get-bar X1) 5))
  (success? (= (get-bar X2) 5))
  
  (set-bar X1 6)
  (set-bar X2 7)
  (success? (= (get-bar X1) 6))
  (success? (= (get-bar X2) 7))
  
  (success? (= (toto X1) 6))
  (success? (= (tutu (tata X1) 4) 28))
  
  (success? (equal? (yuyu X1) '(11 6)))
  
  (success? (equal? (yiyi X1) '(12 7)))
  
  (success? (= (call-bah (new Y) 5) 5))
  (success? (= (call-bah (new Z) 5) 10))
  
  (success? (= (call-bah2 (new Z) 5) 10))
  (success? (= (call-bah2 (new Y) 5) 5))
  
  @Interpreted
  (begin
    (success? (error? (call-bah (new X) 5)))
    (success? (error? (call-bah2 (new X) 5)))))


(method (test-part3 self)
  (set! mm 7)
  (success? (= (list mm (foo (new I))) '(7 2)))
  (success? (= (bar (mak (new I))) '(9 (9 6) (9 15) (9)))))


;;;
;;;; Inner and Meta classes
;;;


(slot meta mm initialize 5)


(slot aa initialize 2)


(method (f self . rest)
  (list aa (apply + rest)))


(method protected virtual (v self)
  (list aa))


(class I extends Object
  
  
  (method public (foo self)
    aa)
  
  
  (method public (mak self)
    (new J)))


(class J extends Object
  
  
  (method public (bar self)
    (set! aa 9)
    (list aa (f 1 2 3) (apply f '(4 5 6)) (v))))))
