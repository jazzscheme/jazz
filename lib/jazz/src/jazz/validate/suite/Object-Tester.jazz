;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Object Tests
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.validate.suite.Object-Tester jazz


(import (jazz.jml)
        (jazz.validation))


(class Object-Tester extends Tester
  
  
  (form
    (<install> title: "Object"))
  
  
  @convert (


  (method (test)
    (invoke "Definition" test-definition)
    (invoke "Slot" test-slot)
    (invoke "Self" test-self)
    (invoke "Super" test-super)
    (invoke "Reference" test-reference)
    (invoke "Inheritance" test-inheritance)
    (invoke "Interface" test-interface)
    (invoke "Inner" test-inner)
    (invoke "Meta" test-meta))
  
  
  ;;;
  ;;;; Definition
  ;;;


  (method (test-definition)
    )
  
  
  ;;;
  ;;;; Slot
  ;;;


  (method (test-slot)
    )
  
  
  ;;;
  ;;;; Self
  ;;;


  (method (test-self)
    )
  
  
  ;;;
  ;;;; Super
  ;;;


  (method (test-super)
    )
  
  
  ;;;
  ;;;; Reference
  ;;;


  (method (test-reference)
    )
  
  
  ;;;
  ;;;; Inheritance
  ;;;


  (method (test-inheritance)
    )
  
  
  ;;;
  ;;;; Interface
  ;;;


  (method (test-interface)
    )
  
  
  ;;;
  ;;;; Inner
  ;;;


  (method (test-inner)
    )
  
  
  ;;;
  ;;;; Meta
  ;;;


  (method (test-meta)
    )))
  
  
@convert (


;;       X
;;      / \
;;     Y   W
;;    /
;;   Z


(class X extends Object
  
  (definition public virtual foo 10)
  (definition goo 15)
  
  (slot bar initialize 5)
  
  (method public (toto)
    bar)
  
  (method public (tutu x)
    (* x bar))
  
  (method public (tata)
    X2)
  
  (method public (yuyu)
    (let ((bar 11))
      (list bar bar~self)))
  
  (method public (yiyi)
    (let ((bar 11))
      (set! bar 12)
      (set! bar~self 7)
      (list bar bar~self))))


(class Y extends X
  
  (definition public foo 20)
  
  (method public virtual (bah x)
    x))


(class Z extends Y
  
  (method (bah x)
    (+ x x)))


(class W extends X
  
  (slot hoo initialize (new Cell 0 0)))


(method (test-part1)
  (validate (neq? (get-hoo~ (new W)) (get-hoo~ (new W))))
  
  (validate W)
  (validate Y)
  (validate Z)
  
  @Interpreted
  (begin
    (validate (error? (get-goo~ Z))))
  
  (validate (= (get-foo~ (new X)) 10)))


(definition public X1 #f)
(definition public X2 #f)


(method (call-bah obj x)
  (bah~ obj x))

(method (call-bah2 obj x)
  (bah~ obj x))


(method (test-part2)
  (set! X1 (new X))
  (set! X2 (new X))
  
  (validate (= (get-foo~ X1) 10))
  (validate (= (get-bar~ X1) 5))
  (validate (= (get-bar~ X2) 5))
  
  (set-bar~ X1 6)
  (set-bar~ X2 7)
  (validate (= (get-bar~ X1) 6))
  (validate (= (get-bar~ X2) 7))
  
  (validate (= (toto~ X1) 6))
  (validate (= (tutu~ (tata~ X1) 4) 28))
  
  (validate (equal? (yuyu~ X1) '(11 6)))
  
  (validate (equal? (yiyi~ X1) '(12 7)))
  
  (validate (= (call-bah (new Y) 5) 5))
  (validate (= (call-bah (new Z) 5) 10))
  
  (validate (= (call-bah2 (new Z) 5) 10))
  (validate (= (call-bah2 (new Y) 5) 5))
  
  @Interpreted
  (begin
    (validate (error? (call-bah (new X) 5)))
    (validate (error? (call-bah2 (new X) 5)))))


(method (test-part3)
  (set! mm 7)
  (validate (= (list mm (foo~ (new I))) '(7 2)))
  (validate (= (bar~ (mak~ (new I))) '(9 (9 6) (9 15) (9)))))


;;;
;;;; Inner and Meta classes
;;;


(slot meta mm initialize 5)


(slot aa initialize 2)


(method (f . rest)
  (list aa (apply + rest)))


(method protected virtual (v)
  (list aa))


(class I extends Object
  
  
  (method public (foo)
    aa)
  
  
  (method public (mak)
    (new J)))


(class J extends Object
  
  
  (method public (bar)
    (set! aa 9)
    (list aa (f 1 2 3) (apply f '(4 5 6)) (v)))))
)