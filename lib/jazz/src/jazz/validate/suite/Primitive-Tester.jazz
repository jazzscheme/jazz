;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Primitive Tests
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.validate.suite.Primitive-Tester jazz


(import (jazz.markup)
        (jazz.validation))


(class Primitive-Tester extends Tester
  
  
  (form
    (<install> title: "Primitive"))


  (method override (test self)
    (invoke self #f test-primitives))
  
  
  ;;;
  ;;;; Primitives
  ;;;


  (method (test-primitives self)
    (let ((scheme (get-public-lookup (outline-unit 'scheme.language.runtime)))
          (gambit (get-public-lookup (outline-unit 'gambit.language.runtime)))
          (jazz (get-public-lookup (outline-unit 'jazz.language.runtime.kernel)))
          (functional (get-public-lookup (outline-unit 'jazz.language.runtime.functional)))
          (time (get-public-lookup (outline-unit 'time))))
      (define (found? symbol)
        (let ((str (symbol->string symbol)))
          (define (test prefix lookup)
            (and (starts-with? str prefix)
                 (let ((name (string->symbol (substring str (string-length prefix) (string-length str)))))
                   (table-ref lookup name #f))))
          
          (or (test "scheme.language.runtime:" scheme)
              (test "gambit.language.runtime:" gambit)
              (test "jazz.language.runtime.kernel:" jazz)
              (test "jazz.language.runtime.functional:" functional)
              (test "time:" time))))
      
      (define (validate title symbol)
        (checking (found? symbol) (format "({a}-exists? {a})" title symbol)))
      
      (for-each (lambda (symbol) (validate "pattern" symbol)) (table-keys (primitive-patterns-get)))
      (for-each (lambda (symbol) (validate "predicate" symbol)) (table-keys (primitive-predicates-get)))))))
