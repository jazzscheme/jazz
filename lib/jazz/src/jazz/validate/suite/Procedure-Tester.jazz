;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Procedure Tests
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.validate.suite.Procedure-Tester jazz


(import (jazz.markup)
        (jazz.validation))


(class Procedure-Tester extends Tester
  
  
  (form
    (<install> title: "Procedure"))


  (method override (test self)
    (invoke self "lambda" test-lambda))
  
  
  ;;;
  ;;;; Lambda
  ;;;


  (method (with-proc self proc)
    (proc 2 3))
  
  
  (method (fn self a b c)
    (* a b c))
  
  
  (method (test-with self z)
    (with-proc self
      (lambda (x y)
        (fn self x y z))))

  
  (method (yoo self . rest)
    (let ((x 10))
      (cons x rest)))
  
  
  (method (test-lambda self)
    (check (declaration-failed? (lambda)))
    (check (declaration-failed? (lambda (a 2))))
    (check (equal? ((lambda (w) (test-with self w)) 5) 30))
    (check (equal? (yoo self 1 2 3) '(10 1 2 3))))))
