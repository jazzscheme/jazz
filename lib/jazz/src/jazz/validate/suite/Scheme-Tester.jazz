;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Scheme Tests
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.validate.suite.Scheme-Tester jazz


(import (jazz.validation))


(class Scheme-Tester extends Tester
  
  
  @wait (
  (form
    (<install> title: "Scheme"))


  (method (test self)
    (invoke self #f test-define)
    (invoke self #f test-let)
    (invoke self #f test-letstar)
    (invoke self #f test-named-let)
    (invoke self #f test-do)
    (invoke self #f test-and)
    (invoke self #f test-or))
  
  
  ;;;
  ;;;; Define
  ;;;
  
  
  (define (fact n)
    (define (fact n res)
      (if (= n 1)
          res
        (fact (- n 1) (* res n))))
    (fact n 1))
  
  
  (method (test-define self)
    (check (= (fact 5) 120)))
  
  
  ;;;
  ;;;; Let
  ;;;
  
  
  (method (test-let self)
    (check (= (let ((x 2) (y 3))
                   (let* ((x 5) (y (+ x x)) (z (* x y)))
                     (list x y z)))
                 '(5 4 6))))
  
  
  ;;;
  ;;;; Let*
  ;;;
  
  
  (method (test-letstar self)
    (check (= (let ((x 2) (y 3))
                   (let* ((x 5) (y (+ x x)) (z (* x y)))
                     (list x y z)))
                 '(5 10 50))))
  
  
  ;;;
  ;;;; Named Let
  ;;;
  
  
  (method (test-named-let self)
    (check (= (let ((sum 0))
                   (let (iter (n 1))
                     (when (/= n 5)
                       (increase! sum n)
                       (iter (+ n 1))))
                   sum)
                 10)))
  
  
  ;;;
  ;;;; Do
  ;;;
  
  
  (method (test-do self)
    (check (= (do ((i 1 (+ i 1))
                      (sum 0))
                     ((= i 5) sum)
                   (increase! sum i))
                 10)))
  
  
  ;;;
  ;;;; And
  ;;;
  
  
  (method (test-and self)
    (check (= (let ((x 2)) (and x (/ 6 x))) 3)))
  
  
  ;;;
  ;;;; Or
  ;;;
  
  
  (method (test-or self)
    (check (= (let ((x 2)) (or #f x)) 2))))))
