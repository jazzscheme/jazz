;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; String Tests
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.validate.suite.String-Tester jazz


(import (jazz.jml)
        (jazz.validation))


(class String-Tester extends Tester
  
  
  (form
    (<install> title: "String"))


  (method override (test self)
    (invoke self "String" test-string)
    ;;(invoke self "Ansi-String" test-ansi-string)
    (invoke self "wi=?" test-wi=?))
  
  
  ;;;
  ;;;; String
  ;;;


  (definition string
    (string-copy "hello"))


  (method (test-string self)
    (success? (nu=? (element string 1) #\e))
    (set-element! string 4 #\x)
    (success? (nu=? (element string 4) #\x)))
  
  
  ;;;
  ;;;; Ansi-String
  ;;;


  @convert
  (definition ansistring
    (coerce "hello" Ansi-String))


  @convert
  (method (test-ansi-string self)
    (success? (nu=? (element ansistring 1) #\e))
    (set-element! ansistring 4 #\x)
    (success? (nu=? (element ansistring 4) #\x)))
  
  
  ;;;
  ;;;; wi=?
  ;;;
  
  
  (method (test-wi=? self)
    (success? (wi=? "" ""))
    (success? (wi=? "" "   "))
    (success? (wi=? "   " ""))
    (success? (not (wi=? "" "a")))
    (success? (not (wi=? "a" "")))
    (success? (not (wi=? "ab" "a b")))
    (success? (wi=? "a" "   a"))
    (success? (wi=? "   a" "a"))
    (success? (wi=? "a" "a   "))
    (success? (wi=? "a   " "a"))
    (success? (wi=? "   a b " "             a         b ")))))
