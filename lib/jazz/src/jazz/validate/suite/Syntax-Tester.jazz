;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Syntax Tests
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.validate.suite.Syntax-Tester jazz


(import (jazz.jml)
        (jazz.library)
        (jazz.validate))


(class Syntax-Tester extends Tester
  
  
  (form
    (<install> title: "Syntax"))


  (method (test)
    (invoke "Quote" test-quote)
    (invoke "If" test-if)
    (invoke "When" test-when)
    (invoke "Unless" test-unless)
    (invoke "While" test-while)
    (invoke "Until" test-until)
    (invoke "For" test-for)
    (invoke "Begin" test-begin)
    (invoke "Prog1" test-prog1)
    (invoke "Cond" test-cond)
    (invoke "Case" test-case)
    (invoke "ECase" test-ecase)
    (invoke "Typecase" test-typecase)
    (invoke "And" test-and)
    (invoke "Or" test-or)
    (invoke "Essay" test-essay)
    (invoke "Either" test-either)
    (invoke "Set!" test-set!)
    (invoke "Increase!" test-increase!)
    (invoke "Decrease!" test-decrease!))
  
  
  ;;;
  ;;;; Quote
  ;;;


  (method (test-quote)
    (validate rpt (equal? '(a b c) (list 'a 'b 'c)))
    
    @Interpreted
    (begin
      (validate rpt (error? (code-walk '(quote) self '())))
      (validate rpt (error? (code-walk '(quote a b c) self '())))))
  
  
  ;;;
  ;;;; If
  ;;;


  (method (test-if)
    @Interpreted
    (begin
      (validate rpt (error? (code-walk '(if) self '())))
      (validate rpt (error? (code-walk '(if #f) self '())))))
  
  
  ;;;
  ;;;; When
  ;;;


  (method (test-when)
    @Interpreted
    (begin
      (validate rpt (error? (code-walk '(when) self '())))))
  
  
  ;;;
  ;;;; Unless
  ;;;
  

  (method (test-unless)
    (validate rpt (= (foo) 50))
    (validate rpt (equal? (unless (= 2 2) 5) #f))
    (validate rpt (equal? (unless (= 2 3) 5) 5)))
  
  
  ;;;
  ;;;; While
  ;;;


  (method (test-while)
    )
  
  
  ;;;
  ;;;; Until
  ;;;


  (method (test-until)
    )
  
  
  ;;;
  ;;;; For
  ;;;


  (method (test-for)
    )
  
  
  ;;;
  ;;;; Begin
  ;;;


  (method (test-begin)
    )
  
  
  ;;;
  ;;;; Prog1
  ;;;


  (method (test-prog1)
    )
  
  
  ;;;
  ;;;; Cond
  ;;;


  (method (test-cond)
    @bad-scheme-syntax
    (let ((v (cond)))
      (validate rpt (not v)))
    (let ((x 2)
          (y 3))
      (validate rpt (= (cond ((= x 5) 7)
                             ((= y 3) 8)
                             (else 9))
                       8))))
  
  
  ;;;
  ;;;; Case
  ;;;


  (method (test-case)
    @bad-scheme-syntax
    (let ((v (case 2)))
      (validate rpt (not v)))
    (validate rpt (= (case 3
                       ((5) 7)
                       ((3) 8)
                       (else 9))
                     8)))
  
  
  ;;;
  ;;;; ECase
  ;;;


  (method (test-ecase)
    @bad-scheme-syntax
    (let ((v (ecase 2)))
      (validate rpt (not v)))
    (let ((x 2)
          (y 3))
      (validate rpt (= (ecase 3
                         ((x) 7)
                         ((y) 8)
                         (else 9))
                       8))))
  
  
  ;;;
  ;;;; Typecase
  ;;;


  (method (test-typecase)
    @bad-scheme-syntax
    (let ((v (typecase 2)))
      (validate rpt (not v)))
    (validate rpt (= (typecase 3
                       ((Symbol) 7)
                       ((Number) 8)
                       (else 9))
                     8)))
  
  
  ;;;
  ;;;; And
  ;;;


  (method (test-and)
    (validate rpt (equal? (and) #t))
    (validate rpt (equal? (and #t #f #t) #f))
    (validate rpt (equal? (and #t #t) #t))
    (validate rpt (equal? (and {} 2) #f))
    (validate rpt (equal? (and 2 3 5) 5)))
  
  
  ;;;
  ;;;; Or
  ;;;


  (method (test-or)
    (validate rpt (equal? (or) #f))
    (validate rpt (equal? (or #f #t #f) #t))
    (validate rpt (equal? (or #f #f) #f))
    (validate rpt (equal? (or #f #f (+ 2 3) #f) 5))
    (validate rpt (equal? (or {} {}) #f)))
  
  
  ;;;
  ;;;; Essay
  ;;;


  (method (test-essay)
    (validate rpt (equal? (essay {} 2) #f))
    (validate rpt (equal? (essay 2 3 5) 5)))
  
  
  ;;;
  ;;;; Either
  ;;;


  (method (test-either)
    (validate rpt (equal? (either #f #f) #f))
    (validate rpt (equal? (either #f #f (+ 2 3) #f) 5))
    (validate rpt (equal? (either {} {}) #f)))
  
  
  ;;;
  ;;;; Set!
  ;;;


  (method (test-set!)
    )
  
  
  ;;;
  ;;;; Increase!
  ;;;
  
  
  (method (foo)
    (let ((total 0))
      (loop (for n from 0 below 10)
            (increase! total 5))
      total))


  (method (test-increase!)
    (validate rpt (= (foo) 50)))
  
  
  ;;;
  ;;;; Decrease!
  ;;;


  (method (goo n)
    (let ((total 100))
      (loop (for i from 1 to 10)
            (decrease! total 5))
      total))


  (method (test-decrease!)
    (validate rpt (= (goo 5) 50))))


;;;
;;;; X
;;;


(class X extends Object
  
  
  (slot counter initialize 4)))
