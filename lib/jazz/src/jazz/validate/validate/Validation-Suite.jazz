;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Jazz Validation Suite
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.validate.validate.Validation-Suite jazz


(import (jazz.library)
        (jazz.platform)
        (jazz.ui)
        (jazz.ui.view)
        (jazz.utilities)
        (jazz.validate))


(class Validation-Suite extends Object
  
  
  (definition Classes
    '(Array-Tester
      Binding-Tester
      Boolean-Tester
      Branch-Tester
      Catalog-Tester
      Char-Tester
      Collector-Tester
      Component-Tester
      Control-Tester
      Debugger-Tester
      Designer-Tester
      Enumeration-Tester
      Error-Tester
      Explorer-Tester
      Form-Tester
      Format-Tester
      Function-Tester
      Iterator-Tester
      List-Tester
      Number-Tester
      ;;Object-Tester
      Pathname-Tester
      Reader-Tester
      Scheme-Tester
      Sequence-Tester
      String-Tester
      Structure-Tester
      Symbol-Tester
      Syntax-Tester
      Table-Tester
      Thread-Tester
      Values-Tester
      Variable-Tester
      Vector-Tester))
  
  
  (slot failed-assertions)
  
  
  (method public (validate (test: test #t) (report-success?: report-success? #t))
    (validate-suite test)
    (report-results report-success?: report-success?))


  (method (validate-suite test)
    (set! failed-assertions (new List-Factory))
    (for-each invoke-tester (if (eq? test #t) (all-tester-classes) (if (pair? test) test (list test))))
    (user-message "Done"))
  
  
  (method (invoke-tester class)
    (let ((tester (new class suite: self)))
      (user-message "Testing {a}..." tester)
      (test~ tester)))


  (method (all-tester-classes)
    (map autoreload Classes))
  
  
  (method public (assertion-failed title section form)
    (put~ failed-assertions (list title section form)))
  
  
  (method (report-results (report-success?: report-success? #t))
    (let ((failed (get-output~ failed-assertions)))
      (if (null? failed)
          (when report-success?
            (format :terminal "Test suite completed successfully.{%}"))
        (format :terminal "The following assertions failed:{%}{%}")
        (for-each (function (info)
                    (bind (title section message) info
                      (format :terminal "{a}{a} : {a}{%}" title (if section (format ".{a}" section) "") message)))
                  failed))))))
