;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Catalog
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module jazz.catalog jazz


(export (jazz.catalog.autoload))

(import (jazz.library)
        (jazz.system)
        (jazz.ui.view))


;;;
;;;; Thread
;;;


(definition catalog-thread
  {})


(definition (get-catalog-thread)
  (define (make-catalog-thread)
    (new-thread
      (lambda ()
        (thread-loop))
      'catalog))
  
  (either catalog-thread (let ((thread (make-catalog-thread)))
                           (thread-start-loop thread)
                           (thread-start! thread)
                           (set! catalog-thread thread)
                           thread)))


(definition public (post-catalog thunk)
  (thread-post (get-catalog-thread) 'post-catalog
    thunk))


;;;
;;;; Explore
;;;


(definition public (with-safe-explore proc (action: action 'ask))
  (with-exception-filter
    (lambda (obj)
      (let ((exc (and (object? obj) (is? obj Explore-Error) obj)))
        (when exc
          (let ((result (case action
                          ((ask)
                           (message-box (exception-reason exc) type: 'confirmation yes: "Show Me" no: "Debug" cancel: "Ignore"))
                          ((ignore)
                           'cancel))))
            (when (eq? result 'yes)
              (let ((source (get-source~ exc))
                    (range (get-range~ exc)))
                (edit-document~ (get-application) source selection: range)))
            (neq? result 'no)))))
    (lambda (exc)
      (throw-cancel))
    proc)))
