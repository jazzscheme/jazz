;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Catalog Configuration
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.catalog.catalog.Catalog-Configuration jazz


(import (jazz.catalog)
        (jazz.designer)
        (jazz.jml)
        (jazz.library)
        (jazz.system)
        (jazz.ui))


(class undocumented Catalog-Configuration extends Preferences


  (property type             initialize #f accessors generate)
  (property output-file      initialize #f accessors generate)
  (property directories      initialize #f accessors generate)
  (property extensions       initialize #f accessors generate)
  (property recursive?       initialize #t accessors generate)
  (property active?          initialize #f accessors generate)
  (property references?      initialize #f accessors generate)
  
  
  (form
    (<install> icon: {Image-Resource "Link"}))
  
  
  ;;;
  ;;;; Domain
  ;;;
  
  
  (method meta override (get-domain property)
    (case (field-name property)
      ((recursive? active? references?) (new Boolean-Domain))
      (else (nextmethod property))))
  
  
  ;;;
  ;;;; Descriptor
  ;;;
  
  
  (method meta override (get-class-descriptor)
    (new Catalog-Configuration-Descriptor)))


;;;
;;;; Design
;;;


(submodule design


(import (jazz.designer))


(class Catalog-Configuration-Descriptor extends Preferences-Descriptor
  
  
  (form
    (<install>                                        title: "Catalog"
      (<properties~>                                  categorized: (type output-file directories extensions recursive? active? references?)
        (<Property-Descriptor>      name: type        title: "Type"
          (<Catalog-Types-Domain>   name: domain))
        (<Property-Descriptor>      name: output-file title: "Output File"
          (<File-Domain>            name: domain      mode: save))
        (<Property-Descriptor>      name: directories title: "Directories"
          (<Directory-Group-Domain> name: domain))
        (<Property-Descriptor>      name: extensions  title: "Extensions")
        (<Property-Descriptor>      name: recursive?  title: "Recursive?"
          (<Boolean-Domain>         name: domain))
        (<Property-Descriptor>      name: active?     title: "Active?"
          (<Boolean-Domain>         name: domain))
        (<Property-Descriptor>      name: references? title: "References?"
          (<Boolean-Domain>         name: domain)))))
  
  
  (method override (component-presentation-property? component property)
    #f)
  
  
  (method override (component-get-presentation component)
    (name->presentation~ (class-of component) (get-name~ component)))
  
  
  (method override (component-set-presentation component designer presentation)
    (set-name~ designer component (presentation->name~ (class-of component) presentation))))


;;;
;;;; Catalog-Types-Domain
;;;


(class Catalog-Types-Domain extends Enumeration-Domain
  
  
  (method override (finish rest)
    (define (collect-catalog-types)
      (let ((pref (get-preferences #f)))
        (map (lambda (info)
               (let ((type (car info)))
                 (list type (->string type))))
             (get-catalog-types~ pref))))
    
    (nextmethod rest)
    (set-choices (collect-catalog-types))))


(register-autoclass Catalog-Types-Domain)))
