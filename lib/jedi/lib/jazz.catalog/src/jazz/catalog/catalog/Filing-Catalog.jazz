;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Filing Catalogs
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library protected jazz.catalog.catalog.Filing-Catalog jazz


(import (jazz.catalog)
        (jazz.io)
        (jazz.library)
        (jazz.system)
        (jazz.ui)
        (jazz.ui.view)
        (jazz.utilities)
        (time))


(class undocumented Filing-Catalog extends Catalog


  (slot file      initialize {})
  (slot active?   initialize #f)
  (slot loaded?   initialize #f)
  (slot modified? initialize #f)


  (method (initialize name file active?)
    (nextmethod name)
    (set! file~self file)
    (set! active?~self active?))


  ;;;
  ;;;; Access
  ;;;
    
  
  (method public (get-file)
    file)

  
  (method (get-active?)
    active?)
  
  
  (method (set-active? flag)
    (when (neq? flag active?)
      (set! active? flag)
      (if active?
          (activate)
        (deactivate))))


  (method public (get-modified?)
    modified?)


  (method public (set-modified? state)
    (when (neq? state modified?)
      (set! modified? state)))


  ;;;
  ;;;; Definitions
  ;;;
  
  
  (method (get-category-definitions name)
    (collect-type Category-Entry (get-definitions name)))


  ;;;
  ;;;; Content
  ;;;


  (method public virtual (iterate-content proc)
    )


  ;;;
  ;;;; Update
  ;;;
  
  
  (method public virtual (update (report?: report? #t))
    (set-active? #t)
    (when report?
      (user-message "Updating {a}..." (present)))
    (scan)
    (sweep)
    (reset-marks)
    (when report?
      (user-message "{a} {a} Updated" name (present))))
  
  
  (method protected virtual (reset-marks)
    )


  ;;;
  ;;;; Scan
  ;;;
  
  
  (method protected (scan)
    (reset-marks)
    (catch (Parse-Error err
             (message-box (get-message~ err))
             (let ((appl (get-application))
                   (start (get-start~ err))
                   (end (get-end~ err)))
               (edit-document~ appl (get-source~ err) selection: (new Range start end)))
             (throw-cancel))
      (scan-directories)))
  
  
  (method protected virtual (scan-directories)
    )
  
  
  (method protected (scan-directory directory (recursive?: recursive? #t))
    (let ((processed 0))
      (iterate-directory~ directory
        (function (file)
          (when (process-file file)
            (increase! processed)))
        files?: #t
        directories?: #f
        recursive?: recursive?)
      processed))

  
  (method protected (process-file file)
    ;; a quicky so that the scan doesn't block on errors
    (catch (Parse-Error err
             (debug (get-message~ err)))
      (when (scan-file? file)
        (if (exists?~ file)
            (let* ((name (get-base~ file))
                   (time (get-modification-time~ file))
                   (definition (get-unmodified-file-entry name file time)))
              (if definition
                  (begin
                    (set-marked?~ definition #t)
                    #f)
                (set-modified? #t)
                (let ((entry (scan-file file time)))
                  (set-marked?~ entry #t)
                  (update-entry entry)
                  (add-entry name entry))
                #t))
          ;; quick solution
          (format :console "{%}Unable to catalog inexistant file: {a}" (parse~ file))
          #f))))
  
  
  (method (get-unmodified-file-entry name file time)
    (let ((old (get-file-entry file)))
      (when (and old (= (time->seconds (get-time~ old)) (time->seconds time)))
        old)))

  
  (method protected virtual (scan-file? file)
    #f)

  
  (method protected virtual (scan-file file time)
    )
  
  
  (method protected virtual (update-entry entry)
    )
  
  
  (method protected virtual (add-entry name entry)
    )


  ;;;
  ;;;; Sweep
  ;;;
  
  
  ;; temp virtual until Indexed and Filing catalog unification
  (method protected virtual (sweep)
    )
  
  
  ;; temp virtual until Indexed and Filing catalog unification
  (method protected virtual (marked? definition)
    (get-marked?~ (get-file-entry~ definition)))
  
  
  ;; temp virtual until Indexed and Filing catalog unification
  (method protected virtual (sweep-table table marked? reset?)
    (iterate-table table
      (function (class-name definitions)
        (when (not-null? definitions)
          (let ((previous definitions)
                (list (cdr definitions)))
            (while (not-null? list)
              (let ((definition (car list)))
                (if (marked? definition)
                    (begin
                      (set! previous list)
                      (set! list (cdr list)))
                  (when reset?
                    (set-marked?~ definition #f))
                  (set-cdr! previous (cddr previous))
                  (set! list (cdr previous))))))
          (when (not (marked? (car definitions)))
            (table-set! table class-name (cdr definitions)))))))


  ;;;
  ;;;; Save
  ;;;
  
  
  (method public virtual (save)
    (when modified?
      (user-message "Saving {a} {a}..." name (present))
      (save-content)
      (set-modified? #f)
      (user-message "Done")))


  ;; temp virtual until Indexed and Filing catalog unification
  (method protected virtual (save-content)
    (let* ((all (gather-definitions))
           (sorted (sort < all key: car))
           (first? #t))
      (call-with-output-file (list path: (parse~ file) eol-encoding: (get-eol-encoding))
        (function (printer)
          (for-each (function (info)
                      (if (not first?)
                          (format printer "{%}")
                        (set! first? #f))
                      (bind (name . definitions) info
                        (format printer "{s}{%}" name)
                        (format printer " (")
                        (let ((first? #t))
                          (for-each (function (definition)
                                      (print-catalog~ definition first? printer)
                                      (set! first? #f))
                                    definitions))
                        (format printer "){%}")))
                    sorted)))))
  
  
  (method (gather-definitions)
    (let ((list '()))
      (iterate-content
        (function (property value)
          (set! list (cons (cons property value) list))))
      list))))
