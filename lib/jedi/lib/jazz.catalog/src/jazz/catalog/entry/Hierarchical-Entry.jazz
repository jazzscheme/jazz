;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Hierarchical Entry
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library protected jazz.catalog.entry.Hierarchical-Entry jazz


(import (jazz.catalog))


(class undocumented Hierarchical-Entry extends Indexed-Entry
  
  
  (slot modifiers)
  (slot qualified)  ;; qualified name with package
  
  
  @convert-literal
  (method meta (construct-literal context modifiers qualified name line column . definitions)
    (new self modifiers qualified name line column definitions '()))
  
  
  (method (initialize m q . rest)
    (apply nextmethod rest)
    (set! modifiers m)
    (set! qualified q))
  
  
  (method (print-catalog level printer)
    (format printer "{%}{_ :v}~{{s} {s} {s} {s} {s} {s}"
            (* level 2)
            (identifier-name (type-name (class-of self)))
            modifiers qualified name line column)
    (print-definitions level printer)
    (format printer "}"))


  ;;;
  ;;;; Access
  ;;;


  (method (get-modifiers)
    modifiers)


  (method public (get-qualified)
    qualified)
  
  
  (method public (set-qualified qualified-path)
    (set! qualified qualified-path))
  
  
  (method public (has-modifier? modifier)
    (memq? modifier modifiers))
  
  
  (method public (get-visibility)
    (let ((common (intersection '(public protected private) modifiers)))
      (if (null? common)
          'package
        (first common))))))
