;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Indexed Entry
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library protected jazz.catalog.entry.Indexed-Entry jazz


(import (jazz.catalog)
        (jazz.library)
        (jazz.platform)
        (jazz.system)
        (jazz.ui)
        (jazz.ui.window)
        (jazz.utilities))


(class undocumented Indexed-Entry extends Catalog-Entry
  
  
  (slot name)
  (slot line)
  (slot column)
  (slot definitions)
  (slot references)
  
  
  @convert-literal
  (method meta (construct-literal context name line column . definitions)
    (new self name line column definitions '()))
  
  
  (method (initialize n l c d r)
    (nextmethod)
    (set! name n)
    (set! line l)
    (set! column c)
    (set! definitions d)
    (set! references r)
    (for-each (function (definition)
                (set-parent~ definition self))
              definitions))


  (method (print printer readably)
    (print-unreadable self printer
      (function (printer)
        (format printer "{a}" name))))
  
  
  (method public virtual (print-catalog level printer)
    (format printer "{%}{_ :v}~{{s} {s} {s} {s}"
            (* level 2)
            (identifier-name (type-name (class-of self)))
            name line column)
    (print-definitions level printer)
    (format printer "}"))
  
  
  (method (print-definitions level printer)
    (for-each (function (definition)
                (print-catalog~ definition (+ level 1) printer))
              definitions))


  ;;;
  ;;;; Access
  ;;;


  (method (get-file)
    (get-file~ file-definition))


  (method (get-moniker)
    (get-moniker~ (either root-definition file-definition)))


  (method public (get-title)
    name)


  (method (get-category-name)
    (get-category-name~ (either root-definition file-definition)))


  (method (get-name)
    name)


  (method (get-line)
    line)


  (method (get-column)
    column)
  
  
  (method (get-definitions)
    definitions)
  
  
  (method public (add-definition definition)
    (set! definitions (append! definitions (list definition))))


  (method public (get-references)
    references)
  
  
  (method public (add-reference reference)
    (unless (member? reference references)
      (set! references (cons reference references))))


  (method public (get-catalog)
    (get-catalog~ file-definition))


  (method (set-root-definition def)
    (nextmethod def)
    (for-each (function (definition)
                (set-root-definition~ definition def))
              definitions))


  (method (set-file-definition def)
    (nextmethod def)
    (for-each (function (definition)
                (set-file-definition~ definition def))
              definitions))
  
  
  ;;;
  ;;;; Indexes
  ;;;
  
  
  (method (update-indexes definitions-index references-index)
    (update-index definitions-index name)
    (for-each (function (definition)
                (update-indexes~ definition definitions-index references-index))
              definitions))


  (method protected (update-index index key)
    (when key
      (table-add index key self)))


  ;;;
  ;;;; Present
  ;;;


  (method (present)
    (present-name)
    @old
    (case mode
      ((definitions) (get-category-name))
      ((references) (format "{a}.{a}" (get-category-name) (present-name)))))


  (method (present-name)
    (either (get-name) (present-noname)))
  
  
  (method protected virtual (present-noname)
    "<static>")


  ;;;
  ;;;; Edit
  ;;;
    
  
  (method (file-name file)
    (get-name~ file))
  
  
  (method protected virtual (entry-range)
    (essay line column (new Range$Cell$ (new Cell line column) (new Cell line (+ column (cardinality (->string name)))))))

  
  (method (edit (workspace: workspace {}) (activate-focus?: activate-focus? #t))
    (let ((moniker (get-moniker)))
      (if (not (exists?~ moniker))
          (error "Unable to locate moniker: {t}" moniker)
        (let ((appl (get-application))
              (char-encoding (get-char-encoding~ (get-catalog)))
              (selection (entry-range)))
          (edit-document~ appl moniker char-encoding: char-encoding selection: selection workspace: workspace activate-focus?: activate-focus?)))))
  

  (method (find-source name)
    (let ((type (source-frame-type)))
      (find-if (function (frame)
                 (and (is? frame Frame-Host)
                      (let ((guest (get-guest~ frame)))
                        (and (is? guest type)
                             (let ((file (get-moniker~ guest)))
                               (and file
                                    (string=? (file-name file) name)))))))
               (get-children~ (get-stage)))))
  

  (method protected virtual (source-frame-type)
    )))
