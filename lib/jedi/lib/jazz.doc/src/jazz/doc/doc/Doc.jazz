;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Jazz Documentation Entry
;;;
;;;  Filename: Doc.jazz
;;;  Copyright: Guillaume Cartier
;;;


(module protected jazz.doc.doc.Doc jazz


(import (jazz.designer)
        (jazz.doc)
        (jazz.jml)
        (jazz.library))


(class Doc extends Component
  
  
  (property title       initialize {} accessors generate)
  (property description initialize {} accessors generate)

  
  @convert-literal
  (method meta (construct-literal context . rest)
    (apply new self rest))
  
  
  (method override (install-child form creator creator-branch restore-form)
    (case (get-model-name~ form)
      ((description) (set-description form))
      (else (nextmethod form creator creator-branch restore-form))))


  ;;;
  ;;;; Access
  ;;;
  
  
  (method public virtual (get-catalog)
    (get-catalog~ parent))
  
  
  (method public virtual (set-catalog cat)
    )


  ;;;
  ;;;; Title
  ;;;
  
  
  (method public (get-effective-title)
    (either title (->string name)))


  ;;;
  ;;;; Catalog
  ;;;
  
  
  (method public virtual (update-indexes definitions-index references-index)
    (when (not-null? name)
      (table-add definitions-index name self)))
  
  
  (method public virtual (print-catalog level printer)
    (format printer "{%}{_ :v}~{{s} {s} {s}}"
            (* level 2)
            (identifier-name (category-name (class-of self)))
            name description))


  ;;;
  ;;;; Documentation
  ;;;
  
  
  (method public (get-documentation symbol)
    (let ((catalog (get-catalog)))
      (find-if (lambda (doc)
                 (eq? (get-parent~ doc) self))
               (get-definitions~ catalog symbol))))


  ;;;
  ;;;; Presentation
  ;;;
  
  
  (method public virtual (present)
    description)
  
  
  (method public virtual (present-text)
    (when description
      (bind (tag . paragraphs) (->jml~ (form->node description))
        `(<span>
           ,@(if (null? paragraphs)
                 '("")
               paragraphs)))))
  
  
  (method protected (present-parameters parameters)
    (cond ((null? parameters)
           "")
          ((string? parameters)
           parameters)
          (else
           (let ((positional (getf parameters positional: not-found: '()))
                 (optional (getf parameters optional: not-found: '()))
                 (named (getf parameters named: not-found: '()))
                 (rest (getf parameters rest: not-found: {})))
             (let ((all
                     (append (map (lambda (parameter)
                                    (->string parameter))
                                  positional)
                             (map (lambda (parameter)
                                    (format "[{a}]" parameter))
                                  optional)
                             (map (lambda (parameter)
                                    (format "~{{a}~}" parameter))
                                  named)
                             (if rest
                                 (list (format ". {a}" rest))
                               '()))))
               (if (null? all)
                   ""
                 (concatenate " " (join all " "))))))))


  ;;;
  ;;;; HTML
  ;;;
  
  
  (constant Red-Ball
    "images/red-ball.gif")
  
  
  ;;;
  ;;;; Descriptor
  ;;;
  
  
  (method meta override (get-class-descriptor)
    (new Doc-Descriptor)))


;;;
;;;; Design
;;;


(submodule design


(import (jazz.designer))


(class Doc-Descriptor extends Component-Descriptor
  
  
  (method override (class-property-presentation class property)
    (case (field-name property)
      ((description) "Description")
      (else (nextmethod class property))))

  
  (method override (component-get-row-instance component property)
    (case (field-name property)
      ((title) (new String-Row))
      ((description) (new Doc-Text-Row))
      (else (nextmethod component property))))
  
  
  (method override (component-display-property? component property)
    (not (memq? (field-name property) '(name-info before children visible?))))
  
  
  (method override (component-get-categorized-properties component)
    '(title description))
  
  
  (method override (component-get-addable-classes component)
    (list
      Section-Doc
      {}
      Concept-Doc
      {}
      Package-Doc
      Class-Doc
      Interface-Doc
      {}
      Constant-Doc
      Syntax-Doc
      Method-Doc)))))
