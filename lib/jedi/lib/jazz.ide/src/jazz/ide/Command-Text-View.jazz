;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Command Text-View
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library protected jazz.ide.Command-Text-View jazz


(import (jazz.graphic)
        (jazz.ide)
        (jazz.jml)
        (jazz.platform)
        (jazz.ui)
        (jazz.utilities))


(class Command-Text-View extends IDE-Text-View
  
  
  (slot mode            initialize {}                       getter generate)
  (slot client          initialize {}                       getter generate)
  (slot search-context  initialize (make-search-context ""))
  (slot search-ranges   initialize '())
  (slot found-style     initialize {})
  (slot highlight-style initialize {})
  
  
  (form
    (<install>
      focus-selects-all?: #t
      show-unfocused-selection?: #f
      accepts-returns?: #f
      left-padding: 2
      top-padding: 2
      tooltip?: #t
      tooltip-text: "Command Shell"
      default-style: {Text-Style name: Default font: {Font name: Label}}))
  
  
  (method (prepare-search)
    (set-target~ search-context "")
    (set! search-ranges (if client (list (get-selection~ client)) '()))
    (set! found-style (if client (new Text-Style name: 'Found base: 'Default domain: (get-styles-domain~ client) highlight: {Color red: 255 green: 162 blue: 47}) {}))
    (set! highlight-style (if client (new Text-Style name: 'Highlight base: 'Default domain: (get-styles-domain~ client) highlight: {Color red: 255 green: 255 blue: 120}) {})))
  
  
  ;;;
  ;;;; Text
  ;;;
  
  
  (method (auto-complete?)
    (eq? mode 'execute))
  
  
  ;;;
  ;;;; Focus
  ;;;
  
  
  (method (focus-gain old)
    (nextmethod old)
    (unless (eq? client old)
      (set! client old)
      (prepare-search)))
  
  
  (method (focus-lose view)
    (nextmethod view)
    (search-finish))
  
  
  (method (focus-actions)
    (cons (case mode
            ((search-forward search-backward) (find-actions 'command-search))
            (else (find-actions 'command-execute)))
          (nextmethod)))
  
  
  ;;;
  ;;;; Keyboard
  ;;;
  
  
  (method (key-press key)
    (nextmethod key)
    (case mode
      ((search-forward search-backward)
       (search mode #f whole-words?: #f))))
  
  
  (method (backspace-press key (word?: word? #f))
    (nextmethod key word?: word?)
    (case mode
      ((search-forward search-backward)
       (search mode #f whole-words?: #f))))
  
  
  ;;;
  ;;;; Mode
  ;;;
  
  
  (method public (select-mode mode value)
    (case mode
      ((search-forward search-backward)
       (select-mode-search mode)
       (acquire-focus)
       (when value
         (set-text value)
         (select-all)
         (search mode #t whole-words?: #t)))
      (else
       (select-mode-execute)
       (acquire-focus))))
  
  
  ;;;
  ;;;; Execute
  ;;;
  
  
  (method (select-mode-execute)
    (set! mode 'execute))
  
  
  (method (on-done evt)
    (when client
      (acquire-focus~ client)))
  
  
  ;;;
  ;;;; Search
  ;;;
  
  
  (method (next-page evt)
    (search 'search-forward #t))
  
  
  (method (prior-page evt)
    (search 'search-backward #t))
    
  
  (method (select-mode-search mode)
    (set! mode~self mode)
    (prepare-search))
  
  
  (method (select-whole-words? whole-words?)
    (set-whole-words?~ search-context whole-words?)
    (user-message "Search whole-words {a}" (if whole-words? "on" "off")))
  
  
  (method (select-ignore-case? ignore-case?)
    (set-ignore-case?~ search-context ignore-case?)
    (user-message "Search ignore-case {a}" (if ignore-case? "on" "off")))
  
  
  (method (on-whole-words evt)
    (select-whole-words? (not (get-whole-words?~ search-context))))
  
  
  (method (on-ignore-case evt)
    (select-ignore-case? (not (get-ignore-case?~ search-context))))
  
  
  (method (on-search-forward evt)
    (search 'search-forward #t))
  
  
  (method (on-search-backward evt)
    (search 'search-backward #t))
  
  
  (method (on-search-finish evt)
    (search-finish))

  
  (method (search direction again? (whole-words?: whole-words? 'keep))
    (when (is? client Text-View)
      (unless (eq? whole-words? 'keep)
        (select-whole-words? whole-words?))
      (let ((content (get-string-content))
            (target (get-target~ search-context)))
        (let ((prefix (prefix (list content target))))
          (reset-prefix (cardinality prefix))
          (let ((suffix (subseq content (cardinality prefix) (cardinality content))))
            (when (or again? (not (empty-string? suffix)))
              (let ((whole-words? (get-whole-words?~ search-context)))
                (for-each (function (key)
                            (search-key key direction #f))
                          suffix)
                (when again?
                  (search-key {} direction whole-words?))))
            (highlight-target (last search-ranges)))))))
  
  
  (method (search-pos range direction)
    (case direction
      ((search-forward) (get-start~ range))
      ((search-backward) (get-end~ range))))
  
  
  (method (reset-prefix len)
    (set-target~ search-context (subseq (get-target~ search-context) 0 len))
    (set-regexp~ search-context #f)
    (set! search-ranges (subseq search-ranges 0 (+ len 1))))
  
  
  (method (search-key key direction whole-words?)
    (let ((target (if (not key)
                      (get-target~ search-context)
                    (concatenate (get-target~ search-context) (format "{c}" key))))
          (last-range (last search-ranges)))
      (let ((pos (case direction
                   ((search-forward) (if (not key) (get-end~ last-range) (get-start~ last-range)))
                   ((search-backward) (if (not key) (get-start~ last-range) (nu+ (get-start~ last-range) (cardinality target))))))
            (reversed? (eq? direction 'search-backward)))
        (set-target~ search-context target)
        (set-regexp~ search-context #f)
        (set-whole-words?~ search-context whole-words?)
        (let ((found (text-multisearch~ client (list search-context) start: pos reversed?: reversed?)))
          (define (update-range range)
            (if (not key)
                (let ((pair (last-pair search-ranges)))
                  (set-car! pair range))
              (set! search-ranges (append search-ranges (list range)))))
          
          (if (not found)
              (begin
                (update-range last-range)
                (bell))
            (bind (from . to) found
              (let ((range (new Range$Cell$ from to)))
                (update-range range))))))))
  
  
  (method (highlight-target found-range)
    (remove-highlights)
    (let ((target (get-target~ search-context)))
      (unless (empty-string? target)
        (for-each (function (found)
                    (bind (start . end) found
                      (let ((range (new Range$Cell$ start end)))
                        (unless (nu=? range found-range)
                          (add-highlight~ client (new Text-Highlight range highlight-style))))))
                  (text-multisearch-all~ client (list search-context)))))
    (add-highlight~ client (new Text-Highlight found-range found-style))
    (ensure-range-displayed~ client found-range))
  
  
  (method (remove-highlights)
    (remove-all-highlights~ client))
  
  
  (method (search-finish)
    (when client
      (remove-highlights)
      (acquire-focus~ client)))))
