;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Command Text-View
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jazz.ide.Command-Text-View jazz


(import (jazz.graphic)
        (jazz.ide)
        (jazz.io)
        (jazz.jml)
        (jazz.library)
        (jazz.platform)
        (jazz.system)
        (jazz.ui)
        (jazz.ui.view)
        (jazz.ui.window)
        (jedi.builder.workbench))


(class Command-Text-View extends IDE-Text-View
  
  
  (slot mode             initialize {} accessors generate)
  (slot client           initialize {} getter generate)
  (slot client-selection initialize {} getter generate)
  
  
  (form
    (<install>
      focus-selects-all?: #t
      show-unfocused-selection?: #f
      accepts-returns?: #f
      left-padding: 2
      top-padding: 2
      tooltip?: #t
      tooltip-text: "Command Shell"))
  
  
  (method override (component-alias name)
    (case name
      ((:mode) mode)
      (else (nextmethod name))))
  
  
  ;;;
  ;;;; Focus
  ;;;
  
  
  (method override (focus-gain)
    (define (determine-client)
      (let ((guest (current-document)))
        (when (is? guest Text-View)
          guest)))
    
    (nextmethod)
    (set! client (determine-client))
    (set! client-selection (essay (and client (is? client Text-View)) (get-selection~ client))))
  
  
  (method override (focus-lose)
    (nextmethod)
    (cleanup~ mode #t)
    (set! mode {}))
  
  
  (method override (focus-actions)
    (when (not mode)
      (set-mode-execute))
    (cons (focus-actions~ mode)
          (nextmethod)))
  
  
  ;;;
  ;;;; Keyboard
  ;;;
  
  
  (method override (key-press key)
    (nextmethod key)
    (key-press~ mode key))
  
  
  (method override (backspace-press key (word?: word? #f))
    (nextmethod key word?: word?)
    (backspace-press~ mode key word?: word?))
  
  
  (method override (next-page evt)
    (next-page~ mode))
  
  
  (method override (prior-page evt)
    (prior-page~ mode))
  
  
  (method override (get-constituent-test)
    (either (get-constituent-test~ mode)
            (nextmethod)))
  
  
  (method override (auto-complete?)
    (auto-complete?~ mode))
  
  
  (method override (auto-complete-char? key last)
    (let ((value (auto-complete-char?~ mode key last)))
      (if (eq? value 'default)
          (nextmethod key last)
        value)))


  (method override (favorite-completions?)
    (let ((value (favorite-completions?~ mode)))
      (if (eq? value 'default)
          (nextmethod)
        value)))
  
  
  (method override (complete-name? size)
    (let ((value (complete-name?~ mode size)))
      (if (eq? value 'default)
          (nextmethod size)
        value)))


  (method override (completion-name pos postfix)
    (either (completion-name~ mode pos postfix)
            (nextmethod pos postfix)))
    
  
  (method override (symbol-completions name)
    (either (symbol-completions~ mode name)
            (nextmethod name)))

  
  ;;;
  ;;;; Mode
  ;;;
  
  
  (method public (select-search direction range initial again? whole-words?)
    (set-mode-search direction)
    (acquire-focus)
    (prepare-search~ mode range)
    (when initial
      (set-text initial)
      (select-all)
      (search~ mode direction again? whole-words?: whole-words?)))
    
  
  (method (set-mode-search direction)
    (set! mode (new Search-Mode self direction))
    (user-message "Search..."))
  
  
  (method public (select-extended)
    (set-mode-extended)
    (acquire-focus))
  
  
  (method (set-mode-extended)
    (set! mode (new Extended-Mode self))
    (user-message "Extended..."))
  
  
  (method public (select-execute)
    (set-mode-execute)
    (acquire-focus))
  
  
  (method (set-mode-execute)
    (set! mode (new Execute-Mode self))
    (user-message "Execute...")))


;;;
;;;; Command-Mode
;;;


(class Command-Mode extends Object
  
  
  (slot text)
  
  
  (method override (initialize text)
    (nextmethod)
    (set! text~self text))
  
  
  (method (get-client)
    (get-client~ text))
  
  
  (method (get-client-selection)
    (get-client-selection~ text))
    
  
  (method virtual (key-press key)
    )
  
  
  (method virtual (backspace-press key (word?: word? #f))
    )
  
  
  (method virtual (next-page)
    )
  
  
  (method virtual (prior-page)
    )
  
  
  (method virtual (get-constituent-test)
    #f)

  
  (method virtual (auto-complete?)
    #f)
  
  
  (method virtual (auto-complete-char? key last)
    'default)
  
  
  (method virtual (favorite-completions?)
    'default)
  
  
  (method virtual (complete-name? size)
    'default)


  (method virtual (completion-name pos postfix)
    {})
  
  
  (method virtual (symbol-completions name)
    {})
  
  
  (method virtual (finish)
    (cleanup))
  
  
  (method virtual (cancel)
    (cleanup))
  
  
  (method virtual (cleanup (lose-focus? #f))
    (let ((client (get-client)))
      (when client
        (unless lose-focus?
          (acquire-focus~ client))))
    (clear-user-message)))


;;;
;;;; Search-Mode
;;;


(class Search-Mode extends Command-Mode
  
  
  (slot direction       initialize {})
  (slot context         initialize (make-search-context "" ignore-case?: #t))
  (slot ranges          initialize '())
  (slot found-style     initialize {})
  (slot highlight-style initialize {})
  
  
  (method override (initialize text direction)
    (nextmethod text)
    (set! direction~self direction))
  
  
  (method (prepare-search range)
    (set-target~ context "")
    (let ((client (get-client))
          (client-selection (get-client-selection)))
      (let ((text? (and client (is? client Text-View))))
        (set! ranges (if text? (list (or range client-selection)) '()))
        (set! found-style (if text? (new Text-Style name: 'Found base: 'Default domain: (get-styles-domain~ client) highlight: {Color red: 255 green: 162 blue: 47}) {}))
        (set! highlight-style (if text? (new Text-Style name: 'Highlight base: 'Default domain: (get-styles-domain~ client) highlight: {Color red: 255 green: 255 blue: 120}) {})))))
  
  
  (method override (focus-actions)
    (find-actions 'command-search))
  
  
  (method override (key-press key)
    (search direction #f whole-words?: #f))
  
  
  (method override (backspace-press key (word?: word? #f))
    (search direction #f whole-words?: #f))
  
  
  (method override (next-page)
    (search 'forward #t))
  
  
  (method override (prior-page)
    (search 'backward #t))
  
  
  (method (select-whole-words? whole-words?)
    (set-whole-words?~ context whole-words?))
  
  
  (method (select-ignore-case? ignore-case?)
    (set-ignore-case?~ context ignore-case?))
  
  
  (method (on-whole-words evt)
    (select-whole-words? (not (get-whole-words?~ context)))
    (user-message "Search whole-words {a}" (if (get-whole-words?~ context) "on" "off"))
    (rehighlight-target))
  
  
  (method (on-ignore-case evt)
    (select-ignore-case? (not (get-ignore-case?~ context)))
    (user-message "Search ignore-case {a}" (if (get-ignore-case?~ context) "on" "off"))
    (rehighlight-target))
  
  
  (method (on-forward evt)
    (search 'forward #t))
  
  
  (method (on-backward evt)
    (search 'backward #t))
  
  
  (method (on-current evt)
    (cancel))
  
  
  (method (on-widen evt)
    (let ((client (get-client)))
      (let ((selection (get-selection~ client)))
        (let ((end (get-end~ selection)))
          (let ((extend (next-word~ client end)))
            (let ((add (range-first-string~ client (new Range$Cell$ end extend))))
              (if (empty-string? add)
                  (bell)
                (insert-string~ text add)
                (search direction #f whole-words?: #f))))))))
  
  
  (method (on-select-outer evt)
    (select-outer~ (get-client)))
  
  
  (method (on-center-caret evt)
    (center-caret~ (get-client)))
  
  
  (method (on-finish evt)
    (finish))
  
  
  (method (on-cancel evt)
    (cancel))

  
  (method (search direction again? (whole-words?: whole-words? 'keep))
    (define (reset-prefix len)
      (set-target~ context (subseq (get-target~ context) 0 len))
      (set-regexp~ context #f)
      (set! ranges (subseq ranges 0 (+ len 1))))
    
    (define (search-key client key whole-words?)
      (let ((target (if (not key)
                        (get-target~ context)
                      (concatenate (get-target~ context) (format "{c}" key))))
            (last-range (last ranges)))
        (let ((pos (case direction
                     ((forward) (if (not key) (get-end~ last-range) (get-start~ last-range)))
                     ((backward) (if (not key) (get-start~ last-range) (nu+ (get-start~ last-range) (cardinality target))))))
              (reversed? (eq? direction 'backward)))
          (set-target~ context target)
          (set-regexp~ context #f)
          (set-whole-words?~ context whole-words?)
          (let ((found (text-multisearch~ client (list context) start: pos reversed?: reversed?)))
            (define (update-range range)
              (if (not key)
                  (let ((pair (last-pair ranges)))
                    (set-car! pair range))
                (set! ranges (append ranges (list range)))))
            
            (if (not found)
                (begin
                  (update-range last-range)
                  (bell))
              (bind (from . to) found
                (let ((range (new Range$Cell$ from to)))
                  (update-range range))))))))
    
    (define (highlight-target client found-range)
      (remove-highlights)
      (let ((target (get-target~ context)))
        (unless (empty-string? target)
          (for-each (lambda (found)
                      (bind (start . end) found
                        (let ((range (new Range$Cell$ start end)))
                          (unless (nu=? range found-range)
                            (add-highlight~ client (new Text-Highlight range highlight-style))))))
                    (text-multisearch-all~ client (list context)))))
      (add-highlight~ client (new Text-Highlight found-range found-style))
      (set-selection~ client found-range))
    
    (let ((client (get-client)))
      (when (is? client Text-View)
        (unless (eq? whole-words? 'keep)
          (select-whole-words? whole-words?))
        (let ((content (first-line~ text))
              (target (get-target~ context)))
          (let ((prefix (prefix (list content target))))
            (reset-prefix (cardinality prefix))
            (let ((suffix (subseq content (cardinality prefix) (cardinality content))))
              (when (or again? (not (empty-string? suffix)))
                (let ((whole-words? (get-whole-words?~ context)))
                  (iterate suffix
                           (lambda (key)
                             (search-key client key #f)))
                  (when again?
                    (search-key client {} whole-words?))))
              (highlight-target client (last ranges))))))))
  
  
  (method (rehighlight-target)
    (search direction #f))
  
  
  (method (remove-highlights)
    (let ((client (get-client)))
      (when (is? client Text-View)
        (remove-all-highlights~ client))))
  
  
  (method override (finish)
    (cleanup))
  
  
  (method override (cancel)
    (cleanup)
    (let ((client (get-client))
          (client-selection (get-client-selection)))
      (when client-selection
        (set-selection~ client client-selection))))
  
  
  (method override (cleanup (lose-focus? #f))
    (let ((client (get-client)))
      (when client
        (remove-highlights)
        (unless lose-focus?
          (acquire-focus~ client))))
    (clear-user-message)))


;;;
;;;; Extended-Mode
;;;


(class Extended-Mode extends Command-Mode
  
  
  (method override (focus-actions)
    (find-actions 'command-extended))
  
  
  (definition (register-find-actions)
    (set-focus-actions~ (get-application) (list (find-actions 'command-find))))
  
  
  (method (on-find-file evt)
    (set-mode~ text (new Find-File-Mode text))
    (set-text~ text (standardize-filename (current-directory)))
    (set-caret~ text (text-ending~ text))
    (register-find-actions)
    (user-message "Find file..."))
  
  
  (method (on-find-filename evt)
    (set-mode~ text (new Find-Filename-Mode text))
    (set-text~ text "")
    (register-find-actions)
    (user-message "Find filename..."))
  
  
  (method (on-find-buffer evt)
    (set-mode~ text (new Find-Buffer-Mode text))
    (register-find-actions)
    (user-message "Find buffer..."))
  
  
  (method (on-finish evt)
    (finish))
  
  
  (method (on-cancel evt)
    (cancel)))


;;;
;;;; Find
;;;


(class Find-Mode extends Command-Mode
  
  
  (method override (get-constituent-test)
    alphanumeric?)
  
  
  (method override (auto-complete?)
    #t)
  
  
  (method override (auto-complete-char? key last)
    (memv? key '(#\/ #\- #\_ #\.)))

  
  (method override (favorite-completions?)
    #f)
  
  
  (method override (complete-name? size)
    (>= size 1))


  (method override (completion-name pos postfix)
    (string-append (get-string~ text (new Range$Cell$ {Cell 0 0} pos)) (either postfix "")))
  
  
  (method (on-finish evt)
    (finish))
  
  
  (method (on-cancel evt)
    (cancel))
  
  
  (method override (cancel)
    (cleanup))
  
  
  (method override (cleanup (lose-focus? #f))
    (set-string-content~ text "")
    (let ((client (get-client)))
      (when client
        (unless lose-focus?
          (acquire-focus~ client))))
    (clear-user-message)))


;;;
;;;; Find-File
;;;


(class Find-File-Mode extends Find-Mode
  
  
  (method override (symbol-completions name)
    (define (split-filename filename)
      (let ((pos (find filename #\/ reversed?: #t)))
        (if (not pos)
            (values {} filename)
          (values (substring filename 0 (+ pos 1))
                  (substring filename (+ pos 1) (string-length filename))))))
    
    (receive (dir filename) (split-filename name)
      (when (or (not dir)
                (and (file-exists? dir)
                     (eq? (pathname-type dir) 'directory)))
        (collect (lambda (name)
                   (when (compare-n filename name (string-length filename) test: char-ci=?)
                     (let ((path (standardize-filename (string-append (either dir "") name))))
                       (if (and (file-exists? path)
                                (eq? (pathname-type path) 'directory))
                           (string-append path "/")
                         path))))
                 (directory-content (list path: (either dir (current-directory)) ignore-hidden: 'dot-and-dot-dot))))))
  
  
  (method override (finish)
    (let ((filename (first-line~ text)))
      (if (and (file-exists? filename)
               (eq? (pathname-type filename) 'regular))
          (let ((file (anchorize~ (new File (tokenise-filename (pathname-normalize filename))))))
            (set-current-directory (get-parent~ file))
            (edit-document~ (get-application) file)
            (cleanup))
        (bell)))))


;;;
;;;; Find-Filename
;;;


(class Find-Filename-Mode extends Find-Mode
  
  
  (slot filenames)
  
  
  (method override (initialize text)
    (define (collect-filenames)
      (let ((workbench (get-workbench))
            (table (make-table test: equal?)))
        (for-each-project-file~ workbench
          (lambda (file)
            (let ((source (get-source~ file)))
              (when source
                (let ((name (downcase (get-name~ source))))
                  (table-set! table name source))))))
        table))
    
    (nextmethod text)
    (set! filenames (collect-filenames)))
  
  
  (method override (symbol-completions name)
    (let ((queue (new-queue)))
      (iterate-table filenames
                     (lambda (filename file)
                       (when (compare-n name filename (string-length name) test: char-ci=?)
                         (enqueue queue filename))))
      (queue-list queue)))
  
  
  (method override (finish)
    (define (find-file name)
      (continuation-capture
        (lambda (return)
          (let ((len (string-length name)))
            (iterate-table filenames
                           (lambda (filename file)
                             (when (compare-n name filename len test: char-ci=?)
                               (let ((remaining (substring filename len (string-length filename))))
                                 (when (or (empty-string? remaining)
                                           (and (eqv? (string-ref remaining 0) #\.)
                                                (not (find remaining #\. start: 1))))
                                   (continuation-return return file)))))))
          {})))
    
    (let ((filename (first-line~ text)))
      (let ((file (find-file filename)))
        (if file
            (edit-document~ (get-application) file)
          (bell))))))


;;;
;;;; Find-Buffer
;;;


(class Find-Buffer-Mode extends Find-Mode
  
  
  (method override (symbol-completions name)
    (collect (lambda (view)
               (let ((presentation (present-title view)))
                 (when (compare-n name presentation (string-length name) test: char-ci=?)
                   presentation)))
             (all-views)))
  
  
  (method override (finish)
    (define (find-view name)
      (find-if (lambda (view)
                 (string-ci=? (present-title view) name))
               (all-views)))
    
    (let ((name (first-line~ text)))
      (if (empty-string? name)
          (let ((views (get-views~ (get-stage))))
            (if (>= (length views) 2)
                (begin
                  (send-to-back~ (first views))
                  (focus-host~ (current-frame)))
              (bell)))
        (let ((view (find-view name)))
          (if view
              (begin
                (bring-to-front~ view)
                (focus-host~ view)
                (cleanup))
            (bell))))))
  
  
  (definition (present-title window/view)
    (let ((title (typecase window/view
                   ((Window)
                    (get-title~ window/view))
                   ((View)
                    (if (is? window/view Host-View)
                        (let ((guest (get-guest~ window/view)))
                          (if (is? guest Document)
                              (name-status~ (get-controller~ guest))
                            (get-title~ window/view)))
                      (get-title~ window/view))))))
      (if (or (null? title) (empty-string? title))
          "<Untitled>"
        title)))
  
  
  (definition (all-views)
    (append (collect-frames)
            (collect-palettes))))


;;;
;;;; Execute-Mode
;;;


(class Execute-Mode extends Command-Mode
  
  
  (method override (focus-actions)
    (find-actions 'command-execute))
  
  
  (method override (auto-complete?)
    #t)
  
  
  (method (on-finish evt)
    (finish))
  
  
  (method (on-cancel evt)
    (cancel)))


;;;
;;;; Execute-Mode
;;;


(definition (standardize-filename filename)
  (let ((home (pathname-normalize "~")))
    (if (starts-with? filename home)
        (string-append "~/" (substring filename (cardinality home) (cardinality filename)))
      filename))))
