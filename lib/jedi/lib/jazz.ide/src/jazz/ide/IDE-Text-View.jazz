;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; IDE Text View
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library protected jazz.ide.IDE-Text-View jazz


(import (jazz.editor.c)
        (jazz.editor.jazz)
        (jazz.editor.sql)
        (jazz.graphic)
        (jazz.ide)
        (jazz.jml)
        (jazz.ui)
        (jazz.system))


(class IDE-Text-View extends Code-Text-View


  (property context initialize {} getter get-context setter set-context)
    
  
  (form
    (<install> default-style: {Text-Style name: Default font: {Font name: Label-User}}))

  
  ;; quicky as anyways this class is going away
  (method override (new-syntax)
    (new Jazz-Syntax))

  
  ;;;
  ;;;; Access
  ;;;


  (method override (get-context)
    (if (not context)
        (list (get-catalog-context~ syntax))
      (list context)))


  (method public (set-context value)
    (set! context value))

  
  ;;;
  ;;;; Context
  ;;;
  
  
  (method (catalog-context)
    (either context (get-catalog-context~ syntax)))

  
  ;;;
  ;;;; Preferences
  ;;;
  
  
  (method (jazz-preferences)
    (get-preferences '(documents jazz-text)))
  
  
  (method (c-preferences)
    (get-preferences '(documents java-text)))
  
  
  (method (sql-preferences)
    (get-preferences '(documents sql-text)))
   
  
  ;;;
  ;;;; History
  ;;;
  
  
  (method override (current-history-item)
    {})


  ;;;
  ;;;; Explorer
  ;;;


  (method override (explorer-class)
    (case (catalog-context)
      ((jazz) Jazz-Explorer)
      ((c) C-Explorer)
      ((sql) SQL-Explorer)
      (else (nextmethod))))
   

  ;;;
  ;;;; Expr
  ;;;


  (method override (expr-at pos)
    (case (catalog-context)
      ((jazz) (jazz-name-at (jazz-expr-range pos)))
      ((c) (c-name-at (c-expr-range pos)))
      ((sql) (sql-name-at (sql-expr-range pos)))))
  
  
  (method override (expr-range pos)
    (case (catalog-context)
      ((jazz) (jazz-expr-range pos))
      ((c) (c-expr-range pos))
      ((sql) (sql-expr-range pos))))


  (method override (current-expr)
    (case (catalog-context)
      ((jazz) (current-jazz-expr))
      ((c) (current-c-expr))
      ((sql) (current-sql-expr))))
  
  
  (method override (range-expr range)
    (case (catalog-context)
      ((jazz) (jazz-range-expr range))
      ((c) (c-range-expr range))
      ((sql) (sql-range-expr range))))
   

  ;;;
  ;;;; Jazz
  ;;;


  (method (current-jazz-expr)
    (let ((range (current-jazz-expr-range)))
      (when range
        (jazz-range-expr range))))
  
  
  (method protected (current-jazz-symbol)
    (let ((expr (current-jazz-expr)))
      (when (symbol? expr)
        expr)))
  
  
  (method (current-jazz-expr-range)
    (if (and (not completion-active?) (has-selection?))
        (get-selection)
      (jazz-expr-range (get-end))))
  
  
  (method (jazz-range-expr range)
    (with-jazz-readtable
      (lambda ()
        (read-string-element (get-string range)))))
  
  
  (method (jazz-expr-range pos)
    (let ((expl (new Jazz-Explorer self start: pos end: pos)))
      (when (outer-expr~ expl)
        (get-range~ expl))))
  
  
  (method (jazz-name-at range)
    (when range
      (with-jazz-readtable
        (lambda ()
          (read-string-element (get-string range))))))
   

  ;;;
  ;;;; C
  ;;;


  (method (current-c-expr)
    (current-c-name))


  (method (current-c-name)
    (c-name-at (c-current-expr-range)))
  
  
  (method (c-current-expr-range)
    (if (and (not completion-active?) (has-selection?))
        (get-selection)
      (c-expr-range (get-end))))
  
  
  (method (c-range-expr range)
    (get-string range))
  
  
  (method (c-expr-range pos)
    (let ((expl (new C-Explorer self start: pos end: pos)))
      (outer-expr~ expl)
      (get-range~ expl)))
  
  
  (method (c-name-at range)
    (when range
      (let ((name (get-string range)))
        (if (= (element name 0) #\open-brace)
            (read-string-element name)
          name))))
   

  ;;;
  ;;;; SQL
  ;;;


  (method (current-sql-expr)
    (current-sql-name))


  (method (current-sql-name)
    (sql-name-at (sql-current-expr-range)))
  
  
  (method (sql-current-expr-range)
    (if (and (not completion-active?) (has-selection?))
        (get-selection)
      (sql-expr-range (get-end))))
  
  
  (method (sql-range-expr range)
    (get-string range))
  
  
  (method (sql-expr-range pos)
    (let ((expl (new SQL-Explorer self start: pos end: pos)))
      (outer-expr~ expl)
      (get-range~ expl)))
  
  
  (method (sql-name-at range)
    (when range
      (let ((name (get-string range)))
        (if (= (element name 0) #\open-brace)
            (read-string-element name)
          name))))

  
  ;;;
  ;;;; Completion
  ;;;


  (method override (favorite-completions)
    (case (catalog-context)
      ((jazz) (get-completions~ (jazz-preferences)))
      ((c) (get-completions~ (c-preferences)))
      ((sql) (get-completions~ (sql-preferences)))
      (else (nextmethod))))

  
  ;;;
  ;;;; Coloring
  ;;;
  
  
  (method override (colorize-syntax . rest)
    )
  
  
  (method override (recolorize-text start end-row)
    )


  ;;;
  ;;;; Match
  ;;;
  
  
  (method override (flash-character? char)
    (case (catalog-context)
      ((jazz) (memq? char '(#\close-parenthesis #\close-bracket #\close-brace)))
      (else (nextmethod char))))

  
  ;;;
  ;;;; Menu
  ;;;


  (method override (context-menu pos)
    (when (and enabled? editable?)
      (receive (shift? control? alt?) (modifiers-down)
        (let ((definition? (and (not control?) shift? (not alt?)))
              (references? (and control? shift? (not alt?))))
          (when (or definition? references?)
            (context-menu-click pos))
          (cond (definition? (edit-definitions pos))
                (references? (edit-references pos))
                (else (nextmethod pos)))))))
  
  
  (method override (get-context-menu)
    (new-text-context-menu))))
