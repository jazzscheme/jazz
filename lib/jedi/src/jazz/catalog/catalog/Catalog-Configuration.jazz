;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Catalog Configuration
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.catalog.catalog.Catalog-Configuration jazz


(import (jazz.catalog)
        (jazz.designer)
        (jazz.jml)
        (jazz.library)
        (jazz.ui)
        (jazz.utilities))


(class Catalog-Configuration extends Preferences


  (property type             initialize {} accessors generate)
  (property output-file      initialize {} accessors generate)
  (property directories      initialize {} accessors generate)
  (property extensions       initialize {} accessors generate)
  (property recursive?       initialize #t accessors generate)
  (property active?          initialize #f accessors generate)
  (property references?      initialize #f accessors generate)
  
  
  (form
    (<install> icon: {Bitmap-Resource "Link"}))
  
  
  ;;;
  ;;;; Domain
  ;;;
  
  
  (method meta (get-domain property)
    (case (field-name property)
      ((recursive? active? references?) (new Boolean-Domain))
      (else (nextmethod property))))


  ;;;
  ;;;; Designer
  ;;;
  
  
  (method meta (get-class-presentation)
    "Catalog")

  
  (method meta (property-presentation property)
    (case (field-name property)
      ((type) "Type")
      ((output-file) "Output File")
      ((directories) "Directories")
      ((extensions) "Extensions")
      ((recursive?) "Recursive?")
      ((active?) "Active?")
      ((references?) "References?")
      (else (nextmethod property))))
  
  
  (method (presentation-property? property)
    #f)
  
  
  (method (get-presentation)
    (name->presentation~ (class-of self) name))
  
  
  (method (set-presentation designer presentation)
    (set-name~ designer self (presentation->name~ (class-of self) presentation)))

  
  (method (get-row-instance property)
    (case (field-name property)
      ((type) (new Combo-Row choices: (collect-catalog-types)))
      ((output-file) (new File-Row mode: 'save))
      ((directories) (new Directory-Group-Row))
      ((recursive? active? references?) (new Boolean-Row))
      (else (nextmethod property))))
  
  
  (method (collect-catalog-types)
    (let ((pref (get-preferences {})))
      (map (function (info)
             (let ((type (car info)))
               (list type (->string type))))
           (get-catalog-types~ pref))))
  
  
  (method (get-categorized-properties)
    '(type output-file directories extensions
      recursive? active? references?))))
