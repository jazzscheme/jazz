;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Jedi Status
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jedi.application.Jedi-Status jazz


(import (jazz.debugger)
        (jazz.ide)
        (jazz.jml)
        (jazz.library)
        (jazz.system.access)
        (jazz.ui)
        (jazz.ui.workspace)
        (jedi))


(class Jedi-Status extends IDE-Status


  (form
    (<install>
      (<Status-Label> name: message    size: {Dimension 782 20} location: center)
      (<Status-Label> name: process    size: {Dimension 150 20} location: tail mouse-down-handler: {Event-Handler :form on-mouse-down} context-menu-handler: {Event-Handler :form on-context-menu})
      (<Status-Label> name: workspace  title: "Default" size: {Dimension 150 20} location: tail icon: {Bitmap-Resource "Workspace"} mouse-down-handler: {Event-Handler :form on-mouse-down} context-menu-handler: {Event-Handler :form on-context-menu})
      (<Status-Label> name: activities visible?: #f title: "No registered activities" size: {Dimension 250 20} location: tail icon: {Bitmap-Resource "Task"} mouse-down-handler: {Event-Handler :form on-mouse-down} context-menu-handler: {Event-Handler :form on-context-menu})
      @wait
      (<Status-Label> name: locales    title: "English" size: {Dimension 100 20} location: tail icon: {Bitmap-Resource "Branch"} mouse-down-handler: {Event-Handler :form on-mouse-down} context-menu-handler: {Event-Handler :form on-context-menu})
      @wait
      (<Status-Label> name: look       title: "Look" size: {Dimension 100 20} location: tail icon: {Bitmap-Resource "Branch"} mouse-down-handler: {Event-Handler :form on-mouse-down} context-menu-handler: {Event-Handler :form on-context-menu})
      @wait
      (<Status-Label> name: mode       size: {Dimension 90 20} location: tail icon: {Bitmap-Resource "Script"} mouse-down-handler: {Event-Handler :form on-mouse-down} context-menu-handler: {Event-Handler :form on-context-menu})))

  
  ;;;
  ;;;; Host
  ;;;
  
  
  (method meta override (host-icon)
    {Bitmap-Resource "Document"})
  

  (method meta override (host-title)
    "Status")

  
  ;;;
  ;;;; Component
  ;;;


  (method override (install rest)
    (nextmethod rest)
    (update-focused-process))

  
  ;;;
  ;;;; Events
  ;;;


  (method override (on-context-menu evt)
    (let* ((sender (get-sender~ evt))
           (name (get-name~ sender))
           (pos (acquire sender (get-position~ evt))))
      (case name
        ((process) (popup-processes-menu self pos))
        ((workspace) (popup-workspaces-menu self pos))
        @wait
        ((activities) (track-popup-menu (new Activities-Menu) pos))
        @wait
        ((locales) (track-popup-menu (new Locales-Menu) pos))
        @wait
        ((look) (track-popup-menu (new Look-Menu) pos))
        (else (nextmethod evt)))))
  
  
  (method override (on-mouse-down evt)
    (let* ((sender (get-sender~ evt))
           (name (get-name~ sender))
           (pos (acquire sender (get-position~ evt))))
      (case name
        ((process) (popup-processes-menu self pos))
        ((workspace) (popup-workspaces-menu self pos))
        @wait
        ((activities) (toggle-visible?~ (get-activity-manager)))
        @wait
        ((locales) (track-popup-menu (new Locales-Menu) pos))
        @wait
        ((look) (track-popup-menu (new Look-Menu) pos))
        (else (nextmethod evt)))))


  (method public (update-focused-process)
    (let ((label (locate 'process))
          (focused (get-focused-process~ (get-debugger-manager))))
      (set-icon~ label (if focused {Bitmap-Resource "Script"} {}))
      (set-title~ label (if focused (get-title~ focused) "")))))


;;;
;;;; Processes
;;;


(definition (popup-processes-menu view pos)
  (track-popup-menu~ view (new Processes-Menu) pos))


(class Processes-Menu extends Context-Menu
  
  
  (method override (install rest)
    (nextmethod rest)
    (insert-processes))
  
  
  (method (insert-processes)
    (define (process-image process live? focused?) ;; dup from update-processes
      (cond ((not live?)
             {Bitmap-Resource "ProcessDead"})
            ((not focused?)
             (either (get-icon~ process) {Bitmap-Resource "Process"}))
            (else
             {Bitmap-Resource "Script"})))
    
    (for-each-process~ (get-debugger-manager)
      (lambda (debugger process live? focused?)
        (let ((title (get-title~ process))
              (icon (process-image process live? focused?)))
          (let ((item (new Radio-Item parent: self title: title icon: icon action-handler: (new Event-Handler target: self method-name: 'on-action properties: (list process: process)))))
            (set-enabled?~ item live?)
            (set-selected?~ item focused?))))))
  
  
  (method (on-action evt)
    (let ((manager (get-debugger-manager))
          (process (get-property~ evt process:)))
      (focus-process~ manager process))))


;;;
;;;; Workspaces
;;;


(definition (popup-workspaces-menu view pos)
  (let ((preferences (get-workspaces-preferences error?: #f)))
    (when preferences
      (let ((workspaces (get-visible-children~ preferences)))
        (when (>= (length workspaces) 1)
          (track-popup-menu~ view (new Workspaces-Menu) pos))))))


(class Workspaces-Menu extends Context-Menu
  
  
  (method override (install rest)
    (define (insert-workspaces)
      (let* ((selected (selected-workspace))
             (preferences (get-workspaces-preferences))
             (workspaces (get-visible-children~ preferences))
             (default (find-component~ preferences 'default)))
        (when default
          (insert-workspace default (eq? default selected))
          (new Separator-Item parent: self))
        (for-each (lambda (workspace)
                    (unless (eq? workspace default)
                      (if (is? workspace Separator)
                          (new Separator-Item parent: self)
                        (insert-workspace workspace (eq? workspace selected)))))
                  workspaces)))
    
    (define (insert-workspace workspace selected?)
      (let* ((title (if workspace (get-presentation-property~ workspace) "None"))
             (icon (if workspace (get-icon~ workspace) {Bitmap-Resource "Empty"}))
             (item (new Radio-Item parent: self title: title icon: icon action-handler: (new Event-Handler target: self method-name: 'on-action properties: (list workspace: workspace)))))
        (when selected?
          (set-selected?~ item #t))))
    
    (nextmethod rest)
    (insert-workspaces))
  
  
  (method (on-action evt)
    (let ((workspace (get-property~ evt workspace:)))
      (apply-preferences~ workspace)))))
