;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; The Jedi Application
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jedi.application.Jedi jazz


(import (jazz.catalog)
        (jazz.console)
        (jazz.designer)
        (jazz.doc)
        (jazz.editor.jazz)
        (jazz.editor.lisp)
        (jazz.editor.sql)
        (jazz.editor.sql.view)
        (jazz.ide)
        (jazz.io)
        (jazz.jml)
        (jazz.library)
        (jazz.library.component)
        (jazz.system)
        (jazz.ui)
        (jazz.ui.view)
        (jazz.ui.workspace)
        (jedi)
        (jedi.builder.workbench))


(class Jedi extends IDE
  
  
  (slot documentation-cataloguer initialize {})
  
  
  (method meta override (external-name . rest)
    'jedi)

  
  (method override (process-name)
    "Jedi")
  
  
  (method override (process-owner)
    "JazzScheme")
  
  
  (method override (process-copyright)
    "1996-2009")
  
  
  (method override (process-icon)
    "Jedi")


  (method override (process-version)
    (receive (major minor revision) (split-version kernel-version)
      (new Version major minor revision 'beta)))


  (method override (process-email)
    "gcartier@jazzscheme.org")


  (method override (new-toplevel)
    (new Jedi-Toplevel))
  
  
  (method override (initialize-settings)
    (let ((file {File Home ".jedi" ".settings"}))
      (unless (exists?~ file)
        (create~ file))
      (set! settings (new Settings file: file))
      (register-settings settings)))
  
  
  (method override (start-process)
    (nextmethod)
    (set-catalog-context 'jazz))
  
  
  (method override (finalize-process)
    (nextmethod)
    @convert/wait
    (register-provider (new Access-Provider))
    @convert/wait
    (register-provider (new SQLServer-Provider))
    @convert/wait
    (register-provider (new JDBC-Provider))
    (add-application-listener 'workspace (new Event-Handler target: self method-name: 'on-workspace)))
  
  
  (method override (finish-process)
    (define (setup-workspaces)
      (let ((preferences (get-workspaces-preferences))
            (menubar (find-menubar)))
        (let ((actions (find-actions 'jedi))
              (menu (get-content~ (child~ menubar 'workspace)))
              (toolbar (find-toolbar))
              (active (get-active~ preferences)))
          (for-each (lambda (workspace)
                      (let ((name (get-name~ workspace))
                            (title (get-title~ workspace))
                            (icon? (get-icon~ workspace)))
                        (let ((action-name (string->symbol (format "select-{a}-workspace" name)))
                              (event-handler (new Event-Handler target-name: :application method-name: 'on-select-workspace properties: (list workspace: name)))
                              (selected? (eq? name active)))
                          (new Action-Item parent: actions name: action-name action-handler: event-handler shortcut: (get-shortcut~ workspace))
                          (new Radio-Item parent: menu name: (get-name~ workspace) title: title icon: icon? before: 'next-separator group: 'workspace selected?: selected? action: (new Action 'jedi action-name '()))
                          (new Workspace-Button parent: toolbar name: name size: {Dimension 22 22} location: 'tail before: 'tail-separator group: 'workspace image-name: icon? portfolio: :icons selected?: selected? tooltip?: #t tooltip-text: title action-handler: event-handler)
                          (new Separator parent: toolbar size: {Dimension 1 0} location: 'tail before: 'tail-separator))))
                    (get-children~ preferences))
          (layout-menu~ menu)
          (layout~ toolbar))))
    
    (define (setup-sql)
      (register-console~ (get-sql-console) "SQL Console" #f view-class: SQL-Console-View console-button?: #f))
    
    (nextmethod)
    (setup-workspaces)
    (setup-sql))
  
  
  ;;;
  ;;;; Catalogs
  ;;;
  
  
  (method (setup-catalog name directory extensions (char-encoding: char-encoding {}) (heuristics: heuristics {}))
    (let ((cataloguer (get-cataloguer))
          (output (new-file~ {Directory Profile "catalogs"} (format "{a}.jcat" name))))
      (let ((catalog (new Filing-Catalog name output directory extensions char-encoding heuristics #t)))
        (add-catalog~ cataloguer catalog)
        (activate~ catalog report?: #f))))

  
  ;;;
  ;;;; Preferences
  ;;;
  
  
  (method override (persist-preferences?)
    #t)
  
  
  (method override (default-preferences)
    (new Default-Jedi-Preferences))
  
  
  (method override (default-bindings)
    (new Jedi-Bindings))
  
  
  ;;;
  ;;;; Servers
  ;;;
  
  
  @wait-need-a-way-to-open-service-any-if-port-is-already-in-use
  (method (default-listener-service)
    44333)

  
  ;;;
  ;;;; Search
  ;;;


  (method override (get-search-manager)
    (singleton-palette
      (lambda ()
        (new-palette Jedi-Search
                     host-title: "Search"
                     host-visible?: #f
                     host-position: {Point 150 220}
                     host-size: {Dimension 857 169}))
      'search))
  
  
  ;;;
  ;;;; Versions
  ;;;
  

  (method override (mandatory-version what)
    (case what
      ((sqlserver) {Version 8 0 0})
      ((dao) {Version 3 6 0})
      ((access-database) {Version 4 0 0})
      (else (nextmethod what))))
  
  
  ;;;
  ;;;; Frames
  ;;;


  (method override (default-frame-class)
    Jazz-Text-View)


  (method override (known-extension-frame-class ext)
    (cond ((member? ext '("txt" "text") test: ci=?) Jazz-Plain-Text-View)
          ((member? ext '("diff" "patch") test: ci=?) jazz.editor.diff.Diff-Text-View)
    @wait ((member? ext '("tpl") test: ci=?) jazz.editor.java.Java-Text-View)
          ((member? ext Scheme-Extensions test: ci=?) jazz.editor.scheme.Scheme-Text-View)
          ((member? ext CommonLisp-Extensions test: ci=?) jazz.editor.commonlisp.CommonLisp-Text-View)
          ((member? ext Jazz-Extensions test: ci=?) Jazz-Text-View)
          ((member? ext '("jmf") test: ci=?) View-Editor)
          (else (nextmethod ext))))


  ;;;
  ;;;; Files
  ;;;
  
  
  @convert/wait
  (method (edit-file file)
    (let ((ext (get-extension~ file)))
      (cond ((ci=? ext "stack") (edit-stack file))
            ((ci=? ext "crash") (edit-snapshot file))
            ((ci=? ext "class") (browse-java-classfile file))
            ((ci=? ext "jar") (browse-java-jarfile file))
            (else (nextmethod file)))))
  
  
  (method override (edit-category name)
    (let ((location (new Jazz-Code-Location (list name 1))))
      (edit~ location)))
  
  
  ;;;
  ;;;; Text
  ;;;
  
  
  (method override (get-text-class)
    Jazz-Text-View)
  
  
  ;;;
  ;;;; Stack
  ;;;
  
  
  @convert/wait
  (method (edit-stack file)
    (open-snapshot~ (get-processes-view) file)
    (select-workspace 'debugger))
  
  
  ;;;
  ;;;; Snapshot
  ;;;
  
  
  @convert/wait
  (method (edit-snapshot file)
    (open-snapshot~ (get-processes-view) file)
    (select-workspace 'debugger))
  
  
  ;;;
  ;;;; Java
  ;;;
  
  
  @convert/wait
  (method (browse-java-classfile file)
    (let* ((host (new-frame Java-Manager))
           (manager (get-guest~ host)))
      (browse-classfile~ manager file)))
  
  
  @convert/wait
  (method (browse-java-jarfile file)
    (let* ((host (new-frame Java-Manager))
           (manager (get-guest~ host)))
      (browse-jarfile~ manager file)))

  
  ;;;
  ;;;; Depot
  ;;;
  
  
  @convert/wait
  (method (get-depot-classes)
    (list
      VSS-Depot))
  
  
  ;;;
  ;;;; Persistence
  ;;;
  
  
  (method override (persist-usernames?)
    #t)
  
  
  (method override (persist-passwords?)
    #t)


  ;;;
  ;;;; Context
  ;;;
  
  
  (method override (get-context-text)
    {})


  ;;;
  ;;;; Session
  ;;;
  
  
  ;; temporary...
  @convert-to-session
  (method (reload-opened-windows)
    )
    
  
  @convert-to-session
  (method (reload-component class properties)
    (case class
      ((search)    (apply (~ new-frame Jedi-Search) properties))
      ((jazz-text) (apply (~ new-frame Jazz-Text-View) properties))
      (else (nextmethod class properties))))

  
  ;;;
  ;;;; Run
  ;;;
  
  
  (method public (run-project project (profile: profile {}) (command-action: command-action {}) (command-arguments: command-arguments {}) (show-console?: show-console? #f) (wait?: wait? #f))
    (project-run~ project
      profile: profile
      command-action: command-action
      command-arguments: command-arguments
      show-console?: show-console?
      wait?: wait?))

  
  ;;;
  ;;;; Debug
  ;;;


  (method public (debug-project project (executable: executable {}) (debugger-interactive?: debugger-interactive? #f) (profile: profile {}) (command-action: command-action {}) (command-arguments: command-arguments {}) (show-console?: show-console? #f) (wait?: wait? #f))
    (project-debug~ project
      executable: executable
      debugger-interactive?: debugger-interactive?
      profile: profile
      command-action: command-action
      command-arguments: command-arguments
      show-console?: show-console?
      wait?: wait?))
  
  
  ;;;
  ;;;; Debuggee
  ;;;
  
  
  (method override (initial-console-context)
    (let ((pref (get-preferences '(tools console) error?: #f)))
      (if (not pref)
          :process
        (get-context~ pref))))

  
  ;;;
  ;;;; Documentation
  ;;;
  
  
  (method override (get-documentation-cataloguer)
    (define (new-documentation-cataloguer)
      (let ((cataloguer (new Cataloguer))
            (workbench (get-workbench)))
        (for-each-project~ workbench
          (lambda (project)
            (let ((file (get-documentation~ project)))
              (when file
                (let ((form (safe-read-from-file file)))
                  (unless (exception? form)
                    (let* ((doc (instantiate~ form))
                           (name (get-name~ doc))
                           (catalog (new Doc-Catalog name doc project)))
                      (add-catalog~ cataloguer catalog))))))))
        cataloguer))
    
    (unless documentation-cataloguer
      (when (get-documented?~ (get-preferences {}))
        (set! documentation-cataloguer (new-documentation-cataloguer))))
    documentation-cataloguer)
  
  
  (method public (reload-documentation)
    (set! documentation-cataloguer {})
    (get-documentation-cataloguer))

  
  ;;;
  ;;;; Actions
  ;;;
  
  
  (method override (class-actions)
    (cons (find-actions 'jedi)
          (nextmethod))
    @wait
    (cons (find-actions 'debugger)
          (cons (find-actions 'jedi)
                (nextmethod))))
  
  
  (method override (update-focus-actions)
    (nextmethod)
    (let ((focus (get-focus)))
      (let ((text? (and focus (is? focus Text-View)))
            (code? (and focus (is? focus Code-Text-View)))
            (lisp? (and focus (is? focus Lisp-Text-View)))
            (jazz? (and focus (is? focus Jazz-Text-View)))
            (console? (and focus (is? focus Console-Text-View))))
        (when preferences-root
          (set-action-enabled? {Action code-text evaluate} (and code? (not console?)))
          (set-action-enabled? {Action code-text evaluate-buffer} (and code? (not console?)))
          (set-action-enabled? {Action code-text edit-definitions} code?)
          (set-action-enabled? {Action code-text edit-references} code?)
          (set-action-enabled? {Action code-text recolorize-syntax} (and code? (not console?)))
          (set-action-enabled? {Action text search-forward-mode} text?)
          (set-action-enabled? {Action text search-backward-mode} text?)
          (set-action-enabled? {Action text search-current} text?)
          (set-action-enabled? {Action text goto-line} text?)
          (set-action-enabled? {Action text select-outer} text?)
          (set-action-enabled? {Action code-text transpose-expr} code?)
          (set-action-enabled? {Action lisp-text tabulate} lisp?)
          (set-action-enabled? {Action lisp-text highlight-selection} lisp?)
          (set-action-enabled? {Action lisp-text remove-highlights} lisp?)
          (set-action-enabled? {Action code-text find-imports} (or jazz? console?))
          (set-action-enabled? {Action code-text find-all-imports} (or jazz? console?))
          (set-action-enabled? {Action text mark-column} text?)
          (set-action-enabled? {Action text fill-to-column} text?)
          (set-action-enabled? {Action text upcase} text?)
          (set-action-enabled? {Action text downcase} text?)
          (set-action-enabled? {Action text capitalize} text?)))))
  
  
  ;;;
  ;;;; Projects
  ;;;
  
  
  (method public (update-project-actions)
    (let ((project (get-active-project))
          @wait
          (project-file (let ((guest (current-document)))
                          (when (and guest (is? guest Document))
                            (let ((moniker (get-moniker~ (get-controller~ guest))))
                              (when moniker
                                (let ((workbench (get-workbench)))
                                  (find-source~ workbench moniker)))))))
          ;; quicky as this should probably be a test on the above project-file
          ;; so files from different languages can be build in their own ways
          (unit-name (let ((guest (current-document)))
                       (when (and guest (is? guest Document))
                         (let ((moniker (get-moniker~ (get-controller~ guest))))
                           (when moniker
                             (find-pathname-unit (parse~ moniker))))))))
      @wait (set-action-enabled? {Action jedi edit-project} project)
      @wait (set-action-enabled? {Action jedi compile-file} (and project unit-name @wait project-file))
      (set-action-enabled? {Action jedi build-project} project)
      @wait (set-action-enabled? {Action jedi view-project-log} project)
      (set-action-enabled? {Action jedi test-project} project)
      (set-action-enabled? {Action jedi run-project} project)
      (set-action-enabled? {Action jedi debug-project} project)
      (set-action-enabled? {Action jedi debug-project-with} project)))


  ;;;
  ;;;; Windows
  ;;;
  
  
  (method override (update-windowing-actions)
    (nextmethod)
    (unless (exiting-process?)
      (update-search-actions)
      (update-project-actions)))
  
  
  ;;;
  ;;;; Results
  ;;;
  
  
  (method override (navigable-results)
    (list
      (get-guest~ (singleton-docked Search-Results {}))
      @wait
      (get-guest~ (singleton-docked Output-Log {}))
      @wait
      (get-guest~ (singleton-docked Violations-Manager {}))))


  ;;;
  ;;;; Events
  ;;;
  
  
  (method (on-new-project evt)
    (add-project-to~ (get-workbench-manager) (get-workbench)))
  
  
  (method (on-event-spy evt)
    @convert/wait
    (new-palette Event-Spy))
  
  
  (method (on-registry-viewer evt)
    @convert/wait
    (new-frame Registry-Viewer))
  
  
  (method (on-type-viewer evt)
    @convert/wait
    (new-frame Type-Viewer))
  
  
  (method (on-java-manager evt)
    @convert/wait
    (new-frame Java-Manager))
  
  
  (method (on-showcase evt)
    (new-frame Showcase))
  
  
  (method (on-profiler-manager evt)
    @convert/wait
    (show-palette Profiler-Manager))
  
  
  (method (on-documentation-editor evt)
    (let* ((cataloguer (get-documentation-cataloguer))
           (catalog (car (get-catalogs~ cataloguer))))
      (new-frame Doc-Editor client: (get-client~ catalog))))
  
  
  (method (on-run-smoker evt)
    @convert/wait
    (build/run~ (new Smoker-Builder)))
  
  
  (method (on-toolbox evt)
    (select-palette Toolbox-Manager workspace: 'designer focus?: #t))
  
  
  (method (on-branches evt)
    (select-palette Branches-Editor workspace: 'designer focus?: #t))
  
  
  (method (on-descendants evt)
    (select-palette Descendants-Editor workspace: 'designer focus?: #t))


  (method package (on-spy-events evt)
    @convert/wait
    (show-palette Event-Spy))


  ;;;
  ;;;; Help
  ;;;
  
  
  (method package (on-readme evt)
    (edit-document {File Jazz "README"})))


;;;
;;;; Default-Jedi-Preferences
;;;


(class Default-Jedi-Preferences extends Jedi-Preferences
  
  
  (form
    (<install>
      (<workspaces~> active: home
        (<Home-Workspace>)
        (<Text-Workspace>)
        (<Debugger-Workspace>)
        (<Groupware-Workspace>)
        (<SQL-Workspace>))))))
