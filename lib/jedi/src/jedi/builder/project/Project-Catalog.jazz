;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Project Catalogs
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library protected jedi.builder.project.Project-Catalog jazz


(import (jazz.catalog)
        (jazz.utilities)
        (jedi))


(class Project-Catalog extends Indexed-Catalog
  
  
  (slot project getter generate)
  
  
  (method (initialize project . rest)
    (apply nextmethod rest)
    (set! project~self project))
  

  ;;;
  ;;;; Access
  ;;;
  
  
  (method (get-extensions)
    (effective-catalog-extensions (get-catalog-extensions~ project)))
  
  
  (method (get-heuristics)
    (get-catalog-heuristics~ project))


  ;;;
  ;;;; Activation
  ;;;

  
  (method (get-active?)
    (get-active?~ project))
  
  
  (method (set-active? flag)
    (when (neq? flag (get-active?~ project))
      (set-active?~ project flag)
      (if (get-active?)
          (activate)
        (deactivate))))
  

  ;;;
  ;;;; Scan
  ;;;
  
  
  (method (scan-directories)
    (let ((processed 0)
          (extensions (get-extensions)))
      (fold-files~ project
        (function (project-file seed)
          (if (and (neq? project-file project) (is? project-file Project) (get-catalog?~ project-file))
              :skip
            (let ((file (get-effective-source~ project-file)))
              (when file
                (let ((ext (get-extension~ file)))
                  (when (and (or (not extensions) (member? ext extensions test: ci=?))
                             (process-file file))
                    (increase! processed)))))))
        {})
      processed))))
