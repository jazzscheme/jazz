;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; New Repository Dialog
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jedi.builder.repositories.New-Repository-Dialog jazz


(import (jazz.graphic)
        (jazz.io)
        (jazz.jml)
        (jazz.library)
        (jazz.literals)
        (jazz.runtime)
        (jazz.ui)
        (jazz.ui.view)
        (jazz.utilities)
        (jedi))


(class New-Repository-Dialog extends View
  
  
  (property directory initialize {} accessors generate)
  
  
  (form
    (<install>                                              size: {Dimension 500 261}
      (<Label-View>               name: title               title: "New Repository" position: {Point 10 9} size: {Dimension 350 16} font: {Font name: Caption})
      (<Label-View>               name: description         title: "Please specify repository name, directory name and directory" position: {Point 30 27} size: {Dimension 350 16} font: {Font name: Label})
      (<Horizontal-Line>                                    position: {Point 0 50} size: {Dimension 500 8})
      (<Label-View>               name: directory-label     title: "Directory:" position: {Point 82 103} size: {Dimension 54 16} font: {Font name: Label})
      (<Moniker-Widget>           name: directory           position: {Point 141 100} size: {Dimension 289 24} protocol: dir display-protocol?: #f moniker-update-handler: {Event-Handler :form on-moniker-update}
        (<!>                      name: moniker-border      style: entry
          (<!>                    name: scroller
            (<!>                  name: content
              (<!>                name: text                editable?: #f show-unfocused-selection?: #f focus-selects-all?: #t tooltip?: #t tooltip-text: "Directory where the repository will be created" return-press-handler: {Event-Handler :form on-return-press} escape-press-handler: {Event-Handler :form on-escape-press})))))
      (<Label-View>               name: dirname-label       title: "Dirname:" position: {Point 82 127} size: {Dimension 54 16} font: {Font name: Label})
      (<Border-View>              name: dirname-border      position: {Point 141 125} size: {Dimension 264 19} border-type: edge style: entry
        (<Scroller-View>                                    hscroll?: #f vscroll?: #f
          (<!>                    name: content             layout-type: fill
            (<Name-Text-View>     name: dirname-text        left-padding: 2 top-padding: 2 accepts-returns?: #f show-unfocused-selection?: #f focus-selects-all?: #t default-style: {Text-Style name: Default font: {Font name: Label}} tooltip?: #t tooltip-text: "Directory name of the repository" return-press-handler: {Event-Handler :form on-return-press} escape-press-handler: {Event-Handler :form on-escape-press} content-change-handler: {Event-Handler :form on-content-change}))))
      (<Label-View>               name: name-label          title: "Name:" position: {Point 82 151} size: {Dimension 54 16} font: {Font name: Label})
      (<Border-View>              name: name-border         position: {Point 141 149} size: {Dimension 264 19} border-type: edge style: entry
        (<Scroller-View>                                    hscroll?: #f vscroll?: #f
          (<!>                    name: content             layout-type: fill
            (<Name-Text-View>     name: name-text           left-padding: 2 top-padding: 2 accepts-returns?: #f show-unfocused-selection?: #f focus-selects-all?: #t default-style: {Text-Style name: Default font: {Font name: Label}} tooltip?: #t tooltip-text: "Name of the repository" return-press-handler: {Event-Handler :form on-return-press} escape-press-handler: {Event-Handler :form on-escape-press} content-change-handler: {Event-Handler :form on-content-change}))))
      (<Horizontal-Line>                                    position: {Point 0 213} size: {Dimension 500 8})
      (<Push-Button>              name: ok                  title: "OK" position: {Point 167 227} size: {Dimension 80 24} default?: #t action-handler: {Event-Handler :host on-ok})
      (<Push-Button>              name: cancel              title: "Cancel" position: {Point 253 227} size: {Dimension 80 24} action-handler: {Event-Handler :host on-cancel})))
    
  
  (method (finish rest)
    (nextmethod rest)
    (set-moniker~ (locate 'directory) directory)
    (set-string-content~ (locate 'dirname-text) "New"))
  
  
  (method (install-in-host host)
    (nextmethod host)
    (acquire-focus~ (locate 'dirname-text)))

  
  ;;;
  ;;;; Host
  ;;;
  
  
  (method meta (host-title)
    "New")
  

  ;;;
  ;;;; Modal
  ;;;
  
  
  (method (validate-dialog)
    (receive (directory dirname name) (get-modal-result)
      (let* ((destination (new-directory~ directory dirname))
             (effective-name (if (empty-string? name) dirname name))
             (message (validate-name effective-name destination dirname)))
        (when message
          (message-box message)
          (throw-cancel)))))
  
  
  (method (get-modal-result)
    (values (get-moniker~ (locate 'directory)) (get-string-content~ (locate 'dirname-text)) (get-string-content~ (locate 'name-text))))
  

  ;;;
  ;;;; Keyboard
  ;;;
  
  
  (method (get-tab-stops)
    (list
      (get-text~ (locate 'directory))
      (locate 'dirname-text)
      (locate 'name-text)))
  

  ;;;
  ;;;; Events
  ;;;
  
  
  (method (on-content-change evt)
    (update-ok))
  
  
  (method (on-moniker-update evt)
    (update-ok))
  
  
  (method (on-double-click evt)
    (when (get-enabled?~ (locate 'ok))
      (validate-dialog)
      (let ((dialog (get-host)))
        (end-modal~ dialog (get-modal-result~ dialog)))))
  
  
  ;; Should really be generic in the Dialog class
  (method (on-return-press evt)
    (when (get-enabled?~ (locate 'ok))
      (validate-dialog)
      (let ((dialog (get-host)))
        (end-modal~ dialog (get-modal-result~ dialog)))))
  
  
  ;; Should really be generic in the Dialog class
  (method (on-escape-press evt)
    (let ((dialog (get-host)))
      (cancel-modal~ dialog)))
  

  ;;;
  ;;;; Update
  ;;;
  
  
  (method (update-ok)
    (set-enabled?~ (locate 'ok) (and (get-moniker~ (locate 'directory)) (not (empty-string? (get-string-content~ (locate 'dirname-text)))))))
  
  
  (method (validate-name name destination dirname)
    (cond ((exists?~ destination)
           (format "Repository already exists: {a}" (parse~ destination)))
          ((find-repository (string->symbol name))
           (format "A repository with this name is already installed: {a}" name))
          ((let ((first (first name)))
             (not (or (eqv? first #\_)
                      (alphabetic? first))))
           "Name must start with a letter or an underscore")
          ((not (every? (function (char)
                          (or (alphabetic? char)
                              (numeric? char)
                              (memv? char '(#\minus #\_))))
                        name))
           "Name can only contain letters, digits, dashes and underscores")
          ((let ((first (first dirname)))
             (not (or (eqv? first #\_)
                      (alphabetic? first))))
           "Directory name must start with a letter or an underscore")
          ((not (every? (function (char)
                          (or (alphabetic? char)
                              (numeric? char)
                              (memv? char '(#\minus #\_))))
                        dirname))
           "Directory name can only contain letters, digits, dashes and underscores")
          (else
           {})))
  

  ;;;
  ;;;; Drawing
  ;;;
  
  
  (definition Header-Color
    (new Color red: 120 green: 120 blue: 255))

  
  (method (draw surface context lh lv)
    (let ((size (get-size)))
      (gradient-fill~ surface (new Rect 0 0 (get-width~ size) 50) (list (list 0 {Color name: White}) (list 1 Header-Color))))))


;;;
;;;; Name-Text-View
;;;


(class Name-Text-View extends Plain-Text-View
  
  
  (method (get-context-menu)
    (new-text-context-menu)))


(register-autoclass Name-Text-View))
