;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Workbench
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jedi.builder.workbench.Workbench jazz


(import (jazz.editor.jazz)
        (jazz.io)
        (jazz.jml)
        (jazz.library)
        (jazz.system)
        (jazz.ui.view)
        (jedi))


(class Workbench extends Project
  
  
  (form
    (<install> catalog?: #t))
  
  
  (slot projects-table   initialize (make-table test: eq?)   getter generate)
  (slot categories-table initialize (make-table test: eq?))
  (slot resources-table  initialize (make-table test: equal?))
  ;; this is clearly not maintained up to date perfectly but it will do for now
  (slot sources-table    initialize (make-table test: equal?))


  ;;;
  ;;;; Projects
  ;;;
  
  
  (method public (find-project project-accessor/class)
    (define (determine-project-class)
      (if (symbol? project-accessor/class)
          (receive (unit name) (split-composite project-accessor/class)
            ;; this is to support the old format so profiles won't crash
            (if (not unit)
                name
              (module-ref unit name)))
        project-accessor/class))
    
    (let ((project-class (determine-project-class)))
      (continuation-capture
        (lambda (return)
          (iterate-table projects-table
            (lambda (locator project)
              (when (if (symbol? project-class)
                        (eq? (identifier-name (category-name (class-of project))) project-class)
                      (instance-of? project project-class))
                (continuation-return return project))))
          {}))))
  
  
  (method public (require-project project-accessor/class)
    (either (find-project project-accessor/class)
            (error "Unable to find project: {s}" project-accessor/class)))


  ;;;
  ;;;; Files
  ;;;
  
  
  (method public (find-source source)
    (get-source-entry source))
  
  
  (method public (find-filename filename)
    (continuation-capture
      (lambda (return)
        (for-each-project-file
          (lambda (descendant)
            (let ((source (get-effective-source~ descendant)))
              (when source
                (when (ci=? (get-name~ source) filename)
                  (continuation-return return descendant))))))
        {})))


  ;;;
  ;;;; Catalogs
  ;;;
  
  
  (method override (catalog-name)
    'workbench)
  
  
  (method public (load-catalogs)
    (thread-start!
      (new-thread
        (lambda ()
          (user-message "Loading catalogs...")
          (for-each-project load-catalog include-self?: #t)
          (clear-user-message))
        'catalogs-loader)))
  
  
  (method public (load-catalog project)
    (when (get-catalog?~ project)
      (let ((catalog (require-catalog~ project)))
        (activate~ catalog report?: #f)
        catalog)))


  ;;;
  ;;;; Editable
  ;;;
  
  
  (method override (get-effective-editable?)
    #t)


  ;;;
  ;;;; Add/Remove
  ;;;
  
  
  (method protected (add-to-project project name component)
    (typecase component
      ((Project-File)
       (when (is? component Project)
         (set-workbench~ component self)
         (set-parent-project~ component project)
         (table-set! projects-table (category-name (class-of component)) component))
       (set-project~ component project)
       (let ((source (get-source~ component)))
         (add-source source component)
         (typecase component
           ((Resource-File)
            (let ((type (resource-type~ (resource-class~ component))))
              (add-resource type source)))
           ((Jazz-File)
            (add-entry name component)))))))
  
  
  (method protected (remove-from-project project name component)
    (typecase component
      ((Project-File)
       (when (is? component Project)
         (table-clear projects-table (category-name (class-of component)))
         (let ((catalog (get-catalog~ component)))
           (when catalog
             (remove-catalog~ (get-cataloguer~ (get-application)) catalog))))
       (let ((source (get-source~ component)))
         (remove-source source component)
         (typecase component
           ((Resource-File)
            (let ((type (resource-type~ (resource-class~ component))))
              (remove-resource type source)))
           ((Jazz-File)
            (remove-entry name)))))))


  ;;;
  ;;;; Content
  ;;;
  
  
  (method public (for-each-project proc (include-self?: include-self? #f))
    (for-each-descendant
      (lambda (descendant level)
        (when (is? descendant Project)
          (proc descendant)))
      include-self?: include-self?))
  
  
  (method public (for-each-project-file proc (include-self?: include-self? #f))
    (for-each-descendant
      (lambda (descendant level)
        (when (is? descendant Project-File)
          (proc descendant)))
      include-self?: include-self?))
  
  
  (method public (for-each-jazz-file proc (include-self?: include-self? #f))
    (for-each-descendant
      (lambda (descendant level)
        (when (is? descendant Jazz-File)
          (proc descendant)))
      include-self?: include-self?))
  
  
  (method public (add-entry category-name entry)
    (table-set! categories-table category-name entry))
  
  
  (method public (remove-entry category-name)
    (table-clear categories-table category-name))
  
  
  (method public (get-entry category-name)
    (table-ref categories-table category-name #f))
  
  
  (method public (get-entry-source category-name)
    (let ((file (get-entry category-name)))
      (when file
        (get-source~ file))))
  
  
  (method (add-resource type source)
    (let* ((name (get-base~ source))
           (key (cons type name)))
      (table-set! resources-table key source)))
  
  
  (method (remove-resource type source)
    (let* ((name (get-base~ source))
           (key (cons type name)))
      (table-clear resources-table key)))
  
  
  (method public (get-resource type name)
    (let ((key (cons type name)))
      (table-ref resources-table key #f)))
  
  
  (method public (get-image-resource resource)
    (get-resource 'image (get-name~ resource)))
  
  
  (method public (get-icon-resource name)
    (get-resource 'icon name))
  
  
  (method public (add-source source entry)
    (when source
      (let ((name (get-name~ source)))
        (table-set! sources-table name (cons entry (table-ref sources-table name '()))))))
  
  
  (method public (remove-source source entry)
    (when source
      (let ((name (get-name~ source)))
        (table-set! sources-table name (remove! entry (table-ref sources-table name '()))))))
  
  
  (method public (get-source-entry source)
    (let* ((name (get-name~ source))
           (entries (table-ref sources-table name '())))
      (find-if (lambda (entry)
                 (pathname=? (get-effective-source~ entry) source))
               entries)))


  ;;;
  ;;;; Index
  ;;;
  
  
  (method override (find-workbench)
    self)


  ;;;
  ;;;; Update
  ;;;
  
  
  (method public (update)
    (empty-table projects-table)
    (empty-table sources-table)
    (empty-table categories-table)
    (empty-table resources-table))
  
  
  ;;;
  ;;;; Descriptor
  ;;;
  
  
  (method meta override (get-class-descriptor)
    (new Workbench-Descriptor)))


;;;
;;;; Design
;;;


(submodule design


(import (jazz.designer))


(class Workbench-Descriptor extends Project-Descriptor
  
  
  (method override (class-image class)
    {Image-Resource "Workbench"})
    
  
  (method override (component-get-presentation component)
    "Workbench")
  
  
  (method override (component-can-cut-component? component)
    #f)
  
  
  (method override (component-can-copy-component? component)
    #f)
  
  
  (method override (component-can-rename-component? component)
    #f)
  
  
  (method override (component-can-delete-component? component)
    #f)
  
  
  (method override (component-can-move-component? component)
    #f)
  
  
  (method override (component-get-addable-classes component)
    (list
      Project-Group)))))
