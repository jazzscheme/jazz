;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Chapters Browser
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jedi.code.Chapters-Browser jazz


(import (jazz.jml)
        (jazz.library)
        (jazz.ui)
        (jazz.ui.view))


(class Chapters-Browser extends Layout-View


  (property client initialize {} getter get-client setter set-client)


  (form
    (<install>                                     layout-type: fill
      (<Layout-View>                name: tools
        (<Toggle-Tool>              name: sorted?  size: {Dimension 22 22} location: tail tooltip?: #t tooltip-text: "Sort?" resource: {Bitmap-Resource "Link"} portfolio: :icons action-handler: {Event-Handler :form on-toggle-sorted})
        (<Push-Tool>                name: update   size: {Dimension 22 22} location: tail tooltip?: #t tooltip-text: "Refresh" resource: {Bitmap-Resource "Refresh"} portfolio: :icons action-handler: {Event-Handler :form on-update}))
      (<Scroller-View>              name: scroller vscroll?: #t hscroll?: #t flat?: #t
        (<!>                        name: content  layout-type: fill
          (<Tree-Header>            name: header   shown?: #f
            (<!>                    name: content
              (<Tree-View>          name: chapters portfolio: :icons show-header?: #f selection-handler: {Selection-Handler :form on-selection-change #t}
                (<Tree-Node-Column>                title: "Chapters" width: 329))))))))
  
  
  (method meta override (external-name . rest)
    'chapters-browser)


  ;;;
  ;;;; Host
  ;;;
  
  
  (method meta override (host-icon)
    {Bitmap-Resource "Branches"})
  
  
  (method meta override (host-title)
    "Chapters")
  
  
  (method override (client-activate)
    (let ((guest (current-document)))
      (if (is? guest Text-View)
          (set-client guest)
        (set-client {}))))
  
  
  (method override (client-deactivate)
    (set-client {}))
 

  ;;;
  ;;;; Docked
  ;;;
  
  
  (method override (get-tools-view)
    (locate 'tools))
  
  
  (method override (focus-default)
    (let ((tree (locate 'chapters)))
      (acquire-focus~ tree)))
 

  ;;;
  ;;;; Access
  ;;;
  
  
  (method (get-sorted?)
    (get-selected?~ (locate 'sorted?)))
 

  ;;;
  ;;;; Events
  ;;;
  
  
  (method (on-toggle-sorted evt)
    (update))
  
  
  (method (on-update evt)
    (update))


  (method (on-selection-change evt)
    (let ((sender (get-sender~ evt)))
      (case (get-name~ sender)
        ((chapters)
          (let ((selection (get-single-selection~ sender)))
            (when selection
              (let* ((pos (cdr (get-user-data~ (get-row~ sender selection))))
                     (row (get-row~ pos))
                     (col (get-col~ pos))
                     (len (paragraph-length~ client row)))
                (set-selection~ client (new Range$Cell$ (new Cell row col) (new Cell row len)) ensure-displayed?: #f)
                (ensure-displayed~ client force-vertical: 'head))))))))
  
  
  ;;;
  ;;;; Client
  ;;;


  (method public (get-client)
    client)

 
  (method public (set-client clt)
    (when (neq? clt client)
      (set! client clt)
      (update)))
  
  
  (method (update)
    (define (insert-item tree father state item first?)
      (bind (level pos header title) item
        (let ((image (if first? {Bitmap-Resource "Present"} {Bitmap-Resource "Item"})))
          (add-row~ tree father: father state: state children: (list (new Tree-Node title: title image: image)) user-data: (cons 0 (+ (cast <Cell> pos) (cardinality header)))))))
    
    (define (find-father-row root-row previous-row level)
      (when previous-row
        (continuation-capture
          (lambda (return)
            (for-each-ancestor~ previous-row
              (lambda (row)
                (if (eq? row root-row)
                    (continuation-return return {})
                  (when (< (car (get-user-data~ row)) level)
                    (continuation-return return row)))))))))
    
    (let ((tree (locate 'chapters)))
      (if (not client)
          (remove-every-row~ tree)
        (with-update-locked~ tree
          (lambda ()
            (remove-every-row~ tree)
            (let* ((lst (get-chapters~ client))
                   (first (get-first-chapter~ client lst))
                   (remaining (get-remaining-chapters~ client lst))
                   (sorted (if (get-sorted?) (sort string<? remaining key: fourth) remaining))
                   (first-row {}))
              (when first
                (set! first-row (insert-item tree {} 'expanded first #t)))
              (let ((root-row (get-root-row~ tree))
                    (previous-row first-row))
                (for-each (lambda (info)
                            (bind (level pos header title) info
                              (let* ((first? #f)
                                     (father (find-father-row root-row previous-row level))
                                     (image (cond (first? {Bitmap-Resource "Present"}) ((= level 1) {Bitmap-Resource "Item"}) (else {Bitmap-Resource "Constant"})))
                                     (state (if (eq? father root-row) 'expanded 'collapsed))
                                     (row (add-row~ tree father: father state: state row-height: 17 children: (list (new Tree-Node title: title image: image)) user-data: (cons level (+ (cast <Cell> pos) (cardinality header))))))
                                (set! previous-row row))))
                          sorted))))))))))
