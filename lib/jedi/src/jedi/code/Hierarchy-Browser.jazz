;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Hierarchy Browser
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module protected jedi.code.Hierarchy-Browser jazz


(import (jazz.catalog)
        (jazz.io)
        (jazz.jml)
        (jazz.library)
        (jazz.library.component)
        (jazz.system)
        (jazz.ui)
        (jazz.ui.view)
        (jedi))


(class Hierarchy-Browser extends Layout-View


  (property client initialize {} accessors generate)
  
  
  (slot client-entry     initialize {})
  (slot client-selection initialize {})
  (slot client-position  initialize {})
  

  (form
    (<install>                                        layout-type: fill
      (<Layout-View>                name: tools
        (<Toggle-Tool>              name: occurence?  size: {Dimension 22 22} location: tail tooltip?: #t tooltip-text: "Order by Occurence" resource: {Image-Resource "PageFilename"} portfolio: :images action-handler: {Event-Handler :form on-toggle-occurence})
        (<Push-Tool>                name: update      size: {Dimension 22 22} location: tail tooltip?: #t tooltip-text: "Refresh" resource: {Image-Resource "Refresh"} portfolio: :images action-handler: {Event-Handler :form on-update}))
      (<Scroller-View>              name: scroller    vscroll?: #t hscroll?: #t flat?: #t
        (<!>                        name: content     layout-type: fill
          (<Tree-Header>            name: header      shown?: #f
            (<!>                    name: content
              (<Hierarchy-Tree>     name: definitions portfolio: :images show-header?: #f selection-handler: {Event-Handler :form on-selection-change} double-click-handler: {Event-Handler :form on-double-click} return-press-handler: {Event-Handler :form on-return-press} escape-press-handler: {Event-Handler :form on-escape-press}
                (<Tree-Node-Column>                   title: "Hierarchy" width: 329))))))))
  
  
  (method meta override (external-name . rest)
    'definitions-browser)


  ;;;
  ;;;; Host
  ;;;
  
  
  (method meta override (host-icon)
    {Image-Resource "Components"})
  
  
  (method meta override (host-title)
    "Hierarchy")
  
  
  (method override (client-activate)
    (define (client-entry guest)
      (when (is? guest Code-Text-View)
        (let ((moniker (get-moniker~ (get-controller~ guest))))
          (when moniker
            (let ((ext (get-extension~ moniker)))
              (if (ci=? ext "jml")
                  (safe-read-from-file moniker)
                (let* ((appl (get-application))
                       (cataloguer (get-cataloguer~ appl))
                       (entries (get-file-entries~ cataloguer moniker context: (get-context~ guest))))
                  (when (= 1 (length entries))
                    (car entries)))))))))
    
    (let ((guest (current-document)))
      (let ((entry (client-entry guest)))
        (if (not entry)
            (set-client/entry {} {})
          (set-client/entry guest entry)))))
  
  
  (method override (client-deactivate)
    (set-client/entry {} {}))
  
  
  (method (tree-focus-gained)
    (when client
      (set! client-selection (get-selection~ client))
      (set! client-position (get-scrolled-position~ client))))
 

  ;;;
  ;;;; Docked
  ;;;
  
  
  (method override (get-tools-view)
    (locate 'tools))
  
  
  (method override (focus-default)
    (let ((tree (locate 'definitions)))
      (acquire-focus~ tree)))
 

  ;;;
  ;;;; Access
  ;;;
  
  
  (method (get-occurence?)
    (get-selected?~ (locate 'occurence?)))
  
  
  (method (get-sorted?)
    (not (get-occurence?)))
  
  
  ;;;
  ;;;; Actions
  ;;;
  

  (method override (guest-actions)
    (cons (find-actions 'hierarchy-browser)
          (nextmethod)))
 

  ;;;
  ;;;; Events
  ;;;
  
  
  (method (on-toggle-occurence evt)
    (set-sort?~ (locate 'definitions) (get-sorted?))
    (update))
  
  
  (method (on-update evt)
    (define (reload-jml)
      (let ((moniker (get-moniker~ (get-controller~ client))))
        (if moniker
            (set! client-entry (safe-read-from-file moniker))
          (set! client-entry {}))))
    
    (when (or (is? client-entry Exception) (is? client-entry Form))
      (reload-jml))
    (update))


  (method (on-selection-change evt)
    (let ((sender (get-sender~ evt)))
      (case (get-name~ sender)
        ((definitions)
         (selection-change sender #f)))))


  (method (on-double-click evt)
    (let ((sender (get-sender~ evt)))
      (case (get-name~ sender)
        ((definitions)
         (selection-change sender #t)))))
  
  
  (method override (on-return-press key)
    (finish-focus))
  
  
  (method override (on-escape-press key)
    (cancel-focus))
  
  
  (method (on-cancel evt)
    (cancel-focus))
  
  
  (method (finish-focus)
    (when client
      (acquire-focus~ client)))
  
  
  (method (cancel-focus)
    (when client
      (when client-selection
        (set-selection~ client client-selection ensure-displayed?: #f)
        (scroll-to~ client client-position))
      (acquire-focus~ client)))
  
  
  ;;;
  ;;;; Delegate
  ;;;
  
  
  (method (edit-definitions definition)
    (define (edit-jml-definition definition)
      (let* ((appl (get-application))
             (moniker (get-origin~ client-entry))
             (frame (edit-document~ appl moniker visible?: #f))
             (text (get-guest~ frame))
             (location (append (get-location~ definition) (list 0)))
             (range (location-range~ text location)))
        (set-selection-safe~ text range ensure-displayed?: 'center-caret)
        (focus-host~ frame)))
    
    (if (is? definition JML-Node)
        (edit-jml-definition definition)
      (edit~ definition activate-focus?: #f)))
  
  
  ;;;
  ;;;; Client
  ;;;

 
  (method public (set-client/entry clt entry)
    (when (neq? entry client-entry)
      (set! client clt)
      (set! client-entry entry)
      (update)))
  
  
  (method (update)
    (define (get-entry-title entry)
      (if (is? entry JML-Node)
          "JML"
        (get-title~ entry)))
    
    ;; All this should be abstracted into an Hierarchy-Client class
    ;; with Hierarchy-Catalog-Client and Hierarchy-JML-Client subclasses
    
    (define (insert-entry-definition tree entry)
      (if (is? entry JML-Node)
          (insert-jml-definition tree {} 0 entry (get-sorted?))
        (insert-definition~ tree {} 0 entry (get-sorted?))))
    
    (define (insert-jml-definition tree father level node sort?)
      (define (insert-definition father level node sort?)
        (let ((row (insert-jml-self father level node)))
          (insert-jml-self-definitions row level node sort?)))
      
      (define (insert-jml-self father level node)
        (let* ((model (get-jml-model father node))
               (image (if (and model (subtype? model Component)) (get-class-image~ model) {Image-Resource "Slot"}))
               (title (cond ((get-property~ node 'title) => identity) ((get-name~ node) => ->string) (else (->string (get-model-name~ node)))))
               (state (if (< level 1) 'expanded 'collapsed)))
          (add-row~ tree father: father state: state children: (list (new Tree-Node title: title image: image)) user-data: node)))
      
      (define (get-jml-model father node)
        (let ((model-name (get-model-name~ node)))
          (when model-name
            (autoload-class model-name))))
      
      (define (insert-jml-self-definitions father level node sort?)
        (insert-jml-definitions father level (get-jml-named-children node) sort?))
      
      (define (insert-jml-definitions father level definitions sort?)
        (let ((ordered (if sort? (sort-jml-definitions definitions) definitions)))
          (for-each (lambda (definition)
                      (insert-definition father (+ level 1) definition sort?))
                    ordered)))
      
      (define (get-jml-named-children node)
        (define (named? node)
          (and (is? node JML-Element)
               (or (get-name~ node)
                   (get-property~ node 'title))))
        
        (when (is? node JML-Element)
          (collect-if (lambda (child)
                        (and (is? child JML-Element)
                             (or (named? child)
                                 (some? named? (get-children~ child)))))
                      (get-children~ node))))
      
      (define (sort-jml-definitions definitions)
        (sort string<? definitions key: (lambda (definition) (->string (get-name~ definition)))))
      
      (insert-definition father level node sort?))
    
    (let ((tree (locate 'definitions)))
      (cond ((not client-entry)
             (set-title "Class Browser")
             (remove-every-row~ tree))
            ((is? client-entry Exception)
             (remove-every-row~ tree)
             (add-row~ tree children: (list (new Tree-Node title: (exception-reason client-entry) image: {Image-Resource "Debugger"})) user-data: client-entry))
            (else
             (set-title (format "Class {a}" (get-entry-title client-entry)))
             (remove-every-row~ tree)
             (with-update-locked~ tree
               (lambda ()
                 (insert-entry-definition tree client-entry)))))))
  
  
  ;;;
  ;;;; Selection
  ;;;
  
  
  (method (selection-change tree double-click?)
    (define (same-file? definition moniker)
      (and moniker (pathname=? (get-file~ (get-file-definition~ definition)) moniker)))
    
    (let ((guest (current-document)))
      (when guest
        (let ((moniker (get-moniker~ (get-controller~ guest)))
              (selection (get-single-selection~ tree)))
          (when selection
            (let ((definition (get-user-data~ (get-row~ tree selection))))
              (unless (is? definition Exception)
                (when (and definition (or double-click? (is-not? definition Indexed-Entry) (same-file? definition moniker)))
                  (edit-definitions definition))))))))))


;;;
;;;; Hierarchy-Tree
;;;


(class Hierarchy-Tree extends Code-Tree
  
  
  (method override (focus-gained)
    (nextmethod)
    (tree-focus-gained~ (get-guest))))


(register-autoclass Hierarchy-Tree))
