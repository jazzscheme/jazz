;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Login Dialog
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library protected jedi.login.Login-Dialog jazz


(import (jazz.graphic)
        (jazz.io)
        (jazz.jml)
        (jazz.library)
        (jazz.system)
        (jazz.ui)
        (jazz.ui.view))


(class Login-Dialog extends View


  (form
    (<install>                                              size: {Dimension 400 216} return-press-handler: {Event-Handler :form on-return-press} escape-press-handler: {Event-Handler :form on-escape-press}
      (<Label-View>                 name: title             title: "Welcome to Jedi" position: {Point 10 9} size: {Dimension 350 16} font: {Font name: Caption})
      (<Label-View>                 name: description       title: "Please enter the profile that will be used for this session" position: {Point 30 27} size: {Dimension 350 16} font: {Font name: Label})
      (<Radio-Button>               name: new-button        title: "New" position: {Point 25 88} tooltip?: #t tooltip-text: "Create a new profile" action-handler: {Event-Handler :form on-new})
      (<Radio-Button>               name: existing-button   title: "Existing" position: {Point 25 114} tooltip?: #t tooltip-text: "Open an existing profile from the standard directories" action-handler: {Event-Handler :form on-existing})
      (<Horizontal-Line>                                    position: {Point 0 48} size: {Dimension 400 8})
      (<Vertical-Line>                                      position: {Point 110 59} size: {Dimension 8 101})
      (<Label-View>                 name: new-label         title: "Name:" position: {Point 136 88} size: {Dimension 40 16} visible?: #f font: {Font name: Label})
      (<Border-View>                name: new-border        position: {Point 196 85} size: {Dimension 171 19} visible?: #f border-type: edge style: entry
        (<Scroller-View>                                    hscroll?: #f vscroll?: #f
          (<!>                      name: content           layout-type: fill
            (<Profile-Text-View>    name: new-profile       left-padding: 2 top-padding: 2 accepts-returns?: #f show-unfocused-selection?: #f default-style: {Text-Style name: Default font: {Font name: Label}} tooltip?: #t tooltip-text: "Profile name. Can contain letters, digits, dashes, underscores and periods" return-press-handler: {Event-Handler :form on-return-press} escape-press-handler: {Event-Handler :form on-escape-press} content-change-handler: {Event-Handler :form on-content-change}))))
      (<Label-View>                 name: bindings-label    title: "Bindings:" position: {Point 136 114} size: {Dimension 60 16} visible?: #f font: {Font name: Label})
      (<Border-View>                name: bindings-border   position: {Point 194 110} size: {Dimension 175 22} visible?: #f border-insets: {Rect 2 2 2 1} border-color: {Color name: Medium}
        (<Border-View>                                      border-color: {Color name: Entry-Border}
          (<Combo-Box>              name: bindings
            (<!>                    name: scroller
              (<!>                  name: content
                (<!>                name: body              left-padding: 2 top-padding: 2))))))
      (<Border-View>                name: existing-border   position: {Point 140 64} size: {Dimension 251 92} visible?: #f border-type: edge style: entry
        (<Scroller-View>                                    vscroll?: #t style: document
          (<!>                      name: content           layout-type: fill
            (<Tree-View>            name: profiles          show-header?: #f font: {Font name: Label} default-row-height: 15 selection-mode: row can-select-empty?: #f tooltip?: #t tooltip-text: "List of profiles found in the standard directories" double-click-handler: {Event-Handler :form on-double-click} return-press-handler: {Event-Handler :form on-return-press} escape-press-handler: {Event-Handler :form on-escape-press}
              (<Tree-Node-Column>                           title: "Profile" width: 176 toplevel-controls?: #f display-images?: #f)))))
      (<Horizontal-Line>                                    position: {Point 0 170} size: {Dimension 400 8})
      (<Check-Box>                  name: always-use        title: "Always use this profile" position: {Point 10 185} size: {Dimension 144 18})
      (<Push-Button>                name: login             title: "Login" position: {Point 225 182} size: {Dimension 80 24} default?: #t action-handler: {Event-Handler :host on-ok})
      (<Push-Button>                name: cancel            title: "Cancel" position: {Point 311 182} size: {Dimension 80 24} action-handler: {Event-Handler :host on-cancel})
      (<Branch>                     name: new
        (<install>
          (<!>                      name: new-label         visible?: #t)
          (<!>                      name: new-border        visible?: #t)
          (<!>                      name: bindings-label    visible?: #t)
          (<!>                      name: bindings-border   visible?: #t)))
      (<Branch>                     name: existing
        (<install>
          (<!>                      name: existing-border   visible?: #t)))))
  
  
  (method meta (host-title)
    "Login")
  
  
  (method (finish rest)
    (nextmethod rest)
    (setup-new-profile)
    (setup-existing-profiles))
  
  
  (method (setup-new-profile)
    (set-string-content~ (locate 'new-profile) (user-name))
    (setup-bindings))
  
  
  (method (focus-default)
    )
  
  
  (definition Bindings
    '((jazz "Jazz")
      (emacs "Emacs (subset)")))
  
  
  (method (setup-bindings)
    (let ((combo (locate 'bindings)))
      (set-choices~ combo Bindings)
      (set-value~ combo 'jazz)))
  
  
  (method (setup-existing-profiles)
    (receive (profiles rank) (collect-profile-info)
      (set-checked?~ (locate 'always-use) (and rank (let ((profile (element profiles rank))
                                                          (settings (get-settings~ (get-application))))
                                                      (and settings (eq? (profile-name profile)
                                                                         (get-setting~ settings 'profile))))))
      (cond ((some-user-profile?)
             (install-existing profiles rank)
             (set-selected?~ (locate 'existing-button) #t))
            (else
             (install-new)
             (set-selected?~ (locate 'new-button) #t)))))
  

  ;;;
  ;;;; Modal
  ;;;
  
  
  (method (validate-dialog)
    (let ((message (validate-profile)))
      (when message
        (message-box message)
        (throw-cancel))))
  
  
  (method (get-modal-result)
    (let ((bindings (get-value~ (locate 'bindings)))
          (always-use? (get-checked?~ (locate 'always-use))))
      (case (get-name~ branch)
        ((new)
         (let ((content (get-string-content~ (locate 'new-profile))))
           (let ((name (string->symbol (capitalize content)))
                 (module (string->symbol (profile-module-name content))))
             (values name module bindings always-use?))))
        ((existing)
         (let* ((tree (locate 'profiles))
                (rank (get-single-selection~ tree)))
           (if (not rank)
               (values {} {} #f)
             (let ((profile (get-user-data~ (get-row~ tree rank))))
               (values (profile-name profile) (profile-module profile) bindings always-use?))))))))
  
  
  (method (profile-module-name name)
    (format "profile.{a}" (downcase name)))
  

  ;;;
  ;;;; Keyboard
  ;;;
  
  
  (method (get-tab-stops)
    (case (get-name~ branch)
      ((new)
       '())
      ((existing)
       '())))
  

  ;;;
  ;;;; Events
  ;;;
  
  
  (method (on-new evt)
    (install-new))
  
  
  (method (on-existing evt)
    (receive (profiles rank) (collect-profile-info)
      (install-existing profiles rank)))
  
  
  (method (on-content-change evt)
    (update-login))
  
  
  (method (on-moniker-update evt)
    (update-login))
  
  
  (method (on-double-click evt)
    (when (get-enabled?~ (locate 'login))
      (validate-dialog)
      (let ((dialog (get-host)))
        (end-modal~ dialog (get-modal-result~ dialog)))))
  
  
  ;; Should really be generic in the Dialog class
  (method (on-return-press evt)
    (when (get-enabled?~ (locate 'login))
      (validate-dialog)
      (let ((dialog (get-host)))
        (end-modal~ dialog (get-modal-result~ dialog)))))
  
  
  ;; Should really be generic in the Dialog class
  (method (on-escape-press evt)
    (let ((dialog (get-host)))
      (cancel-modal~ dialog)))
  

  ;;;
  ;;;; Branches
  ;;;
  
  
  (method (install-new)
    (set-active-branch (locate 'new))
    (let ((text (locate 'new-profile)))
      (acquire-focus~ text)
      (select-all~ text))
    (update-login))
  
  
  (method (install-existing profiles rank)
    (set-active-branch (locate 'existing))
    (let ((tree (locate 'profiles))
          (rank (either rank (essay (not-null? profiles) 0))))
      (remove-every-row~ tree)
      (for-each (function (profile)
                  (let ((title (profile-title profile)))
                    (add-row~ tree children: (list (new Tree-Node title: title)) user-data: profile)))
                profiles)
      (when (and rank (< rank (get-visible-count~ tree)))
        (set-single-selection~ tree rank)
        (ensure-displayed~ tree))
      (acquire-focus~ tree))
    (update-login))
  
  
  (method (collect-profile-info)
    (define (collect-existing-profiles)
      (let ((jazz-repository (find-repository 'Jazz)))
        (map cdr (sort nu<? (gather-profiles) key: (function (info)
                                                     (bind (package . profile) info
                                                       (cons (if (eq? (package-repository package) jazz-repository)
                                                                 2
                                                               1)
                                                             (downcase (profile-title profile)))))))))
    
    (let ((profiles (collect-existing-profiles)))
      (let ((rank (find profiles (->string (argument/setting "profile" 'profile)) key: profile-title test: ci=?)))
        (values profiles rank))))
  
  
  (definition (some-user-profile?)
    (let ((jazz-repository (find-repository 'Jazz)))
      (some? (function (info)
               (bind (package . profile) info
                 (neq? (package-repository package) jazz-repository)))
             (gather-profiles))))
  

  ;;;
  ;;;; Update
  ;;;
  
  
  (method (update-login)
    (when branch
      (case (get-name~ branch)
        ((new)
         (set-enabled?~ (locate 'login) (not (empty-string? (get-string-content~ (locate 'new-profile))))))
        ((existing)
         (set-enabled?~ (locate 'login) (not-null? (get-selection~ (locate 'profiles))))))))
  

  ;;;
  ;;;; Validate
  ;;;
  
  
  (method (validate-profile)
    (case (get-name~ branch)
      ((new)
       (let ((profile-name (get-string-content~ (locate 'new-profile))))
         (validate-new-profile profile-name)))
      (else
       {})))
  
  
  (method (validate-new-profile profile-name)
    (let ((module-name (profile-module-name profile-name)))
      (cond ((let ((first (first profile-name)))
               (not (or (eqv? first #\_)
                        (alphabetic? first))))
             "Profile name must start with a letter or an underscore")
            ((not (every? (function (char)
                            (or (alphabetic? char)
                                (numeric? char)
                                (memv? char '(#\minus #\_))))
                          profile-name))
             "Profile name can only contain letters, digits, dashes and underscores")
            ((exists?~ (new Directory (list 'User "lib" module-name)))
             (format "Profile directory already exists: ~~/jazz_user/lib/{a}" module-name))
            (else
             {}))))
  

  ;;;
  ;;;; Drawing
  ;;;
  
  
  (definition Header-Color
    (new Color red: 120 green: 120 blue: 255))

  
  (method (draw surface context lh lv)
    (let ((size (get-size)))
      (gradient-fill~ surface (new Rect 0 0 (get-width~ size) 50) (list (list 0 {Color name: White}) (list 1 Header-Color))))))


;;;
;;;; Profile-Text-View
;;;


(class Profile-Text-View extends Plain-Text-View
  
  
  (method (get-context-menu)
    (new-text-context-menu)))


(register-autoclass Profile-Text-View))
