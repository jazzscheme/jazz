;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Kernel Documentation
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(<Project-Doc> name: kernel title: "Unit System"
  (<Section-Doc> name: kernel title: "Kernel"
    (<description>
      "The kernel represents the Jazz runtime."
      (<p>)
      "The kernel is a thin layer on top of Scheme that implements language agnostic " (<a> href: "#units" "units") " and " (<a> href: "#packages" "packages") " systems. "
      (<p>)
      "A Jazz application can be seen as a built kernel + libraries of packages."
      (<p>)
      "To build the kernel, launch the " (<a> href: "installation.htm#installation.building" "build system") " and type 'make kernel'. "
      "This will create a kernel.exe executable in your installation directory. "
      (<p>)
      "Note that a Jazz kernel statically includes the whole underlying Scheme system so that for instance, a kernel built on top of Gambit has access to every feature and API of Gambit. ")
    (<Section-Doc> name: launch title: "Launch Parameters"
      (<description>
        (<p> "Every Jazz application supports the following launch parameters:")
        (<table> class: "terminology" width: "500";
          (<th> "Parameter") (<th> "Description")
          (<tr> (<td> "/run") (<td> (<span> "Name of the " (<a> href: "#product" "product") " to run")))
          @wait
          (<tr> (<td> "/debug") (<td> (<span> "When specified, any uncaught exception will invoke the " (<a> href: "jedi.htm#debugger" "remote debugger") " for handling"))))
        (<p>)
        (<p> "Examples:")
        (<p> (<xmp> #"kernel.exe -run jedi"#))
        (<p> (<xmp> #"kernel.exe -run c4"#))))
    (<Section-Doc> name: customization title: "Customization"
    (<description>
      "The HOME/.jazz directory is called the user directory. "
      "It contains user wide settings that the kernel will always apply. "
      "See the section about profiles for ways to create separate sets of customizations for Jedi. "
      (<p>)
      (<node>
        (<span>
          ".jazzini"
          (<p>)
          "The kernel will load early this Scheme file that can be used to customize many of the kernel's features. ")))))
  (<Section-Doc> name: scheme title: "Scheme"
    (<Section-Doc> name: r5rs title: "R5RS"
      )
    (<Section-Doc> name: srfi title: "SRFI"
      )
    (<Section-Doc> name: gambit title: "Gambit"
      )
    (<Section-Doc> name: system title: "Other Scheme Systems"
      ))
  (<Section-Doc> name: units title: "Units"
    (<Section-Doc> name: unit title: "Unit"
    (<description>
      "A Unit is basically a file of Scheme code that was given a name. "
      "That name can then be used to load, compile, ... the unit. "
      "The kernel will automatically located the unit by searching all packages and ensure that it is loaded only once. "
      (<p>)
      "Syntax:"
      (<p>)
      (<pre> class: "code" "(" (<span> class: "keyword" "unit") " " (<span> class: "definition" (<i> "name")) "

(" (<span> class: "keyword" "require") " (" (<i> "unit-name") ")
         ...)

" (<i> "expr") "
...)")
      (<p>)
      "Examples:"
      (<p>)
      (<pre> "(" (<span> class: "keyword" "unit") " " (<span> class: "definition" "fib") "

(define (fib n)
  (if (or (= n 0) (= n 1))
      n
    (+ (fib (- n 1)) (fib (- n 2))))))

(" (<span> class: "keyword" "unit") " " (<span> class: "definition" "test") "

(require (fib))

...)")))
    (<Section-Doc> name: module title: "Module"
    (<description>
      "A module is a unit that implements a specific dialect. "
      "A module will walk it's code and resolve all symbols at walk time. "
      (<p>)
      "Currently supported dialects are:"
      (<node>
        "scheme"
        "jazz")
      (<p>)
      "Syntax:"
      (<p>)
      (<pre> class: "code" "(" (<span> class: "keyword" "module") " " (<span> class: "definition" (<i> "name")) " " (<i> "dialect-name") "

(" (<span> class: "keyword" "require") " (" (<i> "unit-name") ")
         ...)

(" (<span> class: "keyword" "export") " (" (<i> "unit-name") ")
         ...)
(" (<span> class: "keyword" "import") " (" (<i> "unit-name") ")
         ...)

" (<i> "expr") "
...)")
      (<p>)
      "Examples:"
      (<p>)
      (<pre> "(" (<span> class: "keyword" "module") " " (<span> class: "definition" "jazz.sample.world") #" jazz

(import (jazz.platform)
        (jazz.system)
        (jazz.system.process))

(class World extends Process
  
  (method (start-process)
    (system-message "Hello World!")
    (exit-process))))"#)))
    (<Section-Doc> name: resource title: "Resource"
      (<description>
        "A resource is a triplet (package path . extension) representing a resource inside a package.")
      (<Section-Doc> name: manifest title: "Manifest"))
    (<Section-Doc> name: product title: "Product"
      (<description>
        "A product is the runtime implementation of some user level entity that can be run and built. "
        "They correspond to targets in the build system. "
        "For instance, when doing 'make jedi', the build system will find the 'jedi' product and ask it to build itself. "
        (<p>)
        "Products are listed inside their package manifest. ")))
  (<Section-Doc> name: packages title: "Packages"
    (<Section-Doc> name: repository title: "Repository"
      (<description>
        "A repository is where packages are located."
        (<p>)
        "A repository is simply a directory that will be scanned for packages. "
        "Note that repository order is important as it defines search precedence. "
        (<p>)
        "The kernel defines three standard repositories:"
        (<p>)
        (<node>
          (<span>
            "Bin"
            (<p>)
            "This repository is where the build system will build all units. "
            "By default it is the bin directory. "))
        (<p>)
        (<node>
          (<span>
            "Jazz"
            (<p>)
            "The Jazz source repository located in lib. "
            "Note that a compiled unit can potentially be found in more than one repository. "
            "For instance as a binary compiled unit and as source unit. "
            "When loading, the kernel will choose the latest modified. "
            "This greatly eases development as you never have to recompile to test a change as the unit system will automatically load the newer source code over the compiled one. "))
        (<p>)
        (<node>
          (<span>
            "User"
            (<p>)
            "The user's repository located in ~/jazz_user/lib. "
            "This is where you should put your Jazz code. "))))
    (<Section-Doc> name: package title: "Package"
      (<description>
        "A package is the deployment unit that groups together related resources like code units. "
        "Packages are discovered automatically and their order within their repository should not be relevant. "
        "They are similar in function to Ruby gems, Chicken eggs, Gambit snowballs, ... "
        (<p>)
        "Every package needs a manifest file at the toplevel. "
        "This file contains meta information about the package and is named .package. "
        (<p>)
        (<pre> "(" (<span> class: "keyword" "package") " " (<span> class: "definition" "jedi") #"
  
  (root "src")
  (products (jedi (unit jedi.product) (dependencies platform))))"#)))))
