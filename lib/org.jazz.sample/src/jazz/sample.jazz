;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Jazz Sample
;;;


(library jazz.sample jazz


;;;
;;;; Declare
;;;


(declare (standard-bindings)
         (extended-bindings))


(proclaim (optimize))


;;;
;;;; Syntax
;;;


(define-macro (d)
  v)


(macro (m . rest)
  v)


(syntax (s form)
  v)


;;;
;;;; Definition
;;;


(native n)


(define (d)
  v)


(definition (e)
  v)


;;;
;;;; Reader
;;;


@w
(define (literals)
  '(2
    2.3
    +2
    -3
    5L
    #b1101
    #x0A
    #f
    #t
    #\a
    #(a b c)
    (a b c)
    x
    :x
    x:
    "x"
    #"x"#
    {Point 2 3}))


@w
(define (comments)
  v ;; x
  @comment x v)


@w
(define (functional-syntax)
  v
  (v v))


@w
(define (object-syntax)
  self
  (x~ v v)
  (~ v v))


@w
(define (specifier-syntax x <fx>)
  (let ((y <fx> v))
    v))


;;;
;;;; Syntaxes
;;;


@w
(define (binding)
  (let ((x v))
    (let* ((x v))
      (letrec ((x v))
        v)))
  (parameterize ((v v))
    v)
  (with ((x v))
    (with-closed ((x v))
      v))
  (bind (x) v
    (bind-optionals ((x v)) v
      (bind-keywords ((x v)) v
        (receive (x) v
          v)))))


@w
(define (functional)
  (lambda (x)
    v)
  (function (x)
    v))


@w
(define (quotation)
  'x
  (quote x)
  `(x ,v ,@v)
  (quasiquote (x (unquote v) (unquote-splicing v))))


@w
(define (logical)
  (and v)
  (or v)
  (essay v)
  (either v))


@w
(define (conditional)
  (if v
      v
    v)
  (when v
    v)
  (unless v
    v)
  (cond (v v)
        (else v))
  (case v
    ((x) v)
    (else v))
  (ecase v
    ((v) v)
    (else v))
  (typecase v
    ((v) v)
    (else v)))


@w
(define (control)
  (begin
    v)
  (prog1 v
    v)
  (catch v
    v)
  (unwind-protect
      v
    v)
  (delay v)
  (do ((x v))
    v
    v)
  (while v
    v))


@w
(define (assertion)
  (assert v)
  (assert-type v v)
  (error? v))


@w
(define (iteration)
  (loop (for x from v to v by v)
        (collect v)
        (do v)))


@w
(define (assignment)
  (set! v v)
  (increase! v v)
  (decrease! v v))


@w
(define (other)
  (atomic v)
  (tie v v)
  (construct v v)
  (time v))


;;;
;;;; Types
;;;


@w
(specialize inline (= s1 <symbol> s2 <symbol>) <bool>
  (eq? s1 s2))


@w
(define (t)
  (cast v v))


;;;
;;;; Foreign
;;;


@w
(constant c
  v)


@w
(enumeration E
  (A #x01)
  (B #x02))


@needs-to-be-compiled
(c-include "<stdlib.h>")


@needs-to-be-compiled
(c-initialize #<<end-of-c-code
N = 2;
end-of-c-code
)


@needs-to-be-compiled
(c-type UINT (native unsigned-int))


@needs-to-be-compiled
(c-structure S
  (UINT x))


@needs-to-be-compiled
(c-external Jazz bool (e) "JzE")


@needs-to-be-compiled
(definition WindowFromPoint
  (c-function (LPPOINT) HWND
    "___result_voidstar = WindowFromPoint(*___arg1);"))


@needs-to-be-compiled
(c-definition (call-process-hwnd-message hWnd uMsg wParam lParam) (HWND UINT WPARAM LPARAM) LRESULT "windowproc" "static"
  (process-hwnd-message hWnd uMsg wParam lParam))


@needs-to-be-compiled
(c-declare #<<end-of-c-code
...some c code...
end-of-c-code
)


@needs-to-be-compiled
(c-named-declare name
#<<end-of-c-code
...some c code...
end-of-c-code
)


;;;
;;;; Remoting
;;;


@w
(remotable-stub S
  
  
  (method public call value (get-id))
  (method public call value (get-name))
  (method public call (get-elements))
  (method public exec (set-repl-frame frame))
  (method public post (terminate frame)))


;;;
;;;; Runtime
;;;


@w
(define (runtime-errors)
  (let ((obj (new Object)))
    (x~ obj)))


;;;
;;;; Interface
;;;


(interface I
  
  
  (method public virtual abstract (i)))


;;;
;;;; Class
;;;


(class C extends Object implements I
  
  
  (method meta (cls)
    v)
  
  
  (slot private s initialize v)
  
  
  (property protected p initialize v accessors generate)
  
  
  (form
    (<install>))
  
  
  (define d
    v)
  
  
  (definition e
    v)
  
  
  (method (initialize)
    (nextmethod v)
    v)
  
  
  @w
  (method public inline (f)
    v)
  
  
  @w
  (method chained (g)
    v)
  
  
  @w
  (method synchronized (h)
    v)
  
  
  (method (i)
    v))


;;;
;;;; Generic
;;;


(class X extends Object)
(class Y extends X)


(generic (g (<X> x) p))

(specific (g (<X> x) p)
  v)

(specific (g (<Y> y) p)
  v)


(generic (h (<X> x) p)
  v)

(specific (h (<Y> y) p)
  v))
