;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; C4 Servlet
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2007
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.tutorials.c4.C4-Servlet jazz


(import (jazz.jml)
        (jazz.network)
        (jazz.tutorials)
        (jazz.tutorials.c4)
        (jazz.tutorials.game)
        (jazz.utilities))


(class C4-Servlet extends Game-Servlet
  
  
  (definition Pattern-Associations
    '(("C4" (<c4>))))
  
  
  (method (get-pattern-associations)
    Pattern-Associations)
  
  
  ;;;
  ;;;; C4
  ;;;
  
  
  (pattern (c4 node)
    (let ((request (get-request)))
      (let ((game (new C4-Game)))
          (register-players~ game (list (new C4-Human game GREEN) (new C4-AI game RED)))
        (when (=? (get-operation~ request) "POST")
          (deserialize-game request game)
          (let ((col (deserialize-col game (get-parameter~ request "col"))))
            (let ((move (available-move~ game col)))
              (play-move game move))))
        (let ((status (get-status~ game)))
          `(<html>
             (<head>
               (<link> type: "text/css" href: "css/c4.css" rel: "stylesheet")
               (<script> type: "text/javascript" src: "scripts/client.js")
               (<script> type: "text/javascript" src: "scripts/c4.js")
               (<title> "Connect 4"))
             (<body> background: "backgrounds/britestar.jpg"
               (<h2> "Welcome to Connect 4")
               (<form> name: "Form" method: "POST"
                 ,@(serialize-game game)
                 (<input> type: "hidden" name: "col"))
               (<center>
                 (<table> id: "maintable"
                   (<tr>
                     (<td> width: 30)
                     (<td>
                       (<table> cellspacing: "0" cellpadding: "0"
                         ,@(loop (for row from 0 below (get-board-rows~ game))
                                 (collect
                                   `(<tr>
                                      ,@(loop (for col from 0 below (get-board-columns~ game))
                                              (collect
                                                (let* ((square (get-square~ game row col))
                                                       (token (get-token~ square))
                                                       (image (format "images/c4/{a}.png"
                                                                      (cond ((= token EMPTY) "empty")
                                                                            ((= token GREEN) "green")
                                                                            ((= token RED) "red")))))
                                                  `(<td>
                                                     ,(if (and (eqv? status 'play) (= token EMPTY))
                                                          `(<a> href: "#" onclick: ,(format "playCol('{a}', 'Form', 'C4');" (serialize-col col))
                                                             (<img> src: ,image))
                                                        `(<img> src: ,image)))))))))))
                     (<td> width: 30)
                     (<td> valign: "top"
                       (<span>
                         (<br>)
                         (<a> href: "C4" "New game"))))))
               ,@(case status
                   ((win)
                    `((<h2> ,(format "{a} wins!!!" (present~ (get-winner~ game))))))
                   ((draw)
                    `((<h2> "Draw!")))
                   (else
                    '()))
               ,@(debug-info)))))))
  
  
  ;;;
  ;;;; Serialization
  ;;;
  
  
  (method (serialize-col col)
    (number->string col))
  
  
  (method (deserialize-col game value)
    (string->number value))
  
  
  (method (serialize-move move)
    (let ((row (get-row~ move))
          (col (get-col~ move)))
      (format "{s},{s}" row col)))
  
  
  (method (deserialize-move game value)
    (let ((pos (search value ",")))
      (let ((row (string->number (substring value 0 pos)))
            (col (string->number (substring value (+ pos 1) (cardinality value)))))
        (get-square~ game row col))))))
