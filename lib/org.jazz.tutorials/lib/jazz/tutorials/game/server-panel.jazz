;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Game Server Panel
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Joel Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2007
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;    Guillaume Cartier
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.tutorials.game.server-panel jazz


(import (jazz.io)
        (jazz.tutorials))


;;;
;;;; Panel
;;;


(definition (game-server-panel)
  (define (fatal message)
    (display message)
    (newline)
    (force-output)
    (exit 1))
  
  (let ((command-arguments (cdr (command-line))))
    (if (or (null? command-arguments)
            (equal? (car command-arguments) "-run"))
        (let ((server (new Game-Server service: 8080 root-directory: {Directory Jazz "lib" "org.jazz.tutorials" "site" "content"} default-resource: "/Games")))
          (panel-loop server))
      (fatal (format "Command-line parameters not yet supported: {s}" command-arguments)))))


;;;
;;;; Loop
;;;


(definition version
  "1.0")

(definition prompt
  "% ")

(definition display-backtrace?
  #f)


(definition (panel-loop server)
  (define (process-command command)
    (call-with-input-string command
      (lambda (input)
        (let ((command (read input))
              (arguments (read-all input read)))
          (case command
            ((start) (start-command arguments))
            ((stop) (stop-command arguments))
            ((restart) (restart-command arguments))
            ((info) (info-command arguments))
            ((debug) (debug-command arguments))
            ((help ?) (help-command arguments))
            ((quit) (quit-command arguments))
            (else (error "Unknown command: {s}" command)))))))
  
  (define (start-command arguments)
    (start-server server))
  
  (define (stop-command arguments)
    (stop-server server))
  
  (define (restart-command arguments)
    (restart-server server))
  
  (define (info-command arguments)
    (server-info server))
  
  (define (debug-command arguments)
    (server-debug server))
  
  (define (help-command arguments)
    (format :console "Commands are{%}")
    (format :console "  start        : Start the server{%}")
    (format :console "  stop         : Stop the server{%}")
    (format :console "  restart      : Restart the server{%}")
    (format :console "  info         : Show server information{%}")
    (format :console "  debug [flag] : Toggle or turn on/off debugging{%}")
    (format :console "  help or ?    : Display this help{%}")
    (format :console "  quit         : Quit the server panel{%}")
    (force-output))
  
  (define (quit-command arguments)
    (exit))
  
  (format :console "Game Server {a}{%}{%}" version)
  (force-output)
  
  (start-server server)
  
  (let (loop)
    (display prompt)
    (force-output)
    (let ((command (read-line)))
      (call/cc
        (lambda (stop)
          (with-exception-handler
            (lambda (exc)
              (display-exception exc)
              (if display-backtrace?
                  (continuation-capture
                    (lambda (cont)
                      (display-continuation-backtrace cont))))
              (stop #f))
            (lambda ()
              (unless (eof-object? command)
              (process-command command))))))
      (loop))))


;;;
;;;; Server
;;;


(definition (start-server server)
  (start~ server)
  (if (not (wait-started~ server error?: #f))
      (error "Unable to start server")
    (format :console "Server started{%}")))


(definition (stop-server server)
  (stop~ server)
  (if (not (wait-stopped~ server error?: #f))
      (error "Unable to stop server")
    (format :console "Server stopped{%}")))


(definition (restart-server server)
  (restart~ server)
  (if (not (wait-started~ server error?: #f))
      (error "Unable to restart server")
    (format :console "Server restarted{%}")))


(definition (server-info server)
  (format :console "Server {a}{%}" (get-state~ server)))


(definition (server-debug server)
  (let ((debug? (not (get-debug?~ server))))
    (set-debug?~ server debug?)
    (format :console "Server {a}being debugged{%}" (if debug? "" "not ")))))
