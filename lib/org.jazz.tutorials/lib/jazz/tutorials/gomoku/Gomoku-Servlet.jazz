;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Gomoku Servlet
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2007
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.tutorials.gomoku.Gomoku-Servlet jazz


(import (jazz.jml)
        (jazz.network)
        (jazz.tutorials)
        (jazz.tutorials.game)
        (jazz.tutorials.gomoku)
        (jazz.utilities))


(class Gomoku-Servlet extends Game-Servlet
  
  
  (definition Pattern-Associations
    '(("Gomoku" (<gomoku>))))
  
  
  (method (get-pattern-associations)
    Pattern-Associations)
  
  
  ;;;
  ;;;; Gomoku
  ;;;
  
  
  (method (effective-size size)
    (if (not size)
        'medium
      (cond ((=? size "small")
             'small)
            ((=? size "medium")
             'medium)
            ((=? size "large")
             'large))))
  
  
  (method (new-game size)
    (case size
      ((small) (new Gomoku-Game rows: 9 columns: 9))
      ((medium) (new Gomoku-Game rows: 13 columns: 13))
      ((large) (new Gomoku-Game rows: 19 columns: 19))))
  
  
  (pattern (gomoku node)
    (let ((request (get-request)))
      (let ((size (effective-size (get-parameter~ request "size" error?: #f))))
        (let ((game (new-game size)))
          (register-players~ game (list (new Gomoku-Human game BLACK) (new Gomoku-AI game WHITE)))
          (when (=? (get-operation~ request) "POST")
            (deserialize-game request game)
            (let ((move (deserialize-move game (get-parameter~ request "move"))))
              (play-move game move)))
          (let ((status (get-status~ game))
                (prefix (case size
                          ((small) "large")
                          ((medium) "medium")
                          ((large) "small"))))
            `(<html>
               (<head>
                 (<link> type: "text/css" href: "css/master.css" rel: "stylesheet")
                 (<script> type: "text/javascript" src: "scripts/client.js")
                 (<script> type: "text/javascript" src: "scripts/gomoku.js")
                 (<title> "Gomoku"))
               (<body> background: "backgrounds/wood.jpg"
                 (<h2> "Welcome to Gomoku")
                 (<form> name: "Form" method: "POST"
                   (<input> type: "hidden" name: "size" value: ,(symbol->string size))
                   ,@(serialize-game game)
                   (<input> type: "hidden" name: "move"))
                 (<table>
                   (<tr>
                     (<td> width: 30)
                     (<td>
                       (<table> cellspacing: "0" cellpadding: "0"
                         ,@(let ((last-row (- (get-board-rows~ game) 1))
                                 (last-col (- (get-board-columns~ game) 1)))
                             (loop (for row from 0 to last-row)
                                   (with vert (cond ((= row 0) "top")
                                                    ((= row last-row) "bottom")
                                                    (else "center")))
                                   (collect
                                     `(<tr>
                                        ,@(loop (for col from 0 to last-col)
                                                (with horz (cond ((= col 0) "left")
                                                                 ((= col last-col) "right")
                                                                 (else "center")))
                                                (collect
                                                  (let* ((square (get-square~ game row col))
                                                         (token (get-token~ square))
                                                         (name (if (and (moku-square? size row col) (= token EMPTY)) "moku" (format "{a}{a}" vert horz)))
                                                         (image (format "images/gomoku/{a}/{a}_{a}.png"
                                                                        prefix
                                                                        (cond ((= token EMPTY) "empty")
                                                                              ((= token WHITE) "white")
                                                                              ((= token BLACK) "black"))
                                                                        name)))
                                                    `(<td>
                                                       ,(if (and (eqv? status 'play) (= token EMPTY))
                                                            `(<a> href: "#" onclick: ,(format "playMove('{a}', 'Form', 'Gomoku');" (serialize-move square))
                                                               (<img> src: ,image))
                                                          `(<img> src: ,image))))))))))))
                     (<td> width: 10)
                     (<td> valign: "top"
                       (<span>
                         (<br>)
                         (<br>)
                         (<a> href: ,(format "Gomoku?size={a}" size) "New game")
                         (<br>)
                         (<a> href: "Gomoku?size=small" "9x9")
                         (<a> href: "Gomoku?size=medium" "13x13")
                         (<a> href: "Gomoku?size=large" "19x19")))))
                 ,@(case status
                     ((win)
                      `((<h2> ,(format "{a} wins!!!" (present~ (get-winner~ game))))))
                     ((draw)
                      `((<h2> "Draw!")))
                     (else
                      '()))
                 ,@(debug-info))))))))
  
  
  ;;;
  ;;;; Serialization
  ;;;
  
  
  (method (serialize-move move)
    (let ((row (get-row~ move))
          (col (get-col~ move)))
      (format "{s},{s}" row col)))
  
  
  (method (deserialize-move game value)
    (let ((pos (search value ",")))
      (let ((row (string->number (substring value 0 pos)))
            (col (string->number (substring value (+ pos 1) (cardinality value)))))
        (get-square~ game row col))))))
