;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; P4 Servlet
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2007
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.tutorials.p4.P4-Servlet jazz


(import (jazz.jml)
        (jazz.network)
        (jazz.tutorials)
        (jazz.tutorials.game)
        (jazz.tutorials.p4)
        (jazz.utilities))


(class P4-Servlet extends HTTP-Servlet
  
  
  (definition Pattern-Associations
    '(("P4" (<p4>))))
  
  
  (method (get-pattern-associations)
    Pattern-Associations)
  
  
  ;;;
  ;;;; P4
  ;;;
  
  
  (pattern (p4 node)
    (let ((request (get-request)))
      (let ((game (new P4-Game)))
          (register-players~ game (list (new P4-Human) (new P4-AI game RED)))
        (when (=? (get-operation~ request) "POST")
          (deserialize-game request game)
          (let ((move (deserialize-move game (get-parameter~ request "move"))))
            (play-move game move)))
        (let ((status (get-status~ game)))
          `(<html>
             (<head>
               (<link> type: "text/css" href: "css/p4.css" rel: "stylesheet")
               (<script> type: "text/javascript" src: "scripts/client.js")
               (<script> type: "text/javascript" src: "scripts/p4.js")
               (<title> "Puissance 4"))
             (<body> background: "backgrounds/britestar.jpg"
               (<h2> "Bienvenue sur puissance 4")
               (<form> name: "Form" method: "POST"
                 ,@(serialize-game game)
                 (<input> type: "hidden" name: "move"))
               (<center>
                 (<table> id: "maintable"
                   (<tr>
                     (<td> width: 30)
                     (<td>
                       (<table> cellspacing: "0" cellpadding: "0"
                         ,@(loop (for row from 0 below (get-board-rows~ game))
                                 (collect
                                   `(<tr>
                                      ,@(loop (for col from 0 below (get-board-columns~ game))
                                              (collect
                                                (let* ((square (get-square~ game row col))
                                                       (token (get-token~ square))
                                                       (image (format "images/p4/{a}.png"
                                                                      (cond ((= token EMPTY) "empty")
                                                                            ((= token GREEN) "green")
                                                                            ((= token RED) "red")))))
                                                  `(<td>
                                                     ,(if (and (eqv? status 'play) (= token EMPTY))
                                                          `(<a> href: "#" onclick: ,(format "playMove('{a}', 'Form', 'P4');" (serialize-move col))
                                                             (<img> src: ,image))
                                                        `(<img> src: ,image)))))))))))
                     (<td> width: 30)
                     (<td> valign: "top"
                       (<span>
                         (<br>)
                         (<a> href: "P4" "Nouvelle partie"))))))
               ,@(case status
                   ((win)
                    `((<h2> ,(format "Victoire de l'{a}!!!" (get-name~ (get-winner~ game))))))
                   ((draw)
                    `((<h2> "Partie nulle!")))
                   (else
                    '()))
               ,@(debug-info)))))))
  
  
  ;;;
  ;;;; Play
  ;;;
  
  
  (method (play-move game move)
    (play-move~ game move)
    (when (eq? (get-status~ game) 'play)
      (let ((player (get-next-player~ game)))
        (when (is? player Computer-Player)
          (let ((move (computer-move~ player)))
            (play-move~ game move))))))
  
  
  ;;;
  ;;;; Serialization
  ;;;
  
  
  (method (serialize-game game)
    (serialize-moves game))
  
  
  (method (deserialize-game request game)
    (deserialize-moves request game))
  
  
  (method (serialize-moves game)
    (loop (for move in (get-moves~ game))
          (for rank from 0)
          (collect
            `(<input> type: "hidden" name: ,(format "move{a}" rank) value: ,(serialize-move move)))))
  
  
  (method (deserialize-moves request game)
    (let (loop (rank 0))
      (let ((value (get-parameter~ request (format "move{a}" rank) error?: #f)))
        (when value
          (let ((move (deserialize-move game value)))
            (play-move~ game move))
          (loop (+ rank 1))))))
  
  
  (method (serialize-move move)
    (number->string move))
  
  
  (method (deserialize-move game value)
    (string->number value))))
