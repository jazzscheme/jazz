;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Game Pages
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.tutorials.game.Game-Pages jazz


(import (jazz.jml)
        (jazz.network)
        (jazz.tutorials)
        (jazz.tutorials.game)
        (jazz.utilities))


(class Game-Pages extends HTTP-Pages
  
  
  ;;;
  ;;;; Play
  ;;;
  
  
  (method (play-players game move)
    (let (loop (move move))
      (when (eq? (get-status~ game) 'play)
        (let ((player (get-next-player~ game)))
          (if (computer?~ player)
              (begin
                (play-move~ game (computer-move~ player))
                (unless (eq? move 'one)
                  (loop move)))
            (when move
              (play-move~ game move)
              (loop {})))))))

  
  ;;;
  ;;;; Parameters
  ;;;
    
  
  (method (effective-players players)
    (either players "hc"))
  
  
  (method (effective-current value)
    (if (or (not value) (empty-string? value))
        #f
      (string->number value)))
  
  
  (method (effective-goto game value)
    (if (or (not value) (empty-string? value))
        #f
      (string->number value)))

  
  ;;;
  ;;;; Serialization
  ;;;
  
  
  (method (serialize-game game)
    (serialize-moves game))
  
  
  (method (deserialize-game request game goto current)
    (deserialize-moves request game goto current))
  
  
  (method (serialize-moves game)
    (loop (for move in (get-moves~ game))
          (for rank from 0)
          (collect
            `(<input> type: "hidden" name: ,(format "move{a}" rank) value: ,(serialize-move move)))))
  
  
  (method (deserialize-moves request game goto current)
    (let (loop (rank 0))
      (let ((value (get-parameter~ request (format "move{a}" rank) error?: #f)))
        (when value
          (let ((move (deserialize-move game value)))
            (if (or (not goto) (<= rank goto))
                (play-move~ game move)
              (append-forward-history~ game move)))
          (when (or goto (< rank current))
            (loop (+ rank 1)))))))
  
  
  (method protected virtual (serialize-move move)
    )
  
  
  (method protected virtual (deserialize-move game value)
    )))
