<html>

<head>
  <link href="css/master.css" rel="stylesheet" type="text/css"/>
  <title>Installation</title>
</head>

<body>
<div id="page">
  <h1 id="title">JazzScheme</h1>
  <div id="sectionnav">
    <a class="section" href="index.htm">Home</a>
    <a class="section" href="news.htm">News</a>
    <a class="section" href="features.htm">Features</a>
    <a class="section" href="screenshots.htm">Screenshots</a>
    <a class="section" href="documentation.htm">Documentation</a>
    <a class="subsection" href="installation.htm">
      <b>Installation</b>
    </a>
    <a class="subsection" href="tutorials.htm">Tutorials</a>
    <a class="subsection" href="jazz-manual.htm">Jazz Manual</a>
    <a class="subsection" href="jedi-manual.htm">Jedi Manual</a>
    <a class="section" href="development.htm">Development</a>
    <a class="section" href="download.htm">Download</a>
  </div>
  <div id="content">
    <div>
      <a name="#f"></a>
      <h3>Installation</h3>
      <ul>
        <li>
          <a href="installation.htm#installation.dependencies">Dependencies</a>
        </li>
        <li>
          <a href="installation.htm#installation.sources">Sources</a>
        </li>
        <li>
          <a href="installation.htm#installation.building">Building</a>
        </li>
        <li>
          <a href="installation.htm#installation.examples">Examples</a>
        </li>
        <li>
          <a href="installation.htm#installation.list">List</a>
        </li>
        <li>
          <a href="installation.htm#installation.delete">Delete</a>
        </li>
        <li>
          <a href="installation.htm#installation.configure">Configure</a>
        </li>
        <li>
          <a href="installation.htm#installation.make">Make</a>
        </li>
        <li>
          <a href="installation.htm#installation.install">Install</a>
        </li>
        <li>
          <a href="installation.htm#installation.quit">Quit</a>
        </li>
      </ul>
    </div>
    <div>
      <a name="installation.dependencies"></a>
      <h3>Dependencies</h3>
      <span>
        <p></p>
        <b>Gambit</b>
        <p></p>
You need to install the latest version of Gambit. You will also need to pull all the latest changes from the Gambit repository as Marc Feely, Gambit's author, is often fixing bugs and adding new features to support the JazzScheme development. Be sure you have made a 'make bootstrap' for Gambit before pulling. This is documented on Gambit's website but is a costly gotcha as it will force you to reinstall if you forget to do it. See Gambit's INSTALL.txt file for details on installing Gambit and see Gambit's website for details on accessing Gambit's public repository: http://dynamo.iro.umontreal.ca/~gambit/wiki/index.php/Source_code_repository        <p></p>
Note that JazzScheme relies on very few Gambit specific features and was designed with ease of porting to other Scheme systems in mind.         <p></p>
All compilation is done through the underlying Scheme. As Gambit uses GCC for backend, please refer to Gambit's documentation if you're experiencing GCC problems.       </span>
      <span>
        <p></p>
        <b>Cairo</b>
        <p></p>
If you plan on doing GUI development, you will need to install Cairo http://cairographics.org/. On Windows we precompiled it for you as a dll. On other systems, you should install it the usual way (with your package manager) and Jazz will use pkg-config to find the various paths. If you are on Mac, you must install macports from http://www.macports.org/. If you decide to compile your own versions of the libraries, pkg-config will need to know where they are installed. You should set the environment variable PKG_CONFIG_PATH to the appropriate directories.       </span>
      <span>
        <p></p>
        <b>X11 on the Mac</b>
        <p></p>
Due to a bug in Apple's installed version of X11, if you plan on using X11 on the Mac, you will need to install the latest X11 version from http://xquartz.macosforge.org/. This is the official apple site for X11 on the Mac. Note that X11 needs to be started before launching Jedi.       </span>
    </div>
    <div>
      <a name="installation.sources"></a>
      <h3>Sources</h3>
JazzScheme uses Git to store all development files. You will need to install Git to access the Jazz repository.       <span>
        <p></p>
        <b>Repository</b>
        <p></p>
The repository is currently hosted at git://64.235.209.250/git/jazz        <p></p>
If you get an error like "fatal: unable to connect a socket (Connection timed out)" it may be that you are behind a firewall that blocks outbound connections on Git's port 9418.       </span>
      <span>
        <p></p>
        <b>Help</b>
        <p></p>
Some usefull Git links :        <ul>
          <li>
            <a href="http://www.kernel.org/pub/software/scm/git/docs/">Documentation</a>
          </li>
          <li>
            <a href="http://www.kernel.org/pub/software/scm/git/docs/user-manual.html">User Manual</a>
          </li>
          <li>
            <a href="http://www.kernel.org/pub/software/scm/git/docs/gittutorial.html">Tutorial</a>
          </li>
        </ul>
      </span>
      <span>
        <p></p>
        <b>User Scenario</b>
        <p></p>
        <xmp>  ;; clone the JazzScheme repository (only once)
  git clone git://64.235.209.250/git/jazz
  cd jazz

  ;; After you clone the public repo, you should never modify the master
  ;; branch as it will make subsequent pulls more prone to failure. This can
  ;; easily happen when experimenting around. You should always work in your
  ;; own branch, lets say 'work'
  git branch work
  git checkout work

  ;; pull from time to time to get the latest revision
  git checkout master
  git pull
  git checkout work
  git rebase master
  <optional step: fix any rebase conflicts>
    <edit and resolve conflicts in all the conflicting files>
    <git add the resolved files>
    git rebase --continue
    <see http://www.kernel.org/pub/software/scm/git/docs/git-rebase.html for
    details></xmp>
      </span>
      <span>
        <p></p>
        <b>Contributor Scenario</b>
        <p></p>
        <xmp>  ;; clone the JazzScheme repository (only once)
  git clone git://64.235.209.250/git/jazz
  cd jazz

  git config user.email &quot;you@email.com&quot;
  git config user.name &quot;Your Name&quot;

  ;; After you clone the public repo, you should never modify the master
  ;; branch as it will be used by git-rebase. You should always work in your
  ;; own branch, lets say 'work'
  git branch work
  git checkout work

  ;; commit any changes you have made
  ;; the -a option is necessary if you added any new file to the Jazz tree
  git commit -a -m &quot;Some nice message describing your changes&quot;

  ;; pull from time to time to get the latest revision and rebase your changes
  git checkout master
  git pull
  git checkout work
  git rebase master
  <optional step: fix any rebase conflicts>
    <edit and resolve conflicts in all the conflicting files>
    <git add the resolved files>
    git rebase --continue
    <see http://www.kernel.org/pub/software/scm/git/docs/git-rebase.html for
    details>

  ;; send contributions as a series of patch files
  ;; make sure you do the previous step of rebasing your changes just before
  ;; doing this as this will greatly minimize risks of conflicts when the Jazz
  ;; maintainers apply your patches to the central repository
  git format-patch origin
  <email generated patch files to gcartier@jazzscheme.org></xmp>
      </span>
      <span>
        <p></p>
        <b>Maintainer Scenario</b>
        <p></p>
        <xmp>  ;; publish some changes
  git push pub master

  ;; merge contributions
  git am -3 *.patch
  <optional step: fix any am conflicts>
    git am --resolved</xmp>
      </span>
    </div>
    <div>
      <a name="installation.building"></a>
      <h3>Building</h3>
Building Jazz follows the usual configure / make methodology. The only unusual thing is that, as the underlying Scheme already represents a platform independant abstraction, there is no need to use the low-level GNU tools. The build system is fully implemented using the underlying Scheme.       <p></p>
To load the build system using :      <p></p>
      <span>
        <p></p>
        <b>Gambit</b>
        <p></p>
Just launch gsc from Jazz's source install directory. The .gambcini file located there will automatically load the build system.       </span>
    </div>
    <div>
      <a name="installation.examples"></a>
      <h3>Examples</h3>
      <span>
        <p></p>
        <b>Building the Jazz kernel and core modules</b>
        <p></p>
        <p></p>
        <xmp>  gsc
  Jazz 2.0b1 Build System

  $ configure
  <default>
    system: gambit
    platform: windows
    safety: release

  $ make
  ...</xmp>
      </span>
      <span>
        <p></p>
        <b>Building Jedi's critical modules</b>
        <p></p>
        <xmp>  gsc
  Jazz 2.0b1 Build System

  $ make jedi
  ...</xmp>
      </span>
    </div>
    <div>
      <a name="installation.list"></a>
      <h3>List</h3>
List configurations.      <p></p>
      <xmp>list</xmp>
    </div>
    <div>
      <a name="installation.delete"></a>
      <h3>Delete</h3>
Delete a configuration.      <p></p>
      <xmp>delete [configuration]</xmp>
    </div>
    <div>
      <a name="installation.configure"></a>
      <h3>Configure</h3>
Register a new configuration.       <p></p>
To support multiple configurations, configurations can be optionaly be named.      <p></p>
Configurations are loaded / saved from the .configurations file located at the root. Using configure is basically an easy way to edit the .configurations file.       <p></p>
      <xmp>configure
  [name: name]
  [system: system]
  [platform: platform]
  [windowing: windowing]
  [safety: safety]
  [options: options]
  [install: install]

name
  The optional configuration name. Must be alphanumeric.

system
  The underlying Scheme system (automatically determined)
  - gambit (the only fully supported scheme system at the moment)
  - chicken
  - ...

platform
  The platform (will try and guess based on system type)
  - mac
  - windows
  - unix

windowing
  The windowing system (will try and guess based on system type)
  - carbon (development started)
  - x11 (almost there)
  - #f (use default platform windowing)

safety
  The runtime safety level
  - core
      Core debug mode for debugging JazzScheme itself. Adds tests to make the
      kernel and core safe.
  - debug
      Standard debug mode with tests to make user code safe. This is the
      recommanded safety for development.
  - release (the default)
      Release mode for stable user code with no safety tests. If you plan on
      using the Jedi IDE, you may want to build using this safety level as it
      will run alot faster.

optimize?
  This option adds optimization declares to the source code. Note that this
  will make debugging somewhat harder as the generated code will have gone
  through some transformations. At the moment it adds: proper-tail-calls,
  constant-fold and lambda-lift.
  - #f
  - #t (the default)

include-source?
  Include source in compiled code by compiling with Gambit's 'debug-source'
  option. This option is usefull for using the statprof statistical profiler
  with compiled files. Note that using this option will result in much larger
  object files and due to a flaw in gcc also result in longer compile times.
  - #f (the default)
  - #t

interpret?
  An advanced option for Jazz developers to enable loading the kernel fully
  interpreted.
  - #f (the default)
  - #t

install
  The installation directory for make defaulting to the architecture name, for
  instance GambitWindowsDebug (see below for details).

  JazzScheme uses a directory structure to support cross-compilation accross
  multiple architectures. Architectures are subdirectories of the bin directory
  that regroup binary compatible files like executables, compilation results,
  libraries, ...

  An architecture name is determined by the following elements :
  - system
  - platform
  - windowing
  - safety
  - options</xmp>
    </div>
    <div>
      <a name="installation.make"></a>
      <h3>Make</h3>
Build target for the active configuration.      <p></p>
      <xmp>make [target]

target
  The target to build which defaults to 'jazz'.

  To support multiple configurations, a target can also be specified as
  target@configuration

  - kernel    : the module system
  - core      : the core modules
  - jazz      : the jazz language modules
  - platform  : the platform modules
  - all       : jazz's modules
  - jedi      : jedi's critical modules
  - <product> : builds <product></xmp>
    </div>
    <div>
      <a name="installation.install"></a>
      <h3>Install</h3>
There is no equivalent of make install due to the complexity of supporting multiple systems and user preferences. Since this step is also very simple to do manually, installing the built configuration is left to the user.       <p></p>
Depending on your system you will usually      <ul>
        <li>Copy the Jazz runtime files <need to detail this> to a standard system location or</li>
        <li>Modify your environment variables to point to the location of the Jazz executable</li>
      </ul>
      <p></p>
Note that at this time, modifying your environment variables is the preferred approach as some modules like Jedi are still dependent on source files.    </div>
    <div>
      <a name="installation.quit"></a>
      <h3>Quit</h3>
Quit the build system.    </div>
    <div id="footer">
      <p>Copyright &copy; 1996-2008 Guillaume Cartier</p>
    </div>
  </div>
</div>
</body>

</html>
