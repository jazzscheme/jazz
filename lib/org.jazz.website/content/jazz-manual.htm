<html>

<head>
  <link href="css/master.css" rel="stylesheet" type="text/css"/>
  <title>Jazz Platform</title>
</head>

<body>
<div id="page">
  <h1 id="title">JazzScheme</h1>
  <div id="sectionnav">
    <a class="section" href="index.htm">Home</a>
    <a class="section" href="news.htm">News</a>
    <a class="section" href="features.htm">Features</a>
    <a class="section" href="screenshots.htm">Screenshots</a>
    <a class="section" href="documentation.htm">Documentation</a>
    <a class="subsection" href="installation.htm">Installation</a>
    <a class="subsection" href="tutorials.htm">Tutorials</a>
    <a class="subsection" href="kernel-manual.htm">Module System</a>
    <a class="subsection" href="jazz-manual.htm">
      <b>Jazz Platform</b>
    </a>
    <a class="subsection" href="jedi-manual.htm">Jedi IDE</a>
    <a class="section" href="development.htm">Development</a>
    <a class="section" href="download.htm">Download</a>
  </div>
  <div id="content">
    <div style="margin-top: 22;"></div>
    <h3 class="summary">Jazz Platform</h3>
    <div class="summary_toc">
      <a href="#TOC">Table of Contents</a>
    </div>
    <div class="summary_index">
      <a href="#INDEX">Index</a>
    </div>
    <div>
      <div class="summary1">
        <a href="#overview">1. Overview</a>
      </div>
    </div>
    <div>
      <div class="summary1">
        <a href="#lexical">2. Lexical Syntax</a>
      </div>
    </div>
    <div>
      <div class="summary1">
        <a href="#functional">3. Functional Programming</a>
      </div>
    </div>
    <div>
      <div class="summary1">
        <a href="#object-oriented">4. Object-Oriented Programming</a>
      </div>
    </div>
    <div>
      <div class="summary1">
        <a href="#component">5. Component Programming</a>
      </div>
    </div>
    <div>
      <div class="summary1">
        <a href="#types">6. Type Annotations</a>
      </div>
    </div>
    <div>
      <div class="summary1">
        <a href="#exceptions">7. Exceptions</a>
      </div>
    </div>
    <div>
      <div class="summary1">
        <a href="#input/output">8. Input / Output</a>
      </div>
    </div>
    <div>
      <div class="summary1">
        <a href="#regular-expressions">9. Regular Expressions</a>
      </div>
    </div>
    <div>
      <div class="summary1">
        <a href="#date/time">10. Date / Time</a>
      </div>
    </div>
    <div>
      <div class="summary1">
        <a href="#markup">11. Markup Language</a>
      </div>
    </div>
    <div>
      <div class="summary1">
        <a href="#database">12. Database</a>
      </div>
    </div>
    <div>
      <div class="summary1">
        <a href="#profiling">13. Profiling</a>
      </div>
    </div>
    <div>
      <div class="summary1">
        <a href="#remoting">14. Remoting</a>
      </div>
    </div>
    <div>
      <div class="summary1">
        <a href="#system">15. System</a>
      </div>
    </div>
    <div>
      <div class="summary1">
        <a href="#user-interface">16. User Interface</a>
      </div>
    </div>
    <div>
      <div class="summary1">
        <a href="#c-interface">17. C Interface</a>
      </div>
    </div>
    <a name="overview"></a>
    <h3 class="section1">1. Overview</h3>
    <p>Jazz is a programming language based on Scheme. </p>
    <div>
      <p class="definition">
<b>Scheme</b></p>
      <p>
Jazz conforms to the R5RS Scheme standard and implements all optional features. For documentation, see <a href="http://www.schemers.org/Documents/Standards/R5RS/HTML/">R5RS Documentation</a></p>
    </div>
    <div>
      <p class="definition">
<b>Gambit</b></p>
      <p>
Jazz is built on top of the Gambit system. As such, it has access to every feature of Gambit. For documentation, see <a href="http://www.iro.umontreal.ca/~gambit/doc/gambit-c.html">Gambit Manual</a></p>
    </div>
    <a name="scheme"></a>
    <h4 class="section2">1.1. Scheme</h4>
Jazz fully supports every Scheme feature of the underlying Scheme system. By using Scheme's load primitive, you can load any existing Scheme code.     <a name="syntax"></a>
    <h4 class="section2">1.2. Language Syntax</h4>
    <div>
      <p class="definition">
<b>Variable value</b></p>
      <p>
<code>x</code></p>
    </div>
    <p></p>
    <div>
      <p class="definition">
<b>Function invocation</b></p>
      <p>
<code>(f x y)</code></p>
    </div>
    <p></p>
    <div>
      <p class="definition">
<b>Method invocation</b></p>
      <p>
<xmp>(f~ obj x y)</xmp></p>
    </div>
    <p></p>
    <p>Examples:</p>
    <ul>
      <li>
        <code>(get-size~ window)</code>
      </li>
      <li>
        <code>(invalidate-view~ (get-parent~ view))</code>
      </li>
    </ul>
    <a name="SEC1"></a>
    <h4 class="section3">1.2.1. Constants</h4>
    <div>
      <p class="definition">
<b>Numeric</b></p>
      <p>Numeric constants can be integer or real values.</p>
      <p>Examples:</p>
      <ul>
        <li>
          <code>2</code>
        </li>
        <li>
          <code>-5</code>
        </li>
        <li>
          <code>6.75</code>
        </li>
      </ul>
    </div>
    <div>
      <p class="definition">
<b>String</b></p>
      <p>String constants can be delimited by either " or #" "# where the second form is usefull to enclose large text without having to escape special characters.</p>
      <p>Examples:</p>
      <ul>
        <li>
          <code>"Hello World!"</code>
        </li>
        <li>
          <code>#"This is a more complex string containing special characters like # \ " without escaping"#</code>
        </li>
      </ul>
    </div>
    <div>
      <p class="definition">
<b>Symbol</b></p>
      <p>Examples:</p>
      <ul>
        <li>
          <code>'x</code>
        </li>
        <li>
          <code>(quote y)</code>
        </li>
      </ul>
      <p>Note that the quote is necessary to distinguish from taking a variable's value</p>
    </div>
    <div>
      <p class="definition">
<b>List</b></p>
      <p>Examples:</p>
      <ul>
        <li>
          <code>'(a b c)</code>
        </li>
        <li>
          <code>(quote (1 2))</code>
        </li>
      </ul>
      <p>Note that the quote is necessary to distinguish from invoking as a function call</p>
    </div>
    <div>
      <p class="definition">
<b>User</b></p>
      <p>Jazz supports a powerfull concept where any class can define it's own literal constants using the following syntax: {class-name ...}. This integrates classes fully with the reader and printer.</p>
      <p>Examples:</p>
      <ul>
        <li>
          <code>{Point 2 3}</code>
        </li>
        <li>
          <code>{Dimension 100 100}</code>
        </li>
        <li>
          <code>{Color name: Red}</code>
        </li>
        <li>
          <code>{Font name: Code}</code>
        </li>
      </ul>
    </div>
    <a name="toplevel_syntax"></a>
    <h4 class="section2">1.3. Toplevel Syntax</h4>
    <a name="module"></a>
    <p class="form-definition">
<b>module</b> <i>module-name ...</i></p>
    <p></p>
    <a name="library"></a>
    <p class="form-definition">
<b>library</b> <i>library-name ...</i></p>
    <p></p>
    <a name="functional_syntax"></a>
    <h4 class="section2">1.4. Functional Syntax</h4>
    <a name="definition"></a>
    <p class="form-definition">
<b>definition</b> <i>name value</i></p>
    <p></p>
    <p>A definition associates name to value inside the defining unit. A definition is as field and as such is stored in the class and doesn't take any space in instances. At class instantiation, value is evaluated in an empty lexical environment and in an empty object environment.</p>
    <a name="object_oriented_syntax"></a>
    <h4 class="section2">1.5. Object-Oriented Syntax</h4>
    <a name="class"></a>
    <p class="form-definition">
<b>class</b> <i>extends implements uses ...</i></p>
    <p></p>
    <p>Jazz uses a single inheritance model where a class can extend only one superclass. A class can implement any number of interfaces.</p>
    <a name="interface"></a>
    <p class="form-definition">
<b>interface</b> <i>extends uses ...</i></p>
    <p></p>
    <p>An interface defines a new type but cannot contain code.</p>
    <a name="method"></a>
    <p class="form-definition">
<b>method</b> <i>{modifiers} (name . parameters) {return-type} . body</i></p>
    <p></p>
    <p>A method is where code resides.</p>
    <a name="slot"></a>
    <p class="form-definition">
<b>slot</b> <i>name <initialize> <initial-value></i></p>
    <p></p>
    <p>A slot is a field that defines the structure of the instances of a class.</p>
    <a name="property"></a>
    <p class="form-definition">
<b>property</b> <i>name <initialize> <initial-value> <getter> <getter-name> <setter> <setter-name></i></p>
    <p></p>
    <p>A property is a slot that can specify a getter and a setter.</p>
    <a name="cffi_syntax"></a>
    <h4 class="section2">1.6. CFFI Syntax</h4>
    <a name="constant"></a>
    <p class="form-definition">
<b>constant</b> <i>name value</i></p>
    <p></p>
    <p>A definition that cannot be modified. Note that currently, a constant definition is simply a definition.</p>
    <p></p>
    <p>Constant definitions are currently used mainly to access the Windows API.</p>
    <a name="enumeration"></a>
    <p class="form-definition">
<b>enumeration</b> <i>enumeration-name (name1 value1) (name2 value2) ...</i></p>
    <p></p>
    <p>An enumeration definition. This enumeration will create a definition enumeration-name containing an Enumeration object that can be queried at runtime and create constant definitions name1 : value1, name2 : value2, ...</p>
    <p></p>
    <p>Enumeration definitions are currently used mainly to access the Windows API.</p>
    <a name="structure"></a>
    <p class="form-definition">
<b>structure</b> <i>structure-name (type1 field1 <n1>) (type2 field2 <n2>) ...</i></p>
    <p></p>
    <p>A structure is a template that can be used to create records containing primitive types. Here, type is any primitive type and field is a symbol that can be used to access this field is records of type structure-name. If the optional n is specified, then an array of n elements of type will be inserted.</p>
    <p></p>
    <p>Structure definitions are currently used mainly to access the Windows API.</p>
    <a name="external"></a>
    <p class="form-definition">
<b>external</b> <i>module-name return-type (name param1 param2 ...) <entry-name></i></p>
    <p></p>
    <p>An external entry point into a Windows module, i.e. a dynamic-link library or an executable.</p>
    <p></p>
    <p>External definitions are currently used mainly to access the Jazz runtime and the Windows API.</p>
    <a name="naming"></a>
    <h4 class="section2">1.7. Naming Conventions</h4>
    <div>
      <p class="definition">
<b>Comments</b></p>
      <ul>
        <li><span>; Code comment : put at the end of a line of code to document it.</span></li>
        <li><span>;; Method comment : documents a method and many lines may be used.</span></li>
        <li><span>;;; Section comment : documents a section.</span></li>
        <li><span>;;;; Chapter comment : specifies a section title naming and will be gathered in a chapter.</span></li>
      </ul>
    </div>
    <p></p>
    <p></p>
    <div>
      <p class="definition">
<b>Modules & Libraries</b></p>
      <p>Modules and libraries names are lowercase separated .</p>
      <ul>
        <li>
          <span>
            <code>jazz.ui</code>
          </span>
        </li>
        <li>
          <span>
            <code>jedi.product</code>
          </span>
        </li>
      </ul>
    </div>
    <p></p>
    <p></p>
    <div>
      <p class="definition">
<b>Classes & Interfaces</b></p>
      <p>Class & Interfaces names are capitalized</p>
      <ul>
        <li>
          <span>
            <code>View</code>
          </span>
        </li>
        <li>
          <span>
            <code>Java-Text</code>
          </span>
        </li>
      </ul>
    </div>
    <p></p>
    <p></p>
    <div>
      <p class="definition">
<b>Methods</b></p>
      <p>Methods are in lowercase separated by -</p>
      <ul>
        <li>
          <span>
            <code>get-application</code>
          </span>
        </li>
      </ul>
    </div>
    <p></p>
    <p></p>
    <div>
      <p class="definition">
<b>Predicates</b></p>
      <p>Predicates end with ?</p>
      <ul>
        <li>
          <span>
            <code>eq?</code>
          </span>
        </li>
        <li>
          <span>
            <code>string?</code>
          </span>
        </li>
      </ul>
    </div>
    <p></p>
    <p></p>
    <div>
      <p class="definition">
<b>Mutators</b></p>
      <p>Destructive functions end with !</p>
      <ul>
        <li>
          <span>
            <code>set-cdr!</code>
          </span>
        </li>
        <li>
          <span>
            <code>append!</code>
          </span>
        </li>
      </ul>
    </div>
    <p></p>
    <p></p>
    <div>
      <p class="definition">
<b>Convertors</b></p>
      <p>Type conversion functions have -> in their name</p>
      <ul>
        <li>
          <span>
            <code>symbol->string</code>
          </span>
        </li>
        <li>
          <span>
            <code>symbol->keyword</code>
          </span>
        </li>
      </ul>
    </div>
    <a name="functions"></a>
    <h4 class="section2">1.8. Functions</h4>
    <p>In Jazz, functions are first order objects and can be freely manipulated as any other objects. They can be passed as parameters, stored in variables, ...Anyone who says functions are not object-oriented is just showing they have'nt really went far enough in their understanding of the problem!</p>
    <p></p>
    <div>
      <p class="definition">
<b>Parameters</b></p>
      <p>On top of the standard positional parameter passing scheme, Jazz offers the following:</p>
      <ul>
        <li><span>Variable number of parameters</span></li>
        <li><span>Optional parameters</span></li>
        <li><span>Keyword parameters</span></li>
      </ul>
    </div>
    <a name="lists"></a>
    <h4 class="section2">1.9. Lists</h4>
    <p>Lists are the most flexible data structure available in Jazz. They can grow to accommodate any number of elements and this very efficiently. As they are sequences, they are supported by a large number of manipulation functions</p>
    <a name="symbols"></a>
    <h4 class="section2">1.10. Symbols</h4>
    <p>Jazz is symbolic language where symbols are used extensively. Symbols can be used as a very efficient higher level abstraction replacement for integer enumerations</p>
    <a name="objects"></a>
    <h4 class="section2">1.11. Objects</h4>
    <p>Jazz offers an object-oriented layer with :</p>
    <ul>
      <li><span>Classes with single inheritance and multiple interfaces implemented</span></li>
      <li><span>Metaclasses</span></li>
      <li><span>Generic multi-dispatch methods 'a la' CommonLisp</span></li>
      <li><span>Single-dispatch 'a la' Java</span></li>
    </ul>
    <a name="components"></a>
    <h4 class="section2">1.12. Components</h4>
    <p>One of the biggest strength of components is the full integration of the programming metaphor with the visual design metaphor they enable. By seamlessly intermixing programming code and designer data, components brings all the power of programming tools to the design part.</p>
    <a name="formatted_output"></a>
    <h4 class="section2">1.13. Formatted Output</h4>
    <p>Implements formatted output.</p>
    <p></p>
    <div>
      <p class="definition">
<b>Directives</b></p>
      <table class="format-directives">
        <tr>
          <td>ASCII</td>
          <td>a</td>
          <td>human readable</td>
        </tr>
        <tr>
          <td>SEXPR</td>
          <td>s</td>
          <td>reader readable</td>
        </tr>
        <tr>
          <td>TEXT</td>
          <td>t</td>
          <td>textual representation</td>
        </tr>
        <tr>
          <td>PRINT</td>
          <td>p</td>
          <td>ascii or sexpr or text</td>
        </tr>
        <tr>
          <td>REAL</td>
          <td>r</td>
          <td>real number</td>
        </tr>
        <tr>
          <td>CHAR</td>
          <td>h</td>
          <td>character</td>
        </tr>
        <tr>
          <td>LIST</td>
          <td>l</td>
          <td>remove parenthesis</td>
        </tr>
        <tr>
          <td>PROPERTIES</td>
          <td>k</td>
          <td>properties list</td>
        </tr>
        <tr>
          <td>UNSIGNED</td>
          <td>u</td>
          <td>unsigned integer</td>
        </tr>
        <tr>
          <td>HEXADECIMAL</td>
          <td>x</td>
          <td>hexadecimal integer</td>
        </tr>
        <tr>
          <td>COLUMN</td>
          <td>c</td>
          <td>column</td>
        </tr>
        <tr>
          <td>TAB</td>
          <td>&</td>
          <td>insert tab character</td>
        </tr>
        <tr>
          <td>NEW_LINE</td>
          <td>%</td>
          <td>insert new line</td>
        </tr>
        <tr>
          <td>LOCALIZE</td>
          <td>z</td>
          <td>localized string</td>
        </tr>
        <tr>
          <td>FORMATTED</td>
          <td>f</td>
          <td>formatted control</td>
        </tr>
      </table>
    </div>
    <p></p>
    <div>
      <p class="definition">
<b>Parameters</b></p>
      <p>{x :a value :b value ?}</p>
      <p>:v -> takes the info from the parameters</p>
      <p></p>
      <p>Examples:</p>
      <ul>
        <li>
          <code>(format :string "{_ 5}")</code>
        </li>
        <li>
          <code>(format :string "{a :width :v :justify right}" bonjour 20)</code>
        </li>
      </ul>
      <p></p>
      <p>Parameters can be optional and can be keyword based.</p>
      <ul>
        <li><span>list?</span></li>
        <li><span>width</span></li>
        <li><span>justify -> :left :right</span></li>
        <li><span>padding</span></li>
        <li><span>separator</span></li>
        <li><span>last-separator</span></li>
        <li><span>precision</span></li>
        <li><span>properties</span></li>
        <li><span>empty-value</span></li>
        <li><span>detail</span></li>
      </ul>
    </div>
    <a name="lexical"></a>
    <h3 class="section1">2. Lexical Syntax</h3>
    <div>
      <p class="definition">
<b>Identifiers</b></p>
      <p>Identifiers in Jazz are case sensitive. A common usage of this is to have a class named X and a variable containing an instance of X named x.</p>
      <p></p>
      <p>The following characters are considered alphabetic and can thus be used in identifiers:</p>
      <p>! $ % & * + - . / : < = > ? ^ _ ~</p>
    </div>
    <p></p>
    <p></p>
    <div>
      <p class="definition">
<b>Whitespace</b></p>
      <p>Spaces, tabs, carriage returns and line feeds are considered whitespace and can be freely inserted in Jazz code without changing the meaning of the code.</p>
    </div>
    <p></p>
    <p></p>
    <div>
      <p class="definition">
<b>Comments</b></p>
      <p>Jazz offers two types of comments:</p>
      <ul>
        <li><span>; starts a line based comment and</span></li>
        <li><span>@name starts an sexpr based comment where name can be any symbol. It is completely ignored and can be used for documentation purposes.</span></li>
      </ul>
    </div>
    <a name="functional"></a>
    <h3 class="section1">3. Functional Programming</h3>
    <a name="syntax_forms"></a>
    <h4 class="section2">3.1. Syntax</h4>
    <a name="bind"></a>
    <p class="definition">
<b>bind</b> <i>variables-tree values-tree expr ...</i></p>
    <p></p>
    <p></p>
    <a name="bind-optionals"></a>
    <p class="definition">
<b>bind-optionals</b> <i>((variable default) ...) values-list expr ...</i></p>
    <p></p>
    <p></p>
    <a name="bind-keywords"></a>
    <p class="definition">
<b>bind-keywords</b> <i>((variable default) ...) values-list expr ...</i></p>
    <p></p>
    <p></p>
    <a name="receive"></a>
    <p class="definition">
<b>receive</b> <i>(variable ...) values expr ...</i></p>
    <p></p>
    <p></p>
    <a name="quote"></a>
    <p class="definition">
<b>quote</b> <i>expr</i></p>
    <p></p>
    <p></p>
    <a name="if"></a>
    <p class="definition">
<b>if</b> <i>test yes-expr no-expr ...</i></p>
    <p></p>
    <p></p>
    <a name="when"></a>
    <p class="definition">
<b>when</b> <i>test yes-expr ...</i></p>
    <p></p>
    <p></p>
    <a name="unless"></a>
    <p class="definition">
<b>unless</b> <i>test no-expr ...</i></p>
    <p></p>
    <p></p>
    <a name="while"></a>
    <p class="definition">
<b>while</b> <i>test expr ...</i></p>
    <p></p>
    <p></p>
    <a name="begin"></a>
    <p class="definition">
<b>begin</b> <i>expr ...</i></p>
    <p></p>
    <p></p>
    <a name="prog1"></a>
    <p class="definition">
<b>prog1</b> <i>result-expr1 expr ...</i></p>
    <p></p>
    <p></p>
    <a name="loop"></a>
    <p class="definition">
<b>loop</b> <i>...</i></p>
    <p></p>
    <code>for</code>
    <code>in</code>
    <code>in-properties</code>
    <code>iterate</code>
    <code>from</code>
    <code>repeat</code>
    <code>do</code>
    <code>sum</code>
    <code>collect</code>
    <a name="tie"></a>
    <p class="definition">
<b>tie</b> <i></i></p>
    <p></p>
    <p></p>
    <a name="cond"></a>
    <p class="definition">
<b>cond</b> <i>(test expr ...) ...</i></p>
    <p></p>
    <p></p>
    <a name="case"></a>
    <p class="definition">
<b>case</b> <i>target (try expr ...) ...</i></p>
    <p></p>
    <p></p>
    <a name="ecase"></a>
    <p class="definition">
<b>ecase</b> <i>target (try expr ...) ...</i></p>
    <p></p>
    <p></p>
    <a name="typecase"></a>
    <p class="definition">
<b>typecase</b> <i>target (try expr ...) ...</i></p>
    <p></p>
    <p></p>
    <a name="set!"></a>
    <p class="definition">
<b>set!</b> <i>variable expr</i></p>
    <p></p>
    <p></p>
    <a name="increase!"></a>
    <p class="definition">
<b>increase!</b> <i>variable expr {value}</i></p>
    <p></p>
    <p></p>
    <a name="decrease!"></a>
    <p class="definition">
<b>decrease!</b> <i>variable expr {value}</i></p>
    <p></p>
    <p></p>
    <a name="let"></a>
    <p class="definition">
<b>let</b> <i>((variable value) ...) expr ...</i></p>
    <p></p>
    <p></p>
    <a name="let*"></a>
    <p class="definition">
<b>let*</b> <i>((variable value) ...) expr ...</i></p>
    <p></p>
    <p></p>
    <a name="letrec"></a>
    <p class="definition">
<b>letrec</b> <i>((variable value) ...) expr ...</i></p>
    <p></p>
    <p></p>
    <a name="catch"></a>
    <p class="definition">
<b>catch</b> <i>name expr ...</i></p>
    <p></p>
    <p></p>
    <a name="unwind-protect"></a>
    <p class="definition">
<b>unwind-protect</b> <i>protected-expr protection-expr ...</i></p>
    <p></p>
    <p></p>
    <a name="lambda"></a>
    <p class="definition">
<b>lambda</b> <i>parameters-list expr ...</i></p>
    <p></p>
    <p></p>
    <a name="function"></a>
    <p class="definition">
<b>function</b> <i>parameters-list expr ...</i></p>
    <p></p>
    <p></p>
    <a name="and"></a>
    <p class="definition">
<b>and</b> <i>expr ...</i></p>
    <p></p>
    <p>This syntactic form will return true if and only if all expr... are true. Note that and will stop as soon as it encounters a false value.</p>
    <a name="or"></a>
    <p class="definition">
<b>or</b> <i>expr ...</i></p>
    <p></p>
    <p>This syntactic form will return true if one of the expr... is true. Note that or will stop as soon as it encounters a true value.</p>
    <a name="essay"></a>
    <p class="definition">
<b>essay</b> <i>expr ...</i></p>
    <p></p>
    <p></p>
    <a name="either"></a>
    <p class="definition">
<b>either</b> <i>expr ...</i></p>
    <p></p>
    <p></p>
    <a name="assert"></a>
    <p class="definition">
<b>assert</b> <i>asserted-expr</i></p>
    <p></p>
    <p></p>
    <a name="assert-type"></a>
    <p class="definition">
<b>assert-type</b> <i>asserted-type</i></p>
    <p></p>
    <p></p>
    <a name="object-oriented"></a>
    <h3 class="section1">4. Object-Oriented Programming</h3>
    <a name="SEC2"></a>
    <h4 class="section2">4.1. Classes</h4>
    <a name="Object"></a>
    <h4 class="class">Object</h4>
    <p>The base class of every other class.</p>
    <a name="initialize"></a>
    <p class="definition">
<b>initialize</b> <i>object ...</i></p>
    <p></p>
    <a name="destroy"></a>
    <p class="definition">
<b>destroy</b> <i></i></p>
    <p></p>
    <a name="close"></a>
    <p class="definition">
<b>close</b> <i></i></p>
    <p></p>
    <a name="print"></a>
    <p class="definition">
<b>print</b> <i>printer detail</i></p>
    <p></p>
    <a name="component"></a>
    <h3 class="section1">5. Component Programming</h3>
    <a name="types"></a>
    <h3 class="section1">6. Type Annotations</h3>
    <p>Jazz is a dynamically typed language. Types are associated with objects as opposed to statically typed languages where types are associated with variables. With a dynamically typed language, type information is always available at runtime contrary to statically typed languages where only the compiler has access to type information</p>
    <p></p>
    <p>Jazz offer optional type declarations.</p>
    <p></p>
    <p>Types are denoted by :</p>
    <xmp><primitive> (ex: <int> <bool>)</xmp>
    <xmp><class> (ex: <View> <Window>)</xmp>
    <p>denote the type of all objects of type class, the null not included</p>
    <xmp><class+> (ex: <Point+> <Rect+>)</xmp>
    <p>denote the type of all objects of type class, the null included</p>
    <p></p>
    <p>Using a &lt;class&gt; type specifier instead of the more generic &lt;class+&gt; specifier will enable the compiler to enforce non null.</p>
    <a name="exceptions"></a>
    <h3 class="section1">7. Exceptions</h3>
    <a name="input/output"></a>
    <h3 class="section1">8. Input / Output</h3>
    <a name="alias"></a>
    <h4 class="section2">8.1. Alias</h4>
Aliases are symbolic names for directories. They are similar to CommonLisp's logical pathnames.     <p></p>
The following aliases are predefined:    <ul>
      <li>Home</li>
      <li>User</li>
      <li>Install</li>
      <li>Jazz</li>
    </ul>
    <a name="regular-expressions"></a>
    <h3 class="section1">9. Regular Expressions</h3>
    <a name="date/time"></a>
    <h3 class="section1">10. Date / Time</h3>
    <a name="markup"></a>
    <h3 class="section1">11. Markup Language</h3>
    <a name="database"></a>
    <h3 class="section1">12. Database</h3>
    <a name="profiling"></a>
    <h3 class="section1">13. Profiling</h3>
    <a name="remoting"></a>
    <h3 class="section1">14. Remoting</h3>
    <a name="system"></a>
    <h3 class="section1">15. System</h3>
    <a name="user-interface"></a>
    <h3 class="section1">16. User Interface</h3>
    <a name="SEC3"></a>
    <h4 class="section2">16.1. Activation</h4>
    <ul>
      <li>focus-gain        : sent to a view that gains focus</li>
      <li>focus-lose        : sent to a view that loses focus</li>
      <li>host-activate     : sent to guest when host gains focus</li>
      <li>host-deactivate   : sent to guest when host loses focus</li>
      <li>client-activate   : sent to each tool when a document activates</li>
      <li>client-deactivate : sent to each tool when last document closes</li>
      <li>stage-activate    : sent to stage when last document closes</li>
      <li>stage-deactivate  : sent to stage when a first document activates</li>
    </ul>
    <a name="c-interface"></a>
    <h3 class="section1">17. C Interface</h3>
    <a name="TOC">
      <h3 class="toc">Table of Contents</h3>
    </a>
    <div>
      <div class="toc_first1">
        <a href="#overview">1. Overview</a>
      </div>
      <div>
        <div>
          <div class="toc_first2">
            <a href="#scheme">1.1. Scheme</a>
          </div>
        </div>
        <div>
          <div class="toc2">
            <a href="#syntax">1.2. Language Syntax</a>
          </div>
          <div>
            <div>
              <div class="toc_first3">
                <a href="#SEC1">1.2.1. Constants</a>
              </div>
            </div>
          </div>
        </div>
        <div>
          <div class="toc2">
            <a href="#toplevel_syntax">1.3. Toplevel Syntax</a>
          </div>
        </div>
        <div>
          <div class="toc2">
            <a href="#functional_syntax">1.4. Functional Syntax</a>
          </div>
        </div>
        <div>
          <div class="toc2">
            <a href="#object_oriented_syntax">1.5. Object-Oriented Syntax</a>
          </div>
        </div>
        <div>
          <div class="toc2">
            <a href="#cffi_syntax">1.6. CFFI Syntax</a>
          </div>
        </div>
        <div>
          <div class="toc2">
            <a href="#naming">1.7. Naming Conventions</a>
          </div>
        </div>
        <div>
          <div class="toc2">
            <a href="#functions">1.8. Functions</a>
          </div>
        </div>
        <div>
          <div class="toc2">
            <a href="#lists">1.9. Lists</a>
          </div>
        </div>
        <div>
          <div class="toc2">
            <a href="#symbols">1.10. Symbols</a>
          </div>
        </div>
        <div>
          <div class="toc2">
            <a href="#objects">1.11. Objects</a>
          </div>
        </div>
        <div>
          <div class="toc2">
            <a href="#components">1.12. Components</a>
          </div>
        </div>
        <div>
          <div class="toc2">
            <a href="#formatted_output">1.13. Formatted Output</a>
          </div>
        </div>
      </div>
    </div>
    <div>
      <div class="toc1">
        <a href="#lexical">2. Lexical Syntax</a>
      </div>
    </div>
    <div>
      <div class="toc1">
        <a href="#functional">3. Functional Programming</a>
      </div>
      <div>
        <div>
          <div class="toc_first2">
            <a href="#syntax_forms">3.1. Syntax</a>
          </div>
        </div>
      </div>
    </div>
    <div>
      <div class="toc1">
        <a href="#object-oriented">4. Object-Oriented Programming</a>
      </div>
      <div>
        <div>
          <div class="toc_first2">
            <a href="#SEC2">4.1. Classes</a>
          </div>
          <div>
            <div>
              <div class="toc_first3">
                <a href="#Object">4.1.1. Object</a>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
    <div>
      <div class="toc1">
        <a href="#component">5. Component Programming</a>
      </div>
    </div>
    <div>
      <div class="toc1">
        <a href="#types">6. Type Annotations</a>
      </div>
    </div>
    <div>
      <div class="toc1">
        <a href="#exceptions">7. Exceptions</a>
      </div>
    </div>
    <div>
      <div class="toc1">
        <a href="#input/output">8. Input / Output</a>
      </div>
      <div>
        <div>
          <div class="toc_first2">
            <a href="#alias">8.1. Alias</a>
          </div>
        </div>
      </div>
    </div>
    <div>
      <div class="toc1">
        <a href="#regular-expressions">9. Regular Expressions</a>
      </div>
    </div>
    <div>
      <div class="toc1">
        <a href="#date/time">10. Date / Time</a>
      </div>
    </div>
    <div>
      <div class="toc1">
        <a href="#markup">11. Markup Language</a>
      </div>
    </div>
    <div>
      <div class="toc1">
        <a href="#database">12. Database</a>
      </div>
    </div>
    <div>
      <div class="toc1">
        <a href="#profiling">13. Profiling</a>
      </div>
    </div>
    <div>
      <div class="toc1">
        <a href="#remoting">14. Remoting</a>
      </div>
    </div>
    <div>
      <div class="toc1">
        <a href="#system">15. System</a>
      </div>
    </div>
    <div>
      <div class="toc1">
        <a href="#user-interface">16. User Interface</a>
      </div>
      <div>
        <div>
          <div class="toc_first2">
            <a href="#SEC3">16.1. Activation</a>
          </div>
        </div>
      </div>
    </div>
    <div>
      <div class="toc1">
        <a href="#c-interface">17. C Interface</a>
      </div>
    </div>
    <a name="INDEX">
      <h3 class="index">Index</h3>
    </a>
    <a class="letter-navigator" href="#SEC4">
      <b>A</b>
    </a>
&nbsp;    <a class="letter-navigator" href="#SEC5">
      <b>B</b>
    </a>
&nbsp;    <a class="letter-navigator" href="#SEC6">
      <b>C</b>
    </a>
&nbsp;    <a class="letter-navigator" href="#SEC7">
      <b>D</b>
    </a>
&nbsp;    <a class="letter-navigator" href="#SEC8">
      <b>E</b>
    </a>
&nbsp;    <a class="letter-navigator" href="#SEC9">
      <b>F</b>
    </a>
&nbsp;    <a class="letter-navigator" href="#SEC10">
      <b>I</b>
    </a>
&nbsp;    <a class="letter-navigator" href="#SEC11">
      <b>L</b>
    </a>
&nbsp;    <a class="letter-navigator" href="#SEC12">
      <b>M</b>
    </a>
&nbsp;    <a class="letter-navigator" href="#SEC13">
      <b>N</b>
    </a>
&nbsp;    <a class="letter-navigator" href="#SEC14">
      <b>O</b>
    </a>
&nbsp;    <a class="letter-navigator" href="#SEC15">
      <b>P</b>
    </a>
&nbsp;    <a class="letter-navigator" href="#SEC16">
      <b>Q</b>
    </a>
&nbsp;    <a class="letter-navigator" href="#SEC17">
      <b>R</b>
    </a>
&nbsp;    <a class="letter-navigator" href="#SEC18">
      <b>S</b>
    </a>
&nbsp;    <a class="letter-navigator" href="#SEC19">
      <b>T</b>
    </a>
&nbsp;    <a class="letter-navigator" href="#SEC20">
      <b>U</b>
    </a>
&nbsp;    <a class="letter-navigator" href="#SEC21">
      <b>W</b>
    </a>
&nbsp;    <table width="100%">
      <tr>
        <td colspan="2">
<div class="index-letter">
            <a name="SEC4">A</a>
          </div></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#alias">
            <code>Alias</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#and">
            <code>and</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#assert">
            <code>assert</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#assert-type">
            <code>assert-type</code>
          </a></td>
      </tr>
      <tr>
        <td colspan="2">
<div class="index-letter">
            <a name="SEC5">B</a>
          </div></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#begin">
            <code>begin</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#bind">
            <code>bind</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#bind-keywords">
            <code>bind-keywords</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#bind-optionals">
            <code>bind-optionals</code>
          </a></td>
      </tr>
      <tr>
        <td colspan="2">
<div class="index-letter">
            <a name="SEC6">C</a>
          </div></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#c-interface">
            <code>C Interface</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#cffi_syntax">
            <code>CFFI Syntax</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#component">
            <code>Component Programming</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#components">
            <code>Components</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#case">
            <code>case</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#catch">
            <code>catch</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#class">
            <code>class</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#close">
            <code>close</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#cond">
            <code>cond</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#constant">
            <code>constant</code>
          </a></td>
      </tr>
      <tr>
        <td colspan="2">
<div class="index-letter">
            <a name="SEC7">D</a>
          </div></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#database">
            <code>Database</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#date/time">
            <code>Date / Time</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#decrease!">
            <code>decrease!</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#definition">
            <code>definition</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#destroy">
            <code>destroy</code>
          </a></td>
      </tr>
      <tr>
        <td colspan="2">
<div class="index-letter">
            <a name="SEC8">E</a>
          </div></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#exceptions">
            <code>Exceptions</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#ecase">
            <code>ecase</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#either">
            <code>either</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#enumeration">
            <code>enumeration</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#essay">
            <code>essay</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#external">
            <code>external</code>
          </a></td>
      </tr>
      <tr>
        <td colspan="2">
<div class="index-letter">
            <a name="SEC9">F</a>
          </div></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#formatted_output">
            <code>Formatted Output</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#functional">
            <code>Functional Programming</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#functional_syntax">
            <code>Functional Syntax</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#functions">
            <code>Functions</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#function">
            <code>function</code>
          </a></td>
      </tr>
      <tr>
        <td colspan="2">
<div class="index-letter">
            <a name="SEC10">I</a>
          </div></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#input/output">
            <code>Input / Output</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#if">
            <code>if</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#increase!">
            <code>increase!</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#initialize">
            <code>initialize</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#interface">
            <code>interface</code>
          </a></td>
      </tr>
      <tr>
        <td colspan="2">
<div class="index-letter">
            <a name="SEC11">L</a>
          </div></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#syntax">
            <code>Language Syntax</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#lexical">
            <code>Lexical Syntax</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#lists">
            <code>Lists</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#lambda">
            <code>lambda</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#let">
            <code>let</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#let*">
            <code>let*</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#letrec">
            <code>letrec</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#library">
            <code>library</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#loop">
            <code>loop</code>
          </a></td>
      </tr>
      <tr>
        <td colspan="2">
<div class="index-letter">
            <a name="SEC12">M</a>
          </div></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#markup">
            <code>Markup Language</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#method">
            <code>method</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#module">
            <code>module</code>
          </a></td>
      </tr>
      <tr>
        <td colspan="2">
<div class="index-letter">
            <a name="SEC13">N</a>
          </div></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#naming">
            <code>Naming Conventions</code>
          </a></td>
      </tr>
      <tr>
        <td colspan="2">
<div class="index-letter">
            <a name="SEC14">O</a>
          </div></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#Object">
            <code>Object</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#object-oriented">
            <code>Object-Oriented Programming</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#object_oriented_syntax">
            <code>Object-Oriented Syntax</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#objects">
            <code>Objects</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#overview">
            <code>Overview</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#or">
            <code>or</code>
          </a></td>
      </tr>
      <tr>
        <td colspan="2">
<div class="index-letter">
            <a name="SEC15">P</a>
          </div></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#profiling">
            <code>Profiling</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#print">
            <code>print</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#prog1">
            <code>prog1</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#property">
            <code>property</code>
          </a></td>
      </tr>
      <tr>
        <td colspan="2">
<div class="index-letter">
            <a name="SEC16">Q</a>
          </div></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#quote">
            <code>quote</code>
          </a></td>
      </tr>
      <tr>
        <td colspan="2">
<div class="index-letter">
            <a name="SEC17">R</a>
          </div></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#regular-expressions">
            <code>Regular Expressions</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#remoting">
            <code>Remoting</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#receive">
            <code>receive</code>
          </a></td>
      </tr>
      <tr>
        <td colspan="2">
<div class="index-letter">
            <a name="SEC18">S</a>
          </div></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#scheme">
            <code>Scheme</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#symbols">
            <code>Symbols</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#syntax_forms">
            <code>Syntax</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#system">
            <code>System</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#set!">
            <code>set!</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#slot">
            <code>slot</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#structure">
            <code>structure</code>
          </a></td>
      </tr>
      <tr>
        <td colspan="2">
<div class="index-letter">
            <a name="SEC19">T</a>
          </div></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#toplevel_syntax">
            <code>Toplevel Syntax</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#types">
            <code>Type Annotations</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#tie">
            <code>tie</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#typecase">
            <code>typecase</code>
          </a></td>
      </tr>
      <tr>
        <td colspan="2">
<div class="index-letter">
            <a name="SEC20">U</a>
          </div></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#user-interface">
            <code>User Interface</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#unless">
            <code>unless</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#unwind-protect">
            <code>unwind-protect</code>
          </a></td>
      </tr>
      <tr>
        <td colspan="2">
<div class="index-letter">
            <a name="SEC21">W</a>
          </div></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#when">
            <code>when</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#while">
            <code>while</code>
          </a></td>
      </tr>
    </table>
    <div id="footer">
      <p>Copyright &copy; 1996-2008 Guillaume Cartier</p>
    </div>
  </div>
</div>
</body>

</html>
