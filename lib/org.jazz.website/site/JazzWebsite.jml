;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; JazzScheme Website
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2007
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(<website> name: jazz title: "JazzScheme"
  (<section> name: home title: "Home"
    (<articles>
      (<article> name: welcome title: "About JazzScheme"
        "JazzScheme is a programming language based on Scheme. It is also a full featured development platform that has been used for more than 10 years to develop high-quality commercial applications.")
      (<article> name: news title: "News"
        (<node>
          (<span> "2007-11-11 - " (<a> href: "news.htm" "Progress Update"))
          (<span> "2007-09-26 - " (<a> href: "news.htm" "Jedi running under the new Gambit based kernel"))
          (<span> "2007-08-08 - " (<a> href: "news.htm" "Presentation at the lispvan"))
          (<span> "2007-05-28 - " (<a> href: "news.htm" "JazzScheme 1.0b6 available"))
          (<span> "2007-05-14 - " (<a> href: "news.htm" "Work on porting JazzScheme to X11 and Macintosh started"))
          (<span> "2007-05-03 - " (<a> href: "news.htm" "JazzScheme 1.0b5 available"))
          (<span> "2007-04-23 - " (<a> href: "news.htm" "JazzScheme public beta released"))
          (<span> "2007-01-12 - " (<a> href: "news.htm" "JazzScheme ported to Visual Studio 2005"))
          (<span> "2006-12-13 - " (<a> href: "news.htm" "Presentation at the MSLUG"))
          (<span> "2006-12-12 - " (<a> href: "news.htm" "Montreal company to use JazzScheme"))
          (<span> "2006-11-22 - " (<a> href: "news.htm" "Website goes live"))))
      (<article> name: vision title: "Vision"
        "JazzScheme was born on December 9th, 1996 out of some profound convictions:"
        (<node>
          (<span> "Lisp is one of the greatest tools to experiment with new concepts and implement them.")
          (<span> "There is not a single truth in computer science and Lisp's meta-language capabilities and dynamic nature makes it the ideal language to unify in a coherent approach many great paradigms like:")
          (<node>
            (<span> "Functional Programming")
            (<span> "Object-Oriented and Generic Programming")
            (<span> "Component based Programming"))
          ;;Richard Gabriel argue that Unix and C came to lead because implementation simplicity is as important as interface simplicity
          ;;(<span> "A language's implementation is as important as the language itself. The implementation should be totally transparent, available, simple, clean, user modifiable, ...")
          ;;(<span> "A language should not be only designed. It should come out of a constant interplay between dreams and design and using it in real world constraints and problems")
          (<span> "The Lisp community should not be dreaming of sophisticated GUIs and IDEs but instead be the one pushing the boundaries of what can be accomplished!"))
        (<cite> "&#8216;&#8216;A language that doesn't affect the way you think about programming, is not worth knowing.&#8217;&#8217;
-- Alan J. Perlis"))
      (<article> name: mission title: "Mission"
        (<node>
          (<span> "Promote the use of Lisp based languages")
          (<node>
            (<span> "Not by trying to convince people of their advantages")
            (<span> "But by enabling people to create and commercialize radical products that would have been almost impossible to develop using mainstream languages (time, cost, feasibility, ...)"))
          (<span> "In the long run, enable more Lisp/Scheme programmers to develop at work in the language they love :)")
          (<span> "Bring back joy to programming!")))
      (<article> name: os title: "Operating Systems"
        "As Jazz's main focus has always been the actual delivery of commercial, highly sophisticated GUI applications, Windows has been our primary focus and at the moment, Jazz only runs under Windows. "
        "A project named Fusion, to rewrite the Jazz Kernel from C++ to Scheme (we are trying for portable pure Scheme and have the wonderfull" (<a> href: "http://www.iro.umontreal.ca/~gambit/" "Gambit") "Scheme system as our primary target) is currently well under way. "
        "When completed, it will enable the Jazz language to run on most operating systems. "
        (<p>)
        "For the multi-platform GUI, we have started the port using" (<a> href: "http://cairographics.org/" "Cairo")
        ". "
        "Note that the Jazz Windows GUI is already very abstract and relies little on Windows services. "
        "This should make the port if not easy, fairly manageable. "
        "We expect to have some beta releases for X11 and Macintosh ready in a couple months. ")
      (<article> name: open-source title: "Jazz goes Open Source!"
        (<a> href: "http://www.metascoop.com" "MetaScoop")
        " has announced that it will be releasing the complete Jazz platform as an Open Source project under the JazzScheme name.")
      (<article> name: license title: "License"
        "JazzScheme is released under a dual "
        (<a> href: "http://www.mozilla.org/MPL/MPL-1.1.html" "Mozilla Public License Version 1.1")
        " or "
        (<a> href: "http://www.gnu.org/copyleft/gpl.html" "GNU General Public License v2 or later")
        ". Choose whichever license you prefer.")
      (<article> name: discussion-group title: "Discussion Group"
        "If you are interested in JazzScheme, you can join the discussion group at "
        (<a> href: "http://groups.google.com/group/jazzscheme" "http://groups.google.com/group/jazzscheme"))
      (<article> name: contact-info title: "Contact Info"
        (<a> href: "mailto:gcartier@jazzscheme.org" "gcartier@jazzscheme.org"))
      ;; (<article> name: roadmap title: "Roadmap")
      ;; (<article> name: future title: "Future")
      ;; (<article> name: help title: "Help")
      ;; (<article> name: description title: "Description")
      ;; (<article> name: goals title: "Goals")
      ))
  (<section> name: news title: "News"
    (<articles>
      (<article> title: "2008-01-15 - Progress Update"
        "A lot has happened since the last news update a month 1/2 ago. Let me try and summarize the most important developments :"
        (<division> title: "Build"
          "As I was saying in the last message, performance was very critical as this stage as it was so far behind the old Jazz as to make the new one unusable. The benchmark I have been using is editing Window.jazz a big file with lots of syntax coloring necessitating a lot of sexpr navigation. As every Lisp related tool must be able to navigate sexpr in text, those operations are so critical that in the old Jazz they where handcoded directly in C. So keep in mind that in the benchmark results, it is handcoded C code vs Jazz code generating Gambit code."
          (<p>)
          "First timing was :"
          (<p>)
          "Old Jazz : 0.3s"
          (<br>)
          "New Jazz : 28.5s"
          (<p>)
          "so 95x slower."
          (<p>)
          "We are now at 0.17s so 167x" (<b> "faster") "than the first version and 60% faster than the old handcoded C code. Note that there is still a lot of room to make this much faster but now that performance is acceptable we are going to put performance aside for a while in favor of other priorities. "
          (<p>)
          "Thanks to Guillaume Germain for his wonderful statprof statistical profiler which really helped in finding the hot spots to optimize.")
        (<division> title: "Type System"
          "Jazz now supports a fairly complete and completely optional type system."
          (<p>)
          "Every part of a Scheme program can now be type annotated. Note that usually, just annotating the type of the input parameters of a function will be sufficient, as the new type system will use type inference whenever possible to deduce the type of expressions. "
          (<p>)
          "To support the new type system, a new experimental specializer / template system is also available. Any comments / suggestions on this part are most welcome as it is unclear what is the best approach: templates a la c++, generics a la java, parameterized types, ... "
          (<p>)
          "Note that Jazz as a whole doesn't use the new type system a lot. I'd say that around 30 files out of Jazz's 3000+ files use the new type system. Annotating only those 30 something critical modules resulted in huge performance improvements. Also note that the type annotations are purely optional and removing any of them will not change any code semantics. ")
        (<division> title: "IDE"
          "The IDE while still missing a lot of functionality has become functional enough for it to become usable. I now try and use it as my main development IDE over the old Jazz's IDE."
          (<p>)
          "Mainly missing from the old Jazz IDE is debugging support. We are still relying on the Gambit console. Note that this is really not painful at all as the Jazz generated Scheme code is so close to the original code that reading a Gambit stack of Jazz code is almost identical as what a pure Jazz debugger stack would look like. ")
        (<division> title: "Scheme Compliance"
          "The old Jazz, although 'Scheme inspired' was never a full Scheme implementation."
          (<p>)
          "Everything that Jazz was redefining from Scheme was rethought / renamed so that now I am very happy to report that Jazz is now a full R5RS Scheme (to be more precise: as R5RS as the underlying Scheme you are using is) system where any R5RS Scheme code can be run as is inside a Jazz module or library. "
          (<p>)
          "If pure Scheme is used inside a Jazz module or library, the resulting code will have no overhead and will be the exact same code. The Jazz library system will just validate at compile time that every symbol referenced exists in the underlying Scheme system and report any unresolved symbols. ")
        (<division> title: "Multi-platform / X11"
          "The Jedi IDE while not functional, is now booting completely under X11! What was astonishing was that nothing was working, and a couple changes later, Jeremie had a version where *everything* was rendering perfectly! The port of the graphical code to Cairo really payed off there. I am very happy about this new development, especially as Jeremie was able to pull this off part time while studying for his master's degree. Gratz! "
          (<p>)
          "Public beta release is still planned for very early 2008."))
      (<article> title: "2007-11-11 - Progress Update"
        "A lot has happened since the last news update a month 1/2 ago. Let me try and summarize the most important developments :"
        (<division> title: "Performance"
          "As I was saying in the last message, performance was very critical as this stage as it was so far behind the old Jazz as to make the new one unusable. The benchmark I have been using is editing Window.jazz a big file with lots of syntax coloring necessitating a lot of sexpr navigation. As every Lisp related tool must be able to navigate sexpr in text, those operations are so critical that in the old Jazz they where handcoded directly in C. So keep in mind that in the benchmark results, it is handcoded C code vs Jazz code generating Gambit code."
          (<p>)
          "First timing was :"
          (<p>)
          "Old Jazz : 0.3s"
          (<br>)
          "New Jazz : 28.5s"
          (<p>)
          "so 95x slower."
          (<p>)
          "We are now at 0.17s so 167x faster than the first version and 60% faster than the old handcoded C code. Note that there is still a lot of room to make this much faster but now that performance is acceptable we are going to put performance aside for a while in favor of other priorities. "
          (<p>)
          "Thanks to Guillaume Germain for his wonderful statprof statistical profiler which really helped in finding the hot spots to optimize.")
        (<division> title: "Type System"
          "Jazz now supports a fairly complete and completely optional type system."
          (<p>)
          "Every part of a Scheme program can now be type annotated. Note that usually, just annotating the type of the input parameters of a function will be sufficient, as the new type system will use type inference whenever possible to deduce the type of expressions. "
          (<p>)
          "To support the new type system, a new experimental specializer / template system is also available. Any comments / suggestions on this part are most welcome as it is unclear what is the best approach: templates a la c++, generics a la java, parameterized types, ... "
          (<p>)
          "Note that Jazz as a whole doesn't use the new type system a lot. I'd say that around 30 files out of Jazz's 3000+ files use the new type system. Annotating only those 30 something critical modules resulted in huge performance improvements. Also note that the type annotations are purely optional and removing any of them will not change any code semantics. ")
        (<division> title: "IDE"
          "The IDE while still missing a lot of functionality has become functional enough for it to become usable. I now try and use it as my main development IDE over the old Jazz's IDE."
          (<p>)
          "Mainly missing from the old Jazz IDE is debugging support. We are still relying on the Gambit console. Note that this is really not painful at all as the Jazz generated Scheme code is so close to the original code that reading a Gambit stack of Jazz code is almost identical as what a pure Jazz debugger stack would look like. ")
        (<division> title: "Scheme Compliance"
          "The old Jazz, although 'Scheme inspired' was never a full Scheme implementation."
          (<p>)
          "Everything that Jazz was redefining from Scheme was rethought / renamed so that now I am very happy to report that Jazz is now a full R5RS Scheme (to be more precise: as R5RS as the underlying Scheme you are using is) system where any R5RS Scheme code can be run as is inside a Jazz module or library. "
          (<p>)
          "If pure Scheme is used inside a Jazz module or library, the resulting code will have no overhead and will be the exact same code. The Jazz library system will just validate at compile time that every symbol referenced exists in the underlying Scheme system and report any unresolved symbols. ")
        (<division> title: "Multi-platform / X11"
          "The Jedi IDE while not functional, is now booting completely under X11! What was astonishing was that nothing was working, and a couple changes later, Jeremie had a version where *everything* was rendering perfectly! The port of the graphical code to Cairo really payed off there. I am very happy about this new development, especially as Jeremie was able to pull this off part time while studying for his master's degree. Gratz! "
          (<p>)
          "Public beta release is still planned for very early 2008."))
      (<article> title: "2007-09-26 - Jedi running under the new Gambit based kernel"
        "I am very happy to report that Jedi, the Jazz IDE is now running under the new Gambit based kernel. "
        "Lots of features where temporarely commented out but basically most of the language and the library has now been ported to the new kernel. "
        (<p>)
        "The port of 100+ C++ classes to Gambit was very demanding at first but now the development has really become a joy. "
        "Even though the start was difficult, developing the new kernel on Gambit's extremely robust, fast and flexible architecture has now surpassed all my expentations in development speed and quality of code that could be developed with it. "
        "Cheers to Gambit! "
        (<p>)
        "Next steps are: "
        (<node>
          "Complete the port"
          "Optimize the new kernel to make it as fast as Gambit can be (that's fast!)"
          "Port the library and IDE to Mac and X11 (this should be fairly fast at this point)")
        "I expect a first beta, beginning of 2008.")
      (<article> title: "2007-08-08 - Presentation at the lispvan"
        "Guillaume Cartier gave a presentation of JazzScheme at the Vancouver Lisp Users Group. See "
        (<a> href: "http://bc.tech.coop/blog/070810.html" "Bill Clementson's Blog")
        " for a nice summary.")
      (<article> title: "2007-05-28 - JazzScheme 1.0b6 available"
        "This version is a candidate for the public release. Only bug fixes are planned until the public release. See the " (<a> href: "new.htm" "What's New") " section for details.")
      (<article> title: "2007-05-14 - Work on porting JazzScheme to X11 and Macintosh started"
        "Active work has started on porting the JazzScheme platform to other operating systems. Support is planned for the following platforms: Windows, X11 and Macintosh.")
      (<article> title: "2007-05-03 - JazzScheme 1.0b5 available"
        "This version adds a lot of support for Scheme code edition which is now almost on par with Jazz code. See the " (<a> href: "new.htm" "What's New") " section for details.")
      (<article> title: "2007-04-23 - JazzScheme public beta released"
        "First publicly available beta release of JazzScheme.")
      (<article> title: "2007-01-12 - JazzScheme ported to Visual Studio 2005"
        "JazzScheme was successfully ported to Visual Studio 2005. "
        "This is a key milestone for Jazz, as with Microsoft's release of Visual Studio 2005 Express as a free downloadable package that can be used to build C++ applications with no licensing restrictions, Jazz can now be used as a 100% free development platform for building Windows applications.")
      (<article> title: "2006-12-13 - Presentation at the MSLUG"
        "Guillaume Cartier gave a presentation of JazzScheme at the Montreal Lisp/Scheme User Group. See "
        (<a> href: "http://schemeway.dyndns.org/mslug" "http://schemeway.dyndns.org/mslug")
        " for details.")
      (<article> title: "2006-12-12 - Montreal company to use JazzScheme"
        (<a> href: "http://www.isaix.com" "IsaiX Technologies")
        " a high tech Montreal company, has decided to use JazzScheme for one of its top projects. Using JazzScheme, they plan on developing a real time scheduling engine for "
        (<a> href: "http://www.chyma.net" "Chyma")
        " their Health Care Industry product.")
      (<article> title: "2006-11-22 - Website goes live"
        "A first version of the JazzScheme website is now live!")))
  (<section> name: features title: "Features"
    (<div> style: "margin-top: 22;"
      (<b> "Please note that this list is under development and represents only a subset of all JazzScheme's features. ")
      (<p>))
    (<articles>
      (<article> name: tutorial-code title: "Jazz, the language"
        (<division> title: "Paradigms"
          (<node>
            (<span> "Functional programming")
            (<span> "Generic programming")
            (<span> "Object-oriented programming")
            (<span> "Interface-oriented programming")
            (<span> "Dynamic programming")
            (<span> "Static programming")))
        (<division> title: "Scheme compliance"
          (<node>
            (<span> "R5RS")))
        (<division> title: "Module / Library system")
        (<division> title: "Runtime Model"
          (<node>
            "Interpreter"
            "Compiler"))
        (<division> title: "Type System"
          (<node>
            "Fully optional"
            "Type inference"
            "Scheme integration"
            (<node>
              "Supports all Scheme primitive types"
              "Annotating fixnums and flonums will generate optimal numerical code"))))
      (<article> name: tutorial-code title: "Jedi, the IDE"
        (<division> title: "Languages Edited"
          (<node>
            (<span> "Jazz")
            (<span> "Scheme")
            (<span> "Common Lisp")
            (<span> "C++")
            (<span> "Java")))
        (<division> title: "Text Editor"
          (<node>
            "Edit definitions"
            "Cross-reference database to browse references"
            "Browser metaphor navigation"
            "Syntax coloring"
            "Textual macro recording"
            "Mouse copying"
            "Unlimited undo / redo"
            "Clipboard stack"
            "Customisable code completion"
            "Code indentation"
            "Chapters browser"
            "Definitions browser"
            "Compare to saved"
            "Fully programmable"))
        (<division> title: "Debugger"
          (<node>
            "Dynamic debugger"
            "Console to evaluate code"
            "Stack inspector supporting threads"
            "Tooltips over variables"))
        (<division> title: "Search & Replace"
          (<node>
            "Multiple simultaneous searches and replaces"
            "Ability to play textual macro on replace"))
        (<division> title: "Group Work"
          (<node>
            "Compare Directories"
            "Compare Files"))
        (<division> title: "Build System"
          (<node>
            "Integrated build system")))))
  (<section> name: screenshots title: "Screenshots"
    (<articles>
      (<article> name: jedi title: "Jedi"
        "Jedi is the Jazz IDE. It is written entirely in Jazz."
        (<division> title: "Text Editor"
          (<table> cellpadding: "8"
            (<tr>
              (<td>
                (<screenshot> label: "Jazz Code" preview: "screenshots/text_jazz_small.png" image: "screenshots/text_jazz.htm"))
              (<td>
                (<screenshot> label: "Scheme Code" preview: "screenshots/text_scheme_small.png" image: "screenshots/text_scheme.htm"))
              (<td>
                (<screenshot> label: "Java Code" preview: "screenshots/text_java_small.png" image: "screenshots/text_java.htm"))
              (<td>
                (<screenshot> label: "C++ Code" preview: "screenshots/text_cpp_small.png" image: "screenshots/text_cpp.htm")))))
        (<division> title: "Debugger and Tools"
          (<table> cellpadding: "8"
            (<tr>
              (<td>
                (<screenshot> label: "Debugger" preview: "screenshots/debugger_small.png" image: "screenshots/debugger.htm"))
              (<td>
                (<screenshot> label: "View Explorer" preview: "screenshots/view_explorer_small.png" image: "screenshots/view_explorer.htm"))
              (<td>
                (<screenshot> label: "Search and Replace" preview: "screenshots/search_replace_small.png" image: "screenshots/search_replace.htm")))))
        (<division> title: "Group Work"
          (<table> cellpadding: "8"
            (<tr>
              (<td>
                (<screenshot> label: "Compare Directories" preview: "screenshots/compare_directories_small.png" image: "screenshots/compare_directories.htm"))
              (<td>
                (<screenshot> label: "Compare Files" preview: "screenshots/compare_files_small.png" image: "screenshots/compare_files.htm"))))))
      (<article> name: metamodeler title: "MetaModeler"
        "The MetaModeler is a database modeling tool developed by" (<a> href: "http://www.metascoop.com" "MetaScoop") ". It is also entirely written in Jazz."
        (<table> cellpadding: "8"
          (<tr>
            (<td>
              (<screenshot> label: "Welcome" preview: "screenshots/metamodeler_welcome_small.png" image: "screenshots/metamodeler_welcome.htm"))
            (<td>
              (<screenshot> label: "Import" preview: "screenshots/metamodeler_import_small.png" image: "screenshots/metamodeler_import.htm"))
            (<td>
              (<screenshot> label: "Models" preview: "screenshots/metamodeler_models_small.png" image: "screenshots/metamodeler_models.htm"))
            (<td>
              (<screenshot> label: "Scripts" preview: "screenshots/metamodeler_scripts_small.png" image: "screenshots/metamodeler_scripts.htm")))
          (<tr>
            (<td>
              (<screenshot> label: "Analysis" preview: "screenshots/metamodeler_analysis_small.png" image: "screenshots/metamodeler_analysis.htm")))))
      (<article> name: pricing title: "Pricing Manager"
        "A rule based pricing manager prototype developed by for a company in the travel industry. "
        "This application was used to run simulations of rule effects on pricing scenarios"
        (<table> cellpadding: "8"
          (<tr>
            (<td>
              (<screenshot> label: "Manager" preview: "screenshots/pricing_manager_small.png" image: "screenshots/pricing_manager.htm")))))
      (<article> name: companion title: "Companion"
        "A visual mapping tool used to map various hierarchical structures including Java classes and XML data."
        (<table> cellpadding: "8"
          (<tr>
            (<td>
              (<screenshot> label: "Companion" preview: "screenshots/companion_small.png" image: "screenshots/companion.htm")))))
      (<article> name: diablo title: "Diablo"
        "Jazz can do graphical games too!"
        (<table> cellpadding: "8"
          (<tr>
            (<td>
              (<screenshot> label: "Diablo" preview: "screenshots/diablo_small.png" image: "screenshots/diablo.htm")))))))
  (<section> name: documentation title: "Documentation"
    (<articles>
      ;; (<article> name: history title: "History")
      (<article> name: license title: "License"
        "JazzScheme is released under a dual "
        (<a> href: "http://www.mozilla.org/MPL/MPL-1.1.html" "Mozilla Public License Version 1.1")
        " or "
        (<a> href: "http://www.gnu.org/copyleft/gpl.html" "GNU General Public License v2 or later")
        ". You can choose whichever license you prefer.")
      (<article> name: roots title: "Roots"
        "Jazz borrows ideas from the following languages :"
        (<node>
          (<span> "Scheme for its clean design and flexibility")
          (<span> "Common Lisp for its rich library and many great concepts")
          (<span> "Java for its simple object system (but adds many missing features)")
          (<span> "Visual Basic (yes even VB!) for its rapid development environment")))
      (<article> name: paradigms title: "Paradigms"
        "Jazz supports in a unified and coherent approach the following paradigms :"
        (<node>
          (<span> "Functional programming")
          (<span> "Generic programming")
          (<span> "Object-oriented programming")
          (<span> "Interface-oriented programming")
          (<span> "Dynamic programming")
          (<span> "Static programming"))))
    (<section> name: starting title: "Getting Started"
      (<articles>
        (<article> name: installation title: "Installation"
          (<node>
            (<p> "Unzip the Jedi distribution anywhere you want. "
              "On Windows, most people put it in C:\\JazzScheme but it will work in any location."))
          (<node>
            (<p> "In the Bin folder, you can use either one of :"
              (<dl>
                (<dt> "Interpreter.exe")
                (<dd> "This will launch Jedi in fully interpreted mode.")
                (<dt> "Launcher.exe")
                (<dd> "This will launch Jedi with key files compiled for execution speed. "
                  "This is the recommended executable to use.")))))
        (<article> name: os title: "Operating Systems"
          "As Jazz's main focus has always been the actual delivery of commercial, highly sophisticated GUI applications, Windows has been our primary focus and at the moment, Jazz only runs under Windows. "
          "A project named Fusion, to rewrite the Jazz Kernel from C++ to Scheme (we are trying for pure Scheme and have the wonderfull" (<a> href: "http://www.iro.umontreal.ca/~gambit/" "Gambit") "Scheme system as our primary target) is currently well under way. "
          "When completed, it will enable the Jazz language to run on most operating systems. "
          (<p>)
          "For the multi-platform GUI, we are considering using" (<a> href: "http://cairographics.org/" "Cairo")
          ". "
          "Note that the Jazz Windows GUI is already very abstract and relies little on Windows services. "
          "This should make the port if not easy, at least manageable.")
        (<article> title: "Tutorials"
          (<node>
            (<a> href: "tutorials.htm#tutorial-code" "Executing code")
            (<a> href: "tutorials.htm#tutorial-class" "Creating classes")
            (<a> href: "tutorials.htm#tutorial-view" "A simple graphical view")
            (<a> href: "tutorials.htm#tutorial-application" "A basic application")))
        (<article> name: code title: "Source Code"
          (<node>
            (<span> "All source code in Jazz must exist inside a " (<reference> href: unit) ". There are 3 kinds of units:"
              (<node>
                "Classes"
                "Interfaces"
                "Packages"))
            (<span> "To be able to reference a unit, it must be added to the " (<reference> href: jedi.workbench "workbench") ".")
            (<span> "One very convenient place to tryout code is in your user class as all code executed in the console executes inside the user.")))
        (<article> name: workbench title: "User"
          (<node>
            (<span> "Login")))
        (<article> name: workbench title: "Workbench"
          )
        (<article> name: workspaces title: "Workspaces"
          (<p> "To manage the extensive number of UI features, Jedi uses workspaces to create virtual window spaces similar to Eclipse perspectives.")
          (<node>
            (<span> "To switch workspace, use the buttons located at the right end side of the toolbar.")
            (<span> "A Jazz window always belongs to one or more workspace. "
              "For example, a Jazz source code window can be viewed in both the Script and the Debugger workspaces.")))))
    (<section> name: tutorials title: "Tutorials"
    (<articles>
      (<article> name: tutorial-code title: "Executing code"
        (<division> title: "Installation"
          (<node>
            (<span> "After unzipping the JazzScheme distribution anywhere you want, open up the Bin directory and execute Launcher.exe to start Jedi, the JazzScheme IDE.")))
        (<division> title: "Login"
          (<node>
            (<div>
              (<span> "Next, you will see the Login dialog used to choose or create your Jedi user:")
              (<p>)
              (<img> src: "screenshots/login.png")
              (<p>)
              (<span> "Note that the default setup you see here will create your new user in the standard Users directory located just under the distribution folder. ")
              (<p>))
            (<span> "Next time you login, as your Users directory will not be empty anymore, you will be presented the list of users found in it. "
              "Just select your user from the list and click Login.")))
        (<division> title: "User"
          (<node>
            (<span> "Logging in with a new user " (<code> "Me") " will create 4 files inside your " (<code> "Me") " user folder:")
            (<node>
              (<span> "Connections.jml")
              (<span> "Preferences.jml")
              (<span> "Workbench.jml")
              (<span> "Me.jazz"))
            (<span> "The first three files, are setting files automatically managed by Jazz. "
              "Still, it is a good idea to familiarize yourself with their content as they play an important role and are meant to be extremelly readable.")
            (<span> "The fourth file, is a Jazz class that represents you! "
              "It is a great place to put customization code or any code that you are experimenting with until it migrates to a full fledged independant class.")))
        (<division> title: "Console"
          (<node>
            (<span> "The Console is used to evaluate Jazz code. Use it to experiment freely."
              (<p>)
              (<img> src: "screenshots/console.png")
              (<p>))
            (<span> "Select the Console either by clicking inside it or by using the Control-Alt-Space shortcut. ")
            (<node>
              (<span> "Be carefull, the Console is a full fledged text. "
                "The freedom of beeing inside a freely editable text can be surprising to new users. "
                "Expressions to be evaluated must be entered at the end. "
                "Note that Control-Alt-Space can be used anytime to force a fresh prompt at the end.")
              (<span> "Tab and Shift-Tab can be used to insert previous expressions. Note that the previous expression does not replace the current line but is inserted. "
                "This enables one to type some text, use Tab to insert a previous expression, continue typing, ...")
              (<span> "Another convenient way to access previous expressions, is to place the cursor on the line you want and press Enter. This will copy that line to a fresh line at the bottom."))))
        (<division> title: "Jazz and Scheme"
          (<node>
            (<span> "Note that Jazz is not a Scheme compliant Language. Scheme programmers can expect some surprises!")
            (<node>
              (<span> "Definitions use the " (<code> "definition") " keyword instead of define. This naming integrates much better with the rest of the language.")
              (<span> "Functions in Jazz are named " (<code> "function") " instead of lambda.")
              (<span> "Scheme's " (<code> "and") " / " (<code> "or") " are " (<code> "essay") " / " (<code> "either") " in Jazz. "
                "Jazz reserves " (<code> "and") " / " (<code> "or") " for logical only operations that can be compiled directly to C's " (<code> "&&") " / " (<code> "||") " operators.")))))
      (<article> name: tutorial-class title: "Creating classes"
        (<division> title: "Workbench"
          (<node>
            (<span> "Jazz code must reside inside a unit. A unit can be anyone of:")
            (<node>
              "Class"
              "Interface"
              "Package")
            (<span> "To be accesible to Jazz, a unit must be installed in the Workbench. "
              "Use the Workbench Manager, the window at the top left to add new units to the workbench or import existing ones from the file system."
              (<p>)
              (<img> src: "screenshots/workbench_me.png")
              (<p>))))
        (<division> title: "Workspaces"
          (<node>
            (<span> "Now, open your Me.jazz user class by double-clicking it in the worbench. "
              "One thing you will notice if you look at the right end side of the toolbar, is that the current workspace is now the Text workspace. "
              (<p>)
              (<img> src: "screenshots/workspaces_text.png")
              (<p>)
              "This happened automatically when you edited your Me.jazz class. "
              "Note that this workspace gives you access to text related tools like the Chapters and Hierarchy tools. "
              "Also note that common tools like the Console are accessible in any workspace. "
              (<p>)
              "Available workspaces are:"
              (<node>
                "Home"
                "Debugger"
                "Groupware"
                "SQL"
                "Text")
              (<p>)
              "Note that there are other workspaces in the distribution, but because of their experimental or incomplete nature, they are not installed by default. "
              "One that is close to completion and that might be of interest is a full featured GUI designer.")))
        (<division> title: "Code"
          (<node>
            (<span> "Enter the following method:"
              (<p>)
              (<pre> "(" (<span> class: "keyword" "method") " (" (<span> class: "definition" "random-element") " seq)
                       (element seq (random (length seq))))")
              (<p>)
              (<span> "Evaluate it by placing the cursor anywhere inside it and hitting Enter. "
                "The " (<code> "random-element") " method is now defined! "
                "You can easily experiment with it in the Console. "
                "Try evaluating " (<code> "(random-element '(a b c d e))") " a couple times..."))))
        (<division> title: "Free References"
          (<node>
            (<span> "Enter the following method:"
              (<pre> "(" (<span> class: "keyword" "method") " (" (<span> class: "definition" "count") " target seq . rest)
                       (bind-keywords ((key identity) (test eqv?)) rest
                         (let ((total 0))
                           (for-each (function dynamic (object)
                                       (when (target (keyed object))
                                         (increase total)))
                                     seq)
                           total)))")
              (<p>)
              (<span> "When you evaluate it, you will get:")
              (<p>)
              (<img> src: "screenshots/walk_error.png")
              (<p>)
              (<span> "The Jazz codewalker detected references to the free symbols " (<code> "keyed") " and " (<code> "increase") ". "
                "Note that our typos where catched early without having to actually execute the code. ")
              (<p>)
              (<span> "If you know where the free symbols are, you can click Ignore. Else, click the Highlight button that will highlight them for you:"
                (<p>)
                (<pre> "(" (<span> class: "keyword" "method") " (" (<span> class: "definition" "count") " target seq . rest)
                         (bind-keywords ((key identity) (test eqv?)) rest
                           (let ((total 0))
                             (for-each (function dynamic (object)
                                         (when (target (" (<span> class: "highlighted" "keyed") " object))
                                           (" (<span> class: "highlighted" "increase") " total)))
                                       seq)
                             total)))")
                (<p>)))))
        (<division> title: "Debugging"
          (<node>
            (<span> "Correct the previous free references by changing " (<code> "keyed") " to " (<code> "key") " and " (<code> "increase") " to " (<code> "increase!") ". You can now reevale the method by presse control-enter from anywhere inside the method.")
            (<span> "Lets try our new method by evaluating " (<code> "(count 'a '(a b a a d c))") " in the Console. You will get:"
              (<p>)
              (<img> src: "screenshots/count_error.png")
              (<p>)
              (<span> "If you know what the problem is from just reading the error message, click Ignore. Else, click the Debug button that will bring up the debugger:"
                (<p>)
                (<a> href: "screenshots/count_debugged.png" (<img> src: "screenshots/count_debugged_small.png"))
                (<p>))))))
      (<article> name: tutorial-view title: "A simple graphical view"
        (<division> title: "Install"
          (<node>
            (<span> "First, install the org.jazz.tutorials product in your Workbench. "
              "To do this, right-click your Workbench icon, select \"Install Product...\" and open inside your installation folder the Products/org.jazz.tutorials/org.jazz.tutorials.jazz file.")))
        (<division> title: "Run"
          (<node>
            (<span> "Execute the following code at the Console:"
              (<p>)
              (<pre> "(new-frame~ Mandelbrot)")
              (<p>)
              (<span> "This is a very simple view I did to show my son how the Mandelbrot set was calculated. "
                "Now it can be used to learn how Jazz graphical views work!")
              (<p>))
            (<span> "More coming Soon"))))
      (<article> name: tutorial-application title: "A basic application"
        (<node>
          (<span> "Coming Soon")))))
    (<section> name: manual title: "User Manual" products: (org.jazz org.jedi)
      ))
  
  ;; (<section> name: forums title: "Forums")
  ;; (<section> name: blogs title: "Blogs")
  ;; (<section> name: wiki title: "Wiki")
  ;; (<section> name: getting-started title: "Getting Started")
  ;; (<section> name: manual title: "Manual" products: (org.jazz org.jedi))
  ;; (<section> name: community title: "Community"
  ;;   (<articles>
  ;;     (<article> name: list title: "List")
  ;;     (<article> name: list-archive title: "List Archive")))
  ;; (<section> name: resources title: "Resources"
  ;;   (<articles>
  ;;     (<article> name: external-links title: "External Links")))
  (<section> name: development title: "Development"
    (<articles>
      (<article> name: reporting-bugs title: "Reporting Bugs"
        (<p> "For now, please send bugs and suggestions to the Jazz discussion group at "
          (<a> href: "http://groups.google.com/group/jazzscheme" "http://groups.google.com/group/jazzscheme")
          " or directly to "
          (<a> href: "mailto:gcartier@jazzscheme.org" "gcartier@jazzscheme.org")))
      (<article> name: contributing title: "Contributing"
        (<p> "Contributions of any kind are always welcome! "
          "We will be working closely with contributors to make sure contributed code is of the highest quality and integrates well with the existing system. "
          "If you are a beginning Jazz programmer, this can be a great learning experience!"))
      (<article> name: contact title: "Contact Info"
        (<a> href: "mailto:gcartier@jazzscheme.org" "gcartier@jazzscheme.org")))
    (<section> name: new title: "What's New"
      (<articles>
        (<article> name: tutorial-code title: "Jazz"
          (<p>) (<b> "2007-05-28 - 1.0b6")
          (<node>
            "Major rework of everything related to key bindings"
            (<node>
              "User configurable key bindings"
              "Support for multiple configurations per user"
              "Basic Emacs configuration"
              "Bindings manager window"
              "Bindings file for storing user configurations"
              "Simplified all the action related code radically"
              "Tab navigation is now friendly with completion"
              "Backspace and modifiers now work correctly with the macro recorder")
            "Catalogs"
            (<node>
              "Full support for Scheme and Common Lisp"
              "Catalogs are now fully integrated to projects"
              "Catalogs now delegate to extensible file parsers"
              "New catalogs window for easy activation / deactivation"
              "Update catalog menu item in the workbench manager and in texts")
            "Replaced the tag-symbolic kludge by new <x!> and <x~> syntaxes"
            "Hosted concept renamed to guest"
            "Verify reload is now done on mouse-up thus fixing many annoying bugs"
            "Fixed a compiler bug with manifest properties"
            "Standardized all file names to respect Unix conventions"
            "Added explicit support for .fusion files"
            "Hashing has been extended for user defined classes"
            "The boot process was made much more robust and many bugs fixed in the crash handler"
            "Fixed some bugs in the HTTP server"
            "Playing a macro recording is now an atomic action"
            "Added a stage slot to the Version class that is an optional symbol")
          (<p>) (<b> "2007-05-03 - 1.0b5")
          (<node>
            (<span>
              "Added lots of support for Scheme code edition which is now almost on par with Jazz code."))
          (<p>) (<b> "2007-04-23 - 1.0b4")
          (<node>
            (<span> "Jazz has undergone major surgery and is now a lot closer to Scheme syntax and semantics."
              (<node>
                "Reader syntax for booleans and empty list is now Scheme compliant."
                (<span> "The special forms " (<code> "let") " and " (<code> "let*") " now have Scheme semantics.")
                "Case datum must now always be lists."
                "Dynamic object calls now use a functional syntax: " (<code> "(f~ obj a b c)")))
            (<span> "Edition of Scheme code is much more functional."))
          (<p>) (<b> "2007-01-15")
          (<node>
            (<span> "Fixed a subtle and extremely annoying bug where a Jazz application when launching would sometimes just beep and then stall without any GUI appearing. "
              "It was caused by the error occuring at a point in the boot process where the toplevel is created but not yet visible. "
              "Because the visual debugger is not available at that point, the C runtime displays the error in a message box. "
              "The bug was to pass the toplevel as the message box's parent without checking if it was visible...")
            (<span> "Fixed a GUI alignment bug in the tree when line or column separators where showing.")
            (<span> "Changed default behavior of L&F where widgets now fill their bounding rect.")
            (<span> "Added syntax coloring and basic text support for C# source code.")
            (<span> "The compare files view now sets its title to the name of the compared file. "
              "This is especialy usefull when iterating through files from a directories comparision.")
            (<span> "Fixed a bug in the Class Browser that was happening when browsing the whole class tree from the Object root.")
            (<span> "Fixed a bug that was stopping the outdated core dialog from showing. "
              "If any core file is outdated, this dialog will open when Jedi is launched to warn about having to recompile as core files are never loaded interpreted.")
            (<span> "Fixed another bug that was stopping the boot time from beeing displayed after Jedi launches.")
            (<span> "Fixed a bug in the stack dump that happened when an error occured inside a definition initialization.")
            (<span> "Fixed a compiler bug where the compiler sometimes would not recompile the Properties.prop file.")
            (<span> "Ported Jazz to Visual Studio 2005. "
              "Initial times where disapointingly slower, so I changed the optimization flag from /O1 optimize for space, to /O2 optimize for speed. "
              "With this change, the new Launcher.exe is 20% faster than the old one.")
            (<span> "Fixed a very nasty bug that the port to Visual Studio 2005 uncovered where the Type and Unit classes where loaded twice with in turn corrupted internal data structures.")
            (<span> "Cleanup of the Jazz Build folder. "
              "Removed the Vc folder which was not really used and renamed VcDirect to Vc. "
              "Now uses the more standard approach of having all compilation results go to a common folder with the same name as the compilation policy used. ")
            (<span> "Added explicit create / use support for precompiled headers.")
            (<span> "Major rework of everything log related. "
              "It is still a work in progress, but the new logging facility will log in memory or to file. "
              "Will seamlessly support resources allocation logging to debug memory leaks. "
              "Will integrate with the profiler. "
              "And more.")
            (<span> "A very fundamental improvement was done where every object now possesses 2 flags, one saying if it was successfully initialized and the other one saying if it was successfully destroyed. "
              "The first flag is used by the kernel to guaranty never calling key methods like printing, destruction, ... on not fully initialized objects. "
              "This was a major source of difficult bugs if an error occured during an object initialization and left it in a basically corrupted state. "
              "The second flag is used by the garbage collector, to flag every object that should have been destroyed and was not in a special 'undestroyed' color. "
              "New gc functions can then be used to inspect those object and detect memory leak of external resources.")
            (<span> "The gc function now guaranties a full sweep cycle.")
            (<span> "Added support for Windows performance counters with the Performance-Query class.")
            (<span> "The \"View Log\" menu item of the \"Project\" menu now opens the log with wrap around.")
            (<span> "Compiled externals, e.g. all primitives like cons, map, error, ... now display their C entry point when printed. "
              "For example, cons will print as " (<code> "{@Compiled-External JzCons #x79720750}") ".")
            (<span> "The complex problem of project dependencies is at last solved in a satisfying way. "
              (<node>
                (<span> "Dependencies are now recursively considered. Each module should include a dependency for all its external references. ")
                (<span> "Here is a list of supported and upcoming dependency kinds:"
                  (<node>
                    "reference - module is referenced and a codewalk will be used to only include referenced classes"
                    "include - module is referenced and all classes will be included wheter referenced or not"
                    "error - module is referenced but module inclusion is optional. If a reference is called, generate a runtime error describing the missing module"
                    "load (upcoming) - module is referenced but module inclusion is optional. If a reference is called, autoload the missing module transparently to the user"
                    "install (upcoming) - module is referenced but module inclusion is optional. If a reference is called, trigger the installer program to let the user install the missing module"))
                (<span> "Removed the very confusing \"Export Manifest...\" menu item of the \"Project\" menu as now Jazz automatically generates the manifest file when launching an application. "
                  "The manifest generation logic has also been improved making then generation instantaneous.")
                (<span> "The new work on dependencies enabled an old patch of wrapping certain class loads with " (<code> "(load 'class-name)") " to be removed everywhere.")))
            (<span> "Fixed a bug that made Jedi crash if walk errors where present in the user class."))
          (<p>) (<b> "2006-12-29")
          (<node>
            "Added the ability have multiple recordings available at the same time."
            "Fixed a bug in the compiler when compiling externals returning void."
            "Fixed many small bugs in the threading system."
            "Many improvements to the socket and JRM implementations."
            "Finally took the time to clean and unify all the logging related classes."
            (<span> "Added very simple " (<code> "get-parameter") " and " (<code> "set-parameter") " methods to help in building thread safe code. "
              "Note that these two methods can be very simple and naive as Jazz doesn't support continuations.")
            "The compare files tool now displays the name of the compared files in its title."
            "Fixed a memory leak in the String-Printer class."
            (<span> "The " (<code> "wait-for") " method can now wait on multiple objects.")
            (<span> "A process can now call the " (<code> "signal-readyness") " method to signal its boot is completed. "
              "This can be combined with a new " (<code> "wait-ready") " keyword of " (<code> "Shell.create-process") " to wait on a process beeing ready.")
            (<span> "Added the code necessary to regenerate the local version of the jazzscheme.org website as code in the Jedi-User class. "
              "For the moment there is no fancy GUI to manage all this, the " (<code> "regenerate-jazzwebsite") " method is simply called by the " (<code> "test0") " method that can be invoked by Ctrl-0.")
            "Did a simple ping server to help debug some socket stuff that I added afterwards to the org.jazz.samples product.")
          (<p>) (<b> "2006-12-18")
          (<node>
            "Made the project dependencies into a permanent subcomponent of Project."
            "Renamed the two JML building macros to jml>> and form>>."
            "Added an editable? property to products and made org.jazz and org.jedi non-editable to stop a user from inadventently modifying them."
            "Added drag & drop from the Windows explorer to the Workbench."
            "Added a \"Synchronize Contents\" button to the Workbench that will select the entry corresponding to the current document if it is found."
            "New \"Add Document...\" item in the Workbench context menu that will create a file based on a template and add it to the selected group or product."
            "Small fixes in the view debugger highlighting."
            "The XHTML-Renderer nows handles correctly the pre tag and inserts no whitespace."
            "Backward and Forward in History toolbar and menu items are now enabled / disabled according to the current history."
            "If text is selected when invoking the Class Browser, it will be entered as the class name."
            "Many small improvements to the Login dialog."
            (<span> "Added new " (<code> "tab-stop-enter") " and " (<code> "tab-stop-exit") " methods to the View class.")
            "Replaced the doubtful heuristic used when generating remotable code by an explicit remotable? property of product files settable from the Workbench.")
          (<p>) (<b> "2006-12-13")
          (<node>
            "First early release version of JazzScheme."))))
    (<section> name: roadmap title: "Roadmap"
    (<articles>
      (<article> title: "Roadmap"
        "Note that these entries represent my own development priorities at this point in time and can change depending on :"
        (<node>
          "Community feedback,"
          "Time and resources availability,"
          "Collaboration proposals,"
          "Contracts priorities,"
          "..."))
      (<article> title: "High Priority"
        (<div> class: "project-first" (<span> class: "project" "JazzScheme Public Release") " (medium project, 90% complete, work in progress)")
        (<p>) (<i> "Description")
        (<p>)
        (<span> "Complete the work needed on JazzScheme for a public release.")
        (<p>) (<i> "Todo")
        (<p>)
        (<node>
          "Documentation"
          "Tutorials"
          "Icons for Jedi"
          "Improvements to project management"
          (<node>
            "Configuration components to launch projects")
          "Action edition in the view debugger")
        (<div> class: "project" (<span> class: "project" "Fusion") " (large project, 50% complete, work in progress)")
        (<p>) (<div> (<i> "Description"))
        (<p>) (<span> "Fusion is a complete rewrite of the Jazz Kernel from C++ to Scheme, targeting mainly Gambit.")
        (<p>) (<i> "Todo")
        (<p>)
        (<node>
          "Complete language features"
          (<node>
            "Inner classes")
          "Clean the language implementation of macros"
          "Optimisations"
          "Port the Jazz libraries"
          "Port the Jazz GUI framework"
          "Port Jedi and other applications")
        (<div> class: "project" (<span> class: "project" "Multi-Platform GUI") " (large project, 20% complete, work in progress)")
        (<p>) (<i> "Description")
        (<p>)
        (<span> "Port the Jazz GUI framework to other operating systems, mainly Windows, X11 and Macintosh.")
        (<p>)
        (<div> class: "project" (<span> class: "project" "Remote / Thread Debugger") " (medium project, 70% complete)")
        (<p>) (<i> "Description")
        (<p>)
        (<span> "Jedi currently has a fully functional local in-process debugger, but the remote process and thread debuggers are only partialy functional. "
          "This is very important to fully support building and debugging applications in Jazz.")
        (<p>) (<i> "Notes")
        (<p>)
        (<node>
          (<span> "Note that this work is a stepping stone for Fusion, as the goal is to have the actual Jedi operate as a visual debugger for Fusion processes until Fusion is ready for Jedi to be ported to it. ")
          (<span> "This will also quickly enable use of Fusion as a multi-platform language debugged on Windows by the Jedi IDE. ")
          (<span> "Also note that this could easily be extended to enable Jedi to become a full-fledged remote debugger for any Gambit (or even other Schemes) process.")))
      (<article> title: "Medium Priority"
        (<div> class: "project-first" (<span> class: "project" "License Module") " (small project, 60% complete)")
        (<p>) (<i> "Description")
        (<p>)
        (<span> "The goal of this module is to have all necessary licensing services to distribute trial versions of products.")
        (<p>)
        (<div> class: "project" (<span> class: "project" "Web Server / Framework") " (large project, 50% complete)")
        (<p>) (<i> "Description")
        (<p>)
        (<span> "Module to support building static and dynamic websites in Jazz.")
        (<p>) (<i> "Todo")
        (<node>
          "Complete the actual first draft implementation of the Web Server."
          "Consider the pros and cons of a continuation based approach to Web servers."
          "Build a nice modern framework for web development propably based on Ajax like concepts."
          "Optimize JML, especially JML transformations."))
      (<article> title: "Low Priority"
        (<div> class: "project-first" (<span> class: "project" "Build System / Dependencies Analyser") " (medium project, 80% complete)")
        (<p>) (<i> "Description")
        (<p>)
        (<span> "At the moment, Jazz has a solid module system that can be used to build applications. "
          "What is needed is a solution to the problem of complex frameworks like Jazz where including one module can potentially include almost all other modules because of all the cross-module references.")
        (<p>)
        (<div> class: "project" (<span> class: "project" "Java Interface") " (large project, 40% complete)")
        (<p>) (<i> "Description")
        (<p>)
        (<span> "Using JNI, enable Jazz code to seamlessly call Java classes and vice-versa.")
        (<p>)
        (<p>) (<i> "Notes")
        (<p>)
        (<node>
          (<span> "At the moment, we are already able to call Java code. "))
        (<p>)
        (<p>) (<i> "Todo")
        (<p>)
        (<node>
          (<span> "Garbage collector support. ")
          "Finish all the details.")
        (<p>)
        (<div> class: "project" (<span> class: "project" ".Net Interface") " (large project, 0% complete)")
        (<p>) (<i> "Description")
        (<p>)
        (<span> "Enable Jazz code to seamlessly call .Net classes and vice-versa.")
        (<p>)
        (<div> class: "project" (<span> class: "project" "Blues") " (medium project, 60% complete)")
        (<p>) (<i> "Description")
        (<p>)
        (<span> "Blues is a convertion of the actual Kernel of Jazz into a pure Scheme system on top of which Fusion could run. "
          "In other words, Jazz = Fusion + Blues.")
        (<p>) (<i> "Notes")
        (<p>)
        (<node>
          "For the moment, it is low priority as it mainly a backup plan if major problems are encountered with Gambit.")
        (<div> class: "project" (<span> class: "project" "GUI Designer") " (medium project, 75% complete)")
        (<p>) (<i> "Description")
        (<p>)
        (<span> "Create a GUI designer for Jazz views and layouts.")
        (<p>) (<i> "Todo")
        (<p>)
        (<node>
          "The GUI designer is pretty much functional for basic editing. What is needed is support for layouts and for Jazz's usage of container views."))
      (<article> title: "To be done As Needed"
        (<div> class: "project-first" (<span> class: "project" "Kernel Enhancements") " (medium project, 60% complete)")
        (<p>) (<i> "Description")
        (<p>)
        (<node>
          "Finish work on resource leaks debugging tools"
          "Thread safety at the kernel level")
        (<div> class: "project" (<span> class: "project" "Logging / Resources Monitoring / Performance Profiling") " (small project, 80% complete)")
        (<p>) (<i> "Description")
        (<p>)
        (<span> "At the moment Jazz has a nice logging framework, basic resources monitoring and a simple yet usefull performance profiler. ")
        (<p>) (<i> "Todo")
        (<p>)
        (<node>
          "Unify logging, resources monitoring and performance profiling using JML."
          "Make all three aware of the others such that resources or performance overhead of any of the three will not be included in the final reports.")
        (<p>)
        (<div> class: "project" (<span> class: "project" "Iteration Framework") " (small project, 0% complete)")
        (<p>) (<i> "Description")
        (<p>)
        (<span> "At the moment, Jazz supports internal iterator mainly through " (<code> "for-each") " and user extensible external iterators. "
          "What is needed for simplicity and performance is a way to support user extensible internal iterators.")
        (<p>)
        (<div> class: "project" (<span> class: "project" "Styled Text") " (medium project, 70% complete)")
        (<p>) (<i> "Description")
        (<p>)
        (<span> "The Jazz text already supports embedding views in a fashion similar to HTML but it needs more work. ")
        (<p>)
        (<p>) (<i> "Goals")
        (<p>)
        (<node>
          "Simplify GUI design."
          "Simplify building applications where both a desktop version and a web version are needed.")
        (<p>)
        (<p>) (<i> "Todo")
        (<p>)
        (<node>
          "Implement the upward-downward text rendering algorithm for internal objects resizing."
          "Clean the text by implementing most of the good concepts of CSS."))))
    (<section> name: sourcecontrol title: "Source Control"
    (<articles>
      (<article> title: "Source Control"
        "We use Git for our source control.")
      (<article> title: "Git"
        (<b> "User")
        (<p>)
        (<i> "only once") (<br>)
        "git clone git://address-of-repo/home/jazz/dev"
        (<p>)
        (<i> "from time to time") (<br>)
        "git pull"
        (<p>)
        (<b> "Contributor")
        (<p>)
        (<i> "only once") (<br>)
        "git clone git://address-of-repo/home/jazz/dev" (<br>)
        #"git config user.email "you@email.com""# (<br>)
        #"git config user.name "Your Name""# (<br>)
        "git branch work" (<br>)
        "git checkout work"
        (<p>)
        "git pull (?)"
        (<p>)
        "git format-patch master"
        (<p>)
        (<b> "Maintainer")
        (<p>)
        "git push pub master"
        (<p>)
        "git am -3 c:/merge/* (ou bien sans le -3) (?)" (<br>)
        "git am --resolved (?)"))))
  (<section> name: download title: "Download"
    (<div> style: "margin-top: 22;"
      (<b> "Please note that JazzScheme has not been publicly released yet. ")
      (<p>)
      (<b> "These downloads are beta releases made available so people can start experimenting with JazzScheme early. ")
      (<p>)
      (<span>
        "Send bugs and suggestions to the Jazz discussion group at "
        (<a> href: "http://groups.google.com/group/jazzscheme" "http://groups.google.com/group/jazzscheme")
        " or directly to "
        (<a> href: "mailto:gcartier@jazzscheme.org" "gcartier@jazzscheme.org")))
    (<articles>
      (<article> name: jazz/jedi title: "JazzScheme (source code and Windows binaries)"
        "Note that JazzScheme comes bundled with Jedi, the JazzScheme IDE."
        (<p>)
        (<node>
          (<span> "2007-05-28 - " (<a> href: "files/JazzScheme_1.0b6.zip" "JazzScheme_1.0b6.zip"))
          (<span> "2007-05-03 - " (<a> href: "files/JazzScheme_1.0b5.zip" "JazzScheme_1.0b5.zip"))
          (<span> "2007-04-23 - " (<a> href: "files/JazzScheme_1.0b4.zip" "JazzScheme_1.0b4.zip"))))))
  ;; (<section> name: faq title: "FAQ")
  )
