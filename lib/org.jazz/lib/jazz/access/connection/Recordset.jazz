;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Database Recordsets
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.access.connection.Recordset jazz


(import (jazz.access)
        (jazz.library)
        (jazz.schema)
        (jazz.utilities))


(class Recordset extends Object
  
  
  (method (initialize command . rest)
    (nextmethod)
    (setup-recordset rest)
    (when command
      (apply open command rest))
    (destroy-mandatory))
  
  
  (method virtual (setup-recordset initargs)
    )
  
  
  (method (destroy)
    (destroy-recordset)
    (nextmethod))
  
  
  (method virtual (destroy-recordset)
    )
  
  
  ;;;
  ;;;; Open
  ;;;
  
  
  (method public virtual (opened?)
    )
  
  
  (method virtual (open command . rest)
    )
  
  
  ;;;
  ;;;; State
  ;;;
  
  
  (method public virtual (get-state)
    )
  
  
  ;;;
  ;;;; Metadata
  ;;;
  
  
  (method public virtual (new-recordset-metadata)
    )
  
  
  (method public virtual (get-field-type metadata field)
    )
  
  
  (method public virtual (get-field-value metadata field)
    )
  
  
  (method public virtual (safe-field-value metadata field)
    (get-field-value metadata field))
  
  
  ;;;
  ;;;; Recordsets
  ;;;
  
  
  (method public virtual (next-recordset!)
    )
  
  
  ;;;
  ;;;; Data
  ;;;
  
  
  (method public virtual (get-columns)
    (with-closed ((metadata (new-recordset-metadata)))
      (let ((count (get-count~ metadata)))
        (map (function (n)
               (get-column~ metadata n))
             (naturals 0 count)))))
  
  
  (method public virtual (get-rows table (max-load: max-load #t) (data-class: data-class {}))
    (with-closed ((metadata (new-recordset-metadata))
                  (fields (get-fields~ metadata)))
      (let ((fact (new List-Factory))
            (count 0)
            (has-more? #f))
        (iterate-records
          (function ()
            (when (or (eq? max-load #t) (<= count max-load))
              (if (and (neq? max-load #t) (= count max-load))
                  (begin
                    (set! has-more? #t)
                    #f)
                (let ((values (map (function (field)
                                     (safe-field-value metadata field))
                                   fields)))
                  (put~ fact (if (not data-class)
                                 (new Data-Row table values)
                               (apply new data-class table values)))
                  (increase! count)
                  #t)))))
        (let ((rows (get-output~ fact))
              (missing? has-more?))
          (values rows missing?)))))
  
  
  ;;;
  ;;;; Records
  ;;;
  
  
  (method public virtual (move-first)
    )
  
  
  (method public virtual (move-last)
    )
  
  
  (method public virtual (move-next)
    )
  
  
  (method public virtual (move-previous)
    )
  
  
  (method public virtual (at-bof?)
    )
  
  
  (method public virtual (at-eof?)
    )
  
  
  (method public virtual (iterate-records proc)
    )
  
  
  (method public virtual (for-each-record proc)
    (iterate-records
      (function ()
        (proc)
        #t)))
  
  
  ;;;
  ;;;; Table
  ;;;
  
  
  (method public (create-table (name: name {}) (max-load: max-load #t))
    (let ((table (new Data-Table name: name)))
      (load-table table max-load: max-load)
      table))
  
  
  (method protected (load-table table (max-load: max-load #t) (data-class: data-class {}))
    (let ((columns (get-columns)))
      (receive (rows missing?) (get-rows table max-load: max-load data-class: data-class)
        (set-columns~ table columns)
        (set-rows~ table rows)
        (set-missing?~ table missing?))))))
