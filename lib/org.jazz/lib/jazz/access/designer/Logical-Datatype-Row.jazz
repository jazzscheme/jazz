;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Logical Datatype Row
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.access.designer.Logical-Datatype-Row jazz


(import (jazz.access)
        (jazz.designer)
        (jazz.library)
        (jazz.utilities))


(class Logical-Datatype-Row extends Combo-Row


  (property domains initialize '() getter get-domains setter set-domains)


  ;;;
  ;;;; Initialization
  ;;;


  (method (initialize . rest)
    (bind-keywords ((domains '()) . others) rest
      (apply nextmethod others)
      (set! domains~self domains)
      (setup domains)))
  
  
  (method (setup domains)
    (set-choices (map (function (domain)
                        (list domain (get-name~ domain)))
                      (get-children~ domains))))
  
  
  ;;;
  ;;;; Access
  ;;;


  (method public (get-domains)
    domains)


  (method public (set-domains value)
    (set! domains value))

  
  ;;;
  ;;;; Presentation
  ;;;
  
  
  (method (present type)
    (if (null? type)
        "{}"
      (present~ type)))
  
  
  ;;;
  ;;;; Edition
  ;;;
  
  
  (method (editor-class)
    Logical-Datatype-Row-Editor)
  
  
  (method (get-edited-value)
    (let* ((string (get-content~ editor))
           (parsed (parse-content string)))
      (when parsed
        (receive (name size) parsed
          (new Logical-Datatype name size)))))
  
  
  (method (set-edited-value value)
    (set-content~ editor (present value)))
  
  
  (method (read-content content)
    (parse-strings (substitute #\comma #\space content) separator: " "))
  
  
  (method (parse-content string)
    (let ((content (read-content string)))
      (case (length content)
        ((0) {})
        ((1) (values (car content) {}))
        ((2) (values (car content) (parse-integer (cadr content))))
        (else (signal (new Parse-Error message: "Logical datatype syntax: name or name size")))))))


;;;
;;;; Editor
;;;


(class Logical-Datatype-Row-Editor extends Combo-Row-Editor
  
  
  (method (content-change origin)
    (unless (eq? origin 'popup)
      (nextmethod origin)))
  
  
  (method (combo-choice)
    )
  
  
  (method (get-entry)
    (let ((content (read-content (get-content))))
      (when content
        (car content))))
  
  
  (method (set-entry entry)
    (let ((actual (read-content (get-content))))
      (set-content (join (cons entry (cdr actual)) " "))))))
