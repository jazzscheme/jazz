;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; JDBC Connections
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.access.providers.connection.jdbc.JDBC-Connection jazz


(import (jazz.access)
        (jazz.library)
        (jazz.utilities))


(class JDBC-Connection extends Connection
  
  
  (slot handle initialize {})
  
  
  (method (destroy-connection)
    (when handle
      (close~ handle)
      (set! handle {}))
    (nextmethod))
  
  
  ;;;
  ;;;; Access
  ;;;
  
  
  (method public (get-handle)
    handle)
  
  
  ;;;
  ;;;; Open
  ;;;
  
  
  (method (open data-source . rest)
    (preload-drivers)
    (let ((runtime (getRuntime~ org.jazzscheme.java.Runtime)))
      (let* ((url (get-connection-string~ data-source))
             (username (get-username~ data-source))
             (password (get-password~ data-source))
             (connection (getConnection~ runtime url username password)))
        (set! handle connection)))
    (nextmethod data-source))
  
  
  (definition Drivers-Loaded?
    #f)
  
  
  (method (preload-drivers)
    (unless Drivers-Loaded?
      (load-drivers)
      (set! Drivers-Loaded? #t)))
  
  
  (method (load-drivers)
    ;; this needs to be abstracted
    (let* ((appl (get-application))
           (profile (get-profile~ appl))
           (drivers (jdbc-drivers~ profile))
           (runtime (getRuntime~ org.jazzscheme.java.Runtime)))
      (for-each (function (driver)
                  (forName~ runtime driver))
                drivers)))
  
  
  ;;;
  ;;;; State
  ;;;
  
  
  (method (get-state)
    'open)
  
  
  ;;;
  ;;;; Request
  ;;;
  
  
  (method (new-request)
    (new JDBC-Request self))
  
  
  ;; for the moment
  (method (supports-multirequests?)
    #f)
  
  
  ;;;
  ;;;; Execute
  ;;;
  
  
  (method (execute command)
    (with-closed ((request (new-request)))
      (execute~ request command)))))
