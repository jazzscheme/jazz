;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; MySQL Inventory View
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;    Marcel Cote
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.access.providers.inventory.mysql.MySQL-Inventory-View jazz


(import (jazz.access)
        (jazz.ui)
        (jazz.library)
        (jazz.utilities))


(class MySQL-Inventory-View extends Inventory-View
  
  
  (slot view-name    initialize {})
  (slot view-comment initialize {})
  
  
  (method (initialize inventory parent view-name view-comment)
    (nextmethod inventory parent)
    (set! view-name~self view-name)
    (set! view-comment~self view-comment)
    (destroy-mandatory))
  
  
  (method (destroy)
    (nextmethod))
  
  
  ;;;
  ;;;; Database
  ;;;
  
  
  (method public (get-handle)
    @w
    handle)
  
  
  (method (get-title)
    view-name)
  
  
  (method (get-text)
    (let* ((database (get-database~ inventory))
           (cmd (tie "SELECT view_definition FROM information_schema.views WHERE table_schema = '{database}' and table_name = '{view-name}'"))
           (row (first (load-rows~ (get-connection~ inventory) cmd))))
      (get~ row "view_definition")))
  
  
  (method public (set-text value)
    @w
    (put-Text~ handle value))))
