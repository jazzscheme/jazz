;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Configurations Manager
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.build.configuration.Configurations-Manager jazz


(import (jazz.jml)
        (jazz.library)
        (jazz.literals)
        (jazz.system)
        (jazz.ui)
        (jazz.ui.view)
        (jazz.utilities))


(class Configurations-Manager extends View


  (form
    (<install>                                              size: {Dimension 603 514}
      (<Push-Button>                   name: update         title: "Update" position: {Point 499 7} size: {Dimension 100 22} action-handler: {Event-Handler :form on-update} default?: #t)
      (<Border-View>                   name: border         position: {Point 2 35} size: {Dimension 599 477} border-type: edge style: entry
        (<Scroller-View>                                    vscroll?: #t
          (<!>                         name: content        layout-type: fill
            (<Tree-Header>                                  style: document
              (<!>                     name: content
                (<Tree-View>           name: configurations filled-column: name selection-handler: {Event-Handler :form on-selection-change} double-click-handler: {Event-Handler :form on-double-click} multiple-selection?: #t
                  (<Tree-Node-Column>  name: name           title: "Name" width: 150 toplevel-controls?: #f display-images?: #f)
                  (<Tree-Label-Column> name: system         title: "System" width: 100)
                  (<Tree-Label-Column> name: platform       title: "Platform" width: 250)
                  (<Tree-Label-Column> name: windowing      title: "Windowing" width: 100)
                  (<Tree-Label-Column> name: safety         title: "Safety" width: 100)
                  (<Tree-Label-Column> name: options        title: "Options" width: 100)
                  (<Tree-Label-Column> name: install        title: "Install" width: 100)))))))))
  
  
  (method meta (external-name . rest)
    'configurations-manager)
  
  
  ;;;
  ;;;; Component
  ;;;

  
  (method (finish initargs)
    (nextmethod initargs)
    (view-configurations)
    (update-buttons))
    
  
  ;;;
  ;;;; Host
  ;;;
    
  
  (method meta (host-icon)
    {Bitmap-Resource "Project"})
  
  
  (method meta (host-title)
    "Configurations Manager")
  
  
  (method meta (host-position)
    {Point 90 70})
  
  
  (method meta (host-size)
    {Dimension 623 414})
  
  
  (method (host-workspaces)
    '(home))
  
  
  ;;;
  ;;;; Events
  ;;;


  (method (resize dh dv)
    (nextmethod dh dv)
    (move-figure~ (locate 'update) dh 0)
    (size-figure~ (locate 'border) dh dv))
  
  
  (method (on-selection-change evt)
    (update-buttons))
  
  
  ;;;
  ;;;; Update
  ;;;


  (method public (view-configurations)
    (let ((tree (locate 'configurations)))
      (with-update-locked~ tree
        (function ()
          (remove-every-row~ tree)
          (for-each (function (configuration)
                      (let ((handler (new Event-Handler target: self method-name: 'on-change-active)))
                        (let ((c0 (new Tree-Node title: (->string (get-name~ configuration))))
                              (c1 (new Tree-Label title: (->string (get-references?~ configuration))))
                              (c2 (new Tree-Label title: (get-statistics~ configuration))))
                          (add-row~ tree children: (list c0 c1 c2) user-data: configuration))))
                    (get-indexed-configurations))))))
  
  
  (method (get-indexed-catalogs)
    (collect-if (function (catalog)
                  (is? catalog Indexed-Catalog))
                (get-catalogs~ (get-cataloguer~ (get-application)))))


  (method public (on-update evt)
    (with-cursor :wait
      (function ()
        (update-selection))))
  
  
  (method (on-double-click evt)
    (let ((sender (get-sender~ evt))
          (alt? (get-alt?~ evt)))
      (case (get-name~ sender)
        ((configurations)
         (with-cursor :wait
           (function ()
             (update-selection)))))))
  
  
  (method (update-selection)
    (let* ((tree (locate 'configurations))
           (selection (get-selection~ tree)))
      (define (effective-selection selection)
        (if (null? selection)
            (naturals 0 (get-row-count~ tree))
          selection))
      
      (for-each (function (row)
                  (let ((configuration (get-user-data~ (get-row~ tree row))))
                    (update~ configuration)
                    (let ((cell (new Cell row 2)))
                      (set-title~ (get-cell-data~ tree cell) (get-statistics~ configuration))
                      (invalidate-cell~ tree cell))))
                (effective-selection selection))))
  
  
  (method (update-buttons)
    (let ((tree (locate 'configurations)))
      (let ((count (get-row-count~ tree)))
        (set-enabled?~ (locate 'update) (> count 0)))))))
