;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Builder Documentation
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(<Module-Doc> name: Builder
  (<description>
    (<p> "Module for building projects")
    (<p>)
    (<definition> name: Projects
      (<p> "The most important class of this module is Project. "
        "The project class is a collection of modules and references used in a project, to build an application or library. "
        "That class must not be confused with the application itself or a process."))
    (<p>)
    (<definition> name: Modules
      (<p> "Jazz files are regrouped into modules. A project is composed of modules. Each included module can be controlled with the keywords:"))
    (<p>)
    (<node>
      (<span> ":error")
      (<span> ":reference")
      (<span> ":include")
      (<span> ":load (not implemented yet)")
      (<span> ":install (not implemented yet)"))
    (<p>)
    (<definition> name: Policies
      (<p> "This is a difficult zone where performance and flexibility clash. For now, a Jazz build can be done at 3 levels :")
      (<node>
        (<span> "Debug        - rarely used - mainly used to debug the generated C++ code")
        (<span> "Release      - emphasis is on dynamism, e.g. modifying base class B will not force a recompilation of A")
        (<span> "Distribution - emphasis is on performance. Minimal amount of safety checks. "
          "A programming error could crash the process. "
          "Note that even MetaScoop's commercial product do not use this mode as Release is fast enough for most needs!")))
    (<p>)
    (<definition> name: Manifest
      (<p> "The manifest is explicitly managed by the programmer. This gives more control to the programmer. There can be no surprise of having a file loaded that was not the one wanted because there was a name conflict. It also gives a very convenient place to put meta information about the unit that a program can programmatically access without having to open the file. Also, the load time is always very fast as there is never any searching to do. ")
      (<p> "By having IDE tools to automate mundane tasks like registering a new class in the manifest, this approach can be made almost painless and still keep all of its advantages. "))
    (<p>)))
