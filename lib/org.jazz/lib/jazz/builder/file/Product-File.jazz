;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Product Files
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.builder.file.Product-File jazz


(import (jazz.library)
        (jazz.builder)
        (jazz.designer)
        (jazz.utilities))


(class Product-File extends Component


  (property source   initialize {}  accessors generate)
  (property features initialize '() accessors generate)
  (property build?   initialize #t  accessors generate)
  ;; temp to false. in anycase all this is probably obsolete
  (property catalog? initialize #f  accessors generate)
  
  
  (slot product initialize {})


  ;;;
  ;;;; Access
  ;;;


  (method public (get-product)
    product)


  (method public (set-product value)
    (set! product value))


  ;;;
  ;;;; Source
  ;;;
  
  
  (method public virtual (get-effective-source)
    source)


  ;;;
  ;;;; Catalog
  ;;;
  
  
  (method public virtual (require-catalog)
    (require-catalog~ product))


  ;;;
  ;;;; Manifest
  ;;;
  
  
  (method public virtual (manifest-properties)
    (list source: source))
  
  
  ;;;
  ;;;; Build
  ;;;
  
  
  (method public virtual (preprocess project reporter log output . rest)
    #f)
  
  
  (method public virtual (build project reporter log output . rest)
    #f)


  ;;;
  ;;;; Designer
  ;;;
  
  
  (method meta (get-class-image)
    {Bitmap-Resource "File"})
  
  
  (method (presentation-property? property)
    (memq? (field-name property) '(source)))
  
  
  (method (get-presentation)
    (if source
        (get-name~ source)
      "<no-source>"))

  
  (method (get-categorized-properties)
    '(source features build?))

  
  (method (get-row-instance property)
    (case (field-name property)
      ((source) (new File-Row))
      ((build?) (new Boolean-Row))
      (else (nextmethod property))))))
