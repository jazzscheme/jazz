;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Synchronize Tree
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.builder.workbench.Synchronize-Tree jazz


(import (jazz.builder)
        (jazz.jml)
        (jazz.ui)
        (jazz.library)
        (jazz.utilities))


(class Synchronize-Tree extends Tree-View
  
  
  (form
    (<install>                         portfolio: :icons selection-mode: row filled-column: path multiple-selection?: #t
      (<Tree-Node-Column> name: path   title: "Path" width: 200 toplevel-controls?: #f)
      (<Left-Column>      name: left   title: "Workbench" width: 80 justification: center)
      (<Action-Column>    name: action title: "Action" width: 75 justification: center)
      (<Right-Column>     name: right  title: "Filesystem" width: 80 justification: center))))


;;;
;;;; Item-Column
;;;


(class Item-Column extends Tree-Column
  
  
  (method (draw-cell surface context row cell width height)
    (draw-background surface context row cell width height)
    @w
    (let ((lvl? (and (= (get-kind~ cell) 'node) (get-left~ cell) (get-right~ cell))))
      (when (and (not lvl?) (present? cell))
        (let ((image (present-image cell)))
          (draw-image~ (get-icons-cache~ (get-application)) surface context image (quotient (- width 16) 2) 0)))))
  
  
  (method abstract protected virtual (present? cell)
    )
  
  
  (method abstract protected virtual (present-image cell)
    ))


;;;
;;;; Left-Column
;;;


(class Left-Column extends Item-Column
  
  
  (method (present? cell)
    (get-left~ cell))
  
  
  (method (present-image cell)
    {Bitmap-Resource "Green"}))


;;;
;;;; Action-Column
;;;


(class Action-Column extends Tree-Column
  
  
  (method (draw-cell surface context row cell width height)
    (draw-background surface context row cell width height)
    @w
    (let ((action (get-action~ cell)))
      (when action
        (let ((appl (get-application))
              (image (action-image action (get-left~ cell) (get-right~ cell))))
          (draw-image~ (get-icons-cache~ appl) surface context image (+ (quotient (- width 16) 2) 1) 0))))))


;;;
;;;; Right-Column
;;;


(class Right-Column extends Item-Column
  
  
  (method (present? cell)
    (get-right~ cell))
  
  
  (method (present-image cell)
    {Bitmap-Resource "Blue"})))
