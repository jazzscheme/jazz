;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Debuggee Thread
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;    Stephane Le Cornec
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.debuggee.Debuggee-Thread jazz


(import (jazz.debuggee)
        (jazz.library)
        (jazz.utilities))


(class Debuggee-Thread extends Object
  
  
  (slot thread accessors generate)
  
  
  (method (initialize thread)
    (nextmethod)
    (set! thread~self thread))
  
  
  (method public (get-name)
    (thread-name thread))
  
  
  (method public (get-state)
    (let ((port (open-output-string)))
      (define (write-timeout to)
        (display " " port)
        (let ((expiry (- (systime->seconds to) (systime->seconds (current-systime)))))
          (display (/ (round (* 10.0 expiry)) 10.0)
                   port))
        (display "s" port))
      
      (let ((state (thread-state thread)))
        (cond ((thread-state-uninitialized? state)
               (format port "Uninitialized"))
              ((thread-state-initialized? state)
               (format port "Initialized"))
              ((thread-state-normally-terminated? state)
               (format port "Normally terminated"))
              ((thread-state-abnormally-terminated? state)
               (format port "Abnormally terminated"))
              ((thread-state-active? state)
               (let ((wf (thread-state-active-waiting-for state))
                     (to (thread-state-active-timeout state)))
                 (cond (wf
                         (format port "Waiting")
                         @wait (
                         (format port "Waiting ")
                         (write wf port)
                         (when to
                           (write-timeout to))))
                       (to
                         (format port "Sleeping")
                         @wait
                         (write-timeout to))
                       (else
                        (format port "Running")))))
              (else
               (write state port))))
      
      (get-output-string port)))
  
  
  (method public (get-stops)
    (get-thread-stops thread))))
