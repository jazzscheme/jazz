;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Debuggee
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.debuggee.Debuggee jazz


(import (jazz.debuggee.stub)
        (jazz.library)
        (jazz.platform)
        (jazz.utilities))


(class Debuggee extends Object
  
  
  (slot process)
  (slot stops initialize '() accessors generate)
  
  
  (method (initialize process)
    (nextmethod)
    (set! process~self process))
  
  
  (method public (get-name)
    (process-name~ process))
  
  
  (method public (get-icon)
    (process-icon~ process))
  
  
  ;;;
  ;;;; Control
  ;;;
  
  
  (method public (detach-from-controller)
    (detach-from-controller~ process)
    {})
  
  
  (method public (exit)
    (exit-process~ process))
  
  
  ;;;
  ;;;; Process
  ;;;
  
  
  (method public (get-process)
    (get-local-process~ process))
  
  
  (method public (get-toplevel-hwnd)
    @convert
    (get-handle~ (get-toplevel)))
  
  
  ;;;
  ;;;; State
  ;;;
  
  
  (method (get-state)
    (let ((name (get-name)))
      `(<debuggee> reference: ,(new Debuggee-Local-Proxy self) name: ,name
         ,@(map (function (thread)
                  (get-thread-state thread))
                (get-threads)))))
  
  
  (method (register-stop stop)
    ;(atomic-region
      (set-stops (append stops (list stop))));)
  
  
  (method (unregister-stop stop)
    ;(atomic-region
      (set-stops (remove! stop stops)));)
  
  
  @wait
  (method (terminate)
    (quit))
  
  
  ;;;
  ;;;; Thread
  ;;;
  
  
  (method (get-thread-state thread)
    (let ((name (thread-name thread)))
      `(<thread> reference: ,(new Debuggee-Thread-Local-Proxy thread) name: ,name
         ,@(map (function (stop)
                  (get-stop-state stop))
                (get-thread-stops thread)))))
  
  
  (method (get-thread-stops thread)
    (let ((queue (new-queue)))
      (for-each (function (stop)
                  (when (eq? (get-thread~ stop) thread)
                    (enqueue queue stop)))
                stops)
      (queue-list queue)))
  
  
  @convert
  (method (break-thread thread)
    (unimplemented 'break-thread))
  
  
  @convert
  (method (throw-thread thread name result)
    (let ((action (function () (throw name result))))
      (thread-post thread action)))
  
  
  ;;;
  ;;;; Stop
  ;;;
  
  
  (method (get-stop-state stop)
    (let ((kind (get-kind~ stop))
          (reason (get-reason~ stop))
          (stack (get-stack~ stop)))
      `(<stop> reference: ,(new Debuggee-Stop-Local-Proxy stop) kind: ,kind reason: ,reason
         ,@(map (function (frame)
                  (get-frame-state frame))
                stack))))
  
  
  (method (restart-stop stop-proxy)
    (let ((thread (get-thread~ (get-object~ stop-proxy))))
      (thread-send thread
        (function ()
          (let ((signal (new Stop-Signal)))
            (when (catched? signal)
              (throw signal)))))))
  
  
  (method (continue-stop stop)
    (let ((thread (get-thread~ stop))
          (action (get-continuation~ stop)))
      (thread-send thread action)))
  
  
  ;;;
  ;;;; Frame
  ;;;
  
  
  (method (get-frame-state frame)
    (bind (name environment variables location) frame
      `(<frame> name: ,name location: ,location
         ,@(map (function (variable)
                  (get-variable-state variable))
                variables))))
  
  
  ;;;
  ;;;; Variable
  ;;;
  
  
  (method (get-variable-state variable)
    (bind (name . value) variable
      `(<variable> name: ,name value: ,(->string value :reader))))
  
  
  ;;;
  ;;;; Eval
  ;;;
  
  
  @convert
  (method (evaluate debugger request stop frame form)
    (let* ((thread (and stop (Debuggee-Stop.get-thread stop)))
           (result (evaluate-form thread stop frame form)))
      (if (void? result)
          (display-result~ debugger request result)
        (set-? result)
        (display-result~ debugger request (->string result)))))
  
  
  @convert
  (definition (evaluate-form thread stop frame form)
    (if (not thread)
        (with-jazz-exception-handler
          (lambda ()
            (eval-form form)))
      (thread-send thread
        (lambda ()
          (with-jazz-exception-handler
            (lambda ()
              (evaluate-action stop frame form)))))))
  
  
  @convert
  (definition (evaluate-action stop frame form)
    (eval-form form))
  
  
  @convert
  (definition (eval-form form)
    (eval `(in jazz uses (jazz.debug jazz.process jazz.rmi jazz.platform jazz.thread)
             ,form)))
  
  
  (method (evaluate-expressions module-name expressions)
    (terminal 'evaluate-expressions module-name expressions)
    (locate-library-declaration module-name)
    (map (function (expr)
           (parameterize ((requested-module-name module-name))
             (eval expr)))
         expressions))
  
  
  ;;;
  ;;;; Threads
  ;;;
  
  
  (method public (get-process-threads)
    @convert
    (map new-thread (get-threads)))
  
  
  (method public (get-primordial-thread)
    @convert
    (new-thread (primordial-thread)))
  
  
  (method (new-thread thread)
    @convert
    (new Debuggee-Thread-Local-Proxy (new Debuggee-Thread (new Debuggee-Local-Proxy self) thread)))
  
  
  ;;;
  ;;;; Console
  ;;;
  
  
  @convert
  (method public remote (execute command object package-names variables frame)
    (let* ((form (read-string-element command))
           (packages (filter-packages package-names))
           (object (either object process)) ;; until remote implementation completed
           (result (execute-command form object packages variables frame)))
      (if (not result)
          {}
        (set-?~ Development result)
        (->string result :describe))))
  
  
  ;;;
  ;;;; Inspector
  ;;;
  
  
  @convert
  (method public remote (inspect serial kind)
    (inspect-value (serial->object serial)))
  
  
  ;;;
  ;;;; Memory
  ;;;
  
  
  @convert
  (method public remote (memory-statistics)
    (statistics))
  
  
  @convert
  (method public remote (trigger-gc)
    (gc)
    {})))
