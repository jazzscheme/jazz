;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Debuggee
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.debuggee.Debuggee jazz


(import (jazz.library)
        (jazz.platform)
        (jazz.utilities))


(class Debuggee extends Object
  
  
  (slot process)
  
  
  (method (initialize process)
    (nextmethod)
    (set! process~self process))
  
  
  (method public (get-name)
    (process-name~ process))
  
  
  (method public (get-icon)
    (process-icon~ process))
  
  
  ;;;
  ;;;; Control
  ;;;
  
  
  (method public (detach-from-controller)
    (detach-from-controller~ process)
    {})
  
  
  (method public (exit)
    (exit-process~ process))
  
  
  ;;;
  ;;;; Process
  ;;;
  
  
  (method public (get-process)
    (get-local-process~ process))
  
  
  (method public (get-toplevel-hwnd)
    @convert
    (get-handle~ (get-toplevel)))
  
  
  ;;;
  ;;;; Threads
  ;;;
  
  
  (method public (get-process-threads)
    @convert
    (map new-thread (get-threads)))
  
  
  (method public (get-primordial-thread)
    @convert
    (new-thread (primordial-thread)))
  
  
  (method (new-thread thread)
    @convert
    (new Debuggee-Thread-Local-Proxy (new Debuggee-Thread (new Debuggee-Local-Proxy self) thread)))
  
  
  ;;;
  ;;;; Console
  ;;;
  
  
  @convert
  (method public remote (execute command object package-names variables frame)
    (let* ((form (read-string-element command))
           (packages (filter-packages package-names))
           (object (either object process)) ;; until remote implementation completed
           (result (execute-command form object packages variables frame)))
      (if (not result)
          {}
        (set-?~ Development result)
        (->string result :describe))))
  
  
  @convert
  (method (filter-packages package-names)
    (unimplemented 'filter-packages)
    @convert-manifest
    (let ((fact (new List-Factory)))
      (for-each (function (package-name)
                  (when (in-manifest? package-name)
                    (put~ fact (autoload package-name))))
                package-names)
      (get-output~ fact)))
  
  
  @convert
  (method (execute-command form process packages variables frame)
    (if (is? process Application)
        (privileged-execute form process packages variables frame)
      (privileged-execute form process packages {} @to-convert variables {} @to-convert frame)))
  
  
  ;;;
  ;;;; Inspector
  ;;;
  
  
  @convert
  (method public remote (inspect serial kind)
    (inspect-value (serial->object serial)))
  
  
  ;;;
  ;;;; Memory
  ;;;
  
  
  @convert
  (method public remote (memory-statistics)
    (statistics))
  
  
  @convert
  (method public remote (trigger-gc)
    (gc)
    {})))
