;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Debuggee
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.debuggee jazz


(export (jazz.debuggee.autoload))
(import (jazz.debuggee.autoload)
        (jazz.debuggee.stub)
        (jazz.jrm)
        (jazz.jrm.register.stub)
        (jazz.system.process.stub))


;;;
;;;; Local
;;;


(definition local-debuggee
  {})


(definition public (get-local-debuggee)
  local-debuggee)


(definition public (setup-local-debuggee)
  (when (not local-debuggee)
    (set! local-debuggee (new Debuggee-Local-Proxy (new Debuggee (get-process))))))


;;;
;;;; Controller
;;;


(definition controller-debugger
  {})


(definition public (get-controller-debugger)
  controller-debugger)


(definition public (attach-to-controller register)
  (detach-from-controller)
  (set! controller-debugger (require-object~ register 'debugger))
  (setup-local-debuggee)
  (attach-debuggee~ controller-debugger local-debuggee)
  (set-exception-debugger jazz-exception-debugger))


(definition public (detach-from-controller)
  (when controller-debugger
    (detach-from-debugger)
    (set! local-debuggee {})))


(definition public (detach-from-debugger)
  (when controller-debugger
    (when (live?~ controller-debugger)
      (detach-debuggee~ controller-debugger local-debuggee))
    (set! controller-debugger {})))


;;;
;;;; Stops
;;;


(definition *stops*
  '())

(definition stops-mutex
  (make-mutex 'stops))


(definition (register-stop stop)
  (mutex-lock! stops-mutex)
  (set! *stops* (append *stops* (list stop)))
  (mutex-unlock! stops-mutex))


(definition (unregister-stop stop)
  (mutex-lock! stops-mutex)
  (set! *stops* (remove! stop *stops*))
  (mutex-unlock! stops-mutex))


(definition (get-thread-stops thread)
  (let ((queue (new-queue)))
    (for-each (function (stop)
                (when (eq? (get-thread~ stop) thread)
                  (enqueue queue (new Debuggee-Stop-Local-Proxy stop))))
              *stops*)
    (queue-list queue)))


;;;
;;;; Exception
;;;


(definition (jazz-exception-debugger exc other)
  (jazz-exception-handler exc))


(definition (jazz-exception-handler exc)
  (let ((debugger (get-controller-debugger)))
    (if (not debugger)
        (system-exception-handler exc)
      (with-system-exception-handler
        (function ()
          (continuation-capture
            (function (continuation)
              (let ((reason (exception-reason exc)))
                (invoke-debugger~ (get-process) 'exception reason continuation)))))))))


(definition (with-jazz-exception-handler thunk)
  (with-exception-handler jazz-exception-handler
    thunk))


;;;
;;;; View
;;;


(definition *current-view-debugger*
  #f)


(definition public (current-view-debugger)
  (when (not *current-view-debugger*)
    (set! *current-view-debugger* (new View-Debugger)))
  *current-view-debugger*))
