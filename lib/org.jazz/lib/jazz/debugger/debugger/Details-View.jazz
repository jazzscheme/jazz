;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Details View
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.debugger.debugger.Details-View jazz


(import (jazz.debuggee)
        (jazz.debuggee.stub)
        (jazz.debugger)
        ;; to test eval-within
        (jazz.development)
        (jazz.io)
        (jazz.jml)
        (jazz.jrm)
        (jazz.language.jazz)
        (jazz.library)
        (jazz.literals)
        (jazz.platform)
        (jazz.ui)
        (jazz.ui.dialog)
        (jazz.ui.view)
        (jazz.ui.window)
        (jazz.utilities))


(class Details-View extends Layout-View
  
  
  (property stop initialize {})
  

  (form
    (<install>                                 layout-type: border
      (<Layout-View>          name: tools
        (<Push-Tool>          name: update     size: {Dimension 22 22} location: tail tooltip?: #t tooltip-text: "Refresh" image-name: {Bitmap-Resource "Refresh"} portfolio: :icons action-handler: {Event-Handler :form on-update}))
      (<Scroller-View>        name: scroller   location: center vscroll?: #t flat?: #t
        (<!>                  name: content    layout-type: fill
          (<Tree-Header>      name: header     shown?: #f
            (<!>              name: content
              (<Details-Tree> name: details    multiple-selection?: #f selection-mode: row double-click-handler: {Event-Handler :form on-double-click})))))))

  
  (method meta (external-name . rest)
    'details-view)

  
  ;;;
  ;;;; Host
  ;;;
  
  
  (method meta (host-icon)
    {Bitmap-Resource "Info"})
  
  
  (method meta (host-title)
    "Details")
  
  
  ;;;
  ;;;; Docked
  ;;;
  
  
  (method (get-tools-view)
    (locate 'tools))
  
  
  (method (focus-default)
    (let ((tree (locate 'details)))
      (acquire-focus~ tree)))

  
  ;;;
  ;;;; Access
  ;;;
  
  
  (method public (get-stop)
    stop)
  
  
  (method public (set-stop value)
    (set! stop value)
    (update))

  
  ;;;
  ;;;; Events
  ;;;


  (method (resize dh dv)
    (nextmethod dh dv)
    (size-figure~ (locate 'scroller) dh dv))
  
  
  @wait
  (method (on-context-menu evt)
    (let* ((sender (get-sender~ evt))
           (pos (get-position~ evt))
           (acquired (acquire sender pos)))
      (with-context-click~ sender pos
        (function ()
          (let ((menu (new-context-menu (selected-frame))))
            (when menu
              (track-popup-menu menu acquired)))))))
  
  
  (method (on-double-click evt)
    @wait
    (edit-frame activate-focus?: #t))
  
  
  (method (on-update evt)
    (update))

  
  ;;;
  ;;;; Update
  ;;;


  (method protected (update)
    (with-update-locked
      (function ()
        (with-system-exception-debugger
          (function ()
            (let ((tree (locate 'details)))
              (remove-every-row~ tree)
              (when stop
                (let ((details (get-details~ stop)))
                  (when details
                    (for-each (function (detail)
                                (let ((title detail)
                                      (image {Bitmap-Resource "Green"}))
                                  (add-row~ tree children: (list (new Tree-Node title: title image: image)) user-data: detail)))
                              details))))))))))
  
  
  ;;;
  ;;;; Selection
  ;;;
  
  
  (method public (selected-detail)
    (let ((row (selected-row)))
      (when row
        (get-user-data~ row))))
  
  
  (method (selected-row)
    (let* ((tree (locate 'frames))
           (n (get-single-selection~ tree)))
      (when n
        (get-row~ tree n))))
  
  
  ;;;
  ;;;; Menu
  ;;;
  
  
  @wait
  (method (new-context-menu object)
    (when object
      (new Detail-Menu))))


;;;
;;;; Details-Tree
;;;


(class Details-Tree extends Tree-View
  
  
  (form
    (<install>            portfolio: :icons
      (<Tree-Node-Column> title: "Frame" width: 431 toplevel-controls?: #f))))


(register-autoclass Details-Tree))
