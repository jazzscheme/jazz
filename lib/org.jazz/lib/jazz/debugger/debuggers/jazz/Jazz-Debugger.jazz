;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Jazz Debugger
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.debugger.debuggers.jazz.Jazz-Debugger jazz


(import (jazz.console)
        (jazz.debuggee)
        (jazz.debugger)
        (jazz.jrm)
        (jazz.library)
        (jazz.literals)
        (jazz.platform)
        (jazz.ui)
        (jazz.ui.view)
        (jazz.ui.window)
        (jazz.utilities))


(class Jazz-Debugger extends Debugger

  
  (slot processes initialize '())
  
  
  ;;;
  ;;;; Debugger
  ;;;
  
  
  (method (start-debugger)
    )
  
  
  (method (stop-debugger)
    )
  
  
  (method (get-processes (validate-liveness?: validate-liveness? #f))
    (when validate-liveness?
      (validate-processes))
    processes)


  (method public (attach-process process-proxy)
    (unless (member? process-proxy processes test: process=?)
      (set! processes (append! processes (list process-proxy)))
      (when (not (get-debugged-process))
        (select-debugged-process (new Debugged-Process self process-proxy)))
      {}))
  
  
  (method public (update-process process-proxy)
    (when (remote-proxy? process-proxy)
      (let ((actual (find-in processes process-proxy test: process=?)))
        (when (and actual (remote-proxy? actual))
          (set-values~ actual (get-values~ process-proxy))))))


  (method public (detach-process process-proxy)
    (when (member? process-proxy processes test: process=?)
      (set! processes (remove! process-proxy processes test: process=?))
      (let ((debugged-process (get-debugged-process)))
        (when (and debugged-process (process=? process-proxy (get-reference~ debugged-process)))
          (select-debugged-process (and (not-null? processes) (new Debugged-Process self (car processes))))))
      {}))
  
  
  (method public (detach-processes)
    (validate-processes)
    (let ((local-process (get-local-process)))
      (for-each (function (process-proxy)
                  (when (not (proxy=? process-proxy local-process))
                    (detach~ process-proxy)))
                processes))
    {})
  
  
  ;;;
  ;;;; Validate
  ;;;
  
  
  (method (validate-processes)
    (set! processes (collect-if valid-process? processes)))
  
  
  (method (valid-process? process-proxy)
    (or (is? process-proxy Local-Proxy)
        (live?~ process-proxy)))
  
  
  ;;;
  ;;;; Process
  ;;;
  
  
  (method (process=? x y)
    (proxy-server=? x y))
  
  
  (method (process-live? process-proxy)
    (live?~ process-proxy))
  
  
  (method (process-title process-proxy)
    (get-title~ process-proxy))
  
  
  (method (process-icon process-proxy)
    (get-icon~ process-proxy))
  
  
  (method (process-threads process-proxy)
    (get-threads~ process-proxy))
  
  
  (method (present-process process-proxy)
    (let ((title (either (get-title~ process-proxy) "Process")))
      (if (local-proxy? process-proxy)
          title
        (let ((host (get-host~ (get-ior~ process-proxy))))
          (if (host=? host (listening-host~ (get-remoting-server)))
              title
            (format "{a} at {a}" title (host->string host)))))))
  
  
  (method (eval-expressions process-proxy expressions)
    (eval-expressions~ process-proxy expressions))
  
  
  (method (evaluate-expressions process-proxy expressions)
    (evaluate-expressions~ process-proxy expressions))
  
  
  (method (process-detach process-proxy)
    (detach-process~ process-proxy))
  
  
  (method (process-exit process-proxy)
    (exit-process~ process-proxy))
  
  
  ;;;
  ;;;; Thread
  ;;;
  
  
  (method (thread=? x y)
    (and (proxy-server=? x y)
         (= (get-id~ x) (get-id~ y))))
  
  
  (method (thread-name thread-proxy)
    (get-name~ thread-proxy))
  
  
  (method (thread-state thread-proxy)
    (get-state~ thread-proxy))
  
  
  (method (thread-stops thread-proxy)
    (get-stops~ thread-proxy))
  
  
  (method (break-thread process-proxy thread-proxy)
    (break-thread~ process-proxy thread-proxy))
    
  
  ;;;
  ;;;; Restart
  ;;;
  
  
  (method (restart=? x y)
    (and (proxy-server=? x y)
         (= (get-id~ x) (get-id~ y))))
  
  
  (method (restart-name restart-proxy)
    (get-name~ restart-proxy))
  
  
  (method (restart-message restart-proxy)
    (get-message~ restart-proxy))

  
  (method (restart-stop process-proxy restart-proxy)
    (restart-stop~ process-proxy restart-proxy))

  
  ;;;
  ;;;; Stop
  ;;;
  
  
  (method (stop=? x y)
    (and (proxy-server=? x y)
         (= (get-id~ x) (get-id~ y))))
  
  
  (method (stop-kind stop-proxy)
    (get-kind~ stop-proxy))
  
  
  (method (stop-reason stop-proxy)
    (get-reason~ stop-proxy))
  
  
  (method (stop-restarts stop-proxy)
    (get-restarts~ stop-proxy))
  
  
  (method (stop-frames stop-proxy)
    (get-frames~ stop-proxy))
  
  
  (method (continue-stop process-proxy stop-proxy)
    (continue-stop~ process-proxy stop-proxy))
  
  
  ;;;
  ;;;; Frame
  ;;;
  
  
  (method (frame=? x y)
    (and (proxy-server=? x y)
         (= (get-id~ x) (get-id~ y))))
  
  
  (method (frame-name frame-proxy)
    (get-name~ frame-proxy))
  
  
  (method (frame-location frame-proxy)
    (get-location~ frame-proxy))
  
  
  (method (frame-variables frame-proxy)
    (get-variables~ frame-proxy))
  
  
  (method (frame-variable-name frame-proxy variable)
    (car variable))
  
  
  (method (frame-variable-value frame-proxy variable)
    (cdr variable))
  
  
  ;;;
  ;;;; Console
  ;;;
  
  
  (method public (console-output line)
    (let ((text (get-console-text)))
      (send-event
        (function ()
          (insert-formatted-line~ text line))))
    {})
  
  
  ;;;
  ;;;; Window
  ;;;
  
  
  (method public (get-toplevel-hwnd)
    (get-handle~ (get-toplevel)))
  
  
  ;;;
  ;;;; Debugging
  ;;;
  
  
  (method public (status-message message)
    (user-message message)
    {})
  
  
  ;;;
  ;;;; Debuggee
  ;;;
  
  
  (method public (debuggee-stop process-proxy thread-proxy stop-proxy kind reason)
    (if (and #f ;; until the error shows in full in the debugger in like a tooltip
             (local-proxy? thread-proxy)
             (eq? (get-object~ thread-proxy) (primordial-thread)))
        (with-locked-update
          (function ()
            (let ((view (select-palette Processes-View workspace: 'debugger)))
              (when view
                (select-first-frame~ view stop-proxy)))))
      (bell)
      (let ((reason (either reason (case kind ((exception) "Error") (else "Break")))))
        (let ((lines (split reason "\n")))
          (format :console #"\($\)\(color {a} {a} : {?{a}~}\){%}{!}"#
                  (case kind
                    ((exception) 'Dark-Red)
                    (else 'Dark-Orange))
                  (case kind
                    ((exception) "Error")
                    (else "Break"))
                  (car lines))
          (for-each (function (line)
                      (format :console #"\($\)\(color {a} {?{a}~}\){%}{!}"#
                              (case kind
                                ((exception) 'Dark-Red)
                                (else 'Dark-Orange))
                              line))
                    (cdr lines))))
      (format :console #"\(prompt\){%}{!}"#)))


  (method public (debug-exception type message stack)
    (when (eq? (present-exception type message) 'yes)
      (message-box stack)
      {}))


  (method (present-exception type message)
    (message-box (format "{a}: {a}" type message)
                 type: 'error
                 yes: "Debug"
                 cancel: "Ignore"))))
