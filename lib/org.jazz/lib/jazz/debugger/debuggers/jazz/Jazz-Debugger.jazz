;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Jazz Debugger
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.debugger.debuggers.jazz.Jazz-Debugger jazz


(import (jazz.console)
        (jazz.debuggee)
        (jazz.debugger)
        (jazz.jrm)
        (jazz.library)
        (jazz.literals)
        (jazz.platform)
        (jazz.ui)
        (jazz.ui.view)
        (jazz.ui.window)
        (jazz.utilities))


(class Jazz-Debugger extends Debugger

  
  (slot processes initialize '())
  
  
  ;;;
  ;;;; Debugger
  ;;;
  
  
  (method (start-debugger)
    )
  
  
  (method (stop-debugger)
    )
  
  
  (method (get-processes (validate-liveness?: validate-liveness? #f))
    (when validate-liveness?
      (validate-processes))
    processes)


  (method public (attach-process process-proxy)
    (let ((process (new Debugged-Process self process-proxy)))
      (unless (member? process processes test: process=?)
        (set! processes (append! processes (list process)))
        (when (not (get-selected-debugger-process))
          (select-debugger-process process))
        {})))


  (method public (detach-process process-proxy)
    (let ((process (new Debugged-Process self process-proxy)))
      (when (member? process processes test: process=?)
        (set! processes (remove! process processes test: process=?))
        (when (process=? process (get-selected-debugger-process))
          (select-debugger-process (and (not-null? processes) (car processes))))
        {})))
  
  
  (method public (detach-processes)
    (validate-processes)
    (let ((local-process (get-local-process)))
      (for-each (function (process)
                  (let ((proxy (get-object~ process)))
                    (when (not (proxy=? proxy local-process))
                      (detach~ proxy))))
                processes))
    {})
  
  
  ;;;
  ;;;; Validate
  ;;;
  
  
  (method (validate-processes)
    (set! processes (collect-if valid-process? processes))
    (when (not (member? (get-selected-debugger-process) processes test: process=?))
      (select-debugger-process (and (not-null? processes) (car processes)))))
  
  
  (method (valid-process? process)
    (let ((proxy (get-object~ process)))
      (or (is? proxy Local-Proxy)
          (live?~ proxy))))
  
  
  ;;;
  ;;;; Process
  ;;;
  
  
  (method (process=? x y)
    (proxy=? (get-object~ x) (get-object~ y)))
  
  
  (method (process-live? process)
    (live?~ (get-object~ process)))
  
  
  (method (process-name process)
    (get-name~ (get-object~ process)))
  
  
  (method (process-icon process)
    (get-icon~ (get-object~ process)))
  
  
  (method (process-threads process)
    (get-threads~ (get-object~ process)))
  
  
  (method (present-process process)
    (let ((proxy (get-object~ process)))
      (let ((name (get-name~ proxy)))
        (if (local-proxy? proxy)
            name
          (let ((host (get-host~ (get-ior~ proxy))))
            (if (host=? host (listening-host~ (get-remoting-server~ (get-process))))
                name
              (format "{a} at {a}" name (host->string host))))))))
  
  
  (method (eval-expressions process expressions)
    (eval-expressions~ (get-object~ process) expressions))
  
  
  (method (evaluate-expressions process expressions)
    (evaluate-expressions~ (get-object~ process) expressions))
  
  
  (method (process-detach process)
    (detach~ (get-object~ process)))
  
  
  (method (process-exit process)
    (exit~ (get-object~ process)))
  
  
  ;;;
  ;;;; Thread
  ;;;
  
  
  (method (thread-name thread)
    (get-name~ (get-object~ thread)))
  
  
  (method (thread-state thread)
    (get-state~ (get-object~ thread)))
  
  
  (method (thread-stops thread)
    (get-stops~ (get-object~ thread)))
  
  
  (method (break-thread process thread)
    (break-thread~ (get-object~ process) (get-object~ thread)))
  
  
  ;;;
  ;;;; Stop
  ;;;
  
  
  (method (stop-kind stop)
    (get-kind~ (get-object~ stop)))
  
  
  (method (stop-reason stop)
    (get-reason~ (get-object~ stop)))
  
  
  (method (stop-frames stop)
    (get-frames~ (get-object~ stop)))

  
  (method (restart-stop process stop)
    (restart-stop~ (get-object~ process) (get-object~ stop)))
  
  
  (method (continue-stop process stop)
    (continue-stop~ (get-object~ process) (get-object~ stop)))
  
  
  ;;;
  ;;;; Frame
  ;;;
  
  
  (method (frame-name frame)
    (get-name~ (get-object~ frame)))
  
  
  (method (frame-location frame)
    (get-location~ (get-object~ frame)))
  
  
  (method (frame-variables frame)
    (get-variables~ (get-object~ frame)))
  
  
  (method (frame-variable-name frame variable)
    (car variable))
  
  
  (method (frame-variable-value frame variable)
    (cdr variable))
  
  
  ;;;
  ;;;; Console
  ;;;
  
  
  (method public (console-output line)
    (let ((text (get-console-text)))
      (send-event
        (function ()
          (insert-formatted-line~ text line))))
    {})
  
  
  ;;;
  ;;;; Window
  ;;;
  
  
  (method public (get-toplevel-hwnd)
    (get-handle~ (get-toplevel)))
  
  
  ;;;
  ;;;; Debugging
  ;;;
  
  
  (method public (status-message message)
    (user-message message)
    {})
  
  
  ;;;
  ;;;; Debuggee
  ;;;
  
  
  (method public (debuggee-stop process thread stop kind reason)
    (if (and #f ;; until the error shows in full in the debugger in like a tooltip
             (local-proxy? thread)
             (eq? (get-object~ thread) (primordial-thread)))
        (with-locked-update
          (function ()
            (let ((view (select-palette Debuggers-View workspace: 'debugger)))
              (when view
                (select-first-frame~ view stop)))))
      (bell)
      (let ((reason (either reason (case kind ((exception) "Error") (else "Break")))))
        (let ((lines (split reason "\n")))
          (format :console #"\($\)\(color {a} {a} : {?{a}~}\){%}{!}"#
                  (case kind
                    ((exception) 'Dark-Red)
                    (else 'Dark-Orange))
                  (case kind
                    ((exception) "Error")
                    (else "Break"))
                  (car lines))
          (for-each (function (line)
                      (format :console #"\($\)\(color {a} {?{a}~}\){%}{!}"#
                              (case kind
                                ((exception) 'Dark-Red)
                                (else 'Dark-Orange))
                              line))
                    (cdr lines))))
      (format :console #"\(prompt\){%}{!}"#)))


  (method public (debug-exception type message stack)
    (when (eq? (present-exception type message) 'yes)
      (message-box stack)
      {}))


  (method (present-exception type message)
    (message-box (format "{a}: {a}" type message)
                 type: 'error
                 yes: "Debug"
                 cancel: "Ignore"))))
