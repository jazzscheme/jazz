;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Properties Card
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.designer.card.Properties-Card jazz


(import (jazz.designer)
        (jazz.jml)
        (jazz.ui)
        (jazz.library)
        (jazz.utilities))


(class Properties-Card extends Card


  (form
    (<install>                                  layout-type: fill
      (<Layout-View>             name: tools)
      (<Scroller-View>           name: scroller style: document vscroll?: #t
        (<!>                     name: content  layout-type: fill
          (<Tree-Header>         name: header   style: document context-menu-handler: {Event-Handler (content tree) on-context-menu}
            (<!>                 name: content
              (<Properties-Tree> name: tree)))))))
  
  
  ;;;
  ;;;; Access
  ;;;
  
  
  (method public (get-tree)
    (locate 'tree))
  
  
  ;;;
  ;;;; Editor
  ;;;
  
  
  (method (on-editor evt)
    (case (get-kind~ evt)
      ((:selection-changed) (set-client (get-selection~ evt) force?: (get-force?~ evt)))
      ((:branch-changing :saving) (save-edition~ (get-tree)))
      ((:property-selected) (select-property~ (get-tree) (get-property~ evt property:)))
      ((:saved) (reset-modified-properties~ (get-tree)))
      ;; waiting-a-bux-that-because-if-i-select-the-position-property-it-shows-the
      ;; wrong-value-then-the-save-will-save-a-wrong-value!
      ;; and-this-is-because-the-value-row-in-edition-is-not-update-correctly
      ;; when-the-dragging-changes-the-property
      ((:selection-changing) (save-edition~ (get-tree)))
      (else (nextmethod evt))))
  
  
  ;;;
  ;;;; Client
  ;;;

 
  (method (client-update)
    (client-update~ (get-tree)))

  
  ;;;
  ;;;; Designer
  ;;;
  
  
  (method (call-property-change evt)
    (let ((component (get-property~ evt component:)))
      (when (eq? component (car client))
        (property-change component (get-property~ evt property:) (get-property~ evt value:)))))

  
  (method (property-change component property value)
    (property-change~ (get-tree) component property value))

  
  ;;;
  ;;;; Value
  ;;;


  (method (enter-value property value)
    (for-each (function (component)
                (set-property~ designer component property value))
              client))))
