;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Column Detail
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Stephane Le Cornec.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.designer.choosers.Column-Detail jazz


(import (jazz.designer)
        (jazz.library)
        (jazz.utilities))


(class Column-Detail extends Object
  
  
  (property name       initialize {} accessors generate)
  (property width      initialize 0  accessors generate)
  (property filled?    initialize #f accessors generate)
  (property displayed? initialize #f accessors generate)
  
  
  @convert-literal
  (method meta (construct-literal context name width filled? displayed?)
    (new self name width filled? displayed?))
  
  
  (method (initialize n w f? d?)
    (nextmethod)
    (set! name n)
    (set! width w)
    (set! filled? f?)
    (set! displayed? d?))
  
  
  (method (copy-object deep?)
    (new Column-Detail name width filled? displayed?))
  
  
  @convert-fold
  (method (foldable?)
    #t)


  @convert-fold
  (method (fold-object compiler)
    (output~ compiler "make_object(")
    (fold~ compiler (type-name (class-of self)))
    (fold-more~ compiler name)
    (fold-more~ compiler width)
    (fold-more~ compiler filled?)
    (fold-more~ compiler displayed?)
    (output~ compiler ")"))
  
  
  (method (print printer readably)
    (format printer "~{{a} {a} {a} {a} {a}}"
            (identifier-name (type-name (class-of self)))
            name
            width
            filled?
            displayed?))))