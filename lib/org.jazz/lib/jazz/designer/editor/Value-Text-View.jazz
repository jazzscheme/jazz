;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Value Text View
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.designer.editor.Value-Text-View jazz


(import (jazz.designer)
        (jazz.ide)
        (jazz.jml)
        (jazz.library)
        (jazz.literals)
        (jazz.ui)
        (jazz.utilities))


(class Value-Text-View extends IDE-Text-View implements Property-Editor


  (property value-row initialize {} getter get-value-row setter set-value-row)
  
  
  (slot manager initialize {})
    
  
  (form
    (<install> default-style: {Text-Style name: Default font: {Font name: Ansi-Var}} accepts-returns?: #f show-unfocused-selection?: #f left-padding: 1 top-padding: 1))

  
  ;;;
  ;;;; Access
  ;;;


  (method public (get-value-row)
    value-row)


  (method public (set-value-row value)
    (set! value-row value))
  
  
  ;;;
  ;;;; Editor
  ;;;


  (method (get-manager)
    manager)


  (method (set-manager value)
    (set! manager value))
  
  
  (method (get-edited-value)
    (read-string-element (get-string-content)))
  
  
  (method (set-edited-value value)
    (set-string-content (present-edited-value value)))
  
  
  (method (present-edited-value value)
    (->string value :reader))
  
  
  (method (get-edited-modified?)
    (get-modified?~ (get-controller)))
  
  
  (method (set-edited-modified? flag)
    (set-modified?~ (get-controller) flag))
  
  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method (up-arrow-move extend? scroll?)
    (let ((target (either manager value-row)))
      (editor-up-arrow~ target)))
  
  
  (method (down-arrow-move extend? scroll?)
    (let ((target (either manager value-row)))
      (editor-down-arrow~ target)))
    

  (method (tab-press key modifiers)
    (if (has-completion?)
        (end-completion)
      (if manager
          (editor-tab~ manager)
        (editor-tab~ value-row))))
  
  
  (method (return-press key)
    (nextmethod key)
    (debug manager)
    @w
    (if manager
        (editor-return~ manager)
      (editor-return~ value-row)))
  
  
  (method (document-menu)
    {})
  
  
  ;;;
  ;;;; Focus
  ;;;
  
  
  (method (focus-validate view)
    (editor-focus-validate~ value-row view))
  
  
  (method (focus-lose window view)
    (nextmethod window view)
    (if manager
        (editor-focus-lose~ manager window view)
      (editor-focus-lose~ value-row window view)))
  
  
  (method (focus-master)
    (get-tree~ value-row))))
