;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Enumeration Entry
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.designer.entry.Enumeration-Entry jazz


(import (jazz.designer)
        (jazz.jml)
        (jazz.library)
        (jazz.literals)
        (jazz.ui)
        (jazz.utilities))


(class Enumeration-Entry extends Property-Entry
  
  
  (form
    (<install>
      (<Border-View>       name: border border-type: edge style: entry
        (<Entry-Combo-Box> name: combo  condensed?: #t focusable?: #t
          (<!>             name: body   left-padding: 2 top-padding: 2 default-style: {Text-Style name: Default font: {Font name: Label}})))))
  
  
  (method (finish rest)
    (nextmethod rest)
    (set-editor~ (locate '(combo body)) self))
  
  
  ;;;
  ;;;; Tab
  ;;;
  
  
  (method (tab-view)
    (locate '(combo body)))
  
  
  ;;;
  ;;;; Validation
  ;;;
  
  
  (method (validate domain)
    (let ((choices (get-choices~ domain))
          (limit (get-limit~ domain)))
      (if (and (get-strict?~ domain)
               (not (and (valid-value?~ (locate 'combo))
                         (member? (get-value) choices key: car))))
          (new Property-Violation message: {Locales english: "Value must be part of the combo-box list" french: "La valeur doit faire partie de la liste du menu déroulant"})
        (let ((value (get-value)))
          (cond
            ((nil? value)
             (if (get-nullable?~ domain)
                 {}
               (new Property-Violation message: {Locales english: "This field is mandatory" french: "Ce champ est obligatoire"})))
            ((and (string? value)
                  (> (string-length value) limit))
             (new Property-Violation message: (new Locales english: (tie "This field can't contain more than {limit} characters") french: (format "Ce champ ne peut contenir plus de {a} caractère{a}" limit (format-plural limit)))))
            (else
             {}))))))
  
  
  (method (set-violation violation)
    (let ((border (locate 'border)))
      (if (not violation)
          (set-border-type~ border 'edge)
        (set-border-type~ border 'solid)
        (set-border-color~ border {Color red: 240 green: 0 blue: 0}))))
    
  
  ;;;
  ;;;; Value
  ;;;
  
  
  (method (get-value)
    (get-value~ (locate 'combo)))
  
  
  (method (set-value value)
    (set-value~ (locate 'combo) value))
  
  
  (method (get-modified?)
    (get-modified?~ (locate 'combo)))
  
  
  (method (set-modified? value)
    (set-modified?~ (locate 'combo) value))
  
  
  ;;;
  ;;;; Editable
  ;;;
  
  
  (method (set-editable? value)
    (set-border-type~ (locate 'border) (if value 'edge 'none))
    (set-editable?~ (locate 'combo) value))))
