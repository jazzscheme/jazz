;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Value Row
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2007
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.designer.row.Value-Row jazz


(import (jazz.designer)
        (jazz.jml)
        (jazz.library)
        (jazz.ui)
        (jazz.ui.view)
        (jazz.literals)
        (jazz.system)
        (jazz.utilities))


(class Value-Row extends Tree-Row


  ;; quick fix. should not be necessary to add a _ suffix
  (property property_      initialize {} getter get-property       setter set-property)
  (property value          initialize {} getter get-value          setter set-value)
  (property nullable?      initialize #f getter get-nullable?      setter set-nullable?)
  (property modified?      initialize #f getter get-modified?      setter set-modified?)
  (property limit-to-list? initialize #t getter get-limit-to-list? setter set-limit-to-list?)
    
  
  (slot domain  initialize {})
  (slot editor  initialize {})
  (slot edited? initialize #f)


  ;;;
  ;;;; Initialization
  ;;;


  (method (initialize . rest)
    (bind-keywords ((property {}) (value {}) (nullable? #f) (limit-to-list? #t) . others) rest
      (apply nextmethod others)
      (set! property_~self property)
      (set! value~self value)
      (set! nullable?~self nullable?)
      (set! limit-to-list?~self limit-to-list?)))
  
  
  ;;;
  ;;;; Filter
  ;;;
  
  
  @convert
  (method meta public virtual (get-filter-name)
    'properties)
  
  
  @convert
  (method meta public virtual (get-filter-rank)
    1)
  
  
  @convert
  (method meta public virtual (get-filter-image)
    {Bitmap-Resource "Property"})
  
  
  ;;;
  ;;;; Access
  ;;;


  (method public (get-property)
    property_)


  (method public (set-property prop)
    (set! property_ prop))
  
  
  (method public (get-title)
    (let ((node (car children)))
      (get-title~ node)))
  
  
  (method public (set-title title)
    (let ((node (car children)))
      (set-title~ node title)))


  (method public (get-value)
    value)


  (method public (set-value object)
    (set! value object))


  (method public (get-nullable?)
    nullable?)


  (method public (set-nullable? value)
    (set! nullable? value))


  (method public (get-modified?)
    modified?)


  (method public (set-modified? flag)
    (set! modified? flag))

  
  (method public (get-limit-to-list?)
    limit-to-list?)


  (method public (set-limit-to-list? value)
    (set! limit-to-list? value))
  

  (method public (get-editor)
    editor)
  
  
  (method public (set-editor edt)
    (set! editor edt))
  
  
  (method public (get-client)
    (get-client~ (get-tree)))
  
  
  ;;;
  ;;;; Auto
  ;;;
  
  
  (method (auto-inplace?)
    #t)

  
  (method (auto-expand)
    (nextmethod)
    (let ((tree (get-tree)))
      (with-update-locked~ tree
        (function ()
          (edit-row)))))
  
  
  (method (auto-select)
    (nextmethod)
    (select-editor))
  
  
  (method (auto-collapse)
    (nextmethod)
    (when (in-edition?)
      (end-row-edition)))
  
  
  (method (auto-collapsable?)
    (in-edition?))
  
  
  ;;;
  ;;;; Value
  ;;;
  
  
  (method public virtual (enter-value v)
    (set! value v)
    (set-modified? #t)
    (if (null? property_)
        (update value)
      (enter-value~ (get-card~ (get-tree)) property_ value)))
  
  
  (method public (enter-edited-value)
    (if (validate-value)
        (enter-value (get-edited-value))
      (throw-cancel)))
  
  
  (method public virtual (default-value)
    {})
  
  
  ;;;
  ;;;; Presentation
  ;;;
  
  
  (method public virtual (present value)
    (->string value :reader))
  
  
  ;;;
  ;;;; Edition
  ;;;
  
  
  (method public virtual (get-edited-value)
    (read-string-element (get-string-content~ editor)))
  
  
  (method public virtual (set-edited-value value)
    (set-string-content~ editor (present value)))
  
  
  (method public virtual (get-edited-modified?)
    (get-modified?~ (get-controller~ editor)))
  
  
  (method public virtual (set-edited-modified? flag)
    (set-modified?~ (get-controller~ editor) flag))
  
  
  (method public virtual (show-cursor)
    (show-text-cursor~ editor))
  
  
  (method public (validate-value)
    #t
    @convert
    (catch (Parse-Error err
             (case (message-box (get-message~ err) type: 'question yes: "Change It" no: "Revert")
               ((yes)
                (focus-editor start: (get-start~ err) end: (get-end~ err))
                #f)
               ((no)
                (revert-property)
                #f)))
      (get-edited-value)
      #t))
  
  
  (method public (edit-row)
    (edit)
    (set! edited? #t))
  
  
  (method public (end-row-edition)
    (end-edition)
    (set! edited? #f))
  
  
  (method public virtual (in-edition?)
    edited?)
  
  
  (method public virtual (edit)
    (edit-in-cell))
  
  
  (method public virtual (end-edition)
    (save-edition)
    (close-editor))
  
  
  (method public virtual (save-edition)
    (when (get-edited-modified?)
      (enter-edited-value)
      (set-edited-modified? #f)))
  
  
  (method public virtual (close-editor)
    (close-in-cell-editor))
  
  
  (method public virtual (close-editor?)
    #t)
  
  
  (method public virtual (select-editor)
    (let ((tree (get-tree)))
      (when (not (in-cell-edition?))
        (edit-in-cell))
      (focus-editor)))
  
  
  (method public (in-cell-edition?)
    (let ((tree (get-tree)))
      (and (in-edition?~ tree)
           (let ((row (row-rank~ tree self)))
             (= (get-edited-cell~ tree) (new Cell row 1))))))
  
  
  ;;;
  ;;;; Editor
  ;;;
  
  
  (method public (editor-up-arrow modifiers)
    (up-arrow-press~ (get-tree) modifiers))
  
  
  (method public (editor-down-arrow modifiers)
    (down-arrow-press~ (get-tree) modifiers))
  
  
  (method public (editor-tab)
    (let ((modifiers NoModifiers))
      (if (shift-down?)
          (up-arrow-press~ (get-tree) modifiers)
        (down-arrow-press~ (get-tree) modifiers))))
  
  
  (method public (editor-return)
    (show-cursor)
    (with-cursor :wait
      (function ()
        (set-edited-modified? #t)
        (save-edition))
      duration: 150))
  
  
  (method public (editor-focus-validate view)
    (if limit-to-list?
        (if (get-edited-modified?)
            (validate-value)
          #t)
      #t))
  
  
  (method public (editor-focus-delegate)
    (when (and (auto-inplace?) (not (in-edition?)))
      (auto-expand/collapse~ (get-tree) self))
    (focus-editor select-all?: #f)
    (invalidate-drawing))
  
  
  (method public (editor-focus-lose window view)
    (unless (eq? view (get-tree))
      (if (and editor (different-overlapped?~ editor window))
          (invalidate-drawing)
        (close-auto-expanded~ (get-tree))
        (invalidate-drawing))))
  
  
  ;;;
  ;;;; Cell Edition
  ;;;
  
  
  (method public virtual (edit-in-cell)
    (let* ((tree (get-tree))
           (cell (new Cell (row-rank~ tree self) 1))
           (border (new Border-View border-type: 'solid border-color: {Color name: Dark-Red}))
           (scroller (new Scroller-View parent: border vscroll?: #f hscroll?: #f))
           (content (get-content~ scroller)))
      (set-layout-type~ content 'fill)
      (unless editor
        (set! editor (new-editor)))
      (set-parent~ editor content)
      (set-edited-value value)
      (edit-cell~ tree cell editor: border close-editor?: (close-editor?))
      ;; the focusing has to be done after the edit-cell that will install the editor in a player
      (focus-editor)
      (set-client~ scroller editor)))
  
  
  (method public (close-in-cell-editor)
    (let ((tree (get-tree)))
      (end-edition~ tree))
    (when (close-editor?)
      (set! editor {})))
  
  
  (method public virtual (focus-editor (start: start {}) (end: end {}) (select-all?: select-all? #t))
    (let ((editor (focused-editor)))
      (when editor
        (acquire-focus~ editor)
        (cond ((null? start) (when select-all? (select-all~ editor)))
              ((null? end) (set-caret~ editor start))
              (else (set-selection~ editor (new Range start end)))))))
  
  
  (method public virtual (focused-editor)
    editor)
  
  
  ;;;
  ;;;; Row Edition
  ;;;
  
  
  (method public (edit-in-row)
    (let* ((tree (get-tree))
           (subrow (add-row~ tree class: Editor-Row father: self row-height: (editor-height)))
           (border (new Border-View parent: subrow border-type: 'solid border-color: {Color name: Dark-Red}))
           (scroller (new Scroller-View parent: border vscroll?: #t hscroll?: #f)))
      (unless editor
        (set! editor (new-editor)))
      (set-parent~ editor (get-content~ scroller))
      (set-editor~ subrow border)
      (set-client~ scroller editor)
      (expand/collapse~ tree self)))
  
  
  (method protected virtual (install-container)
    )
  
  
  (method public (close-in-row-editor)
    (let ((tree (get-tree))
          (editor-row (car (get-sons))))
      (when editor-row
        (expand/collapse~ tree self)
        (remove-row~ tree editor-row)
        (let ((editor (get-editor~ editor-row)))
          (if (close-editor?)
              (close~ editor)
            (set-parent~ editor {}))))))
  
  
  (method protected virtual (editor-height)
    21)
  
  
  (method protected virtual (new-editor)
    (new (editor-class)
      value-row: self
      left-padding: 1
      top-padding: 1))
  
  
  (method protected virtual (editor-class)
    Value-Text-View)
  
  
  ;;;
  ;;;; List Edition
  ;;;
  
  
  (method (edit-in-list)
    (let ((tree (get-tree)))
      (for-each (function (subvalue)
                  (add-value subvalue (get-subrow-class)))
                (get-list-value))
      (expand/collapse~ tree self)))
  
  
  (method protected virtual (get-subrow-class)
    Value-Row)
  
  
  (method protected (close-in-list-editor)
    (let ((tree (get-tree)))
      (expand/collapse~ tree self))
    (remove-every-son))
  
  
  (method (get-list-edited-value)
    (map (function (subrow)
           (get-subvalue~ subrow))
         (get-sons)))
  
  
  (method protected (get-list-edited-modified?)
    (or modified?
        (some? (function (subrow)
                 (get-modified?~ subrow))
               (get-sons))))
  
  
  (method protected (set-list-edited-modified? flag)
    (set! modified? flag)
    (for-each (function (subrow)
                (set-modified?~ subrow flag))
              (get-sons)))
  
  
  (method public virtual (get-subvalue)
    (get-value))
  
  
  (method protected virtual (get-list-value)
    value)
  
  
  (method protected virtual (add-value value class)
    )

  
  (method public (add-row father title value (class: class Value-Row) (user-data: user-data {}))
    (let* ((tree (get-tree))
           (node (new Tree-Node title: title image: {Bitmap-Resource "Item"}))
           (label (new Tree-Label))
           (row (new class parent: tree row-height: 17 children: (list node label) user-data: user-data))
           (value (if (= value 'unspecified) (default-value~ row) value))
           (presented (present~ row value)))
      (set-value~ row value)
      (set-title~ label presented)
      (add-row~ tree father: father row: row)))

  
  ;;;
  ;;;; Update
  ;;;
  
  
  (definition Modified-Color
    {Color name: Dark-Red})
  
  
  (method public virtual (update value)
    (update-in-cell value))
  
  
  (method (update-in-cell value)
    (let* ((tree     (get-tree))
           (title    (present value))
           (rank     (row-rank~ tree self))
           (cell     (new Cell rank 1))
           (edited?  (in-edition?))
           (editor   (get-cell-editor~ tree))
           (data     (if editor (get-preserved-data~ editor) (get-cell-data~ tree cell))))
      (set-value value)
      (set-property-modified? #t)
      (set-title~ data title)
      (if edited?
          (set-edited-modified? #t)
        (invalidate-cell~ tree cell))))
  
  
  (method (set-property-modified? flag)
    (when property_
      (let* ((tree (get-tree))
             (rank (row-rank~ tree self))
             (cell (new Cell rank 0))
             (node (get-cell-data~ tree cell))
             (color (if flag Modified-Color {})))
        (set-color~ node color)
        (invalidate-cell~ tree cell))))

  
  ;;;
  ;;;; Definition
  ;;;
  
  
  (method public virtual (edit-definition)
    (bell))
  
  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method (double-click pos)
    (let ((tree (get-tree)))
      (auto-expand/collapse~ tree self)))
  
  
  (method (context-menu pos)
    (let ((tree (get-tree))
          (pos (+ position pos)))
      (with-context-click~ tree pos
        (function ()
          (let ((class (get-menu-class)))
            (if (null? class)
                (bell)
              (let ((menu (new class value-row: self)))
                (update-menu menu)
                (track-popup-menu~ tree menu pos))))))))
  
  
  (method protected virtual (get-menu-class)
    Value-Menu)
  
  
  (method (update-menu menu)
    (when (is? father List-Row)
      (new Label-Item parent: menu before: 'revert title: "Remove Item" icon: {Bitmap-Resource "Remove"} action-handler: (new Event-Handler target: self method-name: 'on-remove-item))
      (unless (auto-number?~ father)
        (new Label-Item parent: menu before: 'revert title: "&Rename Item" action-handler: (new Event-Handler target: self method-name: 'on-rename-item) shortcut: '(F2)))
      (new Separator-Item parent: menu before: 'revert)
      (layout-menu~ menu)))
  
  
  (method public (on-remove-item evt)
    (remove-item~ father self))
  
  
  (method public (on-rename-item evt)
    (rename-item~ father self))
  
  
  (method public (show-property)
    (let* ((client (get-client))
           (surrogate (get-surrogate~ client)))
      (if (null? surrogate)
          (bell)
        (let ((editor (get-editor~ surrogate)))
          (if (is-not? editor View-Editor)
              (bell)
            (set-showed-property~ editor (field-name property_)))))))
  
  
  (method public (revert-property)
    (set-edited-value value)
    (set-edited-modified? #f)
    (set-property-modified? #f)
    (set-modified? #f)
    (focus-editor))
  
  
  ;;;
  ;;;; Drawing
  ;;;
  
  
  (method public virtual (draw-cell surface context value column row cell width height)
    (draw-at~ column surface context row cell 1 0 width height)))


;;;
;;;; Value-Menu
;;;


(class Value-Menu extends Context-Menu
  
  
  (property value-row initialize {} getter get-value-row setter set-value-row)
  
  
  (form
    (<install>))
  
  
  ;;;
  ;;;; Access
  ;;;
  
  
  (method public (get-value-row)
    value-row)
  
  
  (method public (set-value-row value)
    (set! value-row value))
  
  
  ;;;
  ;;;; Events
  ;;;
  
  
  @commented-for-metamodeler
  (method (on-show evt)
    (show-property~ value-row))
  
  
  @is-this-really-usefull
  (method (on-revert evt)
    (revert-property~ value-row))))
