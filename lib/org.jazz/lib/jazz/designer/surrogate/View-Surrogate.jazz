;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; View Surrogate
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.designer.surrogate.View-Surrogate jazz


(import (jazz.designer)
        (jazz.jml)
        (jazz.platform)
        (jazz.ui)
        (jazz.ui.clipboard)
        (jazz.ui.dialog)
        (jazz.ui.resizer)
        (jazz.ui.view)
        (jazz.ui.window)
        (jazz.library)
        (jazz.system)
        (jazz.utilities)
        (jazz.literals))


(class View-Surrogate extends Component-Surrogate implements Renderer

  
  (slot protected client-renderer                initialize {})
  (slot protected client-mouse-down-handler      initialize {})
  (slot protected client-drag-move-handler       initialize {})
  (slot protected client-drag-up-handler         initialize {})
  (slot protected client-double-click-handler    initialize {})
  (slot protected client-current-drop-handler    initialize {})
  (slot protected client-receive-drop-handler    initialize {})
  (slot protected client-context-menu-handler    initialize {})
  (slot protected client-lost-capture-handler    initialize {})
  (slot protected client-cursor-update-handler   initialize {})
  (slot protected client-key-press-handler       initialize {})
  (slot protected client-arrow-press-handler     initialize {})
  (slot protected client-backspace-press-handler initialize {})
  
  
  (slot dragging?      initialize #f)
  (slot processing?    initialize #f)
  (slot current-part   initialize {})
  (slot start-position initialize {})
  (slot old-position   initialize {})


  ;;;
  ;;;; Installation
  ;;;
  
  
  (method (install-handlers)
    (nextmethod)
    (set! client-renderer                (get-renderer~ client))
    (set! client-mouse-down-handler      (get-mouse-down-handler~ client))
    (set! client-drag-move-handler       (get-drag-move-handler~ client))
    (set! client-drag-up-handler         (get-drag-up-handler~ client))
    (set! client-double-click-handler    (get-double-click-handler~ client))
    (set! client-current-drop-handler    (get-current-drop-handler~ client))
    (set! client-receive-drop-handler    (get-receive-drop-handler~ client))
    (set! client-context-menu-handler    (get-context-menu-handler~ client))
    (set! client-lost-capture-handler    (get-lost-capture-handler~ client))
    (set! client-cursor-update-handler   (get-cursor-update-handler~ client))
    (set! client-key-press-handler       (get-key-press-handler~ client))
    (set! client-arrow-press-handler     (get-arrow-press-handler~ client))
    (set! client-backspace-press-handler (get-backspace-press-handler~ client))
    (set-renderer~ client                self)
    (set-mouse-down-handler~ client      (new Surrogate-Handler target: self method-name: 'on-mouse-down      preserved: client-mouse-down-handler))
    (set-drag-move-handler~ client       (new Surrogate-Handler target: self method-name: 'on-drag-move       preserved: client-drag-move-handler))
    (set-drag-up-handler~ client         (new Surrogate-Handler target: self method-name: 'on-drag-up         preserved: client-drag-up-handler))
    (set-double-click-handler~ client    (new Surrogate-Handler target: self method-name: 'on-double-click    preserved: client-double-click-handler))
    (set-current-drop-handler~ client    (new Surrogate-Handler target: self method-name: 'on-current-drop    preserved: client-current-drop-handler))
    (set-receive-drop-handler~ client    (new Surrogate-Handler target: self method-name: 'on-receive-drop    preserved: client-receive-drop-handler))
    (set-context-menu-handler~ client    (new Surrogate-Handler target: self method-name: 'on-context-menu    preserved: client-context-menu-handler))
    (set-lost-capture-handler~ client    (new Surrogate-Handler target: self method-name: 'on-lost-capture    preserved: client-lost-capture-handler))
    (set-cursor-update-handler~ client   (new Surrogate-Handler target: self method-name: 'on-cursor-update   preserved: client-cursor-update-handler))
    (set-key-press-handler~ client       (new Surrogate-Handler target: self method-name: 'on-key-press       preserved: client-key-press-handler))
    (set-arrow-press-handler~ client     (new Surrogate-Handler target: self method-name: 'on-arrow-press     preserved: client-key-press-handler))
    (set-backspace-press-handler~ client (new Surrogate-Handler target: self method-name: 'on-backspace-press preserved: client-key-press-handler))
    (invalidate-border))
  
  
  (method (remove-handlers)
    (nextmethod)
    (set-renderer~ client                client-renderer)
    (set-mouse-down-handler~ client      client-mouse-down-handler)
    (set-drag-move-handler~ client       client-drag-move-handler)
    (set-drag-up-handler~ client         client-drag-up-handler)
    (set-double-click-handler~ client    client-double-click-handler)
    (set-current-drop-handler~ client    client-current-drop-handler)
    (set-receive-drop-handler~ client    client-receive-drop-handler)
    (set-context-menu-handler~ client    client-context-menu-handler)
    (set-lost-capture-handler~ client    client-lost-capture-handler)
    (set-cursor-update-handler~ client   client-cursor-update-handler)
    (set-key-press-handler~ client       client-key-press-handler)
    (set-arrow-press-handler~ client     client-arrow-press-handler)
    (set-backspace-press-handler~ client client-backspace-press-handler)
    (invalidate-border))


  ;;;
  ;;;; Action
  ;;;
  
  
  (method (on-save-form evt)
    (save-form))
  
  
  (method (on-bring-to-front evt)
    (let ((designer (get-designer~ editor))
          (selection (get-selection~ editor)))
      (for-each (function (component)
                  (bring-to-front~ designer component))
                selection)))
  
  
  (method (on-send-to-back evt)
    (let ((designer (get-designer~ editor))
          (selection (get-selection~ editor)))
      (for-each (function (component)
                  (send-to-back~ designer component))
                selection)))
  
  
  (method (on-close-selection evt)
    (close-selection))
  
  
  (method (on-rename-selected evt)
    (let ((selection (get-selection)))
      (if (/= (length selection) 1)
          (bell)
        (let ((component (car selection))
              (designer (get-designer~ editor)))
          (set-name~ designer component (request-name class: Symbol-Request initial-value: (get-name~ component)))))))
  
  
  (method (on-properties evt)
    (select-palette Properties-Manager workspace: {} focus?: #t))


  ;;;
  ;;;; Draw
  ;;;
    
  
  (definition Selected-Colors
    '({Color name: Red} {Color name: Orange} {Color name: Yellow}))
  
  (definition Selected-Pens
    '())

  
  (definition Unselected-Color
    {Color name: Blue})


  (method (render drawing surface context update lh lv sh sv sc sc?)
    (default-render drawing surface context update lh lv sh sv sc sc?)
    (draw surface))


  (method (default-render drawing surface context update lh lv sh sv sc sc?)
    (let ((content? (show-content?~ editor)))
      (when content?
        (draw-background~ drawing surface context))
      (when content?
        (draw-content~ drawing surface context update lh lv sh sv sc sc?))
      (when (or content? (is-not? drawing Outline-View))
        (draw-children~ drawing surface context update lh lv sh sv sc sc?))
      (let ((overlay (get-overlay~ drawing)))
        (when overlay
          (let ((size (get-size~ drawing)))
            (draw-overlay~ overlay drawing surface (get-width~ size) (get-height~ size)))))))
  
  
  (method public virtual (draw surface)
    (draw-showed-property surface)
    (draw-surrogate-selected surface)
    (draw-surrogate-frame surface))
  
  
  (method public (draw-showed-property surface)
    (let ((property (get-showed-property~ editor)))
      (when (and property (property? (category-field (class-of client) property)))
        (set-font~ surface {Font name: Ansi-Var})
        (set-text-color~ surface {Color name: Dark-Red})
        (let* ((value (read-property client property))
               (string (->string value))
               (extent (get-text-extent~ surface string))
               (size (nu+ extent {Dimension 7 4}))
               (pos (center size (get-size~ client)))
               (rect (position/size->rect pos size)))
          (frame-rect~ surface rect {Color name: Black})
          (fill-rect~ surface (inflate-rect rect -1 -1) {Color name: White})
          (draw-text~ surface (+ (get-h~ pos) 3) (+ (get-v~ pos) 2) string)))))
  
  
  (method (draw-surrogate-selected surface)
    (when (memq client (get-selection~ editor))
      (fill-rect~ surface (get-bounds~ client) {Color name: Dark-Purple alpha: 0.15})))
  
  
  (method (draw-surrogate-frame surface)
    (when (and (show-frames?~ editor) (eq? (outer-client) client))
      (let ((selection (get-selection~ editor)))
        (define (outer-view view)
          (outer-client~ (get-surrogate~ view)))
        
        (define (frame-color)
          (let ((rank (find selection client key: outer-view)))
            (if (not rank)
                Unselected-Color
              (element Selected-Colors (min rank 2)))))
        
        (let ((color (frame-color))
              (outside (get-bounds~ client)))
          (frame-rect~ surface outside color)
          @temp-as-this-is-not-very-nice-for-client-apps
          (when (eq? client (get-reference~ editor))
            (let ((inside (inflate-rect outside -1 -1)))
              (frame-rect~ surface inside color)))))))
  
  
  (method public virtual (draw-selected surface rank)
    (let* ((bounds (get-bounds~ client))
           (outside (acquire~ editor client bounds))
           (clipper (get-view-clipper~ client))
           (acquired (acquire~ (get-root~ editor) client clipper)))
      (let ((l (get-left~ outside))
            (t (get-top~ outside))
            (r (- (get-right~ outside) 1))
            (b (- (get-bottom~ outside) 1)))
        (set-pen~ surface (selected-pen rank))
        (line~ surface l t r t)
        (line~ surface r t r b)
        (line~ surface l t l b)
        (line~ surface l b r b)
        (set-pen~ surface {Pen name: Black})
        (with-clipper~ surface acquired
          (function ()
            (let ((color (selected-color rank)))
              (frame-rect~ surface outside color)
              (when (eq? self (get-reference~ editor))
                (let ((inside (inflate-rect outside -1 -1)))
                  (frame-rect~ surface inside color)))))))))
  
  
  (method (border-region)
    (border-region~ (outer-client) insets: {Rect 2 2 2 2}))
  
  
  (method (invalidate-border)
    (invalidate-border~ (outer-client) insets: {Rect 2 2 2 2}))
  
  
  (method (redraw-border)
    (redraw-border~ (outer-client) insets: {Rect 2 2 2 2}))
  
  
  (method (get-selected-colors)
    Selected-Colors)
  
  
  (method (get-selected-pens)
    (when (null? Selected-Pens)
      (set! Selected-Pens (map (function (color)
                                 (new Pen style: 'alternate color: color))
                               Selected-Colors)))
    Selected-Pens)
  
  
  (method public (selected-color rank)
    (let ((colors (get-selected-colors)))
      (element colors (min rank (- (length colors) 1)))))
  
  
  (method public (selected-pen rank)
    (let ((pens (get-selected-pens)))
      (element pens (min rank (- (length pens) 1)))))


  ;;;
  ;;;; Cursor
  ;;;


  (method (on-cursor-update evt)
    (cursor-update (get-position~ evt)))
  
  
  (method public virtual (cursor-update pos)
    (let ((mode (get-mode~ editor)))
      (if (eq? mode 'rect)
          (set-cursor :cross)
        (let ((outer (outer-client~ (get-surrogate~ client))))
          (let ((part (either current-part (if (size-client?~ (get-surrogate~ outer)) (find-resize-part (acquire~ outer client pos) (get-size~ outer)) {}))))
            (if (not part)
                (if (eq? outer (get-client~ editor))
                    (if (get-mouse-down?)
                        (if dragging?
                            (set-cursor :closed-hand)
                          (set-cursor :cross))
                      (case mode
                        ((select) (set-cursor :arrow))
                        ((grab) (set-cursor :opened-hand))))
                  (if (move-client?)
                      (set-cursor :all)
                    (set-cursor :arrow)))
              (set-cursor (get-resize-cursor part))))))))


  ;;;
  ;;;; Mouse
  ;;;
  
  
  (definition Drag-Tolerance
    3)

  
  (method (on-mouse-down evt)
    (let ((mode (get-mode~ editor))
          (pos (get-position~ evt)))
      (case mode
        ((select)
         (if (neq? client (get-client~ editor))
             (mouse-down pos)
           (when (select?)
             (select-in-editor))
           (start-rubber-band~ editor client (acquire~ (get-client~ editor) client pos))))
        ((rect)
         (start-rubber-band~ editor client (acquire~ (get-client~ editor) client pos)))
        ((grab)
         (mouse-down pos)))))
  
  
  (method (on-drag-move evt)
    (let ((pos (get-position~ evt)))
      (if (get-rubber-band?~ editor)
          (process-rubber-band~ editor (acquire~ (get-client~ editor) client pos))
        (drag-move pos))))
  
  
  (method (on-drag-up evt)
    (let ((pos (get-position~ evt)))
      (if (get-rubber-band?~ editor)
          (end-rubber-band~ editor (acquire~ (get-client~ editor) client pos))
        (drag-up pos))))
  
  
  (method (on-double-click evt)
    (double-click (get-position~ evt)))


  (method (on-current-drop evt)
    (current-drop (get-position~ evt) (get-drag-drop~ evt)))


  (method (on-receive-drop evt)
    (receive-drop (get-position~ evt) (get-sender~ evt) (get-drag-drop~ evt)))


  (method (on-context-menu evt)
    (context-menu (get-position~ evt)))
  
  
  (method protected virtual (select?)
    #t)
  
  
  (method public virtual (select-in-editor)
    (select~ editor client))
  
  
  (method protected virtual (move-client?)
    #t)
  
  
  (method protected virtual (size-client?)
    #t)
  
  
  (method (some-movable? selection)
    (some? (function (client)
             (move-client?~ (get-surrogate~ client)))
           selection))
  
  
  (method public virtual (mouse-down pos)
    (let ((select
           (function ()
             (when (select?)
               (select-in-editor)))))
      (if (alt-down?)
          (begin
            (select)
            (edit-client))
        (if (eq? client (get-client~ editor))
            (begin
              (set! dragging? #t)
              (set! start-position pos)
              (acquire-capture~ client))
          (select)
          (let ((outer (outer-client~ (get-surrogate~ client))))
            (when (and (move-client?~ (get-surrogate~ outer)) (some-movable? (get-selection~ editor)))
              (set! processing? #t)
              (set! current-part (if (size-client?~ (get-surrogate~ outer)) (find-resize-part (acquire~ outer client pos) (get-size~ outer)) {}))
              (set! start-position (to-desktop~ client pos))
              (set! old-position start-position)
              (acquire-capture~ client))))))
    (acquire-focus~ client))
  
  
  (method public virtual (drag-move pos)
    (cond
      (dragging?
       (let ((delta (nu- pos start-position)))
         (scroll~ client delta)))
      (processing?
       (let ((desktop-pos (to-desktop~ client pos)))
         (when (or current-part (not start-position) (>= (distance desktop-pos start-position) Drag-Tolerance))
           (set! start-position {})
           (let* ((old-pos (from-desktop~ client old-position))
                  (delta (nu- pos old-pos))
                  (dh (get-h~ delta))
                  (dv (get-v~ delta)))
             (if (not current-part)
                 (move-selection dh dv NoModifiers)
               (resize-client dh dv current-part
                 (function (dh dv dwidth dheight)
                   (move-client dh dv)
                   (size-client dwidth dheight))))
             (set! old-position desktop-pos)
             (update-window~ (get-player~ client))))))))
  
  
  (method public virtual (drag-up pos)
    (cond
      (dragging?
       (release-capture~ client)
       (set! current-part {})
       (set! dragging? #f))
      (processing?
       (release-capture~ client)
       (set! current-part {})
       (set! processing? #f)
       (verify-position/size))))
  
  
  ;; a temporary solution until this validation is done live while dragging
  (method (verify-position/size)
    (let ((min-size (minimal-size~ client)))
      (when min-size
        (let ((rect (get-rect~ client))
              (outer (get-size~ (get-parent~ client)))
              (designer (get-designer~ editor)))
          (receive (new-position new-size) (fit-within outer rect minimum-size: min-size)
            (set-property~ designer client 'size new-size)
            (set-property~ designer client 'position new-position))))))
  
  
  (method public virtual (double-click pos)
    (edit-client))


  (method public virtual (current-drop pos drag-drop)
    (new Drop-Target view: client))


  (method public virtual (receive-drop pos sender drag-drop)
    (typecase sender
      ((Toolbox-Tree)
       (let* ((selected-component (selected-component~ sender))
              (model (module-autoload (get-module~ selected-component) 
                                      (get-model~ selected-component))))
         (add-new model pos)))
      ((Properties-Tree)
       (let* ((source (get-source~ drag-drop))
              (row (get-row~ source)))
         (when (is? row Value-Row)
           (set-selection~ sender '())
           (let* ((property (get-property~ row))
                  (name (field-name property)))
             (if (eq? name (get-showed-property~ editor))
                 (set-showed-property~ editor {})
               (set-showed-property~ editor (field-name property)))))))))
  
  
  (method public (add-new model pos (centered?: centered? #t))
    (let ((child (new model parent: client visible?: #f))
          (designer (get-designer~ editor)))
      (add-view~ designer child client position: pos centered?: centered?)
      (set-selection~ editor (list child))))


  (method public virtual (context-menu pos)
    (when (select?)
      (select-in-editor))
    ;; the select should do the acquire-focus... this is a quick fix
    (acquire-focus~ client)
    (let ((menu (get-context-menu)))
      (when menu
        (update-context-menu menu)
        (layout-menu~ menu)
        (track-popup-menu~ client menu pos))))
  
  
  (method public virtual (get-context-menu)
    (new (context-menu-class)))
  
  
  (method public virtual (context-menu-class)
    Surrogate-Menu)
  
  
  (method public virtual (update-context-menu menu)
    )


  ;;;
  ;;;; Client
  ;;;
  
  
  (method (outer-client)
    (outer-view~ client (get-reference~ editor)))


  (method (move-client dh dv)
    (when (or (/= dh 0) (/= dv 0))
      (let ((selection (get-selection~ editor))
            (designer (get-designer~ editor))
            (outer (outer-client~ (get-surrogate~ client))))
        (when (move-client?~ (get-surrogate~ outer))
          (let ((pos (get-position~ outer)))
            (set-property~ designer outer position: (new Point (+ (get-h~ pos) dh) (+ (get-v~ pos) dv))))))))


  (method (size-client dwidth dheight)
    (when (or (/= dwidth 0) (/= dheight 0))
      (let* ((outer (outer-client))
             (size (get-size~ outer))
             (new-size (new Dimension (+ (get-width~ size) dwidth) (+ (get-height~ size) dheight))))
        (with-closed ((region (border-region)))
          (set-property~ (get-designer~ editor) outer size: new-size)
          (invalidate-region~ outer region))
        (with-closed ((region (border-region)))
          (invalidate-region~ outer region))
        (when (eq? client (get-reference~ editor))
          (update-scrollbars~ client)))))
  
  
  (method protected virtual (edit-client)
    (edit-component~ editor client))


  ;;;
  ;;;; Keyboard
  ;;;
  
  
  (method (on-key-press evt)
    (key-press (get-key~ evt)))
  
  
  (method public virtual (key-press key)
    )
  
  
  (method (on-arrow-press evt)
    (let ((modifiers (get-modifiers~ evt)))
      (case (get-property~ evt direction:)
        ((left)  (move-selection -1  0 modifiers))
        ((up)    (move-selection  0 -1 modifiers))
        ((right) (move-selection  1  0 modifiers))
        ((down)  (move-selection  0  1 modifiers)))))
  
  
  (method (on-backspace-press evt)
    (close-selection))


  ;;;
  ;;;; Move
  ;;;
  
  
  (method (move-selection dh dv modifiers)
    (let* ((shift? (shift-key? modifiers))
           (control? (control-key? modifiers))
           (single? (and shift? control?))
           (quantum (move-quantum shift?))
           (selection (get-selection)))
      (for-each (function (view)
                  (move-client~ (get-surrogate~ view) (* dh quantum) (* dv quantum)))
                (if single? (list (car selection)) selection))))
  
  
  (method (move-quantum shift?)
    (if shift?
        8
      1))
  

  ;;;
  ;;;; Save
  ;;;


  (method public (save-form)
    (let ((selection (get-selection)))
      (when selection
        (save~ selection))))
  

  ;;;
  ;;;; Edition
  ;;;
  
  
  (method public virtual (can-undo?)
    #t)
  
  
  (method public virtual (can-redo?)
    #t)
  
  
  (method public virtual (can-cut?)
    #t)
  
  
  (method public virtual (can-copy?)
    #t)
  
  
  (method public virtual (can-paste?)
    (clipboard-format-available? 'jazz-parcels))
  
  
  (method public virtual (can-paste-properties?)
    #f)
  
  
  (method public virtual (can-delete?)
    #t)
  
  
  (method public virtual (can-rename?)
    #t)
  
  
  (method public virtual (can-select-all?)
    #t)
  
  
  (method public virtual (undo)
    )
  
  
  (method public virtual (redo)
    )
  
  
  (method public virtual (cut-selection)
    (let ((selection (get-selection))
          (designer (get-designer~ editor)))
      (cut-components~ designer selection)
      (set-selection '())))
  
  
  (method public virtual (copy-selection)
    (let ((selection (get-selection))
          (designer (get-designer~ editor)))
      (copy-components~ designer selection)))
  
  
  (method public virtual (paste-clipboard)
    (let ((selection (get-selection)))
      (if (/= (length selection) 1)
          (bell)
        (let* ((designer (get-designer~ editor))
               (parent (car selection))
               (views (paste-clipboard~ designer parent)))
          (for-each (function (view)
                      (set-property~ designer view 'position {Point 0 0}))
                    views)
          (set-selection views)))))
  
  
  (method public virtual (paste-properties)
    )
  
  
  (method public virtual (delete-selection)
    (close-selection))
  
  
  (method public virtual (rename-selection)
    )
  
  
  (method public virtual (select-all . rest)
    (set-selection (get-children~ client)))
  

  ;;;
  ;;;; Selection
  ;;;
  
  
  (method (get-component-selection)
    (map (function (component)
           (if (is? component View)
               (outer-client~ (get-surrogate~ component))
             component))
         (get-selection)))
  
  
  (method (select rank focus?)
    (when (= rank 0)
      @i-am-not-so-sure-about-this
      (bring-to-front~ client)
      (when focus?
        (acquire-focus~ client)))
    ;; temp for client apps
    (user-message "{a} selected" client)
    (redraw-border)
    (redraw-view~ client))
  
  
  (method (unselect)
    (redraw-border)
    (redraw-view~ client)))


;;;
;;;; Surrogate-Menu
;;;


(class Surrogate-Menu extends Context-Menu
  
  
  (form
    (<install>
      (<Label-Item>     name: cut              title: "Cut" icon: {Bitmap-Resource "Cut"} action: {Action view cut})
      (<Label-Item>     name: copy             title: "Copy" icon: {Bitmap-Resource "Copy"} action: {Action view copy})
      (<Label-Item>     name: paste            title: "Paste" icon: {Bitmap-Resource "Paste"} action: {Action view paste})
      (<Separator-Item> name: end-edition)
      (<Label-Item>     name: bring-to-front   title: "Bring To Front" action: {Action view-surrogate bring-to-front})
      (<Label-Item>     name: send-to-back     title: "Send To Back" action: {Action view-surrogate send-to-back})
      (<Separator-Item> name: end-layer)
      (<Label-Item>     name: close-selection  title: "Close Selection" icon: {Bitmap-Resource "CloseWindow"} action: {Action view-surrogate close-selection})
      (<Label-Item>     name: rename-selected  title: "Rename" action: {Action view-surrogate rename-selected})
      (<Separator-Item> name: end-close/rename)
      (<Label-Item>     name: properties       title: "Properties" action: {Action view-surrogate properties})))))
