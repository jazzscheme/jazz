;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Synchronizing with a Repository
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.groupware.compare.Synchronize-Repositories jazz


(import (jazz.groupware)
        (jazz.jml)
        (jazz.library)
        (jazz.literals)
        (jazz.utilities))


(class Synchronize-Repositories extends Compare-Directories


  (form
    (<install>
      (<!>     name: mode
        (<!>   name: backup title: "Get Latest" size: {Dimension 100 12}))))
  
  
  ;;;
  ;;;; Host
  ;;;
  
  
  (method meta (host-title)
    "Repository Synchronizer")
  
  
  ;;;
  ;;;; Compare
  ;;;
  
  
  (method (get-directories)
    (let ((item (require-right-moniker)))
      (values (get-pathname~ item) item)))
  
  
  (method (new-comparer)
    (new Repository-Synchronizer))
  
  
  ;;;
  ;;;; Result
  ;;;
    
  
  ;; This is really a get-latest-action...
  (method (backup-action date file file-date item item-date)
    (when item
      (if (not file)
          'copy-left
        (when (read-only?~ file)
          'copy-left))))

  
  (method (merge-action base-date file file-date item item-date)
    (when item
      (if (not file)
          'copy-right
        (let ((status (get-status~ item)))
          (if (eq? status 'checked-out-me)
              'copy-right
            (when (read-only?~ file)
              'copy-right))))))))
