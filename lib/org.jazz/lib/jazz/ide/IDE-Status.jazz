;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; IDE Status
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.ide.IDE-Status jazz


(import (jazz.ide)
        (jazz.jml)
        (jazz.jrm)
        (jazz.library)
        (jazz.platform)
        (jazz.ui)
        (jazz.ui.activity)
        (jazz.ui.look)
        (jazz.ui.window)
        (jazz.utilities))


(class IDE-Status extends Status-Toolbar
  
  
  (slot break-listener)

  
  ;;;
  ;;;; Break
  ;;;


  (method (install rest)
    (nextmethod rest)
    (set! break-listener (new Status-Break-Listener)))


  (method (destroy)
    (close~ break-listener)
    (nextmethod))

  
  ;;;
  ;;;; Events
  ;;;


  (method protected virtual (on-context-menu evt)
    (let* ((sender (get-sender~ evt))
           (name (get-name~ sender))
           (pos (acquire sender (get-position~ evt))))
      (case name
        ((mode) (track-popup-menu (new Mode-Menu) pos)))))
  
  
  (method protected virtual (on-mouse-down evt)
    (let* ((sender (get-sender~ evt))
           (name (get-name~ sender))
           (pos (acquire sender (get-position~ evt))))
      (case name
        ((mode) (track-popup-menu (new Mode-Menu) pos)))))


  ;;;
  ;;;; Process
  ;;;
  
  
  (method (select-debugger-workspace)
    (let ((workspace (get-preferences '(workspaces debugger) error?: #f)))
      (when workspace
        (apply-preferences~ workspace)))))


;;;
;;;; Debugger-Menu
;;;


(class Debugger-Menu extends Context-Menu
  
  
  (method (install rest)
    (nextmethod rest)
    (insert-debuggees))
  
  
  (method (insert-debuggees)
    (let* ((appl (get-application))
           (debugger (get-local-debugger~ appl))
           (selected (get-selected-debuggee~ debugger))
           (debuggees (get-debuggees~ debugger validate-liveness?: #t)))
      (for-each (function (debuggee)
                  (insert-debuggee debuggee (proxy=? debuggee selected)))
                debuggees)))
  
  
  (method (insert-debuggee debuggee selected?)
    (let* ((title (present-debuggee~ (get-application) debuggee))
           (icon (get-icon~ debuggee))
           (item (new Radio-Item parent: self title: title icon: icon action-handler: (new Event-Handler target: self method-name: 'on-action properties: (list debuggee: debuggee)))))
      (when selected?
        (set-selected?~ item #t))))
  
  
  (method (on-action evt)
    (let ((debuggee (get-property~ evt debuggee:)))
      (select-debuggee~ (get-local-debugger~ (get-application)) debuggee))))


;;;
;;;; Activities-Menu
;;;


(class Activities-Menu extends Context-Menu
  
  
  (form
    (<install>                           title: "&Activities"
      (<Label-Item>     name: open       title: "&Open" action-handler: {Event-Handler :form on-open})
      (<Label-Item>     name: close      title: "&Close" action-handler: {Event-Handler :form on-close})
      (<Separator-Item>)
      (<Label-Item>     name: clear-done title: "Clear &Done" icon: {Bitmap-Resource "Done"} action-handler: {Event-Handler :form on-clear-done})))
  
  
  (method (on-open evt)
    (show~ (get-activity-manager)))
  
  
  (method (on-close evt)
    (hide~ (get-activity-manager)))
  
  
  (method (on-clear-done evt)
    (clear-done~ (get-activity-manager))))


;;;
;;;; Locales-Menu
;;;


(class Locales-Menu extends Context-Menu
  
  
  (method (install rest)
    (nextmethod rest)
    (insert-locales))
  
  
  (method (insert-locales)
    (let ((current (get-locale))
          (locales (get-locales)))
      (for-each (function (locale)
                  (insert-locale locale (eq? locale current)))
                locales)))
  
  
  (method (insert-locale locale checked?)
    (let* ((title (present-locale locale))
           (item (new Check-Item parent: self title: title action-handler: (new Event-Handler target: self method-name: 'on-action properties: (list locale: locale)))))
      (when checked?
        (set-checked?~ item #t))))
  
  
  (method (on-action evt)
    (set-locale (get-property~ evt locale:))))


;;;
;;;; Look-Menu
;;;


(class Look-Menu extends Context-Menu
  
  
  (method (install rest)
    (nextmethod rest)
    (insert-looks))
  
  
  (method (insert-looks)
    (let ((current (get-look))
          (looks (get-looks)))
      (for-each (function (look)
                  (insert-look look (eq? look current)))
                looks)))
  
  
  (method (insert-look look checked?)
    (let* ((title (present~ look))
           (item (new Check-Item parent: self title: title action-handler: (new Event-Handler target: self method-name: 'on-action properties: (list look: look)))))
      (when checked?
        (set-checked?~ item #t))))
  
  
  (method (on-action evt)
    (set-look (get-property~ evt look:))
    (redraw-window~ (get-toplevel))))


;;;
;;;; Mode-Menu
;;;


(class Mode-Menu extends Context-Menu
  
  
  (method (install rest)
    (nextmethod rest)
    (insert-item 'jazz "Jazz" {Bitmap-Resource "Script"})
    (insert-item 'c "C" {Bitmap-Resource "Java"}))
  
  
  (method (insert-item mode title icon)
    (let ((current (get-catalog-context~ (get-application)))
          (item (new Check-Item parent: self title: title icon: icon action-handler: (new Event-Handler target: self method-name: 'on-action properties: (list mode: mode)))))
      (when (eq? mode current)
        (set-checked?~ item #t))))
  
  
  (method (on-action evt)
    (set-catalog-context~ (get-application) (get-property~ evt mode:)))))
