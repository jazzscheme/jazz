;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Updating Remote Code
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.jrm.tools.Remotable-Updater jazz


(import (jazz.jrm)
        (jazz.library)
        (jazz.utilities))


(class Remotable-Updater extends Object ;; Code-Generator

@wait(
  (method public (update (force?: force? #f))
    (let ((remotables (collect-remotables))
          (environment (new-environment (make-table test: eq?) {}))
          (output (get-output-log))
          (dirty? #f))
      (clear-results~ output)
      (select-results~ output)
      (select-palette Output-Log)
      (for-each (function (name)
                  (when (update-remotable name environment force? output)
                    (set! dirty? #t)))
                remotables)
      (when dirty?
        (log-line~ output ""))
      (log-line~ output (format "Remotable Code{a} Updated" (if force? " Force" "")) image: {Bitmap-Resource "Done"})))
  
  
  (method (collect-remotables)
    (let ((workbench (get-workbench))
          (remotables '()))
      (for-each-jazz-file~ workbench
       (function (file)
         (let ((category-name (get-name~ file)))
           (when (get-remotable?~ file)
             (set! remotables (cons category-name remotables))))))
      remotables))
  
  
  (method (update-remotable name environment force? output)
    (let* ((class (get-category name environment))
           (ascendant (type-ascendant class))
           (ascendant-remotable? (get-remotable?~ (get-entry~ (get-workbench) (type-name ascendant))))
           (generator (new Remotable-Generator class: class ascendant: (essay ascendant-remotable? ascendant)))
           (source-file (get-manifest-source name))
           (remotable-name (remotable-name~ generator))
           (remotable-file (essay remotable-name (get-manifest-source remotable-name))))
      (when (or force?
                (null? remotable-file)
                (not (exists?~ remotable-file))
                (> (get-modification-time~ source-file) (get-modification-time~ remotable-file)))
        (log-line~ output (format "{s}" name) image: {Bitmap-Resource "Document"})
        (emit-code~ generator)
        #t))))))
