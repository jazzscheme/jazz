;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; C Parser
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.language.c.parser.C-Parser jazz


(import (jazz.catalog)
        (jazz.language.c)
        (jazz.library)
        (jazz.utilities))


(class C-Parser extends File-Parser
  
  
  (method (parse file time)
    (new C-File-Entry catalog file time (parse-definitions file)))
  
  
  (method (parse-definitions file)
    (let ((lines (load-lines~ file char-encoding: char-encoding))
          (fact (new List-Factory))
          (function-heuristic (get-heuristic 'c-function)))
      (when (member? (get-extension~ file) '("c" "cpp"))
        (put~ fact (new C-Category-Entry (get-base~ file))))
      (for-each (function (line n)
                  (let ((define (find-define line n)))
                    (when define
                      (put~ fact define)))
                  (let ((include (find-include line n)))
                    (when include
                      (put~ fact include)))
                  (case function-heuristic
                    ((gambit)
                     (let ((export (find-gambit-export line n)))
                       (when export
                         (put~ fact export))))))
                lines
                (naturals 0 (length lines)))
      (get-output~ fact)))
  

  ;;;
  ;;;; Define
  ;;;
  
  
  (constant define
    "#define")
  
  
  (method (find-define line n)
    (let ((len (string-length line))
          (col (skip-whitespace line)))
      (when (search line define start: col)
        (let* ((start (+ col (string-length define)))
               (col (skip-whitespace line start: start)))
          (when (and (> col start) (< col len))
            (let* ((start col)
                   (col (skip (function (c) (or (c-constituent? c))) line start: start)))
              (when (and (> col start) (<= col len))
                (new C-Define-Entry (subseq line start col) n start))))))))
  

  ;;;
  ;;;; Include
  ;;;
  
  
  (constant include
    "#include")
  
  
  (method (find-include line n)
    (let ((len (string-length line))
          (col (skip-whitespace line)))
      (when (search line include start: col)
        (let* ((start (+ col (string-length include)))
               (col (skip-whitespace line start: start)))
          (when (and (> col start) (< col len) (eqv? (element line col) #\double-quote))
            (let* ((start (+ col 1))
                   (col (skip (function (c) (or (c-constituent? c) (eqv? c #\period))) line start: start)))
              (when (and (> col start) (< col len) (eqv? (element line col) #\double-quote))
                (new C-Include-Entry (subseq line start col) n start))))))))
  

  ;;;
  ;;;; Open-Brace Heuristic
  ;;;
  

  ;;;
  ;;;; Gambit Heuristic
  ;;;
  
  
  (constant gambit-export
    "___EXP_FUNC")
  
  
  (method (find-gambit-export line n)
    (let ((len (string-length line))
          (col (skip-whitespace line)))
      (when (search line gambit-export start: col)
        (let* ((start (+ col (string-length gambit-export)))
               (col (skip (function (c) (not (eqv? c #\comma))) line start: start)))
          (when (and col (< col len))
            (let* ((start (skip-whitespace line start: (+ col 1)))
                   (end (skip c-constituent? line start: start)))
              (when (> end start)
                (new C-Export-Entry (subseq line start end) n start))))))))))
