;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; CSS Text View
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.language.css.text.CSS-Text-View jazz


(import (jazz.language.clike)
        (jazz.language.css)
        (jazz.ui)
        (jazz.library)
        (jazz.utilities))


(class CSS-Text-View extends CLike-Text-View
  
  
  (method (install rest)
    (nextmethod rest)
    (let ((pref (preferences)))
      (add-style (new Text-Style name: 'Title            base: 'Default color: (get-title-color~ pref)))
      (add-style (new Text-Style name: 'Balanced-Comment base: 'Default color: (get-balanced-comment-color~ pref)))
      (add-style (new Text-Style name: 'Definition       base: 'Default color: (get-definition-color~ pref)))
      (add-style (new Text-Style name: 'Keyword          base: 'Default color: (get-keyword-color~ pref)))))
  
  
  @convert-external
  (method meta (external-name . rest)
    'css-text)

  
  (method (preferences)
    (get-preferences '(documents css-text)))

  
  ;;;
  ;;;; Completion
  ;;;


  (method (favorite-completions)
    (get-completions~ (preferences)))

  
  ;;;
  ;;;; Coloring
  ;;;
  
  
  (definition Syntax-Targets
    {})
  
  (definition Syntax-Automata
    {})
  
  
  (method (syntax-targets)
    (unless Syntax-Targets
      (set! Syntax-Targets (compute-syntax-targets)))
    Syntax-Targets)
  
  
  (method (syntax-automata)
    (unless Syntax-Automata
      (set! Syntax-Automata (compute-syntax-automata)))
    Syntax-Automata)
  
  
  (method (compute-syntax-targets)
    (append (list (list "/*" 'balanced-comment #f))
            (list (list "*/" 'balanced-comment-backward #f))
            (map (function (str) (list str 'keyword)) (get-keywords))))

  
  (method (colorize-type found type start end colorizer recolorize?)
    (case type
      ((balanced-comment)          (colorize-balanced-comment          found start end colorizer 'Balanced-Comment))
      ((balanced-comment-backward) (colorize-balanced-comment-backward found start end colorizer 'Balanced-Comment recolorize?))
      ((keyword)                   (colorize-keyword                   found start end colorizer 'Keyword))))

  
  ;;;
  ;;;; Keywords
  ;;;
  
  
  (constant Keywords
    '())
  
  
  (method (get-keywords)
    Keywords)))
