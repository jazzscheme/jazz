;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Jazz Console-Text View
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2007
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.language.jazz.console.Jazz-Console-Text-View jazz


(import (jazz.console)
        (jazz.development)
        (jazz.jml)
        (jazz.language.jazz)
        (jazz.platform)
        (jazz.ui)
        (jazz.library)
        (jazz.utilities))


(class Jazz-Console-Text-View extends Console-Text-View
  
  
  (form
    (<install> context: jazz))


  ;;;
  ;;;; Actions
  ;;;
  

  (method (focus-actions)
    (cons (find-actions 'jazz-console-text)
          (nextmethod)))


  ;;;
  ;;;; Eval
  ;;;
  
  
  (method (eval-command range name command console?)
    (let* ((appl (get-application))
           (module (get-profile-module~ appl))
           (profile (get-profile~ appl))
           (name (identifier-name (type-name (class-of profile))))
           (forms (read-text-forms range string: command console?: #t)))
      (if (and (not-null? forms) (console-command~ profile (car forms) (cdr forms)))
          {}
        (map (function (form)
               (parameterize ((jazz.requested-module-name module))
                 (eval
                   `(library ,module jazz
                      (import (jazz.development)
                              (jazz.io)
                              (jazz.io.protocol)
                              (jazz.jml)
                              (jazz.library)
                              (jazz.literals)
                              (jazz.media)
                              (jazz.network)
                              (jazz.platform)
                              (jazz.profile)
                              (jazz.repository.git)
                              (jazz.runtime)
                              (jazz.system)
                              (jazz.ui)
                              (jazz.ui.development)
                              (jazz.ui.dialog)
                              (jazz.ui.view)
                              (jazz.ui.window)
                              (jazz.utilities)
                              (jedi)
                              (test)
                              (time))
                      (set-? ,form)
                      @waiting-fix
                      (class ,name extends Profile
                        (method (evaluate)
                          ,form))
                      @waiting-fix
                      (set-? (evaluate~ (get-profile~ (get-application)))))))
               ?)
             forms))))
  
  
  (method (evaluate-form? form)
    (and (pair? form)
         (memq? (car form) '(class interface package enumeration structure external winexternal coexternal definition method comethod macro syntax))))
  
  
  (method (execute-form form object packages variables frame)
    (unimplemented 'execute-form)
    @convert
    (let* ((appl (get-application))
           (debugger (get-local-debugger-server~ appl))
           (process (essay debugger (get-selected-debuggee~ debugger)))
           (pref (get-preferences '(tools console)))
           (detail (get-print-detail~ pref)))
      ;; until implemented remotly...
      (if (or #t (null? process) (> (get-level~ (get-loop~ appl)) 0))
          @new-unified-evaluate/execute
          (let ((result (evaluate (list form) object (class-of object) packages)))
            (if (not result)
                {}
              (set-? result)
              (->string result detail)))
          (let ((evaluate? (evaluate-form? form)))
            (if evaluate?
                (car (evaluate (list form) object (class-of object) packages))
              (let* ((anonymous (list (list 'function '() form)))
                     (result (privileged-execute anonymous object packages variables frame 'Console)))
                (if (not result)
                    {}
                  (set-? result)
                  (->string result detail)))))
        (if (is? process Local-Proxy)
            (execute~ process (get-string (current-command-range)) object (map type-name packages) variables frame)
          (execute~ process (get-string (current-command-range)) {} (map type-name packages) {} {})))))
  

  (method (current-toplevel-info)
    (unimplemented 'current-toplevel-info)
    @convert
    (values {}
            (list (either Interactive-Object (get-profile~ (get-application)))
                  extends: (list Language
                                 Utilities
                                 Development
                                 Utilities
                                 System
                                 Windows
                                 WinKernel
                                 WinUser
                                 WinGDI
                                 WinDlg))))))
