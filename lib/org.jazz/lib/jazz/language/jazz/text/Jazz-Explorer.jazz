;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Exploring Jazz Code
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.language.jazz.text.Jazz-Explorer jazz


(import (jazz.language.jazz)
        (jazz.language.lisp)
        (jazz.library)
        (jazz.utilities))


(proclaim (optimize))


(class Jazz-Explorer extends Lisp-Explorer
  
  
  (definition Modifiers
    '(dialect meta private package protected public primitive final virtual chained abstract inline synchronized unimplemented deprecated send value post))

  
  (method (get-modifiers)
    Modifiers)

  
  ;;;
  ;;;; Category
  ;;;
  
  
  (method public (forward-in)
    (let ((e (copy (get-end))))
      (if (and (enter-list)
               (skip-forward "in")
               (forward-expr))
          (let ((package (intern-marked-symbol)))
            (exit-list)
            package)
        (set-end e)
        {})))
  
  
  (method public (forward-category)
    (when (and (enter-list)
               (forward-expr)
               (memq? (find-marked-symbol) '(package class interface remotable-stub)))
      (let ((kind (intern-marked-symbol))
            (meta? (forward-modifiers)))
        (when (and (forward-expr)
                   (eq? (get-kind) 'symbol))
          (let ((name (intern-marked-symbol)))
            @convert
            (when (or (not name) (not (in-manifest? name)))
              (signal (new Explore-Error message: (format "Unable to find category {a} in manifest" (get-marked)) start: (get-start) end: (get-end))))
            (let ((category (essay name (symbol-bound? name #f) (global-value~ name #f))))
              (list category kind meta? name (collect-categories-keywords))))))))
  
  
  (method (forward-category-keywords (proc {}))
    (let ((keyword {})
          (previous (get-end)))
      (while (and (forward-expr)
                  (begin
                    (set! keyword (find-marked-symbol))
                    (or (memq? keyword '(module library class interface remotable-stub))
                        (memq? keyword '(metaclass extends implements))))
                  (forward-expr))
        (set! previous (get-end))
        (when proc
          (proc keyword)))
      (set-start previous)
      (set-end previous)))
  
  
  (method (collect-categories-keywords)
    (let ((fact (new List-Factory)))
      (forward-category-keywords
        (function (keyword)
          (put~ fact keyword)
          (put~ fact (resolve-categories (read-string-element (get-marked))))))
      (get-output~ fact)))
  
  
  (method (resolve-categories names)
    (if (symbol? names)
        (autoload names)
      (map load names)))


  ;;;
  ;;;; Location
  ;;;
  
  
  (method public (forward-location location <Object> (toplevel-location: toplevel-location {}))
    (let ((scan location))
      (while (not-null? scan)
        (let ((ref (car scan)))
          (set-end (get-start))
          (forward-whites)
          (let ((c0 (char-forward 0))
                (c1 (char-forward 1)))
            (cond ((eqv? c0 #\backquote)
                   (forward)
                   (forward-expr)
                   (set! scan (cdr scan)))
                  ((and (eqv? c0 #\comma) (eqv? c1 #\at))
                   (forward)
                   (forward)
                   (forward-expr)
                   (set! scan (cdr scan)))
                  ((eqv? c0 #\comma)
                   (forward)
                   (forward-expr)
                   (set! scan (cdr scan)))
                  ((not (enter-composite))
                   (signal (new Location-Error kind: 'bad location: (either toplevel-location location))))
                  (else
                   (unless (eq? ref 'meta)
                     (cond ((eq? ref :new-form)
                            (forward-new-form toplevel-location: toplevel-location))
                           ((eq? ref :form)
                            (forward-form toplevel-location: toplevel-location))
                           ((symbol? ref)
                            (forward-definition ref toplevel-location: toplevel-location))
                           (else
                            (forward-numeric ref toplevel-location: toplevel-location))))
                   (set! scan (cdr scan)))))))))
  
  
  (method (forward-new-form (toplevel-location: toplevel-location {}))
    (forward-category-keywords)
    (set-end (get-start)))
  
  
  (method (forward-form (toplevel-location: toplevel-location {}))
    (while (not (form-expr? '(form)))
      (when (not (forward-valid-expr))
        (signal (new Location-Error kind: 'unknown location: (either toplevel-location 'form))))))
  
  
  (method (forward-definition name <Object> (toplevel-location: toplevel-location {}))
    (while (or (not (definition-expr?))
               (neq? (definition-only-name) name))
      (when (not (forward-valid-expr))
        (signal (new Location-Error kind: 'unknown location: (either toplevel-location name))))))
  
  
  (method (forward-numeric n <fx> (toplevel-location: toplevel-location {}))
    (while (>= n 0)
      (when (not (forward-valid-expr))
        (signal (new Location-Error kind: 'unknown location: (either toplevel-location n))))
      (decrease! n)))
  
  
  (method (forward-valid-expr)
    (let ((kind (forward-expr)))
      (cond ((eq? kind 'expr-comment)
             (forward-expr)
             (forward-expr))
            (else
             kind))))


  ;;;
  ;;;; Fusion
  ;;;


  (method public (fusion-declaration?)
    (form-expr? '(module library class interface remotable-stub)))

  
  (definition fusion-module-parameters
    '(require))
  
  (definition fusion-library-parameters
    '(require export import))
  
  (definition fusion-class-keywords
    '(metaclass extends implements attributes))
  
  (definition fusion-interface-keywords
    '(metaclass extends attributes))


  (method public (fusion-declaration)
    (let ((s (copy start))
          (e (copy end)))
      (set-end start)
      (enter-list)
      (forward-expr)
      (let ((type (fusion-symbol)))
        (prog1 (case type
                 ((module) (fusion-module-declaration))
                 ((library) (fusion-library-declaration))
                 ((class) (fusion-class-declaration))
                 ((interface) (fusion-interface-declaration)))
          (set-start s)
          (set-end e)))))
  
  
  (method (fusion-module-declaration)
    (forward-modifiers)
    (forward-expr)
    (let ((name (get-marked)))
      (forward-expr)
      (let ((parameters (fusion-collect-parameters fusion-module-parameters)))
        (cons "module" (cons name parameters)))))
  
  
  (method (fusion-library-declaration)
    (forward-modifiers)
    (forward-expr)
    (let ((name (get-marked)))
      (forward-expr)
      (let ((dialect (get-marked)))
        (forward-expr)
        (let ((parameters (fusion-collect-parameters fusion-library-parameters)))
          (cons "library" (cons name (cons dialect parameters)))))))
  
  
  (method (fusion-class-declaration)
    (forward-modifiers)
    (forward-expr)
    (let ((name (get-marked)))
      (forward-expr)
      (let ((keywords (fusion-collect-keywords fusion-class-keywords)))
        (cons "class" (cons name keywords)))))
  
  
  (method (fusion-interface-declaration)
    (forward-modifiers)
    (forward-expr)
    (let ((name (get-marked)))
      (forward-expr)
      (let ((keywords (fusion-collect-keywords fusion-interface-keywords)))
        (cons "interface" (cons name keywords)))))
  
  
  (method (fusion-collect-parameters parameters)
    (let ((fact (new List-Factory)))
      (let (iterate)
        (when (eq? kind 'list)
          (let ((s (get-start))
                (e (get-end)))
            (set-end s)
            (enter-list)
            (forward-expr)
            (when (eq? kind 'symbol)
              (let ((expr (fusion-symbol)))
                (when (memq? expr parameters)
                  (put~ fact (get-range-string s e))
                  (exit-list)
                  (forward-expr)
                  (iterate)))))))
      (get-output~ fact)))
  
  
  (method (fusion-collect-keywords keywords)
    (let ((fact (new List-Factory)))
      (let (iterate)
        (when (eq? kind 'symbol)
          (let ((expr (fusion-symbol)))
            (when (memq? expr keywords)
              (put~ fact (->string expr))
              (forward-expr)
              (put~ fact (get-marked))
              (forward-expr)
              (iterate)))))
      (get-output~ fact)))
  
  
  (method (fusion-symbol)
    (string->symbol (get-marked)))


  ;;;
  ;;;; Definitions
  ;;;
  
  
  (definition Jazz-Toplevels
    '(module library class interface remotable-stub definition macro syntax method inline slot property form constant enumeration global c-include c-type structure c-structure c-definition generic specific intrinsic external c-external coclass cointerface coexternal comethod javaexternal javamethod attributes datacontainer))


  (method (definition-name? name)
    (memq? name Jazz-Toplevels))


  ;;;
  ;;;; Declarations
  ;;;
  
  
  (method (walk-declaration context declaration keyword expression doc line walk-expressions?)
    (let ((list? (enter-list)))
      (when (or (not line) (= (get-row~ end) line))
        (if (not list?)
            (when (forward-expr)
              (if (and (eq? kind 'symbol)
                       (memq? (find-marked-symbol) '(metaclass extends implements has on library module dialect imports exports includes attributes))
                       (or (not line) (= (get-row~ end) line)))
                  (keyword context start end)
                (when (or (not line) (= (get-row~ end) line))
                  (expression context start end 'code kind)))
              #t)
          (when (and (forward-expr) (eq? kind 'symbol))
            (let ((symbol (find-marked-symbol)))
              (case symbol
                ((begin)           (walk-begin         context declaration keyword expression doc line walk-expressions?))
                ((module)          (walk-category      context declaration keyword expression doc line walk-expressions?))
                ((library)         (walk-category      context declaration keyword expression doc line walk-expressions?))
                ((class)           (walk-category      context declaration keyword expression doc line walk-expressions?))
                ((interface)       (walk-category      context declaration keyword expression doc line walk-expressions?))
                ((remotable-stub)  (walk-category      context declaration keyword expression doc line walk-expressions?))
                ((require)         (walk-import        context declaration keyword expression doc line walk-expressions?))
                ((export)          (walk-import        context declaration keyword expression doc line walk-expressions?))
                ((import)          (walk-import        context declaration keyword expression doc line walk-expressions?))
                ((properties)      (walk-properties    context declaration keyword expression doc line walk-expressions?))
                ((native)          (walk-native        context declaration keyword expression doc line walk-expressions?))
                ((attributes)      (walk-attributes    context declaration keyword expression doc line walk-expressions?))
                ((definition)      (walk-definition    context declaration keyword expression doc line walk-expressions?))
                ((specialize)      (walk-specialize    context declaration keyword expression doc line walk-expressions?))
                ((%macro)          (walk-macro         context declaration keyword expression doc line walk-expressions?))
                ((macro)           (walk-macro         context declaration keyword expression doc line walk-expressions?))
                ((syntax)          (walk-macro         context declaration keyword expression doc line walk-expressions?))
                ((method)          (walk-method        context declaration keyword expression doc line walk-expressions?))
                ((pattern)         (walk-method        context declaration keyword expression doc line walk-expressions?))
                ((c-method)        (walk-method        context declaration keyword expression doc line walk-expressions?))
                ((inline)          (walk-method        context declaration keyword expression doc line walk-expressions?))
                ((slot)            (walk-slot          context declaration keyword expression doc line walk-expressions?))
                ((c-slot)          (walk-slot          context declaration keyword expression doc line walk-expressions?))
                ((property)        (walk-property      context declaration keyword expression doc line walk-expressions?))
                ((form)            (walk-form          context declaration keyword expression doc line walk-expressions?))
                ((global)          (walk-global        context declaration keyword expression doc line walk-expressions?))
                ((c-include)       (walk-c-include     context declaration keyword expression doc line walk-expressions?))
                ((constant)        (walk-constant      context declaration keyword expression doc line walk-expressions?))
                ((enumeration)     (walk-enumeration   context declaration keyword expression doc line walk-expressions?))
                ((c-type)          (walk-type          context declaration keyword expression doc line walk-expressions?))
                ((structure)       (walk-structure     context declaration keyword expression doc line walk-expressions?))
                ((c-structure)     (walk-c-structure   context declaration keyword expression doc line walk-expressions?))
                ((c-definition)    (walk-c-definition  context declaration keyword expression doc line walk-expressions?))
                ((generic)         (walk-generic       context declaration keyword expression doc line walk-expressions?))
                ((specific)        (walk-specific      context declaration keyword expression doc line walk-expressions?))
                ((intrinsic)       (walk-intrinsic     context declaration keyword expression doc line walk-expressions?))
                ((external)        (walk-external      context declaration keyword expression doc line walk-expressions?))
                ((c-external)      (walk-external      context declaration keyword expression doc line walk-expressions?))
                ((coexternal)      (walk-coexternal    context declaration keyword expression doc line walk-expressions?))
                ((javaexternal)    (walk-javaexternal  context declaration keyword expression doc line walk-expressions?))
                ((javamethod)      (walk-javamethod    context declaration keyword expression doc line walk-expressions?))
                ((datacontainer)   (walk-datacontainer context declaration keyword expression doc line walk-expressions?))
                (else
                 (walk-unknown context declaration keyword expression doc line walk-expressions?)))))
          (unless line
            (exit-list))
          #t))))
  
  
  (method (walk-modifiers context declaration keyword expression doc line)
    (let ((old (copy end)))
      (while (and (eq? (forward-expr) 'symbol)
                  (memq? (find-marked-symbol) (get-modifiers))
                  (or (not line) (= (get-row~ end) line)))
        (keyword context start end)
        (set! old (copy end)))
      (set! end old)))
  
  
  (method (walk-begin context declaration keyword expression doc line walk-expressions?)
    (walk-declarations context declaration keyword expression doc walk-expressions?))
  
  
  (method public (walk-category context declaration keyword expression doc line walk-expressions?)
    (let ((entry context))
      (keyword context start end)
      (walk-modifiers context declaration keyword expression doc line)
      (when (and (forward-expr) (eq? kind 'symbol) (or (not line) (= (get-row~ end) line)))
        (set! entry (declaration context start end (get-marked) (symbol-documented? (find-marked-symbol) doc)))
        (walk-declarations entry declaration keyword expression doc walk-expressions?))
      entry))
    
  
  (method (walk-import context declaration keyword expression doc line walk-expressions?)
    (keyword context start end))
      
  
  (method (walk-proclaim context declaration keyword expression doc line walk-expressions?)
    (keyword context start end))

  
  (method (walk-properties context declaration keyword expression doc line walk-expressions?)
    (keyword context start end)
    (when walk-expressions?
      (walk-expressions context expression)))
  
  
  (method (walk-native context declaration keyword expression doc line walk-expressions?)
    (define (parse-identifier str)
      (let ((pos (find str #\. reversed?: #t)))
        (if (not pos)
            str
          (substring str (+ pos 1) (string-length str)))))
    
    (let ((entry context))
      (keyword context start end)
      (walk-modifiers context declaration keyword expression doc line)
      (forward-whites)
      (when (and (forward-expr) (eq? kind 'symbol) (or (not line) (= (get-row~ end) line)))
        (let ((name (parse-identifier (get-marked))))
          (set! entry (declaration context start end name (symbol-documented? name doc)))))
      (when walk-expressions?
        (walk-expressions entry expression))
      entry))
  
  
  (method (walk-attributes context declaration keyword expression doc line walk-expressions?)
    (keyword context start end)
    (when walk-expressions?
      (walk-expressions context expression)))

  
  (method (walk-definition context declaration keyword expression doc line walk-expressions?)
    (let ((entry context))
      (let ((line (get-row~ end)))
        (keyword context start end)
        (walk-modifiers context declaration keyword expression doc line)
        (forward-whites)
        (when (= (get-row~ end) line)
          (let ((list? (eqv? (char-forward 0) #\open-parenthesis)))
            (cond ((not list?)
                   (when (and (forward-expr) (eq? kind 'symbol))
                     (set! entry (declaration context start end (get-marked) (symbol-documented? (find-marked-symbol) doc)))))
                  (else
                   (enter-list)
                   (when (and (forward-expr) (eq? kind 'symbol) (or (not line) (= (get-row~ end) line)))
                     (set! entry (declaration context start end (get-marked) (symbol-documented? (find-marked-symbol) doc))))
                   (walk-parameters entry declaration keyword expression doc line)
                   (exit-list))))
          (when walk-expressions?
            (walk-expressions entry expression 'code #f))))
      entry))
  
  
  (method (walk-specialize context declaration keyword expression doc line walk-expressions?)
    (let ((entry context))
      (let ((line (get-row~ end)))
        (keyword context start end)
        (walk-modifiers context declaration keyword expression doc line)
        (forward-whites)
        (when (= (get-row~ end) line)
          (when (not (eqv? (char-forward 0) #\open-parenthesis))
            (when (and (forward-expr) (eq? kind 'symbol) (eq? (find-marked-symbol) 'as))
              (keyword context start end)
              (forward-expr)
              (declaration context start end (get-marked) (symbol-documented? (find-marked-symbol) doc))
              (forward-whites)))
          (let ((list? (eqv? (char-forward 0) #\open-parenthesis)))
            (cond ((not list?)
                   (when (and (forward-expr) (eq? kind 'symbol))
                     (set! entry (declaration context start end (get-marked) (symbol-documented? (find-marked-symbol) doc)))))
                  (else
                   (enter-list)
                   (when (and (forward-expr) (eq? kind 'symbol) (or (not line) (= (get-row~ end) line)))
                     (set! entry (declaration context start end (get-marked) (symbol-documented? (find-marked-symbol) doc))))
                   (walk-parameters entry declaration keyword expression doc line)
                   (exit-list))))
          (when walk-expressions?
            (walk-expressions entry expression 'code #f))))
      entry))

  
  (method (walk-macro context declaration keyword expression doc line walk-expressions?)
    (let ((entry context))
      (keyword context start end)
      (walk-modifiers context declaration keyword expression doc line)
      (enter-list)
      (when (and (forward-expr) (eq? kind 'symbol) (or (not line) (= (get-row~ end) line)))
        (set! entry (declaration context start end (get-marked) (symbol-documented? (find-marked-symbol) doc))))
      (walk-parameters entry declaration keyword expression doc line)
      (exit-list)
      (when walk-expressions?
        (walk-expressions entry expression))
      entry))
  
  
  (method public (walk-method context declaration keyword expression doc line walk-expressions?)
    (let ((entry context))
      (keyword context start end)
      (walk-modifiers context declaration keyword expression doc line)
      (enter-list)
      (when (and (forward-expr) (eq? kind 'symbol) (or (not line) (= (get-row~ end) line)))
        (set! entry (declaration context start end (get-marked) (symbol-documented? (find-marked-symbol) doc))))
      (walk-parameters entry declaration keyword expression doc line)
      (exit-list)
      (when walk-expressions?
        (walk-expressions entry expression 'code #f))
      entry))
  
  
  (method (walk-slot context declaration keyword expression doc line walk-expressions?)
    (let ((entry context))
      (keyword context start end)
      (walk-modifiers context declaration keyword expression doc line)
      (when (and (forward-expr) (eq? kind 'symbol))
        (set! entry (declaration context start end (get-marked) (symbol-documented? (find-marked-symbol) doc)))
        (while (forward-expr)
          (if (and (eq? kind 'symbol) (memq? (find-marked-symbol) '(initialize getter setter accessors)))
              (keyword entry start end)
            (walk-expression entry expression 'code #f))))
      (when walk-expressions?
        (walk-expressions entry expression))
      entry))
  
  
  (method (walk-property context declaration keyword expression doc line walk-expressions?)
    (let ((entry context))
      (keyword context start end)
      (walk-modifiers context declaration keyword expression doc line)
      (when (and (forward-expr) (eq? kind 'symbol))
        (set! entry (declaration context start end (get-marked) (symbol-documented? (find-marked-symbol) doc)))
        (while (forward-expr)
          (if (and (eq? kind 'symbol) (memq? (find-marked-symbol) '(initialize getter setter accessors)))
              (keyword entry start end)
            (walk-expression entry expression 'code #f))))
      (when walk-expressions?
        (walk-expressions entry expression))
      entry))
  
  
  (method (walk-form context declaration keyword expression doc line walk-expressions?)
    (keyword context start end)
    (when walk-expressions?
      (walk-expressions context expression)))
        
  
  (method (walk-global context declaration keyword expression doc line walk-expressions?)
    (let ((entry context))
      (keyword context start end)
      (walk-modifiers context declaration keyword expression doc line)
      (when (and (forward-expr) (eq? kind 'symbol))
        (set! entry (declaration context start end (get-marked) (symbol-documented? (find-marked-symbol) doc))))
      entry))

  
  (method (walk-c-include context declaration keyword expression doc line walk-expressions?)
    (keyword context start end)
    (when walk-expressions?
      (walk-expressions context expression)))
  
  
  (method (walk-constant context declaration keyword expression doc line walk-expressions?)
    (let ((entry context))
      (keyword context start end)
      (walk-modifiers context declaration keyword expression doc line)
      (when (and (forward-expr) (eq? kind 'symbol))
        (set! entry (declaration context start end (get-marked) (symbol-documented? (find-marked-symbol) doc))))
      (when walk-expressions?
        (walk-expressions entry expression))
      entry))
  
  
  (method (walk-enumeration context declaration keyword expression doc line walk-expressions?)
    (let ((entry context))
      (keyword context start end)
      (walk-modifiers context declaration keyword expression doc line)
      (when (and (forward-expr) (eq? kind 'symbol))
        (set! entry (declaration context start end (get-marked) (symbol-documented? (find-marked-symbol) doc))))
      (when walk-expressions?
        (walk-expressions entry expression))
      entry))
  
  
  (method (walk-type context declaration keyword expression doc line walk-expressions?)
    (let ((entry context))
      (keyword context start end)
      (walk-modifiers context declaration keyword expression doc line)
      (when (and (forward-expr) (eq? kind 'symbol))
        (set! entry (declaration context start end (get-marked) (symbol-documented? (find-marked-symbol) doc))))
      (when walk-expressions?
        (walk-expressions entry expression))
      entry))
  
  
  (method (walk-structure context declaration keyword expression doc line walk-expressions?)
    (let ((entry context))
      (keyword context start end)
      (walk-modifiers context declaration keyword expression doc line)
      (when (and (forward-expr) (eq? kind 'symbol))
        (set! entry (declaration context start end (get-marked) (symbol-documented? (find-marked-symbol) doc))))
      (when walk-expressions?
        (walk-expressions entry expression))
      entry))
  
  
  (method (walk-c-structure context declaration keyword expression doc line walk-expressions?)
    (let ((entry context))
      (let ((line (get-row~ end)))
        (keyword context start end)
        (walk-modifiers context declaration keyword expression doc line)
        (forward-whites)
        (when (= (get-row~ end) line)
          (let ((list? (eqv? (char-forward 0) #\open-parenthesis)))
            (when list?
              (enter-list))
            (when (and (forward-expr) (eq? kind 'symbol))
              (set! entry (declaration context start end (get-marked) (symbol-documented? (find-marked-symbol) doc))))
            (when list?
              (exit-list)))))
      (when walk-expressions?
        (walk-expressions entry expression))
      entry))

  
  (method (walk-c-definition context declaration keyword expression doc line walk-expressions?)
    (let ((entry context))
      (let ((line (get-row~ end)))
        (keyword context start end)
        (walk-modifiers context declaration keyword expression doc line)
        (forward-whites)
        (when (= (get-row~ end) line)
          (let ((list? (eqv? (char-forward 0) #\open-parenthesis)))
            (when list?
              (enter-list))
            (when (and (forward-expr) (eq? kind 'symbol))
              (set! entry (declaration context start end (get-marked) (symbol-documented? (find-marked-symbol) doc))))
            (when list?
              (exit-list)))))
      (when walk-expressions?
        (walk-expressions entry expression))
      entry))
  
  
  (method (walk-generic context declaration keyword expression doc line walk-expressions?)
    (let ((entry context))
      (keyword context start end)
      (walk-modifiers context declaration keyword expression doc line)
      (forward-whites)
      (if (not (eqv? (char-forward 0) #\open-parenthesis))
          (when (and (forward-expr) (eq? kind 'symbol))
            (set! entry (declaration context start end (get-marked) (symbol-documented? (find-marked-symbol) doc))))
        (enter-list)
        (when (and (forward-expr) (eq? kind 'symbol) (or (not line) (= (get-row~ end) line)))
          (set! entry (declaration context start end (get-marked) (symbol-documented? (find-marked-symbol) doc))))
        (walk-parameters entry declaration keyword expression doc line)
        (exit-list))
      (when walk-expressions?
        (walk-expressions entry expression))
      entry))
  
  
  (method (walk-specific context declaration keyword expression doc line walk-expressions?)
    (let ((entry context))
      (keyword context start end)
      (walk-modifiers context declaration keyword expression doc line)
      (enter-list)
      (when (and (forward-expr) (eq? kind 'symbol) (or (not line) (= (get-row~ end) line)))
        (declaration context start end (get-marked) (symbol-documented? (find-marked-symbol) doc)))
      (walk-parameters entry declaration keyword expression doc line)
      (exit-list)
      (when walk-expressions?
        (walk-expressions entry expression))
      entry))

  
  (method (walk-intrinsic context declaration keyword expression doc line walk-expressions?)
    (let ((entry context))
      (keyword context start end)
      (walk-modifiers context declaration keyword expression doc line)
      (when (and (forward-expr) (forward-expr))
        (let ((entered? (enter-list)))
          (when (and (forward-expr) (eq? kind 'symbol))
            (declaration context start end (get-marked) (symbol-documented? (find-marked-symbol) doc)))
          (when entered?
            (walk-parameters entry declaration keyword expression doc line))
          (when entered?
            (exit-list))))
      (when walk-expressions?
        (walk-expressions entry expression))
      entry))

  
  (method (walk-external context declaration keyword expression doc line walk-expressions?)
    (let ((entry context))
      (keyword context start end)
      (walk-modifiers context declaration keyword expression doc line)
      (when (forward-expr)
        (let ((entered? (enter-list)))
          (when (and (forward-expr) (eq? kind 'symbol))
            (declaration context start end (get-marked) (symbol-documented? (find-marked-symbol) doc)))
          (when entered?
            (walk-parameters entry declaration keyword expression doc line))
          (when entered?
            (exit-list))))
      (when walk-expressions?
        (walk-expressions entry expression))
      entry))

  
  (method (walk-coexternal context declaration keyword expression doc line walk-expressions?)
    (let ((entry context))
      (keyword context start end)
      (walk-modifiers context declaration keyword expression doc line)
      (when (and (forward-expr) (forward-expr)) ; skip vtable offset
        (let ((entered? (enter-list)))
          (when (and (forward-expr) (eq? kind 'symbol))
            (declaration context start end (get-marked) (symbol-documented? (find-marked-symbol) doc)))
          (when entered?
            (walk-parameters entry declaration keyword expression doc line))
          (when entered?
            (exit-list))))
      (when walk-expressions?
        (walk-expressions entry expression))
      entry))
  
  
  (method (walk-javaexternal context declaration keyword expression doc line walk-expressions?)
    (let ((entry context))
      (keyword context start end)
      (walk-modifiers context declaration keyword expression doc line)
      (when (forward-expr)
        (let ((entered? (enter-list)))
          (when (and (forward-expr) (eq? kind 'symbol))
            (declaration context start end (get-marked) (symbol-documented? (find-marked-symbol) doc)))
          (when entered?
            (walk-parameters entry declaration keyword expression doc line))
          (when entered?
            (exit-list))))
      (when walk-expressions?
        (walk-expressions entry expression))
      entry))
  
  
  (method (walk-javamethod context declaration keyword expression doc line walk-expressions?)
    (let ((entry context))
      (keyword context start end)
      (walk-modifiers context declaration keyword expression doc line)
      (when (forward-expr)
        (let ((entered? (enter-list)))
          (when (and (forward-expr) (eq? kind 'symbol))
            (declaration context start end (get-marked) (symbol-documented? (find-marked-symbol) doc)))
          (when entered?
            (walk-parameters entry declaration keyword expression doc line))
          (when entered?
            (exit-list))))
      (when walk-expressions?
        (walk-expressions entry expression))
      entry))
  
  
  (method (walk-datacontainer context declaration keyword expression doc line walk-expressions?)
    (let ((entry context))
      (keyword context start end)
      (when (forward-expr)
        (declaration context start end (get-marked) (symbol-documented? (find-marked-symbol) doc)))
      (when walk-expressions?
        (walk-expressions entry expression))
      entry))
  
  
  (method (walk-unknown context declaration keyword expression doc line walk-expressions?)
    (when walk-expressions?
      (walk-expression context expression 'code #t)
      (walk-expressions context expression)))
  
  
  (method (symbol-documentation symbol doc)
    (when (and symbol doc)
      (get-definition~ doc symbol)))
  
  
  (method (symbol-documented? symbol doc)
    (symbol-documentation symbol doc))
  
  
  ;;;
  ;;;; Debugging
  ;;;
  
  
  (method public (highlight-range)
    (set-selection~ text (get-range))
    (update-view~ text)
    @convert
    (break edit?: #f))))
