;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; JML Viewer
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.language.jml.viewer.JML-Viewer jazz


(import (jazz.jml)
        (jazz.ui)
        (jazz.literals)
        (jazz.library)
        (jazz.utilities))


(class JML-Viewer extends Layout-View


  (property document initialize {} getter get-document setter set-document)


  (form
    (<install>                                                  title: "JML Viewer" layout-type: border
      (<Layout-View>                         name: toolbar      size: {Dimension 300 33} location: north layout-type: flow layout-insets: {Rect 0 6 0 0})
      (<Splitter-View>                                          location: center state: split orientation: horz mode: relative division: 30
        (<Border-View>                       name: jml-border   location: first border-type: edge style: entry
          (<Scroller-View>                                      style: document vscroll?: #t
            (<!>                             name: content      layout-type: fill
              (<Tree-Header>                                    style: document
                (<!>                         name: content
                  (<Tree-View>               name: jml-tree     portfolio: :icons selection-handler: {Event-Handler :form on-selection-change}
                    (<Tree-Node-Column>                         title: "Nodes" width: 219)))))))
        (<Splitter-View>                                        location: second state: split orientation: vert mode: relative division: 70
          (<Border-View>                     name: text-border  location: first border-type: edge style: entry
            (<Scroller-View>                                    style: document vscroll?: #t
              (<!>                           name: content      layout-type: fill
                (<JML-Text-View>             name: text         default-style: {Text-Style name: Default font: {Font name: Heading5}}))))
          (<Border-View>                     name: notes-border location: second border-type: edge style: entry
            (<Scroller-View>                                    style: document vscroll?: #t
              (<!>                           name: content      layout-type: fill
                (<Plain-Formatted-Text-View> name: notes        default-style: {Text-Style name: Default font: {Font name: Heading5}}))))))))


  (method (finish initargs)
    (nextmethod initargs)
    (refresh))
  
  
  ;;;
  ;;;; Host
  ;;;
  

  (method meta (host-icon)
    {Bitmap-Resource "JEMMapping"})
  
  
  (method meta (host-title)
    "JML Viewer")
  
  
  (method meta (host-position)
    {Point 50 50})
  
  
  (method meta (host-size)
    {Point 800 500})
  

  (method (host-workspaces)
    '(home))
  
  
  ;;;
  ;;;; Access
  ;;;


  (method public (get-document)
    document)


  (method public (set-document value)
    (set! document value)
    (refresh))
  
  
  ;;;
  ;;;; Events
  ;;;


  (method (resize dh dv)
    (nextmethod dh dv)
    (size-figure~ (locate 'jml-border) 0 dv)
    (size-figure~ (locate 'text-border) dh 0)
    (size-figure~ (locate 'notes-border) dh dv))
  
  
  (method public (refresh)
    (clear-node)
    (view-tree document)
    (view-text document))
  
  
  (method (clear-node)
    (let ((text (locate 'text))
          (notes (locate 'notes)))
      (clear-all~ text)
      (clear-all~ notes)))
  
  
  ;;;
  ;;;; Update
  ;;;


  (method (view-tree document)
    (let ((tree (locate 'jml-tree)))
      (with-update-locked~ tree
        (function ()
          (remove-every-row~ tree)
          (when (and document (hasChildNodes~ document))
            (with-closed ((lst (get-childNodes~ document))
                          (child-nodes (collect-children lst)))
              (for-each (function (node)
                          (insert-node node {}))
                        child-nodes)))))))


  (method (insert-node node father)
    (let* ((tree (locate 'jml-tree))
           (title (get-nodeName~ node))
           (subfather (add-row~ tree father: father children: (list (new Tree-Node title: title image: {Bitmap-Resource "OpenedFolder"})))))
      (when (hasChildNodes~ node)
        (with-closed ((lst (get-childNodes~ node))
                      (child-nodes (collect-children lst)))
          (for-each (function (subnode)
                      (insert-node subnode subfather))
                    child-nodes)))))
  
  
  (method (collect-children lst)
    (loop (for n from 0 below (get-length~ lst))
          (collect (get-item~ lst n))))
  
  
  (method (view-text document)
    (let ((text (locate 'text)))
      (if (null? document)
          (clear-all~ text)
        (set-string-content~ text (get-jml~ document)))))


  (method (describe-node node)
    (let ((notes (locate 'notes)))
      (insert-bulleted-line~ notes (get-nodeName~ node))
      (insert-bulleted-line~ notes (get-nodeValue~ node))
      (insert-bulleted-line~ notes (get-nodeType~ node))))
  
  
  ;;;
  ;;;; Selection
  ;;;


  (method (on-selection-change evt)
    (let ((sender (get-sender~ evt)))
      (case (get-name~ sender)
        ((jml-tree)
          (let ((selection (get-single-selection~ sender)))
            (when selection
              (let ((node (get-user-data~ (get-row~ sender selection))))
                (when node
                  (describe-node node)))))))))))
