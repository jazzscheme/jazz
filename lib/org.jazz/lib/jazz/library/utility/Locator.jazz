;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Locator
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2007
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.library.utility.Locator jazz


(import (jazz.library)
        (jazz.utilities)
        (jazz.platform)
        (time))


(class Locator extends Object
  
  
  (slot prefix     initialize {})
  (slot reset-time initialize {})
  (slot max-delay)
  
  
  (method (initialize (max-delay: max-delay 0.5))
    (nextmethod)
    (set! max-delay~self max-delay))
  
  
  ;;;
  ;;;; Access
  ;;;
  
  
  (method public (get-prefix)
    prefix)
  
  
  ;;;
  ;;;; Setup
  ;;;
  
  
  (method public (setup string)
    (set! prefix string)
    (set! reset-time (+ (time->seconds (current-time)) max-delay)))
  
  
  ;;;
  ;;;; Enter
  ;;;
  
  
  (method public (enter key)
    (let ((string (string key)))
      (validate string)
      (let ((target (if (not prefix) string (concatenate prefix string))))
        (locate target))))
  
  
  (method (validate string)
    (when (and prefix (or (> (time->seconds (current-time)) reset-time)
                          (ci=? string prefix)))
          (reset)))
  
  
  (method public (locate target)
    (let ((len (cardinality target)))
      (call/ec
        (function (return)
          (iterate
            (function (title rank)
              (let ((prefix (essay title (>= (cardinality title) len) (subseq title 0 len))))
                (when (and prefix (ci=? prefix target))
                  (select rank)
                  (setup prefix)
                  (return)))))))))
  
  
  ;;;
  ;;;; Interface
  ;;;
  
  
  (method public virtual (iterate proc)
    )
  
  
  (method public virtual (select rank)
    )
  
  
  ;;;
  ;;;; Reset
  ;;;
  
  
  (method public (reset)
    (set! prefix {})
    (set! reset-time {}))))
