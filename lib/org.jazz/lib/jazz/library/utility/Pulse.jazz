;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Pulses
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2007
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.library.utility.Pulse jazz


(import (jazz.library)
        (jazz.utilities))


(class Pulse extends Object
  
  
  (property period  initialize {} accessors generate)
  (property repeat  initialize {} accessors generate)
  (property execute initialize {} accessors generate)
  
  
  (slot state initialize 'stopped)
  (slot mutex initialize (make-mutex))
  
  
  (method (initialize period execute . rest)
    (bind-keywords ((repeat 'always) (start? #t)) rest
      (nextmethod)
      (set! period~self period)
      (set! repeat~self repeat)
      (set! execute~self execute)
      (start-loop start?)))
  
  
  (method (destroy)
    (stop-loop)
    (nextmethod))
  
  
  ;;;
  ;;;; State
  ;;;
  
  
  ;; stopped idle starting pulsing stopping
  
  
  (method (get-state)
    (mutex-lock! mutex)
    (prog1 state
      (mutex-unlock! mutex)))
  
  
  (method (set-state value)
    (mutex-lock! mutex)
    (set! state value)
    (mutex-unlock! mutex))
  
  
  ;;;
  ;;;; Loop
  ;;;
  
  
  (method (start-loop start?)
    (thread-start!
      (make-thread
        (function ()
          (set-state (if start? 'pulsing 'idle))
          (let (loop)
            (sleep period)
            ;; if the start occured during the sleep we do not pulse
            ;; immediatly as we may not have waited the full period...
            (case state
              ((starting)
               (set-state 'pulsing))
              ((pulsing)
               (execute)))
            (when (and (neq? (get-state) 'stopping) (eq? repeat 'always))
              (loop)))
          (set-state 'stopped)))))
  
  
  (method (stop-loop)
    (set-state 'stopping))
  
  
  ;;;
  ;;;; Start/Stop
  ;;;
  
  
  (method public (start)
    (set-state 'starting))
  
  
  (method public (stop)
    (set-state 'idle))))
