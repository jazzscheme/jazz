;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Licenses
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Stephane Le Cornec.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.license.License-Creator jazz


(import (jazz.license)
        (jazz.library)
        (jazz.utilities))


;; Elements of list returned by (hashcode license)
;; 1-2  license expires : days since 2001
;; 3-4  key expires : days since 2001
;; 5    bitfield : demo=1
;; 6-7  reserved
;; 8    checksum : xor all = 0
;; 9-20 first 12 elements of md5 of owner
;; total = 32-char string (base32)


(class License-Creator extends License
  
  
  (constant Demo-Flag #x01)
  
  
  (slot flags initialize Demo-Flag)


  (property license-expires initialize {}  getter get-license-expires setter set-license-expires)
  (property key-expires     initialize {}  getter get-key-expires     setter set-key-expires)
  (property demo?    <void>                getter get-demo?           setter set-demo?)


  (method public (get-license-expires)
    license-expires)


  (method public (set-license-expires value)
    (set! license-expires value))


  (method public (get-key-expires)
    key-expires)


  (method public (set-key-expires value)
    (set! key-expires value))
  
  
  (method public (get-demo?)
    (mask-bit-set? flags Demo-Flag))
  
  
  (method public (set-demo? flag)
    (set! flags (mask-bit-set flags Demo-Flag flag)))
  
  
  
  ;;;
  ;;;; Transform
  ;;;
  
  
  @convert-meta
  (method meta (unroll20)
    (map (function (n)
           (get-rank n Roll20))
         (naturals 0 (length Roll20))))
  
  
  @convert-meta
  (method meta (unhashcode list)
    (let ((hash (decode32 Hash8)))
      (map (function (offset n)
             (bitwise-xor (element list offset)
                          (element hash (modulo n 5))))
           Roll20
           (naturals 0 (length list)))))))
