;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Literals
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.literals jazz


(import (jazz.access)
        (jazz.catalog)
        (jazz.io)
        (jazz.language.c)
        (jazz.language.lisp)
        (jazz.library)
        (jazz.network)
        (jazz.schema)
        (jazz.ui)
        (time))


;;;
;;;; Point
;;;


(register-literal-constructor 'Point
  (function (h v)
    (new Point h v)))


;;;
;;;; Dimension
;;;


(register-literal-constructor 'Dimension
  (function (width height)
    (new Dimension width height)))


;;;
;;;; Cell
;;;


(register-literal-constructor 'Cell
  (function (row col)
    (new Cell row col)))


;;;
;;;; Rect
;;;


(register-literal-constructor 'Rect
   (function (left top right bottom)
     (new Rect left top right bottom)))


;;;
;;;; Range
;;;


(register-literal-constructor 'Range
   (function (start end)
     (new Range start end)))


;;;
;;;; Action
;;;


(register-literal-constructor 'Action
  (function (action-context action-name . properties)
    (new Action action-context action-name properties)))


;;;
;;;; Box
;;;


(register-literal-constructor 'Box
  (function rest
    (if (null? rest)
        (new Box)
      (new Box (car rest)))))


;;;
;;;; Shortcut
;;;


(register-literal-constructor 'Shortcut
  (function rest
    (new Shortcut (butlast rest) (last rest))))


;;;
;;;; Locales
;;;


(register-literal-constructor 'Locales
  (function rest
    (apply new Locales rest)))


;;;
;;;; Color
;;;


(definition Colors
  (make-table test: eq?))


(definition (register-color name color)
  (table-set! Colors name color))


(definition (registered-color name (alpha {}))
  (let ((color (either (table-ref Colors name #f)
                       (error "Unknown color: {s}" name))))
    (if alpha
        (let ((color (copy (registered-color name))))
          (set-alpha~ color alpha)
          color)
      color)))


(register-literal-constructor 'Color
  (function rest
    (bind-keywords ((name {}) . others) rest
      (if name
          (registered-color name (getf others alpha:))
        (apply new Color rest)))))


;;;
;;;; Font
;;;


(definition Fonts
  (make-table test: eq?))


(definition (register-font name font)
  (table-set! Fonts name font))


(definition (registered-font name)
  (either (table-ref Fonts name #f)
          (error "Unknown font: {s}" name)))


(register-literal-constructor 'Font
  (function rest
    (bind-keywords ((name {}) . others) rest
      (if name
          (registered-font name)
        (apply new Font rest)))))


;;;
;;;; Pen
;;;


(definition Pens
  (make-table test: eq?))


(definition (register-pen name pen)
  (table-set! Pens name pen))


(definition (registered-pen name)
  (either (table-ref Pens name #f)
          (error "Unknown pen: {s}" name)))


(register-literal-constructor 'Pen
  (function ((name: name {}))
    (registered-pen name)))


;;;
;;;; File
;;;


(register-literal-constructor 'File
  (function rest
    (new File rest)))


;;;
;;;; Directory
;;;


(register-literal-constructor 'Directory
  (function rest
    (new Directory rest)))


;;;
;;;; Directory-Group
;;;


(register-literal-constructor 'Directory-Group
  (function rest
    (new Directory-Group rest)))


;;;
;;;; Host
;;;


(register-literal-constructor 'Host
  (function rest
    (apply new Host rest)))


;;;
;;;; Datatype
;;;


(register-literal-constructor 'Datatype
  (function rest
    (new Datatype)))


;;;
;;;; Systype
;;;


(register-literal-constructor 'Systype
  (function (name size precision scale default-value)
    (new Systype name size precision scale default-value)))


;;;
;;;; IOR
;;;


(register-literal-constructor 'IOR
  (function (host port remotable reference)
    (new IOR host port remotable reference)))


;;;
;;;; GUID
;;;


;; convert
@wait
(register-literal-constructor 'GUID
  (function rest
    (new GUID)))


;;;
;;;; Format
;;;


(register-literal-constructor 'Format
  (function rest
    (apply new Format rest)))


;;;
;;;; Text-Style
;;;


(register-literal-constructor 'Text-Style
  (function rest
    (apply new Text-Style rest)))


;;;
;;;; Hyperlink-Style
;;;


(register-literal-constructor 'Hyperlink-Style
  (function rest
    (apply new Hyperlink-Style rest)))


;;;
;;;; Bitmap-Resource
;;;


(register-literal-constructor 'Bitmap-Resource
  (function (name)
    (new Bitmap-Resource name)))


;;;
;;;; Icon-Resource
;;;


(register-literal-constructor 'Icon-Resource
  (function (name)
    (new Icon-Resource name)))


;;;
;;;; Cursor-Resource
;;;


(register-literal-constructor 'Cursor-Resource
  (function (name)
    (new Cursor-Resource name)))


;;;
;;;; Event
;;;


(register-literal-constructor 'Event
  (function (kind . properties)
    (new Event kind {} properties)))


;;;
;;;; Event-Handler
;;;


(register-literal-constructor 'Event-Handler
  (function (target-name method-name . properties)
    (new Event-Handler target-name: target-name method-name: method-name properties: properties)))


;;;
;;;; Selection-Handler
;;;


(register-literal-constructor 'Selection-Handler
  (function (target-name method-name force? . properties)
    (new Selection-Handler target-name: target-name method-name: method-name force?: force? properties: properties)))


;;;
;;;; Version
;;;


(register-literal-constructor 'Version
  (function (major minor . rest)
    (receive (stage release revision) (parse-stage rest)
      (new Version major minor stage release revision))))


(definition (parse-stage rest)
  (let ((next
          (function ()
            (if (null? rest)
                0
              (prog1 (car rest)
                (set! rest (cdr rest)))))))
    (if (or (null? rest) (integer? (car rest)))
        (values {} (next) (next))
      (values (next) (next) (next)))))


;;;
;;;; C-File-Entry
;;;


(register-literal-constructor 'C-File-Entry
  (function (file time . definitions)
    (new C-File-Entry {} file (seconds->time time) definitions)))


;;;
;;;; C-Category-Entry
;;;


(register-literal-constructor 'C-Category-Entry
  (function (name)
    (new C-Category-Entry name)))


;;;
;;;; C-Define-Entry
;;;


(register-literal-constructor 'C-Define-Entry
  (function (name line column)
    (new C-Define-Entry name line column)))


;;;
;;;; C-Include-Entry
;;;


(register-literal-constructor 'C-Include-Entry
  (function (name line column)
    (new C-Include-Entry name line column)))


;;;
;;;; C-Export-Entry
;;;


(register-literal-constructor 'C-Export-Entry
  (function (name line column)
    (new C-Export-Entry name line column)))


;;;
;;;; Lisp-File-Entry
;;;


(register-literal-constructor 'Lisp-File-Entry
  (function (file time . definitions)
    (new Lisp-File-Entry {} file (seconds->time time) definitions)))


;;;
;;;; Lisp-Entry
;;;


(register-literal-constructor 'Lisp-Entry
  (function (name signature line column references . definitions)
    (new Lisp-Entry name signature line column definitions references))))
