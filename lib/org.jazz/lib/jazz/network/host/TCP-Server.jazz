;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; TCP/IP Server
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2007
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.network.host.TCP-Server jazz


(import (jazz.library)
        (jazz.network)
        (jazz.utilities))


(class TCP-Server extends Object
  
  
  (slot host)
  (slot service)
  (slot started-condition)
  (slot state initialize 'stopped)
  
  
  (method (initialize . rest)
    (bind-keywords ((host {}) (service {})) rest
      (nextmethod)
      (set! host~self host)
      (set! service~self service)
      (set! started-condition~self (make-condition))))

  
  ;;;
  ;;;; Access
  ;;;
  
  
  (method public (get-host)
    host)
  
  
  (method public (get-service)
    service)
  
  
  (method public (get-state)
    state)
  
  
  (method (set-state value)
    (set! state value))
  
  
  ;;;
  ;;;; Run
  ;;;
  
  
  (slot TOTO)
    
  
  (method (run)
    (set-state 'starting)
    (set! TOTO
    (thread-start!
      (make-thread
        (lambda ()
          (startlistener))))))
  
  
  (method (wait-started (error?: error? #f))
    ;; braindead quicky
    (thread-sleep! 0.25))
  
  
  (method (wait-stopped (error?: error? #f))
    ;; braindead quicky
    (thread-sleep! 0.25))
  
  
  ;;;
  ;;;; Server
  ;;;
  
  
  (definition Server-Timeout
    0.25)
  
  
  (method protected virtual (server-name)
    "TCP Server")
  
  
  (method protected virtual (server-host)
    (get-host))
  
  
  (method protected virtual (server-service)
    (get-service))
  
  
  (method (startlistener)
    (let ((address (resolve-host (server-host)))
          (number (resolve-service (server-service))))
      (pp (list 'open-tcp-server number))
      (let ((server-port (open-tcp-server (list @w-server-address: address port-number: number eol-encoding: 'cr-lf))))
        (pp 'listening)
        (unwind-protect
            (begin
              (set-state 'started)
              ;;(condition-broadcast! started-condition)
              ;;(input-port-timeout-set! server-port Server-Timeout)
              (let (loop)
                (when (neq? state 'stopping)
                  (debug 'read)
                  (let ((port (read server-port)))
                    (debug 'read-returned)
                    (unless (eof-object? port)
                      (thread-start!
                        (make-thread
                          (lambda ()
                            (acceptconnection port)))))
                    (loop)))))
          (close-port server-port)
          (set-state 'stopped)))))
  
  
  (method public virtual (stop-listener)
    (set-state 'stopping))

  
  ;;;
  ;;;; TESTING THE BUG
  ;;;
  
  
  (method (acceptconnection port)
    (debug 'connection)
    (input-port-timeout-set! port 0.1)
    (let loop ()
         (let ((c (read-char port)))
           (if (not (eof-object? c))
               (loop))))
    (unwind-protect
        (generateresponse port)
      (debug 'sent)
      (close-port port)))
  
  
  (method (generateresponse port)
    (display "HTTP/1.1 200 OK\n" port)
    (display "Connection: close\n" port)
    (display "Content-Type: text/html\n\n" port)
    (display "<html>\n<body>\n" port)
    (display "<input type=checkbox> hello <br>\n" port)
    (display "<input type=checkbox> les <br>\n" port)
    (let loop ((n 1))
         (if (< n 1000)
             (begin
               (display "<input type=hidden>\n" port)
               (loop (+ n 1)))))
    (display "<input type=checkbox> copains <br>\n" port)
    (display "</body>\n</html>\n" port))
  
  
  ;;;
  ;;;; Connection
  ;;;
  
  
  (method protected virtual (accept-connection port)
    )))
