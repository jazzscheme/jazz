;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Web-Servers Manager
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2007
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.network.http.Web-Servers-Manager jazz


(import (jazz.jml)
        (jazz.io)
        (jazz.library)
        (jazz.library.component)
        (jazz.network)
        (jazz.platform)
        (jazz.ui)
        (jazz.literals)
        (jazz.utilities))


(class Web-Servers-Manager extends Layout-View
  
  
  (slot configurations initialize '())
  (slot servers        initialize (make-table test: eq?))


  (form
    (<install>                                            layout-type: border
      (<Layout-View>                 name: tools          size: {Dimension 300 33} location: north layout-type: flow layout-insets: {Rect 0 6 0 0}
        (<Push-Tool>                 name: edit           size: {Dimension 22 22} enabled?: #f tooltip?: #t tooltip-text: "Edit" image-name: {Bitmap-Resource "Edit"} portfolio: :icons action-handler: {Event-Handler :form on-edit-server})
        (<Separator>                 name: edit-separator)
        (<Push-Tool>                 name: start          size: {Dimension 22 22} enabled?: #f tooltip?: #t tooltip-text: "Start" image-name: {Bitmap-Resource "Run"} portfolio: :icons action-handler: {Event-Handler :form on-start-server})
        (<Push-Tool>                 name: stop           size: {Dimension 22 22} enabled?: #f tooltip?: #t tooltip-text: "Stop" image-name: {Bitmap-Resource "Stop"} portfolio: :icons action-handler: {Event-Handler :form on-stop-server})
        (<Push-Tool>                 name: restart        size: {Dimension 22 22} enabled?: #f tooltip?: #t tooltip-text: "Restart" image-name: {Bitmap-Resource "Continue"} portfolio: :icons action-handler: {Event-Handler :form on-restart-server})
        (<Separator>)
        (<Toggle-Tool>               name: debug          size: {Dimension 22 22} enabled?: #f tooltip?: #t tooltip-text: "Debug" image-name: {Bitmap-Resource "Debugger"} portfolio: :icons action-handler: {Event-Handler :form on-debug-server})
        (<Separator>)
        (<Push-Tool>                 name: refresh        size: {Dimension 22 22} enabled?: #t tooltip?: #t tooltip-text: "Refresh" image-name: {Bitmap-Resource "Refresh"} portfolio: :icons action-handler: {Event-Handler :form on-refresh}))
      (<Scroller-View>               name: scroller       location: center vscroll?: #t hscroll?: #t flat?: #t
        (<!>                         name: content        layout-type: fill
          (<Tree-Header>             name: header         shown?: #t flat?: #t
            (<!>                     name: content
              (<Tree-View>           name: servers        filled-column: description portfolio: :icons selection-mode: row multiple-selection?: #f selection-handler: {Event-Handler :form on-selection-change} double-click-handler: {Event-Handler :form on-double-click} context-menu-handler: {Event-Handler :form on-context-menu}
                (<Tree-Node-Column>  name: name           title: "Name" width: 200 toplevel-controls?: #f)
                (<Tree-Label-Column> name: state          title: "State" width: 150)
                (<Tree-Label-Column> name: host           title: "Host" width: 100)
                (<Tree-Label-Column> name: port           title: "Port" width: 75)
                (<Tree-Label-Column> name: description    title: "Description" width: 250)
                (<Tree-Label-Column> name: hits           title: "Hits" width: 100)
                (<Tree-Label-Column> name: debugged       title: "Debugged" width: 100))))))))
  
  
  @convert-external
  (method meta (external-name . rest)
    'web-servers-manager)

  
  ;;;
  ;;;; Host
  ;;;
  
  
  (method meta (host-icon)
    {Bitmap-Resource "Servers"})
  
  
  (method meta (host-title)
    "Servers")
  
  
  ;;;
  ;;;; Docked
  ;;;
  
  
  (method (get-tools-view)
    (locate 'tools))
  
  
  (method (focus-default)
    (let ((tree (get-tree)))
      (acquire-focus~ tree)))
  
  
  ;;;
  ;;;; Component
  ;;;

  
  (method (install rest)
    (nextmethod rest)
    (setup-configurations)
    (update-servers))

  
  ;;;
  ;;;; Access
  ;;;
  
  
  (method (get-tree)
    (locate 'servers))

  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method (on-edit-server evt)
    (edit-server (selected-configuration)))
  
  
  (method (on-start-server evt)
    (start-server (selected-configuration))
    (update-tools)
    (update-states))
  
  
  (method (on-stop-server evt)
    (stop-server (selected-configuration))
    (update-tools)
    (update-states))
  
  
  (method (on-restart-server evt)
    (restart-server (selected-configuration))
    (update-tools)
    (update-states))
  
  
  (method (on-debug-server evt)
    (debug-server (selected-configuration))
    (update-tools)
    (update-states))
  
  
  (method (on-selection-change evt)
    (let ((sender (get-sender~ evt)))
      (case (get-name~ sender)
        ((servers)
         (update-tools)))))
  
  
  (method (on-refresh evt)
    (update-servers))
  
  
  (method (update-tools)
    (let* ((tool (locate 'debug))
           (config (selected-configuration))
           (server (essay config (find-server (get-name~ config)))))
      (set-enabled?~ (locate 'edit) config)
      (set-enabled?~ (locate 'start) (and config (or (not server) (eq? (get-server-state~ server) 'stopped))))
      (set-enabled?~ (locate 'stop) (and server (eq? (get-server-state~ server) 'started)))
      (set-enabled?~ (locate 'restart) (and server (eq? (get-server-state~ server) 'started)))
      (set-enabled?~ (locate 'debug) server)
      (set-selected?~ tool (and config (get-debug?~ config)))))
  
  
  (method (on-double-click evt)
    (start/stop-server (selected-configuration))
    (update-tools)
    (update-states))
  
  
  (method (on-context-menu evt)
    (let* ((sender (get-sender~ evt))
           (pos (get-position~ evt))
           (acquired (acquire sender pos)))
      (with-context-click~ sender pos
        (function ()
          (let ((config (selected-configuration)))
            (when config
              (let ((menu (new-servers-menu config)))
                (track-popup-menu menu acquired))))))))
  
  
  (method (new-servers-menu config)
    (let* ((menu (new Server-Menu))
           (name (get-name~ config))
           (server (find-server name))
           (appl (get-application)))
      (set-visible?~ (locate~ menu 'start) (or (not server) (eq? (get-server-state~ server) 'stopped)))
      (set-visible?~ (locate~ menu 'stop) (and server (eq? (get-server-state~ server) 'started)))
      (set-visible?~ (locate~ menu 'restart) (and server (eq? (get-server-state~ server) 'started)))
      (set-visible?~ (locate~ menu 'debug) server)
      (cleanup-separators~ menu)
      (layout-menu~ menu)
      menu))

  
  ;;;
  ;;;; Setup
  ;;;
  
  
  (definition WebServers-File
    {File Profile "settings" "WebServers.jml"})
  
  
  (method (setup-configurations)
    (set! configurations (read-configurations)))
  
  
  (method (read-configurations)
    (let ((file WebServers-File))
      (when (and (find-alias 'Profile) (exists?~ file))
        (instantiate~ (read-from-file file)))))

  
  ;;;
  ;;;; Update
  ;;;
  
  
  (method (update-servers)
    (let ((tree (get-tree)))
      (with-update-locked~ tree
        (function ()
          (remove-every-row~ tree)
          (when configurations
            (for-each (function (config)
                        (let* ((name (get-name~ config))
                               (server (find-server name))
                               (state (if (not server) 'stopped (get-server-state~ server)))
                               (host (get-host~ config))
                               (port (get-port~ config))
                               (image (case state ((stopped) {Bitmap-Resource "ServerStopped"}) ((starting) {Bitmap-Resource "ServerStarting"}) ((started) {Bitmap-Resource "ServerRunning"}) ((stopping) {Bitmap-Resource "ServerClosing"})))
                               (title (->string name))
                               (state-text (case state ((stopped) "Stopped") ((starting) "Starting") ((started) "Started") ((stopping) "Stopping")))
                               (description (get-description~ config))
                               (hits (if (not server) 0 (get-hits~ server)))
                               (debug? (get-debug?~ config)))
                          (add-row~ tree state: 'dynamic children: (list (new Tree-Node title: title image: image) (new Tree-Label title: state-text) (new Tree-Label title: (if host (present-compact~ host) "localhost")) (new Tree-Label title: (->string port)) (new Tree-Label title: description) (new Tree-Label title: (->string hits)) (new Tree-Label title: (if debug? "True" "False"))) user-data: config)))
                      (get-children~ configurations)))))))
  
  
  (method (update-states)
    (let ((tree (get-tree)))
      (for-each-visible-row~ tree
       (function (row rank)
         (let* ((c0 (new Cell rank 0))
                (c1 (new Cell rank 1))
                (c6 (new Cell rank 6))
                (config (get-user-data~ row))
                (name (get-name~ config))
                (server (find-server name))
                (state (if (not server) 'stopped (get-server-state~ server)))
                (image (case state ((stopped) {Bitmap-Resource "ServerStopped"}) ((starting) {Bitmap-Resource "ServerStarting"}) ((started) {Bitmap-Resource "ServerRunning"}) ((stopping) {Bitmap-Resource "ServerClosing"})))
                (state-text (case state ((stopped) "Stopped") ((starting) "Starting") ((started) "Started") ((stopping) "Stopping")))
                (debug? (get-debug?~ config)))
           (set-image~ (get-cell-data~ tree c0) image)
           (set-title~ (get-cell-data~ tree c1) state-text)
           (set-title~ (get-cell-data~ tree c6) (if debug? "True" "False"))
           (invalidate-cell~ tree c0)
           (invalidate-cell~ tree c1)
           (invalidate-cell~ tree c6))))))

  
  ;;;
  ;;;; Server
  ;;;
  
  
  (method (start-server config)
    (stop-server config)
    (let* ((name (get-name~ config))
           (class (get-class~ config))
           (host (get-host~ config))
           (port (get-port~ config))
           (root-directory (get-root-directory~ config))
           (default-resource (get-default-resource~ config))
           (unauthentified-resource (get-unauthentified-resource~ config))
           (debug? (get-debug?~ config))
           (server (new (autoload class) host: host port: port root-directory: root-directory default-resource: default-resource unauthentified-resource: unauthentified-resource debug?: debug?)))
      (if (not (wait-started~ server error?: #f))
          (error "Unable to start server")
        (table-set! servers name server))))
  
  
  (method (stop-server config)
    (let* ((name (get-name~ config))
           (server (find-server name)))
      (when server
        (stop-listener~ server)
        (table-set! servers name {}))))
  
  
  (method (restart-server config)
    (stop-server config)
    (start-server config))
  
  
  (method (start/stop-server config)
    (let* ((name (get-name~ config))
           (server (find-server name))
           (state (if (not server) 'stopped (get-server-state~ server))))
      (case state
        ((stopped) (start-server config))
        ((started) (stop-server config)))))
  
  
  (method (debug-server config)
    (toggle-debug?~ config)
    (let* ((name (get-name~ config))
           (server (find-server name)))
      (when server
        (set-debug?~ server (get-debug?~ config)))))
  
  
  @this-should-go-elsewhere
  (method (ping-server config)
    (let* ((name (get-name~ config))
           (server (find-server name))
           (host {Host name: "localhost"})
           (port (get-port~ server))
           (timer (new Timer)))
      (with-closed ((socket (new Socket)))
        (connect~ socket host port)
        (send-string~ socket "Hello")
        (let ((data (receive-raw~ socket)))
          (user-message "Pinged Server on {s} in {a}s received {s}"
                        (get-name~ host)
                        (get-duration-in-seconds~ timer)
                        data)))))
  
  
  (method (edit-server config)
    (let ((appl (get-application))
          (class (get-class~ config)))
      (edit-definition~ appl class context: 'jazz)))
  
  
  (method public (find-server name)
    (table-ref servers name #f))

  
  ;;;
  ;;;; Selection
  ;;;
  
  
  (method (selected-object)
    (let* ((tree (get-tree))
           (rank (get-single-selection~ tree)))
      (when rank
        (get-user-data~ (get-row~ tree rank)))))
  
  
  (method (selected-configuration)
    (let ((object (selected-object)))
      (when (and object (is? object Web-Server-Configuration))
        object))))


;;;
;;;; Server-Menu
;;;


(class Server-Menu extends Context-Menu
  
  
  (form
    (<install>
      (<Label-Item>     name: edit           title: "&Edit Server" icon: {Bitmap-Resource "Edit"} action-handler: {Event-Handler (:form :container) on-edit-server})
      (<Separator-Item> name: edit-separator)
      (<Label-Item>     name: start          title: "&Start Server" icon: {Bitmap-Resource "Run"} action-handler: {Event-Handler (:form :container) on-start-server})
      (<Label-Item>     name: stop           title: "&Stop Server" icon: {Bitmap-Resource "Stop"} action-handler: {Event-Handler (:form :container) on-stop-server})
      (<Label-Item>     name: restart        title: "&Restart Server" icon: {Bitmap-Resource "Continue"} action-handler: {Event-Handler (:form :container) on-restart-server})
      (<Separator-Item>)
      (<Label-Item>     name: debug          title: "&Debug Server" icon: {Bitmap-Resource "Debugger"} action-handler: {Event-Handler (:form :container) on-debug-server})))))
