;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Platform Access
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2006
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.platform jazz


(export (jazz.platform.windows (cond windows))
        (jazz.platform.x11     (cond x11))
        (jazz.platform.carbon  (cond carbon)))

(import (jazz.io))


;;;
;;;; Wait
;;;


;; All this state manipulation is necessary because I dont
;; know any Windows API that returns the running state of a thread...
(definition public (wait-for object/objects (timeout: timeout {}) (error?: error? #t))
  (unimplemented 'wait-for)
  @unimp
  (let* ((get-handle
           (function (object)
             (if (integer? object)
                 object
               (get-handle~ object))))
         (timeout (either timeout INFINITE))
         (single? (not (pair? object/objects)))
         (handle/array
           (if single?
               (get-handle object/objects)
             (let ((handles (remove-nils (map get-handle object/objects))))
               (when handles
                 (let* ((count (length object/objects))
                        (array (new-array int count)))
                   (loop (for object in object/objects)
                         (for n from 0)
                         (do (array-set! array n (get-handle object))))
                   array)))))
         (thread (active-thread))
         (state (get-state~ thread)))
    ;; Can happen for instance if the thread has already terminated...
    (if (not handle/array)
        #t
      (unwind-protect
          (begin
            (set-state~ thread (+ state 1))
            (let ((result (if single?
                              (WaitForSingleObject handle/array timeout)
                            (WaitForMultipleObjects (array-length handle/array) handle/array #t timeout))))
              (if (= result WAIT_OBJECT_0)
                  #t
                (when (and (= result WAIT_TIMEOUT) error?)
                  (error "Wait for {t} timed out" object/objects)))))
        (set-state~ thread state)))))


;;;
;;;; Stack
;;;


(definition public (print-stack destination . rest)
  (unimplemented 'print-stack)
  @windows-specific
  (if (= destination :string)
      (let ((printer (open-output-string)))
        (apply print-stack-to printer rest)
        (get-output-string printer))
    (apply print-stack-to destination rest)))


(definition (print-stack-to printer . rest) ;; CONVERT (thread: thread (active-thread)) (execution-stack: execution-stack (bootsafe-get-execution-stack)) (exception: exception {}))
  (unimplemented 'print-stack-to)
  @windows-specific (
  (format printer "~{Process-Snapshot{%}{%}")
  (format printer "  ;;;{%}")
  (format printer "  ;;;; PROCESS{%}")
  (format printer "  ;;;{%}{%}")
  (format printer "  process: {s}{%}" (process-name~ (get-process)))
  (format printer "  application: {s}{%}" (command-argument "app"))
  (format printer "  date: \"")
  (print-date printer)
  (format printer "\"{%}")
  (when exception
    (format printer "{%}")
    (format printer "  ;;;{%}")
    (format printer "  ;;;; EXCEPTION{%}")
    (format printer "  ;;;{%}{%}")
    (format printer "  exception:{%}")
    (format printer "  ~{Exception-Snapshot{%}")
    (format printer "   description: {s}}{%}" (get-message~ exception)))
  (format printer "{%}")
  ;; todo
  (when execution-stack
    )
  (format printer "  ;;;{%}")
  (format printer "  ;;;; THREADS{%}")
  (format printer "  ;;;{%}{%}")
  (format printer "  threads:{%}")
  (format printer "  (~{Thread-Snapshot{%}")
  (format printer "    model: {a}{%}" (type-name (class-of thread)))
  (format printer "    label: {s}{%}" (get-name~ thread))
  (format printer "    state: {a}{%}" (get-state~ thread))
  (format printer "    call-stack:{%}")
  (format printer "    (")
  (print-stack-content thread printer)
  (format printer ")})}{%}"))))
