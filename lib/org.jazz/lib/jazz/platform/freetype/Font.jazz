;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Freetype Font
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.platform.freetype.Font jazz


(import (jazz.platform.Color)
        (jazz.platform.cairo)
        (jazz.platform.freetype)
        (jazz.library)
        (jazz.utilities))


(class Font extends Object

  
  (slot name           accessors generate)
  (slot path           accessors generate)
  (slot point-size     accessors generate)
  (slot color          accessors generate)
  (slot bold?          accessors generate)
  (slot italic?        accessors generate)
  (slot underline?     accessors generate)
  (slot monospace?     accessors generate)
  (slot ft-handle      accessors generate)
  (slot cairo-handle   accessors generate)

  
  (method (initialize self
                      (name: name "")
                      (path: path #f)
                      (point-size: point-size 8)
                      (color: color (new Color red: 1.000 green: 1.000 blue: 1.000))
                      (bold?: bold? #f)
                      (italic?: italic? #f)
                      (underline?: underline? #f)
                      (monospace?: monospace? #f))
    
    (if path
        (set-path self path)
      (error "Path to truetype font needed"))
    
    (set-name self name)
    (set-point-size self point-size)
    (set-color self color)
    (set-bold? self bold?)
    (set-italic? self italic?)
    (set-underline? self underline?)
    (set-monospace? self monospace?)
    
    (set-ft-handle self (make-ft-handle self))
    (set-cairo-handle self (make-cairo-handle self)))
  
  
  (method (destroy self)
    (cairo_font_face_destroy (get-cairo-handle self))
    (FT_Done_Face (get-ft-handle self)))
  
  
  (method (make-ft-handle self)
    (let ((face (make-FT_Face)))
      (FT_New_Face ft-library (get-path self) 0 face)
      face))
  
  
  (method (make-cairo-handle self)
    (cairo_ft_font_face_create_for_ft_face (get-ft-handle self) 0))
  
  
  (method public (get-size self)
    (calculate-size self (get-point-size self)))
  
  
  (method (calculate-size self point-size)
    (/ (* point-size 96.0) 72))))
