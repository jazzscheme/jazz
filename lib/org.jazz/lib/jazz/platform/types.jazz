;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Basic Types
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Jeremie Lasalle Ratelle.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;    Guillaume Cartier
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.platform.types jazz


@debug
(definition stack-depth
  (c-function () int
    "struct foo {int x; int y;}; struct foo zz; ___result = (int) &zz;"))


@debug
(definition pointer-size
  (c-function () int
    "___result = (int) sizeof(void*);"))


(cond-expand 
  (mac  (c-include "<CoreServices/CoreServices.h>"))
  (else (c-include "<stdlib.h>")))


(named-c-declare U8PTR-declare

#<<c-declare-end
           
typedef ___U8*  U8PTR;

___SCMOBJ SCMOBJ_to_U8PTR (___SCMOBJ src, U8PTR *dst)
{
  ___SCMOBJ ___temp; // for U8VECTORP
  ___SCMOBJ ___err = ___FIX(___NO_ERR);
  if (!___U8VECTORP(src))
    ___err = ___FIX(___UNKNOWN_ERR);
  else
    {
     *dst = ___CAST(___U8*,___BODY_AS(src,___tSUBTYPED));
    }
  return ___err;
}

#define ___BEGIN_CFUN_SCMOBJ_to_U8PTR(src,dst,i) \
if ((___err = SCMOBJ_to_U8PTR (src, &dst)) == ___FIX(___NO_ERR)) {
#define ___END_CFUN_SCMOBJ_to_U8PTR(src,dst,i) }

#define ___BEGIN_CFUN_U8PTR_to_SCMOBJ(src,dst) \
if ((___err = ___FIX(___UNKNOWN_ERR)) == ___FIX(___NO_ERR)) {
#define ___END_CFUN_U8PTR_to_SCMOBJ(src,dst) }

#define ___BEGIN_SFUN_U8PTR_to_SCMOBJ(src,dst,i) \
if ((___err = U8PTR_to_SCMOBJ (src, &dst)) == ___FIX(___NO_ERR)) {
#define ___END_SFUN_U8PTR_to_SCMOBJ(src,dst,i) }

#define ___BEGIN_SFUN_SCMOBJ_to_U8PTR(src,dst) \
{ ___err = ___FIX(___UNKNOWN_ERR);
#define ___END_SFUN_SCMOBJ_to_U8PTR(src,dst) }

c-declare-end
)


(named-c-declare U16PTR-declare

#<<c-declare-end

typedef ___U16* U16PTR;

___SCMOBJ SCMOBJ_to_U16PTR (___SCMOBJ src, U16PTR *dst)
{
  ___SCMOBJ ___temp; // for U16VECTORP
  ___SCMOBJ ___err = ___FIX(___NO_ERR);
  if (!___U16VECTORP(src))
    ___err = ___FIX(___UNKNOWN_ERR);
  else
    {
     *dst = ___CAST(___U16*,___BODY_AS(src,___tSUBTYPED));
    }
  return ___err;
}

#define ___BEGIN_CFUN_SCMOBJ_to_U16PTR(src,dst,i) \
if ((___err = SCMOBJ_to_U16PTR (src, &dst)) == ___FIX(___NO_ERR)) {
#define ___END_CFUN_SCMOBJ_to_U16PTR(src,dst,i) }

#define ___BEGIN_CFUN_U16PTR_to_SCMOBJ(src,dst) \
if ((___err = ___FIX(___UNKNOWN_ERR)) == ___FIX(___NO_ERR)) {
#define ___END_CFUN_U16PTR_to_SCMOBJ(src,dst) }

#define ___BEGIN_SFUN_U16PTR_to_SCMOBJ(src,dst,i) \
if ((___err = U16PTR_to_SCMOBJ (src, &dst)) == ___FIX(___NO_ERR)) {
#define ___END_SFUN_U16PTR_to_SCMOBJ(src,dst,i) }

#define ___BEGIN_SFUN_SCMOBJ_to_U16PTR(src,dst) \
{ ___err = ___FIX(___UNKNOWN_ERR);
#define ___END_SFUN_SCMOBJ_to_U16PTR(src,dst) }

c-declare-end
)


(named-c-declare U32PTR-declare
  
#<<c-declare-end
           
typedef ___U32* U32PTR;

___SCMOBJ SCMOBJ_to_U32PTR (___SCMOBJ src, U32PTR *dst)
{
  ___SCMOBJ ___temp; // for U32VECTORP
  ___SCMOBJ ___err = ___FIX(___NO_ERR);
  if (!___U32VECTORP(src))
    ___err = ___FIX(___UNKNOWN_ERR);
  else
    {
     *dst = ___CAST(___U32*,___BODY_AS(src,___tSUBTYPED));
    }
  return ___err;
}

#define ___BEGIN_CFUN_SCMOBJ_to_U32PTR(src,dst,i) \
if ((___err = SCMOBJ_to_U32PTR (src, &dst)) == ___FIX(___NO_ERR)) {
#define ___END_CFUN_SCMOBJ_to_U32PTR(src,dst,i) }

#define ___BEGIN_CFUN_U32PTR_to_SCMOBJ(src,dst) \
if ((___err = ___FIX(___UNKNOWN_ERR)) == ___FIX(___NO_ERR)) {
#define ___END_CFUN_U32PTR_to_SCMOBJ(src,dst) }

#define ___BEGIN_SFUN_U32PTR_to_SCMOBJ(src,dst,i) \
if ((___err = U32PTR_to_SCMOBJ (src, &dst)) == ___FIX(___NO_ERR)) {
#define ___END_SFUN_U32PTR_to_SCMOBJ(src,dst,i) }

#define ___BEGIN_SFUN_SCMOBJ_to_U32PTR(src,dst) \
{ ___err = ___FIX(___UNKNOWN_ERR);
#define ___END_SFUN_SCMOBJ_to_U32PTR(src,dst) }

c-declare-end
)


(named-c-declare F64PTR-declare

#<<c-declare-end
           
typedef ___F64*  F64PTR;

___SCMOBJ SCMOBJ_to_F64PTR (___SCMOBJ src, F64PTR *dst)
{
  ___SCMOBJ ___temp; // for F64VECTORP
  ___SCMOBJ ___err = ___FIX(___NO_ERR);
  if (!___F64VECTORP(src))
    ___err = ___FIX(___UNKNOWN_ERR);
  else
    {
     *dst = ___CAST(___F64*,___BODY_AS(src,___tSUBTYPED));
    }
  return ___err;
}

#define ___BEGIN_CFUN_SCMOBJ_to_F64PTR(src,dst,i) \
if ((___err = SCMOBJ_to_F64PTR (src, &dst)) == ___FIX(___NO_ERR)) {
#define ___END_CFUN_SCMOBJ_to_F64PTR(src,dst,i) }

#define ___BEGIN_CFUN_F64PTR_to_SCMOBJ(src,dst) \
if ((___err = ___FIX(___UNKNOWN_ERR)) == ___FIX(___NO_ERR)) {
#define ___END_CFUN_F64PTR_to_SCMOBJ(src,dst) }

#define ___BEGIN_SFUN_F64PTR_to_SCMOBJ(src,dst,i) \
if ((___err = F64PTR_to_SCMOBJ (src, &dst)) == ___FIX(___NO_ERR)) {
#define ___END_SFUN_F64PTR_to_SCMOBJ(src,dst,i) }

#define ___BEGIN_SFUN_SCMOBJ_to_F64PTR(src,dst) \
{ ___err = ___FIX(___UNKNOWN_ERR);
#define ___END_SFUN_SCMOBJ_to_F64PTR(src,dst) }

c-declare-end
)


(c-type void               (native void))
(c-type void*              (pointer void))
(c-type char               (native char))
(c-type char*              (pointer char))
(c-type short              (native short))
(c-type short*             (pointer short))
(c-type int                (native int))
(c-type int*               (pointer int))
(c-type long               (native long))
(c-type long*              (pointer long))
(c-type float              (native float))
(c-type float*             (pointer float))
(c-type double             (native double))
(c-type double*            (pointer double))
(c-type byte               (native unsigned-int8))
(c-type byte*              (pointer byte))
(c-type uchar              (native unsigned-char))
(c-type ushort             (native unsigned-short))
(c-type uint               (native unsigned-int))
(c-type ulong              (native unsigned-long))
(c-type uint64             (native unsigned-int64))
(c-type UTF-8-string       (native UTF-8-string))
(c-type UTF-16-string      (native UTF-16-string))
(c-type char-string        (native char-string))
(c-type wchar_t-string     (native wchar_t-string))
(c-type Bool               (native bool))
(c-type scheme-object      (native scheme-object))


(c-declare-pointer-relation char char-string)
;(c-declare-pointer-relation wchar_t wchar_t-string)


(c-type U8PTR  (type "U8PTR") as-pointer U8PTR-declare "U8PTR_to_SCMOBJ" "SCMOBJ_to_U8PTR")
(c-type U16PTR (type "U16PTR") as-pointer U16PTR-declare "U16PTR_to_SCMOBJ" "SCMOBJ_to_U16PTR")
(c-type U32PTR (type "U32PTR") as-pointer U32PTR-declare "U32PTR_to_SCMOBJ" "SCMOBJ_to_U32PTR")
(c-type F64PTR (type "F64PTR") as-pointer F64PTR-declare "F64PTR_to_SCMOBJ" "SCMOBJ_to_F64PTR")

@wait
(definition (free foreign)
  (c-code
    "free(___CAST(void*,___FIELD(___arg1,___FOREIGN_PTR)));"
    foreign))


(definition void*->byte*
  (c-function (void*) byte*
    "___result_voidstar = ___arg1;"))


(definition byte*-ref
  (c-function (byte* int) byte
    "___result = *(___arg1 + ___arg2);"))


(definition int*-alloc
  (c-function (int) int*
    "___result_voidstar = calloc(___arg1,sizeof(int));"))

(definition byte*-set!
  (c-function (byte* int byte) void
    "*(___arg1 + ___arg2) = ___arg3;"))


(definition short*-ref
  (c-function (short* int) short
    "___result = *(___arg1 + ___arg2);"))


(definition int*-ref
  (c-function (int* int) int
    "___result = *(___arg1 + ___arg2);"))


(definition double*-ref
  (c-function (double* int) double
    "___result = *(___arg1 + ___arg2);"))


(definition int*-free
  (c-function (int*) void
    "free(___arg1);"))


(definition double*-free
  (c-function (double*) void
    "free(___arg1);")))
