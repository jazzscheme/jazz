;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Windows Types
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Stephane Le Cornec.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.platform.windows.WinTypes jazz


(import (jazz.library))

;;;
;;;; WinDef
;;;


(c-type WINBOOL      (native bool)) ; should be int
(c-type PWINBOOL     (pointer WINBOOL))
(c-type LPWINBOOL    (pointer WINBOOL))
(c-type BOOL         WINBOOL)
(c-type PBOOL        (pointer BOOL))
(c-type LPBOOL       (pointer BOOL))
(c-type BYTE         (native unsigned-char))
(c-type PBYTE        (pointer BYTE))
(c-type LPBYTE       (pointer BYTE))
(c-type WORD         (native unsigned-short))
(c-type PWORD        (pointer WORD))
(c-type LPWORD       (pointer WORD))
(c-type INT          (native int))
(c-type PINT         (pointer INT))
(c-type LPINT        (pointer INT))
(c-type UINT         (native unsigned-int))
(c-type PUINT        (pointer UINT))
(c-type LPUINT       (pointer UINT))
(c-type LONG         (native long))
(c-type LPLONG       (pointer LONG))
(c-type DWORD        (native unsigned-long))
(c-type PDWORD       (pointer DWORD))
(c-type LPDWORD      (pointer DWORD))
(c-type FLOAT        (native float))
(c-type PFLOAT       (pointer FLOAT))

(c-type VOID         (native void))
(c-type PVOID        (pointer VOID))
(c-type LPVOID       (pointer VOID))
(c-type PCVOID       (pointer VOID) as-const-pointer)
(c-type LPCVOID      (pointer VOID) as-const-pointer)

;;;
;;;; WinNT - include
;;;

(c-type CHAR         (native char))
(c-type PSZ          (pointer CHAR))
(c-type SHORT        (native short))
(c-type PSHORT       (pointer SHORT))
(c-type LONG         (native long))
(c-type PLONG        (pointer LONG))
(c-type CCHAR        (native char))
(c-type PCCHAR       (pointer CCHAR))
(c-type UCHAR        (native unsigned-char))
(c-type PUCHAR       (pointer UCHAR))
(c-type USHORT       (native unsigned-short))
(c-type PUSHORT      (pointer USHORT))
(c-type ULONG        (native unsigned-long))
(c-type PULONG       (pointer ULONG))
(c-type WCHAR        (native wchar_t))
(c-type PWCHAR       (pointer WCHAR) as-wide-string)
(c-type LPWCH        PWCHAR)
(c-type PWCH         PWCHAR)
(c-type NWPSTR       PWCHAR)
(c-type LPWSTR       PWCHAR)
(c-type PWSTR        PWCHAR)
(c-type LPCWCH       (native wchar_t-string) as-const-wide-string);(type "LPCWCH")
(c-type PCWCH        LPCWCH)
(c-type LPCWSTR      LPCWCH)
(c-type PCWSTR       LPCWCH)
(c-type PCHAR        (pointer CHAR) as-string)
(c-type LPCH         PCHAR)
(c-type PCH          PCHAR)
(c-type NPSTR        PCHAR)
(c-type LPSTR        PCHAR)
(c-type PSTR         PCHAR)
(c-type LPCCH        (native char-string) as-const-string);(type "LPCCH")
(c-type LPCSTR       LPCCH)
(c-type PCSTR        LPCCH)
(c-type TCHAR        WCHAR)
(c-type _TCHAR       WCHAR)
(c-type TBYTE        TCHAR)
(c-type PTCHAR       (pointer TCHAR) as-wide-string)
(c-type PTCHAR       PTCHAR)
(c-type PTCH         PTCHAR)
(c-type PTBYTE       PTCHAR)
(c-type LPTCH        PTCHAR)
(c-type PTSTR        PTCHAR)
(c-type LPTSTR       PTCHAR)
(c-type LP           PTCHAR)
(c-type LPCTSTR      (native wchar_t-string) as-const-wide-string);(type "LPCTSTR")
(c-type HANDLE       (pointer (native void)))
(c-type PHANDLE      (pointer HANDLE))
(c-type LPHANDLE     (pointer HANDLE))
(c-type LCID         DWORD)
(c-type PLCID        PDWORD)
(c-type LANGID       WORD)
(c-type LONGLONG     (native int64))
(c-type PLONGLONG    (pointer LONGLONG))
(c-type DWORDLONG    (native unsigned-int64))
(c-type PDWORDLONG   (pointer DWORDLONG))
(c-type ULONGLONG    DWORDLONG)
(c-type PULONGLONG   (pointer ULONGLONG))
(c-type USN          LONGLONG)
(c-type BOOLEAN      BYTE)
(c-type PBOOLEAN     (pointer BOOLEAN))
(c-type FCHAR        BYTE)
(c-type FSHORT       WORD)
(c-type FLONG        DWORD)
(c-type ACCESS_MASK  DWORD)
(c-type PACCESS_MASK (pointer ACCESS_MASK))

;;;
;;;; basetsd - include
;;;


(c-type LONG32       (native int))
(c-type PLONG32      (pointer LONG32))
(c-type INT32        (native int))
(c-type PINT32       (pointer INT32))
(c-type ULONG32      (native unsigned-int))
(c-type PULONG32     (pointer ULONG32))
(c-type DWORD32      (native unsigned-int))
(c-type PDWORD32     (pointer DWORD32))
(c-type UINT32       (native unsigned-int))
(c-type PUINT32      (pointer UINT32))

(c-type INT_PTR      (native int))
(c-type PINT_PTR     (pointer INT_PTR))
(c-type UINT_PTR     (native unsigned-int))
(c-type PUINT_PTR    (pointer UINT_PTR))
(c-type LONG_PTR     (native long))
(c-type PLONG_PTR    (pointer LONG_PTR))
(c-type ULONG_PTR    (native unsigned-long))
(c-type PULONG_PTR   (pointer ULONG_PTR))
(c-type UHALF_PTR    (native unsigned-short))
(c-type PUHALF_PTR   (pointer UHALF_PTR))
(c-type HALF_PTR     (native short))
(c-type PHALF_PTR    (pointer HALF_PTR))
(c-type HANDLE_PTR   (native unsigned-long))

(c-type SIZE_T       ULONG_PTR)
(c-type PSIZE_T      (pointer SIZE_T))
(c-type SSIZE_T      LONG_PTR)
(c-type PSSIZE_T     (pointer SSIZE_T))
(c-type DWORD_PTR    ULONG_PTR)
(c-type PDWORD_PTR   (pointer DWORD_PTR))
(c-type LONG64       (native int64))
(c-type PLONG64      (pointer LONG64))
(c-type INT64        (native int64))
(c-type PINT64       (pointer INT64))
(c-type ULONG64      (native unsigned-int64))
(c-type PULONG64     (pointer ULONG64))
(c-type DWORD64      (native unsigned-int64))
(c-type PDWORD64     (pointer DWORD64))
(c-type UINT64       (native unsigned-int64))
(c-type PUINT64      (pointer UINT64))


;;;
;;;; WinDef - continue
;;;


(c-type WPARAM        UINT_PTR)
(c-type LPARAM        LONG_PTR)
(c-type LRESULT       LONG_PTR)
(c-type HRESULT       LONG)
(c-type ATOM          WORD)
(c-type HGLOBAL       HANDLE)
(c-type HLOCAL        HANDLE)
(c-type GLOBALHANDLE  HANDLE)
(c-type LOCALHANDLE   HANDLE)
(c-type HGDIOBJ       (pointer (native void)))

(c-type HACCEL        HANDLE);(type "HACCEL") as-native)
(c-type HBITMAP       HANDLE);(type "HBITMAP") as-native)
(c-type HBRUSH        HANDLE);(type "HBRUSH") as-native)
(c-type HCOLORSPACE   HANDLE);(type "HCOLORSPACE") as-native)
(c-type HDC           HANDLE);(type "HDC") as-native)
(c-type HGLRC         HANDLE);(type "HGLRC") as-native)
(c-type HDESK         HANDLE);(type "HDESK") as-native)
(c-type HENHMETAFILE  HANDLE);(type "HENHMETAFILE") as-native)
(c-type HFONT         HANDLE);(type "HFONT") as-native)
(c-type HICON         HANDLE);(type "HICON") as-native)
(c-type HKEY          HANDLE);(type "HKEY") as-native)
(c-type HMONITOR      HANDLE);(type "HMONITOR") as-native)
(c-type HTERMINAL     HANDLE);(type "HTERMINAL") as-native)
(c-type HWINEVENTHOOK HANDLE);(type "HWINEVENTHOOK") as-native)
(c-type PHKEY         (pointer HKEY))
(c-type HMENU         HANDLE);(type "HMENU") as-native)
(c-type HMETAFILE     HANDLE);(type "HMETAFILE") as-native)
(c-type HINSTANCE     HANDLE);(type "HINSTANCE") as-native)
(c-type HMODULE       HINSTANCE)
(c-type HPALETTE      HANDLE);(type "HPALETTE") as-native)
(c-type HPEN          HANDLE);(type "HPEN") as-native)
(c-type HRGN          HANDLE);(type "HRGN") as-native)
(c-type HRSRC         HANDLE);(type "HRSRC") as-native)
(c-type HSTR          HANDLE);(type "HSTR") as-native)
(c-type HTASK         HANDLE);(type "HTASK") as-native)
(c-type HWND          HANDLE);(type "HWND") as-native)
(c-type HWINSTA       HANDLE);(type "HWINSTA") as-native)
(c-type HKL           HANDLE);(type "HKL") as-native)

(c-type HFILE         (native int))
(c-type HCURSOR       HICON)
(c-type COLORREF      DWORD)
(c-type FARPROC       (function () (native int)))
(c-type NEARPROC      (function () (native int)))
(c-type PROC          (function () (native int)))


;;;
;;;; WinUser
;;;


; warning because of __stdcall?
(c-type WNDPROC                      (function (HWND UINT WPARAM LPARAM) LRESULT))
(c-type TIMERPROC                    (function (HWND UINT UINT DWORD) VOID))
(c-type __CDHOOKPROC                 (function (HWND UINT WPARAM LPARAM) UINT))
(c-type LPPRINTHOOKPROC __CDHOOKPROC)
(c-type LPSETUPHOOKPROC __CDHOOKPROC)
(c-type LPPAGESETUPHOOK __CDHOOKPROC)
(c-type LPPAGEPAINTHOOK __CDHOOKPROC)


;;;
;;;; WinUser
;;;


(c-type HDROP         HANDLE);(type "HDROP") as-native)


;;;
;;;; extra
;;;


;; enum
(c-type GET_FILEEX_INFO_LEVELS (native unsigned-int32))


(c-type VOID*         (pointer VOID))
(c-type const*        PCVOID)
(c-type HANDLE*       (pointer HANDLE))
(c-type LONG*         (pointer LONG))
(c-type WCHAR*        (pointer WCHAR))
(c-type DWORD*        (pointer DWORD))



(named-c-declare ATOM/STRING-declare

#<<c-declare-end
           
typedef wchar_t*  ATOM_STRING;

___SCMOBJ SCMOBJ_to_ATOM_STRING (___SCMOBJ src, ATOM_STRING *dst, int arg_num)
{
  ___SCMOBJ ___temp; // for STRINGP
  ___SCMOBJ ___err = ___FIX(___NO_ERR);
  if (___STRINGP(src))
  {
    ___err = ___EXT(___SCMOBJ_to_WCHARSTRING)(src,dst,arg_num);
  }
  else if (___FIXNUMP(src))
  {
    unsigned short us = 0;
    ___err = ___EXT(___SCMOBJ_to_USHORT)(src,&us,arg_num);
    *dst = (ATOM_STRING) (unsigned long) us;
  }
  else
    ___err = ___FIX(___UNKNOWN_ERR);
  
  return ___err;
}

void ___release_ATOM_STRING (___SCMOBJ src, ATOM_STRING dst, int arg_num)
{
  ___SCMOBJ ___temp; // for STRINGP
  if (___STRINGP(src))
  {
    ___EXT(___release_string)(dst);
  }
}

#define ___BEGIN_CFUN_SCMOBJ_to_ATOM_STRING(src,dst,i) \
if ((___err = SCMOBJ_to_ATOM_STRING (src, &dst, i)) == ___FIX(___NO_ERR)) {
#define ___END_CFUN_SCMOBJ_to_ATOM_STRING(src,dst,i) ___release_ATOM_STRING(src,dst,i);}

#define ___BEGIN_CFUN_ATOM_STRING_to_SCMOBJ(src,dst) \
if ((___err = ___FIX(___UNKNOWN_ERR)) == ___FIX(___NO_ERR)) {
#define ___END_CFUN_ATOM_STRING_to_SCMOBJ(src,dst) }

#define ___BEGIN_SFUN_ATOM_STRING_to_SCMOBJ(src,dst,i) \
if ((___err = ___FIX(___UNKNOWN_ERR)) == ___FIX(___NO_ERR)) {
#define ___END_SFUN_ATOM_STRING_to_SCMOBJ(src,dst,i) }

#define ___BEGIN_SFUN_SCMOBJ_to_ATOM_STRING(src,dst) \
{ ___err = ___FIX(___UNKNOWN_ERR);
#define ___END_SFUN_SCMOBJ_to_ATOM_STRING(src,dst) }

c-declare-end
)

(c-type ATOM/STRING  (type "ATOM_STRING") as-const-pointer ATOM/STRING-declare "ATOM_STRING_to_SCMOBJ" "SCMOBJ_to_ATOM_STRING")


(definition WCHAR-array-make (c-function (INT) WCHAR* "___result_voidstar = calloc(___arg1,sizeof(WCHAR));"))
(definition WCHAR-array-ref  (c-function (WCHAR* INT) WCHAR "___result = ___arg1[___arg2];"))
(definition WCHAR-array-set! (c-function (WCHAR* INT WCHAR) VOID "___arg1[___arg2] = ___arg3;"))
(definition WCHAR-array-free (c-function (WCHAR*) VOID "free(___arg1);"))
(definition WCHAR-subarray   (c-function (WCHAR* INT) WCHAR* "___result_voidstar = ___arg1 + ___arg2;"))
(definition WCHAR-string     (c-function (WCHAR*) LPCWSTR "___result = ___arg1;"))
(definition WCHAR-copy       (c-function (WCHAR* LPCWSTR INT) VOID "wcsncpy"))
(definition WCHAR-ref        (c-function (WCHAR*) ULONG "___result = (unsigned long)___arg1;")))
