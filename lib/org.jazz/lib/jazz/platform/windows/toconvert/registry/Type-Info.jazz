;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Type Info
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.library.registry.Type-Info jazz


(import (jazz.library)
        (jazz.utilities))


(class Type-Info extends Object uses (Utilities System WinKernel WinIDL)


  (slot handle)
  (slot attr)
  (slot functions)
  (slot variables)


  (method (initialize h)
    (nextmethod)
    (set! handle h)
    (set! attr (coerce (get-type-attr handle) TYPEATTR))
    (set! functions (load-functions))
    (set! variables (load-variables))
    (destroy-mandatory))


  (method (destroy)
    (release-functions)
    (release-variables)
    (release-type-attr handle (record-address attr))
    (release-type-info handle)
    (nextmethod))


  (method (load-functions)
    (map (function (i)
           (coerce (get-type-info-func-desc handle i) FUNCDESC))
         (naturals 0 (get attr 'cFuncs))))


  (method (load-variables)
    (map (function (n)
           (coerce (get-type-info-var-desc handle n) VARDESC))
         (naturals 0 (get attr 'cVars))))


  (method (release-functions)
    (for-each (function (desc)
                (release-func-desc handle (record-address desc)))
              functions))


  (method (release-variables)
    (for-each (function (desc)
                (release-var-desc handle (record-address desc)))
              variables))


  (method public (get-handle)
    handle)


  (method public (get-attr)
    attr)


  (method public (get-name)
    (get-type-info-name handle -1))


  (method public (get-doc)
    (get-type-info-doc handle -1))


  (method public (get-kind)
    (get attr 'typekind))


  (method public (get-guid)
    (new GUID (record-address (get attr 'guid))))


  (method public (get-functions)
    functions)


  (method public (get-variables)
    variables)


  (method public (get-referenced-type href)
    (let ((hnd (get-type-info-referenced-type handle href)))
      (when (/= hnd 0)
        (new Type-Info hnd))))


  (method public (get-implemented-type n)
    (let ((hnd (get-type-info-implemented-type handle n)))
      (when (/= hnd 0)
        (new Type-Info hnd))))


  (method public (get-nb-implemented-types)
    (get attr 'cImplTypes))


  (method public (get-implemented-types)
    (map get-implemented-type (naturals 0 (get-nb-implemented-types))))
  
  
  (method public (get-member-name desc)
    (get-type-info-name handle (get desc 'memid)))
  
  
  (method public (get-member-doc desc)
    (get-type-info-doc handle (get desc 'memid)))
  
  
  (method public (get-function-parameters desc)
    (new-array-from-memory ELEMDESC (get desc 'cParams) (get desc 'lprgelemdescParam)))))
