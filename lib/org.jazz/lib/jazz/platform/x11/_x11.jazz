(library jazz.platform.x11 jazz

(c-include "<X11/Xlib.h>")  
(c-include "<X11/Xutil.h>")
(c-include "<X11/Xatom.h>")
(c-include "<stdlib.h>")
(c-include "<string.h>")

(constant None                     #x00000000)
(constant PointerRoot              1)
(constant CopyFromParent           #x00000000)
(constant InputOutput              1)

(constant CWBackPixel  #x0001)

;; Event Masks

(constant NoEventMask              #x00000000)
(constant KeyPressMask             #x00000001) 
(constant KeyReleaseMask           #x00000002) 
(constant ButtonPressMask          #x00000004) 
(constant ButtonReleaseMask        #x00000008)
(constant EnterWindowMask          #x00000010) 
(constant LeaveWindowMask          #x00000020) 
(constant PointerMotionMask        #x00000040)
(constant PointerMotionHintMask    #x00000080) 
(constant Button1MotionMask        #x00000100) 
(constant Button2MotionMask        #x00000200) 
(constant Button3MotionMask        #x00000400)
(constant Button4MotionMask        #x00000800)
(constant Button5MotionMask        #x00001000)
(constant ButtonMotionMask         #x00002000)
(constant KeymapStateMask          #x00004000)
(constant ExposureMask             #x00008000)
(constant VisibilityChangeMask     #x00010000)
(constant StructureNotifyMask      #x00020000)
(constant ResizeRedirectMask       #x00040000)
(constant SubstructureNotifyMask   #x00080000)
(constant SubstructureRedirectMask #x00100000)
(constant FocusChangeMask          #x00200000)
(constant PropertyChangeMask       #x00400000)
(constant ColormapChangeMask       #x00800000)
(constant OwnerGrabButtonMask      #x01000000)

;; Event Types

(constant KeyPress         2)
(constant KeyRelease       3)
(constant ButtonPress      4)
(constant ButtonRelease    5)
(constant MotionNotify     6)
(constant EnterNotify      7)
(constant LeaveNotify      8)
(constant FocusIn          9)
(constant FocusOut         10)
(constant KeymapNotify     11)
(constant Expose           12)
(constant GraphicsExpose   13)
(constant NoExpose         14)
(constant VisibilityNotify 15)
(constant CreateNotify     16)
(constant DestroyNotify    17)
(constant UnmapNotify      18)
(constant MapNotify        19)
(constant MapRequest       20)
(constant ReparentNotify   21)
(constant ConfigureNotify  22)
(constant ConfigureRequest 23)
(constant GravityNotify    24)
(constant ResizeRequest    25)
(constant CirculateNotify  26)
(constant CirculateRequest 27)
(constant PropertyNotify   28)
(constant SelectionClear   29)
(constant SelectionRequest 30)
(constant SelectionNotify  31)
(constant ColormapNotify   32)
(constant ClientMessage    33)
(constant MappingNotify    34)
(constant LASTEvent        35)

;; Window attribute value mask bits

(constant CWBackPixmap        #x00000001)
(constant CWBackPixel         #x00000002)
(constant CWBorderPixmap      #x00000004)
(constant CWBorderPixel       #x00000008)
(constant CWBitGravity        #x00000010)
(constant CWWinGravity        #x00000020)
(constant CWBackingStore      #x00000040)
(constant CWBackingPlanes     #x00000080)
(constant CWBackingPixel      #x00000100)
(constant CWOverrideRedirect  #x00000200)
(constant CWSaveUnder         #x00000400)
(constant CWEventMask         #x00000800)
(constant CWDontPropagate     #x00001000)
(constant CWColormap          #x00002000)  
(constant CWCursor            #x00004000)


(constant Button1 1)
(constant Button2 2)
(constant Button3 3)
(constant Button4 4)
(constant Button5 5)


;; Key Constants


(constant XK_BackSpace		#xFF08)
(constant XK_Tab			#xFF09)
(constant XK_Linefeed		#xFF0A)
(constant XK_Clear		        #xFF0B)
(constant XK_Return		#xFF0D)
(constant XK_Pause		        #xFF13)
(constant XK_Scroll_Lock	#xFF14)
(constant XK_Sys_Req		#xFF15)
(constant XK_Escape		#xFF1B)

(constant XK_Home			#xFF50)
(constant XK_Left			#xFF51)
(constant XK_Up			#xFF52)
(constant XK_Right		        #xFF53)
(constant XK_Down			#xFF54)
(constant XK_Prior		        #xFF55)
(constant XK_Page_Up		#xFF55)
(constant XK_Next			#xFF56)
(constant XK_Page_Down        #xFF56)
(constant XK_End			#xFF57)
(constant XK_Begin		        #xFF58)

(constant XK_Select		        #xFF60)
(constant XK_Print		        #xFF61)
(constant XK_Execute		#xFF62)
(constant XK_Insert		        #xFF63)
(constant XK_Undo			#xFF65)
(constant XK_Redo			#xFF66)
(constant XK_Menu			#xFF67)
(constant XK_Find			#xFF68)
(constant XK_Cancel		#xFF69)
(constant XK_Help			#xFF6A)
(constant XK_Break		        #xFF6B)
(constant XK_Mode_switch		#xFF7E)
(constant XK_script_switch        #xFF7E)
(constant XK_Num_Lock		#xFF7F)

(constant XK_KP_Add		#xFFAB)
(constant XK_KP_Subtract	#xFFAD)
(constant XK_KP_Decimal	#xFFAE)
(constant XK_KP_Divide		#xFFAF)

(constant XK_F1    #xFFBE)
(constant XK_F2    #xFFBF)
(constant XK_F3    #xFFC0)
(constant XK_F4    #xFFC1)
(constant XK_F5    #xFFC2)
(constant XK_F6    #xFFC3)
(constant XK_F7    #xFFC4)
(constant XK_F8    #xFFC5)
(constant XK_F9    #xFFC6)
(constant XK_F10  #xFFC7)
(constant XK_F11  #xFFC8)
(constant XK_F12  #xFFC9)

(constant XK_Shift_L   #xffe1)
(constant XK_Shift_R   #xffe2)
(constant XK_Control_L #xffe3)
(constant XK_Control_R #xffe4)
(constant XK_Alt_R     #xffe9)
(constant XK_Alt_L     #xffea)

(constant XK_Delete		#xFFFF)


(constant XK_space               #x020)
(constant XK_exclam              #x021)
(constant XK_quotedbl            #x022)
(constant XK_numbersign          #x023)
(constant XK_dollar              #x024)
(constant XK_percent             #x025)
(constant XK_ampersand           #x026)
(constant XK_apostrophe          #x027)
(constant XK_parenleft           #x028)
(constant XK_parenright          #x029)
(constant XK_asterisk            #x02a)

(constant XK_plus                #x02b)
(constant XK_comma               #x02c)
(constant XK_minus               #x02d)
(constant XK_period              #x02e)

(constant XK_slash               #x02f)
(constant XK_0                   #x030)
(constant XK_1                   #x031)
(constant XK_2                   #x032)
(constant XK_3                   #x033)
(constant XK_4                   #x034)
(constant XK_5                   #x035)
(constant XK_6                   #x036)
(constant XK_7                   #x037)
(constant XK_8                   #x038)
(constant XK_9                   #x039)
(constant XK_colon               #x03a)
(constant XK_semicolon           #x03b)
(constant XK_less                #x03c)
(constant XK_equal               #x03d)
(constant XK_greater             #x03e)
(constant XK_question            #x03f)

(constant XK_A                   #x041)
(constant XK_B                   #x042)
(constant XK_C                   #x043)
(constant XK_D                   #x044)
(constant XK_E                   #x045)
(constant XK_F                   #x046)
(constant XK_G                   #x047)
(constant XK_H                   #x048)
(constant XK_I                   #x049)
(constant XK_J                   #x04a)
(constant XK_K                   #x04b)
(constant XK_L                   #x04c)
(constant XK_M                   #x04d)
(constant XK_N                   #x04e)
(constant XK_O                   #x04f)
(constant XK_P                   #x050)
(constant XK_Q                   #x051)
(constant XK_R                   #x052)
(constant XK_S                   #x053)
(constant XK_T                   #x054)
(constant XK_U                   #x055)
(constant XK_V                   #x056)
(constant XK_W                   #x057)
(constant XK_X                   #x058)
(constant XK_Y                   #x059)
(constant XK_Z                   #x05a)

(constant XK_bracketleft         #x05b)
(constant XK_backslash           #x05c)
(constant XK_bracketright        #x05d)

(constant XK_a                   #x061)
(constant XK_b                   #x062)
(constant XK_c                   #x063)
(constant XK_d                   #x064)
(constant XK_e                   #x065)
(constant XK_f                   #x066)
(constant XK_g                   #x067)
(constant XK_h                   #x068)
(constant XK_i                   #x069)
(constant XK_j                   #x06a)
(constant XK_k                   #x06b)
(constant XK_l                   #x06c)
(constant XK_m                   #x06d)
(constant XK_n                   #x06e)
(constant XK_o                   #x06f)
(constant XK_p                   #x070)
(constant XK_q                   #x071)
(constant XK_r                   #x072)
(constant XK_s                   #x073)
(constant XK_t                   #x074)
(constant XK_u                   #x075)
(constant XK_v                   #x076)
(constant XK_w                   #x077)
(constant XK_x                   #x078)
(constant XK_y                   #x079)
(constant XK_z                   #x07a)

(constant XK_braceleft           #x07b)
(constant XK_bar                 #x07c)
(constant XK_braceright          #x07d)
(constant XK_asciitilde          #x07e)


(constant IsUnmapped   0)
(constant IsUnviewable 1)
(constant IsViewable   2)


(constant NotifyAncestor         0)
(constant NotifyVirtual          1)
(constant NotifyInferior         2)
(constant NotifyNonlinear        3)
(constant NotifyNonlinearVirtual 4)
(constant NotifyPointer          5)
(constant NotifyPointerRoot      6)
(constant NotifyDetailNone       7)


(constant CurrentTime 0)

(constant RevertToNone        None)
(constant RevertToPointerRoot PointerRoot)
(constant RevertToParent      2)

(constant ShiftMask		0)
(constant LockMask		1)
(constant ControlMask		2)
(constant Mod1Mask		3)
(constant Mod2Mask		4)
(constant Mod3Mask		5)
(constant Mod4Mask		6)
(constant Mod5Mask		7)

(c-type char       (native char))
(c-type char*      (pointer char))
(c-type int        (native int))
(c-type int*       (pointer int))
(c-type long       (native long))
(c-type long*      (pointer long))
(c-type uint       (native unsigned-int))
(c-type ulong      (native unsigned-long))
(c-type Bool       (native bool))
(c-type void       (native void))

(c-type char-string (native char-string))

(c-type Display    (native "Display"))
(c-type Display*   (pointer Display))
(c-type Screen     (native "Screen"))
(c-type Screen*    (pointer Screen))
(c-type Visual     (native "Visual"))
(c-type Visual*    (pointer Visual))
(c-type XID        (native unsigned-long))
(c-type Window     XID)
(c-type Drawable   XID)
(c-type Pixmap     XID)
(c-type Colormap   XID)
(c-type Cursor     XID)
(c-type KeySym     XID)
(c-type Time       (native unsigned-long))
(c-type Status     int)

(c-type KeyCode    (native unsigned-char))

(c-type Atom       XID)

(c-structure XSetWindowAttributes
  (Pixmap background_pixmap)
  (ulong background_pixel)
  (Pixmap border_pixmap)
  (ulong border_pixel)
  (int bit_gravity)
  (int win_gravity)
  (int backing_store)
  (ulong backing_planes)
  (ulong backing_pixel)
  (Bool save_under)
  (long event_mask)
  (long do_not_propagate_mask)
  (Bool override_redirect)
  (Colormap colormap)
  (Cursor cursor))

(c-structure XAnyEvent
  (int type)
  (ulong serial)    
  (Bool send_event)    
  (Display* display)
  (Window window))

(c-structure XButtonEvent 
  (int type)
  (ulong serial)
  (Bool send_event)
  (Display* display)
  (Window window)
  (Window root)
  (Window subwindow)
  (Time time)
  (int x)
  (int y)
  (int x_root)
  (int y_root)
  (uint state)
  (uint button)
  (Bool same_screen))

(c-structure XKeyEvent 
  (int type)
  (ulong serial)
  (Bool send_event)
  (Display* display)
  (Window window)
  (Window root)
  (Window subwindow)
  (Time time)
  (int x)
  (int y)
  (int x_root)
  (int y_root)
  (uint state)
  (uint keycode)
  (Bool same_screen))


(c-structure XMotionEvent 
  (int type)
  (ulong serial)
  (Bool send_event)
  (Display* display)
  (Window window)
  (Window root)
  (Window subwindow)
  (Time time)
  (int x)
  (int y)
  (int x_root)
  (int y_root)
  (uint state)
  (char is_hint)
  (Bool same_screen))


(c-structure XCrossingEvent 
  (int type)
  (ulong serial)
  (Bool send_event)
  (Display* display)
  (Window window)
  (Window root)
  (Window subwindow)
  (Time time)
  (int x)
  (int y)
  (int x_root)
  (int y_root)
  (int mode)
  (int detail)
  (Bool same_screen)
  (Bool focus)
  (uint state))


(c-structure XFocusChangeEvent
  (int type)
  (ulong serial)
  (Bool send_event)
  (Display* display)
  (Window window)
  (int mode)
  (int detail))


(c-structure XKeymapEvent
  (int type)
  (ulong serial)
  (Bool send_event)
  (Display* display)
  (Window window)
  (char key_vector 32))

(c-structure XExposeEvent
  (int type)
  (ulong serial)
  (Bool send_event)
  (Display* display)
  (Window window)
  (int x)
  (int y)
  (int width)
  (int height)
  (int count))


(c-structure XGraphicsExposeEvent
  (int type)
  (ulong serial)
  (Bool send_event)
  (Display* display)
  (Drawable drawable)
  (int x)
  (int y)
  (int width)
  (int height)
  (int count)
  (int major_code)
  (int minor_code))


(c-structure XNoExposeEvent
  (int type)
  (ulong serial)
  (Bool send_event)
  (Display* display)
  (Drawable drawable)
  (int major_code)
  (int minor_code))


(c-structure XVisibilityEvent
  (int type)
  (ulong serial)
  (Bool send_event)
  (Display* display)
  (Window window)
  (int state))

(c-structure XCreateWindowEvent
  (int type)
  (ulong serial)
  (Bool send_event)
  (Display* display)
  (Window parent)
  (Window window)
  (int x)
  (int y)
  (int width)
  (int height)
  (int border_width)
  (Bool override_redirect))

(c-structure XDestroyWindowEvent
  (int type)
  (ulong serial)
  (Bool send_event)
  (Display* display)
  (Window event)
  (Window window))


(c-structure XUnmapEvent
  (int type)
  (ulong serial)
  (Bool send_event)
  (Display* display)
  (Window event)
  (Window window)
  (Bool from_configure))

(c-structure XMapEvent
  (int type)
  (ulong serial)
  (Bool send_event)
  (Display* display)
  (Window event)
  (Window window)
  (Bool override_redirect))

(c-structure XMapRequestEvent
  (int type)
  (ulong serial)
  (Bool send_event)
  (Display* display)
  (Window parent)
  (Window window))

(c-structure XReparentEvent
  (int type)
  (ulong serial)
  (Bool send_event)
  (Display* display)
  (Window event)
  (Window window)
  (Window parent)
  (int x)
  (int y)
  (Bool override_redirect))

(c-structure XConfigureEvent
  (int type)
  (ulong serial)
  (Bool send_event)
  (Display* display)
  (Window event)
  (Window window)
  (int x)
  (int y)
  (int width)
  (int height)
  (int border_width)
  (Window above)
  (Bool override_redirect))

(c-structure XGravityEvent
  (int type)
  (ulong serial)
  (Bool send_event)
  (Display* display)
  (Window event)
  (Window window)
  (int x)
  (int y))


(c-structure XResizeRequestEvent
  (int type)
  (ulong serial)
  (Bool send_event)
  (Display* display)
  (Window window)
  (int width)
  (int height))


(c-structure XConfigureRequestEvent
  (int type)
  (ulong serial)
  (Bool send_event)
  (Display* display)
  (Window parent)
  (Window window)
  (int x)
  (int y)
  (int width)
  (int height)
  (int border_width)
  (Window above)
  (int detail)
  (ulong value_mask))

(c-structure XCirculateEvent
  (int type)
  (ulong serial)
  (Bool send_event)
  (Display* display)
  (Window event)
  (Window window)
  (int place))


(c-structure XCirculateRequestEvent
  (int type)
  (ulong serial)
  (Bool send_event)
  (Display* display)
  (Window parent)
  (Window window)
  (int place))

(c-structure XPropertyEvent
  (int type)
  (ulong serial)
  (Bool send_event)
  (Display* display)
  (Window window)
  (Atom atom)
  (Time time)
  (int state))

(c-structure XSelectionClearEvent
  (int type)
  (ulong serial)
  (Bool send_event)
  (Display* display)
  (Window window)
  (Atom selection)
  (Time time))


(c-structure XSelectionRequestEvent
  (int type)
  (ulong serial)
  (Bool send_event)
  (Display* display)
  (Window owner)
  (Window requestor)
  (Atom selection)
  (Atom target)
  (Atom property)
  (Time time))

(c-structure XSelectionEvent
  (int type)
  (ulong serial)
  (Bool send_event)
  (Display* display)
  (Window requestor)
  (Atom selection)
  (Atom target)
  (Atom property)
  (Time time))

(c-structure XColormapEvent
  (int type)
  (ulong serial)
  (Bool send_event)
  (Display* display)
  (Window window)
  (Colormap colormap)
  (Bool new)
  (int state))

(c-type XClientMessageEvent  (native "XClientMessageEvent"))
(c-type XClientMessageEvent* (pointer XClientMessageEvent))
(c-type XMappingEvent        (native "XMappingEvent"))
(c-type XMappingEvent*       (pointer XMappingEvent))
(c-type XErrorEvent          (native "XErrorEvent"))
(c-type XErrorEvent*         (pointer XErrorEvent))


(c-union XEvent
         (int type)
         (XAnyEvent xany embed)
         (XKeyEvent xkey embed)
         (XButtonEvent xbutton embed)
         (XMotionEvent xmotion embed)
         (XCrossingEvent xcrossing embed)
         (XFocusChangeEvent xfocus embed)
         (XExposeEvent xexpose embed)
         (XGraphicsExposeEvent xgraphicsexpose embed)
         (XNoExposeEvent xnoexpose embed)
         (XVisibilityEvent xvisibility embed)
         (XCreateWindowEvent xcreatewindow embed)
         (XDestroyWindowEvent xdestroywindow embed)
         (XUnmapEvent xunmap embed)
         (XMapEvent xmap embed)
         (XMapRequestEvent xmaprequest embed)
         (XReparentEvent xreparent embed)
         (XConfigureEvent xconfigure embed)
         (XGravityEvent xgravity embed)
         (XResizeRequestEvent xresizerequest embed)
         (XConfigureRequestEvent xconfigurerequest embed)
         (XCirculateEvent xcirculate embed)
         (XCirculateRequestEvent xcirculaterequest embed)
         (XPropertyEvent xproperty embed)
         (XSelectionClearEvent xselectionclear embed)
         (XSelectionRequestEvent xselectionrequest embed)
         (XSelectionEvent xselection embed)
         (XColormapEvent xcolormap embed)
         (XClientMessageEvent xclient embed)
         (XMappingEvent xmapping embed)
         (XErrorEvent xerror embed)
         (XKeymapEvent xkeymap embed)
         (long pad 24))


(c-structure  XWindowAttributes
  (int x)
  (int y)
  (int width)
  (int height)
  (int border_width)
  (int depth)
  (Visual* visual)
  (Window root)
  (int class)
  (int bit_gravity)
  (int win_gravity)
  (int backing_store)
  (ulong backing_planes)
  (ulong backing_pixel)
  (Bool save_under)
  (Colormap colormap)
  (Bool map_installed)
  (int map_state)
  (long all_event_masks)
  (long your_event_mask)
  (long do_not_propagate_mask)
  (Bool override_redirect)
  (Screen* screen))


(c-external void         (XClearArea             Display* Window int int uint uint Bool))
(c-external Display*     (XOpenDisplay           char*))
(c-external int          (XCloseDisplay          Display*))
(c-external int          (XDefaultScreen         Display*))
(c-external Screen*      (XScreenOfDisplay       Display* int))
(c-external Window       (XRootWindow            Display* int))
(c-external ulong        (XBlackPixel            Display* int))
(c-external ulong        (XWhitePixel            Display* int))
(c-external Window       (XCreateSimpleWindow    Display* Window int int uint uint uint ulong ulong))
(c-external int          (XMapWindow             Display* Window))
(c-external int          (XFlush                 Display*))
(c-external Visual*      (XDefaultVisual         Display* int))
(c-external void         (XNextEvent             Display* XEvent*))
(c-external void         (XSelectInput           Display* Window long))
(c-external void         (XDestroyWindow         Display* Window))
(c-external void         (XUnmapWindow           Display* Window))
(c-external Window       (XCreateWindow          Display* Window int int uint uint uint int uint Visual* ulong XSetWindowAttributes*))
(c-external Status       (XGetWindowAttributes   Display* Window XWindowAttributes*))
(c-external void         (XMoveWindow            Display* Window int int))
(c-external void         (XResizeWindow          Display* Window uint uint))
(c-external KeyCode      (XKeysymToKeycode       Display* KeySym))
(c-external KeySym       (XKeycodeToKeysym       Display* KeyCode int))
(c-external void         (XReparentWindow        Display* Window Window int int))
(c-external void         (XSetInputFocus            Display* Window int Time))
(c-external int           (XPending                      Display*))
(c-external void        (XRaiseWindow              Display* Window))
(c-external void        (XDestroyWindow          Display* Window))
(c-external void        (XSync                           Display* Bool))
(c-external void        (XSynchronize               Display* Bool))
(c-external void        (XBell                             Display* int))
(c-external ulong     (XWhitePixel                   Display* int))


(definition int-array-ref
  (c-function (int* int) int
    "___result = *(___arg1 + ___arg2);"))


(definition (XTranslateCoordinates disp src_win dst_win x y)
  (let ((pt ((c-function (Display* Window Window int int) int*
                  "int *point = malloc(2*sizeof(int));
                  Window tmp;
                  XTranslateCoordinates( ___arg1, ___arg2, ___arg3, ___arg4, ___arg5, point, point+1, &tmp);
                  ___result_voidstar = point;") disp src_win dst_win x y)))
      (values (int-array-ref pt 0) (int-array-ref pt 1))))


(definition XGetChildHandle 
  (c-function (Display* Window) Window
    "Window root;
     Window parent;
     Window *children;
     unsigned int num;
     Window ret;
     XQueryTree( ___arg1, ___arg2, &root, &parent, &children, &num);
     ret = num != 0 ? *(children+num-1) : 0;
     if( num != 0) { XFree(children); }
     ___result = ret;"))

(definition XKeyDown? 
  (c-function (Display* int) Bool
    "char keys[32];
     XQueryKeymap(___arg1, keys);
     ___result = keys[___arg2/8] & (1 << (___arg2%8));"))

(definition (XQueryPointer disp win)
  (let ((coords ((c-function (Display* Window) int*
                          "int *coords = calloc(2, sizeof(int));
                           Window x,y;
                           int a,b;
                           unsigned int c;
                           XQueryPointer( ___arg1, ___arg2, &x, &y, coords, coords+1, &a, &b, &c);
                           ___result_voidstar = coords;") disp win)))
     (values (int-array-ref coords 0) (int-array-ref coords 1))))


(definition XInvalidateRect
  (c-function (Display* Window int int int int) void
    "XEvent exp;
     exp.xexpose.type = Expose;
     exp.xexpose.window = ___arg2;
     exp.xexpose.x = ___arg3;
     exp.xexpose.y = ___arg4;
     exp.xexpose.width = ___arg5;
    exp.xexpose.height = ___arg6;
    exp.xexpose.count = 0;
    XSendEvent( ___arg1, ___arg2, True, ExposureMask, &exp );"))


(definition (XGetInputFocus display)
  (let ((ret ((c-function (Display*) int*
                  "Window win;
                   int *ret = calloc(2, sizeof(int));
                   XGetInputFocus(___arg1, &win, ret+1);
                   *ret = (int)win;
                   ___result_voidstar = ret;") display)))
    (values (int-array-ref ret 0) (int-array-ref ret 1))))

;; Add timer
(definition (XGetClipboardString display window)
  ((c-function (Display* Window) void
     "Atom XA_CLIPBOARD = XInternAtom( ___arg1, \"CLIPBOARD\", 0);
      XConvertSelection(___arg1, XA_CLIPBOARD, XA_STRING, None, ___arg2, CurrentTime);")
      display window)
  ((c-function (Display* Window) char-string
                     "
                      Atom prop;
                      XEvent ev_ret;
                     char *val = \"\";
                     unsigned char *ret;
                     int i;
                     int format;
                     Atom type;
                     unsigned long nitems;
                     unsigned long bar;
                     Bool retb = False;
                     for( i = 0; i < 2000; i++ ) {
                        retb = XCheckTypedEvent(___arg1,SelectionNotify,&ev_ret);
                        if( retb == True ) break;
                     }
                     if( retb == True) {
                        val = \"prop\";
                        prop = ev_ret.xselection.property;
                        if (prop != None)  {
                          XGetWindowProperty( ___arg1, ___arg2, prop, 0, 100000, False, XA_STRING, &type, &format,&nitems, &bar, &ret);
                          val = (char*)ret;
                        }
                     }
                     ___result = val;")
       display window))

(definition default-x11-display (XOpenDisplay #f)))
