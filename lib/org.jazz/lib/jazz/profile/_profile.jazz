;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Profile
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.profile jazz


(export (jazz.profile.autoload))
(import (jazz.profile.autoload)
        (jazz.catalog)
        (jazz.io)
        (jazz.utilities))


;;;
;;;; Profiles
;;;


(definition Profile-Classes
  (make-table test: eq?))


(definition public (get-profile-class name)
  (table-ref Profile-Classes name #f))


(definition public (require-profile-class name)
  (or (get-profile-class name)
      (jazz.error "Unable to find profile class: {s}" name)))


(definition public (set-profile-class name class)
  (table-set! Profile-Classes name class))


(definition public (register-profile-class class)
  (set-profile-class (identifier-name (type-name class)) class))


(definition public (load-profile-class module)
  (load-module module)
  (require-profile-class (identifier-name module)))


;;;
;;;; Catalogs
;;;


(definition public (setup-catalog name directory extensions (char-encoding: char-encoding {}) (heuristics: heuristics '()))
  (let ((cataloguer (get-cataloguer~ (get-application)))
        (output (new-file~ {Directory Profile "catalogs"} (format "{a}.jcat" name))))
    (let ((catalog (new Indexed-Catalog name output directory extensions char-encoding heuristics #t #t #t)))
      (add-catalog~ cataloguer catalog)
      (load-content~ catalog)))))
