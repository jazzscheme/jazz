;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Repository
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.repository jazz


(export (jazz.repository.autoload))
(import (jazz.repository.autoload))


(definition Repositories
  (make-table test: equal?))


;;;
;;;; Preferences
;;;


(definition (preferences)
  (let ((appl (get-application)))
    (get-repositories-preferences~ appl)))


(definition (repository-preferences name (pref (preferences)))
  (when pref
    (find-component~ pref name)))


(definition public (reload-preferences pref)
  (let ((name (get-name~ pref)))
    (remove-repository name error?: #f)))


(definition public (remove-preferences pref)
  (let ((name (get-name~ pref)))
    (remove-repository name error?: #f)))


;;;
;;;; Repositories
;;;


(definition (add-repository pref)
  (let ((name (get-name~ pref)))
    (when (get-repository name)
      (remove-repository name))
    (let ((repository (instantiate-preferences pref)))
      (table-set! Repositories name repository))))


(definition (remove-repository name (error?: error? #t))
  (if (not (get-repository name))
      (when error?
        (error "Unable to find repository {a}" name))
    (table-clear Repositories name)))


;;;
;;;; Active Repository
;;;


(definition public (require-repository (name {}))
  (either (get-repository name)
          (if (null? name)
              (error "No repository is currently active")
            (error "Unable to find repository: {t}" name))))


(definition public (get-repository (name {}))
  (let* ((pref (preferences))
         (name (either name (essay pref (get-active~ pref)))))
    (when name
      (either (table-ref Repositories name #f)
              (let ((pref (repository-preferences name pref)))
                (when (and pref (get-active?~ pref))
                  (let ((repository (instantiate-preferences pref)))
                    (table-set! Repositories name repository))))))))


;;;
;;;; New Repository
;;;


(definition public (instantiate-preferences pref)
  (let ((appl (get-application))
        (class (repository-class~ pref))
        (name (get-name~ pref)))
    (new-repository~ class pref name)))


(definition public (new-repository class pref name)
  (new class name: name))


;;;
;;;; Repositories
;;;


(definition public (for-each-repository-preferences proc)
  (let ((pref (preferences)))
    (when pref
      (for-each proc (get-children~ pref)))))


(definition public (find-repository pathname)
  (continuation-capture
    (function (return)
      (for-each-repository-preferences
        (function (pref)
          (when (in-repository?~ pref pathname)
            (continuation-return return (get-repository (get-name~ pref))))))
      {})))


(definition public (find-moniker pathname)
  (let ((repository (find-repository pathname)))
    (essay repository
           (new Repository-Moniker repository (file->path~ repository pathname))))))
