;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Repository Moniker
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2007
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.repository.manager.Repository-Moniker jazz


(import (jazz.io)
        (jazz.library)
        (jazz.platform)
        (jazz.repository)
        (jazz.utilities))


(class Repository-Moniker metaclass Moniker-Class extends Moniker
  
  
  (slot repository)
  (slot path)
  
  
  @convert-literal
  (method meta (construct-literal context repository path)
    (let ((item (new self repository path)))
      item))


  (method (compare-object target)
    (cond ((is-not? target Repository-Moniker)
           :incompatible)
          ((and (eq? repository (get-repository~ target))
                (equal? path (get-path~ target)))
           :equal)
          (else
           :not-equal)))
  
  
  (method (print printer readably)
    (print-unreadable self printer
      (function (printer)
        (format printer "{s} {s}"
          repository
          path))))
  
  
  ;;;
  ;;;; Protocol
  ;;;
  
  
  @convert
  (method meta (get-protocol)
    'item)
  
  
  @convert
  (method meta (new-moniker list)
    (assert (= 1 (length list)))
    (new self (car list)))
  
  
  (method (present)
    (format "{s}" path))
  
  
  ;;;
  ;;;; Initialization
  ;;;
  
  
  (method (initialize repository path)
    (nextmethod)
    (set! repository~self repository)
    (set! path~self path))
  
    
  ;;;
  ;;;; Content
  ;;;
  
  
  (method (get-content (nodes?: nodes? #t) (leaves?: leaves? #t))
    @convert-what-is-get-repository-item???
    (with-closed ((item (get-repository-item))
                  (items (get-content~ item nodes?: nodes? leaves?: leaves?)))
      (map (function (item)
             (new Repository-Moniker repository (get-path~ item)))
           items)))
  
  
  (method (get-children (nodes?: nodes? #t) (leaves?: leaves? #t))
    (get-content nodes?: nodes? leaves?: leaves?))
  
    
  ;;;
  ;;;; Pathname 
  ;;;
 
  
  (method public (get-list)
    path)
    
  
  ;;;
  ;;;; Input/Output
  ;;;


  (method (load-lines)
    )

  
  ;;;
  ;;;; Access
  ;;;


  (method public (get-repository)
    repository)

  
  (method public (get-path)
    path)))
