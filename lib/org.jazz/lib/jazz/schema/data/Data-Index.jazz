;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Data Indexes
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.schema.data.Data-Index jazz


(import (jazz.library)
        (jazz.schema)
        (jazz.utilities))


(class Data-Index extends Data-Object
  
  
  @convert-literal
  (method meta (construct-literal context name properties)
    (new self name: name properties: properties))
  
  
  ;;;
  ;;;; Print
  ;;;
  
  
  (method protected (print-schema printer)
    (format printer "~{{s} {s} {s list?: #t}}"
            (identifier-name (type-name (class-of self)))
            name
            properties))
  
  
  ;;;
  ;;;; Object
  ;;;
  
  
  (method (get-kind)
    'index)
  
  
  ;;;
  ;;;; Access
  ;;;
  
  
  (method (property-names)
    '(unique? clustered? ignore-duplicates? recompute-statistics? fill-factor pad-index? fields/orders))
  
  
  (method (present-property property value)
    (case property
      ((fields/orders) (format "{l detail: :human separator: \", \"}" (map (function (field/order) (format "{a} {a}" (first field/order) (second field/order))) value)))
      (else (nextmethod property value))))))
