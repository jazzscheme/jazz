(library jazz.system jazz


(export (jazz.system.autoload)
        (jazz.system.platform.windows (cond windows))
        (jazz.system.platform.x11 (cond x11)))

(import (jazz.io)
        (jazz.platform)
        (jazz.system.autoload))


;;;
;;;; Boot
;;;


(definition App-Table
  (make-table test: eq?))


(definition public (register-app name maker)
  (table-set! App-Table name maker))


(definition public (get-registered-app name)
  (or (table-ref App-Table name #f)
      (error "Unable to find registered app: {s}" name)))


(definition public (boot-app name)
  (let ((maker (get-registered-app name)))
    (maker)))


;;;
;;;; Aliases
;;;


;; (initialize-aliases)


;;;
;;;; Platform
;;;


(definition public Mac
  0)

(definition public Unix
  1)

(definition public Win32
  2)


;;;
;;;; Line Ending
;;;


(definition public Mac-Ending
  0)

(definition public Unix-Ending
  1)

(definition public Windows-Ending
  2)


;;;
;;;; Arguments
;;;


;; convert
(definition public (command-argument name)
  #f)


(definition public (pathname-argument name)
  (let ((arg (command-argument name)))
    (if (not arg)
        #f
      (tokenise
        (if (= (element arg 0) #\double-quote)
            (subseq arg 1 (- (length arg) 1))
          arg)))))


;;;
;;;; Properties
;;;


;; all this needs to be converted / implemented


(definition public (reload-system-properties)
  (unimplemented 'reload-system-properties))


(definition public (get-system-properties)
  (unimplemented 'get-system-properties))


(definition public (get-system-property name)
  #f)


(definition public (set-system-property name value)
  (unimplemented 'set-system-property))


(definition public (require-system-property name)
  #f)


;;;
;;;; Sound
;;;


(definition public (play-sound sound (asynchronous?: asynchronous? #t))
  @platform-dependant
  (let ((async-bit (if asynchronous? SND_ASYNC SND_SYNC)))
    (if (file? sound)
        (PlaySound (parse~ sound) NULL (bitwise-ior SND_FILENAME async-bit))
      (PlaySound sound NULL async-bit)))))
