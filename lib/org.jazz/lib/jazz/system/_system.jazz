(library jazz.system jazz


(export (jazz.system.platform.carbon  (cond carbon))
        (jazz.system.platform.windows (cond windows))
        (jazz.system.platform.x11     (cond x11)))

(import (jazz.io))


;;;
;;;; Aliases
;;;


(definition public (initialize-aliases)
  (new-alias 'Network "\\")
  (new-alias 'Home '("~"))
  (new-alias 'Boot (tokenise-patch (pathname-normalize jazz-install)))
  (new-alias 'Jazz (tokenise-patch (pathname-normalize jazz-source)))
  (new-alias 'org.jazz '(Jazz "lib" "org.jazz"))
  (new-alias 'org.jedi '(Jazz "lib" "org.jedi"))
  (new-alias 'Launch (get-launch-dir))
  (new-alias 'Profiles-Package '(Home ".jazz" "lib" "profiles"))
  (new-alias 'Profiles '(Profiles-Package "profile")))


(definition (get-launch-dir)
  (let ((path (pathname-argument "launchdir")))
    (if path
        (validate-alias 'Launch path)
      (list 'org.jedi "lib" "jedi"))))


(definition (validate-alias name path)
  (if (exists?~ (new Directory path))
      path
    (error "Unable to set alias {t} to inexistant directory: {t}" name path)))


;;;
;;;; Platform
;;;


(definition public Mac
  0)

(definition public Unix
  1)

(definition public Win32
  2)


;;;
;;;; Line Ending
;;;


(definition public Mac-Ending
  0)

(definition public Unix-Ending
  1)

(definition public Windows-Ending
  2)


;;;
;;;; Arguments
;;;


;; convert
(definition public (command-argument name)
  #f)


(definition public (pathname-argument name)
  (let ((arg (command-argument name)))
    (if (not arg)
        #f
      (tokenise
        (if (= (element arg 0) #\double-quote)
            (subseq arg 1 (- (length arg) 1))
          arg)))))


;;;
;;;; Properties
;;;


;; all this needs to be converted / implemented


(definition public (reload-system-properties)
  (unimplemented 'reload-system-properties))


(definition public (get-system-properties)
  (unimplemented 'get-system-properties))


(definition public (get-system-property name)
  #f)


(definition public (set-system-property name value)
  (unimplemented 'set-system-property))


(definition public (require-system-property name)
  #f))
