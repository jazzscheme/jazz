;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Windows Clipboard
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.ui.clipboard.platform.windows jazz


(import (jazz.library)
        (jazz.platform))


;;;
;;;; Text
;;;


(definition public (get-clipboard-text (format: format CF_UNICODETEXT))
  (with-opened-clipboard
    (function ()
      (let ((u8vect (GetClipboardText (get-clipboard-format format))))
        (if (not (u8vector? u8vect))
            #f
          (call-with-input-u8vector (list init: u8vect char-encoding: 'UCS-2 eol-encoding: 'cr-lf)
            (function (input)
              (read-line input #f))))))))


(definition public (set-clipboard-text text (format: format CF_UNICODETEXT))
  (with-opened-clipboard
    (function ()
      (let ((output (open-output-u8vector (list char-encoding: 'UCS-2 eol-encoding: 'cr-lf))))
        (display text output)
        (let ((u8vect (get-output-u8vector output)))
          (SetClipboardText u8vect (get-clipboard-format format)))))
    empty?: #t))


;;;
;;;; Metafile
;;;


(definition public (get-clipboard-metafile)
  (unimplemented 'get-clipboard-metafile)
  @convert
  (with-opened-clipboard
    (function ()
      (GetClipboardData CF_ENHMETAFILE))))


(definition public (set-clipboard-metafile metafile)
  (unimplemented 'set-clipboard-metafile)
  @convert
  (with-opened-clipboard
    (function ()
      (SetClipboardData CF_ENHMETAFILE metafile))
    empty?: #t))


;;;
;;;; Open/Close
;;;


(definition public (with-opened-clipboard proc (empty?: empty? #f))
  (let ((opened? #f))
    (unwind-protect
        (begin
          (OpenClipboard NULL)
          (set! opened? #t)
          (when empty?
            (EmptyClipboard))
          (proc))
      (when opened?
        (CloseClipboard)))))


;;;
;;;; Formats
;;;


(definition Formats
  (make-table test: eq?))


(definition public (register-clipboard-format name format)
  (let ((id (RegisterClipboardFormat format)))
    (table-set! Formats name id)))


(definition (get-clipboard-format format)
  (if (integer? format)
      format
    (either (table-ref Formats format #f)
            (error "Unknown clipboard format: {t}" format))))


(definition public (clipboard-format-available? format)
  (member? (get-clipboard-format format) (available-clipboard-formats)))


(definition public (available-clipboard-formats)
  (with-opened-clipboard
    (function ()
      (let ((formats (new List-Factory)))
        (let (iter (previous 0))
          (let ((format (EnumClipboardFormats previous)))
            (when (/= format 0)
              (put~ formats format)
              (iter format))))
        (get-output~ formats))))))
