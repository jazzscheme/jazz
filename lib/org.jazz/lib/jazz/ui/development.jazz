;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; UI Development
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2007
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.ui.development jazz


(import (jazz.development)
        (jazz.ui)
        (jazz.ui.clipboard)
        (jazz.ui.dialog)
        (jazz.ui.window)
        (jazz.ui.view)
        (jazz.ui.workspace)
        (jazz.utilities))


;;;
;;;; Window
;;;


;;;
;;;; View-Player
;;;


@convert
(method (debug-window pos)
  (let ((view (find-drawing~ root pos)))
    (if (not view)
        (nextmethod pos)
      (view-debug~ view (acquire~ view root pos)))))


@convert
(method (describe-window pos)
  (let ((view (find-drawing~ root pos)))
    (when view
      (view-describe~ view (acquire~ view root pos)))))


;;;
;;;; View
;;;


(generic (view-debug (<View> view) pos)
  (let* ((root (get-root~ view))
         (player (get-player~ view))
         (guest (and (is? player View-Host) (get-guest~ player))))
    (set-% view)
    (set-%m pos)
    (set-%r root)
    (set-%h player)
    (set-%g guest)))


(generic (view-describe (<View> view) pos)
  (list
    (list "Class" (class-of view))
    (list "Name" (get-name~ view))
    (list "Position" (get-position~ view))
    (list "Size" (get-size~ view))
    (list "Mouse" pos)
    (list "Action" (get-action~ view))
    (list "Action Handler" (get-action-handler~ view))))


;; State as in the state that the view and it's associated objects must maintain
;; in synch to have a coherent state. State can be a big source of headaches...
(generic (view-describe-state (<View> view) pos)
  #f)


@convert
(definition (view-outline view)
  (let* ((display (new Columns-Display))
         (classes (new Indented-Column display))
         (properties (new Aligned-Column display border: 3)))
    (for-each-descendant
      (function (view level)
        (when (is? view View)
          (let ((type (type-name (class-of view)))
                (lie (get-lie~ view))
                (position (get-position~ view))
                (size (get-size~ view)))
            (output~ classes type level)
            (output~ properties (format "~{Point {a width: 4 justify: :right} {a width: 4 justify: :right}}   ~{Point {a width: 4 justify: :right} {a width: 4 justify: :right}}   ~{Dimension {a width: 4 justify: :right} {a width: 4 justify: :right}}"
                                        (get-h~ lie)
                                        (get-v~ lie)
                                        (get-h~ position)
                                        (get-v~ position)
                                        (get-width~ size)
                                        (get-height~ size)))
            (newline~ display)))))
    (print-to~ display (list classes properties) :console)
    (format :console "{%}")
    {}))


;;;
;;;; Image-Tool
;;;


(specific (view-describe (<Image-Tool> view) pos)
  (append (nextmethod view pos)
          (list
            (list "Image Name" (get-image-name~ view))
            (list "Disabled Image Name" (get-disabled-image-name~ view)))))


;;;
;;;; Label-Item
;;;


(specific (view-describe (<Label-Item> view) pos)
  (append (nextmethod view pos)
          (list
            (list "Icon" (get-icon~ view)))))


;;;
;;;; Outline-View
;;;


(specific (view-debug (<Outline-View> view) pos)
  (nextmethod view pos)
  (let* ((v (get-v~ pos))
         (r (v->row~ view v)))
    (when r
      (let ((row (get-row~ view r)))
        (set-%r row)))))


(specific (view-describe (<Outline-View> view) pos)
  (append (nextmethod view pos)
          (list
            (list "Visible Count" (get-visible-count~ view))
            (list "Visible Width" (get-visible-width~ view))
            (list "Visible Height" (get-visible-height~ view))
            (list "First Displayed" (get-first-displayed~ view))
            (list "First Displayed Rank" (get-first-displayed-rank~ view))
            (list "First Displayed Offset" (get-first-displayed-offset~ view)))))


;;;
;;;; Text-View
;;;


(specific (view-debug (<Text-View> view) pos)
  (nextmethod view pos)
  (let* ((start (get-start~ view))
         (end (get-end~ view))
         (paragraph (get-paragraph~ view (get-row~ start))))
    (set-%r (get-selection~ view))
    (set-%s start)
    (set-%e end)
    (set-%p paragraph)
    (set-%f (get-format~ paragraph))
    (set-%n (get-line-at~ paragraph (get-col~ start)))
    (set-%y (get-style-at~ view start))
    (set-%k (get-moniker~ view))
    (set-%c (get-controller~ view))))


(specific (view-describe (<Text-View> view) pos)
  (append (nextmethod view pos)
          (list
            (list "Selection" (format "{s} {s}" (get-start~ view) (get-end~ view))))))


;;;
;;;; Tree-View
;;;


(specific (view-debug (<Tree-View> view) pos)
  (nextmethod view pos)
  (let ((cell (view->tree~ view pos)))
    (when cell
      (let* ((pos (cell-coordinates~ view cell pos))
             (column (get-column~ view (get-col~ cell)))
             (row (get-row~ view (get-row~ cell)))
             (node (car (get-children~ row)))
             (user-data (get-user-data~ row)))
        (receive (cell part) (get-debugged~ column cell pos)
          (let ((data (get-cell-data~ view cell)))
            (set-%c cell)
            (set-%d data)
            (set-%n node)
            (set-%o column)
            (set-%p part)
            (set-%r row)
            (set-%u user-data)))))))


(specific (view-describe (<Tree-View> view) pos)
  (append (nextmethod view pos)
          (let ((cell (view->tree~ view pos)))
            (when cell
              (let* ((pos (cell-coordinates~ view cell pos))
                     (column (get-column~ view (get-col~ cell)))
                     (row (get-row~ view (get-row~ cell)))
                     (node (car (get-children~ row)))
                     (user-data (get-user-data~ row)))
                (receive (cell part) (get-debugged~ column cell pos)
                  (let ((data (get-cell-data~ view cell)))
                    (list
                      (list "Node Column" (get-node-column~ view))
                      (list "Columns Borders" (get-columns-borders~ view))
                      (list "Columns Right" (get-columns-right~ view))
                      (list "User Data" user-data)
                      (list "Image" (get-image~ node)))))))))))
