;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Directory Request
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2007
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.ui.dialog.Directory-Request jazz


(import (jazz.io)
        (jazz.jml)
        (jazz.library)
        (jazz.literals)
        (jazz.ui)
        (jazz.ui.view)
        (jazz.utilities))


(class Directory-Request extends Pathname-Request
  
  
  (method meta (host-title)
    "Choose Directory")
  

  ;;;
  ;;;; Update
  ;;;
  
  
  (method (update-content)
    (let ((directories (get-content~ directory nodes?: #t leaves?: #f))
          (files (get-content~ directory nodes?: #f leaves?: #t)))
      (let ((tree (get-tree)))
        (define (add-pathname pathname)
          (let ((title (get-name~ pathname))
                (image (if (directory? pathname) {Bitmap-Resource "ClosedFolder"} {Bitmap-Resource "Document"})))
            (add-row~ tree children: (list (new Tree-Node title: title image: image)) user-data: pathname)))
        
        (with-update-locked~ tree
          (function ()
            (remove-every-row~ tree)
            (for-each add-pathname directories)
            (for-each add-pathname files))))))
  
  
  (method (update-open)
    (let ((pathname (selected-pathname)))
      (set-enabled?~ (locate 'open) (file? pathname))))
  

  ;;;
  ;;;; Events
  ;;;
  
  
  (method (default-action)
    (let ((pathname (selected-pathname)))
      (cond ((directory? pathname)
             (down pathname))
            ((file? pathname)
             (end-modal~ (get-host) (get-modal-result))))))))
