;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; File Request
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.ui.dialog.File-Request jazz


(import (jazz.io)
        (jazz.jml)
        (jazz.library)
        (jazz.literals)
        (jazz.ui)
        (jazz.ui.view)
        (jazz.utilities))


(class File-Request extends Pathname-Request
  
  
  (form
    (<install>
      (<!>       name: buttonbar
        (<!>     name: ok        title: "Open"))))
  
  
  (method meta (host-title)
    "Choose File")
  
  
  (property multiple-selection? initialize #f)
  
  
  (method (finish rest)
    (nextmethod rest)
    (set-multiple-selection?~ (get-tree) multiple-selection?))
  

  ;;;
  ;;;; Update
  ;;;
  
  
  (method (update-content)
    (let ((directories (get-content~ directory nodes?: #t leaves?: #f))
          (files (get-content~ directory nodes?: #f leaves?: #t)))
      (let ((tree (get-tree)))
        (define (add pathname)
          (add-pathname tree pathname))
        
        (with-update-locked~ tree
          (function ()
            (remove-every-row~ tree)
            (for-each add directories)
            (for-each add files))))))
  
  
  (method (update-buttons)
    (let ((pathnames (selected-pathnames)))
      (set-enabled?~ (locate 'ok) (and (not-null? pathnames) (every? file? pathnames)))))
    

  ;;;
  ;;;; Modal
  ;;;
  
  
  (method (get-modal-result)
    (current-directory (parse~ directory))
    (if multiple-selection?
        (map anchorize (selected-pathnames))
      (anchorize (selected-pathname))))


  ;;;
  ;;;; Events
  ;;;
  
  
  (method (default-action)
    (let ((pathnames (selected-pathnames)))
      (cond ((and (= (length pathnames) 1) (directory? (car pathnames)))
             (down (car pathnames)))
            ((ok-enabled?)
             (end-modal~ (get-host) (get-modal-result))))))
  

  ;;;
  ;;;; Utility
  ;;;
  
  
  (method (selected-pathnames)
    (get-selected-data~ (get-tree)))))
