;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Host Frame
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2007
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.ui.hosting.Host-Frame jazz


(import (jazz.library)
        (jazz.ui)
        (jazz.ui.view)
        (jazz.ui.window)
        (jazz.ui.workspace)
        (jazz.utilities)
        (jazz.platform))


(class Host-Frame extends Frame implements View-Host
  
  
  (property guest initialize {} getter get-guest setter set-guest)
  
  
  (slot workspace initialize {})
  
  
  (method (install rest)
    (nextmethod rest)
    (set-layout-type~ (get-content~ root) 'fill))
  
  
  (method (destroy-component)
    (close-guest)
    (nextmethod))
  
  
  (method (close-guest)
    (when guest
      (let ((view guest))
        (set-guest {})
        (close~ view))))
  
  
  (method (new-root)
    (new Frame-Root))

  
  ;;;
  ;;;; Access
  ;;;
  
  
  (method public (get-guest)
    guest)
  
  
  (method public (set-guest view)
    (when (neq? view guest)
      (when guest
        (uninstall-guest))
      (set! guest view)
      (when guest
        (install-guest))))


  (method public (get-workspace)
    workspace)


  (method public (set-workspace value)
    (set! workspace value))
  
  
  ;;;
  ;;;; Guest
  ;;;
  
  
  (method protected virtual (install-guest)
    (let ((content (get-content~ root)))
      (set-parent~ guest content)
      (set-position~ guest {Point 0 0})
      (set-size~ guest (get-size~ content))
      (install-in-host~ guest self)))
  
  
  (method protected virtual (uninstall-guest)
    (uninstall-from-host~ guest self)
    (close~ guest))
  
  
  ;;;
  ;;;; Focus
  ;;;
  
  
  (method (focus-gain)
    (nextmethod)
    (activate-focus)
    processed)
  
  
  (method (focus-lose receiving)
    (nextmethod receiving)
    (deactivate-focus)
    processed)
  
  
  (method (focus-default)
    (when guest
      (focus-default~ guest)))
    
  
  (method (activate-focus)
    (set-guest-actions~ (get-application) (get-guest-actions guest))
    (focus-activate~ guest))
    
  
  (method (deactivate-focus)
    (set-guest-actions~ (get-application) '()))


  ;;;
  ;;;; Activation
  ;;;

  
  (method (frame-activate)
    (nextmethod)
    (unless (get-locked-activations?)
      (select-workspace)))
  
  
  (method (frame-deactivate)
    (when guest
      (frame-deactivate~ guest)))


  ;;;
  ;;;; Visibility
  ;;;
  
  
  (method (show)
    (let ((stage (get-stage)))
      (when (get-maximized?~ stage)
        (maximize~ root)
        (maximize-bounds~ root (get-size~ stage))
        (maximize~ guest)))
    (nextmethod))


  ;;;
  ;;;; Workspace
  ;;;
  
  
  (method public (select-workspace)
    (when guest
      (let ((pref (get-preferences~ (get-workspace-splitter))))
        (when pref
          (let ((current (get-name~ pref))
                (workspaces
                 (cond (workspace
                        (list workspace))
                       (else
                        (effective-frame-workspaces~ guest)))))
            (when (and (not-null? workspaces) (not (memq? current workspaces)))
              (let ((pref (get-preferences (list 'workspaces (car workspaces)) error?: #f)))
                (when pref
                  (apply-preferences~ pref)))))))))
  
  
  ;;;
  ;;;; Maximized
  ;;;
  
  
  (method (get-effective-position)
    (if (get-maximized?~ root)
        (get-preserved-position~ root)
      (get-position)))
  
  
  (method (get-effective-size)
    (if (get-maximized?~ root)
        (get-preserved-size~ root)
      (get-size)))
  
  
  ;;;
  ;;;; Mouse Copy
  ;;;
  
  
  (method (dispatch-mouse-copy)
    (let ((view (mouse-view))
          (dest (get-focus)))
      (when (and view dest)
        (mouse-copy~ view (mouse-position~ view) dest))))


  ;;;
  ;;;; Save
  ;;;

  
  (method (confirm-close . rest)
    (when guest
      (confirm-close~ guest)))))
