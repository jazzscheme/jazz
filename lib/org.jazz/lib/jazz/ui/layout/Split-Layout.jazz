;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Split Layout
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.ui.layout.Split-Layout jazz


(import (jazz.library)
        (jazz.ui)
        (jazz.utilities))


(class Split-Layout extends Layout

  
  (method (layout figures width height (separator: separator {}) (state: state {}) (orientation: orientation {}) (mode: mode {}) (division: division {}) (insets: insets {}))
    (if (not state)
        (layout-empty figures width height orientation mode division insets)
      (case state
        ((zoom) (layout-zoom figures width height separator orientation mode division insets))
        ((split) (layout-split figures width height separator orientation mode division insets)))))
  
  
  (method (layout-empty figures width height orientation mode division insets)
    (for-each (function (figure)
                (set-visible?~ figure #f))
              figures)
    {})
  
  
  (method (layout-zoom figures width height separator orientation mode division insets)
    (for-each (function (figure)
                (when (get-visible?~ figure)
                  (set-position~ figure (new Point (get-left~ insets) (get-top~ insets)))
                  (set-size~ figure (new Dimension (- width (get-left~ insets) (get-right~ insets)) (- height (get-top~ insets) (get-bottom~ insets))))))
              figures)
    {})
  
  
  (method (layout-split figures width height separator orientation mode division insets)
    (when figures
      (let* ((find (function (location) (find-if (function (figure) (eq? (get-location~ figure) location)) figures)))
             (first (find 'first))
             (second (find 'second))
             (bar (unspecified)))
        ;; because workspace edition is still an error prone manual process
        (when (not first)
          (error "Unable to locate first figure in {t}" figures))
        ;; because workspace edition is still an error prone manual process
        (when (not second)
          (error "Unable to locate second figure in {t}" figures))
        (let ((size (case orientation ((horz) width) ((vert) height)))
              (splitter-size (case separator ((resize) 4) ((edge) 2) ((line) 1))))
          (case mode
            ((absolute)
             (when (negative? division)
               (set! division (+ size division)))
             (if (eq? orientation 'horz)
                 (when (or (< division (+ (get-left~ insets) 1))
                           (> division (- width (get-right~ insets) splitter-size 1)))
                   (set! division (quotient width 2)))
               (when (or (< division (+ (get-top~ insets) 1))
                         (> division (- height (get-bottom~ insets) splitter-size 1)))
                 (set! division (quotient height 2)))))
            ((relative)
             (let ((pct (fxround (percent (abs division) (cast <fl> size)))))
               (if (positive? division)
                   (set! division pct)
                 (set! division (- size pct)))))))
        (let ((splitter-size (case separator ((resize) 4) ((edge) 2) ((line) 1))))
          (case orientation
            ((horz)
             (let ((first-width (- division (get-left~ insets)))
                   (first-height (- height (get-top~ insets) (get-bottom~ insets)))
                   (second-width (- width division splitter-size (get-right~ insets)))
                   (second-height (- height (get-top~ insets) (get-bottom~ insets))))
               (terminal first-width second-width)
               (set-position~ first (new Point (get-left~ insets) (get-top~ insets)))
               (set-size~ first (new Dimension first-width first-height))
               (set-position~ second (new Point (+ division splitter-size) (get-top~ insets)))
               (set-size~ second (new Dimension second-width second-height))
               (set! bar (new Rect division (get-top~ insets) (+ division splitter-size) (- height (get-bottom~ insets))))))
            ((vert)
             (let ((first-width (- width (get-left~ insets) (get-right~ insets)))
                   (first-height (- division (get-top~ insets)))
                   (second-width (- width (get-left~ insets) (get-right~ insets)))
                   (second-height (- height division splitter-size (get-top~ insets))))
               (set-position~ first (new Point (get-left~ insets) (get-top~ insets)))
               (set-size~ first (new Dimension first-width first-height))
               (set-position~ second (new Point (get-left~ insets) (+ division splitter-size)))
               (set-size~ second (new Dimension second-width second-height))
               (set! bar (new Rect (get-left~ insets) division (- width (get-right~ insets)) (+ division splitter-size)))))))
        (set-visible?~ first #t)
        (set-visible?~ second #t)
        bar)))))
