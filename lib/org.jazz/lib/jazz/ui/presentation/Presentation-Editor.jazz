;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Presentation Editor
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2007
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.ui.presentation.Presentation-Editor jazz


(import (jazz.designer)
        (jazz.jml)
        (jazz.library)
        (jazz.ui)
        (jazz.ui.view)
        (jazz.utilities))


(class Presentation-Editor extends View-Editor
  
  
  (form
    (<install>
      (<!>     name: center layout-type: fill)))

  
  ;;;
  ;;;; Frame
  ;;;
  
  
  @convert-meta
  (method meta (new-event . rest)
    @to-convert-the-wizard
    (let ((name (get-modal Design-Wizard))
          (appl (get-application)))
      (if (or (null? name) (null? (get-catalog~ (get-cataloguer~ appl) name error?: #f)))
          (error "Unknown catalog: {t}" name)
        (with-cursor :wait
          (function ()
            (let* ((profile (get-profile~ appl))
                   (model (base-model~ profile)))
              (if (null? model)
                  (error "Profile must define base-model")
                (let* ((model (new model :catalog name))
                       (frame (apply new-frame client: model rest))
                       (editor (get-guest~ frame))
                       (designer (get-designer~ editor)))
                  (set-property~ designer model :catalog name)
                  (import-dictionary~ model)
                  frame))))))))
  
  
  (method (frame-workspaces)
    '(presenter))
  
  
  ;;;
  ;;;; Client
  ;;;
  
  
  (method (install-client)
    (let ((scroller (new Scroller-View parent: (locate 'center) vscroll?: #t hscroll?: #t)))
      (set-parent~ client (get-content~ scroller))
      (set-client~ scroller client)
      (layout-view~ scroller)))))
