;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Preview Pane
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2007
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.ui.print.Preview-Pane jazz


(import (jazz.jml)
        (jazz.ui)
        (jazz.ui.workspace)
        (jazz.literals)
        (jazz.library)
        (jazz.utilities))


(class Preview-Pane extends Layout-View


  (property client initialize {} getter get-client setter set-client)
  
  
  (slot job)
  (slot pages)
  (slot start initialize 0)
  (slot preserved)
    
  
  (form
    (<install>                          layout-type: fill background: {Color name: Dark}
      (<Scroller-View>   name: scroller hscroll?: #t vscroll?: #t
        (<!>             name: content
          (<Layout-View> name: scrollee size: {Dimension 1078 664} layout-type: center
            (<View>      name: centered size: {Dimension 1078 664}))))))

  
  ;;;
  ;;;; Frame
  ;;;
  
  
  (method (frame-workspaces)
    '(preview))

  
  ;;;
  ;;;; Access
  ;;;
  
  
  (method public (get-job)
    job)


  ;;;
  ;;;; Actions
  ;;;
  

  (method (guest-actions)
    (cons (find-actions 'preview-pane)
          (nextmethod)))

  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method (on-print evt)
    (print-document~ client))
  
  
  (method (on-print-layout evt)
    (print-layout~ client from-preview?: #t))
  
  
  (method (on-home evt)
    (set-start 0))
  
  
  (method (on-end evt)
    (let* ((count (length pages))
           (pages (get-pages~ job))
           (last (- (length pages) 1)))
      (set-start (- last (modulo last count)))))
  
  
  (method (on-previous evt)
    (previous))
  
  
  (method (on-next evt)
    (next))
  
  
  (method (on-close evt)
    (close-workspace))
  
  
  (method (escape-press key)
    (close-workspace))
  
  
  (method (close-workspace)
    (let ((frame (get-player))
          (workspace (selected-workspace)))
      (restore-client)
      (close~ frame)
      (apply-preferences~ (get-previous~ workspace))))

  
  ;;;
  ;;;; Client
  ;;;


  (method public (get-client)
    client)


  (method public (set-client value)
    (set! client value)
    (set! preserved (setup-printing~ client)))
  
  
  (method protected (restore-client)
    (wrap-header/footer~ (get-page-setup-for~ client 'printer) '())
    (restore-printing~ client preserved))
  
  
  ;;;
  ;;;; Zoom
  ;;;
  
  
  (definition Zoom
    0.5)


  (method public (get-zoom)
    Zoom)


  (method public (set-zoom value)
    (set! Zoom value)
    (scroll-to~ (locate 'scrollee) {Point 0 0})
    (layout-view))
  
  
  ;;;
  ;;;; Layout
  ;;;
  
  
  (method (layout)
    (nextmethod)
    (let* ((scrollee (locate 'scrollee))
           (centered (locate 'centered))
           (print-area (get-print-area~ client '()))
           (page-setup (get-page-setup-for~ client 'printer))
           (scaling (scale-content~ page-setup client 60))
           (zoom (/ Zoom scaling))
           (display-size (get-size))
           (border-size (+ (scale (get-size~ page-setup) zoom) {Dimension 4 4}))
           (separator (scale 50 zoom)))
      (close-children~ centered)
      (let ((h 0)
             (v 0)
             (max-h 0)
             (max-v 0)
             (vert-done? #f)
             (horz-done? #f)
             (fact (new List-Factory)))
        (while (not vert-done?)
          (while (not horz-done?)
            (let* ((border (new Border-View parent: centered position: (new Point h v) size: border-size border-type: 'shadow))
                   (page (new Preview-Page parent: border)))
              (increase! h (get-width~ border-size))
              (set! max-h (max max-h h))
              (put~ fact page)
              (increase! h separator)
              (when (> (+ h (get-width~ border-size)) (get-width~ display-size))
                (set! horz-done? #t))))
          (set! h 0)
          (set! horz-done? #f)
          (increase! v (get-height~ border-size))
          (set! max-v (max max-v v))
          (increase! v separator)
          (when (> (+ v (get-height~ border-size)) (get-height~ display-size))
            (set! vert-done? #t)))
        (set! pages (get-output~ fact))
        (set-size~ centered (new Dimension max-h max-v))
        (set-size~ scrollee (new Dimension (max (- (get-width~ display-size) 13) max-h) (max (- (get-height~ display-size) 13) max-v)))
        (layout-view~ scrollee)
        (update-scrollbars~ scrollee)
        (set! job (new Preview-Job {} client page-setup 60 zoom: zoom))
        (for-each (function (page)
                    (set-client~ page client))
                  pages)
        (set-start start))))
  
  
  ;;;
  ;;;; Page
  ;;;
  
  
  (method (get-page-height)
    (get-height~ size))
  
  
  ;;;
  ;;;; Navigation
  ;;;
  
  
  (method public (previous)
    (let ((count (length pages)))
      (set-start (max 0 (- start count)))))
  
  
  (method public (next)
    (let* ((count (length pages))
           (pages (get-pages~ job))
           (pg (+ start count)))
      (when (< pg (length pages))
        (set-start pg))))
  
  
  (method public (set-start value)
    (set! start value)
    (let ((count (length (get-pages~ job))))
      (for-each (function (page n)
                  (let ((border (get-parent~ page))
                        (pg (+ start n)))
                    (if (>= pg count)
                        (set-visible?~ border #f)
                      (set-no~ page pg)
                      (set-visible?~ border #t))))
                pages
                (naturals 0 (length pages)))))))
