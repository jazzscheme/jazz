;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Resizing Code
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2007
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.ui.resizer jazz


(import (jazz.ui.resizer.platform.windows (cond windows))
        (jazz.ui.resizer.platform.x11 (cond x11))
        (jazz.ui)
        (jazz.library)
        (jazz.utilities))


(constant Border-Size 4)
(constant Handle-Size 16)


(constant Part-Array
  '(((-1 . -1) (-1 . -1) ( 0 . -1) ( 1 . -1) ( 1 . -1))
    ((-1 . -1)     #f        #f        #f    ( 1 . -1))
    ((-1 .  0)     #f        #f        #f    ( 1 .  0))
    ((-1 .  1)     #f        #f        #f    ( 1 .  1))
    ((-1 .  1) (-1 .  1) ( 0 .  1) ( 1 .  1) ( 1 .  1))))


;;;
;;;; Cursor
;;;


(definition public (find-resize-part pt size)
  (let ((p (function (n s)
             (let ((border Border-Size)
                   (handle (min Handle-Size (quotient s 3))))
               (cond ((< n border) 0)
                     ((< n handle) 1)
                     ((>= n (- s border)) 4)
                     ((> n (- s handle)) 3)
                     (else 2))))))
    (element (element Part-Array (p (get-v~ pt) (get-height~ size)))
             (p (get-h~ pt) (get-width~ size)))))


(definition public (get-resize-cursor part)
  (assoc-value part Part-Cursor #f))


(definition public (size-client dh dv part proc)
  (let ((p (function (r)
             (case r
               ((-1) (values 1 -1))
               ( (0) (values 0  0))
               ( (1) (values 0  1))))))
    (receive (mh rh) (p (car part))
      (receive (mv rv) (p (cdr part))
        (proc (* dh mh) (* dv mv) (* dh rh) (* dv rv)))))))
