;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Definitions Search
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2007
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.ui.search.Definitions-Search jazz


(import (jazz.jml)
        (jazz.platform)
        (jazz.ui)
        (jazz.literals)
        (jazz.library)
        (jazz.utilities))


(class Definitions-Search extends Search-View

  
  (form
    (<install>
      (<!>              name: domain      title: "Search"
        (<Radio-Button> name: definitions title: "Definitions" position: {Point 15 32} size: {Dimension 100 18} selected?: #t)
        (<Radio-Button> name: references  title: "References" position: {Point 15 58} size: {Dimension 100 18}))))
  

  ;;;
  ;;;; Domains
  ;;;

  
  (method (get-search-domains)
    '(definitions
      references))
    

  ;;;
  ;;;; Events
  ;;;

  
  (method (search-targets targets)
    (case (get-selected-element~ (locate 'domain))
      ((definitions)
       (search-targets-definitions targets))
      ((references)
       (search-targets-references targets))))

  
  (method (search-targets-definitions targets)
    (let ((cataloguer (get-cataloguer~ (get-application))))
      (define (search-target target)
        (let ((name (string->symbol (get-target~ target))))
          (get-coalesced-definitions~ cataloguer name)))
      
      (let ((definitions (apply append (map search-target targets))))
        (if (null? definitions)
            (bell)
          (case (length definitions)
            ((1) (edit~ (car definitions)))
            (else (let ((results (get-results)))
                    (set-mode~ results 'definitions)
                    (set-references-target~ results {})
                    (add-results~ results definitions targets)
                    (select-results~ results))))))))

  
  (method (search-targets-references targets)
    (if (> (length targets) 1)
        (message-box "Unimplemented functionality")
    (let ((cataloguer (get-cataloguer~ (get-application))))
      (define (search-target target)
        (let ((name (string->symbol (get-target~ target))))
          (get-references~ cataloguer name)))
      
      (let ((references (apply append (map search-target targets))))
        (if (null? references)
            (bell)
          ;; quicky for now until search results are generalized
          (let ((name (string->symbol (get-target~ (car targets)))))
            (case (length references)
              ((1) (edit-reference~ (car references) name))
              (else (let ((results (get-results)))
                      (set-mode~ results 'references)
                      (set-context~ results {})
                      (set-references-target~ results name)
                      (add-results~ results references (get-search-targets) name)
                      (select-results~ results))))))))))

  
  ;;;
  ;;;; Definitions
  ;;;

  
  (method protected (search-definitions name definitions)
    (let ((results (get-results)))
      (set-mode~ results 'definitions)
      (set-references-target~ results {})
      (set-selected?~ (locate 'definitions) #t)
      (set-search-targets (list (list (->string name) "")))
      (add-results~ results definitions (get-search-targets))
      (select-results~ results)))
  
  
  (method protected (search-references name references ctx)
    (let ((results (get-results)))
      (set-mode~ results 'references)
      (set-context~ results ctx)
      (set-references-target~ results name)
      (set-selected?~ (locate 'references) #t)
      (set-search-targets (list (list (->string name))))
      (add-results~ results references (get-search-targets) name)
      (select-results~ results)))))
