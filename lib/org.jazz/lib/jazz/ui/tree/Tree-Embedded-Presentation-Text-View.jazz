;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Tree Embedded Presentation Text View
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.ui.tree.Tree-Embedded-Presentation-Text-View jazz


(import (jazz.jml)
        (jazz.library)
        (jazz.literals)
        (jazz.ui)
        (jazz.utilities))


(class Tree-Embedded-Presentation-Text-View extends Plain-Text-View
    
  
  (slot tree)

  
  (form
    (<install> default-style: {Text-Style name: Default font: {Font name: Label}}))
  

  ;;;
  ;;;; Access
  ;;;
  
  
  (method public (set-tree t)
    (set! tree t))
  

  ;;;
  ;;;; Tree
  ;;;
  
  
  (method (get-tree)
    tree)
  
  
  (method (get-cell)
    (get-edited-cell~ (get-tree)))
  
  
  (method (get-cell-row)
    (get-row~ (get-cell)))
  
  
  (method (get-cell-col)
    (get-col~ (get-cell)))
  
  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method (return-press key)
    (end-edition))
  
  
  (method (tab-press key modifiers)
    ;; should switch to properties
    )
  
  
  (method (up-arrow-move extend? scroll?)
    (select-up~ (get-tree) (new Cell (get-cell-row) (get-cell-col))))
  
  
  (method (down-arrow-move extend? scroll?)
    (select-down~ (get-tree) (new Cell (get-cell-row) (get-cell-col))))
  
  
  (method (end-edition)
    (when player
      (end-edition~ (get-tree))))
  
  
  ;;;
  ;;;; Focus
  ;;;
  
  
  (method (focus-validate view)
    (let ((text (get-string-content)))
      (if (not (empty-string? text))
          (begin
            (end-edition)
            #t)
        (message-box "Please enter a valid name")
        (select-all)
        #f)))))
