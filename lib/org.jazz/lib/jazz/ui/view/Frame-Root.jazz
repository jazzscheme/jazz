;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Frame Root
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2007
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.ui.view.Frame-Root jazz


(import (jazz.jml)
        (jazz.library)
        (jazz.system)
        (jazz.ui)
        (jazz.ui.window)
        (jazz.ui.resizer)
        (jazz.ui.view)
        (jazz.utilities))


(class Frame-Root extends Caption-Root

  
  (slot dragging?          initialize #f)
  (slot current-part)
  (slot old-position)
  (slot preserved-position initialize {}) ;; the initialize {} is necessary because of the temporary-fix
  (slot preserved-size     initialize {}) ;; the initialize {} is necessary because of the temporary-fix

  
  (form
    (<install>
      (<Frame-Button> name: minimize type: minimize tooltip?: #t tooltip-text: "Minimize" action-handler: {Event-Handler :form on-minimize})
      (<Frame-Button> name: maximize type: maximize tooltip?: #t tooltip-text: "Maximize" action-handler: {Event-Handler :form on-maximize})
      (<Frame-Button> name: close    type: close tooltip?: #t tooltip-text: "Close" action-handler: {Event-Handler :form on-close})))

  
  ;;;
  ;;;; Access
  ;;;
  
  
  (method public (get-preserved-position)
    preserved-position)
  
  
  (method public (get-preserved-size)
    preserved-size)

  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method (size-change size)
    (nextmethod size)
    (invalidate-caption)
    (invalidate-border insets: {Rect 4 4 4 4}))
  
  
  (method protected virtual (on-minimize evt)
    (minimize~ player))
  
  
  (method protected virtual (on-maximize evt)
    (maximize~ (get-stage)))
  
  
  (method protected virtual (on-close evt)
    (close-player))
  
  
  (method (close-player)
    (validate-focus)
    (close-window player))
  
  
  ;;;
  ;;;; Rects
  ;;;
  
  
  (method (caption-rect)
    (let ((border (if maximized? 0 4)))
      (new Rect border border (- (get-width) border) (+ border 20))))
  
  
  (method protected virtual (minimize-rect top right)
    (new Rect (- right 53) (+ top 3) (- right 37) (+ top 17)))
  
  
  (method protected virtual (maximize-rect top right)
    (new Rect (- right 37) (+ top 3) (- right 21) (+ top 17)))
  
  
  (method protected virtual (close-rect top right)
    (new Rect (- right 19) (+ top 3) (- right  3) (+ top 17)))

  
  ;;;
  ;;;; Activation
  ;;;
  
  
  (method (mouse-activate)
    (acquire-focus~ (get-player)))
  
  
  (method (root-activate)
    (invalidate-caption))
  
  
  (method (root-deactivate)
    (invalidate-caption))
  
  
  ;;;
  ;;;; Maximized
  ;;;
  
  
  (method (maximize)
    (unless #f @temporary-fix maximized?
      (let ((host (get-host)))
        (unless maximized?
          (set! preserved-position (get-position~ host))
          (set! preserved-size (get-size~ host)))
        (set! maximized? #t)
        (update-buttons))))
  
  
  (method public (maximize-bounds size)
    (let ((host (get-host)))
      (set-position~ host {Point 0 0})
      (set-size~ host size)
      (layout-view)
      (invalidate-view)))
  
  
  (method (restore)
    (when #t @temporary-fix maximized?
      (let ((host (get-host)))
        ;; test necessary because of temporary-fix
        (when preserved-position
          (set-position~ host preserved-position))
        ;; test necessary because of temporary-fix
        (when preserved-size
          (set-size~ host preserved-size))
        (set! maximized? #f)
        (update-buttons)
        (layout-view)
        (invalidate-view))))
    

  ;;;
  ;;;; Layout
  ;;;
  
  
  (method (layout)
    (let* ((caption? (caption-visible?))
           (border (if caption? 4 0))
           (caption-rect (caption-rect))
           (caption-height (rect-height caption-rect)))
      (layout-buttons)
      (let ((content (get-content)))
        (set-position~ content (new Point border (if caption? (+ border caption-height) 0)))
        (set-size~ content (new Dimension (- (get-width) border border) (- (get-height) border border (if caption? caption-height 0)))))))
  
  
  (method protected virtual (layout-buttons)
    (let* ((border (buttons-border))
           (top border)
           (bounds (get-bounds))
           (right (- (get-right~ bounds) border)))
      (set-rect~ (locate 'minimize) (minimize-rect top right))
      (set-rect~ (locate 'maximize) (maximize-rect top right))
      (set-rect~ (locate 'close) (close-rect top right))))
  
  
  (method protected virtual (buttons-border)
    (if (caption-visible?) 4 0))


  ;;;
  ;;;; Update
  ;;;
  
  
  (method (invalidate-caption)
    (invalidate-rect (caption-rect)))
  
  
  (method protected virtual (update-buttons)
    (let ((visible? (caption-visible?)))
      (set-visible?~ (locate 'minimize) visible?)
      (set-visible?~ (locate 'maximize) visible?)
      (set-visible?~ (locate 'close) visible?)))


  ;;;
  ;;;; Caption
  ;;;
  
  
  (method (caption-icon)
    (let* ((host player)
           (guest (get-guest~ host)))
      (guest-icon~ guest)))
  
  
  (method (caption-title)
    (let ((host player))
      (get-window-title~ host)))
  
  
  (method (caption-focused?)
    (eq? self (get-focused-root)))
  
  
  (method (caption-visible?)
    (not maximized?))


  ;;;
  ;;;; Cursor
  ;;;


  (method (cursor-update pos)
    (if (not (resizeable?))
        (set-cursor :arrow)
      (let ((part (essay (not maximized?) (find-resize-part pos (get-size)))))
        (if (not part)
            (set-cursor :arrow)
          (set-cursor (get-resize-cursor part))))))
  

  ;;;
  ;;;; Mouse
  ;;;
  
  
  (method protected virtual (moveable?)
    #t)
  
  
  (method protected virtual (resizeable?)
    #t)

  
  (method (mouse-down pos)
    (let ((in-caption? (in-rect? pos (caption-rect))))
      (if (and in-caption? (control-down?))
          (send-host-to-back)
        (when (moveable?)
          (let ((part (find-resize-part pos (get-size))))
            (when (or part in-caption?)
              (set! dragging? #t)
              (set! current-part (essay (resizeable?) part))
              (set! old-position (to-desktop pos))
              (acquire-capture)))))))
  
  
  (method (drag-move pos)
    (when dragging?
      (let* ((pos (to-desktop pos))
             (delta (point- pos old-position))
             (dh (get-h~ delta))
             (dv (get-v~ delta)))
        (if (not current-part)
            (move-window~ player (get-h~ delta) (get-v~ delta))
          (size-client dh dv current-part
            (function (dh dv dwidth dheight)
              (resize-host dh dv dwidth dheight))))
        (update-window~ (get-toplevel))
        (set! old-position pos))))
  
  
  (method (drag-up pos . rest)
    (when dragging?
      (release-capture)
      (set! dragging? #f)))
  
  
  (method (double-click pos)
    (cond ((in-rect? pos {Rect 6 6 22 22})
           (close-player))
          ((in-rect? pos (caption-rect))
           (toggle-maximized))))
  
  
  (method protected virtual (resize-host dh dv dwidth dheight)
    (grow-bounds~ player dh dv dwidth dheight))
  
  
  (method protected virtual (toggle-maximized)
    (toggle-maximized~ (get-stage)))
  
  
  (method protected virtual (send-host-to-back)
    (send-to-back~ player)
    (acquire-focus~ (current-frame)))))
