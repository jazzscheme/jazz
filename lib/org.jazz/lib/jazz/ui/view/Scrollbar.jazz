;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Scrollbars
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;    Assem Hakmeh
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.ui.view.Scrollbar jazz


(import (jazz.library)
        (jazz.literals)
        (jazz.ui)
        (jazz.ui.look)
        (jazz.ui.window)
        (jazz.utilities))


(class Scrollbar extends View
  
  
  (definition autorepeat-delay
    0.3)
  
  (definition autorepeat-period
    0.001)
  
  
  (property orientation         initialize 'vert       getter get-orientation setter set-orientation)
  (property pos         <fx>    initialize 0           getter get-pos         setter set-pos)
  (property range       <Range> initialize {Range 0 9} getter get-range       setter set-range)
  (property line-height <fx>    initialize 1           getter get-line-height setter set-line-height)
  (property page-height <fx>    initialize 3           getter get-page-height setter set-page-height)
  (property flat?       <bool>  initialize #f          getter get-flat?       setter set-flat?)
  (property style               initialize {}          getter get-style       setter set-style)
  
  
  (slot tracking?          initialize #f)
  (slot tracking-start     initialize {})
  (slot tracking-start-pos initialize {})
  (slot autorepeat-pulse   initialize #f)

  
  (method (print printer readably)
    (print-unreadable self printer
      (function (printer)
        (format printer "{a} {a} {a} {a}" position size pos range))))
  
  
  ;;;
  ;;;; Access
  ;;;


  (method public (get-orientation)
    orientation)
  

  (method public (set-orientation or)
    (when (neq? or orientation)
      (set! orientation or)
      (invalidate-view)))


  (method public (get-pos) <fx>
    pos)
  

  (method public (set-pos p <fx> redraw?)
    (let ((new-pos (max (min p (max-pos)) (min-pos))))
      (when (/= new-pos pos)
        (set! pos new-pos)
        (when redraw?
          (redraw-view-only)))))
  
  
  (method (min-pos) <fx>
    (get-start~ range))
  
  
  (method (max-pos) <fx>
    (- (get-end~ range) page-height))


  (method public (get-range) <Range>
    range)
  

  (method public (set-range rg)
    (when (not (range= rg range)) @parameterized-fix-me (/= rg range)
      (set! range rg)
      (invalidate-view)))


  (method public (get-line-height) <fx>
    line-height)
  

  (method public (set-line-height height)
    (when (/= height line-height)
      (set! line-height height)
      (invalidate-view)))


  (method public (get-page-height) <fx>
    page-height)
  

  (method public (set-page-height height)
    (when (/= height page-height)
      (set! page-height height)
      (invalidate-view)))
  
  
  (method public (set-info min max page)
    (set-range (new Range min max))
    (set-page-height page))
  

  (method public (get-flat?) <bool>
    flat?)


  (method public (set-flat? value)
    (when (neq? value flat?)
      (set! flat? value)
      (invalidate-view)))


  (method public (get-style)
    style)


  (method public (set-style value)
    (when (neq? value style)
      (set! style value)
      (invalidate-view)))

  
  ;;;
  ;;;; Client
  ;;;
  
  
  (method public (get-client)
    parent)
  
  
  ;;;
  ;;;; Scroll
  ;;;
  
  
  (method (call-scroll action (thumb-pos {}))
    (let ((client (get-client)))
      (case orientation
        ((vert) (on-vscroll~ client action thumb-pos orientation))
        ((horz) (on-hscroll~ client action thumb-pos orientation)))))
  
  
  ;;;
  ;;;; Line
  ;;;
  
  
  (method (line-up)
    (call-scroll 'line-up)
    (setup-autorepeat 'line-up))
  
  
  (method (line-down)
    (call-scroll 'line-down)
    (setup-autorepeat 'line-down))
  
  
  ;;;
  ;;;; Page
  ;;;
  
  
  (method (page-up)
    (call-scroll 'page-up)
    (setup-autorepeat 'page-up))
  
  
  (method (page-down)
    (call-scroll 'page-down)
    (setup-autorepeat 'page-down))

  
  ;;;
  ;;;; Geometry
  ;;;
  
  
  (method (get-breadth) <fx>
    (case orientation
      ((vert) (get-width))
      ((horz) (get-height))))
  
  
  (method (get-extent) <fx>
    (case orientation
      ((vert) (get-height))
      ((horz) (get-width))))
  
  
  (method (new-rect left top right bottom) <Rect>
    (case orientation
      ((vert) (new Rect left top right bottom))
      ((horz) (new Rect top left bottom right))))
  
  
  (method (get-place point) <fx>
    (case orientation
      ((vert) (get-v~ point))
      ((horz) (get-h~ point))))
  
  
  ;;;
  ;;;; Rectangles
  ;;;
  
  
  (method (up-rect) <Rect>
    (let ((b (get-breadth)))
      (new-rect 0 0 b b)))
  
  
  (method (down-rect) <Rect>
    (let ((b (get-breadth))
          (e (get-extent)))
      (new-rect 0 (- e b) b e)))
  
  
  (method (thumb-range)
    (let ((b (get-breadth))
          (e (get-extent))
          (r (- (get-end~ range) (get-start~ range))))
      (when (> r 0)
        (let* ((shaft (- e b b))
               (thumb (max 6 (fxround (* (min 1 (fl/ page-height r)) shaft))))
               (thumb-pos (+ b (fxround (* (fl/ pos (- r page-height)) (- shaft thumb))))))
          (values thumb-pos (+ thumb-pos thumb))))))
    
  
  (method (thumb-rect)
    (let ((info (thumb-range)))
      (when info
        (receive (start end) info
          (let ((b (get-breadth)))
            (new-rect 0 start b end))))))
  
  
  ;;;
  ;;;; Mouse
  ;;;
  
  
  (method (mouse-down pos)
    (acquire-capture)
    (cond ((in-rect? pos (up-rect)) (line-up))
          ((in-rect? pos (down-rect)) (line-down))
          ((in-rect? pos (thumb-rect)) (start-tracking pos))
          (else
           (let ((place (get-place pos))
                 (info (thumb-range)))
             (when info
               (receive (start end) info
                 (cond ((<= place start) (page-up))
                       ((>= place end) (page-down)))))))))
  
  
  (method (drag-move pos)
    (when tracking?
      (track-thumb pos)))
  
  
  (method (drag-up pos . rest)
    (kill-autorepeat)
    (release-capture)
    (when tracking?
      (end-tracking)))
  
  
  ;;;
  ;;;; Thumb
  ;;;
  
  
  (method (start-tracking pos)
    (set! tracking? #t)
    (set! tracking-start (get-place pos))
    (set! tracking-start-pos (get-pos)))
  
  
  (method (track-thumb pos)
    (let* ((b (get-breadth))
           (e (get-extent))
           (r (- (get-end~ range) (get-start~ range)))
           (dv (- (get-place pos) tracking-start))
           (shaft (- e b b))
           (dp (quotient (* dv r) shaft)))
      (call-scroll 'thumb-track (+ tracking-start-pos dp))))
  
  
  (method (end-tracking)
    (set! tracking? #f))
  
  
  ;;;
  ;;;; Drawing
  ;;;
  
  
  (definition Flat-Color
    {})
  
  (definition Background-Color
    {})
  
  
  (method (get-flat-color)
    (unless Flat-Color
      (set! Flat-Color (flat-color)))
    Flat-Color)
  
  
  (method (flat-color)
    (if (white?~ {Color name: Light})
        {Color red: 194 green: 188 blue: 176}
      {Color red: 200 green: 188 blue: 166}))
  
  
  (method (get-background-color)
    (unless Background-Color
      (set! Background-Color (background-color)))
    Background-Color)
  
  
  (method (background-color)
    (let ((color {Color name: Light}))
      (if (white?~ color)
          {Color red: 242 green: 240 blue: 227}
        color)))
  
  
  (method (flat-look?)
    (case style
      ((tool) (get-element~ (get-look) 'tool/scrollbar/flat?))
      ((document) (get-element~ (get-look) 'document/scrollbar/flat?))
      (else flat?)))
  
  
  (method (draw surface <Surface> context update lh lv)
    (let ((bounds (get-bounds))
          (up-rect (up-rect))
          (down-rect (down-rect))
          (thumb-rect (thumb-rect))
          (flat? (flat-look?)))
      (fill-rect~ surface bounds (get-background-color))
      (cond (flat?
             (draw-button surface up-rect (case orientation ((vert) 'up) ((horz) 'left)))
             (draw-button surface down-rect (case orientation ((vert) 'down) ((horz) 'right))))
            (else
             (draw-scroll-bar~ surface up-rect (case orientation ((vert) 'up) ((horz) 'left)))
             (draw-scroll-bar~ surface down-rect (case orientation ((vert) 'down) ((horz) 'right)))))
      (when thumb-rect
        (if flat?
          @interesting
            (frame-rect~ surface thumb-rect {Color name: Entry-Border})
            (draw-raised~ surface thumb-rect)
          (draw-edge~ surface thumb-rect inner: 'raised outer: 'raised edges: 'rectangle))
        (let ((width (if flat? 1 2)))
          (let ((inflated (inflate-rect thumb-rect (- width) (- width))))
            (fill-rect~ surface inflated {Color name: Medium})))
        @interesting
        (let* ((height (rect-height thumb-rect))
               (v (+ (get-top~ thumb-rect) (quotient (- height 8) 2))))
          (set-pen~ surface {Pen name: Light})
          (line~ surface 3 v 8 v)
          (line~ surface 3 (+ v 3) 8 (+ v 3))
          (line~ surface 3 (+ v 6) 8 (+ v 6))
          (set-pen~ surface {Pen name: Dark})
          (line~ surface 4 (+ v 1) 9 (+ v 1))
          (line~ surface 4 (+ v 4) 9 (+ v 4))
          (line~ surface 4 (+ v 7) 9 (+ v 7))))))
  
  
  (method (draw-button surface rect direction)
    (draw-raised~ surface rect)
    (let ((inflated (inflate-rect rect -1 -1)))
      (fill-rect~ surface inflated {Color name: Medium})
      (set-pen~ surface {Pen name: Black})
      (let ((dh (if (eq? orientation 'horz) 1 0))
            (dv (if (eq? orientation 'horz) -1 0)))
        (draw-arrow-tip~ surface (+ (get-left~ inflated) 3 dh) (+ (get-top~ inflated) 4 dv) 3 direction))))
  
  
  ;;;
  ;;;; Auto Repeat
  ;;;


  (method (setup-autorepeat action)
    (when (not autorepeat-pulse)
      (set! autorepeat-pulse (new Pulse autorepeat-period (function () (pulse-action action)) delay: autorepeat-delay))))


  (method (kill-autorepeat)
    (when autorepeat-pulse
      (close~ autorepeat-pulse)
      (set! autorepeat-pulse #f)))
  
  
  ;;;
  ;;;; Pulse
  ;;;
  
  
  (method (pulse-action action)
    (execute-event
      (function ()
        (case action
          ((line-up)   (line-up))
          ((line-down) (line-down))
          ((page-up)   (page-up))
          ((page-down) (page-down))))))
  
  
  ;;;
  ;;;; Designer
  ;;;
  
  
  (method meta (get-class-image)
    {Bitmap-Resource "ResizeHeight"})))
