;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Splitter Window
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.ui.window.Splitter-Window jazz


(import (jazz.library)
        (jazz.ui)
        (jazz.ui.view)
        (jazz.ui.window)
        (jazz.utilities))


(class Splitter-Window extends View-Player


  (property separator   initialize 'resize        accessors generate)
  (property state       initialize {}             accessors generate)
  (property orientation initialize 'horz          accessors generate)
  (property mode        initialize 'absolute      accessors generate)
  (property division    initialize {}             accessors generate)
  (property insets      initialize {Rect 0 0 0 0} accessors generate)
  (property full?       initialize #f          accessors generate)
  
  
  (slot split-layout initialize (new Split-Layout))
  (slot bar-bounds   initialize {})
  (slot dragging?    initialize #f)
  (slot previous     initialize {})
  
  
  ;;;
  ;;;; Root
  ;;;
  
  
  (method (new-root)
    (new Splitter-Root))

  
  ;;;
  ;;;; Find
  ;;;
  
  
  (method public (for-each-palette proc)
    (for-each (function (child)
                (cond ((is? child Splitter-Window)
                       (for-each-palette~ child proc))
                      ((is? child Pad-Window)
                       (for-each proc (get-children~ child)))
                      (else
                       (proc child))))
              children))
  
  
  (method public (find-palette type)
    (call/ec
      (function (return)
        (for-each-palette
          (function (palette)
            (when (is? palette View-Host)
              (let ((view (get-guest~ palette)))
                (when (is? view type)
                  (return view))))))
        {})))
  
  
  ;;;
  ;;;; Layout
  ;;;


  (method (size-change size)
    (nextmethod size)
    (layout-window))
  
  
  (method (layout)
    (let ((size (get-size))
          (mode (if dragging? 'absolute mode))
          (insets (if full? {Rect 0 0 0 0} insets)))
      (set! bar-bounds (layout~ split-layout children (get-width~ size) (get-height~ size) separator: separator state: state orientation: orientation mode: mode division: division insets: insets))))
  
  
  ;;;
  ;;;; Children
  ;;;
  
  
  (method public (remove-children)
    (for-each (function (child)
                (when (is? child Splitter-Window)
                  (remove-children~ child))
                (when (is? child Pad-Window)
                  (remove-children~ child))
                (if (is? child Splitter-Window)
                    (close~ child)
                  (set-visible?~ child #f)
                  (set-parent~ child (get-toplevel))
                  (when (is? child View-Host)
                    (host-deactivate~ (get-guest~ child)))))
              children))
  
  
  (method public (get-brother window)
    (find-if (function (child)
               (neq? child window))
             children))
  
  
  ;;;
  ;;;; Workspace
  ;;;
  
  
  (method public (workspace-zoomable? window)
    (let ((brother (get-brother window)))
      (or (is-not? brother View-Host)
          (let ((guest (get-guest~ brother)))
            (workspace-minimisable?~ guest)))))
  
  
  ;;;
  ;;;; Zoom
  ;;;
  
  
  (method public (zoom target)
    (set! state 'zoom)
    (for-each (function (child)
                (set-visible?~ child (eq? child target)))
              children)
    (layout-window))
    
  
  (method public (unzoom)
    (set! state 'split)
    (for-each (function (child)
                (set-visible?~ child #t))
              children)
    (layout-window))
  
  
  (method public (get-zoomed)
    (when (eq? state 'zoom)
      (find-if (function (child)
                 (get-visible?~ child))
               children)))

  
  ;;;
  ;;;; Cursor
  ;;;


  (method (cursor-update hit)
    (cond ((neq? separator 'resize)
           (set-cursor :arrow))
          ((or (not hit) (not bar-bounds) (get-mouse-down?))
           unprocessed)
          (else
           (let ((pos (mouse-position)))
             (when (in-rect? pos bar-bounds)
               (case orientation
                 ((horz) (set-cursor :vertical-splitter))
                 ((vert) (set-cursor :horizontal-splitter))))))))
  
  
  ;;;
  ;;;; Convertion
  ;;;
  
  
  (method (absolute->relative division)
    (let ((size (case orientation
                  ((horz) (get-width))
                  ((vert) (get-height)))))
      (percentage division size)))
  
  
  (method (relative->absolute division)
    (let* ((size (case orientation
                   ((horz) (get-width))
                   ((vert) (get-height))))
           (pct (fxround (percent (abs division) size))))
      (if (positive? division)
          (set! division pct)
        (set! division (- size pct)))
      division))
  
  
  ;;;
  ;;;; Mouse
  ;;;
  
  
  (method (mouse-down h v)
    (when (and (eq? separator 'resize) bar-bounds (in-rect? (new Point h v) bar-bounds))
      (set! dragging? #t)
      (set! previous (case orientation ((horz) h) ((vert) v)))
      (when (eq? mode 'relative)
        (set! division (relative->absolute division)))
      (acquire-capture)))
  
  
  (method (mouse-move h v)
    (when dragging?
      (let* ((n (case orientation ((horz) h) ((vert) v)))
             (delta (- n previous)))
        (increase! division delta)
        (set! previous n)
        (with-locked-update
          (function ()
            (layout-window))))))
  
  
  (method (mouse-up h v)
    (when dragging?
      (release-capture)
      (when (eq? mode 'relative)
        (set! division (absolute->relative division)))
      (set! dragging? #f)))
  
  
  ;;;
  ;;;; Draw
  ;;;
  
  
  (method (draw-root surface)
    (when (and (eq? state 'split) bar-bounds)
      (case separator
        ((resize))
        ((edge)
         (case orientation
           ((horz) (draw-edge~ surface bar-bounds inner: 'raised outer: 'sunken edges: '(left)))
           ((vert) (draw-edge~ surface bar-bounds inner: 'raised outer: 'sunken edges: '(top)))))
        ((line)
         (case orientation
           ((horz) (draw-edge~ surface bar-bounds inner: 'raised edges: '(left)))
           ((vert) (draw-edge~ surface bar-bounds inner: 'raised edges: '(top)))))))))


;;;
;;;; Splitter-Root
;;;


(class Splitter-Root extends Root-View
  
  
  (method (draw surface context update lh lv)
    (draw-root~ (get-player) surface))))
