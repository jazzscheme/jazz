;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Window Definitions
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.ui.window jazz


(export (jazz.ui.window.platform.independant)
        (jazz.ui.window.platform.carbon  (cond carbon))
        (jazz.ui.window.platform.windows (cond windows))
        (jazz.ui.window.platform.x11     (cond x11)))


(import (jazz.ui)
        (jazz.ui.window.platform.carbon  (cond carbon))
        (jazz.ui.window.platform.windows (cond windows))
        (jazz.ui.window.platform.x11     (cond x11))
        (jazz.debuggee)
        (jazz.library))


;;;
;;;; Window
;;;


(definition public (get-toplevel)
  (get-toplevel~ (get-application)))


(definition public (get-stage)
  (get-stage~ (get-application)))


;;;
;;;; Desktop
;;;


(definition desktop {})


(definition Desktop-DC {})
  

(definition public (desktop-dc)
  (unless Desktop-DC
    (set! Desktop-DC (new Memory-Surface {})))
  Desktop-DC)


(definition public (get-desktop)
  (unless desktop
    (set! desktop (new Desktop)))
  desktop)


;;;
;;;; Orphanage
;;;


;; Usefull as a parent substitute for windows that need to be created without
;; having a parent yet because Windows doesn't allow parentless child windows
(definition Orphanage
  {})


(definition public (get-orphanage)
  (unless Orphanage
    (set! Orphanage (new Orphanage-Window)))
  Orphanage)


;;;
;;;; Management
;;;


(definition public (select-foreground-window handle)
  (platform-select-foreground-window handle))


(definition public (get-window-handle-title handle)
  (platform-get-window-handle-title handle))


;;;
;;;; Loop
;;;


(definition (make-message-thread)
  (let ((thread
          (make-thread
            (function ()
              (process-messages))
            'message)))
    (thread-specific-set! thread #t)
    thread))


(definition (setup-event-thread)
  (thread-priority-boost-set! event-thread 1))


(definition (process-events)
  (setup-event-thread)
  (let ((thread (make-message-thread)))
    (thread-start! thread)
    (unwind-protect
        (let (loop)
          (let ((thunk (thread-receive)))
            (with-jazz-exception-handler
              thunk)
            (loop)))
      (thread-specific-set! thread #f))))


;;;
;;;; Cursor
;;;


(definition Inhibit-View-Cursor?
  #f)


(definition public (inhibit-view-cursor flag)
  (set! Inhibit-View-Cursor? flag))


(definition (view-update-cursor)
  @convert
  (unless Inhibit-View-Cursor?
    (update-cursor)))


;;;
;;;; Update
;;;


(definition locked-update?
  #f)

@new-with-locked-update
(definition locked-rect
  {})


(definition public (with-locked-update proc)
  (if locked-update?
      (proc)
    (let ((toplevel (get-toplevel)))
      (unwind-protect
          (begin
            (platform-lock-window-update (get-handle~ toplevel))
            (set! locked-update? #t)
            (proc))
        (when locked-update?
          (platform-lock-window-update #f)
          (set! locked-update? #f)
          (update-window~ toplevel))))))


@new-with-locked-update
(definition public (with-locked-update proc)
  (if locked-update?
      (proc)
    (let ((toplevel (get-toplevel)))
      (unwind-protect
          (begin
            (set! locked-rect (new Rect 0 0 0 0))
            (set! locked-update? #t)
            (proc))
        (when locked-update?
          (let ((rect locked-rect)
                (rect (get-rect~ toplevel)))
            (set! locked-update? #f)
            (set! locked-rect {})
            (redraw-window~ toplevel rect: rect flags: (bitwise-ior RDW_INVALIDATE RDW_ERASE RDW_UPDATENOW RDW_ALLCHILDREN))))))))


;;;
;;;; Keyboard
;;;


(definition Escape-Handler
  {})


(definition public (get-escape-handler)
  Escape-Handler)


(definition public (set-escape-handler handler)
  (set! Escape-Handler handler))


;;;
;;;; Frame
;;;


(definition Active-Frame
  {})


(definition (get-active-frame)
  Active-Frame)

(definition (set-active-frame frame)
  (set! Active-Frame frame))


@deprecated
(definition (get-front-frame)
  (let ((stage (get-stage)))
    (when stage
      (let ((handle (platform-get-first-child (get-handle~ stage))))
        (while (and handle (not (platform-is-window-visible? handle)))
          (set! handle (platform-get-next-window-handle handle)))
        (when handle
          (get-window handle))))))


(definition (activate-front (force?: force? #f))
  (let ((front (first-visible-child~ (get-stage)))
        (active Active-Frame))
    (when (or force? (neq? front active))
      (when active
        (deactivate-frame~ active))
      (when front
        (activate-frame~ front)))))


(definition public (reactivate-active)
  (let ((front (first-visible-child~ (get-stage))))
    (when front
      (activate-frame~ front force?: #t))))


;;;
;;;; Frame Region
;;;


(definition public (frame-region frame <Rect> (insets: insets (new Rect 1 1 1 1)))
  (let ((left   (get-left~ frame))
        (top    (get-top~ frame))
        (right  (get-right~ frame))
        (bottom (get-bottom~ frame))
        (region (new Region)))
    (with-closed ((l (new Region left: left                          top: top                             right: (+ left (get-left~ insets)) bottom: bottom))
                  (t (new Region left: left                          top: top                             right: right                       bottom: (+ top (get-top~ insets))))
                  (r (new Region left: (- right (get-right~ insets)) top: top                             right: right                       bottom: bottom))
                  (b (new Region left: left                          top: (- bottom (get-bottom~ insets)) right: right                       bottom: bottom)))
      (combine!~ region l 'or)
      (combine!~ region t 'or)
      (combine!~ region r 'or)
      (combine!~ region b 'or)
      region)))


;;;
;;;; Overlappeds
;;;


(definition Overlappeds
  '())


(definition public (get-overlappeds)
  Overlappeds)

(definition public (set-overlappeds lst)
  (set! Overlappeds lst))


(definition public (register-overlapped overlapped)
  (set-overlappeds (cons overlapped (get-overlappeds))))

(definition public (unregister-overlapped overlapped)
  (set-overlappeds (remove! overlapped (get-overlappeds))))


;;;
;;;; Popups
;;;


(definition Passing-Through?
  #f)


(definition public (get-passing-through?)
  Passing-Through?)

(definition public (set-passing-through? flag)
  (set! Passing-Through? flag))


(definition Popups
  '())


(definition public (get-popups)
  Popups)

(definition public (set-popups lst)
  (set! Popups lst))


(definition public (close-all-popups)
  (for-each close-popup Popups))


(definition public (close-popup popup)
  (close~ popup)
  (set! Popups (remove! popup Popups)))


;;;
;;;; Windows
;;;


(definition public (process-windows (include-invisibles?: include-invisibles? #f))
  (collect-if (function (overlapped)
                (or include-invisibles? (get-visible?~ overlapped)))
              (get-overlappeds)))


;;;
;;;; Window Focus
;;;


(definition (get-window-focus)
  (let ((focus (platform-get-focus)))
    (when focus
      (get-window focus))))


(definition (set-window-focus window)
  (platform-set-focus (if window (get-handle~ window) #f))))
