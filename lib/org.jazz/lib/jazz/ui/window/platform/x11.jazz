;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Platform-dependant Window Definitions (X11)
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2007
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;    Assem Hakmeh
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.ui.window.platform.x11 jazz


(import (jazz.utilities)
        (jazz.library)
        (jazz.io)
        (jazz.platform.x11)
        (jazz.platform.cairo)
        (jazz.ui))


(definition public processed   '(processed))
(definition public unprocessed '(unprocessed))


(definition public Symbolic-Keys
  (list
   (cons XK_a                   #\A)
  (cons XK_b                   #\B)
  (cons XK_c                   #\C)
  (cons XK_d                   #\D)
  (cons XK_e                   #\E)
  (cons XK_f                   #\F)
  (cons XK_g                   #\G)
  (cons XK_h                   #\H)
  (cons XK_i                   #\I)
  (cons XK_j                   #\J)
  (cons XK_k                   #\K)
  (cons XK_l                   #\L)
  (cons XK_m                   #\M)
  (cons XK_n                   #\N)
  (cons XK_o                   #\O)
  (cons XK_p                   #\P)
  (cons XK_q                   #\Q)
  (cons XK_r                   #\R)
  (cons XK_s                   #\S)
  (cons XK_t                   #\T)
  (cons XK_u                   #\U)
  (cons XK_v                   #\V)
  (cons XK_w                   #\W)
  (cons XK_x                   #\X)
  (cons XK_y                   #\Y)
  (cons XK_z                   #\Z)
  (cons XK_0                   #\0)
(cons XK_1                   #\1)
(cons XK_2                   #\2)
(cons XK_3                   #\3)
(cons XK_4                   #\4)
(cons XK_5                   #\5)
(cons XK_6                   #\6)
(cons XK_7                   #\7)
(cons XK_8                   #\8)
(cons XK_9                   #\9)
    (cons           XK_F1  'F1 )
    (cons            XK_F2 'F2)
    (cons            XK_F3 'F3)
    (cons            XK_F4 'F4)
    (cons            XK_F5 'F5)
    (cons            XK_F6 'F6)
    (cons            XK_F7 'F7)
    (cons            XK_F8 'F8)
    (cons            XK_F9 'F9)
    (cons           XK_F10 'F10)
    (cons           XK_F11 'F11)
    (cons           XK_F12 'F12)
    (cons        XK_Escape 'Escape)
    (cons     XK_BackSpace 'Backspace)
    (cons         XK_minus #\-)
    (cons          XK_plus #\+)
    (cons         XK_comma #\,)
    (cons        XK_period #\.)
    (cons    XK_semicolon #\;)
    (cons         XK_slash #\/)
    (cons         XK_asciitilde #\~)
    (cons  XK_bracketleft #\[)
    (cons     XK_backslash #\\)
    (cons XK_bracketright #\])
    (cons         XK_apostrophe #\')
    (cons        XK_Return 'Return)
    (cons         XK_space 'Space)
    (cons           XK_Tab 'Tab)
    (cons          XK_Home 'Home)
    (cons           XK_End 'End)
    (cons          XK_Left 'Left)
    (cons            XK_Up 'Up)
    (cons         XK_Right 'Right)
    (cons          XK_Down 'Down)
    (cons         XK_Prior 'Prior)
    (cons          XK_Next 'Next)
    (cons        XK_Insert 'Insert)
    (cons         XK_Pause 'Pause)
    (cons        XK_Delete 'Delete)
    (cons           XK_KP_Add 'Add)
    (cons      XK_KP_Subtract 'Subtract)
    (cons      XK_KP_Decimal 'Multiply)
    (cons        XK_KP_Divide 'Divide)))


@old-table
(definition public Symbolic-Keys
  (list
    (cons 'F1            XK_F1)
    (cons 'F2            XK_F2)
    (cons 'F3            XK_F3)
    (cons 'F4            XK_F4)
    (cons 'F5            XK_F5)
    (cons 'F6            XK_F6)
    (cons 'F7            XK_F7)
    (cons 'F8            XK_F8)
    (cons 'F9            XK_F9)
    (cons 'F10           XK_F10)
    (cons 'F11           XK_F11)
    (cons 'F12           XK_F12)
    (cons 'Escape        XK_Escape)
    (cons 'Backspace     XK_BackSpace)
    (cons 'Minus         XK_minus)
    (cons 'Plus          XK_plus)
    (cons 'Comma         XK_comma)
    (cons 'Period        XK_period)
    (cons 'Semi-Colon    XK_semicolon)
    (cons 'Slash         XK_slash)
    (cons 'Tilde         XK_asciitilde)
    (cons 'Open-Bracket  XK_bracketleft)
    (cons 'Backslash     XK_backslash)
    (cons 'Close-Bracket XK_bracketright)
    (cons 'Quote         XK_apostrophe)
    (cons 'Return        XK_Return)
    (cons 'Space         XK_space)
    (cons 'Tab           XK_Tab)
    (cons 'Home          XK_Home)
    (cons 'End           XK_End)
    (cons 'Left          XK_Left)
    (cons 'Up            XK_Up)
    (cons 'Right         XK_Right)
    (cons 'Down          XK_Down)
    (cons 'Prior         XK_Prior)
    (cons 'Next          XK_Next)
    (cons 'Insert        XK_Insert)
    (cons 'Pause         XK_Pause)
    (cons 'Delete        XK_Delete)
    (cons 'Add           XK_KP_Add)
    (cons 'Subtract      XK_KP_Subtract)
    (cons 'Multiply      XK_KP_Decimal)
    (cons 'Divide        XK_KP_Divide)))

;;;
;;;; Window
;;;


(definition public Windows-Table
  (make-table test: eqv?))


(definition public inline (get-window handle)
  (table-ref Windows-Table handle #f))


(definition public inline (set-window handle window)
  (table-set! Windows-Table handle window))


(definition (create-handle window parent rest)
  (let* ((screen-no (XDefaultScreen default-x11-display))
         (screen    (XScreenOfDisplay default-x11-display screen-no))
         (parent    (if parent (get-handle~ parent) (XRootWindow default-x11-display screen-no)))
         (attr      (XSetWindowAttributes-make))
         (visual    (XDefaultVisual default-x11-display screen-no)))
    (XCreateWindow default-x11-display
                   parent
                   0
                   0
                   500
                   500
                   0
                   CopyFromParent
                   InputOutput
                   visual
                   0
                   attr)))


(definition (prepare-handle window parent rest)
  (bind-keywords ((handle {}) . others) rest
    (let ((handle (create-handle window parent rest)))
      (if (not handle)
          (error "Unable to create x11 window")
        @tofix-this-is-windows
        (DragAcceptFiles hwnd #t)
        (XSelectInput default-x11-display handle (+ FocusChangeMask ButtonPressMask StructureNotifyMask ExposureMask PointerMotionMask KeyPressMask))
        handle))))


(definition (dispatch-message window msg wparam lparam)
  (process-window-message window msg))


(definition (bring-window-to-top handle)
  (XRaiseWindow default-x11-display handle))


(definition (show-window handle)
  (XMapWindow default-x11-display handle)
  (XFlush default-x11-display))


(definition (hide-window handle)
  (XUnmapWindow default-x11-display handle))


(definition (minimize-window handle)
  (unimplemented 'minimize-window)
  @windows
  (ShowWindow handle SW_MINIMIZE))


(definition (close-window window)
  (XUnmapWindow default-x11-display (get-handle~ window)))


(definition (destroy-window handle)
  (table-set! expose-store (get-window handle) #f)
  (window-destroy~ (get-window handle))
  (on-nc-destroy~ (get-window handle) #f)
  (XDestroyWindow default-x11-display handle))


(definition (platform-erase-background handle)
  (unimplemented 'platform-erase-background))


;;;
;;;; Loop
;;;


(definition (platform-process-messages)
  (let ((msg (XEvent-make)))
    ;; process messages from all windows
    (while (XNextEvent default-x11-display msg)
      (let* ((any-event (XEvent-xany-ref msg))
             (handle (XAnyEvent-window-ref any-event)))
        ;; tofix wparam and lparam should be removed
        (let ((window (get-window handle))
              (wparam 0)
              (lparam 0))
          (if (not window)
              (debug "Warning : No window")
            (call-dispatch-message~ window msg wparam lparam))))
     (when (= 0 (XPending default-x11-display))
       (iterate-table expose-store
                             (function (win region)
                               (when region
                                 (paint~ win region))))
       (table-clear expose-store #f)))))


(definition (platform-process-one-message window)
  (unimplemented 'platform-process-one-message)
  @unimp
  (with ((msg (MSG-make)))
    (let ((hwnd (get-handle~ window)))
      (when (GetMessage msg hwnd 0 0)
        (unless (translate-shortcut msg)
          (TranslateMessage msg)
          (DispatchMessage msg))))))


;;;
;;;; Messages
;;;


(definition expose-store (make-table))

(definition (process-window-message window msg)
   (let ((type (XEvent-type-ref msg)))
      (cond
       ((= type Expose)      
                                     (debug window)
                                     (let* ((msg (XEvent-xexpose-ref msg))
                                        (left (XExposeEvent-x-ref msg))
                                        (top  (XExposeEvent-y-ref msg))
                                        (right (+ left (XExposeEvent-width-ref msg)))
                                        (bottom (+ top (XExposeEvent-height-ref msg)))
                                        (region (new Rect left top right bottom))
                                        (old-region (table-ref expose-store window #f)))
                                          (if old-region
                                              (table-set! expose-store window (rect-union old-region region))
                                              (table-set! expose-store window region))
                                          processed))
                                            
                                          
       ((= type ButtonPress)
        (let* ((msg (XEvent-xbutton-ref msg))
                (h (XButtonEvent-x-ref msg))
                (v (XButtonEvent-y-ref msg))
                (button (XButtonEvent-button-ref msg)))
          (cond ((= button Button1)
                     (mouse-down~ window h v))
                    ((= button Button2)
                     (middle-mouse-down~ window h v))
                    ((= button Button3)
                     (right-mouse-down~ window h v)))))

       ((= type FocusIn)
        (let* ((msg (XEvent-xfocus-ref msg))
                 (detail (XFocusChangeEvent-detail-ref msg)))
            (when (or (= detail NotifyAncestor)
                            (= detail NotifyInferior)
                            (= detail NotifyNonlinear))
              (call-focus-gain~ window))))

       ((= type FocusOut)
        (let* ((msg (XEvent-xfocus-ref msg))
                 (detail (XFocusChangeEvent-detail-ref msg)))
            (when (or (= detail NotifyAncestor)
                            (= detail NotifyInferior)
                            (= detail NotifyNonlinear))
               (call-focus-lose~ window #f))))

       ((= type MotionNotify)
        (let* ((msg (XEvent-xmotion-ref msg))
                (h (XMotionEvent-x-ref msg))
                (v (XMotionEvent-y-ref msg)))
           (mouse-move~ window h v)))

@unimp
       ((= type KeyPress)
        (let* ((msg (XEvent-xkey-ref msg))
                (keycode (XKeyEvent-keycode-ref msg))
                (state (XKeyEvent-state-ref msg))
                (mod  '()))
          (when (bit-set? state ShiftMask) (set! mod (cons :shift mod)))
          (when (bit-set? state ControlMask) (set! mod (cons :control mod)))
          (unless (translate-shortcut mod keycode)
             (let ((key (assv-value (XKeycodeToKeysym default-x11-display (integer->char keycode) 0) Symbolic-Keys #f)))
               (if (and key (char? key))
                 (call-key-press~ window key)
                 unprocessed)))))

       ((= type ConfigureNotify)
        (let* ((msg (XEvent-xconfigure-ref msg))
                (width (XConfigureEvent-width-ref msg))
                (height (XConfigureEvent-height-ref msg))
                (x (XConfigureEvent-x-ref msg))
                (y (XConfigureEvent-y-ref msg))
                (prev-size (get-previous-size~ window))
                (prev-pos (get-previous-pos~ window)))
         (table-clear expose-store #f)
         (call-size-change~ window width height)
         (call-position-change~ window x y)
          @temp (
          (when (not prev-size)
              (table-clear expose-store #f)
              (call-size-change~ window width height))
          (when (and prev-size
                            (not (and (= width (get-width~ prev-size))
                                           (= height (get-height~ prev-size)))))
              (table-clear expose-store #f)
              (debug "size-change" window width height)
              (call-size-change~ window width height))
          (when (not prev-pos) (call-position-change~ window x y))
          (when (and prev-pos
                            (not (and (= x (get-h~ prev-pos))
                                           (= x (get-v~ prev-pos)))))
              (call-position-change~ window x y)))))
       (else                      unprocessed))))


(definition (translate-shortcut mods keycode)
  (let ((key  (assv-value (XKeycodeToKeysym default-x11-display (integer->char keycode) 0) Symbolic-Keys #f)))
    (if key
      (dispatch-shortcut~ (get-application) (new Shortcut mods key))
      #f)))

(definition (event-loop)
  (let ((ev (XEvent-make)))
    (let loop ()
      (XNextEvent default-x11-display ev)
      (let ((win (get-window (XAnyEvent-window-ref (XEvent-xany-ref ev)))))
        (if win
        (let ((result (process-window-message win ev)))
          (cond
           ((eq? result unprocessed) 
            (begin (format ':console "Unprocessed event {s}.\n" (XEvent-type-ref ev))
               (loop)))
           ((eq? result processed)
            (loop))
           ((eq? result 'exit)
            (destroy-window~ win))
           (else                     
            (error "Bad event handler response {t}" result)))))
        (loop))))
      'Finished)


;; tofix
(definition (set-capture handle)
  #f)

(definition (unset-capture)
  #f)


(definition (with-platform-painting window proc)
  (let* ((screen-no (XDefaultScreen default-x11-display))
         (visual    (XDefaultVisual default-x11-display screen-no)))
    (with ((surface (new Surface (cairo_xlib_surface_create default-x11-display (get-handle~ window) visual (get-width~ window) (get-height~ window) ))))
      (unwind-protect
          (proc surface)
        (close~ surface))))
  processed)


@old-reference
(definition (paint-window window)
  (let* ((screen-no (XDefaultScreen default-x11-display))
         (visual    (XDefaultVisual default-x11-display screen-no)))
    (with ((surface (new Surface (cairo_xlib_surface_create default-x11-display (get-handle~ window) visual (get-height~ window) (get-width~ window)))))
      (draw-placeholder~ window surface)
      ;;(draw~ window surface ps)
      (XFlush default-x11-display)
      (close~ surface)))
  processed)


;;;
;;;; Style
;;;


(definition (get-style handle)
  (unimplemented 'get-style)
  @windows
  (GetWindowLong handle GWL_STYLE))


(definition (set-style handle style)
  (unimplemented 'set-style)
  @windows
  (SetWindowLong handle GWL_STYLE style))


(definition (get-ex-style handle)
  (unimplemented 'get-ex-style)
  @windows
  (GetWindowLong handle GWL_EXSTYLE))


(definition (set-ex-style handle style)
  (unimplemented 'set-ex-style)
  @windows
  (SetWindowLong handle GWL_EXSTYLE style))


(definition (child-window? handle)
  (unimplemented 'child-window?)
  @windows
  (mask-bit-set? (get-style handle) WS_CHILD))


;;;
;;;; Layers
;;;


(definition (get-layered? handle)
  (unimplemented 'get-layered?)
  @windows
  (mask-bit-set? (get-ex-style handle) WS_EX_LAYERED))


(definition (set-layered? handle flag)
  #t
  @windows
  (SetWindowLong handle GWL_EXSTYLE (mask-bit-set (GetWindowLong handle GWL_EXSTYLE) WS_EX_LAYERED flag)))


;; tofix : this needs to use cairo...
(definition (set-alpha-blending handle n)
  #f
  @windows (
  (set-layered? handle #t)
  (SetLayeredWindowAttributes handle 0 n LWA_ALPHA)
  (RedrawWindow handle NULL NULL (bitwise-ior RDW_ERASE RDW_INVALIDATE))))


;;;
;;;; Tracking
;;;

;; Time was HOVER_DEFAULT
(definition (track-mouse-event handle flags (time: time 0))
  (unimplemented 'track-mouse-event)
  @windows
  (with ((rec (TRACKMOUSEEVENT-make)))
    (TRACKMOUSEEVENT-cbSize-set! rec (size-of-TRACKMOUSEEVENT))
    (TRACKMOUSEEVENT-dwFlags-set! rec flags)
    (TRACKMOUSEEVENT-hwndTrack-set! rec handle)
    (TRACKMOUSEEVENT-dwHoverTime-set! rec time)
    (TrackMouseEvent rec)))


;;;
;;;; Management
;;;


(definition (platform-send-message handle msg wparam lparam)
  (unimplemented 'platform-send-message)
  @windows
    (SendMessage handle msg wparam lparam))


(definition (platform-post-message handle msg wparam lparam)
  (unimplemented 'platform-post-message)
  @windows
    (PostMessage handle msg wparam lparam))


(definition (platform-set-parent handle parent)
  (XReparentWindow default-x11-display handle (get-handle~ parent) 0 0))


;; tofix : temporary
(definition (set-window-title handle title)
  #f)

  
(definition (get-window-owner-handle handle)
  (unimplemented 'get-window-owner-handle)
  @windows
  (GetWindow handle GW_OWNER))


(definition (platform-get-window-child-handle handle)
  (let ((res (XGetChildHandle default-x11-display handle)))
    (if (= 0 res) #f res)))


(definition (platform-get-next-window-handle handle)
  (unimplemented 'platform-get-next-window-handle)
  @windows
  (GetWindow handle GW_HWNDNEXT))


(definition (platform-is-window-visible? handle)
  (let ((infos (XWindowAttributes-make)))
    (XGetWindowAttributes default-x11-display handle infos)
    (not (= (XWindowAttributes-map_state-ref infos) IsUnmapped))))


(definition (get-top-window-handle handle)
  (unimplemented 'get-top-window-handle)
  @windows
  (GetTopWindow handle))


(definition (acquire-point handle window shape)
    (receive (x y) (XTranslateCoordinates default-x11-display (get-handle~ window) handle (get-h~ shape) (get-v~ shape))
      (new Point x y)))


(definition (acquire-rect handle window shape)
  (unimplemented 'acquire-rect)
  @windows
  (let ((acquired (rect->RECT shape)))
    (MapWindowPoints (get-handle~ window) handle (RECT->POINTS acquired) 2)
    (RECT->rect acquired)))


(definition (platform-get-window-position handle)
  (let ((infos (XWindowAttributes-make)))
         (XGetWindowAttributes default-x11-display handle infos)
         (let* ((x (XWindowAttributes-x-ref infos))
                 (y (XWindowAttributes-y-ref infos)))
           (receive (x y) (XTranslateCoordinates default-x11-display handle (XRootWindow default-x11-display (XDefaultScreen default-x11-display)) x y)
             (new Point x y)))))


(definition (platform-get-position handle parent-handle)
   (let ((infos (XWindowAttributes-make)))
       (XGetWindowAttributes default-x11-display handle infos)
       (let* ((x (XWindowAttributes-x-ref infos))
               (y (XWindowAttributes-y-ref infos)))
         (new Point x y))))


(definition (platform-set-position handle pos)
  (XMoveWindow default-x11-display handle (get-h~ pos) (get-v~ pos)))


(definition (platform-get-size handle)
  (with ((infos (XWindowAttributes-make)))
    (XGetWindowAttributes default-x11-display handle infos)
    (new Dimension (XWindowAttributes-width-ref infos) (XWindowAttributes-height-ref infos))))


(definition (platform-get-window-size handle)
  (platform-get-size handle))


(definition (platform-set-window-size handle size)
    (XResizeWindow default-x11-display handle (get-width~ size) (get-height~ size)))


(definition (platform-set-bounds handle rect)
  (unimplemented 'platform-set-bounds)
  @windows
    (SetWindowPos handle NULL (get-left~ rect) (get-top~ rect) (rect-width rect) (rect-height rect) (bitwise-ior SWP_NOZORDER SWP_NOACTIVATE)))


(definition (platform-get-rect handle parent-handle)
  (let ((infos (XWindowAttributes-make)))
       (XGetWindowAttributes default-x11-display handle infos)
       (let* ((l (XWindowAttributes-x-ref infos))
               (t (XWindowAttributes-y-ref infos))
               (r (+ l (XWindowAttributes-width-ref infos)))
               (b (+ t (XWindowAttributes-height-ref infos))))
         (new Rect l t r b))))


(definition (platform-get-bounds handle)
  (unimplemented 'platform-get-bounds)
  @windows
    (with ((rect (RECT-make)))
      (GetWindowRect handle rect)
      (MapWindowPoints NULL handle rect 2)
      (new Rect (RECT-left-ref rect) (RECT-top-ref rect) (RECT-right-ref rect) (RECT-bottom-ref rect))))


(definition (platform-mouse-position)
  (receive (x y) (XQueryPointer default-x11-display (XRootWindow default-x11-display (XDefaultScreen default-x11-display)))
    (new Point x y)))


(definition (platform-window-from-point point)
  (unimplemented 'platform-window-from-point)
  @windows
  (with ((pt (POINT-make)))
    (POINT-x-set! pt (get-h~ point))
    (POINT-y-set! pt (get-v~ point))
    (WindowFromPoint pt)))


(definition (platform-child-window-from-point handle point)
  (unimplemented 'platform-child-window-from-point)
  @windows
  (with ((pt (POINT-make)))
    (POINT-x-set! pt (get-h~ point))
    (POINT-y-set! pt (get-v~ point))
    (ChildWindowFromPointEx handle pt (bitwise-ior CWP_SKIPINVISIBLE CWP_SKIPDISABLED CWP_SKIPTRANSPARENT))))


(definition (platform-move-window handle x y cx cy)
  (unimplemented 'platform-move-window)
  @windows
  (MoveWindow handle x y cx cy #t))


(definition (platform-window-enabled? handle)
  (unimplemented 'platform-window-enabled?)
  @windows
  (IsWindowEnabled handle))


(definition (platform-enable-window handle)
  (unimplemented 'platform-enable-window)
  @windows
  (EnableWindow handle #t))


(definition (platform-disable-window handle)
  (unimplemented 'platform-disable-window)
  @windows
  (EnableWindow handle #f))


(definition (platform-get-client-rect handle)
  (let ((infos (XWindowAttributes-make)))
       (XGetWindowAttributes default-x11-display handle infos)
       (new Rect 0 0 (XWindowAttributes-width-ref infos) (XWindowAttributes-height-ref infos))))
  

(definition (platform-scroll-window handle dh dv rect clip-rect erase?)
  (platform-update-window handle)
  @windows
  (let ((flags (bitwise-ior (if erase? SW_ERASE 0) SW_INVALIDATE)))
    (with ((rect (rect->RECT rect))
           (clip-rect (rect->RECT clip-rect)))
      (ScrollWindowEx handle dh dv rect clip-rect NULL NULL flags))))


(definition (platform-invalidate-rect handle rect erase?)
  (let* ((x (get-left~ rect))
        (y (get-top~ rect))
        (w (- (get-right~ rect) x))
        (h (- (get-bottom~ rect) y)))
  (XClearArea default-x11-display handle x y w h #t)))


(definition (platform-invalidate-region handle region erase?)
  (for-each (function (rect)
              (platform-invalidate-rect handle rect erase?))
            (get-rectangles~ region)))


(definition (platform-invalidate-window handle erase?)
  (unimplemented 'platform-invalidate-window)
  @windows
  (when handle
    (InvalidateRect handle NULL erase?)))


(definition (platform-redraw-window handle rect region)
  (platform-update-window handle))


(definition (platform-get-update-rect handle)
  (unimplemented 'platform-get-update-rect)
  @windows
  (with ((rect (RECT-make)))
    (GetUpdateRect handle rect #f)
    (RECT->rect rect)))


(definition (platform-get-update-region handle)
  (unimplemented 'platform-get-update-region)
  @windows
  (let ((region (new Region)))
    (GetUpdateRgn handle (get-handle~ region) #f)
    region))


(definition (platform-redraw-view-only view handle)
  (platform-update-window handle))


(definition (platform-update-window handle)
  (XClearArea default-x11-display handle 0 0 0 0 #t))
  
  
(definition (platform-show-noactivate handle)
  (show-window handle)
  @windows
  (SetWindowPos handle HWND_TOP 0 0 0 0 (bitwise-ior SWP_SHOWWINDOW SWP_NOACTIVATE SWP_NOMOVE SWP_NOSIZE)))
  
  
(definition (platform-hide-noactivate handle)
  (hide-window handle)
  @windows
  (SetWindowPos handle 0 0 0 0 0 (bitwise-ior SWP_HIDEWINDOW SWP_NOACTIVATE SWP_NOMOVE SWP_NOSIZE)))


(definition (platform-bring-window-to-front handle)
  (XRaiseWindow default-x11-display handle))


(definition (platform-send-window-to-back handle)
  (unimplemented 'platform-send-window-to-back)
  @windows
  (SetWindowPos handle HWND_BOTTOM 0 0 0 0 (bitwise-ior SWP_NOMOVE SWP_NOSIZE)))


(definition (platform-select-foreground-window handle)
  (XRaiseWindow default-x11-display handle))


;; tofix
(definition (platform-get-window-handle-title handle)
  "Bouh"
  @windows
  (let* ((size (GetWindowTextLength handle))
         (string (make-string size #\space)))
    (receive (ret str) (GetWindowText handle string (+ size 1))
      str)))


;; tofix
(definition (platform-lock-window-update handle)
  #t
  @windows
  (LockWindowUpdate handle))


;;;
;;;; Focus
;;;


(definition (platform-get-focus)
  (unimplemented 'platform-get-focus)
  @windows
  (GetFocus))

(definition (platform-set-focus handle)
  (XSetInputFocus default-x11-display handle RevertToNone CurrentTime))


;;;
;;;; Frame Region
;;;


(definition public (frame-region frame <Rect> (insets: insets (new Rect 1 1 1 1)))
  (let ((left   (get-left~ frame))
        (top    (get-top~ frame))
        (right  (get-right~ frame))
        (bottom (get-bottom~ frame))
        (region (new Region)))
    (with-closed ((l (new Region left: left                          top: top                             right: (+ left (get-left~ insets)) bottom: bottom))
                  (t (new Region left: left                          top: top                             right: right                       bottom: (+ top (get-top~ insets))))
                  (r (new Region left: (- right (get-right~ insets)) top: top                             right: right                       bottom: bottom))
                  (b (new Region left: left                          top: (- bottom (get-bottom~ insets)) right: right                       bottom: bottom)))
      (combine!~ region l 'or)
      (combine!~ region t 'or)
      (combine!~ region r 'or)
      (combine!~ region b 'or)
      region)))


;;;
;;;; Cursor
;;;


;;; We need a platform ind interface for this.

(definition public Current-Cursor
  {})


;; tofix Cursor-Resources were literals
@unimplemented
(definition public Cursors
  (list
    (list :arrow               IDC_ARROW)
    (list :wait                IDC_WAIT)
    (list :ibeam               IDC_IBEAM)
    (list :cross               IDC_CROSS)
    (list :finger              IDC_HAND)
    (list :all                 IDC_SIZEALL)
    (list :west-east           IDC_SIZEWE)
    (list :no                  IDC_NO)
    (list :move                (new Cursor-Resource "Move"))
    (list :opened-hand         (new Cursor-Resource "OpenedHand"))
    (list :closed-hand         (new Cursor-Resource "ClosedHand"))
    (list :zoom                (new Cursor-Resource "Zoom"))
    (list :zoom-in             (new Cursor-Resource "ZoomIn"))
    (list :zoom-out            (new Cursor-Resource "ZoomOut"))
    (list :spy                 (new Cursor-Resource "Spy"))
    (list :left-arrow          (new Cursor-Resource "LeftArrow"))
    (list :vertical-splitter   (new Cursor-Resource "VerticalSplitter"))
    (list :horizontal-splitter (new Cursor-Resource "HorizontalSplitter"))))


(definition (load-cursor cursor)
  (unimplemented 'load-cursor)
  @unimp
  (if (number? cursor)
      (LoadCursorInt cursor)
    (let* ((cursor  (if (file? cursor) cursor (find-cursor-file cursor)))
           (ident   (parse~ cursor)))
      (LoadImage NULL ident IMAGE_CURSOR 0 0 LR_LOADFROMFILE))))


(definition (get-named-cursor name)
  (unimplemented 'get-named-cursor)
  @unimp
  (let ((info (assq name Cursors)))
    (if (not info)
        (error "Unknown cursor: {t}" name)
      (cadr info))))


(definition public (get-cursor)
  Current-Cursor)


;; to-fix
(definition public (set-cursor cursor)
  #f
  @unimp
  (unless #f @to-fix-this-doesnt-work-when-switching-overlapped-windows! (= cursor Current-Cursor)
          (set! Current-Cursor cursor)
          (let ((cursor (if (symbol? cursor) (get-named-cursor cursor) cursor)))
            (SetCursor (load-cursor cursor)))))


;; tofix : find how to do this in X11
(definition public (hide-cursor)
  #f)


;; tofix : find how to do this in X11
(definition public (show-cursor)
  (debug "Warning : hide-cursor unimplemented in X11"))


(definition (platform-get-desktop)
  (XRootWindow default-x11-display (XDefaultScreen default-x11-display)))


(definition public (get-work-area) <Rect>
  (let ((size (platform-get-size (XRootWindow default-x11-display (XDefaultScreen default-x11-display)))))
    (new Rect 0 0 (get-width~ size) (get-height~ size))))


(definition (platform-drop-files temp)
  (unimplemented 'platform-drop-files))


(definition (dispatch-command lparam wparam)
  (if (= lparam 0)
      (let ((appl (get-application)))
        (dispatch-shortcut~ appl (find-shortcut~ (get-shortcut-table~ appl) (loword wparam))))
    unprocessed))

(definition public (process-windows (include-invisibles?: include-invisibles? #f))
  ;; quicky
  (list (get-toplevel~ (get-application)))
  @convert
  (collect (function (hwnd)
             (let ((window (get-window hwnd)))
               (when (and window (or include-invisibles? (get-visible?~ window)))
                 window)))
           (process-hwnds))))
