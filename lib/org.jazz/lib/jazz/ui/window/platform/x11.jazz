;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Platform-dependant Window Definitions (X11)
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Jeremie Lasalle Ratelle.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2007
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.ui.window.platform.x11 jazz


(import (jazz.utilities)
        (jazz.library)
        (jazz.io)
        (jazz.platform)
        (jazz.platform.cairo)
        (jazz.ui)
        (time))



(definition public unprocessed '(unprocessed))
(definition public processed '(processed))


(definition (processed-result return)
  (if (and (pair? return) (eq? (car return) 'processed))
      (if (null? (cdr return))
          0
        (cadr return))
    0))


(definition *locked-update* #f)


(cond-expand
  (mac
    (definition (alt-key)
      Mod2Mask))
  (unix
    (definition (alt-key)
      Mod1Mask)))


(definition public Symbolic-Keys
  (list
    (cons XK_a                   #\a)
    (cons XK_b                   #\b)
    (cons XK_c                   #\c)
    (cons XK_d                   #\d)
    (cons XK_e                   #\e)
    (cons XK_f                   #\f)
    (cons XK_g                   #\g)
    (cons XK_h                   #\h)
    (cons XK_i                   #\i)
    (cons XK_j                   #\j)
    (cons XK_k                   #\k)
    (cons XK_l                   #\l)
    (cons XK_m                   #\m)
    (cons XK_n                   #\n)
    (cons XK_o                   #\o)
    (cons XK_p                   #\p)
    (cons XK_q                   #\q)
    (cons XK_r                   #\r)
    (cons XK_s                   #\s)
    (cons XK_t                   #\t)
    (cons XK_u                   #\u)
    (cons XK_v                   #\v)
    (cons XK_w                   #\w)
    (cons XK_x                   #\x)
    (cons XK_y                   #\y)
    (cons XK_z                   #\z)
    (cons XK_A                   #\A)
    (cons XK_B                   #\B)
    (cons XK_C                   #\C)
    (cons XK_D                   #\D)
    (cons XK_E                   #\E)
    (cons XK_F                   #\F)
    (cons XK_G                   #\G)
    (cons XK_H                   #\H)
    (cons XK_I                   #\I)
    (cons XK_J                   #\J)
    (cons XK_K                   #\K)
    (cons XK_L                   #\L)
    (cons XK_M                   #\M)
    (cons XK_N                   #\N)
    (cons XK_O                   #\O)
    (cons XK_P                   #\P)
    (cons XK_Q                   #\Q)
    (cons XK_R                   #\R)
    (cons XK_S                   #\S)
    (cons XK_T                   #\T)
    (cons XK_U                   #\U)
    (cons XK_V                   #\V)
    (cons XK_W                   #\W)
    (cons XK_X                   #\X)
    (cons XK_Y                   #\Y)
    (cons XK_Z                   #\Z)
    (cons XK_0                   #\0)
    (cons XK_1                   #\1)
    (cons XK_2                   #\2)
    (cons XK_3                   #\3)
    (cons XK_4                   #\4)
    (cons XK_5                   #\5)
    (cons XK_6                   #\6)
    (cons XK_7                   #\7)
    (cons XK_8                   #\8)
    (cons XK_9                   #\9)
    (cons XK_F1                  'F1)
    (cons XK_F2                  'F2)
    (cons XK_F3                  'F3)
    (cons XK_F4                  'F4)
    (cons XK_F5                  'F5)
    (cons XK_F6                  'F6)
    (cons XK_F7                  'F7)
    (cons XK_F8                  'F8)
    (cons XK_F9                  'F9)
    (cons XK_F10                 'F10)
    (cons XK_F11                 'F11)
    (cons XK_F12                 'F12)
    (cons XK_Escape              'Escape)
    (cons XK_BackSpace           'Backspace)
    (cons XK_minus               #\-)
    (cons XK_plus                #\+)
    (cons XK_comma               #\,)
    (cons XK_period              #\.)
    (cons XK_colon               #\:)
    (cons XK_semicolon           #\;)
    (cons XK_less                #\<)
    (cons XK_equal               #\=)
    (cons XK_greater             #\>)
    (cons XK_slash               #\/)
    (cons XK_asciitilde          #\~)
    (cons XK_bracketleft         #\[)
    (cons XK_backslash           #\\)
    (cons XK_bracketright        #\])
    (cons XK_apostrophe          #\')
    (cons XK_exclam              #\!)
    (cons XK_quotedbl            #\")
    (cons XK_numbersign          #\#)
    (cons XK_dollar              #\$)
    (cons XK_percent             #\%)
    (cons XK_ampersand           #\&)
    (cons XK_parenleft           #\()
    (cons XK_parenright          #\))
    (cons XK_asterisk            #\*)
    (cons XK_question            #\?)
    (cons XK_at                  #\@)
    (cons XK_braceleft           #\{)
    (cons XK_braceright          #\})
    (cons XK_bar                 #\|)
    (cons XK_asciicircum         #\^)
    (cons XK_underscore          #\_)
    (cons XK_grave               #\`)
    (cons XK_Return              'Return)
    (cons XK_space               'Space)
    (cons XK_Tab                 'Tab)
    (cons XK_Home                'Home)
    (cons XK_End                 'End)
    (cons XK_Left                'Left)
    (cons XK_Up                  'Up)
    (cons XK_Right               'Right)
    (cons XK_Down                'Down)
    (cons XK_Prior               'Prior)
    (cons XK_Next                'Next)
    (cons XK_Insert              'Insert)
    (cons XK_Pause               'Pause)
    (cons XK_Delete              'Delete)
    (cons XK_KP_Add              'Add)
    (cons XK_KP_Subtract         'Subtract)
    (cons XK_KP_Decimal          'Multiply)
    (cons XK_KP_Divide           'Divide)))


;;;
;;;; Window
;;;


(definition public Windows-Table
  (make-table test: eqv?))


(definition public Window-Title-Table
  (make-table test: eqv?))


(definition last-click
  (time->seconds (current-time)))


(definition public inline (get-window handle)
  (table-ref Windows-Table handle #f))


(definition public inline (set-window handle window)
  (table-set! Windows-Table handle window))


(definition public inline (platform-get-window-handle-title handle)
  (table-ref Window-Title-Table handle #f))


(definition public inline (set-window-title handle title)
  (table-set! Window-Title-Table handle title))


(definition (prepare-handle window parent rest)
  (bind-keywords ((handle {}) . others) rest
    (let ((handle (create-handle window parent rest)))
      (if (not handle)
          (error "Unable to create x11 window")
        (XSelectInput 
          default-x11-display 
          handle 
          (+ FocusChangeMask ButtonReleaseMask ButtonPressMask StructureNotifyMask ExposureMask PointerMotionMask KeyPressMask))
        handle))))


(definition (create-handle window parent rest)
  (let* ((screen-no (XDefaultScreen default-x11-display))
         (screen    (XScreenOfDisplay default-x11-display screen-no))
         (parent    (if parent (get-handle~ parent) (XRootWindow default-x11-display screen-no)))
         (attr      (XSetWindowAttributes-make))
         (visual    (XDefaultVisual default-x11-display screen-no)))
    (XSetWindowAttributes-bit_gravity-set! attr StaticGravity)
    (if (is? window Desktop)
        (platform-get-desktop)
      (XCreateWindow 
        default-x11-display
        parent
        0
        0
        500
        500
        0
        CopyFromParent
        InputOutput
        visual
        CWBitGravity
        attr))))


(definition (destroy-window window)
  (when use-expose-store?
    (table-set! expose-store window #f))
  (table-set! actions-store window #f)
  (when (= (get-handle~ window) (platform-get-focus))
    (call-focus-lose~ window #f))
  (XDestroyWindow default-x11-display (get-handle~ window)))


(definition (dispatch-message window msg wparam lparam)
  (process-window-message window msg))


(definition (show-window handle)
  (XMapWindow default-x11-display handle))


(definition (hide-window handle)
  (XUnmapWindow default-x11-display handle))


(definition (bring-window-to-top handle)
  (XRaiseWindow default-x11-display handle))


(definition (minimize-window handle)
  (unimplemented 'minimize-window))


(definition (platform-erase-background handle)
  (unimplemented 'platform-erase-background))


;;;
;;;; Messages
;;;


(definition expose-store (make-table))


(definition use-expose-store? #f)


(definition (platform-process-messages)
  (let ((msg (XEvent-make)))
    (set! use-expose-store? #t)
    (while (XNextEvent default-x11-display msg)
      (let* ((any-event (XEvent-xany-ref msg))
             (handle (XAnyEvent-window-ref any-event)))
        (let ((window (get-window handle))
              (wparam 0)
              (lparam 0))
          (when window
            (call-dispatch-message~ window msg wparam lparam))))
      (when (and use-expose-store? (= 0 (XPending default-x11-display)))
        (iterate-table expose-store
                       (function (win region)
                         (when region
                           (paint~ win region))))
        (set! expose-store (make-table))))))


(definition (platform-process-one-message)
  (let ((msg (XEvent-make)))
    (XNextEvent default-x11-display msg)
    (let* ((any-event (XEvent-xany-ref msg))
           (handle (XAnyEvent-window-ref any-event)))
      (let ((window (get-window handle))
            (wparam 0)
            (lparam 0))
        (when window
          (call-dispatch-message~ window msg wparam lparam))))))


(definition (process-window-message window msg)
  (let ((type (XEvent-type-ref msg)))
    (cond
      ((= type Expose)      
       (let* ((msg (XEvent-xexpose-ref msg))
              (left (XExposeEvent-x-ref msg))
              (top  (XExposeEvent-y-ref msg))
              (right (+ left (XExposeEvent-width-ref msg)))
              (bottom (+ top (XExposeEvent-height-ref msg)))
              (region (new Rect left top right bottom))
              (old-region (table-ref expose-store window #f)))
         (unless (=? region {Rect 0 0 0 0})
           (if use-expose-store?
               (if old-region
                   (table-set! expose-store window (rect-union old-region region))
                 (table-set! expose-store window region))
             (paint~ window region)
             processed))))
      
      
      ((= type ButtonPress)
       (let* ((msg (XEvent-xbutton-ref msg))
              (h (XButtonEvent-x-ref msg))
              (v (XButtonEvent-y-ref msg))
              (button (XButtonEvent-button-ref msg)))
         (cond ((= button Button1)
                (let ((click (time->seconds (current-time))))
                  (if (< (- click last-click) 0.2)
                      (double-click~ window h v)
                    (mouse-down~ window h v))
                  (set! last-click click)))
               ((= button Button2)
                (middle-mouse-down~ window h v))
               ((= button Button3)
                (right-mouse-down~ window h v)
                (let ((pt (acquire-point (platform-get-desktop) window (new Point h v))))
                  (call-context-menu~ window (get-h~ pt) (get-v~ pt))))
               ((= button Button4)
                (mouse-wheel~ window 120))
               ((= button Button5)
                (mouse-wheel~ window -120)))))
      
      
      ((= type ButtonRelease)
       (let* ((msg (XEvent-xbutton-ref msg))
              (h (XButtonEvent-x-ref msg))
              (v (XButtonEvent-y-ref msg))
              (button (XButtonEvent-button-ref msg)))
         (cond ((= button Button1)
                (mouse-up~ window h v))
               ((= button Button2)
                (middle-mouse-up~ window h v))
               ((= button Button3)
                (right-mouse-up~ window h v)))))
      
      
      ((= type FocusIn)
       (let* ((msg (XEvent-xfocus-ref msg))
              (detail (XFocusChangeEvent-detail-ref msg)))
         (when (or (= detail NotifyAncestor)
                   (= detail NotifyInferior)
                   (= detail NotifyNonlinear))
           (call-focus-gain~ window))))
      
      ((= type FocusOut)
       (let* ((msg (XEvent-xfocus-ref msg))
              (detail (XFocusChangeEvent-detail-ref msg)))
         (when (or (= detail NotifyAncestor)
                   (= detail NotifyInferior)
                   (= detail NotifyNonlinear))
           (call-focus-lose~ window #f))))
      
      ((= type MotionNotify)
       (let* ((msg (XEvent-xmotion-ref msg))
              (h (XMotionEvent-x-ref msg))
              (v (XMotionEvent-y-ref msg)))
         (mouse-move~ window h v)))
      
      ((= type KeyPress)
       (let* ((msg (XEvent-xkey-ref msg))
              (keycode (XKeyEvent-keycode-ref msg))
              (state (XKeyEvent-state-ref msg))
              (mod  '()))
         (when (bit-set? ShiftMask state) (set! mod (cons :shift mod)))
         (when (bit-set? ControlMask state) (set! mod (cons :control mod)))
         (when (bit-set? (alt-key) state) (set! mod (cons :alt mod)))
         (unless (translate-shortcut mod keycode)
           (let ((key (assv-value (XKeycodeToKeysym default-x11-display (integer->char keycode) (if (memq :shift mod) 1 0)) Symbolic-Keys #f)))
             (let ((key (if (eq? key 'Space) #\space key)))
               (if (and key (char? key))
                   (call-key-press~ window key)
                 unprocessed))))))
      
      ((= type ConfigureNotify)
       (let* ((msg (XEvent-xconfigure-ref msg))
              (width (XConfigureEvent-width-ref msg))
              (height (XConfigureEvent-height-ref msg))
              (x (XConfigureEvent-x-ref msg))
              (y (XConfigureEvent-y-ref msg))
              (prev-size (get-previous-size~ window))
              (prev-pos (get-previous-pos~ window)))
         (unless (=? prev-size (new Dimension width height))
           (table-set! expose-store window #f)
           (call-size-change~ window width height))
         (unless (=? prev-pos (new Point x y))
           (call-position-change~ window x y))))
      
      ((= type SelectionRequest)
       (let* ((msg (XEvent-xselectionrequest-ref msg))
              (requestor (XSelectionRequestEvent-requestor-ref msg))
              (selection (XSelectionRequestEvent-selection-ref msg))
              (target    (XSelectionRequestEvent-target-ref    msg))
              (property  (XSelectionRequestEvent-property-ref  msg)))
         (XSendClipboardString default-x11-display (get-handle~ window) requestor selection target property)))
      
      (else                      unprocessed))))

(definition (event-loop)
  (let ((ev (XEvent-make)))
    (let loop ()
      (XNextEvent default-x11-display ev)
      (let ((win (get-window (XAnyEvent-window-ref (XEvent-xany-ref ev)))))
        (if win
        (let ((result (process-window-message win ev)))
          (cond
           ((eq? result unprocessed) 
            (begin (format ':console "Unprocessed event {s}.\n" (XEvent-type-ref ev))
               (loop)))
           ((eq? result processed)
            (loop))
           ((eq? result 'exit)
            (destroy-window~ win))
           (else                     
            (error "Bad event handler response {t}" result)))))
        (loop))))
      'Finished)


(definition (translate-shortcut mods keycode)
  (let ((key  (assv-value (XKeycodeToKeysym default-x11-display (integer->char keycode) 1) Symbolic-Keys #f))
        (app  (get-application)))
    (if (and key app)
      (dispatch-shortcut~ app (new Shortcut mods key))
      #f)))


;;;
;;;; Capture
;;;


(definition (set-capture handle)
  #f)


(definition (unset-capture)
  #f)


;;;
;;;; Painting
;;;


(definition (with-platform-painting window proc)
  (let* ((screen-no (XDefaultScreen default-x11-display))
         (visual    (XDefaultVisual default-x11-display screen-no)))
    (with ((surface (new Surface (cairo_xlib_surface_create default-x11-display (get-handle~ window) visual (get-width~ window) (get-height~ window) ))))
      (unwind-protect
          (proc surface)
        (close~ surface))))
  processed)


(definition public (get-window-surface window)
  (let* ((screen-no (XDefaultScreen default-x11-display))
         (visual    (XDefaultVisual default-x11-display screen-no)))
    (cairo_xlib_surface_create default-x11-display (get-handle~ window) visual (get-width~ window) (get-height~ window))))


(definition (set-alpha-blending handle n)
  #f
  @windows 
  ((set-layered? handle #t)
   (SetLayeredWindowAttributes handle 0 n LWA_ALPHA)
   (RedrawWindow handle NULL NULL (bitwise-ior RDW_ERASE RDW_INVALIDATE))))


;;;
;;;; Management
;;;


(definition (platform-set-parent handle parent)
  (XReparentWindow default-x11-display handle (get-handle~ parent) 0 0))


(definition (platform-get-first-child handle)
  (let ((num-of-children (XNumberOfChildren default-x11-display handle)))
    (if (= 0 num-of-children)
        #f
      (XGetChildHandle default-x11-display handle 0))))


(definition (platform-get-first-visible-child handle)
  (let ((num-of-children (XNumberOfChildren default-x11-display handle)))
    (if (= 0 num-of-children) 
        #f
      (let loop ((n 0))
           (if (= n num-of-children)
               #f
             (let ((child-handle (XGetChildHandle default-x11-display handle n)))
               (if (platform-is-window-visible? child-handle)
                   child-handle
                 (loop (+ n 1)))))))))


(definition (platform-is-window-visible? handle)
  (let ((infos (XWindowAttributes-make)))
    (XGetWindowAttributes default-x11-display handle infos)
    (= (XWindowAttributes-map_state-ref infos) IsViewable)))


(definition (acquire-point to-handle from-window shape)
  (receive (x y) (XTranslateCoordinates default-x11-display (get-handle~ from-window) to-handle (get-h~ shape) (get-v~ shape))
    (new Point x y)))


(definition (acquire-rect handle window shape)
  (unimplemented 'acquire-rect)
  @windows
  (let ((acquired (rect->RECT shape)))
    (MapWindowPoints (get-handle~ window) handle (RECT->POINTS acquired) 2)
    (RECT->rect acquired)))


(definition (platform-get-position-in-root handle)
  (let ((infos (XWindowAttributes-make)))
    (XGetWindowAttributes default-x11-display handle infos)
    (let* ((x (XWindowAttributes-x-ref infos))
           (y (XWindowAttributes-y-ref infos)))
      (receive (x y) (XTranslateCoordinates default-x11-display handle (XRootWindow default-x11-display (XDefaultScreen default-x11-display)) x y)
        (new Point x y)))))


(definition (platform-get-position handle parent-handle)
  (let ((infos (XWindowAttributes-make)))
    (XGetWindowAttributes default-x11-display handle infos)
    (let* ((x (XWindowAttributes-x-ref infos))
           (y (XWindowAttributes-y-ref infos)))
      (new Point x y))))


(definition (platform-set-position handle pos)
  (if *locked-update*
      (add-position-action (get-window handle) pos)
    (if (is? (get-window handle) Popup)
        (receive (h v) (XTranslateCoordinates default-x11-display (platform-get-desktop) (get-handle~ (get-parent~ (get-window handle))) (get-h~ pos) (get-v~ pos))
          (XMoveWindow default-x11-display handle h v))
      (XMoveWindow default-x11-display handle (get-h~ pos) (get-v~ pos)))))
  

(definition (platform-get-size handle)
  (with ((infos (XWindowAttributes-make)))
    (XGetWindowAttributes default-x11-display handle infos)
    (new Dimension (XWindowAttributes-width-ref infos) (XWindowAttributes-height-ref infos))))


(definition (platform-get-window-size handle)
  (platform-get-size handle))


(definition (platform-set-window-size handle size)
  (if *locked-update*
      (add-size-action (get-window handle) size)
    (XResizeWindow default-x11-display handle (get-width~ size) (get-height~ size))))


(definition (platform-set-position-size handle pos size)
  (XMoveResizeWindow default-x11-display handle (get-h~ pos) (get-v~ pos) (get-width~ size) (get-height~ size)))


(definition (platform-set-bounds handle rect)
  (unimplemented 'platform-set-bounds)
  @windows
  (SetWindowPos handle NULL (get-left~ rect) (get-top~ rect) (rect-width rect) (rect-height rect) (bitwise-ior SWP_NOZORDER SWP_NOACTIVATE)))


(definition (platform-get-rect handle parent-handle)
  (let ((infos (XWindowAttributes-make)))
    (XGetWindowAttributes default-x11-display handle infos)
    (let* ((l (XWindowAttributes-x-ref infos))
           (t (XWindowAttributes-y-ref infos))
           (r (+ l (XWindowAttributes-width-ref infos)))
           (b (+ t (XWindowAttributes-height-ref infos))))
      (new Rect l t r b))))


(definition (platform-get-bounds handle)
  (unimplemented 'platform-get-bounds)
  @windows
  (with ((rect (RECT-make)))
    (GetWindowRect handle rect)
    (MapWindowPoints NULL handle rect 2)
    (new Rect (RECT-left-ref rect) (RECT-top-ref rect) (RECT-right-ref rect) (RECT-bottom-ref rect))))


(definition (platform-mouse-position)
  (receive (x y) (XQueryPointer default-x11-display (XRootWindow default-x11-display (XDefaultScreen default-x11-display)))
    (new Point x y)))


(definition (platform-window-from-point point)
  (unimplemented 'platform-window-from-point)
  @windows
  (with ((pt (POINT-make)))
    (POINT-x-set! pt (get-h~ point))
    (POINT-y-set! pt (get-v~ point))
    (WindowFromPoint pt)))


(definition (platform-child-window-from-point handle point)
  (unimplemented 'platform-child-window-from-point)
  @windows
  (with ((pt (POINT-make)))
    (POINT-x-set! pt (get-h~ point))
    (POINT-y-set! pt (get-v~ point))
    (ChildWindowFromPointEx handle pt (bitwise-ior CWP_SKIPINVISIBLE CWP_SKIPDISABLED CWP_SKIPTRANSPARENT))))


(definition (platform-move-window handle x y cx cy)
  (unimplemented 'platform-move-window)
  @windows
  (MoveWindow handle x y cx cy #t))


(definition (platform-window-enabled? handle)
  (unimplemented 'platform-window-enabled?)
  @windows
  (IsWindowEnabled handle))


(definition (platform-enable-window handle)
  (warn-unimplemented 'platform-enable-window))


(definition (platform-disable-window handle)
  (warn-unimplemented 'platform-disable-window))


(definition (platform-get-client-rect handle)
  (let ((infos (XWindowAttributes-make)))
    (XGetWindowAttributes default-x11-display handle infos)
    (new Rect 0 0 (XWindowAttributes-width-ref infos) (XWindowAttributes-height-ref infos))))


(definition (platform-scroll-window handle dh dv rect clip-rect erase?)
  (platform-update-window handle)
  @windows
  (let ((flags (bitwise-ior (if erase? SW_ERASE 0) SW_INVALIDATE)))
    (with ((rect (rect->RECT rect))
           (clip-rect (rect->RECT clip-rect)))
      (ScrollWindowEx handle dh dv rect clip-rect NULL NULL flags))))


(definition (platform-invalidate-rect handle rect erase?)
  ;; is this test correct or was it a patch made during the port
  (when handle
    (let ((l (if (< (get-left~ rect) 0) 0 (get-left~ rect)))
          (t (if (< (get-top~ rect) 0) 0 (get-top~ rect)))
          (r (if (> (get-right~ rect) (get-width~ (get-window handle)))
                 (get-width~ (get-window handle))
               (get-right~ rect)))
          (b (if (> (get-bottom~ rect) (get-height~ (get-window handle)))
                 (get-height~ (get-window handle))
               (get-bottom~ rect))))
      (let ((w (- r l))
            (h (- b t)))
        (unless (or (< w 0) (< h 0))
          (XInvalidateRect default-x11-display handle l t w h))))))


(definition (platform-invalidate-region handle region erase?)
  (for-each (function (rect)
              (platform-invalidate-rect handle rect erase?))
            (get-rectangles~ region)))


(definition (platform-invalidate-window handle erase?)
  (unimplemented 'platform-invalidate-window)
  @windows
  (when handle
    (InvalidateRect handle NULL erase?)))


(definition (platform-redraw-window handle rect region)
  (platform-update-window handle))


(definition (platform-get-update-rect handle)
  (unimplemented 'platform-get-update-rect)
  @windows
  (with ((rect (RECT-make)))
    (GetUpdateRect handle rect #f)
    (RECT->rect rect)))


(definition (platform-get-update-region handle)
  (unimplemented 'platform-get-update-region)
  @windows
  (let ((region (new Region)))
    (GetUpdateRgn handle (get-handle~ region) #f)
    region))


(definition (platform-redraw-view-only view handle)
  (platform-update-window handle))


(definition (platform-update-window handle)
  (when handle
    (let* ((size (platform-get-size handle))
           (rct (new Rect 0 0 (get-width~ size) (get-height~ size))))
      (platform-invalidate-rect handle rct #t))))
  
  
(definition (platform-show-noactivate handle)
  (show-window handle))


(definition (platform-hide-noactivate handle)
  (hide-window handle))


(definition (platform-bring-window-to-front handle)
  (XRaiseWindow default-x11-display handle))


(definition (platform-send-window-to-back handle)
  (XLowerWindow default-x11-display handle))


(definition (platform-select-foreground-window handle)
  (XRaiseWindow default-x11-display handle))


;;;
;;;; Locking
;;;


(definition actions-store (make-table))


(definition (add-position-action window position)
  (let ((action (table-ref actions-store window #f)))
    (table-set! actions-store window (cons position (and action (cdr action))))))


(definition (add-size-action window size)
  (let ((action (table-ref actions-store window #f)))
    (table-set! actions-store window (cons (and action (car action)) size))))


(definition (platform-lock-window-update handle)
  (if handle
      (set! *locked-update* #t)
    (begin 
      (set! *locked-update* #f)
      (process-window-actions))))


(definition (process-window-actions)
  (iterate-table 
    actions-store
    (function (window action)
      (when action
        (let ((handle (get-handle~ window)))
          (hide-window handle)
          (let ((position (car action))
                (size     (cdr action)))
            (if (and position size)
                (platform-set-position-size handle position size)
              (when position (platform-set-position handle position))
              (when size     (platform-set-window-size handle size))))
          (show-window handle)))))
  (set! actions-store (make-table)))


;;;
;;;; Focus
;;;


(definition (platform-get-focus)
  (receive (win state) (XGetInputFocus default-x11-display)
    win))


(definition (platform-set-focus handle)
  (XFlush default-x11-display)
  (when handle
    (XSetInputFocus default-x11-display handle RevertToNone CurrentTime)))


;;;
;;;; Cursor
;;;


(definition public Current-Cursor
  {})


@unimplemented
(definition public Cursors
  (list
    (list :arrow               IDC_ARROW)
    (list :wait                IDC_WAIT)
    (list :ibeam               IDC_IBEAM)
    (list :cross               IDC_CROSS)
    (list :finger              IDC_HAND)
    (list :all                 IDC_SIZEALL)
    (list :west-east           IDC_SIZEWE)
    (list :no                  IDC_NO)
    (list :move                (new Cursor-Resource "Move"))
    (list :opened-hand         (new Cursor-Resource "OpenedHand"))
    (list :closed-hand         (new Cursor-Resource "ClosedHand"))
    (list :zoom                (new Cursor-Resource "Zoom"))
    (list :zoom-in             (new Cursor-Resource "ZoomIn"))
    (list :zoom-out            (new Cursor-Resource "ZoomOut"))
    (list :spy                 (new Cursor-Resource "Spy"))
    (list :left-arrow          (new Cursor-Resource "LeftArrow"))
    (list :vertical-splitter   (new Cursor-Resource "VerticalSplitter"))
    (list :horizontal-splitter (new Cursor-Resource "HorizontalSplitter"))))


(definition (load-cursor cursor)
  (unimplemented 'load-cursor)
  @unimp
  (if (number? cursor)
      (LoadCursorInt cursor)
    (let* ((cursor  (if (file? cursor) cursor (find-cursor-file cursor)))
           (ident   (parse~ cursor)))
      (LoadImage NULL ident IMAGE_CURSOR 0 0 LR_LOADFROMFILE))))


(definition (get-named-cursor name)
  (unimplemented 'get-named-cursor)
  @unimp
  (let ((info (assq name Cursors)))
    (if (not info)
        (error "Unknown cursor: {t}" name)
      (cadr info))))


(definition public (get-cursor)
  Current-Cursor)


(definition public (set-cursor cursor)
  #f
  @unimp
  (unless #f @to-fix-this-doesnt-work-when-switching-overlapped-windows! (= cursor Current-Cursor)
          (set! Current-Cursor cursor)
          (let ((cursor (if (symbol? cursor) (get-named-cursor cursor) cursor)))
            (SetCursor (load-cursor cursor)))))


(definition public (hide-cursor)
  #f)


(definition public (show-cursor)
  #f)


;;;
;;;; Desktop
;;;


(definition (platform-get-desktop)
  (XRootWindow default-x11-display (XDefaultScreen default-x11-display)))


(definition public (get-work-area) <Rect>
  (let ((size (platform-get-size (XRootWindow default-x11-display (XDefaultScreen default-x11-display)))))
    (new Rect 0 0 (get-width~ size) (get-height~ size))))


;;;
;;;; Drag and Drop
;;;


(definition (platform-drop-files temp)
  (unimplemented 'platform-drop-files))


;;;
;;;; Window processing
;;;


(definition public (process-windows (include-invisibles?: include-invisibles? #f))
  ;; quicky
  (list (get-toplevel~ (get-application)))
  @convert
  (collect (function (hwnd)
             (let ((window (get-window hwnd)))
               (when (and window (or include-invisibles? (get-visible?~ window)))
                 window)))
           (process-hwnds)))


;;;
;;;; Historic stuff
;;;


(definition (platform-send-message handle msg wparam lparam)
  (unimplemented 'platform-send-message)
  @windows
  (SendMessage handle msg wparam lparam))


(definition (platform-post-message handle msg wparam lparam)
  (unimplemented 'platform-post-message)
  @windows
  (PostMessage handle msg wparam lparam)))
