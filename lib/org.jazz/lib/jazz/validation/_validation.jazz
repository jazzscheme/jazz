;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Jazz Validation Suite
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.validation jazz


(import (jazz.validation.modules))


(definition (validate)
  (validate-modules))


@old
(import (jazz.debug)
        (jazz.validation.suite))


@old
(definition Present-Classes?
  #t)


@old
(definition (present-validations*)
  (let ((x-class X)
        (y-class Y)
        (object-class (load-category 'jazz.Object))
        (slot-class (load-category 'jazz.Slot))
        (integer-class (load-category 'jazz.Integer))
        (pair-class (load-category 'jazz.Pair))
        (sequence-class (load-category 'jazz.Sequence))
        (string-class (load-category 'jazz.String)))
    (when Present-Classes?
      (present-classes)
      (newline))
    (present-object (new x-class))
    (present-object (new y-class))
    (newline)
    (present-evaluation "(new X)" (new x-class))
    (present-evaluation "(X.moo (new X) 2)" (X.moo (new x-class) 2))
    (present-evaluation "(Y.foo (new Y))" (X.foo (new y-class)))
    (newline)
    (validate (object? 2) #f)
    (validate (object? x-class) #t)
    (validate (is? x-class (load-metaclass 'jazz.validation.suite.X)) #t)
    (validate (is? y-class (load-metaclass 'jazz.validation.suite.Y)) #t)
    (validate (is? y-class (load-metaclass 'jazz.Object)) #t)
    (validate (is? y-class (load-category 'jazz.Object)) #t)
    (validate (is? 2 integer-class) #t)
    (validate (is? (cons 1 2) pair-class) #t)
    (validate (is? "foo" sequence-class) #t)
    (validate (is? "foo" string-class) #t)))


@old
(definition (present-classes)
  (present-category (load-category 'jazz.Object))
  (present-category (load-category 'jazz.Slot))
  (present-category (load-category 'jazz.validation.suite.X))
  (present-category (load-category 'jazz.validation.suite.Y))
  (present-category (load-metaclass 'jazz.Object))
  (present-category (load-metaclass 'jazz.validation.suite.X))
  (present-category (load-metaclass 'jazz.validation.suite.Y))))
