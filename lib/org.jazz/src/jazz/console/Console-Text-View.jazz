;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Console Text View
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.console.Console-Text-View jazz


(import (jazz.console)
        (jazz.debugger)
        (jazz.ide)
        (jazz.jml)
        (jazz.language.jazz)
        (jazz.library)
        (jazz.literals)
        (jazz.platform)
        (jazz.system)
        (jazz.ui)
        (jazz.utilities))


(class Console-Text-View extends IDE-Text-View


  (slot last-inserted  initialize {})
  (slot inserted-where initialize {})
  (slot banner         initialize {} accessors generate)
  (slot prompt         initialize {} accessors generate)
  (slot console-port   initialize {} accessors generate)
  (slot console-pump   initialize {} accessors generate)
  
  
  (form
    (<install> wrap?: #t left-padding: 2))

  
  (method meta (external-name . rest)
    'console-text)


  (method (default-tool?)
    #t)


  (method (default-console?)
    #t)
  
  
  (method (propagate-styles?)
    #f)
   
  
  (method (install rest)
    (nextmethod rest)
    (let ((pref (preferences)))
      (add-style (new Text-Style name: 'Base font: {Font name: Code}))
      (add-style (new Text-Style name: 'Banner base: 'Base color: (get-banner-color~ pref)))
      (add-style (new Text-Style name: 'Entry  base: 'Base color: (get-entry-color~ pref)))
      (add-style (new Text-Style name: 'Input  base: 'Base color: (get-input-color~ pref)))
      (add-style (new Text-Style name: 'Output base: 'Base color: (get-output-color~ pref)))
      (set-default-style (get-style 'Entry))))

  
  (method (preferences)
    (get-preferences '(documents console-text)))


  ;;;
  ;;;; Host
  ;;;
  
  
  (method meta (host-icon)
    {Bitmap-Resource "Console"})
  
  
  (method meta (host-title)
    "Console")

  
  ;;;
  ;;;; Document
  ;;;
  
  
  (method (position-host host)
    (set-size~ host {Dimension 1280 100}))


  ;;;
  ;;;; Actions
  ;;;
  

  (method (focus-actions)
    (cons (find-actions 'console-text)
          (nextmethod)))


  ;;;
  ;;;; Events
  ;;;
  
  
  (method (on-fresh-prompt evt)
    (fresh-prompt))
  
  
  (method (on-evaluate evt)
    (console-evaluate)
    @convert (
    (set! completion-active? #f)
    (let* ((pos (get-start))
           (prompt (previous-prompt pos)))
      (if (not prompt)
          (fresh-prompt)
        (let ((last (last-prompt)))
          (if (nu=? prompt last)
              (console-evaluate)
            (fresh-prompt)
            (when (= (get-row~ pos) (get-row~ prompt))
              (insert-string (prompt-command prompt)))))))))
  
  
  (method (on-insert-previous evt)
    (if (has-completion?)
        (end-completion)
      (insert-previous-expression)))
  
  
  (method (on-insert-next evt)
    (if (has-completion?)
        (end-completion)
      (insert-next-expression)))
  
  
  (method (mouse-down pos)
    (nextmethod pos)
    (prompt-at-end))


  (method (tab-press key modifiers)
    (if (has-completion?)
        (end-completion)
      (if (shift-key? modifiers)
          (insert-next-expression)
        (insert-previous-expression))))
  
  
  (method (scrollee-size)
    (if wrap?
        (new Dimension (get-display-width) (scrollee-height))
      (nextmethod)))


  (method (context-menu pos)
    (receive (shift? control? alt?) (modifiers-down)
      (if (and (not control?) (not shift?) (not alt?))
          (begin
            (context-menu-click pos)
            (track-popup-menu (new Console-Menu) pos))
        (nextmethod pos))))
  
  
  (method public (set-selection range . rest)
    (apply nextmethod range rest)
    (set! inserted-where {}))


  ;;;
  ;;;; Style
  ;;;
  
  
  (method protected (backward-style pos predicate)
    (let ((explorer (new (explorer-class) self start: pos end: pos)))
      (backward-style~ explorer predicate)
      (get-range~ explorer)))
  
  
  (method protected (forward-style pos predicate)
    (let ((explorer (new (explorer-class) self start: pos end: pos)))
      (forward-style~ explorer predicate)
      (get-range~ explorer)))
  
  
  (method protected (select-style pos predicate)
    (let ((explorer (new (explorer-class) self start: pos end: pos)))
      (select-style~ explorer predicate)
      (get-range~ explorer)))


  ;;;
  ;;;; Eval
  ;;;
  
  
  (method (console-evaluate)
    (set-caret (text-ending))
    (insert-newline)
    (eval-from-prompt))

  
  (method (eval-from-prompt)
    (let ((info (current-command)))
      (when info
        (receive (range command) info
          (unless (empty-string? command)
            (display command console-port)
            (force-output console-port)
            (set-style range (get-style 'Input)))))))
  
  
  (method public virtual (eval-command command console?)
    )
  
  
  (method public virtual (eval-commands range names commands console?)
    )
  
  
  (method public virtual (display-evaluation results console?)
    (evaluation-break)
    @convert
    (for-each (function (result)
                (with-colored-output (eval-color)
                  (function ()
                    (print-evaluation result console-printer)))
                @convert-console-printer
                (fresh-line console-printer))
              results))
  
  
  (method public virtual (print-evaluation result console-printer)
    (unless (unspecified? result)
      (insert-line result #t)
      @convert-console-printer
      (display result console-printer)))
  
  
  (method public (with-colored-output color proc)
    (let ((start (get-start)))
      (proc)
      (colorize color start)
      (for-each (function (row)
                  (colorize color (new Cell row 0)))
                (naturals (+ (get-row~ start) 1) (+ (get-row~ (get-start)) 1)))))
  
  
  (method public (evaluation-break)
    (set-caret (text-ending))
    @convert-console-printer
    (fresh-line console-printer))


  ;;;
  ;;;; Text
  ;;;


  (method (get-modified?)
    #f)
  
  
  (method (get-tooltip-context pos)
    {})
  
  
  (method (home-column row)
    (if (and (>= (paragraph-length row) 2) (= (get-string (new Range$Cell$ (new Cell row 0) (new Cell row 2))) "> "))
        2
      0))

  
  ;;;
  ;;;; History
  ;;;
  
  
  (method (current-history-item)
    {})


  ;;;
  ;;;; Coloring
  ;;;
      
  
  (method (recolorize-text start end-row)
    )
  
  
  (method public virtual (expression-color)
    Expression-Color)
  
  
  (method public virtual (eval-color)
    Eval-Color)
  

  ;;;
  ;;;; Formatted
  ;;;

  
  (method (process-formatted-directive directive input)
    (case directive
      ((banner)
       (display-banner))
      ((prompt)
       (fresh-prompt))
      (else
       (nextmethod directive input))))
    

  ;;;
  ;;;; Banner
  ;;;

  
  (method public (display-banner banner)
    (when banner
      (insert-styled banner 'Output))
    @convert (
    (when banner
      (let ((appl (get-application))
            (start (get-start)))
        (insert-string banner)
        (colorize Banner-Color start)
        (insert-newline)
        (insert-newline)
        (display-prompt)))))
  
  
  (method public (clear-console)
    (let ((banner (or banner (determine-banner))))
      (clear-all)
      (display-banner banner)))
  
  
  (method (determine-banner)
    (let ((range (forward-style (text-beginning) (function (style) (inherits?~ style 'Output)))))
      (when range
        (get-string range))))


  ;;;
  ;;;; Prompt
  ;;;


  (method public (fresh-prompt)
    (let ((ending (text-ending)))
      (set-caret ending)
      (let ((range (backward-style ending (function (style) (not (inherits?~ style 'Output))))))
        (set-style range (get-style 'Output))))
    @convert (
    (prompt-at-end)
    (set-caret (text-ending))
    (let ((pos (get-end)))
      (unless (at-prompt? pos)
        (when (/= (get-col~ pos) 0)
          (insert-newline))
        (display-prompt)))))
  
  
  (method (at-prompt? pos)
    #f
    @convert (
    (let ((row (get-row~ pos))
          (col (get-col~ pos))
          (prompt (current-prompt)))
      (and (= col (string-length prompt)) (string=? (paragraph-string row) (current-prompt))))))
  
  
  (method (current-prompt)
    prompt)


  (method protected (display-prompt)
    (when prompt
      (let ((start (get-start))
            (prompt (current-prompt)))
        (insert-string prompt)
        (colorize Prompt-Color start (+ start (- (string-length prompt) 1)))
        (colorize Expression-Color (get-end))
        (prompt-at-end)
        (update-view))))
  
  
  ;;;
  ;;;; Navigation
  ;;;


  (method public (prompt-at-end)
    (set! last-inserted (get-end))
    (set! inserted-where {}))


  (method (previous-prompt pos)
    (let* ((found? #f)
           (expl (new Jazz-Explorer self start: pos end: pos))
           (prompt (current-prompt))
           (len (string-length prompt)))
      (while (not (or found? (at-beginning?~ expl)))
        (let ((cr (char-backward~ expl len))
              (c1 (char-backward~ expl 1))
              (c0 (char-backward~ expl 0)))
          (if (and (eqv? c0 #\space)
                   (eqv? c1 #\>)
                   (or (not cr) (eqv? cr #\newline)))
              (set! found? #t)
            (backward~ expl))))
      (essay found? (get-start~ expl))))
  
  
  (method (next-prompt pos)
    (let* ((found? #f)
           (expl (new Jazz-Explorer self start: pos end: pos))
           (prompt (current-prompt))
           (len (string-length prompt)))
      (while (not (or found? (at-ending?~ expl)))
        (let ((cr (char-forward~ expl 0))
              (c1 (char-forward~ expl (- len 1)))
              (c2 (char-forward~ expl (- len 0))))
          (if (and (eqv? cr #\newline)
                   (eqv? c1 #\>)
                   (eqv? c2 #\space))
              (set! found? #t)
            (forward~ expl))))
      (when found?
        (let ((prompt (next-pos~ expl (get-end~ expl) (+ len 1))))
          (when (< (get-row~ prompt) (get-limit))
            prompt)))))
  
  
  (method (last-prompt)
    (let ((pos (text-ending)))
      (previous-prompt pos)))
  
  
  (method (backward-prompt)
    (let ((previous (previous-prompt (previous-cell last-inserted))))
      (when previous
        (set! last-inserted previous))))
  
  
  (method (forward-prompt)
    (let ((next (next-prompt last-inserted)))
      (when next
        (set! last-inserted next))))
  
  
  (method (current-command)
    (let ((range (current-command-range)))
      (when range
        (values range (get-string range)))))
  
  
  (method protected (current-command-range)
    (select-style (text-ending)
      (function (style)
        (inherits?~ style 'Entry))))
  
  
  (method (prompt-command prompt)
    (let ((end (text-ending))
          (pos prompt))
      (while (and (cell< pos end) (not (eqv? (get-char pos) #\newline)))
        (set! pos (next-cell pos)))
      (get-string (new Range$Cell$ prompt pos))))

  
  (method (insert-previous-expression)
    (let ((done? #f))
      (while (not done?)
        (if (not (backward-prompt))
            (set! done? #t)
          (let ((command (prompt-command last-inserted)))
            (unless (empty-string? command)
              (when inserted-where
                (set-selection inserted-where))
              (let ((start (get-start)))
                (insert-string command)
                (set! inserted-where (new Range start (get-start))))
              (set! done? #t)))))))

  
  (method (insert-next-expression)
    (let ((done? #f))
      (while (not done?)
        (if (not (forward-prompt))
            (set! done? #t)
          (let ((command (prompt-command last-inserted)))
            (unless (empty-string? command)
              (when inserted-where
                (set-selection inserted-where))
              (let ((start (get-start)))
                (insert-string command)
                (set! inserted-where (new Range start (get-start))))
              (set! done? #t))))))))


;;;
;;;; Console-Menu
;;;


(class Console-Menu extends Context-Menu
  
  
  (form
    (<install>
      (<Label-Item>     name: evaluate        title: "Evaluate" icon: {Bitmap-Resource "Import"} action: {Action console-text evaluate})
      (<Label-Item>     name: fresh-prompt    title: "Fresh Prompt" action: {Action console-text fresh-prompt})
      (<Separator-Item>)
      (<Label-Item>     name: edit-definition title: "Edit Definition" icon: {Bitmap-Resource "Edit"} action: {Action code-text edit-definition})
      (<Separator-Item>)
      (<Label-Item>     name: insert-previous title: "Insert Previous" icon: {Bitmap-Resource "FindBackward"} action: {Action console-text insert-previous})
      (<Label-Item>     name: insert-next     title: "Insert Next" icon: {Bitmap-Resource "FindForward"} action: {Action console-text insert-next})))))
