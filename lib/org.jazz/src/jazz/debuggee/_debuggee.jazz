;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Debuggee
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.debuggee jazz


(export (jazz.debuggee.autoload))
(import (jazz.debuggee.autoload)
        (jazz.debuggee.stub)
        (jazz.jrm)
        (jazz.jrm.register.stub))


;;;
;;;; Local
;;;


(definition local-process
  {})


(definition public (get-local-process)
  local-process)


(definition public (setup-local-process)
  (when (not local-process)
    (set! local-process (new Debuggee-Process-Local-Proxy (new Debuggee-Process)))))


;;;
;;;; Controller
;;;


(definition controller-debugger
  {})


(definition public (get-controller-debugger)
  controller-debugger)


(definition public (attach-to-controller controller-register)
  (detach-from-controller)
  (set! controller-debugger (require-object~ controller-register 'debugger))
  (setup-local-process)
  (set-console-make make-debuggee-console)
  (attach-process~ controller-debugger local-process)
  (set-exception-debugger jazz-exception-debugger)
  (set-exception-hook exception-debugger-hook))


(definition public (detach-from-controller)
  (when controller-debugger
    (detach-from-debugger)
    (set! local-process {})))


(definition public (detach-from-debugger)
  (when controller-debugger
    (when (live?~ controller-debugger)
      (detach-process~ controller-debugger local-process))
    (set! controller-debugger {})))


(definition (setup-debuggee)
  (when (command-argument "debug")
    (start-remoting-server))
  (when (command-argument "controllerhost")
    (let ((host (string->host (command-argument "controllerhost")))
          (port (string->port (command-argument "controllerport"))))
      (attach-to-controller (new-remote-register host port)))))


(definition (update-debuggee-process)
  (when controller-debugger
    (update-process~ controller-debugger local-process)))


;;;
;;;; Stops
;;;


(definition *stops*
  '())


(definition with-stops-mutex
  (let ((mutex (make-mutex 'stops)))
    (function (thunk)
      (mutex-lock! mutex)
      (thunk)
      (mutex-unlock! mutex))))


(definition (register-stop stop)
  (with-stops-mutex
    (function ()
      (set! *stops* (append *stops* (list stop))))))


(definition (unregister-stop stop)
  (with-stops-mutex
    (function ()
      (set! *stops* (remove! stop *stops*)))))


(definition (get-thread-stops thread)
  (let ((queue (new-queue)))
    (for-each (function (stop)
                (when (eq? (get-thread~ stop) thread)
                  (enqueue queue (new Debuggee-Stop-Local-Proxy stop))))
              *stops*)
    (queue-list queue)))


;;;
;;;; Console
;;;


(definition *console-pump-port*
  {})


(definition (console-pump-port)
  *console-pump-port*)

(definition (set-console-pump-port port)
  (set! *console-pump-port* port))


(definition (make-debuggee-console)
  (receive (head tail) (open-string-pipe)
    (let ((console (register-console~ controller-debugger local-process {})))
      (start-debuggee-console-pump console tail)
      (set-console-pump-port tail)
      head)))


(definition current-repl-port
  (make-parameter {}))

(definition current-repl-pump-port
  (make-parameter {}))

(definition current-repl-frame
  (make-parameter {}))


(definition (with-repl-port thread-proxy thunk)
  (if (current-repl-port)
      (thunk)
    (receive (head tail) (open-string-pipe)
      (with-console thread-proxy
        (function (console)
          (with-debuggee-console-pump console tail
            (function ()
              (parameterize ((current-repl-port head)
                             (current-repl-pump-port tail))
                (thunk)))))))))


(definition (with-console thread-proxy proc)
  (let ((console (register-console~ controller-debugger local-process thread-proxy)))
    (unwind-protect
        (proc console)
      (when controller-debugger
        (unregister-console~ controller-debugger console)))))


;;;
;;;; Pump
;;;


(definition (with-debuggee-console-pump console port thunk)
  (let ((thread (start-debuggee-console-pump console port)))
    (unwind-protect
        (thunk)
      (thread-interrupt! thread
        thread-exit))))


(definition (start-debuggee-console-pump console port)
  (thread-start!
    (new-thread
      (function ()
        (let (iterate)
          (let ((line (read-line port)))
            (when controller-debugger
              (console-output~ controller-debugger console line))
            (iterate))))
      "Debuggee Console Pump")))


;;;
;;;; Repl
;;;


(definition (with-repl-thread thread port thunk)
  (let ((thread (start-repl-thread thread port #t)))
    (unwind-protect
        (thunk)
      (thread-interrupt! thread
        thread-exit))))


(definition (start-repl-thread thread port (use-repl-frame? #f))
  (thread-start!
    (new-thread
      (function ()
        (declare (proper-tail-calls))
        (let (iterate)
          (read-eval-print thread port use-repl-frame?)
          (iterate)))
      "Repl")))


(definition (read-eval-print thread port use-repl-frame?)
  (define (print result)
    (format port #"\($\)\(color Dark-Red {a}\){%}{!}"# result))
  
  (let ((expr (read port)))
    (thread-execute thread 'read-eval-print
      (function ()
        (unwind-protect
            (print (parameterize ((jazz.walk-for 'eval))
                     (evaluate expr use-repl-frame?)))
          (format port #"\(prompt\){%}{!}"#))))))


(definition (evaluate expr use-repl-frame?)
  (let ((process (get-process)))
    (if (not process)
        "Error: Process not yet started"
      ;; quick test
      (if (and use-repl-frame? (current-repl-frame))
          (eval-in-frame expr)
        (car (eval-expressions~ process (list expr)))))))


(definition (eval-in-frame expr)
  (let ((box (current-repl-frame)))
    (if (not box)
        (eval expr)
      (let ((frame (unbox box)))
        (if (not frame)
            (eval expr)
          (let ((cont (serial->object (get-continuation~ frame))))
            (eval-within-no-winding expr cont)))))))


;;;
;;;; Exception
;;;


(definition (jazz-exception-debugger exc)
  (let ((debugger (get-controller-debugger)))
    (if (or (not debugger) (not (jazz-debugger?)))
        (invoke-exception-hook system-exception-hook exc)
      (with-system-exception-debugger
        (function ()
          (continuation-capture
            (function (continuation)
              (let ((reason (exception-reason exc))
                    (details (exception-details exc)))
                (invoke-debugger 'exception reason details continuation)))))))))


(definition (with-jazz-exception-debugger thunk)
  (with-exception-debugger jazz-exception-debugger
    thunk))


(definition (break (reason {}))
  (continuation-capture
    (function (continuation)
      (invoke-debugger 'break reason {} continuation))))


;;;
;;;; Debugger
;;;


(definition (invoke-debugger kind reason details continuation)
  (let* ((thread (current-thread))
         (restarts (compute-restarts thread))
         (stop (new Debuggee-Stop thread kind reason details continuation restarts)))
    (dynamic-wind
      (function ()
        (register-stop stop))
      (function ()
        (let ((thread-proxy (new Debuggee-Thread-Local-Proxy (new Debuggee-Thread thread)))
              (stop-proxy (new Debuggee-Stop-Local-Proxy stop)))
          (with-repl-port thread-proxy
            (function ()
              (with-repl-thread thread (current-repl-port)
                (function ()
                  (parameterize ((current-repl-frame (box {})))
                    (debuggee-stop~ controller-debugger local-process thread-proxy stop-proxy kind reason)
                    (let ((process (get-process)))
                      (if (not process)
                          (debuggee-loop)
                        (process-debuggee-loop~ process))))))))))
      (function ()
        (unregister-stop stop)))))


(definition (compute-restarts thread)
  (let ((previous-stops (get-thread-stops thread))
        (all-restarts (current-restarts)))
    (map (function (restart)
           (new Debuggee-Restart-Local-Proxy (new Debuggee-Restart thread restart)))
         (if (null? previous-stops)
             all-restarts
           (let ((skip (apply max (map (function (stop) (length (get-restarts~ stop))) previous-stops))))
             (subseq all-restarts 0 (- (length all-restarts) skip)))))))


(definition (debuggee-loop)
  (let (loop)
    (with-restart-catcher 'resume-loop "Resume loop" {}
      (function ()
        (let ((thunk (thread-receive)))
          (with-jazz-exception-debugger
            thunk))))
    (loop)))


;;;
;;;; View
;;;


(definition *current-view-debugger*
  #f)


(definition public (current-view-debugger)
  (when (not *current-view-debugger*)
    (set! *current-view-debugger* (new View-Debugger)))
  *current-view-debugger*))
