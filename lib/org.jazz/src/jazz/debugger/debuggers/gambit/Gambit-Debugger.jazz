;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Gambit Debugger
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.debugger.debuggers.gambit.Gambit-Debugger jazz


(import (gambit)
        (jazz.console)
        (jazz.debugger)
        (jazz.utilities))


;;;
;;;; Console
;;;


(define console-no
  1)


(define (open-console-window)
  (let ((manager (get-console-manager))
        (title (format "Gambit {s}" console-no)))
    (increase! console-no)
    (setup-debugger-console-ports (register-console~ manager title banner?: #f))))


(define (setup-debugger-console-ports text)
  (receive (head tail) (open-string-pipe)
    (set-console-port~ text head)
    (start-console-pump text head)
    tail))


;;;
;;;; Debugger
;;;


(define rdi
  #f)

(define (rdi-function fn)
  (case fn
    ((register-console)
     rdi-register-console)
    ((console-output)
     rdi-console-output)
    (else
     (error "unknown function"))))

;;;-----------------------------------------------------------------------------

(define rdi-console-table (make-table))

(define (rdi-register-console console-id)
  (let ((console-port (open-console-window)))
    (table-set! rdi-console-table console-id console-port)
    (rdi-console-input-pump-start! console-id console-port)
    #f))

(define (rdi-console-output console-id output)
  (let ((console-port
         (table-ref rdi-console-table console-id #f)))
    (if console-port
        (begin
          (display output console-port)
          (force-output console-port))))
  #t)

(define (read-substring-blocking-for-1 str start end port)
  (if (< start end)
      (begin
        (input-port-timeout-set! port +inf.0) ;; block for the first byte
        (let ((n (read-substring str start (+ start 1) port)))
          (input-port-timeout-set! port -inf.0) ;; don't block for the rest
          (if (= n 1)
              (+ 1 (read-substring str (+ start 1) end port))
              n)))
      0))

(define (rdi-console-input-pump-start! console-id console-port)
  (thread-start!
   (make-thread
    (lambda ()
      (let* ((buflen 1000)
             (buf (make-string buflen)))
        (let loop ()
          (let ((n (read-substring-blocking-for-1 buf 0 buflen console-port)))
            (if (> n 0)
                (let ((str (substring buf 0 n)))
                  (rdi-remote-call rdi
                                   'console-input
                                   console-id
                                   str)
                  (loop))))))))))

(define (gambit-start-debugger)
  (rdi-init rdi-function)
  (thread-start!
    (make-thread
      (lambda ()
        (set! rdi (rdi-create-server #f))
        (rdi-force-connection rdi)))))


;;;
;;;; Jazz
;;;


(class Gambit-Debugger extends Debugger
  
  
  ;;;
  ;;;; Debugger
  ;;;
  
  
  (method (start-debugger)
    (user-message "Starting gambit debugger...")
    (gambit-start-debugger))
  
  
  (method (stop-debugger)
    )
  
  
  (method (get-processes (validate-liveness?: validate-liveness? #f))
    )
  
  
  (method public (detach-processes)
    )
  
  
  ;;;
  ;;;; Process
  ;;;
  
  
  (method (process=? x y)
    )
  
  
  (method (process-live? process)
    )
  
  
  (method (process-title process)
    )
  
  
  (method (process-icon process)
    )
  
  
  (method (process-threads process)
    )
  
  
  (method (present-process process)
    )
  
  
  (method (eval-expressions process expressions)
    )
  
  
  (method (evaluate-expressions process module-name expressions)
    )
  
  
  (method (process-detach process)
    )
  
  
  (method (process-exit process)
    )
  
  
  ;;;
  ;;;; Thread
  ;;;
  
  
  (method (thread-name thread)
    )
  
  
  (method (thread-state thread)
    )
  
  
  (method (thread-stops thread)
    )
  
  
  (method (break-thread process thread)
    )
  
  
  ;;;
  ;;;; Restart
  ;;;

  
  (method (restart-stop process restart)
    )
  
  
  ;;;
  ;;;; Stop
  ;;;
  
  
  (method (stop-kind stop)
    )
  
  
  (method (stop-reason stop)
    )
  
  
  (method (stop-frames stop)
    )
  
  
  (method (continue-stop process stop)
    )
  
  
  ;;;
  ;;;; Frame
  ;;;
  
  
  (method (frame-name frame)
    )
  
  
  (method (frame-location frame)
    )
  
  
  (method (frame-variables frame)
    )
  
  
  (method (frame-variable-name frame variable)
    )
  
  
  (method (frame-variable-value frame variable)
    )))
