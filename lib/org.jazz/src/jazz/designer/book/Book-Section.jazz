;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Book Sections
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.designer.book.Book-Section jazz


(import (jazz.designer)
        (jazz.library)
        (jazz.utilities))


(class Book-Section extends Object
  
  
  (slot title)
  (slot model-name)
  (slot client)
  (slot designer)
  (slot editor)
  
  
  (method (initialize (title: title {})
                      (model-name: model-name {})
                      (client: client {})
                      (designer: designer {})
                      (editor: editor {}))
    (nextmethod)
    (set! title~self title)
    (set! model-name~self model-name)
    (set! client~self client)
    (set! designer~self designer)
    (set! editor~self editor))
  
  
  (method (print printer readably)
    (print-unreadable self printer
      (function (printer)
        (format printer "{a}" title))))
  
  
  ;;;
  ;;;; Access
  ;;;


  (method public (get-title)
    title)


  (method public (set-title value)
    (set! title value))


  (method public (get-model-name)
    model-name)


  (method public (set-model-name value)
    (set! model-name value))


  (method public (get-client)
    client)


  (method public (set-client value)
    (set! client value)
    (set! designer {})
    (when editor
      (set-client~ editor value)))


  (method public (get-designer)
    (unless designer
      (set! designer (get-designer~ editor)))
    designer)


  (method public (set-designer value)
    (set! designer value))


  (method public (get-editor)
    editor)


  (method public (set-editor value)
    (set! editor value))))
