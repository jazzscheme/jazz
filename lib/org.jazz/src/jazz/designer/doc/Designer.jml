;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Designer Documentation
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(<Module-Doc> name: Designer
  (<description>
    (<definition> name: Designer
      (<p> "A Designer is the interface between a jazz object and a form"))
    (<definition> name: Component-Editor)
    (<definition> name: View-Editor)
    (<definition> name: Branches-Editor)
    (<definition> name: Components-Editor)
    (<p>)
    (<definition> name: Card)
    (<definition> name: Custom-Card)
    (<definition> name: Properties-Card)
    (<definition> name: Value-Row)
    (<p>)
    (<definition> name: Component-Surrogate)
    (<p>)
    (<definition> name: Property)
    (<definition> name: Property-Entry)
    (<definition> name: Property-View)
    (<definition> name: Domain)
    (<p>)
    (<definition> title: "Designer Events"
      (<node>
        (<span> "property-change ")
        (<span> "child-add ")
        (<span> "child-remove ")
        (<span> "child-move ")
        (<span> "update")
        (<span> "refresh")))
    (<p>)
    (<definition> title: "Editor Events"
      (<node>
        (<span> "client-change ")
        (<span> "designer-change ")
        (<span> "branch-changing ")
        (<span> "branch-change ")
        (<span> "selection-changing ")
        (<span> "selection-change")
        (<span> "saving")))
    (<p>)
    (<definition> title: "Notes"
      (<node>
        (<span> "Editing a form is done through a Designer and an instance of the form. Any changes to the instance or its children should be done by calling methods of the designer instead of going to the instance directly. The designer will take care of making the changes as well as recording them.")
        (<span> "Note that by having events generated when properties are modified and some others, this process could be made more automatic. But, this would imply a great performance overhead on the system and also we do not want programmatically modified properties to be recorded by the designer. This is why Jazz sticks will a manually calling the designer approach.")
        (<span> "So, if we have a Z -> Y -> X class hierarchy, an instance of Z can be used to edit the class form of X, Y or Z.")
        (<span> "When Jazz edits an object, it monitors every descendant by installing surrogates in them. Even if the edited component is changed (by double-clicking), we keep the upper surrogates installed (even if they could conceptually be removed) so as to still be able to double-click on them to change again the edited component.")
        (<span> "Surrogates take the place of an edited component and its descendants when there's a need to trap user events sent to the component. They are most commonly used for visual components like views.")
        (<span> "An editor is an view that will permit edition of its client and do so by calling designer methods in response to events generated three optional subviews: a branches tree, a descendants tree and a properties tree. An editor has an installed client on which you can put one or more (currently only one) designers on specific descendants of the client. Each designer will record edition to its part of the client descendants tree.")
        (<span> "So, we have a component and its descendants being monitored by surrogates and one of then is the edited component (so changes to it or any of its descendants is being sent to the designer).")
        (<span> "When editing a form I should also specify the edited branch (can be nil of course).")
        (<span> "Note that branch and form unification while desirable is not a good idea because always having an installed branch for every component instance would impose to great a memory load for a very small gain. Also the present approach has the very nice property of having branches as ordinary objects that could have been developed outside of the main system. They are as any other component, they simply have a different behavior.")
        (<span> "The designer and the various elements of the editor follow the MVC model. "
          "The designer plays the model role and the editor elements are views of this model. "
          "The editor never modifies its view directly. "
          "Instead it calls methods of the designer that will modify the edited component and also send events to every listening view who can then update their interface accordingly.")))))
