;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Descendants Editor
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.designer.editor.Descendants-Editor jazz


(import (jazz.designer)
        (jazz.jml)
        (jazz.library)
        (jazz.literals)
        (jazz.platform)
        (jazz.ui)
        (jazz.ui.view)
        (jazz.utilities))


(class Descendants-Editor extends Layout-View


  (form
    (<install>                                          layout-type: fill
      (<Layout-View>              name: tools
        @wait
        (<Push-Tool>              name: new-default     size: {Dimension 22 22} location: tail tooltip?: #t tooltip-text: "New Default" image-name: {Bitmap-Resource "New"} portfolio: :icons action-handler: {Event-Handler :form on-new-default})
        (<Toggle-Tool>            name: toggle-branches size: {Dimension 22 22} location: tail tooltip?: #t tooltip-text: "Toggle Branches" image-name: {Bitmap-Resource "Branch"} portfolio: :icons action-handler: {Event-Handler :form on-toggle-branches}))
      (<Scroller-View>            name: scroller        style: document hscroll?: #t vscroll?: #t
        (<!>                      name: content         layout-type: fill
          (<Tree-Header>          name: header          style: document
            (<!>                  name: content
              (<Descendants-Tree> name: tree
                (<!>              name: descendant      width: 183))))))))
              
  
  (method meta (external-name . rest)
    'descendants-editor)

  
  ;;;
  ;;;; Host
  ;;;
  
  
  (method meta (host-icon)
    {Bitmap-Resource "Components"})
  

  (method meta (host-title)
    "Components")
  
  
  (method (client-activate)
    (let ((guest (current-document)))
      (when (is? guest View-Editor)
        (set-editor guest)
        (set-client (get-client~ guest))
        (set-designer (get-designer~ guest)))))
  
  
  (method (client-deactivate)
    (set-editor {})
    (set-client {})
    (set-designer {}))
  
  
  ;;;
  ;;;; Docked
  ;;;
  
  
  (method (focus-default)
    (let ((tree (locate 'tree)))
      (acquire-focus~ tree)
      (auto-select-first~ tree)))
  
  
  (method (get-tools-view)
    (locate 'tools))
    
  
  ;;;
  ;;;; Hosting
  ;;;
  
  
  (method (install-in-host host)
    (nextmethod host)
    (set-layout-type~ (get-root~ host) 'fill)
    (set-layout-insets~ (get-root~ host) {Rect 0 2 0 0})
    (when (is? host Host-Docked)
      (set-flat?~ (locate 'scroller) #t)
      (set-shown?~ (locate 'header) #f)))
  
  
  ;;;
  ;;;; Access
  ;;;
  
  
  (method public (get-tree)
    (locate 'tree))
  
  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method (on-new-default evt)
    (new-default))
  
  
  @wait-buggy-if-adding-into-content-and-content-is-not-showing
  (method (on-toggle-contents evt)
    (let ((tree (get-tree)))
      (set-show-contents?~ tree (not (get-show-contents?~ tree)))))
  
  
  (method (on-toggle-branches evt)
    (let ((tree (get-tree)))
      (set-show-branches?~ tree (not (get-show-branches?~ tree)))))
  
  
  ;;;
  ;;;; Component
  ;;;
  
  
  (method protected virtual (new-default)
    (bell))
  
  
  (method (add-default class)
    (let* ((tree (get-tree))
           (parent (get-client~ tree)))
      (add-component-class~ tree class parent: parent)))
  
  
  ;;;
  ;;;; Editor
  ;;;
  
  
  (method public (get-editor)
    (get-editor~ (get-tree)))
  
  
  (method public (set-editor editor)
    (set-editor~ (get-tree) editor))

  
  ;;;
  ;;;; Client
  ;;;
  
  
  (method public (get-client)
    (get-client~ (get-tree)))
  
  
  (method public (set-client client)
    (set-client~ (get-tree) client))

  
  ;;;
  ;;;; Designer
  ;;;
  
  
  (method public (get-designer)
    (get-designer~ (get-tree)))
  
  
  (method public (set-designer designer)
    (set-designer~ (get-tree) designer))))
