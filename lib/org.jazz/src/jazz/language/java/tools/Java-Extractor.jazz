;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Java Extractor
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


;; TODO
;; - It would seem that the extractor doesnt find out by itself if a method is static and thus
;;   should be made meta in the Jazz class


(library jazz.language.java.tools.Java-Extractor jazz


(import (jazz.language.java)
        (jazz.ui.clipboard)
        (jazz.library)
        (jazz.utilities))


@convert


(class Java-Extractor extends Object
  
  
  (method public (extract classname directory)
    (let ((file (new-file~ directory (format "{a}.jazz" (slash->period-notation classname)))))
      (call-with-output-file (parse~ file)
        (function (printer)
          (import-class classname printer)))))
  
  
  (method public (copy-methods classname methods)
    (let* ((printer (open-output-string))
           (javaClass (lookupClass~ org.apache.bcel.Repository classname))
           (all-methods (getMethods~ javaClass)))
      (import-methods all-methods methods printer)
      (set-clipboard-text (get-output-string printer))))
  
  
  (method (import-class classname printer)
    (output-header classname printer)
    (let* ((javaClass (lookupClass~ org.apache.bcel.Repository classname))
           (className (getClassName~ javaClass))
           (packageName (getPackageName~ javaClass))
           (superclassName (getSuperclassName~ javaClass))
           (interfaceNames (getInterfaceNames~ javaClass))
           (methods (getMethods~ javaClass)))
      (format printer "{%}{%}")
      (format printer "(class {a} extends {a}{%}"
              className
              superclassName)
      (when methods
        (format printer "{%}{%}")
        (import-methods methods methods printer))
      (format printer "){%}")))
  
  
  (method (import-methods all-methods methods printer)
    (let* ((all-method-infos (map get-method-info all-methods))
           (method-infos (map get-method-info methods))
           (max-return (apply max (map length (map third all-method-infos))))
           (max-name (apply max (map length (map first all-method-infos)))))
      (for-each (function (method-info)
                  (import-method method-info max-return max-name printer))
                method-infos)))
  
  
  (method (get-method-info method)
    (let ((name (getName~ method))
           (propagation (if (isFinal~ method) "       " "virtual"))
           (return-type (jazz-type (getReturnType~ method)))
           (parameter-types (map jazz-type (getArgumentTypes~ method))))
      (list name propagation return-type parameter-types)))
  
  
  (method (import-method method-info max-return max-name printer)
    (bind (name propagation return-type parameter-types) method-info
      (unless (= name "<clinit>")
        (format printer "{%}")
        (format printer "  (javaexternal public {a} {a width: :v}   ({a width: :v}   {l detail: :human}))"
                propagation
                return-type
                max-return
                name
                max-name
                parameter-types))))
  
  
  (definition Type-Alist
    '((#\V . "<javavoid>")
      (#\S . "<javashort>")
      (#\I . "<javaint>")
      (#\J . "<javalong>")
      (#\D . "<javadouble>")
      (#\F . "<javafloat>")
      (#\B . "<javabyte>")
      (#\Z . "<javabool>")))
  
  
  (method (jazz-type type)
    (let ((signature (getSignature~ type)))
      (jazz-signature-type signature)))
  
  
  (method (jazz-signature-type signature)
    (let ((first (element signature 0)))
      (case first
        ((#\[) (jazz-array-type signature))
        ((#\L) (jazz-reference-type signature))
        (else
         (let ((info (assv first Type-Alist)))
           (if info
               (cdr info)
             (error "Unknown type: {a}" signature)))))))
  
  
  (method (jazz-array-type signature)
    (format "<javaarray{a}>" (jazz-signature-type (subseq signature 1))))
  
  
  (method (jazz-reference-type signature)
    (let* ((subs (substitute #\/ #\. signature))
           (classname (subseq subs 1 (- (length subs) 1))))
      (if (= classname "java.lang.String")
          "<javastring>"
        (format "<{a}>" classname))))))
