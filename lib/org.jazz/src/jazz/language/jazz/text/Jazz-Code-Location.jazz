;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Jazz Code Locations
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.language.jazz.text.Jazz-Code-Location jazz


(import (jazz.catalog)
        (jazz.io)
        (jazz.language.jazz)
        (jazz.library)
        (jazz.runtime)
        (jazz.utilities))


(class Jazz-Code-Location extends Code-Location


  (slot module-name initialize #f) ;; temp code till a initialized? flag in the Object class
  (slot sublocation initialize #f) ;; temp code till a initialized? flag in the Object class


  (method (initialize location)
    (nextmethod)
    (setup-location location))
  
  
  (method (setup-location location)
    (let (iterate (path (split-identifier (car location)))
                  (sub (cdr location)))
      (if (null? path)
          (signal (new Location-Error kind: 'unknown location: location))
        (let ((name (apply compose-name path)))
          (if (find-module-source name)
              (begin
                (set! module-name name)
                (set! sublocation sub))
            (iterate (butlast path)
                     (cons (last path) sub)))))))
  
  
  (method (print printer readably)
    (print-unreadable self printer
      (function (printer)
        ;; temp code till a initialized? flag in the Object class
        (when (and module-name sublocation)
          (format printer "{s} {l}" module-name sublocation)))))


  (method (edit (workspace: workspace {}) (activate-focus?: activate-focus? #t) (error?: error? #t))
    (let ((location (find-location workspace: workspace error?: error?)))
      (when location
        (receive (frame text range) location
          (set-selection~ text range ensure-displayed?: #f)
          (ensure-displayed~ text force-vertical: 'head)
          (bring-to-front~ frame)
          (set-visible?~ frame #t)
          (when activate-focus?
            (focus-host~ frame))
          frame))))
  
  
  (method public (find-source)
    (find-module-source module-name))
  
  
  (method public (find-location (workspace: workspace {}) (error?: error? #t))
    (let ((frame (find-module module-name workspace: workspace error?: error?)))
      (when frame
        (let ((text  (get-guest~ frame)))
          ;; quicky to be well thought out
          (when (is? text Jazz-Text-View)
            (let ((range (location-range~ text sublocation toplevel-location: (cons module-name sublocation))))
              (values frame text range)))))))
  
  
  (method (find-module module-name (workspace: workspace {}) (error?: error? #t))
    (let* ((appl (get-application))
           (source (find-module-source module-name)))
      (either (edit-document~ appl source class: Jazz-Text-View workspace: workspace visible?: #f)
              (when error?
                (signal (new Location-Error kind: 'unknown location: module-name))))))))
