;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Unzip
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.library.compression.Unzip-File jazz


(import (jazz.io)
        (jazz.library)
        (jazz.utilities))


(definition public (locate-entry name jar)
  (with-closed ((unzip (new Unzip-File jar)))
    (continuation-capture
      (function (return)
        (iterate-files~ unzip
          (function (entry size)
            (when (= (extract-name entry) name)
              (continuation-return return entry))))
        {}))))


(class Unzip-File extends Object)


@windows-specific


(class Unzip-File extends Object
  
  
  (slot handle)
  
  
  ;;;
  ;;;; Initialization
  ;;;
  
  
  (method (initialize file)
    (nextmethod)
    (unimplemented 'initialize)
    @convert-ansi-string
    (set! handle (unzip-open (coerce (parse~ file) Ansi-String)))
    (destroy-mandatory))
  
  
  (method (destroy)
    (unzip-close handle)
    (nextmethod))
  
  
  ;;;
  ;;;; Interface
  ;;;
  
  
  (method public (iterate-files proc)
    (goto-first-file)
    (let ((proc
           (function ()
             (receive (filename size) (get-current-file-info)
               (proc filename size)))))
      (proc)
      (while (goto-next-file)
        (proc))))
  
  
  (method public (with-opened-current-file proc)
    (let ((opened? #f))
      (unwind-protect
          (begin
            (open-current-file)
            (set! opened? #t)
            (proc))
        (when opened?
          (close-current-file)))))
  
  
  (method public (read-current-file-content)
    (unimplemented 'read-current-file-content)
    @convert-ansi-string
    (receive (filename size) (get-current-file-info)
      (let ((string (new Ansi-String size: size)))
        (with-opened-current-file
          (function ()
            (read-current-file string size)))
        string)))
  
  
  (method public (read-current-file-block-content)
    (unimplemented 'read-current-file-block-content)
    @windows-specific
    (receive (filename size) (get-current-file-info)
      (let ((block (new Heap-Block size: size)))
        (with-opened-current-file
          (function ()
            (read-current-file block size)))
        block)))
  
  
  (method public (read-entry-block-content entry)
    (locate-file entry)
    (read-current-file-block-content))
  
  
  ;;;
  ;;;; Low Level
  ;;;
  
  
  (method public (goto-first-file)
    (unzip-go-to-first-file handle))
  
  
  (method public (goto-next-file)
    (unzip-go-to-next-file handle))
  
  
  (method public (locate-file filename (error?: error? #t))
    (unimplemented 'locate-file)
    @convert-ansi-string
    (unless (or (unzip-locate-file handle (coerce filename Ansi-String))
                (not error?))
      (error "Unable to locate file {t} in unzip file" filename)))
  
  
  (method public (get-current-file-info)
    (unzip-get-current-file-info handle))
  
  
  (method public (open-current-file)
    (unzip-open-current-file handle))
  
  
  (method public (read-current-file string size)
    (unzip-read-current-file handle string size))
  
  
  (method public (close-current-file)
    (unzip-close-current-file handle))))
