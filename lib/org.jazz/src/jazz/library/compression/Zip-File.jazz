;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Zip
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.library.compression.Zip-File jazz


(import (jazz.library)
        (jazz.utilities))


(class Zip-File extends Object)


@windows-specific


(class Zip-File extends Object
  
  
  (slot handle)
  
  
  (method (initialize file)
    (nextmethod)
    (unimplemented 'initialize)
    @convert-ansi-string
    (set! handle (zip-open (coerce (parse~ file) Ansi-String)))
    (destroy-mandatory))
  
  
  (method (destroy)
    (zip-close handle)
    (nextmethod))
  
  
  ;;;
  ;;;; Interface
  ;;;
  
  
  (method public (with-new-file-in-zip filename proc)
    (let ((created? #f))
      (unwind-protect
          (begin
            (open-new-file-in-zip filename)
            (set! created? #t)
            (proc))
        (when created?
          (close-file-in-zip)))))
  
  
  (method public (write-file filename block/string)
    (with-new-file-in-zip filename
      (function ()
        (write-in-file-in-zip block/string))))
  
  
  ;;;
  ;;;; Low Level
  ;;;
  
  
  (method public (open-new-file-in-zip filename)
    (unimplemented 'open-new-file-in-zip)
    @convert-ansi-string
    (zip-open-new-file-in-zip handle (coerce filename Ansi-String)))
  
  
  (method public (write-in-file-in-zip block/string)
    (zip-write-in-file-in-zip handle block/string))
  
  
  (method public (close-file-in-zip)
    (zip-close-file-in-zip handle))))
