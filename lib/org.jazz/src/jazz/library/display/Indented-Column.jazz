;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Indented Column
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.library.display.Indented-Column jazz


(import (jazz.library)
        (jazz.utilities))


(class Indented-Column extends Display-Column
  
  
  (slot indentation     <fx>)
  (slot use-contouring? <bool>)
  (slot max-data        <fx> initialize 0)
  (slot max-width       <fx> initialize 0)
  
  
  ;;;
  ;;;; Initialization
  ;;;
  
  
  (method (initialize displayer . rest)
    (bind-keywords ((indentation 2) (use-contouring? #f) . others) rest
      (apply nextmethod displayer others)
      (set! indentation~self indentation)
      (set! use-contouring?~self use-contouring?)))
  
  
  ;;;
  ;;;; Access
  ;;;


  (method public (get-indentation)
    indentation)


  (method public (set-indentation value)
    (set! indentation value))


  (method public (get-use-contouring?)
    use-contouring?)


  (method public (set-use-contouring? value)
    (set! use-contouring? value))
  
  
  ;;;
  ;;;; Content
  ;;;
  
  
  (method (put-data data (level 0))
    (put~ factory (cons level data)))
    
  
  (method (empty-replacement previous-column previous-data)
    (cons 0 ""))

  
  ;;;
  ;;;; Printing
  ;;;
  
  
  (method (prepare-print)
    (nextmethod)
    (for-each (function (info)
                (bind (level . data) info
                  (let* ((level <fx> level)
                         (data (either data ""))
                         (length <fx> (length data))
                         (indent <fx> (* level indentation)))
                    (set! max-data (max max-data length))
                    (set! max-width (max max-width (+ indent length))))))
              content)
    (set! max-data (max max-data minimum)))
  
  
  (method (print-to info previous-column previous-data printer)
    (bind (level . data) info
      (let* ((level <fx> level)
             (data (either data ""))
             (length <fx> (length data))
             (indent <fx> (* level indentation))
             (padding <fx> (if use-contouring? (- max-data length) (- max-width indent length)))
             (puc? (and previous-column (is? previous-column Indented-Column) (get-use-contouring?~ previous-column))))
        (format printer "{_ :v}{_ :v}{a}{_ :v}{_ :v}" border (if puc? 0 indent) data padding border-after))))))
