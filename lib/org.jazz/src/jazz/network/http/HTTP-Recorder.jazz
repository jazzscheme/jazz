;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; HTTP Recorder
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.network.http.HTTP-Recorder jazz


(import (jazz.library)
        (jazz.network)
        (jazz.utilities))


(class HTTP-Recorder extends Object implements HTTP-Listener
  
  
  (slot server initialize {})
  (slot requests)
  
  
  ;;;
  ;;;; Access
  ;;;
  
  
  (method public (get-requests)
    (get-output~ requests))
  
  
  ;;;
  ;;;; Recording
  ;;;
  
  
  (method public (recording?)
    (not-null? server))
  
  
  (method public (start-recording server)
    (set! server~self server)
    (set! requests~self (new List-Factory))
    (add-listener~ server self))
  
  
  (method public (stop-recording)
    (remove-listener~ server self)
    (set! server~self {}))
  
  
  (method protected virtual (record-pages? resource pages-class)
    #t)
  
  
  ;;;
  ;;;; Listener
  ;;;
  
  
  (method (hit server)
    )
  
  
  (method (receive-request server request)
    )
  
  
  (method (receive-pages-request server request resource pages-class)
    (when (record-pages? resource pages-class)
      (put~ requests request)))
  
  
  (method (process-request server request response)
    )))
