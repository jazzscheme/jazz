;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Cairo
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Jeremie Lasalle Ratelle.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.platform.cairo jazz


(export (jazz.platform.cairo.cairo-carbon   (cond carbon))
        (jazz.platform.cairo.cairo-windows  (cond windows))
        (jazz.platform.cairo.cairo-x11      (cond x11))
        (jazz.platform.cairo.cairo-freetype (cond carbon))
        (jazz.platform.cairo.cairo-logfont  (cond windows))
        (jazz.platform.cairo.cairo-freetype (cond x11)))


(import (jazz.platform.types)
        (jazz.platform.cairo.cairo-carbon   (cond carbon))
        (jazz.platform.cairo.cairo-windows  (cond windows))
        (jazz.platform.cairo.cairo-x11      (cond x11))
        (jazz.platform.cairo.cairo-freetype (cond carbon))
        (jazz.platform.cairo.cairo-logfont  (cond windows))
        (jazz.platform.cairo.cairo-freetype (cond x11)))


(c-include "<stdlib.h>")


(cond-expand
  (carbon  (c-include "<cairo-quartz.h>"))
  (windows (c-include "<cairo-win32.h>"))
  (x11     (c-include "<cairo-xlib.h>"))
  (else))


(constant M_PI 3.14159265358979323846)

(c-type cairo_t            (native "cairo_t"))
(c-type cairo_t*           (pointer cairo_t cairo_t*))
(c-type cairo_pattern_t    (native "cairo_pattern_t"))
(c-type cairo_pattern_t*   (pointer cairo_pattern_t cairo_pattern_t*))


(enumeration cairo_content_t
  (CAIRO_CONTENT_COLOR       #x1000)
  (CAIRO_CONTENT_ALPHA       #x2000)
  (CAIRO_CONTENT_COLOR_ALPHA #x3000))

(c-type cairo_content_t int)


(enumeration cairo_format_t
  (CAIRO_FORMAT_ARGB32 0)
  (CAIRO_FORMAT_RGB24  1)
  (CAIRO_FORMAT_A8     2)
  (CAIRO_FORMAT_A1     3))

(c-type cairo_format_t int)


(enumeration cairo_font_slant_t
  (CAIRO_FONT_SLANT_NORMAL  0)
  (CAIRO_FONT_SLANT_ITALIC  1)
  (CAIRO_FONT_SLANT_OBLIQUE 2))

(c-type cairo_font_slant_t int)


(enumeration cairo_font_weight_t
  (CAIRO_FONT_WEIGHT_NORMAL 0)
  (CAIRO_FONT_WEIGHT_BOLD   1))

(c-type cairo_font_weight_t int)


(enumeration cairo_status_t
  (CAIRO_STATUS_SUCCESS                 0)
  (CAIRO_STATUS_NO_MEMORY               1)
  (CAIRO_STATUS_INVALID_RESTORE         2)
  (CAIRO_STATUS_INVALID_POP_GROUP       3)
  (CAIRO_STATUS_NO_CURRENT_POINT        4)
  (CAIRO_STATUS_INVALID_MATRIX          5)
  (CAIRO_STATUS_INVALID_STATUS          6)
  (CAIRO_STATUS_NULL_POINTER            7)
  (CAIRO_STATUS_INVALID_STRING          8)
  (CAIRO_STATUS_INVALID_PATH_DATA       9)
  (CAIRO_STATUS_READ_ERROR              10)
  (CAIRO_STATUS_WRITE_ERROR             11)
  (CAIRO_STATUS_SURFACE_FINISHED        12)
  (CAIRO_STATUS_SURFACE_TYPE_MISMATCH   13)
  (CAIRO_STATUS_PATTERN_TYPE_MISMATCH   14)
  (CAIRO_STATUS_INVALID_CONTENT         15)
  (CAIRO_STATUS_INVALID_FORMAT          16)
  (CAIRO_STATUS_INVALID_VISUAL          17)
  (CAIRO_STATUS_FILE_NOT_FOUND          18)
  (CAIRO_STATUS_INVALID_DASH            19)
  (CAIRO_STATUS_INVALID_DSC_COMMENT     20)
  (CAIRO_STATUS_INVALID_INDEX           21)
  (CAIRO_STATUS_CLIP_NOT_REPRESENTABLE  22))

(c-type cairo_status_t int)


(c-structure cairo_font_extents_t
  (double ascent)
  (double descent)
  (double height)
  (double max_x_advance)
  (double max_y_advance))


(c-structure cairo_text_extents_t
  (double x_bearing)
  (double y_bearing)
  (double width)
  (double height)
  (double x_advance)
  (double y_advance))


(c-structure cairo_matrix_t
  (double xx)
  (double yx)
  (double xy)
  (double yy)
  (double x0)
  (double y0))


(c-structure cairo_glyph_t
  (ulong index)
  (double x)
  (double y))


;;;
;;;; Current Point
;;;


(definition (cairo_current_point context)
  (let ((fn (c-function (cairo_t* F64PTR) void 
              "cairo_get_current_point(___arg1, ___arg2, ___arg2+1);"))
        (pt (make-f64vector 2)))
    (fn context pt)
    (new Point (fxfloor (f64vector-ref pt 0)) (fxfloor (f64vector-ref pt 1)))))


;;;
;;;; Device to User
;;;



(definition (cairo_device_to_user context pt)
  (let ((fn (c-function (cairo_t* F64PTR) void
              "cairo_device_to_user(___arg1,___arg2,___arg2+1);"))
        (vec (f64vector (cast <fl> (get-h~ pt)) (cast <fl> (get-v~ pt)))))
    (fn context vec)
    (new Point (fxfloor (f64vector-ref vec 0)) (fxfloor (f64vector-ref vec 1)))))

     
(definition (cairo_user_to_device context pt)
  (let ((fn (c-function (cairo_t* F64PTR) void
              "cairo_user_to_device(___arg1,___arg2,___arg2+1);"))
        (vec (f64vector (cast <fl> (get-h~ pt)) (cast <fl> (get-v~ pt)))))
    (fn context vec)
    (new Point (fxfloor (f64vector-ref vec 0)) (fxfloor (f64vector-ref vec 1)))))


;;;
;;;; Glyph Arrays
;;;


(definition glyph-array-make  (c-function (int) cairo_glyph_t* "___result_voidstar = calloc(___arg1,sizeof(cairo_glyph_t));"))
(definition glyph-array-ref   (c-function (cairo_glyph_t* int) cairo_glyph_t* "___result_voidstar = (void*)(___arg1+___arg2);"))
(definition glyph-array-free  (c-function (cairo_glyph_t*) void "free(___arg1);"))


;;;
;;;; Surface
;;;


(c-external void               (cairo_surface_destroy cairo_surface_t*))
(c-external cairo_status_t     (cairo_surface_status cairo_surface_t*))
(c-external cairo_content_t    (cairo_surface_get_content cairo_surface_t*))
(c-external void               (cairo_surface_finish cairo_surface_t*))
(c-external void               (cairo_surface_flush cairo_surface_t*))


;;;
;;;; Context
;;;


(c-external cairo_t*           (cairo_create cairo_surface_t*))
(c-external void               (cairo_destroy cairo_t*))
(c-external void               (cairo_save cairo_t*))
(c-external void               (cairo_restore cairo_t*))
(c-external cairo_status_t     (cairo_status cairo_t*))
(c-external void               (cairo_clip cairo_t*))
(c-external void               (cairo_reset_clip cairo_t*))
(c-external void               (cairo_fill cairo_t*))
(c-external void               (cairo_fill_preserve cairo_t*))
(c-external void               (cairo_paint cairo_t*))
(c-external void               (cairo_stroke cairo_t*))
(c-external void               (cairo_stroke_preserve cairo_t*))


;;;
;;;; Path
;;;


(c-external void               (cairo_move_to cairo_t* double double))
(c-external void               (cairo_line_to cairo_t* double double))
(c-external void               (cairo_rel_line_to cairo_t* double double))
(c-external void               (cairo_arc cairo_t* double double double double double))
(c-external void               (cairo_rel_curve_to cairo_t* double double double double double double))
(c-external void               (cairo_rectangle cairo_t* double double double double))
(c-external void               (cairo_set_line_width cairo_t* double))
(c-external double             (cairo_get_line_width cairo_t*))
(c-external void               (cairo_rel_move_to cairo_t* double double))
(c-external void               (cairo_close_path cairo_t*))


;;;
;;;; Source
;;;


(c-external void               (cairo_set_source cairo_t* cairo_pattern_t*))
(c-external void               (cairo_set_source_surface cairo_t* cairo_surface_t* double double))
(c-external void               (cairo_set_source_rgb cairo_t* double double double))
(c-external void               (cairo_set_source_rgba cairo_t* double double double double))
(c-external cairo_pattern_t*   (cairo_get_source cairo_t*))
(c-external cairo_status_t     (cairo_pattern_get_rgba cairo_pattern_t* double* double* double* double*))
(c-external cairo_pattern_t*   (cairo_pattern_create_for_surface cairo_surface_t*))
(c-external cairo_pattern_t*   (cairo_pattern_create_linear double double double double))
(c-external void               (cairo_pattern_add_color_stop_rgb cairo_pattern_t* double double double double))
(c-external void               (cairo_pattern_add_color_stop_rgba cairo_pattern_t* double double double double double))


;;;
;;;; Text
;;;


(c-external void               (cairo_show_text cairo_t* UTF-8-string))
(c-external void               (cairo_set_font_face cairo_t* cairo_font_face_t*))
(c-external cairo_font_face_t* (cairo_get_font_face cairo_t*))
(c-external void               (cairo_set_font_size cairo_t* double))
(c-external void               (cairo_set_scaled_font cairo_t* cairo_scaled_font_t*))
(c-external void               (cairo_font_extents cairo_t* cairo_font_extents_t*))  
(c-external void               (cairo_glyph_extents cairo_t* cairo_glyph_t* int cairo_text_extents_t*))
(c-external void               (cairo_select_font_face cairo_t* char-string cairo_font_slant_t cairo_font_weight_t))
(c-external void               (cairo_show_glyphs cairo_t* cairo_glyph_t* int))
(c-external void               (cairo_text_extents cairo_t* UTF-8-string cairo_text_extents_t*))


;;;
;;;; Font
;;;


(c-type cairo_font_options_t  (native "cairo_font_options_t"))
(c-type cairo_font_options_t* (pointer cairo_font_options_t cairo_font_options_t*))
(c-type cairo_scaled_font_t   (native "cairo_scaled_font_t"))
(c-type cairo_scaled_font_t*  (pointer cairo_scaled_font_t cairo_scaled_font_t*))


(c-external cairo_font_options_t* (cairo_font_options_create))
(c-external void                  (cairo_font_options_destroy cairo_font_options_t*))
(c-external cairo_scaled_font_t*  (cairo_scaled_font_create cairo_font_face_t* cairo_matrix_t* cairo_matrix_t* cairo_font_options_t*))
(c-external void                  (cairo_scaled_font_destroy cairo_scaled_font_t*))

;;;
;;;; Matrix
;;;


(c-external void               (cairo_translate cairo_t* double double))
(c-external void               (cairo_transform cairo_t* cairo_matrix_t*))
(c-external void               (cairo_set_matrix cairo_t* cairo_matrix_t*))
(c-external void               (cairo_get_matrix cairo_t* cairo_matrix_t*))
(c-external void               (cairo_matrix_init_identity cairo_matrix_t*))
(c-external void               (cairo_matrix_init_scale cairo_matrix_t* double double))
(c-external void               (cairo_identity_matrix cairo_t*))
(c-external void               (cairo_scale cairo_t* double double))
(c-external void               (cairo_device_to_user_distance cairo_t* double* double*))


;;;
;;;; Image Surface
;;;


(c-external cairo_surface_t*   (cairo_image_surface_create_from_png UTF-8-string))
(c-external cairo_surface_t*   (cairo_image_surface_create cairo_format_t int int))
(c-external void               (cairo_pattern_destroy cairo_pattern_t*))
(c-external cairo_status_t     (cairo_surface_write_to_png cairo_surface_t* char-string))


@a(c-external void               (cairo_surface_show_page cairo_surface_t*))


(definition cairo_set_alternate
  (c-function (cairo_t*) void
    "double pattern[1];
     pattern[0] = 1.0;
     cairo_set_dash(___arg1, pattern, 1, 0.0);"))


(definition cairo_set_solid
  (c-function (cairo_t*) void
    "cairo_set_dash(___arg1, 0, 0, 0.0);"))


(definition (cairo_get_clipper context)
  (let ((fn (c-function (cairo_t* F64PTR) void
              "cairo_clip_extents(___arg1,___arg2,___arg2+1,___arg2+2,___arg2+3);"))
        (vec (make-f64vector 4)))
    (fn context vec)
    (let ((left   (f64vector-ref vec 0))
          (top    (f64vector-ref vec 1))
          (right  (f64vector-ref vec 2))
          (bottom (f64vector-ref vec 3)))
      (new Rect left top right bottom)))))
