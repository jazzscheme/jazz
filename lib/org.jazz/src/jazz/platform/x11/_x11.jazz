;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; X11
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Jeremie Lasalle Ratelle.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.platform.x11 jazz


(import (jazz.platform.types)
        (jazz.platform.x11.x11-types))


(c-include "<X11/Xlib.h>")  
(c-include "<X11/Xutil.h>")
(c-include "<X11/Xatom.h>")
(c-include "<stdlib.h>")
(c-include "<string.h>")
(c-include "<unistd.h>")


(constant None                     #x00000000)
(constant PointerRoot              1)
(constant CopyFromParent           #x00000000)
(constant InputOutput              1)
(constant CurrentTime              0)


(constant CWBackPixel              #x0002)
(constant CWBitGravity             #x0010)
(constant CWOverrideRedirect       #x0100)


(constant StaticGravity            10)


;;;
;;;; Event Masks
;;;


(constant NoEventMask              #x00000000)
(constant KeyPressMask             #x00000001) 
(constant KeyReleaseMask           #x00000002) 
(constant ButtonPressMask          #x00000004) 
(constant ButtonReleaseMask        #x00000008)
(constant EnterWindowMask          #x00000010) 
(constant LeaveWindowMask          #x00000020) 
(constant PointerMotionMask        #x00000040)
(constant PointerMotionHintMask    #x00000080) 
(constant Button1MotionMask        #x00000100) 
(constant Button2MotionMask        #x00000200) 
(constant Button3MotionMask        #x00000400)
(constant Button4MotionMask        #x00000800)
(constant Button5MotionMask        #x00001000)
(constant ButtonMotionMask         #x00002000)
(constant KeymapStateMask          #x00004000)
(constant ExposureMask             #x00008000)
(constant VisibilityChangeMask     #x00010000)
(constant StructureNotifyMask      #x00020000)
(constant ResizeRedirectMask       #x00040000)
(constant SubstructureNotifyMask   #x00080000)
(constant SubstructureRedirectMask #x00100000)
(constant FocusChangeMask          #x00200000)
(constant PropertyChangeMask       #x00400000)
(constant ColormapChangeMask       #x00800000)
(constant OwnerGrabButtonMask      #x01000000)


;;;
;;;; Event Types
;;;


(constant KeyPress         2)
(constant KeyRelease       3)
(constant ButtonPress      4)
(constant ButtonRelease    5)
(constant MotionNotify     6)
(constant EnterNotify      7)
(constant LeaveNotify      8)
(constant FocusIn          9)
(constant FocusOut         10)
(constant KeymapNotify     11)
(constant Expose           12)
(constant GraphicsExpose   13)
(constant NoExpose         14)
(constant VisibilityNotify 15)
(constant CreateNotify     16)
(constant DestroyNotify    17)
(constant UnmapNotify      18)
(constant MapNotify        19)
(constant MapRequest       20)
(constant ReparentNotify   21)
(constant ConfigureNotify  22)
(constant ConfigureRequest 23)
(constant GravityNotify    24)
(constant ResizeRequest    25)
(constant CirculateNotify  26)
(constant CirculateRequest 27)
(constant PropertyNotify   28)
(constant SelectionClear   29)
(constant SelectionRequest 30)
(constant SelectionNotify  31)
(constant ColormapNotify   32)
(constant ClientMessage    33)
(constant MappingNotify    34)
(constant LASTEvent        35)


;;;
;;;; Attribute masks
;;;


(constant CWBackPixmap        #x00000001)
(constant CWBackPixel         #x00000002)
(constant CWBorderPixmap      #x00000004)
(constant CWBorderPixel       #x00000008)
(constant CWBitGravity        #x00000010)
(constant CWWinGravity        #x00000020)
(constant CWBackingStore      #x00000040)
(constant CWBackingPlanes     #x00000080)
(constant CWBackingPixel      #x00000100)
(constant CWOverrideRedirect  #x00000200)
(constant CWSaveUnder         #x00000400)
(constant CWEventMask         #x00000800)
(constant CWDontPropagate     #x00001000)
(constant CWColormap          #x00002000)  
(constant CWCursor            #x00004000)


;;;
;;;; Mouse constants
;;;


(constant Button1 1)
(constant Button2 2)
(constant Button3 3)
(constant Button4 4)
(constant Button5 5)
(constant Button6 6)
(constant Button7 7)


;;;
;;;; Keyboard constants
;;;


(constant ShiftMask              0)
(constant LockMask               1)
(constant ControlMask            2)
(constant Mod1Mask               3)
(constant Mod2Mask               4)
(constant Mod3Mask               5)
(constant Mod4Mask               6)
(constant Mod5Mask               7)



(constant XK_BackSpace      #xFF08)
(constant XK_Tab            #xFF09)
(constant XK_Linefeed       #xFF0A)
(constant XK_Clear          #xFF0B)
(constant XK_Return         #xFF0D)
(constant XK_Pause          #xFF13)
(constant XK_Scroll_Lock    #xFF14)
(constant XK_Sys_Req        #xFF15)
(constant XK_Escape         #xFF1B)

(constant XK_Home           #xFF50)
(constant XK_Left           #xFF51)
(constant XK_Up             #xFF52)
(constant XK_Right          #xFF53)
(constant XK_Down           #xFF54)
(constant XK_Prior          #xFF55)
(constant XK_Page_Up        #xFF55)
(constant XK_Next           #xFF56)
(constant XK_Page_Down      #xFF56)
(constant XK_End            #xFF57)
(constant XK_Begin          #xFF58)

(constant XK_Select         #xFF60)
(constant XK_Print          #xFF61)
(constant XK_Execute        #xFF62)
(constant XK_Insert         #xFF63)
(constant XK_Undo           #xFF65)
(constant XK_Redo           #xFF66)
(constant XK_Menu           #xFF67)
(constant XK_Find           #xFF68)
(constant XK_Cancel         #xFF69)
(constant XK_Help           #xFF6A)
(constant XK_Break          #xFF6B)
(constant XK_Mode_switch    #xFF7E)
(constant XK_script_switch  #xFF7E)
(constant XK_Num_Lock       #xFF7F)

(constant XK_KP_Add         #xFFAB)
(constant XK_KP_Subtract    #xFFAD)
(constant XK_KP_Decimal     #xFFAE)
(constant XK_KP_Divide      #xFFAF)

(constant XK_F1             #xFFBE)
(constant XK_F2             #xFFBF)
(constant XK_F3             #xFFC0)
(constant XK_F4             #xFFC1)
(constant XK_F5             #xFFC2)
(constant XK_F6             #xFFC3)
(constant XK_F7             #xFFC4)
(constant XK_F8             #xFFC5)
(constant XK_F9             #xFFC6)
(constant XK_F10            #xFFC7)
(constant XK_F11            #xFFC8)
(constant XK_F12            #xFFC9)

(constant XK_Shift_L        #xffe1)
(constant XK_Shift_R        #xffe2)
(constant XK_Control_L      #xffe3)
(constant XK_Control_R      #xffe4)
(constant XK_Caps_Lock      #xffe5)
(constant XK_Shift_Lock     #xffe6)
(constant XK_Meta_L         #xffe7)
(constant XK_Meta_R         #xffe8)
(constant XK_Alt_R          #xffe9)
(constant XK_Alt_L          #xffea)
(constant XK_Mode_switch    #xff7e)


(constant XK_Delete         #xFFFF)


(constant XK_space          #x020)
(constant XK_exclam         #x021)
(constant XK_quotedbl       #x022)
(constant XK_numbersign     #x023)
(constant XK_dollar         #x024)
(constant XK_percent        #x025)
(constant XK_ampersand      #x026)
(constant XK_apostrophe     #x027)
(constant XK_parenleft      #x028)
(constant XK_parenright     #x029)
(constant XK_asterisk       #x02a)
(constant XK_plus           #x02b)
(constant XK_comma          #x02c)
(constant XK_minus          #x02d)
(constant XK_period         #x02e)
(constant XK_slash          #x02f)

(constant XK_0              #x030)
(constant XK_1              #x031)
(constant XK_2              #x032)
(constant XK_3              #x033)
(constant XK_4              #x034)
(constant XK_5              #x035)
(constant XK_6              #x036)
(constant XK_7              #x037)
(constant XK_8              #x038)
(constant XK_9              #x039)

(constant XK_colon          #x03a)
(constant XK_semicolon      #x03b)
(constant XK_less           #x03c)
(constant XK_equal          #x03d)
(constant XK_greater        #x03e)
(constant XK_question       #x03f)
(constant XK_at             #x040)

(constant XK_A              #x041)
(constant XK_B              #x042)
(constant XK_C              #x043)
(constant XK_D              #x044)
(constant XK_E              #x045)
(constant XK_F              #x046)
(constant XK_G              #x047)
(constant XK_H              #x048)
(constant XK_I              #x049)
(constant XK_J              #x04a)
(constant XK_K              #x04b)
(constant XK_L              #x04c)
(constant XK_M              #x04d)
(constant XK_N              #x04e)
(constant XK_O              #x04f)
(constant XK_P              #x050)
(constant XK_Q              #x051)
(constant XK_R              #x052)
(constant XK_S              #x053)
(constant XK_T              #x054)
(constant XK_U              #x055)
(constant XK_V              #x056)
(constant XK_W              #x057)
(constant XK_X              #x058)
(constant XK_Y              #x059)
(constant XK_Z              #x05a)

(constant XK_bracketleft    #x05b)
(constant XK_backslash      #x05c)
(constant XK_bracketright   #x05d)
(constant XK_asciicircum    #x05e)
(constant XK_underscore     #x05f)
(constant XK_grave          #x060)

(constant XK_a              #x061)
(constant XK_b              #x062)
(constant XK_c              #x063)
(constant XK_d              #x064)
(constant XK_e              #x065)
(constant XK_f              #x066)
(constant XK_g              #x067)
(constant XK_h              #x068)
(constant XK_i              #x069)
(constant XK_j              #x06a)
(constant XK_k              #x06b)
(constant XK_l              #x06c)
(constant XK_m              #x06d)
(constant XK_n              #x06e)
(constant XK_o              #x06f)
(constant XK_p              #x070)
(constant XK_q              #x071)
(constant XK_r              #x072)
(constant XK_s              #x073)
(constant XK_t              #x074)
(constant XK_u              #x075)
(constant XK_v              #x076)
(constant XK_w              #x077)
(constant XK_x              #x078)
(constant XK_y              #x079)
(constant XK_z              #x07a)

(constant XK_braceleft      #x07b)
(constant XK_bar            #x07c)
(constant XK_braceright     #x07d)
(constant XK_asciitilde     #x07e)


;;;
;;;; Visibility constants
;;;


(constant IsUnmapped   0)
(constant IsUnviewable 1)
(constant IsViewable   2)


;;;
;;;; Focus constants
;;;


(constant NotifyAncestor         0)
(constant NotifyVirtual          1)
(constant NotifyInferior         2)
(constant NotifyNonlinear        3)
(constant NotifyNonlinearVirtual 4)
(constant NotifyPointer          5)
(constant NotifyPointerRoot      6)
(constant NotifyDetailNone       7)


(constant RevertToNone           None)
(constant RevertToPointerRoot    PointerRoot)
(constant RevertToParent         2)


;;;
;;;; Cursors Constants
;;;


(constant XC_X_cursor 0)
(constant XC_arrow 2)
(constant XC_crosshair 34)
(constant XC_hand2 60)
(constant XC_left_ptr 68)
(constant XC_sb_h_double_arrow 108)
(constant XC_sb_v_double_arrow 116)
(constant XC_watch 150)
(constant XC_xterm 152)


;;;
;;;; WM_DELETE_WINDOW atom
;;;


(definition wm-delete-window-atom {})


(definition (set-wm-delete-window-atom atom)
  (set! wm-delete-window-atom atom))


(definition (get-wm-delete-window-atom)
  wm-delete-window-atom)

;;;
;;;; Attributes structure
;;;


(c-structure  XWindowAttributes
  (int x)
  (int y)
  (int width)
  (int height)
  (int border_width)
  (int depth)
  (Visual* visual)
  (Window root)
  (int class)
  (int bit_gravity)
  (int win_gravity)
  (int backing_store)
  (ulong backing_planes)
  (ulong backing_pixel)
  (Bool save_under)
  (Colormap colormap)
  (Bool map_installed)
  (int map_state)
  (long all_event_masks)
  (long your_event_mask)
  (long do_not_propagate_mask)
  (Bool override_redirect)
  (Screen* screen))


(c-structure XSetWindowAttributes
  (Pixmap background_pixmap)
  (ulong background_pixel)
  (Pixmap border_pixmap)
  (ulong border_pixel)
  (int bit_gravity)
  (int win_gravity)
  (int backing_store)
  (ulong backing_planes)
  (ulong backing_pixel)
  (Bool save_under)
  (long event_mask)
  (long do_not_propagate_mask)
  (Bool override_redirect)
  (Colormap colormap)
  (Cursor cursor))


;;;
;;;; Events Structures
;;;


(c-structure XAnyEvent
  (int type)
  (ulong serial)    
  (Bool send_event)    
  (Display* display)
  (Window window))


(c-structure XButtonEvent 
  (int type)
  (ulong serial)
  (Bool send_event)
  (Display* display)
  (Window window)
  (Window root)
  (Window subwindow)
  (Time time)
  (int x)
  (int y)
  (int x_root)
  (int y_root)
  (uint state)
  (uint button)
  (Bool same_screen))
  

(c-structure XClientMessageEvent 
  (int type)
  (ulong serial)
  (Bool send_event)
  (Display* display)
  (Window window)
  (Atom message_type)
  (int format))
  
  
(c-structure XKeyEvent 
  (int type)
  (ulong serial)
  (Bool send_event)
  (Display* display)
  (Window window)
  (Window root)
  (Window subwindow)
  (Time time)
  (int x)
  (int y)
  (int x_root)
  (int y_root)
  (uint state)
  (uint keycode)
  (Bool same_screen))


(c-structure XMotionEvent 
  (int type)
  (ulong serial)
  (Bool send_event)
  (Display* display)
  (Window window)
  (Window root)
  (Window subwindow)
  (Time time)
  (int x)
  (int y)
  (int x_root)
  (int y_root)
  (uint state)
  (char is_hint)
  (Bool same_screen))


(c-structure XFocusChangeEvent
  (int type)
  (ulong serial)
  (Bool send_event)
  (Display* display)
  (Window window)
  (int mode)
  (int detail))


(c-structure XExposeEvent
  (int type)
  (ulong serial)
  (Bool send_event)
  (Display* display)
  (Window window)
  (int x)
  (int y)
  (int width)
  (int height)
  (int count))


(c-structure XConfigureEvent
  (int type)
  (ulong serial)
  (Bool send_event)
  (Display* display)
  (Window event)
  (Window window)
  (int x)
  (int y)
  (int width)
  (int height)
  (int border_width)
  (Window above)
  (Bool override_redirect))


(c-structure XSelectionClearEvent
  (int type)
  (ulong serial)
  (Bool send_event)
  (Display* display)
  (Window window)
  (Atom selection)
  (Time time))


(c-structure XSelectionRequestEvent
  (int type)
  (ulong serial)
  (Bool send_event)
  (Display* display)
  (Window owner)
  (Window requestor)
  (Atom selection)
  (Atom target)
  (Atom property)
  (Time time))


(c-structure XSelectionEvent
  (int type)
  (ulong serial)
  (Bool send_event)
  (Display* display)
  (Window requestor)
  (Atom selection)
  (Atom target)
  (Atom property)
  (Time time))


(c-structure XEvent
  (int type)
  (XAnyEvent xany)
  (XKeyEvent xkey)
  (XButtonEvent xbutton)
  (XMotionEvent xmotion)
  (XFocusChangeEvent xfocus)
  (XExposeEvent xexpose)
  (XConfigureEvent xconfigure)
  (XSelectionClearEvent xselectionclear)
  (XSelectionRequestEvent xselectionrequest)
  (XSelectionEvent xselection)
  (XClientMessageEvent xclient))


(c-structure XErrorEvent
  (int type)
  (Display* display)
  (ulong serial)
  (byte error_code)
  (byte request_code)
  (byte minor_code)
  (XID resourceid))


(c-type XERRORPROC (function (Display* XErrorEvent*) int))


;;;
;;;; Functions
;;;


(c-external void         (XClearArea             Display* Window int int uint uint Bool))
(c-external Display*     (XOpenDisplay           char*))
(c-external int          (XCloseDisplay          Display*))
(c-external int          (XDefaultScreen         Display*))
(c-external Screen*      (XScreenOfDisplay       Display* int))
(c-external Window       (XRootWindow            Display* int))
(c-external ulong        (XBlackPixel            Display* int))
(c-external ulong        (XWhitePixel            Display* int))
(c-external Window       (XCreateSimpleWindow    Display* Window int int uint uint uint ulong ulong))
(c-external int          (XMapWindow             Display* Window))
(c-external int          (XFlush                 Display*))
(c-external Visual*      (XDefaultVisual         Display* int))
(c-external void         (XNextEvent             Display* XEvent*))
(c-external void         (XSelectInput           Display* Window long))
(c-external void         (XDestroyWindow         Display* Window))
(c-external void         (XUnmapWindow           Display* Window))
(c-external Window       (XCreateWindow          Display* Window int int uint uint uint int uint Visual* ulong XSetWindowAttributes*))
(c-external Status       (XGetWindowAttributes   Display* Window XWindowAttributes*))
(c-external void         (XMoveWindow            Display* Window int int))
(c-external void         (XResizeWindow          Display* Window uint uint))
(c-external KeyCode      (XKeysymToKeycode       Display* KeySym))
(c-external KeySym       (XKeycodeToKeysym       Display* KeyCode int))
(c-external void         (XReparentWindow        Display* Window Window int int))
(c-external void         (XSetInputFocus         Display* Window int Time))
(c-external int          (XPending               Display*))
(c-external void         (XRaiseWindow           Display* Window))
(c-external void         (XDestroyWindow         Display* Window))
(c-external void         (XSync                  Display* Bool))
(c-external void         (XSynchronize           Display* Bool))
(c-external void         (XBell                  Display* int))
(c-external ulong        (XWhitePixel            Display* int))
(c-external void         (XMoveResizeWindow      Display* Window int int uint uint))
(c-external void         (XLowerWindow           Display* Window))
(c-external void         (XSetErrorHandler       XERRORPROC))
(c-external Atom         (XInternAtom            Display* char-string Bool))
(c-external int          (getpid))
(c-external int          (ConnectionNumber       Display*))
(c-external Bool         (XCheckTypedEvent       Display* int XEvent*))
(c-external Cursor       (XCreateFontCursor      Display* uint))
(c-external void         (XDefineCursor          Display* Window Cursor))


;;;
;;;; Custom functions
;;;



(definition rgb-pixel
  (c-function (Display* short short short) ulong
    "XColor xcol;
     xcol.red = ___arg2 << 8;
     xcol.green = ___arg3 << 8;
     xcol.blue = ___arg4 << 8;
     XAllocColor(___arg1, DefaultColormap(___arg1, XDefaultScreen (___arg1)), &xcol);
     ___result = xcol.pixel;"))


(definition select
  (c-function (int fd_set* fd_set* fd_set* long long) int
    "struct timeval time;
     time.tv_sec = ___arg5;
     time.tv_usec = ___arg6;
     ___result = select( ___arg1, ___arg2, ___arg3, ___arg4, &time );"))


(definition (setup-fdset . fds)
  (let ((alloc-fdset (c-function () fd_set*
                       "fd_set *set = malloc(sizeof(fd_set));
                        FD_ZERO(set);
                        ___result_voidstar = set;"))
        (set-fdset (c-function (int fd_set*) void
                     "FD_SET(___arg1, ___arg2);")))
     (let ((set (alloc-fdset)))
       (for-each (function (fd)
                   (set-fdset fd set))
                 fds)
       set)))


(definition ProcessClientMessage
  (c-function (Display* XClientMessageEvent*) Bool
    "Atom wm_delete_window = XInternAtom(___arg1, \"WM_DELETE_WINDOW\", False);
     if( ___arg2->data.l[0] == wm_delete_window )
       ___result = True;
     else
       ___result = False;"))


(definition (XWindowEvent display window mask event)
  (let ((func (c-function (Display* Window int XEvent*) void
                "XWindowEvent(___arg1, ___arg2, ___arg3, ___arg4);")))
    (func display window mask event)))


(definition (XTranslateCoordinates disp src_win dst_win x y)
  (let ((pt ((c-function (Display* Window Window int int) int*
                  "int *point = malloc(2*sizeof(int));
                  Window tmp;
                  XTranslateCoordinates( ___arg1, ___arg2, ___arg3, ___arg4, ___arg5, point, point+1, &tmp);
                  ___result_voidstar = point;") disp src_win dst_win x y)))
      (values (int*-ref pt 0) (int*-ref pt 1))))


(definition XNumberOfChildren
  (c-function (Display* Window) uint
    "Window root;
     Window parent;
     Window *children;
     unsigned int num;
     Window ret;
     XQueryTree( ___arg1, ___arg2, &root, &parent, &children, &num);
     if( num != 0) { XFree(children); }
     ___result = num;"))


(definition XGetChildHandle
  (c-function (Display* Window int) Window
    "Window root;
     Window parent;
     Window *children;
     unsigned int num;
     Window ret;
     XQueryTree( ___arg1, ___arg2, &root, &parent, &children, &num);
     ret = *(children+num-___arg3-1);
     if( num != 0) { XFree(children); }
     ___result = ret;"))


(definition XButtonDown?
  (c-function (Display*) Bool
    "Window root_return;
     Window child_return;
     int root_x_return, root_y_return, win_x_return, win_y_return;
     unsigned int mods;
     XQueryPointer( ___arg1, DefaultRootWindow(___arg1), &root_return, &child_return, &win_x_return, &win_y_return,
                    &win_x_return, &win_y_return, &mods );
     ___result = mods & Button1Mask;"))


(definition XKeyDown? 
  (c-function (Display* int) Bool
    "char keys[32];
     XQueryKeymap(___arg1, keys);
     ___result = keys[___arg2/8] & (1 << (___arg2%8));"))


(definition (XMousePosition disp win)
  (let ((coords ((c-function (Display* Window) int*
                          "int *coords = calloc(2, sizeof(int));
                           Window x,y;
                           int a,b;
                           unsigned int c;
                           XQueryPointer( ___arg1, ___arg2, &x, &y, coords, coords+1, &a, &b, &c);
                           ___result_voidstar = coords;") disp win)))
    (let ((x (int*-ref coords 0))
	  (y (int*-ref coords 1)))
      (int*-free coords)
      (values x y))))


(definition XMouseWindow
  (c-function (Display* Window) Window
     "Window root_return, child_return;
      int root_x_return, root_y_return, win_x_return, win_y_return;
      unsigned int mask_return;
      XQueryPointer( ___arg1, ___arg2, &root_return, &child_return, &root_x_return, &root_y_return, &win_x_return, &win_y_return, &mask_return );
      ___result = child_return;"))


(definition XInvalidateRect
  (c-function (Display* Window int int int int) void
    "XEvent exp;
     exp.xexpose.type = Expose;
     exp.xexpose.window = ___arg2;
     exp.xexpose.x = ___arg3;
     exp.xexpose.y = ___arg4;
     exp.xexpose.width = ___arg5;
    exp.xexpose.height = ___arg6;
    exp.xexpose.count = 0;
    XSendEvent( ___arg1, ___arg2, True, ExposureMask, &exp );"))


(definition (XGetInputFocus display)
  (let ((ret ((c-function (Display*) int*
                  "Window win;
                   int *ret = calloc(2, sizeof(int));
                   XGetInputFocus(___arg1, &win, ret+1);
                   *ret = (int)win;
                   ___result_voidstar = ret;") display)))
    (values (int*-ref ret 0) (int*-ref ret 1))))




(definition (XGetClipboardString display window)
     ((c-function (Display* Window) void
        "Atom XA_CLIPBOARD = XInternAtom( ___arg1, \"CLIPBOARD\", 0);
         XConvertSelection(___arg1, XA_CLIPBOARD, XA_STRING, None, ___arg2, CurrentTime);")
      display window)
     ((c-function (Display* Window) char-string
                     "Atom prop;
                      XEvent ev_ret;
                      char *val = \"\";
                      unsigned char *ret;
                      int i;
                      int format;
                      Atom type;
                      unsigned long nitems;
                      unsigned long bar;
                      Bool retb = False;
                      for( i = 0; i < 1000000; i++ ) {
                         retb = XCheckTypedEvent(___arg1,SelectionNotify,&ev_ret);
                         if( retb == True ) break;
                      }
                      if( retb == True) {
                         val = \"prop\";
                         prop = ev_ret.xselection.property;
                         if (prop != None)  {
                           XGetWindowProperty( ___arg1, ___arg2, prop, 0, 100000, False, XA_STRING, &type, &format,&nitems, &bar, &ret);
                           val = (char*)ret;
                         }
                      }
                      ___result = val;")
      display window))



(definition XSetClipboardString 
      (c-function (Display* Window char-string) void
        "Atom XA_CLIPBOARD = XInternAtom( ___arg1, \"CLIPBOARD\", 0);
         XChangeProperty(___arg1,___arg2,XA_PRIMARY,XA_STRING,
         8, PropModeReplace, (unsigned char *)___arg3,strlen(___arg3));
         XSetSelectionOwner(___arg1,XA_CLIPBOARD,___arg2,CurrentTime);"))


(definition XSendClipboardString
      (c-function (Display* Window Window Atom Atom Atom) void
        "Atom type;
         int format;
         unsigned long len;
         unsigned long bytes_left;
         unsigned char *data;
         XEvent xev;
         XGetWindowProperty(___arg1,___arg2,XA_PRIMARY,0,10000000L,0,XA_STRING,&type,&format,&len,&bytes_left,&data);
         XChangeProperty(___arg1,___arg3,___arg6,___arg5,8,PropModeReplace,data,len);
         xev.xselection.type = SelectionNotify;
         xev.xselection.send_event = True;
         xev.xselection.display = ___arg1;
         xev.xselection.requestor = ___arg3;
         xev.xselection.selection = ___arg4;
         xev.xselection.target = ___arg5;
         xev.xselection.property = ___arg6;
         xev.xselection.time = CurrentTime;
         XSendEvent( ___arg1, ___arg3, 0, 0L, &xev );"))


(definition XSetWMName
  (c-function (Display* Window char-string) void
    "XTextProperty textProp;
     XStringListToTextProperty(&___arg3, 1, &textProp);
     XSetWMName(___arg1, ___arg2, &textProp);"))


(definition XGetErrorText
  (c-function (Display* int) char-string
    "char buffer[255];
     XGetErrorText(___arg1, ___arg2, buffer, 255);
     ___result = buffer;"))


(definition XSetWMProtocols
  (c-function (Display* Window Atom) void
    "XSetWMProtocols( ___arg1, ___arg2, &___arg3, 1 );"))


;;;
;;;; Error functions
;;;


(definition x11-error-handler
  #f)

(definition public (x11-set-error-handler proc)
  (set! x11-error-handler proc)
  (XSetErrorHandler x11-call-error-handler))

(c-definition (x11-call-error-handler display error) (Display* XErrorEvent*) int "x11_call_error_handler" ""
  (x11-error-handler display error))


(definition public (synchronize-x11 flag)
  (XSynchronize default-x11-display flag))


;;;
;;;; Display
;;;


(definition default-x11-display
  #f)

(definition public (get-default-x11-display)
  default-x11-display)

(definition public (set-default-x11-display display)
  (set! default-x11-display display))


;;;
;;;; Process
;;;


(definition public (relinquish-process)
  )


(definition public (GetCurrentProcessId)
  (getpid))


;;;
;;;; Message
;;;


(definition (system-message text . rest)
  (pretty-print text))


;;;
;;;; Cursors
;;;


(definition public Cursors
  {})


(definition (x11-create-cursors)
  (set! Cursors (list
                  (list :arrow               (XCreateFontCursor default-x11-display XC_left_ptr))
                  (list :wait                (XCreateFontCursor default-x11-display XC_watch))
                  (list :vertical-splitter   (XCreateFontCursor default-x11-display XC_sb_h_double_arrow))
                  (list :horizontal-splitter (XCreateFontCursor default-x11-display XC_sb_v_double_arrow))
                  (list :ibeam               (XCreateFontCursor default-x11-display XC_xterm))
                  (list :finger              (XCreateFontCursor default-x11-display XC_hand2))
                  (list :cross               (XCreateFontCursor default-x11-display XC_crosshair))
                  @a((list :all                 IDC_SIZEALL)
                     (list :west-east           IDC_SIZEWE)
                     (list :no                  IDC_NO)
                     (list :move                (new Cursor-Resource "Move"))
                     (list :opened-hand         (new Cursor-Resource "OpenedHand"))
                     (list :closed-hand         (new Cursor-Resource "ClosedHand"))
                     (list :zoom                (new Cursor-Resource "Zoom"))
                     (list :zoom-in             (new Cursor-Resource "ZoomIn"))
                     (list :zoom-out            (new Cursor-Resource "ZoomOut"))
                     (list :spy                 (new Cursor-Resource "Spy"))
                     (list :left-arrow          (new Cursor-Resource "LeftArrow")))))))
