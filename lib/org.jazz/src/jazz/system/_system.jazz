;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; System
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.system jazz


(export (jazz.system.platform.carbon  (cond carbon))
        (jazz.system.platform.windows (cond windows))
        (jazz.system.platform.x11     (cond x11)))

(import (jazz.io))


;;;
;;;; Aliases
;;;


(definition public (initialize-aliases)
  (initialize-platform-aliases)
  (register-alias 'Home '("~"))
  (register-alias 'User '(Home ".jazz"))
  (register-alias 'Install (tokenise-filename (pathname-normalize jazz-install)))
  (when jazz-source
    (register-alias 'Jazz (tokenise-filename (pathname-normalize jazz-source))))
  (register-alias 'org.jazz '(Jazz "lib" "org.jazz"))
  (register-alias 'org.jedi '(Jazz "lib" "org.jedi"))
  (register-alias 'Profiles '(User "lib" "profiles" "profile"))
  (register-alias 'Launch (get-launch-dir)))


(cond-expand
  (windows
    (definition (initialize-platform-aliases)
      (register-alias 'Network "\\")))
  (else
    (definition (initialize-platform-aliases)
      )))


(definition (get-launch-dir)
  (let ((path (pathname-argument "launchdir")))
    (if path
        (validate-alias 'Launch path)
      (list 'org.jedi "src" "jedi"))))


(definition (validate-alias name path)
  (if (exists?~ (new Directory path))
      path
    (error "Unable to set alias {t} to inexistant directory: {t}" name path)))


;;;
;;;; Arguments
;;;


(definition public (pathname-argument name)
  (let ((arg (command-argument name)))
    (if (not arg)
        #f
      (tokenise-filename
        (if (= (element arg 0) #\double-quote)
            (subseq arg 1 (- (length arg) 1))
          arg)))))


;;;
;;;; Settings
;;;


(definition Settings
  (make-table test: eq?))


(definition public (get-settings)
  Settings)


(definition public (load-settings file)
  (table-load Settings file #f))


(definition public (get-setting name)
  (table-ref Settings name {}))

(definition public (set-setting name value)
  (table-set! Settings name value))


(definition public (require-setting name)
  (either (get-setting name)
          (error "Unable to find setting: {s}" name)))


(definition public (require-string-setting name)
  (let ((setting (require-setting name)))
    (if (not (string? setting))
        (error "Setting {a} must be a string: {s}" name setting)
      setting))))
