;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Activity Manager
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.ui.activity.Activity-Manager jazz


(import (jazz.jml)
        (jazz.library)
        (jazz.ui)
        (jazz.ui.activity)
        (jazz.utilities)
        (jazz.literals))


(class Activity-Manager extends Palette
  
  
  (form
    (<install>                            title: "Activity Manager" position: {Point 787 917} size: {Dimension 247 57}
      (<!>                   name: root   layout-type: fill
        (<Activities-Border> name: border))))


  @windows-specific
  (method (window-style rest)
    (bitwise-ior WS_POPUP WS_CLIPCHILDREN))


  (method (show)
    (set-visible-flag #t)
    (when (get-active?~ (get-application))
      (show-noactivate)))
  
  
  (method (mouse-activate?)
    #f)


  ;;;
  ;;;; Initialization
  ;;;
  
  
  (method (on-close evt)
    (hide))
  
  
  (method (destroy)
    (destroy-manager)
    (nextmethod))


  ;;;
  ;;;; Events
  ;;;
  
  
  (method public (close-manager)
    (unless (not-null? (get-reporters))
      (close)))


  ;;;
  ;;;; Visibility
  ;;;
  
  
  (method public (toggle-visible?)
    (let ((visible? (not (get-visible?))))
      @wait
      (when visible?
        (let* ((reporters (get-reporters))
               (delay (/ 0.005 (if (null? reporters) 1 (length reporters)))))
          (set-effect~ root (new Wipe-Effect direction: 'up delay: delay))))
      (set-visible? visible?)))


  ;;;
  ;;;; Registration
  ;;;
  
  
  (method public (register-activity)
    (let* ((size (get-size))
           (reporters (get-reporters))
           (rank (if (null? reporters) 0 (+ (max-reporter-rank reporters) 1)))
           (border (locate 'border))
           (reporter (new Activity-Reporter parent: border rank: rank))
           (height (get-height~ (get-size~ reporter))))
      (set-size~ reporter (new Dimension (- (get-width~ size) 14) height))
      (update-title)
      (update-rectangle)
      reporter))
  
  
  (method public (unregister-activity reporter)
    (close~ reporter)
    (update-title)
    (update-rectangle))


  ;;;
  ;;;; Update
  ;;;
  
  
  (method protected (update-title)
    (let* ((n (count-if (function (reporter) (not (get-done~ reporter))) (get-reporters)))
           (text (if (= n 0)
                     "No registered activities"
                   (format
                           "{a} activit{a} registered"
                           (format-cardinality n)
                           (if (= n 1) "y" "ies")))))
      (set-title (format "Activities Manager : {a}" text))
      (let ((status (get-status-bar~ (get-application))))
        (when status
          (set-title~ (child~ status 'activities) text)))))
  
  
  (method protected (update-rectangle)
    (compact-reporters)
    (let ((width (get-width))
          (reporters (get-reporters))
          (base (manager-position)))
      (if (null? reporters)
          (begin
            (hide)
            (set-position base)
            (set-size {Dimension 247 57}))
        (let* ((n (+ 1 (max-reporter-rank reporters)))
               (v (get-height~ (get-size~ (car reporters))))
               (height (+ 10 (* n (+ v 8)) 2)))
          (set-position (new Point (get-h~ base) (- (+ (get-v~ base) 57) height)))
          (set-size (new Dimension width height))))))
  
  
  (method protected (compact-reporters)
    (let ((rank 0))
      (for-each (function (reporter)
                  (set-rank~ reporter rank)
                  (increase! rank))
                (sort < (get-reporters) key: reporter-rank))))
  
  
  (method public (clear-done)
    (for-each (function (reporter)
                (when (get-done~ reporter)
                  (close~ reporter)))
              (get-reporters))
    (update-rectangle))


  ;;;
  ;;;; Utilities
  ;;;
  
  
  (method protected (get-reporters)
    (get-children~ (locate 'border)))
  
  
  (method (max-reporter-rank reporters)
    (apply max (map reporter-rank reporters)))
  
  
  (method (reporter-rank reporter)
    (get-rank~ reporter)))


;;;
;;;; Activities-Border
;;;


(class Activities-Border extends View
  
  
  (method (draw surface context update lh lv)
    (let ((bounds (get-bounds)))
      (draw-edge~ surface bounds inner: 'raised outer: 'raised edges: '(left top right))
      (draw-edge~ surface bounds outer: 'sunken edges: '(bottom)))))


(register-autoclass Activities-Border))
