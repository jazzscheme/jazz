;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Hierarchy Browser
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.ui.code.Hierarchy-Browser jazz


(import (jazz.catalog)
        (jazz.io)
        (jazz.jml)
        (jazz.library)
        (jazz.library.component)
        (jazz.literals)
        (jazz.platform)
        (jazz.ui)
        (jazz.ui.view)
        (jazz.utilities))


(class Hierarchy-Browser extends Layout-View


  (property client initialize {} getter get-client setter set-client)
  

  (form
    (<install>                                        layout-type: fill
      (<Layout-View>                name: tools
        (<Toggle-Tool>              name: sorted?     size: {Dimension 22 22} location: tail tooltip?: #t tooltip-text: "Sort?" image-name: {Bitmap-Resource "Link"} portfolio: :icons action-handler: {Event-Handler :form on-toggle-sorted})
        (<Push-Tool>                name: update      size: {Dimension 22 22} location: tail tooltip?: #t tooltip-text: "Refresh" image-name: {Bitmap-Resource "Refresh"} portfolio: :icons action-handler: {Event-Handler :form on-update}))
      (<Scroller-View>              name: scroller    vscroll?: #t hscroll?: #t flat?: #t
        (<!>                        name: content     layout-type: fill
          (<Tree-Header>            name: header      shown?: #f
            (<!>                    name: content
              (<Code-Tree>          name: definitions portfolio: :icons show-header?: #f selection-handler: {Event-Handler :form on-selection-change} double-click-handler: {Event-Handler :form on-double-click}
                (<Tree-Node-Column>                   title: "Hierarchy" width: 329))))))))
  
  
  (method meta (external-name . rest)
    'definitions-browser)


  ;;;
  ;;;; Host
  ;;;
  
  
  (method meta (host-icon)
    {Bitmap-Resource "Components"})
  
  
  (method meta (host-title)
    "Hierarchy")
  
  
  (method (client-activate)
    (let ((entry (client-entry (current-document))))
      (if (not entry)
          (set-client {})
        (set-client entry))))
  
  
  (method (client-deactivate)
    (set-client {}))
  
  
  (method (client-entry guest)
    (when guest
      (if (is? guest Code-Text-View)
          (let ((moniker (get-moniker~ (get-controller~ guest))))
            (when moniker
              (let ((ext (get-extension~ moniker)))
                (if (ci=? ext "jml")
                    (read-jml moniker)
                  (let* ((appl (get-application))
                         (cataloguer (get-cataloguer~ appl))
                         (entries (get-file-entries~ cataloguer moniker context: (get-context~ guest))))
                    (when (= 1 (length entries))
                      (car entries)))))))
        {})))
 

  ;;;
  ;;;; Docked
  ;;;
  
  
  (method (get-tools-view)
    (locate 'tools))
  
  
  (method (focus-default)
    (let ((tree (locate 'definitions)))
      (acquire-focus~ tree)))
 

  ;;;
  ;;;; Access
  ;;;
  
  
  (method (get-sorted?)
    (get-selected?~ (locate 'sorted?)))
 

  ;;;
  ;;;; Events
  ;;;
  
  
  (method (on-toggle-sorted evt)
    (set-sort?~ (locate 'definitions) (get-sorted?))
    (update))
  
  
  (method (on-update evt)
    (when (or (is? client Exception) (is? client Form))
      (reload-jml-client))
    (update))


  (method (on-selection-change evt)
    (let ((sender (get-sender~ evt)))
      (case (get-name~ sender)
        ((definitions)
          (selection-change sender #f)))))


  (method (on-double-click evt)
    (let ((sender (get-sender~ evt)))
      (case (get-name~ sender)
        ((definitions)
         (selection-change sender #t)))))
  
  
  @convert-inconsistant-method
  (method public (mouse-copy destination)
    (when destination
      (let* ((pos  (mouse-position))
             (tree (locate 'definitions))
             (cell (view->tree~ tree pos)))
        (when cell
          (let ((definition (get-user-data~ (get-row~ tree (get-row~ cell)))))
            (mouse-insert~ destination (get-name~ definition)))))))
  
  
  ;;;
  ;;;; Delegate
  ;;;
  
  
  ;; All this should be abstracted into an Hierarchy-Client class
  ;; with Hierarchy-Catalog-Client and Hierarchy-JML-Client subclasses
  
  
  (method (read-jml moniker)
    ;; quick solution we should catch only reading and parsing errors
    (catch (Error err
             err)
      (read-from-file moniker)))
  
  
  (method (reload-jml-client)
    (let ((document (current-document)))
      (if document
          (let ((moniker (get-moniker~ (get-controller~ document))))
            (if moniker
                (set! client (read-jml moniker))
              (set! client {})))
        (set! client {}))))
  
  
  (method (get-client-title client)
    (if (is? client JML-Node)
        "JML"
      (get-title~ client)))
  
  
  (method (insert-client-definition tree client)
    (if (is? client JML-Node)
        (insert-jml-definition tree {} 0 client (get-sorted?))
      (insert-definition~ tree {} client (get-sorted?))))
  
  
  (method (insert-jml-definition tree father level node sort?)
    (let ((row (insert-jml-self tree father level node)))
      (insert-jml-self-definitions tree row level node sort?)))
  
  
  (method (insert-jml-self tree father level node)
    (let* ((model (get-jml-model node))
           (image (if (and model (subtype? model Component)) (get-class-image~ model) {Bitmap-Resource "Slot"}))
           (title (either (get-property~ node 'title) (->string (get-name~ node))))
           (state (if (< level 1) 'expanded 'collapsed)))
      (add-row~ tree father: father state: state children: (list (new Tree-Node title: title image: image)) user-data: node)))
  
  
  (method (get-jml-model node)
    (let ((model-name (get-model-name~ node)))
      (when model-name
        (autoload-class model-name))))
  
  
  (method (get-jml-named-children node)
    (when (is? node JML-Element)
      (collect-if (function (child)
                    (and (is? child JML-Element)
                         (or (get-name~ child)
                             (get-property~ child 'title))))
                  (get-children~ node))))
  
  
  (method (insert-jml-self-definitions tree father level node sort?)
    (insert-jml-definitions tree father level (get-jml-named-children node) sort?))
  
  
  (method (insert-jml-definitions tree father level definitions sort?)
    (let ((ordered (if sort? (sort-jml-definitions definitions) definitions)))
      (for-each (function (definition)
                  (insert-jml-definition tree father (+ level 1) definition sort?))
                ordered)))
  
  
  (method (sort-jml-definitions definitions)
    (sort string<? definitions key: (function (definition) (->string (get-name~ definition)))))
  
  
  (method (edit-definitions definition)
    (if (is? definition JML-Node)
        (edit-jml-definition definition)
      (edit~ definition activate-focus?: #f)))
  
  
  (method (edit-jml-definition definition)
    (let* ((appl (get-application))
           (moniker (get-origin~ client))
           (frame (edit-document~ appl moniker visible?: #f))
           (text (get-guest~ frame))
           (location (append (get-location~ definition) (list 0)))
           (range (location-range~ text location)))
      (set-selection~ text range)
      (bring-to-front~ frame)
      (set-visible?~ frame #t)))
  
  
  ;;;
  ;;;; Client
  ;;;


  (method public (get-client)
    client)

 
  (method public (set-client clt)
    (when (neq? clt client)
      (set! client clt)
      (update)))
  
  
  (method (update)
    (let ((tree (locate 'definitions)))
      (cond ((not client)
             (set-title "Class Browser")
             (remove-every-row~ tree))
            ((is? client Exception)
             (remove-every-row~ tree)
             (add-row~ tree children: (list (new Tree-Node title: (get-message~ client) image: {Bitmap-Resource "Debugger"})) user-data: client))
            (else
             (set-title (format "Class {a}" (get-client-title client)))
             (with-update-locked~ tree
               (function ()
                 (remove-every-row~ tree)
                 (insert-client-definition tree client)))))))
  
  
  ;;;
  ;;;; Selection
  ;;;
  
  
  (method (selection-change tree double-click?)
    (let ((guest (current-document)))
      (when guest
        (let ((moniker (get-moniker~ (get-controller~ guest)))
              (selection (get-single-selection~ tree)))
          (when selection
            (let ((definition (get-user-data~ (get-row~ tree selection))))
              (unless (is? definition Exception)
                (when (and definition (or double-click? (is-not? definition Indexed-Entry) (same-file? definition moniker)))
                  (edit-definitions definition)))))))))
  
  
  (method (same-file? definition moniker)
    (and moniker (pathname=? (get-file~ (get-file-definition~ definition)) moniker)))))
