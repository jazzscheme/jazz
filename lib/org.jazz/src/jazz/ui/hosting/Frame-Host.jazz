;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Frame Host
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.ui.hosting.Frame-Host jazz


(import (jazz.jml)
        (jazz.library)
        (jazz.system)
        (jazz.ui)
        (jazz.ui.resizer)
        (jazz.ui.view)
        (jazz.ui.window)
        (jazz.ui.workspace)
        (jazz.utilities))


(class Frame-Host extends Caption-Host
  
  
  ;;;;;;;;;;;;; FROM FRAME

  
  ;;;
  ;;;; Initialization
  ;;;
  
  
  (method (conclude rest)
    (nextmethod rest)
    (destroy-mandatory))

  
  ;;;
  ;;;; Events
  ;;;


  (method (close-with-confirm)
    (close-popups)
    (confirm-close)
    (nextmethod))
  
  
  ;;;
  ;;;; Activate
  ;;;
  
  
  (method (activate-frame (force?: force? #f))
    (when (or force? (neq? self (get-active-frame)))
      (set-active-frame self)
      (process-activation)
      (update-windowing-actions~ (get-application))))

  
  (method (deactivate-frame)
    (when (eq? self (get-active-frame))
      (set-active-frame {})
      (process-deactivation)))
    

  ;;;
  ;;;; Overwrites
  ;;;
  
  
  (method (destroy)
    (when (get-surrogate)
      (remove-surrogate))
    (let* ((was-active? (eq? self (get-active-frame)))
           (new-active (essay was-active? (second-view~ parent))))
      (nextmethod)
      (when was-active?
        (deactivate-frame)
        (when new-active
          (activate-frame~ new-active)
          (acquire-focus~ new-active))))
    (update-windowing-actions~ (get-application)))
  
  
  (method (bring-to-front)
    (nextmethod)
    (when (get-visible?)
      (activate-front)))
  
  
  (method (send-to-back)
    (nextmethod)
    (activate-front))
  

  ;;;
  ;;;; Activation
  ;;;


  (method (process-activation)
    (close-popups)
    (let ((stage (get-stage)))
      (when (get-maximized?~ stage)
        (set-caption~ (get-toplevel) (get-title))))
    (unless (get-locked-activations?)
      (for-each-docked
        (function (view)
          (client-activate~ view))))
    (frame-activate))


  (method (process-deactivation)
    (frame-deactivate)
    (let ((stage (get-stage)))
      (when (null? (get-views~ stage))
        (stage-activate~ stage))))
  
  
  ;;;;;;;;;;;;;;;;;;;;;;;;;
  
  
  (slot workspace initialize {})


  (method public (get-workspace)
    workspace)


  (method public (set-workspace value)
    (set! workspace value))
  
  
  ;;;
  ;;;; Focus
  ;;;
  
  
  (method (focus-gain old)
    (nextmethod old)
    (activate-focus)
    processed)
  
  
  (method (focus-lose window view)
    (nextmethod window view)
    (deactivate-focus)
    processed)
  
  
  (method (focus-default)
    (when guest
      (focus-default~ guest)))
    
  
  (method (activate-focus)
    (when guest
      (set-guest-actions~ (get-application) (get-guest-actions guest))
      (focus-activate~ guest)))
    
  
  (method (deactivate-focus)
    (set-guest-actions~ (get-application) '()))


  ;;;
  ;;;; Activation
  ;;;

  
  (method (frame-activate)
    (nextmethod)
    (unless (get-locked-activations?)
      (select-workspace)))
  
  
  (method (frame-deactivate)
    (when guest
      (frame-deactivate~ guest)))


  ;;;
  ;;;; Visibility
  ;;;
  
  
  (method (show)
    (nextmethod)
    (let ((stage (get-stage)))
      (when (get-maximized?~ stage)
        (maximize)
        (maximize-bounds (get-size~ stage))
        (maximize~ guest)))
    (activate-front force?: #t))


  ;;;
  ;;;; Workspace
  ;;;
  
  
  (method public (select-workspace)
    (when guest
      (let ((pref (get-workspace-preferences)))
        (when pref
          (let ((current (get-name~ pref))
                (workspaces
                 (cond (workspace
                        (list workspace))
                       (else
                        (effective-host-workspaces~ guest)))))
            (when (and (not-null? workspaces) (not (memq? current workspaces)))
              (let ((pref (get-preferences (list 'workspaces (car workspaces)) error?: #f)))
                (when pref
                  (apply-preferences~ pref)))))))))

  
  (method public (ensure-displayed)
    (let ((outer (get-size~ parent))
          (rect (get-rect)))
      (receive (new-position new-size) (fit-within outer rect padding: 8)
        (set-size new-size)
        (set-position new-position))))
  
  
  ;;;
  ;;;; Maximized
  ;;;
  
  
  (method (get-effective-position)
    (if (get-maximized?)
        (get-preserved-position)
      (get-position)))
  
  
  (method (get-effective-size)
    (if (get-maximized?)
        (get-preserved-size)
      (get-size)))
  
  
  ;;;
  ;;;; Mouse Copy
  ;;;
  
  
  (method (dispatch-mouse-copy)
    (let ((view (mouse-view))
          (dest (get-focus)))
      (when (and view dest)
        (mouse-copy~ view (mouse-position~ view) dest))))


  ;;;
  ;;;; Save
  ;;;

  
  (method (confirm-close . rest)
    (when guest
      (confirm-close~ guest)))
  
  
  ;;;;;;;;;;;;;;;;;;;;;;;;;;; OLD ROOT CODE

  
  (slot dragging?          initialize #f)
  (slot current-part)
  (slot old-position)
  (slot preserved-position initialize {}) ;; the initialize {} is necessary because of the temporary-fix
  (slot preserved-size     initialize {}) ;; the initialize {} is necessary because of the temporary-fix

  
  (form
    (<install>
      (<Frame-Button> name: maximize type: maximize tooltip?: #t tooltip-text: {Locales english: "Maximize" french: "Agrandir"} action-handler: {Event-Handler :form on-maximize})
      (<Frame-Button> name: close    type: close tooltip?: #t tooltip-text: {Locales english: "Close" french: "Fermer"} action-handler: {Event-Handler :form on-close})))

  
  ;;;
  ;;;; Access
  ;;;
  
  
  (method public (get-preserved-position)
    preserved-position)
  
  
  (method public (get-preserved-size)
    preserved-size)

  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method (size-change size)
    (nextmethod size)
    (invalidate-caption)
    (invalidate-border insets: {Rect 4 4 4 4}))
  
  
  (method protected virtual (on-maximize evt)
    (maximize~ (get-stage)))
  
  
  (method protected virtual (on-close evt)
    (close-host))
  
  
  (method (close-host)
    (validate-focus)
    (close-with-confirm~ (get-host)))
  
  
  ;;;
  ;;;; Rects
  ;;;
  
  
  (method (caption-rect)
    (let ((border (if maximized? 0 4)))
      (new Rect border border (- (get-width) border) (+ border 20))))
  
  
  (method protected virtual (maximize-rect top right)
    (new Rect (- right 37) (+ top 3) (- right 21) (+ top 17)))
  
  
  (method protected virtual (close-rect top right)
    (new Rect (- right 19) (+ top 3) (- right  3) (+ top 17)))

  
  ;;;
  ;;;; Activation
  ;;;
  
  
  (method (mouse-activate?)
    #t)
  
  
  (method (mouse-activate)
    (bring-to-front)
    (focus-default))
  
  
  (method (root-activate)
    (invalidate-caption))
  
  
  (method (root-deactivate)
    (invalidate-caption))
  
  
  ;;;
  ;;;; Maximized
  ;;;
  
  
  (method (maximize)
    (unless #f @temporary-fix maximized?
      (let ((host (get-host)))
        (unless maximized?
          (set! preserved-position (get-position~ host))
          (set! preserved-size (get-size~ host)))
        (set! maximized? #t)
        (update-buttons))))
  
  
  (method public (maximize-bounds size)
    (let ((host (get-host)))
      (set-position~ host {Point 0 0})
      (set-size~ host size)
      (layout-view)
      (invalidate-view)))
  
  
  (method (restore)
    (when #t @temporary-fix maximized?
      (let ((host (get-host)))
        ;; test necessary because of temporary-fix
        (when preserved-position
          (set-position~ host preserved-position))
        ;; test necessary because of temporary-fix
        (when preserved-size
          (set-size~ host preserved-size))
        (set! maximized? #f)
        (update-buttons)
        (layout-view)
        (invalidate-view))))
    

  ;;;
  ;;;; Layout
  ;;;
  
  
  (method (layout)
    (let* ((caption? (caption-visible?))
           (border (if caption? 4 0))
           (caption-rect (caption-rect))
           (caption-height (rect-height caption-rect)))
      (layout-buttons)
      (when content
        (set-position~ content (new Point border (if caption? (+ border caption-height) 0)))
        (set-size~ content (new Dimension (- (get-width) border border) (- (get-height) border border (if caption? caption-height 0)))))))
  
  
  (method protected virtual (layout-buttons)
    (let* ((border (buttons-border))
           (top border)
           (bounds (get-bounds))
           (right (- (get-right~ bounds) border)))
      (set-rect~ (locate 'maximize) (maximize-rect top right))
      (set-rect~ (locate 'close) (close-rect top right))))
  
  
  (method protected virtual (buttons-border)
    (if (caption-visible?) 4 0))


  ;;;
  ;;;; Update
  ;;;
  
  
  (method (invalidate-caption)
    (invalidate-rect (caption-rect)))
  
  
  (method protected virtual (update-buttons)
    (let ((visible? (caption-visible?)))
      (set-visible?~ (locate 'maximize) visible?)
      (set-visible?~ (locate 'close) visible?)))


  ;;;
  ;;;; Caption
  ;;;
  
  
  (method (caption-icon)
    (let* ((host (get-host))
           (guest (get-guest~ host)))
      (guest-icon~ guest)))
  
  
  (method (caption-title)
    (let ((host (get-host)))
      (get-title~ host)))
  
  
  (method (caption-focused?)
    (eq? self (get-focused-host)))
  
  
  (method (caption-visible?)
    (not maximized?))


  ;;;
  ;;;; Cursor
  ;;;


  (method (cursor-update pos)
    (if (not (resizeable?))
        (set-cursor :arrow)
      (let ((part (essay (not maximized?) (find-resize-part pos (get-size)))))
        (if (not part)
            (set-cursor :arrow)
          (set-cursor (get-resize-cursor part))))))
  

  ;;;
  ;;;; Mouse
  ;;;
  
  
  (method protected virtual (moveable?)
    #t)
  
  
  (method protected virtual (resizeable?)
    #t)

  
  (method (mouse-down pos)
    (let ((in-caption? (in-rect? pos (caption-rect))))
      (if (and in-caption? (control-down?))
          (send-to-back)
        (when (moveable?)
          (let ((part (find-resize-part pos (get-size))))
            (when (or part in-caption?)
              (set! dragging? #t)
              (set! current-part (essay (resizeable?) part))
              (set! old-position (to-desktop pos))
              (acquire-capture)))))))
  
  
  (method (drag-move pos)
    (when dragging?
      (let* ((desktop-pos (to-desktop pos))
             (delta (point- desktop-pos old-position))
             (dh (get-h~ delta))
             (dv (get-v~ delta)))
        (if (not current-part)
            (move-figure~ (get-host) (get-h~ delta) (get-v~ delta))
          (resize-client dh dv current-part
            (function (dh dv dwidth dheight)
              (resize-host dh dv dwidth dheight))))
        @ZOO
        (update-view~ (get-toplevel))
        (set! old-position desktop-pos))))
  
  
  (method (drag-up pos . rest)
    (when dragging?
      (release-capture)
      (set! dragging? #f)))
  
  
  (method (double-click pos)
    (cond ((in-close-rect? pos)
           (close-host))
          ((in-rect? pos (caption-rect))
           (toggle-maximized))))
  
  
  (cond-expand
    (windows
      (method (in-close-rect? pos)
        (in-rect? pos {Rect 6 6 22 22})))
    (else
      (method (in-close-rect? pos)
        #f)))
  
  
  (method protected virtual (resize-host dh dv dwidth dheight)
    (grow-bounds dh dv dwidth dheight))
  
  
  (method protected virtual (toggle-maximized)
    (toggle-maximized~ (get-stage)))))
