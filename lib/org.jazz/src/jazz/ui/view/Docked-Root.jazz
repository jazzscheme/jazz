;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Docked Root
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.ui.view.Docked-Root jazz


(import (jazz.jml)
        (jazz.library)
        (jazz.literals)
        (jazz.system)
        (jazz.ui)
        (jazz.ui.view)
        (jazz.ui.window)
        (jazz.utilities))


(class Docked-Root extends Root-View
    
  
  (property fullscreen? initialize #f accessors generate)
  (property caption?    initialize #t accessors generate)
  (property zoomable?   initialize #t accessors generate)

  
  (form
    (<install>
      (<Layout-View> name: tools size: {Dimension 0 22} layout-type: flow mouse-down-handler: {Event-Handler :form on-mouse-down})))
    
  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method (size-change size)
    (nextmethod size)
    (invalidate-top)
    (invalidate-border))
  
  
  ;; This version which is not complete really closes the docked.
  ;; For this to work correctly code will have to be modified not
  ;; to rely on any palette being there.
  @code-will-have-to-be-modified-for-this-to-work
  (method (on-close evt)
    (let* ((host player)
           (parent (get-parent~ host))
           (grand (get-parent~ parent)))
      (with-locked-update
        (function ()
          (set-visible?~ host #f)
          (set-parent~ host (get-toplevel))
          (cond ((is? parent Splitter-Window)
                 (let ((other (first-window~ parent)))
                   (when other
                     (if (is? parent Workspace-Splitter)
                         (begin
                           (set-mode~ parent 'zoom)
                           (layout-window~ parent))
                       (set-location~ other (get-location~ parent))
                       (set-parent~ other grand)
                       (close~ parent)
                       (layout-window~ grand)))))
                ((is? parent Pad-Window)
                 (close)
                 (let ((other (first-child~ parent)))
                   (set-location~ other 'selection)
                   (layout-window~ parent))))))))
  
  
  (method (on-close evt)
    (hide-splitted))
  
  
  (method public (hide-splitted)
    (let* ((host player)
           (parent (get-parent~ host))
           (grand (get-parent~ parent)))
      (with-locked-update
        (function ()
          (set-visible?~ host #f)
          (set-parent~ host (get-toplevel))
          (cond ((is? parent Splitter-Window)
                 (let ((other (first-window~ parent)))
                   (when other
                     (if (is? parent Workspace-Splitter)
                         (begin
                           (set-mode~ parent 'zoom)
                           (layout-window~ parent))
                       (set-location~ other (get-location~ parent))
                       (set-parent~ other grand)
                       (close~ parent)
                       (layout-window~ grand)))))
                ((is? parent Pad-Window)
                 (close)
                 (let ((other (first-child~ parent)))
                   (set-location~ other 'selection)
                   (layout-window~ parent))))))))

  
  ;;;
  ;;;; Activation
  ;;;
  
  
  (method (mouse-activate)
    (acquire-focus~ (get-player)))
  
  
  (method (root-activate)
    (invalidate-caption))
  
  
  (method (root-deactivate)
    (invalidate-caption))

  
  ;;;
  ;;;; Tools
  ;;;
  
  
  (method public (install-tools)
    (let* ((host player)
           (guest (get-guest~ host))
           (view (get-tools-view~ guest)))
      (when view
        (let ((tools (get-children~ view))
              (dest (locate 'tools)))
          (for-each (function (tool)
                      (set-location~ tool 'tail)
                      (set-parent~ tool dest))
                    tools)
          (layout-view~ dest)
          (set-visible?~ view #f)
          (set-size~ dest (new Dimension (tools-width tools) 22))
          (layout-view)
          (layout-view~ guest)))))
  
  
  (method public (add-tool tool)
    (let ((tools (locate 'tools)))
      (set-parent~ tool tools)
      (layout-view~ tools)
      (set-size~ tools (new Dimension (tools-width (get-children~ tools)) 22))
      (layout-view)))
  
  
  (method public (remove-tool tool)
    (let ((tools (locate 'tools)))
      (set-parent~ tool {})
      (layout-view~ tools)
      (set-size~ tools (new Dimension (tools-width (get-children~ tools)) 22))
      (layout-view)))
  
  
  (method (tools-width tools)
    (let ((total 0))
      (for-each (function (tool)
                  (when (get-visible?~ tool)
                    (increase! total (get-width~ (get-size~ tool)))))
                tools)
      total))
  
  
  ;; Because moving tools around will mess finding the :form destination.
  ;; Note that it's not as simple as updating the form-level slots because the buttons
  ;; are moved to a view that is not even a child of the :form guest destination!
  (method (redirect-handler handler sender)
    (if (is? sender Item)
        (nextmethod handler sender)
      (let ((name (get-target-name~ handler)))
        (if (eq? name :form)
            (let* ((host player)
                   (guest (get-guest~ host)))
              guest)
          (nextmethod handler sender)))))
  

  ;;;
  ;;;; Layout
  ;;;
  
  
  (method (layout)
    (let ((width (get-width))
          (height (get-height))
          (tools (locate 'tools))
          (content (get-content)))
      (cond (fullscreen?
             (set-visible?~ tools #f)
             (set-position~ content {Point 0 0})
             (set-size~ content (new Dimension width height)))
            (caption?
             (layout-tools width)
             (set-visible?~ tools #t)
             (set-position~ content {Point 1 25})
             (set-size~ content (new Dimension (- width 2) (- height 26))))
            (else
             (set-visible?~ tools #f)
             (set-position~ content {Point 1 1})
             (set-size~ content (new Dimension (- width 2) (- height 2)))))))
  
  
  (method (layout-tools width)
    (let* ((tools (locate 'tools))
           (size (get-size~ tools)))
      (set-position~ tools (new Point (max (- width 3 (get-width~ size)) 0)
                                2))))


  ;;;
  ;;;; Rects
  ;;;
  
  
  (method (caption-rect)
    (new Rect 1 1 (- (get-width) 2) 24))
  
  
  (method (top-rect)
    (new Rect 1 1 (- (get-width) 2) 25))


  ;;;
  ;;;; Update
  ;;;
  
  
  (method (invalidate-top)
    (invalidate-rect (top-rect)))
  
  
  (method (invalidate-caption)
    (invalidate-rect (caption-rect)))


  ;;;
  ;;;; Drawing
  ;;;
  
  
  (definition Active-Start-Color
    {Color red: 225 green: 234 blue: 252})
 
  (definition Active-End-Color
    {Color red: 153 green: 186 blue: 243})
  
  (definition Inactive-Start-Color
    {Color red: 245 green: 244 blue: 235})
 
  (definition Inactive-End-Color
    {Color name: Medium})
  
  (definition Frame-Color
    {Color red: 128 green: 128 blue: 128})

  
  (method (draw surface context update lh lv)
    (let ((host player)
          (bounds (get-bounds))
          (focused? (eq? self (get-focused-root)))
          (all (collect-all)))
      (frame-rect~ surface bounds Frame-Color)
      (let ((h 1)
            (first (first all)))
        (for-each (function (docked)
                    (let ((title (get-title~ docked))
                          (icon (host-icon~ (class-of (get-guest~ docked))))
                          (first? (eq? docked first))
                          (selected? (eq? docked host)))
                      (let* ((left (- h .5))
                             (top .5)
                             (width (+ (get-text-width~ surface title) 37))
                             (height 24)
                             (right (+ left width))
                             (bottom (+ top height)))
                        (when (and selected? focused?)
                          (gradient-fill~ surface (new Rect h 1 (+ h width) 24)
                            (list (list 0 (if focused? Active-Start-Color Inactive-Start-Color))
                                  (list 1 (if focused? Active-End-Color Inactive-End-Color)))
                            direction: 'vertical)
                          (set-color~ surface (if focused? {Color name: Dark} {Color red: 230 green: 225 blue: 204} @w {Color red: 220 green: 215 blue: 184}))
                          (set-line-width~ surface 1)
                          (when (not first?)
                            (cairo-move-to~ surface left bottom)
                            (cairo-line-to~ surface left 1)
                            (stroke~ surface))
                          (cairo-move-to~ surface right 1)
                          (cairo-line-to~ surface right bottom)
                          (stroke~ surface))
                        (draw-image~ (get-icons-cache~ (get-application)) surface context icon (+ h 3) 5)
                        (set-font~ surface {Font name: Label})
                        (set-text-color~ surface (if selected? {Color name: Black} {Color red: 100 green: 75 blue: 0}))
                        (draw-text~ surface (+ h 21) 7 title)
                        (increase! h width))))
                  all))
      (set-color~ surface {Color name: Dark})
      (set-line-width~ surface 1)
      (line~ surface 1 24 (- (get-width) 1) 24)))

  
  @rounded
  (method (draw surface context update lh lv)
    (let ((bounds (get-bounds))
          (caption (new Rect 2 2 (get-h~ (get-position~ (locate 'tools))) 24)))
      (let* ((host player)
             (guest (get-guest~ host))
             (icon (host-icon~ (class-of guest)))
             (title (localize (get-title~ host)))
             (width (get-width))
             (height (get-height))
             (focused? (eq? self (get-focused-root))))
        (frame-rect~ surface bounds {Color name: Dark})
        (let ((h 1))
          (for-each (function (docked)
                      (let* ((guest (get-guest~ docked))
                             (title (get-title~ docked))
                             (icon (host-icon~ (class-of guest)))
                             (selected? (eq? docked host)))
                        (let ((width (get-text-width~ surface title)))
                          (let* ((left (- h .5))
                                 (top .5)
                                 (width (+ width 13))
                                 (height 24)
                                 (right (+ left width))
                                 (bottom (+ top height))
                                 (pi 3.14159265358979323846))
                            (when (and selected? focused?)
                              (let ((pattern (let ((mid (+ left (fxfloor/ width 2))))
                                               (create-linear-pattern~ surface mid top mid (+ top height)))))
                                (add-color-stop~ surface pattern 0 {Color red: 225 green: 234 blue: 252})
                                (add-color-stop~ surface pattern 1 {Color red: 153 green: 186 blue: 243})
                                (set-source~ surface pattern)
                                (cairo-move-to~ surface left bottom)
                                (cairo-line-to~ surface left (+ top 5))
                                (arc~ surface (+ left 5) (+ top 5) 5 pi (* pi 1.5))
                                (cairo-line-to~ surface (- right 2) top)
                                (curve-to-relative~ surface 15 5 15 15 30 height)
                                (close-path~ surface)
                                (fill~ surface)))
                            (set-color~ surface {Color name: Dark})
                            (set-line-width~ surface 1)
                            (cairo-move-to~ surface left bottom)
                            (cairo-line-to~ surface left (+ top 5))
                            (arc~ surface (+ left 5) (+ top 5) 5 pi (* pi 1.5))
                            (cairo-line-to~ surface (- right 2) top)
                            (curve-to-relative~ surface 15 5 15 15 30 height)
                            (close-path~ surface)
                            (stroke~ surface)
                            (draw-image~ (get-icons-cache~ (get-application)) surface context icon (+ h 2) 5)
                            (set-font~ surface {Font name: Label})
                            (set-text-color~ surface {Color name: Black})
                            (draw-text~ surface (+ h 20) 7 title)
                            (increase! h (+ width 30))))))
                    (collect-all)))
        (set-color~ surface {Color name: Dark})
        (set-line-width~ surface 1)
        (line~ surface 1 24 (- width 3) 24))))
  

  ;;;
  ;;;; Mouse
  ;;;

  
  (method (mouse-down pos)
    (for-each-docked
      (function (docked rect)
        (when (in-rect? pos rect)
          (let ((parent (get-parent~ player)))
            (when (is? parent Pad-Window)
              (set-selection~ parent docked))
            (acquire-focus~ docked))))))
  
  
  (method (toggle-docked pos)
    @wait-Font
    (let* ((host player)
           (parent (get-parent~ host)))
      (when (is? parent Pad-Window)
        (let* ((title (localize (get-title~ host)))
               (font {Font name: Label})
               (h (+ 28 (text-width~ font title))))
          (when (< (get-h~ pos) h)
            (with-locked-update
              (function ()
                (select-next~ parent))))))))
  
  
  (method (double-click pos)
    (when zoomable?
      (let* ((host (get-host))
             (parent (get-parent~ host))
             (target (if (is? parent Pad-Window) parent host)))
        (if (shift-down?)
            (toggle-full-screen~ (get-application) target)
          (let ((splitter (if (is? parent Pad-Window) (get-parent~ parent) parent)))
            (when (is? splitter Splitter-Window)
              (with-locked-update
                (function ()
                  (if (eq? (get-state~ splitter) 'split)
                      (zoom~ splitter target)
                    (unzoom~ splitter))))))))))
  

  ;;;
  ;;;; Docked
  ;;;
  
  
  (method (for-each-docked proc)
    (let ((all (collect-all)))
      (let ((h 0)
            (first (first all)))
        (for-each (function (docked)
                    (let ((title (get-title~ docked))
                          (first? (eq? docked first)))
                      (let ((left (if first? (+ h 1) h))
                            (top 1)
                            (width (+ (text-width~ {Font name: Label} title) 37))
                            (height 23))
                        (proc docked (new Rect left top (+ h width) (+ top height)))
                        (increase! h width))))
                  all))))
  
  
  (method (collect-all)
    (let ((pad (get-parent~ player)))
      (if (is? pad Pad-Window)
          (get-children~ pad)
        (list player))))
  
  
  (method (collect-others host)
    (let ((pad (get-parent~ player)))
      (when (is? pad Pad-Window)
        (collect-if (function (hst)
                      (neq? hst host))
                    (get-children~ pad)))))
  

  ;;;
  ;;;; Menu
  ;;;
  
  
  (method (select-menu)
    (let* ((host player)
           (others (collect-others host)))
      (when others
        (let ((menu (new Context-Menu)))
          (for-each (function (docked)
                      (let* ((guest (get-guest~ docked))
                             (title (get-title~ docked))
                             (icon (host-icon~ (class-of guest))))
                        (new Label-Item parent: menu title: title icon: icon action-handler: (new Event-Handler target: self method-name: 'on-select properties: (list host: docked)))))
                    others)
          (layout-menu~ menu)
          (track-popup-menu menu {Point 2 25})))))
  
  
  (method (on-select evt)
    (let ((parent (get-parent~ player))
          (host (get-property~ evt host:)))
      (with-locked-update
        (function ()
          (set-selection~ parent host)
          (acquire-focus~ host)))))))
