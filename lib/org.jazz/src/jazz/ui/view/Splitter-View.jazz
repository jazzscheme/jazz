;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Splitter View
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.ui.view.Splitter-View jazz


(import (jazz.jml)
        (jazz.library)
        (jazz.literals)
        (jazz.ui)
        (jazz.ui.window)
        (jazz.utilities))


(class Splitter-View extends View


  (property separator     initialize 'resize        accessors generate)
  (property state         initialize {}             accessors generate)
  (property orientation   initialize 'horz          accessors generate)
  (property mode          initialize 'absolute      accessors generate)
  (property division      initialize 100            accessors generate)
  (property insets        initialize {Rect 0 0 0 0} accessors generate)
  (property full?         initialize #f             accessors generate)
  (property after-handler initialize {}             accessors generate)
  
  
  (slot split-layout initialize (new Split-Layout))
  (slot bar-bounds   initialize {})
  (slot dragging?    initialize #f)
  (slot previous     initialize {})
    
  
  (form
    (<install> background: {Color name: Medium}))

  
  ;;;
  ;;;; Layout
  ;;;


  (method (size-change size)
    (nextmethod size)
    (layout-view))

  
  (method (layout)
    (let* ((size (get-size))
           (mode (if dragging? 'absolute mode))
           (width (get-width~ size))
           (height (get-height~ size))
           (div (if (or (eq? mode 'relative) (> division 0))
                    division
                  ;; why was this code necessary???
                  (+ (case orientation ((horz) width) ((vert) height)) division -3))))
      (set! bar-bounds (layout~ split-layout children width height separator: separator state: state orientation: orientation mode: mode division: div insets: insets))))
      
  
  @FROM-SPLITTER-WINDOW
  (method (layout)
    (let ((size (get-size))
          (mode (if dragging? 'absolute mode))
          (insets (if full? {Rect 0 0 0 0} insets)))
      (set! bar-bounds (layout~ split-layout children (get-width~ size) (get-height~ size) separator: separator state: state orientation: orientation mode: mode division: division insets: insets))))

  
  ;;;
  ;;;; Children
  ;;;
  
  
  (method public (remove-children)
    (for-each (function (child)
                (when (is? child Splitter-View)
                  (remove-children~ child))
                (when (is? child Pad-View)
                  (remove-children~ child))
                (if (is? child Splitter-View)
                    (close~ child)
                  (set-visible?~ child #f)
                  (set-parent~ child {})
                  (when (is? child Host-View)
                    (host-deactivate~ (get-guest~ child)))))
              children))
  
  
  ;;;
  ;;;; Workspace
  ;;;
  
  
  (method public (workspace-zoomable? view)
    (define (get-brother view)
      (find-if (function (child)
                 (neq? child view))
               children))
    
    (let ((brother (get-brother view)))
      (or (is-not? brother Host-View)
          (let ((guest (get-guest~ brother)))
            (workspace-minimisable?~ guest)))))

  
  ;;;
  ;;;; Zoom
  ;;;
  
  
  (method public (zoom target)
    (set! state 'zoom)
    (for-each (function (child)
                (set-visible?~ child (eq? child target)))
              children)
    (layout-view))
    
  
  (method public (unzoom)
    (set! state 'split)
    (for-each (function (child)
                (set-visible?~ child #t))
              children)
    (layout-view))
  
  
  (method public (get-zoomed)
    (when (eq? state 'zoom)
      (find-if (function (child)
                 (get-visible?~ child))
               children)))
  
  
  ;;;
  ;;;; Cursor
  ;;;


  (method (cursor-update pos)
    (when (and bar-bounds (in-rect? pos bar-bounds))
      (case orientation
        ((horz) (set-cursor :vertical-splitter))
        ((vert) (set-cursor :horizontal-splitter)))))
  

  ;;;
  ;;;; Draw
  ;;;

  
  @debug
  (method (draw surface context update lh lv)
    (when bar-bounds
      (fill-rect~ surface bar-bounds {Color name: Light-Red})))
  
  
  (method (draw surface context update lh lv)
    (when (and (eq? state 'split) bar-bounds)
      (case separator
        ((resize))
        ((edge)
         (case orientation
           ((horz) (draw-edge~ surface bar-bounds inner: 'raised outer: 'sunken edges: '(left)))
           ((vert) (draw-edge~ surface bar-bounds inner: 'raised outer: 'sunken edges: '(top)))))
        ((line)
         (case orientation
           ((horz) (draw-edge~ surface bar-bounds inner: 'raised edges: '(left)))
           ((vert) (draw-edge~ surface bar-bounds inner: 'raised edges: '(top))))))))
  
  
  ;;;
  ;;;; Convertion
  ;;;
  
  
  (method (absolute->relative division)
    (let ((size (case orientation
                  ((horz) (get-width))
                  ((vert) (get-height)))))
      (percentage division size)))
  
  
  (method (relative->absolute division)
    (let* ((size (case orientation
                   ((horz) (get-width))
                   ((vert) (get-height))))
           (pct (fxround (percent (abs division) size))))
      (if (positive? division)
          (set! division pct)
        (set! division (- size pct)))
      division))
  
  
  ;;;
  ;;;; Mouse
  ;;;
  
  
  @FROM-SPLITTER-WINDOW
  (method (mouse-down h v)
    (when (and (eq? separator 'resize) bar-bounds (in-rect? (new Point h v) bar-bounds))
      (set! dragging? #t)
      (set! previous (case orientation ((horz) h) ((vert) v)))
      (when (eq? mode 'relative)
        (set! division (relative->absolute division)))
      (acquire-capture)))
  
  
  (method (mouse-down pos)
    (set! dragging? #t)
    (set! previous (case orientation ((horz) (get-h~ pos)) ((vert) (get-v~ pos))))
    (when (eq? mode 'relative)
      (set! division (relative->absolute division)))
    (acquire-capture))
  
  
  (method (drag-move pos)
    (when dragging?
      (let* ((n (case orientation ((horz) (get-h~ pos)) ((vert) (get-v~ pos))))
             (delta (- n previous)))
        (increase! division delta)
        (set! previous n)
        (layout-view)
        (update-view)
        (call-after-handler))))
  
  
  (method (drag-up pos . rest)
    (when dragging?
      (release-capture)
      (when (eq? mode 'relative)
        (set! division (absolute->relative division)))
      (set! dragging? #f)))
 
  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method (call-after-handler)
    (when after-handler
      (invoke~ after-handler self (new Event after: self))))


  ;;;
  ;;;; Designer
  ;;;
  
  
  (method meta (get-class-image)
    {Bitmap-Resource "TileVertically"})

  
  (method meta (property-presentation property)
    (case (field-name property)
      ((separator) "Separator")
      ((state) "State")
      ((orientation) "Orientation")
      ((mode) "Mode")
      ((division) "Division")
      ((insets) "Insets")
      ((after-handler) "After Handler")
      (else (nextmethod property))))))
