;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Frame Windows
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.ui.window.Frame jazz


(import (jazz.library)
        (jazz.ui)
        (jazz.ui.view)
        (jazz.ui.window)
        (jazz.ui.workspace)
        (jazz.utilities))


(class Frame extends View-Player
  
  
  ;;;;;;;;; most of this code is now in Frame-Host
  
  
  (slot site initialize {})

  
  ;;;
  ;;;; Initialization
  ;;;
  
  
  (method (conclude rest)
    (nextmethod rest)
    (bring-to-front)
    (destroy-mandatory))

  
  ;;;
  ;;;; Events
  ;;;


  (method (close-with-confirm)
    (close-popups)
    (confirm-close)
    (nextmethod))
  
  
  (method (on-mouse-activate)
    (bring-to-front)
    (nextmethod))
  
  
  (method (mouse-down h v)
    (bring-to-front)
    (nextmethod h v))
  
  
  ;;;
  ;;;; Activate
  ;;;
  
  
  (method (activate-frame (force?: force? #f))
    (when (or force? (neq? self (get-active-frame)))
      (bring-window-to-top handle)
      (set-active-frame self)
      (process-activation)
      (update-windowing-actions~ (get-application))))

  
  (method (deactivate-frame)
    (when (eq? self (get-active-frame))
      (set-active-frame {})
      (process-deactivation)))
    

  ;;;
  ;;;; Overwrites
  ;;;
  
  
  (method (destroy)
    (when (get-surrogate)
      (remove-surrogate))
    (let* ((was-active? (eq? self (get-active-frame)))
           (new-active (essay was-active? (second-window~ parent))))
      (nextmethod)
      (when was-active?
        (deactivate-frame)
        (when new-active
          (activate-frame~ new-active)
          (acquire-focus~ new-active))))
    (update-windowing-actions~ (get-application)))
  
  
  (method (show)
    (nextmethod)
    (activate-front force?: #t))
  
  
  (method (bring-to-front)
    (nextmethod)
    (when (get-visible?)
      (activate-front)))
  
  
  (method (send-to-back)
    (nextmethod)
    (activate-front))
  

  ;;;
  ;;;; Activation
  ;;;


  (method (process-activation)
    (close-popups)
    (send-child-to-front~ parent self)
    (let ((stage (get-stage)))
      (when (get-maximized?~ stage)
        (set-caption~ (get-toplevel) (get-window-title))))
    (unless (get-locked-activations?)
      (for-each-docked
        (function (view)
          (client-activate~ view))))
    (frame-activate))


  (method (process-deactivation)
    (frame-deactivate)
    (let ((stage (get-stage)))
      (when (null? (get-views~ stage))
        (stage-activate~ stage))))
  
  
  (method public virtual (frame-activate)
    )
  
  
  (method public virtual (frame-deactivate)
    )))
