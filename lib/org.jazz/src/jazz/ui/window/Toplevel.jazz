;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Toplevel Windows
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.ui.window.Toplevel jazz


(import (jazz.jml)
        (jazz.library)
        (jazz.system)
        (jazz.ui)
        (jazz.ui.view)
        (jazz.ui.window)
        (jazz.utilities))


(class Toplevel extends Overlapped

  
  (property fullscreen?  initialize #f getter get-fullscreen?  setter set-fullscreen?)
  (property caption?     initialize #t getter get-caption?     setter set-caption?)
  (property caption-base initialize {} getter get-caption-base setter set-caption-base)
  (property caption      initialize {} getter get-caption      setter set-caption)


  (slot maximized?            initialize #f)
  (slot workspace-preferences initialize {})
  (slot stage-border          initialize {})


  (form
    (<install> visible?: #f))

  
  ;;;
  ;;;; Initialization
  ;;;


  (method (install rest)
    (setup-stage)
    (nextmethod rest))

  
  ;;;
  ;;;; Events
  ;;;


  (method (on-activate kind)
    (when (eq? kind 'inactive)
      (toplevel-deactivate))
    (nextmethod kind))

  
  ;;;
  ;;;; Root
  ;;;
  
  
  (method (new-root)
    (new Splitter-View offscreen?: #t state: 'zoom))

  
  ;;;
  ;;;; Stage
  ;;;


  (method (setup-stage)
    (set! stage-border (new Stage-Border @ZOO (stage-border-class~ parent) name: 'stage-border)))
  
  
  (method public (get-stage-border)
    stage-border)
  
  
  (method public (get-stage)
    (get-stage~ stage-border))


  (method public virtual (stage-border-class)
    Stage-Border)


  (method public virtual (stage-class)
    Stage)

  
  ;;;
  ;;;; Workspace
  ;;;
  
  
  (method public (get-workspace-preferences)
    workspace-preferences)
  
  
  (method public (set-workspace-preferences preferences)
    (set! workspace-preferences preferences))
  
  
  ;;;
  ;;;; Focus
  ;;;
  
  
  ;; This gets called when the application is reactivated after switching to another app
  ;; or after a modal dialog. Note that after a modal dialog, the application doesn't receive
  ;; an activate message so it could not be used to restore the focus to what it was.
  (method (focus-gain)
    (reactivate-focus)
    processed)
  
  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method (on-activate-app status)
    (catch Cancel-Signal
      (let ((appl (get-application)))
        (if (= status 0)
            (deactivate~ appl)
          @ZOO
          (restore-minimized~ root)
          (activate~ appl))))
    processed)


  (method (show)
    (define (find-workspace)
      (let ((pref (get-preferences 'workspaces error?: #f)))
        (if (not pref)
            (default-workspace)
          (let ((active (get-active~ pref)))
            (if (not active)
                (default-workspace)
              (child~ pref active))))))
    
    (set-visible-flag #t)
    (apply-preferences~ (find-workspace))
    (nextmethod)
    (let ((appl (get-application)))
      (show-undisplayed-message~ appl)
      (workspace-installed~ appl))
    (update-window))
  
  
  (method (default-workspace)
    (new Default-Workspace))
  
  
  (method (close)
    (exit-process~ (get-process)))
    
  
  ;;;
  ;;;; Fullscreen
  ;;;


  (method public (get-fullscreen?)
    fullscreen?)


  (method public (set-fullscreen? value)
    (when (neq? value fullscreen?)
      (set! fullscreen? value)
      (update-bounds)))
  
  
  (method public (update-bounds)
    @ZOO
    (with-locked-update
      (function ()
        (let ((splitter (get-workspace-splitter))
              (maximized? (get-maximized?~ root))
              (caption-height (caption-height)))
          (cond ((or fullscreen? (not caption?))
                 (let* ((desktop (get-desktop))
                        (size (get-size~ desktop)))
                   (when fullscreen?
                     (set-position {Point 0 0})
                     (set-size size))
                   @ZOO
                   (when splitter
                     (set-position~ splitter {Point 0 0})
                     (set-size~ splitter size))))
                (maximized?
                  (let* ((rect (get-work-area))
                         (size (rect-size rect)))
                    (when maximized?
                      (set-position (rect-position rect))
                      (set-size size))
                   @ZOO
                   (when splitter
                     (set-position~ splitter (new Point 0 caption-height))
                     (set-size~ splitter (- size (new Dimension 0 caption-height))))))
                (else
                 (let ((size (get-size)))
                   @ZOO
                   (when splitter
                     (set-position~ splitter (new Point 4 (+ caption-height 4)))
                     (set-size~ splitter (- size (new Dimension 8 (+ caption-height 8))))))))))))

  
  ;;;
  ;;;; Base
  ;;;
  
  
  (method public (get-caption-base)
    caption-base)
  

  (method public (set-caption-base value)
    (set! caption-base value)
    (invalidate-title))
    
  
  ;;;
  ;;;; Caption
  ;;;


  (method public (get-caption?)
    caption?)


  (method public (set-caption? value)
    (when (neq? value caption?)
      (set! caption? value)
      (update-bounds)))
  
  
  (method public (get-caption)
    caption)
  
  
  (method public (set-caption value)
    (set! caption value)
    (invalidate-title))
  
  
  (method public (refresh-caption)
    (let ((frame (current-frame)))
      (set! caption (if frame (get-window-title~ frame) {}))
      (invalidate-title)))
  
  
  (cond-expand
    (windows
      (method (caption-height)
        22))
    (else
      (method (caption-height)
        0)))
    
  
  ;;;
  ;;;; Title
  ;;;
  
  
  (method (invalidate-title)
    (let ((title (effective-title)))
      (set-title title)
      (set-title~ root title)
      @ZOO
      (invalidate-caption~ root)))
  
  
  (method protected virtual (effective-title)
    (if (or (not caption) (not maximized?))
        caption-base
      (format "{a} - {a}" (localize caption-base) caption)))
    
  
  ;;;
  ;;;; Maximize
  ;;;
  
  
  (method public (maximize)
    (set! maximized? #t)
    (invalidate-title))
  
  
  (method public (restore)
    (set! maximized? #f)
    (invalidate-title))
  
  
  ;;;
  ;;;; Palettes
  ;;;
  
  
  (method public (get-palettes)
    (collect-if (function (window)
                  (and (is? window Palette)
                       (get-visible?~ window)))
                children))))
