;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Workspace Button
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.ui.workspace.Workspace-Button jazz


(import (jazz.library)
        (jazz.literals)
        (jazz.ui)
        (jazz.utilities))


(class Workspace-Button extends Radio-Tool
  
  
  (property visit?   initialize #f getter generate)
  (property problem? initialize #f getter generate)
  
  
  ;;;
  ;;;; Notify
  ;;;
  
  
  (method public (set-visit? flag)
    (when (neq? flag visit?)
      (set! visit? flag)
      (invalidate-view)))
  
  
  (method public (set-problem? flag)
    (when (neq? flag problem?)
      (set! problem? flag)
      (invalidate-view)))
  
  
  (method public (notify visit? problem?)
    (set! visit?~self visit?)
    (set! problem?~self problem?)
    (invalidate-view))

  
  ;;;
  ;;;; Layout
  ;;;
  
  
  (method (preferred-size)
    (if (not title)
        (default-size)
      (new Dimension (+ 32 (text-width~ font (localize title))) 22)))
  
  
  ;;;
  ;;;; Drawing
  ;;;
  
  
  (definition problem-border
    {Color name: Dark-Red})
  
  (definition visit-start
    {Color name: Light-Red})
  
  (definition visit-end
    {Color name: Red})


  (method (draw-frame surface)
    (if problem?
        (let* ((rect (get-bounds))
               (left (get-left~ rect))
               (top (get-top~ rect))
               (right (- (get-right~ rect) 1))
               (bottom (- (get-bottom~ rect) 1)))
          (frame-rect~ surface (get-bounds) problem-border)
          (set-pen~ surface (new Pen color: {Color name: Medium}))
          (pixel-to~ surface left top)
          (pixel-to~ surface right top)
          (pixel-to~ surface left bottom)
          (pixel-to~ surface right bottom))
      (nextmethod surface)))
  

  (method (draw-tool surface context)
    (let ((offset (if (or selected? (eq? (get-state) 'pushed)) 2 1)))
      (if (not title)
          (draw~ image surface context offset offset enabled?: (get-enabled?))
        (let* ((offset (if (or selected? (eq? (get-state) 'pushed)) 1 0))
               (title (localize title))
               (extent (nu+ {Dimension 24 0} (get-text-extent~ surface title)))
               (center (justify extent (get-size) '(center center))))
          (draw~ image surface context (+ offset (get-h~ center)) offset enabled?: (get-enabled?))
          (set-text-color~ surface {Color name: Black})
          (draw-text~ surface (+ (+ 20 offset) (get-h~ center)) (+ offset (get-v~ center)) title enabled?)))))

  
  (method (draw-background surface context)
    (if visit?
        (gradient-fill~ surface (get-bounds) (list (list 0 visit-start) (list 0.5 visit-end) (list 1 visit-start)) direction: 'vertical)
      (nextmethod surface context)))))
