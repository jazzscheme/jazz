;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; List Tests
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.validate.suite.List-Tester jazz


(import (jazz.jml)
        (jazz.library)
        (jazz.validate))


(class List-Tester extends Tester
  
  
  (form
    (<install> title: "List"))


  (method (test)
    (invoke {} test-list))
  
  
  ;;;
  ;;;; List
  ;;;


  (method (test-list)
    (validate rpt (pair? '(a . b)))
    (validate rpt (pair? '(a b c)))
    (validate rpt (not (pair? '())))
  

    (validate rpt (equal? (list 1 2 3) '(1 2 3)))
    (validate rpt (equal? (reverse '(1 2 3)) '(3 2 1)))


    (validate rpt (null? (append)))
    (validate rpt (equal? (append '(1 2 3)) '(1 2 3)))
    (validate rpt (equal? (append '() '(1 2 3) '() '() '(a b c) '(d e f)) '(1 2 3 a b c d e f)))
    (validate rpt (let ((x '(1 2 3))) (eq? x (append '() '() '() x '() '()))))


    (validate rpt (equal? (assoc 2 '((2 . 3))) '(2 . 3)))
    (validate rpt (= (cdr (associate "pref" '(("PREF" . 3)) test: ci=?)) 3))
  
  
    (validate rpt (= (sort < '(5 3 8 1 4)) '(1 3 4 5 8)))
    (validate rpt (= (sort < '(("Mark" 5) ("Jeff" 3) ("Bob" 8)) key: second) '(("Jeff" 3) ("Mark" 5) ("Bob" 8))))

  
    @Interpreted
    (begin
      (validate rpt (error? (car)))
      (validate rpt (error? (car 2)))
      (validate rpt (error? (car 1 2)))
      
      (validate rpt (error? (element '() 0)))
      (validate rpt (error? (element '(a) 1)))
      (validate rpt (error? (set-element! '(a) 1 'b)))))))
