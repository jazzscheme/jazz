;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; XML Transformer
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Dominique Boucher.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


;;;
;;; Format des règles
;;;
;;; Pour définir une transformation, il faut dériver une
;;; classe de XML-Transformer.


(library jazz.xml.transform.XML-Transformer jazz


(import (jazz.xml)
        (jazz.library)
        (jazz.utilities))


(class XML-Transformer extends Object implements XML-Handler
  
  
  (slot handler)
  
  
  (method (initialize (handler: handler :console))
    (nextmethod)
    (set! handler~self handler))
 
  
  (method protected virtual (get-handler)
    handler)
  
  
  (method public (apply-transformation ruleset document . rest)
    (apply ruleset document rest))
  
  
  ;;;
  ;;;; Accessors
  ;;;
  
  
  (method public virtual (element? node)
    (sxml-element? node))
  
  
  (method public virtual (element-tag node)
    (sxml-element-tag node))
  
  
  (method public virtual (node-children node)
    (sxml-element-children node))
  
  
  (method public virtual (node-attribute node attribute-name)
    (let* ((attributes (sxml-element-attributes node))
           (attribute  (assq attribute-name attributes)))
      (if (sxml-attribute? attribute)
          (sxml-attribute-value attribute)
        {})))
  
  
  (method public virtual (get-text node)
    (sxml-text-data node))
  
  
  ;;;
  ;;;; Output methods
  ;;;
  
  
  (method public (get-document)
    (get-document~ (get-handler)))
  
  
  (method public (begin-document)
    (begin-document~ (get-handler)))
  
  
  (method public (end-document)
    (end-document~ (get-handler)))
  
  
  (method public (begin-element tag)
    (begin-element~ (get-handler) tag))
  
  
  (method public (end-element tag)
    (end-element~ (get-handler) tag))
  
  
  (method public (add-attribute name value <string>)
    (add-attribute~ (get-handler) name value))
  
  
  (method public (text content <string>)
    (text~ (get-handler) content))
  
  
  (method public (comment content <string>)
    (comment~ (get-handler) content))
  
  
  (method public (processing-instruction content <string>)
    (processing-instruction~ (get-handler) content))))
