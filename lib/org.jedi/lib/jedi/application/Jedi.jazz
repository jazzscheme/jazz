;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; The Jedi Application
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jedi.application.Jedi jazz


(import (jazz.builder)
        (jazz.builder.workbench)
        (jazz.console)
        (jazz.debuggee)
        (jazz.development)
        (jazz.ide)
        (jazz.io)
        (jazz.jrm)
        (jazz.language.jazz)
        (jazz.library)
        (jazz.library.component)
        (jazz.platform)
        (jazz.ui)
        (jazz.ui.development)
        (jazz.ui.view)
        (jazz.ui.window)
        (jazz.utilities)
        (jedi))


(class Jedi extends IDE
  
  
  (slot documentation-cataloguer initialize {})
  
  
  (method meta (external-name . rest)
    'jedi)

  
  (method (process-name)
    "Jedi")
  
  
  (method (process-owner)
    "JazzScheme")
  
  
  (method (process-copyright)
    "1996-2008")
  
  
  (method (process-icon)
    "Jedi")


  (method (process-version)
    {Version 2 0 alpha 1})


  (method (process-email)
    "gcartier@jazzscheme.org")


  (method (new-toplevel)
    (new Jedi-Toplevel))
  
  
  (method (start-process rest)
    (nextmethod rest)
    (set-catalog-context 'jazz))
  
  
  (method (finalize-process rest)
    (nextmethod rest)
    @convert/wait
    (preload-catalogs~ (get-cataloguer))
    @convert/wait
    (when (in-manifest? 'Provider)
      (register-provider~ Provider (new Access-Provider))
      @waiting
      (register-provider~ Provider (new Oracle-Provider))
      (register-provider~ Provider (new SQLServer-Provider))
      (register-provider~ Provider (new JDBC-Provider)))
    (add-application-listener 'workspace (new Event-Handler target: self method-name: 'on-workspace)))
  
  
  (method (finish-process rest)
    (nextmethod rest)
    @convert/wait
    (display-boot-time (getf rest launch-time:)))

  
  ;;;
  ;;;; Preferences
  ;;;
  
  
  (method (default-preferences)
    (new Jedi-Preferences))
  
  
  (method (default-bindings)
    (new Jedi-Bindings))

  
  ;;;
  ;;;; Search
  ;;;


  (method (get-search-manager)
    (singleton-palette
      (function ()
        (new-palette Jedi-Search
                     host-title: "Search"
                     host-visible?: #f
                     host-position: {Point 150 220}
                     host-size: {Dimension 865 196}))
      'search))
  
  
  ;;;
  ;;;; Versions
  ;;;
  

  (method (mandatory-version what)
    (case what
      ((sqlserver) {Version 8 0 0})
      ((dao) {Version 3 6 0})
      ((access-database) {Version 4 0 0})
      (else (nextmethod what))))
  
  
  ;;;
  ;;;; Frames
  ;;;


  (method (base-frame-class)
    Text-View)


  (method (default-frame-class)
    Jazz-Text-View)


  (method (known-extension-frame-class ext)
    (cond ((member? ext '("txt" "text") test: ci=?) Jazz-Plain-Text-View)
          ((member? ext '("tpl") test: ci=?) (module-autoload 'jazz.language.java 'Java-Text-View))
          ((member? ext Scheme-Extensions test: ci=?) (module-autoload 'jazz.language.scheme 'Scheme-Text-View))
          ((member? ext CommonLisp-Extensions test: ci=?) (module-autoload 'jazz.language.commonlisp 'CommonLisp-Text-View))
          ((member? ext Jazz-Extensions test: ci=?) Jazz-Text-View)
          (else (nextmethod ext))))


  ;;;
  ;;;; Files
  ;;;
  
  
  @convert/wait
  (method (edit-file file)
    (let ((ext (get-extension~ file)))
      (cond ((ci=? ext "stack") (edit-stack file))
            ((ci=? ext "crash") (edit-snapshot file))
            ((ci=? ext "class") (browse-java-classfile file))
            ((ci=? ext "jar") (browse-java-jarfile file))
            (else (nextmethod file)))))
  
  
  (method (edit-category name)
    (let ((location (new Jazz-Code-Location (list name 1))))
      (edit~ location)))
  
  
  ;;;
  ;;;; Text
  ;;;
  
  
  (method (get-text-class)
    Jazz-Text-View)
  
  
  ;;;
  ;;;; Stack
  ;;;
  
  
  @convert/wait
  (method (edit-stack file)
    (open-snapshot~ (get-processes-view) file)
    (select-workspace 'debugger))
  
  
  ;;;
  ;;;; Snapshot
  ;;;
  
  
  @convert/wait
  (method (edit-snapshot file)
    (open-snapshot~ (get-processes-view) file)
    (select-workspace 'debugger))
  
  
  ;;;
  ;;;; Java
  ;;;
  
  
  @convert/wait
  (method (browse-java-classfile file)
    (let* ((host (new-frame Java-Manager))
           (manager (get-guest~ host)))
      (browse-classfile~ manager file)))
  
  
  @convert/wait
  (method (browse-java-jarfile file)
    (let* ((host (new-frame Java-Manager))
           (manager (get-guest~ host)))
      (browse-jarfile~ manager file)))

  
  ;;;
  ;;;; Repository
  ;;;
  
  
  @convert/wait
  (method (get-repository-classes)
    (list
      VSS-Repository))
  
  
  ;;;
  ;;;; Persistence
  ;;;
  
  
  (method (persist-usernames?)
    #t)
  
  
  (method (persist-passwords?)
    #t)


  ;;;
  ;;;; Context
  ;;;
  
  
  (method (get-context-text)
    {})


  ;;;
  ;;;; Session
  ;;;
  
  
  ;; temporary...
  @convert-to-session
  (method (reload-opened-windows)
    )
    
  
  @convert-to-session
  (method (reload-component class properties)
    (case class
      ((search)    (apply (~ new-frame Jedi-Search) properties))
      ((jazz-text) (apply (~ new-frame Jazz-Text-View) properties))
      (else (nextmethod class properties))))

  
  ;;;
  ;;;; Eval
  ;;;
  
  
  (method (eval-expressions expressions)
    (let ((module (get-profile-module))
          (profile (get-profile)))
      (if (not profile)
          (nextmethod expressions)
        (let ((name (identifier-name (type-name (class-of profile)))))
          (map (function (form)
                 (parameterize ((jazz.requested-module-name module))
                   (eval
                     `(library ,module jazz
                        (import (jazz.development)
                                (jazz.io)
                                (jazz.io.protocol)
                                (jazz.jml)
                                (jazz.library)
                                (jazz.literals)
                                (jazz.media)
                                (jazz.network)
                                (jazz.platform)
                                (jazz.profile)
                                (jazz.repository.git)
                                (jazz.runtime)
                                (jazz.system)
                                (jazz.ui)
                                (jazz.ui.development)
                                (jazz.ui.dialog)
                                (jazz.ui.view)
                                (jazz.ui.window)
                                (jazz.utilities)
                                (jedi)
                                (test)
                                (time))
                        (class ,name extends Profile
                          (method (evaluate)
                            ,form))
                        (set-? (evaluate~ (get-profile~ (get-application)))))))
                 (->string ? :reader))
               expressions)))))

  
  ;;;
  ;;;; Run
  ;;;
  
  
  (method public (run-product product (configuration: configuration {}) (profile: profile {}) (command-action: command-action {}) (command-arguments: command-arguments {}) (show-console?: show-console? #f) (wait?: wait? #f))
    ;; should probably try and launch a built executable of the product if present
    (launch-product product
      configuration: configuration
      debug?: #f
      profile: profile
      command-action: command-action
      command-arguments: command-arguments
      show-console?: show-console?
      wait?: wait))

  
  ;;;
  ;;;; Debug
  ;;;


  (method public (debug-product product (configuration: configuration {}) (profile: profile {}) (command-action: command-action {}) (command-arguments: command-arguments {}) (show-console?: show-console? #f) (wait?: wait? #f))
    (launch-product product
      configuration: configuration
      debug?: #t
      profile: profile
      command-action: command-action
      command-arguments: command-arguments
      show-console?: show-console?
      wait?: wait))

  
  ;;;
  ;;;; Launch
  ;;;
  
  
  (method public (launch-product product (configuration: configuration {}) (debug?: debug? #f) (profile: profile {}) (command-action: command-action {}) (command-arguments: command-arguments {}) (show-console?: show-console? #f) (wait?: wait? #f))
    (when debug?
      (start-remoting-server)
      (start-jazz-debugger))
    ;; TODO: finish the experimental interpreted? to be able
    ;; to launch a product using a fully interpreted kernel
    (let* ((interpreted?       #f)
           (runtime-arg        (if interpreted? (list "-:dar,m250000,t8,f8,-8,h1000000") (list "-:m250000,h1000000")))
           (product-arg        (list "-run" (->string product)))
           (debug-arg          (if debug? (list "-debug" "#t") '()))
           (controllerhost-arg (if debug? (list "-controllerhost" (host->string (listening-host~ (get-remoting-server)))) '()))
           (controllerport-arg (if debug? (list "-controllerport" (port->string (listening-port~ (get-remoting-server)))) '()))
           (profile-arg        (if profile (list "-profile" (->string profile)) '()))
           (action-arg         (if command-action (list command-action) '()))
           (arguments-arg      (if command-arguments command-arguments '()))
           (arguments          (append runtime-arg action-arg product-arg debug-arg controllerhost-arg controllerport-arg profile-arg arguments-arg))
           (executable         (if interpreted? {File Jazz "bin" "GambitWindowsDebug" "gsc"} (find-runtime configuration))))
      (save-all)
      @debug
      (debug executable arguments)
      (open-process
        (list
          path: (if interpreted? (get-name~ executable) (parse~ executable))
          directory: (parse~ (get-parent~ executable))
          arguments: arguments
          ;; this is not yet quite what we want as an access to the terminal
          ;; will not dynamically show the console when using show-console: #f
          stdin-redirection: #f
          stdout-redirection: #f
          stderr-redirection: #f
          show-console: show-console?))))

  
  ;;;
  ;;;; Runtime
  ;;;
  
  
  (method (find-runtime configuration)
    (new-file~ (find-install-directory configuration) (list "jazz")))
  
  
  (method public (launch-runtime (configuration: configuration {}) (arguments: arguments {}) (show-console?: show-console? #f) (wait?: wait? #f))
    (let* ((runtime-arg   (list "-:m250000,h1000000"))
           (arguments-arg (if arguments arguments '()))
           (arguments     (append runtime-arg arguments-arg))
           (executable    (find-runtime configuration)))
      @debug
      (debug executable arguments)
      (open-process
        (list
          path: (parse~ executable)
          arguments: arguments
          directory: (parse~ (get-parent~ executable))
          stdin-redirection: #f
          stdout-redirection: #f
          stderr-redirection: #f
          show-console: show-console?))))

  
  ;;;
  ;;;; Install
  ;;;
  
  
  (definition (system-name system)
    (case system
      ((gambit) "Gambit")))
  
  
  (definition (platform-name platform)
    (case platform
      ((mac) "Mac")
      ((windows) "Windows")
      ((unix) "Unix")))
  
  
  (definition (windowing-name windowing)
    (if (not windowing)
        ""
      (case windowing
        ((carbon) "Carbon")
        ((x11) "X11"))))
  
  
  (definition (safety-name safety)
    (case safety
      ((core) "Core")
      ((debug) "Debug")
      ((release) "Release")))
  
  
  (definition (source-option-name options)
    (if (memq 'source options)
        "Source"
      ""))
  
  
  (definition (find-install-directory configuration)
    (let ((configuration (either configuration (require-active-configuration))))
      (either (get-install~ configuration)
              (new Directory
                (list 'Jazz "bin"
                  (string-append
                    (system-name (get-system~ configuration))
                    (platform-name (get-platform~ configuration))
                    (windowing-name (get-windowing~ configuration))
                    (safety-name (get-safety~ configuration))
                    (source-option-name (get-options~ configuration))))))))


  ;;;
  ;;;; Debugger
  ;;;
  
  
  (method (log-exception exception)
    (let ((output (get-output-log)))
      @w
      (clear-results~ output)
      (if (is? exception Error)
          (log-info~ exception output)
        (log-line~ output (get-message~ exception) image: {Bitmap-Resource "Exception"}))))
  
  
  (method (select-output-log)
    (let ((output (get-output-log)))
      (select-results~ output)
      (select-first~ output)
      (select-palette Output-Log)))

  
  ;;;
  ;;;; Documentation
  ;;;
  
  
  @convert/wait
  (method (get-documentation-cataloguer)
    (unless documentation-cataloguer
      (when (get-documented?~ (get-preferences {}))
        (set! documentation-cataloguer (new-documentation-cataloguer))))
    documentation-cataloguer)
  
  
  @convert/wait
  (method (new-documentation-cataloguer)
    (let ((cataloguer (new Cataloguer))
          (workbench (get-workbench)))
      (for-each-project~ workbench
        (function (descendant)
          (let ((file (get-documentation~ descendant)))
            (when file
              (let* ((doc (instantiate~ (read-from-file file)))
                     (name (get-name~ doc))
                     (catalog (new Doc-Catalog name doc descendant)))
                (add-catalog~ cataloguer catalog))))))
      cataloguer))
  
  
  @convert/wait
  (method public (reload-documentation)
    (set! documentation-cataloguer {})
    (get-documentation-cataloguer))

  
  ;;;
  ;;;; Actions
  ;;;
  
  
  (method (class-actions)
    (cons (find-actions 'jedi)
          (nextmethod))
    @wait
    (cons (find-actions 'debugger)
          (cons (find-actions 'jedi)
                (nextmethod))))
  
  
  ;;;
  ;;;; Products
  ;;;
  
  
  ;; quicky for now
  (method public (update-product-titles)
    (when menubar
      (let* ((product (get-active-product))
             (title (if (not product) "Edit" (format "Edit {a}" (get-presentation~ product)))))
        (set-title~ (locate~ (get-content~ (child~ menubar 'product)) 'edit) title))))
  
  
  (method public (update-product-actions)
    (let ((product (get-active-product))
          @wait
          (project-file (let ((guest (current-document)))
                          (when (and guest (is? guest Document))
                            (let ((moniker (get-moniker~ (get-controller~ guest))))
                              (when moniker
                                (let ((workbench (get-workbench)))
                                  (find-source~ workbench moniker)))))))
          ;; quicky as this should probably be a test on the above project-file
          ;; so files from different languages can be build in their own ways
          (module-name (let ((guest (current-document)))
                         (when (and guest (is? guest Document))
                           (let ((moniker (get-moniker~ (get-controller~ guest))))
                             (when moniker
                               (find-module-name (parse~ moniker))))))))
      (set-action-enabled? {Action jedi edit-product} product)
      (set-action-enabled? {Action jedi compile-file} (and @wait product module-name @wait project-file))
      (set-action-enabled? {Action jedi build-product} product)
      (set-action-enabled? {Action jedi view-product-log} product)
      (set-action-enabled? {Action jedi test-product} product)
      (set-action-enabled? {Action jedi run-product} product)
      (set-action-enabled? {Action jedi debug-product} product)))


  ;;;
  ;;;; Windows
  ;;;
  
  
  (method (update-windowing-actions)
    (update-history-actions)
    (update-search-actions)
    (update-product-actions)
    (update-window-actions)
    (update-menubar-buttons))
  
  
  ;;;
  ;;;; Results
  ;;;
  
  
  (method (navigable-results)
    (list
      (get-guest~ (singleton-docked Search-Results {}))
      (get-guest~ (singleton-docked Output-Log {}))
      (get-guest~ (singleton-docked Violations-Manager {}))))


  ;;;
  ;;;; Events
  ;;;
  
  
  (method (on-event-spy evt)
    @convert/wait
    (new-palette Event-Spy))
  
  
  (method (on-registry-viewer evt)
    @convert/wait
    (new-frame Registry-Viewer))
  
  
  (method (on-type-viewer evt)
    @convert/wait
    (new-frame Type-Viewer))
  
  
  (method (on-java-manager evt)
    @convert/wait
    (new-frame Java-Manager))
  
  
  (method (on-showcase evt)
    @convert/wait
    (new-frame Showcase))
  
  
  (method (on-profiler-manager evt)
    @convert/wait
    (show-palette Profiler-Manager))
  
  
  (method (on-documentation-editor evt)
    @convert/wait
    (let* ((cataloguer (get-documentation-cataloguer))
           (catalog (car (get-catalogs~ cataloguer))))
      (new-frame Doc-Editor client: (get-client~ catalog))))
  
  
  (method (on-run-smoker evt)
    @convert/wait
    (build/run~ (new Smoker-Builder)))
  
  
  (method (on-toolbox evt)
    @convert/wait
    (select-palette Toolbox-Manager workspace: 'designer focus?: #t))
  
  
  (method (on-descendants evt)
    @convert/wait
    (select-palette Descendants-Editor workspace: 'designer focus?: #t))
  
  
  (method (on-branches evt)
    @convert/wait
    (select-palette Branches-Editor workspace: 'designer focus?: #t))


  (method public (on-spy-events evt)
    @convert/wait
    (show-palette Event-Spy))


  (method (record-event? event)
    #t)


  ;;;
  ;;;; Help
  ;;;
  
  
  (method public (on-readme evt)
    (edit-document {File Jazz "README"}))))
