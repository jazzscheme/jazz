;;;
;;;===============
;;;  Jazz System
;;;===============
;;;
;;;  Copyright 1996-2005 MetaScoop Inc.
;;;  All rights reserved.
;;;
;;;; The Picolo Application
;;;
;;;  Filename: Picolo-Application.jazz
;;;  Authors: Guillaume Cartier
;;;


(library picolo.application.Picolo-Application jazz


(import (jazz.catalog)
        (jazz.debuggee)
        (jazz.io)
        (jazz.language.commonlisp)
        (jazz.language.jazz)
        (jazz.language.scheme)
        (jazz.library)
        (jazz.system.application)
        (jazz.ui)
        (jazz.ui.view)
        (jazz.utilities)
        (picolo))


(class Picolo-Application extends Application
  
  
  (slot cataloguer initialize (new Cataloguer))

  
  (method (process-name)
    "Picolo")


  (method (process-version)
    {Version 1 0 1})


  (method (new-toplevel)
    (new Picolo-Toplevel))
  
  
  ;;;
  ;;;; Frames
  ;;;


  (method (base-frame-class)
    Text-View)


  (method (default-frame-class)
    Jazz-Text-View)


  (method (known-extension-frame-class ext)
    (cond ((not ext) Plain-Text-View)
          ((member? ext '("txt") test: ci=?) Plain-Text-View)
          ((member? ext Scheme-Extensions test: ci=?) Scheme-Text-View)
          ((member? ext CommonLisp-Extensions test: ci=?) CommonLisp-Text-View)
          ((member? ext Jazz-Extensions test: ci=?) Jazz-Text-View)
          (else (nextmethod ext))))
  
  
  (method (unknown-extension-frame-class)
    Plain-Text-View)
  

  ;;;
  ;;;; Catalog
  ;;;


  (method (get-catalog-context)
    'jazz)
  
  
  ;;;
  ;;;; Preferences
  ;;;
  
  
  (method (default-preferences)
    (new Picolo-Preferences))
  
  
  (method (default-bindings)
    (new Picolo-Bindings))

  
  ;;;
  ;;;; Actions
  ;;;
  
  
  (method (class-actions)
    (cons (find-actions 'picolo)
          (nextmethod)))


  ;;;
  ;;;; Favorites
  ;;;

  
  (method (on-open-favorite evt)
    (let* ((char (get-property~ evt char:))
           (favorite (find-favorite char)))
      (if (not favorite)
          (error "No favorite defined for {t}" char)
        (edit-document (get-file~ favorite)))))
  
  
  (method (find-favorite char)
    (let ((pref (get-preferences 'favorites error?: #f)))
      (when pref
        (let ((favorites (get-children~ pref)))
          (find-if (function (favorite)
                     (eqv? (get-shortcut~ favorite) char))
                   favorites)))))


  ;;;
  ;;;; User
  ;;;
  
  
  (method (use-user?)
    #t)
  
  
  ;;;
  ;;;; Text
  ;;;
  
  
  (method (get-text-class)
    Jazz-Text-View)


  ;;;
  ;;;; Definitions
  ;;;

  
  (method (edit-definition object (class: class {}) (context: context (get-catalog-context)) (workspace: workspace {}) (history-item: history-item {}))
    (let ((definitions (filter-entries (get-coalesced-definitions~ (get-cataloguer) object context: context) class)))
      (if (null? definitions)
          (bell)
        (add-history history-item)
        (case (length definitions)
          ((1) (edit~ (car definitions) workspace: workspace))
          (else (edit-definitions~ (get-guest~ (get-search-manager)) object definitions))))))

  
  (method (edit-references object (context: context (get-catalog-context)) (history-item: history-item {}))
    (let ((definitions (get-references~ (get-cataloguer) object context: context)))
      (if (null? definitions)
          (bell)
        (add-history history-item)
        (case (length definitions)
          ((1) (edit-reference~ (car definitions) object))
          (else (edit-references~ (get-guest~ (get-search-manager)) object definitions context))))))
  
  
  ;; todo: show only entries belonging to class
  (method (filter-entries entries class)
    entries)
  
  
  ;;;
  ;;;; Cataloguer
  ;;;


  (method (get-cataloguer)
    cataloguer)
  
  
  ;;;
  ;;;; Events
  ;;;

  
  (method (on-page-setup evt)
    (unimplemented))
  
  
  (method (on-print evt)
    (unimplemented))
  
  
  (method (on-readme evt)
    (edit-help-document {File Home "Readme.txt"}))

  
  (method public (on-chapters evt)
    (select-palette Chapters-Browser workspace: 'text focus?: #t))

  
  (method public (on-hierarchy evt)
    (select-palette Hierarchy-Browser workspace: 'text focus?: #t))


  (method public (on-test evt)
    (test~ (get-user)))


  (method public (on-test-shift evt)
    (test-shift~ (get-user)))
  

  (method public (on-debug-view evt)
    (debug-view~ (current-view-debugger)))))
