;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Alignment Editor
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jedi.designer.Alignment-Editor jazz


(import (jazz.designer)
        (jazz.jml)
        (jazz.library)
        (jazz.literals)
        (jazz.ui)
        (jazz.ui.view)
        (jazz.utilities)
        (jedi))


(class Alignment-Editor extends View


  (property client initialize {} getter get-client setter set-client)
  
  
  (slot flow-layout)


  (form
    (<install>
      (<Action-Icon> name: align-left          tooltip-text: "Align Left" image-name: {Bitmap-Resource "AlignLeft"} action-handler: {Event-Handler :form on-align-left})
      (<Action-Icon> name: align-right         tooltip-text: "Align Right" image-name: {Bitmap-Resource "AlignRight"} action-handler: {Event-Handler :form on-align-right})
      (<Action-Icon> name: align-top           tooltip-text: "Align Top" image-name: {Bitmap-Resource "AlignTop"} action-handler: {Event-Handler :form on-align-top})
      (<Action-Icon> name: align-bottom        tooltip-text: "Align Bottom" image-name: {Bitmap-Resource "AlignBottom"} action-handler: {Event-Handler :form on-align-bottom})
      (<Separator>)
      (<Action-Icon> name: center-horizontally tooltip-text: "Center Horizontally" image-name: {Bitmap-Resource "CenterHorizontally"} action-handler: {Event-Handler :form on-center-horizontally})
      (<Action-Icon> name: center-vertically   tooltip-text: "Center Vertically" image-name: {Bitmap-Resource "CenterVertically"} action-handler: {Event-Handler :form on-center-vertically})
      (<Separator>)
      (<Action-Icon> name: space-horizontally  tooltip-text: "Space Horizontally" image-name: {Bitmap-Resource "SpaceHorizontally"} action-handler: {Event-Handler :form on-space-horizontally})
      (<Action-Icon> name: space-vertically    tooltip-text: "Space Vertically" image-name: {Bitmap-Resource "SpaceVertically"} action-handler: {Event-Handler :form on-space-vertically})
      (<Separator>)
      (<Action-Icon> name: resize-width        tooltip-text: "Resize Width" image-name: {Bitmap-Resource "ResizeWidth"} action-handler: {Event-Handler :form on-resize-width})
      (<Action-Icon> name: resize-height       tooltip-text: "Resize Height" image-name: {Bitmap-Resource "ResizeHeight"} action-handler: {Event-Handler :form on-resize-height})
      (<Action-Icon> name: resize-both         tooltip-text: "Resize Both" image-name: {Bitmap-Resource "Resize"} action-handler: {Event-Handler :form on-resize-both})))
  
  
  (method meta (external-name . rest)
    'alignment-editor)

  
  ;;;
  ;;;; Palette
  ;;;
  

  (method meta (host-title)
    "Alignment")
  
  
  (method (client-activate)
    (let ((guest (current-document)))
      (when (is? guest View-Editor)
        (set-client (get-client~ guest)))))

  
  ;;;
  ;;;; Events
  ;;;


  (method (finish initargs)
    (nextmethod initargs)
    (set! flow-layout (new Flow-Layout insets: {Rect 4 5 0 0}))
    (layout-view))
  
  
  (method (layout)
    (layout~ flow-layout children (get-width) (get-height)))
  
  
  (method (on-align-left evt)
    (let ((editor (current-document)))
      (if (is-not? editor View-Editor)
          (bell)
        (align-left~ editor))))
  
  
  (method (on-align-top evt)
    (let ((editor (current-document)))
      (if (is-not? editor View-Editor)
          (bell)
        (align-top~ editor))))
  
  
  (method (on-align-right evt)
    (let ((editor (current-document)))
      (if (is-not? editor View-Editor)
          (bell)
        (align-right~ editor))))
  
  
  (method (on-align-bottom evt)
    (let ((editor (current-document)))
      (if (is-not? editor View-Editor)
          (bell)
        (align-bottom~ editor))))
  
  
  (method (on-center-horizontally evt)
    (let ((editor (current-document)))
      (if (is-not? editor View-Editor)
          (bell)
        (center-horizontally~ editor))))
  
  
  (method (on-center-vertically evt)
    (let ((editor (current-document)))
      (if (is-not? editor View-Editor)
          (bell)
        (center-vertically~ editor))))
  
  
  (method (on-space-horizontally evt)
    (let ((editor (current-document)))
      (if (is-not? editor View-Editor)
          (bell)
        (space-horizontally~ editor))))
  
  
  (method (on-space-vertically evt)
    (let ((editor (current-document)))
      (if (is-not? editor View-Editor)
          (bell)
        (space-vertically~ editor))))
  
  
  (method (on-resize-width evt)
    (let ((editor (current-document)))
      (if (is-not? editor View-Editor)
          (bell)
        (resize-width~ editor))))
  
  
  (method (on-resize-height evt)
    (let ((editor (current-document)))
      (if (is-not? editor View-Editor)
          (bell)
        (resize-height~ editor))))
  
  
  (method (on-resize-both evt)
    (let ((editor (current-document)))
      (if (is-not? editor View-Editor)
          (bell)
        (resize-both~ editor))))
  
  
  ;;;
  ;;;; Client
  ;;;


  (method public (get-client)
    client)


  (method public (set-client clt)
    (set! client clt))))
