;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Scheme JavaScript Backend
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module scheme.backend.javascript.emit jazz


(import (jazz.backend))


;;;
;;;; Define
;;;


(define-emit (define (javascript backend) declaration environment expression)
  (let ((locator (get-locator declaration)))
    (if (and (pair? expression)
             (eq? (car expression) '%fun))
        (bind (parameters . body) (cdr expression)
          `(%fun ,locator ,parameters
             ,@body))
      `(%var ,locator ,expression))))


;;;
;;;; Lambda
;;;


(define-emit (lambda (javascript backend) expression declaration environment signature-emit signature-casts cast-body)
  `(%fun ,signature-emit
     ,cast-body))


;;;
;;;; Binding
;;;


(define (emit-binding binding)
  (bind (name value) binding
    `(%var ,name ,value)))


;;;
;;;; Let
;;;


(define-emit (let (javascript backend) expression declaration environment bindings-output body-code)
  `(%begin
     ,@bindings-output
     ,@(jazz:sourcified-form body-code)))


;;;
;;;; Named Let
;;;


(define-emit (named-let (javascript backend) expression declaration environment variable-emit bindings-output body-code)
  (unimplemented 'named-let))


;;;
;;;; Letstar
;;;


(define-emit (letstar (javascript backend) expression declaration environment bindings-output body-code)
  `(%begin
     ,@(map emit-binding bindings-output)
     ,@(jazz:sourcified-form body-code)))


;;;
;;;; Letrec
;;;


(define-emit (letrec (javascript backend) expression declaration environment bindings-output body-code)
  `(%begin
     ,@(map emit-binding bindings-output)
     ,@(jazz:sourcified-form body-code)))


;;;
;;;; Receive
;;;


(define-emit (receive (javascript backend) expression declaration environment bindings-output expression-output body-code)
  (unimplemented 'receive))


;;;
;;;; And
;;;


(define-emit (and (javascript backend) expression declaration environment expressions)
  `(and ,@(jazz:codes-forms expressions)))


;;;
;;;; Or
;;;


(define-emit (or (javascript backend) expression declaration environment expressions)
  `(or ,@(jazz:codes-forms expressions)))


;;;
;;;; If
;;;


(define-emit (if (javascript backend) expression declaration environment test yes no)
  `(if ,(jazz:sourcified-form test)
       ,(jazz:sourcified-form yes)
     ,(jazz:sourcified-form no)))


;;;
;;;; Cond
;;;


(define-emit (cond (javascript backend) expression declaration environment)
  (unimplemented 'cond))


;;;
;;;; Case
;;;


(define-emit (case (javascript backend) expression declaration environment target-emit clauses clauses-emit)
  (unimplemented 'case))


;;;
;;;; Do
;;;


(define-emit (do (javascript backend) expression declaration environment bindings-output test-code result-code body-code)
  (unimplemented 'do))


;;;
;;;; Delay
;;;


(define-emit (delay (javascript backend) expression declaration environment expr)
  (unimplemented 'delay))


;;;
;;;; Quasiquote
;;;


(define-emit (quasiquote (javascript backend) expression declaration environment)
  (unimplemented 'quasiquote))


;;;
;;;; Parameterize
;;;


(define-emit (parameterize (javascript backend) expression declaration environment body-code)
  (unimplemented 'parameterize))


;;;
;;;; Unspecific
;;;


(define-emit (unspecific (javascript backend) expression declaration environment body-code)
  (unimplemented 'unspecific))


;;;
;;;; Time
;;;


(define-emit (time (javascript backend) expression declaration environment expressions)
  (unimplemented 'time)))
