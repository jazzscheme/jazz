;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; SRFI 1
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module srfi-1 scheme:


(import (scheme (except member map assoc))
        (scheme.syntax (phase syntax)))


(export xcons tree-copy make-list list-tabulate cons* list-copy 
        proper-list? circular-list? dotted-list? not-pair? null-list? list=
        circular-list length+
        iota
        first second third fourth fifth sixth seventh eighth ninth tenth
        car+cdr
        take       drop       
        take-right drop-right 
        take!      drop-right!
        split-at   split-at!
        last last-pair
        zip unzip1 unzip2 unzip3 unzip4 unzip5
        count
        append! append-reverse append-reverse! concatenate concatenate! 
        unfold       fold       pair-fold       reduce
        unfold-right fold-right pair-fold-right reduce-right
        append-map append-map! map! pair-for-each filter-map map-in-order
        filter  partition  remove
        filter! partition! remove! 
        find find-tail any every list-index
        take-while drop-while take-while!
        span break span! break!
        delete delete!
        alist-cons alist-copy
        delete-duplicates delete-duplicates!
        alist-delete alist-delete!
        reverse! 
        lset<= lset= lset-adjoin  
        lset-union  lset-intersection  lset-difference  lset-xor  lset-diff+intersection
        lset-union! lset-intersection! lset-difference! lset-xor! lset-diff+intersection!)


(native private jazz:error)
(native private jazz:unspecified)


(define (check-arg pred val caller)
  (let lp ((val val))
       (if (pred val)
           val
         (lp (error "Bad argument" val pred caller)))))


(include "implementation.scm"))
