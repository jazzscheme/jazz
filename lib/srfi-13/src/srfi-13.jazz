;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; SRFI 13
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module srfi-13 scheme


(export string-upcase
        string-downcase
        string-titlecase
        reverse-list->string
        substring/shared
        string-count
        string-index
        string-index-right
        string-concatenate-reverse)

(import jazz)


(define (string-upcase str)
  (upcase str))

(define (string-downcase str)
  (downcase str))

(define (string-titlecase str)
  (capitalize str))

(define (reverse-list->string lst)
  (list->string (reverse lst)))

(define (substring/shared str start . rest)
  (let ((end (if (null? rest) (string-length str) (car rest))))
    (substring str start end)))

(define (string-count str c)
  (count c str))

(define (string-index str c)
  (find str c))

(define (string-index-right str c)
  (find str c reversed?: #t))

(define (string-concatenate-reverse string-list)
  (apply string-append (reverse string-list))))
