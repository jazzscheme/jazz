;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; SRFI 13
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2012
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module srfi-13 scheme:


(import (scheme (except string->list string-fill! string-copy))
        (scheme.syntax (phase syntax))
        (srfi-13.syntax (phase syntax))
        (srfi-14))


(export string-map string-map!
        string-fold       string-unfold
        string-fold-right string-unfold-right 
        string-tabulate string-for-each string-for-each-index
        string-every string-any
        string-hash string-hash-ci
        string-compare string-compare-ci
        string=    string<    string>    string<=    string>=    string<>
        string-ci= string-ci< string-ci> string-ci<= string-ci>= string-ci<> 
        string-downcase  string-upcase  string-titlecase  
        string-downcase! string-upcase! string-titlecase! 
        string-take string-take-right
        string-drop string-drop-right
        string-pad string-pad-right
        string-trim string-trim-right string-trim-both
        string-filter string-delete
        string-index string-index-right 
        string-skip  string-skip-right
        string-count
        string-prefix-length string-prefix-length-ci
        string-suffix-length string-suffix-length-ci
        string-prefix? string-prefix-ci?
        string-suffix? string-suffix-ci?
        string-contains string-contains-ci
        string-copy! substring/shared
        string-reverse string-reverse! reverse-list->string
        string-concatenate string-concatenate/shared string-concatenate-reverse
        string-append/shared
        xsubstring string-xcopy!
        string-null?
        string-join
        string-tokenize
        string-replace)


(native private jazz:error)
(native private jazz:unspecified)
(native private bitwise-and)


(define (check-arg pred val caller)
  (let lp ((val val))
       (if (pred val)
           val
         (lp (error "Bad argument" val pred caller)))))


(include "implementation.scm"))
