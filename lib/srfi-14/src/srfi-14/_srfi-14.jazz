;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; SRFI 14
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module srfi-14 scheme


(import (scheme.syntax (phase syntax)))


(export char-set? char-set= char-set<=
        char-set-hash 
        char-set-cursor char-set-ref char-set-cursor-next end-of-char-set?
        char-set-fold char-set-unfold char-set-unfold!
        char-set-for-each char-set-map
        char-set-copy char-set
        
        list->char-set  string->char-set 
        list->char-set! string->char-set! 
        
        filterchar-set  ucs-range->char-set  ->char-set
        filterchar-set! ucs-range->char-set!
        
        char-set->list char-set->string
        
        char-set-size char-set-count char-set-contains?
        char-set-every char-set-any
        
        char-set-adjoin  char-set-delete 
        char-set-adjoin! char-set-delete!
        
        
        char-set-complement  char-set-union  char-set-intersection  
        char-set-complement! char-set-union! char-set-intersection! 
        
        char-set-difference  char-set-xor  char-set-diff+intersection
        char-set-difference! char-set-xor! char-set-diff+intersection!
        
        char-set/lower-case		char-set/upper-case	char-set/title-case
        char-set/letter		char-set/digit		char-set/letter+digit
        char-set/graphic		char-set/printing	char-set/whitespace
        char-set/iso-control	char-set/punctuation	char-set/symbol
        char-set/hex-digit		char-set/blank		char-set/ascii
        char-set/empty		char-set/full)


(native private jazz:error)
(native private jazz:unspecified)
(native private bitwise-and)


(define (check-arg pred val caller)
  (let lp ((val val))
       (if (pred val)
           val
         (lp (error "Bad argument" val pred caller)))))


(include "implementation.scm"))
