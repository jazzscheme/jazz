;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Time
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2008
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library time jazz


(export time->seconds
        seconds->time
        (time.exports))
(import (time.exports))


(definition public (time->seconds time)
  (+ (time-second time) (/ (time-nanosecond time) 1000000000.0)))


(definition public (seconds->time seconds)
  (let ((int-seconds (inexact->exact (floor seconds))))
    (make-time time-utc (inexact->exact (floor (* 1000000 (- seconds int-seconds)))) int-seconds)))

  
;; convert
(definition public (date-universal->local date)
  date)


;; convert
(definition public (date-local->universal date)
  date)


(definition public (parse-date-day date)
  (string->date date "~Y/~m/~d"))


(definition public (parse-date-day-french date)
  (string->date date "~d/~m/~Y"))


(definition public (present-date date)
  (date->string date "~Y/~m/~d ~H:~M:~S"))


(definition public (present-date-day date)
  (date->string date "~Y/~m/~d"))


(definition public (present-date-day-french date)
  (date->string date "~d/~m/~Y"))


(definition public (present-date-time date)
  (date->string date "~H:~M")))
