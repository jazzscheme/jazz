;;; Scheme Raytracer v0.1
;;;
;;; Vec
;;;
;;; 10/04/2007
;;; James Long


(library raytrace.vec jazz


(proclaim (optimize))


;;;
;;;; Vec2d
;;;


(class vec2d extends Object
  
  (slot x <fl> getter generate)
  (slot y <fl> getter generate)
  
  (method (initialize x y)
    (nextmethod)
    (set! x~self x)
    (set! y~self y)))


(definition public inline (make-vec2d x y)
  (construct vec2d x y))

(specialize inline (new class <category<vec2d>> x <fl> y <fl>) <vec2d>
  (make-vec2d x y))


(definition public inline (vec2d-x v <vec2d>) <fl>
  (get-x~ v))

(definition public inline (vec2d-y v <vec2d>) <fl>
  (get-y~ v))


;;;
;;;; Vec3d
;;;


(class vec3d extends Object
  
  (slot x <fl> getter generate)
  (slot y <fl> getter generate)
  (slot z <fl> getter generate)
  
  (method (initialize x y z)
    (nextmethod)
    (set! x~self x)
    (set! y~self y)
    (set! z~self z)))


(definition public inline (make-vec3d x y z)
  (construct vec3d x y z))

(specialize inline (new class <category<vec3d>> x <fl> y <fl> z <fl>) <vec3d>
  (make-vec3d x y z))


(definition public inline (vec3d-x v <vec3d>) <fl>
  (get-x~ v))

(definition public inline (vec3d-y v <vec3d>) <fl>
  (get-y~ v))

(definition public inline (vec3d-z v <vec3d>) <fl>
  (get-z~ v))


;;;
;;;; Operations
;;;


(definition (vec3d-add v1 <vec3d> v2 <vec3d>) <vec3d>
  (make-vec3d (+ (vec3d-x v1) (vec3d-x v2))
              (+ (vec3d-y v1) (vec3d-y v2))
              (+ (vec3d-z v1) (vec3d-z v2))))

(definition (vec3d-sub v1 <vec3d> v2 <vec3d>) <vec3d>
  (make-vec3d (- (vec3d-x v1) (vec3d-x v2))
              (- (vec3d-y v1) (vec3d-y v2))
              (- (vec3d-z v1) (vec3d-z v2))))

(definition (vec3d-component-mul v1 <vec3d> v2 <vec3d>) <vec3d>
  (make-vec3d (* (vec3d-x v1) (vec3d-x v2))
              (* (vec3d-y v1) (vec3d-y v2))
              (* (vec3d-z v1) (vec3d-z v2))))

(definition (vec3d-scalar-mul v1 <vec3d> f <fl>) <vec3d>
  (make-vec3d (* (vec3d-x v1) f)
              (* (vec3d-y v1) f)
              (* (vec3d-z v1) f)))

(definition (vec3d-inverse v1 <vec3d>) <vec3d>
  (vec3d-scalar-mul v1 -1.0))

(definition (vec3d-length v1 <vec3d>) <fl>
  (sqrt (vec3d-dot v1 v1)))

(definition (vec3d-unit v1 <vec3d>) <vec3d>
  (let ((l (vec3d-length v1)))
    (make-vec3d (/ (vec3d-x v1) l)
                (/ (vec3d-y v1) l)
                (/ (vec3d-z v1) l))))

(definition (vec3d-dot v1 <vec3d> v2 <vec3d>) <fl>
  (+ (* (vec3d-x v1) (vec3d-x v2))
     (* (vec3d-y v1) (vec3d-y v2))
     (* (vec3d-z v1) (vec3d-z v2))))

(definition (vec3d-cross v1 <vec3d> v2 <vec3d>) <vec3d>
  (make-vec3d (- (* (vec3d-y v1) (vec3d-z v2))
                 (* (vec3d-z v1) (vec3d-y v2)))
              (- (* (vec3d-z v1) (vec3d-x v2))
                 (* (vec3d-x v1) (vec3d-z v2)))
              (- (* (vec3d-x v1) (vec3d-y v2))
                 (* (vec3d-y v1) (vec3d-x v2)))))

(definition (saturate n <fl>) <fl>
  (min 1.0 (max 0.0 n))))
