;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Inventory Table
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2007
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.access.inventory.Inventory-Table jazz


(import (jazz.access)
        (jazz.library)
        (jazz.utilities))


(class Inventory-Table extends Object
  
  
  (slot inventory)
  (slot parent)
  
  
  (method (initialize inventory parent)
    (nextmethod)
    (set! inventory~self inventory)
    (set! parent~self parent))
  
  
  ;;;
  ;;;; Access
  ;;;
  
  
  (method public (get-inventory)
    inventory)
  
  
  (method public (get-parent)
    parent)
  
  
  ;;;
  ;;;; Database
  ;;;
  
  
  (method public virtual (get-owner)
    )
  
  
  (method public virtual (set-owner value)
    )
  
  
  (method public virtual (get-name)
    )
  
  
  (method public virtual (get-title)
    )
  
  
  (method public virtual (get-linked?)
    #f)
  
  
  (method public virtual (get-connect)
    {})
  
  
  (method public virtual (set-connect value)
    )
  
  
  (method public virtual (get-source-table-name)
    {})
  
  
  (method public virtual (set-source-table-name value)
    )
  
  
  (method public virtual (get-validation-rule)
    {})
  
  
  (method public virtual (set-validation-rule value)
    )
  
  
  (method public virtual (get-validation-text)
    {})
  
  
  (method public virtual (set-validation-text value)
    )
  
  
  (method public virtual (get-description)
    {})
  
  
  (method public virtual (set-description value)
    )
  
  
  ;;;
  ;;;; Keys
  ;;;
  
  
  (method public virtual (get-primary-key)
    {})
  
  
  (method public virtual (create-primary-key name fields/orders)
    )
  
  
  (method public virtual (remove-primary-key name)
    )
  
  
  (method public virtual (append-primary-key primary-key)
    )
  
  
  ;;;
  ;;;; Columns
  ;;;
  
  
  (method public virtual (get-columns)
    '())
  
  
  (method public virtual (get-column name)
    {})
  
  
  (method public virtual (create-column name)
    )

  
  (method public virtual (append-column column)
    )

  
  (method public virtual (remove-column name)
    )
  
  
  ;;;
  ;;;; Indexes
  ;;;
  
  
  (method public virtual (get-indexes)
    '())
  
  
  (method public virtual (get-index name)
    {})
  
  
  (method public virtual (create-index name)
    )

  
  (method public virtual (append-index index)
    )

  
  (method public virtual (remove-index name)
    )
  
  
  ;;;
  ;;;; Triggers
  ;;;
  
  
  (method public virtual (create-or-modify-trigger name text)
    (with-closed ((trigger (get-trigger name error?: #f)))
      (when trigger
        (remove-trigger name))  
      (with-closed ((new-trigger (create-trigger name)))
        (set-text~ new-trigger text)
        (append-trigger new-trigger))))
  

  (method public virtual (get-triggers)
    '())
  
  
  (method public virtual (get-trigger name . rest)
    {})
  
  
  (method public virtual (create-trigger name)
    )
  
  
  (method public virtual (append-trigger trigger)
    )
  
  
  (method public virtual (remove-trigger name)
    ) 
  
  
  ;;;
  ;;;; Constraints
  ;;;
  
  
  (method public virtual (create-or-modify-constraint name text checked? exclude-replication?)
    (with-closed ((constraint (get-constraint name error?: #f)))
      (when constraint
        (remove-constraint name))  
      (with-closed ((new-constraint (create-constraint name)))
        (set-text~ new-constraint text)
        (set-exclude-replication?~ new-constraint exclude-replication?)
        (append-constraint new-constraint)
        (set-checked?~ new-constraint checked?))))
  
  
  (method public virtual (get-constraints)
    '())
  
  
  (method public virtual (get-constraint name . rest)
    {})
  
  
  (method public virtual (create-constraint name)
    )
  
  
  (method public virtual (append-constraint constraint)
    )
  
  
  (method public virtual (remove-constraint name)
    ) 
  
  
  ;;;
  ;;;; Properties
  ;;;
  
  
  (method public virtual (get-text-file-group)
    )
  
  
  (method public virtual (set-text-file-group value)
    )
  
  
  (method public virtual (get-file-group)
    )
  
  
  (method public virtual (set-file-group value)
    )))
