;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Domains
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2007
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.designer.domain.Domain jazz


(import (jazz.library)
        (jazz.utilities))


(class Domain extends Node)


@WAIT


(class Domain extends Node
  
  
  (attributes ()
    (nullable? initialize #f))
  
  
  ;;;
  ;;;; Validation
  ;;;
  
  
  (method public virtual (validate property value component root client context manager)
    (if (null? value)
        (when (not nullable?)
          (add-violation~ manager (new Integrity-Violation message: (format "Property '{a}' is mandatory" (localize (property-presentation~ (class-of component) property))) property: (field-name property)) component root client))
      (validate-value property value component root client context manager)))
  
  
  (method public virtual (validate-value property value component root client context manager)
    )
  
  
  ;;;
  ;;;; Presentation
  ;;;
  
  
  (method public virtual (present value)
    (unimplemented 'present))
  
  
  ;;;
  ;;;; Entry
  ;;;
  
  
  (method public virtual (setup-entry view client)
    )
  
  
  (method public virtual (setup-list-entry view client)
    )
  
  
  ;;;
  ;;;; Value
  ;;;
  
  
  (method public virtual (get-property-value view)
    (get-value~ (get-entry~ view)))
  
  
  (method public virtual (set-property-value view value)
    (set-value~ (get-entry~ view) value))
  
  
  (method public virtual (get-property-modified? view)
    (let ((entry (get-entry~ view)))
      ;; for dev. in case a bug stops the entry from being created
      (and entry (get-modified?~ entry))))
  
  
  (method public virtual (set-property-modified? view value)
    (set-modified?~ (get-entry~ view) value))))
