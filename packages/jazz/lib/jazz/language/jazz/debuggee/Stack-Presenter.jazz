;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Processes Inspector
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2007
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library Stack-Presenter jazz


@WAIT (
  
  
  (method protected (report-stack)
    (let* ((process (snapshot-stack))
           (border (new Stack-Border size: {Dimension 500 450}))
           (tree (locate~ border 'tree)))
      (for-each (function (thread)
                  (let ((row (add-row~ tree state: 'expanded children: (list (new Tree-Node title: (get-label~ thread)) (new Tree-Label title: "")))))
                    (for-each (function (frame)
                                (add-row~ tree father: row children: (list (new Tree-Node title: (->string (car frame))) (new Tree-Label title: ""))))
                              (get-call-stack~ thread))))
                (get-threads~ process))
      (message-box "Runtime Stack" title: "Stack" content: border)))
  
  
  ;;;
  ;;;; Stack-Border
  ;;;


  (class Stack-Border extends Border-View
    
    
    (form
      (<install>                                     border-type: solid border-color: {Color name: Outline-Border}
        (<Scroller-View>                             flat?: #t hscroll?: #t vscroll?: #t
          (<!>                         name: content layout-type: fill
            (<Tree-Header>                           flat?: #t
              (<!>                     name: content
                (<Tree-View>           name: tree    portfolio: :icons selection-mode: node
                  (<Tree-Node-Column>                title: "Name" width: 300 display-images?: #f)
                  (<Tree-Label-Column>               title: "Value" width: 200))))))))))
)