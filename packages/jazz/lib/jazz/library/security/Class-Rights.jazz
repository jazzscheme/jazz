;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Class Rights
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2007
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.library.security.Class-Rights jazz


(import (jazz.library)
        (jazz.utilities))


(class Class-Rights extends Rights
  
  
  (property model initialize {} accessors generate)


  ;;;
  ;;;; Print
  ;;;

  
  (method (print printer readably)
    (print-unreadable self printer
      (function (printer)
        (format printer "{a}" model))))
  
  
  ;;;
  ;;;; Access
  ;;;
  
  
  (method public (get-model-class)
    (autoload model))
  
  
  ;;;
  ;;;; Component
  ;;;
  
  
  (method public (find-component-rights reference component)
    (letrec ((proc
              (function (rights ancestry)
                (if (null? ancestry)
                    rights
                  (let ((child-rights (find-child-rights~ rights (car ancestry))))
                    (when child-rights
                      (proc child-rights (cdr ancestry))))))))
      (proc self (get-ancestry~ component reference))))
  
  
  ;;;
  ;;;; Children
  ;;;
  
  
  (method public (children-rights)
    (find-component 'children))
  
  
  (method public (child-rights)
    (let ((children (children-rights)))
      (when children
        (get-children~ children))))
  
  
  (method public (find-child-rights component)
    (find-if (function (child-right)
               (is? component (get-model-class~ child-right)))
             (child-rights)))
  
  
  ;;;
  ;;;; Properties
  ;;;
  
  
  (method public (properties-rights)
    (find-component 'properties))
  
  
  (method public (property-rights)
    (let ((properties (properties-rights)))
      (when properties
        (get-children~ properties))))
  
  
  (method public (filter-properties properties)
    (let ((property-rigths (property-rights)))
      (collect-if (function (property)
                    (some? (function (property-rights)
                             (and (eq? (get-name~ property-rights) (field-name property))
                                  (can-access?~ property-rights)))
                           property-rigths))
                  properties)))))
