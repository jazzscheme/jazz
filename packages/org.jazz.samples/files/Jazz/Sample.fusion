;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Sample Jazz Class
;;;


(in ?)


(class Sample extends Object
  
  
  ;;;
  ;;;; Declarations
  ;;;
  
  
  (interface I
    
    
    (method public virtual abstract (i)))

  
  (class C extends Object implements I
    
    
    (method (initialize)
      (nextmethod v)
      v)
    
    
    (method (i)
      v))
  
  
  (method meta (cls)
    v)
  
  
  (slot private s initialize v)
  
  
  (property protected p initialize v accessors generate)
  
  
  (form
    (<install>))
  
  
  (macro (m form)
    v)
  
  
  (syntax (y expr)
    v)
  
  
  (definition package final d
    (function ()
      v))
  
  
  (method public inline (f)
    v)
  
  
  (method chained (g)
    v)
    
    
  (method remote synchronized (h)
    v)
  
  
  (constant c
    (function ()
      v))


  (enumeration E
    (A #x01)
    (B #x02))
  
  
  (structure S
    (int x))
  
  
  (external Jazz bool (e) "JzE")
  
  
  (intrinsic Jazz bool (%i) "JzI" "i")
  
  
  ;;;
  ;;;; Syntaxes
  ;;;
  
  
  (method (literals)
    '(2
      2.3
      +2
      -3
      5L
      #b1101
      #x0A
      #f
      #t
      #\a
      #(a b c)
      (a b c)
      [a b]
      x
      :x
      x:
      "x"
      #"x"#
      {Point 2 3}))
  
  
  (method (comments)
    v ;; x
    @comment x v)
  
  
  (method (functional-syntax)
    v
    (v v))
  
  
  (method (object-syntax)
    self
    [x y z v]
    (x~ v v))
  
  
  (method (specifier-syntax x <int>)
    (let ((y <int> v))
      v))
  
  
  ;;;
  ;;;; Specials
  ;;;
  
  
  (method (binding-specials)
    (let ((x v))
      (let* ((x v))
        (with-closed ((x v))
          v)))
    (bind (x) v
      (bind-optionals ((x v)) v
        (bind-keywords ((x v)) v
          (receive (x) v
            v)))))
  
  
  (method (functional-specials)
    (function (x)
      v))
  
  
  (method (quotation-specials)
    'x
    (quote x))
  
  
  (method (logical-specials)
    (and v)
    (or v))
  
  
  (method (control-specials)
    (if v
        v
      v)
    (while v
      v))
  
  
  (method (assignment-specials)
    (set! v v))
  
  
  (method (other-specials)
    (optimize (:frame? false)
      (profile (:on? true name: other-specials)
      (synchronize v
        v)
      (cast v v))))
  
  
  ;;;
  ;;;; Macros
  ;;;
  
  
  (method (binding-macros)
    (letrec ((x v))
      (with ((x v))
        v)))
  
  
  (method (quotation-macros)
    `(x ,v ,@v)
    (quasiquote (x (unquote v) (unquote-splicing v))))
  
  
  (method (logical-macros)
    (essay v)
    (either v))
  
  
  (method (control-macros)
    (begin
      v)
    (prog1 v
      v)
    (when v
      v)
    (unless v
      v)
    (cond (v v)
          (else v))
    (case v
      ((x) v)
      (else v))
    (ecase v
      ((v) v)
      (else v))
    (typecase v
      ((v) v)
      (else v))
    (catch v
      v)
    (unwind-protect
        v
      v))
  
  
  (method (assertion-macros)
    (assert v)
    (assert-type v v)
    (error? v))
  
  
  (method (iteration-macros)
    (loop (for x from v to v by v)
          (collect v)
          (do v)))
  
  
  (method (assignment-macros)
    (increase! v v)
    (decrease! v v))
  
  
  ;;;
  ;;;; Runtime
  ;;;
  
  
  (method meta (runtime-errors)
    (let ((obj (new Object)))
      [x obj]
      (x~ obj))))
