;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Complex Numbers
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2007
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(in mandelbrot)


(class Complex extends Number
  
  
  (slot public r)
  (slot public i)
  
  
  @convert-literal
  (method meta (construct-literal context r i)
    (new self r i))
  
  
  (method (initialize r i)
    (nextmethod)
    (set! r~self r)
    (set! i~self i))
  
  
  (method (print printer readably)
    (format printer "~{{a} {a} {a}}"
            (identifier-name (type-name (class-of self)))
            r
            i))
  
  
  ;;;
  ;;;; Access
  ;;;
  
  
  (method public (get-real)
    r)
  
  
  (method public (get-imaginary)
    i)


  ;;;
  ;;;; Number
  ;;;


  (method (negate)
    (new Complex (- r) (- i)))
  
  
  (method (norm)
    (sqrt (+ (expt r 2) (expt i 2))))


  (method (add n)
    (cond ((is? n Complex) (new Complex (+ r (get-r~ n)) (+ i (get-i~ n))))
          ((integer? n) (new Complex (+ r n) i))
          (else (error "Cannot add {t} to {t}" n self))))


  (method (inverse)
    (error "Cannot inverse {t}" self))


  (method (multiply n)
    (if (is? n Complex)
        (new Complex (- (* r (get-r~ n)) (* i (get-i~ n))) (+ (* r (get-i~ n)) (* i (get-r~ n))))
      (error "Cannot multiply {t} to {t}" n self))))
