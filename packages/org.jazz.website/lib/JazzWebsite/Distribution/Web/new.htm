<html>

<head>
  <link href="css/master.css" rel="stylesheet" type="text/css"/>
  <title>JazzScheme What's New</title>
</head>

<body>
<div id="page">
  <h1 id="title">JazzScheme</h1>
  <div id="sectionnav">
    <a class="section" href="index.htm">Home</a>
    <a class="section" href="news.htm">News</a>
    <a class="section" href="features.htm">Features</a>
    <a class="section" href="screenshots.htm">Screenshots</a>
    <a class="section" href="documentation.htm">Documentation</a>
    <a class="section" href="development.htm">Development</a>
    <a class="subsection" href="new.htm">
      <b>What's New</b>
    </a>
    <a class="subsection" href="roadmap.htm">Roadmap</a>
    <a class="section" href="download.htm">Download</a>
  </div>
  <div id="content">
    <div>
      <a name="tutorial-code"></a>
      <h3>Jazz</h3>
      <p></p>
      <b>2007-05-28 - 1.0b6</b>
      <ul>
        <li>Major rework of everything related to key bindings</li>
        <ul>
          <li>User configurable key bindings</li>
          <li>Support for multiple configurations per user</li>
          <li>Basic Emacs configuration</li>
          <li>Bindings manager window</li>
          <li>Bindings file for storing user configurations</li>
          <li>Simplified all the action related code radically</li>
          <li>Tab navigation is now friendly with completion</li>
          <li>Backspace and modifiers now work correctly with the macro recorder</li>
        </ul>
        <li>Catalogs</li>
        <ul>
          <li>Full support for Scheme and Common Lisp</li>
          <li>Catalogs are now fully integrated to projects</li>
          <li>Catalogs now delegate to extensible file parsers</li>
          <li>New catalogs window for easy activation / deactivation</li>
          <li>Update catalog menu item in the workbench manager and in texts</li>
        </ul>
        <li>Replaced the tag-symbolic kludge by new <x!> and <x~> syntaxes</li>
        <li>Hosted concept renamed to guest</li>
        <li>Verify reload is now done on mouse-up thus fixing many annoying bugs</li>
        <li>Fixed a compiler bug with manifest properties</li>
        <li>Standardized all file names to respect Unix conventions</li>
        <li>Added explicit support for .fusion files</li>
        <li>Hashing has been extended for user defined classes</li>
        <li>The boot process was made much more robust and many bugs fixed in the crash handler</li>
        <li>Fixed some bugs in the HTTP server</li>
        <li>Playing a macro recording is now an atomic action</li>
        <li>Added a stage slot to the Version class that is an optional symbol</li>
      </ul>
      <p></p>
      <b>2007-05-03 - 1.0b5</b>
      <ul>
        <li><span>Added lots of support for Scheme code edition which is now almost on par with Jazz code.</span></li>
      </ul>
      <p></p>
      <b>2007-04-23 - 1.0b4</b>
      <ul>
        <li>
          <span>
Jazz has undergone major surgery and is now a lot closer to Scheme syntax and semantics.            <ul>
              <li>Reader syntax for booleans and empty list is now Scheme compliant.</li>
              <li>
                <span>
The special forms                   <code>let</code>
 and                   <code>let*</code>
 now have Scheme semantics.                </span>
              </li>
              <li>Case datum must now always be lists.</li>
              <li>Dynamic object calls now use a functional syntax: </li>
              <li>
                <code>(f~ obj a b c)</code>
              </li>
            </ul>
          </span>
        </li>
        <li><span>Edition of Scheme code is much more functional.</span></li>
      </ul>
      <p></p>
      <b>2007-01-15</b>
      <ul>
        <li><span>Fixed a subtle and extremely annoying bug where a Jazz application when launching would sometimes just beep and then stall without any GUI appearing. It was caused by the error occuring at a point in the boot process where the toplevel is created but not yet visible. Because the visual debugger is not available at that point, the C runtime displays the error in a message box. The bug was to pass the toplevel as the message box's parent without checking if it was visible...</span></li>
        <li><span>Fixed a GUI alignment bug in the tree when line or column separators where showing.</span></li>
        <li><span>Changed default behavior of L&F where widgets now fill their bounding rect.</span></li>
        <li><span>Added syntax coloring and basic text support for C# source code.</span></li>
        <li><span>The compare files view now sets its title to the name of the compared file. This is especialy usefull when iterating through files from a directories comparision.</span></li>
        <li><span>Fixed a bug in the Class Browser that was happening when browsing the whole class tree from the Object root.</span></li>
        <li><span>Fixed a bug that was stopping the outdated core dialog from showing. If any core file is outdated, this dialog will open when Jedi is launched to warn about having to recompile as core files are never loaded interpreted.</span></li>
        <li><span>Fixed another bug that was stopping the boot time from beeing displayed after Jedi launches.</span></li>
        <li><span>Fixed a bug in the stack dump that happened when an error occured inside a definition initialization.</span></li>
        <li><span>Fixed a compiler bug where the compiler sometimes would not recompile the Properties.prop file.</span></li>
        <li><span>Ported Jazz to Visual Studio 2005. Initial times where disapointingly slower, so I changed the optimization flag from /O1 optimize for space, to /O2 optimize for speed. With this change, the new Launcher.exe is 20% faster than the old one.</span></li>
        <li><span>Fixed a very nasty bug that the port to Visual Studio 2005 uncovered where the Type and Unit classes where loaded twice with in turn corrupted internal data structures.</span></li>
        <li><span>Cleanup of the Jazz Build folder. Removed the Vc folder which was not really used and renamed VcDirect to Vc. Now uses the more standard approach of having all compilation results go to a common folder with the same name as the compilation policy used. </span></li>
        <li><span>Added explicit create / use support for precompiled headers.</span></li>
        <li><span>Major rework of everything log related. It is still a work in progress, but the new logging facility will log in memory or to file. Will seamlessly support resources allocation logging to debug memory leaks. Will integrate with the profiler. And more.</span></li>
        <li><span>A very fundamental improvement was done where every object now possesses 2 flags, one saying if it was successfully initialized and the other one saying if it was successfully destroyed. The first flag is used by the kernel to guaranty never calling key methods like printing, destruction, ... on not fully initialized objects. This was a major source of difficult bugs if an error occured during an object initialization and left it in a basically corrupted state. The second flag is used by the garbage collector, to flag every object that should have been destroyed and was not in a special 'undestroyed' color. New gc functions can then be used to inspect those object and detect memory leak of external resources.</span></li>
        <li><span>The gc function now guaranties a full sweep cycle.</span></li>
        <li><span>Added support for Windows performance counters with the Performance-Query class.</span></li>
        <li><span>The "View Log" menu item of the "Project" menu now opens the log with wrap around.</span></li>
        <li>
          <span>
Compiled externals, e.g. all primitives like cons, map, error, ... now display their C entry point when printed. For example, cons will print as             <code>{@Compiled-External JzCons #x79720750}</code>
.          </span>
        </li>
        <li>
          <span>
The complex problem of project dependencies is at last solved in a satisfying way.             <ul>
              <li><span>Dependencies are now recursively considered. Each module should include a dependency for all its external references. </span></li>
              <li>
                <span>
Here is a list of supported and upcoming dependency kinds:                  <ul>
                    <li>reference - module is referenced and a codewalk will be used to only include referenced classes</li>
                    <li>include - module is referenced and all classes will be included wheter referenced or not</li>
                    <li>error - module is referenced but module inclusion is optional. If a reference is called, generate a runtime error describing the missing module</li>
                    <li>load (upcoming) - module is referenced but module inclusion is optional. If a reference is called, autoload the missing module transparently to the user</li>
                    <li>install (upcoming) - module is referenced but module inclusion is optional. If a reference is called, trigger the installer program to let the user install the missing module</li>
                  </ul>
                </span>
              </li>
              <li><span>Removed the very confusing "Export Manifest..." menu item of the "Project" menu as now Jazz automatically generates the manifest file when launching an application. The manifest generation logic has also been improved making then generation instantaneous.</span></li>
              <li>
                <span>
The new work on dependencies enabled an old patch of wrapping certain class loads with                   <code>(load 'class-name)</code>
 to be removed everywhere.                </span>
              </li>
            </ul>
          </span>
        </li>
        <li><span>Fixed a bug that made Jedi crash if walk errors where present in the user class.</span></li>
      </ul>
      <p></p>
      <b>2006-12-29</b>
      <ul>
        <li>Added the ability have multiple recordings available at the same time.</li>
        <li>Fixed a bug in the compiler when compiling externals returning void.</li>
        <li>Fixed many small bugs in the threading system.</li>
        <li>Many improvements to the socket and JRM implementations.</li>
        <li>Finally took the time to clean and unify all the logging related classes.</li>
        <li>
          <span>
Added very simple             <code>get-parameter</code>
 and             <code>set-parameter</code>
 methods to help in building thread safe code. Note that these two methods can be very simple and naive as Jazz doesn't support continuations.          </span>
        </li>
        <li>The compare files tool now displays the name of the compared files in its title.</li>
        <li>Fixed a memory leak in the String-Printer class.</li>
        <li>
          <span>
The             <code>wait-for</code>
 method can now wait on multiple objects.          </span>
        </li>
        <li>
          <span>
A process can now call the             <code>signal-readyness</code>
 method to signal its boot is completed. This can be combined with a new             <code>wait-ready</code>
 keyword of             <code>Shell.create-process</code>
 to wait on a process beeing ready.          </span>
        </li>
        <li>
          <span>
Added the code necessary to regenerate the local version of the jazzscheme.org website as code in the Jedi-User class. For the moment there is no fancy GUI to manage all this, the             <code>regenerate-jazzwebsite</code>
 method is simply called by the             <code>test0</code>
 method that can be invoked by Ctrl-0.          </span>
        </li>
        <li>Did a simple ping server to help debug some socket stuff that I added afterwards to the org.jazz.samples product.</li>
      </ul>
      <p></p>
      <b>2006-12-18</b>
      <ul>
        <li>Made the project dependencies into a permanent subcomponent of Project.</li>
        <li>Renamed the two JML building macros to jml>> and form>>.</li>
        <li>Added an editable? property to products and made org.jazz and org.jedi non-editable to stop a user from inadventently modifying them.</li>
        <li>Added drag & drop from the Windows explorer to the Workbench.</li>
        <li>Added a "Synchronize Contents" button to the Workbench that will select the entry corresponding to the current document if it is found.</li>
        <li>New "Add Document..." item in the Workbench context menu that will create a file based on a template and add it to the selected group or product.</li>
        <li>Small fixes in the view debugger highlighting.</li>
        <li>The XHTML-Renderer nows handles correctly the pre tag and inserts no whitespace.</li>
        <li>Backward and Forward in History toolbar and menu items are now enabled / disabled according to the current history.</li>
        <li>If text is selected when invoking the Class Browser, it will be entered as the class name.</li>
        <li>Many small improvements to the Login dialog.</li>
        <li>
          <span>
Added new             <code>tab-stop-enter</code>
 and             <code>tab-stop-exit</code>
 methods to the View class.          </span>
        </li>
        <li>Replaced the doubtful heuristic used when generating remotable code by an explicit remotable? property of product files settable from the Workbench.</li>
      </ul>
      <p></p>
      <b>2006-12-13</b>
      <ul>
        <li>First early release version of JazzScheme.</li>
      </ul>
    </div>
    <div id="footer">
      <p>Copyright &copy; 1996-2007 Guillaume Cartier</p>
    </div>
  </div>
</div>
</body>

</html>
