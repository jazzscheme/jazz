<html>

<head>
  <link href="css/master.css" rel="stylesheet" type="text/css"/>
  <title>JazzScheme Tutorials</title>
</head>

<body>
<div id="page">
  <h1 id="title">JazzScheme</h1>
  <div id="sectionnav">
    <a class="section" href="index.htm">Home</a>
    <a class="section" href="news.htm">News</a>
    <a class="section" href="features.htm">Features</a>
    <a class="section" href="screenshots.htm">Screenshots</a>
    <a class="section" href="documentation.htm">Documentation</a>
    <a class="subsection" href="starting.htm">Getting Started</a>
    <a class="subsection" href="tutorials.htm">
      <b>Tutorials</b>
    </a>
    <a class="subsection" href="manual.htm">User Manual</a>
    <a class="section" href="development.htm">Development</a>
    <a class="section" href="download.htm">Download</a>
  </div>
  <div id="content">
    <div>
      <a name="tutorial-code"></a>
      <h3>Executing code</h3>
      <p></p>
      <b>Installation</b>
      <ul>
        <li><span>After unzipping the JazzScheme distribution anywhere you want, open up the Bin directory and execute Launcher.exe to start Jedi, the JazzScheme IDE.</span></li>
      </ul>
      <p></p>
      <b>Login</b>
      <ul>
        <li>
          <div>
            <span>Next, you will see the Login dialog used to choose or create your Jedi user:</span>
            <p></p>
            <img src="screenshots/login.png"/>
            <p></p>
            <span>Note that the default setup you see here will create your new user in the standard Users directory located just under the distribution folder. </span>
            <p></p>
          </div>
        </li>
        <li><span>Next time you login, as your Users directory will not be empty anymore, you will be presented the list of users found in it. Just select your user from the list and click Login.</span></li>
      </ul>
      <p></p>
      <b>User</b>
      <ul>
        <li>
          <span>
Logging in with a new user             <code>Me</code>
 will create 4 files inside your             <code>Me</code>
 user folder:          </span>
        </li>
        <ul>
          <li><span>Connections.jml</span></li>
          <li><span>Preferences.jml</span></li>
          <li><span>Workbench.jml</span></li>
          <li><span>Me.jazz</span></li>
        </ul>
        <li><span>The first three files, are setting files automatically managed by Jazz. Still, it is a good idea to familiarize yourself with their content as they play an important role and are meant to be extremelly readable.</span></li>
        <li><span>The fourth file, is a Jazz class that represents you! It is a great place to put customization code or any code that you are experimenting with until it migrates to a full fledged independant class.</span></li>
      </ul>
      <p></p>
      <b>Console</b>
      <ul>
        <li>
          <span>
The Console is used to evaluate Jazz code. Use it to experiment freely.            <p></p>
            <img src="screenshots/console.png"/>
            <p></p>
          </span>
        </li>
        <li><span>Select the Console either by clicking inside it or by using the Control-Alt-Space shortcut. </span></li>
        <ul>
          <li><span>Be carefull, the Console is a full fledged text. The freedom of beeing inside a freely editable text can be surprising to new users. Expressions to be evaluated must be entered at the end. Note that Control-Alt-Space can be used anytime to force a fresh prompt at the end.</span></li>
          <li><span>Tab and Shift-Tab can be used to insert previous expressions. Note that the previous expression does not replace the current line but is inserted. This enables one to type some text, use Tab to insert a previous expression, continue typing, ...</span></li>
          <li><span>Another convenient way to access previous expressions, is to place the cursor on the line you want and press Enter. This will copy that line to a fresh line at the bottom.</span></li>
        </ul>
      </ul>
      <p></p>
      <b>Jazz and Scheme</b>
      <ul>
        <li><span>Note that Jazz is not a Scheme compliant Language. Scheme programmers can expect some surprises!</span></li>
        <ul>
          <li>
            <span>
Definitions use the               <code>definition</code>
 keyword instead of define. This naming integrates much better with the rest of the language.            </span>
          </li>
          <li>
            <span>
Functions in Jazz are named               <code>function</code>
 instead of lambda.            </span>
          </li>
          <li>
            <span>
Scheme's               <code>and</code>
 /               <code>or</code>
 are               <code>essay</code>
 /               <code>either</code>
 in Jazz. Jazz reserves               <code>and</code>
 /               <code>or</code>
 for logical only operations that can be compiled directly to C's               <code>&&</code>
 /               <code>||</code>
 operators.            </span>
          </li>
        </ul>
      </ul>
    </div>
    <div>
      <a name="tutorial-class"></a>
      <h3>Creating classes</h3>
      <p></p>
      <b>Workbench</b>
      <ul>
        <li><span>Jazz code must reside inside a unit. A unit can be anyone of:</span></li>
        <ul>
          <li>Class</li>
          <li>Interface</li>
          <li>Package</li>
        </ul>
        <li>
          <span>
To be accesible to Jazz, a unit must be installed in the Workbench. Use the Workbench Manager, the window at the top left to add new units to the workbench or import existing ones from the file system.            <p></p>
            <img src="screenshots/workbench_me.png"/>
            <p></p>
          </span>
        </li>
      </ul>
      <p></p>
      <b>Workspaces</b>
      <ul>
        <li>
          <span>
Now, open your Me.jazz user class by double-clicking it in the worbench. One thing you will notice if you look at the right end side of the toolbar, is that the current workspace is now the Text workspace.             <p></p>
            <img src="screenshots/workspaces_text.png"/>
            <p></p>
This happened automatically when you edited your Me.jazz class. Note that this workspace gives you access to text related tools like the Chapters and Hierarchy tools. Also note that common tools like the Console are accessible in any workspace.             <p></p>
Available workspaces are:            <ul>
              <li>Home</li>
              <li>Debugger</li>
              <li>Groupware</li>
              <li>SQL</li>
              <li>Text</li>
            </ul>
            <p></p>
Note that there are other workspaces in the distribution, but because of their experimental or incomplete nature, they are not installed by default. One that is close to completion and that might be of interest is a full featured GUI designer.          </span>
        </li>
      </ul>
      <p></p>
      <b>Code</b>
      <ul>
        <li>
          <span>
Enter the following method:            <p></p>
<pre>(<span class="keyword">method</span> (<span class="definition">random-element</span> seq)
  (element seq (random (length seq))))</pre>            <p></p>
            <span>
Evaluate it by placing the cursor anywhere inside it and hitting Enter. The               <code>random-element</code>
 method is now defined! You can easily experiment with it in the Console. Try evaluating               <code>(random-element '(a b c d e))</code>
 a couple times...            </span>
          </span>
        </li>
      </ul>
      <p></p>
      <b>Free References</b>
      <ul>
        <li>
          <span>
Enter the following method:<pre>(<span class="keyword">method</span> (<span class="definition">count</span> target seq . rest)
  (bind-keywords ((key identity) (test eqv?)) rest
    (let ((total 0))
      (for-each (function dynamic (object)
                  (when (target (keyed object))
                    (increase total)))
                seq)
      total)))</pre>            <p></p>
            <span>When you evaluate it, you will get:</span>
            <p></p>
            <img src="screenshots/walk_error.png"/>
            <p></p>
            <span>
The Jazz codewalker detected references to the free symbols               <code>keyed</code>
 and               <code>increase</code>
. Note that our typos where catched early without having to actually execute the code.             </span>
            <p></p>
            <span>
If you know where the free symbols are, you can click Ignore. Else, click the Highlight button that will highlight them for you:              <p></p>
<pre>(<span class="keyword">method</span> (<span class="definition">count</span> target seq . rest)
  (bind-keywords ((key identity) (test eqv?)) rest
    (let ((total 0))
      (for-each (function dynamic (object)
                  (when (target (<span class="highlighted">keyed</span> object))
                    (<span class="highlighted">increase</span> total)))
                seq)
      total)))</pre>              <p></p>
            </span>
          </span>
        </li>
      </ul>
      <p></p>
      <b>Debugging</b>
      <ul>
        <li>
          <span>
Correct the previous free references by changing             <code>keyed</code>
 to             <code>key</code>
 and             <code>increase</code>
 to             <code>increase!</code>
. You can now reevale the method by presse control-enter from anywhere inside the method.          </span>
        </li>
        <li>
          <span>
Lets try our new method by evaluating             <code>(count 'a '(a b a a d c))</code>
 in the Console. You will get:            <p></p>
            <img src="screenshots/count_error.png"/>
            <p></p>
            <span>
If you know what the problem is from just reading the error message, click Ignore. Else, click the Debug button that will bring up the debugger:              <p></p>
              <a href="screenshots/count_debugged.png"><img src="screenshots/count_debugged_small.png"/></a>
              <p></p>
            </span>
          </span>
        </li>
      </ul>
    </div>
    <div>
      <a name="tutorial-view"></a>
      <h3>A simple graphical view</h3>
      <p></p>
      <b>Install</b>
      <ul>
        <li><span>First, install the org.jazz.tutorials product in your Workbench. To do this, right-click your Workbench icon, select "Install Product..." and open inside your installation folder the Products/org.jazz.tutorials/org.jazz.tutorials.jazz file.</span></li>
      </ul>
      <p></p>
      <b>Run</b>
      <ul>
        <li>
          <span>
Execute the following code at the Console:            <p></p>
<pre>(new-frame~ Mandelbrot)</pre>            <p></p>
            <span>This is a very simple view I did to show my son how the Mandelbrot set was calculated. Now it can be used to learn how Jazz graphical views work!</span>
            <p></p>
          </span>
        </li>
        <li><span>More coming Soon</span></li>
      </ul>
    </div>
    <div>
      <a name="tutorial-application"></a>
      <h3>A basic application</h3>
      <ul>
        <li><span>Coming Soon</span></li>
      </ul>
    </div>
    <div id="footer">
      <p>Copyright &copy; 1996-2007 Guillaume Cartier</p>
    </div>
  </div>
</div>
</body>

</html>
