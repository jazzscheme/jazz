;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; A Test Class
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2007
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(in benchmark)


(class A extends Object
  
  
  (method (rpt form)
    (signal (new Tester-Error form)))


  ;;       X
  ;;      / \
  ;;     Y   W
  ;;    /
  ;;   Z


  (class X extends Object
  
    (definition public virtual foo 10)
    (definition goo 15)
    
    (slot public bar initialize 5)

    (method public (toto)
      bar)
    
    (method public (tutu x)
      (* x bar))
    
    (method public (tata)
      X2)
    
    (method public (yuyu)
      (let ((bar 11))
        (list bar bar~self)))
    
    (method public (yiyi)
      (let ((bar 11))
        (set! bar 12)
        (set! bar~self 7)
        (list bar bar~self))))


  (class Y extends X
    
    (definition public foo 20)

    (method public virtual (bah x)
      x))


  (class Z extends Y

    (method (bah x)
      (+ x x)))


  (class W extends X

    (slot public hoo initialize (new Cell 0 0)))


  (method (test-part1)
    (assert rpt (neq? (get-hoo~ (new W)) (get-hoo~ (new W))))
  
    (assert rpt W)
    (assert rpt Y)
    (assert rpt Z)
  
    @Interpreted
    (begin
      (assert rpt (error? (get-goo~ Z))))

    (assert rpt (= (get-foo~ (new X)) 10)))


  (definition public X1 (new X))
  (definition public X2 (new X))


  (method (call-bah obj x)
    (bah~ obj x))

  (method (call-bah2 obj x)
    (bah~ obj x))
  
  
  (method (test-part2)
    (assert rpt (= (get-foo~ X1) 10))
    (assert rpt (= (get-bar~ X1) 5))
    (assert rpt (= (get-bar~ X2) 5))
  
    (set-bar~ X1 6)
    (set-bar~ X2 7)
    (assert rpt (= (get-bar~ X1) 6))
    (assert rpt (= (get-bar~ X2) 7))
  
    (assert rpt (= (toto~ X1) 6))
    (assert rpt (= (tutu~ (tata~ X1) 4) 28))
  
    (assert rpt (equal? (yuyu~ X1) '(11 6)))
  
    (assert rpt (equal? (yiyi~ X1) '(12 7)))

    (assert rpt (= (call-bah (new Y) 5) 5))
    (assert rpt (= (call-bah (new Z) 5) 10))

    (assert rpt (= (call-bah2 (new Z) 5) 10))
    (assert rpt (= (call-bah2 (new Y) 5) 5))
    
    @Interpreted
    (begin
      (assert rpt (error? (call-bah (new X) 5)))
      (assert rpt (error? (call-bah2 (new X) 5)))))
  
  
  ;;;
  ;;;; Inner and Meta classes
  ;;;
  
  
  (slot meta mm initialize 5)
  
  
  (slot aa initialize 2)
  
  
  (method (f . rest)
    (list aa (apply + rest)))
  
  
  (method protected virtual (v)
    (list aa))
  
  
  (class I extends Object
    
    
    (method public (foo)
      aa)
    
    
    (method public (mak)
      (new J))
  
  
    (class J extends Object
    
    
      (method public (bar)
        (set! aa 9)
        (list aa (f 1 2 3) (apply f '(4 5 6)) (v)))))
  

  (method (test-part3)
    (set! mm 7)
    (assert rpt (= (list mm (foo~ (new I))) '(7 2)))
    (assert rpt (= (bar~ (mak~ (new I))) '(9 (9 6) (9 15) (9))))))
