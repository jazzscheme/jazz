;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; ADO Recordsets
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2007
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.access.providers.connection.ado.ADO-Recordset jazz


(import (jazz.access)
        (jazz.library)
        (jazz.utilities))


(class ADO-Recordset extends Recordset uses (Utilities System COM ADODB)
  
  
  (slot handle initialize {})
  
  
  (method (setup-recordset initargs)
    (nextmethod initargs)
    (set! handle (cocreate [Recordset ADODB])))
  
  
  (method (destroy-recordset)
    (when (and handle (/= (get-State~ handle) adStateClosed))
      (Close~ handle)
      (corelease handle)
      (set! handle {}))
    (nextmethod))
  
  
  ;;;
  ;;;; Access
  ;;;
  
  
  (method public (get-handle)
    handle)
  
  
  ;;;
  ;;;; Open
  ;;;
  
  
  (method (opened?)
    (not-null? handle))
  
  
  (method (open command . rest)
    (bind-keywords ((connection {}) (data-source {}) (max-load true) (cursor-type adOpenForwardOnly) (lock-type adLockReadOnly) (options adCmdText)) rest
      (let ((connection (cond (connection (get-handle~ connection))
                              (data-source (format "Data Source={a};" data-source))
                              (else {}))))
        (when (neq? max-load true)
          ;; the + 1 is because the get-rows algorithm uses next
          ;; to figure out if some rows where not retrieved...
          (put-MaxRecords~ handle (+ max-load 1)))
        (Open~ handle command connection cursor-type lock-type options))))
  
  
  ;;;
  ;;;; State
  ;;;
  
  
  (method (get-state)
    (let ((state (get-State~ handle)))
      (cond ((= state [adStateOpen ADODB]) 'open)
            ((= state [adStateClosed ADODB]) 'closed)
            (else 'unknown))))
  
  
  ;;;
  ;;;; Metadata
  ;;;
  
  
  (method (new-recordset-metadata)
    (new ADO-Recordset-Metadata (get-Fields~ handle)))
  
  
  (method (get-field-type metadata field)
    (get-Type~ field))
  
  
  (method (get-field-value metadata field)
    (get-Value~ field))
  
  
  (method (safe-field-value metadata field)
    (ecase (get-field-type metadata field)
      (([adLongVarBinary ADODB]) "<adLongVarBinary>")
      (([adVarBinary ADODB]) "<sql_variant>")
      (else (get-field-value metadata field))))
  
  
  ;;;
  ;;;; Recordsets
  ;;;
  
  
  (method (next-recordset!)
    (bind-values (records-affected new-handle) (NextRecordset~ handle)
      (destroy-recordset)
      (set! handle new-handle)))
  
  
  ;;;
  ;;;; Records
  ;;;
  
  
  (method (move-first)
    (MoveFirst~ handle))
  
  
  (method (move-last)
    (MoveLast~ handle))
  
  
  (method (move-next)
    (MoveNext~ handle))
  
  
  (method (move-previous)
    (MovePrevious~ handle))
  
  
  (method (at-bof?)
    (get-BOF~ handle))
  
  
  (method (at-eof?)
    (get-EOF~ handle))
  
  
  (method (iterate-records proc)
    (unless (at-eof?)
      @this-doesnt-work-with-multirecordsets-but-does-it-break-existing-code-to-comment-it?
      (move-first)
      (while (and (not (at-eof?)) (proc))
        (move-next))))))
