;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; dBase Inventory Index
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2007
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.access.providers.inventory.dbase.dBase-Inventory-Index jazz


(import (jazz.access))


(class dBase-Inventory-Index extends Inventory-Index
  
  
  (slot handle)
  (slot fields initialize '())
  
  
  (method (initialize inventory parent handle)
    (nextmethod inventory parent)
    (set! handle~self handle)
    (destroy-mandatory))
  
  
  (method (destroy)
    (corelease handle)
    (nextmethod))
  
  
  ;;;
  ;;;; Index
  ;;;


  (method public (get-handle)
    handle)
  
  
  (method (get-title)
    (get-Name~ handle))
  
  
  (method (get-fields)
    (either fields (get-effective-fields)))

  
  (method (get-effective-fields)
    (with-closed ((fields (get-Fields~ handle))
                  (index-fields (coquery fields DAO.IndexFields)))
      (map (function (n)
             (with-closed ((index-field (get-Item~ index-fields n)))
               (new Access-Inventory-Column inventory self #t (coquery index-field DAO._Field))))
            (naturals 0 (get-Count~ index-fields)))))


  (method public (set-fields/orders value)
    (for-each (function (field-values)
                (let ((field-name (car field-values))
                      (field-order (cadr field-values)))
                  (with-closed ((field (CreateField~ handle field-name {} {})))
                    (when (eq? field-order 'descending)
                      (put-Attributes~ field DAO.dbDescending))
                    (with-closed ((fields (get-Fields~ handle))
                                  (index-fields (coquery fields DAO.IndexFields)))
                      (Append~ index-fields field)))))
              value))
  
  
  (method (get-primary?)
    (get-Primary~ handle))
  
  
  (method public (set-primary? value)
    (put-Primary~ handle value))
  
  
  (method (get-unique?)
    (get-Unique~ handle))
  
  
  (method public (set-unique? value)  
    (put-Unique~ handle value))
  
  
  (method (get-required?)
    (get-Required~ handle))
  
  
  (method (get-ignore-nulls?)
    (get-IgnoreNulls~ handle))))
