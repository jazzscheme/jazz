;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; JDBC Data Sources
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2007
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.access.providers.inventory.jdbc.JDBC-Data-Source jazz


(import (jazz.access)
        (jazz.library)
        (jazz.schema)
        (jazz.utilities))


(class JDBC-Data-Source extends Data-Source


  (property url         initialize {} accessors generate)
  (property schemas     initialize "*" accessors generate)
  (property table-types initialize "*" accessors generate)
  
  
  @convert-external
  (method meta (external-name . rest)
    'jdbc)
  
  
  ;;;
  ;;;; Inventory
  ;;;
  
  
  (method (new-inventory connection . rest)
    (new JDBC-Inventory connection url schemas table-types username password))
  
  
  ;;;
  ;;;; Connection
  ;;;
  
  
  (method (new-connection)
    (new JDBC-Connection self))
  
  
  (method (get-connection-string)
    url)
  
  
  (method (get-connection-properties)
    (list :url         url
          :schemas     schemas
          :table-types table-types
          username:    username
          password:    password))
  
  
  ;;;
  ;;;; Present
  ;;;
  
  
  (method (present)
    (format "{a} (JDBC)" url))
  
  
  (method (present-detailed)
    (list
     (list "JDBC Database")
     (list :bulleted (format "URL: {a}" url))
     (list :bulleted (format "Schemas: {a}" schemas))
     (list :bulleted (format "Table Types: {a}" table-types))))


  ;;;
  ;;;; Designer
  ;;;
  
  
  @convert-descriptor
  (method meta (get-class-presentation)
    "JDBC Connection")

  
  @convert-descriptor
  (method meta (property-presentation property)
    (case (field-name property)
      ((url) "URL")
      ((schemas) "Schemas")
      ((table-types) "Table Types")
      (else (nextmethod property))))
  
  
  (method (get-row-instance property)
    (case (field-name property)
      ((url) (new String-Row nullable?: true))
      ((schemas) (new String-Row))
      ((table-types) (new String-Row))
      (else (nextmethod property))))
  
  
  (method (get-categorized-properties)
    '(class-info url schemas table-types (username password)))))
