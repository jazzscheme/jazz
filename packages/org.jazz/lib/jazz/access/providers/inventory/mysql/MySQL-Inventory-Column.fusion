;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; MySQL Inventory Column
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2007
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;    Marcel Cote
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.access.providers.inventory.mysql.MySQL-Inventory-Column jazz


(import (jazz.access)
        (jazz.library)
        (jazz.utilities))


(class MySQL-Inventory-Column extends Inventory-Column uses (Utilities System COM DAO)
  
  
  (slot column-name       initialize {})
  (slot ordinal-position  initialize {})
  (slot column-default    initialize {})
  (slot nullable?         initialize false)
  (slot datatype          initialize {})
  (slot collation-name    initialize {})
  (slot privileges        initialize '())
  (slot column-comment    initialize {})
  
  
  (method (initialize inventory parent index-column? column-name ordinal-position column-default nullable? data-type character-maximum-length numeric-precision numeric-scale collation-name privileges column-comment)
    (nextmethod inventory parent index-column?)
    (set! [column-name self] column-name)
    (set! [ordinal-position self] ordinal-position)
    (set! [column-default self] column-default)
    (set! [nullable? self] nullable?)
    (set! [datatype self] (new-datatype~ MySQL-Datatype data-type character-maximum-length numeric-precision numeric-scale))
    (set! [collation-name self] collation-name)
    (set! [privileges self] privileges)
    (set! [column-comment self] column-comment)
    (destroy-mandatory))
  
  
  (method (destroy)
    (nextmethod))
  
  
  (method (reload)
    @w
    (with-closed ((fields (get-Fields~ (get-handle~ parent))))
      (set! handle (get-Item~ fields (get-title)))))
  
  
  ;;;
  ;;;; Database
  ;;;
  
  
  (method public (get-handle)
    null
    @w
    handle)
  
  
  (method (get-default-value)
    (if (empty-string? column-default)
          null
        column-default))
  
  
  (method (set-default-value value)
    @w
    (put-DefaultValue~ handle (either value "")))
  
  
  (method (get-description)
    (if (empty-string? column-comment)
        null
      column-comment))
  
  
  (method (set-description value)
    @w
    (set-property "Description" value))
  
  
  (method (get-datatype)
    datatype)
  
  
  (method (get-size)
    null)


  (method (set-datatype value)
    @w
    (let ((name (get-name~ value))
          (size (get-size~ value)))
      (put-Type~ handle (name->value~ [DataTypeEnum DAO] (string->symbol (append "db" name))))
      (when size
        (put-Size~ handle size))))
  
  
  (method (set-size size)
    @w
    (when size
      (put-Size~ handle size)))

  
  (method (get-nullable?)
    nullable?)
  
  
  (method (set-nullable? value)
    @w
    (put-Required~ handle (not value)))
  
  
  (method (get-validation-rule)
    null
    @w
    (let ((value (get-ValidationRule~ handle)))
      (if (empty-string? value)
          null
        value)))


  (method (set-validation-rule value)
    @w
    (put-ValidationRule~ handle (either value "")))
  
  
  (method (get-validation-text)
    null
    @w
    (let ((value (get-ValidationText~ handle)))
      (if (empty-string? value)
          null
        value)))
  
  
  (method (set-validation-text value)
    @w
    (put-ValidationText~ handle (either value "")))
  
  
  (method (get-allow-zero-length?)
    null
    @w
    (get-AllowZeroLength~ handle))
  
  
  (method (set-allow-zero-length? value)
    @w
    (put-AllowZeroLength~ handle value))
  
    
  (method (get-display-format)
    null
    @w
    (get-property "Format"))
  
  
  (method (set-display-format value)
    @w
    (set-property "Format" value))
  
  
  (method (get-ordinal-position)
    ordinal-position
    @w
    (get-OrdinalPosition~ handle))
  
  
  (method (set-ordinal-position value)
    @w
    (put-OrdinalPosition~ handle value))


  (method (get-auto-increment?)
    null
    @w
    (mask-bit-set? (get-attributes) [dbAutoIncrField DAO]))

  
  (method (set-auto-increment? value)
    @w
    (set-attributes (mask-bit-set (get-attributes) [dbAutoIncrField DAO] value)))
  
  
  (method (get-title)
    column-name)
  
  
  (method (get-fixed?)
    null
    @w
    (mask-bit-set? (get-attributes) [dbFixedField DAO]))
  
  
  (method (get-indexes)
    null
    @w
    (get-Indexes~ handle))
  
  
  (method (get-order)
    null
    @w
    (if (mask-bit-set? (get-attributes) [dbDescending DAO])
        'descending
      'ascending))
  
  
  ;;;
  ;;;; Utilities
  ;;;
  
  
  (method (get-attributes)
    null
    @w
    (get-Attributes~ handle))
  
  
  (method (set-attributes value)
    @w
    (put-Attributes~ handle value))
  
  
  (constant Property-Inexistant
    #x800A0CC6)
  
  
  (constant Object-Already-Existant
    #x800A0D27)
  
  
  (constant Element-Not-Found
    #x800A0CC1)
  
  
  (method (get-property property-name)
    null
    @w
    (with-closed ((properties (get-Properties~ handle))
                  (property (cotry (get-Item~ properties property-name) (Property-Inexistant null))))
      (if (null? property)
          null
        (get-Value~ property))))

  
  (method (set-property property-name value)
    @w
    (with-closed ((properties (get-Properties~ handle)))
      (if value
          (with-closed ((property (CreateProperty~ handle property-name [dbText DAO] value null)))
            (cotry (Append~ properties property) (Object-Already-Existant (set-existant-property property-name value))))
        (cotry (Delete~ properties property-name) (Element-Not-Found)))))

  
  ;; it seems that because this method is only called by the one above
  ;; that the cotry for Property-Inexistant is completelly useless...
  (method (set-existant-property property-name value)
    @w
    (with-closed ((properties (get-Properties~ handle))
                  (property (cotry (get-Item~ properties property-name) (Property-Inexistant null))))
      (when property
        (put-Value~ property value))))))
