;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Applications platform dependant definitions (X11)
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2007
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.application.platform.x11 jazz


(import (jazz.platform.x11)
        (jazz.ui.window))


;; tofix : second argument is accelerator-handle
(definition (platform-process-messages placeholder)
  (let ((msg (XEvent-make)))
    ;; process messages from all windows
    (while (XNextEvent default-x11-display msg)
      (let* ((any-event (XEvent-xany-ref msg))
             (handle (XAnyEvent-window-ref any-event)))
        ;; tofix wparam and lparam should be removed
        (let ((window (get-window handle))
              (wparam 0)
              (lparam 0))
          (when (and (not window) (get-in-creation))
            (set! window (get-in-creation))
            (set-handle~ window handle)
            (set-window handle window)
            (set-in-creation {}))
          (if (not window)
              (error "No window")
            (call-dispatch-message~ window msg wparam lparam))))
     (when (= 0 (XPending default-x11-display))
       (iterate-table expose-store
                             (lambda (win region)
                               (when region
                                 (paint~ win region))))
       (table-clear expose-store #f)))))


(definition (platform-process-one-message window)
  (unimplemented 'platform-process-one-message)
  @unimp
  (with ((msg (MSG-make)))
    (let ((hwnd (get-handle~ window)))
      (when (GetMessage msg hwnd 0 0)
        (when (= (TranslateAccelerator hwnd accelerators-handle msg) 0)
          (TranslateMessage msg)
          (DispatchMessage msg)))))))
