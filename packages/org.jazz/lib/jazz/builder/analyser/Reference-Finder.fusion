;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Reference Finder
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2007
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.builder.analyser.Reference-Finder jazz


(import (jazz.builder)
        (jazz.jml)
        (jazz.platform)
        (jazz.ui)
        (jazz.literals)
        (jazz.library)
        (jazz.utilities))


(class Reference-Finder extends Layout-View uses (Utilities System WinIDL)


  (form
    (<install>                                                 size: {Dimension 953 564} layout-type: border layout-insets: {Rect 2 2 2 2}
      (<Label-View>                                            title: "Project:" position: {Point 4 10} size: {Dimension 40 16} font: {Font name: Default-GUI})
      (<Border-View>                   name: project-border    position: {Point 50 8} size: {Dimension 304 19} border-type: edge style: entry
        (<Scroller-View>                                       hscroll?: #f vscroll?: #f
          (<!>                         name: content           layout-type: fill
            (<IDE-Text-View>           name: project-name      font: {Font name: Default-GUI} accepts-returns?: #f left-padding: 2 top-padding: 2))))
      (<Label-View>                    name: count             title: "Count:" position: {Point 738 11} size: {Dimension 100 16} font: {Font name: Default-GUI})
      (<Push-Button>                   name: find              title: "Find" position: {Point 849 6} size: {Dimension 100 22} action-handler: {Event-Handler form: on-find})
      (<Border-View>                   name: references-border position: {Point 3 33} size: {Dimension 947 527} border-type: edge style: entry
        (<Scroller-View>                                       vscroll?: #t style: document flat?: #t
          (<!>                         name: content           layout-type: fill
            (<Tree-Header>                                     style: document flat?: #t
              (<!>                     name: content
                (<Tree-View>           name: references        filled-column: path selection-mode: row portfolio: :icons double-click-handler: {Event-Handler form: on-double-click}
                  (<Tree-Node-Column>  name: project           title: "Project" width: 150)
                  (<Tree-Label-Column> name: unit              title: "Unit" width: 175)
                  (<Tree-Label-Column> name: path              title: "Reference Path" width: 502)
                  (<Tree-Label-Column> name: size              title: "Object Size (K)" width: 100)))))))))
  
  
  ;;;
  ;;;; Frame
  ;;;
  
  
  @convert-guest
  (method meta (frame-title)
    "References")
  
  
  @convert-guest
  (method meta (frame-position)
    {Point 35 40})
  
  
  @convert-guest
  (method meta (frame-size)
    {Dimension 953 564})
  
  
  (method (frame-workspaces)
    '(home))
  
  
  ;;;
  ;;;; Initialization
  ;;;

  
  (method (initialize . rest)
    (bind-keywords ((project null) . others) rest
      (apply nextmethod others)
      (set-string-content~ (locate 'project-name) (->string project))))
  
  
  ;;;
  ;;;; Events
  ;;;


  (method (resize dh dv)
    (nextmethod dh dv)
    (move-figure~ (locate 'find) dh 0)
    (size-figure~ (locate 'references-border) dh dv))


  (method (on-find evt)
    (let* ((workbench (get-workbench))
           (project (find-project))
           (units (prepare-units~ project :debugged? true :include-path? true))
           (files (collect-files workbench units))
           (partitions (partition-files files))
           (categories (categorize-partitions project partitions))
           (tree (locate 'references)))
      (set-title~ (locate 'count) (format "Count: {s}" (length files)))
      (with-update-locked~ tree
        (function dynamic ()
          (remove-every-row~ tree)
          (for-each (function dynamic (category)
                      (for-each (function dynamic (partition)
                                  (bind (module . files) partition
                                    (let* ((count (length files))
                                           (title (format "{a} ({a} file{a})" (if (symbol? module) "Unresolved" (get-name~ module)) count (format-plural count)))
                                           (image (rank-image (module-rank project module)))
                                           (sorted (sort < files :key (function dynamic (file) (if (symbol? (car file)) (car file) (get-name~ (car file)))))))
                                      (for-each (function dynamic (info)
                                                  (bind (file . path) info
                                                    (let* ((project-node (new Tree-Node :title title :image image))
                                                           (unit (if (symbol? file) (->string file) (get-name~ file)))
                                                           (unit-label (new Tree-Node :title unit :image {Bitmap-Resource "Class"}))
                                                           (path-label (new Tree-Label :title (if (eq? path :unvisited) "" (format "{l}" path))))
                                                           (object-file (if (symbol? file) null (get-object-file~ (get-project~ file) unit false)))
                                                           (size (if (and object-file (exists?~ object-file)) (/ (get-size~ object-file) 1024) null))
                                                           (size-label (new Tree-Label :title (if (null? size) "" (format "{s :width 6 :justify :right :padding #\\0}" (ceil size))))))
                                                      (add-row~ tree :children (list project-node unit-label path-label size-label) :user-data file))))
                                                sorted))))
                                (sort < (cdr category) :key (function dynamic (info) (if (symbol? (car info)) "Unresolved" (get-name~ (car info)))))))
                    (sort < categories :key car))))))
  
  
  (method (collect-files workbench units)
    (map (function dynamic (info)
           (bind (unit-name . path) info
             (let ((file (get-entry~ workbench unit-name)))
               (cons (either file unit-name) path))))
         units))
  
  
  (method (partition-files files)
    (partition files :key (function dynamic (info)
                            (bind (file . path) info
                              (if (symbol? file)
                                  'unknown
                                (get-project~ file))))))
  
  
  (method (categorize-partitions project partitions)
    (partition partitions
               :key (function dynamic (partition) (module-rank project (car partition)))
               :test equal?))
  
  
  (method (module-rank project module)
    (if (eq? module project)
        0
      (if (symbol? module)
          4
        (let ((dependency (project-dependency~ project module)))
          (if (null? dependency)
              3
            (case (get-kind~ dependency)
              ((reference) 2)
              ((include) 1)))))))
  
  
  (method (rank-image rank)
    (element '({Bitmap-Resource "UpdateCatalog"} {Bitmap-Resource "Forward"} {Bitmap-Resource "Link"} {Bitmap-Resource "Cancel"} {Bitmap-Resource "Empty"}) rank))
  
  
  (method (find-project)
    (let ((name (read-string-element (get-string-content~ (locate 'project-name))))
          (workbench (get-workbench)))
      (find-project~ workbench name)))
  
  
  (method (on-double-click evt)
    (let ((sender (get-sender~ evt))
          (alt? (get-alt?~ evt)))
      (case (get-name~ sender)
        ((references)
          (edit-selection alt?)))))
  
  
  (method (edit-selection alt?)
    (let* ((tree (locate 'references))
           (selection (get-single-selection~ tree)))
      (when selection
        (let* ((row (get-row~ tree selection))
               (name (get-user-data~ row))
               (appl (get-application)))
          (if (not alt?)
              (edit-definition~ appl name)
            {}
            @wait
            (let ((reference (hash-ref references name)))
              (if (or (null? reference) (= reference :root))
                  (bell)
                (set-search-target~ appl name)
                (edit~ reference))))))))))
