;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Jazz Product Files
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2007
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.builder.file.Jazz-File jazz


(import (jazz.builder)
        (jazz.designer)
        (jazz.library)
        (jazz.utilities))


(class Jazz-File extends Product-File


  (property core?      initialize #f accessors generate)
  (property tester?    initialize #f accessors generate)
  (property remotable? initialize #f accessors generate)
  
  
  (method (print printer readably)
    (print-unreadable self printer
      (function (printer)
        (format printer "{a}"
                name))))


  ;;;
  ;;;; Manifest
  ;;;
  
  
  (method (manifest-properties)
    (let ((fact (new List-Factory)))
      (let ((add
             (function (property value default)
               (when (neq? value default)
                 (put~ fact property)
                 (put~ fact value)))))
        (add :source source {})
        (add :core? core? #f)
        (add :tester? tester? #f)
        (add :remotable? remotable? #f))
      (get-output~ fact)))
  
  
  ;;;
  ;;;; Project
  ;;;
  
  
  ;; Because for the moment, a project's product slot will point to it's container product
  ;; which is strange but makes some sense because it is his owner... Need to think this through.
  (method public (get-project)
    {}
    @obsolete
    (if (is? self Project)
        self
      product))
  
  
  ;;;
  ;;;; Build
  ;;;
  
  
  (method (build project reporter log output (force?: force? #f))
    (unimplemented)
    @unimp
    (let* ((category-name (get-name))
           (compiler (new Compiler category-name: category-name project: project manifest-properties: (manifest-properties))))
      (compile-toplevel~ compiler force?: force? reporter: reporter log: log output: output)))


  ;;;
  ;;;; Designer
  ;;;
  
  
  @convert-descriptor
  (method meta (get-class-presentation)
    "Jazz File")
  
  
  @convert-descriptor
  (method meta (property-presentation property)
    (case (field-name property)
      ((core?) "Core?")
      ((tester?) "Tester?")
      ((remotable?) "Remotable?")
      (else (nextmethod property))))
  
  
  (method (can-rename-component?)
    #f)

  
  (method (get-categorized-properties)
    '(source features build? core? tester? remotable?))

  
  (method (get-row-instance property)
    (case (field-name property)
      ((core? tester? remotable?) (new Boolean-Row))
      (else (nextmethod property))))))
