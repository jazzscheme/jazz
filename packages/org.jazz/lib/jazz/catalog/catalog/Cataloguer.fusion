;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Catalogs Organizer
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2007
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.catalog.catalog.Cataloguer jazz


(import (jazz.catalog)
        (jazz.library)
        (jazz.utilities))


(class Cataloguer extends Object


  (slot catalogs initialize '())


  ;;;
  ;;;; Catalogs
  ;;;


  (method public (get-catalogs)
    catalogs)


  (method public (get-catalog name (error?: error? true) (report?: report? true))
    (either (find-catalog name)
            (let ((pref (find-component~ (get-preferences 'catalogs) name)))
              (if (not pref)
                  (when error?
                    (error "Unknown catalog: {t}" name))
                (let ((catalog (create-catalog pref report?)))
                  (add-catalog catalog)
                  catalog)))))


  (method public (get-main-catalog)
    (get-catalog (get-main~ (get-preferences 'catalogs))))


  (method public (add-catalog catalog)
    (unless (memq? catalog catalogs)
      (set! catalogs (append! catalogs (list catalog)))))


  (method public (remove-catalog catalog)
    (when (memq? catalog catalogs)
      (set! catalogs (remove! catalog catalogs))))
  
  
  (method public (find-catalog name)
    (find-if (function dynamic (catalog)
               (= (get-name~ catalog) name))
             catalogs))


  (method (for-each-catalog context proc)
    (let ((context (if (pair? context) context (list context))))
      (for-each (function dynamic (catalog)
                  (when (and (get-active?~ catalog) (in-context?~ catalog context))
                    (proc catalog)))
                catalogs)))
  
  
  (method public synchronized (preload-catalogs)
    (for-each preload-catalog (get-children~ (get-preferences 'catalogs)))
    (user-message "All Catalogs Preloaded"))
  
  
  (method (preload-catalog config)
    (let ((name (get-name~ config)))
      (user-message "Preloading {a}..." name)
      (get-catalog name report?: false)))


  ;;;
  ;;;; Load
  ;;;
  
  
  (method (create-catalog pref report?)
    (let* ((type (get-type~ pref))
           (class (catalog-class type)))
      (new class
        (get-name~ pref)
        (get-output-file~ pref)
        (get-directories~ pref)
        (get-extensions~ pref)
        (get-recursive?~ pref)
        (get-active?~ pref)
        (get-references?~ pref)
        (get-content-size~ pref)
        (get-definitions-size~ pref)
        (get-references-size~ pref)
        report?: report?)))
  
  
  (method (catalog-class type)
    (let ((pair (assq type (get-catalog-types~ (get-preferences {})))))
      (if (not pair)
          (error "Unknown catalog type: {t}" type)
        (autoload (cdr pair)))))


  ;;;
  ;;;; Save
  ;;;
  
  
  (method public (save-catalogs)
    (for-each (function dynamic (catalog)
                (save~ catalog))
              catalogs))


  ;;;
  ;;;; Context
  ;;;


  (method public (get-context)
    (let ((context (get-catalog-context~ (get-application))))
      (if (symbol? context)
          (list context)
        context)))


  ;;;
  ;;;; Definitions
  ;;;


  (method (class-definition? object)
    (is? object Class-Entry))

  
  (method public (get-definitions name (context: context (get-context)))
    (let ((fact (new List-Factory)))
      (for-each-catalog context
                        (function dynamic (catalog)
                          (put-sequence~ fact (get-definitions~ catalog name))))
      (get-output~ fact)))


  (method public (get-definition name)
    (let ((definitions (get-definitions name)))
      (when (not-null? definitions)
        ;; a big simplification for now...
        (car definitions))))

  
  (method public (get-category-definitions name (context: context (get-context)))
    (let ((fact (new List-Factory)))
      (for-each-catalog context
                        (function dynamic (catalog)
                          (put-sequence~ fact (get-category-definitions~ catalog name))))
      (get-output~ fact)))

  
  (method public (get-coalesced-definitions name (context: context (get-context)))
    (let* ((definitions (get-definitions name context: context))
           (coalesced (collect-if (function dynamic (entry)
                                    (is-not? entry Constructor-Entry))
                                  definitions)))
      (if (and (= 1 (length coalesced))
               (is? (car coalesced) Category-Entry))
          coalesced
        definitions)))
  
  
  (method public (get-references name (context: context (get-context)))
    (let ((fact (new List-Factory)))
      (for-each-catalog context
                        (function dynamic (catalog)
                          (put-sequence~ fact (get-references~ catalog name))))
      (get-output~ fact)))
  
  
  (method public (get-file-entries file (context: context (get-context)))
    (let ((fact (new List-Factory)))
      (for-each-catalog context
                        (function dynamic (catalog)
                          (let ((entry (get-file-entry~ catalog file)))
                            (when entry
                              (put~ fact entry)))))
      (get-output~ fact)))


  ;;;
  ;;;; Completions
  ;;;


  (method public (get-completions name (context: context (get-context)))
    (let ((fact (new List-Factory)))
      (for-each-catalog context
                        (function dynamic (catalog)
                          (put-sequence~ fact (get-completions~ catalog name))))
      (get-output~ fact)))))
