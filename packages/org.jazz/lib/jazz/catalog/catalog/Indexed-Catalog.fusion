;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Indexed Catalogs
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2007
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.catalog.catalog.Indexed-Catalog jazz


(import (jazz.catalog)
        (jazz.io)
        (jazz.library)
        (jazz.utilities))


(class Indexed-Catalog extends Filing-Catalog
  

  (slot directories)
  (slot extensions)
  (slot recursive?)
  (slot references?)
  (slot content)
  (slot definitions-index)
  (slot references-index)


  (method (initialize name file directories extensions recursive? active? references? (report?: report? true))
    (nextmethod name file active?)
    (set! directories~self directories)
    (set! extensions~self extensions)
    (set! recursive?~self recursive?)
    (set! references?~self references?)
    (set! content~self (new-hashtable equal?))
    (set! definitions-index~self (new-hashtable equal?))
    (set! references-index~self (new-hashtable equal?)))


  ;;;
  ;;;; Access
  ;;;
  
  
  (method public (get-directories)
    directories)
  
  
  (method public virtual (get-extensions)
    extensions)
  
  
  (method public (get-recursive?)
    recursive?)
  
  
  (method public (get-references?)
    references?)
  
  
  (method public (get-content)
    content)
  
  
  (method public (get-definitions-index)
    definitions-index)
  
  
  (method public (get-references-index)
    references-index)
  
  
  (method public (get-file-definitions name)
    (hash-ref content name '()))
  
  
  (method (get-file-entry file)
    (find-if (function dynamic (definition)
               (pathname= (get-file~ definition) file))
             (get-file-definitions (get-base~ file))))
  
  
  (method public (get-statistics)
    (let ((f (count-file-entries content))
          (d (hashtable-length definitions-index))
          (r (hashtable-length references-index)))
      (format "{a} file{a}, {a} definition{a}, {a} reference{a}"
              f (format-plural f)
              d (format-plural d)
              r (format-plural r))))
  
  
  (method (count-file-entries content)
    (let ((count 0))
      (for-each-hash (function dynamic (name file-entries)
                       (increase! count (length file-entries)))
                     content)
      count))
  
  
  (method (hashtable-info hashtable)
    (format "{s} entries"
            (hashtable-length hashtable)))

  
  (method (get-entry-time definition)
    (get-time~ definition))
  
  
  (method (update-entry entry)
    (update-indexes~ entry definitions-index references-index))
  
  
  (method (add-entry name entry)
    (hash-add content name entry))


  ;;;
  ;;;; Activation
  ;;;
      
  
  (method (activate)
    (load-content report?: true))
      
  
  (method (deactivate)
    )


  ;;;
  ;;;; Load
  ;;;


  (method public (load-content (report?: report? false))
    (when (and (not loaded?) (get-active?) (exists?~ file))
      (when report?
        (user-message "Loading Catalog..."))
      (load-hashtable content file true)
      (update-catalog-indexes report?)
      (set! loaded? true)
      (when report?
        (user-message "Done"))))

  
  (method (update-catalog-indexes report?)
    (when report?
      (user-message "Updating Indexes..."))
    (for-each-hash (function dynamic (class-name definitions)
                     (for-each (function dynamic (file-definition)
                                 (set-catalog~ file-definition self)
                                 (update-indexes~ file-definition definitions-index references-index))
                               definitions))
                   content))


  ;;;
  ;;;; Save
  ;;;
  
  
  (method (save)
    (when modified?
      (user-message "Saving {a} Catalog..." name)
      (save-content)
      (set-modified? false)
      (user-message "Done")))


  (method (save-content)
    (let* ((all (gather-keys/values~ content))
           (sorted (sort < all key: car)))
      (with-closed ((printer (new File-Printer file)))
        (for-each (function dynamic (info)
                    (bind (name . definitions) info
                      (when definitions
                        (format printer "{s}{%}" name)
                        (format printer " (")
                        (let ((first? true))
                          (for-each (function dynamic (definition)
                                      (print-catalog~ definition first? printer)
                                      (set! first? false))
                                    definitions))
                        (format printer "){%}"))))
                  sorted))))


  ;;;
  ;;;; Update
  ;;;
  
  
  (method (update (report?: report? true))
    (set-active? true)
    (when report?
      (user-message "Updating Catalog..."))
    (let ((processed (scan)))
      (sweep)
      (reset-marks)
      (when report?
        (user-message "{a} Catalog Updated ({s} files processed)"
                      name
                      processed))))
  
  
  (method public (update-file file)
    (set-active? true)
    (let* ((entry (get-file-entry file))
           (marked? (and entry (get-marked?~ entry))))
      (catch (Parse-Error err
               (user-message "Error at line {s}" (get-row~ (get-start~ err)))
               (when entry
                 (set-marked?~ entry marked?))
               false)
        (when entry
          (set-marked?~ entry false))
        (process-file file)
        (sweep)
        true)))
  
  
  (method (reset-marks)
    (for-each-hash (function dynamic (class-name definitions)
                     (for-each (function dynamic (file-definition)
                                 (set-marked?~ file-definition false))
                               definitions))
                   content))
  

  ;;;
  ;;;; Scan
  ;;;
  
  
  (definition Zip-Extensions
    '("zip" "jar"))
  
  
  (method (scan-directories)
    (let* ((processed 0)
           (scandir
            (function dynamic (dir)
              (increase! processed (scan-directory dir recursive?: recursive?)))))
      (if (is? directories Directory-Group)
          (for-each scandir (get-list~ directories))
        (scandir directories))
      processed))
  
  
  (definition Parser-Associations
    '((CommonLisp-Parser "lisp")
      (Cpp-Parser "c" "cpp" "h")
      (CSS-Parser "css")
      (Jazz-Parser "fusion")
      (Java-Parser "java")
      (JavaScript-Parser "js")
      (Lua-Parser "lua")
      (Properties-Parser "properties")
      (Python-Parser "py")
      (Scheme-Parser "scm" "ss")))
  
  
  (method (get-parser-class extension)
    (let ((info
           (rassoc extension Parser-Associations
             test: (function dynamic (ext extensions)
                     (member? ext extensions test: ci=)))))
      (when info
        (autoload (car info)))))
  
  
  (method (get-parser extension)
    (let ((class (get-parser-class extension)))
      (when class
        (new class self references?: references?))))

  
  (method (scan-file? file)
    (let ((extension (get-extension~ file))
          (extensions (get-extensions)))
      (and (or (not extensions) (member? extension extensions test: ci=))
           (not-null? (get-parser-class extension)))))

  
  (method (scan-file file time)
    (user-message "Parsing {a}" file)
    (let ((extension (get-extension~ file)))
      (if (member? extension Zip-Extensions test: ci=)
          (scan-zip-file file time)
        (parse~ (get-parser extension) file time))))
  
  
  (method (scan-zip-file file time)
    @convert
    (let ((entries (new List-Factory)))
      (with-closed ((unzip (new Unzip-File file)))
        (iterate-files~ unzip
          (function dynamic (filename size)
            (let ((parser (get-parser (extract-extension filename))))
              (when parser
                (let* ((zipped (new Zipped file filename))
                       (entry (get-entry~ zipped)))
                  (user-message "Parsing {a}" entry)
                  (put~ entries (parse-zipped~ parser zipped))))))))
      (new Zip-File-Entry catalog file time (get-output~ entries))))


  ;;;
  ;;;; Sweep
  ;;;
  
  
  (method (sweep)
    (sweep-hashtable content marked? true)
    (sweep-hashtable definitions-index marked? false)
    (sweep-hashtable references-index marked? false))
  
  
  (method (marked? definition)
    (get-marked?~ (get-file-definition~ definition)))
  
  
  (method (sweep-hashtable hashtable marked? reset?)
    (for-each-hash (function dynamic (class-name definitions)
                     (when definitions
                       (let ((previous definitions)
                             (list (cdr definitions)))
                         (while (not-null? list)
                           (let ((definition (car list)))
                             (if (marked? definition)
                                 (begin
                                   (set! previous list)
                                   (set! list (cdr list)))
                               (when reset?
                                 (set-marked?~ definition false))
                               (set-cdr! previous (cddr previous))
                               (set! list (cdr previous))))))
                       (when (not (marked? (car definitions)))
                         (set-modified? true)
                         (hash-set! hashtable class-name (cdr definitions)))))
                   hashtable))


  ;;;
  ;;;; Definitions
  ;;;
  
  
  (method (get-definitions name)
    (hash-ref definitions-index (canonicalize-name name)))
  
  
  (method (get-references name)
    (hash-ref references-index (canonicalize-name name)))


  (method (get-completions name)
    (either (hashtable-complete definitions-index name)
            (hashtable-complete references-index name)))
  
  
  (method protected virtual (canonicalize-name name)
    (->string name))
  
  
  ;; The next two methods are a bit convoluted because
  ;; of the current implementation of java definitions...
  (method public (get-qualified-category qualified)
    (let ((name (last qualified))
          (qualifier (butlast qualified)))
      (find-if (function dynamic (definition)
                 (and (is? definition Category-Entry)
                      (let ((package (get-category-package definition)))
                        (and package
                             (= (get-qualified~ package) qualifier)))))
               (get-definitions name))))
  
  
  (method (get-category-package definition)
    (find-if (function dynamic (definition)
               (is? definition Package-Entry))
             (get-definitions~ (get-file-definition~ definition))))


  ;;;
  ;;;; Completions
  ;;;
  
  
  (method (hashtable-complete hashtable string)
    (let ((length (length string))
          (result {}))
      (for-each-hash (function dynamic (name value)
                       (when (compare-n name string length)
                         (set! result (cons name result))))
                     hashtable)
      result))))
