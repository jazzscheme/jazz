;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Jazz Type Annotator
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Dominique Boucher.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2007
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.compiler.Type-Annotator jazz


(import (jazz.compiler)
        (jazz.library)
        (jazz.utilities))


;;;
;;; TODO: 
;;; - Ne pourrait-on faire une sorte de sous-0CFA, i.e. la
;;; la premiere iteration de la 0CFA, question d'en retirer
;;; une information suffisante pour faire des optimisations 
;;; interessantes? Il faudrait voir ce que Xavier Leroy fait
;;; dans OCaml.
;;;
;;; - On devrait peut-etre faire une 0CFA complete (du moins,
;;; l'approximation a la 0CFA que je propose dans ma these.
;;;
;;; - On prefere peut-etre faire un soft-typing comme 
;;; Wright et Cartright. [Je vais essayer de retrouver les
;;; articles concernant cette technique.]


(class Type-Annotator extends Compiler-Pass uses (Interpreter Development Kernel)
  
  
  ;;;
  ;;;; Public interface
  ;;;
 
  
  (method (process-form form)
    (annotate-form form))

  
  (method public (annotate-form form)
    (bind (field value symbol install-info . rest) form
      (format :console "{%}- install-info = {s}" install-info)
      (typecase field
        ((Definition) (annotate-definition field value))
        (else {}))))

  
  ;;;
  ;;;; Private interface
  ;;;  
  
  
  (method private (annotate-definition field value)
    (cond
     ((definition-method? field)
      (let ((method-function (closure-function (definition-value field))))
        (format :console "{%}- method {s}({s}){%}" (field-name field) method-function)
        (annotate-method-body (function-body method-function))))
     (else
      (format :console "{%}other {s} = {s} (type={s}){%}" (field-name field) value (expr-typeref value)))))
    
  
  (method private (annotate-method-body body)
    '(for-each annotate-expression body))
  
;  (method private (annotate-expression expression)
;    (if (special? expression)
;        (annotate-special expression)
;      (typecase expression
;        (Dispatch           (annotate-dispatch           expression))
;        (Meta-Reference     (annotate-meta-reference     expression))
;        (Outer-Reference    (annotate-outer-reference    expression))
;        (Imported-Reference (annotate-imported-reference expression))
;        (Syntax-Expansion   (annotate-syntax-expansion   expression))
;        (Syntax-Relocation  (annotate-syntax-relocation  expression))
;        (Call               (annotate-call               expression))
;        (Body               (annotate-body               expression))
;        (else               (annotate-constant           expression)))))
  
  (method private (annotate-special expression)
    {})))
