;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Jazz->C++ Compiler
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Dominique Boucher.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2007
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.compiler.Type-Approximation jazz


(import (jazz.compiler)
        (jazz.library)
        (jazz.utilities))


;;;
;;;; Type approximation
;;;
;; A type approximation is the union of a number of
;; types.


(class Type-Approximation extends Object uses (Interpreter Utilities Development)
  

  (slot types initialize '())

  
  (method (initialize . rest)
    (nextmethod))
  
  
  (method (construct types)
    (set! [types self] types))
  
  
  (method public (add-type type)
    (unless (memq? type types)
      (set! types (cons type types))))
  
  
  (method public (get-types)
    types)
  
  
  (method public (constrain type)
    (let ((new-approximation (new Type-Approximation)))
      (if (empty? (get-types))
          (add-type~ new-approximation type)        
        (for-each
         (function dynamic (the-type)
           (when (subtype? type the-type)
             (add-type~ new-approximation the-type)))
         (get-types)))
      new-approximation))
  
  
  (method public (union other-type)
    (set! types (union types (get-types~ other-type))))


  ;;;
  ;;;; Utilities
  ;;;

  
  ;; for now, a type 'type1' is a subtype of another type 'type2'
  ;; if they are eq?. 
  ;; TODO: implement something more elaborate
  (method meta (subtype? type1 type2)
    (subtype? type1 type2))
  
  
  (method (my-test var1 var2 var3)
    (while (and (pair? var1) (pair? var2))
      (map (function (x) (set! var3 (car var2))) (car var1))
      (set! var1 (cdr var1))
      (set! var2 (cdr var2))))
  
  
  (method (my-test2 v1)
    (typecase v1
      ((Pair) (set! v1 (cdr v1)))
      (else {})))))
