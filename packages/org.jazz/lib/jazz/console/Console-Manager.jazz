;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Console Manager
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2007
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.console.Console-Manager jazz


(import (jazz.console)
        (jazz.jml)
        (jazz.ui)
        (jazz.literals)
        (jazz.library)
        (jazz.utilities))


(class Console-Manager extends Layout-View


  (form
    (<install>                                size: {Dimension 650 400} layout-type: border
      (<Layout-View>           name: tools
        (<Push-Combo>          name: build
          (<!>                 name: body     portfolio: :icons image-name: {Bitmap-Resource "PrintDetail"} tooltip?: #t tooltip-text: "Print Detail" action-handler: {Event-Handler form: on-print-detail-menu})
          (<!>                 name: pick     action-handler: {Event-Handler form: on-print-detail-menu}))
        (<Push-Tool>           name: clear    size: {Dimension 22 22} location: tail tooltip?: #t tooltip-text: "Clear Console" image-name: {Bitmap-Resource "Clear"} portfolio: :icons action-handler: {Event-Handler form: on-clear-console}))
      (<Scroller-View>         name: scroller location: center vscroll?: #t hscroll?: #t flat?: #t
        (<!>                   name: content
          (<Console-Text-View> name: text)))))
  
  
  (method (install-in-host host)
    (nextmethod host)
    (display-banner~ (get-text)))
    
  
  @convert-external
  (method meta (external-name . rest)
    'console-manager)

  
  ;;;
  ;;;; Palette
  ;;;
  
  
  @convert-guest
  (method meta (palette-class)
    Tool-Palette)
  
  
  @convert-guest
  (method meta (palette-icon)
    {Bitmap-Resource "Console"})
  
  
  @convert-guest
  (method meta (palette-title)
    "Console")

  
  ;;;
  ;;;; Docked
  ;;;
  
  
  (method (get-tools-view)
    (locate 'tools))
  
  
  ;;;
  ;;;; Access
  ;;;

  
  (method public (get-text)
    (locate 'text))
  
  
  ;;;
  ;;;; Events
  ;;;


  (method (on-print-detail-menu evt)
    (let* ((sender (get-sender~ evt))
           (combo (typecase sender ((Push-Icon) (get-combo~ sender)) ((Combo-Button) (get-combo~ sender))))
           (pos (new Point 0 (get-height~ (get-size~ sender))))
           (menu (new Print-Detail-Menu))
           (pref (get-preferences '(tools console)))
           (detail (get-print-detail~ pref)))
      (set-checked?~ (child~ menu detail) #t)
      (layout-menu~ menu)
      (track-popup-menu~ sender menu pos initiator: combo)))


  (method (on-print-detail evt)
    (let ((pref (get-preferences '(tools console)))
          (detail (get-property~ evt detail:)))
      (set-preference pref 'print-detail detail)
      (user-message "Print detail set to {a}" detail)))
  
  
  (method (on-clear-console evt)
    (let ((text (get-text)))
      (clear-console~ text)
      (acquire-focus~ text))))


;;;
;;;; Print-Detail-Menu
;;;


(class Print-Detail-Menu extends Context-Menu
  
  
  (form
    (<install>
      (<Check-Item> name: :human    title: "&Human" action-handler: {Event-Handler (form: :container) on-print-detail detail: :human})
      (<Check-Item> name: :text     title: "&Textual" action-handler: {Event-Handler (form: :container) on-print-detail detail: :text})
      (<Check-Item> name: :reader   title: "&Reader" action-handler: {Event-Handler (form: :container) on-print-detail detail: :reader})
      (<Check-Item> name: :describe title: "&Describe" action-handler: {Event-Handler (form: :container) on-print-detail detail: :describe})))))
