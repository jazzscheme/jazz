;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; DDE Servers
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2007
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.dde.dde.DDE-Server jazz


(import (jazz.dde))


(class DDE-Server extends Object)


@WAIT


(class DDE-Server extends Object


  (method meta public (callback type str1 str2 data)
    (ecase type
      ((XTYP_CONNECT) (process-connect str2 str1))
      ((XTYP_EXECUTE) (process-execute str1 data))
	  (else NULL)))
  
  
  (method meta (process-connect service topic)
    1)
  
  
  (method meta (process-execute topic data)
    (bind-values (command size) (DdeAccessData data)
      (let ((pos (find #\space command return: 'position)))
        (when pos
          (let ((cmd (subseq command 0 pos))
                (param (subseq command (+ pos 2) (- (length command) 1))))
            (cond ((= cmd "Open") (process-open param)))))
        (DdeUnaccessData data)
        DDE_FACK)))
  
  
  (method meta (process-open param)
    (let ((appl (get-application))
          (file (anchorize~ (new File (tokenise param)))))
      (edit-document~ appl file)))
  
  
  ;;;
  ;;;; Utilities
  ;;;
  
  
  (method meta (query-string str)
    (let ((buffer (make-string 64)))
      (DdeQueryString [DDE-Instance Application] str buffer 64 CP_WINUNICODE)
	  buffer))))
