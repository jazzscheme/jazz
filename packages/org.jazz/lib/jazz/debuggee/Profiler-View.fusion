;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Profiler View
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2007
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.debuggee.Profiler-View jazz


(import (jazz.debuggee)
        (jazz.jml)
        (jazz.platform)
        (jazz.ui)
        (jazz.library)
        (jazz.utilities))


(class Profiler-View extends Layout-View


  (form
    (<install>                                                 layout-type: fill
      (<Scroller-View>               name: scroller            style: document vscroll?: #t flat?: #t
        (<!>                         name: content             layout-type: fill
          (<Tree-Header>             name: header              style: document flat?: #t
            (<!>                     name: content
              (<Tree-View>           name: profiles            filled-column: name portfolio: :icons selection-mode: row double-click-handler: {Event-Handler form: on-double-click}
                (<Tree-Node-Column>  name: name                title: "Name" width: 279)
                (<Tree-Label-Column> name: count               title: "Count" width: 100)
                (<Tree-Label-Column> name: average             title: "Average" width: 100)
                (<Tree-Label-Column> name: total               title: "Total" width: 100)
                (<Tree-Label-Column> name: parent-percentage   title: "Parent %" width: 100)
                (<Tree-Label-Column> name: toplevel-percentage title: "Toplevel %" width: 100))))))))
  
  
  ;;;
  ;;;; Update
  ;;;
  
  
  (method public (update-profiles)
    (view-profiles (profiles->jml (get-profiles))))
  
  
  (method public (view-profiles profiles)
    (let ((tree (locate 'profiles)))
      (with-update-locked~ tree
        (function dynamic ()
          (remove-every-row~ tree)
          (insert-profiles tree null profiles)))))

  
  (method (insert-profile tree father profile)
    (let ((row (insert-content tree father profile)))
      (insert-children tree row profile)))
  
  
  (method (insert-content tree father profile)
    (let* ((name (profile-name profile))
           (count (profile-count profile))
           (total (profile-total profile))
           (average (/ total count))
           (parent-percentage (profile-parent-percentage profile))
           (toplevel-percentage (profile-toplevel-percentage profile)))
      (add-row~ tree :father father :state 'expanded :children (list (new Tree-Node :image {Bitmap-Resource "Link"} :title name) (new Tree-Label :title count) (new Tree-Label :title average) (new Tree-Label :title total) (new Tree-Label :title (either parent-percentage "")) (new Tree-Label :title (either toplevel-percentage ""))) :user-data profile)))
  
  
  (method (profile-parent-percentage profile)
    (let ((parent (profile-parent profile)))
      (when (and parent (eq? (get-tag~ parent) 'profile))
        (percentage (profile-total profile)
                    (profile-total parent)))))
  
  
  (method (profile-toplevel-percentage profile)
    (let ((toplevel (profile-toplevel profile)))
      (if (eq? toplevel profile)
          100
        (percentage (profile-total profile)
                    (profile-total toplevel)))))
  
  
  (method (profile-toplevel profile)
    (let ((parent (profile-parent profile)))
      (if (or (not parent) (neq? (get-tag~ parent) 'profile))
          profile
        (profile-toplevel parent))))
  
  
  (method (insert-children tree father profile)
    (insert-profiles tree father (get-children~ profile)))
  
  
  (method (insert-profiles tree father profiles)
    (for-each (function dynamic (child)
                (insert-profile tree father child))
              profiles))
  
  
  ;;;
  ;;;; Profile
  ;;;
  
  
  (method (profile-parent profile)
    (get-parent~ profile))
  
  
  (method (profile-name profile)
    (get-property~ profile 'name))
  
  
  (method (profile-count profile)
    (get-property~ profile 'count))
  
  
  (method (profile-total profile)
    (get-property~ profile 'total))
  
  
  ;;;
  ;;;; Edition
  ;;;
  
  
  (method public (edit-profile)
    (let* ((tree (locate 'profiles))
           (selection (get-single-selection~ tree)))
      (if (null? selection)
          (bell)
        (let ((profile (get-user-data~ (get-row~ tree selection)))
              (appl (get-application)))
          (edit-definition~ appl (profile-name profile))))))))
