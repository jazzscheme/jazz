;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Debugger Console-Text View
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2007
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.debugger.console.Debugger-Console-Text-View jazz


(import (jazz.debugger)
        (jazz.console)
        (jazz.ui)
        (jazz.library)
        (jazz.utilities))


(class Debugger-Console-Text-View extends Console-Text-View implements Debugger-Listener
    
  
  ;;;
  ;;;; Listener
  ;;;
  
  
  (method (display-output output)
    (display output console-printer))
  
  
  (method (newline-output)
    (newline console-printer))
  
  
  (method (debug-output output)
    (format console-printer "{a}{%}" output)
    (fresh-prompt))


  ;;;
  ;;;; Debugger
  ;;;
  
  
  (method (find-debugger)
    (either (find-debugger Gambit-Debugger)
            (start-debugger)))
  
  
  (method (start-debugger)
    (let ((debugger (new Gambit-Debugger :console-text self)))
      (start-gambit~ debugger)
      debugger))
  
  
  (method (stop-debugger debugger)
    (stop-gambit~ debugger))


  ;;;
  ;;;; Banner
  ;;;

  
  (method (display-banner)
    @convert
    (let ((start (get-start)))
      (insert-string (format "Debugger{%}{%}"))
      (colorize Banner-Color start)
      (display-prompt)))


  ;;;
  ;;;; Eval
  ;;;
  
  
  (method (eval-command range name command console?)
    (let ((debugger (find-debugger)))
      (gambit-command~ debugger name command console?)))
  
  
  (method (eval-commands range names commands console?)
    (let ((debugger (find-debugger)))
      (gambit-commands~ debugger names commands console?)))))
