;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Closure Frames
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2007
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.debugger.frame.Closure-Frame jazz


(import (jazz.debugger)
        (jazz.library)
        (jazz.utilities))


(class Closure-Frame extends Execution-Frame
  
  
  (slot presented initialize {})
  
  
  @convert-literal
  (method meta (construct-literal context ior address name presented)
    (new self (unmarshal~ ior) address name presented))
  
  
  (method (initialize thread address name (presented {}))
    (nextmethod thread address name)
    (set! [presented self] (either presented (present-frame))))
  
  
  (method (print printer readably)
    (format printer "~{{a} {s} {s} {s} {s}}"
            (identifier-name (type-name (class-of self)))
            (marshal~ thread)
            address
            name
            presented))
  
  
  ;;;
  ;;;; Presentation
  ;;;


  (method (present)
    presented)
  
  
  (method (present-frame)
    (let ((closure (frame-procedure address)))
      (present-closure closure)))
  
  
  (method (present-closure closure)
    (present-function (closure-function closure)))
  
  
  (method (present-function function)
    (cond ((null? function) "<function>")
          ((function-method? function) (present-toplevel-function function))
          (else (present-inner-function function))))
  
  
  (method (present-toplevel-function function)
    (let ((definer (object-definer function)))
      ;; a temp patch because in theory this should not happen
      (if (null? definer)
          "<unknown>"
        (format "{s}.{s}"
                (type-name (field-creator definer))
                (field-name definer)))))
  
  
  (method (present-inner-function function)
    (let ((container (function-container function)))
      (format "{a}.{s}"
              (present-function container)
              (+ (function-rank function) 1))))
  
  
  (method (get-image)
    {Bitmap-Resource "FrameClosure"})))
