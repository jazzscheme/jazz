;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; GDB Output Parser
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2007
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.debugger.gdb.GDB-Parser jazz


(import (jazz.debugger)
        (jazz.library)
        (jazz.utilities))
  
  
;; > file blues
;; &"file blues\n"
;; ^done
;; (gdb) 
;; > run
;; &"run\n"
;; ^done,reason="signal-received",signal-name="SIGFPE",signal-meaning="Arithmetic exception",thread-id="1",frame={addr="0x004013c5",func="foo(int, int)",args=[{name="x",value="2"},{name="y",value="0"}],file="C:/Jedi/Products/org.jazz/Projects/Jazz/Projects/Blues/Core/BMain.cpp",line="28"}
;; (gdb) 
;; > backtrace
;; &"backtrace\n"
;; ^done,frame={level="0 ",addr="0x004013c5",func="foo(int, int)",args=[{name="x",value="2"},{name="y",value="0"}],file="C:/Jedi/Products/org.jazz/Projects/Jazz/Projects/Blues/Core/BMain.cpp",line="28"},frame={level="1 ",addr="0x0040142e",func="main",args=[{name="argc",value="1"},{name="argv",value="0x3d24e8"}],file="C:/Jedi/Products/org.jazz/Projects/Jazz/Projects/Blues/Core/BMain.cpp",line="42"}
;; (gdb) 
;; > 


(class GDB-Parser extends Object
  
  
  (slot reader)
  
  
  (method (initialize str)
    (nextmethod)
    (set! reader (gdb-reader str)))
  
  
  ;;;
  ;;;; Parse
  ;;;
  
  
  (method public (parse)
    (read-content))
  
  
  (method (read-content)
    (let ((elements (new List-Factory)))
      (skip-whites reader)
      ;; need to test eof-object?
      (while (not (memv? (peek-char reader) '(#\close-bracket #\close-brace)))
        (let ((element (read-element)))
          (put~ elements element))
        (skip-whites reader)
        (when (= (peek-char reader) #\,)
          (read-char reader)
          (skip-whites reader)))
      (get-output~ elements)))
  
  
  (method (read-element)
    (skip-whites reader)
    (case (peek-char reader)
      ((#\open-bracket #\open-brace)
       (read-list))
      (else
       (read-atom))))
  
  
  (method (read-list)
    (read-char reader)
    (prog1 (read-content)
      (read-char reader)))
  
  
  (method (read-atom)
    (let ((expr (read reader)))
      (skip-whites reader)
      (if (eqv? (peek-char reader) #\=)
          (begin
            (read-char reader)
            (let ((value (read-element)))
              (new GDB-Property expr value)))
        expr)))
  
  
  (method (validate-char c)
    (let ((char (read-char reader)))
      (if (eqv? char c)
          char
        (error "Found unexpected character while parsing GDB output: {a}" (coerce char String)))))
  
  
  ;;;
  ;;;; Reader
  ;;;
  
  
  (method (gdb-reader str)
    (let ((reader (new String-Reader str))
          (readtable (new Readtable)))
      (set-syntax~ readtable #\, TTerminator)
      (set-syntax~ readtable #\= TTerminator)
      (set-readtable~ reader readtable)
      reader))))
