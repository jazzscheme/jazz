;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Debugger Server
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2007
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.debugger.server.Debugger-Server jazz


(import (jazz.debugger)
        (jazz.library)
        (jazz.ui.window)
        (jazz.platform)
        (jazz.utilities))


(class Debugger-Server extends Object
  
  
  (slot debuggees         initialize '())
  (slot selected-debuggee initialize {})
  
  
  ;;;
  ;;;; Access
  ;;;
  
  
  (method public remote (get-debuggees (validate?: validate? false))
    (when validate?
      (validate-debuggees))
    debuggees)
  
  
  (method public remote (get-selected-debuggee)
    selected-debuggee)
  
  
  (method public remote (set-selected-debuggee debuggee)
    (set! selected-debuggee debuggee)
    {})
  
  
  ;;;
  ;;;; Window
  ;;;
  
  
  (method public remote (get-toplevel-hwnd)
    (get-handle~ (get-toplevel)))
  
  
  ;;;
  ;;;; Process
  ;;;


  (method public remote (attach-debuggee debuggee)
    (unless (member? debuggee debuggees)
      (set! debuggees (append! debuggees (list debuggee)))
      (when (null? selected-debuggee)
        (select-debuggee debuggee))
      {}))


  (method public remote (detach-debuggee debuggee)
    (when (member? debuggee debuggees)
      (set! debuggees (remove! debuggee debuggees test: =))
      (when (= debuggee selected-debuggee)
        (select-debuggee (car debuggees)))
      {}))
  
  
  ;;;
  ;;;; Selected
  ;;;
  
  
  (method public remote (select-debuggee debuggee)
    (when (/= debuggee selected-debuggee)
      (set! selected-debuggee debuggee)
      (let* ((appl (get-application))
             (icon (essay debuggee (get-icon~ debuggee)))
             (status (get-status-bar~ appl)))
        (post-primary
          (function ()
            (when status
              (let ((item (locate-component~ status 'debugger)))
                (when item
                  (set-icon~ item icon))))
            (let ((presented (essay debuggee (present-debuggee~ appl debuggee))))
              (user-message (format "{a} selected" (if (null? debuggee) "None" presented)))))))
      {}))
  
  
  (method public remote (select-next)
    (let* ((rank (find selected-debuggee debuggees return: 'position))
           (debuggee (element debuggees (modulo (+ rank 1) (length debuggees)))))
      (select-debuggee debuggee)
      {}))
  
  
  ;;;
  ;;;; Validate
  ;;;
  
  
  (method (validate-debuggees)
    (set! debuggees (collect-if (function dynamic (debuggee)
                                  (or (is? debuggee Local-Proxy)
                                      (live?~ debuggee)))
                                debuggees))
    (when (not (member? selected-debuggee debuggees))
      (select-debuggee (car debuggees))))
  
  
  ;;;
  ;;;; Close
  ;;;
  
  
  (method public remote (detach-debuggees)
    (validate-debuggees)
    (let* ((appl (get-application))
           (jedi (get-local-debuggee~ appl)))
      (for-each (function dynamic (debuggee)
                  (when (/= debuggee jedi)
                    (detach-from-controller~ debuggee)))
                debuggees))
    {})
  
  
  ;;;
  ;;;; Debugging
  ;;;
  
  
  (method public remote (debug-message message)
    (debug message)
    {})
  
  
  (method public remote (status-message message)
    (user-message message)
    {})
  
  
  ;;;
  ;;;; Debugger
  ;;;


  (method public remote (debug-exception type message stack)
    (when (= (present-exception type message) 'yes)
      (message-box stack)
      {}))


  (method (present-exception type message)
    (message-box (format "{a}: {a}" type message)
                 type: 'error
                 yes: "Debug"
                 cancel: "Ignore"))))
