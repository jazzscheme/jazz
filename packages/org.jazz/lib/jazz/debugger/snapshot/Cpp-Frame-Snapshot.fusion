;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; C++ Frames Snapshots
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2007
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.debugger.snapshot.Cpp-Frame-Snapshot jazz


(import (jazz.debugger)
        (jazz.library)
        (jazz.utilities))


(class Cpp-Frame-Snapshot extends Frame-Snapshot
  
  
  (slot title)
  (slot file)
  (slot line)
  
  
  (method (initialize thread title file line parameters)
    (nextmethod thread parameters)
    (set! [title self] title)
    (set! [file self] file)
    (set! [line self] line))
  
  
  ;;;
  ;;;; Access
  ;;;
  
  
  (method public (get-title)
    title)
  
  
  (method public (get-file)
    file)
  
  
  (method public (get-line)
    line)
  
  
  ;;;
  ;;;; Presentation
  ;;;
  
  
  (method (present)
    (if (null? file)
        title
      (format "{a}.{a}" (get-base~ file) title)))
  
  
  (method (get-image)
    {Bitmap-Resource "Green"})
  
  
  ;;;
  ;;;; Edition
  ;;;
  
  
  (method (edit)
    (when file
      (let ((appl (get-application)))
        (edit-document~ appl file :activate-focus? false :selection (new Range (new Cell (- line 1) 0) (new Cell line 0))))))))
