;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Component Card
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2007
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.designer.card.Card jazz


(import (jazz.designer)
        (jazz.ui)
        (jazz.library)
        (jazz.utilities))


(class Card extends Layout-View
  
  
  (slot editor   initialize {})
  (slot client   initialize {})
  (slot designer initialize {})
  

  ;;;
  ;;;; Events
  ;;;
  
  
  (method (destroy)
    (set-designer {})
    (set-editor {})
    (nextmethod))
  

  ;;;
  ;;;; Editor
  ;;;
  
  
  (method public virtual (get-editor)
    editor)
  
  
  (method public virtual (set-editor edt)
    (when (/= edt editor)
      (when editor
        (remove-editor-listener~ editor self))
      (set! editor edt)
      (when editor
        (add-editor-listener~ editor (new Event-Handler target: self method-name: 'on-editor)))))
    
  
  (method protected virtual (on-editor evt)
    (case (get-kind~ evt)
      ((:designer-change) (set-designer (get-property~ evt designer:)))
      ((:selection-changed) (set-client (car (get-selection~ evt)) force?: (get-force?~ evt)))))

  
  ;;;
  ;;;; Client
  ;;;


  (method public virtual (get-client)
    client)


  (method public virtual (set-client clt (force?: force? #f))
    (when (or force? (/= clt client))
      (set! client clt)
      (client-update)))
  
  
  (method public virtual (client-update)
    )
  
  
  ;;;
  ;;;; Designer
  ;;;
  
  
  (method public virtual (get-designer)
    designer)
  
  
  (method public virtual (set-designer dsg)
    (when (/= dsg designer)
      (when designer
        (uninstall-listener designer))
      (when dsg
        (install-listener dsg))
      (set! designer dsg)))


  (method (on-designer evt)
    (case (get-kind~ evt)
      ((:property-change)
        (call-property-change evt))))
  
  
  (method protected virtual (call-property-change evt)
    (let ((component (get-property~ evt component:)))
      (when (eq? component client)
        (property-change component (get-property~ evt property:) (get-property~ evt value:)))))
  
  
  (method public virtual (property-change component property value)
    )

  
  ;;;
  ;;;; Listener
  ;;;

  
  (method (install-listener designer)
    (let ((listener (new Event-Handler target: self method-name: 'on-designer)))
      (add-designer-listener~ designer listener)))
  
  
  (method (uninstall-listener designer)
    (remove-designer-listener~ designer self))
  
  
  ;;;
  ;;;; Value
  ;;;


  (method public virtual (enter-value property value)
    (when client
      (set-property~ designer client property value)))))
