;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Properties Manager
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2007
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.designer.card.Properties-Manager jazz


(import (jazz.designer)
        (jazz.jml)
        (jazz.ui)
        (jazz.library)
        (jazz.utilities))


(class Properties-Manager extends Properties-Card


  (form
    (<install>
      (<!>     name: scroller style: tool
        (<!>   name: content
          (<!> name: header   style: tool)))))
  
  
  (method (destroy)
    (let ((appl (get-application)))
      (close-selected~ appl self))
    (nextmethod))
    
  
  @convert-external
  (method meta (external-name . rest)
    'properties-card)

  
  ;;;
  ;;;; Palette
  ;;;
  
  
  @convert-guest
  (method meta (palette-class)
    Tool-Palette)
  
  
  @convert-guest
  (method meta (palette-icon)
    {Bitmap-Resource "Properties"})
  

  @convert-guest
  (method meta (palette-title)
    "Properties")
  
  
  (method (host-activate)
    (let ((appl (get-application)))
      (add-selected-listener~ appl (new Event-Handler :target self :method-name 'on-selected-change))))
  
  
  (method (host-deactivate)
    (let ((appl (get-application)))
      (remove-selected-listener~ appl self)))
  
  
  ;;;
  ;;;; Docked
  ;;;
  
  
  (method (focus-default)
    (let ((tree (locate 'tree)))
      (acquire-focus~ tree)))
  
  
  (method (get-tools)
    (locate 'tools))
    
  
  ;;;
  ;;;; Hosting
  ;;;
  
  
  (method (install-in-host host)
    (nextmethod host)
    (set-layout-type~ (get-content~ (get-root~ host)) 'fill)
    (when (is? host Host-Docked)
      (set-flat?~ (locate 'scroller) true)
      (set-flat?~ (locate 'header) true)
      (set-filter~ (locate 'tree) 'categorized)))
    
  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method (on-selected-change evt)
    (let ((owner (get-owner~ evt)))
      (typecase owner
        ((Designer)
         (let ((editor {})
               (designer owner)
               (client (get-selected~ evt))
               (force? (get-force?~ evt)))
           (set-editor editor)
           (set-designer designer)
           (set-client client :force? force?)))
        ((Editor-View)
         (let* ((editor owner)
                (designer (get-designer~ editor))
                (client (get-selected~ evt))
                (force? (get-force?~ evt)))
           (set-editor editor)
           (set-designer designer)
           (set-client client :force? force?)))
        (else
         (set-editor {})
         (set-designer {})
         (set-client {})))))
  
  
  ;;;
  ;;;; Editor
  ;;;
  
  
  (method (on-editor evt)
    (case (get-kind~ evt)
      ;; application selected event will take care of this
      ((:selection-changed))
      (else (nextmethod evt))))))
