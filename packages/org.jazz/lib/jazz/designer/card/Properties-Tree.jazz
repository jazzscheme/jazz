;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Properties Tree
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2007
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.designer.card.Properties-Tree jazz


(import (jazz.designer)
        (jazz.jml)
        (jazz.ui)
        (jazz.literals)
        (jazz.library)
        (jazz.utilities))


(definition Filter-Width
  20)


(class Properties-Tree extends Tree-View


  (property filter           initialize 'categorized getter get-filter           setter set-filter)
  (property filter-locked?   initialize #f        getter get-filter-locked?   setter set-filter-locked?)
  (property filter-visible?  initialize #t         getter get-filter-visible?  setter set-filter-visible?)
  (property property-handler initialize {}           getter get-property-handler setter set-property-handler)
  

  (form
    (<install>                            filled-column: value draggable?: #t multiple-selection?: #f selection-mode: row auto-expand/collapse?: #t column-spacing: 0 row-spacing: 0 portfolio: :icons context-menu-handler: {Event-Handler form: on-context-menu}
      (<Property-Column>   name: property title: "Property" width: 176 toplevel-controls?: #f)
      (<Value-Column>      name: value    title: "Value" width: 192)
      (<Tree-Image-Column> name: owner    title: "Owner" width: 50 justification: center)))


  ;;;
  ;;;; Access
  ;;;
  
  
  (method public (get-card)
    (child 5))
  
  
  (method public (get-editor)
    (get-editor~ (get-card)))
  
  
  (method public (get-client)
    (get-client~ (get-card)))
  
  
  (method public (get-designer)
    (get-designer~ (get-card)))
  

  ;;;
  ;;;; Events
  ;;;
  
  
  (method (double-click pos)
    (let ((row (get-selected-row)))
      (when row
        (double-click~ row (acquire~ row self pos)))))
  
  
  (method (on-context-menu evt)
    (let ((sender (get-sender~ evt))
          (pos (get-position~ evt)))
      (cond ((is? sender Tree-Header)
             (unless (or filter-locked? (not filter-visible?))
               (let ((header-height 16))
                 (when (and (< (get-h~ pos) Filter-Width) (< (get-v~ pos) header-height))
                   (track-popup-menu~ sender (new Filter-Menu) (new Point 5 header-height))))))
            ((typed? sender 'Design-Properties-Tree)
             (with-context-click~ sender pos
               (function dynamic ()
                 (let ((row (selected-row))
                       (client (get-client)))
                   (when (and row (is-not? row Info-Row))
                     (let ((acquired (acquire sender pos)))
                       (track-popup-menu~ sender (new-property-menu client) acquired)))))))
            (else
             (context-menu pos)))))
  
  
  (method (new-property-menu client)
    (let* ((menu (new Property-Menu))
           (any (car client))
           (creator (get-creator~ any)))
      (if (branch-installed?~ creator)
          (begin
            (set-visible?~ (locate~ menu 'end-consolidate-group) #f)
            (set-visible?~ (locate~ menu 'distribute) #f))
        (set-visible?~ (locate~ menu 'consolidate) #f)
        (set-visible?~ (locate~ menu 'end-consolidate-group) #f))
      (layout-menu~ menu)
      menu))
  
  
  ;;;
  ;;;; Focus
  ;;;
  
  
  (method (focus-delegate)
    (let ((row (selected-row)))
      (when row
        (editor-focus-delegate~ row))))
  
  
  ;;;
  ;;;; Save
  ;;;
  
  
  (method protected (save-edition)
    (let ((row auto-expanded-row))
      (when (and row (is? row Value-Row) (in-edition?~ row))
        (save-edition~ row))))


  ;;;
  ;;;; Handler
  ;;;

  
  (method public (get-property-handler)
    property-handler)
  
  
  (method public (set-property-handler handler)
    (set! property-handler handler))


  (method public (notify-property-change property)
    (when property-handler
      (invoke~ property-handler self (new Event :property-change self property: property))))
  
  
  ;;;
  ;;;; Client
  ;;;
  
  
  (method public (client-update)
    ;; this is kind of a patch because an error in the user properties code
    ;; will possibly also error the properties manager when switching to the
    ;; debugger workspace... this should all be fixed when all the non IDE
    ;; code is run out of process...
    (unless (get-debugging?~ (get-process))
      (with-update-locked
        (function dynamic ()
          (close-auto-expanded)
          (preserving-update)))))
  
  
  (method (find-property-index target)
    (call/ec
      (lambda (return)
        (for-each-visible-row
          (function dynamic (row rank)
            (when (is? row Value-Row)
              (let ((property (get-property~ row)))
                (when (if (symbol? target)
                          (eq? (field-name property) target)
                        (eq? property target))
                  (return rank))))))
        {})))

  
  ;;;
  ;;;; Update
  ;;;
  
  
  (method (preserving-update)
    (if (null? (get-client))
        (remove-every-row)
      (let ((selected (selected-property))
            (default (get-client-default-property)))
        (update)
        (let ((index (if selected (either (find-property-index selected) (find-property-index default)) (find-property-index default))))
          (when index
            (set-single-selection index auto-expand?: #f))))))


  (method (update)
    (let* ((client (get-client))
           (any (car client))
           (editor (get-editor))
           (designer (get-designer))
           (properties (get-client-properties client editor)))
      (with-update-locked
        (function dynamic ()
          (remove-every-row)
          (insert-properties client any editor designer {} properties)))))
  
  
  (method public (update-property clt property)
    (let* ((client (get-client))
           (any (car client)))
      (when (eq? clt any)
        (let ((rank (find-property-index property)))
          (when rank
            (let ((row (get-row rank)))
              (update-property-row~ any property row)))))))
  
  
  (method (insert-properties client any editor designer father properties)
    (for-each (function dynamic (property)
                (if (pair? property)
                    (for-each (function dynamic (property)
                                (insert-property client any editor designer father property 'collapsed {}))
                              property)
                  @wait-completed
                    (bind (title . properties) property
                      (let ((row (add-row father: father state: 'expanded children: (list (new Tree-Node title: title image: {Bitmap-Resource "Info"}) (new Tree-Label) (new Tree-Image)))))
                        (insert-properties client any editor designer row properties)))
                  (insert-property client any editor designer father property 'collapsed {})))
              properties))
  
  
  (method (insert-property client any editor designer father property state position)
    (let* ((class (get-row-class~ any property))
           (instance (get-row-instance~ any property))
           (row (either instance (new-in any class)))
           (image (get-filter-image~ class))
           (values (map (function dynamic (component) (read-property component property)) client))
           (presented (map (function dynamic (value) (present~ row value)) values))
           (creator (get-creator~ any))
           (branch (essay creator (get-active-branch~ creator)))
           ;; temp patch because the root object doesn't have a creator...
           (changed? (if (or (null? creator) (null? editor)) #f (find-changed-property~ editor branch any property)))
           (uniform? (or (<= (length values) 1) (apply = presented)))
           (node (new Tree-Node title: (property-presentation~ (class-of any) property) image: image color: (if uniform? (if changed? {Color name: Dark-Red} {}) {Color name: Dark-Gray})))
           (label (new Tree-Label))
           (owner (new Tree-Image image: (owner-image designer client class property))))
      (set-parent~ row self)
      (set-row-height~ row 17)
      (set-children~ row (list node label owner))
      (set-property~ row property)
      (set-value~ row (car values))
      (set-title~ label (car presented))
      (set-color~ label (if uniform? {} {Color name: Dark-Gray}))
      (add-row father: father state: state :row row position: position)
      row))
  
  
  (method (get-client-default-property)
    (let ((client (get-client)))
      (when (= 1 (length client))
        (let ((component (car client)))
          (when (is? component Component)
            (let ((name (get-default-property~ component)))
              (when name
                (category-field (class-of component) name))))))))
  
  
  (method (get-client-properties client editor)
    (when client
      (apply intersection (map (function dynamic (component)
                                 (when (is? component Component)
                                   (get-component-properties component editor)))
                               client))))
  
  
  (method (get-component-properties component editor)
    (filter-by-rights component editor
      (get-filtered-properties~ component :filter filter)))
  
  
  (method (owner-image designer client class property)
    (when (and designer (= 1 (length client)) (neq? class Info-Row))
      (let* ((component (car client))
             (owner (find-owner~ designer component property)))
        (cond ((is? owner Branch) (branch-owner-image))
              ((eq? owner (get-reference~ designer)) (root-owner-image))
              (else (default-owner-image))))))
  
  
  (method protected virtual (default-owner-image)
    {})
  
  
  (method protected virtual (root-owner-image)
    {Bitmap-Resource "OwnerRoot"})
  
  
  (method protected virtual (branch-owner-image)
    {Bitmap-Resource "OwnerBranch"})
  
  
  (method protected (reset-modified-properties)
    (for-each-visible-row
      (function dynamic (row rank)
        (when (is? row Value-Row)
          (let ((node (car (get-children~ row))))
            (when (get-color~ node)
              (set-color~ node {})
              (invalidate-cell (new Cell rank 0))))))))
  
  
  ;;;
  ;;;; Rights
  ;;;
  
  
  (method (get-rights editor)
    (get-rights~ editor))
  
  
  (method (filter-by-rights component editor properties)
    (let ((rights (essay editor (get-rights~ editor))))
      (if (null? rights)
          properties
        (let* ((reference (get-client~ editor))
               (component-rights (find-component-rights~ rights reference component)))
          (when component-rights
            (filter-properties~ component-rights properties))))))
  
  
  ;;;
  ;;;; Selection
  ;;;
  
  
  (method (selected-row)
    (let ((row (get-selected-row)))
      (when (is? row Value-Row)
        row)))
  
  
  (method (selected-property)
    (let ((row (selected-row)))
      (when row
        (get-property~ row))))
  
  
  (method public (select-property property)
    (let ((rank (find-property-index property)))
      (if (null? rank)
          (set-selection '() auto-expand?: #f generate-event?: #f)
        (set-single-selection rank auto-expand?: #f generate-event?: #f))))

  
  ;;;
  ;;;; Property
  ;;;
  
  
  (method (consolidate-property)
    (let* ((client (get-client))
           (code (message-box (format "Consolidate value{a} to root and lose values in other branches?" (format-plural (length client))) type: 'confirmation)))
      (when (= code 'yes)
        (let ((row (selected-row)))
          (save-edition~ row)
          (let ((property (get-property~ row))
                (designer (get-designer)))
            (for-each (function dynamic (component)
                        (let ((creator (get-creator~ component))
                              (value (read-property component property)))
                          (for-each-branch~ creator
                            (function dynamic (branch)
                              (remove-property~ designer component property {} branch: branch)))
                          (set-property~ designer component property value branch: {})))
                      client))
          (set-edited-modified?~ row #f)))))
  
  
  (method (distribute-property)
    (let* ((client (get-client))
           (code (message-box (format "Distribute value{a} onto branches and lose their current values?" (format-plural (length client))) type: 'confirmation)))
      (when (= code 'yes)
        (let ((row (selected-row)))
          (save-edition~ row)
          (let ((property (get-property~ row))
                (designer (get-designer)))
            (for-each (function dynamic (component)
                        (let ((creator (get-creator~ component))
                              (value (read-property component property)))
                          (for-each-branch~ creator
                            (function dynamic (branch)
                              (set-property~ designer component property value branch: branch)))))
                      client))
          (set-edited-modified?~ row #f)))))
  

  ;;;
  ;;;; Sort
  ;;;

  
  (method (header-click column)
    @w
    (let ((row auto-expanded-row))
      (when (and row (is? row Value-Row) (in-edition?~ row))
        (close-auto-expanded)
        (end-edition~ row)))
    (nextmethod column))

  
  ;;;
  ;;;; Filter
  ;;;


  (method public (get-filter)
    filter)


  (method public (set-filter flt)
    (when (/= flt filter)
      (set! filter flt)
      (invalidate-column-header~ (get-header) node-column)
      (update)))


  (method public (get-filter-locked?)
    filter-locked?)


  (method public (set-filter-locked? value)
    (set! filter-locked? value))
  

  (method public (get-filter-visible?)
    filter-visible?)


  (method public (set-filter-visible? value)
    (set! filter-visible? value))

  
  (method public (toggle-filter)
    (case filter
      ((all)         (set-filter 'properties))
      ((properties)  (set-filter 'handlers))
      ((handlers)    (set-filter 'infos))
      ((infos)       (set-filter 'categorized))
      ((categorized) (set-filter 'all))))

  
  ;;;
  ;;;; Design
  ;;;
  
  
  (method public (property-change component property value)
    (let ((rank (find-property-index property)))
      (when rank
        (let ((row (get-row rank)))
          (update~ row value)
          (let* ((cell (new Cell rank 2))
                 (data (get-cell-data cell)))
            (set-image~ data (owner-image (get-designer) (get-client) (class-of row) property))
            (invalidate-cell cell)))))))


;;;
;;;; Property-Column
;;;


(class Property-Column extends Tree-Node-Column
  
  
  (slot filter-down? initialize #f)
  
  
  (method (draw-header dc context h v width height sorted spaced? flat?)
    @convert-inner-class
    (if (not filter-visible?)
        (nextmethod dc context h v width height sorted spaced? flat?)
      (draw-header-at dc h v Filter-Width height "" filter-down? {} spaced? flat?)
      (draw-image-at dc context (+ h 1) v (get-filter-image))
      (draw-header-at dc (+ h Filter-Width) v (- width Filter-Width) height (localize (get-column-title)) down? sorted spaced? flat?)))
  
  
  (method (draw-image-at dc context h v image)
    @convert-inner-class
    (let ((offset (if filter-down? 1 0)))
      (draw-image~ (get-icons-cache~ (get-application)) dc context image (+ h offset) (+ v offset))))
  
  
  (method (header-down pos)
    @convert-inner-class
    (if (not filter-visible?)
        (nextmethod pos)
      (let ((in-filter? (< (get-h~ pos) Filter-Width)))
        (if filter-locked?
            (unless in-filter?
              (nextmethod pos))
          (if in-filter?
              (set! filter-down? #t)
            (set! down? #t))
          (invalidate-column-header~ (get-header~ parent) self)))))
  
  
  (method (header-up pos)
    @convert-inner-class
    (if (not filter-visible?)
        (nextmethod pos)
      (if filter-locked?
          (unless (< (get-h~ pos) Filter-Width)
            (nextmethod pos))
        (let ((filter? filter-down?))
          (set! down? #f)
          (set! filter-down? #f)
          (when filter?
            (toggle-filter))
          (invalidate-column-header~ (get-header~ parent) self)
          (when (not filter?)
            (header-click~ parent self))))))
  
  
  (method (draw-cell dc context row cell width height)
    (draw-background dc context row cell width height)
    (draw-level dc row cell width height)
    (draw-image dc context row cell width height)
    (draw-title dc context row cell 0 0 width height))
  
  
  (method (get-filter-image)
    @convert-inner-class
    (case filter
      ((all) {Bitmap-Resource "All"})
      ((infos) {Bitmap-Resource "Info"})
      ((properties) {Bitmap-Resource "Property"})
      ((handlers) {Bitmap-Resource "Handler"})
      ((categorized) {Bitmap-Resource "UpdateCatalog"})))
  
  
  (method (get-column-title)
    @convert-inner-class
    (case filter
      ((all) "Property")
      ((infos) "Info")
      ((properties) "Property")
      ((handlers) "Handler")
      ((categorized) "Property"))))


(register-autoclass 'Property-Column Property-Column)


;;;
;;;; Value-Column
;;;


(class Value-Column extends Tree-Label-Column
  
  
  (method (complete-mouse-down cell pos shift? control?)
    @convert-inner-class
    (let* nextmethod
      (nextmethod cell pos shift? control?)
      (when auto?
        (auto-expand/collapse~ parent row))))
  
  
  (method (draw-cell dc context row cell width height)
    @convert-inner-class
    (when (is? row Value-Row)
      (let ((value (get-value~ row)))
        (draw-cell~ row dc context value self row cell width height)))))


(register-autoclass 'Value-Column Value-Column)


;;;
;;;; Filter-Menu
;;;


(class Filter-Menu extends Context-Menu
  
  
  (form
    (<install>
      (<Radio-Item>     name: all         title: "&All" icon: {Bitmap-Resource "All"} action-handler: {Event-Handler form: on-action})
      (<Separator-Item>)
      (<Radio-Item>     name: infos       title: "&Infos" icon: {Bitmap-Resource "Info"} action-handler: {Event-Handler form: on-action})
      (<Radio-Item>     name: properties  title: "&Properties" icon: {Bitmap-Resource "Property"} action-handler: {Event-Handler form: on-action})
      (<Radio-Item>     name: handlers    title: "&Handlers" icon: {Bitmap-Resource "Handler"} action-handler: {Event-Handler form: on-action})
      (<Separator-Item>)
      (<Radio-Item>     name: categorized title: "&Categorized" icon: {Bitmap-Resource "UpdateCatalog"} action-handler: {Event-Handler form: on-action})))
  
  
  (method (finish rest)
    (nextmethod rest)
    @convert-inner-class
    (set-selected?~ (locate (get-filter)) #t))
  
  
  (method (on-action evt)
    @convert-inner-class
    (let ((filter (get-name~ (get-sender~ evt))))
      (set-filter filter))))


;;;
;;;; Property-Menu
;;;


(class Property-Menu extends Context-Menu
  
  
  (form
    (<install>
      (<Radio-Item>     name: consolidate           title: "&Consolidate To Root" icon: {Bitmap-Resource "ConsolidateProperty"} action-handler: {Event-Handler form: on-consolidate})
      (<Separator-Item> name: end-consolidate-group)
      (<Radio-Item>     name: distribute            title: "&Distribute Onto Branches" icon: {Bitmap-Resource "DistributeProperty"} action-handler: {Event-Handler form: on-distribute})))
  
  
  (method (on-consolidate evt)
    @convert-inner-class
    (consolidate-property))
  
  
  (method (on-distribute evt)
    @convert-inner-class
    (distribute-property))))
