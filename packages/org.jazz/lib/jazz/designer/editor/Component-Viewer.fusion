;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Component Viewer
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2007
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.designer.editor.Component-Viewer jazz


(import (jazz.designer)
        (jazz.ui)
        (jazz.library)
        (jazz.utilities))


(class Component-Viewer extends Object)


@wait


(class Component-Viewer extends HTML-Viewer
  
  
  (slot editor initialize {})
  (slot client initialize {})
  

  ;;;
  ;;;; Events
  ;;;
  
  
  (method (destroy)
    (set-editor {})
    (nextmethod))

  
  ;;;
  ;;;; Editor
  ;;;
  
  
  (method public virtual (get-editor)
    editor)
  
  
  (method public virtual (set-editor edt)
    (when (/= edt editor)
      (when editor
        (remove-editor-listener~ editor self))
      (set! editor edt)
      (when editor
        (add-editor-listener~ editor (new Event-Handler target: self method-name: 'on-editor)))))
  
  
  (method protected virtual (on-editor evt)
    (case (get-kind~ evt)
      ((:selection-changed) (set-client (car (get-selection~ evt))))))
  
  
  ;;;
  ;;;; Client
  ;;;


  (method public virtual (get-client)
    client)


  (method public virtual (set-client clt (force?: force? false))
    (when (or force? (/= clt client))
      (set! client clt)
      (client-update)))
  
  
  (method public virtual (client-update)
    (let ((site (get-site)))
      (when site
        (if (null? client)
            (navigate~ site "about:blank")
          (let* ((printer (new String-Printer))
                 (html-printer (generate-html~ client printer)))
            (let ((text (get-output~ printer)))
              (if (empty-string? text)
                  (navigate~ site "about:blank")
                (set-text text)
                (set-action-list~ (get-browser) (get-action-list~ html-printer)))))))))))
