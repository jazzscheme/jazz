;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Base For Editor Views
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2007
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.designer.editor.Editor-View jazz


(import (jazz.designer)
        (jazz.groupware)
        (jazz.io)
        (jazz.library)
        (jazz.library.component)
        (jazz.platform)
        (jazz.ui)
        (jazz.ui.view)
        (jazz.system)
        (jazz.utilities))


(class Editor-View extends Layout-View implements Document

  
  (property client initialize {} getter get-client setter set-client)
  
  
  (slot designer   initialize {})
  (slot listeners  initialize '())
  (slot undoer     initialize {})
  (slot selection  initialize '())
  (slot controller initialize {})
  (slot rights     initialize {})
  
  
  (method (default-extension));;abstract
  (method (extensions));;abstract
  (method (focus-document));;abstract
  (method (current-history-item));;abstract
  
  
  (method (get-editor-view)
    self)
  
  
  ;;;
  ;;;; Frame
  ;;;
  

  @convert-guest
  (method meta (frame-icon)
    {Bitmap-Resource "Designer"})
  
  
  @convert-guest
  (method meta (frame-title)
    "Edit")

  
  ;;;
  ;;;; Host
  ;;;
  
  
  (method (install-in-host host)
    (nextmethod host)
    (update-status~ (get-controller)))
  
  
  (method (install-scroller)
    )

  
  (method (position-host host)
    )
  
  
  ;;;
  ;;;; Controller
  ;;;


  (method (get-controller)
    (unless controller
      (set! controller (new-controller)))
    controller)


  (method (new-controller)
    (new Editor-View-Controller self))
  
  
  (method (save)
    (save~ (get-controller)))
  
  
  (method (save-as)
    (save-as~ (get-controller)))
  
  
  (method public virtual (save-all)
    (save-all~ (get-controller)))
  
  
  (method (install-scroller?)
    #f)


  (method (get-moniker)
    (get-moniker~ (get-controller)))


  (method (set-moniker moniker)
    (set-moniker~ (get-controller) moniker))


  (method (load-content moniker)
    (let* ((form (read-from-file moniker))
           (cpnt (instantiate~ form)))
      (set-client cpnt)))
  
  
  (method (verify-reload)
    )
  
  
  (method (reload-moniker moniker)
    )


  (method (get-modified?)
    (get-modified?~ (get-controller)))


  (method (set-modified? state)
    (set-modified?~ (get-controller) state))
  
  
  (method protected virtual (set-controller-modified? state)
    (set-modified?~ (get-controller) state))
  
  
  (method (update-status)
    (update-status~ (get-controller)))
  
  
  (method (update-moniker-time moniker)
    (update-moniker-time~ (get-controller) moniker))
  
  
  (method (confirm-close . rest)
    (confirm-close~ (get-controller)))
  
  
  (method (compare-moniker moniker)
    (let* ((left (new Document-Moniker moniker))
           (right moniker)
           (frame (new-frame Compare-Databases host-visible?: #f left-moniker: left right-moniker: right)))
      (with-cursor :wait
        (function ()
          (compare-trees~ (get-guest~ frame))
          (set-visible?~ frame #t)
          (bring-to-front~ frame)))))


  (method (tool-update tool?)
    )


  (method (console-update console?)
    )


  ;;;
  ;;;; Initialization
  ;;;
  
  
  (method (install rest)
    (nextmethod rest)
    (add-editor-listener (new Event-Handler target: self method-name: 'on-editor)))


  ;;;
  ;;;; Destruction
  ;;;
  
  
  (method (destroy)
    (close~ controller)
    (remove-editor-listener self)
    (close-application-selected)
    (nextmethod))

  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method (new-form)
    )
  
  
  (method (open-form)
    @to-convert-cause-same-name
    (set-client (instantiate~ (open-form))))
  
  
  (method (save-form)
    (with-cursor :wait
      (function ()
        (save)
        (let ((appl (get-application)))
          (when (typed? appl 'Jedi)
            (let* ((form (get-form~ designer))
                   (origin (get-origin~ form)))
              (when (file? origin)
                (edit-document~ appl origin))))))))
  
  
  (method (edit-form)
    (view-component))
  
  
  ;;;
  ;;;; Branches
  ;;;
  
  
  (method public (select-branch branch)
    (when (neq? branch (either (get-active-branch~ client) client))
      (with-cursor :wait
        (function ()
          (process-branch-changing branch)))))
  
  
  (method (change-branch branch)
    (set-active-branch~ (get-client) branch)
    (process-branch-changed branch))
  
  
  ;;;
  ;;;; Components
  ;;;
  
  
  (method (select-component tree control?)
    (when (and control? (get-highlight-edited?~ (locate 'descendants)))
      (let ((component (selected-component~ tree)))
        (if (null? component)
            (bell)
          (edit-component component)))))

  
  ;;;
  ;;;; Properties
  ;;;
  
  
  (method protected (property-change branch component property value undoable?)
    (when undoable?
      (let ((row-class (get-row-class~ component property))
            (property (symbolize-property property)))
        (unless (or (subtype? row-class Info-Row) (find-changed-property branch component property))
          (register-undo~ undoer (list branch component property))))))
  
  
  (method protected (find-changed-property branch component property)
    (let ((property (symbolize-property property))
          (undo-list (get-undo-list~ undoer)))
      (find-if (function (action)
                 (bind (br cpn prop) action
                   (and (eq? br branch)
                        (eq? cpn component)
                        (eq? prop property))))
               undo-list)))
  
  
  (method public (select-property property)
    (process-property-selected property))
  
  
  (method public virtual (show-properties)
    (select-palette Properties-Manager workspace: {} focus?: #t))
  
  
  ;;;
  ;;;; Selection
  ;;;


  (method public (get-selection)
    selection)


  (method public (set-selection new (origin: origin {}) (force-parent?: force-parent? #f) (force?: force? #f) (focus?: focus? #t))
    (let ((appl (get-application))
          (old selection))
      (process-selection-changing old new origin force-parent? force? focus?)
      (process-selection-changed old new origin force-parent? force? focus?)
      (set-application-selected new force?)
      (update-focus-actions~ appl)))
  
  
  (method (set-application-selected selected force?)
    (let ((appl (get-application)))
      (set-selected~ appl self selected force?: force?)))
  
  
  (method (close-application-selected)
    (let ((appl (get-application)))
      (close-selected~ appl self)))
  
  
  (method public (select-all . rest)
    )
  
  
  (method public (unselect-all)
    (set-selection '()))
  
  
  (method public (select component (focus?: focus? #t))
    (if (shift-down?)
        (if (memq? component selection)
            (set-selection (remove component selection) focus?: focus?)
          (set-selection (append selection (list component)) focus?: focus?))
      (if (memq? component selection)
          (set-selection (cons component (remove component selection)) focus?: focus?)
        (set-selection (list component) focus?: focus?))))
  
  
  (method protected virtual (selection-changed old new origin force-parent? focus?)
    (set! selection new)
    (for-each (function (component)
                (when (is? component Component)
                  (let ((surrogate (get-surrogate~ component)))
                    (when surrogate
                      (unselect~ surrogate)))))
              old)
    (for-each (function (component rank)
                (when (is? component Component)
                  (let ((surrogate (get-surrogate~ component)))
                    (when surrogate
                      (select~ surrogate rank focus?)))))
              selection
              (naturals 0 (length selection))))
  
  
  ;; I am not sure this is the simplest solution to branches modifying components that where selected...
  (method (cleanup-selection)
    (when (some? object-destroyed? selection)
      (set-selection (collect-if (function (component)
                                   (not (object-destroyed? component)))
                                 selection))))
  
  
  ;;;
  ;;;; Save
  ;;;
  
  
  (method (save-content moniker)
    (process-saving)
    (save-to~ designer moniker)
    (set-name~ designer (get-client) (get-base~ moniker) branch: {})
    (update-moniker-time moniker)
    (if (not (get-modified?))
        (update-status)
      (set-modified? #f))
    (process-saved))
  
  
  ;; temp patch to make saving in the view designer work
  (method public (save-content-patch moniker)
    (process-saving)
    (designer-save)
    (update-moniker-time moniker)
    (if (not (get-modified?))
        (update-status)
      (set-modified? #f)))
  
  
  (method protected virtual (designer-save)
    (save~ designer))

  
  ;;;
  ;;;; Edit
  ;;;
  
  
  (method (view-component)
    (if (null? designer)
        (bell)
      (edit-form~ designer)))
  
  
  ;;;
  ;;;; Editor
  ;;;
  
  
  (method protected virtual (on-editor evt)
    (case (get-kind~ evt)
      ((:branch-changing)
       (change-branch (get-property~ evt branch:)))
      ((:branch-changed)
       (cleanup-selection))
      ((:selection-changing :saving)
       (when (not-null? selection)
         (let ((cpn (car selection)))
           (when (is? cpn Component)
             (save-component-properties~ cpn designer)))))
       ((:selection-changed)
        (let ((old (get-old~ evt))
              (selection (get-selection~ evt))
              (origin (get-origin~ evt))
              (force-parent? (get-force-parent?~ evt))
              (focus? (get-user-origin?~ evt)))
          (selection-changed old selection origin force-parent? focus?)))))
  
  
  ;;;
  ;;;; Client
  ;;;


  (method public (get-client)
    client)
  
  
  (method public (set-client clt)
    (when (neq? clt client)
      (let ((old client))
        (when old
          (remove-surrogate~ old))
        (set! client clt)
        (set! undoer (essay client (new Editor-Undoer self)))
        (client-update)
        (process-client-change old client)
        (edit-component client)
        (client-updated))))
  
  
  (method protected virtual (client-update)
    (install-client-surrogate))
  
  
  (method protected virtual (client-updated)
    )
  
  
  (method protected virtual (install-client-surrogate)
    )
  
  
  ;;;
  ;;;; Designer
  ;;;
  
  
  (method protected virtual (get-designer-class)
    Designer)
  
  
  (method public (get-designer)
    designer)
  
  
  (method public (get-reference)
    (essay designer (get-reference~ designer)))
  
  
  (method public (edit-component component (form: form (get-edited-form component)))
    (when (neq? component (get-reference))
      (let ((old designer))
        (uninstall-current-designer)
        (when component
          (install-current-designer component form))
        (process-designer-change old designer)
        (update-status))))
  
  
  (method (get-edited-form component)
    (when component
      (either (get-form~ component)
              (get-self-form~ (class-of component)))))
  
  
  (method protected virtual (install-current-designer component form)
    (set! designer (new (get-designer-class) form: form reference: component))
    (add-designer-listener~ designer (new Event-Handler target: self method-name: 'on-designer))
    (install-designer~ client designer))
  
  
  (method protected virtual (uninstall-current-designer)
    (when designer
      (remove-designer-listener~ designer self)
      (when client
        (uninstall-designer~ client designer))
      (set! designer {})))
  
  
  (method protected virtual (on-designer evt)
    (let ((kind (get-kind~ evt)))
      (case kind
        ((:property-change)
         (property-change (get-property~ evt branch:) (get-property~ evt component:) (get-property~ evt property:) (get-property~ evt value:) (get-property~ evt undoable?:))
         (set-controller-modified? #t))
        ((:child-add :child-remove :send-before)
         (set-controller-modified? #t)))))
  
  
  ;;;
  ;;;; Listeners
  ;;;
  
  
  (method public (add-editor-listener listener)
    (set! listeners (add-listener listener listeners)))
  
  
  (method public (remove-editor-listener listener)
    (set! listeners (remove-listener listener listeners)))

  
  (method (process-client-change old client)
    (when listeners
      (let ((evt (new Editor-Event :client-change self :old old client: client)))
        (for-each (function (listener)
                    (invoke~ listener self evt))
                  listeners))))

  
  (method (process-designer-change old designer)
    (when listeners
      (let ((evt (new Editor-Event :designer-change self :old old designer: designer)))
        (for-each (function (listener)
                    (invoke~ listener self evt))
                  listeners))))

  
  (method public (process-branch-changing branch)
    (when listeners
      (let ((evt (new Editor-Event :branch-changing self branch: branch)))
        (for-each (function (listener)
                    (invoke~ listener self evt))
                  listeners))))

  
  (method public (process-branch-changed branch)
    (when listeners
      (let ((evt (new Editor-Event :branch-changed self branch: branch)))
        (for-each (function (listener)
                    (invoke~ listener self evt))
                  listeners))))

  
  (method public (process-selection-changing old selection origin force-parent? force? user-origin?)
    (when listeners
      (let ((evt (new Selection-Event :selection-changing self old selection origin: origin force-parent?: force-parent? force?: force? user-origin?: user-origin?)))
        (for-each (function (listener)
                    (invoke~ listener self evt))
                  listeners))))

  
  (method public (process-selection-changed old selection origin force-parent? force? user-origin?)
    (when listeners
      (let ((evt (new Selection-Event :selection-changed self old selection origin: origin force-parent?: force-parent? force?: force? user-origin?: user-origin?)))
        (for-each (function (listener)
                    (invoke~ listener self evt))
                  listeners))))

  
  (method public (process-property-selected property)
    (when listeners
      (let ((evt (new Editor-Event :property-selected self property: property)))
        (for-each (function (listener)
                    (invoke~ listener self evt))
                  listeners))))

  
  (method public (process-saving)
    (when listeners
      (let ((evt (new Editor-Event :saving self)))
        (for-each (function (listener)
                    (invoke~ listener self evt))
                  listeners))))

  
  (method public (process-saved)
    (when listeners
      (let ((evt (new Editor-Event :saved self)))
        (for-each (function (listener)
                    (invoke~ listener self evt))
                  listeners))))
  
  
  ;;;
  ;;;; Rights
  ;;;
  
  
  (method public (get-rights)
    rights)
  
  
  (method public (set-rights value)
    (set! rights value))
  
  
  ;;;
  ;;;; Presentation
  ;;;
  
  
  (method public virtual (editor-title)
    (let ((reference (get-reference)))
      (if (null? reference)
          "Component Editor"
        (format "Component Editor - {s}" (type-name (class-of reference)))))))


;;;
;;;; Editor-Undoer
;;;


(class Editor-Undoer extends Undoer
  
  
  (method (play-action action)
    (unimplemented 'play-action))))
