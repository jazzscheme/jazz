;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Enumeration List Entry
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2007
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.designer.entry.Enumeration-List-Entry jazz


(import (jazz.jml)
        (jazz.library))


(class Enumeration-List-Entry extends Property-Entry
  
  
  (form
    (<install>
      (<Border-View>                  name: border  border-type: edge
        (<Scroller-View>                            hscroll?: #t vscroll?: #t
          (<!>                        name: content layout-type: fill
            (<Tree-Header>                          shown?: #f style: document
              (<!>                    name: content
                (<Tree-View>          name: tree    show-header?: #f filled-column: entry portfolio: :icons return-press-handler: {Event-Handler :form on-return-press} escape-press-handler: {Event-Handler :form on-escape-press}
                  (<Tree-Node-Column> name: entry   controls?: #f toplevel-controls?: #f width: 200)))))))))
  
  
  ;;;
  ;;;; Setup
  ;;;
  
  
  (method protected (setup client key)
    (let ((components (get-children~ (child~ (get-creator~ client) key)))
          (tree (locate 'tree)))
      (with-update-locked~ tree
        (function dynamic ()
          (remove-every-row~ tree)
          (for-each (function dynamic (component)
                      (let* ((name (get-name~ component))
                             (title name)
                             (border 0)
                             (layout (new Layout-View :layout-type 'fill :layout-insets (new Rect 4 border border border)))
                             (color {Color name: Black})
                             (font (if (eq? size 'filled) {Font name: Ansi-Bold} {Font name: Ansi-Var}))
                             (checkbox (new Check-Box font: font :parent layout title: title color: color user-data: name)))
                        (add-row~ tree children: (list layout) user-data: checkbox)))
                    components)))
      (patch-tree)))
  
  
  ;; this is a super patch until the big tree cleanup
  (method public (patch-tree)
    (let ((tree (locate 'tree)))
      (for-each-visible-row~ tree
       (function dynamic (row rank)
         (layout-drawing~ row)))))
  
  
  ;;;
  ;;;; Value
  ;;;

  
  (method (get-value)
    (let ((fact (new List-Factory)))
      (for-each-checkbox
        (function dynamic (row checkbox name)
          (when (get-checked?~ checkbox)
            (put~ fact name))))
      (get-output~ fact)))
  
  
  (method (set-value value)
    (for-each-checkbox
      (function dynamic (row checkbox name)
        (let ((checked? (member? name value)))
          (set-checked?~ checkbox checked?)))))
  
  
  (method (get-modified?)
    (for-each-checkbox
      (function dynamic (row checkbox name)
        (when (get-modified?~ checkbox)
          (return #t))))
    #f)
  
  
  (method (set-modified? value)
    (for-each-checkbox
      (function dynamic (row checkbox name)
        (set-modified?~ checkbox value))))
  
  
  ;;;
  ;;;; Utility
  ;;;

  
  (method (for-each-checkbox proc)
    (let ((tree (locate 'tree)))
      (for-each-row~ tree
        (function dynamic (row rank)
          (let ((checkbox (get-user-data~ row)))
            (when (is? checkbox Check-Box)
              (let ((name (get-user-data~ checkbox)))
                (proc row checkbox name))))))))))
