;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Foreign List Entry
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2007
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.designer.entry.Foreign-List-Entry jazz


(import (jazz.designer)
        (jazz.jml)
        (jazz.ui)
        (jazz.literals)
        (jazz.library)
        (jazz.utilities))


(class Foreign-List-Entry extends Property-Entry
  

  (property list?             initialize true  getter get-list?             setter set-list?)
  (property allow-duplicates? initialize false getter get-allow-duplicates? setter set-allow-duplicates?)
  (property presenter         initialize {}    getter get-presenter         setter set-presenter)
  (property all               initialize '()   getter get-all               setter set-all)
  (property value             initialize {}    getter get-value             setter set-value)
  
  
  (slot to initialize '())

  
  (form
    (<install>                                          size: {Dimension 352 320}
      (<Border-View>                  name: from-border border-type: edge
        (<Scroller-View>                                hscroll?: #t vscroll?: #t
          (<!>                        name: content     layout-type: fill
            (<Tree-Header>                              shown?: #f style: document
              (<!>                    name: content
                (<Tree-View>          name: from-tree   show-header?: #f filled-column: from-entry selection-mode: row multiple-selection?: #t show-unfocused-selection?: #f portfolio: :icons selection-handler: {Event-Handler form: on-selection-change} double-click-handler: {Event-Handler form: on-double-click} tab-press-handler: {Event-Handler form: on-tab-press} return-press-handler: {Event-Handler form: on-return-press} escape-press-handler: {Event-Handler form: on-escape-press}
                  (<Tree-Node-Column> name: from-entry  controls?: #f toplevel-controls?: #f display-images?: #f width: 200)))))))
      (<Push-Button>                  name: add         title: "Add >>" size: {Dimension 80 22} action-handler: {Event-Handler form: on-add})
      (<Push-Button>                  name: remove      title: "<< Remove" size: {Dimension 80 22} action-handler: {Event-Handler form: on-remove})
      (<Border-View>                  name: to-border   border-type: edge
        (<Scroller-View>                                hscroll?: #t vscroll?: #t
          (<!>                        name: content     layout-type: fill
            (<Tree-Header>                              shown?: #f style: document
              (<!>                    name: content
                (<Tree-View>          name: to-tree     show-header?: #f filled-column: to-entry selection-mode: row multiple-selection?: #t show-unfocused-selection?: #f portfolio: :icons selection-handler: {Event-Handler form: on-selection-change} double-click-handler: {Event-Handler form: on-double-click} tab-press-handler: {Event-Handler form: on-tab-press} return-press-handler: {Event-Handler form: on-return-press} escape-press-handler: {Event-Handler form: on-escape-press}
                  (<Tree-Node-Column> name: to-entry    controls?: #f toplevel-controls?: #f display-images?: #f width: 200)))))))))
  
  
  (method protected (host-install)
    (let ((tree (locate 'from-tree)))
      (focus-and-select~ tree)))

  
  ;;;
  ;;;; Dialog
  ;;;
  
  
  @convert-dialog
  (method meta (dialog-class)
    Foreign-List-Entry-Dialog)
  

  @convert-dialog
  (class meta Foreign-List-Entry-Dialog extends Host-Dialog
    
    
    (form
      (<install> title: "Choose Values" position: {Point 450 300} size: {Dimension 252 320})))
  
  
  (method public (get-result)
    (let ((value (to->value)))
      (if list?
          (sort < value)
        value)))

  
  ;;;
  ;;;; Access
  ;;;


  (method public (get-presenter)
    presenter)


  (method public (set-presenter value)
    (set! presenter value)
    (update))


  (method public (get-all)
    all)


  (method public (set-all value)
    (set! all value)
    (update))

  
  (method (get-value)
    value)
  
  
  (method (set-value v)
    (set! value v)
    (set! to (value->to))
    (update))


  (method public (get-list?)
    list?)


  (method public (set-list? value)
    (set! list? value)
    (set! to (value->to))
    (set-title~ (locate 'add) (if list? "Add >>" "Choose >>"))
    (set-multiple-selection?~ (locate 'from-tree) list?))


  (method public (get-allow-duplicates?)
    allow-duplicates?)


  (method public (set-allow-duplicates? value)
    (set! allow-duplicates? value))
  
  
  ;; assume nullable? = true for now
  (method (value->to)
    (if list?
        value
      (if (null? value)
          value
        (list value))))
  
  
  ;; assume nullable? = true for now
  (method (to->value)
    (if list?
        to
      (if (null? to)
          to
        (car to))))
  
  
  ;;;
  ;;;; Setup
  ;;;
  
  
  (method protected (setup client key)
    (let ((foreign (child~ (get-creator~ client) key)))
      (set-all (map (function dynamic (component)
                      (get-name~ component))
                    (get-children~ foreign)))))
  
  
  ;;;
  ;;;; Layout
  ;;;
  
  
  (method (layout)
    (let* ((size (get-size))
           (width [width size])
           (height [height size])
           (from (locate 'from-border))
           (to (locate 'to-border))
           (tree-width (quotient (- width 100) 2))
           (buttons-pos (quotient (- height 52) 2)))
      (set-position~ from (new Point 0 0))
      (set-size~ from (new Dimension tree-width height))
      (set-position~ (locate 'add) (new Point (+ tree-width 10) buttons-pos))
      (set-position~ (locate 'remove) (new Point (+ tree-width 10) (+ buttons-pos 30)))
      (set-position~ to (new Point (- width tree-width) 0))
      (set-size~ to (new Dimension tree-width height))))
  
  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method (on-selection-change evt)
    (update-buttons))
  
  
  (method (on-double-click evt)
    (let ((sender (get-sender~ evt)))
      (case (get-name~ sender)
        ((from-tree) (when (get-enabled?~ (locate 'add)) (on-add evt)))
        ((to-tree) (when (get-enabled?~ (locate 'remove)) (on-remove evt))))))
  
  
  (method (on-add evt)
    (let* ((from-tree (locate 'from-tree))
           (to-tree (locate 'to-tree))
           (values (get-selected-data~ from-tree)))
      (set! to (if list? (append to values) values))
      (update)
      (if allow-duplicates?
          (set-selection~ from-tree (user-data-indexes~ from-tree values))
        (acquire-focus~ to-tree)
        (set-selection~ to-tree (user-data-indexes~ to-tree values)))
      (set-modified? true)))
  
  
  (method (on-remove evt)
    (let* ((from-tree (locate 'from-tree))
           (to-tree (locate 'to-tree))
           (values (get-selected-data~ to-tree)))
      (set! to (difference to values))
      (update)
      (unless allow-duplicates?
        (acquire-focus~ from-tree)
        (set-selection~ from-tree (user-data-indexes~ from-tree values)))
      (set-modified? true)))
  
  
  (method (update-buttons)
    (let* ((from-tree (locate 'from-tree))
           (from? (get-selection~ from-tree))
           (to-tree (locate 'to-tree))
           (to? (get-selection~ to-tree)))
      (set-enabled?~ (locate 'add) from?)
      (set-enabled?~ (locate 'remove) to?)))
  
  
  (method (on-tab-press evt)
    (let ((sender (get-sender~ evt)))
      (case (get-name~ sender)
        ((from-tree)
          (focus-and-select~ (locate 'to-tree)))
        ((to-tree)
          (focus-and-select~ (locate 'from-tree))))))
  
  
  ;; Should really be generic in the Dialog class
  (method (on-return-press evt)
    (let ((dialog (get-host)))
      (end-modal~ dialog (get-modal-result~ dialog))))
  
  
  ;; Should really be generic in the Dialog class
  (method (on-escape-press evt)
    (let ((dialog (get-host)))
      (cancel-modal~ dialog)))
  
  
  ;;;
  ;;;; Update
  ;;;
  
  
  (method (update)
    (update-from)
    (update-to)
    (update-buttons))
  
  
  (method (update-from)
    (let ((from-tree (locate 'from-tree)))
      (with-update-locked~ from-tree
        (function dynamic ()
          (remove-every-row~ from-tree)
          (for-each (function dynamic (object)
                      (let ((title (present object)))
                        (add-row~ from-tree :children (list (new Tree-Node :title title)) :user-data object)))
                    (sort < (if allow-duplicates? all (difference all to test: equal?))))))))
  
  
  (method (update-to)
    (let ((to-tree (locate 'to-tree)))
      (with-update-locked~ to-tree
        (function dynamic ()
          (remove-every-row~ to-tree)
          (for-each (function dynamic (object)
                      (let ((title (present object)))
                        (add-row~ to-tree :children (list (new Tree-Node :title title)) :user-data object)))
                    (sort < to))))))
  
  
  (method (present object)
    (if (null? presenter)
        object
      (presenter object)))))
