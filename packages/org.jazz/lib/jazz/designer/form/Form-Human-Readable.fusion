;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Form Printer
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2007
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.designer.form.Form-Human-Readable jazz


(import (jazz.designer)
        (jazz.literals)
        (jazz.library)
        (jazz.utilities))


(class Form-Human-Readable extends Object
  
  
  (slot class-form?)
  (slot max-order)
  
  
  ;;;
  ;;;; Initialization
  ;;;
  
  
  (method (initialize . rest)
    (bind-keywords ((class-form? true)) rest
      (nextmethod)
      (set! [class-form? self] class-form?)))
  
  
  ;;;
  ;;;; Preferences
  ;;;
  
  
  (definition Default-Preferences
    (form>>
      (<Designer-Preferences>          name: designer aligned-properties: (:title :position :size)
        (<Indented-Column-Preferences> name: form     indentation: 2 use-contouring?: #f border: 0)
        (<Indented-Column-Preferences> name: action   minimum: 6 use-contouring?: #t border: 3)
        (<Indented-Column-Preferences> name: model    use-contouring?: #t border: 3)
        (<Indented-Column-Preferences> name: name     border: 3))))
  
  
  (method (preferences)
    (either (get-preferences '(tools designer) :error? false)
            (instantiate~ Default-Preferences)))
  
  
  (method (get-aligned-properties)
    (get-aligned-properties~ (preferences)))
  
  
  ;;;
  ;;;; Printing
  ;;;


  (method public (print-form form base printer)
    (print-form-at form (+ base 1) 0 0 0 0 printer true)
    (format printer "{%}"))


  (method (print-form-at form base order form-level level branched-level printer toplevel?)
    (let* ((pref (preferences))
           (display (new Columns-Display))
           (form-column (new-column~ (child~ pref 'form) display))
           (separator-column (new Display-Column display))
           (aligned-columns (make-aligned-columns (get-aligned-properties~ pref) display))
           (properties-column (new Sequenced-Column display)))
      (add-columns~ display (list form-column separator-column))
      (add-columns~ display (map cdr aligned-columns))
      (add-column~ display properties-column)
      (set-border~ form-column base)
      (set! max-order 0)
      (display-form form order form-level level branched-level display form-column separator-column aligned-columns properties-column)
      (let ((action-column (second (get-columns~ display))))
        (set-use-contouring?~ form-column (= max-order 0))
        (set-border~ action-column (if (= max-order 0) 10 3)))
      (newline~ display)
      (print-to~ display printer)))
  
  
  (method (make-aligned-columns properties display)
    (map (function dynamic (property)
           (cons property (new Aligned-Column display :border-after 1 :alignment 'left)))
         properties))
  
  
  (method (get-header-columns order display separator-column)
    (let* ((rank (+ 1 (* order 3)))
           (columns (tail (get-columns~ display) rank)))
      (if (neq? (car columns) separator-column)
          columns
        (let ((pref (preferences)))
          (add-column~ display (new-column~ (child~ pref 'action) display) :before separator-column)
          (add-column~ display (new-column~ (child~ pref 'model) display) :before separator-column)
          (add-column~ display (new-column~ (child~ pref 'name) display) :before separator-column)
          (tail (get-columns~ display) rank)))))

  
  (method (display-form form order form-level level branched-level display form-column separator-column aligned-columns properties-column)
    (bind (action-column model-column name-column) (get-header-columns order display separator-column)
      (set! max-order (max max-order order))
      (bind-values (action model name properties children) (get-parts~ form)
        (let ((form-name (type-name (class-of form))))
          (output~ form-column (format "{a}" form-name) form-level))
        (display-header action model name level display action-column model-column name-column)
        (display-properties properties order form-level level branched-level display form-column separator-column aligned-columns properties-column)
        (when children
          (display-children children order form-level level branched-level display form-column separator-column aligned-columns properties-column))
        (output~ properties-column ""))))
  
  
  (method (display-header action model name level display action-column model-column name-column)
    (output~ action-column (format "{a}" action) level)
    (output~ model-column model level)
    (output~ name-column (essay name (format "{s}" name)) level))
  
  
  (method (display-properties properties order form-level level branched-level display form-column separator-column aligned-columns properties-column)
    (output~ separator-column " ")
    (let ((client-form nil)
          (first? true))
      (for-each-property (function dynamic (property value)
                           (if (eq? property :client-form)
                               (set! client-form value)
                             (let* ((pair (assq property aligned-columns))
                                    (column (if pair (cdr pair) properties-column)))
                               (when (null? pair)
                                 (if first?
                                     (set! first? false)
                                   (output~ column " ")))
                               (with ((presented (present-property property value)))
                                 (let ((outputed (format "{a} {a}" property presented)))
                                   (output~ column outputed))))))
                         (sort-property-list properties)))
      (when client-form
        (when (not first?)
          (output~ properties-column " "))
        (output~ properties-column ":client-form")
        (newline~ display)
        (display-form client-form (+ order 1) (+ form-level 2) branched-level 0 display form-column separator-column aligned-columns properties-column))
      (output~ properties-column ""))
    
  
  (method (display-children children order form-level level branched-level display form-column separator-column aligned-columns properties-column)
    (for-each (function dynamic (child)
                (newline~ display)
                (let ((branch? (= (get-model-name~ child) 'Branch)))
                  (display-form child order (+ form-level 1) (+ level 1) (if branch? branched-level (+ branched-level 1)) display form-column separator-column aligned-columns properties-column)))
              children))

  
  (method (present-property property value)
    (cond ((and (eq? property :position) (is? value Point)) (present-point value))
          ((and (eq? property :size) (is? value Dimension)) (present-dimension value))
          (else (->string value :reader))))
  
  
  (method (present-point point)
    (format "~{Point {a :width 4 :justify :right} {a :width 4 :justify :right}}" [h point] [v point]))
  
  
  (method (present-dimension dimension)
    (format "~{Dimension {a :width 4 :justify :right} {a :width 4 :justify :right}}" [width dimension] [height dimension]))))
