;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Date Row
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2007
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.designer.row.Date-Row jazz


(import (jazz.designer)
        (jazz.library)
        (jazz.ui.view)
        (jazz.utilities))


(class Date-Row extends Combo-Row
  
  
  (slot multiple-selection?)


  ;;;
  ;;;; Initialization
  ;;;


  (method (initialize . rest)
    (bind-keywords ((multiple-selection? false) . others) rest
      (apply nextmethod others)
      (set-multiple-selection? multiple-selection?)
      (set-kind 'choose)))
  
  
  ;;;
  ;;;; Access
  ;;;
  
  
  (method public (get-multiple-selection?)
    multiple-selection?)
  
  
  (method public (set-multiple-selection? value)
    (set! multiple-selection? value))
  
  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method (combo-choose)
    (let ((date (get-modal Calendar-Dialog :initial-date (get-edited-value) :multiple-selection? multiple-selection?)))
      (set-edited-value date)
      (enter-edited-value)
      (focus-editor)
      true))
  
  
  ;;;
  ;;;; Presentation
  ;;;
  
  
  (method (present date)
    (if (null? date)
        "null"
      (present-date~ date)))
  
  
  ;;;
  ;;;; Edition
  ;;;
  
  
  (method (get-edited-value)
    (let ((string (get-string-content~ (get-body~ editor))))
      (if (or (empty-string? string) (= string "null"))
          null
        (parse-date~ Date string))))
  
  
  (method (set-edited-value value)
    (set-string-content~ (get-body~ editor) (present value)))))
