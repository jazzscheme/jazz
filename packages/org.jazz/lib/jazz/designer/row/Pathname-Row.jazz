;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Pathname Row
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2007
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.designer.row.Pathname-Row jazz


(import (jazz.designer)
        (jazz.jml)
        (jazz.ui)
        (jazz.library)
        (jazz.utilities))


(class Pathname-Row extends Value-Row


  (property display-logical? <void> getter get-display-logical? setter set-display-logical?)


  ;;;
  ;;;; Initialization
  ;;;


  (method (initialize . rest)
    (bind-keywords ((display-logical? {}) . others) rest
      (apply nextmethod others)
      (set! editor (new (editor-class) value-row: self))
      (set-display-logical? display-logical?)))
  
  
  (method (editor-class)
    Pathname-Row-Editor)
  
  
  ;;;
  ;;;; Access
  ;;;


  (method public (get-display-logical?)
    (get-display-logical?~ editor))


  (method public (set-display-logical? value)
    (set-display-logical?~ editor value))
  
  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method (enter-pathname-value value)
    (enter-value value))
  
  
  ;;;
  ;;;; Presentation
  ;;;
  
  
  (method (present value)
    (present-moniker~ editor value))
  
  
  ;;;
  ;;;; Edition
  ;;;
  
  
  (method (close-editor?)
    #f)
  
  
  (method (get-edited-value)
    (get-moniker~ editor))
  
  
  (method (set-edited-value value)
    (set-moniker~ editor value :update? #f))
  
  
  (method (get-edited-modified?)
    (get-modified?~ editor))
  
  
  (method (set-edited-modified? flag)
    (set-modified?~ editor flag))
  
  
  (method (show-cursor)
    (show-text-cursor~ (get-text~ editor)))
  
  
  (method (focused-editor)
    (get-text~ editor)))


;;;
;;;; Pathname-Row-Editor
;;;


(class Pathname-Row-Editor extends Moniker-Browser
  
  
  (form
    (<install>
      (<!>     name: scroller
        (<!>   name: content
          (<!> name: text     left-padding: 1 top-padding: 1)))))
  
  
  (property value-row initialize {} getter get-value-row setter set-value-row)
  
  
  @convert
  (method (form-model form)
    (case (get-name~ form)
      ((text) Pathname-Value-Text-View)
      (else (nextmethod form))))
  
  
  (method public (get-value-row)
    value-row)
  
  
  (method public (set-value-row value)
    (set! value-row value)
    (set-value-row~ (locate 'text) value-row))
  
  
  (method (moniker-update)
    @convert
    (enter-pathname-value (get-moniker))))


;;;
;;;; Pathname-Value-Text-View
;;;


@convert
(class Pathname-Value-Text-View extends Moniker-Text-View
  
  
  (property value-row initialize {} getter get-value-row setter set-value-row)
  
  
  ;;;
  ;;;; Access
  ;;;
  
  
  (method public (get-value-row)
    value-row)
  
  
  (method public (set-value-row value)
    (set! value-row value))
  
  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method (up-arrow-press modifiers)
    (editor-up-arrow~ value-row modifiers))
  
  
  (method (down-arrow-press modifiers)
    (editor-down-arrow~ value-row modifiers))
  
  
  (method (document-menu)
    {})
  
  
  ;;;
  ;;;; Focus
  ;;;
  
  
  (method (focus-validate view)
    (editor-focus-validate~ value-row view))
  
  
  (method (focus-lose window view)
    (nextmethod window view)
    (editor-focus-lose~ value-row window view))
  
  
  (method (focus-master)
    (get-tree~ value-row))))
