;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Component Catalogs
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2007
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.doc.catalog.Component-Catalog jazz


(import (jazz.doc)
        (jazz.library)
        (jazz.utilities))


(class Component-Catalog extends Catalog
  

  (slot client)
  (slot definitions-index)
  (slot references-index)


  (method (initialize name client)
    (nextmethod name)
    (set! [client self] client)
    (set! [definitions-index self] (new-hashtable eq?))
    (set! [references-index self] (new-hashtable eq?))
	(update-catalog-indexes))


  ;;;
  ;;;; Access
  ;;;
  
  
  (method public (get-client)
    client)
  
  
  (method public (get-definitions-index)
    definitions-index)
  
  
  (method public (get-references-index)
    references-index)
  
  
  (method public (get-statistics)
    (let ((d (hashtable-length definitions-index))
          (r (hashtable-length references-index)))
      (format "{a} definition{a}, {a} reference{a}"
              d (format-plural d)
              r (format-plural r))))
  
  
  (method (hashtable-info hashtable)
    (format "{s} entries"
            (hashtable-length hashtable)))


  ;;;
  ;;;; Update
  ;;;

  
  (method (update-catalog-indexes)
    (set-catalog~ client self)
    (for-each-descendant~ client
      (function dynamic (child level)
        (let ((name (get-name~ child)))
          (when name
            (hash-add definitions-index name child))))))


  ;;;
  ;;;; Definitions
  ;;;
  
  
  (method (get-definitions name)
    (hash-ref definitions-index name))
  
  
  (method (get-references name)
    (hash-ref references-index name))))
