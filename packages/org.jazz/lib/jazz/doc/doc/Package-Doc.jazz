;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Packages Docs
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2007
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.doc.doc.Package-Doc jazz


(import (jazz.doc)
        (jazz.library)
        (jazz.utilities))


(class Package-Doc extends Category-Doc
  
  
  (method (generate-html)
    (nextmethod)
    (for-each (function dynamic (child)
                (when (is? child Category-Doc)
                  (generate-html~ child)))
              children))
  
  
  (method (print-children-html formatter printer)
    (let ((categories (collect-type Category-Doc children)))
      (print-categories-index "Categories Index" categories formatter printer)))
  
  
  (method (print-categories-index title categories formatter printer)
    (when categories
      (format printer "{%}")
      (format printer "<H2>{a}</H2>{%}" title)
      (format printer "{%}")
      (format printer "<DL>{%}")
      (for-each (function dynamic (child)
                  (let ((name (get-name~ child)))
                    (format printer "<DT><IMG src=\"images/red-ball-small.gif\" width=6 height=6> <A href=\"{a}.html\"><B>{a}</B></A>{%}" name name)))
                categories)
      (format printer "</DL>{%}")))


  ;;;
  ;;;; Designer
  ;;;
  
  
  @convert-descriptor
  (method meta (get-class-image)
    {Bitmap-Resource "Package"})
  
  
  (method (get-categorized-properties)
    '(package-name extends))))
