;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Units Docs
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2007
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.doc.doc.Unit-Doc jazz


(import (jazz.doc)
        (jazz.library)
        (jazz.utilities))


(class Unit-Doc extends Element-Doc
  
  
  (property extends initialize {} accessors generate)
    
  
  (slot catalog)

  
  ;;;
  ;;;; Access
  ;;;


  (method (get-catalog)
    catalog)
  
  
  (method (set-catalog cat)
    (set! catalog cat)
    (for-each (function dynamic (child)
                (set-catalog~ child cat))
              children))
  
  
  ;;;
  ;;;; Catalog
  ;;;
  
  
  (method (update-indexes definitions-index references-index)
    (nextmethod definitions-index references-index)
    (for-each (function dynamic (child)
                (update-indexes~ child definitions-index references-index))
              children))
  
  
  (method (print-catalog level printer)
    (format printer "{%}{_ :v}~{{s} {s} {s} {s}"
            (* level 2)
            (identifier-name (type-name (class-of self)))
            name extends doc)
    (for-each (function dynamic (child)
                (print-catalog~ child (+ level 1) printer))
              children)
    (format printer "}"))


  ;;;
  ;;;; Presentation
  ;;;
  
  
  (method (present)
    (format "{a}{%}{%}{a}" name doc))


  ;;;
  ;;;; HTML
  ;;;
    
  
  (method (print-html formatter printer)
    (let ((printer (new Unit-Doc-HTML-Printer self formatter printer)))
      (print-html~ printer)
      printer))


  ;;;
  ;;;; Designer
  ;;;
  
  
  @convert-descriptor
  (method meta (property-presentation property)
    (case (field-name property)
      ((extends) "Extends")
      (else (nextmethod property))))
  
  
  (method (sort-components?)
    true))


(class Unit-Doc-HTML-Printer extends HTML-Printer
  
  
  (method (print-html)
    (with-document name
      (function dynamic ()
        (for-each (function dynamic (line)
                    (format printer "{f}{%}" line formatter)
                    (format printer "{%}"))
                  doc)
        (format printer "<DL>")
        (format printer "<DD>")
        (format printer "</DL>")
        (print-children-html))
      :header? true
      :header-level 1
      :style-sheet "Styles/Jazz.css"))
  
  
  (method protected virtual (print-children-html)
    (let* ((methods (collect-type Method-Doc children))
           (inside  (collect-if (function dynamic (doc) (not (get-package-name~ doc))) methods))
           (outside (collect-if (function dynamic (doc) (get-package-name~ doc)) methods)))
      (print-group-index "Methods Index" inside)
      (print-group-index "Related Methods Index" outside)
      (print-group "Methods" inside)
      (print-group "Related Methods" outside)))
  
  
  (method (print-group-index title group)
    (when group
      (format printer "{%}")
      (format printer "<H2>{a}</H2>{%}" title)
      (format printer "{%}")
      (format printer "<DL>{%}")
      (for-each (function dynamic (child)
                  (let ((name (get-name~ child)))
                    (format printer "<DT><IMG src=\"images/red-ball-small.gif\" width=6 height=6> <A href=\"#{a}\"><B>{a}</B></A>{%}" name name)))
                group)
      (format printer "</DL>{%}")))
  
  
  (method (print-group title group)
    (when group
      (format printer "{%}")
      (format printer "<H2>{a}</H2>{%}" title)
      (format printer "{%}")
      (for-each (function dynamic (child)
                  (print-content~ child formatter printer))
                group)))))
