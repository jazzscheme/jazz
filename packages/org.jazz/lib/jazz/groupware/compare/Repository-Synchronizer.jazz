;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Synchronizing with a Repository
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2007
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.groupware.compare.Repository-Synchronizer jazz


(import (jazz.groupware)
        (jazz.library)
        (jazz.utilities))


(class Repository-Synchronizer extends Directory-Comparer
  
  
  ;;;
  ;;;; Feedback
  ;;;
  
  
  (method (leaf-feedback leaf1 leaf2 feedback)
    (feedback (get-moniker~ leaf1) (get-moniker~ leaf2)))
  
  
  ;;;
  ;;;; Item
  ;;;
    
  
  (method (create-item moniker)
    (make-item moniker (get-name~ moniker) {}))

  
  (method (get-item-content item kind)
    (let ((moniker (get-moniker~ item)))
      (if (is-not? moniker Repository-Moniker)
          (nextmethod item kind)
        (let ((children (get-children~ moniker nodes?: (= kind 'nodes) leaves?: (= kind 'leaves))))
          (map (function dynamic (moniker)
                 (make-item moniker
                            (get-name~ moniker)
                            {}))
               children)))))
  
  
  (method (get-item-type item)
    ;; should dispatch to the item moniker...
    (cond ((is? (get-moniker~ item) Roaming-Moniker)
           (get-item-type~ (get-moniker~ item)))
          ((is? (get-moniker~ item) Repository-Moniker)
           (if (get-project~ (get-moniker~ item))
               'node
             'leaf))
          (else
           (nextmethod item))))
  
  
  ;;;
  ;;;; Utilities
  ;;;
  
  
  (method (new-entry parent kind left left-value right right-value)
    (unless (and (= kind 'leaf) left right)
      (nextmethod parent kind left left-value right right-value)))
  
  
  (method (different? file item check-algorithm)
    (is-different~ (get-moniker~ item) (get-moniker~ file)))
  
  
  (method (collect-item? item content ignored-nodes ignored-leaves ignored-extensions)
    (and (nextmethod item content ignored-nodes ignored-leaves ignored-extensions)
         (let ((name (get-name~ item)))
           (/= name "vssver.scc"))))))
