;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; CSS Parser
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2007
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.html.css.CSS-Parser jazz


(import (jazz.html)
        (jazz.library)
        (jazz.utilities))


(class CSS-Parser extends File-Parser
  
  
  (method (parse file time)
    (let ((definitions (parse-definitions file)))
      (new CSS-File-Entry catalog file time definitions)))
  
  
  (method (parse-definitions file)
    (let ((lines (load-lines~ file))
          (fact (new List-Factory)))
      (for-each (function (line no)
                  (let ((entry (parse-line line no)))
                    (when entry
                      (put~ fact entry))))
                lines
                (naturals 0 (length lines)))
      (get-output~ fact)))
  
  
  (method (parse-line line no)
    (let ((col (skip-whitespace line)))
      (when (= col 0)
        (let ((start col)
              (col (skip css-constituent? line start: col)))
          (when (> col start)
            (let* ((end col)
                   (selector (subseq line start end)))
              (receive (name offset) (split-selector selector)
                (new CSS-Entry name no (+ start offset)))))))))
  
  
  (method (split-selector selector)
    (let ((pos (find selector #\period)))
      (cond ((null? pos)
             (values selector 0))
            ((= pos 0)
             (values (subseq selector 1) 1))
            (else
             (values (subseq selector (+ pos 1)) (+ pos 1))))))
  
  
  (method (css-constituent? char)
    (or (alphanumeric? char)
        (= char #\period)))))
