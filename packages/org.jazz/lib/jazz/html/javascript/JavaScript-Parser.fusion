;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; JavaScript Parser
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2007
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.html.javascript.JavaScript-Parser jazz


(import (jazz.html)
        (jazz.library)
        (jazz.utilities))


(class JavaScript-Parser extends File-Parser
  
  
  (method (parse file time)
    (new JavaScript-File-Entry catalog file time (parse-definitions file)))
  
  
  (method (parse-definitions file)
    (let ((lines (load-lines~ file))
          (fact (new List-Factory)))
      (for-each (function dynamic (line n)
                  (let ((var (find-variable line n)))
                    (when var
                      (put~ fact var)))
                  (let ((fn (find-function line n)))
                    (when fn
                      (put~ fact fn))))
                lines
                (naturals 0 (length lines)))
      (get-output~ fact)))
  

  ;;;
  ;;;; Variable
  ;;;
  
  
  (constant Var
    "var")
  
  
  (method (find-variable line n)
    (let ((len (length line))
          (pos (search Var line)))
      (when (and pos (= pos 0))
        (let* ((start (length Var))
               (col (skip-whitespace line start: start)))
          (when (> col start)
            (let* ((start col)
                   (col (skip cpp/java-constituent? line start: start)))
              (when (> col start)
                (new JavaScript-Variable-Entry (subseq line start col) n start))))))))
  

  ;;;
  ;;;; Function
  ;;;
  
  
  (constant Function
    "function")
  
  
  (method (find-function line n)
    (let ((len (length line))
          (pos (search Function line)))
      (when (and pos (= pos 0))
        (let* ((start (length Function))
               (col (skip-whitespace line start: start)))
          (when (> col start)
            (let* ((start col)
                   (col (skip cpp/java-constituent? line start: start)))
              (when (> col start)
                (new JavaScript-Function-Entry (subseq line start col) n start))))))))))
