;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Java
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2007
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


;; TODO
;; - If a java method throws an exception as when doing [java.lang.Class (forName "abadclass")]
;;   then all hell breaks loose


(library Java jazz


@WAIT (
  
  
  ;;;
  ;;;; Types
  ;;;
  
  
  (definition Data-Lossless-Conversion
    (list  ;; data can convert to these type without loss of precision
     (cons byte    (list byte short int long float double javabyte javashort javaint javalong javafloat javadouble))
     (cons short   (list short int long float double javashort javaint javalong javafloat javadouble))
     (cons int     (list int long float double javaint javalong javafloat javadouble))
     (cons long    (list long float double javalong javafloat javadouble))
     (cons float   (list float double javafloat javadouble))
     (cons double  (list double javadouble))
     (cons Integer (list int long float double javaint javalong javafloat javadouble))
     (cons Real    (list float double javafloat javadouble))
     (cons String  (list javastring))))
  
  
  (method public (can-cast-into? data-type parameter-type)
    (or (subtype? data-type parameter-type)
        (memq? parameter-type (cdr (assq data-type Data-Lossless-Conversion)))))
  
  
  ;;;
  ;;;; External
  ;;;


  (macro public (javaexternal form)
    (expand~ JavaExternal-Expander form))
  
  
  ;;;
  ;;;; Method
  ;;;


  (macro public (javamethod form)
    (cons '%javamethod form)
    {})
  
  
  ;;;
  ;;;; Create
  ;;;
  
  
  (method public (java-create . rest)
    (apply (~ new-object JVM) rest))
  
  
  ;;;
  ;;;; Classpath
  ;;;
  
  
  (method public (parse-classpath classpath)
    (join (map (function dynamic (pathname)
                 (parse~ pathname))
               classpath)
          ";"))


  ;;;
  ;;;; Utilities
  ;;;
  
  
  (method public (tokenise-classname classname)
    (split classname "."))
  
  
  (method public (parse-classname classname)
    (let* ((tokens (tokenise-classname classname))
           (package (butlast tokens))
           (name (last tokens)))
      (values package name)))
  
  
  (method public (period->slash-notation string)
    (substitute #\period #\slash string))
  
  
  (method public (period->slash-notation-ansi string)
    (coerce (period->slash-notation string) Ansi-String))
  
  
  (method public (slash->period-notation string)
    (substitute #\slash #\period string)))
)