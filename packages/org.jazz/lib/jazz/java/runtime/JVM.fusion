;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Java Virtual Machine
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2007
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.java.runtime.JVM jazz


(import (jazz.java)
        (jazz.library)
        (jazz.utilities))


(class JVM extends Object
  
  
  (method meta public (setup-jvm (jvm-dll: jvm-dll {}) (classpath: classpath {}))
    (jvm-setup (parse~ jvm-dll) (coerce (build-option classpath) Ansi-String)))
  
  
  (method meta (build-option classpath)
    (format "-Djava.class.path={a}" (parse-classpath~ Java classpath)))
  
  
  (method meta public (destroy-jvm)
    (jvm-destroy))

  
  ;;;
  ;;;; New
  ;;;
  
  
  (method meta public (new-object jazz-class parameters)
    (let* ((class (java-class~ jazz-class))
           (generic (definition-value (category-field jazz-class '<init>)))
           (dispatcher (generic-dispatcher~ Interpreter generic))
           (node (find-constructor dispatcher parameters))
           (external (get-node-procedure~ dispatcher node))
           (signature (javaexternal-signature~ Interpreter external))
           (parameter-types (proxy-parameters~ Interpreter external))
           (method (get-method jazz-class "<init>" signature))
           (object (apply jvm-new-object class method parameter-types parameters)))
      object))
  
  
  (method meta (find-constructor dispatcher parameters)
    (let ((nodes (find-generics~ dispatcher (map class-of parameters))))
      (cond ((null? nodes) (error "Found no matching constructor"))
            ((not-null? (cdr nodes)) (error "Ambiguous constructor call"))
            (else (car nodes)))))
  
  
  (method meta public (find-class name)
    (jvm-find-class (period->slash-notation-ansi~ Java name)))
  
  
  (method meta public (class-exists? name)
    ;; should check only for the NoClassDefFoundError exception
    (catch (Java-Exception exception
             #f)
      (find-class name)
      #t))
  
  
  (method meta public (get-method jazz-class name signature)
    (jvm-get-method-id (java-class~ jazz-class) (coerce name Ansi-String) (coerce signature Ansi-String)))

  
  ;;;
  ;;;; External
  ;;;


  (external meta Jazz void       (jvm-setup                    Object Object)               "JzJVMSetup")
  (external meta Jazz void       (jvm-destroy)                                              "JzJVMDestroy")
  (external meta Jazz int        (jvm-find-class               ansistring)                  "JzJVMFindClass")
  (external meta Jazz int        (jvm-new-object               int int Object . rest)       "JzJVMNewObject")
  (external meta Jazz int        (jvm-get-method-id            int ansistring ansistring)   "JzJVMGetMethodID")))
