#ifndef INC_JavaTokenTypes_hpp_
#define INC_JavaTokenTypes_hpp_

/* $ANTLR 2.7.1: "java.g" -> "JavaTokenTypes.hpp"$ */
struct JavaTokenTypes {
	enum {
		EOF_ = 1,
		BLOCK = 4,
		MODIFIERS = 5,
		OBJBLOCK = 6,
		SLIST = 7,
		CTOR_DEF = 8,
		METHOD_DEF = 9,
		VARIABLE_DEF = 10,
		INSTANCE_INIT = 11,
		STATIC_INIT = 12,
		TYPE = 13,
		CLASS_DEF = 14,
		INTERFACE_DEF = 15,
		PACKAGE_DEF = 16,
		ARRAY_DECLARATOR = 17,
		EXTENDS_CLAUSE = 18,
		IMPLEMENTS_CLAUSE = 19,
		PARAMETERS = 20,
		PARAMETER_DEF = 21,
		LABELED_STAT = 22,
		TYPECAST = 23,
		INDEX_OP = 24,
		POST_INC = 25,
		POST_DEC = 26,
		METHOD_CALL = 27,
		EXPR = 28,
		ARRAY_INIT = 29,
		IMPORT = 30,
		UNARY_MINUS = 31,
		UNARY_PLUS = 32,
		CASE_GROUP = 33,
		ELIST = 34,
		FOR_INIT = 35,
		FOR_CONDITION = 36,
		FOR_ITERATOR = 37,
		EMPTY_STAT = 38,
		FINAL = 39,
		ABSTRACT = 40,
		STRICTFP = 41,
		LITERAL_package = 42,
		SEMI = 43,
		LITERAL_import = 44,
		LBRACK = 45,
		RBRACK = 46,
		LITERAL_void = 47,
		LITERAL_boolean = 48,
		LITERAL_byte = 49,
		LITERAL_char = 50,
		LITERAL_short = 51,
		LITERAL_int = 52,
		LITERAL_float = 53,
		LITERAL_long = 54,
		LITERAL_double = 55,
		IDENT = 56,
		DOT = 57,
		STAR = 58,
		LITERAL_private = 59,
		LITERAL_public = 60,
		LITERAL_protected = 61,
		LITERAL_static = 62,
		LITERAL_transient = 63,
		LITERAL_native = 64,
		LITERAL_threadsafe = 65,
		LITERAL_synchronized = 66,
		LITERAL_volatile = 67,
		LITERAL_class = 68,
		LITERAL_extends = 69,
		LITERAL_interface = 70,
		LCURLY = 71,
		RCURLY = 72,
		COMMA = 73,
		LITERAL_implements = 74,
		LPAREN = 75,
		RPAREN = 76,
		SL_COMMENT = 77,
		ML_COMMENT = 78,
		ASSIGN = 79,
		LITERAL_throws = 80,
		COLON = 81,
		LITERAL_if = 82,
		LITERAL_else = 83,
		LITERAL_for = 84,
		LITERAL_while = 85,
		LITERAL_do = 86,
		LITERAL_break = 87,
		LITERAL_continue = 88,
		LITERAL_return = 89,
		LITERAL_switch = 90,
		LITERAL_throw = 91,
		LITERAL_assert = 92,
		LITERAL_case = 93,
		LITERAL_default = 94,
		LITERAL_try = 95,
		LITERAL_finally = 96,
		LITERAL_catch = 97,
		PLUS_ASSIGN = 98,
		MINUS_ASSIGN = 99,
		STAR_ASSIGN = 100,
		DIV_ASSIGN = 101,
		MOD_ASSIGN = 102,
		SR_ASSIGN = 103,
		BSR_ASSIGN = 104,
		SL_ASSIGN = 105,
		BAND_ASSIGN = 106,
		BXOR_ASSIGN = 107,
		BOR_ASSIGN = 108,
		QUESTION = 109,
		LOR = 110,
		LAND = 111,
		BOR = 112,
		BXOR = 113,
		BAND = 114,
		NOT_EQUAL = 115,
		EQUAL = 116,
		LT_ = 117,
		GT = 118,
		LE = 119,
		GE = 120,
		LITERAL_instanceof = 121,
		SL = 122,
		SR = 123,
		BSR = 124,
		PLUS = 125,
		MINUS = 126,
		DIV = 127,
		MOD = 128,
		INC = 129,
		DEC = 130,
		BNOT = 131,
		LNOT = 132,
		LITERAL_this = 133,
		LITERAL_super = 134,
		LITERAL_true = 135,
		LITERAL_false = 136,
		LITERAL_null = 137,
		LITERAL_new = 138,
		NUM_INT = 139,
		CHAR_LITERAL = 140,
		STRING_LITERAL = 141,
		NUM_FLOAT = 142,
		WS_ = 143,
		SL_CONDITIONAL = 144,
		ESC = 145,
		HEX_DIGIT = 146,
		VOCAB = 147,
		EXPONENT = 148,
		FLOAT_SUFFIX = 149,
		NULL_TREE_LOOKAHEAD = 3
	};
};
#endif /*INC_JavaTokenTypes_hpp_*/
