;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Java Abstract Syntax Trees
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2007
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.javaparser.java.Java-AST jazz


(import (jazz.javaparser)
        (jazz.library)
        (jazz.utilities))


(class Java-AST extends AST


  ;;;
  ;;;; Type
  ;;;


  (method public (get-type-name)
    (assert-kind TYPE)
    (get-first-child))
  
  
  (method (type-description)
    (description~ (get-type-name)))


  ;;;
  ;;;; Identifier
  ;;;


  (method public (get-identifier-name)
    (assert-kind IDENT)
    (get-text))
  
  
  (method (identifier-description)
    (get-identifier-name))


  ;;;
  ;;;; Constructor
  ;;;


  (method public (get-constructor-name)
    (assert-kind CTOR_DEF)
    (get-next-sibling~ (get-first-child)))
  
  
  (method (constructor-description)
    (description~ (get-constructor-name)))


  ;;;
  ;;;; Method
  ;;;


  (method public (get-method-name)
    (assert-kind METHOD_DEF)
    (get-next-sibling~ (get-next-sibling~ (get-first-child))))
  
  
  (method (method-description)
    (description~ (get-method-name)))


  ;;;
  ;;;; Variable
  ;;;


  (method public (get-variable-type)
    (assert-kind VARIABLE_DEF)
    (get-next-sibling~ (get-first-child)))


  (method public (get-variable-name)
    (assert-kind VARIABLE_DEF)
    (get-next-sibling~ (get-next-sibling~ (get-first-child))))
  
  
  (method (variable-description)
    (format "{a} {a}"
            (description~ (get-variable-type))
            (description~ (get-variable-name))))


  ;;;
  ;;;; Definition
  ;;;
  
  
  (method public (get-definition-type)
    (ecase (get-kind)
      ((CTOR_DEF)     'constructor)
      ((METHOD_DEF)   'method)
      ((VARIABLE_DEF) 'variable)
      (else (error "Unable to get definition type for {t}" self))))


  (method public (get-definition-name)
    (ecase (get-kind)
      ((CTOR_DEF)     (get-constructor-name))
      ((METHOD_DEF)   (get-method-name))
      ((VARIABLE_DEF) (get-variable-name))
      (else (error "Unable to get definition name for {t}" self))))


  ;;;
  ;;;; Description
  ;;;
  
  
  (method (description)
    (ecase (get-kind)
      ((TYPE)         (type-description))
      ((IDENT)        (identifier-description))
      ((CTOR_DEF)     (constructor-description))
      ((METHOD_DEF)   (method-description))
      ((VARIABLE_DEF) (variable-description))
      (else         (nextmethod))))


  (method meta (token-types)
    Token-Types)


  ;;;
  ;;;; Token Types
  ;;;


  (enumeration meta Token-Types
    (BLOCK 4)
    (MODIFIERS 5)
    (OBJBLOCK 6)
    (SLIST 7)
    (CTOR_DEF 8)
    (METHOD_DEF 9)
    (VARIABLE_DEF 10)
    (INSTANCE_INIT 11)
    (STATIC_INIT 12)
    (TYPE 13)
    (CLASS_DEF 14)
    (INTERFACE_DEF 15)
    (PACKAGE_DEF 16)
    (ARRAY_DECLARATOR 17)
    (EXTENDS_CLAUSE 18)
    (IMPLEMENTS_CLAUSE 19)
    (PARAMETERS 20)
    (PARAMETER_DEF 21)
    (LABELED_STAT 22)
    (TYPECAST 23)
    (INDEX_OP 24)
    (POST_INC 25)
    (POST_DEC 26)
    (METHOD_CALL 27)
    (EXPR 28)
    (ARRAY_INIT 29)
    (IMPORT 30)
    (UNARY_MINUS 31)
    (UNARY_PLUS 32)
    (CASE_GROUP 33)
    (ELIST 34)
    (FOR_INIT 35)
    (FOR_CONDITION 36)
    (FOR_ITERATOR 37)
    (EMPTY_STAT 38)
    (FINAL 39)
    (ABSTRACT 40)
    (STRICTFP 41)
    (LITERAL_package 42)
    (SEMI 43)
    (LITERAL_import 44)
    (LBRACK 45)
    (RBRACK 46)
    (LITERAL_void 47)
    (LITERAL_boolean 48)
    (LITERAL_byte 49)
    (LITERAL_char 50)
    (LITERAL_short 51)
    (LITERAL_int 52)
    (LITERAL_float 53)
    (LITERAL_long 54)
    (LITERAL_double 55)
    (IDENT 56)
    (DOT 57)
    (STAR 58)
    (LITERAL_private 59)
    (LITERAL_public 60)
    (LITERAL_protected 61)
    (LITERAL_static 62)
    (LITERAL_transient 63)
    (LITERAL_native 64)
    (LITERAL_threadsafe 65)
    (LITERAL_synchronized 66)
    (LITERAL_volatile 67)
    (LITERAL_class 68)
    (LITERAL_extends 69)
    (LITERAL_interface 70)
    (LCURLY 71)
    (RCURLY 72)
    (COMMA 73)
    (LITERAL_implements 74)
    (LPAREN 75)
    (RPAREN 76)
    (SL_COMMENT 77)
    (ML_COMMENT 78)
    (ASSIGN 79)
    (LITERAL_throws 80)
    (COLON 81)
    (LITERAL_if 82)
    (LITERAL_else 83)
    (LITERAL_for 84)
    (LITERAL_while 85)
    (LITERAL_do 86)
    (LITERAL_break 87)
    (LITERAL_continue 88)
    (LITERAL_return 89)
    (LITERAL_switch 90)
    (LITERAL_throw 91)
    (LITERAL_assert 92)
    (LITERAL_case 93)
    (LITERAL_default 94)
    (LITERAL_try 95)
    (LITERAL_finally 96)
    (LITERAL_catch 97)
    (PLUS_ASSIGN 98)
    (MINUS_ASSIGN 99)
    (STAR_ASSIGN 100)
    (DIV_ASSIGN 101)
    (MOD_ASSIGN 102)
    (SR_ASSIGN 103)
    (BSR_ASSIGN 104)
    (SL_ASSIGN 105)
    (BAND_ASSIGN 106)
    (BXOR_ASSIGN 107)
    (BOR_ASSIGN 108)
    (QUESTION 109)
    (LOR 110)
    (LAND 111)
    (BOR 112)
    (BXOR 113)
    (BAND 114)
    (NOT_EQUAL 115)
    (EQUAL 116)
    (LT_ 117)
    (GT 118)
    (LE 119)
    (GE 120)
    (LITERAL_instanceof 121)
    (SL 122)
    (SR 123)
    (BSR 124)
    (PLUS 125)
    (MINUS 126)
    (DIV 127)
    (MOD 128)
    (INC 129)
    (DEC 130)
    (BNOT 131)
    (LNOT 132)
    (LITERAL_this 133)
    (LITERAL_super 134)
    (LITERAL_true 135)
    (LITERAL_false 136)
    (LITERAL_null 137)
    (LITERAL_new 138)
    (NUM_INT 139)
    (CHAR_LITERAL 140)
    (STRING_LITERAL 141)
    (NUM_FLOAT 142)
    (WS_ 143)
    (SL_CONDITIONAL 144)
    (ESC 145)
    (HEX_DIGIT 146)
    (VOCAB 147)
    (EXPONENT 148)
    (FLOAT_SUFFIX 149))))
