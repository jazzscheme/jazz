;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Jazz Code Locations
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2007
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.jazz.catalog.Jazz-Code-Location jazz


(import (jazz.jazz)
        (jazz.library)
        (jazz.utilities))


(class Jazz-Code-Location extends Code-Location


  (slot location)


  (method (initialize loc)
    (nextmethod)
    (set! location loc))
  
  
  (method (print printer readably)
    (print-unreadable self printer
      (function dynamic (printer)
        (format printer "{s}" location))))


  (method (edit . rest)
    (bind-keywords ((workspace null) (activate-focus? true) (error? true)) rest
      (let ((location (find-location :workspace workspace :error? error?)))
        (when location
          (bind-values (frame text range) location
            (set-selection~ text range :ensure-displayed? false)
            (ensure-displayed~ text :force-vertical 'head)
            (bring-to-front~ frame)
            (set-visible?~ frame true)
            (when activate-focus?
              (acquire-focus~ frame))
            frame)))))
  
  
  (method public (find-source)
    (bind (class-name . sublocation) location
      (find-class-source class-name)))
  
  
  (method public (find-location . rest)
    (bind-keywords ((workspace null) (error? true)) rest
      (bind (class-name . sublocation) location
        (let ((frame (find-class class-name :workspace workspace :error? error?)))
          (when frame
            (let* ((text  (get-guest~ frame))
                   (range (location-range~ text sublocation :toplevel-location location)))
              (values frame text range)))))))
  
  
  (method (find-class class-name . rest)
    (bind-keywords ((workspace null) (error? true)) rest
      (let* ((appl (get-application))
             (toplevel-name (extract-toplevel-name class-name))
             (source (find-class-source toplevel-name)))
        (either (edit-document~ appl source :workspace workspace :visible? false)
                (when error?
                  (signal (new Location-Error :kind 'unknown :location class-name)))))))
  
  
  (method (find-class-source class-name)
    #f
    @convert
    (either (get-manifest-source class-name)
            (get-source~ (get-user~ (get-application)) class-name)))
  
  
  ;; a bit of a temporary patch to dive in the metaclass name...
  (method (extract-toplevel-name class-name)
    (let* ((str (symbol->string class-name))
           (pos (find #\~ str :return 'position)))
      (if (null? pos)
          class-name
        (string->symbol (subseq str 0 pos)))))))
