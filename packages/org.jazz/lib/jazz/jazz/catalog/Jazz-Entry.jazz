;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Jazz Entry
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2007
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.jazz.catalog.Jazz-Entry jazz


(import (jazz.catalog)
        (jazz.jazz)
        (jazz.library)
        (jazz.utilities))


(class Jazz-Entry extends Catalog-Entry)


@convert (


(definition public (get-category-location category)
  (let ((location {}))
    (while category
      (set! location (cons (category-name category) location))
      (set! category (category-container category)))
    location))


(definition (category-name category)
  (if (metaclass? category)
      (type-name (metaclass-instance category))
    (type-name category)))


(class Jazz-Entry extends Catalog-Entry

  
  (method (edit (workspace: workspace {}) (activate-focus?: activate-focus? #t))
    (let ((location (get-code-location)))
      (when location
        (edit~ location workspace: workspace activate-focus?: activate-focus?))))


  (method protected virtual (get-code-location)
    {})
  
  
  (method protected (new-entry field)
    (cond ((property? field)
           (new Jazz-Property-Entry field))
          ((slot? field)
           (new Jazz-Slot-Entry field))
          ((definition? field)
           (let ((value (definition-value field)))
             (if (category? value)
                 (new Jazz-Category-Entry value)
               (new Jazz-Field-Entry field))))
          (else
           (new Jazz-Field-Entry field))))))
)