;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Jazz Field Entry
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2007
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.jazz.catalog.Jazz-Field-Entry jazz


(import (jazz.jazz)
        (jazz.library)
        (jazz.utilities))


(class Jazz-Field-Entry extends Jazz-Entry)


@convert


(class Jazz-Field-Entry extends Jazz-Entry
  
  
  (slot field)
  
  
  (method (initialize f)
    (nextmethod)
    (set! field f))


  (method (print printer readably)
    (print-unreadable self printer
      (function dynamic (printer)
        (format printer "{a}" field))))


  ;;;
  ;;;; Access
  ;;;
  
  
  (method public (get-field)
    field)
  
  
  (method (get-file)
    #f
    @convert
    (get-manifest-source (type-name (unit-toplevel (get-unit)))))
  
  
  (method (get-moniker)
    (get-file))


  (method (get-unit)
    (field-creator field))


  (method (get-unit-name)
    (->string (type-name (get-unit))))


  (method (get-name)
    (field-name field))
  
  
  (method (get-image)
    {Bitmap-Resource "Method"})


  ;;;
  ;;;; Edit
  ;;;


  (method (present mode)
    (case mode
      ((definitions) (get-unit-name))
      ((references) (format "{a}.{a}" (get-unit-name) (field-name field)))))


  (method (present-name)
    (->string (field-name field)))
  
  
  (method (get-attribute field keyword)
    (unimplemented 'get-attribute)
    @convert-manifest-stuff
    (if (in-manifest? 'Interpreter)
        (get-attribute~ Interpreter field keyword)
      null))
  
  
  (method (get-code-location)
    (let* ((unit (get-unit))
           (unit-location (get-unit-location unit))
           (name (field-name field))
           (value (essay (definition? field) (definition-value field))))
      (cond ((get-attribute field :location)
             (get-attributed-location unit-location name))
            ((or (external? value) (coexternal? value))
             (new Jazz-Code-Location (append! unit-location (list name))))
            ((coclosure? value)
             (let ((rank (+ 1 (field-modifiers-count field))))
               (new Jazz-Code-Location (append! unit-location (list name (+ rank 1))))))
            (else
             (let ((rank (+ 1 (field-modifiers-count field))))
               (new Jazz-Code-Location (append! unit-location (list name rank))))))))
  
  
  (method (get-attributed-location unit-location name)
    (let ((location (get-attribute field :location)))
      (new Jazz-Code-Location (append! unit-location location))))))
