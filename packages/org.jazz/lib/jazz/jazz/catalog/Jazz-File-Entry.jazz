;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Jazz Category Entry
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2007
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.jazz.catalog.Jazz-File-Entry jazz


(import (jazz.jazz)
        (jazz.library)
        (jazz.utilities))


(class Jazz-File-Entry extends Jazz-Entry
  
  
  (slot category-name)
  
  
  (method (initialize name)
    (nextmethod)
    (set! category-name name))


  (method (compare-object target)
    (cond ((is-not? target Jazz-File-Entry)
           :incompatible)
          ((= category-name (get-category-name~ target))
           :equal)
          (else
           :not-equal)))


  ;;;
  ;;;; Access
  ;;;
  
  
  (method public (get-category-name)
    category-name)
  
  
  (method (get-image)
    {Bitmap-Resource "Class"})


  (method (get-title)
    (->string category-name))


  (method (get-definitions)
    (when (category-loaded? category-name)
      (let* ((category (get-loaded-category category-name))
             (fields (gather (category-fields category))))
        (append! (map new-entry (category-fields (class-of category)))
                 (map new-entry fields)))))


  ;;;
  ;;;; Present
  ;;;


  (method (present mode)
    (->string category-name))


  (method (present-name)
    (->string category-name))


  ;;;
  ;;;; Edit
  ;;;
  
  
  (method (get-code-location)
    (new Jazz-Code-Location (list category-name 1)))))
