;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Debuggee
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2007
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.jazz.debuggee jazz


(import (jazz.jazz)
        (jazz.platform)
        (jazz.ui)
        (jazz.ui.view)
        (jazz.ui.window)
        (jazz.literals)
        (jazz.library)
        (jazz.utilities))


(definition In-Pick?
  false)

(definition Draw-Overlays?
  false)

(definition Feedback-Figure?
  false)

(definition Report-Figure?
  false)

(definition All-Pickers
  '())


(definition public (pick-figure action
                                (menu: menu {})
                                (include: include 'all)
                                (exclude: exclude '())
                                (draw-overlays?: draw-overlays? true)
                                (feedback: feedback {})
                                (feedback-figure?: feedback-figure? true)
                                (report-figure?: report-figure? true)
                                (tooltips?: tooltips? true))
  (unless In-Pick?
    (with-locked-update
      (function dynamic ()
        (let ((windows (process-windows))
              (toplevel (get-toplevel)))
          (when windows
            (setup-pick)
            (set! All-Pickers '())
            (set! Draw-Overlays? draw-overlays?)
            (set! Feedback-Figure? feedback-figure?)
            (set! Report-Figure? report-figure?)
            (for-each (function dynamic (window)
                        (install-overlays window)
                        (let* ((position {Point 0 0})
                               (size (get-size~ window))
                               (excluded? (or (memq? window exclude) (and (= include 'toplevel) (neq? window toplevel))))
                               (picker (new Figure-Picker parent: window position: position size: size action: action :window window menu: menu :excluded? excluded? feedback: feedback tooltips?: tooltips?)))
                          (bring-to-front~ picker)
                          (invalidate-window~ window)
                          (set! All-Pickers (cons picker All-Pickers))))
                      windows)
            (simulate-mouse-move)
            (set! In-Pick? true)))))))


(definition (setup-pick)
  (inhibit-view-cursor true)
  (set-escape-handler~ View-Player end-pick))


(definition (install-overlays window)
  (let ((overlay (new Picker-Overlay)))
    (for-each-descendant~ window
      (function dynamic (window level)
        (when (and (is? window View-Player) (get-visible?~ window))
          (let ((root (get-root~ window)))
            (set-overlay~ root overlay)))))))


(definition (remove-overlays window)
  (for-each-descendant~ window
    (function dynamic (window level)
      (when (and (is? window View-Player) (get-visible?~ window))
        (let ((root (get-root~ window)))
          (set-overlay~ root {}))))))


(definition (simulate-mouse-move)
  (let ((view (mouse-view)))
    (when view
      (let* ((player (get-player~ view))
             (display (get-display~ view))
             (root (get-root~ view))
             (overlapped (get-overlapped~ view))
             (picker (find-picker overlapped))
             (pos (mouse-position~ view)))
        (receive (player view root-rect view-rect row-rect) (feedback-info picker {} {} view pos)
          (set! Feedback-Player player)
          (set! Feedback-View view)
          (set! Feedback-Root-Rect root-rect)
          (set! Feedback-View-Rect view-rect)
          (set! Feedback-Row-Rect row-rect))))))


(definition (find-picker window)
  (find-if (function dynamic (picker)
             (eq? (get-window~ picker) window))
           All-Pickers))


(definition (end-pick)
  (set! In-Pick? false)
  (inhibit-view-cursor false)
  (setup-feedback {} {} {} {} {})
  (set-escape-handler~ View-Player {})
  (close-all-popups)
  (close-pickers))


(definition (close-pickers)
  (for-each (function dynamic (window)
              (remove-overlays (get-parent~ window))
              (close~ window))
            All-Pickers)
  (set! All-Pickers '()))


;;;
;;;; Feedback
;;;


(definition Feedback-Player
  {})

(definition Feedback-View
  {})

(definition Feedback-Root-Rect
  {})

(definition Feedback-View-Rect
  {})

(definition Feedback-Row-Rect
  {})


(definition (setup-feedback picker window position view pos)
  (receive (player view root-rect view-rect row-rect) (feedback-info picker window position view pos)
    (when (or (neq? player Feedback-Player)
              (neq? view Feedback-View)
              (/= view-rect Feedback-View-Rect)
              (/= row-rect Feedback-Row-Rect))
      (let ((old-player Feedback-Player))
        (set! Feedback-Player player)
        (set! Feedback-View view)
        (set! Feedback-Root-Rect root-rect)
        (set! Feedback-View-Rect view-rect)
        (set! Feedback-Row-Rect row-rect)
        (if (and player (eq? player old-player))
            (redraw-window~ player)
          (when old-player
            (redraw-window~ old-player))
          (when player
            (redraw-window~ player)))))))


(definition (feedback-info picker window position view pos)
  (if (not view)
      (values {} {} {} {} {})
    (let* ((player (get-player~ view))
           (display (get-display~ view))
           (root (get-root~ view))
           (root-rect (get-bounds~ root))
           (view-rect (acquire~ root display (get-bounds~ display)))
           (row-rect (determine-row-rect root view pos)))
      (values player view root-rect view-rect row-rect))))


(definition (determine-row-rect root view pos)
  (when (is? view Tree-View)
    (let ((cell (view->tree~ view pos)))
      (when cell
        (acquire~ root view (cell-rect~ view cell))))))


;;;
;;;; Overlay
;;;


(definition Overlay-Color
  {Color name: Black})

(definition Overlay-Transparency
  40)


(definition Highlight-Color
  {Color red: 109 green: 109 blue: 177})

(definition Highlight-Pen
  (new Pen style: 'solid width: 2 color: Highlight-Color))


(class Picker-Overlay extends Overlay
  
  
  (method (draw-overlay view dc width height)
    (if (or (not Feedback-Player) (neq? view (get-root~ Feedback-Player)))
        (when Draw-Overlays?
          (draw-colored-overlay~ dc width height Overlay-Color Overlay-Transparency))
      (if (not Feedback-Figure?)
          (rectangle~ dc Feedback-Root-Rect Highlight-Pen {})
        (if Feedback-Row-Rect
            (rectangle~ dc Feedback-Row-Rect Highlight-Pen {})
          (when (and Feedback-View-Rect (/= Feedback-View-Rect Feedback-Root-Rect))
            (rectangle~ dc Feedback-View-Rect Highlight-Pen {})))))))


;;;
;;;; Figure-Picker
;;;


(class Figure-Picker extends Picker
  
  
  (property action    accessors generate)
  (property window    accessors generate)
  (property menu      accessors generate)
  (property excluded? accessors generate)
  (property feedback  accessors generate)
  (property tooltips? accessors generate)
  
  
  ;;;
  ;;;; Paint
  ;;;
  
  
  (method (erase-background hdc)
    )
  
  
  ;;;
  ;;;; Feedback
  ;;;
  
  
  (method (determine-row-rect-aux root view pos)
    (when (is? view Tree-View)
      (let ((cell (view->tree~ view pos)))
        (when cell
          (cell-rect~ view cell)))))

  
  ;;;
  ;;;; Root
  ;;;
  
  
  @convert
  (method (new-root)
    (new Figure-Picker-Root))
  
  
  @convert
  (class Figure-Picker-Root extends Root-View
      
  
    (form
      (<install>
        (<!>                    name: content layout-type: fill
          (<Figure-Picker-View> name: view))))
    
    
    (class Figure-Picker-View extends View
      
      
      (method (cursor-update pos)
        (set-cursor (if excluded? :no :spy)))
      
      
      ;;;
      ;;;; Tooltip
      ;;;
      
      
      (method (get-tooltip?)
        tooltips?)
      
      
      (method (get-formatted-tooltip?)
        true)
      
      
      (method (get-tooltip-context pos)
        (receive (window position view pos) (mouse-figure (get-h~ pos) (get-v~ pos))
          (when view
            (let* ((view-player (get-player~ view))
                   (view-root (get-root~ view))
                   (view-bounds (get-bounds~ view))
                   (root (get-root))
                   (row-rect (determine-row-rect-aux root view pos))
                   (rect (acquire~ view-root view (either row-rect view-bounds)))
                   (bounds (acquire~ player view-player rect)))
              (new Tooltip-Context
                view: self
                text: (display-description (describe-view~ view pos))
                bounds: bounds
                font: {Font name: Ansi-Var})))))
      
      
      (method (display-description description)
        (cons "Properties"
              (map (function dynamic (info)
                     (bind (name value) info
                       (list :bulleted (format "{a}: {s}" name value))))
                   description)))))
  
  
  ;;;
  ;;;; Mouse
  ;;;
  
  
  (method (mouse-move h v)
    (nextmethod h v)
    (if excluded?
        (when Report-Figure?
          (clear-user-message))
      (receive (window position view pos) (mouse-figure h v)
        (when feedback
          (let ((proc (if (eq? feedback true)
                          setup-feedback
                        feedback)))
            (proc self window position view pos)))
        (when Report-Figure?
          (if (not view)
              (user-message "{a} {a}" window position)
            (user-message "{a} {a}" view pos))))))
  
  
  (method (mouse-up h v)
    (nextmethod h v)
    (unless excluded?
      (receive (window position view pos) (mouse-figure h v)
        (with-locked-update
          (function dynamic ()
            (end-pick)
            (action window position view pos))))))
  
  
  (method (mouse-figure h v)
    (let* ((pos (acquire~ parent self (new Point h v)))
           (window (find-child-window~ parent pos))
           (position (acquire~ window parent pos)))
      (if (is-not? window View-Player)
          (values window position {} {})
        (let* ((root (get-root~ window))
               (view (find-drawing~ root position))
               (pos (acquire~ view root position)))
          (values window position view pos)))))
  
  
  ;;;
  ;;;; Menu
  ;;;
  
  
  (method (context-menu h v)
    (if (or excluded? (not menu))
        (nextmethod h v)
      (if (is-not? parent View-Player)
          (bell)
        (close-popups)
        (receive (window position view pos) (mouse-figure h v)
          (let ((menu (menu window position view pos)))
            (setup-actions menu window position view pos)
            (track-popup-menu~ (get-root~ parent) menu (new Point h v))
            processed)))))
  
  
  (method (setup-actions menu window position view pos)
    (for-each (function dynamic (item)
                (let* ((action-handler (get-action-handler~ item))
                       (execute (function (event)
                                  (end-pick)
                                  (when action-handler
                                    (let* ((properties (augment :window window position: position view: view :pos pos (get-properties~ action-handler)))
                                           (event (apply new Action-Event :action self properties)))
                                      (invoke~ action-handler self event))))))
                  (set-action-handler~ item (new Event-Handler execute: execute))))
              (get-children~ menu)))))
