;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Inspector
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2007
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.jazz.inspector jazz


(import (jazz.jazz))


;;;
;;;; Package
;;;


(definition Unbound
  (cons {} {}))


(definition public (package-unbound)
  Unbound)


(definition public (package-info name value (kind :value))
  (let* ((unbound? (eq? value Unbound))
         (address (object->serial-number value))
         (presented (cond (unbound? "<unbound>") (else (->string value :reader))))
         (more? (if unbound? false (or (memq? kind '(frame: context:)) (more-value? value)))))
    (when (> (length presented) 512)
      (set! presented (append (subseq presented 0 128) "...")))
    (list name address presented more? kind)))


(definition (more-value? value)
  (and (not (null? value))
       (not (empty-string? value))
       (is-not? value Symbol)
       (is-not? value Boolean)
       (is-not? value Char)
       (is-not? value Number)
       (is-not? value Field)
       (not (unit? value))))


;;;
;;;; Inspect
;;;


(definition public (inspect-value value)
  (typecase value
    ((List) (inspect-list value))
    ((Hashtable) (inspect-hashtable value))
    ((Map) (inspect-map value))
    ((Sequence) (inspect-sequence value))
    @obsolete?
    ((Record) (inspect-record value))
    (else (inspect-slots value))))


(definition (inspect-list lst)
  (let ((fact (new List-Factory))
        (rank 0))
    (while (not-null? lst)
      (if (pair? lst)
          (begin
            (put~ fact (package-info rank (car lst)))
            (set! lst (cdr lst)))
        (put~ fact (package-info 'rest lst))
        (set! lst '()))
      (increase! rank))
    (get-output~ fact)))


(definition (inspect-hashtable hashtable)
  (let ((fact (new List-Factory)))
    (for-each-hash (function dynamic (key value)
                     (put~ fact (package-info key value)))
                   hashtable)
    (get-output~ fact)))


(definition (inspect-map map)
  (let ((fact (new List-Factory)))
    (for-each-map (function dynamic (key value)
                    (put~ fact (package-info key value)))
                  map)
    (get-output~ fact)))


(definition (inspect-sequence seq)
  (map package-info (naturals 0 (length seq)) seq))


@obsolete?
(definition (inspect-record record)
  (let* ((structure (class-of record))
         (parts (structure-form structure)))
    (map (function dynamic (info)
           (let ((name (second info)))
             (package-info name (get record name))))
         parts)))


(definition (inspect-slots object)
  (let* ((class (class-of object))
         (slots (all-slots class))
         (infos
           (map (function dynamic (slot)
                  (package-info (field-name slot)
                                (cond ((property? slot)
                                       (read-property object slot))
                                      @convert
                                      ((bound? object slot)
                                       (get-value object slot))
                                      (else
                                       Unbound))))
                slots)))
    (if true
        infos
      (sort < infos key: car)))))
