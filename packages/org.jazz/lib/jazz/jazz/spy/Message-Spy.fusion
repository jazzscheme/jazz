;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Message Spy
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2007
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.jazz.spy.Message-Spy jazz


(import (jazz.jazz)
        (jazz.jml)
        (jazz.platform.windows)
        (jazz.ui)
        (jazz.literals)
        (jazz.library)
        (jazz.utilities))


;;;
;;;; Constants
;;;


(definition public Message-Categories
  '((general   . {Bitmap-Resource "MsgGeneral"})
    (window    . {Bitmap-Resource "MsgWindow"})
    (paint     . {Bitmap-Resource "MsgPaint"})
    (action    . {Bitmap-Resource "MsgAction"})
    (mouse     . {Bitmap-Resource "MsgMouse"})
    (keyboard  . {Bitmap-Resource "MsgClipboard"})
    (clipboard . {Bitmap-Resource "MsgClipboard"})
    (focus     . {Bitmap-Resource "MsgFocus"})
    (mdi       . {Bitmap-Resource "MsgMDI"})
    (menu      . {Bitmap-Resource "MsgMenu"})
    (user      . {Bitmap-Resource "MsgUser"})
    (app       . {Bitmap-Resource "MsgApp"})
    (unknown   . {Bitmap-Resource "MsgUnknown"})))


(definition public Symbolic-Messages
  '((WM_NULL                   general)
    (WM_CREATE                 window)
    (WM_DESTROY                window)
    (WM_MOVE                   window)
    (WM_SIZE                   window)
    (WM_ACTIVATE               window)
    (WM_SETFOCUS               window)
    (WM_KILLFOCUS              window)
    (WM_ENABLE                 window)
    (WM_SETREDRAW              paint)
    (WM_SETTEXT                focus)
    (WM_GETTEXT                focus)
    (WM_GETTEXTLENGTH          focus)
    (WM_PAINT                  paint)
    (WM_CLOSE                  window)
    (WM_QUERYENDSESSION        general)
    (WM_QUIT                   general)
    (WM_QUERYOPEN              general)
    (WM_ERASEBKGND             paint)
    (WM_SYSCOLORCHANGE         general)
    (WM_ENDSESSION             general)
    (WM_SHOWWINDOW             window)
    (WM_WININICHANGE           general)
    
    (WM_DEVMODECHANGE          general)
    (WM_ACTIVATEAPP            general)
    (WM_FONTCHANGE             general)
    (WM_TIMECHANGE             general)
    (WM_CANCELMODE             general)
    (WM_SETCURSOR              mouse)
    (WM_MOUSEACTIVATE          mouse)
    (WM_CHILDACTIVATE          mdi)
    (WM_QUEUESYNC              general)
    (WM_GETMINMAXINFO          general)
    
    (WM_PAINTICON              general)
    (WM_ICONERASEBKGND         general)
    (WM_NEXTDLGCTL             general)
    (WM_SPOOLERSTATUS          general)
    (WM_DRAWITEM               general)
    (WM_MEASUREITEM            general)
    (WM_DELETEITEM             general)
    (WM_VKEYTOITEM             general)
    (WM_CHARTOITEM             general)
    (WM_SETFONT                general)
    (WM_GETFONT                general)
    (WM_SETHOTKEY              general)
    (WM_GETHOTKEY              general)
    (WM_QUERYDRAGICON          general)
    (WM_COMPAREITEM            general)
    (WM_GETOBJECT              general)
    (WM_COMPACTING             general)
    (WM_COMMNOTIFY             general)
    (WM_WINDOWPOSCHANGING      general)
    (WM_WINDOWPOSCHANGED       general)
    (WM_POWER                  general)
    (WM_COPYDATA               general)
    (WM_CANCELJOURNAL          general)
    
    (WM_NOTIFY                 action)
    (WM_INPUTLANGCHANGEREQUEST general)
    (WM_INPUTLANGCHANGE        general)
    (WM_TCARD                  general)
    (WM_HELP                   general)
    (WM_USERCHANGED            general)
    (WM_NOTIFYFORMAT           general)
    
    (WM_CONTEXTMENU            general)
    (WM_STYLECHANGING          general)
    (WM_STYLECHANGED           general)
    (WM_DISPLAYCHANGE          general)
    (WM_GETICON                general)
    (WM_SETICON                general)
    
    (WM_NCCREATE               window)
    (WM_NCDESTROY              window)
    (WM_NCCALCSIZE             window)
    (WM_NCHITTEST              mouse)
    (WM_NCPAINT                paint)
    (WM_NCACTIVATE             window)
    (WM_GETDLGCODE             general)
    (WM_SYNCPAINT              paint)
    (WM_NCMOUSEMOVE            mouse)
    (WM_NCLBUTTONDOWN          mouse)
    (WM_NCLBUTTONUP            mouse)
    (WM_NCLBUTTONDBLCLK        mouse)
    (WM_NCRBUTTONDOWN          mouse)
    (WM_NCRBUTTONUP            mouse)
    (WM_NCRBUTTONDBLCLK        mouse)
    (WM_NCMBUTTONDOWN          mouse)
    (WM_NCMBUTTONUP            mouse)
    (WM_NCMBUTTONDBLCLK        mouse)
    
    (WM_KEYFIRST               keyboard)
    (WM_KEYDOWN                keyboard)
    (WM_KEYUP                  keyboard)
    (WM_CHAR                   keyboard)
    (WM_DEADCHAR               keyboard)
    (WM_SYSKEYDOWN             keyboard)
    (WM_SYSKEYUP               keyboard)
    (WM_SYSCHAR                keyboard)
    (WM_SYSDEADCHAR            keyboard)
    (WM_KEYLAST                keyboard)
    (WM_IME_STARTCOMPOSITION   general)
    (WM_IME_ENDCOMPOSITION     general)
    (WM_IME_COMPOSITION        general)
    (WM_IME_KEYLAST            general)
    
    (WM_INITDIALOG             general)
    (WM_COMMAND                action)
    (WM_SYSCOMMAND             action)
    (WM_TIMER                  action)
    (WM_HSCROLL                general)
    (WM_VSCROLL                general)
    (WM_INITMENU               menu)
    (WM_INITMENUPOPUP          menu)
    (WM_MENUSELECT             menu)
    (WM_MENUCHAR               menu)
    (WM_ENTERIDLE              general)
    (WM_CTLCOLORMSGBOX         general)
    (WM_CTLCOLOREDIT           general)
    (WM_CTLCOLORLISTBOX        general)
    (WM_CTLCOLORBTN            general)
    (WM_CTLCOLORDLG            general)
    (WM_CTLCOLORSCROLLBAR      general)
    (WM_CTLCOLORSTATIC         general)
    
    (WM_MOUSEFIRST             mouse)
    (WM_MOUSEMOVE              mouse)
    (WM_LBUTTONDOWN            mouse)
    (WM_LBUTTONUP              mouse)
    (WM_LBUTTONDBLCLK          mouse)
    (WM_RBUTTONDOWN            mouse)
    (WM_RBUTTONUP              mouse)
    (WM_RBUTTONDBLCLK          mouse)
    (WM_MBUTTONDOWN            mouse)
    (WM_MBUTTONUP              mouse)
    (WM_MBUTTONDBLCLK          mouse)
    (WM_MOUSEWHEEL             mouse)
    (WM_MOUSELAST              mouse)
    (WM_PARENTNOTIFY           general)
    (WM_ENTERMENULOOP          general)
    (WM_EXITMENULOOP           general)
    (WM_NEXTMENU               general)
    (WM_SIZING                 general)
    (WM_CAPTURECHANGED         general)
    (WM_MOVING                 general)
    (WM_POWERBROADCAST         general)
    (WM_DEVICECHANGE           general)
    
    (WM_MDICREATE              mdi)
    (WM_MDIDESTROY             mdi)
    (WM_MDIACTIVATE            mdi)
    (WM_MDIRESTORE             mdi)
    (WM_MDINEXT                mdi)
    (WM_MDIMAXIMIZE            mdi)
    (WM_MDITILE                mdi)
    (WM_MDICASCADE             mdi)
    (WM_MDIICONARRANGE         mdi)
    (WM_MDIGETACTIVE           mdi)
    (WM_MDISETMENU             general)
    (WM_ENTERSIZEMOVE          general)
    (WM_EXITSIZEMOVE           general)
    (WM_DROPFILES              general)
    (WM_MDIREFRESHMENU         general)
    
    (WM_IME_SETCONTEXT         general)
    (WM_IME_NOTIFY             general)
    (WM_IME_CONTROL            general)
    (WM_IME_COMPOSITIONFULL    general)
    (WM_IME_SELECT             general)
    (WM_IME_CHAR               general)
    (WM_IME_KEYDOWN            general)
    (WM_IME_KEYUP              general)
    (WM_MOUSEHOVER             general)
    (WM_MOUSELEAVE             general)
    
    (WM_CUT                    focus)
    (WM_COPY                   focus)
    (WM_PASTE                  focus)
    (WM_CLEAR                  focus)
    (WM_UNDO                   focus)
    (WM_RENDERFORMAT           general)
    (WM_RENDERALLFORMATS       general)
    (WM_DESTROYCLIPBOARD       general)
    (WM_DRAWCLIPBOARD          general)
    (WM_PAINTCLIPBOARD         general)
    (WM_VSCROLLCLIPBOARD       general)
    (WM_SIZECLIPBOARD          general)
    (WM_ASKCBFORMATNAME        general)
    (WM_CHANGECBCHAIN          general)
    (WM_HSCROLLCLIPBOARD       general)
    (WM_QUERYNEWPALETTE        general)
    (WM_PALETTEISCHANGING      general)
    (WM_PALETTECHANGED         general)
    (WM_HOTKEY                 general)
    
    (WM_PRINT                  paint)
    (WM_PRINTCLIENT            paint)
    
    (WM_HANDHELDFIRST          general)
    (WM_HANDHELDLAST           general)
    
    (WM_AFXFIRST               general)
    (WM_AFXLAST                general)
    
    (WM_PENWINFIRST            general)
    (WM_PENWINLAST             general)
    
    (BM_GETCHECK               general)
    (BM_SETCHECK               general)
    (BM_GETSTATE               general)
    (BM_SETSTATE               general)
    (BM_SETSTYLE               general)
    (BM_CLICK                  general)
    (BM_GETIMAGE               general)
    (BM_SETIMAGE               general)))


;;;
;;;; Setup
;;;


(definition (prepare-symbolic-messages)
  (let ((try
          (function dynamic (package name)
            (let ((definition (unit-field (class-of package) name)))
              (when (definition? definition)
                (definition-value definition))))))
    (for-each (function dynamic (info)
                (let* ((name (first info))
                       (value (either (try WinUser name)
                                      (try WinCtrl name))))
                  (set-cdr! (cdr info) (list value))))
              Symbolic-Messages)))


(prepare-symbolic-messages)


;;;
;;;; Message-Spy
;;;


(class Message-Spy extends Spy-View


  (form
    (<install>
      (<!>                             name: tree-border
        (<!>                           name: tree-scroller
          (<!>                         name: content
            (<!>                       name: tree-header
              (<!>                     name: content
                (<!>                   name: tree
                  (<Tree-Node-Column>                      title: "Message" width: 200 toplevel-controls?: #f)
                  (<Tree-Label-Column>                     title: "Parameters" width: 366)
                  (<Tree-Label-Column>                     title: "Result" width: 80)
                  (<Tree-Label-Column>                     title: "Window" width: 173)))))))))
  
  
  ;;;
  ;;;; Host
  ;;;
  
  
  @convert-guest
  (method meta (palette-title)
    "Message Spy")
  
  
  @convert-guest
  (method meta (palette-position)
    {Point 200 200})
  
  
  @convert-guest
  (method meta (palette-size)
    {Dimension 836 339})
  
  
  ;;;
  ;;;; Spy
  ;;;
  
  
  (method (spy-domain)
    'windows)


  (method (spy client)
    (when (is? client Message-Consumer)
      (set! old-consumer (get-message-consumer~ client))
      (set-message-consumer~ client (new Spyer self client))))


  (method (unspy client)
    (when (is? client Message-Consumer)
      (set-message-consumer~ client old-consumer)))


  (method (incoming-message level window msg wparam lparam)
    (let* ((info (find msg Symbolic-Messages key: third))
           (cat  (if info (second info) (find-category msg))))
      (when (or (eq? category 'all) (eq? category cat))
        (let* ((tree (get-tree))
               (image (cdr (assq cat Message-Categories)))
               (message (if info (first info) (present-message msg cat)))
               (parameters
                (case message
                  ((WM_PAINT)             (present-paint              window wparam lparam))
                  ((WM_NCPAINT)           (present-ncpaint            window wparam lparam))
                  ((WM_ERASEBKGND)        (present-erase-background   window wparam lparam))
                  ((WM_PRINT)             (present-print              window wparam lparam))
                  ((WM_PRINTCLIENT)       (present-print-client       window wparam lparam))
                  ((WM_ACTIVATEAPP)       (present-activate-app       window wparam lparam))
                  ((WM_STYLECHANGING)     (present-style-changing     window wparam lparam))
                  ((WM_WINDOWPOSCHANGING) (present-windowpos-changing window wparam lparam))
                  ((WM_WINDOWPOSCHANGED)  (present-windowpos-changed  window wparam lparam))
                  (else                 (present-general            window wparam lparam))))
               (c0 (new Tree-Node  title: message image: image))
               (c1 (new Tree-Label title: parameters))
               (c2 (new Tree-Label title: ""))
               (c3 (new Tree-Label title: (format "{_ :v}{s}" (* level 5) window)))
               (item (get-visible-count~ tree)))
          (add-row~ tree children: (list c0 c1 c2 c3))
          (ensure-at-end~ tree)
          (update-view)
          (when slowdown?
            (sleep slowdown-quantum))
          item))))


  (method (incoming-result level row result)
    (when (/= result 0)
      (let ((tree (get-tree))
            (cell (new Cell row 2)))
        (set-title~ (get-cell-data~ tree cell) result)
        (invalidate-cell~ tree cell))))


  (method (find-category msg)
    (cond ((>= msg WM_APP) 'app)
          ((>= msg WM_USER) 'user)
          (else 'unknown)))


  (method (present-message msg cat)
    (case cat
      ((user) (format "WM_USER + {s}" (- msg WM_USER)))
      ((app)  (format "WM_APP + {s}" (- msg WM_APP)))
      (else (format "{s}, #x{x}" msg msg))))
  
  
  ;;;
  ;;;; Presenters
  ;;;


  (method (present-general window wparam lparam)
    (format "wparam: #x{x width: 8 :justify :right :padding #\\0}, lparam: #x{x width: 8 :justify :right :padding #\\0}" wparam lparam))


  (method (present-paint window wparam lparam)
    (format "hdc: {s}, update: {s}" wparam (get-update-rect~ window)))


  (method (present-ncpaint window wparam lparam)
    (format "hrgn: {s}, lparam: {s}" wparam lparam))


  (method (present-erase-background window wparam lparam)
    (format "hdc: {s}" wparam))


  (method (present-print window wparam lparam)
    (format "hdc: {s}, flags: {l}" wparam (bits->symbolic lparam PRINTFLAG)))


  (method (present-print-client window wparam lparam)
    (format "hdc: {s}, flags: {l}" wparam (bits->symbolic lparam PRINTFLAG)))
  
  
  (method (present-activate-app window wparam lparam)
    (format "active: {s}, thread id: {s}" wparam lparam))
  
  
  (method (present-style-changing window wparam lparam)
    (let ((rec (coerce lparam STYLESTRUCT)))
      (if (= wparam GWL_STYLE)
          (format "style - old: {l}, new: {l}"
                  (bits->symbolic (get rec 'styleOld) WINSTYLE)
                  (bits->symbolic (get rec 'styleNew) WINSTYLE))
        (format "extended style - old: {l}, new: {l}"
                (bits->symbolic (get rec 'styleOld) WINEXSTYLE)
                (bits->symbolic (get rec 'styleNew) WINEXSTYLE)))))
  
  
  (method (present-windowpos-changing window wparam lparam)
    (let ((rec (coerce lparam WINDOWPOS)))
      (format "flags: {l}" (bits->symbolic (get rec 'flags) WINDOWPOSSTYLE))))
  
  
  (method (present-windowpos-changed window wparam lparam)
    (let ((rec (coerce lparam WINDOWPOS)))
      (format "flags: {l}" (bits->symbolic (get rec 'flags) WINDOWPOSSTYLE)))))


;;;
;;;; Spyer
;;;


(class Spyer extends Object implements Message-Consumer
  
  
  (slot level initialize 0)
  (slot spy-window)
  (slot client)
  
  
  (method (initialize wnd clt)
    (nextmethod)
    (set! spy-window wnd)
    (set! client clt))
  
  
  (method (dispatch-message msg wparam lparam)
    (let ((row (incoming-message~ spy-window level client msg wparam lparam)))
      (increase! level)
      (let ((result (dispatch-message~ client msg wparam lparam)))
        (decrease! level)
        (when row
          (incoming-result~ spy-window level row result))
        result)))))
