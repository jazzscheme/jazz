;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; JML Transformations
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2007
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.jml.transformation.JML-Transformation jazz


(import (jazz.jml)
        (jazz.library)
        (jazz.utilities))
  
  
(class JML-Transformation-Class extends Class
  
  
  (slot patterns initialize '())
  
  
  (method public (get-patterns)
    patterns)
  
  
  (method public (add-pattern pattern)
    (unless (memq? pattern patterns)
      (set! patterns (cons pattern patterns))))
  
  
  (method public (has-pattern? tag)
    (let ((class self)
          (found? false))
      (while (and (not found?) (neq? class JML-Transformation))
        (let ((patterns (get-patterns~ class)))
          (if (memq? tag patterns)
              (set! found? true)
            (set! class (type-ascendant class)))))
      found?)))


(class JML-Transformation metaclass JML-Transformation-Class extends Object
  
  
  ;;;
  ;;;; Transformation
  ;;;
  
  
  (slot parser)
  
  
  (method (initialize . rest)
    (bind-keywords ((parser-class null)) rest
      (nextmethod)
      (set! [parser self] (new (either parser-class JML-Parser)))))
  
  
  ;;;
  ;;;; Transform
  ;;;
  
  
  (method public virtual (transform node)
    (parse~ parser (transform-jml node)))
  
  
  (method public (transform-jml node)
    (let ((new-node (transform-one node)))
      (if (is? new-node JML-Text)
          (get-text~ new-node)
        `(,(tag->jml~ new-node) ,@(properties->jml~ new-node)
          ,@(map transform-jml (get-children~ new-node))))))
  
  
  (method (transform-one node)
    (if (node-pattern? node)
        (parse~ parser (transform-pattern node))
      node))
  
  
  (method (transform-pattern node)
    (let* ((tag (get-tag~ node))
           (proc (eval-symbol tag self)))
      (proc~ self node)))
  
  
  ;;;
  ;;;; Pattern
  ;;;
  
  
  (method (node-pattern? node)
    (and (is? node JML-Element)
         (let ((tag (get-tag~ node))
               (class (class-of self)))
           (has-pattern?~ class tag))))))
