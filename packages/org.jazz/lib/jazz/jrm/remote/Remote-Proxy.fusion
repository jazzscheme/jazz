;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Remote Proxy
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2007
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.jrm.remote.Remote-Proxy jazz


(import (jazz.jrm)
        (jazz.library)
        (jazz.utilities))


(class Remote-Proxy extends Object-Proxy uses (Utilities System WinUser WinSock)

  
  (slot ior initialize {})
  
  
  (method (initialize ior)
    (nextmethod)
    (set! [ior self] ior))


  (method (compare-object target)
    (if (is-not? target Remote-Proxy)
        :incompatible
      (compare-object~ ior (get-ior~ target))))
  
  
  ;;;
  ;;;; Access
  ;;;
  
  
  (method public (get-ior)
    ior)
  
  
  ;;;
  ;;;; Marshal
  ;;;
  
  
  (method (marshal)
    ior)
  
  
  ;;;
  ;;;; Send
  ;;;
  
  
  (method (send-to-stub method-name . arguments)
    (let ((host [host ior])
          (port [port ior])
          (reference [reference ior])
          (marshalled (map marshal-object arguments)))
      (with-closed ((socket (new Socket name: (format "Proxy Socket for {a}" method-name))))
        (connect~ socket host port)
        (send-object~ socket (list reference method-name marshalled))
        (let* ((info (unmarshal-object (receive-object~ socket)))
               (result (car info))
               (exception-info (cdr info)))
          (if (null? exception-info)
              result
            (bind (message stack) exception-info
              (error "A remote error occured while executing {t}: {a}{%}{%}{a}" method-name message stack)))))))
  
  
  ;;;
  ;;;; Liveliness
  ;;;
  
  
  (method (live?)
    (let ((host [host ior])
          (port [port ior]))
      (with-closed ((socket (new Socket name: "liveliness test")))
        (catch (Socket-Error err
                 (if (= (get-no~ err) WSAECONNREFUSED)
                     false
                   (signal err)))
          (connect~ socket host port)
          (send-object~ socket {})
          true))))))
