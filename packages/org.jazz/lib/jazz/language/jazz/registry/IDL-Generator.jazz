;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; IDL Generator
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2007
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.language.jazz.registry.IDL-Generator jazz


(import (jazz.language.jazz)
        (jazz.library)
        (jazz.utilities))


(class IDL-Generator extends Object uses (Utilities System COM WinIDL)


  (slot library)
  (slot interfaces)
  (slot classes)


  (method (initialize (library: library {}))
    (nextmethod)
    (set! library~self library)
    (set! interfaces~self (library-interfaces~ library))
    (set! classes~self (library-classes~ library)))


  (method public (generate-idl)
    (call-with-output-file (parse~ (library-file~ library))
      (function (printer)
        (emit-file-header printer)
        (emit-forward-definitions printer)
        (emit-interfaces printer)
        (emit-library printer)
        (user-message "Done"))))


  ;;;
  ;;;; Emit
  ;;;


  (method (emit-file-header printer)
    (format printer "import \"unknwn.idl\";{%}")
    (format printer "{%}"))


  (method (emit-section-header section-name level printer)
    (format printer "{%}")
    (let* ((length (length section-name))
           (filler (make-string (+ length 4) #\-)))
      (format printer "{& :v}//{a}{%}" level filler)
      (format printer "{& :v}/// {a}{%}" level section-name)
      (format printer "{& :v}//{a}{%}" level filler)))


  (method (emit-forward-definitions printer)
    (for-each (function (interface)
                (format printer "interface {a};{%}" (type-name interface)))
              interfaces))


  (method (emit-interfaces printer)
    (for-each (function (interface)
                (emit-interface interface printer))
              interfaces))


  (method (emit-interface interface printer)
    (let ((name (type-name interface)))
      (emit-section-header name 0 printer)
      (format printer "{%}")
      (format printer "[{%}")
      (format printer "{&}object,{%}")
      (format printer "{&}uuid({a}),{%}" (upcase (->string (category-guid interface))))
      (format printer "{&}helpstring({s}),{%}" (either (category-helpstring interface) ""))
      (format printer "{&}pointer_default(unique){%}")
      (format printer "]{%}")
      (format printer "interface {a} : {a}{%}" name (type-name (type-ascendant interface)))
      (format printer "~{{%}")
      (emit-definitions interface printer)
      (format printer "};{%}")))
  
  
  (method (emit-definitions interface printer)
    (for-each (function (definition)
                (when (field? definition)
                  (let ((value (definition-value definition)))
                    (when (coexternal? value)
                      (emit-definition value printer)))))
              (category-fields interface)))
  
  
  (method (emit-definition external printer)
    (format printer "{&}HRESULT {a}(" (proxy-name~ Interpreter external))
    (let ((first? #t))
      (for-each (function (param)
                  (format printer "{a}{a} {a}"
                          (if first? "" ", ")
                          (idl-direction (get-direction~ param))
                          (idl-type (get-type~ param)))
                  (set! first? #f))
                (proxy-parameters~ Interpreter external)))
    (format printer "){%}"))


  (method (idl-direction direction)
    (case direction
      ((<in>)     "[in]")
      ((<out>)    "[out]")
      ((<in-out>) "[in, out]")))


  (method (idl-type type)
    (if (and (interface? type) (subtype? type IUnknown))
        (format "{a}*" (type-name type))
      (ecase type
        ((int) "long")
        ((string) "wchar_t")
        (else (error "Unable to get idl type for: {t}" type)))))


  (method (emit-library printer)
    (let ((name (type-name library)))
      (emit-section-header name 0 printer)
      (format printer "{%}")
      (format printer "[{%}")
      (format printer "{&}uuid({a}),{%}" (upcase (->string (category-guid library))))
      (format printer "{&}helpstring({s}),{%}" (either (category-helpstring library) ""))
      (format printer "{&}version(1.0){%}")
      (format printer "]{%}")
      (format printer "library {a}{%}" name)
      (format printer "~{")
      (emit-classes printer)
      (format printer "};{%}")))


  (method (emit-classes printer)
    (for-each (function (class)
                (emit-class class printer))
              classes))


  (method (emit-class class printer)
    (let ((name (type-name class)))
      (emit-section-header name 1 printer)
      (format printer "{%}")
      (format printer "{&}[{%}")
      (format printer "{& 2}uuid({a}),{%}" (upcase (->string (category-guid class))))
      (format printer "{& 2}helpstring({s}),{%}" (either (category-helpstring class) ""))
      (format printer "{&}]{%}")
      (format printer "{&}coclass {a}{%}" name)
      (format printer "{&}~{{%}")
      (let ((first? #t))
        (for-each (function (interface)
                    (format printer "{& 2}{a}interface {a};{%}" (if first? "[default] " "") (type-name interface))
                    (set! first? #f))
                  (class-cointerfaces class)))
      (format printer "{&}};{%}")))))
