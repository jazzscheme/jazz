;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Event Dispatcher
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2007
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.library.com.CDispatcher jazz


(import (jazz.library)
        (jazz.utilities))


(class CDispatcher extends CoObject implements IDispatch uses (Utilities System OLE WinError WinIDL)
  
  
  (properties :guid {GUID "18D527DB-909F-4c5e-95BD-AC281D50CDE0"})
  
  
  (slot event-handlers initialize '())
  
  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method public (register-event-handler dispid event-handler)
    (set! event-handlers (cons (cons dispid event-handler) event-handlers)))
  
  
  (method public (unregister-event-handler dispid)
    (set! event-handlers (remove! dispid event-handlers :key car)))

  
  ;;;
  ;;;; IDispatch
  ;;;
  
  
  (comethod int (GetTypeInfoCount <out> int&)
    (debug-ole 'GetTypeInfoCount)
    E_NOTIMPL)
  
  
  (comethod int (GetTypeInfo <in> int info <in> int lcid <out> int&)
    (debug-ole 'GetTypeInfo)
    E_NOTIMPL)
  
  
  (comethod int (GetIDsOfNames <in> int reserved <in> int names <in> int names-count <in> int lcid <out> int&)
    (debug-ole 'GetIDsOfNames)
    E_NOTIMPL)
  
  
  (comethod int (Invoke <in> int dispid <in> int riid <in> int lcid <in> int flags <in> DISPPARAMS& params <in> int result <in> int exception <in> int argerr)
    (debug-ole 'Invoke)
    (invoke-event-handler dispid flags params)
    S_OK)
  
  
  (method (invoke-event-handler dispid flags params)
    (let ((event-handler-info (assq dispid event-handlers)))
      (when event-handler-info
        (let ((event-handler (cdr event-handler-info))
              (evt (new Dispatch-Event :dispatch self params)))
          (invoke~ event-handler self evt)))))))
