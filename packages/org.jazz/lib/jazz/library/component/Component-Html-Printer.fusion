;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Component HTML-Printer
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2007
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.library.component.Component-Html-Printer jazz


(import (jazz.library)
        (jazz.utilities))


(class Component-HTML-Printer extends HTML-Printer
  
  
  ;;;
  ;;;; Printing
  ;;;
    
    
  (method (print-html)
    (with-document (get-presentation~ client)
      (function dynamic ()
        (print-component))
      header?: #f))
  
  
  (method (print-component)
    (print-properties))
  
  
  (method (print-children)
    (for-each (function dynamic (group)
                (for-each (function dynamic (issue)
                            (format printer "{a}{%}" (get-title~ group)))
                          (get-children~ group)))
              (get-children~ client)))
  
  
  ;;;
  ;;;; Properties
  ;;;
  
  
  (method (print-properties)
    (format printer "<UL>{%}")
    (for-each (function dynamic (property)
                (let* ((value (read-property client property))
                       (presented (->string value)))
                  (format printer "<LI>{a} {a}{%}" property value)))
              (get-all-properties))
    (format printer "</UL>{%}"))
  
  
  (method (get-all-properties)
    (sort < (collect-if display-property? (all-fields (class-of client))) key: field-name))
  
  
  (method (display-property? property)
    (and (property? property)
         (property-getter property)
         (display-property?~ client property)))))
