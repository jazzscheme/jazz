;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Components
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2007
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.library.component jazz


(import (jazz.library)
        (jazz.jml)
        (jazz.ui.dialog)
        (jazz.ui.view))


;;;
;;;; Form
;;;


(definition public (open-form)
  (read-from-file (choose-file multiple-selection?: #f)))


(definition public (read-from-file file)
  (call-with-input-file file
    (lambda (reader)
      (let ((form (read reader)))
        (when (pair? form)
          (set! form (jml->form form)))
        @convert (assert (is? form Form))
        (set-origin~ form file)
        form))))


;;;
;;;; Clipboard
;;;


(definition public (determine-unique-paster components)
  (case (length components)
    ((0) {})
    ((1) (determine-paster~ (first components)))
    (else (let ((parents (remove-duplicates (map (function dynamic (component) (get-parent~ component)) components))))
            (when (= 1 (length parents))
              (let ((parent (car parents)))
                (when parent
                  (determine-paster~ parent #f)))))))))
