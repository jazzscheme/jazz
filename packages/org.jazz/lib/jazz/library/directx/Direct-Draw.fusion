;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Direct Draw
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2007
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.library.directx.Direct-Draw jazz


(import (jazz.library)
        (jazz.utilities))


(class Direct-Draw extends Object uses (Utilities WinDef COM DxVBLib)
  
  
  @waiting-bug-fix-in-DxVBLib
  (
  (slot public handle)
  
  
  (method (initialize hnd)
    (nextmethod)
    (set! handle hnd)
    (destroy-mandatory))
  
  
  (method (destroy)
    (corelease handle)
    (nextmethod))
  
  
  ;;;
  ;;;; Interface
  ;;;


  (constant Levels
    (list
      (cons 'normal DDSCL_NORMAL)))
  
  
  (method public (set-cooperative-level level (toplevel: toplevel {}))
    (let ((flags (either (cdr (assq level Levels)) (error "Unknown cooperative level: {t}" level))))
      (SetCooperativeLevel~ handle (if toplevel (get-handle~ toplevel) NULL) flags)))
  
  
  (method public (create-surface caps (size: size {}))
    (let ((ddsd (new DDSURFACEDESC2)))
      (set ddsd 'lSize (size-of DDSURFACEDESC2))
      (set ddsd 'lFlags (bit-or DDSD_CAPS (if size (bit-or DDSD_WIDTH DDSD_HEIGHT) 0)))
      (set ddsd '(ddsCaps lCaps) caps)
      (when size
        (set ddsd 'lWidth (get-width~ size))
        (set ddsd 'lHeight (get-height~ size)))
      (new Direct-Draw-Surface (CreateSurface~ handle ddsd))))
  
  
  (method public (create-primary)
    (create-surface DDSCAPS_PRIMARYSURFACE))
  
  
  (method public (create-offscreen size)
    (create-surface DDSCAPS_OFFSCREENPLAIN size: size)))))
