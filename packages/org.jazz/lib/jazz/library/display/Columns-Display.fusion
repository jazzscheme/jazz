;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Columns Display
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2007
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.library.display.Columns-Display jazz


(import (jazz.library)
        (jazz.utilities))


(class Columns-Display extends Object
  
  
  (slot protected columns <Object>  initialize '())
  (slot protected line    <Integer> initialize 0)
  
  
  ;;;
  ;;;; Initialization
  ;;;
  
  
  (method (initialize . rest)
    (nextmethod))
  
  
  ;;;
  ;;;; Access
  ;;;
  
  
  (method public (get-columns)
    columns)
  
  
  ;;;
  ;;;; Columns
  ;;;
  
  
  (method public (add-column column . rest)
    (bind-keywords ((before {})) rest
      (if (null? before)
          (set! columns (append! columns (list column)))
        (let ((rank (find before columns :return 'position)))
          (set! columns (insert! column columns rank))))))
  
  
  (method public (add-columns columns . rest)
    (bind-keywords ((before {})) rest
      (for-each (function dynamic (column)
                  (add-column column :before before))
                columns)))
  
  
  ;;;
  ;;;; Printing
  ;;;
  
  
  (method public (newline)
    (increase! line))
  
  
  (method public (print-to printer)
    (prepare-columns)
    (print-columns printer))
  
  
  (method public (prepare-columns)
    (prepare-base)
    (prepare-empties)
    (prepare-print))
  
  
  (method (prepare-base)
    (for-each (function dynamic (column)
                (fill-empty~ column)
                (rewind~ column))
              columns))
  
  
  (method (prepare-empties)
    (loop (for n from 0 below line)
          (let ((previous-column {})
                (previous-data {}))
            (for-each (function dynamic (column)
                        (unless (get-empty?~ column)
                          (let ((data (replace-empty~ column previous-column previous-data)))
                            (set! previous-column column)
                            (set! previous-data data))))
                      columns))))
  
  
  (method (prepare-print)
    (for-each (function dynamic (column)
                (unless (get-empty?~ column)
                  (prepare-print~ column)))
              columns))
  
  
  ;; Bug to fix: suppose x and y columns, x is contoured and y is not.
  ;; If y is empty, then y won't have the change to end the contouring...
  (method public (print-columns printer)
    (let ((last (- line 1)))
      (loop (for n from 0 below line)
            (let ((previous-column {})
                  (previous-data {}))
              (for-each (function dynamic (column)
                          (unless (get-empty?~ column)
                            (let ((data (get-next~ column)))
                              (print-to~ column data previous-column previous-data printer)
                              (set! previous-column column)
                              (when data
                                (set! previous-data data)))))
                        columns))
            (when (/= n last)
              (format printer "{%}")))))))
