;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Exemplar Domains
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2007
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.library.exemplar.Exemplar-Domain jazz


(import (jazz.library)
        (jazz.utilities))


(class Exemplar-Domain extends Object
  
  
  (slot protected content initialize (new Axis))
  
  
  ;;;
  ;;;; Access
  ;;;
  
  
  (method public (get-content)
    content)
  
  
  (method public (set-content value)
    (set! content (coerce value Axis)))
  
  
  (method public (empty-content . rest)
    (bind-keywords ((remove-named? false)) rest
      (set! content (collect-if (function dynamic (exemplar)
                                  (and (not remove-named?) (named?~ exemplar)))
                                content))))
  
  
  ;;;
  ;;;; Exemplars
  ;;;
  
  
  (method public (add exemplar)
    (axis-add content exemplar))
  
  
  (method public (reference rank/name)
    (if (integer? rank/name)
        (element content rank/name)
      (locate rank/name)))
  
  
  (method public (locate name . rest)
    (bind-keywords ((error? true)) rest
      ;; (assert name)
      (either (find name content key: (function dynamic (exemplar) [name exemplar]))
              (when error?
                (error "Unable to locate {t}" name)))))
  
  
  (method public (similar exemplar)
    ; domain-free exemplar must call (setup-inherited) to inherit default properties
    (when (not (get-domain~ exemplar))
      (set-domain~ exemplar self))
    (find exemplar content test: =))
  
  
  (method public (get-rank exemplar)
    (find exemplar content return: 'position))
  
  
  ;;;
  ;;;; Inheritance
  ;;;
  
  
  (method public (has-ascendant? exemplar base)
    (call/ec
      (lambda (return)
        (for-each-ascendant~ exemplar
          (function dynamic (ascendant)
            (when (eq? ascendant base)
              (return true))))
        false)))
  
  
  ;;;
  ;;;; Update
  ;;;
  
  
  (method protected (update-descendants base)
    (for-each (function dynamic (exemplar)
                (when (has-ascendant? exemplar base)
                  (update~ exemplar)))
              content))
  
  
  ;;;
  ;;;; Persistence
  ;;;
  
  
  (method public (collect-persistent)
    (collect-if (function dynamic (exemplar)
                  [persistent? exemplar])
                content))))
