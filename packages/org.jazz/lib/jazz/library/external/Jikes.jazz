;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; The Jikes Java Compiler
;;;


(library jazz.library.external.Jikes jazz


(import (jazz.library)
        (jazz.library.shell)
        (jazz.utilities))


(class Jikes extends Object uses (Utilities System WinDef)
  
  
  ;;;
  ;;;; Compile
  ;;;
  
  
  (method public (compile file (directory: directory {}) (class-path: class-path {}))
    (user-message "Compiling {a}..." (parse~ file))
    (let ((command (build-command file class-path)))
      (receive (code output-lines error-lines)
          (create-process command
                          directory: directory
                          :capture-output? #t
                          :capture-error? #t
                          :pipe-size 262144
                          visible?: #f)
        (when (/= code EXIT_SUCCESS)
          (report-errors error-lines))))
    (user-message "Done"))

  
  ;;;
  ;;;; Command
  ;;;
  
  
  (method (build-command file class-path)
    (format "Jikes +F +Z +P +E +T1 -g -classpath {l detail: :human separator: \";\"} \"{a}\"" class-path (parse~ file)))

  
  ;;;
  ;;;; Errors
  ;;;
  
  
  (method (report-errors lines)
    (let ((parsed (map parse-error lines)))
      ;; for testing...
      (bind (file range msg) (car parsed)
        (message-box msg)
        (edit-document~ (get-application) file selection: range))))
  

  (method (parse-error line)
    (unless (empty-string? line)
      (let ((split (split line ":")))
        (bind (drive file sr sc er ec . parts) split
         (let* ((converted (substitute #\slash #\backslash file))
                (file (new File (list 'Root (format "{a}:{a}" drive converted))))
                (sr (- (parse-integer sr) 1))
                (sc (- (parse-integer sc) 1))
                (er (- (parse-integer er) 1))
                (ec (- (parse-integer ec) 1))
                (range (new Range$Cell$ (new Cell sr 0) (new Cell (+ er 1) 0)))
                (msg (join parts ":")))
           (list file range msg))))))))
