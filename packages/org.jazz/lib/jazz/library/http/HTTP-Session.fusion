;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; HTTP Sessions
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2007
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.library.http.HTTP-Session jazz


(import (jazz.library)
        (jazz.utilities))


(class HTTP-Session extends Object
  
  
  ;;;
  ;;;; Manager
  ;;;
  
  
  (definition meta Session-Id
    0)
  
  
  (definition meta Sessions
    '())
  
  
  (method meta public (get-sessions)
    Sessions)
  
  
  (method meta public (new-session)
    (let ((session (new self Session-Id)))
      (set! Sessions (cons session Sessions))
      (increase! Session-Id)
      session))
  
  
  (method meta public (close-session session)
    (set! Sessions (remove! session Sessions)))
  
  
  (method meta public (find-session session-id)
    (find-if (function dynamic (session)
               (= (get-id~ session) session-id))
             Sessions))
  
  
  ;;;
  ;;;; Session
  ;;;
  
  
  (slot id         initialize {})
  (slot properties initialize '())
  
  
  (method (initialize id)
    (nextmethod)
    (set! [id self] id))
  
  
  (method (print printer readably)
    (print-unreadable self printer
      (function dynamic (printer)
        (format printer ":id {s}" id))))
  
  
  ;;;
  ;;;; Access
  ;;;
  
  
  (method public (get-id)
    id)
  
  
  ;;;
  ;;;; Properties
  ;;;
  
  
  (definition Not-Found
    {Box not-found})


  (method public (get-properties)
    properties)
  
  
  (method public (get-property name . rest)
    (bind-keywords ((error? true)) rest
      (let ((value (getf properties name not-found: Not-Found)))
        (if (neq? value Not-Found)
            value
          (when error?
            (error "Unknown property: {s}" name))))))
  
  
  (method public (set-property name value)
    (if (getprop properties name)
        (setf properties name value)
      (set! properties (addf properties name value))))))
