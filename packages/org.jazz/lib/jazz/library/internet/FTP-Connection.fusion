;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; FTP Connections
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2007
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.library.internet.FTP-Connection jazz


(import (jazz.library)
        (jazz.utilities))


(class FTP-Connection extends Internet-Connection uses (Utilities WinDef WinBase WinInet)
  
  
  (method (default-port)
    INTERNET_DEFAULT_FTP_PORT)
  
  
  (method (open-connection session server port username password)
    (validate-server server)
    (InternetConnect (get-handle~ session) server port (either username NULL) (either password NULL) INTERNET_SERVICE_FTP 0 0))
  
  
  (method (validate-server server)
    (when (and (>= (length server) 3)
               (= (subseq server 0 3) "ftp"))
      (error "Server strings should not include the ftp prefix")))
  
  
  (method public (get-current-directory)
    (let ((dirname (make-string MAX_PATH)))
      (if (not (FtpGetCurrentDirectory handle dirname MAX_PATH))
          (error "Unable to get current directory")
        (adjust-string dirname)
        dirname)))
  
  
  (method public (get-file remote local (transfer-type: transfer-type (quote ascii)))
    (when (not (FtpGetFile handle remote (parse~ local) false 0 (encore-transfer-type transfer-type) 0))
      (error "Unable to get file")))
  
  
  (method public (put-file local remote (transfer-type: transfer-type (quote ascii)))
    (when (not (FtpPutFile handle (parse~ local) remote (encore-transfer-type transfer-type) 0))
      (error "Unable to put file")))
  
  
  (method public (delete-file remote)
    (when (not (FtpDeleteFile handle remote))
      (error "Unable to delete file")))
  
  
  ;;;
  ;;;; Utilities
  ;;;
  
  
  (method (encore-transfer-type transfer-type)
    (case transfer-type
      ((ascii) FTP_TRANSFER_TYPE_ASCII)
      ((binary) FTP_TRANSFER_TYPE_BINARY)
      (else (error "Unknown FTP transfer type: {s}" transfer-type))))))
