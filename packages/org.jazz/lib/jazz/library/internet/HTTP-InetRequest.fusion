;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; HTTP InetRequest
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2007
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.library.internet.HTTP-InetRequest jazz


(import (jazz.library)
        (jazz.utilities))


(class HTTP-InetRequest extends Object uses (Utilities System WinDef WinBase WinKernel WinInet)


  (slot handle initialize {})


  (method (initialize connection parameter . rest)
    (bind-keywords ((username {}) (password {})) rest
      (nextmethod)
      (set! handle (open-request connection parameter username password))
      (destroy-mandatory)))
  
  
  (method protected virtual (open-request connection parameter username password)
    )


  (method (destroy)
    (InternetCloseHandle handle)
    (nextmethod))


  (method public (get-handle)
    handle)
  
  
  ;;;
  ;;;; Send
  ;;;
  
  
  (method public (send)
    (unless (HttpSendRequest handle NULL 0 0 0)
      (error "Unable to send request ({t})" (winerror))))
  
  
  ;;;
  ;;;; Queries
  ;;;
  
  
  (method public (query-status-code)
    (query-numerical-value HTTP_QUERY_STATUS_CODE))
  
  
  (method public (query-content-length)
    (query-numerical-value2 HTTP_QUERY_CONTENT_LENGTH))
  
  
  (method (query-numerical-value flag)
    (let ((string (make-string 128)))
      (HttpQueryInfo handle flag string 128 0)
      (parse-integer string)))
  
  
  ;; Was temporarely patched to always return 5000 because of a bug...
  (method (query-numerical-value2 flag)
    (let ((string (make-string 128)))
      (HttpQueryInfo handle flag string 128 0)
      (parse-integer string)))
    
  
  ;;;
  ;;;; Utilities
  ;;;

  
  (method (get-extension page)
    (let ((pos (find #\period page :return 'position)))
      (when pos
        (subseq page (+ pos 1)))))))
