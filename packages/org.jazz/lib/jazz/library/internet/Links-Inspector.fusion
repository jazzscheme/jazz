;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Links Inspector
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2007
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.library.internet.Links-Inspector jazz


(import (jazz.jml)
        (jazz.library)
        (jazz.platform)
        (jazz.ui)
        (jazz.literals)
        (jazz.utilities))


(class Links-Inspector extends Layout-View

  
  (property browser initialize {} getter get-browser setter set-browser)

  
  (slot document initialize {})
  (slot links    initialize '())


  (form
    (<install>                                              title: "Links" size: {Dimension 300 500} layout-type: border
      (<Layout-View>                                        size: {Dimension 100 33} layout-type: flow layout-insets: {Rect 0 6 0 0} location: north
        (<Push-Tool>                  name: launch          size: {Dimension 22 22} tooltip?: #t tooltip-text: "Launch" image-name: {Bitmap-Resource "Launch"} portfolio: :icons action-handler: {Event-Handler form: on-launch})
        (<Push-Tool>                  name: update          size: {Dimension 22 22} tooltip?: #t tooltip-text: "Update" image-name: {Bitmap-Resource "Refresh"} portfolio: :icons action-handler: {Event-Handler form: on-update}))
      (<Border-View>                  name: projects-border size: {Dimension 278 462} location: center border-type: edge
        (<Scroller-View>                                    vscroll?: #t
          (<!>                        name: content         layout-type: fill
            (<Tree-Header>
              (<!>                    name: content
                (<Tree-View>          name: links           portfolio: :icons selection-mode: row selection-handler: {Event-Handler form: on-selection-change}
                  (<Tree-Node-Column>                       title: "URL" width: 278 toplevel-controls?: #f)))))))))
  
  
  ;;;
  ;;;; Access
  ;;;
  
  
  (method public (get-browser)
    browser)
  
  
  (method public (set-browser br)
    (when (/= br browser)
      (set! browser br)
      (if (null? browser)
          (begin
            (set! document {})
            (remove-every-row~ (locate 'links)))
        (set! document (get-document~ browser))
        (update-links))))
  
  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method (on-selection-change evt)
    (on-launch evt))
  
  
  (method (on-launch evt)
    (let ((close? (get-control?~ evt))
           (new? (get-shift?~ evt))
           (link (selected-link)))
      (if (null? link)
          (bell)
        (launch-link link new? close?))))
  
  
  (method (on-update evt)
    (update-links))
  
  
  ;;;
  ;;;; Update
  ;;;
  
  
  (method (update-links)
    (when document
      (let ((tree (locate 'links))
            (anchors (get-anchors~ document)))
        (with-update-locked~ tree
          (function dynamic ()
            (remove-every-row~ tree)
            (for-each (function dynamic (anchor)
                        (add-row~ tree children: (list (new Tree-Node title: (either (get-title~ anchor) (parse~ anchor)) image: {Bitmap-Resource "Link"})) user-data: anchor))
                      anchors))))))
  
  
  ;;;
  ;;;; Action
  ;;;
  
  
  (method (launch-link link new? close?)
    (if (not new?)
        (navigate~ browser link)
      (new-window~ browser link))
    (when close?
      ;; todo
      ))
  
  
  ;;;
  ;;;; Utilities
  ;;;
  
  
  (method (selected-link)
    (let* ((tree (locate 'links))
           (selection (get-single-selection~ tree)))
      (when selection
        (get-user-data~ (get-row~ tree selection)))))))
