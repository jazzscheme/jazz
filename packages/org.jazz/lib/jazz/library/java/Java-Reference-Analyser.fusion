;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Finding Java References
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2007
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.library.java.Java-Reference-Analyser jazz


(import (jazz.library)
        (jazz.utilities))


(class Java-Reference-Analyser extends Object
  

  (slot definitions initialize '())
  (slot unvisited   initialize '())
  (slot referenced  initialize {})
  
  
  ;;;
  ;;;; Initialization
  ;;;
  
  
  (method (initialize (catalog: catalog {}))
    (nextmethod)
    (setup (get-content~ catalog)))
  
  
  (method (setup d)
    (set! definitions d)
    (set! unvisited {})
    (set! referenced (new-hashtable equal?)))
  
  
  ;;;
  ;;;; Unvisited
  ;;;
  
  
  (method (push-unvisited name)
    (set! unvisited (cons name unvisited)))
  
  
  (method (pop-unvisited)
    (prog1 (car unvisited)
      (set! unvisited (cdr unvisited))))
  
  
  ;;;
  ;;;; Walker
  ;;;


  (method public (walk-roots roots)
    (for-each walk-root roots)
    (while unvisited
      (walk-definitions (pop-unvisited)))
    referenced)
  
  
  (method (walk-root root)
    (add-reference root :root)
    (walk-definitions root))
  
  
  (method (walk-definitions name)
    (user-message "Processing {a}" name)
    (for-each walk-definition (hash-ref definitions name)))


  (method (walk-definition definition)
    (typecase definition
      ((File-Entry) (walk-file definition))
      ((Category-Entry) (walk-category definition))
      ((Zipped-Entry) (walk-zipped definition))
      (else (for-each (function dynamic (reference)
                        (add-reference reference definition))
                      (get-references~ definition)))))
  
  
  (method (walk-file definition)
    (for-each walk-definition (get-definitions~ definition)))
  
  
  (method (walk-category definition)
    (let ((add
           (function dynamic (class-name)
             (add-reference class-name definition))))
      (for-each add (get-extends~ definition))
      (when (is? definition Class-Entry)
        (for-each add (get-implements~ definition))))
    (for-each walk-definition (get-definitions~ definition)))
  
  
  (method (walk-zipped definition)
    (for-each walk-definition (get-definitions~ definition)))
  
  
  ;;;
  ;;;; References
  ;;;


  (method (already-referenced? name)
    (hash-ref referenced name))


  (method (add-reference name definition)
    (unless (already-referenced? name)
      (hash-set! referenced name definition)
      (push-unvisited name)))))
