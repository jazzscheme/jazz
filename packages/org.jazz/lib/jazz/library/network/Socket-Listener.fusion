;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Socket Listener
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2007
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.library.network.Socket-Listener jazz


(import (jazz.library)
        (jazz.utilities))


(class Socket-Listener extends Object)


@wait (


(class Socket-Listener extends Thread
  
  
  (slot listening-socket initialize {})
  (slot started-impulse  initialize (new Impulse))
  (slot server-state     initialize 'stopped)
  
  
  ;;;
  ;;;; Access
  ;;;
  

  (method public (listening-host)
    (assert-started)
    (get-host~ listening-socket))
  
  
  (method public (listening-port)
    (assert-started)
    (get-port~ listening-socket))
  
  
  ;;;
  ;;;; Thread
  ;;;
    
  
  (method (run)
    (start-listener))
  
  
  ;;;
  ;;;; State
  ;;;
  
  
  (method public (get-server-state)
    server-state)
  
  
  (method (assert-started)
    (when (neq? server-state 'started)
      (error "Socked listener not started: {t}" self)))
  
  
  (method public (wait-started . rest)
    ;; Note that timeout is quite large because listening to a socket can trigger a firewall
    ;; that will pop a dialog asking for user confirmation (even when listening to localhost!).
    (bind-keywords ((timeout 30000) (error? true)) rest
      (wait-for started-impulse :timeout timeout error?: error?)))
  
  
  ;;;
  ;;;; Server
  ;;;
  
  
  (definition Invalid-Socket
    -1)

  
  (method protected (start-listener . rest)
    (bind-keywords ((host {}) (port 'any)) rest
      (set! listening-socket (new Listening-Socket name: "Listening Socket"))
      (listen~ listening-socket :host host :port port)
      (set! server-state 'started)
      (set-event~ started-impulse)
      (while (neq? server-state 'stopping)
        (let ((handle (accept~ listening-socket)))
          ;; This happens when stop-listener closes and thus unblocks the listening socket...
          (unless (= handle Invalid-Socket)
            (let ((connection-socket (new Socket name: "Connection Socket" :handle handle)))
              (accept-connection connection-socket)))))
      (set! server-state 'stopped)))
  
  
  (method public virtual (stop-listener)
    (set! server-state 'stopping)
    (close-listening-socket)
    (wait-for self))
  
  
  (method (close-listening-socket)
    (when listening-socket
      (close~ listening-socket)
      (set! listening-socket {})))
  
  
  ;;;
  ;;;; Connection
  ;;;
  
  
  (method protected virtual (accept-connection socket)
    )))
)