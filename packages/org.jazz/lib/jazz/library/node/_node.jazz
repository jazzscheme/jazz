;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Nodes
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2007
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.library.node jazz


(import (jazz.library))


(specialize inline as node=? (= n1 <Node> n2 <Node>) <bool>
  (and (eq? (get-name~ n1) (get-name~ n2))
       (every? (function (property)
                 (equal? (get-value~ n1 property) (get-value~ n2 property)))
               (node-properties~ n1))))


;;;
;;;; Node
;;;


(class Node extends Object
  
  
  (slot protected name  accessors generate)
  (slot protected owned accessors generate)
  
  
  (method protected virtual (node-properties)
    '())
  
  
  (method (initialize . rest)
    (bind-keywords ((name {}) . others) rest
      (nextmethod)
      (set! name~self name)
      (set! owned~self '())
      (for-each-property set-property others)))
  
  
  (method (copy-object deep?)
    (let ((element (new (class-of self))))
      (set-name~ element name)
      (for-each (function (property)
                  (set-value~ element property (get-value property)))
                (node-properties))
      (set-owned~ element (copy owned))
      element))


  (method (compare-object target)
    (cond ((is-not? target (class-of self))
           :incompatible)
          ((and (= name (get-name~ target))
                (every? (function (property)
                          (= (get-value property) (get-value~ target property)))
                        (node-properties)))
           :equal)
          (else
           :not-equal)))

  
  (method (print printer readably)
    (format printer "~{{a}{k empty-value: {}}{k}}"
            (identifier-name (type-name (class-of self)))
            (list
             name: name)
            (owned-properties)))
  
  
  (method public (owned-properties)
    (let ((fact (new List-Factory)))
      (for-each (function (property)
                  (when (memq? property owned)
                    (put~ fact property)
                    (put~ fact (get-value property))))
                (node-properties))
      (get-output~ fact)))
  
  
  ;;;
  ;;;; Name
  ;;;
  
  
  (method public (named?)
    name)
  
  
  ;;;
  ;;;; Properties
  ;;;
  
  
  (method public (supports? property)
    (memq? property (node-properties)))
  
  
  (method public (set-property property <Object> value <Object>)
    (set-value property value)
    (unless (memq? property owned)
      (set! owned (cons property owned))))
  
  
  (method public (get-properties)
    (node-properties))
  
  
  ;;;
  ;;;; Values
  ;;;
  
  
  (method public virtual (get-value property)
    (error "Unknown property: {t}" property))
  
  
  (method public virtual (set-value property value)
    (error "Unknown property: {t}" property))))
