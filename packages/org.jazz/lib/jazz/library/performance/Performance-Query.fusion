;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Performance Query
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2007
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.library.performance.Performance-Query jazz


(import (jazz.library)
        (jazz.utilities))


(class Performance-Query extends Object uses (Utilities WinDef WinPerf)


  (slot query)


  (method (initialize)
    (nextmethod)
    (bind-values (status query) (PdhOpenQuery NULL 0)
      (validate-status status)
      (set! [query self] query)
      (destroy-mandatory)))


  (method (destroy)
    (validate-status (PdhCloseQuery query))
    (nextmethod))
  
  
  (method public (add-counter . rest)
    (bind-keywords ((path {}) (object-name {}) (counter-name {}) (browse? false)) rest
      (let ((path (counter-path path object-name counter-name browse?)))
        (bind-values (status counter) (PdhAddCounter query path 0)
          (validate-status status)
          counter))))
  
  
  (method (counter-path path object-name counter-name browse?)
    (cond (path path)
          (browse? (browse-counter-path))
          ((and object-name counter-name) (format "\\{a}({a}#{a})\\{a}" object-name (module-base) (guess-process-instance) counter-name))
          (else (error "One of :path, :object-name and :counter-name, or :browse? must be specified"))))
  
  
  (method public (collect-data)
    (validate-status (PdhCollectQueryData query)))
  
  
  (method public (get-counter-value counter)
    (let ((value (new PDH_FMT_COUNTERVALUE)))
      (validate-status (PdhGetFormattedCounterValue counter PDH_FMT_LONG NULL value))
      (get value 'longValue)))
  

  (method (browse-counter-path)
    (let ((path (make-string PDH_MAX_COUNTER_PATH))
          (conf (new PDH_BROWSE_DLG_CONFIG)))
      (set conf 'configurationFlags (bit-or PDH_BROWSE_DLG_CONFIG_bIncludeInstanceIndex PDH_BROWSE_DLG_CONFIG_bSingleCounterPerDialog PDH_BROWSE_DLG_CONFIG_bLocalCountersOnly))
      (set conf 'hWndOwner 0)
      (set conf 'szDataSource 0)
      (set conf 'szReturnPathBuffer path)
      (set conf 'cchReturnPathLength (length path))
      (set conf 'pCallBack 0)
      (set conf 'dwCallBackArg 0)
      (set conf 'CallBackStatus 0)
      (set conf 'dwDefaultDetailLevel PERF_DETAIL_WIZARD)
      (PdhBrowseCounters conf)
      (adjust-string path)
      path))
  
  
  (method (validate-status status)
    (when (/= status 0)
      (error "Performance query error (#x{x})" status)))))
