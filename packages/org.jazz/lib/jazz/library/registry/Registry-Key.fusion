;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Windows Registry Keys
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2007
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.library.registry.Registry-Key jazz


(import (jazz.library)
        (jazz.utilities))


(class Registry-Key extends Object uses (Utilities WinDef WinError WinKernel WinAdv WinNT)


  (slot key)
  (slot predefined?)


  (method (initialize . rest)
    (bind-keywords ((key {}) (predefined? false)) rest
      (nextmethod)
      (set! [key self] key)
      (set! [predefined? self] predefined?)
      (destroy-mandatory)))


  (method (destroy)
    (when (not predefined?)
      (when (/= (RegCloseKey key) ERROR_SUCCESS)
        (error "Unable to close registry key")))
    (nextmethod))


  (method public (open-key path . rest)
    (bind-keywords ((container {}) (class Registry-Key) (error? true)) rest
      (bind-values (err subkey) (RegOpenKeyEx key path 0 KEY_READ)
        (if (= err ERROR_SUCCESS)
            (new-in container class :key subkey)
          (when error?
            (error "Unable to open registry key: {t}" path))))))


  (method public (create-key path . rest)
    (bind-optionals ((container {}) (class Registry-Key)) rest
      (bind-values (err subkey) (RegCreateKey key path)
        (if (= err ERROR_SUCCESS)
            (new-in container class :key subkey)
          (error "Unable to create registry key: {t}" path)))))


  (method public (get-default)
    (let* ((size 512)
           (value (make-string (- size 1))))
      (bind-values (err size) (RegQueryValue key NULL value size)
        (if (or (= err ERROR_SUCCESS) (= err ERROR_MORE_DATA))
            (begin
              (adjust-string value)
              value)
          (system-error err)))))


  (method public (set-default value)
    (let ((size (* (length value) 2)))
      (let ((err (RegSetValue key NULL REG_SZ value size)))
        (when (/= err ERROR_SUCCESS)
          (system-error err)))))


  (method public (get-value value-name)
    (let* ((size 512)
           (value (make-string (- size 1))))
      (bind-values (err type size) (RegQueryValueEx key value-name 0 value size)
        (if (or (= err ERROR_SUCCESS) (= err ERROR_MORE_DATA))
            (begin
              (adjust-string value)
              value)
          (system-error err)))))


  (method public (set-value value-name value)
    (let ((size (* (+ (length value) 1) 2)))
      (let ((err (RegSetValueEx key value-name 0 REG_SZ value size)))
        (when (/= err ERROR_SUCCESS)
          (system-error err)))))


  (method public (iterate-subkeys)
    (new Subkey-Iterator key)))


;;;
;;;; Subkey-Iterator
;;;


(class Subkey-Iterator extends Iterator
  
  
  (slot key)
  (slot index initialize 0)
  
  
  (method (initialize k)
    (nextmethod)
    (set! key k))
  
  
  (method (get-next!)
    (let* ((size 128)
           (name (make-string (- size 1)))
           (err  (RegEnumKey key index name size)))
      (ecase err
        ((ERROR_SUCCESS)
         (increase! index)
         (adjust-string name)
         name)
        ((ERROR_NO_MORE_ITEMS)
         (eof-object))
        (else
         (system-error err)))))))
