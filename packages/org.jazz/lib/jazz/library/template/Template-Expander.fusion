;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; File Template Expander
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2007
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.library.template.Template-Expander jazz


(import (jazz.library)
        (jazz.utilities))


(class Template-Expander extends Object
  
  
  (slot delimiter-escape)
  (slot delimiter-start)
  (slot delimiter-end)
  
  
  (method (initialize (delimiter-escape: delimiter-escape #\~) (delimiter-start: delimiter-start #\[) (delimiter-end: delimiter-end #\]))
    (nextmethod)
    (set! delimiter-escape~self delimiter-escape)
    (set! delimiter-start~self delimiter-start)
    (set! delimiter-end~self delimiter-end))
  
  
  (method public (expand template associations output)
    (with-closed ((input (template-reader template)))
      (let ((c))
        (while (neq? (set! c (read-char input)) #\eof)
          (if (eqv? c delimiter-start)
              (if (eqv? (peek-char input) delimiter-start)
                  (format output "{c}" (read-char input))
                (process-variable input output associations))
            (format output "{c}" c))))))
  
  
  (method (template-reader template)
    (if (sequence? template)
        (new String-Reader template)
      (new File-Reader template)))
  
  
  (method (process-variable input output associations)
    (bind (name) (read-delimited input "template parameter" delimiter-end)
      (format output "{a}"
              (let ((info (assv name associations)))
                (if info
                    (cdr info)
                  (error "Unable to find variable {t} in association list" name))))))))
