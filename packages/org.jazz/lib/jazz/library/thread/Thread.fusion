;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Threads
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2007
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.library.thread.Thread jazz


(import (jazz.library)
        (jazz.utilities))


(class Thread extends Object)


@convert


(class Thread extends Object implements Handle-Container
  
  
  (method (initialize (name: name {}) (information: information {}) (context: context {}) (execute: execute {}))
    (nextmethod)
    (set-thread-name self name)
    (set-thread-information self information)
    (set-thread-context self context)
    (set-thread-proc self execute)
    (set-thread-active-node self {})
    (set-thread-active-context self {})
    (start))
  
  
  (method (print printer readably)
    (print-unreadable self printer
      (function dynamic (printer)
        (let ((name (get-name)))
          (if (null? name)
              (when (thread-proc self)
                (format printer "Anonymous Thread"))
            (format printer "{s}" name))))))
  
  
  (method public virtual (present)
    (if (eq? self (primary-thread))
        "Primary Thread"
      (let ((name (get-name)))
        (if (null? name)
            (if (thread-proc self)
                "Anonymous Thread"
              (class-of self))
          name))))
  
  
  ;;;
  ;;;; Start
  ;;;


  (method (start)
    (start-thread self))
  
  
  ;;;
  ;;;; Launch
  ;;;


  (method (launch)
    (catch Toplevel-Signal
      (catch Cancel-Signal
        (catch Stop-Signal
          (coinitialize)
          (run)))))


  (method protected virtual (run)
    (run-thread self))
  
  
  ;;;
  ;;;; Access
  ;;;


  (method (get-handle)
    (thread-handle self))


  (method public (get-state)
    (thread-state self))


  (method public (set-state state)
    (set-thread-state self state))
  
  
  (method public (get-name)
    (thread-name self))
  
  
  (method public (set-name name)
    (set-thread-name self name))
  
  
  (method public (get-active-node)
    (thread-active-node self))
  
  
  (method public (set-active-node node)
    (set-thread-active-node self node))
  
  
  (method public (get-active-context)
    (thread-active-context self))
  
  
  (method public (set-active-context context)
    (set-thread-active-context self context))
  
  
  (method public (get-information)
    (thread-information self))
  
  
  ;;;
  ;;;; Control
  ;;;
  
  
  (method public (running?)
    (not (suspended?)))
  
  
  (method public (suspended?)
    (> (thread-state self) 0))
  
  
  (method public (terminate)
    (terminate-thread self))
  
  
  (method public (suspend)
    (suspend-thread self))
  
  
  (method public (resume)
    (resume-thread self))


  (method public (alive?)
    (get-handle))))
