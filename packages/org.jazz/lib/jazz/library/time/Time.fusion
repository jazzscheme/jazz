;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Times
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2007
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.library.time.Time jazz


(import (jazz.library)
        (jazz.utilities))


(class Time extends Object uses (Utilities Windows WinBase WinKernel)
  
  
  (slot elapse)
  
  
  ;;;
  ;;;; System
  ;;;
  
  
  (method meta public (local-time)
    (get-time~ (local-date)))
  
  
  (method meta public (universal-time)
    (get-time~ (universal-date)))
  
  
  @convert-literal
  (method meta (construct-literal context elapse)
    (new self elapse))
  
  
  (method meta public (from-filetime filetime)
    (new self (make-long (get filetime 'dwLowDateTime)
                         (get filetime 'dwHighDateTime))))
  
  
  ;;;
  ;;;; Time
  ;;;
  
  
  (method (initialize e)
    (nextmethod)
    (set! elapse e))


  (method (compare-object target)
    (if (is-not? target Time)
        :incompatible
      (compare elapse (get-elapse~ target))))
  
  
  (method (print printer readably)
    (format printer "~{{a} {a}}"
            (type-name (class-of self))
            elapse))
  
  
  ;;;
  ;;;; Access
  ;;;
  
  
  (method public (get-elapse)
    elapse)


  (method public (get-filetime)
    (let ((filetime (new FILETIME)))
      (set filetime 'dwLowDateTime (lolong elapse))
      (set filetime 'dwHighDateTime (hilong elapse))
      filetime))
  
  
  ;;;
  ;;;; Convert
  ;;;
  
  
  (method public (get-date)
    (let ((filetime (get-filetime))
          (systemtime (new SYSTEMTIME)))
      (FileTimeToSystemTime filetime systemtime)
      (from-systemtime systemtime)))
  
  
  (method public (universal->local)
    (let ((filetime (get-filetime))
          (local (new FILETIME)))
      (FileTimeToLocalFileTime filetime local)
      (from-filetime local)))
  
  
  (method public (local->universal)
    (let ((filetime (get-filetime))
          (local (new FILETIME)))
      (LocalFileTimeToFileTime filetime local)
      (from-filetime local)))
  
  
  ;;;
  ;;;; Arithmetic
  ;;;
  
  
  (definition milli
    10000L)
  
  (definition second
    (* milli 1000))
  
  (definition minute
    (* second 60))
  
  (definition hour
    (* minute 60))
  
  (definition day
    (* hour 24))
  
  
  (method public (add field value)
    (set! elapse (+ elapse (* (get-units field) value))))
  
  
  (method public (get-duration field)
    (/ elapse (get-units field)))
  
  
  (method (get-units field)
    (case field
      ((milli) milli)
      ((second) second)
      ((minute) minute)
      ((hour) hour)
      ((day) day)
      (else (error "Unknown time unit: {s}" field))))))
