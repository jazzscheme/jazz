;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Unit Moniker
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2007
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.library.unit.Unit-Moniker jazz


(import (jazz.platform)
        (jazz.library)
        (jazz.utilities))


(class Unit-Moniker extends Moniker
  
  
  (slot unit-name)
  
  
  @convert-literal
  (method meta (construct-literal context unit-name)
    (new self unit-name))
  
  
  (method (print printer readably)
    (format printer "~{{a} {s}}"
            (identifier-name (type-name (class-of self)))
            unit-name))
  
  
  ;;;
  ;;;; Moniker
  ;;;


  (method (get-name)
    unit-name)
  
  
  (method (get-file)
    (get-source))
  
  
  ;;;
  ;;;; Protocol
  ;;;
  
  
  @convert
  (method meta (get-protocol)
    'unit)
  
  
  @convert
  (method meta (new-moniker list)
    (new self (car list)))
  
  
  (method (present)
    (format "{a}" unit-name))
  
  
  ;;;
  ;;;; Initialization
  ;;;
  
  
  (method (initialize name)
    (nextmethod)
    (set! unit-name name))
  
  
  ;;;
  ;;;; Source
  ;;;
  
  
  (method public (get-source)
    (either (get-manifest-source unit-name)
            (error "Unable to find unit: {t}" unit-name)))
    
  
  ;;;
  ;;;; Input/Output
  ;;;


  (method (load-lines)
    (load-lines~ (get-source)))


  (method (save-lines lines)
    (save-lines~ (get-source) lines))
  
  
  (method (load-form)
    (load-form~ (get-source)))))
