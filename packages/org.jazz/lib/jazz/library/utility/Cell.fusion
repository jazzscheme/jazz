;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Cells
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2007
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.library.utility.Cell jazz


(import (jazz.library))


(proclaim (optimize))


(class Cell extends Numeric
  
  
  (slot public row <fx> accessors generate)
  (slot public col <fx> accessors generate)
    
    
  (method (initialize r c)
    (nextmethod)
    (set! row r)
    (set! col c))
  
  
  (method (copy-object deep?)
    (new Cell row col))


  (method (compare-object target)
    (if (is-not? target Cell)
        :incompatible
      (let ((compared (compare row (get-row~ target))))
        (if (/= compared :equal)
            compared
          (compare col (get-col~ target))))))
  
  
  (method (fold-literal)
    `(new Cell ',row ',col))
  
  
  (method (print printer readably)
    (format printer "~{{a} {a} {a}}"
            (identifier-name (type-name (class-of self)))
            row
            col))


  ;;;
  ;;;; Access
  ;;;
  
  
  (method public (increase-row (delta <fx> 1))
    (set! row (+ row delta)))
  
  
  (method public (increase-col (delta <fx> 1))
    (set! col (+ col delta)))


  ;;;
  ;;;; Numeric
  ;;;


  (method (negate)
    (new Cell (- row) (- col)))


  (method (add n)
    (cond ((is? n Cell) (new Cell (+ row (get-row~ n)) (+ col (get-col~ n))))
          ((integer? n) (new Cell row (+ col n)))
          (else (error "Cannot add {t} to {t}" n self))))


  (method (inverse)
    (error "Cannot inverse {t}" self))


  (method (multiply n)
    (if (integer? n)
        (new Cell (* row n) (* col n))
      (error "Cannot multiply {t} to {t}" n self)))))
