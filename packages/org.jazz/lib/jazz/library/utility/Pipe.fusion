;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Two Way Pipes
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2007
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.library.utility.Pipe jazz


(import (jazz.library)
        (jazz.utilities))


(class Pipe extends Object
  
  
  (slot read-handle)
  (slot write-handle)
  (slot reader       initialize {})
  (slot printer      initialize {})
  
  
  (method (initialize . rest)
    (bind-keywords ((security-attributes null) (size null)) rest
      (nextmethod)
      (bind-values (ok? read write) (CreatePipe (either security-attributes NULL) (either size 0))
        (if (not ok?)
            (error "Unable to create pipe")
          (set! read-handle read)
          (set! write-handle write)
          (destroy-mandatory)))))
  
  
  (method (destroy)
    (when reader
      (close~ reader))
    (close~ read-handle)
    (when printer
      (close~ printer))
    (close~ write-handle)
    (nextmethod))
  
  
  ;;;
  ;;;; Access
  ;;;
  
  
  (method public (get-read-handle)
    read-handle)
  
  
  (method public (get-write-handle)
    write-handle)
  
  
  (method public (get-reader)
    (unless reader
      (set! reader (new Pipe-Reader read-handle)))
    reader)
  
  
  (method public (get-printer)
    (unless printer
      (set! printer (new Pipe-Printer write-handle)))
    printer)))
