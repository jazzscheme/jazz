;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Properties
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2007
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.library.utility.Properties jazz


(import (jazz.library)
        (jazz.ui.view)
        (jazz.utilities))


(class Properties extends Object


  (slot file       initialize {})
  (slot properties initialize '())
  (slot modified?  initialize false)
  
  
  (method (initialize . rest)
    (bind-keywords ((file {})) rest
      (nextmethod)
      (set! properties (new-hashtable equal?))
      (when file
        (autoload file))))


  ;;;
  ;;;; Access
  ;;;


  (method public (get-file)
    file)


  (method public (set-file f)
    (set! file f))
  
  
  (method public (get-properties)
    properties)


  (method public (get-property property . rest)
    (bind-optionals ((default {})) rest
      (hash-ref properties property default)))


  (method public (set-property property value)
    (hash-set! properties property value)
    (set-modified? true))
  
  
  (method public (push-property property value)
    (set-property property (cons value (get-property property))))
  
  
  (method public (empty-properties)
    (empty-hashtable properties))


  ;;;
  ;;;; Input/Output
  ;;;


  (method public (load f)
    (empty-hashtable properties)
    (load-hashtable properties f false)
    (set! file f)
    (set-modified? false))
  
  
  (method public (close)
    (save)
    (empty-hashtable properties))


  (method public (save)
    (if (null? file)
        (save-as)
      (save-content)))
  
  
  (method public (save-as)
    (save-to (get-modal SaveFile-Dialog)))
  
  
  (method public (save-to f)
    (set! file f)
    (save-content))
  
  
  (method (save-content)
    (save-file-content)
    (set-modified? false))


  (method protected virtual (save-file-content)
    (with-closed ((printer (new File-Printer file)))
      (let ((all (gather-all-entries)))
        (when all
          (let ((max (essay all (find-longest-property all)))
                (sorted (sort < all :key car)))
            (for-each (function dynamic (info)
                        (bind (property . value) info
                          (format printer "{s}{_ :v} {s}{%}" property (- max (length property)) value)))
                      sorted))))))
  
  
  (method (gather-all-entries)
    (let ((list '()))
      (for-each-hash (function dynamic (property value)
                       (set! list (cons (cons property value) list)))
                     properties)
      list))
  
  
  (method (find-longest-property list)
    (apply generic-max (map length (map car list))))


  ;;;
  ;;;; Modified State
  ;;;


  (method (get-modified?)
    modified?)


  (method (set-modified? state)
    (when (/= state modified?)
      (set! modified? state)))))
