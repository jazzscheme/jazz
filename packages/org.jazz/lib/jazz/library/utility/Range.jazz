;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Ranges
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2007
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.library.utility.Range jazz


(import (jazz.library))


(class Range extends Object
  
  
  (slot public start)
  (slot public end)
    
    
  (method (initialize s e)
    (nextmethod)
    (set! start s)
    (set! end e))
  
  
  (method (copy-object deep?)
    (new Range start end))


  (method (compare-object target)
    (cond ((is-not? target Range)
           :incompatible)
          ((and (= start (get-start~ target)) (= end (get-end~ target)))
           :equal)
          (else
           :not-equal)))
  
  
  (method (fold-literal)
    `(new Range ',start ',end))
  
  
  (method (print printer readably)
    (format printer "~{{a} {s} {s}}"
            (identifier-name (type-name (class-of self)))
            start
            end))
  
  
  (method public inline (get-start)
    start)
  
  
  (method public inline (get-end)
    end)
  
  
  (method public virtual (extent)
    (- end start))
  
  
  (method public virtual (cardinality)
    (+ (extent) 1))
  
  
  (method public (inside? n)
    (and (>= n start)
         (< n end)))


  (method public (before? n)
    (< n start))


  (method public (after? n)
    (> n end))
  
  
  (method public (intersect? range)
    (and (< (get-start~ range) end)
         (>= (get-end~ range) start)))


  (method public (intersect range)
    (when (intersect? range)
      (new (class-of self) (generic-max start (get-start~ range)) (generic-min end (get-end~ range)))))))
