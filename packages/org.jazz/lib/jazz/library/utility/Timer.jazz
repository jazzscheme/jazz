;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Timers
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2007
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.library.utility.Timer jazz


(import (jazz.library)
        (jazz.utilities)
        (time))


(class Timer extends Object)


@convert


(class Timer extends Object


  (slot start)
  (slot objects)
  (slot triggers)


  (method (initialize)
    (nextmethod)
    (reset))


  (method public (reset)
    (reset-clock)
    (reset-objects)
    (reset-triggers))


  (method public (reset-clock)
    (set! start (time->seconds (current-time))))


  (method public (reset-objects)
    (set! objects (free-objects)))
  
  
  (method public (reset-triggers)
    (set! triggers (gc-triggers)))


  (method public (get-duration (reset?: reset? #t))
    (prog1 (- (time->seconds (current-time)) start)
      (when reset?
        (reset-clock))))


  (method public (get-objects (reset?: reset? #t))
    (prog1 (- objects (free-objects))
      (when reset?
        (reset-objects))))
  
  
  (method public (get-triggers (reset?: reset? #t))
    (prog1 (tail (gc-triggers) (length triggers))
      (when reset?
        (reset-triggers))))


  (method public (get-duration-in-seconds)
    (get-duration))


  (method public (report-duration)
    (user-message "Duration: {s} seconds"
                  (get-duration-in-seconds)))


  (method public (report-usage)
    (user-message "Duration: {s} seconds, Memory: {s}, Triggers: {s}"
                  (get-duration-in-seconds)
                  (get-objects)
                  (get-triggers)))))
