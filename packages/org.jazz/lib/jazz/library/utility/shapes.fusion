;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Shapes
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2007
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details. jazz


(library jazz.library.utility.shapes jazz


(import (jazz.library))


;;;
;;;; Point
;;;


(class Point extends Numeric
  
  
  (slot public h <fx>)
  (slot public v <fx>)
    
    
  (method (initialize h v)
    (nextmethod)
    (set! h~self h)
    (set! v~self v))
  
  
  (method (copy-object deep?)
    (new Point h v))


  (method (compare-object target)
    (cond ((is-not? target Point)
           :incompatible)
          ((let ((target-point <Point> target))
             (and (= h (get-h~ target-point)) (= v (get-v~ target-point))))
           :equal)
          (else
           :not-equal)))
  
  
  (method (fold-literal)
    `(new Point ',h ',v))
  
  
  (method (print printer readably)
    (format printer "~{Point {a} {a}}"
            h
            v))


  ;;;
  ;;;; Access
  ;;;
  
  
  (method public (get-h)
    h)
  
  
  (method public (get-v)
    v)


  ;;;
  ;;;; Numeric
  ;;;


  (method (negate)
    (new Point (- h) (- v)))
  
  
  (method (norm)
    (sqrt (+ (expt h 2) (expt v 2))))


  (method (add n)
    (cond ((is? n Point) (new Point (+ h (get-h~ n)) (+ v (get-v~ n))))
          ((is? n Dimension) (new Point (+ h (get-width~ n)) (+ v (get-height~ n))))
          ((integer? n) (new Point (+ h n) v))
          (else (error "Cannot add {t} to {t}" n self))))


  (method (inverse)
    (error "Cannot inverse {t}" self))


  (method (multiply n)
    (if (integer? n)
        (new Point (* h n) (* v n))
      (error "Cannot multiply {t} to {t}" n self))))


(class Point$fl$ extends Numeric
  
  
  (slot public h <fl>)
  (slot public v <fl>)
    
    
  (method (initialize h v)
    (nextmethod)
    (set! h~self h)
    (set! v~self v))
  
  
  (method (copy-object deep?)
    (new Point$fl$ h v))


  (method (compare-object target)
    (cond ((is-not? target Point$fl$)
           :incompatible)
          ((let ((target-point <Point$fl$> target))
             (and (= h (get-h~ target-point)) (= v (get-v~ target-point))))
           :equal)
          (else
           :not-equal)))
  
  
  (method (print printer readably)
    (format printer "~{Point$fl$ {a} {a}}"
            h
            v))


  ;;;
  ;;;; Access
  ;;;
  
  
  (method public (get-h)
    h)
  
  
  (method public (get-v)
    v)


  ;;;
  ;;;; Numeric
  ;;;


  (method (negate)
    (new Point$fl$ (- h) (- v)))
  
  
  (method (norm)
    (sqrt (+ (expt h 2) (expt v 2))))


  (method (add n)
    (cond ((is? n Point$fl$) (new Point$fl$ (+ h (get-h~ n)) (+ v (get-v~ n))))
          ((is? n Dimension$fl$) (new Point$fl$ (+ h (get-width~ n)) (+ v (get-height~ n))))
          ((integer? n) (new Point$fl$ (+ h n) v))
          (else (error "Cannot add {t} to {t}" n self))))


  (method (inverse)
    (error "Cannot inverse {t}" self))


  (method (multiply n)
    (if (integer? n)
        (new Point$fl$ (* h n) (* v n))
      (error "Cannot multiply {t} to {t}" n self))))


;;;
;;;; Dimension
;;;


(class Dimension extends Numeric
  
  
  (slot public width  <fx>)
  (slot public height <fx>)
    
    
  (method (initialize w h)
    (nextmethod)
    (set! width w)
    (set! height h))
  
  
  (method (copy-object deep?)
    (new Dimension width height))


  (method (compare-object target)
    (if (is-not? target Dimension)
        :incompatible
      (let ((compared (compare width (get-width~ target))))
        (if (/= compared :equal)
            compared
          (compare height (get-height~ target))))))
  
  
  (method (fold-literal)
    `(new Dimension ',width ',height))
  
  
  (method (print printer readably)
    (format printer "~{Dimension {a} {a}}"
            width
            height))


  ;;;
  ;;;; Access
  ;;;
  
  
  (method public (get-width)
    width)
  
  
  (method public (get-height)
    height)


  ;;;
  ;;;; Numeric
  ;;;


  (method (negate)
    (new Dimension (- width) (- height)))


  (method (add n)
    (cond ((is? n Dimension) (new Dimension (+ width (get-width~ n)) (+ height (get-height~ n))))
          ((is? n Point) (new Dimension (+ width (get-h~ n)) (+ height (get-v~ n))))
          (else (error "Cannot add {t} to {t}" n self))))


  (method (inverse)
    (error "Cannot inverse {t}" self))


  (method (multiply n)
    (if (integer? n)
        (new Dimension (* width n) (* height n))
      (error "Cannot multiply {t} to {t}" n self))))


(class Dimension$fl$ extends Numeric
  
  
  (slot public width  <fl>)
  (slot public height <fl>)
    
    
  (method (initialize w h)
    (nextmethod)
    (set! width w)
    (set! height h))
  
  
  (method (copy-object deep?)
    (new Dimension$fl$ width height))


  (method (compare-object target)
    (if (is-not? target Dimension$fl$)
        :incompatible
      (let ((compared (compare width (get-width~ target))))
        (if (/= compared :equal)
            compared
          (compare height (get-height~ target))))))
  
  
  (method (print printer readably)
    (format printer "~{Dimension$fl$ {a} {a}}"
            width
            height))


  ;;;
  ;;;; Access
  ;;;
  
  
  (method public (get-width)
    width)
  
  
  (method public (get-height)
    height)


  ;;;
  ;;;; Numeric
  ;;;


  (method (negate)
    (new Dimension$fl$ (- width) (- height)))


  (method (add n)
    (cond ((is? n Dimension$fl$) (new Dimension$fl$ (+ width (get-width~ n)) (+ height (get-height~ n))))
          ((is? n Point$fl$) (new Dimension$fl$ (+ width (get-h~ n)) (+ height (get-v~ n))))
          (else (error "Cannot add {t} to {t}" n self))))


  (method (inverse)
    (error "Cannot inverse {t}" self))


  (method (multiply n)
    (if (integer? n)
        (new Dimension$fl$ (* width n) (* height n))
      (error "Cannot multiply {t} to {t}" n self))))


;;;
;;;; Rect
;;;


(class Rect extends Object
  
  
  (slot public left   <fx> accessors generate)
  (slot public top    <fx> accessors generate)
  (slot public right  <fx> accessors generate)
  (slot public bottom <fx> accessors generate)
  
  
  @New-Implementation
  (method meta (coerce-object object)
    (typecase object
      ((Point) (new Rect (get-h~ object) (get-v~ object) 0 0))
      (else (nextmethod object))))
  
  
  (method (initialize l t r b)
    (nextmethod)
    (set! left l)
    (set! top t)
    (set! right r)
    (set! bottom b))
  
  
  (method (copy-object deep?)
    (new Rect left top right bottom))


  (method (compare-object target)
    (cond ((is-not? target Rect)
           :incompatible)
          ((and (= left (get-left~ target)) (= top (get-top~ target)) (= right (get-right~ target)) (= bottom (get-bottom~ target)))
           :equal)
          (else
           :not-equal)))
  
  
  (method (fold-literal)
    `(new Rect ',left ',top ',right ',bottom))
  
  
  (method (print printer readably)
    (format printer "~{{a} {a} {a} {a} {a}}"
            (identifier-name (type-name (class-of self)))
            left
            top
            right
            bottom)))


(class Rect$fl$ extends Object
  
  
  (slot public left   <fl> accessors generate)
  (slot public top    <fl> accessors generate)
  (slot public right  <fl> accessors generate)
  (slot public bottom <fl> accessors generate)
  
  
  @New-Implementation
  (method meta (coerce-object object)
    (typecase object
      ((Point$fl$) (new Rect$fl$ (get-h~ object) (get-v~ object) 0 0))
      (else (nextmethod object))))
  
  
  (method (initialize l t r b)
    (nextmethod)
    (set! left l)
    (set! top t)
    (set! right r)
    (set! bottom b))
  
  
  (method (copy-object deep?)
    (new Rect$fl$ left top right bottom))


  (method (compare-object target)
    (cond ((is-not? target Rect$fl$)
           :incompatible)
          ((and (= left (get-left~ target)) (= top (get-top~ target)) (= right (get-right~ target)) (= bottom (get-bottom~ target)))
           :equal)
          (else
           :not-equal)))
  
  
  (method (print printer readably)
    (format printer "~{{a} {a} {a} {a} {a}}"
            (identifier-name (type-name (class-of self)))
            left
            top
            right
            bottom))))
