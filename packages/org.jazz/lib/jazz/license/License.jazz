;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Licenses
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2007
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.license.License jazz


(import (jazz.license)
        (jazz.library)
        (jazz.system)
        (jazz.utilities)
        (time))


;; prendrait pas un no de version de la structure de license

;; Elements of list returned by (hashcode license)
;; 1-2  license expires : days since 2001
;; 3-4  key expires : days since 2001
;; 5    bitfield : demo=1
;; 6-7  reserved
;; 8    checksum : xor all = 0
;; 9-20 first 12 elements of md5 of owner
;; total = 32-char string (base32)


(class License extends Object


  (property license initialize {} getter get-license setter set-license)
  (property owner   initialize {} getter get-owner   setter set-owner)


  (method public (get-license)
    (encode32~ BaseCodec license))


  (method public (set-license value)
    (set! license (decode32~ BaseCodec string)))


  (method public (get-owner)
    owner)


  (method public (set-owner value)
    (set! owner value))
  
  
  (method public (valid-code?)
    (= 0 (apply bitwise-xor (hashcode license))))
  
  
  (method public (valid-owner?)
    (let ((hashed-owner (hash-owner owner))
           (hashed-license (subseq (hashcode license) 8)))
      (prefix? hashed-owner hashed-license)))
  
  
  (method public (key-expired?)
    (let* ((hashed-license (hashcode license))
           (key-expires (+ (arithmetic-shift (element hashed-license 1) 8)
                           (element hashed-license 2))))
      (> key-expires (now))))
  
  
  (method public (license-expired?)
    (let* ((hashed-license (hashcode license))
           (license-expires (+ (arithmetic-shift (element hashed-license 3) 8)
                               (element hashed-license 4))))
      (> license-expires (now))))
  
  
  @License-Creator-is-redefining-as-a-slot-SLC-to-fix
  (method public (demo?)
    (let* ((hashed-license (hashcode license))
           (bitfield (element hashed-license 5)))
      (mask-bit-set? bitfield 1)))
  
  
  (definition meta ElapseInDay
    (- (time->seconds (get-time~ (new Date 2001 1 2)))
       (time->seconds (get-time~ (new Date 2001 1 1))))
    @w
    864000000000L)
  
  
  (method meta (now)
    (/ (- (time->seconds (universal-time))
          (time->seconds (get-time~ (new Date 2001))))
       ElapseInDay))
  
  
  ;;;
  ;;;; Transform
  ;;;
  
  
  (definition meta Hash8
    @w
    "METASCUP"
    "22222222")
  
  
  (definition meta Roll20
    @w
    '(17 19 18 16 0 2 3 1 5 7 6 4 12 14 15 13 9 11 10 8)
    '(0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19))
  
  
  (method meta (hashcode list)
    (let ((hash (decode32~ BaseCodec Hash8)))
      (map (function (offset n)
             (bitwise-xor (element list offset)
                          (element hash (modulo n 5))))
           Roll20
           (naturals 0 (length list)))))
  
  
  (method (hash-owner owner)
    (unimplemented 'hash-owner)
    @windows-specific
    (with-closed ((provider (new Cryptography-Provider)))
      (let ((data (coerce owner Heap-Block)))
        (gather (hash-data~ provider data)))))))
