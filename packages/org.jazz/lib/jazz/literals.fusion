;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Literals
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2007
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.literals jazz


(import (jazz.access)
        (jazz.library)
        (jazz.platform)
        (jazz.schema)
        (jazz.ui))


;;;
;;;; Point
;;;


(register-literal-constructor 'Point
  (lambda (h v)
    (new Point h v)))


(specific (fold-literal (<Point> pt))
  `(new Point ',(get-h~ pt) ',(get-v~ pt)))


;;;
;;;; Dimension
;;;


(register-literal-constructor 'Dimension
  (lambda (width height)
    (new Dimension width height)))


(specific (fold-literal (<Dimension> d))
  `(new Dimension ',(get-width~ d) ',(get-height~ d)))


;;;
;;;; Cell
;;;


(register-literal-constructor 'Cell
  (lambda (row col)
    (new Cell row col)))


(specific (fold-literal (<Cell> c))
  `(new Cell ',(get-row~ c) ',(get-col~ c)))


;;;
;;;; Rect
;;;


(register-literal-constructor 'Rect
   (lambda (left top right bottom)
     (new Rect left top right bottom)))


(specific (fold-literal (<Rect> r))
  `(new Rect ',(get-left~ r) ',(get-top~ r) ',(get-right~ r) ',(get-bottom~ r)))


;;;
;;;; Range
;;;


(register-literal-constructor 'Range
   (lambda (start end)
     (new Range start end)))


(specific (fold-literal (<Range> r))
  `(new Range ',(get-start~ r) ',(get-end~ r)))


;;;
;;;; Action
;;;


(register-literal-constructor 'Action
  (lambda (action-context action-name . properties)
    (new Action action-context action-name properties)))


(specific (fold-literal (<Action> action))
  `(new Action ',(get-action-context~ action) ',(get-action-name~ action) ',(get-properties~ action)))


;;;
;;;; Box
;;;


(register-literal-constructor 'Box
  (lambda rest
    (if (null? rest)
        (new Box)
      (new Box (car rest)))))


(specific (fold-literal (<Box> box))
  `(new Box ',(get-boxed~ box)))


;;;
;;;; Shortcut
;;;


(register-literal-constructor 'Shortcut
  (lambda rest
    (new Shortcut (butlast rest) (last rest))))


(specific (fold-literal (<Shortcut> shortcut))
  `(new Shortcut ',(get-modifiers~ shortcut) ',(get-key~ shortcut)))


;;;
;;;; Locales
;;;


(register-literal-constructor 'Locales
  (lambda rest
    (apply new Locales rest)))


(specific (fold-literal (<Locales> locales))
  `(new Locales ,@(get-locales~ locales)))


;;;
;;;; Color
;;;


(definition Colors
  (new-hashtable eq?))


(definition (register-color name color)
  (hashtable-set! Colors name color))


(definition (registered-color name)
  (either (hashtable-ref Colors name false)
          (error "Unknown color: {s}" name)))


(register-literal-constructor 'Color
  (lambda rest
    (bind-keywords ((name {}) . others) rest
      (if name
          (registered-color name)
        (apply new Color rest)))))


(specific (fold-literal (<Color> color))
  (if (get-name~ color)
      `(registered-color ',(get-name~ color))
    `(new Color red: ',(get-red~ color) green: ',(get-green~ color) blue: ',(get-blue~ color))))


;;;
;;;; Font
;;;


(definition Fonts
  (new-hashtable eq?))


(definition (register-font name font)
  (hashtable-set! Fonts name font))


(definition (registered-font name)
  (either (hashtable-ref Fonts name false)
          (error "Unknown font: {s}" name)))


(register-literal-constructor 'Font
  (lambda rest
    (bind-keywords ((name {}) . others) rest
      (if name
          (registered-font name)
        (apply new Font rest)))))


(specific (fold-literal (<Font> f))
  (if (get-name~ f)
      `(registered-font ',(get-name~ f))
    `(new Font
       font-name: ',(get-font-name~ f)
       point-size: ',(get-point-size~ f)
       color: ',(get-color~ f)
       bold?: ',(get-bold?~ f)
       italic?: ',(get-italic?~ f)
       underline?: ',(get-underline?~ f)
       monospace?: ',(get-monospace?~ f))))


;;;
;;;; Pen
;;;


(definition Pens
  (new-hashtable eq?))


(definition (register-pen name pen)
  (hashtable-set! Pens name pen))


(definition (registered-pen name)
  (either (hashtable-ref Pens name false)
          (error "Unknown pen: {s}" name)))


(register-literal-constructor 'Pen
  (lambda ((name: name {}))
    (registered-pen name)))


(specific (fold-literal (<Pen> pen))
  `(registered-pen ',(get-name~ pen)))


;;;
;;;; File
;;;


(register-literal-constructor 'File
  (lambda rest
    (new File rest)))


(specific (fold-literal (<File> f))
  `(new File ',(get-list~ f)))


;;;
;;;; Directory
;;;


(register-literal-constructor 'Directory
  (lambda rest
    (new Directory rest)))


(specific (fold-literal (<Directory> d))
  `(new Directory ',(get-list~ d)))


;;;
;;;; Directory-Group
;;;


(register-literal-constructor 'Directory-Group
  (lambda rest
    (new Directory-Group rest)))


(specific (fold-literal (<Directory-Group> g))
  `(new Directory-Group ',(get-list~ g)))


;;;
;;;; Host
;;;


(register-literal-constructor 'Host
  (lambda rest
    (apply new Host rest)))


(specific (fold-literal (<Host> h))
  (case (get-origin~ h)
    ((name)    `(new Host name: ',(get-name~ h)))
    ((address) `(new Host :address ',(get-address~ h)))
    ((ip)      `(new Host :ip ',(get-ip~ h)))))


;;;
;;;; Datatype
;;;


@WAIT
(register-literal-constructor 'Datatype
  (lambda rest
    (new Datatype)))


@WAIT
(specific (fold-literal (<Datatype> datatype))
  `(new Datatype))


;;;
;;;; Systype
;;;


@WAIT
(register-literal-constructor 'Systype
  (lambda (name size precision scale default-value)
    (new Systype name size precision scale default-value)))


@WAIT
(specific (fold-literal (<Systype> systype))
  `(new Systype (get-name~ systype) (get-size~ systype) (get-precision~ systype) (get-scale~ systype) (get-default-value~ systype)))


;;;
;;;; IOR
;;;


(register-literal-constructor 'IOR
  (lambda (host port remotable reference)
    (new IOR host port remotable reference)))


(specific (fold-literal (<IOR> ior))
  `(new IOR ',(get-host~ ior) ',(get-port~ ior) ',(get-remotable~ ior) ',(get-reference~ ior)))


;;;
;;;; GUID
;;;


;; convert


(register-literal-constructor 'GUID
  (lambda rest
    (new GUID)))


(specific (fold-literal (<GUID> guid))
  `(new GUID))


;;;
;;;; Node
;;;


(definition (fold-node name node)
  `(new ,name
     name: ',(get-name~ node)
     ,@(owned-properties~ node)))


;;;
;;;; Exemplar
;;;


(definition (fold-exemplar name exemplar)
  `(new ,name
     name: ',(get-name~ exemplar)
     base: ',(get-base~ exemplar)
     ,@(owned-properties~ exemplar)))


;;;
;;;; Format
;;;


(register-literal-constructor 'Format
  (lambda rest
    (apply new Format rest)))


(specific (fold-literal (<Format> fmt))
  (fold-exemplar 'Format fmt))


;;;
;;;; Text-Style
;;;


(register-literal-constructor 'Text-Style
  (lambda rest
    (apply new Text-Style rest)))


(specific (fold-literal (<Text-Style> style))
  (fold-exemplar 'Text-Style style))


;;;
;;;; Hyperlink-Style
;;;


(register-literal-constructor 'Hyperlink-Style
  (lambda rest
    (apply new Hyperlink-Style rest)))


(specific (fold-literal (<Hyperlink-Style> style))
  (fold-exemplar 'Hyperlink-Style style))


;;;
;;;; Bitmap-Resource
;;;


(register-literal-constructor 'Bitmap-Resource
  (lambda (name)
    (new Bitmap-Resource name)))


(specific (fold-literal (<Bitmap-Resource> res))
  `(new Bitmap-Resource ',(get-name~ res)))


;;;
;;;; Icon-Resource
;;;


(register-literal-constructor 'Icon-Resource
  (lambda (name)
    (new Icon-Resource name)))


(specific (fold-literal (<Icon-Resource> res))
  `(new Icon-Resource ',(get-name~ res)))


;;;
;;;; Cursor-Resource
;;;


(register-literal-constructor 'Cursor-Resource
  (lambda (name)
    (new Cursor-Resource name)))


(specific (fold-literal (<Cursor-Resource> res))
  `(new Cursor-Resource ',(get-name~ res)))


;;;
;;;; Event
;;;


(register-literal-constructor 'Event
  (lambda (kind . properties)
    (new Event kind {} properties)))


;;;
;;;; Event-Handler
;;;


(register-literal-constructor 'Event-Handler
  (lambda (target-name method-name . properties)
    (new Event-Handler target-name: target-name method-name: method-name properties: properties)))


(specific (fold-literal (<Event-Handler> handler))
  `(new Event-Handler target-name: ',(get-target-name~ handler) method-name: ',(get-method-name~ handler) form-level: ',(get-form-level~ handler) execute: ',(get-execute~ handler) target: ',(get-target~ handler) properties: ',(get-properties~ handler)))


;;;
;;;; Selection-Handler
;;;


(register-literal-constructor 'Selection-Handler
  (lambda (target-name method-name force? . properties)
    (new Selection-Handler target-name: target-name method-name: method-name force?: force? properties: properties)))


(specific (fold-literal (<Selection-Handler> handler))
  `(new Selection-Handler target-name: ',(get-target-name~ handler) method-name: ',(get-method-name~ handler) force?: ',(get-force?~ handler) form-level: ',(get-form-level~ handler) execute: ',(get-execute~ handler) target: ',(get-target~ handler) properties: ',(get-properties~ handler)))


;;;
;;;; Version
;;;


(register-literal-constructor 'Version
  (lambda (major minor . rest)
    (receive (stage release revision) (parse-stage rest)
      (new Version major minor stage release revision))))


(definition (parse-stage rest)
  (let ((next
          (function dynamic ()
            (if (null? rest)
                0
              (prog1 (car rest)
                (set! rest (cdr rest)))))))
    (if (or (null? rest) (integer? (car rest)))
        (values {} (next) (next))
      (values (next) (next) (next)))))


(specific (fold-literal (<Version> version))
  `(new Version ',(get-major~ version) ',(get-minor~ version) ',(get-stage~ version) ',(get-release~ version) ',(get-revision~ version))))
