;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Contacts Manager
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2007
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.messenger.manager.Contacts-Manager jazz


(import (jazz.designer)
        (jazz.jml)
        (jazz.messenger)
        (jazz.platform)
        (jazz.process)
        (jazz.ui)
        (jazz.literals)
        (jazz.library)
        (jazz.library.component)
        (jazz.utilities))


;; send-message
;; chat (even in groups!)
;; send text, clipboard, files, ...
;; groupware
;; ask for debugging
;; remote monikers (under protection rules...
;;   could be a list of authorized persons (contacts)
;;   containing a list of authorized aliases)


(class Contacts-Manager extends Editor-View implements Exit-Listener
  

  (form
    (<install>                              size: {Dimension 300 500} layout-type: border
      (<Layout-View>     name: tools        size: {Dimension 100 33} layout-type: flow layout-insets: {Rect 0 6 0 0} location: north
        (<Push-Tool>     name: send-message size: {Dimension 22 22} tooltip?: #t tooltip-text: "Send Message" image-name: {Bitmap-Resource "Profile"} portfolio: :icons action-handler: {Event-Handler form: on-send-message})
        (<Separator>                        size: {Dimension 4 0})
        (<Push-Tool>     name: view         size: {Dimension 22 22} location: tail tooltip?: #t tooltip-text: "View" image-name: {Bitmap-Resource "Edit"} portfolio: :icons action-handler: {Event-Handler form: on-view}))
      (<Contacts-Editor> name: descendants  location: center
        (<!>             name: scroller     flat?: #t)
        (<!>             name: tree         show-header?: #f highlight-edited?: #f
          (<!>           name: descendant   title: "Contact" width: 291)))))
    
  
  @convert-external
  (method meta (external-name . rest)
    'contacts-manager)

  
  ;;;
  ;;;; Palette
  ;;;
  
  
  @convert-guest
  (method meta (palette-class)
    Tool-Palette)
  
  
  @convert-guest
  (method meta (palette-icon)
    {Bitmap-Resource "MsgUser"})
  
  
  @convert-guest
  (method meta (palette-title)
    "Contacts")
  
  
  ;;;
  ;;;; Docked
  ;;;
  
  
  (method (get-tools-view)
    (locate 'tools))
  
  
  (method (focus-default)
    (let ((tree (locate '(descendants tree))))
      (acquire-focus~ tree)))
  
  
  ;;;
  ;;;; Controller
  ;;;


  @convert
  (class Contacts-Manager-Controller extends Editor-View-Controller
    
    
    (method (document-status)
      "Contacts"))


  @convert
  (method (new-controller)
    (new Contacts-Manager-Controller self))

  
  ;;;
  ;;;; Reading
  ;;;
  
  
  (method meta (read-contacts)
    (with-safe-execution "loading the contacts"
      (function dynamic ()
        (let ((file {File User "Settings" "Contacts.jazz"}))
          (when (exists?~ file)
            (let ((process (get-process))
                  (contacts (instantiate~ (read-from-file file))))
              (install-context~ process contacts)
              contacts))))
      :continue-handler
      (function dynamic (err)
        )))

  
  ;;;
  ;;;; Component
  ;;;
  
  
  (method (install rest)
    (nextmethod rest)
    (set-shown?~ (locate-component '(descendants header)) false)
    (set-editor~ (locate 'descendants) self)
    (add-exit-listener~ (get-application) self)
    (set-client (read-contacts)))
  
  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method (resize-center dh dv)
    (size-figure~ (locate 'descendants) dh dv))
  
  
  (method (on-context-menu evt)
    (let* ((sender (get-sender~ evt))
           (pos (get-position~ evt))
           (acquired (acquire sender pos)))
      (with-context-click~ sender pos
        (function dynamic ()
          (let ((menu (new-context-menu (selected-object))))
            (when menu
              (track-popup-menu menu acquired)))))))
    
  
  (method (on-return-press evt)
    (on-send-message evt))

  
  (method (on-double-click evt)
    (on-send-message evt))
  
  
  (method (on-send-message evt)
    (let ((contact (selected-contact)))
      (if (null? contact)
          (bell)
        (send-message contact))))
  
  
  (method (on-view evt)
    )
  
  
  (method (prepare-exit)
    (when (get-modified?)
      (save)))
  
  
  ;;;
  ;;;; Menu
  ;;;
  
  
  (method (new-context-menu object)
    (typecase object
      ((Contact) (new Contact-Menu))))
  
  
  ;;;
  ;;;; Actions
  ;;;
  
  
  (method (send-message contact)
    )
  
  
  ;;;
  ;;;; Utilities
  ;;;
  
  
  (method (selected-object)
    (selected-component~ (locate '(descendants tree))))
  
  
  (method (selected-contact)
    (let ((object (selected-object)))
      (when (is? object Contact)
        object)))
  
  
  ;;;
  ;;;; Contact-Menu
  ;;;
  
  
  (class Contact-Menu extends Context-Menu
  
  
    (form
      (<install>
        (<Label-Item>     name: select title: "&Select" icon: {Bitmap-Resource "Select"} action-handler: {Event-Handler form: on-select})
        (<Separator-Item>)
        (<Label-Item>     name: exit   title: "E&xit" action-handler: {Event-Handler form: on-exit})))
  
  
    (method (on-send-message evt)
      ))))
