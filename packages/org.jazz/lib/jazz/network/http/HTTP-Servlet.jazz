;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; HTTP Servlets
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2007
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.network.http.HTTP-Servlet jazz


(import (jazz.library)
        (jazz.utilities))


(class HTTP-Servlet extends XHTML-Parser
  
  
  (slot server)
  (slot request)
  (slot generator)
  
  
  (method (initialize server request generator preferences)
    (nextmethod preferences: preferences)
    (set! server~self server)
    (set! request~self request)
    (set! generator~self generator))

  
  ;;;
  ;;;; Access
  ;;;
  
  
  (method public (get-server)
    server)
  
  
  (method public (get-request)
    request)
  
  
  (method public (get-generator)
    generator)

  
  ;;;
  ;;;; Process
  ;;;
  
  
  (method public (process-request request resource)
    (parse
      (invoke-servlet request resource)))
  
  
  (method virtual (invoke-servlet request resource)
    (either (find-pattern request resource)
            (error "Unable to find servlet for {s}" resource)))

  
  ;;;
  ;;;; Pattern
  ;;;
  
  
  (method (find-pattern request resource)
    (let ((associations (get-pattern-associations)))
      (cadr (assoc resource associations))))
  
  
  (method protected virtual (get-pattern-associations)
    '())

  
  ;;;
  ;;;; Pattern
  ;;;
  
  
  (method public (forward-servlet)
    )

  
  ;;;
  ;;;; Debug
  ;;;
  
  
  (method (debug-info)
    (when (get-debug?~ server)
      `((<hr>)
        ,@(all-details~ server request))))
  
  
  (method (debug-values . values)
    (when (get-debug?~ server)
      `(<table> border: "1"
         (<tr>
           ,@(map (function dynamic (value)
                    `(<td> ,(->string value)))
                  values)))))))
