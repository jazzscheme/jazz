;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Windows Registry
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2007
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.library.registry.Registry jazz


(import (jazz.library)
        (jazz.utilities))


(class Registry extends Object uses (Utilities WinAdv)


  (method meta public (open-type-lib)
    (open-key~ Classes-Root "TypeLib" container: self class: Type-Lib-Key)))


;;;
;;;; Type-Lib-Key
;;;


(class meta Type-Lib-Key extends Registry-Key
  
  
  (method public (get-versions type-key)
    (gather (iterate-subkeys~ type-key)))
  
  
  (method public (get-latest-version type-key)
    (let ((versions (get-versions type-key)))
      (when versions
        (last versions))))
  
  
  (method (split-version version)
    (let ((pos (find version #\period)))
      (values
        (subseq version 0 pos)
        (subseq version (+ pos 1)))))
  
  
  (method public (get-information type-guid)
    (with-closed ((type-key (open-key type-guid)))
      (let ((version (get-latest-version type-key)))
        (when version
          (with-closed ((version-key (open-key~ type-key version)))
            (let ((description (get-default~ version-key))
                  (language (car (gather (iterate-subkeys~ version-key)))))
              (when language
                (let* ((language-key (open-key~ version-key language))
                       (win32-key (open-key~ language-key "win32" error?: #f)))
                  (when win32-key
                    (let* ((filename (get-default~ win32-key))
                           (pathname (new File (list 'Root filename))))
                      (receive (major minor) (split-version version)
                        (list
                          description
                          major
                          minor
                          language
                          pathname)))))))))))))


;;;
;;;; Predefined
;;;


(slot meta public Classes-Root  initialize (new Registry-Key predefined?: #t key: HKEY_CLASSES_ROOT))
(slot meta public Current-User  initialize (new Registry-Key predefined?: #t key: HKEY_CURRENT_USER))
(slot meta public Local-Machine initialize (new Registry-Key predefined?: #t key: HKEY_LOCAL_MACHINE)))
