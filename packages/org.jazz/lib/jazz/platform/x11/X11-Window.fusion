(library jazz.platform.x11.X11-Window jazz

(import (jazz.platform.x11)
        (jazz.platform.cairo)
        (jazz.platform.cairo.Cairo-X11-Surface)
        (jazz.platform.cairo.Cairo-Memory-Surface)
        (jazz.platform.freetype.Font)
        (jazz.ui.window)
        (jazz.library)
        (jazz.utilities))

(class X11-Window extends Object

  (slot display accessors generate)
  (slot window accessors generate)
  (slot visual accessors generate)

  (slot width accessors generate)
  (slot height accessors generate)
  (slot position-x accessors generate)
  (slot position-y accessors generate)
  (slot border-width accessors generate)

  

  (slot surface accessors generate)
  (slot mem-surface accessors generate)

  (method public (initialize self width height x y border-width display)
    (set-width self width)
    (set-height self height)
    (set-position-x self x)
    (set-position-y self y)
    (set-border-width self border-width)
    (set-display self display)
    (init-all self))

  (method (init-all self)
     (create-window self)
     (select-mask self default-mask)
     (create-surface self)
     (create-mem-surface self))

  (method (create-window self)
    (let* ((screen-no (XDefaultScreen (get-display self)))
	   (screen (XScreenOfDisplay (get-display self) screen-no))
	   (root (XRootWindow (get-display self) screen-no))
	   (attr (XSetWindowAttributes-make)))
      (set-visual self (XDefaultVisual (get-display self) screen-no))
      (set-window self (XCreateWindow (get-display self)
				 root
				 (get-position-x self)
				 (get-position-y self)
				 (get-width self)
				 (get-height self)
				 (get-border-width self)
				 CopyFromParent
				 InputOutput
				 (get-visual self)
				 0
				 attr))))

  (method (select-mask self mask)
    (XSelectInput (get-display self) (get-window self) mask))
				 
  (method (create-surface self)
    (set-surface self (new Cairo-X11-Surface (get-width self) (get-height self) x11-display: (get-display self) x11-window: (get-window self) x11-visual: (get-visual self))))

  (method (create-mem-surface self)
    (set-mem-surface self (new Cairo-Memory-Surface (get-width self) (get-height self) (get-surface self))))


  (method public (event-handler self ev)
    (let ((type (XEvent-type-ref ev)))
      (cond
       ((= type KeyPress)         (key-press self (XEvent-xkey-ref ev)))
       ((= type KeyRelease)       (key-release self (XEvent-xkey-ref ev)))
       ((= type ButtonPress)      (button-press self (XEvent-xbutton-ref ev)))
       ((= type ButtonRelease)    (button-release self (XEvent-xbutton-ref ev)))
       ((= type MotionNotify)     (motion-notify self (XEvent-xmotion-ref ev)))
       ((= type EnterNotify)      (enter-notify self (XEvent-xcrossing-ref ev)))
       ((= type LeaveNotify)      (leave-notify self (XEvent-xcrossing-ref ev)))
       ((= type FocusIn)          (focus-in self (XEvent-xfocus-ref ev)))
       ((= type FocusOut)         (focus-out self (XEvent-xfocus-ref ev)))
       ((= type Expose)           (expose self (XEvent-xexpose-ref ev)))
       ((= type ConfigureNotify)  (configure-notify self (XEvent-xconfigure-ref ev)))
       ((= type DestroyNotify)    (destroy-notify self (XEvent-xdestroywindow-ref ev)))
       ((= type ClientMessage)    (client-message self (XEvent-xclient-ref ev)))
       (else                      unprocessed))))
	

  (method (draw self surface inval)
    
    
    (set-color~ surface White)
    
    (paint~ surface)
    
    (let ((rect (new Rect 50 50 100 100)))
      (if (rect-intersect? rect inval)
	  (draw-caption~ surface rect 'close))))


  (method public (show-window window)
	  (XMapWindow (get-display window) (get-window window))
	  (XFlush (get-display window)))

  (method public (hide-window window)
	  (XUnmapWindow (get-display window) (get-window window))
	  (XFlush (get-display window)))

  (method public (destroy-window self)
	  (XDestroyWindow (get-display self) (get-window self))
	  (XFlush (get-display self)))


  ;;;
  ;;;; Event Handlers
  ;;;


  (method (key-press self ev)
    exit)


  (method (key-release self ev)
    processed)


  (method (button-press self ev)
    (let ((button (XButtonEvent-button-ref ev)))
      (cond
       ((= button Button1) 
	(left-button-press self ev))
       ((= button Button2) 
	(middle-button-press self ev))
       ((= button Button3) 
	(right-button-press self ev))
       ((= button Button4) 
	(mouse-wheel-up self ev))
       ((= button Button5) 
	(mouse-wheel-down self ev)))))

  
  (method (left-button-press self ev)
    processed)
  
  
  (method (right-button-press self ev)
    processed)


  (method (middle-button-press self ev)
    processed)

  
  (method (mouse-wheel-up self ev)
    processed)


  (method (mouse-wheel-down self ev)
    processed)


  (method (button-release self ev)
   (let ((button (XButtonEvent-button-ref ev)))
      (cond
       ((= button Button1) 
	(left-button-release self ev))
       ((= button Button2) 
	(middle-button-release self ev))
       ((= button Button3) 
	(right-button-release self ev))
       (else
	processed))))

       
  (method (left-button-release self ev)
    processed)

  
  (method (middle-button-release self ev)
    processed)


  (method (right-button-release self ev)
    processed)
  

  (method (motion-notify self ev)
    processed)

  
  (method (enter-notify self ev)
    processed)


  (method (leave-notify self ev)
    processed)


  (method (focus-in self ev)
    processed)


  (method (focus-out self ev)
    processed)


  (method (expose self ev)    
    (let* ((x (exact->inexact (XExposeEvent-x-ref ev)))
	   (y (exact->inexact (XExposeEvent-y-ref ev)))
	   (width (exact->inexact (XExposeEvent-width-ref ev)))
	   (height (exact->inexact (XExposeEvent-height-ref ev)))
	   (mem-surface (get-mem-surface self))
	   (inval (new Rect x y width height)))      
      (draw self mem-surface inval)
      (bit-blit~ mem-surface (get-surface self) x y width height)
    processed))


  (method (configure-notify self ev)
    (let ((new-width (XConfigureEvent-width-ref ev))
	  (new-height (XConfigureEvent-height-ref ev)))
      (if (not (and (= new-width (get-width self)) (= new-height (get-height self))))
	  (begin
	    (change-size~ (get-surface self) new-width new-height)
	    (set-width self new-width)
	    (set-height self new-height)
	    )))
    processed)


  (method (destroy-notify self ev)
    processed)


  (method (client-message self ev)
    processed))



(definition unprocessed  '(unprocessed))
(definition processed    '(processed))
(definition exit         '(exit))

(definition default-mask 
  (+ KeyPressMask KeyReleaseMask ButtonPressMask ButtonReleaseMask PointerMotionMask EnterWindowMask LeaveWindowMask
     FocusChangeMask ExposureMask StructureNotifyMask)))