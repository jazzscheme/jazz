;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Repository Moniker
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2007
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.repository.manager.Repository-Moniker jazz


(import (jazz.io)
        (jazz.library)
        (jazz.platform)
        (jazz.repository)
        (jazz.utilities))


(class Repository-Moniker metaclass Moniker-Class extends Moniker
  
  
  (slot repository)
  (slot path)
  (slot version)
  
  
  @convert-literal
  (method meta (construct-literal context repository path (version {}))
    (let ((item (new self repository path :version version)))
      item))


  (method (compare-object target)
    (cond ((is-not? target Repository-Moniker)
           :incompatible)
          ((and (eq? repository (get-repository~ target))
                (equal? path (get-path~ target))
                (= version (get-version~ target)))
           :equal)
          (else
           :not-equal)))
  
  
  (method (print printer readably)
    (print-unreadable self printer
      (function dynamic (printer)
        (if (null? version)
            (format printer "{s} {s}"
                    repository
                    path)
          (format printer "{s} {s} {s}"
                  repository
                  path
                  version)))))
  
  
  ;;;
  ;;;; Protocol
  ;;;
  
  
  @convert
  (method meta (get-protocol)
    'item)
  
  
  @convert
  (method meta (new-moniker list)
    (assert (= 1 (length list)))
    (new self (car list)))
  
  
  (method (present)
    (format "{s}" path))
  
  
  ;;;
  ;;;; Initialization
  ;;;
  
  
  (method (initialize repository path (version: version {}))
    (nextmethod)
    (set! repository~self repository)
    (set! path~self path)
    (set! version~self version))
  
  
  ;;;
  ;;;; Interface
  ;;;
  
  
  (method public (exists? (file (get-file)))
    (in-repository?~ repository file))
  
  
  (method (get-writable?)
    #t)
  
  
  (method (set-writable? flag)
    )
  
  
  (method (writable?)
    #t)


  (method (get-name)
    (with-closed ((item (get-repository-item)))
      (get-name~ item)))


  (method (get-base)
    (let* ((list (get-list))
           (filename (last list)))
      (extract-base filename)))
  
  
  (method (get-extension)
    (let* ((list (get-list))
           (filename (last list)))
      (extract-extension filename)))
  
  
  (method (get-parent)
    (let ((parent-path (remove (last path) path)))
      (with-closed ((item (get-repository-item :path parent-path)))
        (new Repository-Moniker repository (get-path~ item)))))
  
    
  ;;;
  ;;;; Content
  ;;;
  
  
  (method (get-content (nodes?: nodes? #t) (leaves?: leaves? #t))
    (with-closed ((item (get-repository-item))
                  (items (get-content~ item nodes?: nodes? leaves?: leaves?)))
      (map (function dynamic (item)
             (new Repository-Moniker repository (get-path~ item)))
           items)))
  
  
  (method (get-children (nodes?: nodes? #t) (leaves?: leaves? #t))
    (get-content nodes?: nodes? leaves?: leaves?))
  
  
  ;;;
  ;;;; Delegation
  ;;;
  
 
 (method public (get-repository-item . rest)
   (bind-keywords ((path (get-path)) . other) rest
     (apply (~ get-item repository) path other)))
  
  
  (method public (get-pathname)
    (with-closed ((item (get-repository-item)))
      (get-pathname~ item)))
  
  
  (method public (get-local local)
    (with-closed ((item (get-repository-item)))
      (get-local~ item local)))
  
  
  (method public (add local)
    (with-closed ((item (get-repository-item)))
      (add~ item local)))
  
  
  (method public (add-project local)
    (with-closed ((item (get-repository-item)))
      (add-project~ item local)))
  
  
  (method public (checkin)
    (with-closed ((item (get-repository-item)))
      (safe-checkin~ item (get-file) (get-username~ repository))))
  
  
  (method public (checkout)
    (with-closed ((item (get-repository-item)))
      (checkout~ item (get-file))))
  
  
  (method public (get-status)
    (with-closed ((item (get-repository-item)))
      (get-status~ item)))
  
  
  (method public (get-file?)
    (with-closed ((item (get-repository-item)))
      (get-file?~ item)))
  
  
  (method public (get-project?)
    (with-closed ((item (get-repository-item)))
      (get-project?~ item)))
  
  
  (method (is-different? local)
    (with-closed ((item (get-repository-item)))
      (is-different?~ item local)))
  
  
  (method public (delete-item)
    (with-closed ((item (get-repository-item)))
      (delete-item~ item)))
    
    
  ;;;
  ;;;; Pathname 
  ;;;
 
  
  (method public (get-list)
    path)
  
  
  (method public (get-file)
    (get-pathname))
    
  
  ;;;
  ;;;; Input/Output
  ;;;


  (method (load-lines)
    (let* ((dir {Directory User "Work"})
           (tmp (new-unique-file~ dir "Get.tmp")))
      (unwind-protect
          (begin
            (get-local tmp)
            (load-lines~ tmp))
        (delete-file~ tmp :overwrite-read-only? #t error?: #f))))

  
  ;;;
  ;;;; Access
  ;;;


  (method public (get-repository)
    repository)

  
  (method public (get-path)
    path)
  
  
  (method public (get-absolute-path)
    (append (get-base-project~ repository) path))


  (method public (get-version)
    version)


  (method public (get-deleted?)
    (if (= version 0) 
        #t 
      #f))
  
  
  ;;;
  ;;;; Compiler
  ;;;
  
  
  @convert-fold
  (method (foldable?)
    #t)


  @convert-fold
  (method (fold-object compiler)
    (output~ compiler "make_object(")
    (fold~ compiler (type-name (class-of self)))
    (fold-more~ compiler (get-repository))
    (fold-more~ compiler path)
    (fold-more~ compiler version)
    (output~ compiler ")"))))
