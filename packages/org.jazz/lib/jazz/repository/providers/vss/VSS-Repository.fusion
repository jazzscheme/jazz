;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; VSS Repository
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2007
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.repository.providers.vss.VSS-Repository jazz


(import (jazz.repository)
        (jazz.process)
        (jazz.library)
        (jazz.utilities))


(class VSS-Repository extends Repository implements Exit-Listener uses (Utilities System COM SourceSafeTypeLib)

  
  (slot ini-file)
  (slot username)
  (slot password)
  (slot database initialize {})
  
  
  (method (set-ini-file if)
    (set! ini-file if))

  
  ;;;
  ;;;; Preferences
  ;;;
  
  
  (method meta (preferences-class)
    VSS-Repository-Preferences)
  
  
  ;;;
  ;;;; New Repository
  ;;;
  
  
  (method meta (new-repository pref name (username: username {}) (password: password {}))
    (let* ((pref (if (symbol? pref) (repository-preferences pref) pref))
           (ini-file (get-ini-file~ pref))
           (username (either username (get-username~ pref)))
           (password (either password (get-password~ pref)))
           (base-project (get-base-project~ pref))
           (base-directory (get-base-directory~ pref)))
      (new self name: name :ini-file ini-file username: username password: password :base-project base-project :base-directory base-directory)))

  
  ;;;
  ;;;; Initialisation
  ;;;
  
  
  (method (initialize . rest)
    (bind-keywords ((ini-file {}) (username {}) (password {}) . others) rest
      (apply nextmethod others)
      (set! ini-file~self ini-file)
      (set! username~self username)
      (set! password~self password)
      (destroy-mandatory)))
  
  
  (method (install-initargs initargs)
    (nextmethod initargs)
    (set! ini-file (getf initargs :ini-file))
    (set! username (getf initargs username:))
    (set! password (getf initargs password:)))
  
  
  (method (connected?)
    (not-null? database))

  
  ;;;
  ;;;; Base
  ;;;
  
  
  (method (get-base-project)
    base-project)
  
  
  (method (set-base-project value)
    (set! base-project value))
  
  
  (method (get-base-directory)
    base-directory)
  
  
  (method (set-base-directory value)
    (set! base-directory value))

  
  ;;;
  ;;;; Access
  ;;;
    
  
  (method public (get-ini-file)
    ini-file)
    
  
  (method public (get-username)
    (either username (get-database-username)))
    
  
  (method public (get-password)
    password)

  
  ;;;
  ;;;; Database
  ;;;
  
  
  (method public (get-database)
    (unless database
      (set! database (open-database)))
    database)
  
  
  (method (open-database)
    (let ((db (cocreate VSSDatabase error?: #f)))
      (if (null? db)
          (error "Vss is not installed on this machine")
        (Open~ db (parse~ ini-file) (either username "") (either password ""))
        (add-exit-listener~ (get-application) self)
        db)))
  
  
  (method public (get-database-name)
    @this-seems-to-always-return-an-empty-string-hence-the-following-code
    (get-DatabaseName~ (get-database))
    (get-name~ (get-parent~ ini-file)))
  
  
  (method (get-database-username)
    (get-Username~ database))

  
  ;;;
  ;;;; Destroy
  ;;;
  
  
  (method (destroy)
    (when database
      (corelease database)
      (set! database {})
      (remove-exit-listener~ (get-application) self))
    (nextmethod))
  
  
  ;;;
  ;;;; Spec
  ;;;


  (method public (path->spec path)
    (append "$/" (join (append base-project path) "/")))
  
  
  (method public (spec->path spec)
    (cdr (tail (split spec "/") (length base-project))))
  
  
  ;;;
  ;;;; Item
  ;;;
  
  
  (constant File-Or-Project-Not-Found
    #x8004D68F)
  
  (constant Database-Locked
    #x8004D728)
  
  (constant Database-Inexistant
    #x8004D117)
 
  
  (method (get-item file/path (error?: error? #t) (deleted?: deleted? #f))
    (let* ((path (file/path->path file/path))
           (spec (path->spec path)))
      (let ((pref (get-preferences 'debug error?: #f)))
        (when (and pref (get-debug-repository?~ pref))
          (message-box spec)))
      (cotry (let ((item (get-VSSItem~ (get-database) spec deleted?)))
               (new VSS-Repository-Item self item))
        (Database-Locked
          (when error?
            (error "Repository is locked")))
        (File-Or-Project-Not-Found
          (when error?
            (error "File or project not found: {a}" spec)))
        (Database-Inexistant
          (when error?
            (error "Database path does not exist")))
        (else
         (when error?
           (error "Unknown error"))))))
  
  
  (method (in-repository? file)
    (with-closed ((item (get-item file error?: #f)))
      (not-null? item)))

  
  ;;;
  ;;;; Methods
  ;;;
  
  
  (method public (current-project)
    (get-CurrentProject~ (get-database)))

  
  ;;;
  ;;;; Control
  ;;;
  
  
  (method (detach-file file . rest)
    (unimplemented 'detach-file))
  
  
  (method (reattach-file file . rest)
    (unimplemented 'reattach-file))
  
  
  (method (get-latest-action file . rest)
    (with-closed ((item (get-item file)))
      (apply (~ get-local item) file rest)))
  
  
  (method (checkout-action file . rest)
    (with-closed ((item (get-item file)))
      (apply (~ checkout item) file rest)))
  
  
  (method (checkin-action file . rest)
    (with-closed ((item (get-item file)))
      (apply (~ checkin item) file rest)))
  
  
  (method (undo-checkout-action file . rest)
    (with-closed ((item (get-item file)))
      (apply (~ undo-checkout item) file rest)))
    
  
  (method public (checkin-needs-merge? file)
    (with-closed ((item (get-item file)))
      (checkin-needs-merge?~ item (get-username))))
  
  @w
  (method public (safe-checkin-file file)
    (with-closed ((item (get-item file)))
      (safe-checkin~ item file (get-username)))
    (call-repository-event :item-status self file))
  
  
  (method (reintegrate-file file . rest)
    (unimplemented 'reintegrate-file))

  
  ;;;
  ;;;; Status
  ;;;
  
  
  (method (get-file-status file (error?: error? #t))
    (with-closed ((item (get-item file error?: error?)))
      (when item
        (get-status~ item))))
  
  
  (method (get-file-checkouts-usernames file)
    (unimplemented 'get-file-checkouts-usernames))))
