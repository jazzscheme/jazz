;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Repository Item
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2007
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


;; add method is to be called on the parent item


(library jazz.repository.repository.Repository-Item jazz


(import (jazz.repository)
        (jazz.library)
        (jazz.utilities))


(class abstract Repository-Item extends Object
  
  
  (slot repository)
  
  
  (method (initialize repository)
    (nextmethod)
    (set! [repository self] repository))
  
  
  (method (print printer readably)
    (print-unreadable self printer
      (function dynamic (printer)
        (when (connected?)
          (format printer "{s}" (get-name))))))
  
  
  (method public virtual abstract (connected?)
    )
  
  
  ;;;
  ;;;; Access
  ;;;
  
  
  (method public (get-repository)
    repository)
  
  
  ;;;
  ;;;; Properties
  ;;;
  
  
  (method public virtual abstract (get-name)
    )
  
  
  (method public virtual abstract (get-type)
    )
  
  
  (method public virtual abstract (get-file?)
    )
  
  
  (method public virtual abstract (get-project?)
    )
  
  
  (method public virtual abstract (get-binary?)
    )
  
  
  (method public virtual abstract (get-status)
    )
  
  
  (method public virtual abstract (get-path)
    )
  
  
  (method public virtual abstract (get-pathname)
    )
  
  
  (method public virtual abstract (get-deleted?)
    )
  
  
  (method public virtual abstract (get-items . rest)
    )
  
  
  ;;;
  ;;;; Add
  ;;;
  
  
  (method public virtual abstract (add-file local)
    )
  
  
  (method public virtual abstract (add-project name)
    )
  
  
  ;;;
  ;;;; Delete
  ;;;
  
  
  (method public virtual abstract (delete-item)
    )
  
  
  (method public virtual abstract (destroy-item)
    )
  
  
  ;;;
  ;;;; Rename
  ;;;
  
  
  (method public virtual abstract (rename-item new-name)
    )
  
  
  ;;;
  ;;;; Get
  ;;;

  
  (method public virtual abstract (get-local local)
    )
  
  
  ;;;
  ;;;; Control
  ;;;
  
  
  (method public virtual abstract (checkin local . rest)
    )
  
  
  (method public virtual abstract (checkout local . rest)
    )
  
  
  (method public virtual abstract (undo-checkout local . rest)
    )
  
  
  (method public virtual abstract (is-different? local)
    )

  
  ;;;
  ;;;; Iterator
  ;;;
  
  
  (method public (iterate-item proc (base: base {}) (include-self?: include-self? true) (recursive?: recursive? true))
    (letrec ((root (essay base (get-list~ base)))
             (iterate
               (function dynamic (item path include-self?)
                 (let ((project? (get-project?~ item)))
                   (when include-self?
                     (if base
                         (let* ((class (if project? Directory File))
                                (pathname (new class (append root (reverse path)))))
                           (proc item pathname))
                       (proc item)))
                   (when (and project? (or recursive? (eq? item self)))
                     (with-closed ((items (get-items~ item)))
                       (for-each (function dynamic (subitem)
                                   (let ((local (remote->local~ repository (get-name~ subitem))))
                                     (iterate subitem (essay base (cons local path)) true)))
                                 items)))))))
      (iterate self '() include-self?)))

    
  ;;;
  ;;;; Content
  ;;;
  
  
  (method public (get-extension)
    (extract-extension (get-name)))
  
  
  (method public virtual abstract (get-parent)
    )
  
  
  (method public virtual abstract (get-content . rest)
    )

    
  ;;;
  ;;;; Versions
  ;;;
  
  
  (method public virtual abstract (get-version-number)
    )
  
  
  (method public virtual abstract (get-version n)
    )
  
  
  (method public virtual abstract (get-latest-version)
    )
  
  
  (method public virtual abstract (get-latest-info)
    )
  
  
  (method public virtual abstract (get-versions)
    )
  
  
  (method public virtual abstract (get-unlabeled-versions)
    )

    
  ;;;
  ;;;; Checkouts
  ;;;
  
  
  (method public virtual abstract (get-checkouts)
    )
  
  
  (method public virtual abstract (get-checkouts-usernames)
    )
  
  
  (method public virtual abstract (get-user-checkout user)
    )))
