;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Virtual Repository Item
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2007
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.repository.repository.Virtual-Repository-Item jazz


(import (jazz.repository)
        (jazz.library)
        (jazz.utilities))


(class Virtual-Repository-Item extends Repository-Item
  
  
  (slot concrete)
  
  
  (method (initialize repository concrete)
    (nextmethod repository)
    (set! concrete~self concrete))
  
  
  ;;;
  ;;;; Properties
  ;;;
  
  
  (method (get-name)
    (get-name~ concrete))
  
  
  (method (get-version-number)
    (get-version-number~ concrete))
  
  
  (method (get-type)
    (get-type~ concrete))
  
  
  (method (get-file?)
    (get-file?~ concrete))
  
  
  (method (get-project?)
    (get-project?~ concrete))
  
  
  (method (get-binary?)
    (get-binary?~ concrete))
  
  
  (method (get-status)
    (get-status~ concrete))
  
  
  (method (get-path)
    (get-path~ concrete))
  
  
  (method (get-pathname)
    (get-pathname~ concrete))
  
  
  (method (get-deleted?)
    (get-deleted?~ concrete))
  
  
  (method (get-items . rest)
    (apply (~ get-items concrete) rest))
  
  
  (method (get-checkouts)
    (get-checkouts~ concrete))
  
  
  (method (get-checkouts-usernames)
    (get-checkouts-usernames~ concrete))
  
  
  (method (get-user-checkout user)
    (get-user-checkout~ concrete user))
  
  
  (method (get-version n)
    (get-version~ concrete n))
  
  
  (method (get-latest-version)
    (get-latest-version~ concrete))
  
  
  (method (get-latest-info)
    (get-latest-info~ concrete))
  
  
  (method (get-versions)
    (get-versions~ concrete))
  
  
  (method (get-unlabeled-versions)
    (get-unlabeled-versions~ concrete))
  
  
  (method (get-parent)
    (get-parent~ concrete))
  
  
  ;;;
  ;;;; Methods
  ;;;
  
  
  (method (local->remote local)
    (local->remote~ repository local))
  
  
  (method (remote->local remote)
    (remote->local~ repository remote))
  
  
  ;; Call this method on the parent project of the added file
  (method (add-file local)
    (add-file~ concrete (local->remote local)))
  
  
  ;; Call this method on the parent project of the added project
  (method (add-project name)
    (add-project~ concrete name))
  
  
  (method (checkin local . rest)
    (apply (~ checkin concrete) (local->remote local) rest))
  
  
  (method (checkout local . rest)
    (apply (~ checkout concrete) (local->remote local) rest))
  
  
  (method (undo-checkout local . rest)
    (apply (~ undo-checkout concrete) (local->remote local) rest))
  
  
  (method (is-different? local)
    (is-different?~ concrete local))
  
  
  (method (delete-item)
    (delete-item~ concrete))
  
  
  (method (destroy-item)
    (destroy-item~ concrete))
  
  
  ;;;
  ;;;; Rename
  ;;;
  
  
  (method (rename-item new-name)
    (rename-item~ concrete (local->remote new-name)))
  
  
  ;;;
  ;;;; Local
  ;;;

  
  (method (get-local local)
    (get-local~ concrete (local->remote local)))

    
  ;;;
  ;;;; Content
  ;;;
  
  
  (method (get-content . rest)
    (map (function dynamic (remote)
           (remote->local remote))
         (apply (~ get-content concrete) rest)))))
