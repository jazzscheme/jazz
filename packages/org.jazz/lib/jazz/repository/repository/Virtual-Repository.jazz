;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Virtual Repository
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2007
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.repository.repository.Virtual-Repository jazz


(import (jazz.repository)
        (jazz.library)
        (jazz.utilities))


(class Virtual-Repository extends Repository

  
  (slot concrete)
  
  
  (method (destroy)
    (when concrete
      (close~ concrete)
      (set! concrete {}))
    (nextmethod))
  
  
  (method public (get-concrete)
    concrete)
  
  
  (method public (set-concrete c)
    (set! concrete c))
  
  
  ;;;
  ;;;; New Repository
  ;;;
  
  
  (method meta (new-repository pref name)
    (let* ((concrete-class (concrete-class (get-concrete-type~ pref)))
           (concrete-initargs (get-concrete-initargs~ pref))
           (concrete (new concrete-class)))
      (install-initargs~ concrete concrete-initargs)
      (new self name: name concrete: concrete)))
  
  
  (method meta protected virtual (concrete-class type)
    )
  
  
  ;;;
  ;;;; Initialisation
  ;;;
  
  
  (method (initialize . rest)
    (bind-keywords ((concrete {}) . others) rest
      (apply nextmethod others)
      (set! concrete~self concrete)))

  
  ;;;
  ;;;; Virtual
  ;;;
  
  
  (method protected virtual abstract (repository-item-class)
    )
  
  
  (method protected virtual abstract (repository-version-class)
    )
  
  
  (method protected virtual abstract (repository-checkout-class)
    )

  
  ;;;
  ;;;; Base
  ;;;
  
  
  (method (get-base-project)
    (get-base-project~ concrete))
  
  
  (method (set-base-project value)
    (set-base-project~ concrete value))
  
  
  (method (get-base-directory)
    (get-base-directory~ concrete))
  
  
  (method (set-base-directory value)
    (set-base-directory~ concrete value))

  
  ;;;
  ;;;; Project
  ;;;
 
  
  (method (get-item file/path . rest)
    (let ((concrete (apply (~ get-item concrete) (local->remote file/path) rest)))
      (when concrete
        (new (repository-item-class) self concrete))))
  
  
  (method (in-repository? file)
    (in-repository?~ concrete (local->remote file)))

  
  ;;;
  ;;;; Control
  ;;;
  
  
  (method (detach-file file . rest)
    (apply (~ detach-file concrete) (local->remote file) rest))
  
  
  (method (get-latest-action file . rest)
    (apply (~ get-latest-action concrete) (local->remote file) rest))
  
  
  (method (checkout-action file . rest)
    (apply (~ checkout-action concrete) (local->remote file) rest))
  
  
  (method (checkin-action file . rest)
    (apply (~ checkin-action concrete) (local->remote file) rest))
  
  
  (method virtual public (reintegrate-file file . rest)
    (apply (~ reintegrate-file concrete) (local->remote file) rest))
  
  
  (method (undo-checkout-action file . rest)
    (apply (~ undo-checkout-action concrete) (local->remote file) rest))

  
  ;;;
  ;;;; Status
  ;;;
  
  
  (method (get-file-status file . rest)
    (apply (~ get-file-status concrete) (local->remote file) rest))
  
  
  (method (get-file-checkouts-usernames file)
    (apply (~ get-file-checkouts-usernames concrete) (local->remote file)))))
