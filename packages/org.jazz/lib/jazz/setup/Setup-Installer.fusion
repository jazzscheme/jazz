;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Setup Installer
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2007
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.setup.Setup-Installer jazz


(import (jazz.setup)
        (jazz.library)
        (jazz.utilities))


(class Setup-Installer extends Object
  
  
  (slot preserved-users initialize '())
  
  
  ;;;
  ;;;; Access
  ;;;
  
  
  (method public virtual (get-name)
    )
  
  
  (method public virtual (get-version)
    )
  
  
  (method public virtual (default-install-dir)
    )

  
  (method public virtual (setup-toplevel toplevel)
    )
  
  
  ;;;
  ;;;; Locales
  ;;;

  
  (method public virtual (install-locales toplevel)
    )
  
  
  ;;;
  ;;;; Setup
  ;;;
  
  
  (method protected (setup-files install migrate reporter)
    (install-files install reporter)
    (if preserved-users
        (restore-users install)
      (migrate-files install migrate reporter))
    (set-message~ reporter (format "{a} {a} successfully installed" (get-name) (get-version)))
    (set-done~ reporter))
  
  
  ;;;
  ;;;; Install
  ;;;
  
  
  (method public (get-install-dir dirname)
    (if (empty-string? dirname)
        (begin
          (message-box "Installation directory is empty!")
          {})
      (let ((dir (new Directory (tokenise dirname))))
        (if (not (exists?~ dir))
            dir
          (when (= (message-box (format "{a} {a} already exists! Update content?" (get-name) (get-version)) :type 'question) 'yes)
            (preserve-users dir)
            (empty-directory~ dir :overwrite-read-only? true)
            dir)))))
  
  
  (method protected virtual (install-files install reporter)
    (create-directories~ install)
    (copy-data install reporter))
  
  
  (method (copy-data install reporter)
    (let* ((prefix (get-list~ install))
           (data-dir {Directory Home "Distribution"})
           (data-prefix (get-list~ data-dir))
           (data (collect-data)))
      (create~ install)
      (set-range~ reporter (new Range 0 (length data)))
      (for-each (function dynamic (info)
                  (unless (cancel-requested?~ reporter)
                    (bind (list . kind) info
                      (let* ((class (case kind ((file) File) ((directory) Directory)))
                             (pathname (new class (append prefix list))))
                        (if (directory? pathname)
                            (when (not (exists?~ pathname))
                              (user-message~ reporter "Creating {a}" (parse~ pathname))
                              (create~ pathname))
                          (let ((src (new File (append data-prefix list))))
                            (user-message~ reporter "Copying {a}" (parse~ src))
                            (copy-file~ src pathname))))
                      (step-it~ reporter))))
                data)))
  
  
  (method (collect-data)
    (let ((fact (new List-Factory)))
      (iterate-directory~ {Directory Home "Distribution"}
        (function dynamic (list kind)
          (put~ fact (cons list kind)))
        :full? false
        files?: true
        directories?: true
        recursive?: true)
      (get-output~ fact)))
  
  
  ;;;
  ;;;; Registry
  ;;;
  
  
  ;;;
  ;;;; Users
  ;;;
  
  
  (method protected virtual (preserve-users dir)
    (let* ((user-dir (new-directory~ dir "Users"))
           (users (collect-users user-dir)))
      (set! preserved-users users)
      (for-each (function dynamic (user)
                  (let ((src (new-directory~ user-dir user))
                        (dst (new-directory~ (get-tmp-directory) user)))
                    (move-pathname~ src dst)))
                users)))
  
  
  (method protected virtual (collect-users user-dir)
    (let ((users '()))
      (iterate-directory~ user-dir
        (function dynamic (dir)
          (set! users (cons (get-name~ dir) users)))
        files?: false
        directories?: true
        recursive?: false)
      users))
  
  
  (method protected virtual (restore-users dir)
    (let ((user-dir (new-directory~ dir "Users")))
      (for-each (function dynamic (user)
                  (let ((src (new-directory~ (get-tmp-directory) user))
                        (dst (new-directory~ user-dir user)))
                    (move-pathname~ src dst)))
                preserved-users)))
  
  
  ;;;
  ;;;; Migrate
  ;;;
  
  
  (method public (get-migrate-dir dirname)
    (unless (empty-string? dirname)
      (let ((dir (new Directory (tokenise dirname))))
        (if (exists?~ dir)
            dir
          (message-box "Unable to locate older version directory!")
          (throw-cancel)))))
  
  
  (method protected virtual (migrate-files install migrate reporter)
    )
  
  
  (method (migrate-file install migrate reporter src-suffix (dst-suffix src-suffix))
    (let ((src (new-file~ migrate src-suffix))
          (dst (new-file~ install dst-suffix)))
      (when (exists?~ src)
        (user-message~ reporter "Copying {a}" (parse~ src))
        (create-directories~ dst)
        (copy-file~ src dst))))
  
  
  (method (read-version dir)
    (let ((file (new-file~ dir (list "Bin" "Version.prop"))))
      (when (exists?~ file)
        (let ((properties (new Properties :file (new-file~ dir (list "Bin" "Version.prop")))))
          (list (get-property~ properties 'major)
                (get-property~ properties 'minor))))))
  
  
  (method public (for-each-user migrate proc)
    (let ((users (new-directory~ migrate "Users")))
      (iterate-directory~ users proc
        files?: false
        directories?: true
        recursive?: false)))
  
  
  ;;;
  ;;;; Form
  ;;;

  
  (method (for-each-form form proc (parent {}))
    (proc form parent)
    (for-each (function dynamic (subform)
                (for-each-form subform proc form))
              (get-children~ form)))))
