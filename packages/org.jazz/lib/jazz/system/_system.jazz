(library jazz.system jazz

(export (jazz.system.platform.windows (cond windows))
        (jazz.system.platform.x11 (cond x11))
        (jazz.system.autoload))
(import (jazz.system.autoload))


;;;
;;;; Arguments
;;;


;; convert
(definition public (command-argument string)
  #f)


;;;
;;;; Properties
;;;


;; all this needs to be converted / implemented


(definition public (reload-system-properties)
  (unimplemented 'reload-system-properties))


(definition public (get-system-properties)
  (unimplemented 'get-system-properties))


(definition public (get-system-property name)
  #f)


(definition public (set-system-property name value)
  (unimplemented 'set-system-property))


(definition public (require-system-property name)
  #f)


;;;
;;;; Sound
;;;


(definition public (play-sound sound (asynchronous?: asynchronous? #t))
  @platform-dependant
  (let ((async-bit (if asynchronous? SND_ASYNC SND_SYNC)))
    (if (file? sound)
        (PlaySound (parse~ sound) NULL (bit-or SND_FILENAME async-bit))
      (PlaySound sound NULL async-bit)))))
