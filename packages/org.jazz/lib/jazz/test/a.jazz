(library jazz.test.a jazz

(debug (loop (for i from 0 to 10) (collect (* i i))))

@w
(import (jazz.test.P)
        (jazz.test.Q))

@w
(definition (foo)
  {})

@w
(definition (bar)
  '({P 2 3} b c))

@w
(definition (baz)
  {Q {P 1 2} {Q {Q 1 2} {P 3 4}}})

@w
(class X extends Object
  
  (slot a initialize {}))

@w
(debug (foo) (bar) (baz))

(class X extends Object
  
  (slot a initialize 2)
  (slot b)
  
  (method (foo)
    (let ((x (new (class-of self))))
      (set! b x)
      (set-a~ b 3)
      (list a (get-a~ x)))))

(debug (list (foo~ (new X))))

(class Y extends Object
  
  (method virtual (foo)
    3))

(class Z extends Y
  
  (slot a initialize 5)
  (slot b initialize 7 accessors generate)
  
  (definition (d)
    2)
  
  (method (foo)
    (+ (nextmethod) 11))
  
  (method virtual (bar)
    (list a b d foo (d) (foo) ((function () (foo))) (baz)))
  
  (method (baz)
    7))

(definition (foo x)
  (if x 1 2))

(debug (bar~ (new Z))))
