;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Directory Browser
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2007
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.ui.code.Directory-Browser jazz


(import (jazz.io)
        (jazz.jml)
        (jazz.platform)
        (jazz.literals)
        (jazz.library)
        (jazz.ui)
        (jazz.ui.activity)
        (jazz.ui.view)
        (jazz.utilities))


(class Directory-Browser extends Layout-View

  
  (property directory initialize {} getter get-directory setter set-directory)
  

  (form
    (<install>                                        layout-type: fill
      (<Layout-View>                name: tools
        (<Push-Tool>                name: synchronize size: {Dimension 22 22} tooltip?: #t tooltip-text: "Synchronize" portfolio: :icons image-name: {Bitmap-Resource "Synchronize"} action-handler: {Event-Handler :form on-synchronize}))
      (<Scroller-View>                                vscroll?: #t hscroll?: #t flat?: #t
        (<!>                        name: content     layout-type: fill
          (<Tree-Header>                              shown?: #f
            (<!>                    name: content
              (<Directory-Tree>     name: tree        portfolio: :icons show-header?: #f double-click-handler: {Event-Handler :form on-double-click} context-menu-handler: {Event-Handler :form on-context-menu}
                (<Tree-Node-Column>                   title: "Content" width: 322))))))))

  
  @convert-external
  (method meta (external-name . rest)
    'directory-browser)
 

  ;;;
  ;;;; Palette
  ;;;
  
  
  (method (view-icon)
    {Bitmap-Resource "OpenedFolder"})
  
  
  @convert-guest
  (method meta (palette-title)
    "Directory")
  
  
  ;;;
  ;;;; Docked
  ;;;
  
  
  (method (get-tools-view)
    (locate 'tools))
  
  
  (method (focus-default)
    (let ((tree (locate 'tree)))
      (acquire-focus~ tree)))


  ;;;
  ;;;; Events
  ;;;
  
  
  (method (on-synchronize evt)
    (let ((document (current-document)))
      (if (is-not? document Document)
          (bell)
        (let* ((controller (get-controller~ document))
               (moniker (get-moniker~ controller)))
          (if (null? moniker)
              (bell)
            (let* ((tree (locate 'tree))
                   (spine (map ->string (get-list~ moniker)))
                   (row (expand-spine~ tree spine)))
              (if (null? row)
                  (bell)
                (set-single-selection~ tree (row-rank~ tree row))
                (ensure-displayed~ tree))))))))
  
  
  (method (on-double-click evt)
    (set-selected~ (get-application) self {})
    (edit-selection))
  
  
  (method (on-context-menu evt)
    (let ((sender (get-sender~ evt))
          (pos (get-position~ evt)))
      (with-context-click~ sender pos
        (function ()
          (let ((object (selected-pathname)))
            (when (is? object Moniker)
              (let ((class (cond ((file? object) (file-menu-class)) ((directory? object) Directory-Menu) (else {}))))
                (when class
                  (track-popup-menu~ sender (new class) pos)))))))))
  
  
  (method protected virtual (file-menu-class)
    File-Menu)


  ;;;
  ;;;; Access
  ;;;


  (method public (get-directory)
    directory)


  (method public (set-directory dir)
    (when (/= dir directory)
      (set! directory dir)
      (update-title)
      (update-tree)))


  ;;;
  ;;;; Session
  ;;;
  
  
  (method (confirm-close . rest)
    (save-session))
  
  
  (method (save-session)
    @to-convert
    (let ((info
           (list (external-name)
                 position:  (get-position)
                 size:      (get-size)
                 directory: (get-directory))))
      (push-property~ properties 'Opened-Windows info)))


  ;;;
  ;;;; Update
  ;;;
  
  
  (method protected virtual (update-title)
    (set-title (format "Directory {a}" (get-base~ directory))))
  
  
  ;;;
  ;;;; Selection
  ;;;
  
  
  (method (selected-row)
    (let* ((tree (locate 'tree))
           (selection (get-single-selection~ tree)))
      selection))
  
  
  (method (selected-pathname)
    (let ((tree (locate 'tree))
          (selection (selected-row)))
      (when selection
        (get-user-data~ (get-row~ tree selection)))))
  
  
  (method (selected-file)
    (let ((pathname (selected-pathname)))
      (if (file? pathname)
          pathname
        (error "{t} is not of the expected File type" pathname))))
  
  
  (method (selected-directory)
    (let ((pathname (selected-pathname)))
      (if (directory? pathname)
          pathname
        (error "{t} is not of the expected Directory type" pathname))))


  ;;;
  ;;;; Edit
  ;;;


  (method (edit-selection)
    (let* ((tree (locate 'tree))
           (selection (get-single-selection~ tree)))
      (when selection
        (let ((object (get-user-data~ (get-row~ tree selection))))
          (when object
            (if (is? object Moniker)
                (unless (or (is? object Directory) (member? (get-extension~ object) '("zip" "jar")))
                  (edit-document~ (get-application) object activate-focus?: #f))
              (edit~ object activate-focus?: #f)))))))


  ;;;
  ;;;; Search
  ;;;
  
  
  (method (search-directory)
    (let* ((dir (selected-pathname))
           (appl (get-application))
           (frame (get-search-manager~ appl))
           (manager (get-guest~ frame)))
      (set-selection-name~ (locate~ manager 'tab) 'directories)
      (let ((search (locate~ manager 'directories-search)))
        (set-string-content~ (locate~ search 'directories) (format "{l}" (get-list~ dir)))
        (set-string-content~ (locate~ search 'extensions) "java")
        (bring-to-front~ frame)
        (set-visible?~ frame #t)
        (select-search~ search))))


  ;;;
  ;;;; Repository
  ;;;
  
  
  (method public virtual (get-repository)
    (error "Please use a repository browser"))
  
  
  (method (get-latest)
    (let ((repository (get-repository)))
      (get-latest~ repository (selected-pathname))))
  
  
  (method (checkout)
    (let ((repository (get-repository))
          (file (selected-file)))
      (with-closed ((item (get-item~ repository file)))
        (checkout~ item file))
      (update-status file)))
  
  
  (method (update-status moniker)
    (let* ((tree (locate 'tree))
           (row (user-data-row~ tree moniker))
           (rank (row-rank~ tree row))
           (cell (new Cell rank 0))
           (image (get-moniker-image moniker)))
      (set-image~ (get-cell-data~ tree cell) image)
      (invalidate-cell~ tree cell)))
  
  
  (method (checkin)
    (let ((repository (get-repository))
          (file (selected-file)))
      (with-closed ((item (get-item~ repository file)))
        (checkin~ item file))
      (update-status file)))
  
  
  (method (checkpoint)
    (let ((repository (get-repository))
          (file (selected-file)))
      (with-closed ((item (get-item~ repository file)))
        (checkin~ item file :keep-checked-out? #t))
      (update-status file)))
  
  
  (method (undo-checkout)
    (let ((repository (get-repository))
          (file (selected-file)))
      (with-closed ((item (get-item~ repository file)))
        (undo-checkout~ item file))
      (update-status file)))
  
  
  (method (show-history)
    (unimplemented 'show-history))
  
  
  (method (show-changes)
    (let ((repository (get-repository))
          (file (selected-file)))
      (show-changes~ repository file)))


  ;;;
  ;;;; Synchronize
  ;;;
  
  
  (definition Ignored-Nodes
    '("Crashes" "Catalogs" "Work"))
  
  (definition Ignored-Leaves
    '("vssver.scc" "mssccprj.scc" "Book.ico" "Desktop.ini" "JazzStandaloneDebug.exe" "JazzStandaloneRelease.exe"))
  
  (definition Ignored-Extensions
    '("exe" "pdb" "opt" "lib" "exp" "ilk" "dll" "lnk" "ncb" "plg" "obj" "sbr" "pch" "idb" "crash" "dmp" "stack"))
  
  
  (method (synchronize-browser)
    (let* ((repository (get-repository))
           (dir (selected-directory))
           (spec (file-spec~ repository dir))
           (item (new Repository-Moniker spec))
           (frame (new-frame Synchronize-Repositories left-moniker: dir right-moniker: item ignored-nodes: Ignored-Nodes ignored-leaves: Ignored-Leaves ignored-extensions: Ignored-Extensions host-visible?: #f)))
      (if (not (compare-trees~ (get-guest~ frame)))
          (begin
            (close~ frame)
            (message-box "No differences"))
        (bring-to-front~ frame)
        (set-visible?~ frame #t))))


  ;;;
  ;;;; Refresh
  ;;;
  
  
  (method (refresh-directory)
    (let* ((tree (locate 'tree))
           (rank (selected-row))
           (row (get-row~ tree rank))
           (state (get-state~ row)))
      (with-update-locked~ tree
        (function ()
          (remove-every-son~ row)
          (set-dynamic~ tree row)
          (when (eq? state 'expanded)
            (dynamic-expand~ tree row))))))


  ;;;
  ;;;; Properties
  ;;;
  
  
  (method (display-properties)
    (let ((repository (get-repository))
          (file (selected-file)))
      (with-closed ((item (get-item~ repository file)))
        (receive (date no) (get-latest-info~ item)
          (message-box (format "Date: {a}{%}No: {a}" (present~ date) no))))))


  ;;;
  ;;;; Tree
  ;;;
    
    
  (method (update-tree)
    (present-directory~ (locate 'tree) directory))
  
  
  (method protected virtual (get-moniker-image moniker)
    (let ((ext (get-extension~ moniker)))
      (cond ((member? ext '("java")) {Bitmap-Resource "Java"})
            ((member? ext '("htm" "html")) {Bitmap-Resource "HTML"})
            ((member? ext '("jazz")) {Bitmap-Resource "Script"})
            ((member? ext '("dbs" "kwb")) {Bitmap-Resource "Database"})
            (else {Bitmap-Resource "Document"})))))


;;;
;;;; Directory-Tree
;;;


(class Directory-Tree extends Code-Tree
  
  
  (method public (present-directory dir)
    (remove-every-row)
    (let ((root (add-row state: 'expanded children: (list (new Tree-Node title: (->string (get-base~ dir)) image: {Bitmap-Resource "OpenedFolder"})) user-data: dir)))
      (insert-directories root dir)
      (insert-files root dir)
      (when (> (get-visible-count) 0)
        (set-selection (list 0)))))
  
  
  (method (insert-files node dir)
    (for-each (function (file)
                (insert-moniker node file))
              (sort-files (collect-files dir))))
  
  
  (method (collect-files dir)
    (let ((list '()))
      (iterate-directory~ dir
        (function (file)
          (set! list (cons file list)))
        files?: #t
        directories?: #f
        recursive?: #f)
      list))
  
  
  (method (sort-files files)
    (sort (function (f1 f2)
            (let ((e1 (get-extension~ f1))
                  (e2 (get-extension~ f2)))
              (or (and e1 e2 (< e1 e2))
                  (and (= e1 e2)
                       (< (get-base~ f1) (get-base~ f2))))))
          files))
  
  
  (method (insert-moniker node moniker)
    (when (/= (get-name~ moniker) "vssver.scc")
      (let* ((extension (get-extension~ moniker))
             (state (if (member? extension '("java" "zip" "jar")) 'dynamic 'collapsed)))
        (when (or (= state 'dynamic) (known-extension-frame-class~ (get-application) extension))
          (add-row father: node state: state children: (list (new Tree-Node title: (get-name~ moniker) image: (get-moniker-image moniker))) user-data: moniker)))))
  
  
  (method (insert-java node file)
    (let* ((appl (get-application))
           (cataloguer (get-cataloguer~ appl))
           (definitions (get-category-definitions~ cataloguer (get-base~ file) context: '(cpp/java))))
      (when definitions
        (let (;; todo: need to find the one associated with moniker...
              (def (car definitions)))
          (insert-definition node def #f)))))
  
  
  (method (insert-zip node file)
    (with-closed ((unzip (new Unzip-File file)))
      (iterate-files~ unzip
        (function (filename size)
          (let ((extension (extract-extension filename)))
            (when (known-extension-frame-class~ (get-application) extension)
              (insert-moniker node (new Zipped file filename))))))))
  
  
  (method (insert-directories node dir)
    (for-each (function (subdir)
                (add-row father: node state: 'dynamic children: (list (new Tree-Node title: (get-base~ subdir) image: {Bitmap-Resource "OpenedFolder"})) user-data: subdir))
              (sort-directories (collect-directories dir))))
  
  
  (method (collect-directories dir)
    (let ((list '()))
      (iterate-directory~ dir
        (function (dir)
          (set! list (cons dir list)))
        files?: #f
        directories?: #t
        recursive?: #f)
      list))
  
  
  (method (sort-directories directories)
    (sort < directories key: (function (dir) (->string (get-base~ dir)))))
  
  
  (method (insert-directory-content row dir)
    (insert-files row dir)
    (insert-directories row dir))
  
  
  (method (insert-moniker-content row moniker)
    (let ((extension (get-extension~ moniker)))
      (cond ((member? extension '("java")) (insert-java row moniker))
            ((member? extension '("zip" "jar")) (insert-zip row moniker)))))
  
  
  (method (update-row row)
    (let ((data (get-user-data~ row)))
      (if (directory? data)
          (insert-directory-content row data)
        (insert-moniker-content row data)))))


;;;
;;;; Browser-Menu
;;;


(class Browser-Menu extends Context-Menu
  
  
  (method (on-get-latest evt)
    (get-latest))
  
  
  (method (on-checkout evt)
    (checkout))
  
  
  (method (on-checkin evt)
    (checkin))
  
  
  (method (on-checkpoint evt)
    (checkpoint))
  
  
  (method (on-undo-checkout evt)
    (undo-checkout))
  
  
  (method (on-show-history evt)
    (show-history))
  
  
  (method (on-show-changes evt)
    (show-changes))
  
  
  (method (on-synchronize evt)
    (synchronize-browser))
  
  
  (method (on-detach-branch evt)
    (detach-branch))
  
  
  (method (on-reattach-branch evt)
    (reattach-branch))
  
  
  (method (on-properties evt)
    (display-properties)))


;;;
;;;; File-Menu
;;;


(class File-Menu extends Browser-Menu
  
  
  (form
    (<install>
      (<Label-Item>     name: get-latest    title: "Get &Latest Version" icon: {Bitmap-Resource "GetLatest"} action-handler: {Event-Handler :form on-get-latest})
      (<Separator-Item>)
      (<Label-Item>     name: checkout      title: "Check &Out" icon: {Bitmap-Resource "Checkout"} action-handler: {Event-Handler :form on-checkout})
      (<Label-Item>     name: checkin       title: "Check &In" icon: {Bitmap-Resource "Checkin"} action-handler: {Event-Handler :form on-checkin})
      (<Label-Item>     name: checkpoint    title: "Check &Point" icon: {Bitmap-Resource "Checkpoint"} action-handler: {Event-Handler :form on-checkpoint})
      (<Label-Item>     name: undo-checkout title: "&Undo Checkout" icon: {Bitmap-Resource "UndoCheckout"} action-handler: {Event-Handler :form on-undo-checkout})
      (<Separator-Item>)
      (<Label-Item>     name: show-history  title: "Show &History..." icon: {Bitmap-Resource "ShowHistory"} action-handler: {Event-Handler :form on-show-history})
      (<Label-Item>     name: show-changes  title: "Show &Changes..." icon: {Bitmap-Resource "ShowChanges"} action-handler: {Event-Handler :form on-show-changes})
      (<Separator-Item>)
      (<Label-Item>     name: properties    title: "&Properties" action-handler: {Event-Handler :form on-properties}))))


;;;
;;;; Directory-Menu
;;;


(class Directory-Menu extends Browser-Menu
  
  
  (form
    (<install>
      (<Label-Item>     name: search          title: "&Search" icon: {Bitmap-Resource "Find"} action-handler: {Event-Handler :form on-search})
      (<Separator-Item>)
      (<Label-Item>     name: get-latest      title: "Get &Latest Version" icon: {Bitmap-Resource "GetLatest"} action-handler: {Event-Handler :form on-get-latest})
      (<Label-Item>     name: synchronize     title: "S&ynchronize With Repository" icon: {Bitmap-Resource "Synchronize"} action-handler: {Event-Handler :form on-synchronize})
      (<Separator-Item>)
      (<Label-Item>     name: detach-branch   title: "&Detach Branch" icon: {Bitmap-Resource "Branch"} action-handler: {Event-Handler :form on-detach-branch})
      (<Label-Item>     name: reattach-branch title: "&Reattach Branch" icon: {Bitmap-Resource "EditLink"} action-handler: {Event-Handler :form on-reattach-branch})
      (<Separator-Item>)
      (<Label-Item>     name: refresh         title: "&Refresh" icon: {Bitmap-Resource "Refresh"} action-handler: {Event-Handler :form on-refresh})))
  
  
  (method (on-search evt)
    (search-directory))
  
  
  (method (on-refresh evt)
    (refresh-directory))))
