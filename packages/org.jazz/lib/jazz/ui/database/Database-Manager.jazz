;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Database Manager
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2007
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.ui.database.Database-Manager jazz


(import (jazz.jml)
        (jazz.platform)
        (jazz.ui)
        (jazz.designer)
        (jazz.literals)
        (jazz.library)
        (jazz.utilities))


(class Database-Manager extends Editor-View
  
  
  (slot mode initialize 'edit)


  (form
    (<install>                                                  size: {Dimension 650 400} layout-type: border layout-insets: {Rect 0 2 0 0}
      (<Layout-View>                   name: toolbar            size: {Dimension 300 33} layout-type: flow layout-insets: {Rect 0 6 0 0} location: north
        (<Push-Tool>                   name: synchronize        size: {Dimension 22 22} tooltip?: #t tooltip-text: "Synchronize Contents" image-name: {Bitmap-Resource "Synchronize"} portfolio: :icons action-handler: {Event-Handler form: on-synchronize})
        (<Separator>                                            size: {Dimension 16 0})
        (<Push-Tool>                   name: print              size: {Dimension 22 22} tooltip?: #t tooltip-text: "Print" image-name: {Bitmap-Resource "Print"} portfolio: :icons action-handler: {Event-Handler form: on-print})
        (<Separator>                                            size: {Dimension 16 0})
        (<Push-Tool>                   name: undo               size: {Dimension 22 22} tooltip?: #t tooltip-text: "Undo" image-name: {Bitmap-Resource "Undo"} portfolio: :icons action-handler: {Event-Handler form: on-undo})
        (<Push-Tool>                   name: redo               size: {Dimension 22 22} tooltip?: #t tooltip-text: "Redo" image-name: {Bitmap-Resource "Redo"} portfolio: :icons action-handler: {Event-Handler form: on-redo})
        (<Toggle-Tool>                 name: edit/view          size: {Dimension 22 22} location: tail tooltip?: #t tooltip-text: "Edit" image-name: {Bitmap-Resource "Reminder"} portfolio: :icons action-handler: {Event-Handler form: on-edit/view})
        (<Separator>                                            size: {Dimension 4 0} location: tail))
      (<Center-View>                   name: center             size: {Dimension 650 367} location: center
        (<Tab-View>                    name: tab                position: {Point 1 0} size: {Dimension 285 366} selection-handler: {Event-Handler form: on-selection}
          (<Tab-Sheet>                 name: contents-sheet     title: "Contents"
            (<!>                       name: content
              (<Border-View>           name: descendants-border position: {Point 2 4} size: {Dimension 278 338} border-type: edge
                (<Database-Editor>     name: descendants
                  (<!>                 name: scroller
                    (<!>               name: content
                      (<!>             name: header
                        (<!>           name: content
                          (<!>         name: tree               highlight-edited?: #f tab-press-handler: {Event-Handler form: on-tab-press}
                            (<!>       name: descendant         title: "Entity"))))))))))
          (<Tab-Sheet>                 name: index-sheet        title: "Index"
            (<!>                       name: content
              (<Border-View>           name: index-border       position: {Point 2 4} size: {Dimension 278 338} border-type: edge
                (<Scroller-View>                                hscroll?: #t vscroll?: #t
                  (<!>                 name: content            layout-type: fill
                    (<Tree-Header>
                      (<!>             name: content
                        (<Index-Tree>  name: index
                          (<!>         name: descendant         title: "Entity" width: 160)))))))))
          (<Tab-Sheet>                 name: search-sheet       title: "Search"
            (<!>                       name: content
              (<Label-View>                                     title: "Find:" position: {Point 8 12} size: {Dimension 60 16})
              (<Border-View>           name: find-border        position: {Point 40 9} size: {Dimension 238 19} border-type: edge
                (<Scroller-View>                                hscroll?: #f vscroll?: #f
                  (<!>                 name: content            layout-type: fill
                    (<Plain-Text-View> name: find               accepts-returns?: #f left-padding: 2 top-padding: 2 return-press-handler: {Event-Handler form: on-return-press}))))
              (<Border-View>           name: search-border      position: {Point 2 35} size: {Dimension 278 307} border-type: edge
                (<Scroller-View>                                hscroll?: #t vscroll?: #t
                  (<!>                 name: content            layout-type: fill
                    (<Tree-Header>
                      (<!>             name: content
                        (<Search-Tree> name: search
                          (<!>         name: descendant         title: "Entity" width: 160))))))))))
        (<Splitter>                    name: right              position: {Point 286 0} size: {Dimension 3 366} move-handler: {Event-Handler form: on-splitter-move})
        (<Border-View>                 name: card-border        position: {Point 289 0} size: {Dimension 360 366} border-type: edge
          (<Properties-Card>           name: card))
        (<Component-Viewer>            name: viewer             position: {Point 289 0} size: {Dimension 360 366} visible?: #f))))
  
  
  ;;;
  ;;;; Frame
  ;;;
    

  @convert-guest
  (method meta (frame-icon)
    {Bitmap-Resource "Database"})
  
  
  @convert-guest
  (method meta (frame-position)
    {})
  
  
  @convert-guest
  (method meta (frame-size)
    {})
  
  
  (method (frame-workspaces)
    '(database))
  
  
  @convert-guest
  (definition meta Empty-Database
    (form>>
      (<Database>)))
  
  
  @convert-guest
  (method meta (new-event . rest)
    (let ((frame (apply nextmethod host-visible?: #f rest)))
      (set-client~ (get-guest~ frame) (instantiate~ Empty-Database))
      (set-visible?~ frame #t)
      frame))

  
  ;;;
  ;;;; Preferences
  ;;;
  
  
  (method (tool-preferences)
    (get-preferences '(tools database-manager)))

  
  ;;;
  ;;;; Component
  ;;;

  
  (method (install rest)
    (nextmethod rest)
    (set-editor~ (locate 'descendants) self)
    (set-editor~ (locate 'index) self)
    (set-editor~ (locate 'search) self)
    (set-editor~ (locate 'viewer) self)
    (set-editor~ (locate 'properties) self)
    (set-filter~ (locate '(properties tree)) 'categorized))
  
  
  (method (client-update)
    (nextmethod)
    (set-client~ (locate 'index) client)
    (set-client~ (locate 'search) client))

  
  (method (install-in-host host)
    (nextmethod host)
    (setup~ (locate 'viewer))
    @w(set-visible?~ (get-window~ (get-browser~ (locate 'viewer))) #t)
    (client-update~ (locate 'viewer))
    (update-viewer)
    (let ((pref (tool-preferences)))
      (when pref
        (set-position~ host (cascade-position))
        (set-size~ host (get-size~ pref)))))

  
  (method (focus-document)
    (acquire-focus~ (locate '(descendants tree))))
  
  
  ;;;
  ;;;; Cascade
  ;;;

  
  (definition Cascade-Position
    {Point 25 25})
    
  (definition Cascade-Step
    {Dimension 22 22})
  
  
  (method (cascade-position)
    (let ((frames (collect-managers))
          (pos Cascade-Position))
      (call/ec
        (lambda (return)
          (while #t
            (if (member? pos frames key: (function dynamic (frame) (get-position~ frame)))
                (increase! pos Cascade-Step)
              (return pos)))))))
  
  
  (method (collect-managers)
    (collect-if (function dynamic (frame)
                  (and (is? frame Host-Frame)
                       (is? (get-guest~ frame) Database-Manager)))
                (get-children~ (get-stage))))

  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method protected virtual (resize-center dh dv)
    (size-figure~ (locate 'tab) 0 dv)
    (size-figure~ (locate 'descendants-border) 0 dv)
    (size-figure~ (locate 'index-border) 0 dv)
    (size-figure~ (locate 'search-border) 0 dv)
    (size-figure~ (locate 'right) 0 dv)
    (size-figure~ (locate 'card-border) dh dv)
    (size-figure~ (locate 'viewer) dh dv))
  
  
  (method public (on-splitter-move evt)
    (let ((sender (get-sender~ evt))
          (delta (get-property~ evt delta:)))
      (case (get-name~ sender)
        ((right)
         (size-figure~ (locate 'tab) delta 0)
         (size-figure~ (locate 'descendants-border) delta 0)
         (size-figure~ (locate 'index-border) delta 0)
         (size-figure~ (locate 'find-border) delta 0)
         (size-figure~ (locate 'search-border) delta 0)
         (move-figure~ (locate 'card-border) delta 0)
         (size-figure~ (locate 'card-border) (- delta) 0)
         (move-figure~ (locate 'viewer) delta 0)
         (size-figure~ (locate 'viewer) (- delta) 0)))
      (update-view)))
  
  
  (method public (on-selection evt)
    (let ((tab (locate 'tab)))
      (when (eq? (get-selection-name~ tab) 'search-sheet)
        (let ((text (locate 'find)))
          (acquire-focus~ text)
          (select-all~ text)))))
  
  
  (method public (on-synchronize evt)
    (synchronize-tree (get-client~ (locate 'properties))))
  
  
  (method public (on-print evt)
    (print-browser~ (get-site)))
  
  
  (method public (on-return-press evt)
    (search (get-string-content~ (locate 'find))))
  
  
  (method public (on-tab-press evt)
    (let ((tree (get-tree~ (locate 'properties))))
      (acquire-focus~ tree)
      (let ((rank (get-single-selection~ tree)))
        (when rank
          (auto-select~ (get-row~ tree rank))))))
  
  
  (method public (on-edit/view evt)
    (case mode
      ((view) (edit))
      ((edit) (view))))
  
  
  (method (get-site)
    (get-site~ (get-browser~ (locate 'viewer))))
    
  
  ;;;
  ;;;; Edition
  ;;;

  
  (method (edit)
    (when (neq? mode 'edit)
      (set-visible?~ (locate 'card-border) #t)
      (set-visible?~ (locate 'viewer) #f)
      (set! mode 'edit)))

  
  (method (view)
    (when (neq? mode 'view)
      (set-visible?~ (locate 'card-border) #f)
      (set-visible?~ (locate 'viewer) #t)
      (set! mode 'view)
      (update-viewer)))
  
  
  (method (update-viewer)
    )
  
  
  ;;;
  ;;;; Synchronize
  ;;;
  
  
  (method (synchronize-tree component)
    (let* ((tree (locate '(descendants tree)))
           (row (component-row~ tree component)))
      (if (null? row)
          (bell)
        (ensure-expanded~ tree row)
        (set-single-selection~ tree (row-rank~ tree row))
        (set-selection-name~ (locate 'tab) 'contents-sheet))))
  
  
  ;;;
  ;;;; Search
  ;;;
  
  
  (method (search target)
    (set-target~ (locate 'search) target)))


;;;
;;;; Center-View
;;;


(class Center-View extends Layout-View
  
  
  (method (resize dh dv)
    (nextmethod dh dv)
    (resize-center dh dv))))
