;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Group
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2007
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.ui.database.Group jazz


(import (jazz.jml)
        (jazz.ui)
        (jazz.designer)
        (jazz.library)
        (jazz.utilities))


(class Group extends Component
  
  
  (property title   initialize {}   getter get-title   setter set-title)
  (property classes initialize '()  getter get-classes setter set-classes)
  (property sort?   initialize #t getter get-sort?   setter set-sort?)
  
  
  (form
    (<install> title: "Group"))
  
  
  (method (print printer readably)
    (print-unreadable self printer
      (function dynamic (printer)
        (format printer "{a}"
                title))))
  
  
  ;;;
  ;;;; Access
  ;;;
  
  
  (method public (get-title)
    title)
  
  
  (method public (set-title t)
    (set! title t))


  (method public (get-classes)
    classes)


  (method public (set-classes value)
    (set! classes value))


  (method public (get-sort?)
    sort?)


  (method public (set-sort? value)
    (when (neq? value sort?)
      (set! sort? value)
      (for-each (function dynamic (designer)
                  (process-refresh~ designer self 'descendants))
                designers)))


  ;;;
  ;;;; Classes
  ;;;
  
  
  (method (get-addable-classes)
    (map (function dynamic (model)
           (when model
             (autoload model)))
         (get-component-classes)))
  
  
  (method (get-component-classes)
    (either classes
            (when parent
              (get-component-classes~ parent))))


  ;;;
  ;;;; Designer
  ;;;
  
  
  @convert-descriptor
  (method meta (get-class-presentation)
    "Group")
  
  
  @convert-descriptor
  (method meta (get-class-image)
    {Bitmap-Resource "OpenedFolder"})
  
  
  @convert-descriptor
  (method meta (property-presentation property)
    (case (field-name property)
      ((title) "Title")
      ((classes) "Classes")
      ((sort?) "Sort?")
      (else (nextmethod property))))
  
  
  (method (get-custom-card)
    Group-Card)
  
  
  (method (sort-components?)
    sort?)
  
  
  (method (display-property? property)
    (not (memq? (field-name property) '(class-info name-info before children visible? title))))
  
  
  (method (indexable?)
    #f)

  
  (method (get-row-instance property)
    (case (field-name property)
      ((classes) (new Class-List-Row))
      ((sort?) (new Boolean-Row))
      (else (nextmethod property)))))


;;;
;;;; Class-List-Row
;;;


(class Class-List-Row extends List-Row
  
  
  (method (get-subrow-class)
    Class-Combo-Row))


;;;
;;;; Class-Combo-Row
;;;


(class Class-Combo-Row extends Combo-Row
  
  
  (method (initialize . rest)
    (apply nextmethod rest)
    @convert
    (set-choices '((() "Separator") () (Group "Group") () (Note "Note") (Task "Task") (Calendar-Event "Event") (Anniversary "Anniversary") () (Company "Company") (Organism "Organism") (Person "Person") () (Password "Password") () (Apartment "Apartment") (Recipe "Recipe"))))))
