;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; BrowseFolder Dialog
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2007
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.ui.dialog.BrowseFolder-Dialog jazz


(import (jazz.library)
        (jazz.ui)
        (jazz.ui.view)
        (jazz.utilities))


(class BrowseFolder-Dialog extends Dialog
    
  
  @convert-dialog
  (method meta (get-modal (title: title {}) (directory: directory {}) (anchors: anchors {}))
    (close-all-popups)
    (let ((preserved {}))
      (when directory
        (set! preserved (get-current-directory))
        (set-current-directory (parse~ directory)))
      (let ((r (new BROWSEINFO)))
        (set r 'hwndOwner (let ((toplevel (get-toplevel))) (if toplevel (get-handle~ toplevel) NULL)))
        (set r 'pidlRoot  NULL)
        (set r 'lpfn      (get-browse-callback))
        (set r 'lpszTitle (either title NULL))
        (let ((items (SHBrowseForFolder r)))
          (when preserved
            (set-current-directory preserved))
          (if (not items)
              (throw-cancel)
            (let ((path (new Ansi-String size: MAX_PATH)))
              (SHGetPathFromIDList items path)
              (let ((string (coerce path String)))
                (adjust-string string)
                (let ((directory (anchorize~ (new Directory (tokenise string)) anchors: anchors)))
                  (set-current-directory (parse~ directory))
                  directory))))))))))
