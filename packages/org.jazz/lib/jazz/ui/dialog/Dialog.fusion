;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Dialogs
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2007
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.ui.dialog.Dialog jazz


(import (jazz.ui)
        (jazz.ui.dialog)
        (jazz.ui.view)
        (jazz.ui.window)
        (jazz.platform)
        (jazz.platform.windows)
        (jazz.library)
        (jazz.utilities))


(class Dialog extends Overlapped
  
  
  @convert
  (method meta public virtual (get-modal . rest)
    (process-modal~ (apply new self rest)))
  
  
  (property sizable?  initialize #f getter get-sizable?  setter set-sizable?)
  (property closable? initialize #t  getter get-closable? setter set-closable?)

  
  (slot modal-done?   initialize #f)
  (slot modal-closed? initialize #f)
  (slot modal-result  initialize {})
  (slot modal-signal  initialize {})
  (slot modal-action  initialize {})
  

  @convert
  (method meta (initialize)
    (nextmethod)
    (register-class)
    (destroy-mandatory))


  @convert
  (method meta (window-class)
    "JDialog")


  (method (default-parent)
    (get-toplevel~ (get-application)))
  
  
  (method (child-style? rest)
    #f)
  
  
  @moved-in-jazz.ui.window.windows
  (method (window-style rest)
    (bit-or (nextmethod rest)
            WS_POPUP
            WS_BORDER
            WS_OVERLAPPED
            WS_CAPTION
            WS_DLGFRAME
            (if (getf rest sizable?: not-found: #t) WS_THICKFRAME 0)
            (if (getf rest closable?: not-found: #t) WS_SYSMENU 0)))


  @moved-in-jazz.ui.window.windows
  (method (window-ex-style rest)
    (bit-or (nextmethod rest)
            WS_EX_DLGMODALFRAME))
  
  
  ;;;
  ;;;; Access
  ;;;
  
  
  (method (get-sizable?)
    sizable?)
  
  
  (method (set-sizable? value)
    (set! sizable? value))
  
  
  (method (get-closable?)
    closable?)
  
  
  (method (set-closable? value)
    (set! closable? value))
  
  
  (method public (processing-modal?)
    (not modal-done?))
  
  
  ;;;
  ;;;; Close
  ;;;


  (method (on-close evt)
    (if (not closable?)
        processed
      ;; This is necessary because after closing the Dialog, Windows will be
      ;; looking for the next enabled toplevel window to bring it to front...
      (let ((toplevel (get-toplevel)))
        (when toplevel
          (enable-window~ toplevel)))
      unprocessed))
  
  
  (method (destroy)
    (set! modal-closed? #t)
    (set! modal-result {})
    (set! modal-done? #t)
    (nextmethod))


  ;;;
  ;;;; Actions
  ;;;
  

  (method (class-actions)
    (cons (find-actions 'dialog)
          (nextmethod)))

  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method public (on-ok evt)
    (validate-dialog)
    (end-modal (get-modal-result)))
  

  (method public (on-cancel evt)
    (cancel-modal))

  
  ;;;
  ;;;; Modal
  ;;;
  
  
  (method public virtual (validate-dialog)
    )
  
  
  (method public virtual (get-modal-result)
    {})
  
  
  (method public (process-modal)
    (close-popups)
    (release-captured-view)
    (prog1 (let* ((application (get-application))
                  (toplevel (get-toplevel))
                  (overlapped (either (current-modal-dialog) toplevel))
                  (preserved *current-modal*))
             (when overlapped
               (disable-window~ overlapped))
             (unwind-protect
                 (begin
                   (set! modal-done? #f)
                   (set! *current-modal* self)
                   (when toplevel
                     (update-windowing-actions~ application))
                   (show)
                   (while (not modal-done?)
                     (catch Cancel-Signal
                       (process-one-message~ application self)
                       (sleep 0)))
                   (cond (modal-closed? (throw-cancel))
                         (modal-signal (signal modal-signal))
                         (else modal-result)))
               (when overlapped
                 (enable-window~ overlapped))
               (set! modal-done? #t)
               (set! *current-modal* preserved)
               (when toplevel
                 (update-windowing-actions~ application))
               (close)))
      (when modal-action
        (modal-action))))
  
  
  ;; because process-modal waits for messages...
  (method (wake-process-modal)
    (when (get-toplevel)
      (post-primary
        (function dynamic ()
          ))))
  
  
  ;;;
  ;;;; Termination
  ;;;
  
  
  (method public (end-modal result)
    (set! modal-closed? #f)
    (set! modal-result result)
    (set! modal-done? #t)
    (wake-process-modal))
  
  
  (method public (signal-modal signal)
    (set! modal-signal signal)
    (set! modal-done? #t)
    (wake-process-modal))
  
  
  (method public (cancel-modal)
    (signal-modal (new Cancel-Signal)))
  
  
  (method public (close-modal action)
    (set! modal-closed? #f)
    (set! modal-result {})
    (set! modal-action action)
    (set! modal-done? #t)
    (wake-process-modal))))
