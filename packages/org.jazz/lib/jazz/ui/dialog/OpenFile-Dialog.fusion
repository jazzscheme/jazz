;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; OpenFile Dialog
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2007
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.ui.dialog.OpenFile-Dialog jazz


(import (jazz.library)
        (jazz.ui)
        (jazz.ui.view)
        (jazz.ui.window)
        (jazz.utilities)
        (jazz.platform.windows)
        (jazz.platform))


(class OpenFile-Dialog extends Dialog
  
  
  (method (tokenise-choose-file-string buffer)
    (let loop ((offset 0)
               (start-of-string? true))
         (let ((end-of-string? (eq? #\nul (WCHAR-array-ref buffer offset))))
           (if start-of-string?
               (if end-of-string?
                   '()
                 (cons (WCHAR-string (WCHAR-subarray buffer offset))
                       (loop (+ offset 1) end-of-string?)))
             (loop (+ offset 1) end-of-string?)))))
  
  
  (method (get-modal . rest)
    (bind-keywords ((title {}) (directory {}) (initial-filename {}) (extensions null) (multiple-selection? false) (anchors {})) rest
      (close-all-popups)
      (let ((size (if multiple-selection? (+ MAX_PATH (* 64 50)) MAX_PATH)))
        (with ((r (OPENFILENAME-make))
               (buffer (WCHAR-array-make size)))
          (if (not initial-filename)
              (WCHAR-array-set! buffer 0 #\nul)
            (WCHAR-copy buffer initial-filename size))
          (let ((fake-extensions-filter @fake (extensions-filter extensions) NULL)
                (fake-current-directory @fake (get-current-directory) NULL)
                (fake-dialog-proc @fake (get-dialog-proc) NULL))
            (OPENFILENAME-lStructSize-set! r     (OPENFILENAME-sizeof))
            (OPENFILENAME-hwndOwner-set! r       (let ((toplevel (get-toplevel))) (if toplevel (get-hwnd~ toplevel) NULL)))
            (OPENFILENAME-lpstrFilter-set! r     fake-extensions-filter)
            (OPENFILENAME-lpstrFile-set! r       buffer)
            (OPENFILENAME-nMaxFile-set! r        size)
            (OPENFILENAME-lpstrInitialDir-set! r (if directory (parse~ directory) fake-current-directory))
            (OPENFILENAME-lpstrTitle-set! r      (either title NULL))
            (OPENFILENAME-Flags-set! r           (bit-or OFN_EXPLORER (if multiple-selection? OFN_ALLOWMULTISELECT 0) OFN_HIDEREADONLY OFN_ENABLEHOOK OFN_FILEMUSTEXIST OFN_ENABLESIZING))
            (OPENFILENAME-lpstrDefExt-set! r     NULL)
            (OPENFILENAME-lCustData-set! r       0)
            (OPENFILENAME-lpfnHook-set! r        fake-dialog-proc))
          (let ((anchorize
                  (function dynamic (pathname)
                    (debug pathname)
                    pathname
                    @w
                    (anchorize~ pathname :anchors anchors))))
            (if (GetOpenFileName r)
                (begin
                  (if (not multiple-selection?)
                      (let ((filename (WCHAR-string buffer)))
                        (anchorize (new File (tokenise filename))))
                    (let ((tokens (tokenise-choose-file-string buffer)))
                      (if (= (length tokens) 1)
                          (let ((filename (WCHAR-string buffer)))
                            (list (anchorize (new File (tokenise filename)))))
                        (bind (dir . filenames) tokens
                          (let ((dirlist (tokenise dir)))
                            (map (function dynamic (filename)
                                   (anchorize (new File (append dirlist (list filename)))))
                                 filenames)))))))
              (let ((code (CommDlgExtendedError)))
                (if (= code 0)
                    (throw-cancel)
                  (error "Dialog error: {t}" code)))))))))))

