;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; SaveFile Dialog
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2007
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.ui.dialog.SaveFile-Dialog jazz


(import (jazz.library)
        (jazz.ui)
        (jazz.ui.view)
        (jazz.utilities))


(class SaveFile-Dialog extends Dialog
    
  
  @convert-dialog
  (method meta (get-modal (directory: directory {}) (initial-filename: initial-filename {}) (default-extension: default-extension {}) (extensions: extensions '()) (anchors: anchors {}))
    (close-all-popups)
    (when directory
      (create-directories~ directory))
    (let ((r (new OPENFILENAME))
          (filename (make-string MAX_PATH)))
      (if (null? initial-filename)
          (set-element! filename 0 #\nul)
        (copy-into! initial-filename filename))
      (set r 'lStructSize     (size-of OPENFILENAME))
      (set r 'hwndOwner       (let ((toplevel (get-toplevel))) (if toplevel (get-handle~ toplevel) NULL)))
      (set r 'lpstrFilter     (extensions-filter extensions))
      (set r 'lpstrFile       filename)
      (set r 'nMaxFile        MAX_PATH)
      (set r 'lpstrInitialDir (if directory (parse~ directory) (get-current-directory)))
      (set r 'Flags           (bit-or OFN_EXPLORER OFN_ENABLEHOOK @w OFN_FILEMUSTEXIST OFN_ENABLESIZING OFN_OVERWRITEPROMPT))
      (set r 'lpstrDefExt     (either default-extension NULL))
      (set r 'lCustData       NULL)
      (set r 'lpfnHook        (get-dialog-proc))
      (if (GetSaveFileName r)
          (begin
            (adjust-string filename)
            (anchorize~ (new File (tokenise filename)) anchors: anchors))
        (let ((code (CommDlgExtendedError)))
          (if (= code 0)
              (throw-cancel)
            (error "Dialog error: {t}" code))))))))
