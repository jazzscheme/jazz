;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; String Request
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2007
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.ui.dialog.String-Request jazz


(import (jazz.jml)
        (jazz.ui)
        (jazz.literals)
        (jazz.library)
        (jazz.utilities))


(class String-Request extends View


  (property accepts-empty? initialize true getter get-accepts-empty? setter set-accepts-empty?)
  (property unicity-domain initialize {}   getter get-unicity-domain setter set-unicity-domain)
  (property validator      initialize {}   getter get-validator      setter set-validator)
  

  (form
    (<install>                         size: {Dimension 322 120}
      (<Label-View>      name: prefix  title: "String:" position: {Point 30 30} size: {Dimension 55 16} font: {Font name: Default-GUI})
      (<Border-View>                   position: {Point 93 28} size: {Dimension 198 19} border-type: edge
        (<Scroller-View>               hscroll?: #f vscroll?: #f
          (<!>           name: content layout-type: fill
            (<Text-View> name: text    accepts-returns?: #f left-padding: 2 top-padding: 2 content-change-handler: {Event-Handler form: on-content-change} return-press-handler: {Event-Handler form: on-return-press} escape-press-handler: {Event-Handler :host on-cancel}))))
      (<Label-View>      name: message position: {Point 93 52} size: {Dimension 198 16} font: {Font name: Default-GUI} color: {Color name: Entry-Border})
      (<Push-Button>     name: ok      title: "OK" position: {Point 80 80} size: {Dimension 80 24} action-handler: {Event-Handler :host on-ok} default?: #t)
      (<Push-Button>     name: cancel  title: "Cancel" position: {Point 167 80} size: {Dimension 80 24} action-handler: {Event-Handler :host on-cancel})))

  
  ;;;
  ;;;; Access
  ;;;


  (method public (get-accepts-empty?)
    accepts-empty?)


  (method public (set-accepts-empty? value)
    (set! accepts-empty? value)
    (name-change))


  (method public (get-unicity-domain)
    unicity-domain)


  (method public (set-unicity-domain value)
    (set! unicity-domain value)
    (name-change))


  (method public (get-validator)
    validator)


  (method public (set-validator value)
    (set! validator value)
    (name-change))
  
  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method (on-content-change evt)
    (name-change))
  
  
  (method (on-return-press evt)
    (when (get-enabled?~ (locate 'ok))
      (let ((dialog (get-host)))
        (end-modal~ dialog (get-modal-result~ dialog)))))
  
  
  (method (name-change)
    (when (name-validated?)
      (call/ec
        (lambda (return)
          (let* ((text (locate 'text))
                 (name (get-string-content~ text))
                 (proc
                   (function dynamic (enabled? message)
                     (set-enabled?~ (locate 'ok) enabled?)
                     (set-title~ (locate 'message) (if enabled? "" message))
                     (when (not enabled?)
                       (return)))))
            (when (not accepts-empty?)
              (proc (not (empty-string? name)) "Name is mandatory"))
            (when unicity-domain
              (proc (not (member? name unicity-domain :test (sort-predicate 'equal))) "Name must be unique"))
            (when validator
              (let ((message (validator name)))
                (proc (null? message) message))))))))
  
  
  (method (name-validated?)
    (or (not accepts-empty?) unicity-domain validator))
  
  
  ;;;
  ;;;; Dialog
  ;;;
  
  
  @convert-dialog
  (method meta (dialog-class)
    String-Request-Dialog)
  

  @convert-dialog
  (class meta String-Request-Dialog extends Host-Dialog
    
    
    (form
      (<install> title: "Enter String" position: {Point 450 300} size: {Dimension 302 120}))


    (method (focus-gain)
      (nextmethod)
      (acquire-focus~ (locate~ guest 'text)))
  
  
    (method (get-modal-result)
      (get-string-content~ (locate~ guest 'text)))))


;;;
;;;; Request-Text-View
;;;


(class Request-Text-View extends Text-View))
