;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; UI Documentation
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2007
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(<Module-Doc> name: UI
  (<description>
    (<p> "A catch all module for all User Interface related classes."))
  (<Section-Doc> name: Concepts
    (<Concept-Doc> name: Activation
      (<description>
        (<p> "Kinds of activation taking place in a Jazz application:")
        (<node> "Frame"
          (<node> "Frame that becomes front -> frame-activate")
          (<node> "Frame that was front -> frame-deactivate"))
        (<node> "Root"
          (<node> "mouse-activate -> activate event from a user mouse action")
          (<node> "Root view of the view that has the focus -> root-activate"))
        (<node> "Stage"
          (<node> "When the last frame is closed -> stage-activate")
          (<node> "When a first frame is activated -> stage-deactivate"))
        (<node> "Client"
          (<node> "When a new frame becomes front, every palette receives a client-activate"))))
    (<Concept-Doc> name: Events
      (<description>
        (<p> "Event encapsulation puts almost no pressure on the framework because almost everywhere the direct class override is used."
          "Events encapsulate amongst other things, modifiers state that is necessary for recording systems.")
        (<p> "When an event is generated in response to a value change :")
        (<node>
          (<span> "only one event is generated after the value change -> :value-change")
          (<span> "two events, one before and one after the value change -> :value-changing :value-changed")
          (<span> "An event is generated when something happens. "
            "Code gets executed in response to events. "
            "Event code that whants the triggered action to be stored and manipulated in a meaningfull way will use an Action instead of simply doing it."))))
    (<Concept-Doc> name: Painting
      (<description>
        (<node> "View-Player.paint"
          (<node> "Drawing.paint (root)"
            (<node> "Drawing.paint-displayed"
              (<node> "Drawing.paint-drawing"
                (<node> "DC.with-transform"
                  (<node> "Drawing.draw-background")
                  (<node> "Drawing.draw-view"
                    (<node> "Drawing.draw"))
                  (<node> "Drawing.draw-children"
                    (<node> "Drawing.paint")))))))
        (<p>)
        (<node>
          (<span> "View painting")
          (<span> "Tree cell (column) painting")
          (<span> "Zooming")
          (<span> "Print previewing")
          (<span> "View-DC"))
        (<p>)
        (<node>
          (<span> "A view is a rectangular abstraction")
          (<span> "Views can define their own painting abstractions and hook them into the painting scheme (ex: tables painting cells)")
          (<span> "Setup origin and clipping")
          (<span> "Why origin + clipping? A simple rectangle wouldn't do?"))))
    (<Concept-Doc> name: Printing
      (<description>
        (<p> "Print Flow")
        (<p>)
        (<node>
          "on-print"
          (<node> "get printer dc")
          (<node> "allocate print job")
          (<node> "job.start-doc")
          (<node>
            "view.print-content job"
            (<node>
              "job.with-job self"
              (<node>
                "for-each-page start end (get-page-height~ job)"
                (<node>
                  "job.with-page"
                  (<node> "print-range job dc top bottom")))))
          (<node> "job.end-doc")))))
  (<Section-Doc> name: Packages
    (<Section-Doc> name: Window
      (<description>
        (<definition> name: Frame
          (<p> "A frame window represents a document window in the MDI metaphor. Frame windows should only be used in an MDI application."))
        (<definition> name: Palette
          (<p> "Windows of this class should be permanent popups. They can be in either floating or docked mode."))
        (<definition> name: Popup
          (<p> "Windows of this class should be temporary popup windows, i.e. tooltips, menus, ... For permanent popups that can be floating or docked, see Palette."))
        (<definition> name: Stage
          (<p> "A stage window represents a the client window in the MDI metaphor. Stage windows should only be used in an MDI application."))
        (<definition> name: Window)))
    (<Section-Doc> name: View
      (<description>
        (<definition> name: View)
        (<definition> name: Scroller-View)))
    (<Section-Doc> name: Text
      )
    (<Section-Doc> name: Tree
      )
    (<Section-Doc> name: Layout
      )
    (<Section-Doc> name: Menu
      )
    (<Section-Doc> name: Look title: "Look & Feel"
      )
    (<Section-Doc> name: Search
      )))
