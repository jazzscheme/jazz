;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Wipe Effects
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2007
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.ui.effect.Wipe-Effect jazz


(import (jazz.ui)
        (jazz.library)
        (jazz.utilities))


(class Wipe-Effect extends Effect
  
  
  (slot direction)
  (slot delay)
  
  
  (method (initialize . rest)
    (bind-keywords ((direction {}) (delay {})) rest
      (nextmethod)
      (set! [direction self] direction)
      (set! [delay self] delay)))


  (method (animate src dst pos size)
    (let ((blit
           (function dynamic (p)
             (when delay
               (wait delay))
             (bit-blit~ src dst :position pos :size size :destination p))))
      (case direction
        ((right)
          (loop (for n from 0 below [width size])
                (let* ((h (* n 1))
                       (p (new Point (- [h pos] (- [width size] h)) [v pos])))
                  (blit p))))
        ((left)
          (loop (for n from 0 below [width size])
                (let* ((h (* n 1))
                       (p (new Point (- [width size] h) [v pos])))
                  (blit p))))
        ((down)
          (loop (for n from 0 below [height size])
                (let* ((v (* n 1))
                       (p (new Point [h pos] (- [v pos] (- [height size] v)))))
                  (blit p))))
        ((up)
          (loop (for n from 0 below [height size])
                (let* ((v (* n 1))
                       (p (new Point [h pos] (- [height size] v))))
                  (blit p)))))))))
