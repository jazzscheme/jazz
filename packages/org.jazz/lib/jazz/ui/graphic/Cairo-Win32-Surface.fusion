;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Cairo WIN32 Surface
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Jeremie Lasalle Ratelle.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2007
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;    Guillaume Cartier
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.ui.graphic.Cairo-Win32-Surface jazz


(import (jazz.library)
        (jazz.ui)
        (jazz.platform.cairo.cairo-win32)
        (jazz.literals)
        (jazz.utilities))


(class Cairo-Win32-Surface extends Object
  
  
  (slot clipper)
  
  (slot surface)
  (slot hdc)
  (slot context)
  
  (slot highlight-color    initialize {})
  
  (slot dash-array         initialize {})
  (slot empty-array        initialize {})
  
  (slot glyph-array        initialize {})
  (slot array-length       initialize 0)

  
  (method (initialize surface . rest)
    (nextmethod)  
    (set! surface~self surface)
    (set! hdc~self (cairo_win32_surface_get_dc surface))
    (set! context~self (cairo_create surface))
    (destroy-mandatory))


  (method (destroy)
    (destroy-surface)
    (destroy-context)
    (nextmethod))
  
  
  (method public (new-context)
    (destroy-context)
    (set! context (cairo_create surface)))
  
  
  (method protected virtual (destroy-surface)
    (when surface
      (cairo_surface_destroy surface)
      (set! surface {})))
  
  
  (method protected virtual (destroy-context)
    (when context
      (cairo_destroy context)
      (set! context {})))
  
  
  @probably-not-necessary
  (method public (cairo-finish)
    (cairo_surface_finish surface))
  
  
  ;;;
  ;;;; Access
  ;;;


  (method public (get-context)
    context)
  
  
  (method public (get-surface)
    surface)
  
  
  ;;;
  ;;;; Device
  ;;;


  (method public (logical->device shape <Object>)
    (typecase shape
      ((Point)
       (let ((array (cairo_user_to_device context (exact->inexact (get-h~ shape)) (exact->inexact (get-v~ shape)))))
         (new Point (double-array-ref array 0) (double-array-ref array 1))))))
  
  
  (method public (device->logical shape <Object>)
    (typecase shape
      ((Point)
       (let ((array (cairo_device_to_user context (exact->inexact (get-h~ shape)) (exact->inexact (get-v~ shape)))))
         (new Point (double-array-ref array 0) (double-array-ref array 1))))
      ((Rect)
       (let ((array1 (cairo_device_to_user context (exact->inexact (get-left~ shape)) (exact->inexact (get-top~ shape))))
             (array2 (cairo_device_to_user context (exact->inexact (get-right~ shape)) (exact->inexact (get-bottom~ shape)))))
         (new Rect (double-array-ref array1 0) (double-array-ref array1 1) (double-array-ref array2 0) (double-array-ref array2 1))))))
  
  
  ;;;
  ;;;; Context Saving
  ;;;
  
  
  (method (with-saved-context thunk)
    (cairo_save context)
    (let ((result (thunk)))
      (cairo_restore context)
      result))
  
  
  ;;;
  ;;;; Clipping
  ;;;
  
  
  (method public (setup-clipper clipper <Rect>)
    (set! clipper~self clipper))
  
  
  (method public (get-clipper)
    (new Rect (get-left~ clipper)
              (get-top~ clipper)
              (get-right~ clipper)
              (get-bottom~ clipper)))
  
  
  (method public (set-clipper rect <Rect>)
    (set-left~ clipper (get-left~ rect))
    (set-top~ clipper (get-top~ rect))
    (set-right~ clipper (get-right~ rect))
    (set-bottom~ clipper (get-bottom~ rect))
    (select-clipper clipper))


  (method public (select-clipper rect <Rect>)
    (cairo_reset_clip context)
    (draw-rectangle rect)
    (cairo_clip context))
  
  
  (method public (with-clipper clip-rect <Rect> proc <procedure>)
    (unimplemented 'with-clipper)
    @rect-intersection
    (with ((old-clipper (get-clipper))
           (new-clipper (rect-intersection old-clipper clip-rect)))
      (let ((selected? false))
        (unwind-protect
            (begin
              (set-clipper new-clipper)
              (set! selected? true)
              (proc))
          (when selected?
            (set-clipper old-clipper))))))
  
  
  ;;;
  ;;;; Transform
  ;;;
  
  
  ;; lh lv : position of the drawing relative to the player
  ;; sh sv : position of the scaled view relative to the player
  ;; dh dv : position of the drawing relative to the scaled view, i.e. s - l
  ;; ch cv : position of the clipper in device coordinates
  ;; cwidth cheight : size of the clipper in device coordinates
  
  
  (method public (with-transform drawing <Drawing> lh <fx> lv <fx> width <fx> height <fx> sh <fx> sv <fx> sc <fl> sc? <bool> proc <procedure>)
    (let* ((dh (- lh sh))
           (dv (- lv sv))
           (ch (if (not sc?) lh (floor (+ sh (* dh sc))))) 
           (cv (if (not sc?) lv (floor (+ sv (* dv sc)))))
           (cwidth (if (not sc?) width (+ 1 (ceil (* width sc)))))
           (cheight (if (not sc?) height (+ 1 (ceil (* height sc))))))
      (let ((old-matrix (cairo_matrix_t-make)))
        (cairo_get_matrix context old-matrix)
        (cairo_identity_matrix context)
        (let* ((clipper (new Rect ch cv (+ ch cwidth) (+ cv cheight)))
               (old-clipper (get-clipper))
               (new-clipper (rect-intersection old-clipper clipper)))
          (set-clipper new-clipper)
          (if sc?
              (begin 
                (cairo_translate context (exact->inexact (- sh)) (exact->inexact (- sv)))
                (cairo_scale context sc sc)))
          (cairo_translate context (exact->inexact lh) (exact->inexact lv))
          (proc)
          (cairo_identity_matrix context)
          (set-clipper old-clipper)
          (cairo_set_matrix context old-matrix)))))
  
  
  ;;;
  ;;;; Text
  ;;;
  
  
  (method public (set-text-color color <Color>)
    (set-color color))
  
   
  (method public (get-char-widths (first: first 0) (last: last 255))
    (let ((ext (cairo_text_extents_t-make))
          (gly (cairo_glyph_t-make)))
      (let ((array (alloc-int-array (+ (- last first) 1))))
        (loop (for i from first to last)
              (do
                ;; cairo starts glyphs at char 29
                (if (< i 29)
                    (int-array-set! array i 0)
                  (begin
                    (cairo_glyph_t-index-set! gly (- i 29))
                    (cairo_glyph_t-x-set! gly (exact->inexact 0))
                    (cairo_glyph_t-y-set! gly (exact->inexact 0))
                    (cairo_glyph_extents context gly 1 ext)
                    (int-array-set! array i (round (cairo_text_extents_t-x_advance-ref ext)))))))
        array)))
  

  (method public (get-text-extent text <Sequence>)
    (with ((extents (cairo_text_extents_t-make))
           (metrics (get-text-metrics)))
      (cairo_text_extents context text extents)
      (new Dimension 
        (round (cairo_text_extents_t-x_advance-ref extents)) 
        (round (cairo_font_extents_t-height-ref metrics)))))
    
  
  (method public (get-font-height)
    (with ((extents (cairo_font_extents_t-make)))
      (cairo_font_extents context extents)
      (round (cairo_font_extents_t-height-ref extents))))
  
  
  (method public (get-text-metrics)
    (let ((info (cairo_font_extents_t-make)))
      (cairo_font_extents context info)
      info))
  
  
  (method public (cairo_extents->dimension extents)
    (new Dimension 
      (ceil (cairo_text_extents_t-width-ref extents)) 
      (ceil (cairo_text_extents_t-height-ref extents))))
  

  (method public (get-text-width text <Sequence>)
    (with ((extents (cairo_text_extents_t-make)))
      (cairo_text_extents context text extents)
      (ceil (cairo_text_extents_t-x_advance-ref extents))))
  
  
  (method public (with-highlight-color color proc)
    (let ((old-color highlight-color))
      (set! highlight-color color)
      (let ((result (proc)))
        (set! highlight-color old-color)
        result)))
      
  
  (method public (draw-text h v str <string> . rest)
    (let ((str (if (string? str) str (coerce-string str)))
          (uph h)
          (font-ext (cairo_font_extents_t-make))
          (extents (cairo_text_extents_t-make))
          (lgt (length str)))
      (if (< array-length lgt)
          (begin
            (if glyph-array
                (free-glyph-array glyph-array))
            (set! glyph-array (alloc-glyph-array (* lgt 2)))
            (set! array-length (* lgt 2))))
      (cairo_font_extents context font-ext)
      (let ((y (+ v (cairo_font_extents_t-ascent-ref font-ext))))
        (let (iterate (i 0))
          (when (< i lgt)
            (let ((glyph (glyph-array-ref glyph-array i))
                  (ch    (- (char->integer (string-ref str i)) 29)))
              (cairo_glyph_t-index-set! glyph (if (< ch 0) 0 ch))
              (cairo_glyph_t-x-set! glyph (exact->inexact uph))
              (cairo_glyph_t-y-set! glyph (exact->inexact y))
              (cairo_glyph_extents (get-context) glyph 1 extents)
              (set! uph (+ uph (cairo_text_extents_t-x_advance-ref extents)))
              (iterate (+ i 1)))))
        @Unimplemented
        (when highlight-color
          (fill-rect (new Rect h y uph (get font-ext 'height)) highlight-color))
        (cairo_show_glyphs context glyph-array lgt)
        (round (- uph h)))))
  
  
  (method public (draw-tabbed-text h v str <Sequence> tab-stops origin)
    (let ((uph h)
          (beginning 0)
          (tab tab-stops))
      (loop (for i from 0 below (length str))
            (when (eq? (element str i) #\tab)
              (when (not (= beginning i))
                (set! uph (+ uph (draw-text uph v (subseq! str beginning i)))))
              (while (<= (+ origin (car tab)) (+ uph 1))
                (set! tab (cdr tab)))
              (set! uph (+ origin (car tab)))
              (set! beginning (+ i 1))
              (set! tab (cdr tab))))
      (- (+ uph (draw-text uph v (subseq! str beginning (length str))))
         h)))
  
  
  (method public (fill-region region <Region> color)
    (loop (for rect in (get-rectangles~ region))
          (do (fill-rect rect color))))
  
  
  (method public (gradient-fill rect <Rect> start end . rest)
    (with-saved-context
      (function dynamic ()
        (let* ((mid (/ (- (get-bottom~ rect) (get-top~ rect)) 2))
               (pattern (cairo_pattern_create_linear (exact->inexact (get-left~ rect)) (exact->inexact mid) (exact->inexact (get-right~ rect)) (exact->inexact mid))))
          (add-color-stop-rgb pattern 0 start)
          (add-color-stop-rgb pattern 1 end)
          (draw-rectangle rect)
          (cairo_set_source context pattern)
          (fill)
          (cairo_pattern_destroy pattern)))))
  
  
  (method public (ellipse rect <Rect> outside inside)
    (with-saved-context
      (function dynamic ()  
        (let ((left (get-left~ rect))
              (right (get-right~ rect))
              (top (get-top~ rect))
              (bottom (get-bottom~ rect)))
          (let ((w (- right left))
                (h (- bottom top)))
            (cairo_translate context (+ left (/ w 2)) (+ top (/ h 2)))
            (cairo_scale context (/ w 2) (/ h 2))
            (cairo_arc context 0 0 1 0 (* 2 M_PI))
            (cairo_scale context (/ 2 w) (/ 2 w))))
        (if outside
            (begin
              (set-color (if (is? outside Color)
                             outside
                           (get-color-for-object outside)))
              (set-line-width (if (and (is? outside Pen) (get-width~ outside))
                                  (get-width~ outside)
                                1))
              (stroke-preserve)))
        (if inside
            (begin
              (set-color (if (is? inside Color)
                             inside
                           (get-color-for-object inside)))
              (fill))))))
  
  
  (method public (draw-image handle h v)
    (with-saved-context
      (function dynamic ()
        (cairo_set_source_surface context handle (exact->inexact h) (exact->inexact v))
        (cairo_paint context))))
  
  
  ;;;
  ;;;; Control
  ;;;
  
  
  (method public (draw-scroll-bar rect <Rect> direction)
    (with-saved-context
      (function dynamic ()
        (draw-rectangle rect)
        (set-color {Color name: Draw-Edge-Light})
        (fill)
        (draw-edge rect inner: 'raised outer: 'raised edges: 'rectangle)
        (let ((dh (cond ((eq? direction 'left) 1)
                        ((eq? direction 'right) 2)
                        ((eq? direction 'up) 1)
                        ((eq? direction 'down) 1)))
              (dv (cond ((eq? direction 'up) 1)
                        ((eq? direction 'down) 1)
                        (else 0))))
          (set-color {Color name: Black})
          (draw-arrow-tip (+ (get-left~ rect) 3 dh) (+ (get-top~ rect) 4 dv) 3 direction)))))
   
  
  (method public (draw-caption rect <Rect> type (pushed? false))
    (with-saved-context
      (function dynamic ()
        (draw-rectangle rect)
        (set-color {Color name: Draw-Edge-Light})
        (fill)
        (if pushed?
            (begin
              (draw-edge rect inner: 'sunken edges: 'rectangle)
              (draw-edge (new Rect (+ (get-left~ rect) 1) (+ (get-top~ rect) 1) (- (get-right~ rect) 1) (- (get-bottom~ rect) 1)) outer: 'sunken edges: 'rectangle))
          (draw-edge rect inner: 'raised outer: 'raised edges: 'rectangle))
        (set-color {Color name: Black})
        (let ((rect (if pushed? (new Rect (+ (get-left~ rect) 1) (+ (get-top~ rect) 1) (+ (get-right~ rect) 1) (+ (get-bottom~ rect) 1)) rect)))
          (cond ((eq? type 'close)
                 (set-line-width 1)
                 (move-to (+ (get-left~ rect) 4) (+ (get-top~ rect) 3))
                 (line-to (- (get-right~ rect) 4) (- (get-bottom~ rect) 4))
                 (move-to (- (get-right~ rect) 4) (+ (get-top~ rect) 3))
                 (line-to (+ (get-left~ rect) 4) (- (get-bottom~ rect) 4))
                 (stroke))
                ((eq? type 'minimize)
                 (set-line-width 1)
                 (move-to (+ (get-left~ rect) 4) (- (get-bottom~ rect) 5))
                 (line-to (- (get-right~ rect) 6) (- (get-bottom~ rect) 5))
                 (move-to (+ (get-left~ rect) 4) (- (get-bottom~ rect) 4))
                 (line-to (- (get-right~ rect) 6) (- (get-bottom~ rect) 4))
                 (stroke))
                ((eq? type 'restore)
                 (set-line-width 1)
                 (move-to (+ (get-left~ rect) 3) (- (get-bottom~ rect) 3 0.5))
                 (line-to-rel 5.5 0)
                 (line-to-rel 0 -4)
                 (line-to-rel -5.5 0)
                 (move-to-rel 0 -1)
                 (line-to-rel 6 0)
                 (move-to-rel -5.5 0)
                 (line-to-rel 0 5)
                 (move-to (+ (get-left~ rect) 8) (- (get-bottom~ rect) 6 0.5))
                 (line-to-rel 2.5 0)
                 (line-to-rel 0 -4)
                 (line-to-rel -5.5 0)
                 (move-to-rel 0 -1)
                 (line-to-rel 6 0)
                 (move-to-rel -5.5 0)
                 (line-to-rel 0 3)             
                 (stroke))
                ((eq? type 'maximize)
                 (move-to (+ (get-left~ rect) 3) (- (get-bottom~ rect) 3 0.5))
                 (line-to-rel 8.5 0)
                 (line-to-rel 0 -7)
                 (line-to-rel -8.5 0)
                 (move-to-rel 0 -1)
                 (line-to-rel 9 0)
                 (move-to-rel -8.5 0)
                 (line-to-rel 0 7.5)
                 (stroke)))))))
  
  
  (method public (draw-radio-button rect <Rect> (inactive?: inactive? false) (selected?: selected? false))
    (with-saved-context
      (function dynamic ()
        (let ((x (+ (get-left~ rect) (/ (- (get-right~ rect) (get-left~ rect)) 2)))
              (y (+ (get-top~ rect) (/ (- (get-bottom~ rect) (get-top~ rect)) 2)))
              (r (/ (- (get-right~ rect) (get-left~ rect)) 2)))
          (cairo_arc context x y r 0 (* 2 M_PI))
          (set-color (if inactive? 
                         {Color name: Light-Background}
                       {Color name: White}))
          (fill)
          (set-line-width 1)
          (cairo_arc context x y r (* 3 (/ M_PI 4)) (* 7 (/ M_PI 4)))
          (set-color {Color name: Draw-Edge-Medium})
          (stroke)
          (cairo_arc context x y (- r 1) (* 3 (/ M_PI 4)) (* 7 (/ M_PI 4)))
          (set-color {Color name: Draw-Edge-Dark})
          (stroke)
          (cairo_arc context x y r (* 7 (/ M_PI 4)) (* 3 (/ M_PI 4)))
          (set-color {Color name: White})
          (stroke)
          (cairo_arc context x y (- r 1) (* 7 (/ M_PI 4)) (* 3 (/ M_PI 4)))
          (set-color {Color name: Draw-Edge-Light})
          (stroke)
          (when selected?
            (cairo_arc context x y (/ r 3) 0 (* 2 M_PI))
            (set-color {Color name: Black})
            (fill))))))
  
  
  (method public (draw-push-button rect <Rect> (pushed? false))
    (with-saved-context
      (function dynamic ()
        (set-line-width 1)
        (if pushed?
            (begin
              (set-color {Color name: Draw-Edge-Dark})
              (line (get-left~ rect) (get-top~ rect) (- (get-right~ rect) 1) (get-top~ rect))
              (line (get-left~ rect) (get-top~ rect) (get-left~ rect) (- (get-bottom~ rect) 1))
              (set-color {Color name: Draw-Edge-Medium})
              (line (+ (get-left~ rect) 1) (+ (get-top~ rect) 1) (- (get-right~ rect) 2) (+ (get-top~ rect) 1))
              (line (+ (get-left~ rect) 1) (+ (get-left~ rect) 1) (+ (get-left~ rect) 1) (- (get-bottom~ rect) 2))
              (set-color {Color name: White})
              (line (- (get-right~ rect) 1) (get-top~ rect) (- (get-right~ rect) 1) (get-bottom~ rect))
              (line (- (get-right~ rect) 1) (- (get-bottom~ rect) 1) (get-left~ rect) (- (get-bottom~ rect) 1)))
          (set-color {Color name: White})
          (move-to (get-left~ rect) (- (get-bottom~ rect) 1))
          (line-to-no-stroke (get-left~ rect) (get-top~ rect))
          (line-to-no-stroke (- (get-right~ rect) 1) (get-top~ rect))
          (stroke)
          (set-line-width 1)
          (set-color {Color name: Draw-Edge-Dark})
          (line (- (get-right~ rect) 1) (get-top~ rect) (- (get-right~ rect) 1) (get-bottom~ rect))
          (line (- (get-right~ rect) 1) (- (get-bottom~ rect) 1) (get-left~ rect) (- (get-bottom~ rect) 1))
          (set-color {Color name: Draw-Edge-Medium})
          (line (- (get-right~ rect) 2) (+ (get-top~ rect) 1) (- (get-right~ rect) 2) (- (get-bottom~ rect) 1))
          (line (- (get-right~ rect) 2) (- (get-bottom~ rect) 2) (+ (get-left~ rect) 1) (- (get-bottom~ rect) 2))))))
     
  
  ;;;
  ;;;; Bliting
  ;;;
  
  
  (method public (bit-blit dest-dc <Cairo-Win32-Surface>
                           (position: position {Point 0 0})
                           (size: size 'tofix)
                           (destination: destination {Point 0 0})
                           (destination-size: destination-size {}))
    (let ((dest-context (get-context~ dest-dc)))
      (cairo_save dest-context)
      (cairo_set_source_surface dest-context (get-surface) (exact->inexact (get-h~ destination)) (exact->inexact (get-v~ destination)))
      (paint~ dest-dc)
      (cairo_restore dest-context)))
  
  
  ;;;
  ;;;; Select Object
  ;;;
  
  
  (method public (set-font font <Font>)
    (cairo_set_font_face context (get-cairo-font~ font))
    (cairo_set_font_size context (exact->inexact (/ (* (get-point-size~ font) 96) 72))))
  
  
  (method public (set-pen pen <Pen>)
    (set-line-width (get-width~ pen))
    (set-color (get-color~ pen)))
  
  
  (method public (draw-edge rect <Rect> (edges: edges 'rectangle) (inner: inner {}) (outer: outer {}))
    (let ((edges (if (eq? edges 'rectangle) '(left right top bottom) edges)))
      (with-saved-context
        (function dynamic ()
          (set-line-width 1)
          (when (memq? 'top edges)
            (cond ((eq? inner 'raised)
                   (set-color {Color name: White})
                   (if outer                
                       (line (get-left~ rect) (+ (get-top~ rect) 1) (get-right~ rect) (+ (get-top~ rect) 1))
                     (line (get-left~ rect) (get-top~ rect) (get-right~ rect) (get-top~ rect))))
                  ((eq? inner 'sunken)
                   (set-color {Color name: Draw-Edge-Dark})
                   (if outer                
                       (line (get-left~ rect) (+ (get-top~ rect) 1) (get-right~ rect) (+ (get-top~ rect) 1))
                     (line (get-left~ rect) (get-top~ rect) (get-right~ rect) (get-top~ rect))))))
          (when (memq? 'left edges)
            (cond ((eq? inner 'raised)
                   (set-color {Color name: White})
                   (if outer                
                       (line (+ (get-left~ rect) 1) (get-top~ rect) (+ (get-left~ rect) 1) (get-bottom~ rect))
                     (line (get-left~ rect) (get-top~ rect) (get-left~ rect) (get-bottom~ rect))))
                  ((eq? inner 'sunken)
                   (set-color {Color name: Draw-Edge-Dark})
                   (if outer                
                       (line (+ (get-left~ rect) 1) (get-top~ rect) (+ (get-left~ rect) 1) (get-bottom~ rect))
                     (line (get-left~ rect) (get-top~ rect) (get-left~ rect) (get-bottom~ rect))))))
          (when (memq? 'right edges)
            (cond ((eq? inner 'raised)
                   (set-color {Color name: Draw-Edge-Medium})
                   (if outer                
                       (line (- (get-right~ rect) 2) (get-top~ rect) (- (get-right~ rect) 2) (get-bottom~ rect))
                     (line (- (get-right~ rect) 1) (get-top~ rect) (- (get-right~ rect) 1) (get-bottom~ rect))))
                  ((eq? inner 'sunken)
                   (set-color (new Color red: 241 green: 239 blue: 226))
                   (if outer               
                       (line (- (get-right~ rect) 2) (get-top~ rect) (- (get-right~ rect) 2) (get-bottom~ rect))
                     (line (- (get-right~ rect) 1) (get-top~ rect) (- (get-right~ rect) 1) (get-bottom~ rect))))))
          (when (memq? 'bottom edges)
            (cond ((eq? inner 'raised)
                   (set-color {Color name: Draw-Edge-Medium})
                   (if outer                
                       (line (get-left~ rect) (- (get-bottom~ rect) 2) (get-right~ rect) (- (get-bottom~ rect) 2))
                     (line (get-left~ rect) (- (get-bottom~ rect) 1) (get-right~ rect) (- (get-bottom~ rect) 1))))
                  ((eq? inner 'sunken)
                   (set-color {Color name: Draw-Edge-Light})
                   (if outer                
                       (line (get-left~ rect) (- (get-bottom~ rect) 2) (get-right~ rect) (- (get-bottom~ rect) 2))
                     (line (get-left~ rect) (- (get-bottom~ rect) 1) (get-right~ rect) (- (get-bottom~ rect) 1))))))
          (when (memq? 'top edges)
            (cond ((eq? outer 'raised)
                   (set-color {Color name: Draw-Edge-Light})
                   (line (get-left~ rect) (get-top~ rect) (get-right~ rect) (get-top~ rect)))
                  ((eq? outer 'sunken)
                   (set-color {Color name: Draw-Edge-Medium})
                   (line (get-left~ rect) (get-top~ rect) (get-right~ rect) (get-top~ rect)))))
          (when (memq? 'left edges)
            (cond ((eq? outer 'raised)
                   (set-color {Color name: Draw-Edge-Light})
                   (line (get-left~ rect) (get-top~ rect) (get-left~ rect) (get-bottom~ rect)))
                  ((eq? outer 'sunken)
                   (set-color {Color name: Draw-Edge-Medium})
                   (line (get-left~ rect) (get-top~ rect) (get-left~ rect) (get-bottom~ rect)))))
          (when (memq? 'right edges)
            (cond ((eq? outer 'raised)
                   (set-color {Color name: Draw-Edge-Dark})
                   (line (- (get-right~ rect) 1) (get-top~ rect) (- (get-right~ rect) 1) (get-bottom~ rect)))
                  ((eq? outer 'sunken)
                   (set-color {Color name: White})
                   (line (- (get-right~ rect) 1) (get-top~ rect) (- (get-right~ rect) 1) (get-bottom~ rect)))))
          (when (memq? 'bottom edges)
            (cond ((eq? outer 'raised)
                   (set-color {Color name: Draw-Edge-Dark})
                   (line (get-left~ rect) (- (get-bottom~ rect) 1) (get-right~ rect) (- (get-bottom~ rect) 1)))
                  ((eq? outer 'sunken)
                   (set-color {Color name: White})
                   (line (get-left~ rect) (- (get-bottom~ rect) 1) (get-right~ rect) (- (get-bottom~ rect) 1)))))))))
  

  (method public (fill-rect rect <Rect> color)
    (with-saved-context
      (function dynamic ()
        (set-color color)
        (draw-rectangle rect)
        (fill))))
        
  
  (method public (draw-check h <fx> v <fx>)
    (line (+ h 0) (+ v 2) (+ h 0) (+ v 5))
    (line (+ h 1) (+ v 3) (+ h 1) (+ v 6))
    (line (+ h 2) (+ v 4) (+ h 2) (+ v 7))
    (line (+ h 3) (+ v 3) (+ h 3) (+ v 6))
    (line (+ h 4) (+ v 2) (+ h 4) (+ v 5))
    (line (+ h 5) (+ v 1) (+ h 5) (+ v 4))
    (line (+ h 6) (+ v 0) (+ h 6) (+ v 3))
    (stroke))
  
  
  (method public (draw-raised rect <Rect>)
    (with-saved-context
      (function dynamic ()
        (set-pen (new Pen color: {Color name: Light-Background}))
        (move-to (get-left~ rect) (- (get-bottom~ rect) 1))
        (line-to-no-stroke (get-left~ rect) (get-top~ rect))
        (line-to-no-stroke (- (get-right~ rect) 1) (get-top~ rect))
        (stroke)
        (set-pen (new Pen color: {Color name: Dark}))
        (move-to (- (get-right~ rect) 1) (get-top~ rect))
        (line-to-no-stroke (- (get-right~ rect) 1) (- (get-bottom~ rect) 1))
        (line-to (get-left~ rect) (- (get-bottom~ rect) 1)))))
  
  
  (method public (draw-arrow-tip h <fx> v <fx> size direction)
    (with-saved-context
      (function dynamic ()
        (set-line-width 1)
        (case direction
          ((up)
           (let ((width (- (+ size size) 1)))
             (increase! v (- size 1))
             (for-each (function dynamic (n)
                         (line h v (+ h width) v)
                         (increase! h)
                         (decrease! v)
                         (decrease! width 2))
                       (naturals 0 size))))
          ((down)
           (let ((width (- (+ size size) 1)))
             (for-each (function dynamic (n)
                         (line h v (+ h width) v)
                         (increase! h)
                         (increase! v)
                         (decrease! width 2))
                       (naturals 0 size))))
          ((left)
           (let ((height (- (+ size size) 1)))
             (increase! h (- size 1))
             (for-each (function dynamic (n)
                         (line h v h (+ v height))
                         (decrease! h)
                         (increase! v)
                         (decrease! height 2))
                       (naturals 0 size))))
          ((right)
           (let ((height (- (+ size size) 1)))
             (for-each (function dynamic (n)
                         (line h v h (+ v height))
                         (increase! h)
                         (increase! v)
                         (decrease! height 2))
                       (naturals 0 size))))))))
  
  
  (method (with-outside/inside outside inside procedure)
    (with-saved-context
      (function dynamic ()
        (procedure)
        (if outside
            (begin
              (set-color (if (is? outside Color)
                             outside
                           (get-color-for-object outside)))
              (set-line-width (if (and (is? outside Pen) (get-width~ outside))
                                  (get-width~ outside)
                                1))
              (stroke-preserve)))
        (if inside
            (begin
              (set-color (if (is? inside Color)
                             inside
                           (get-color-for-object inside)))
              (fill))))))
  
  
  (method public (frame-rect rect <Rect> color)
    (with-saved-context
      (function dynamic ()
        (set-line-width 1)
        (set-color color)
        (draw-rectangle 
          (new Rect 
            (+ (get-left~ rect) 0.5)
            (+ (get-top~ rect) 0.5)
            (- (get-right~ rect) 0.5)
            (- (get-bottom~ rect) 0.5)))
        (stroke))))
  
  
  (method public (rectangle rect <Rect> outside inside)
    (with-outside/inside outside inside
      (function dynamic ()
        (draw-rectangle rect))))
  
  
  ;;;
  ;;;; Utilities
  ;;;
  
  
  (method public (get-color-for-object object)
    (cond
      ((is? object Pen)
       (let ((color (get-color~ object)))
         (if (not color)
             (eval-symbol (get-name~ object) Color)
           color)))))
  
  
  ;;;
  ;;;; Cairo Primitives
  ;;;
  
  
  (method public (move-to h v)
    (cairo_move_to context (exact->inexact h) (exact->inexact v)))
  
  
  (method public (line-to h v)
    (line-to-no-stroke (exact->inexact h) (exact->inexact v))
    (stroke))
  
  
  (method public (line-to-preserve h v)
    (line-to-no-stroke (exact->inexact h) (exact->inexact v))
    (stroke-preserve))
  

  (method public (line-to-no-stroke h v)
    (let* ((pt (cairo_current_point context))
           (cur-h (get-point-x pt))
           (cur-v (get-point-y pt)))
      (let ((h (if (= cur-h h)
                   (begin
                     (move-to (+ cur-h 0.5) cur-v) 
                     (+ h 0.5))
                 h))
            (v (if (= cur-v v)
                   (begin
                     (move-to cur-h (+ cur-v 0.5))
                     (+ v 0.5))
                 v)))
        (cairo_line_to context (exact->inexact h) (exact->inexact v)))))
  
  
  (method public (line-to-rel dh dv)
    (cairo_rel_line_to context (exact->inexact dh) (exact->inexact dv)))
  
  
  (method public (move-to-rel dh dv)
    (cairo_rel_move_to context (exact->inexact dh) (exact->inexact dv)))
  
  
  (method public (line h v dest-h dest-v)
    (move-to h v)
    (line-to dest-h dest-v))
  
  
  (method public (pixel-to h v)
    (move-to h v)
    (line-to (+ h 1) v))
  
  
  (method public (set-line-width w)
    (cairo_set_line_width context (exact->inexact w)))
  
  
  (method public (get-line-width)
    (cairo_get_line_width context))
  
  
  (method public (set-color-alpha r g b a)
    (cairo_set_source_rgba context r g b a))
  
  
  (method public (stroke)
    (cairo_stroke context))
  
  
  (method public (stroke-preserve)
    (cairo_stroke_preserve context))
  
  
  (method public (paint)
    (cairo_paint context))
  
  
  (method public (fill)
    (cairo_fill context))
  
  
  (method public (draw-rectangle rect <Rect>)
    (let ((x (get-left~ rect))
          (y (get-top~ rect))
          (w (- (get-right~ rect) (get-left~ rect)))
          (h (- (get-bottom~ rect) (get-top~ rect))))
      (cairo_rectangle context
                      (exact->inexact x)
                      (exact->inexact y)
                      (exact->inexact w)
                      (exact->inexact h))))
  
  
  (method public (set-color color <Color>)    
    (let ((r (/ (get-red~ color) 255.0))
          (g (/ (get-green~ color) 255.0))
          (b (/ (get-blue~ color) 255.0)))  
      (cairo_set_source_rgb context 
                            (exact->inexact r) 
                            (exact->inexact g) 
                            (exact->inexact b))))
  
  
  (method (add-color-stop-rgb pattern offset color)
    (let ((red (/ (get-red~ color) 255))
          (green (/ (get-green~ color) 255))
          (blue (/ (get-blue~ color) 255)))
      (cairo_pattern_add_color_stop_rgb pattern (exact->inexact offset) (exact->inexact red) (exact->inexact green) (exact->inexact blue))))
  
  
  (method public (cairo-status)
    (cairo_status context))
  
  
  (method public (cairo-surface-status)
    (cairo_surface_status surface))))
