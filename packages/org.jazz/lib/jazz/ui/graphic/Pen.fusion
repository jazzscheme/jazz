;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Pens
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2007
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.ui.graphic.Pen jazz


(import (jazz.literals)
        (jazz.ui)
        (jazz.library))


(class Pen extends Object
  
  
  (slot name   initialize {})
  (slot width  initialize {})
  (slot color  initialize {})
  (slot style  initialize {})
  
  
  (method (initialize . rest)
    (bind-keywords ((name {}) (style 'solid) (width 1) (color {})) rest
      (nextmethod)
      (set! [name self] name)
      (set! [color self] color)
      (set! [width self] width)
      (set! [style self] style)))
  
  
  (method (print printer readably)
    (if name
        (format printer "~{{a} name: {s}}" (identifier-name (type-name (class-of self))) name)
      (print-unreadable self printer
        (function dynamic (printer)
          (format printer ":width {s}" width)
          (when color
            (format printer " :color {s}" color))))))
  

  (method public (get-name)
    name)
  

  (method public (get-style)
    style)

  
  (method public (get-width)
    width)
  
  
  (method public (get-color)
    color)


  ;;;
  ;;;; Present
  ;;;
  
  
  @to-convert
  (method meta public (parse-string string)
    (if (empty-string? string)
        {}
      (let* ((lst (read-string-content string))
             (len (length lst))
             (err (function dynamic () (signal (new Convertion-Error :object string :type self)))))
        (if (and (= len 1) (symbol? (car lst)))
            (eval-symbol (car lst) self)
          (err)))))
  
  
  (method public (present)
    (if name
        (->string name)
      (unimplemented 'present)))))
