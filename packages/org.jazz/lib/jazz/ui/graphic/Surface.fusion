;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Device Context
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2007
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.ui.graphic.Surface jazz


(import (jazz.ui)
        (jazz.library)
        (jazz.utilities))


;; origin  -> origin used by the view painting algorithm
;; clipper -> clip rectangle used by the view painting algorithm


(class Surface extends Object uses (Cairo Language Utilities System Windows WinDef WinUser WinGDI WinImg)
 
  (method virtual public (get-hdc))
      
  
  ;;;
  ;;;; Device
  ;;;


  (method virtual public (logical->device shape <Object>)
    )


  (method virtual public (device->logical shape <Object>)
    )

      
  ;;;
  ;;;; Clipping
  ;;;
  
  
  
  (method virtual public (setup-clipper clipper <Rect>)
    )
  
  
  (method virtual public (get-clipper)
    )
  
  ;; We create a rectangular path from the rectangle.
  (method virtual public (set-clipper rect <Rect>)
    )
    
  ;; Nouveau select clipper
  (method virtual public (select-clipper rect <Rect>)
    )
  
  ;; Refaire avec les primitives : clipper save, etc.
  (method virtual public (with-clipper clip-rect <Rect> proc <Procedure>)
    )

  
  
  ;;;
  ;;;; Landscape
  ;;;
  
  
  (method virtual public (with-landscape rotation page proc)
    )
  
  
  ;;;
  ;;;; Transform
  ;;;
  
  
  ;; lh lv : position of the drawing relative to the player
  ;; sh sv : position of the scaled view relative to the player
  ;; dh dv : position of the drawing relative to the scaled view, i.e. s - l
  ;; ch cv : position of the clipper in device coordinates
  ;; cwidth cheight : size of the clipper in device coordinates
  
  
  (method virtual public (with-transform drawing <Drawing> lh <int> lv <int> width <int> height <int> sh <int> sv <int> sc <Real> sc? <bool> proc <Procedure>)
    )
  
  
  ;;;
  ;;;; World
  ;;;
  
  
  (method virtual public (with-world proc)
    )
  
  
  ;;;
  ;;;; Caps
  ;;;
  
  
  (method virtual public (get-caps index <int>)
    )
  
  
  ;;;
  ;;;; Mode
  ;;;

  @Not-used
  (method virtual public (get-graphics-mode)
    )

  @Not-used
  (method virtual public (set-graphics-mode mode <int>)
    )

  @Not-used
  (method virtual public (get-map-mode)
    )

  
  ;;;
  ;;;; Drawing
  ;;;


  (method virtual public (select-object object)
    )


  (method virtual public (set-rop mode <int>)
    )


  (method virtual public (set-text-color color <Color>)
    )
  
  
  (method virtual public (get-text-metrics)
    )
  
  
  (method virtual public (get-text-extent text <Sequence>)
    )
  
  
  (method virtual public (get-text-width text <Sequence>)
    )

  
  (method virtual public (get-char-widths . rest)
    )


  (method virtual public (move-to h <int> v <int>)
    )


  (method virtual public (line-to h <int> v <int>)
    )
  
  
  (method virtual public (line h <int> v <int> dest-h <int> dest-v <int>)
    )
  
  
  (method virtual public (pixel-to h <int> v <int>)
    )
  
  
  (method virtual public (draw-raised rect <Rect>)
    )
  
  
  (method virtual public (draw-edge rect <Rect> edge <int> flags <int>)
    )


  (method virtual public (rectangle rect <Rect> outside inside)
    )


  (method virtual public (round-rect rect <Rect> width height outside inside)
    )


  (method virtual public (frame-rect rect <Rect> brush/color)
    )
  
  
  (method virtual public (frame-rect-thin rect pen)
    )


  (method virtual public (fill-rect rect <Rect> brush/color)
    )


  (method virtual public (fill-region region <Region> brush/color)
    )
  
  
  (method virtual public (gradient-fill rect <Rect> start end . rest)
    )


  (method virtual public (ellipse rect <Rect> outside inside)
    )
  
  (method virtual public (draw-text h v string <String> . rest)
    )


  (method virtual public (draw-tabbed-text h v string <Sequence> tab-stops origin)
    )
  
  
  (method virtual public (draw-image context h <int> v <int> image)
    )
  
  
  (method virtual public (draw-state h <int> v <int> text)
    )
  
  
  (method virtual public (draw-check h <int> v <int>)
    )
  
  
  ;; Let Alain unify this one for a change!
  (method virtual public (draw-arrow-tip h <int> v <int> size direction)
    )
  
  
  (method virtual public (draw-colored-overlay width height color transparency)
    )
  
  
  ;;;
  ;;;; Printing
  ;;;
  
  
  (method virtual public (start-doc rec)
    )
  
  
  (method virtual public (end-doc)
    )
  
  
  (method virtual public (start-page)
    )
  
  
  (method virtual public (end-page)
    )
  
  
  ;;;
  ;;;; Control
  ;;;
  
  
  (method virtual public (draw-control-part rect <Rect> type state)
    )
  
  
  ;;;
  ;;;; Bliting
  ;;;


  (method public virtual (get-size)
    )


  (method virtual public (bit-blit dest-dc <Surface> . rest)
    )
  
  ))