;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; IDE Text View
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2007
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.ui.ide.IDE-Text-View jazz


(import (jazz.jazz)
        (jazz.jml)
        (jazz.library)
        (jazz.literals)
        (jazz.platform)
        (jazz.sql)
        (jazz.ui)
        (jazz.utilities))


(class IDE-Text-View extends Code-Text-View


  (property context initialize {} getter get-context setter set-context)
  
  
  (form
    (<install> default-style: {Text-Style name: Default :font {Font name: Ansi-Var}}))

  
  ;;;
  ;;;; Access
  ;;;


  (method (get-context)
    (if (not context)
        (list (get-catalog-context~ syntax))
      (list context)))


  (method public (set-context value)
    (set! context value))

  
  ;;;
  ;;;; Context
  ;;;
  
  
  (method (catalog-context)
    (either context (get-catalog-context~ syntax)))

  
  ;;;
  ;;;; Preferences
  ;;;
  
  
  (method (jazz-preferences)
    (get-preferences '(documents jazz-text)))
  
  
  (method (cpp/java-preferences)
    (get-preferences '(documents java-text)))
  
  
  (method (sql-preferences)
    (get-preferences '(documents sql-text)))
   
  
  ;;;
  ;;;; History
  ;;;
  
  
  (method (current-history-item)
    nil)


  ;;;
  ;;;; Explorer
  ;;;


  (method (explorer-class)
    (case (catalog-context)
      ((jazz) Jazz-Explorer)
      ((cpp/java) CppJava-Explorer)
      @wait
      ((sql) SQL-Explorer)
      (else (nextmethod))))
   

  ;;;
  ;;;; Expr
  ;;;


  (method (expr-at pos)
    (case (catalog-context)
      ((jazz) (read-string-element (get-string (jazz-expr-range pos))))
      ((cpp/java) (cpp/java-name-at (cpp/java-expr-range pos)))
      ((sql) (sql-name-at (sql-expr-range pos)))))
  
  
  (method (expr-range pos)
    (case (catalog-context)
      ((jazz) (jazz-expr-range pos))
      ((cpp/java) (cpp/java-expr-range pos))
      ((sql) (sql-expr-range pos))))


  (method (current-expr)
    (case (catalog-context)
      ((jazz) (current-jazz-expr))
      ((cpp/java) (current-cpp/java-expr))
      ((sql) (current-sql-expr))))
   

  ;;;
  ;;;; Jazz
  ;;;


  (method (current-jazz-expr)
    (let ((range (current-jazz-expr-range)))
      (when range
        (read-string-element (get-string range)))))
  
  
  (method protected (current-jazz-symbol)
    (let ((expr (current-jazz-expr)))
      (when (symbol? expr)
        expr)))
  
  
  (method (current-jazz-expr-range)
    (if (and (not completion-active?) (has-selection?))
        (get-selection)
      (jazz-expr-range (get-end))))
  
  
  (method (jazz-expr-range pos)
    (let ((expl (new Jazz-Explorer self :start pos :end pos)))
      (outer-expr~ expl)
      (get-range~ expl)))
   

  ;;;
  ;;;; C++/Java
  ;;;


  (method (current-cpp/java-expr)
    (current-cpp/java-name))


  (method (current-cpp/java-name)
    (cpp/java-name-at (cpp/java-current-expr-range)))
  
  
  (method (cpp/java-current-expr-range)
    (if (and (not completion-active?) (has-selection?))
        (get-selection)
      (cpp/java-expr-range (get-end))))
  
  
  (method (cpp/java-expr-range pos)
    (let ((expl (new CppJava-Explorer self :start pos :end pos)))
      (outer-expr~ expl)
      (get-range~ expl)))
  
  
  (method (cpp/java-name-at range)
    (when range
      (let ((name (get-string range)))
        (if (= (element name 0) #\open-brace)
            (read-string-element name)
          name))))
   

  ;;;
  ;;;; SQL
  ;;;


  (method (current-sql-expr)
    (current-sql-name))


  (method (current-sql-name)
    (sql-name-at (sql-current-expr-range)))
  
  
  (method (sql-current-expr-range)
    (if (and (not completion-active?) (has-selection?))
        (get-selection)
      (sql-expr-range (get-end))))
  
  
  (method (sql-expr-range pos)
    (unimplemented 'sql-expr-range)
    @wait
    (let ((expl (new SQL-Explorer self :start pos :end pos)))
      (outer-expr~ expl)
      (get-range~ expl)))
  
  
  (method (sql-name-at range)
    (when range
      (let ((name (get-string range)))
        (if (= (element name 0) #\open-brace)
            (read-string-element name)
          name))))
  
  
  ;;;
  ;;;; Translation
  ;;;
  
  
  (method (translate-key key)
    key
    @convert
    (case (catalog-context)
      ((jazz) (translate-jazz-key key))
      (else key)))

  
  ;;;
  ;;;; Completion
  ;;;


  (method (favorite-completions)
    (case (catalog-context)
      ((jazz) (get-completions~ (jazz-preferences)))
      ((cpp/java) (get-completions~ (cpp/java-preferences)))
      ((sql) (get-completions~ (sql-preferences)))
      (else (nextmethod))))

  
  ;;;
  ;;;; Coloring
  ;;;
  
  
  (method (colorize-syntax . rest)
    )
  
  
  (method (recolorize-text start end-row)
    )


  ;;;
  ;;;; Match
  ;;;
  
  
  (method (flash-character? char)
    (case (catalog-context)
      ((jazz) (memq? char '(#\close-parenthesis #\close-bracket #\close-brace)))
      (else (nextmethod char))))

  
  ;;;
  ;;;; Menu
  ;;;


  (method (context-menu pos)
    (bind-values (shift? control? alt?) (modifiers-down)
      (let ((definition? (and (not control?) shift? (not alt?)))
            (references? (and control? shift? (not alt?))))
        (when (or definition? references?)
          (context-menu-click pos))
        (cond (definition? (edit-definition pos))
              (references? (edit-references pos))
              (else (nextmethod pos))))))
  
  
  (method (get-context-menu)
    (new-text-context-menu))))
