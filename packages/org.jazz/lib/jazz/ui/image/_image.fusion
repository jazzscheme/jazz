;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Image Definitions
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Stephane Le Cornec.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2006
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.

(library jazz.ui.image jazz

(import (jazz.ui)
        (jazz.library)
        (jazz.utilities)
        (jazz.platform)
        (jazz.platform.windows)
        (jazz.platform.cairo.cairo-win32)
        (jazz.literals))


(definition public (load-image type image . rest)
  (case type
    ((bitmap)  
     (let* ((image (if (resource? image) (find-bitmap-file image) image))
            (ident (parse~ image)))
       (cairo_image_surface_create_from_png ident)))
    ((icon)
     (let* ((image (cond ((integer? image) (find-icon-file {Icon-Resource "Jedi"}))
                         ((resource? image) (find-icon-file image))
                         (else image)))
            (ident (parse~ image)))
       (cairo_image_surface_create_from_png ident)))
    @old-code-now-in-platform
    ((cursor)
     (let* ((module (if (resource? image) (current-instance) NULL))
            (ident  (if (file? image) (parse~ image) (int-resource image)))
            (flags  (bit-or (if (file? image) LR_LOADFROMFILE LR_SHARED))))
       (LoadImage module ident IMAGE_CURSOR width height flags)))))
  

(definition public (find-bitmap-file object)
  ;; quickie
  (new File (list 'Native "C:" "Jazz" "dev" "jazz" "packages" "org.jazz" "lib" "jazz" "Resources" "Bitmaps" (string-append (get-name~ object) ".png")))
  @tofix
  (let ((workbench (get-workbench)))
    (if workbench
        (get-bitmap~ workbench object)
      (get-manifest-resource 'bitmap (get-name~ object)))))


(definition public (find-icon-file object)
  ;; quickie
  (new File (list 'Native "C:" "Jazz" "dev" "jazz" "packages" "org.jazz" "lib" "jazz" "Resources" "Icons" (string-append (get-name~ object) ".png")))
  @tofix
  (let ((workbench (get-workbench)))
    (if workbench
        (get-icon~ workbench (get-name~ object))
      (get-manifest-resource 'icon (get-name~ object))))))