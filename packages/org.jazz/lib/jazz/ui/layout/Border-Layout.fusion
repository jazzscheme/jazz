;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Border Layout
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2007
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.ui.layout.Border-Layout jazz


(import (jazz.ui)
        (jazz.library)
        (jazz.utilities))


(class Border-Layout extends Layout


  (method (layout figures width height . rest)
    (bind-keywords ((insets {Rect 0 0 0 0})) rest
      (let* ((visibles (collect-if (function dynamic (figure) (and (is? figure Figure) (get-visible?~ figure))) figures))
             (reversed (reverse visibles))
             (docked   reversed)
             (left     0)
             (top      0)
             (right    width)
             (bottom   height))
        (for-each (function dynamic (figure)
                    (when (= (get-location~ figure) 'north)
                      (let ((height [height (get-size~ figure)]))
                        (set-position~ figure (new Point 0 top))
                        (set-size~ figure (new Dimension right height))
                        (increase! top height))))
                  docked)
        (for-each (function dynamic (figure)
                    (when (= (get-location~ figure) 'south)
                      (let ((height [height (get-size~ figure)]))
                        (set-position~ figure (new Point 0 (- bottom height)))
                        (set-size~ figure (new Dimension right height))
                        (decrease! bottom height))))
                  docked)
        (for-each (function dynamic (figure)
                    (when (= (get-location~ figure) 'west)
                      (let ((width [width (get-size~ figure)]))
                        (set-position~ figure (new Point left top))
                        (set-size~ figure (new Dimension width (- bottom top)))
                        (increase! left width))))
                  docked)
        (for-each (function dynamic (figure)
                    (when (= (get-location~ figure) 'east)
                      (let ((width [width (get-size~ figure)]))
                        (set-position~ figure (new Point (- right width) top))
                        (set-size~ figure (new Dimension width (- bottom top)))
                        (decrease! right width))))
                  docked)
        (for-each (function dynamic (figure)
                    (when (= (get-location~ figure) 'center)
                      (let ((left (+ left [left insets]))
                            (top (+ top [top insets])))
                      (set-position~ figure (new Point left top))
                      (set-size~ figure (new Dimension (- right left [right insets]) (- bottom top [bottom insets]))))))
                  reversed))))))
