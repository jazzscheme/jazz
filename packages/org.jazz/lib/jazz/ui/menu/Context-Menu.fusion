;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Context Menus
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2007
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.ui.menu.Context-Menu jazz


(import (jazz.ui)
        (jazz.library)
        (jazz.utilities))


(class Context-Menu extends Menu


  ;;;
  ;;;; Condensed list
  ;;;
  
  
  (method public (make-condensed-menu user-items create-leaf (key: key identity) (max-leafs: max-leafs 15))
    (let ((top-menu self)
          (sections (collect-sections user-items))
          (first? true))
      (for-each (function dynamic (section)
                  (if first?
                      (set! first? false)
                    (new Separator-Item parent: self))
                  (condense-section section create-leaf key max-leafs))
                sections)
      (layout-menu)))
  
  
  (method (condense-section user-items create-leaf key max-leafs)
    (let ((top-menu self)
          (values-tree (create-tree (sort < (map (function dynamic (user-item)
                                                   (list user-item (key user-item)))
                                                 user-items)
                                          key: second)
                                    :max-leafs max-leafs)))
      (letrec ((proc (function dynamic (items menu)
                       (for-each (function dynamic (item)
                                   (bind (value string . rest) item
                                     (cond ((null? rest)
                                            (create-leaf value string menu))
                                           ((= value :leafs)
                                            (for-each (function dynamic (item)
                                                        (bind (value string) item
                                                          (create-leaf value string menu)))
                                                      (car rest)))
                                           (else
                                            (let* ((menu-item (new Label-Item parent: menu title: (append string "...") user-data: item ))
                                                   (submenu (new Context-Menu parent: menu-item))
                                                   (sub-items (first rest)))
                                              (proc sub-items submenu)
                                              (layout-menu~ submenu))))))
                                 items))))
        (proc values-tree top-menu))))
  
  
  (method (create-tree leafs . rest)
    (let ((max-leafs 15)) rest
         (letrec ((proc (function dynamic (items level)
                          (if (<= (length items) max-leafs)
                              (list (list :leafs "" items))
                            (let ((groups (partition items key: (function dynamic (leaf)
                                                                  (let ((title (second leaf)))
                                                                    (if (<= (length title) level)
                                                                        ""
                                                                      (subseq title level (+ level 1))))) test: equal?)))
                              (map (function dynamic (group)
                                     (cond ((= (length group) 2)
                                            (second group))
                                           ((= (first group) "")
                                            (list :leafs "" (cdr group)))
                                           (else
                                            (let* ((sub-items (cdr group))
                                                   (prefix (prefix (map second sub-items))))
                                              (list '() prefix (proc sub-items (length prefix)))))))
                                   groups))))))
           (proc leafs 0))))))
