;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Menus
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2007
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.ui.menu.Menu jazz


(import (jazz.jml)
        (jazz.library)
        (jazz.ui)
        (jazz.utilities))


(class Menu extends View
  
  
  (slot poped   initialize {})
  (slot locked? initialize false)


  (form
    (<install> visible?: #f))

  
  ;;;
  ;;;; Component
  ;;;
  
  
  (method (conclude rest)
    (nextmethod rest)
    (layout-menu))

  
  ;;;
  ;;;; Access
  ;;;
  
  
  (method public (get-poped)
    poped)
  
  
  (method public (set-poped menu)
    (when poped
      (let ((initiator (popup-initiator~ poped)))
        (when initiator
          (invalidate-view~ initiator))))
    (set! poped menu))

  
  ;;;
  ;;;; Update
  ;;;
  
  
  (method (invalidate-update)
    (layout-menu))
  
  
  (method public virtual (update)
    )
  
  
  ;;;
  ;;;; Layout
  ;;;
  
  
  (method public virtual (layout-menu)
    (when (get-finished?)
      (bind-values (prefix icon body accelerator arrow) (collect-maximums)
        (let ((width (+ prefix icon body accelerator arrow))
              (v 1))
          (for-each-view
            (function dynamic (view)
              (let ((height (preferred-height~ view)))
                (set-position~ view (new Point 1 v))
                (set-size~ view (new Dimension width height))
                (set-prefix-width~ view prefix)
                (set-icon-width~ view icon)
                (set-body-width~ view body)
                (set-accelerator-width~ view accelerator)
                (set-arrow-width~ view arrow)
                (increase! v height))))
          (set-size (new Dimension (+ width 2) (+ v 1)))))))


  (method (collect-maximums)
    (let ((prefix-max 0)
          (icon-max 0)
          (body-max 0)
          (accelerator-max 0)
          (arrow-max 0))
      (for-each-view
        (function dynamic (view)
          (let ((prefix (preferred-prefix-width~ view))
                (icon (preferred-icon-width~ view))
                (body (preferred-body-width~ view))
                (accelerator (preferred-accelerator-width~ view))
                (arrow (preferred-arrow-width~ view)))
            (when (> prefix prefix-max) (set! prefix-max prefix))
            (when (> icon icon-max) (set! icon-max icon))
            (when (> body body-max) (set! body-max body))
            (when (> accelerator accelerator-max) (set! accelerator-max accelerator))
            (when (> arrow arrow-max) (set! arrow-max arrow)))))
      (values prefix-max icon-max body-max accelerator-max arrow-max)))
  
  
  ;;;
  ;;;; Separators
  ;;;
  
  
  (method public (cleanup-separators)
    (let ((visibles (collect-if (function dynamic (item) (get-visible?~ item)) children))
          (previous-separator? true)
          (kept-separator nil))
      (for-each (function dynamic (item)
                  (let* ((separator? (is? item Separator-Item))
                         (consecutive? (and separator? previous-separator?)))
                    (if consecutive?
                        (set-visible?~ item false)
                      (when separator?
                        (set! kept-separator item))
                      (set! previous-separator? separator?))))
                visibles)
      (when (and previous-separator? kept-separator)
        (set-visible?~ kept-separator false))))))
