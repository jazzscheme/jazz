;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Toolbar Preferences
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2007
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.ui.preferences.Toolbar-Preferences jazz


(import (jazz.jml)
        (jazz.ui)
        (jazz.ui.view)
        (jazz.library)
        (jazz.utilities))


(class Toolbar-Preferences extends Figure-Preferences
  
  
  (property model-name initialize {} accessors generate)


  (form
    (<install> icon: {Bitmap-Resource "Window"}))
  
  
  ;;;
  ;;;; Present
  ;;;
  
  
  (method (presentation-property? property)
    (memq? (field-name property) '(title)))
  
  
  (method (get-presentation)
    (either title (format "{s} (docked)" name)))
  
  
  (method (set-presentation designer title)
    (set-property~ designer self :title title))
  
  
  ;;;
  ;;;; Applying
  ;;;
  
  
  (method (apply-preferences . rest)
    (bind-optionals ((parent {})) rest
      (assert parent)
      (let* ((class (get-class))
             (host (singleton-toolbar class name)))
        (set-parent~ host parent)
        (when title
          (set-title~ host title))
        (set-location~ host location)
        (client-activate~ (get-guest~ host))
        (set-visible?~ host true))))
  
  
  (method (get-class)
    (let* ((pref (get-preferences 'workspaces))
           (classes (get-toolbar-classes~ pref))
           (name (cdr (assq model-name classes))))
      (autoload (either name model-name))))
  
  
  ;;;
  ;;;; Designer
  ;;;
  
  
  @convert-descriptor
  (method meta (get-class-image)
    {Bitmap-Resource "Docked"})
  
  
  (method (get-categorized-properties)
    '(location model-name))))
