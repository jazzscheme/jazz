;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Playlist Manager
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Stephane Le Cornec.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2007
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.ui.presentation.Playlist-Manager jazz


(import (jazz.jml)
        (jazz.ui)
        (jazz.literals)
        (jazz.library)
        (jazz.utilities))


(class Playlist-Manager extends Layout-View
  
  
  (form
    (<install>                                                     size: {Dimension 650 400} layout-type: border layout-insets: {Rect 0 2 0 0}
      (<Layout-View>                        name: toolbar          size: {Dimension 300 33} layout-type: flow layout-insets: {Rect 0 7 0 0} location: north
        (<Separator>                                               size: {Dimension 2 0})
        (<Push-Tool>                                               size: {Dimension 22 22} tooltip?: #t tooltip-text: "Import..." image-name: {Bitmap-Resource "JEMUpdateCategories"} portfolio: :icons action-handler: {Event-Handler form: on-import-text})
        (<Separator>                                               size: {Dimension 16 0}))
      (<Splitter-View>                      name: library-splitter size: {Dimension 650 367} location: center state: split orientation: horz division: 300
        (<Border-View>                      name: library-border   size: {Dimension 128 366} location: first border-type: edge style: entry
          (<Branches-Viewer>                name: library          size: {Dimension 128 366}))
        (<Layout-View>                                             location: second layout-type: fill
          (<Splitter-View>                  name: slides-splitter  size: {Dimension 650 367} location: center state: split orientation: horz division: 300
            (<Border-View>                  name: slides-border    size: {Dimension 128 366} location: first border-type: edge style: entry
              (<Scroller-View>                                     style: document hscroll?: #t vscroll?: #t
                (<!>                        name: content          layout-type: fill
                  (<Tree-Header>                                   style: document
                    (<!>                    name: content
                      (<Tree-View>          name: slides           portfolio: :icons action-handler: {Event-Handler form: on-select-left}
                        (<Tree-Node-Column>                        title: "Slide Show" width: 419)))))))
            (<Layout-View>                  name: presentation     size: {Dimension 650 367} location: second layout-type: fill))))))
  
  
  (method (finish initargs)
    (nextmethod initargs)
    (let* ((file {File Jazz "Documentation" "Jazz" "Presentation" "Scenario.ftx"})
           (generator (new Presentation-Generator))
           (presentation (generate-presentation~ generator file)))
      (set-client~ (locate 'library) presentation)
      (set-parent~ presentation (locate 'presentation))
      (layout-view)))
  
  
  ;;;
  ;;;; Frame
  ;;;
  
  
  @convert-guest
  (method meta (frame-title)
    "Presentation Manager")
  
  
  @convert-guest
  (method meta (frame-position)
    {Point 100 100})
  
  
  @convert-guest
  (method meta (frame-size)
    {Dimension 800 600})
  
  
  ;;;
  ;;;; Handlers
  ;;;
  
  
  (method (on-import-text evt)
    (let* ((file {File Jazz "Documentation" "Jazz" "Presentation" "Scenario.ftx"})
           (generator (new Presentation-Generator))
           (presentation (generate-presentation~ generator file)))
      ))
  
  
  ;;;
  ;;;; Left View
  ;;;
  
  
  @w
  (method (on-select-left evt)
    (let* ((data (get-selected-data~ (get-sender~ evt)))
           (action (essay data (get-name~ (first data))))
           (tab (locate 'offer-desc)))
      (when action
        ;; visible
        (set-visible?~ visible #f)
        (case action
          ((groups)
           (set! visible (locate 'groups-view)))
          ((destinations)
           (set! visible (locate 'dest-view)))
          ((char char-char char-special char-activities)
           (set! visible (locate 'char-view)))
          ((selling)
           (set! visible (locate 'selling-view)))
          (else
           (set! visible (locate 'offer-tab))))
        (set-visible?~ visible #t)
        ;; tab
        (when (memq? action '(offer-desc offer-char offer-cond offer-components offer-compose offer-maint))
          (set-selection-name~ visible action)))))
  
  
  ;;;
  ;;;; Right View
  ;;;
  
  ))
