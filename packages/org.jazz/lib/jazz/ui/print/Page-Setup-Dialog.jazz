;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Page-Setup Dialog
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2007
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.ui.print.Page-Setup-Dialog jazz


(import (jazz.library)
        (jazz.ui)
        (jazz.ui.view)
        (jazz.utilities))


(class Page-Setup-Dialog extends Dialog
  
  
  @convert-dialog
  (method meta (get-modal (margins: margins '()) (orientation: orientation {}) (paper-size: paper-size {}) (paper-source: paper-source {}))
    (close-all-popups)
    (let ((rec (new PAGESETUPDLG))
          (devmode (new DEVMODE)))
      (set devmode 'dmSize (size-of DEVMODE))
      (set devmode 'dmOrientation orientation)
      (set devmode 'dmPaperSize paper-size)
      (set devmode 'dmDefaultSource paper-source)
      (set devmode 'dmFields (bit-or DM_ORIENTATION DM_PAPERSIZE DM_DEFAULTSOURCE))
      (set rec 'lStructSize (size-of PAGESETUPDLG))
      (set rec 'hwndOwner (get-handle~ (get-toplevel~ (get-application))))
      (set rec 'hDevMode (record-address devmode))
      (set rec 'Flags (bit-or PSD_INTHOUSANDTHSOFINCHES (if margins PSD_MARGINS 0) PSD_DISABLEPRINTER))
      (when margins
        (set rec '(rtMargin left) (get-left~ margins))
        (set rec '(rtMargin top) (get-top~ margins))
        (set rec '(rtMargin right) (get-right~ margins))
        (set rec '(rtMargin bottom) (get-bottom~ margins)))
      (if (PageSetupDlg rec)
          (let* ((handle (get rec 'hDevMode))
                 (pointer (GlobalLock handle))
                 (devmode (coerce pointer DEVMODE)))
            (prog1
                (values (POINT->dimension (get rec 'ptPaperSize))
                        (RECT->rect (get rec 'rtMinMargin))
                        (RECT->rect (get rec 'rtMargin))
                        (get devmode 'dmOrientation)
                        (get devmode 'dmPaperSize)
                        (get devmode 'dmDefaultSource))
              (GlobalUnlock handle)))
        (let ((code (CommDlgExtendedError)))
          (if (= code 0)
              (throw-cancel)
            (error "Print dialog error: {t}" code))))))))
