;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Shortcut Tables
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2007
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.ui.shortcut.platform.x11.Shortcut-Table jazz


(import (jazz.library)
        (jazz.platform.x11)
        (jazz.ui)
        (jazz.utilities))


(definition public Symbolic-Keys
  (list
    (cons 'F1            VK_F1)
    (cons 'F2            VK_F2)
    (cons 'F3            VK_F3)
    (cons 'F4            VK_F4)
    (cons 'F5            VK_F5)
    (cons 'F6            VK_F6)
    (cons 'F7            VK_F7)
    (cons 'F8            VK_F8)
    (cons 'F9            VK_F9)
    (cons 'F10           VK_F10)
    (cons 'F11           VK_F11)
    (cons 'F12           VK_F12)
    (cons 'Escape        VK_ESCAPE)
    (cons 'Backspace     VK_BACK)
    (cons 'Minus         VK_OEM_MINUS)
    (cons 'Plus          VK_OEM_PLUS)
    (cons 'Comma         VK_OEM_COMMA)
    (cons 'Period        VK_OEM_PERIOD)
    (cons 'Semi-Colon    VK_OEM_1)
    (cons 'Slash         VK_OEM_2)
    (cons 'Tilde         VK_OEM_3)
    (cons 'Open-Bracket  VK_OEM_4)
    (cons 'Backslash     VK_OEM_5)
    (cons 'Close-Bracket VK_OEM_6)
    (cons 'Quote         VK_OEM_7)
    (cons 'Return        VK_RETURN)
    (cons 'Space         VK_SPACE)
    (cons 'Tab           VK_TAB)
    (cons 'Home          VK_HOME)
    (cons 'End           VK_END)
    (cons 'Left          VK_LEFT)
    (cons 'Up            VK_UP)
    (cons 'Right         VK_RIGHT)
    (cons 'Down          VK_DOWN)
    (cons 'Prior         VK_PRIOR)
    (cons 'Next          VK_NEXT)
    (cons 'Insert        VK_INSERT)
    (cons 'Pause         VK_PAUSE)
    (cons 'Delete        VK_DELETE)
    (cons 'Add           VK_ADD)
    (cons 'Subtract      VK_SUBTRACT)
    (cons 'Multiply      VK_MULTIPLY)
    (cons 'Divide        VK_DIVIDE)))


(class Shortcut-Table extends Object


  (slot handle      initialize {})
  (slot accel-array initialize {})
  (slot accel-size  initialize {})


  (method (initialize action-items)
    (nextmethod)
    (set! handle (create-table action-items))
    (destroy-mandatory))


  (method (destroy)
    (when handle
      (DestroyAcceleratorTable handle)
      (set! handle {})
      (for-each (function (n)
                  (let ((accel (ACCEL-array-ref accel-array n)))
                    (unregister-cookie-id (ACCEL-cmd-ref accel))))
                (naturals 0 accel-size)))
    (nextmethod))


  (method public (get-handle)
    handle)


  (method public (create-table action-items)
    (when action-items
      (let* ((size  (length action-items))
             (array (make-ACCEL-array size)))
        (for-each (function (action-item n)
                    (let ((shortcut (if (is? action-item Shortcut) action-item (get-shortcut~ action-item))))
                      (let ((id        (register-cookie-id action-item))
                            (r         (ACCEL-array-ref array n))
                            (modifiers (get-modifiers~ shortcut))
                            (key       (get-key~ shortcut)))
                        (let ((control (if (memq? :control modifiers) FCONTROL 0))
                              (alt     (if (memq? :alt modifiers) FALT 0))
                              (shift   (if (memq? :shift modifiers) FSHIFT 0)))
                          (ACCEL-fVirt-set! r (bit-or FVIRTKEY control alt shift))
                          (ACCEL-key-set! r (get-key key))
                          (ACCEL-cmd-set! r id)))))
                  action-items
                  (naturals 0 size))
        (set! accel-array array)
        (set! accel-size size)
        (CreateAcceleratorTable array size))))


  (method (get-key key)
    (if (char? key)
        (char->integer key)
      (let ((info (assq key Symbolic-Keys)))
        (if info
            (cdr info)
          (error "Unknown symbolic key: {t}" key)))))))
