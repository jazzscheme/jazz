;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; C++/Java Text View
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2007
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.ui.text.CppJava-Text-View jazz


(import (jazz.ui)
        (jazz.library)
        (jazz.utilities))


(class CppJava-Text-View extends Code-Text-View
  
  
  (method (install rest)
    (nextmethod rest)
    (let ((pref (preferences)))
      (add-style (new Text-Style name: 'Title            :base 'Default :color (get-title-color~ pref)))
      (add-style (new Text-Style name: 'Definition       :base 'Default :color (get-definition-color~ pref)))
      (add-style (new Text-Style name: 'Line-Comment     :base 'Default :color (get-line-comment-color~ pref)))
      (add-style (new Text-Style name: 'Balanced-Comment :base 'Default :color (get-balanced-comment-color~ pref)))
      (add-style (new Text-Style name: 'Keyword          :base 'Default :color (get-keyword-color~ pref)))
      (add-style (new Text-Style name: 'User-Macro       :base 'Default :color (get-user-macro-color~ pref)))
      (add-style (new Text-Style name: 'User-Keyword     :base 'Default :color (get-user-keyword-color~ pref)))
      (add-style (new Text-Style name: 'User-Type        :base 'Default :color (get-user-type-color~ pref)))))
  
  
  (method (new-syntax)
    (new CppJava-Syntax))


  ;;;
  ;;;; Match
  ;;;


  ;; temporarely...
  (method (flash-character? char)
    false)
    
  
  ;;;
  ;;;; Translation
  ;;;
  
  
  (method (translate-key key)
    key)

  
  ;;;
  ;;;; Tabulation
  ;;;


  (method (return-press key)
    (nextmethod key)
    (tabulate))

  
  ;;;
  ;;;; Completion
  ;;;
  
  
  (method (commented? pos)
    (let ((style (get-style-at pos)))
      (and style
           (or (inherits?~ style 'Title)
               (inherits?~ style 'Line-Comment)
               (inherits?~ style 'Balanced-Comment)))))

  
  ;;;
  ;;;; Keywords
  ;;;
  
  
  (method protected virtual (get-keywords)
    )
      
  
  ;;;
  ;;;; User
  ;;;

  
  (method protected virtual (get-user-macros user)
    )
  
  
  (method protected virtual (get-user-keywords user)
    )
  
  
  (method protected virtual (get-user-types user)
    )

  
  ;;;
  ;;;; Mouse Copy
  ;;;

  
  (method (mouse-insert copy)
    (let ((start (get-start))
          (end (get-end)))
      @implement-with-c++/java-logic-ie-capitalized-variables
      (when (/= start (text-beginning))
        (let ((sc (get-char (previous-cell start))))
          (when (and (text-constituent?~ syntax (element copy 0)) (text-constituent?~ syntax sc) (not (memq? sc '(#\minus #\colon))))
            (set! copy (append! " " copy)))))
      @implement-with-c++/java-logic-ie-capitalized-variables
      (when (and (/= end (text-ending)) (text-constituent?~ syntax (last copy)) (text-constituent?~ syntax (get-char end)))
        (set! copy (append! copy " ")))
      (with-update-locked
        (function dynamic ()
          (insert-string copy)))))

  
  ;;;
  ;;;; Coloring
  ;;;
  
  
  (method (compute-syntax-targets)
    (let ((user (get-user~ (get-application))))
      (append (list (list "/*" 'balanced-comment false))
              (list (list "*/" 'balanced-comment-backward false))
              (list (list "//" 'line-comment false))
              (map (function dynamic (str) (list str 'keyword)) (get-keywords))
              (map (function dynamic (str) (list str 'user-macro)) (get-user-macros user))
              (map (function dynamic (str) (list str 'user-keyword)) (get-user-keywords user))
              (map (function dynamic (str) (list str 'user-type)) (get-user-types user)))))
  
  
  (method (compute-syntax-automata)
    (build-search-automata (syntax-targets) true false self cpp/java-constituent?))

  
  (method (colorize-type found type start end colorizer recolorize?)
    (case type
      ((balanced-comment)          (colorize-balanced-comment          found start end colorizer 'Balanced-Comment))
      ((balanced-comment-backward) (colorize-balanced-comment-backward found start end colorizer 'Balanced-Comment recolorize?))
      ((line-comment)              (colorize-line-comment              found start end colorizer 'Line-Comment 'Title #\slash))
      ((keyword)                   (colorize-keyword                   found start end colorizer 'Keyword))
      ((user-macro)                (colorize-keyword                   found start end colorizer 'User-Macro))
      ((user-keyword)              (colorize-keyword                   found start end colorizer 'User-Keyword))
      ((user-type)                 (colorize-keyword                   found start end colorizer 'User-Type))))


  ;;;
  ;;;; Explorer
  ;;;


  (method (explorer-class)
    CppJava-Explorer)
 
  
  ;;;
  ;;;; Expr
  ;;;
  
  
  (method (get-context)
    '(cpp/java))


  (method (current-name)
    (name-at (current-expr-range)))
  
  
  (method (name-at range)
    (when range
      (let ((name (get-string range)))
        (if (= (element name 0) #\open-brace)
            (read-string-element name)
          name))))


  (method (current-expr)
    (current-name))
  
  
  (method (current-expr-range)
    (if (and (not completion-active?) (has-selection?))
        (get-selection)
      (expr-range (get-end))))
  
  
  (method (expr-range pos)
    (let ((expl (new CppJava-Explorer self :start pos :end pos)))
      (outer-expr~ expl)
      (get-range~ expl)))
  
  
  (method (expr-at pos)
    (name-at (expr-range pos)))

  
  ;;;
  ;;;; Chapters
  ;;;
  
  
  (constant headers
    (list
      (append "///" (coerce #\tab String))
      (append "///" (coerce #\space String))))
  
  
  (method (get-headers)
    headers)
  
  
  (method (get-first-chapter lst)
    (if (get-first-special?)
        (car lst)
      (let ((file (get-moniker)))
        (list 0
              (text-beginning)
              ""
              (if (null? file)
                  "<no file>"
                (get-name~ file))))))
  
  
  (method (get-remaining-chapters list)
    (if (get-first-special?)
        (cdr list)
      list))))
