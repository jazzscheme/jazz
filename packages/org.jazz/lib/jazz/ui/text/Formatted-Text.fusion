;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Formatted Text
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2007
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.ui.text.Formatted-Text jazz


(import (jazz.ui)
        (jazz.library)
        (jazz.utilities))


(class Formatted-Text extends Text
  
  
  (slot protected formats)
  (slot protected styles)
  
  
  @convert-literal
  (method meta (construct-literal context . rest)
    (apply new self rest))
  
  
  (method (initialize . rest)
    (bind-keywords ((formats null) (styles null) . others) rest
      (apply nextmethod others)
      (set! [formats self] formats)
      (set! [styles self] styles)))
  
  
  (method (foldable?)
    true)


  (method (fold-object compiler)
    (output~ compiler "make_object(")
    (fold~ compiler (type-name (class-of self)))
    (fold-more~ compiler :formats)
    (fold-more~ compiler formats)
    (fold-more~ compiler :styles)
    (fold-more~ compiler styles)
    (fold-more~ compiler :paragraphs)
    (fold-more~ compiler paragraphs)
    (output~ compiler ")"))
  
  
  (method (print printer readably)
    (format printer "~{{a}{? :formats {s}~}{? :styles {s}~}{? :paragraphs {s}~}}"
            (identifier-name (type-name (class-of self)))
            formats
            styles
            paragraphs))
  
  
  ;;;
  ;;;; Access
  ;;;
  
  
  (method public (get-formats)
    formats)
  
  
  (method public (set-formats value)
    (set! formats value))
  
  
  (method public (get-styles)
    styles)
  
  
  (method public (set-styles value)
    (set! styles value))))
