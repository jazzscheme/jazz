;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Image Style
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2007
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.ui.text.Image-Style jazz


(import (jazz.ui)
        (jazz.library)
        (jazz.utilities))


(class Image-Style extends Style
  
  
  (definition properties
    '(alignment:
      moniker:
      :portfolio
      :image-name
      :scaled?
      :scaling))
  
  
  (slot image   initialize (new Image))
  (slot scaled? initialize false)
  (slot scaling initialize 1.0)
  
  
  (method (get-value property)
    (case property
      ((moniker:) (get-moniker~ image))
      ((:portfolio) (get-portfolio~ image))
      ((:image-name) (get-image-name~ image))
      ((:scaled?) (get-scaled?~ image))
      ((:scaling) (get-scaling~ image))
      (else (nextmethod property))))
  
  
  (method (set-value property value)
    (case property
      ((moniker:) (set-moniker~ image value))
      ((:portfolio) (set-portfolio~ image value))
      ((:image-name) (set-image-name~ image value))
      ((:scaled?) (set-scaled?~ image value))
      ((:scaling) (set-scaling~ image value))
      (else (nextmethod property value))))
  
  
  ;;;
  ;;;; Accessors
  ;;;


  (method public (get-image)
    image)
  
  
  ;;;
  ;;;; Size
  ;;;
  
  
  (method (get-width)
    (get-width~ image))
  
  
  (method (get-height)
    (get-height~ image))
  
  
  (method (run-width run)
    (get-width))
  
  
  ;;;
  ;;;; Text
  ;;;
  
  
  (method (propagate?)
    false)
  
  
  ;;;
  ;;;; Wrap
  ;;;
  
  
  (method (wrap context margin h v width tabs place break run)
    (place run)
    (+ h (get-width)))
  
  
  ;;;
  ;;;; Drawing
  ;;;
  
  
  (method (draw-style dc <Surface> context string <Sequence> h <fx> v <fx> line-height <fx> tab-stops left enabled?)
    (let* ((width (get-width))
           (height (get-height))
           (top (justify-element height line-height)))
      (draw~ image dc context h (+ v top))
      width))))
