;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Info Style
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2007
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.ui.text.Info-Style jazz


(import (jazz.ui)
        (jazz.library)
        (jazz.utilities))


(class Info-Style extends Text-Style
  
  
  (attributes (alignment font color highlight)
    (what initialize {}))
  
  
  ;;;
  ;;;; Size
  ;;;
  
  
  (method (get-width)
    16)
  
  
  (method (get-context-width context)
    (if (getf context :printing?)
        (text-width~ font (->string (info-value context)))
      (get-width)))
  
  
  ;;;
  ;;;; Text
  ;;;
  
  
  (method (propagate?)
    false)
  
  
  ;;;
  ;;;; Scan
  ;;;
  
  
  (method (scan h start end tabs run proc)
    (default-scan h start end tabs run proc))
  
  
  ;;;
  ;;;; Wrap
  ;;;
  
  
  (method (wrap context margin h v width tabs place break run)
    (place run)
    (+ h (get-context-width context)))
  
  
  ;;;
  ;;;; Info
  ;;;
  
  
  (method (info-icon)
    (case what
      ((filename) {Bitmap-Resource "PageFilename"})
      ((no) {Bitmap-Resource "PageNo"})
      ((count) {Bitmap-Resource "PageCount"})
      ((date) {Bitmap-Resource "PageDate"})
      ((time) {Bitmap-Resource "PageTime"})))
  
  
  (method (info-value context)
    (case what
      ((filename) (getf context :filename))
      ((no) (+ 1 (getf context :page-no)))
      ((count) (getf context :page-count))
      ((date) (getf context :print-date))
      ((time) (getf context :print-time))))
  
  
  ;;;
  ;;;; Drawing
  ;;;
  
  
  (method (draw-style dc <Surface> context string <Sequence> h <int> v <int> line-height <int> tab-stops left enabled?)
    (if (getf context :printing?)
        (nextmethod dc context (->string (info-value context)) h v line-height tab-stops left enabled?)
      (let ((width (get-width))
            (top (justify-element 16 line-height))
            (icon (info-icon)))
        (draw-image~ (get-icons-cache~ (get-application)) dc context icon h (+ v top))
        width)))))
