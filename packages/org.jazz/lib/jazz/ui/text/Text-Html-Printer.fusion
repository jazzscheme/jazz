;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Text HTML-Printer
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2007
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.ui.text.Text-HTML-Printer jazz


(import (jazz.ui)
        (jazz.library)
        (jazz.utilities))


(class Text-HTML-Printer extends HTML-Printer
  
  
  (slot text)

  
  (method (initialize text printer)
    (nextmethod {} {} printer)
    (set! text~self text))
  
  
  ;;;
  ;;;; Printing
  ;;;
  
  
  (method (print-html)
    (let ((moniker (get-moniker~ text)))
      (with-document (if moniker (get-base~ moniker) "")
        (function dynamic ()
          (print-content))
        header?: false)))
  
  
  (method (print-content)
    (format printer "<UL>{%}")
    (let ((heading0 (get-style~ text 'Heading0 error?: false))
           (heading1 (get-style~ text 'Heading1 error?: false))
           (heading2 (get-style~ text 'Heading2 error?: false)))
      (for-each-paragraph~ text
       (function dynamic (row paragraph)
         (let* ((fmt (get-format~ paragraph))
                (run (first-run~ paragraph))
                (str (get-string~ paragraph))
                (style (essay run (get-style~ run))))
           (cond ((eq? style heading0)
                  (format printer "<H1>{a}</H1>{%}" str))
                 ((eq? style heading1)
                  (format printer "<H2>{a}</H2>{%}" str))
                 ((eq? style heading2)
                  (format printer "<H3>{a}</H3>{%}" str))
                 (else
                  (if (empty-string? str)
                      (format printer "<P>")
                    (if (get-bulleted?~ fmt)
                        (format printer "<LI>{a}{%}" str)
                      (format printer "{a}{%}" str)))))))))
    (format printer "</UL>{%}"))))
