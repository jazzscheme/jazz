;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; View Style
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2007
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.ui.text.View-Style jazz


(import (jazz.ui)
        (jazz.library)
        (jazz.utilities))


(class View-Style extends Style
  
  
  @w
  (definition properties
    '(alignment:
      form:))
  
  
  @w
  (slot protected form)
  (slot protected view)
  
  
  @convert-literal
  (method meta (construct-literal context . rest)
    (apply new self rest))
  
  
  (method (initialize . rest)
    (bind-keywords ((view {}) . others) rest
      (apply nextmethod others)
      (set! [view self] view)))


  (method (compare-object target)
    (let ((result (nextmethod target)))
      (case result
        ((:equal)
         (if (eq? view [view target])
             :equal
           :not-equal))
        (else
         result))))
  
  
  (method (print printer readably)
    (format printer "~{{a} alignment: {s} view: {s}}"
            (identifier-name (type-name (class-of self)))
            alignment
            view))
  
  
  @w
  (method (get-value property)
    (case property
      ((form:) form)
      (else (nextmethod property))))
  
  
  @w
  (method (set-value property value)
    (case property
      ((form:) (set! form value))
      (else (nextmethod property value))))
  
  
  ;;;
  ;;;; Access
  ;;;
  
  
  @w
  (method public (get-form)
    form)
  
  
  (method public (get-view)
    view)
  
  
  @w
  (method public (set-view value)
    (set! view value))
  
  
  ;;;
  ;;;; Size
  ;;;
  
  
  (method (get-width)
    (get-width~ view))
  
  
  (method (get-height)
    (get-height~ view))
  
  
  (method (run-width run)
    (get-width))
  
  
  ;;;
  ;;;; Text
  ;;;
  
  
  (method (propagate?)
    false)
  
  
  ;;;
  ;;;; Wrap
  ;;;
  
  
  (method (place-update h v)
    (set-position~ view (new Point h v)))
  
  
  (method (height-update height)
    (let* ((pos (get-position~ view))
           (h [h pos])
           (v (+ [v pos] (justify-element (get-height) height))))
      (set-position~ view (new Point h v))))))
