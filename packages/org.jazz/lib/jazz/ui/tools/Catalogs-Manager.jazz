;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Catalogs Manager
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2007
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.ui.tools.Catalogs-Manager jazz


(import (jazz.jml)
        (jazz.literals)
        (jazz.library)
        (jazz.ui)
        (jazz.ui.view)
        (jazz.utilities))


(class Catalogs-Manager extends View


  (form
    (<install>                                               size: {Dimension 603 514}
      (<Push-Button>                   name: update          title: "Update" position: {Point 499 7} size: {Dimension 100 22} action-handler: {Event-Handler form: on-update} default?: #t)
      (<Border-View>                   name: catalogs-border position: {Point 2 35} size: {Dimension 599 477} border-type: edge style: entry
        (<Scroller-View>                                     vscroll?: #t
          (<!>                         name: content         layout-type: fill
            (<Tree-Header>                                   style: document
              (<!>                     name: content
                (<Tree-View>           name: catalogs        filled-column: name double-click-handler: {Event-Handler form: on-double-click} multiple-selection?: #t selection-mode: node
                  (<Tree-Node-Column>  name: name            title: "Name" width: 150 toplevel-controls?: #f display-images?: #f)
                  (<Tree-Label-Column> name: references?     title: "References?" width: 100)
                  (<Tree-Label-Column> name: statistics      title: "Statistics" width: 250)))))))))
  
  
  @convert-external
  (method meta (external-name . rest)
    'catalogs-manager)
  
  
  ;;;
  ;;;; Component
  ;;;

  
  (method (finish initargs)
    (nextmethod initargs)
    (view-catalogs))
    
  
  ;;;
  ;;;; Frame
  ;;;
    
  
  @convert-guest
  (method meta (frame-icon)
    {Bitmap-Resource "Repository"})
  
  
  @convert-guest
  (method meta (frame-title)
    "Catalogs Manager")
  
  
  @convert-guest
  (method meta (frame-position)
    {Point 90 70})
  
  
  @convert-guest
  (method meta (frame-size)
    {Dimension 603 514})
  
  
  (method (frame-workspaces)
    '(home))
  
  
  ;;;
  ;;;; Events
  ;;;


  (method (resize dh dv)
    (nextmethod dh dv)
    (move-figure~ (locate 'update) dh 0)
    (size-figure~ (locate 'catalogs-border) dh dv))
  
  
  (method (on-change-active evt)
    (let* ((sender (get-sender~ evt))
           (catalog (get-user-data~ sender)))
      (set-active?~ catalog (get-checked?~ sender))))
  
  
  ;;;
  ;;;; Update
  ;;;


  (method public (view-catalogs)
    (let ((tree (locate 'catalogs)))
      (with-update-locked~ tree
        (function dynamic ()
          (remove-every-row~ tree)
          (for-each (function dynamic (catalog)
                      (let ((handler (new Event-Handler target: self method-name: 'on-change-active)))
                        (let ((c0 (new Check-Box title: (->string (get-name~ catalog)) checked?: (get-active?~ catalog) user-data: catalog content-change-handler: handler))
                              (c1 (new Tree-Label title: (->string (get-references?~ catalog))))
                              (c2 (new Tree-Label title: (get-statistics~ catalog))))
                          (add-row~ tree children: (list c0 c1 c2) user-data: catalog))))
                    (get-indexed-catalogs))))))
  
  
  (method (get-indexed-catalogs)
    (collect-if (function dynamic (catalog)
                  (is? catalog Indexed-Catalog))
                (get-catalogs~ (get-cataloguer~ (get-application)))))


  (method public (on-update evt)
    (with-cursor :wait
      (function dynamic ()
        (update-selection))))
  
  
  (method (on-double-click evt)
    (let ((sender (get-sender~ evt))
          (alt? (get-alt?~ evt)))
      (case (get-name~ sender)
        ((catalogs)
         (with-cursor :wait
           (function dynamic ()
             (update-selection)))))))
  
  
  (method (update-selection)
    (let* ((tree (locate 'catalogs))
           (selection (get-selection~ tree)))
      (for-each (function dynamic (item)
                  (let ((catalog (get-user-data~ (get-row~ tree item))))
                    (time (update~ catalog))))
                selection)))
  

  ;;;
  ;;;; Session
  ;;;
  
  
  (method (confirm-close . rest)
    (save-session))
  
  
  (method (save-session)
    @to-convert
    (let ((info
           (list (external-name)
                 position: (get-position)
                 size:     (get-size))))
      (push-property~ properties 'Opened-Windows info)))))
