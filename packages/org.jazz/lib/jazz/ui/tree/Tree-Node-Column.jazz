;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Tree Node Column
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2007
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.ui.tree.Tree-Node-Column jazz


(import (jazz.ui)
        (jazz.literals)
        (jazz.library)
        (jazz.utilities))


(class Tree-Node-Column extends Tree-Label-Column
  
  
  (property protected controls?          initialize #t  getter get-controls?          setter set-controls?)
  (property protected toplevel-controls? initialize #t  getter get-toplevel-controls? setter set-toplevel-controls?)
  (property protected display-images?    initialize #t  getter get-display-images?    setter set-display-images?)
  
  
  (slot image-offset initialize 1)
  
  
  ;;;
  ;;;; Access
  ;;;


  (method public (get-controls?)
    controls?)


  (method public (set-controls? flag)
    (set! controls? flag)
    (invalidate-view~ parent))


  (method public (get-toplevel-controls?)
    toplevel-controls?)


  (method public (set-toplevel-controls? flag)
    (set! toplevel-controls? flag)
    (invalidate-view~ parent))


  (method public (get-display-images?)
    display-images?)


  (method public (set-display-images? flag)
    (set! display-images? flag)
    (invalidate-view~ parent))
  
  
  (method public (set-image-offset offset)
    (set! image-offset offset)
    (invalidate-view~ parent))
  
  
  ;;;
  ;;;; Cells
  ;;;
  
  
  (method (new-empty-cell)
    (new Tree-Node title: ""))
  

  ;;;
  ;;;; Mouse
  ;;;
  
  
  (method (complete-mouse-down cell pos shift? control?)
    (let ((row (get-row~ parent (get-row~ cell))))
      (case (find-part cell pos)
        ((control) (expand/collapse~ parent row))
        ((content) (process-selection~ parent cell shift? control?)))))
  
  
  (method (double-click cell pos)
    (expand/collapse~ parent (get-row~ parent (get-row~ cell))))
  

  ;;;
  ;;;; Parts
  ;;;
  
  
  (method (find-part cell pos)
    (let ((h (get-h~ pos))
          (v (get-v~ pos))
          (base (level-h (get-level~ (get-row~ parent (get-row~ cell))))))
      (if (and controls? toplevel-controls? (and (>= h (+ base 4)) (>= v 4) (< h (+ base 13)) (< v 13)))
          'control
        'content)))
  

  ;;;
  ;;;; Text
  ;;;
  
  
  (method protected (row-text-left row)
    (- (text-h (get-level~ row)) 1))
  
  
  (method protected (text-rect row cell width height force-node?)
    (let* ((title (localize (get-title~ cell)))
           (h (- (text-h (get-level~ row)) 1))
           (max (- width h 2))
           (font (either (get-font~ cell) (get-font~ parent))))
      (with ((extent (text-extent~ font title)))
        (let* ((title-width (get-width~ extent))
               (width (min (if (or force-node? (<= (get-columns-count~ parent) 1)) title-width width) max)))
          (new Rect h 0 (+ h width 4) height)))))
  

  ;;;
  ;;;; Regions
  ;;;
  
  
  (method protected (control-rect row top)
    (let ((h (control-h (get-level~ row))))
      (new Rect (+ h 4) (+ top 4) (+ h 13) (+ top 13))))
  
  
  (method protected (plus/minus-rect row top)
    (let ((h (control-h (get-level~ row))))
      (new Rect (+ h 5) (+ top 5) (+ h 12) (+ top 12))))
  
  
  (method protected (image-rect row top)
    (let ((h (image-h (get-level~ row))))
      (new Rect (+ h 0) (+ top 0) (+ h 16) (+ top 16))))
  
  
  ;;;
  ;;;; Layout
  ;;;
  
  
  (method (layout-cell row cell h v width height)
    (when (is? cell View)
      (let ((offset (image-h (get-level~ row))))
        (set-position~ cell (new Point (+ h offset) v))
        (set-size~ cell (new Dimension (- width offset) height)))))
  
  
  ;;;
  ;;;; Drawing
  ;;;
  
  
  (definition Line-Color
    {Color name: Dark})
  
  (definition Alternate-Pen
    (new Pen style: 'alternate color: Line-Color))

  
  (method (draw-cell dc context row cell width height)
    (draw-background dc context row cell width height)
    (draw-level dc row cell width height)
    (draw-control dc row cell width height)
    (draw-image dc context row cell width height)
    (draw-title dc context row cell 0 0 width height))
  
  
  (method (draw-background dc context row cell width height)
    (with ((rect (new Rect 0 0 width height)))
      (fill-rect~ dc rect (either (get-cell-background~ parent) {Color name: White})))
    (let ((selected? (getf context selected?:)))
      (if (and selected? (cell-selected? context))
          (with ((rect (text-rect row cell width height #f)))
            (let ((background (get-background~ parent)))
              (when background
                (with ((r (new Rect 0 0 (get-left~ rect) height)))
                  (fill-rect~ dc r (either (get-cell-background~ parent) {Color name: White})))
                (fill-rect~ dc rect (selection-color~ parent)))))
        (let ((background (get-background~ cell))
              (frame-color (get-frame-color~ cell)))
          (when (or background frame-color)
            (with ((rect (text-rect row cell width height #t)))
              (when background
                (fill-rect~ dc rect background))
              (when frame-color
                (frame-rect~ dc rect frame-color))))))))
  
  
  (method public (draw-level dc row cell width <fx> height <fx>)
    (set-pen~ dc Alternate-Pen)
    (let ((level (get-level~ row))
          (row-v (get-v~ (get-position~ row))))
      (loop (for n from level downto 1)
            (let ((h (level-h n))
                  (sf? (visible-sibling-follows?~ row)))
              (if (/= n level)
                  (when sf?
                    (let ((adjust (if (even? row-v) 0 1)))
                      (line~ dc (+ h 8) adjust (+ h 8) (+ height adjust))))
                (let* ((half (fxround height 2))
                       (top-adjusted (if (even? row-v) 0 -1))
                       (half-adjusted (+ half (if (and (odd? height) (odd? row-v)) 1 0)))
                       (horz-adjusted (+ half-adjusted (if (odd? height) -1 0) (if (and (odd? row-v) (even? height)) 1 0))))
                  (line~ dc (+ h 8) top-adjusted (+ h 8) (if sf? height half-adjusted))
                  (line~ dc (+ h 8) horz-adjusted (+ h 19) horz-adjusted)))
              (set! row (get-father~ row)))))
    (set-pen~ dc {Pen name: Black}))
  
  
  (method protected (draw-control dc row cell width height)
    (let* ((level (get-level~ row))
           (toplevel? (= level 0)))
      (when (and (expandable?~ row) controls? (or (not toplevel?) toplevel-controls?))
        (let ((h (control-h level)))
          (with ((rect (new Rect (+ h 4) 4 (+ h 13) 13)))
            (frame-rect~ dc rect Line-Color))
          (let ((background (get-background~ parent)))
            (when background
              (with ((rect (new Rect (+ h 5) 5 (+ h 12) 12)))
                (fill-rect~ dc rect {Color name: White}))))
          (set-pen~ dc {Pen name: Black})
          (line~ dc (+ h 6) 8 (+ h 11) 8)
          (when (neq? (get-state~ row) 'expanded)
            (line~ dc (+ h 8) 6 (+ h 8) 11))))))
  
  
  (method (draw-image dc context row cell width height)
    (let ((h (image-h (get-level~ row)))
          (image (get-image~ cell)))
      (when (and display-images? image)
        (draw-image~ (get-portfolio~ parent) dc context image h 0))))
  
  
  (method (draw-title dc context row cell h v width height)
    (let ((title (localize (either (get-title~ cell) "")))
          (h (text-h (get-level~ row)))
          (font (get-font~ cell)))
      (set-text-color~ dc (cell-color (get-color~ cell) context))
      (when font
        (set-font~ dc font))
      (draw-text~ dc h title-vertical-offset title)))
  
  
  (method (level-h level)
    (- (* level (get-indentation~ parent))
       (if (or (= level 0) toplevel-controls?) 0 16)))
  
  
  (method (control-h level)
    (level-h level))
  
  
  (method public (image-h level)
    (+ (control-h level) (if (or (/= level 0) toplevel-controls?) 16 0) (if display-images? image-offset 0)))
  
  
  (method (content-h level)
    (+ (image-h level) (if display-images? 14 0)))
  
  
  (method (text-h level)
    (+ (image-h level) (if display-images? 16 0) (if display-images? 3 4)))
  
  
  ;;;
  ;;;; Debugging
  ;;;
  
  
  (method (get-debugged cell pos)
    (values cell (find-part cell pos)))))
