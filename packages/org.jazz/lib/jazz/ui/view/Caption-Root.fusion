;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Caption Root
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2007
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.ui.view.Caption-Root jazz


(import (jazz.ui)
        (jazz.platform)
        (jazz.platform.windows)
        (jazz.literals)
        (jazz.library)
        (jazz.utilities))


(class Caption-Root extends Root-View
  
  
  (slot maximized? initialize false)

  
  ;;;
  ;;;; Access
  ;;;
  
  
  (method public (get-maximized?)
    maximized?)
  
  
  (method public (set-maximized? value)
    (if value
        (maximize)
      (restore)))


  ;;;
  ;;;; Caption
  ;;;
  
  
  (method protected virtual (caption-icon)
    )
  
  
  (method protected virtual (caption-title)
    )
  
  
  (method protected virtual (caption-font)
    {Font name: Label-Bold})
  
  
  (method protected virtual (caption-focused?)
    )
  
  
  (method protected virtual (caption-visible?)
    )


  ;;;
  ;;;; Rect
  ;;;
  
  
  (method protected virtual (caption-rect)
    (let ((border (if maximized? 0 4)))
      (new Rect border border (- (get-width) border) (+ 20 border))))


  ;;;
  ;;;; Drawing
  ;;;

  
  (definition Active-Colors
    (list {Color red: 0 green: 84 blue: 227} {Color red: 61 green: 149 blue: 255}))
  
  (definition Inactive-Colors
    (list {Color red: 122 green: 150 blue: 223} {Color red: 157 green: 185 blue: 235}))

  
  (method (draw dc context update lh lv)
    (when (not maximized?)
      (with ((bounds (get-bounds)))
        (draw-edge~ dc bounds :inner 'raised :outer 'raised :edges 'rectangle)))
    (when (caption-visible?)
      (draw-caption dc context)))

  
  (method (draw-caption dc context)
    (with ((rect (caption-rect)))
      (let* ((icon (caption-icon))
             (title (caption-title))
             (font (caption-font))
             (focused? (caption-focused?))
             (colors (if focused? Active-Colors Inactive-Colors))
             (start (first colors))
             (end (second colors))
             (width (get-width))
             (height (get-height)))
        (set-pen~ dc {Pen name: Light})
        (line~ dc 1 1 (- width 3) 1)
        (line~ dc 1 1 1 24)
        (gradient-fill~ dc rect start end)
        (when icon
          (let ((offset (icon-offset)))
            (draw-image~ (get-icons-cache~ (get-application)) dc context icon (+ [left rect] [h offset]) (+ [top rect] [v offset]))))
        (set-font~ dc font)
        (set-text-color~ dc {Color name: White})
        (let ((offset (title-offset)))
          (draw-text~ dc (+ [left rect] [h offset]) (+ [top rect] [v offset]) title)))))
  
  
  (method protected virtual (icon-offset)
    {Point 2 2})
  
  
  (method protected virtual (title-offset)
    {Point 22 3})))
