;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Combo Boxes
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2007
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.ui.view.Combo-Box jazz


(import (jazz.jml)
        (jazz.platform)
        (jazz.ui)
        (jazz.literals)
        (jazz.library)
        (jazz.utilities))


;;;
;;;; Lexicon
;;;


;; choice  : {} or (value presented1 presented2 ...)
;; value   : any valid object
;; content : the string content of the combo text
;; entry   : the effective entry used by the combo box (as an example, the datatype-row class
;;           overrides the get-entry and set-entry methods so that content can be Text, 16 and
;;           the combo still works correctly, in effect ignoring the optional size part)


;;;
;;;; Definition
;;;


(class Combo-Box extends Combo-View


  (property condensed?      initialize false getter get-condensed?      setter set-condensed?)
  (property content         initialize {}    getter get-content         setter set-content)
  (property choices         initialize '()   getter get-choices         setter set-choices)
  (property nullable?       initialize false getter get-nullable?       setter set-nullable?)
  (property choices-updater initialize {}    getter get-choices-updater setter set-choices-updater)
  (property entry-test      initialize {}    getter get-entry-test      setter set-entry-test)
  

  (form
    (<install>
      (<Scroller-View>       name: scroller
        (<!>                 name: content
          (<Combo-Text-View> name: body     left-padding: 1 top-padding: 1 accepts-returns?: #f show-unfocused-selection?: #f default-style: {Text-Style name: Default font: {Font name: Ansi-Var}})))))

  
  (method (default-size)
    {Dimension 100 15})

  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method (button-action)
    (when (update-choices)
      (let ((menu (new-choices-menu))
            (pick (get-pick)))
        (if (not menu)
            (begin
              (bell)
              (set-state (if (eq? (mouse-view) pick) 'highlighted 'inactive)))
          (layout-menu~ menu)
          (let ((pos  (get-position~ pick))
                (size (get-size~ pick)))
            (track-popup-menu menu (new Point (+ (get-h~ pos) 6) (+ (get-v~ pos) (get-height~ size))) alternate-position: pos))))))
  
  
  (method protected virtual (on-action evt)
    (let* ((sender (get-sender~ evt))
           (entry (get-title~ sender))
           (choice (get-user-data~ sender))
           (text (get-body)))
      (set-entry entry)
      (select-all~ (get-body))
      (set-modified?~ text true)
      (call-content-change 'popup)
      (combo-choice)))
  
  
  (method protected virtual (combo-choice)
    )
  
  
  ;;;
  ;;;; Access
  ;;;


  (method public (get-nullable?)
    nullable?)


  (method public (set-nullable? value)
    (set! nullable? value))


  (method public (get-condensed?)
    condensed?)


  (method public (set-condensed? value)
    (set! condensed? value))


  (method public (get-choices-updater)
    choices-updater)


  (method public (set-choices-updater value)
    (set! choices-updater value)
    (when (and (eq? kind 'pick) choices-updater)
      (set-enabled?~ (get-pick) true)))


  (method public (get-entry-test)
    entry-test)


  (method public (set-entry-test value)
    (set! entry-test value))
  
  
  ;;;
  ;;;; Menu
  ;;;
  
  
  (method protected virtual (update-choices)
    (if (and choices-updater (null? choices))
        (choices-updater self)
      true))
  
  
  (method protected virtual (new-choices-menu)
    (when choices
      (if condensed?
          (new-choices-menu-condensed)
        (new-choices-menu-plain))))
  
  
  (method protected virtual (new-choices-menu-plain)
    (when choices
      (let ((current (get-entry))
            (menu (new Context-Menu))
            (handler (either action-handler (new Event-Handler target: self method-name: 'on-action))))
        (for-each (function dynamic (choice)
                    (if (not choice)
                        (new Separator-Item parent: menu)
                      (let ((title (present-choice choice)))
                        (new Check-Item parent: menu title: title checked?: (= title current) user-data: choice action-handler: handler))))
                  choices)
        menu)))
  
  
  (method (new-choices-menu-condensed)
    (when choices
      (let ((current (get-entry))
            (menu (new Context-Menu))
            (handler (either action-handler (new Event-Handler target: self method-name: 'on-action))))
        (let ((create-leaf (function dynamic (value string parent)
                             (new Check-Item parent: parent title: string checked?: (= string current) user-data: (cons value string) action-handler: handler)))
              (get-string (function dynamic (value) (present-choice value))))
          (make-condensed-menu~ menu choices create-leaf key: get-string)
          menu))))
  
  
  ;;;
  ;;;; Control
  ;;;
  
  
  (method (highlight-pick?)
    true)

  
  ;;;
  ;;;; Enabled
  ;;;
  
  
  (method (set-enabled? flag)
    (set! enabled? flag)
    (set-enabled?~ (get-body) flag)
    (set-background~ (get-body) (if flag {Color name: White} {Color name: Medium}))
    (set-enabled?~ (get-pick) flag)
    (invalidate-view))

  
  ;;;
  ;;;; Outer
  ;;;
  
  
  (method (inner? view)
    (memq? view children))
  
  
  ;;;
  ;;;; Choice
  ;;;


  (method public (get-choices)
    choices)


  (method public (set-choices value)
    (let ((old (get-choice)))
      (set! choices value)
      (when (eq? kind 'pick)
        (set-enabled?~ (get-pick) (or choices-updater (not-null? choices))))
      (when old
        (set-value (car old)))))
  
  
  (method (get-choice)
    (entry->choice (get-entry)))
  
  
  ;;;
  ;;;; Presented
  ;;;
  
  
  (method public (present-choices)
    (format "{l detail: :reader separator: \", \"}"
            (map present-choice choices)))
  
  
  (method protected (present-choice choice)
    (when choice
      (bind (value . presented) choice
        (if (not presented)
            (value->presented value)
          (localize (first presented))))))
  
  
  ;;;
  ;;;; Value
  ;;;
  
  
  (method public (present-value value)
    (let ((choice (value->choice value)))
      (if (not choice)
          (value->presented value)
        (present-choice choice))))
  
  
  (method (value->choice value)
    (assoc value choices))
  
  
  (method public virtual (value->presented value)
    (->string (localize value)))
  
  
  (method public virtual (presented->value presented)
    presented)
  
  
  ;;;
  ;;;; Entry
  ;;;
  
  
  (method (entry->choice entry)
    (let ((test (either entry-test =)))
      (call/ec
        (lambda (return)
          (for-each (function dynamic (choice)
                      (when choice
                        (bind (value . presented) choice
                          (let ((tryout
                                  (function dynamic (string)
                                    (let ((localized (localize string)))
                                      (when (test entry localized)
                                        (return choice))))))
                            (if (not presented)
                                (tryout (value->presented value))
                              (for-each tryout presented))))))
                    choices)
          {}))))
  
  
  ;;;
  ;;;; Edition
  ;;;
  
  
  (method public (edit)
    (focus-body))
  
  
  (method (focus-body)
    (let ((text (get-body)))
      (acquire-focus~ text)
      (select-all~ text)))
  
  
  ;;;
  ;;;; Content
  ;;;
  
  
  (method public virtual (get-entry)
    (get-content))
  
  
  (method public virtual (set-entry content)
    (set-content content))
  
  
  (method public (get-content)
    (get-string-content~ (get-body)))
  
  
  (method public (set-content content)
    (set-string-content~ (get-body) (if content (localize content) "")))
  
  
  (method public (get-value)
    (let ((choice (get-choice)))
      (if (not choice)
          (if (get-enabled?~ (get-pick))
              (signal (new Parse-Error message: (format "Invalid value: {a}" (get-content))))
            (presented->value (get-content)))
        (car choice))))
  
  
  (method public (set-value value)
    (set-entry (present-value value)))
  
  
  (method public (get-modified?)
    (get-modified?~ (get-controller~ (get-body))))
  
  
  (method public (set-modified? flag)
    (set-modified?~ (get-controller~ (get-body)) flag))
  
  
  ;;;
  ;;;; Validate
  ;;;
  
  
  (method (validate-content)
    (let* ((unique? (= 1 (length choices)))
           (unique (essay unique? (car choices)))
           (unique-entry (essay unique? (present-choice unique)))
           (type (if unique? 'question 'message))
           (no (if unique? (format "Accept Unique Item: {a}" unique-entry) {})))
      (catch (Parse-Error err
               (case (message-box (get-message~ err) type: type yes: "Change It" no: no)
                 ((yes)
                  (focus-body)
                  (throw-cancel))
                 ((no)
                  (set-entry unique-entry))))
        (get-value))))
  
  
  ;;;
  ;;;; Layout
  ;;;
  
  
  (method (layout)
    (let ((size (get-size))
          (scroller (locate 'scroller))
          (pick (get-pick))
          (width (get-height)))
      (set-position~ scroller {Point 0 0})
      (set-size~ scroller (new Dimension (- (get-width~ size) width) (get-height~ size)))
      (set-position~ pick (new Point (- (get-width~ size) width) 0))
      (set-size~ pick (new Dimension width width))))))
