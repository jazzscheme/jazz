;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Combo Buttons
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2007
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.ui.view.Combo-Button jazz


(import (jazz.ui)
        (jazz.literals)
        (jazz.library)
        (jazz.utilities))


(class Combo-Button extends Push-Tool

  
  
  ;;;
  ;;;; Access
  ;;;
  
  
  (method public (get-combo)
    parent)
  
  
  ;;;
  ;;;; Control
  ;;;
  
  
  (method (get-enabled?)
    (and enabled? (get-enabled?~ parent)))
  
  
  (method (get-state)
    (child-state~ parent self))
  
  
  (method (mouse-enter)
    (enter-child~ parent self))
  
  
  (method (mouse-leave)
    (leave-child~ parent self))


  (method (mouse-down pos)
    (child-down~ parent self pos))


  (method (drag-up pos . rest)
    (child-up~ parent self pos))
  
  
  ;;;
  ;;;; Popup
  ;;;
  
  
  (method (close-popups (event: event {}) (all?: all? false) (exclude: exclude {}))
    (unless (memq? event '(mouse-down double-click))
      (nextmethod event: event all?: all? exclude: exclude)
      (invalidate-view)))
  
  
  ;;;
  ;;;; Mouse
  ;;;


  (method (down)
    (when (get-enabled?)
      (when (= (get-kind~ parent) 'pick)
        (process-action self))))


  (method (up)
    (when (= (get-kind~ parent) 'choose)
      (process-action self)))
  
  
  ;;;
  ;;;; Drawing
  ;;;
  
  
  (method (light-pen)
    {Pen name: Light-Background})
  
  
  (method (dark-pen)
    {Pen name: Dark})
    
    
  (method (draw-inactive dc)
    (when (highlight-pick?~ parent)
      (with ((bounds (get-bounds)))
        (frame-rect~ dc bounds (if (get-enabled?) {Color name: Light} {Color name: Medium})))))
  
  
  (method (draw-tool dc context)
    (case (get-kind~ parent)
      ((pick) (draw-arrow dc))
      ((choose) (draw-ellipsis dc))))
  
  
  (method (draw-arrow dc)
    (set-pen~ dc (if (get-enabled?) {Pen name: Black} {Pen name: Dark}))
    (let* ((size (get-size))
           (offset (get-offset))
           (h (+ offset (- (floor (/ [width size] 2)) 2)))
           (v (+ offset (- (floor (/ [height size] 2)) 1))))
      (draw-arrow-tip~ dc h v 3 'down)))
  
  
  (method (draw-ellipsis dc)
    (let* ((size (get-size))
           (offset (get-offset))
           (title "...")
           (extent (get-text-extent~ dc title))
           (pos (justify extent size 'center)))
      (set-text-color~ dc {Color name: Black})
      (draw-text~ dc [h pos] [v pos] title enabled?)))
  
  
  (method (get-offset)
    (if (memq? (get-state) '(pushed choose))
        1
      0))))
