;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Combo Text View
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2007
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.ui.view.Combo-Text-View jazz


(import (jazz.ui)
        (jazz.library)
        (jazz.utilities))


(class Combo-Text-View extends IDE-Text-View
  
  
  ;;;
  ;;;; Access
  ;;;
  
  
  (method (get-combo)
    (get-parent~ (get-parent~ parent)))
    

  ;;;
  ;;;; Actions
  ;;;
  
  
  (method (focus-actions)
    (cons (find-actions 'combo-text)
          (nextmethod)))
  
  
  (method (on-push-button evt)
    (let ((combo (get-combo)))
      (push-button~ combo)))

  
  ;;;
  ;;;; Keyboard
  ;;;
  
  
  (method (return-press key)
    (content-change~ (get-combo) 'return))
  
  
  ;;;
  ;;;; Completion
  ;;;
  
  
  (method (complete-name? size)
    (>= size 1))


  (method (favorite-completions)
    '())
  
  
  (method (symbol-completions name favorites)
    (let* ((combo (get-combo))
           (choices (get-choices~ combo))
           (domain (map (function dynamic (choice) (present-choice~ combo choice)) choices))
           (completer (new Symbol-Completer domain)))
      (complete~ completer name)))))
