;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Docked Root
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2007
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.ui.view.Docked-Root jazz


(import (jazz.utilities)
        (jazz.library)
        (jazz.jml)
        (jazz.ui)
        (jazz.ui.window)
        (jazz.ui.view)
        (jazz.system)
        (jazz.literals))


(class Docked-Root extends Root-View
    
  
  (property fullscreen? initialize #f accessors generate)
  (property caption?    initialize #t  accessors generate)
  (property zoomable?   initialize #t  accessors generate)

  
  (form
    (<install>
      (<Layout-View> name: tools size: {Dimension 0 22} layout-type: flow mouse-down-handler: {Event-Handler :form on-mouse-down})
      (<Push-Tool>   name: close size: {Dimension 22 22} location: tail tooltip?: #t tooltip-text: "Close" image-name: {Bitmap-Resource "Close"} portfolio: :icons action-handler: {Event-Handler :root on-close})))
  
  
  ;; super patch until workspace completion
  (method (super-patch-application?)
    #t)
  
  
  (method (finish rest)
    (nextmethod rest)
    (when (super-patch-application?)
      (close~ (child 'close))))
    
  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method (size-change size)
    (nextmethod size)
    (invalidate-top)
    (invalidate-border insets: {Rect 2 2 2 2}))
  
  
  ;; This version which is not complete really closes the docked.
  ;; For this to work correctly code will have to be modified not
  ;; to rely on any palette being there.
  @code-will-have-to-be-modified-for-this-to-work
  (method (on-close evt)
    (let* ((host player)
           (parent (get-parent~ host))
           (grand (get-parent~ parent)))
      (with-locked-update
        (function ()
          (set-visible?~ host #f)
          (set-parent~ host (get-toplevel))
          (cond ((is? parent Splitter-Window)
                 (let ((other (first-window~ parent)))
                   (when other
                     (if (is? parent Workspace-Splitter)
                         (begin
                           (set-mode~ parent 'zoom)
                           (layout-window~ parent))
                       (set-location~ other (get-location~ parent))
                       (set-parent~ other grand)
                       (close~ parent)
                       (layout-window~ grand)))))
                ((is? parent Pad-Window)
                 (close)
                 (let ((other (first-child~ parent)))
                   (set-location~ other 'selection)
                   (layout-window~ parent))))))))
  
  
  (method (on-close evt)
    (hide-splitted))
  
  
  (method public (hide-splitted)
    (let* ((host player)
           (parent (get-parent~ host))
           (grand (get-parent~ parent)))
      (with-locked-update
        (function ()
          (set-visible?~ host #f)
          (set-parent~ host (get-toplevel))
          (cond ((is? parent Splitter-Window)
                 (let ((other (first-window~ parent)))
                   (when other
                     (if (is? parent Workspace-Splitter)
                         (begin
                           (set-mode~ parent 'zoom)
                           (layout-window~ parent))
                       (set-location~ other (get-location~ parent))
                       (set-parent~ other grand)
                       (close~ parent)
                       (layout-window~ grand)))))
                ((is? parent Pad-Window)
                 (close)
                 (let ((other (first-child~ parent)))
                   (set-location~ other 'selection)
                   (layout-window~ parent))))))))

  
  ;;;
  ;;;; Activation
  ;;;
  
  
  (method (mouse-activate)
    (acquire-focus~ (get-player)))
  
  
  (method (root-activate)
    (invalidate-caption))
  
  
  (method (root-deactivate)
    (invalidate-caption))

  
  ;;;
  ;;;; Tools
  ;;;
  
  
  (method public (install-tools)
    (let* ((host player)
           (guest (get-guest~ host))
           (view (get-tools-view~ guest)))
      (when view
        (let ((tools (get-children~ view))
              (dest (locate 'tools)))
          (for-each (function (tool)
                      (set-location~ tool 'tail)
                      (set-parent~ tool dest))
                    tools)
          (layout-view~ dest)
          (set-visible?~ view #f)
          (set-size~ dest (new Dimension (tools-width tools) 22))
          (layout-view)
          (layout-view~ guest)))))
  
  
  (method (tools-width tools)
    (let ((total 0))
      (for-each (function (tool)
                  (when (get-visible?~ tool)
                    (increase! total (get-width~ (get-size~ tool)))))
                tools)
      total))
  
  
  ;; Because moving tools around will mess finding the :form destination.
  ;; Note that it's not as simple as updating the form-level slots because the buttons
  ;; are moved to a view that is not even a child of the :form guest destination!
  (method (redirect-handler handler sender)
    (if (or (and (super-patch-application?) (eq? sender (locate-component 'close))) (is? sender Item))
        (nextmethod handler sender)
      (let ((name (get-target-name~ handler)))
        (if (eq? name :form)
            (let* ((host player)
                   (guest (get-guest~ host)))
              guest)
          (nextmethod handler sender)))))
  

  ;;;
  ;;;; Layout
  ;;;
  
  
  (method (layout)
    (let ((width (get-width))
          (height (get-height))
          (tools (locate 'tools))
          ;; locate-component because of super-patch-application?
          (close (locate-component 'close))
          (content (get-content)))
      (cond (fullscreen?
             (set-visible?~ tools #f)
             (when close
               (set-visible?~ close #f))
             (set-position~ content {Point 0 0})
             (set-size~ content (new Dimension width height)))
            (caption?
             (layout-tools width)
             (when close
               (set-position~ close (new Point (- width 25) 2)))
             (set-visible?~ tools #t)
             (when close
               (set-visible?~ close #t))
             (set-position~ content {Point 1 25})
             (set-size~ content (new Dimension (- width 4) (- height 28))))
            (else
             (set-visible?~ tools #f)
             (when close
               (set-visible?~ close #f))
             (set-position~ content {Point 1 1})
             (set-size~ content (new Dimension (- width 4) (- height 4)))))))
  
  
  (method (layout-tools width)
    (let* ((tools (locate 'tools))
           (size (get-size~ tools))
           (close-width (if (super-patch-application?) 0 22)))
      (set-position~ tools (new Point (- width 3 close-width (get-width~ size)) 2))))


  ;;;
  ;;;; Rects
  ;;;
  
  
  (method (menu-rect)
    (if (collect-others player)
        (new Rect 1 1 31 25)
      (new Rect 1 1 25 25)))
  
  
  (method (caption-rect)
    (new Rect 1 1 (- (get-width) 2) 24))
  
  
  (method (top-rect)
    (new Rect 1 1 (- (get-width) 2) 25))


  ;;;
  ;;;; Update
  ;;;
  
  
  (method (invalidate-top)
    (invalidate-rect (top-rect)))
  
  
  (method (invalidate-caption)
    (invalidate-rect (caption-rect)))


  ;;;
  ;;;; Drawing
  ;;;
  
  
  (definition Active-Colors
    (list {Color name: Dark-Red} {Color red: 255 green: 70 blue: 70}))
  
  @wait-this-is-to-distinguish-with-stable
  (definition Active-Colors
    (list {Color red: 0 green: 84 blue: 227} {Color red: 61 green: 149 blue: 255}))
  
  
  (definition Frame-Dark-Brush
    {Color red: 128 green: 128 blue: 128})
  
  (definition Frame-Medium-Pen
    (new Pen color: {Color red: 142 green: 142 blue: 142}))
  
  (definition Frame-Light-Pen
    (new Pen color: {Color red: 160 green: 160 blue: 160}))

  
  (method (draw surface context update lh lv)
    (let ((bounds (get-bounds))
          (caption (new Rect 2 2 (get-h~ (get-position~ (locate 'tools))) 24)))
      (let* ((host player)
             (guest (get-guest~ host))
             (icon (view-icon))
             (title (localize (get-title~ host)))
             (width (get-width))
             (height (get-height))
             (focused? (eq? self (get-focused-root))))
        (frame-rect~ surface (new Rect (get-left~ bounds) (get-top~ bounds) (- (get-right~ bounds) 2) (- (get-bottom~ bounds) 2)) Frame-Dark-Brush)
        (set-pen~ surface {Pen name: Light})
        (line~ surface 1 1 (- width 3) 1)
        (line~ surface 1 1 1 24)
        (when caption?
          (if focused?
              (gradient-fill~ surface caption (first Active-Colors) (second Active-Colors))
            (fill-rect~ surface caption {Color name: Medium}))
          (draw-image~ (get-icons-cache~ (get-application)) surface context icon 4 5)
          (let ((o (collect-others host)))
          (when o
            (set-pen~ surface (if focused? {Pen name: White} {Pen name: Black}))
            (draw-arrow-tip~ surface 24 12 3 'down))
          (set-font~ surface {Font name: Default-GUI})
          (set-text-color~ surface (if focused? {Color name: White} {Color name: Black}))
          (draw-text~ surface (if o 35 22) 7 title)
          (set-pen~ surface {Pen name: Dark})
          (line~ surface 1 24 (- width 3) 24)))
        (set-pen~ surface Frame-Medium-Pen)
        (line~ surface (- width 2) 1 (- width 2) height)
        (line~ surface 1 (- height 2) width (- height 2))
        (set-pen~ surface Frame-Light-Pen)
        (line~ surface (- width 1) 2 (- width 1) (- height 1))
        (line~ surface 2 (- height 1) (- width 1) (- height 1)))))
  

  ;;;
  ;;;; Mouse
  ;;;

  
  (method (mouse-down pos)
    (cond ((in-rect? pos (menu-rect))
           (select-menu))
          ((in-rect? pos (caption-rect))
           (toggle-docked pos))))
  
  
  (method (toggle-docked pos)
    @wait-Font
    (let* ((host player)
           (parent (get-parent~ host)))
      (when (is? parent Pad-Window)
        (let* ((title (localize (get-title~ host)))
               (font {Font name: Default-GUI})
               (h (+ 28 (text-width~ font title))))
          (when (< (get-h~ pos) h)
            (with-locked-update
              (function ()
                (select-next~ parent))))))))
  
  
  (method (double-click pos)
    (when zoomable?
      (let* ((host (get-host))
             (parent (get-parent~ host))
             (target (if (is? parent Pad-Window) parent host)))
        (if (shift-down?)
            (toggle-full-screen~ (get-application) target)
          (let ((splitter (if (is? parent Pad-Window) (get-parent~ parent) parent)))
            (when (is? splitter Splitter-Window)
              (with-locked-update
                (function ()
                  (if (eq? (get-state~ splitter) 'split)
                      (zoom~ splitter target)
                    (unzoom~ splitter))))))))))
  

  ;;;
  ;;;; Menu
  ;;;
  
  
  (method (select-menu)
    (let* ((host player)
           (others (collect-others host)))
      (when others
        (let ((menu (new Context-Menu)))
          (for-each (function (docked)
                      (let* ((guest (get-guest~ docked))
                             (title (get-title~ docked))
                             (icon (view-icon~ guest)))
                        (new Label-Item parent: menu title: title icon: icon action-handler: (new Event-Handler target: self method-name: 'on-select properties: (list host: docked)))))
                    others)
          (layout-menu~ menu)
          (track-popup-menu menu {Point 2 25})))))
  
  
  (method (collect-others host)
    (let ((pad (get-parent~ player)))
      (when (is? pad Pad-Window)
        (collect-if (function (hst)
                      (neq? hst host))
                    (get-children~ pad)))))
  
  
  (method (on-select evt)
    (let ((parent (get-parent~ player))
          (host (get-property~ evt host:)))
      (with-locked-update
        (function ()
          (set-selection~ parent host)
          (acquire-focus~ host)))))))
