;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Labels
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2007
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.ui.view.Label-View jazz


(import (jazz.ui)
        (jazz.designer)
        (jazz.library)
        (jazz.literals)
        (jazz.utilities))


(class Label-View extends View


  (property justification initialize 'head               getter get-justification setter set-justification)
  (property color         initialize {Color name: Black} getter get-color         setter set-color)
  (property shadow?       initialize false               getter get-shadow?       setter set-shadow?)
  
  
  (method (default-size)
    {Dimension 100 16})
  
  
  ;;;
  ;;;; Access
  ;;;
  
  
  (method public (get-justification)
    justification)
  
  
  (method public (set-justification value)
    (set! justification value)
    (invalidate-view))


  (method public (get-color)
    color)


  (method public (set-color value)
    (set! color value)
    (invalidate-view))


  (method public (get-shadow?)
    shadow?)


  (method public (set-shadow? value)
    (set! shadow? value)
    (invalidate-view))

  
  ;;;
  ;;;; Title
  ;;;
  
  
  (method protected virtual (label-title)
    title)

  
  ;;;
  ;;;; Layout
  ;;;
  
  
  (method (preferred-size)
    (let ((title (localize (label-title))))
      (if (not title)
          (default-size)
        (new Dimension (text-width~ font title) 16))))
  
  
  ;;;
  ;;;; Draw
  ;;;
  
  
  (method (draw dc context update lh lv)
    (let* ((title (localize (either (label-title) "")))
           (extent (get-text-extent~ dc title))
           (justification (if (pair? justification) justification (list justification 'center)))
           (pos (justify extent (get-size) justification)))
      (when shadow?
        (set-text-color~ dc {Color name: Dark-Gray})
        (draw-text~ dc (+ [h pos] 2) (+ [v pos] 2) title))
      (set-text-color~ dc color)
      (draw-text~ dc [h pos] [v pos] title enabled?)))


  ;;;
  ;;;; Designer
  ;;;
  
  
  @convert-descriptor
  (method meta (property-presentation property)
    (case (field-name property)
      ((justification) "Justification")
      ((color)         "Color")
      ((shadow?)       "Shadow")
      (else (nextmethod property))))
  
  
  (method (get-row-instance property)
    (case (field-name property)
      @wait-because-a-justification-can-legally-be-a-pair
      ((justification) (new Justification-Combo-Row))
      ((color) (new Color-Row))
      ((shadow?) (new Boolean-Row))
      (else (nextmethod property))))
  
  
  (method (get-categorized-properties)
    '(class-info name-info
      title background color
      font justification shadow? auto-size?)))


;;;
;;;; Justification-Combo-Row
;;;


(class Justification-Combo-Row extends Combo-Row
  
  
  (definition Justification-Choices
    '((head "Head")
      (center "Center")
      (tail "Tail")))
  
  
  (method (initialize . rest)
    (apply nextmethod rest)
    (set-choices Justification-Choices))))
