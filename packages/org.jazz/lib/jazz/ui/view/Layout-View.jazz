;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Layout View
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2007
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.ui.view.Layout-View jazz


(import (jazz.utilities)
        (jazz.ui)
        (jazz.library)
        (jazz.designer))


(class Layout-View-Class extends View-Class
  
  
  ;;;
  ;;;; Designer
  ;;;
  
  
  (method (get-class-image)
    {Bitmap-Resource "Layout"})
  
  
  (method (property-presentation property)
    (case (field-name property)
      ((layout-type)          "Layout Type")
      ((layout-insets)        "Layout Insets")
      ((layout-justification) "Layout Justification")
      ((layout-padding)       "Layout Padding")
      (else (nextmethod property)))))

   
(class Layout-View metaclass Layout-View-Class extends View
  
  
  ;; layout-type is one of
  ;;   fill    : children take all the space
  ;;   center  : children are centered in the view
  ;;   justify : using the logic of the justify method
  ;;   border  : location is one of north east west south center
  ;;   flow    : one after the other toolbar like
  ;;
  ;; each layout type will consult the location property of the children for layout specific information
  
  
  (property layout-type          initialize {}             getter get-layout-type          setter set-layout-type)
  (property layout-insets        initialize {Rect 0 0 0 0} getter get-layout-insets        setter set-layout-insets)
  (property layout-justification initialize 'center        getter get-layout-justification setter set-layout-justification)
  (property layout-padding       initialize 0              getter get-layout-padding       setter set-layout-padding)
  
  
  ;;;
  ;;;; Access
  ;;;
  
  
  (method public (get-layout-type)
    layout-type)
  
  
  (method public (set-layout-type type)
    (when (/= type layout-type)
      (set! layout-type type)
      (when layout-type
        (layout-view))))
  
  
  (method public (get-layout-insets)
    layout-insets)
  
  
  (method public (set-layout-insets insets)
    (set! layout-insets insets)
    (when layout-type
      (layout-view)))
  
  
  (method public (get-layout-justification)
    layout-justification)
  
  
  (method public (set-layout-justification just)
    (set! layout-justification just)
    (when layout-type
      (layout-view)))
  
  
  (method public (get-layout-padding)
    layout-padding)
  
  
  (method public (set-layout-padding pad)
    (set! layout-padding pad)
    (when layout-type
      (layout-view)))

  
  ;;;
  ;;;; Outer
  ;;;
  
  
  (method (inner? view)
    (memq? view children))

  
  ;;;
  ;;;; Layout
  ;;;
  
  
  (method (layout)
    (case layout-type
      ((fill)
        (let ((position (fill-position))
              (size (fill-size)))
          (for-each (function dynamic (child)
                      (when (is? child View)
                        (set-position~ child position)
                        (set-size~ child size)))
                    children)))
      ((center)
        (let ((size (get-size)))
          (for-each (function dynamic (child)
                      (when (is? child View)
                        (let ((pos (center (get-size~ child) size)))
                          (set-position~ child pos))))
                    children)))
      ((justify)
        (with ((bounds (get-bounds))
               (rect (expand-rect bounds (get-left~ layout-insets) (get-top~ layout-insets) (- (get-right~ layout-insets)) (- (get-bottom~ layout-insets))))
               (topleft (rect-position rect))
               (size (rect-size rect)))
          (for-each (function dynamic (child)
                      (when (is? child View)
                        (let* ((justification (either (get-location~ child) layout-justification))
                               (pos (+ topleft (justify (get-size~ child) size justification))))
                          (set-position~ child pos))))
                    children)))
      ((border)
        (with ((ly (new Border-Layout)))
          (layout~ ly children (get-width) (get-height) insets: layout-insets)))
      ((flow)
        (with ((ly (new Flow-Layout insets: layout-insets padding: layout-padding)))
          (layout~ ly children (get-width) (get-height))))))
  
  
  (method protected virtual (fill-position) <Point>
    (new Point (get-left~ layout-insets) (get-top~ layout-insets)))
  
  
  (method protected virtual (fill-size) <Dimension>
    (- (get-size) (new Dimension (+ (get-left~ layout-insets) (get-right~ layout-insets)) (+ (get-top~ layout-insets) (get-bottom~ layout-insets)))))

  
  ;;;
  ;;;; Designer
  ;;;
  
  
  (method (get-row-instance property)
    (case (field-name property)
      ((layout-type) (new Type-Combo-Row))
      ((layout-justification) (new Justification-Combo-Row))
      ((layout-insets) (new Rect-Row))
      (else (nextmethod property)))))


;;;
;;;; Type-Combo-Row
;;;


(class Type-Combo-Row extends Combo-Row
  
  
  (definition Choices
    '((() "None")
      (fill "Fill")
      (center "Center")
      (justify "Justify")
      (border "Border")
      (flow "Flow")))
  
  
  (method (initialize . rest)
    (apply nextmethod rest)
    @convert
    (set-choices Choices)))


;;;
;;;; Justification-Combo-Row
;;;


(class Justification-Combo-Row extends Combo-Row
  
  
  (definition Choices
    '((() "None")
      (head "Head")
      (center "Center")
      (tail "Tail")
      ((head center) "Head Center")))
  
  
  (method (initialize . rest)
    (apply nextmethod rest)
    @convert
    (set-choices Choices))))
