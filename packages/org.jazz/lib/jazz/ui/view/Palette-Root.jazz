;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Palette Root
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2007
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.ui.view.Palette-Root jazz


(import (jazz.jazz)
        (jazz.jazz.debuggee)
        (jazz.jml)
        (jazz.platform)
        (jazz.ui)
        (jazz.ui.resizer)
        (jazz.ui.window)
        (jazz.library)
        (jazz.system)
        (jazz.utilities))


(class Palette-Root extends Caption-Root
  
  
  (slot active?      initialize #f)
  (slot dragging?    initialize #f)
  (slot current-part)
  (slot old-position)

  
  (form
    (<install>
      (<Frame-Button> name: minimize type: minimize tooltip?: #t tooltip-text: "Minimize" action-handler: {Event-Handler form: on-minimize})
      (<Frame-Button> name: maximize type: maximize tooltip?: #t tooltip-text: "Maximize" action-handler: {Event-Handler form: on-maximize})
      (<Frame-Button> name: close    type: close tooltip?: #t tooltip-text: "Close" action-handler: {Event-Handler form: on-close})))
    

  ;;;
  ;;;; Rects
  ;;;
  
  
  (method (minimize-rect top right)
    (new Rect (- right 52) (+ top 2) (- right 36) (+ top 16)))
  
  
  (method (maximize-rect top right)
    (new Rect (- right 36) (+ top 2) (- right 20) (+ top 16)))
  
  
  (method (close-rect top right)
    (new Rect (- right 18) (+ top 2) (- right  2) (+ top 16)))

  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method (size-change size)
    (nextmethod size)
    (invalidate-caption)
    (invalidate-border insets: {Rect 4 4 4 4}))
  
  
  (method (on-minimize evt)
    (unimplemented 'on-minimize))
  
  
  (method (on-maximize evt)
    (unimplemented 'on-maximize))
  
  
  (method (on-close evt)
    (hide~ player))

  
  ;;;
  ;;;; Activation
  ;;;
  
  
  (method public (activate-palette)
    (unless active?
      (set! active? #t)
      (invalidate-caption)))
  
  
  (method public (deactivate-palette)
    (when active?
      (set! active? #f)
      (invalidate-caption)))
    

  ;;;
  ;;;; Layout
  ;;;
  
  
  (method (layout)
    (let* ((bounds (get-bounds))
           (top 4)
           (right (- (get-right~ bounds) 4)))
      (layout-buttons)
      (let ((content (get-content)))
        (set-position~ content {Point 4 23})
        (set-size~ content (new Dimension (- (get-width) 8) (- (get-height) 27))))))
  
  
  (method (layout-buttons)
    (let* ((border (buttons-border))
           (top border)
           (bounds (get-bounds))
           (right (- (get-right~ bounds) border)))
      (set-rect~ (locate 'minimize) (minimize-rect top right))
      (set-rect~ (locate 'maximize) (maximize-rect top right))
      (set-rect~ (locate 'close) (close-rect top right))))
  
  
  (method protected virtual (buttons-border)
    (if (caption-visible?) 4 0))


  ;;;
  ;;;; Update
  ;;;
  
  
  (method (invalidate-caption)
    (invalidate-rect (new Rect 4 4 (- (get-width) 4) 23)))
  

  ;;;
  ;;;; Caption
  ;;
  
  
  (method (caption-rect)
    (new Rect 4 4 (- (get-width) 4) 22))
  
  
  (method (caption-icon)
    {})
  
  
  (method (caption-title)
    (get-window-title~ player))
  
  
  (method (caption-focused?)
    #t)
  
  
  (method (caption-visible?)
    #t)


  ;;;
  ;;;; Drawing
  ;;;

  
  (method (draw dc context update lh lv)
    (with ((bounds (get-bounds))
           (caption (new Rect 4 4 (- (get-right~ bounds) 4) 22)))
      (draw-edge~ dc bounds inner: 'raised outer: 'raised edges: 'rectangle)
      (draw-caption dc context)))
  
  
  (method (title-offset)
    {Point 3 3})


  ;;;
  ;;;; Cursor
  ;;;


  (method (cursor-update pos)
    (let ((part (find-resize-part pos (get-size))))
      (if (not part)
          (set-cursor :arrow)
        (set-cursor (get-resize-cursor part)))))
  

  ;;;
  ;;;; Mouse
  ;;

  
  (method (mouse-down pos)
    (let ((in-caption? (in-rect? pos (caption-rect))))
      (if (and in-caption? (alt-down?))
          (let ((player (get-player)))
            (hide~ player)
            (unimplemented)
            @convert
            (pick-figure dock-to))
      (if (and in-caption? (control-down?))
          (send-to-back~ player)
        (let ((part (find-resize-part pos (get-size))))
          (when (or part in-caption?)
            (set! dragging? #t)
            (set! current-part part)
            (set! old-position (to-desktop pos))
            (acquire-capture)))))))
  
  
  (method (drag-move pos)
    (when dragging?
      (let* ((pos (to-desktop pos))
             (delta (- pos old-position))
             (dh (get-h~ delta))
             (dv (get-v~ delta)))
        (if (not current-part)
            (move-window~ player (get-h~ delta) (get-v~ delta))
          (size-client dh dv current-part
            (function dynamic (dh dv dwidth dheight)
              (size-window~ player dwidth dheight)
              (move-window~ player dh dv))))
        (update-window~ player)
        (update-window~ (get-toplevel))
        (set! old-position pos))))
  
  
  (method (drag-up pos . rest)
    (when dragging?
      (release-capture)
      (set! dragging? #f)))
  
  
  (method (context-menu pos)
    (track-popup-menu (new Palette-Menu) pos))
  
  
  ;;;
  ;;;; Docking
  ;;;
  
  
  (method (dock-palette)
    (unimplemented)
    @convert
    (pick-figure dock-to
                 :include 'toplevel
                 feedback: dock-feedback))
  
  
  (method (dock-feedback picker figure pos)
    @w
    (set-feedback-rect self (figure-rect self figure)))
  
  
  @w
  (method meta (figure-rect picker figure)
    (when (is? figure View)
      (let ((player (get-player~ figure))
            (display (get-display~ figure))
            (root (get-root~ figure)))
        (acquire~ (get-parent~ picker) player (acquire~ root display (get-bounds~ display))))))
  

  (method (dock-to window position to-view pos)
    (let ((to-player (get-player~ to-view)))
      (if (is-not? to-player View-Host)
          (bell)
        (let ((to-guest (get-guest~ to-view))
              (to-pad (find-ascendant~ to-player Pad-Window)))
          (if (null? to-pad)
              (bell)
            (let* ((player (get-player))
                   (guest (get-guest))
                   (title (get-title~ player)))
              (set-parent~ guest {})
              (unanchor-guest~ player)
              (close~ player)
              (let ((new-host (new Host-Docked parent: to-pad)))
                (set-title~ new-host title)
                (set-guest~ new-host guest)
                (set-selection~ to-pad new-host)))))))))


;;;
;;;; Menu
;;;


(class Palette-Menu extends Context-Menu
  
  
  (form
    (<install>
      (<Label-Item> name: dock title: "&Dock" action-handler: {Event-Handler form: on-dock})))
  
  
  (method (on-dock evt)
    @convert
    (dock-palette))))
