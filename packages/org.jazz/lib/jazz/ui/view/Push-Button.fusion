;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Push Buttons
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2007
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.ui.view.Push-Button jazz


(import (jazz.literals)
        (jazz.library)
        (jazz.ui)
        (jazz.ui.view)
        (jazz.utilities))


(class Push-Button extends View
  
  
  (property default? initialize #f getter get-default? setter set-default?)
  (property flat?    initialize #f getter get-flat?    setter set-flat?)
  
  
  (slot state initialize 'inactive)
  
  
  (method (mouse-activate?)
    #f)
  
  
  ;;;
  ;;;; Access
  ;;;
  
  
  (method public (get-default?)
    default?)
  
  
  (method public (set-default? flag)
    (set! default? flag)
    (invalidate-view))


  (method public (get-flat?)
    flat?)


  (method public (set-flat? value)
    (set! flat? value))
  
  
  ;;;
  ;;;; State
  ;;;
  
  
  (method public (get-state)
    state)
  
  
  (method public (set-state value)
    (set! state value)
    (invalidate-view))
  
  
  ;;;
  ;;;; Layout
  ;;;
  
  
  (method (default-size)
    {Dimension 100 22})
  
  
  (method (preferred-size)
    (let ((title (localize title)))
      (if (not title)
          (default-size)
        (new Dimension (+ (get-width~ (text-extent~ font title)) 50) 22))))
  
  
  ;;;
  ;;;; Mouse
  ;;;


  (method (mouse-enter)
    (when (and (get-enabled?) (or (not mouse-down?) (eq? mouse-down-view self)))
      (case (get-state)
        ((inactive) (set-state 'highlighted))
        ((out-pushed) (set-state 'pushed)))))


  (method (mouse-leave)
    (when (and (get-enabled?) (or (not mouse-down?) (eq? mouse-down-view self)))
      (case (get-state)
        ((highlighted) (set-state 'inactive))
        ((pushed) (set-state 'out-pushed)))))
  
  
  (method (mouse-down pos)
    (when (get-enabled?)
      (set-state 'pushed)))
  
  
  (method (drag-up pos . rest)
    (when (get-enabled?)
      (unwind-protect
          (up)
        (case (get-state)
          ((pushed) (set-state 'highlighted))
          ((out-pushed) (set-state 'inactive))))))


  (method (up)
    (when (= (get-state) 'pushed)
      (process-action self)))
  
  
  ;;;
  ;;;; Drawing
  ;;;
  
  
  (method (draw dc context update lh lv)
    (let ((title (either (localize title) ""))
          (offset (case state ((pushed) 1) (else 0)))
          (rect (get-bounds))
          (enabled? (get-enabled?)))
      (when default?
        (frame-rect~ dc rect (if enabled? {Color name: Black} {Color name: Dark}))
        (set! rect (inflate-rect rect -1 -1)))
      (if flat?
          (draw-edge~ dc rect outer: 'raised edges: 'rectangle)
        (draw-push-button~ dc rect (if (eq? state 'pushed) #t #f)))
      (let* ((size (get-size))
             (width (get-width~ size))
             (height (get-height~ size))
             (extent (get-text-extent~ dc title))
             (h (quotient (- width (get-width~ extent)) 2))
             (v (quotient (- height (get-height~ extent)) 2)))
        (set-text-color~ dc {Color name: Black})
        (draw-text~ dc (+ h offset) (+ v offset) title enabled?))))


  ;;;
  ;;;; Designer
  ;;;
  
  
  @convert-descriptor
  (method meta (property-presentation property)
    (case (field-name property)
      ((default?) "Default")
      ((flat?) "Flat")
      (else (nextmethod property))))

  
  (method (get-row-instance property)
    (case (field-name property)
      ((default? flat?) (new Boolean-Row))
      (else (nextmethod property))))))
