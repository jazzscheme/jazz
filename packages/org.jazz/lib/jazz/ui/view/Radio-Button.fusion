;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Radio Buttons
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2007
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.ui.view.Radio-Button jazz


(import (jazz.library)
        (jazz.literals)
        (jazz.platform)
        (jazz.system)
        (jazz.ui)
        (jazz.ui.window)
        (jazz.utilities))


(class Radio-Button extends View implements (Groupable Selectable)
  
  
  (definition box-size
    13)
  
  
  (property group     initialize {}    getter get-group     setter set-group)
  (property selected? initialize false getter get-selected? setter set-selected?)
    
  
  (slot tracking? initialize false)
  (slot inside?   initialize false)
  
  
  (method (default-size)
    {Dimension 100 16})

  
  ;;;
  ;;;; Groupable
  ;;;


  (method (get-group)
    group)


  (method (set-group value)
    (set! group value))

  
  ;;;
  ;;;; Selectable
  ;;;


  (method (get-selected?)
    selected?)
  

  (method (set-selected? flag)
    (when (/= flag selected?)
      (let ((current (get-current-selection)))
        (set-selected-state flag)
        (when current
          (set-selected-state~ current (not flag))))))
  
  
  (method (unselect)
    (when selected?
      (set-selected-state false)))
  
  
  (method (get-current-selection)
    (find-if (function dynamic (child)
               (and (is? child Radio-Button)
                    (get-selected?~ child)))
             (get-children~ parent)))
  
  
  (method (set-selected-state flag)
    (set! selected? flag)
    (invalidate-view))
  
  
  ;;;
  ;;;; Drawing
  ;;;
  
  
  (method (draw dc context update lh lv)
    (let* ((title (either (localize title) ""))
           (height (if (or (not title) (empty-string? title)) 13 (get-height~ (get-text-extent~ dc title))))
           (h 18)
           (v (quotient (- (get-height) height) 2)))
      (draw-radio-button~ dc (new Rect 0 (+ v 1) box-size (+ v box-size 1)) :selected? selected? :inactive? (or (not enabled?) (and tracking? inside?)))
      (set-text-color~ dc {Color name: Black})
      (draw-text~ dc h v title enabled?)))
  
  
  ;;;
  ;;;; Mouse
  ;;;
  
  
  (method (mouse-down pos)
    (when enabled?
      (set! tracking? true)
      (set! inside? true)
      (acquire-capture)
      (invalidate-view)))
  
  
  (method (drag-move pos)
    (when tracking?
      (let ((over? (over-view? pos)))
        (when (neq? over? inside?)
          (set! inside? over?)
          (invalidate-view)))))
  
  
  (method (drag-up pos . rest)
    (when tracking?
      (release-capture)
      (set! tracking? false)
      (when inside?
        (set-selected? (not selected?))
        (set-modified? true)
        (process-action self))))
  
  
  ;;;
  ;;;; Mouse Copy
  ;;;
  
  
  (method (cursor-update pos)
    (if (or (not (alt-down?)) (not (typed? (get-application) 'Jedi)))
        (nextmethod pos)
      (set-cursor :finger)))
  
  
  (method (mouse-copy pos destination)
    (when (typed? (get-application) 'Jedi)
      (mouse-insert~ destination title)
      true))))
