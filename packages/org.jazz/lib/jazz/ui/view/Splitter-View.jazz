;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Splitter View
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2007
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.ui.view.Splitter-View jazz


(import (jazz.jml)
        (jazz.ui)
        (jazz.literals)
        (jazz.library)
        (jazz.utilities))


(class Splitter-View extends View


  (property separator     initialize 'resize        getter get-separator     setter set-separator)
  (property state         initialize {}             getter get-state         setter set-state)
  (property orientation   initialize 'horz          getter get-orientation   setter set-orientation)
  (property mode          initialize 'absolute      getter get-mode          setter set-mode)
  (property division      initialize 100            getter get-division      setter set-division)
  (property insets        initialize {Rect 0 0 0 0} getter get-insets        setter set-insets)
  (property after-handler initialize {}             getter get-after-handler setter set-after-handler)
  
  
  (slot split-layout initialize (new Split-Layout))
  (slot bar-bounds   initialize {})
  (slot dragging?    initialize #f)
  (slot previous     initialize {})
    
  
  (form
    (<install> background: {Color name: Medium}))
 
  
  ;;;
  ;;;; Access
  ;;;


  (method public (get-separator)
    separator)


  (method public (set-separator value)
    (set! separator value))


  (method public (get-state)
    state)


  (method public (set-state value)
    (set! state value)
    (layout-view))


  (method public (get-orientation)
    orientation)
  

  (method public (set-orientation value)
    (set! orientation value)
    (layout-view))


  (method public (get-mode)
    mode)


  (method public (set-mode value)
    (set! mode value)
    (layout-view))


  (method public (get-division)
    division)


  (method public (set-division value)
    (set! division value)
    (layout-view))


  (method public (get-insets)
    insets)


  (method public (set-insets value)
    (set! insets value)
    (layout-view))
  

  (method public (get-after-handler)
    after-handler)


  (method public (set-after-handler value)
    (set! after-handler value))

  
  ;;;
  ;;;; Layout
  ;;;

  
  (method (layout)
    (let* ((size (get-size))
           (mode (if dragging? 'absolute mode))
           (width (get-width~ size))
           (height (get-height~ size))
           (div (if (> division 0) division (+ (case orientation ((horz) width) ((vert) height)) division -3))))
      (set! bar-bounds (layout~ split-layout children (get-width~ size) (get-height~ size) separator: separator state: state orientation: orientation mode: mode division: div insets: insets))))
  
  
  ;;;
  ;;;; Zoom
  ;;;
  
  
  (method public (zoom target)
    (set! state 'zoom)
    (for-each (function dynamic (child)
                (set-visible?~ child (eq? child target)))
              children)
    (layout-view))
    
  
  (method public (unzoom)
    (set! state 'split)
    (for-each (function dynamic (child)
                (set-visible?~ child #t))
              children)
    (layout-view))
  
  
  (method public (get-zoomed)
    (when (eq? state 'zoom)
      (find-if (function dynamic (child)
                 (get-visible?~ child))
               children)))
  
  
  ;;;
  ;;;; Cursor
  ;;;


  (method (cursor-update pos)
    (when (and bar-bounds (in-rect? pos bar-bounds))
      (case orientation
        ((horz) (set-cursor :vertical-splitter))
        ((vert) (set-cursor :horizontal-splitter)))))
  

  ;;;
  ;;;; Drawing
  ;;;

  
  @waiting
  (method (draw dc context update lh lv)
    (when bar-bounds
      (fill-rect~ dc bar-bounds {Color name: Light-Red})))
  
  
  ;;;
  ;;;; Convertion
  ;;;
  
  
  (method (absolute->relative division)
    (let ((size (case orientation
                  ((horz) (get-width))
                  ((vert) (get-height)))))
      (percentage division size)))
  
  
  (method (relative->absolute division)
    (let* ((size (case orientation
                   ((horz) (get-width))
                   ((vert) (get-height))))
           (pct (fxround (percent (abs division) size))))
      (if (positive? division)
          (set! division pct)
        (set! division (- size pct)))
      division))
  
  
  ;;;
  ;;;; Mouse
  ;;;
  
  
  (method (mouse-down pos)
    (set! dragging? #t)
    (set! previous (case orientation ((horz) (get-h~ pos)) ((vert) (get-v~ pos))))
    (when (eq? mode 'relative)
      (set! division (relative->absolute division)))
    (acquire-capture))
  
  
  (method (drag-move pos)
    (when dragging?
      (let* ((n (case orientation ((horz) (get-h~ pos)) ((vert) (get-v~ pos))))
             (delta (- n previous)))
        (increase! division delta)
        (set! previous n)
        (layout-view)
        (update-view)
        (call-after-handler))))
  
  
  (method (drag-up pos . rest)
    (when dragging?
      (release-capture)
      (when (eq? mode 'relative)
        (set! division (absolute->relative division)))
      (set! dragging? #f)))
 
  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method (call-after-handler)
    (when after-handler
      (invoke~ after-handler self (new Event after: self))))


  ;;;
  ;;;; Designer
  ;;;
  
  
  @convert-descriptor
  (method meta (get-class-image)
    {Bitmap-Resource "TileVertically"})

  
  @convert
  (method meta (property-presentation property)
    (case (field-name property)
      ((separator) "Separator")
      ((state) "State")
      ((orientation) "Orientation")
      ((mode) "Mode")
      ((division) "Division")
      ((insets) "Insets")
      ((after-handler) "After Handler")
      (else (nextmethod property))))))
