;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Window Player
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2007
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.ui.view.Window-Player jazz


(import (jazz.ui)
        (jazz.library)
        (jazz.utilities))


(class Window-Player extends View
  
  
  (property window-class    initialize {}  getter get-window-class    setter set-window-class)
  (property window-initargs initialize '() getter get-window-initargs setter set-window-initargs)
  
  
  (slot window initialize {})
  
  
  (method (conclude rest)
    (nextmethod rest)
    (destroy-mandatory))
  
  
  (method (destroy)
    (when window
      (close~ window)
      (set! window {}))
    (nextmethod))
  
  
  (method public (setup-window)
    (let ((player (get-player))
          (class (eval-symbol window-class creator))
          (position (acquire~ (get-root) self {Point 0 0}))
          (size (get-size)))
      (set! window (apply new-in creator class parent: player position: position size: size visible?: #f window-initargs))))

  
  ;;;
  ;;;; Access
  ;;;
  
  
  (method public (get-window-class)
    window-class)
  
  
  (method public (set-window-class class)
    (set! window-class class))
  
  
  (method public (get-window-initargs)
    window-initargs)
  
  
  (method public (set-window-initargs initargs)
    (set! window-initargs initargs))
  
  
  (method public (get-window)
    window)

  
  ;;;
  ;;;; Events
  ;;;

  
  (method (position-change position)
    (nextmethod position)
    (update-window))

  
  (method (size-change size)
    (nextmethod size)
    (when window
      (set-size~ window size)))
  
  
  (method (show)
    (nextmethod)
    (when window
      (set-visible?~ window #t)))
  
  
  (method (hide)
    (nextmethod)
    (when window
      (set-visible?~ window #f)))

  
  ;;;
  ;;;; Layout
  ;;;
  
  
  (method public (update-window)
    (when window
      (set-position~ window (acquire~ (get-root) self {Point 0 0}))))))
