;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Moniker Widget
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2007
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.ui.widget.Moniker-Widget jazz


(import (jazz.jml)
        (jazz.platform)
        (jazz.literals)
        (jazz.library)
        (jazz.ui)
        (jazz.ui.view)
        (jazz.utilities))


(class Moniker-Widget extends View
  

  (property mode                   initialize 'open getter get-mode                   setter set-mode)
  (property protocol               initialize 'file getter get-protocol               setter set-protocol)
  (property parameters             initialize '()   getter get-parameters             setter set-parameters)
  (property display-logical?       initialize {}    getter get-display-logical?       setter set-display-logical?)
  (property display-protocol?      initialize {}    getter get-display-protocol?      setter set-display-protocol?)
  (property anchors                initialize {}    getter get-anchors                setter set-anchors)
  (property moniker-update-handler initialize {}    getter get-moniker-update-handler setter set-moniker-update-handler)
  

  (form
    (<install>                                        size: {Dimension 142 22}
      (<Border-View>             name: moniker-border border-type: edge
        (<Scroller-View>         name: scroller       hscroll?: #f vscroll?: #f
          (<!>                   name: content        layout-type: fill
            (<Moniker-Text-View> name: text           accepts-returns?: #f show-unfocused-selection?: #f left-padding: 2 top-padding: 2 return-press-handler: {Event-Handler form: on-return-press} receive-files-handler: {Event-Handler form: on-receive-files}))))
      (<Push-Tool>               name: browse         image-name: {Bitmap-Resource "Open"} portfolio: :icons action-handler: {Event-Handler form: on-browse} receive-files-handler: {Event-Handler form: on-receive-files})))

  
  ;;;
  ;;;; Events
  ;;;
 
  
  (method (on-browse evt)
    (browse-moniker))
  
  
  (method (on-return-press evt)
    (when return-press-handler
      (invoke~ return-press-handler self evt)))
  
  
  (method (on-receive-files evt)
    (let ((pos (get-property~ evt :position))
          (files (get-property~ evt :files)))
      (if receive-files-handler
          ;; rectify sender in event
          (invoke~ receive-files-handler self (new Event :receive-files self :position pos :files files))
        (let ((handler (get-protocol-handler protocol)))
          (if (and (= (length files) 1) (is? (car files) handler))
              (set-moniker (car files))
            (bell))))))
    
  
  ;;;
  ;;;; Access
  ;;;


  (method public (get-mode)
    mode)


  (method public (set-mode value)
    (set! mode value)
    (let ((browse (locate 'browse)))
      (case mode
        ((open) (set-image-name~ browse {Bitmap-Resource "Open"}))
        ((save) (set-image-name~ browse {Bitmap-Resource "Save"})))))

  
  (method public (get-protocol)
    protocol)
  
  
  (method public (set-protocol value)
    (set! protocol value))


  (method public (get-parameters)
    parameters)


  (method public (set-parameters value)
    (set! parameters value))


  (method public (get-display-logical?)
    display-logical?)


  (method public (set-display-logical? value)
    (set! display-logical? value))


  (method public (get-display-protocol?)
    display-protocol?)


  (method public (set-display-protocol? value)
    (set! display-protocol? value))


  (method public (get-anchors)
    anchors)


  (method public (set-anchors value)
    (set! anchors value))


  (method public (get-moniker-update-handler)
    moniker-update-handler)


  (method public (set-moniker-update-handler value)
    (set! moniker-update-handler value))

  
  (method public (call-moniker-update)
    (if (null? moniker-update-handler)
        (moniker-update)
      (with ((event (new Event :update self)))
        (invoke~ moniker-update-handler self event))))
  
  
  (method public (get-text)
    (locate 'text))

  
  ;;;
  ;;;; Enabled
  ;;;
  
  
  (method (set-enabled? flag)
    (set! enabled? flag)
    (set-enabled?~ (locate 'text) flag)
    (set-enabled?~ (locate 'browse) flag)
    (invalidate-view))

  
  ;;;
  ;;;; Outer
  ;;;
  
  
  (method (inner? view)
    (memq? view children))
    
  
  ;;;
  ;;;; Layout
  ;;;
  
  
  (method (layout)
    (let ((size (get-size)))
      (set-position~ (locate 'moniker-border) (moniker-position size))
      (set-size~ (locate 'moniker-border) (moniker-size size))
      (set-position~ (locate 'browse) (browse-position size))
      (set-size~ (locate 'browse) (browse-size size))))
  
  
  (method (moniker-position size)
    {Point 0 1})
  
  
  (method (moniker-size size)
    (new Dimension (- [width size] 25) 19))
  
  
  (method (browse-position size)
    (new Point (- [width size] 22) 0))
  
  
  (method (browse-size size)
    {Dimension 22 22})
    
  
  ;;;
  ;;;; Browse
  ;;;
  
  
  (method public (browse-moniker)
    (let* ((handler (case mode ((open) (get-protocol-handler protocol)) ((save) SaveFile-Dialog)))
           (arguments (case mode ((open) (cons :actual (cons (get-moniker) parameters))) ((save) parameters)))
           (moniker (apply [get-modal handler] arguments)))
      (set-moniker moniker)
      (let ((text (get-text)))
        (acquire-focus~ text)
        (set-caret~ text (text-ending~ text))
        (ensure-displayed~ text :force-horizontal 'tail :reposition? true))))
    
  
  ;;;
  ;;;; Content
  ;;;

  
  (method public (get-moniker)
    (let ((string (get-string-content~ (get-text))))
      (unless (empty-string? string)
        (if (not (alias-displayed?))
            (let ((handler (get-protocol-handler protocol))
                  (list (tokenise string)))
              (anchorize~ (new-moniker~ handler list) :anchors anchors))
          (let ((content (read-string-content string)))
            (bind-values (handler list) (parse-content content)
              (let ((moniker (new-moniker~ handler list)))
                (if (is? moniker Pathname)
                    (anchorize~ moniker :anchors anchors)
                  moniker))))))))
  
  
  (method (parse-content content)
    (if (not (protocol-displayed?))
        (values (get-protocol-handler protocol) content)
      (bind (protocol . list) content
        (values (parse-protocol protocol) list))))
  
  
  (method public (set-moniker moniker . rest)
    (bind-keywords ((generate-event? true)) rest
      (set-string-content~ (get-text) (if (null? moniker) "" (present-moniker moniker)))
      (when generate-event?
        (call-moniker-update))))
  
  
  (method protected virtual (moniker-update)
    )
  
  
  (method (present-moniker moniker)
    (if (not (alias-displayed?))
        (parse~ moniker)
      (if (not (protocol-displayed?))
          (present~ moniker)
        (format "{a}: {a}"
                (get-protocol~ (class-of moniker))
                (present~ moniker)))))
  
  
  (method (alias-displayed?)
    (if (nil? display-logical?)
        (display-aliases?~ (get-application))
      display-logical?))
  
  
  (method (protocol-displayed?)
    (if (nil? display-protocol?)
        (display-protocol?~ (get-application))
      display-protocol?))
  
  
  (method (get-modified?)
    (get-modified?~ (get-controller~ (get-text))))
  
  
  (method (set-modified? flag)
    (set-modified?~ (get-controller~ (get-text)) flag))
  
  
  ;;;
  ;;;; Protocol
  ;;;
  
  
  (method (parse-protocol object)
    (if (and (symbol? object)
             (= (last object) #\colon))
        (get-protocol-handler (string->symbol (butlast object)))
      (signal (new Parse-Error :message (format "Bad protocol format: {t}" object)))))
  
  
  (method (get-protocol-handler protocol)
    ;; temp kludge for the login dialog which has a moniker widget
    ;; and is used before the preferences are loaded...
    (case protocol
      ((dir) Directory)
      ((file) File)
      (else
       (let ((pair (assq protocol (get-protocols~ (get-preferences null)))))
         (if (not pair)
             (signal (new Parse-Error :message (format "Unknown protocol: {t}" protocol)))
           (autoload (cdr pair)))))))
  
  
  ;;;
  ;;;; Validate
  ;;;
  
  
  (method (validate-content)
    (catch (Parse-Error err
             (message-box (get-message~ err) :yes "Change It")
             (focus-body)
             (throw-cancel))
      (get-moniker)))
  
  
  (method public (focus-body)
    (let ((text (get-text)))
      (acquire-focus~ text)
      (select-all~ text))))


;;;
;;;; Moniker-Text-View
;;;


(class Moniker-Text-View extends IDE-Text-View
  
  
  (method (get-scroll-context)
    (cons 0 0))))
