;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Stage
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2007
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.ui.window.Stage jazz


(import (jazz.ui)
        (jazz.ui.view)
        (jazz.ui.window)
        (jazz.ui.workspace)
        (jazz.library)
        (jazz.utilities)
        (jazz.platform))


(class Stage-Class extends View-Player-Class
  
  
  (method (initialize)
    (nextmethod)
    (register-class)))


(class Stage metaclass View-Player-Class extends View-Player
  
  
  (slot maximized?  initialize false)
  (slot fullscreen? initialize false)
  
  
  (method (new-root)
    (new Stage-Root))
  
  
  (method (size-change size)
    (nextmethod size)
    (layout-frames size))
  
  
  ;;;
  ;;;; Border
  ;;;
  
  
  (method public (get-border)
    parent)
  
  
  ;;;
  ;;;; Activation
  ;;;
  
  
  (method public virtual (stage-activate)
    (when maximized?
      (set-caption~ (get-toplevel) nil))
    (for-each-docked
      (function dynamic (view)
        (client-deactivate~ view))))
  
  
  (method public virtual (stage-deactivate)
    )
  
  
  ;;;
  ;;;; Maximized
  ;;;
  
  
  (method public (get-maximized?)
    maximized?)
  
  
  (method public (set-maximized? value)
    (when true @temporary-fix (/= value maximized?)
      (if value
          (maximize)
        (restore))))
  
  
  (method public (toggle-maximized)
    (set-maximized? (not maximized?)))
  
  
  (method public (maximize)
    (unless false @temporary-fix maximized?
            (with-locked-update
              (function dynamic ()
                (let* ((border (get-border))
                       (toplevel (get-toplevel))
                       (appl (get-application))
                       (menubar (get-menubar~ appl))
                       (current (first-window))
                       (workspace (selected-workspace)))
                  (set! maximized? true)
                  (when workspace
                    (set-maximized?~ workspace true))
                  (maximize~ toplevel)
                  (for-each (function dynamic (frame)
                              (when (get-visible?~ frame)
                                (maximize~ (get-root~ frame))
                                (maximize~ (get-guest~ frame))))
                            children)
                  (maximize~ border)
                  (when menubar
                    (maximize~ menubar))
                  (when current
                    (set-caption~ toplevel (get-window-title~ current))))))))
  
  
  (method public (restore)
    (when true @temporary-fix maximized?
          (with-locked-update
            (function dynamic ()
              (let* ((border (get-border))
                     (toplevel (get-toplevel))
                     (appl (get-application))
                     (menubar (get-menubar~ appl)))
                (set! maximized? false)
                (set-maximized?~ (selected-workspace) false)
                (restore~ toplevel)
                (for-each (function dynamic (frame)
                            (when (get-visible?~ frame)
                              (restore~ (get-root~ frame))
                              (restore~ (get-guest~ frame))))
                          children)
                (restore~ border)
                (when menubar
                  (restore~ menubar))
                (reactivate-active))))))
  
  
  ;;;
  ;;;; Full
  ;;;
  
  
  (method public (get-fullscreen?)
    fullscreen?)
  
  
  (method public (set-fullscreen? value)
    (when (/= value fullscreen?)
      (set! fullscreen? value)))
  
  
  ;;;
  ;;;; Backgound
  ;;;


  (method public (install-wallpaper)
    (install-wallpaper~ (get-root)))
  
  
  ;;;
  ;;;; Layout
  ;;;
  
  
  (method (layout-frames size)
    (when maximized?
      (for-each (function dynamic (frame)
                  (when (get-visible?~ frame)
                    (maximize-bounds~ (get-root~ frame) size)))
                children)))
  
  
  ;;;
  ;;;; Keyboard
  ;;;


  (method (key-down char)
    (when (= char #\tab)
      (let ((view (locate-component~ (get-toplevel) '(toolbar quick-find))))
        (when view
          (acquire-focus~ view)))))))
