;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Platform-dependant Window Definitions (Windows)
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2007
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;    Assem Hakmeh
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.ui.window.platform.windows jazz


(import (jazz.utilities)
        (jazz.library)
        (jazz.io)
        (jazz.platform.windows)
        (jazz.platform.cairo)
        (jazz.ui))


(definition public processed '(processed))
(definition public unprocessed '(unprocessed))


;;;
;;;;  Window
;;;


(definition public Windows-Table
  (new-hashtable eqv?))


(definition public inline (get-window hwnd)
  (let ((hwnd (if (foreign? hwnd) (foreign-address hwnd) hwnd)))
    (hash-ref Windows-Table hwnd)))


(definition public inline (set-window hwnd window)
  (hash-set! Windows-Table (foreign-address hwnd) window))


;; So that the window<->hwnd association can be made on the very first windows message
(definition in-creation {})


(definition (set-in-creation in)
  (set! in-creation in))


(definition (get-in-creation)
  in-creation)


(definition CLASS_ATOM
  #f)


(definition (window-class)
  "JWindow")


;;tofix : Transient CS_SAVEBITS
(definition (class-style)
  (bit-or CS_OWNDC CS_DBLCLKS))


(definition (class-background)
  (GetSysColorBrush COLOR_BTNFACE))


(definition (platform-erase-background handle)
  (if (not (class-background))
        processed
      unprocessed))


(definition (register-window-class)
  (let ((instance (current-instance))
        (background (class-background))
        (wc (WNDCLASS-make)))
    (WNDCLASS-style-set! wc          (class-style))
    (WNDCLASS-lpfnWndProc-set! wc    call-process-hwnd-message)
    (WNDCLASS-cbClsExtra-set! wc     0)
    (WNDCLASS-cbWndExtra-set! wc     0)
    (WNDCLASS-hInstance-set! wc      instance)
    (WNDCLASS-hIcon-set! wc          NULL) ;; specific windows (if icon (load-image~ Image 'icon icon :width 16 :height 16) NULL)
    (WNDCLASS-hCursor-set! wc        NULL)
    ;; To-Fix Remettre le handle brush
    (WNDCLASS-hbrBackground-set! wc  background)
    (WNDCLASS-lpszMenuName-set! wc   NULL)
    (WNDCLASS-lpszClassName-set! wc  "JWindow" @w class)
    (set! CLASS_ATOM (RegisterClass wc))))


(register-window-class)

  
(definition (child-style? rest)
  #t)


(definition (window-style window rest)
  (typecase window
      ((Dialog)           (bit-or (if (child-style? rest) WS_CHILD 0)
                                  WS_CLIPCHILDREN
                                  WS_CLIPSIBLINGS
                                  WS_POPUP
                                  WS_BORDER
                                  WS_OVERLAPPED
                                  WS_CAPTION
                                  WS_DLGFRAME
                                  (if (getf rest sizable?: not-found: #t) WS_THICKFRAME 0)
                                  (if (getf rest closable?: not-found: #t) WS_SYSMENU 0)))
      ((Frame)            (bit-or WS_CHILD
                                  WS_SYSMENU
                                  WS_CLIPCHILDREN
                                  WS_CLIPSIBLINGS))
      ((Message-Window)   0)
      ((Orphanage-Window) 0)
      ((Palette)          (bit-or WS_POPUP
                                  WS_CLIPCHILDREN))
      ((Popup)            (bit-or WS_POPUP
                                  WS_CLIPCHILDREN))
      @unimplemented
      ((State-Toplevel)   (bit-or WS_POPUP
                                  WS_CLIPCHILDREN))
      ((Toplevel)         (bit-or WS_CLIPSIBLINGS
                                  WS_CLIPCHILDREN
                                  WS_POPUP
                                  WS_OVERLAPPED
                                  WS_MINIMIZEBOX
                                  WS_SYSMENU))
      (else               (bit-or (if (child-style? rest) WS_CHILD 0)
                                  WS_CLIPCHILDREN
                                  WS_CLIPSIBLINGS))))


(definition (window-ex-style window rest)
  (typecase window
      ((Dialog)           WS_EX_DLGMODALFRAME)
      ((Palette)          WS_EX_TOOLWINDOW)
      ((Popup)            WS_EX_TOOLWINDOW)
      ((Toplevel)         WS_EX_APPWINDOW)
      ((Transient)        (bit-or WS_EX_TOOLWINDOW WS_EX_TOPMOST))
      (else               0)))


(definition (window-parent window parent)
  (if (not parent)
      NULL
    (get-handle~ parent)))


(definition (create-handle window parent rest)
  (typecase window
    ((Desktop) (GetDesktopWindow))
    (else
     (CreateWindowEx
       (window-ex-style window rest)
       CLASS_ATOM @w (either hwnd-class (window-class))
       NULL
       (window-style window rest)
       0 0 500 500
       (window-parent window parent)
       NULL
       (current-instance)
       NULL))))


(definition (prepare-handle window parent rest)
  (bind-keywords ((hwnd {}) . others) rest
    (set-in-creation window)
    (let ((hwnd (create-handle window parent rest)))
      (if (not hwnd)
          (error "Unable to create window {t} error {t}"
                 (list :class (window-class) :style (window-style window rest) :ex-style (window-ex-style window rest) parent: (window-parent window parent))
                 (GetLastError))
        (DragAcceptFiles hwnd #t)
        hwnd))))


(definition (bring-window-to-top hwnd)
  (BringWindowToTop hwnd))


(definition (show-window handle)
  (ShowWindow handle SW_SHOWNORMAL))


(definition (hide-window handle)
  (ShowWindow handle SW_HIDE))


(definition (minimize-window handle)
  (ShowWindow handle SW_MINIMIZE))


(definition (close-window window)
  (send-message~ window WM_CLOSE 0 0))


(definition (destroy-window handle)
  (DestroyWindow handle))


(definition (dispatch-message window msg <int> wparam <int> lparam <int>)
  (if (eq? (process-window-message window msg wparam lparam) unprocessed)
      (DefWindowProc (get-handle~ window) msg wparam lparam)
    0))


;;;
;;;; Messages
;;;


(definition (process-window-message window msg <int> wparam <int> lparam <int>)
  (ecase msg
    ((WM_ERASEBKGND)      (erase-background~ window wparam))
    ((WM_PAINT)           (let ((region (platform-get-update-region (get-handle~ window))))
                            (paint~ window region)))
    ((WM_SETCURSOR)       (cursor-update~ window (= (loword lparam) HTCLIENT)))
    ((WM_MOUSEMOVE)       (mouse-move~ window (loword lparam) (hiword lparam)))
    ((WM_MOUSEHOVER)      (mouse-hover~ window (loword lparam) (hiword lparam)))
    ((WM_MOUSEWHEEL)      (mouse-wheel~ window (hiword wparam)))
    ((WM_LBUTTONDOWN)     (mouse-down~ window (loword lparam) (hiword lparam)))
    ((WM_LBUTTONUP)       (mouse-up~ window (loword lparam) (hiword lparam)))
    ((WM_LBUTTONDBLCLK)   (double-click~ window (loword lparam) (hiword lparam)))
    ((WM_MBUTTONDOWN)     (middle-mouse-down~ window (loword lparam) (hiword lparam)))
    ((WM_MBUTTONUP)       (middle-mouse-up~ window (loword lparam) (hiword lparam)))
    ((WM_RBUTTONDOWN)     (right-mouse-down~ window (loword lparam) (hiword lparam)))
    ((WM_RBUTTONUP)       (right-mouse-up~ window (loword lparam) (hiword lparam)))
    ((WM_CONTEXTMENU)     (call-context-menu~ window (loword lparam) (hiword lparam)))
    ((WM_SYSKEYDOWN)      (if (/= wparam VK_MENU) unprocessed (system-key-down~ window)))
    ((WM_SYSKEYUP)        (if (/= wparam VK_MENU) unprocessed (system-key-up~ window)))
    ((WM_KEYDOWN)         (call-key-down~ window wparam))
    ((WM_KEYUP)           (call-key-up~ window wparam))
    ((WM_CHAR)            (call-key-press~ window wparam))
    ((WM_COMMAND)         (on-command~ window lparam wparam))
    ((WM_SYSCOMMAND)      (on-system-command~ window (bit-and wparam #xFFF0)))
    ((WM_MOVE)            (call-position-change~ window (loword lparam) (hiword lparam)))    
    ;; Windows sends a size message with both the width
    ;; and the height equal to zero when minimizing a window...
    ((WM_SIZE)            (let ((width (loword lparam))
                                (height (hiword lparam)))
                            (when (or (/= width 0) (/= height 0))
                              (call-size-change~ window width height))))
    ((WM_MOUSEACTIVATE)   (on-mouse-activate~ window))
    ((WM_ACTIVATE)        (let ((kind (if (= (loword wparam) WA_INACTIVE) 'inactive 'active)))
                            (on-activate~ window kind)))
    ((WM_ACTIVATEAPP)     (on-activate-app~ window wparam))
    ((WM_CLOSE)           (on-close~ window {}))
    ((WM_DESTROY)         (window-destroy~ window))
    ((WM_NCDESTROY)       (on-nc-destroy~ window {}))
    ((WM_CAPTURECHANGED)  (call-lost-capture~ window lparam))
    ((WM_SETFOCUS)        (call-focus-gain~ window))
    ((WM_KILLFOCUS)       (call-focus-lose~ window wparam))
    ((WM_DROPFILES)       (drop-files~ window wparam))
    ((WM_SETTINGCHANGE)  (ecase wparam
                                            ((SPI_SETWORKAREA)
                                             (when (is? window Toplevel)
                                               (set-fullscreen~ window #t)))))
    ((WM_TIMER)           (on-timer~ window wparam))
    (else                 unprocessed)))


(definition (set-capture handle)
  (SetCapture handle))


(definition (unset-capture)
  (ReleaseCapture))


(definition (with-platform-painting window proc)
  (let ((handle (get-handle~ window)))
    (with ((ps (PAINTSTRUCT-make)))
      (let ((hdc (BeginPaint handle ps)))
        (with ((dc (new Surface (cairo_win32_surface_create hdc))))
          (unwind-protect
              (proc dc) 
            (close~ dc) 
            (EndPaint handle ps))))))
  processed)


;;;
;;;; Dispatch
;;;


(set! process-hwnd-message
      (function (hwnd <foreign> msg <int> wparam <int> lparam <int>)
        (let ((window (get-window hwnd)))
          (when (and (not window) (get-in-creation))
            (set! window (get-in-creation))
            (set-handle~ window hwnd)
            (set-window hwnd window)
            (set-in-creation {}))
          (if (not window)
              (DefWindowProc hwnd msg wparam lparam)
            (call-dispatch-message~ window msg wparam lparam)))))


  ;;;
  ;;;; Style
  ;;;


(definition (get-style handle)
  (GetWindowLong handle GWL_STYLE))


(definition (set-style handle style)
  (SetWindowLong handle GWL_STYLE style))


(definition (get-ex-style handle)
  (GetWindowLong handle GWL_EXSTYLE))


(definition (set-ex-style handle style)
  (SetWindowLong handle GWL_EXSTYLE style))


(definition (child-window? handle)
  (mask-bit-set? (get-style handle) WS_CHILD))


;;;
;;;; Layers
;;;


(definition (get-layered? handle)
  (mask-bit-set? (get-ex-style handle) WS_EX_LAYERED))


(definition (set-layered? handle flag)
  (SetWindowLong handle GWL_EXSTYLE (mask-bit-set (GetWindowLong handle GWL_EXSTYLE) WS_EX_LAYERED flag)))


(definition (set-alpha-blending handle n)
  (set-layered? handle #t)
  (SetLayeredWindowAttributes handle 0 n LWA_ALPHA)
  (RedrawWindow handle NULL NULL (bit-or RDW_ERASE RDW_INVALIDATE)))


;;;
;;;; Tracking
;;;


(definition (track-mouse-event handle flags (time: time HOVER_DEFAULT))
  (with ((rec (TRACKMOUSEEVENT-make)))
    (TRACKMOUSEEVENT-cbSize-set! rec (size-of-TRACKMOUSEEVENT))
    (TRACKMOUSEEVENT-dwFlags-set! rec flags)
    (TRACKMOUSEEVENT-hwndTrack-set! rec handle)
    (TRACKMOUSEEVENT-dwHoverTime-set! rec time)
    (TrackMouseEvent rec)))


;;;
;;;; Management
;;;


(definition (platform-send-message handle msg wparam lparam)
  (SendMessage handle msg wparam lparam))


(definition (platform-post-message handle msg wparam lparam)
  (PostMessage handle msg wparam lparam))


(definition (platform-set-parent handle parent)
  (SetParent handle (if parent (get-handle~ parent) NULL)))


(definition (set-window-title handle title)
  (SetWindowText handle title))

  
(definition (get-window-owner-handle handle)
  (GetWindow handle GW_OWNER))


(definition (platform-get-window-child-handle handle)
  (GetWindow handle GW_CHILD))


(definition (platform-get-next-window-handle handle)
  (GetWindow handle GW_HWNDNEXT))


(definition (platform-is-window-visible? handle)
  (IsWindowVisible handle))


(definition (get-top-window-handle handle)
  (GetTopWindow handle))


(definition (acquire-point handle window shape)
  (let ((acquired (point->POINT shape)))
    (MapWindowPoints (get-handle~ window) handle acquired 1)
    (POINT->point acquired)))


(definition (acquire-rect handle window shape)
  (let ((acquired (rect->RECT shape)))
    (MapWindowPoints (get-handle~ window) handle (RECT->POINTS acquired) 2)
    (RECT->rect acquired)))


(definition (platform-get-window-position handle)
  (with ((pos (new-POINT 0 0)))
    (MapWindowPoints handle NULL pos 1)
    (new Point (POINT-x-ref pos) (POINT-y-ref pos))))


(definition (platform-get-position handle parent-handle)
  (with ((rect (RECT-make)))
    (GetWindowRect handle rect)
    (when (and parent-handle (child-window? handle))
      (MapWindowPoints NULL parent-handle (RECT->POINTS rect) 2))
    (new Point (RECT-left-ref rect) (RECT-top-ref rect))))


(definition (platform-set-position handle pos)
  (SetWindowPos handle NULL (get-h~ pos) (get-v~ pos) 0 0 (bit-or SWP_NOSIZE SWP_NOZORDER SWP_NOACTIVATE)))


(definition (platform-get-size handle)
  (with ((rect (RECT-make)))
    (GetClientRect handle rect)
    (new Dimension (RECT-right-ref rect) (RECT-bottom-ref rect))))


(definition (platform-get-window-size handle)
  (let ((rect (RECT-make)))
    (GetWindowRect handle rect)
    (new Dimension (- (RECT-right-ref rect)  (RECT-left-ref rect))
                   (- (RECT-bottom-ref rect) (RECT-top-ref rect)))))


(definition (platform-set-window-size handle size)
    (SetWindowPos handle NULL 0 0 (get-width~ size) (get-height~ size) (bit-or SWP_NOCOPYBITS SWP_NOMOVE SWP_NOZORDER SWP_NOACTIVATE)))


(definition (platform-set-bounds handle rect)
    (SetWindowPos handle NULL (get-left~ rect) (get-top~ rect) (rect-width rect) (rect-height rect) (bit-or SWP_NOZORDER SWP_NOACTIVATE)))


(definition (platform-get-rect handle parent-handle)
  (with ((rect (RECT-make)))
    (GetWindowRect handle rect)
    (when parent-handle
      (MapWindowPoints NULL parent-handle (RECT->POINTS rect) 2))
    (new Rect (RECT-left-ref rect) (RECT-top-ref rect) (RECT-right-ref rect) (RECT-bottom-ref rect))))


(definition (platform-get-bounds handle)
    (with ((rect (RECT-make)))
      (GetWindowRect handle rect)
      (MapWindowPoints NULL handle rect 2)
      (new Rect (RECT-left-ref rect) (RECT-top-ref rect) (RECT-right-ref rect) (RECT-bottom-ref rect))))


(definition (platform-mouse-position)
  (with ((point (POINT-make)))
    (GetCursorPos point)
    (new Point (POINT-x-ref point) (POINT-y-ref point))))


(definition (platform-window-from-point point)
  (with ((pt (POINT-make)))
    (POINT-x-set! pt (get-h~ point))
    (POINT-y-set! pt (get-v~ point))
    (WindowFromPoint pt)))


(definition (platform-child-window-from-point handle point)
  (with ((pt (POINT-make)))
    (POINT-x-set! pt (get-h~ point))
    (POINT-y-set! pt (get-v~ point))
    (ChildWindowFromPointEx handle pt (bit-or CWP_SKIPINVISIBLE CWP_SKIPDISABLED CWP_SKIPTRANSPARENT))))


(definition (platform-move-window handle x y cx cy)
  (MoveWindow handle x y cx cy #t))


(definition (platform-window-enabled? handle)
  (IsWindowEnabled handle))


(definition (platform-enable-window handle)
  (EnableWindow handle #t))


(definition (platform-disable-window handle)
  (EnableWindow handle #f))


(definition (platform-get-client-rect handle)
  (with ((rect (RECT-make)))
    (GetClientRect handle rect)
    (RECT->rect rect)))


(definition (platform-scroll-window handle dh dv rect clip-rect erase?)
  (let ((flags (bit-or (if erase? SW_ERASE 0) SW_INVALIDATE)))
    (with ((rect (rect->RECT rect))
           (clip-rect (rect->RECT clip-rect)))
      (ScrollWindowEx handle dh dv rect clip-rect NULL NULL flags))))


(definition (platform-invalidate-rect handle rect erase?)
  (when handle
    (with ((rect (rect->RECT rect)))
      (InvalidateRect handle rect erase?))))


(definition (platform-invalidate-region handle region erase?)
  (when handle
    (InvalidateRgn handle (get-handle~ region) erase?)))


(definition (platform-invalidate-window handle erase?)
  (when handle
    (InvalidateRect handle NULL erase?)))


(definition (platform-redraw-window handle rect region)
  (when handle
    ;; Changed RDW_NOCHILDREN to RDW_ALLCHILDREN so that a redraw-window on the
    ;; toplevel would redraw it's children. Hope it doesn't break any code...
    (let ((flags (bit-or RDW_ERASENOW RDW_UPDATENOW RDW_INVALIDATE RDW_ALLCHILDREN)))
      (with ((rect (if (not rect) NULL (rect->RECT rect))))
        (RedrawWindow handle rect (if region (get-handle~ region) NULL) flags)))))


(definition (platform-get-update-rect handle)
  (with ((rect (RECT-make)))
    (GetUpdateRect handle rect #f)
    (RECT->rect rect)))


(definition (platform-get-update-region handle)
  (let ((region (new Region)))
    (GetUpdateRgn handle (get-handle~ region) #f)
    region))


(definition (platform-update-window handle)
  (UpdateWindow handle))
  
  
(definition (platform-show-noactivate handle)
  (SetWindowPos handle HWND_TOP 0 0 0 0 (bit-or SWP_SHOWWINDOW SWP_NOACTIVATE SWP_NOMOVE SWP_NOSIZE)))
  
  
(definition (platform-hide-noactivate handle)
  (SetWindowPos handle 0 0 0 0 0 (bit-or SWP_HIDEWINDOW SWP_NOACTIVATE SWP_NOMOVE SWP_NOSIZE)))


(definition (platform-bring-window-to-front handle)
  (BringWindowToTop handle))


(definition (platform-send-window-to-back handle)
  (SetWindowPos handle HWND_BOTTOM 0 0 0 0 (bit-or SWP_NOMOVE SWP_NOSIZE)))


(definition (platform-select-foreground-window handle)
  (SetForegroundWindow handle))


(definition (platform-get-window-handle-title handle)
  (let* ((size (GetWindowTextLength handle))
         (string (make-string size #\space)))
    (receive (ret str) (GetWindowText handle string (+ size 1))
      str)))


(definition (platform-lock-window-update handle)
  (LockWindowUpdate handle))


;;;
;;;; Focus
;;;


(definition (platform-get-focus)
  (GetFocus))

(definition (platform-set-focus handle)
  (SetFocus handle))


;;;
;;;; Frame Region
;;;


(definition public (frame-region frame <Rect> (insets: insets (new Rect 1 1 1 1)))
  (let ((left   (get-left~ frame))
        (top    (get-top~ frame))
        (right  (get-right~ frame))
        (bottom (get-bottom~ frame))
        (region (new Region)))
    (with-closed ((l (new Region left: left                          top: top                             right: (+ left (get-left~ insets)) bottom: bottom))
                  (t (new Region left: left                          top: top                             right: right                       bottom: (+ top (get-top~ insets))))
                  (r (new Region left: (- right (get-right~ insets)) top: top                             right: right                       bottom: bottom))
                  (b (new Region left: left                          top: (- bottom (get-bottom~ insets)) right: right                       bottom: bottom)))
      (combine!~ region l 'or)
      (combine!~ region t 'or)
      (combine!~ region r 'or)
      (combine!~ region b 'or)
      region)))


;;;
;;;; Cursor
;;;


;;; We need a platform ind interface for this.

(definition public Current-Cursor
  {})


;; tofix Cursor-Resources were literals
(definition public Cursors
  (list
    (list :arrow               IDC_ARROW)
    (list :wait                IDC_WAIT)
    (list :ibeam               IDC_IBEAM)
    (list :cross               IDC_CROSS)
    (list :finger              IDC_HAND)
    (list :all                 IDC_SIZEALL)
    (list :west-east           IDC_SIZEWE)
    (list :no                  IDC_NO)
    (list :move                (new Cursor-Resource "Move"))
    (list :opened-hand         (new Cursor-Resource "OpenedHand"))
    (list :closed-hand         (new Cursor-Resource "ClosedHand"))
    (list :zoom                (new Cursor-Resource "Zoom"))
    (list :zoom-in             (new Cursor-Resource "ZoomIn"))
    (list :zoom-out            (new Cursor-Resource "ZoomOut"))
    (list :spy                 (new Cursor-Resource "Spy"))
    (list :left-arrow          (new Cursor-Resource "LeftArrow"))
    (list :vertical-splitter   (new Cursor-Resource "VerticalSplitter"))
    (list :horizontal-splitter (new Cursor-Resource "HorizontalSplitter"))))


(definition public (find-cursor-file object)
  (new File (list 'Native "C:" "Jazz" "dev" "jazz" "packages" "org.jazz" "lib" "jazz" "Resources" "Cursors" (string-append (get-name~ object) ".cur"))))


(definition (load-cursor cursor)
  (if (number? cursor)
      (LoadCursorInt cursor)
    (let* ((cursor  (if (file? cursor) cursor (find-cursor-file cursor)))
           (ident   (parse~ cursor)))
      (LoadImage NULL ident IMAGE_CURSOR 0 0 LR_LOADFROMFILE))))

(definition (get-named-cursor name)
  (let ((info (assq name Cursors)))
    (if (not info)
        (error "Unknown cursor: {t}" name)
      (cadr info))))


(definition public (get-cursor)
  Current-Cursor)


(definition public (set-cursor cursor)
  (unless #f @to-fix-this-doesnt-work-when-switching-overlapped-windows! (= cursor Current-Cursor)
          (set! Current-Cursor cursor)
          (let ((cursor (if (symbol? cursor) (get-named-cursor cursor) cursor)))
            (SetCursor (load-cursor cursor)))))


(definition public (hide-cursor)
  (while (>= (ShowCursor #f) 0)
    ))


(definition public (show-cursor)
  (while (< (ShowCursor #t) 0)
    ))


;;;
;;;; Redraw View Only
;;;


(definition (platform-redraw-view-only view hwnd)         
  (with ((hrgn (CreateRectRgn 0 0 0 0)))
    ;; preserve the current update region
    (GetUpdateRgn hwnd hrgn #f)
    ;; reset it
    (ValidateRect hwnd NULL)
    ;; redraw the view only
    @w(time
      (redraw-view~ view))
    ;; reinvalidate the preserved update region
    (InvalidateRgn hwnd hrgn #f)
    (DeleteObject hrgn)))


(definition (platform-get-desktop)
  (GetDesktopWindow)))
