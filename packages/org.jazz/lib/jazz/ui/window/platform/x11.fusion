;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Platform-dependant Window Definitions (X11)
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2007
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;    Assem Hakmeh
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.ui.window.platform.x11 jazz


(import (jazz.utilities)
        (jazz.library)
        (jazz.io)
        (jazz.platform.x11)
        (jazz.platform.cairo)
        (jazz.ui))


(definition public processed '(processed))
(definition public unprocessed '(unprocessed))


;;;
;;;;  Window
;;;


(definition public Windows-Table
  (new-hashtable eqv?))


(definition public inline (get-window handle)
  (hash-ref Windows-Table handle))


(definition public inline (set-window handle window)
  (hash-set! Windows-Table handle window))


;; So that the window<->hwnd association can be made on the very first windows message
(definition in-creation {})


(definition (set-in-creation in)
  (set! in-creation in))


(definition (get-in-creation)
  in-creation)


(definition (create-handle window parent rest)
  (let* ((screen-no (XDefaultScreen default-x11-display))
         (screen    (XScreenOfDisplay default-x11-display screen-no))
         (parent    (if parent (get-handle~ parent) (XRootWindow default-x11-display screen-no)))
         (attr      (XSetWindowAttributes-make))
         (visual    (XDefaultVisual default-x11-display screen-no)))
    (XCreateWindow default-x11-display
                   parent
                   0
                   0
                   500
                   500
                   1
                   CopyFromParent
                   InputOutput
                   visual
                   0
                   attr)))


(definition (prepare-handle window parent rest)
  (bind-keywords ((handle {}) . others) rest
    (set-in-creation window)
    (let ((handle (create-handle window parent rest)))
      (if (not handle)
          (error "Unable to create x11 window")
        @tofix-this-is-windows
        (DragAcceptFiles hwnd #t)
        (XMapWindow default-x11-display handle)
        (XSelectInput default-x11-display handle (or StructureNotifyMask ExposureMask))
        handle))))


(definition (dispatch-message message-consumer msg wparam lparam)
  (unimplemented 'dispatch-message))


(definition (bring-window-to-top handle)
  (unimplemented 'bring-window-to-top)
  @windows
  (BringWindowToTop hwnd))


(definition (show-window handle)
  (XMapWindow default-x11-display handle)
  (XFlush default-x11-display))


(definition (hide-window handle)
  (unimplemented 'hide-window)
  @windows
  (ShowWindow handle SW_HIDE))


(definition (minimize-window handle)
  (unimplemented 'minimize-window)
  @windows
  (ShowWindow handle SW_MINIMIZE))


(definition (close-window window)
  (XUnmapWindow default-x11-display (get-handle~ window)))


(definition (destroy-window handle)
  (unimplemented 'destroy-window)
  @windows
  (DestroyWindow handle))


(definition (platform-erase-background handle)
  (unimplemented 'platform-erase-background))

;;;
;;;; Messages
;;;


(definition (process-window-message window msg)
   (let ((type (XEvent-type-ref msg)))
      (cond
       ((= type Expose)          (let* ((left (XExposeEvent-x-ref msg))
                                        (top  (XExposeEvent-y-ref msg))
                                        (right (+ left (XExposeEvent-width-ref msg)))
                                        (bottom (+ top (XExposeEvent-height-ref msg)))
                                        (region (new Rect left top right bottom)))
                                   (paint~ window region)))
       ((= type MapNotify)       (XFlush default-x11-display) processed)
       (else                      unprocessed))))

(definition (event-loop)
  (let ((ev (XEvent-make)))
    (let loop ()
      (XNextEvent default-x11-display ev)
	  (let ((win (get-window (XAnyEvent-window-ref (XEvent-xany-ref ev)))))
	    (if win
		(let ((result (process-window-message win ev)))
		  (cond
		   ((eq? result unprocessed) 
		    (begin (format ':console "Unprocessed event {s}.\n" (XEvent-type-ref ev))
			   (loop)))
		   ((eq? result processed)
		    (loop))
		   ((eq? result 'exit)
		    (destroy-window~ win))
		   (else                     
		    (error "Bad event handler response {t}" result)))))
		(loop))))
	  'Finished)

@keeping-this-for-reference
(definition (process-window-message window msg <int> wparam <int> lparam <int>)
  (ecase msg
    ((WM_ERASEBKGND)      (erase-background~ window wparam))
    ((WM_PAINT)           (paint~ window))
    ((WM_SETCURSOR)       (cursor-update~ window (= (loword lparam) HTCLIENT)))
    ((WM_MOUSEMOVE)       (mouse-move~ window (loword lparam) (hiword lparam)))
    ((WM_MOUSEHOVER)      (mouse-hover~ window (loword lparam) (hiword lparam)))
    ((WM_MOUSEWHEEL)      (mouse-wheel~ window (hiword wparam)))
    ((WM_LBUTTONDOWN)     (mouse-down~ window (loword lparam) (hiword lparam)))
    ((WM_LBUTTONUP)       (mouse-up~ window (loword lparam) (hiword lparam)))
    ((WM_LBUTTONDBLCLK)   (double-click~ window (loword lparam) (hiword lparam)))
    ((WM_MBUTTONDOWN)     (middle-mouse-down~ window (loword lparam) (hiword lparam)))
    ((WM_MBUTTONUP)       (middle-mouse-up~ window (loword lparam) (hiword lparam)))
    ((WM_RBUTTONDOWN)     (right-mouse-down~ window (loword lparam) (hiword lparam)))
    ((WM_RBUTTONUP)       (right-mouse-up~ window (loword lparam) (hiword lparam)))
    ((WM_CONTEXTMENU)     (call-context-menu~ window (loword lparam) (hiword lparam)))
    ((WM_SYSKEYDOWN)      (if (/= wparam VK_MENU) unprocessed (system-key-down~ window)))
    ((WM_SYSKEYUP)        (if (/= wparam VK_MENU) unprocessed (system-key-up~ window)))
    ((WM_KEYDOWN)         (call-key-down~ window wparam))
    ((WM_KEYUP)           (call-key-up~ window wparam))
    ((WM_CHAR)            (call-key-press~ window wparam))
    ((WM_COMMAND)         (on-command~ window lparam wparam))
    ((WM_SYSCOMMAND)      (on-system-command~ window (bit-and wparam #xFFF0)))
    ((WM_MOVE)            (call-position-change~ window (loword lparam) (hiword lparam)))    
    ;; Windows sends a size message with both the width
    ;; and the height equal to zero when minimizing a window...
    ((WM_SIZE)            (let ((width (loword lparam))
                                (height (hiword lparam)))
                            (when (or (/= width 0) (/= height 0))
                              (call-size-change~ window width height))))
    ((WM_MOUSEACTIVATE)   (on-mouse-activate~ window))
    ((WM_ACTIVATE)        (let ((kind (if (= (loword wparam) WA_INACTIVE) 'inactive 'active)))
                            (on-activate~ window kind)))
    ((WM_ACTIVATEAPP)     (on-activate-app~ window wparam))
    ((WM_CLOSE)           (on-close~ window {}))
    ((WM_DESTROY)         (window-destroy~ window))
    ((WM_NCDESTROY)       (on-nc-destroy~ window {}))
    ((WM_CAPTURECHANGED)  (call-lost-capture~ window lparam))
    ((WM_SETFOCUS)        (call-focus-gain~ window))
    ((WM_KILLFOCUS)       (call-focus-lose~ window wparam))
    ((WM_DROPFILES)       (drop-files~ window wparam))
    ((WM_SETTINGCHANGE)   (setting-change~ window wparam))
    ((WM_TIMER)           (on-timer~ window wparam))
    (else                 unprocessed)))


(definition (set-capture handle)
  (unimplemented 'set-capture)
  @windows
  (SetCapture handle))


(definition (unset-capture)
  (unimplemented 'unset-capture)
  @windows
  (ReleaseCapture))


(definition (with-platform-painting window proc)
  (let* ((screen-no (XDefaultScreen default-x11-display))
         (visual    (XDefaultVisual default-x11-display screen-no)))
    (with ((dc (new Surface (cairo_xlib_surface_create default-x11-display (get-handle~ window) visual (get-height~ window) (get-width~ window)))))
      (unwind-protect
          (proc dc)
        (close~ dc))))
  processed)


@old-reference
(definition (paint-window window)
 (let* ((screen-no (XDefaultScreen default-x11-display))
         (visual    (XDefaultVisual default-x11-display screen-no)))
        (with ((dc (new Surface (cairo_xlib_surface_create default-x11-display (get-handle~ window) visual (get-height~ window) (get-width~ window)))))
          (draw-placeholder~ window dc)
          ;;(draw~ window dc ps)
          (XFlush default-x11-display)
          (close~ dc)))
    processed)


;;;
;;;; Style
;;;


(definition (get-style handle)
  (unimplemented 'get-style)
  @windows
  (GetWindowLong handle GWL_STYLE))


(definition (set-style handle style)
  (unimplemented 'set-style)
  @windows
  (SetWindowLong handle GWL_STYLE style))


(definition (get-ex-style handle)
  (unimplemented 'get-ex-style)
  @windows
  (GetWindowLong handle GWL_EXSTYLE))


(definition (set-ex-style handle style)
  (unimplemented 'set-ex-style)
  @windows
  (SetWindowLong handle GWL_EXSTYLE style))


(definition (child-window? handle)
  (unimplemented 'child-window?)
  @windows
  (mask-bit-set? (get-style handle) WS_CHILD))


;;;
;;;; Layers
;;;


(definition (get-layered? handle)
  (unimplemented 'get-layered?)
  @windows
  (mask-bit-set? (get-ex-style handle) WS_EX_LAYERED))


(definition (set-layered? handle flag)
  (unimplemented 'set-layered?)
  @windows
  (SetWindowLong handle GWL_EXSTYLE (mask-bit-set (GetWindowLong handle GWL_EXSTYLE) WS_EX_LAYERED flag)))


(definition (set-alpha-blending handle n)
  (unimplemented 'set-alpha-blending)
  @windows (
  (set-layered? handle #t)
  (SetLayeredWindowAttributes handle 0 n LWA_ALPHA)
  (RedrawWindow handle NULL NULL (bit-or RDW_ERASE RDW_INVALIDATE))))


;;;
;;;; Tracking
;;;

;; Time was HOVER_DEFAULT
(definition (track-mouse-event handle flags (time: time 0))
  (unimplemented 'track-mouse-event)
  @windows
  (with ((rec (TRACKMOUSEEVENT-make)))
    (TRACKMOUSEEVENT-cbSize-set! rec (size-of-TRACKMOUSEEVENT))
    (TRACKMOUSEEVENT-dwFlags-set! rec flags)
    (TRACKMOUSEEVENT-hwndTrack-set! rec handle)
    (TRACKMOUSEEVENT-dwHoverTime-set! rec time)
    (TrackMouseEvent rec)))


;;;
;;;; Management
;;;


(definition (platform-send-message handle msg wparam lparam)
  (unimplemented 'platform-send-message)
  @windows
    (SendMessage handle msg wparam lparam))


(definition (platform-post-message handle msg wparam lparam)
  (unimplemented 'platform-post-message)
  @windows
    (PostMessage handle msg wparam lparam))


(definition (platform-set-parent handle parent)
  (unimplemented 'platform-set-parent)
  @windows
  (SetParent handle (if parent (get-handle~ parent) NULL)))


;; tofix : temporary
(definition (set-window-title handle title)
  #f)

  
(definition (get-window-owner-handle handle)
  (unimplemented 'get-window-owner-handle)
  @windows
  (GetWindow handle GW_OWNER))


(definition (platform-get-window-child-handle handle)
  (unimplemented 'platform-get-window-child-handle)
  @windows
  (GetWindow handle GW_CHILD))


(definition (platform-get-next-window-handle handle)
  (unimplemented 'platform-get-next-window-handle)
  @windows
  (GetWindow handle GW_HWNDNEXT))


(definition (platform-is-window-visible? handle)
  (unimplemented 'platform-is-window-visible?)
  @windows
  (IsWindowVisible handle))


(definition (get-top-window-handle handle)
  (unimplemented 'get-top-window-handle)
  @windows
  (GetTopWindow handle))


(definition (acquire-point handle window shape)
  (unimplemented 'acquire-point)
  @windows
  (let ((acquired (point->POINT shape)))
    (MapWindowPoints (get-handle~ window) handle acquired 1)
    (POINT->point acquired)))


(definition (acquire-rect handle window shape)
  (unimplemented 'acquire-rect)
  @windows
  (let ((acquired (rect->RECT shape)))
    (MapWindowPoints (get-handle~ window) handle (RECT->POINTS acquired) 2)
    (RECT->rect acquired)))


(definition (platform-get-window-position handle)
  (unimplemented 'platform-get-window-position)
  @windows
  (with ((pos (new-point 0 0)))
    (MapWindowPoints handle NULL pos 1)
    (new Point (POINT-x-ref pos) (POINT-y-ref pos))))


(definition (platform-get-position handle parent-handle)
  (unimplemented 'platform-get-position)
  @windows
  (with ((rect (RECT-make)))
    (GetWindowRect handle rect)
    (when (and parent-handle (child-window? handle))
      (MapWindowPoints NULL parent-handle (RECT->POINTS rect) 2))
    (new Point (RECT-left-ref rect) (RECT-top-ref rect))))


(definition (platform-set-position handle pos)
  (XMoveWindow default-x11-display handle (get-h~ pos) (get-v~ pos)))


(definition (platform-get-size handle)
  (with ((infos (XWindowAttributes-make)))
    (XGetWindowAttributes default-x11-display handle infos)
    (new Dimension (XWindowAttributes-width-ref infos) (XWindowAttributes-height-ref infos))))


(definition (platform-get-window-size handle)
  (platform-get-size handle))


(definition (platform-set-window-size handle size)
    (XResizeWindow default-x11-display handle (get-width~ size) (get-height~ size)))


(definition (platform-set-bounds handle rect)
  (unimplemented 'platform-set-bounds)
  @windows
    (SetWindowPos handle NULL (get-left~ rect) (get-top~ rect) (rect-width rect) (rect-height rect) (bit-or SWP_NOZORDER SWP_NOACTIVATE)))


(definition (platform-get-rect handle parent-handle)
  (unimplemented 'platform-get-rect)
  @windows
  (with ((rect (RECT-make)))
    (GetWindowRect handle rect)
    (when parent-handle
      (MapWindowPoints NULL parent-handle (RECT->POINTS rect) 2))
    (new Rect (RECT-left-ref rect) (RECT-top-ref rect) (RECT-right-ref rect) (RECT-bottom-ref rect))))


(definition (platform-get-bounds handle)
  (unimplemented 'platform-get-bounds)
  @windows
    (with ((rect (RECT-make)))
      (GetWindowRect handle rect)
      (MapWindowPoints NULL handle rect 2)
      (new Rect (RECT-left-ref rect) (RECT-top-ref rect) (RECT-right-ref rect) (RECT-bottom-ref rect))))


(definition (platform-mouse-position)
  (unimplemented 'platform-mouse-position)
  @windows
  (with ((point (POINT-make)))
    (GetCursorPos point)
    (new Point (POINT-x-ref point) (POINT-y-ref point))))


(definition (platform-window-from-point point)
  (unimplemented 'platform-window-from-point)
  @windows
  (with ((pt (POINT-make)))
    (POINT-x-set! pt (get-h~ point))
    (POINT-y-set! pt (get-v~ point))
    (WindowFromPoint pt)))


(definition (platform-child-window-from-point handle point)
  (unimplemented 'platform-child-window-from-point)
  @windows
  (with ((pt (POINT-make)))
    (POINT-x-set! pt (get-h~ point))
    (POINT-y-set! pt (get-v~ point))
    (ChildWindowFromPointEx handle pt (bit-or CWP_SKIPINVISIBLE CWP_SKIPDISABLED CWP_SKIPTRANSPARENT))))


(definition (platform-move-window handle x y cx cy)
  (unimplemented 'platform-move-window)
  @windows
  (MoveWindow handle x y cx cy #t))


(definition (platform-window-enabled? handle)
  (unimplemented 'platform-window-enabled?)
  @windows
  (IsWindowEnabled handle))


(definition (platform-enable-window handle)
  (unimplemented 'platform-enable-window)
  @windows
  (EnableWindow handle #t))


(definition (platform-disable-window handle)
  (unimplemented 'platform-disable-window)
  @windows
  (EnableWindow handle #f))


(definition (platform-get-client-rect handle)
  (unimplemented 'platform-get-client-rect)
  @windows
  (with ((rect (RECT-make)))
    (GetClientRect handle rect)
    (RECT->rect rect)))


(definition (platform-scroll-window handle dh dv rect clip-rect erase?)
  (unimplemented 'platform-scroll-window)
  @windows
  (let ((flags (bit-or (if erase? SW_ERASE 0) SW_INVALIDATE)))
    (with ((rect (rect->RECT rect))
           (clip-rect (rect->RECT clip-rect)))
      (ScrollWindowEx handle dh dv rect clip-rect NULL NULL flags))))


(definition (platform-invalidate-rect handle rect erase?)
  (let* ((x (get-left~ rect))
        (y (get-top~ rect))
        (w (- (get-right~ rect) x))
        (h (- (get-bottom~ rect) y)))
  (XClearArea default-x11-display handle x y w h #t)))


(definition (platform-invalidate-region handle region erase?)
  (for-each (lambda (rect)
                    (platform-invalidate-rect handle rect erase?))
                  (get-rectangles~ region)))


(definition (platform-invalidate-window handle erase?)
  (unimplemented 'platform-invalidate-window)
  @windows
  (when handle
    (InvalidateRect handle NULL erase?)))


(definition (platform-redraw-window handle rect region)
  (unimplemented 'platform-redraw-window)
  @windows
  (when handle
    ;; Changed RDW_NOCHILDREN to RDW_ALLCHILDREN so that a redraw-window on the
    ;; toplevel would redraw it's children. Hope it doesn't break any code...
    (let ((flags (bit-or RDW_ERASENOW RDW_UPDATENOW RDW_INVALIDATE RDW_ALLCHILDREN)))
      (with ((rect (if (not rect) NULL (rect->RECT rect))))
        (RedrawWindow handle rect (if region (get-handle~ region) NULL) flags)))))


(definition (platform-get-update-rect handle)
  (unimplemented 'platform-get-update-rect)
  @windows
  (with ((rect (RECT-make)))
    (GetUpdateRect handle rect #f)
    (RECT->rect rect)))


(definition (platform-get-update-region handle)
  (unimplemented 'platform-get-update-region)
  @windows
  (let ((region (new Region)))
    (GetUpdateRgn handle (get-handle~ region) #f)
    region))


(definition (platform-redraw-view-only view handle)
  (platform-update-window handle))


(definition (platform-update-window handle)
  (XClearArea default-x11-display handle 0 0 0 0 #t))
  
  
(definition (platform-show-noactivate handle)
  (unimplemented 'platform-show-noactivate)
  @windows
  (SetWindowPos handle HWND_TOP 0 0 0 0 (bit-or SWP_SHOWWINDOW SWP_NOACTIVATE SWP_NOMOVE SWP_NOSIZE)))
  
  
(definition (platform-hide-noactivate handle)
  (unimplemented 'platform-hide-noactivate)
  @windows
  (SetWindowPos handle 0 0 0 0 0 (bit-or SWP_HIDEWINDOW SWP_NOACTIVATE SWP_NOMOVE SWP_NOSIZE)))


(definition (platform-bring-window-to-front handle)
  (unimplemented 'platform-bring-window-to-front)
  @windows
  (BringWindowToTop handle))


(definition (platform-send-window-to-back handle)
  (unimplemented 'platform-send-window-to-back)
  @windows
  (SetWindowPos handle HWND_BOTTOM 0 0 0 0 (bit-or SWP_NOMOVE SWP_NOSIZE)))


(definition (platform-select-foreground-window handle)
  (unimplemented 'platform-select-foreground-window)
  @windows
  (SetForegroundWindow handle))


(definition (platform-get-window-handle-title handle)
  (unimplemented 'platform-get-window-handle-title)
  @windows
  (let* ((size (GetWindowTextLength handle))
         (string (make-string size #\space)))
    (receive (ret str) (GetWindowText handle string (+ size 1))
      str)))


(definition (platform-lock-window-update handle)
  (unimplemented 'platform-lock-window-update)
  @windows
  (LockWindowUpdate handle))


;;;
;;;; Focus
;;;


(definition (platform-get-focus)
  (unimplemented 'platform-get-focus)
  @windows
  (GetFocus))

(definition (platform-set-focus handle)
  (unimplemented 'platform-set-focus)
  @windows
  (SetFocus handle))


;;;
;;;; Frame Region
;;;


(definition public (frame-region frame <Rect> (insets: insets (new Rect 1 1 1 1)))
  (let ((left   (get-left~ frame))
        (top    (get-top~ frame))
        (right  (get-right~ frame))
        (bottom (get-bottom~ frame))
        (region (new Region)))
    (with-closed ((l (new Region left: left                          top: top                             right: (+ left (get-left~ insets)) bottom: bottom))
                  (t (new Region left: left                          top: top                             right: right                       bottom: (+ top (get-top~ insets))))
                  (r (new Region left: (- right (get-right~ insets)) top: top                             right: right                       bottom: bottom))
                  (b (new Region left: left                          top: (- bottom (get-bottom~ insets)) right: right                       bottom: bottom)))
      (combine!~ region l 'or)
      (combine!~ region t 'or)
      (combine!~ region r 'or)
      (combine!~ region b 'or)
      region)))


;;;
;;;; Cursor
;;;


;;; We need a platform ind interface for this.

(definition public Current-Cursor
  {})


;; tofix Cursor-Resources were literals
@unimplemented
(definition public Cursors
  (list
    (list :arrow               IDC_ARROW)
    (list :wait                IDC_WAIT)
    (list :ibeam               IDC_IBEAM)
    (list :cross               IDC_CROSS)
    (list :finger              IDC_HAND)
    (list :all                 IDC_SIZEALL)
    (list :west-east           IDC_SIZEWE)
    (list :no                  IDC_NO)
    (list :move                (new Cursor-Resource "Move"))
    (list :opened-hand         (new Cursor-Resource "OpenedHand"))
    (list :closed-hand         (new Cursor-Resource "ClosedHand"))
    (list :zoom                (new Cursor-Resource "Zoom"))
    (list :zoom-in             (new Cursor-Resource "ZoomIn"))
    (list :zoom-out            (new Cursor-Resource "ZoomOut"))
    (list :spy                 (new Cursor-Resource "Spy"))
    (list :left-arrow          (new Cursor-Resource "LeftArrow"))
    (list :vertical-splitter   (new Cursor-Resource "VerticalSplitter"))
    (list :horizontal-splitter (new Cursor-Resource "HorizontalSplitter"))))


(definition public (find-cursor-file object)
  (new File (list 'Native "C:" "Jazz" "dev" "jazz" "packages" "org.jazz" "lib" "jazz" "Resources" "Cursors" (string-append (get-name~ object) ".cur"))))


(definition (load-cursor cursor)
  (unimplemented 'load-cursor)
  @unimp
  (if (number? cursor)
      (LoadCursorInt cursor)
    (let* ((cursor  (if (file? cursor) cursor (find-cursor-file cursor)))
           (ident   (parse~ cursor)))
      (LoadImage NULL ident IMAGE_CURSOR 0 0 LR_LOADFROMFILE))))


(definition (get-named-cursor name)
  (unimplemented 'get-named-cursor)
  @unimp
  (let ((info (assq name Cursors)))
    (if (not info)
        (error "Unknown cursor: {t}" name)
      (cadr info))))


(definition public (get-cursor)
  Current-Cursor)


(definition public (set-cursor cursor)
  (unimplemented 'set-cursor)
  @unimp
  (unless #f @to-fix-this-doesnt-work-when-switching-overlapped-windows! (= cursor Current-Cursor)
          (set! Current-Cursor cursor)
          (let ((cursor (if (symbol? cursor) (get-named-cursor cursor) cursor)))
            (SetCursor (load-cursor cursor)))))


(definition public (hide-cursor)
  (unimplemented 'hide-cursor)
  @unimp
  (while (>= (ShowCursor #f) 0)
    ))


(definition public (show-cursor)
  (unimplemented 'show-cursor)
  @unimp
  (while (< (ShowCursor #t) 0)
    ))


(definition (platform-get-desktop)
  (XRootWindow default-x11-display (XDefaultScreen default-x11-display))))
