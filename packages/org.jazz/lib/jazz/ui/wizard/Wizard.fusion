;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Wizards
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2007
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.ui.wizard.Wizard jazz


(import (jazz.jml)
        (jazz.ui)
        (jazz.literals)
        (jazz.library)
        (jazz.utilities))


(class Wizard extends View


  (form
    (<install>                         size: {Dimension 400 206}
      (<Label-View>  name: title       position: {Point 10 9} size: {Dimension 350 16} font: {Font name: Label-Bold})
      (<Label-View>  name: description position: {Point 30 27} size: {Dimension 350 16} font: {Font name: Default-GUI})
      (<Group-Box>   name: content     position: {Point -2 44} size: {Dimension 404 116} layout-type: fill
        (<Pad-View>  name: panes))
      (<Push-Button> name: back        title: "< Back" position: {Point 140 172} size: {Dimension 80 24} action-handler: {Event-Handler form: on-ok})
      (<Push-Button> name: next        title: "Next >" position: {Point 220 172} size: {Dimension 80 24} action-handler: {Event-Handler form: on-ok})
      (<Push-Button> name: cancel      title: "Cancel" position: {Point 310 172} size: {Dimension 80 24} action-handler: {Event-Handler form: on-cancel})))
  
  
  (method (finish rest)
    (nextmethod rest)
    (let ((panes (get-panes)))
      (when panes
        (select-pane (car panes)))))


  ;;;
  ;;;; Frame
  ;;;
  
  
  @convert-guest
  (method meta (frame-title)
    (wizard-title))


  ;;;
  ;;;; Dialog
  ;;;
  
  
  @convert-guest
  (method meta (dialog-title)
    (wizard-title))
  
  
  @convert-guest
  (method meta (dialog-class)
    Wizard-Dialog)
  

  @convert-guest
  (class meta Wizard-Dialog extends Host-Dialog
    
    
    (form
      (<install> position: {Point 450 300} size: {Dimension 302 120}))


    (method (focus-gain)
      (nextmethod)
      (focus-acquired~ guest))
  
  
    (method (get-modal-result)
      (wizard-result~ guest)))
  
  
  ;;;
  ;;;; Wizard
  ;;;
  
  
  @convert-guest
  (method meta public virtual (wizard-title)
    "Wizard")

  
  ;; todo: when access bug is fixed, put back to protected
  (method public virtual (wizard-result)
    {})


  ;;;
  ;;;; Focus
  ;;;
  
  
  (method protected virtual (focus-acquired)
    (let ((pane (selected-pane)))
      (when pane
        (focus-acquired~ pane))))

  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method (resize dh dv)
    (nextmethod dh dv)
    (size-figure~ (locate 'content) dh dv)
    (move-figure~ (locate 'back) dh dv)
    (move-figure~ (locate 'next) dh dv)
    (move-figure~ (locate 'cancel) dh dv))
  
  
  (method (on-ok evt)
    (on-ok~ (get-host) evt))
  

  (method (on-cancel evt)
    (on-cancel~ (get-host) evt))


  ;;;
  ;;;; Panes
  ;;;
  
  
  (method public (get-panes)
    (let ((pad (locate 'panes)))
      (get-children~ pad)))
  
  
  (method (select-pane pane)
    (let* ((pad (locate 'panes))
           (panes (get-children~ pad)))
      (set-selection~ pad (car panes))
      (let ((terminal? (pane-terminal? pane)))
        (set-enabled?~ (locate 'back) (neq? pane (car panes)))
        (set-default?~ (locate 'back) (not terminal?))
        (set-title~ (locate 'next) (if terminal? "Finish" "Next >"))
        (set-default?~ (locate 'next) terminal?))))
  
  
  (method (selected-pane)
    (let ((pad (locate 'panes)))
      (get-selection~ pad)))
  
  
  (method protected virtual (pane-terminal? pane)
    (eq? pane (last (get-panes))))
  

  ;;;
  ;;;; Drawing
  ;;;
  
  
  (definition Header-Color
    (new Color :red 120 :green 120 :blue 255))

  
  (method (draw dc context update lh lv)
    (let ((size (get-size)))
      (gradient-fill~ dc (new Rect 0 0 [width size] 50) {Color name: White} Header-Color)))))
