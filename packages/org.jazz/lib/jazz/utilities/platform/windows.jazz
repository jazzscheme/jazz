;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Utilities platform-dependant (windows)
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2006
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.utilities.platform.windows jazz


(import (jazz.library)
        (jazz.platform.windows)
        (jazz.ui))


(definition public (bell)
  ;; windows specific
  (MessageBeep MB_ICONEXCLAMATION))


;;;
;;;; Accelerators
;;;


(definition public (get-accelerator-table object)
  (new Accelerator-Table
    (extract-actions (if (pair? object) object (class-actions~ object)))))


(definition public (get-class-actions object)
  (class-actions~ object))


(definition public (get-guest-actions view)
  ;; necessary for dialogs that come before user bindings
  (if (null? (get-bindings~ (get-application)))
      '()
    (guest-actions~ view)))


(definition public (get-focus-actions view)
  ;; necessary for dialogs that come before user bindings
  (if (null? (get-bindings~ (get-application)))
      (cond ((is? view Text-View)
             (list (new Text-Actions) (new View-Actions)))
            ((is? view Tree-View)
             (list (new Tree-Actions) (new View-Actions)))
            (else
             '()))
    (focus-actions~ view)))


(definition public (extract-actions actions-list)
  (let ((fact (new List-Factory)))
    (for-each (function dynamic (action-list)
                (let ((context-name (get-name~ action-list)))
                  (for-each (function dynamic (action-item)
                              (let* ((action-name (get-name~ action-item))
                                     (shortcut (get-shortcut~ action-item)))
                                (when shortcut
                                  (put~ fact action-item))))
                            (get-children~ action-list))))
              actions-list)
    (get-output~ fact)))


(definition (get-accelerators-table shortcuts)
  (new Accelerator-Table shortcuts)))