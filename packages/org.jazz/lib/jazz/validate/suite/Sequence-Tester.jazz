;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Sequence Tests
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2007
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.validate.suite.Sequence-Tester jazz


(import (jazz.jml)
        (jazz.library)
        (jazz.validate))


(class Sequence-Tester extends Tester
  
  
  (form
    (<install> title: "Sequence"))


  (method (test)
    (invoke {} test-sequence))
  
  
  ;;;
  ;;;; Sequence
  ;;;


  (definition aaa
    "hello")
  
  
  (method (test-sequence)
    (validate rpt (= (count 3 '(1 3 2 5 3 3 3)) 4))
    (validate rpt (= (count-if even? '(1 2 4 6 7 8)) 4))
    (validate rpt (= (find-in '((william 4) (mark 3) (denise 6)) 'mark key: car) '(mark 3)))
    (validate rpt (= (find '((william 4) (mark 3) (denise 6)) 'denise key: car) 2))
    (validate rpt (= (find "Hello" #\o) 4))
    (validate rpt (= (find-if odd? '((william 4) (mark 3) (denise 6)) key: cadr) '(mark 3)))
    (validate rpt (= (find-if numeric? "There was 3 little pigs in 5 fields" reversed?: #t) #\5))
    (validate rpt (= (find-if numeric? "There was 3 little pigs in 5 fields" start: 15 reversed?: #t) #\3))
    (validate rpt (some? even? '(1 3 5 6 9)))
    (validate rpt (not (some? even? '(1 7 9))))
    (validate rpt (every? even? '(2 6 8)))
    (validate rpt (not (every? even? '(2 4 5 8))))
    (validate rpt (= (collect-if upper-case? "Hello Les Copains") "HLC"))
    (validate rpt (= (subseq '(a b c d e) 1 4) '(b c d)))
    (validate rpt (= (subseq '(#\h #\e #\l #\l #\o) 1 3 String) "el"))
    (validate rpt (= (mismatch "Hello" "Hey") 2))
    (validate rpt (= (mismatch "Hello" "He") 2))
    (validate rpt (= (mismatch "He" "Hello") 2))
    (validate rpt (null? (mismatch "Hello" "Hello")))
    (validate rpt (prefix? "ll" "llo"))
    (validate rpt (not (prefix? "hello" "hel")))
    (validate rpt (not (prefix? "ab" "hel")))
    (validate rpt (= (search "Hello" "ll") 2))
    (validate rpt (null? (search "Hello" "ab")))
    (validate rpt (= (map even? '(1 2 3 4 6)) '(#f #t #f #t #t)))
    (validate rpt (= (map-to String identity '(#\a #\b #\c)) "abc"))
    (validate rpt (= (split "Hello les copains" " ") '("Hello" "les" "copains")))
    (validate rpt (= (split "Hello les copains " " ") '("Hello" "les" "copains" "")))
    (validate rpt (= (split "Hello" " ") '("Hello")))
    (validate rpt (= (split "" " ") '("")))
    (validate rpt (= (split "a" "a") '("" "")))
    (validate rpt (= (split "Hello+=les+=copains" "+=") '("Hello" "les" "copains")))
    (validate rpt (= (join '("Hello" "les" "copains") " ") "Hello les copains"))
    (validate rpt (= (substitute 'a 'b '(a b c a a d e)) '(b b c b b d e)))
    (validate rpt (= (substitute #\l "ti" "Hello" :sequence? #t) "Hetitio"))
    (validate rpt (= (fill! "Hello" #\a) "aaaaa"))
    (validate rpt (= (fill! "Hello" #\a start: 2) "Heaaa"))
    (validate rpt (= (replace! "Hello" "Bon") "Bonlo"))
    (validate rpt (= (replace! "Hello" "Bon" start: 3) "HelBo"))
    (validate rpt (= (insert! "Hello" 0 #\a) "aHello"))
    (validate rpt (= (insert! "Hello" 2 #\a) "Heallo"))
    (validate rpt (= (insert! "Hello" 5 #\a) "Helloa"))
    (validate rpt (= (replace-subseq! "Hello" 2 4 "bonjour") "Hebonjouro"))
    (validate rpt (= (replace-subseq! "Hello" 2 2 "abc") "Heabcllo"))
    (validate rpt (= (replace-subseq! "" 0 0 "a") "a"))
    (validate rpt (eq? (car (split aaa " ")) aaa))
    (validate rpt (eq? (join (list aaa) " ") aaa)))))
