;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; XML Documents
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2007
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.xml.model.XML-Document jazz


(import (jazz.xml)
        (jazz.library)
        (jazz.utilities))


(class XML-Document extends Object


  (slot root)
  
  
  ;;;
  ;;;; Access
  ;;;


  (method public (get-root)
    root)
  
  
  ;;;
  ;;;; Load
  ;;;
  
  
  (method public (load file)
    (with-closed ((doc (cocreate MSXML2.DOMDocument40)))
      (put-async~ doc false)
      (put-validateOnParse~ doc false)
      (put-resolveExternals~ doc false)
      (load~ doc (parse~ file))
      (let ((root (new XML-Element self self)))
        (with-closed ((doc-element (get-documentElement~ doc)))
          (set! root (process doc-element {}))))))
  
  
  (method (process node document parent)
    (ecase (get-nodeType~ node)
      ((MSXML2.NODE_INVALID)                (process-unimplement node document parent))
      ((MSXML2.NODE_ELEMENT)                (process-element node document parent))
      ((MSXML2.NODE_ATTRIBUTE)              (process-attribute node document parent))
      ((MSXML2.NODE_TEXT)                   (process-text node document parent))
      ((MSXML2.NODE_CDATA_SECTION)          (process-cdata node document parent))
      ((MSXML2.NODE_ENTITY_REFERENCE)       (process-unimplement node document parent))
      ((MSXML2.NODE_ENTITY)                 (process-unimplement node document parent))
      ((MSXML2.NODE_PROCESSING_INSTRUCTION) (process-unimplement node document parent))
      ((MSXML2.NODE_COMMENT)                (process-comment node document parent))
      ((MSXML2.NODE_DOCUMENT)               (process-unimplement node document parent))
      ((MSXML2.NODE_DOCUMENT_TYPE)          (process-unimplement node document parent))
      ((MSXML2.NODE_DOCUMENT_FRAGMENT)      (process-unimplement node document parent))
      ((MSXML2.NODE_NOTATION)               (process-unimplement node document parent))))
  
  
  (method (process-children node document parent)
    (when (hasChildNodes~ node)
      (with-closed ((lst (get-childNodes~ node)))
        (loop (for n from 0 below (get-length~ lst))
              (do (with-closed ((child (get-item~ lst n)))
                    (process node document parent)))))))


  (method (process-element node document parent)
    (new XML-Element document parent name: (get-nodeName~ node)))


  (method (process-attribute node document parent)
    (new XML-Attribute))


  (method (process-text node document parent)
    (new XML-Text))


  (method (process-cdata node document parent)
    (new XML-Data))


  (method (process-comment node document parent)
    (new XML-Comment))


  (method (process-unimplement node document parent)
    (unimplemented 'process-unimplement))))
