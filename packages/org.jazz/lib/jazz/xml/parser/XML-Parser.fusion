;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; XML Parser
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2007
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.xml.parser.XML-Parser jazz


(import (jazz.xml)
        (jazz.library)
        (jazz.utilities))


;; Questions:
;; - Comment XML distingue un < dans le text (i.e. faut t'il escaper ce qui
;;   empeche de pouvoir librement paster un text entre deux chevrons...
;; - Le text d'un tag c'est quoi precisement. Es-ce que je peut genre
;;   <A> blabla <B> </B> yoyo <C> </C> gousigousi </A> ?


(class XML-Parser extends Object
  
  
  (definition Start-Marker
    #\<)
  
  (definition End-Marker
    #\>)
  
  (definition Closing-Marker
    #\/)
  
  (definition Property-Separator
    #\=)
  
  
  (slot reader)
  
  
  (method (initialize (text: text {}))
    (nextmethod)
    (setup-reader text))
  
  
  (method (setup-reader text)
    (set! reader (create-reader text)))
  
  
  (method (create-reader text)
    (let ((reader (new String-Reader text))
          (readtable (new Readtable)))
      (set-syntax~ readtable Property-Separator TTerminator)
      (set-syntax~ readtable End-Marker TTerminator)
      (set-readtable~ reader readtable)
      reader))
  
  
  (method public (parse-text)
    (read-children))
  
  
  (method (read-tag)
    (validate-char Start-Marker)
    (read-partial-tag))
  
  
  (method (read-partial-tag)
    (let ((tag (read reader))
          (properties (read-properties)))
      (validate-char End-Marker)
      (let ((children (read-children)))
        (read-closing-tag tag)
        (list tag properties children))))


  (method (read-closing-tag tag)
    (validate-char Closing-Marker)
    (validate-read tag)
    (validate-char End-Marker))
  
  
  (method (read-properties)
    (let ((fact (new List-Factory)))
      (skip-whites reader)
      (while (/= (peek-char reader) End-Marker)
        (let ((property (read reader)))
          (skip-whites reader)
          (validate-char Property-Separator)
          (let ((value (read reader)))
            (put~ fact property)
            (put~ fact value))))
      (get-output~ fact)))


  (method (read-children)
    (let* ((fact (new List-Factory))
           (printer (new String-Printer))
           (empty? true)
           (add
            (function dynamic ()
              (unless empty?
                (put~ fact (get-output~ printer))
                (reset~ printer)))))
      (call/ec
        (lambda (return)
          (while true
            (let ((c (read-char reader)))
              (if (eqv? c #\eof)
                  (begin
                    (add)
                    (return (get-output~ fact)))
                (if (not (eqv? c Start-Marker))
                    (begin
                      (put~ printer c)
                      (set! empty? false))
                  (add)
                  (let ((next (peek-char reader)))
                    (validate-eof next)
                    (if (eqv? next Closing-Marker)
                        (return (get-output~ fact))
                      (put~ fact (read-partial-tag))))))))))))
  
  
  (method (validate-char c)
    (let ((char (read-char reader)))
      (if (eqv? char c)
          char
        (error "Found unexpected character while parsing XML: {a}" (coerce char String)))))


  (method (validate-read symbol)
    (let ((expr (read reader)))
      (if (eqv? expr expr)
          expr
        (error "Found unexpected expression while parsing XML: {a}" expr))))
  
  
  (method (validate-eof c)
    (when (eof-object? c)
      (error "Found unexpected end of stream while parsing XML")))))
