;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; if
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2006
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library blues.interpreter.If jazz


(class If extends Syntax
  
  
  (slot test)
  (slot yes)
  (slot no)
  
  
  (method meta (walk form environment walker)
    (let ((scan (cdr form)))
      (if (or (null? scan) (null? (cdr scan)))
          [walker (walk-fatal "Not enough arguments for if")]
        (let ((no (cddr scan)))
          (if (null? no)
              [walker (walk-warning "If without a no clause should probably be a when instead")]
            (new self
              [walker (walk (car scan) environment)]
              [walker (walk (cadr scan) environment)]
              [walker (walk-body (cddr scan) environment)]))))))
  
  
  (method (initialize test yes no)
    (nextmethod)
    (set! [self test] test)
    (set! [self yes] yes)
    (set! [self no] no))
  
  
  (method (print printer readably)
    (format printer "(if {p} {p} {l detail: :v})"
            test readably
            yes readably
            no readably))
  
  
  (method (expression-execute runtime stack)
    (if (%execute test runtime stack)
        (%execute yes runtime stack)
      (%for-each-execute no runtime stack)))))
