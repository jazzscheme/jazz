;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Code Walker
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2006
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library blues.interpreter.Walker jazz


(class Walker extends Object
  
  
  ;;;
  ;;;; Lexical
  ;;;
  
  
  (method protected (augment-environment parameters environment)
    (append parameters environment))
  
  
  ;;;
  ;;;; Syntax
  ;;;
  
  
  (method (syntax? form)
    (and (pair? form)
         (memq? (car form) '(define quote begin if intrinsic lambda let let* letrec set!))))
  
  
  (method (macro? form)
    (and (pair? form)
         (memq? (car form) '(when while))))
  
  
  ;;;
  ;;;; Walk
  ;;;
  
  
  (method public (codewalk form)
    (walk form '()))
  
  
  (method protected (walk form environment)
    (cond ((symbol? form)  (walk-symbol   form environment))
          ((syntax? form)  (walk-syntax   form environment))
          ((macro? form)   (walk-macro    form environment))
          ((pair? form)    (walk-form     form environment))
          (else            (walk-constant form environment))))
  
  
  (method (walk-constant form environment)
    (new Constant form))
  
  
  (method (walk-symbol form environment)
    (cond ((memq? form environment) (walk-variable form))
          (else (walk-global form))))
  
  
  (method (walk-variable form)
    (new Variable form))
  
  
  (method (walk-global form)
    (new Global form))
  
  
  (method (walk-syntax form environment)
    (case (car form)
      (define    [Define    (walk form environment self)])
      (quote     [Quote     (walk form environment self)])
      (begin     [Begin     (walk form environment self)])
      (if        [If        (walk form environment self)])
      (intrinsic [Intrinsic (walk form environment self)])
      (lambda    [Lambda    (walk form environment self)])
      (let       [Let       (walk form environment self)])
      (let*      [Letstar   (walk form environment self)])
      (letrec    [Letrec    (walk form environment self)])
      (set!      [Setbang   (walk form environment self)])))
  
  
  (method (walk-macro form environment)
    (case (car form)
      (when [When (walk form environment self)])))
  
  
  (method (walk-list form-list environment)
    (map (function (form)
           (walk form environment))
         form-list))
  
  
  (method protected (walk-body form environment)
    (new Body (walk-list form environment)))
  
  
  (method (walk-form form environment)
    (new Call (walk (car form) environment) (walk-list (cdr form) environment)))
  
  
  ;;;
  ;;;; Error
  ;;;
  
  
  (method protected (walk-warning message)
    (error "{a}" message))
  
  
  (method protected (walk-fatal message)
    (error "{a}" message))))
