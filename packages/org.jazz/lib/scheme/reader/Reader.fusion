;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Reader
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2006
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library scheme.reader.Reader jazz


(class Reader extends Object


  (slot stream    accessors generate)
  (slot readtable accessors generate)
  
  
  (method (initialize reader stream (readtable: readtable #f))
    (set-stream reader stream)
    (set-readtable reader (either readtable (default-readtable))))
  
  
  ;;;
  ;;;; Stream
  ;;;


  (method public inline (getc reader)
    (read-char (get-stream reader)))


  (method public inline (peekc reader)
    (peek-char (get-stream reader)))
  
  
  ;;;
  ;;;; Whitespace
  ;;;


  (method public (skip-line reader)
    (let ((c (getc reader)))
      (while (and (not (eof-object? c)) (/= c {Char Line-Feed}) (/= c {Char Return}))
        (set! c (getc reader)))
      (when (= c {Char Return})
        (getc reader))))


  (method public (skip-whites reader)
    (let ((done? #f))
      (while (not done?)
        (let ((c (peekc reader)))
          (cond ((eof-object? c)
                 (getc reader)
                 (set! done? #t))
                ((eqv? c {Char Semi-Colon})
                 (getc reader)
                 (skip-line reader))
                ((whitespace? c)
                 (getc reader))
                (else
                 (set! done? #t)))))))
  
  
  ;;;
  ;;;; Read
  ;;;
  
  
  (define NoObject
    #(NoObject))


  (method public (read reader)
    (skip-whites reader)
    (let ((c (peekc reader)))
      (if (eof-object? c)
          (eof-object)
        (let ((expr (Readtable.call readtable c reader)))
          (if (eq? expr NoObject)
              (void)
            expr)))))


  (method public (read-composite reader delimiter)
    (let ((queue (new-queue)))
      (skip-whites reader)
      (while (/= (peekc reader) delimiter)
        (if (= (peekc reader) {Char Period})
            (begin
              (getc reader)
              (enqueue-list queue (read reader)))
          (let ((form (read reader)))
            (if (eof-object? form)
                (error "Unexpected end of stream reached while reading composite {s}" delimiter)
              (enqueue queue form))))
        (skip-whites reader))
      (getc reader)
      (queue-list queue)))
  
  
  ;;;
  ;;;; Readtable
  ;;;
    
  
  (definition (scheme-readtable)
    (let ((readtable (new Readtable)))
      (add-bindings readtable 'invalid      (function (reader) [reader (read-error)])        true  (naturals 0 32))
      (add-bindings readtable 'constituent  (function (reader) [reader (read-constituent)])  false (naturals 32 256))
      (add-bindings readtable 'line-comment (function (reader) [reader (read-line-comment)]) true  '(Semi-Colon))
      (add-bindings readtable 'string       (function (reader) [reader (read-string)])       true  '(Double-Quote))
      (add-bindings readtable 'list         (function (reader) [reader (read-list)])         true  '(Open-Parenthesis))
      (add-bindings readtable 'quote        (function (reader) [reader (read-quote)])        true  '(Quote))
      (add-bindings readtable 'quasiquote   (function (reader) [reader (read-quasiquote)])   true  '(Backquote))
      (add-bindings readtable 'unquote      (function (reader) [reader (read-unquote)])      true  '(Comma))
      (add-bindings readtable 'whitespace   (function (reader) [reader (read-error)])        true  '(Space Tab Line-Feed Return))
      (add-bindings readtable 'escape       (function (reader) [reader (read-error)])        true  '(Backslash))
      (add-bindings readtable 'sharp        (function (reader) [reader (read-sharp)])        true  '(Sharp))
      (add-bindings readtable 'terminator   (function (reader) [reader (read-error)])        true  '(Close-Parenthesis Close-Bracket Close-Brace))
      readtable))
  
  
  (definition (add-bindings readtable kind action terminating? chars)
    (let ((binding (new Read-Binding kind action terminating?)))
      (for-each (function (object)
                  (let ((char (cond ((integer? object) (integer->char object))
                                    ((symbol? object) (symbolic-char object))
                                    (else object))))
                    [readtable (set-binding char binding)]))
                chars)))
  
  
  (method (default-readtable reader)
    (scheme-readtable))
  
  
  (method (get-kind reader c)
    (Read-Binding.get-kind (Readtable.get-binding (get-readtable reader) c)))

  
  ;;;
  ;;;; Comment
  ;;;
  
  
  (method (read-line-comment)
    (read-error))
  
  
  (method (read-expr-comment)
    (getc)
    (let ((name (read))
          (commented (read)))
      NoObject))
  
  
  ;;;
  ;;;; List
  ;;;


  (method (read-list reader)
    (getc reader)
    (read-composite reader {Char Close-Parenthesis}))
  
  
  ;;;
  ;;;; String
  ;;;


  (method (read-string)
    (let ((output (open-output-string))
          (done? #f))
      (getc reader)
      (while (not done?)
        (let ((c (getc reader)))
          (if (eof-object? c)
              (read-error)
            (case c
              (({Char Double-Quote})
               (set! done? #t))
              (({Char Backslash})
               (write-char (getc reader) output))
              (else
               (write-char c output))))))
      (get-output-string output)))
  
  
  ;;;
  ;;;; Constituent
  ;;;


  (method (read-constituent reader)
    (let ((string (read-constituent-string reader)))
      (cond ((integer-string? string) (read-integer string))
            (else (read-symbol string)))))
  
  
  (method (read-constituent-string reader)
    (let ((output (open-output-string))
          (done? #f))
      (while (not done?)
        (let ((c (peekc reader)))
          (cond ((eof-object? c)
                 (getc)
                 (set! done? #t))
                ((eqv? c {Char Backslash})
                 (getc)
                 (set! c (getc reader)))
                (else
                 (if (= (get-kind c) 'constituent)
                     (begin
                       (getc reader)
                       (write-char c output))
                   (set! done? #t))))))
      (get-output-string output)))
  
  
  (definition (integer-string? string)
    (numeric? string))
  
  
  (definition (read-integer string)
    (parse-integer string))
  
  
  (definition (read-symbol string)
    (string->symbol string))
  
  
  ;;;
  ;;;; Quote
  ;;;


  (method (read-quote)
    (getc)
    (list 'quote (read)))
  
  
  ;;;
  ;;;; Quasiquote
  ;;;
  
  
  (method (read-quasiquote)
    (getc)
    (list 'quasiquote (read)))
  
  
  (method (read-unquote)
    (getc)
    (if (= (peekc) {Char At})
        (begin
          (getc)
          (list 'unquote-splicing (read)))
      (list 'unquote (read))))
  
  
  ;;;
  ;;;; Sharp
  ;;;


  (method (read-sharp)
    (getc)
    (case (getc)
      ({Char "f"} #f)
      ({Char "t"} #t)))
  
  
  ;;;
  ;;;; Error
  ;;;


  (method (read-error reader)
    (error "Read error"))))
