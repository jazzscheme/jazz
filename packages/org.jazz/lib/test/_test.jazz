;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Test
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2006
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library test jazz


(specialize (= c1 <Cell> c2 <Cell>) <bool>
  (and (= (get-row~ c1) (get-row~ c2))
       (= (get-col~ c1) (get-col~ c2))))


(debug (construct Cell 1 2) (new Cell 1 2))
(debug (= (new Cell 1 2) (new Cell 2 3)))


@w
(import (dev)
        (jazz.git)
        (jazz.io)
        (jazz.jml)
        (jazz.library)
        (jazz.literals)
        (jazz.platform)
        (jazz.platform.windows)
        (jazz.ui)
        (jazz.ui.dialog)
        (jazz.ui.view)
        (jazz.ui.window)
        (jazz.system)
        (jazz.utilities)
        (jedi)
        (test.a))


;;;
;;;; Types
;;;


@w
(definition (f)
  (let iter ((n 0))
    (+ n n)
    (iter "boum")))


;;;
;;;; Types in virtual methods
;;;


@w(
(class X extends Object
  
  (method virtual (f x <fx>) <fx>
    (+ x x))
  
  (method (g)
    (* (f) (f))))

(class Y extends X
  
  (method (f x)
    2)
  
  (method (h)
    (* (f) (f)))))


;;;
;;;; Git
;;;


@w(
(definition *jazz-repository*
  (new Git-Repository {Directory Root}))


(git-repository-set! *jazz-repository*)


(prepare-merge~ *jazz-repository* {Directory Native "C:" "Merge"}))


;;;
;;;; CFFI
;;;


@w(
(debug 'init1 (init1))

(debug 'scalar1 (scalar1 2))
(debug 'scalar2 (scalar2 3))
(debug 'scalar3 (scalar3 '(a)))

(let ((t1 (typ1 2 3))
      (t2 (typ2 2 3)))
  (debug 'typ1 t1 (foreign-tag t1) (still-obj-refcount t1))
  (debug 'typ2 t2 (foreign-tag t2) (still-obj-refcount t2))
  (gc)
  (debug 'typ3 (typ3 t1 t2)))

(let ((t4 (typ4 2 3))
      (t5 (typ5 2 3)))
  (debug 'typ4 t4 (foreign-tag t4) (still-obj-refcount t4))
  (debug 'typ5 t5 (foreign-tag t5) (still-obj-refcount t5))
  (gc)
  (debug 'typ6 (typ6 t4 t5)))

(debug 'constant (list ca cb))
(debug 'enumeration (list ea eb ec))

(let ((s1 (make-S1)))
  (debug 's1 s1 (foreign-tag s1) (still-obj-refcount s1))
  (debug 'struct1a (struct1a s1))
  (debug 'struct1c (struct1c s1)))

(debug 'func1 (func1)))


;;;
;;;; Iteration
;;;


@w(
(definition (iter-list lst proc)
  (when lst
    (proc (car lst))
    (iter-list (cdr lst) proc)))


(definition (iter-node node proc)
  (letrec ((iterate
             (function dynamic (node)
               (proc node)
               (for-each iterate (get-children~ node)))))
    (iterate node)))


(definition (iter obj proc)
  (cond ((or (null? obj) (pair? obj)) (iter-list obj proc))
        ((is? obj JML-Node) (iter-node obj proc))))


(definition (foldl-list x f s)
  (if (not x)
      s
    (foldl-list (cdr x) f (f (car x) s))))


(definition (foldr-list x f s)
  (if (not x)
      s
    (f (car x) (foldr-list (cdr x) f s))))


(definition (foldl-node x f s)
  (foldl (get-children~ x)
         (function dynamic (c s)
           (foldl-node c f s))
         (f x s)))


(definition (foldr-node x f s)
  )


(definition (foldl-component x f s)
  (foldl (get-children~ x)
         (function dynamic (c s)
           (foldl-component c f s))
         (f x s)))


(definition (foldr-component x f s)
  )


(definition (foldl x f s)
  (cond ((or (null? x) (pair? x)) (foldl-list x f s))
        ((is? x JML-Node) (foldl-node x f s))
        ((is? x Component) (foldl-component x f s))))


(definition (foldr x f s)
  (cond ((or (null? x) (pair? x)) (foldr-list x f s))
        ((is? x JML-Node) (foldr-node x f s))
        ((is? x Component) (foldr-component x f s))))


(definition (iter-map proc obj)
  (let ((fact (new List-Factory)))
    (iter obj
          (function (x)
            (put~ fact (proc x))))
    (get-output~ fact)))


(definition (iter-linearize obj)
  (iter-map identity obj))


(definition (fold-map proc obj)
  (foldr obj
         (function (x lst)
           (cons (proc x) lst))
         {}))


(definition (foldl-map proc obj)
  (foldl obj
         (function (x lst)
           (cons (proc x) lst))
         {}))


(definition (fold-linearize obj)
  (fold-map identity obj))


(definition (fold x f s)
  (cond ((or (null? x) (pair? x)) (foldl-list x f s))
        ((is? x JML-Node) (fold-node x f s))
        ((is? x Component) (fold-component x f s))))


(definition (fold-node x f s)
  (let ((ps (f x s)))
    (for-each (function dynamic (c)
                (fold-node c f ps))
              (get-children~ x))
    ps))


(definition (fold-component x f s)
  (let ((ps (f x s)))
    (for-each (function dynamic (c)
                (fold-component c f ps))
              (get-children~ x))
    ps))


(definition (component->jml x)
  (fold x
        (function dynamic (c p)
          (new JML-Element p (identifier-name (type-name (class-of c))) properties: (list 'name (get-name~ c) 'position (get-position~ c) 'size (get-size~ c) 'serial (object->serial-number c))))
        {}))


(definition (pprint-component x)
  (pretty-print~
    (component->jml x)
    :console))


(definition (ppc x)
  (pprint-component x))


(definition (test x)
  (ppc x)))


;;;
;;;; To Fix
;;;


@to-fix(
(class A extends Object
  
  (method (f)
    2))

(class B extends A
  
  (method (f)
    3))


(let ((a (new A))
      (b (new B)))
  (debug (f~ a))
  (debug (f~ b)))))
