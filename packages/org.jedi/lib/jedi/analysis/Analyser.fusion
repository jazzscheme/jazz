;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Code Analysis
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2007
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jedi.analysis.Analyser jazz


(import (jazz.library)
        (jedi.analysis))


(class Analyser extends Object


  (slot source)
  
  
  (method protected virtual (load-units?)
    false)
  

  (method meta public (load-all)
    (for-each-source
      (function dynamic (unit-name source properties)
        (when (not (unit-loaded? unit-name))
          (user-message "Loading {s}..." unit-name)
          (autoload unit-name))))
    (user-message "Done"))


  (method (process-unit name walker)
    (set! source (get-manifest-source name))
    (with-closed ((reader (new File-Reader :file source)))
      (let ((expr))
        (while (not (eof-object? (set! expr (read~ reader))))
          (code-walk2 expr walker)))))
  
  
  (method (process-all)
    (let ((walker (new-walker unit-hook form-hook symbol-hook define-hook)))
      (for-each-source
        (function dynamic (unit-name source properties)
          (user-message "Processing {s}" unit-name)
          (when (and (null? (class-of unit-name)) (load-units?))
            (autoload unit-name))
          (process-unit unit-name walker)))
      (user-message "Done")))


  (method protected virtual (load-hook param unit-name entering?)
    )


  (method protected virtual (unit-hook param unit-name packages ascendant interfaces properties)
    )


  (method protected virtual (form-hook unit param form)
    )
  

  (method protected virtual (toplevel-hook param name)
    )


  (method protected virtual (symbol-hook param symbol)
    )
  
  
  (method protected virtual (define-hook param symbol entering?)
    )
  
  
  (method public virtual (go)
    (process-all))))
