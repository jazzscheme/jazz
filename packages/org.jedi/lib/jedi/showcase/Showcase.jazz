;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Jazz Showcase
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2007
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jedi.showcase.Showcase jazz


(import (jazz.jml)
        (jazz.library)
        (jazz.literals)
        (jedi))


(class Showcase extends View uses (Language Development Utilities System Windows WinDef WinBase WinKernel WinUser WinGDI)

  
  (form
    (<install>                                                    size: {Dimension 900 600}
      (<Tab-View>                            name: tab            position: {Point 6 6} size: {Dimension 888 588}
        (<Tab-Sheet>                         name: views-sheet    title: "Views"
          (<!>                               name: content
            (<Image-View>                    name: i              position: {Point 20 20} size: {Dimension 32 32} icon: {Bitmap-Resource "Jedi"})
            (<Tab-View>                      name: t              title: "Tab" position: {Point 440 10} size: {Dimension 300 100}
              (<Tab-Sheet>                                        title: "Some")
              (<Tab-Sheet>                                        title: "Example")
              (<Tab-Sheet>                                        title: "Tabs"))
            (<Border-View>                   name: text-border    position: {Point 20 269} size: {Dimension 350 221} border-type: edge
              (<Scroller-View>                                    hscroll?: #t vscroll?: #t
                (<!>                         name: content
                  (<Jazz-Text-View>          name: jt))))
            (<Region-Showcase>               name: rs             position: {Point 440 350} size: {Dimension 200 140} background: {Color name: Green})
            (<DC-Showcase>                   name: dcs            position: {Point 660 350} size: {Dimension 100 100} background: {Color name: Blue})
            (<Border-View>                   name: tree-border    position: {Point 440 150} size: {Dimension 313 150} border-type: edge
              (<Scroller-View>                                    hscroll?: #t vscroll?: #t
                (<!>                         name: content        layout-type: fill
                  (<Tree-Header>
                    (<!>                     name: content
                      (<Tree-View>           name: tv             portfolio: :icons selection-mode: row
                        (<Tree-Node-Column>                       title: "Node" width: 150)
                        (<Tree-Label-Column>                      title: "Name" width: 50)
                        (<Tree-Label-Column>                      title: "Location" width: 100)))))))
            (<Image-View>                    name: b1             position: {Point 10 100} size: {Dimension 16 16} image-name: {Bitmap-Resource "New"} portfolio: :icons)
            (<Image-View>                    name: b2             position: {Point 30 100} size: {Dimension 16 16} image-name: {Bitmap-Resource "Open"} portfolio: :icons)
            (<Image-View>                    name: b3             position: {Point 50 100} size: {Dimension 16 16} image-name: {Bitmap-Resource "Save"} portfolio: :icons)
            (<Image-View>                    name: b4             position: {Point 70 100} size: {Dimension 16 16} image-name: {Bitmap-Resource "Cut"} portfolio: :icons)
            (<Image-View>                    name: b5             position: {Point 90 100} size: {Dimension 16 16} image-name: {Bitmap-Resource "Copy"} portfolio: :icons)
            (<Image-View>                    name: b6             position: {Point 110 100} size: {Dimension 16 16} image-name: {Bitmap-Resource "Paste"} portfolio: :icons)
            (<Image-View>                    name: b7             position: {Point 130 100} size: {Dimension 16 16} image-name: {Bitmap-Resource "Undo"} portfolio: :icons)
            (<Image-View>                    name: b8             position: {Point 150 100} size: {Dimension 16 16} image-name: {Bitmap-Resource "Redo"} portfolio: :icons)
            (<Image-View>                    name: b9             position: {Point 170 100} size: {Dimension 16 16} image-name: {Bitmap-Resource "Help"} portfolio: :icons)
            (<Label-View>                                         title: "Label-View" position: {Point 92 22})
            (<Border-View>                                        position: {Point 260 78} size: {Dimension 148 19} border-type: edge
              (<Combo-Box>                                        choices: ((() "Hello") (() "There")) content: "Combo-Box"))
            (<Border-View>                                        position: {Point 260 101} size: {Dimension 148 19} border-type: edge
              (<Combo-Box>                                        choices: ((() "Hello") (() "There") (() "Here") (() "Everywhere") (() "Everybody")) content: "Combo-Box" condensed?: #t))
            (<Border-View>                                        position: {Point 260 124} size: {Dimension 148 19} border-type: edge
              (<Combo-Box>                                        content: "Dynamic Combo-Box"))
            (<Border-View>                                        position: {Point 260 147} size: {Dimension 148 19} border-type: edge
              (<Color-Combo>))
            (<Group-Box>                                          title: "Group-Box" position: {Point 239 17} size: {Dimension 165 50})
            (<Horizontal-Line>                                    position: {Point 21 185} size: {Dimension 214 8})
            (<Progress-Bar>                                       position: {Point 288 180})
            (<Push-Button>                                        title: "Push-Button" position: {Point 21 212})
            (<Check-Box>                                          title: "Check-Box" position: {Point 153 218})
            (<Radio-Button>                                       title: "Radio-Button 1" position: {Point 259 217} selected?: #t)
            (<Radio-Button>                                       title: "Radio-Button 2" position: {Point 259 236})
            (<Push-Tool>                                          position: {Point 22 139} image-name: {Bitmap-Resource "Find"} portfolio: :icons)
            (<Toggle-Tool>                                        position: {Point 71 139} size: {Dimension 22 22} image-name: {Bitmap-Resource "Link"} portfolio: :icons)
            (<Radio-Tool>                                         position: {Point 128 139} image-name: {Bitmap-Resource "ModeSelect"} portfolio: :icons selected?: #t)
            (<Radio-Tool>                                         position: {Point 152 139} image-name: {Bitmap-Resource "Font"} portfolio: :icons)
            (<Radio-Tool>                                         position: {Point 176 139} image-name: {Bitmap-Resource "ModeRect"} portfolio: :icons)
            (<Label-Tool>                                         title: "Hello World!" position: {Point 92 47})))
        (<Tab-Sheet>                         name: drawing-sheet  title: "Drawing"
          (<!>                               name: content
            (<Draw-Showcase>                 name: ds             position: {Point 0 0} size: {Dimension 884 558})))
        (<Tab-Sheet>                         name: scaling-sheet  title: "Scaling"
          (<!>                               name: content
            (<Scaling-Showcase>              name: ss             position: {Point 0 0} size: {Dimension 870 555})))
        (<Tab-Sheet>                         name: layout-sheet   title: "Layout"
          (<!>                               name: content
            (<Border-View>                   name: layout-b1      position: {Point 50 50} size: {Dimension 400 200} border-type: solid
              (<Layout-View>                 name: layout         layout-type: flow
                (<View>                                           size: {Dimension 100 200} location: head background: {Color name: Dark-Red})
                (<View>                                           size: {Dimension 5 200} location: head background: {Color name: Dark-Blue})
                (<View>                                           location: center background: {Color name: Dark-Green})))
            (<Border-View>                   name: layout-b2      position: {Point 50 300} size: {Dimension 400 200} border-type: solid
              (<Splitter-View>               name: splitter       state: split orientation: horz division: 200
                (<View>                                           size: {Dimension 100 200} location: first background: {Color name: Dark-Red})
                (<View>                                           location: second background: {Color name: Dark-Green})))))
        (<Tab-Sheet>                         name: effects-sheet  title: "Effects"
          (<!>                               name: content
            (<View>                          name: ss             position: {Point 85 50} size: {Dimension 600 400}
              (<Push-Button>                                      title: "Wipe Left" position: {Point 20 20} size: {Dimension 140 24} action-handler: {Event-Handler :form on-wipe})
              (<View>                        name: wiped          position: {Point 350 50} size: {Dimension 150 250} background: {Color name: Red}))))
        (<Tab-Sheet>                         name: branches-sheet title: "Branches"
          (<!>                               name: content
            (<View>                          name: ss             position: {Point 85 50} size: {Dimension 600 400} background: {Color name: Dark-Gray}
              (<View>                        name: s2             position: {Point 150 50} size: {Dimension 150 250}
                (<Push-Button>                                    title: "Remove" position: {Point 50 10} size: {Dimension 100 22} action-handler: {Event-Handler :form on-set-active-branch branch: 2})
                (<Push-Button>                                    title: "V1" position: {Point 50 40} size: {Dimension 100 22} action-handler: {Event-Handler :form on-set-active-branch branch: (2 v1)})
                (<Push-Button>                                    title: "V2" position: {Point 50 70} size: {Dimension 100 22} action-handler: {Event-Handler :form on-set-active-branch branch: (2 v2)})
                (<Push-Button>                                    title: "V2A" position: {Point 50 100} size: {Dimension 100 22} action-handler: {Event-Handler :form on-set-active-branch branch: (2 v2 va)})
                (<Push-Button>                                    title: "V2B" position: {Point 50 130} size: {Dimension 100 22} action-handler: {Event-Handler :form on-set-active-branch branch: (2 v2 vb)})
                (<Push-Button>                                    title: "V2C" position: {Point 50 160} size: {Dimension 100 22} action-handler: {Event-Handler :form on-set-active-branch branch: (2 v2 vc)})
                (<Push-Button>                                    title: "V2CA" position: {Point 50 190} size: {Dimension 100 22} action-handler: {Event-Handler :form on-set-active-branch branch: (2 v2 vc va)}))
              (<View>                        name: p              position: {Point 350 50} size: {Dimension 100 100} background: {Color name: Green})
              (<Branch>                      name: v1
                (<install>                                        size: {Dimension 500 300}))
              (<Branch>                      name: v2
                (<install>
                  (<!>                       name: p              size: {Dimension 150 250}))
                (<Branch>                    name: va
                  (<install>
                    (<!>                     name: p              background: {Color name: Red})))
                (<Branch>                    name: vb
                  (<install>
                    (<!>                     name: p              background: {Color name: Blue})))
                (<Branch>                    name: vc
                  (<install>
                    (<!>                     name: p              position: {Point 320 100} size: {Dimension 150 210} background: {Color name: Purple})
                    (<Push-Button>           name: b              title: "Hello" position: {Point 130 330} size: {Dimension 200 22}))
                  (<Branch>                  name: va
                    (<install>
                      (<!>                   name: b              title: "Bonjour"))))))))
        (<Tab-Sheet>                         name: outline-sheet  title: "Outline"
          (<!>                               name: content        layout-type: fill
            (<Outline-Showcase>)))
        (<Tab-Sheet>                         name: tree-sheet     title: "Tree"
          (<!>                               name: content        layout-type: fill
            (<Tree-Showcase>)))
        (<Tab-Sheet>                         name: text-sheet     title: "Text"
          (<!>                               name: content        layout-type: fill
            (<Text-Showcase>)))
        (<Tab-Sheet>                         name: threads-sheet  title: "Threads"
          (<!>                               name: content        layout-type: fill
            (<Threads-Showcase>              name: threads))))))


  (method (install rest)
    (nextmethod rest)
    (install-views))
  
  
  ;;;
  ;;;; Frame
  ;;;
  
  
  @convert-guest
  (method meta (frame-icon)
    {Bitmap-Resource "ProjectsManager"})
  
  
  @convert-guest
  (method meta (frame-title)
    "Showcase")
  
  
  @convert-guest
  (method meta (frame-position)
    {Point 50 30})
  
  
  @convert-guest
  (method meta (frame-size)
    {Dimension 900 600})
  
  
  (method (frame-workspaces)
    '(home))
  
  
  ;;;
  ;;;; Events
  ;;;


  (method (resize dh dv)
    (nextmethod dh dv)
    (size-figure~ (locate 'tab) dh dv)
    (size-figure~ (locate-component 'layout-b1) dh dv)
    (size-figure~ (locate-component 'layout-b2) dh dv))
  
  
  (method (on-set-active-branch evt)
    (let* ((sender (get-sender~ evt))
           (branch (child~ sender (get-property~ evt branch:)))
           (view (child~ sender 2)))
      (set-active-branch~ view branch)))
  
  
  ;;;
  ;;;; Stage
  ;;;
  
  
  (method (get-stage name)
    (get-content~ (locate name)))


  ;;;
  ;;;; Views
  ;;;

  
  (method (install-views)
    (install-text)
    (install-tree-view))
  
  
  (method (install-text)
    (let ((file {File Jedi-Project "Development" "Categories" "Application" "Jedi-User.jazz"}))
      (when (exists?~ file)
        (set-moniker~ (get-controller~ (locate 'jt)) file))))
  
  
  (method (install-tree-view)
    (let ((tree (locate 'tv)))
      (add-row~ tree children: (list (new Tree-Node title: "Hello" image: {Bitmap-Resource "Document"}) (new Tree-Label title: "There") (new Tree-Label title: "How do you do?")))
      (add-row~ tree children: (list (new Tree-Node title: "Hello" image: {Bitmap-Resource "OpenedFolder"}) (new Tree-Label title: "There") (new Tree-Label title: "How do you do?")))
      (let ((node (add-row~ tree children: (list (new Tree-Node title: "Hello" image: {Bitmap-Resource "OpenedFolder"}) (new Tree-Label title: "There") (new Tree-Label title: "How do you do?")))))
        (for-each (function (n)
                    (let* ((title (format "Foo{a}" n))
                           (cell (format "How do you {a}?" title))
                           (node (add-row~ tree father: node children: (list (new Tree-Node title: title image: {Bitmap-Resource "OpenedFolder"}) (new Tree-Label title: "There") (new Tree-Label title: cell)))))
                      (when (= n 5)
                        (for-each (function (n)
                                    (let* ((title (format "Bar{a}" n))
                                           (cell (format "How do you {a}?" title)))
                                      (add-row~ tree father: node children: (list (new Tree-Node title: title image: {Bitmap-Resource "OpenedFolder"}) (new Tree-Label title: "There") (new Tree-Label title: cell)))))
                                  (naturals 0 5)))))
                  (naturals 0 25)))))

  
  ;;;
  ;;;; Region
  ;;;
  
  
  (class Region-Showcase extends View


    (method (draw surface context update lh lv)
      (set-bk-mode~ surface :transparent)
      (set-font~ surface {Font name: Label-Bold})
      (draw-text~ surface 10 10 "Hello world!")
      (with-closed ((rgn (new Region))
                    (frs (new Region rect: {Rect 10  50 145 100}))
                    (sec (new Region rect: {Rect 30  70 180 120})))
        (combine!~ rgn frs 'or)
        (combine!~ rgn sec 'or)
        (fill-region~ surface rgn {Color name: Red}))
      (draw-image~ (get-icons-cache~ (get-application)) surface context {Bitmap-Resource "Handler"} 160 8)))

  
  ;;;
  ;;;; Surface
  ;;;
  
  
  (class DC-Showcase extends View


    (method (draw surface context update lh lv)
      (let ((size {Dimension 32 32}))
        (with-closed ((memory-dc (new Memory-Surface surface size: size)))
          (fill-rect~ memory-dc {Rect 0 0 32 32} {Color name: Green})
          (bit-blit~ memory-dc surface destination: {Point 10 10})))))
  
  
  ;;;
  ;;;; Draw
  ;;;
  
  
  (class Draw-Showcase extends View
    
    
    (definition System-Colors
      '((SCROLLBAR                0)
        (BACKGROUND               1)
        (ACTIVECAPTION            2)
        (INACTIVECAPTION          3)
        (MENU                     4)
        (WINDOW                   5)
        (WINDOWFRAME              6)
        (MENUTEXT                 7)
        (WINDOWTEXT               8)
        (CAPTIONTEXT              9)
        (ACTIVEBORDER            10)
        (INACTIVEBORDER          11)
        (APPWORKSPACE            12)
        (HIGHLIGHT               13)
        (HIGHLIGHTTEXT           14)
        (BTNFACE                 15)
        (BTNSHADOW               16)
        (GRAYTEXT                17)
        (BTNTEXT                 18)
        (INACTIVECAPTIONTEXT     19)
        (BTNHIGHLIGHT            20)
        (3DDKSHADOW              21)
        (3DLIGHT                 22)
        (INFOTEXT                23)
        (INFOBK                  24)
        (HOTLIGHT                26)
        (GRADIENTACTIVECAPTION   27)
        (GRADIENTINACTIVECAPTION 28)))
    
    
    (method (draw surface context update lh lv)
      (draw-gradient surface (new Rect 450 10 650 30))
      (fill-rect~ surface (new Rect  0   0 118 214) {Color name: Green})
      (set-font~ surface {Font name: Ansi-Var})
      (draw-edge surface (new Rect 10  10  50  50) EDGE_BUMP 1)
      (draw-edge surface (new Rect 10  60  50 100) EDGE_ETCHED 2)
      (draw-edge surface (new Rect 10 110  50 150) EDGE_RAISED 3)
      (draw-edge surface (new Rect 10 160  50 200) EDGE_SUNKEN 4)
      (draw-edge surface (new Rect 64  10 104  50) BDR_RAISEDINNER 5)
      (draw-edge surface (new Rect 64  60 104 100) BDR_SUNKENINNER 6)
      (draw-edge surface (new Rect 64 110 104 150) BDR_RAISEDOUTER 7)
      (draw-edge surface (new Rect 64 160 104 200) BDR_SUNKENOUTER 8)
      (draw-info surface 250 "1" "EDGE_BUMP")
      (draw-info surface 265 "2" "EDGE_ETCHED")
      (draw-info surface 280 "3" "EDGE_RAISED")
      (draw-info surface 295 "4" "EDGE_SUNKEN")
      (draw-info surface 320 "5" "BDR_RAISEDINNER")
      (draw-info surface 335 "6" "BDR_SUNKENINNER")
      (draw-info surface 350 "7" "BDR_RAISEDOUTER")
      (draw-info surface 365 "8" "BDR_SUNKENOUTER")
      (let* ((i 17)
             (h 10)
             (v (- 400 i)))
        (draw-rop surface h (increase! v i) R2_BLACK)
        (draw-rop surface h (increase! v i) R2_NOTMERGEPEN)
        (draw-rop surface h (increase! v i) R2_MASKNOTPEN)
        (draw-rop surface h (increase! v i) R2_NOTCOPYPEN)
        (draw-rop surface h (increase! v i) R2_MASKPENNOT)
        (draw-rop surface h (increase! v i) R2_NOT)
        (draw-rop surface h (increase! v i) R2_XORPEN)
        (draw-rop surface h (increase! v i) R2_NOTMASKPEN))
      (let* ((i 17)
             (h 150)
             (v (- 400 i)))
        (draw-rop surface h (increase! v i) R2_MASKPEN)
        (draw-rop surface h (increase! v i) R2_NOTXORPEN)
        (draw-rop surface h (increase! v i) R2_NOP)
        (draw-rop surface h (increase! v i) R2_MERGENOTPEN)
        (draw-rop surface h (increase! v i) R2_COPYPEN)
        (draw-rop surface h (increase! v i) R2_MERGEPENNOT)
        (draw-rop surface h (increase! v i) R2_MERGEPEN)
        (draw-rop surface h (increase! v i) R2_WHITE))
      (set-text-color~ surface {Color name: Black})
      (fill-rect~ surface (new Rect 200 300 400 360) {Color name: White})
      (fill-rect~ surface (new Rect 200 300 400 320) {Color name: Light})
      (fill-rect~ surface (new Rect 200 320 400 340) {Color name: Medium})
      (fill-rect~ surface (new Rect 200 340 400 360) {Color name: Dark})
      (frame-rect~ surface (new Rect 200 300 400 360) {Color name: Black})
      (set-font~ surface (new Font font-name: "Times New Roman" point-size: 12))
      (for-each (function (info n)
                  (bind (name no) info
                    (let* ((color (new Color :system no))
                           (ref (get-ref~ color)))
                      (draw-text~ surface 450 (+ 50 (* n 16)) (->string name))
                      (fill-rect~ surface (new Rect 625 (+ 50 (* n 16)) 725 (+ 66 (* n 16))) color)
                      (draw-text~ surface 750 (+ 50 (* n 16)) (format "{a} {a} {a}" (red-part ref) (green-part ref) (blue-part ref))))))
                System-Colors
                (naturals 0 (length System-Colors)))
      (frame-rect~ surface (new Rect 625 50 725 (+ 50 (* (length System-Colors) 16))) {Color name: Black})
      (set-font~ surface {Font name: System})      (draw-text~ surface 200 100 "System")
      (set-font~ surface {Font name: Ansi-Var})    (draw-text~ surface 200 120 "Ansi-Var")
      (set-font~ surface {Font name: Ansi-Fixed})  (draw-text~ surface 200 140 "Ansi-Fixed")
      (set-font~ surface {Font name: Default-GUI}) (draw-text~ surface 200 160 "Default-GUI")
      (set-font~ surface {Font name: Label-Bold})  (draw-text~ surface 200 180 "Label-Bold")
      (set-font~ surface {Font name: Code})        (draw-text~ surface 200 200 "Code")
      (draw-text~ surface 200 250 "Disabled text" #f))

    
    (method (draw-gradient surface rect)
      (gradient-fill~ surface rect {Color name: Red} {Color name: Blue}))
    
    
    (method (draw-edge surface rect edge no)
      (set-font~ surface {Font name: Label-Bold})
      (draw-edge~ surface rect edge BF_RECT)
      (draw-text~ surface (+ (get-left~ rect) 17) (+ (get-top~ rect) 14) (->string no)))
    
    
    (method (draw-info surface top no edge)
      (draw-text~ surface 10 top no)
      (draw-text~ surface 20 top (format ": {a}" edge)))
    
    
    (method (draw-rop surface h v rop)
      (let ((rect (new Rect h v (+ h 120) (+ v 16))))
        (fill-rect~ surface rect {Color name: Black})
        (set-text-color~ surface {Color name: Red})
        (draw-text~ surface (+ h 2) (+ v 1) "Some")
        (set-text-color~ surface {Color name: Blue})
        (draw-text~ surface (+ h 32) (+ v 1) "colored")
        (set-text-color~ surface {Color name: White})
        (draw-text~ surface (+ h 71) (+ v 1) "text")
        (set-text-color~ surface {Color name: Green})
        (draw-text~ surface (+ h 91) (+ v 1) "styles")
        (set-rop~ surface rop)
        (with-closed ((region (new Region rect: rect)))
          (fill-region~ surface region {Color name: Blue}))
        (set-rop~ surface R2_COPYPEN))))
  
  
  ;;;
  ;;;; Scaling
  ;;;
  
  
  (class Scaling-Showcase extends View
    
    
    (form
      (<install>
        (<Border-View>                       position: {Point 8 8} size: {Dimension 70 17} border-color: {Color red: 200 green: 188 blue: 166}
          (<Scaling-Combo>    name: scaling))
        (<Border-View>                       position: {Point 88 8} size: {Dimension 140 17} border-color: {Color red: 200 green: 188 blue: 166}
          (<Mapping-Combo>    name: mapping))
        (<Border-View>                       position: {Point 238 8} size: {Dimension 100 17} border-color: {Color red: 200 green: 188 blue: 166}
          (<Drawing-Combo>    name: drawing))
        (<Push-Button>        name: report   position: {Point 348 8} size: {Dimension 80 17} title: "Report" action-handler: {Event-Handler :form on-report})
        (<Push-Button>        name: refresh  position: {Point 438 8} size: {Dimension 80 17} title: "Refresh" action-handler: {Event-Handler :form on-refresh})
        (<Border-View>        name: border   position: {Point 5 32} size: {Dimension 865 498} border-type: edge
          (<Scroller-View>    name: scroller hscroll?: #t vscroll?: #t
            (<!>              name: content
              (<Scaled-Stage> name: stage    position: {Point 0 0} size: {Dimension 5000 2000} client: 4))))))
    
    
    (definition Scaling-Factors
      '((500 "500")
        (200 "200")
        (150 "150")
        (100 "100")
        (75 "75")
        (50 "50")
        (25 "25")))
    
    
    (definition Mapping-Modes
      (list
        (list MM_TEXT "MM_TEXT")
        (list MM_LOMETRIC "MM_LOMETRIC")
        (list MM_HIMETRIC "MM_HIMETRIC")
        (list MM_LOENGLISH "MM_LOENGLISH")
        (list MM_HIENGLISH "MM_HIENGLISH")
        (list MM_TWIPS "MM_TWIPS")
        (list MM_ISOTROPIC "MM_ISOTROPIC")
        (list MM_ANISOTROPIC "MM_ANISOTROPIC")))
    
    
    (definition Drawing-Modes
      '((view "View")
        (handcoded "Handcoded")))
    
    
    (definition Transform-Info
      (make-table test: eq?))
    
    
    (slot view-scaling initialize 100)
    (slot view-mapping initialize MM_ISOTROPIC)
    (slot view-drawing initialize 'view)

    
    (method (install rest)
      (nextmethod rest)
      (set-choices~ (locate 'scaling) Scaling-Factors)
      (set-value~ (locate 'scaling) 100)
      (set-choices~ (locate 'mapping) Mapping-Modes)
      (set-value~ (locate 'mapping) MM_ISOTROPIC)
      (set-choices~ (locate 'drawing) Drawing-Modes)
      (set-value~ (locate 'drawing) 'view)
      (update-scrollbars~ (locate 'stage)))
    
    
    (method protected (register-info name lie size wor vor wex vex clip)
      (table-set! Transform-Info name (list lie size wor vor wex vex clip)))
    
    
    (method (on-report evt)
      (report 'stage)
      (report 'blue)
      (report 'red)
      (report 'green)
      (fresh-prompt~ (get-application)))
    
    
    (method (report name)
      (bind (lie size wor vor wex vex clip) (table-ref Transform-Info name #f)
        (format :console "{%}{a width: 5}   LIE: {a width: 3 justify: :right} {a width: 3 justify: :right} {a width: 4 justify: :right} {a width: 4 justify: :right}   WOR: {a width: 4 justify: :right} {a width: 4 justify: :right}   VOR: {a width: 4 justify: :right} {a width: 4 justify: :right}   WEX: {a width: 3 justify: :right} {a width: 3 justify: :right}   VEX: {a width: 3 justify: :right} {a width: 3 justify: :right}   CLIP: {a width: 4 justify: :right} {a width: 4 justify: :right} {a width: 4 justify: :right} {a width: 4 justify: :right}"
                name (get-h~ lie) (get-v~ lie) (get-width~ size) (get-height~ size) (get-h~ wor) (get-v~ wor) (get-h~ vor) (get-v~ vor) (get-h~ wex) (get-v~ wex) (get-h~ vex) (get-v~ vex) (get-left~ clip) (get-top~ clip) (get-right~ clip) (get-bottom~ clip))))
    
    
    (method (on-refresh evt)
      (invalidate-view))

      
    (method public (get-view-scaling)
      view-scaling)
    
    
    (method public (set-view-scaling value)
      (set! view-scaling value)
      (set-scaling~ (locate 'stage) (/ value 100))
      (set-scaled?~ (locate 'stage) (/= value 100)))
    
    
    (method public (get-view-mapping)
      view-mapping)
    
    
    (method public (set-view-mapping value)
      (set! view-mapping value)
      (invalidate-view))
    
    
    (method public (get-view-drawing)
      view-drawing)
    
    
    (method public (set-view-drawing value)
      (set! view-drawing value)
      (invalidate-view))
    
    
    (class Scaling-Combo extends Combo-Box
      
      
      (method (combo-choice)
        (set-view-scaling (get-value))))
    
    
    (class Mapping-Combo extends Combo-Box
      
      
      (method (combo-choice)
        (set-view-mapping (get-value))))
    
    
    (class Drawing-Combo extends Combo-Box
      
      
      (method (combo-choice)
        (set-view-drawing (get-value))))
    
    
    (class Scaled-Stage extends Scaled-View
      
      
      @w
      (form
        (<install>
          (<Scaled-View>     name: blue   position: {Point 100 100} size: {Dimension 400 250} client: 5 background: {Color name: Dark-Blue}
            (<Scaled-View>   name: red    position: {Point 200 50} size: {Dimension 300 50} client: 6 background: {Color name: Dark-Red}
              (<Scaled-View> name: orange position: {Point 50 25} size: {Dimension 50 100} client: 7 background: {Color name: Orange}))
            (<Scaled-View>   name: green  position: {Point 200 150} size: {Dimension 300 50} client: 6 background: {Color name: Dark-Green}))))
    
    
      (method (draw surface context update lh lv)
        (fill-rect~ surface (new Rect 0 0 61 61) {Color name: Green})
        (set-font~ surface {Font name: Ansi-Var})
        (draw-edge surface (new Rect 10 10 50 50) EDGE_BUMP 1)
        (draw-info surface 85 "1" "EDGE")
        (gradient-fill~ surface (new Rect 340 10 540 30) {Color name: Red} {Color name: Blue}))
      
      
      (method (draw-edge surface rect edge no)
        (set-font~ surface {Font name: Label-Bold})
        (draw-edge~ surface rect edge BF_RECT)
        (draw-text~ surface (+ (get-left~ rect) 17) (+ (get-top~ rect) 14) (->string no)))
      
      
      (method (draw-info surface top no edge)
        (draw-text~ surface 10 top no)
        (draw-text~ surface 20 top (format ": {a}" edge)))))


  ;;;
  ;;;; Effects
  ;;;
  
  
  (method (on-wipe evt)
    (let ((canvas (locate 'wiped)))
      (set-effect~ (get-root~ canvas) (new Wipe-Effect direction: 'right delay: 0.005))
      (set-background~ canvas (if (eq? (get-background~ canvas) {Color name: Red}) {Color name: Blue} {Color name: Red}))))))
