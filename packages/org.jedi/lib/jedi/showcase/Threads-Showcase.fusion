;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Threads Showcase
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2007
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jedi.showcase.Threads-Showcase jazz


(import (jazz.jml)
        (jazz.library)
        (jazz.literals)
        (jedi))


(class Threads-Showcase extends View
    
  
  (slot threads  initialize '())
  (slot slowdown initialize {})
  (slot start    initialize {})
  (slot count    initialize 0)
  (slot done?    initialize false)

  
  (form
    (<install>
      (<Push-Button> name: add-threads     title: "Add Threads" position: {Point 4 4} size: {Dimension 100 22} action-handler: {Event-Handler form: on-add-threads})
      (<Push-Button> name: suspend-threads title: "Suspend" position: {Point 114 4} size: {Dimension 100 22} action-handler: {Event-Handler form: on-suspend-threads})
      (<Push-Button> name: resume-threads  title: "Resume" position: {Point 224 4} size: {Dimension 100 22} action-handler: {Event-Handler form: on-resume-threads})
      (<View>        name: area            position: {Point 2 32} size: {Dimension 776 470})
      (<Portfolio>   name: portfolio       width: 32 height: 32 icons: ({Bitmap-Resource "Jedi"}))))
  
  
  (method (destroy-component)
    (stop-showcase)
    (nextmethod))


  (method (start-showcase)
    (set! start (clock))
    (set! count 0)
    (set! done? false)
    (add-threads))


  (method (stop-showcase)
    (set! done? true)
    (wait-while
      (function dynamic ()
        (some? (function dynamic (thread)
                 (and (running?~ thread)
                      (alive?~ thread)))
               threads)))
    (set! threads '()))
  
  
  (method (add-icon n)
    (let* ((area (locate 'area))
           (size (get-size~ area)))
      (new Showcase-Icon
        :image-name 0
        :portfolio (locate 'portfolio)
        parent: area
        :position (new Point (random (- [width size] 42)) (random (- [height size] 42)))
        :size {Dimension 32 32})))
  
  
  (method public (add-threaded-icon n)
    (let* ((icon   (add-icon n))
           (thread (new Thread
                     name: "Showcase Icon"
                     :information n
                     :context self
                     :execute (function (thread)
                                (while (not done?)
                                  (sleep slowdown)
                                  (execute-primary
                                   (function dynamic ()
                                     (animate-icon~ icon))))))))
      (set! threads (cons thread threads))
      (set! slowdown (* (length threads) (if (unit-compiled? Language) 5 10)))
      icon))
  
  
  (method (on-add-threads evt)
    (add-threads))
  
  
  (method (on-suspend-threads evt)
    (for-each (function dynamic (thread)
                (suspend~ thread))
              threads))
  
  
  (method (on-resume-threads evt)
    (for-each (function dynamic (thread)
                (resume~ thread))
              threads))
  
  
  (method (add-threads)
    (for-each (function dynamic (n)
                (add-threaded-icon n))
              (naturals 0 5)))
  
  
  (method (report-timing)
    (increase! count)
    (when (= (modulo count 100) 0)
      (user-message "{s}" (* (/ count (- (clock) start)) (clocks/second)))))
  
  
  (method (print printer readably)
    (print-unreadable self printer
      (function dynamic (printer)
        (format printer "{s}"
                (object-address self)))))


  ;;;
  ;;;; Showcase-Icon
  ;;;
  
  
  (class Showcase-Icon extends Image-View
    
    
    (slot direction-h)
    (slot direction-v)
    
    
    (method (prepare rest)
      (nextmethod rest)
      (set! direction-h (- (random 11) 5))
      (set! direction-v (- (random 11) 5)))
    
    
    (method public (animate-icon)
      (move-icon)
      (rebound-icon))
    
    
    (method (move-icon)
      (let ((pos (get-position)))
        (set-position (new Point (+ [h pos] direction-h) (+ [v pos] direction-v)))))
    
    
    (method (rebound-icon)
      (let ((rect (get-rect))
            (area (get-size~ parent)))
        (when (or (< [left rect] 0) (> [right rect] [width area]))
          (set! direction-h (- direction-h)))
        (when (or (< [top rect] 0) (> [bottom rect] [height area]))
          (set! direction-v (- direction-v))))))))
