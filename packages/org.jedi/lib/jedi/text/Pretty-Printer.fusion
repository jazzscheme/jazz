;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Jazz Code Pretty-Printer
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2007
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jedi.text.Pretty-Printer jazz


(import (jazz.library)
        (jedi))


(class Pretty-Printer extends Object uses (Language Interpreter Development Utilities System)
  @macro (
  
  (slot name)
  (slot code)
  (slot margin)
  
  
  (method (initialize name code (margin: margin 80))
    (nextmethod)
    (set! name~self name)
    (set! code~self code)
    (set! margin~self margin))
  
  
  ;;;
  ;;;; Print
  ;;;
  
  
  (method public (pretty-print output)
    (pp-method name code 0 output))
  
  
  (method (pp-method name code level output)
    (let ((parameters (function-parameters code))
          (body (function-body code)))
      (format output "(method ({a}" name)
      (pp-parameters parameters level output)
      (format output ")")
      (pp-body body (+ level 1) output)
      (format output "){%}")))
  
  
  (method (pp-parameters parameters level output)
    (while parameters
      (if (atom? parameters)
          (begin
            (format output " . ")
            (pp parameters level output)
            (set! parameters '()))
        (format output " ")
        (pp (car parameters) level output)
        (set! parameters (cdr parameters)))))
  
  
  (method (pp-body body level output)
    (for-each (function dynamic (object)
                (format output "{%}{_ :v}" (* level 2))
                (pp object level output))
              body))
  
  
  (method (pp-arguments arguments level output)
    (when arguments
      (for-each-pair (function dynamic (pair)
                       (if (atom? pair)
                           (begin
                             (format output " . ")
                             (pp pair level output))
                         (format output " ")
                         (pp (car pair) level output)))
                     arguments)))
  
  
  (method (pp-list list level output)
    (for-each-pair (function dynamic (pair)
                     (bind (object . others?) pair
                       (pp object level output)
                       (when others?
                         (format output " "))))
                   list))
  
  
  (method (pp object level output)
    (if (special? object)
        (pp-special object level output)
      (pp-expr object level output)))
  
  
  ;;;
  ;;;; Expr
  ;;;

  
  (method (pp-expr expr level output)
    (typecase expr
      ((Nil)                (pp-nil                expr level output))
      ((Pair)               (pp-pair               expr level output))
      ((Boolean)            (pp-boolean            expr level output))
      ((Symbol)             (pp-symbol             expr level output))
      ((Variable)           (pp-variable           expr level output))
      ((Closure)            (pp-closure            expr level output))
      ((Self)               (pp-self               expr level output))
      ((Super)              (pp-super              expr level output))
      ((Field)              (pp-field              expr level output))
      ((Call)               (pp-call               expr level output))
      ((Dispatch)           (pp-dispatch           expr level output))
      ((Constant)           (pp-constant           expr level output))
      ((Meta-Reference)     (pp-meta-reference     expr level output))
      ((Outer-Reference)    (pp-outer-reference    expr level output))
      ((Global-Reference)   (pp-global-reference   expr level output))
      ((Manifest-Reference) (pp-manifest-reference expr level output))
      ((Field-Reference)    (pp-field-reference    expr level output))
      (else               (pp-constant           expr level output))))
  
  
  (method (pp-nil {} level output)
    (format output "{s}" {}))
  
  
  (method (pp-pair pair level output)
    (format output "(")
    (pp (car pair) level output)
    (format output " . ")
    (pp (cdr pair) level output)
    (format output ")"))
  
  
  (method (pp-boolean boolean level output)
    (format output "{s}" boolean))
  
  
  (method (pp-symbol symbol level output)
    (format output "{s}" symbol))
  
  
  (method (pp-variable variable level output)
    (format output "{s}" (variable-symbol variable)))
  
  
  (method (pp-closure closure level output)
    (pp-function (closure-function closure) level output))
  
  
  (method (pp-self slf level output)
    (format output "self"))
  
  
  (method (pp-super spr level output)
    (format output nextmethod))
  
  
  (method (pp-field field level output)
    (format output "{s}" (field-name field)))
  
  
  (method (pp-call call level output)
    (format output "(")
    (pp (call-called call) level output)
    (pp-arguments (call-parameters call) level output)
    (format output ")"))
  
  
  (method (pp-constant reference level output)
    (pp (get-constant~ reference) level output))
  
  
  (method (pp-meta-reference reference level output)
    (pp (field-reference-form reference) level output))
  
  
  (method (pp-outer-reference reference level output)
    (pp (field-reference-form reference) level output))
  
  
  (method (pp-global-reference reference level output)
    (pp (get-symbol~ reference) level output))
  
  
  (method (pp-manifest-reference reference level output)
    (pp (manifest-reference-symbol reference) level output))
  
  
  (method (pp-field-reference reference level output)
    (pp (field-reference-form reference) level output))
  
  
  (method (pp-constant constant level output)
    (format output "{s}" constant))
  
  
  ;;;
  ;;;; Special
  ;;;

  
  (method (pp-special special level output)
    (typecase special
      ((function)       (pp-function       special level output))
      ((quote)          (pp-quote          special level output))
      ((if)             (pp-if             special level output))
      ((when)           (pp-when           special level output))
      ((unless)         (pp-unless         special level output))
      ((while)          (pp-while          special level output))
      @converted-to-macro
      ((for)            (pp-for            special level output))
      ((begin)          (pp-begin          special level output))
      ((prog1)          (pp-prog1          special level output))
      ((cond)           (pp-cond           special level output))
      ((case)           (pp-case           special level output))
      @converted-to-macro
      ((ecase)          (pp-ecase          special level output))
      ((typecase)       (pp-typecase       special level output))
      ((let)            (pp-let            special level output))
      ((let*)           (pp-let*           special level output))
      ((letrec)         (pp-letrec         special level output))
      ((with)           (pp-with           special level output))
      ((with-closed)    (pp-with-closed    special level output))
      ((bind)           (pp-bind           special level output))
      ((return)         (pp-return         special level output))
      ((catch)          (pp-catch          special level output))
      @converted-to-macro
      ((unwind-protect) (pp-unwind-protect special level output))
      ((and)            (pp-and            special level output))
      ((or)             (pp-or             special level output))
      ((set!)           (pp-set            special level output))
      @converted-to-macro
      ((increase!)      (pp-increase       special level output))
      @converted-to-macro
      ((decrease!)      (pp-decrease       special level output))
      ((error?)         (pp-is-error       special level output))
      ((assert)         (pp-assert         special level output))
      (else           (error "Unable to pretty print {t}" special))))
  
  
  (method (pp-function special level output)
    (let ((parameters (function-parameters special))
          (body (function-body special)))
      (format output "(function ({l})" parameters)
      (pp-body body (+ level 1) output)
      (format output ")")))
  
  
  (method (pp-quote special level output)
    (format output "'")
    (pp (quote-expr special) level output))
  
  
  (method (pp-if special level output)
    (format output "(if ")
    (pp (if-test special) level output)
    (format output "{%}")
    (format output "{_ :v}" (* (+ level 2) 2))
    (pp (if-yes special) (+ level 2) output)
    (format output "{%}")
    (pp (if-no special) (+ level 1) output))
  
  
  (method (pp-when special level output)
    )
  
  
  (method (pp-unless special level output)
    )
  
  
  (method (pp-while special level output)
    )
  
  
  (method (pp-until special level output)
    )
  
  
  (method (pp-for special level output)
    )
  
  
  (method (pp-begin special level output)
    )
  
  
  (method (pp-prog1 special level output)
    )
  
  
  (method (pp-cond special level output)
    )
  
  
  (method (pp-case special level output)
    )
  
  
  (method (pp-ecase special level output)
    )
  
  
  (method (pp-typecase special level output)
    (format output "(typecase ")
    (pp (typecase-target special) level output)
    (for-each (function dynamic (info)
                (bind (test . body) info
                  (format output "{%}{_ :v}((" (* (+ level 1) 2))
                  (pp test level output)
                  (format output ") ")
                  (pp-list body (+ level 2) output)
                  (format output ")")))
              (typecase-form special))
    (format output ")"))
  
  
  (method (pp-let special level output)
    (format output "(let (")
    (for-each-pair (function dynamic (pair)
                     (bind ((variable expr expr?) . others?) pair
                       (format output "(")
                       (pp variable level output)
                       (format output " ")
                       (pp expr level output)
                       (format output ")")
                       (when others?
                         (format output "{%}"))))
                   (let-bindings special))
    (format output ")")
    (pp-body (let-body special) (+ level 1) output)
    (format output ")"))
  
  
  (method (pp-let* special level output)
    (format output "(let* (")
    (for-each-pair (function dynamic (pair)
                     (bind ((variable expr expr?) . others?) pair
                       (format output "(")
                       (pp variable level output)
                       (format output " ")
                       (pp expr level output)
                       (format output ")")
                       (when others?
                         (format output "{%}"))))
                   (let-bindings special))
    (format output ")")
    (pp-body (let-body special) (+ level 1) output)
    (format output ")"))
  
  
  (method (pp-letrec special level output)
    )
  
  
  (method (pp-with special level output)
    )
  
  
  (method (pp-with-closed special level output)
    )
  
  
  (method (pp-bind special level output)
    )
  
  
  (method (pp-return special level output)
    )
  
  
  (method (pp-catch special level output)
    )
  
  
  (method (pp-and special level output)
    )
  
  
  (method (pp-or special level output)
    )
  
  
  (method (pp-set special level output)
    )
  
  
  (method (pp-increase special level output)
    )
  
  
  (method (pp-decrease special level output)
    )
  
  
  (method (pp-is-error special level output)
    )
  
  
  (method (pp-assert special level output)
    ))))
