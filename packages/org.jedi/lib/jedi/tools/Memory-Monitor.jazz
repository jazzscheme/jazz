;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Memory Monitor
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2007
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jedi.tools.Memory-Monitor jazz


(import (jazz.jml)
        (jazz.library)
        (jedi))


(class Memory-Monitor extends Palette


  (form
    (<install> title: "Memory Monitor" position: {Point 0 738} size: {Dimension 1024 10}))


  (method (install rest)
    (nextmethod rest)
    (let* ((stage (get-stage))
           (pos   (get-position~ stage))
           (size  (get-size~ stage)))
      (set-position (new Point 0 (+ (get-v~ pos) (get-height~ size) 30)))
      (set-size (new Dimension (get-width~ (get-size~ (get-desktop))) 10))))
  

  ;;;
  ;;;; Drawing
  ;;;


  @to-convert
  (method (on-draw evt)
    (let ((surface (get-dc~ evt)))
      (draw-border surface)
      (draw-zones surface)))
  
  
  (method (draw-border surface)
    @waiting
    (let* ((rect   (get-client-rect))
           (left   0)
           (top    0)
           (right  (get-right~ rect))
           (bottom (- (get-bottom~ rect) 1)))
      (set-pen~ surface {Pen name: Dark})
      (move-to~ surface left top)
      (line-to~ surface right top)
      (set-pen~ surface {Pen name: White})
      (move-to~ surface left 1)
      (line-to~ surface right 1)))
  
  
  (method (draw-zones surface)
    (let* ((size (get-size))
           (height (get-height~ size)))
      (bind (symbols objects heap) (statistics)
        (bind (zones) objects
          (let* ((nb-zones (length zones))
                 (width (fxround/ (get-width~ size) nb-zones))
                 (h 0))
            (fill-rect~ surface (new Rect 0 0 (get-width~ size) height) {Color name: Medium})
            (for-each (function dynamic (info)
                        (bind (nb-bags size alloc free) info
                          (fill-rect~ surface (new Rect h 0 (+ h 20) height) {Color name: Dark}))
                        (increase! h width))
                      zones))))))))
