<html>

<head>
  <link href="css/master.css" rel="stylesheet" type="text/css"/>
  <title>JazzScheme User Manual</title>
</head>

<body>
<div id="page">
  <h1 id="title">JazzScheme</h1>
  <div id="sectionnav">
    <a class="section" href="index.htm">Home</a>
    <a class="section" href="news.htm">News</a>
    <a class="section" href="features.htm">Features</a>
    <a class="section" href="screenshots.htm">Screenshots</a>
    <a class="section" href="documentation.htm">Documentation</a>
    <a class="subsection" href="starting.htm">Getting Started</a>
    <a class="subsection" href="tutorials.htm">Tutorials</a>
    <a class="subsection" href="manual.htm">
      <b>User Manual</b>
    </a>
    <a class="section" href="development.htm">Development</a>
    <a class="section" href="download.htm">Download</a>
  </div>
  <div id="content">
    <div style="margin-top: 22;">
      <b>Note that this manual is absolutely not complete and even contains obsolete or even wrong information. It is a work in progress. Consult at your own risk!!!</b>
    </div>
    <h3>Summary</h3>
    <div class="summary_toc">
      <a href="#TOC">Table of Contents</a>
    </div>
    <div class="summary_index">
      <a href="#INDEX">Index</a>
    </div>
    <div>
      <div class="summary1">
        <a href="#SEC73">1. Jazz</a>
      </div>
      <div>
        <div>
          <div class="summary2">
            <a href="#SEC153">1.1. Modules</a>
          </div>
          <div>
            <div>
              <div class="summary3">
                <a href="#SEC154">1.1.1. Access</a>
              </div>
            </div>
            <div>
              <div class="summary3">
                <a href="#SEC159">1.1.2. Application</a>
              </div>
            </div>
            <div>
              <div class="summary3">
                <a href="#SEC160">1.1.3. Catalog</a>
              </div>
            </div>
            <div>
              <div class="summary3">
                <a href="#SEC161">1.1.4. Builder</a>
              </div>
            </div>
            <div>
              <div class="summary3">
                <a href="#SEC162">1.1.5. Compiler</a>
              </div>
            </div>
            <div>
              <div class="summary3">
                <a href="#SEC163">1.1.6. Designer</a>
              </div>
            </div>
            <div>
              <div class="summary3">
                <a href="#SEC164">1.1.7. Doc</a>
              </div>
            </div>
            <div>
              <div class="summary3">
                <a href="#SEC165">1.1.8. Groupware</a>
              </div>
            </div>
            <div>
              <div class="summary3">
                <a href="#SEC166">1.1.9. Interpreter</a>
              </div>
            </div>
            <div>
              <div class="summary3">
                <a href="#SEC167">1.1.10. Java</a>
              </div>
            </div>
            <div>
              <div class="summary3">
                <a href="#SEC168">1.1.11. JavaParser</a>
              </div>
            </div>
            <div>
              <div class="summary3">
                <a href="#SEC169">1.1.12. JML</a>
              </div>
            </div>
            <div>
              <div class="summary3">
                <a href="#SEC170">1.1.13. JRM</a>
              </div>
            </div>
            <div>
              <div class="summary3">
                <a href="#SEC171">1.1.14. Library</a>
              </div>
            </div>
            <div>
              <div class="summary3">
                <a href="#SEC188">1.1.15. License</a>
              </div>
            </div>
            <div>
              <div class="summary3">
                <a href="#SEC189">1.1.16. Process</a>
              </div>
            </div>
            <div>
              <div class="summary3">
                <a href="#SEC190">1.1.17. Repository</a>
              </div>
            </div>
            <div>
              <div class="summary3">
                <a href="#SEC191">1.1.18. Slayer</a>
              </div>
            </div>
            <div>
              <div class="summary3">
                <a href="#SEC192">1.1.19. SQL</a>
              </div>
            </div>
            <div>
              <div class="summary3">
                <a href="#SEC193">1.1.20. UI</a>
              </div>
            </div>
            <div>
              <div class="summary3">
                <a href="#SEC208">1.1.21. XML</a>
              </div>
            </div>
            <div>
              <div class="summary3">
                <a href="#SEC209">1.1.22. Zip</a>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
    <div>
      <div class="summary1">
        <a href="#SEC210">2. Jedi</a>
      </div>
    </div>
    <a name="TOC">
      <h3>Table of Contents</h3>
    </a>
    <div>
      <div class="toc_first1">
        <a name="SEC73" href="#org.jazz">1. Jazz</a>
      </div>
      <div>
        <div>
          <div class="toc_first2">
            <a name="SEC74" href="#overview">1.1. Overview</a>
          </div>
          <div>
            <div>
              <div class="toc_first3">
                <a name="SEC75" href="#lexical">1.1.1. Lexical Syntax</a>
              </div>
            </div>
            <div>
              <div class="toc3">
                <a name="SEC76" href="#syntax">1.1.2. Language Syntax</a>
              </div>
              <div>
                <div>
                  <div class="toc4">
                    <a name="SEC77" href="#SEC1">1.1.2.1. Constants</a>
                  </div>
                </div>
              </div>
            </div>
            <div>
              <div class="toc3">
                <a name="SEC78" href="#toplevel_forms">1.1.3. Toplevel Forms</a>
              </div>
              <div>
                <div>
                  <div class="toc4">
                    <a name="SEC79" href="#in">1.1.3.1. in</a>
                  </div>
                </div>
                <div>
                  <div class="toc4">
                    <a name="SEC80" href="#using">1.1.3.2. using</a>
                  </div>
                </div>
                <div>
                  <div class="toc4">
                    <a name="SEC81" href="#class">1.1.3.3. class</a>
                  </div>
                </div>
                <div>
                  <div class="toc4">
                    <a name="SEC82" href="#interface">1.1.3.4. interface</a>
                  </div>
                </div>
                <div>
                  <div class="toc4">
                    <a name="SEC83" href="#package">1.1.3.5. package</a>
                  </div>
                </div>
                <div>
                  <div class="toc4">
                    <a name="SEC84" href="#constant">1.1.3.6. constant</a>
                  </div>
                </div>
                <div>
                  <div class="toc4">
                    <a name="SEC85" href="#enumeration">1.1.3.7. enumeration</a>
                  </div>
                </div>
                <div>
                  <div class="toc4">
                    <a name="SEC86" href="#structure">1.1.3.8. structure</a>
                  </div>
                </div>
                <div>
                  <div class="toc4">
                    <a name="SEC87" href="#intrinsic">1.1.3.9. intrinsic</a>
                  </div>
                </div>
                <div>
                  <div class="toc4">
                    <a name="SEC88" href="#external">1.1.3.10. external</a>
                  </div>
                </div>
                <div>
                  <div class="toc4">
                    <a name="SEC89" href="#coexternal">1.1.3.11. coexternal</a>
                  </div>
                </div>
                <div>
                  <div class="toc4">
                    <a name="SEC90" href="#definition">1.1.3.12. definition</a>
                  </div>
                </div>
                <div>
                  <div class="toc4">
                    <a name="SEC91" href="#method">1.1.3.13. method</a>
                  </div>
                </div>
                <div>
                  <div class="toc4">
                    <a name="SEC92" href="#comethod">1.1.3.14. comethod</a>
                  </div>
                </div>
                <div>
                  <div class="toc4">
                    <a name="SEC93" href="#slot">1.1.3.15. slot</a>
                  </div>
                </div>
                <div>
                  <div class="toc4">
                    <a name="SEC94" href="#property">1.1.3.16. property</a>
                  </div>
                </div>
                <div>
                  <div class="toc4">
                    <a name="SEC95" href="#properties">1.1.3.17. properties</a>
                  </div>
                </div>
              </div>
            </div>
            <div>
              <div class="toc3">
                <a name="SEC96" href="#reference_desambiguation">1.1.4. Reference Desambiguation</a>
              </div>
            </div>
            <div>
              <div class="toc3">
                <a name="SEC97" href="#naming">1.1.5. Naming Conventions</a>
              </div>
            </div>
            <div>
              <div class="toc3">
                <a name="SEC98" href="#functions">1.1.6. Functions</a>
              </div>
            </div>
            <div>
              <div class="toc3">
                <a name="SEC99" href="#lists">1.1.7. Lists</a>
              </div>
            </div>
            <div>
              <div class="toc3">
                <a name="SEC100" href="#symbols">1.1.8. Symbols</a>
              </div>
            </div>
            <div>
              <div class="toc3">
                <a name="SEC101" href="#objects">1.1.9. Objects</a>
              </div>
            </div>
            <div>
              <div class="toc3">
                <a name="SEC102" href="#components">1.1.10. Components</a>
              </div>
            </div>
            <div>
              <div class="toc3">
                <a name="SEC103" href="#modifiers">1.1.11. Modifiers</a>
              </div>
            </div>
            <div>
              <div class="toc3">
                <a name="SEC104" href="#types">1.1.12. Types</a>
              </div>
            </div>
            <div>
              <div class="toc3">
                <a name="SEC105" href="#threads">1.1.13. Threads</a>
              </div>
            </div>
            <div>
              <div class="toc3">
                <a name="SEC106" href="#formatted_output">1.1.14. Formatted Output</a>
              </div>
            </div>
            <div>
              <div class="toc3">
                <a name="SEC107" href="#collector">1.1.15. Garbage Collector</a>
              </div>
            </div>
            <div>
              <div class="toc3">
                <a name="SEC108" href="#launch">1.1.16. Launch Parameters</a>
              </div>
            </div>
            <div>
              <div class="toc3">
                <a name="SEC109" href="#grammar">1.1.17. Formal Grammar</a>
              </div>
            </div>
          </div>
        </div>
        <div>
          <div class="toc2">
            <a name="SEC110" href="#syntax_forms">1.2. Syntax</a>
          </div>
        </div>
        <div>
          <div class="toc2">
            <a name="SEC111" href="#constants">1.3. Constants</a>
          </div>
        </div>
        <div>
          <div class="toc2">
            <a name="SEC112" href="#primitives">1.4. Primitive Types</a>
          </div>
        </div>
        <div>
          <div class="toc2">
            <a name="SEC113" href="#SEC2">1.5. Packages</a>
          </div>
          <div>
            <div>
              <div class="toc_first3">
                <a name="SEC114" href="#jazz">1.5.1. Jazz</a>
              </div>
              <div>
                <div>
                  <div class="toc4">
                    <a name="SEC115" href="#SEC3">1.5.1.1. Boolean</a>
                  </div>
                </div>
                <div>
                  <div class="toc4">
                    <a name="SEC116" href="#SEC4">1.5.1.2. Char</a>
                  </div>
                </div>
                <div>
                  <div class="toc4">
                    <a name="SEC117" href="#SEC5">1.5.1.3. Class</a>
                  </div>
                </div>
                <div>
                  <div class="toc4">
                    <a name="SEC118" href="#SEC6">1.5.1.4. Closure</a>
                  </div>
                </div>
                <div>
                  <div class="toc4">
                    <a name="SEC119" href="#SEC7">1.5.1.5. Collector</a>
                  </div>
                </div>
                <div>
                  <div class="toc4">
                    <a name="SEC120" href="#SEC8">1.5.1.6. Control</a>
                  </div>
                </div>
                <div>
                  <div class="toc4">
                    <a name="SEC121" href="#SEC9">1.5.1.7. Debugger</a>
                  </div>
                </div>
                <div>
                  <div class="toc4">
                    <a name="SEC122" href="#SEC10">1.5.1.8. Enumeration</a>
                  </div>
                </div>
                <div>
                  <div class="toc4">
                    <a name="SEC123" href="#SEC11">1.5.1.9. Eval</a>
                  </div>
                </div>
                <div>
                  <div class="toc4">
                    <a name="SEC124" href="#SEC12">1.5.1.10. Format</a>
                  </div>
                </div>
                <div>
                  <div class="toc4">
                    <a name="SEC125" href="#SEC13">1.5.1.11. Function</a>
                  </div>
                </div>
                <div>
                  <div class="toc4">
                    <a name="SEC126" href="#SEC14">1.5.1.12. Hashtable</a>
                  </div>
                </div>
                <div>
                  <div class="toc4">
                    <a name="SEC127" href="#SEC15">1.5.1.13. Integer</a>
                  </div>
                </div>
                <div>
                  <div class="toc4">
                    <a name="SEC128" href="#SEC16">1.5.1.14. Interface</a>
                  </div>
                </div>
                <div>
                  <div class="toc4">
                    <a name="SEC129" href="#SEC17">1.5.1.15. List</a>
                  </div>
                </div>
                <div>
                  <div class="toc4">
                    <a name="SEC130" href="#SEC18">1.5.1.16. Manifest</a>
                  </div>
                </div>
                <div>
                  <div class="toc4">
                    <a name="SEC131" href="#SEC19">1.5.1.17. Map</a>
                  </div>
                </div>
                <div>
                  <div class="toc4">
                    <a name="SEC132" href="#SEC20">1.5.1.18. Metaclass</a>
                  </div>
                </div>
                <div>
                  <div class="toc4">
                    <a name="SEC133" href="#SEC21">1.5.1.19. Number</a>
                  </div>
                </div>
                <div>
                  <div class="toc4">
                    <a name="SEC134" href="#SEC22">1.5.1.20. Object</a>
                  </div>
                </div>
                <div>
                  <div class="toc4">
                    <a name="SEC135" href="#SEC23">1.5.1.21. Package</a>
                  </div>
                </div>
                <div>
                  <div class="toc4">
                    <a name="SEC136" href="#SEC24">1.5.1.22. Printer</a>
                  </div>
                </div>
                <div>
                  <div class="toc4">
                    <a name="SEC137" href="#SEC25">1.5.1.23. Procedure</a>
                  </div>
                </div>
                <div>
                  <div class="toc4">
                    <a name="SEC138" href="#SEC26">1.5.1.24. Reader</a>
                  </div>
                </div>
                <div>
                  <div class="toc4">
                    <a name="SEC139" href="#SEC27">1.5.1.25. Real</a>
                  </div>
                </div>
                <div>
                  <div class="toc4">
                    <a name="SEC140" href="#SEC28">1.5.1.26. Sequence</a>
                  </div>
                </div>
                <div>
                  <div class="toc4">
                    <a name="SEC141" href="#SEC29">1.5.1.27. String</a>
                  </div>
                </div>
                <div>
                  <div class="toc4">
                    <a name="SEC142" href="#SEC30">1.5.1.28. Symbol</a>
                  </div>
                </div>
                <div>
                  <div class="toc4">
                    <a name="SEC143" href="#SEC31">1.5.1.29. Thread</a>
                  </div>
                </div>
                <div>
                  <div class="toc4">
                    <a name="SEC144" href="#SEC32">1.5.1.30. Time</a>
                  </div>
                </div>
                <div>
                  <div class="toc4">
                    <a name="SEC145" href="#SEC33">1.5.1.31. Type</a>
                  </div>
                </div>
                <div>
                  <div class="toc4">
                    <a name="SEC146" href="#SEC34">1.5.1.32. Unit</a>
                  </div>
                </div>
                <div>
                  <div class="toc4">
                    <a name="SEC147" href="#SEC35">1.5.1.33. Values</a>
                  </div>
                </div>
                <div>
                  <div class="toc4">
                    <a name="SEC148" href="#SEC36">1.5.1.34. Vector</a>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
        <div>
          <div class="toc2">
            <a name="SEC149" href="#SEC37">1.6. Classes</a>
          </div>
          <div>
            <div>
              <div class="toc_first3">
                <a name="SEC150" href="#Object">1.6.1. Object</a>
              </div>
            </div>
            <div>
              <div class="toc3">
                <a name="SEC151" href="#Boolean">1.6.2. Boolean</a>
              </div>
            </div>
            <div>
              <div class="toc3">
                <a name="SEC152" href="#Char">1.6.3. Char</a>
              </div>
            </div>
          </div>
        </div>
        <div>
          <div class="toc2">
            <a name="SEC153" href="#SEC38">1.7. Modules</a>
          </div>
          <div>
            <div>
              <div class="toc_first3">
                <a name="SEC154" href="#Access">1.7.1. Access</a>
              </div>
              <div>
                <div>
                  <div class="toc4">
                    <a name="SEC155" href="#SEC39">1.7.1.1. Classes</a>
                  </div>
                  <div>
                    <div>
                      <div class="toc5">
                        <a name="SEC156" href="#Connection">1.7.1.1.1. Connection</a>
                      </div>
                    </div>
                    <div>
                      <div class="toc5">
                        <a name="SEC157" href="#Request">1.7.1.1.2. Request</a>
                      </div>
                    </div>
                    <div>
                      <div class="toc5">
                        <a name="SEC158" href="#Recordset">1.7.1.1.3. Recordset</a>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
            <div>
              <div class="toc3">
                <a name="SEC159" href="#Application">1.7.2. Application</a>
              </div>
            </div>
            <div>
              <div class="toc3">
                <a name="SEC160" href="#Catalog">1.7.3. Catalog</a>
              </div>
            </div>
            <div>
              <div class="toc3">
                <a name="SEC161" href="#Builder">1.7.4. Builder</a>
              </div>
            </div>
            <div>
              <div class="toc3">
                <a name="SEC162" href="#Compiler">1.7.5. Compiler</a>
              </div>
            </div>
            <div>
              <div class="toc3">
                <a name="SEC163" href="#Designer">1.7.6. Designer</a>
              </div>
            </div>
            <div>
              <div class="toc3">
                <a name="SEC164" href="#Doc">1.7.7. Doc</a>
              </div>
            </div>
            <div>
              <div class="toc3">
                <a name="SEC165" href="#Groupware">1.7.8. Groupware</a>
              </div>
            </div>
            <div>
              <div class="toc3">
                <a name="SEC166" href="#Interpreter">1.7.9. Interpreter</a>
              </div>
            </div>
            <div>
              <div class="toc3">
                <a name="SEC167" href="#Java">1.7.10. Java</a>
              </div>
            </div>
            <div>
              <div class="toc3">
                <a name="SEC168" href="#JavaParser">1.7.11. JavaParser</a>
              </div>
            </div>
            <div>
              <div class="toc3">
                <a name="SEC169" href="#JML">1.7.12. JML</a>
              </div>
            </div>
            <div>
              <div class="toc3">
                <a name="SEC170" href="#JRM">1.7.13. JRM</a>
              </div>
            </div>
            <div>
              <div class="toc3">
                <a name="SEC171" href="#Library">1.7.14. Library</a>
              </div>
              <div>
                <div>
                  <div class="toc4">
                    <a name="SEC172" href="#SEC40">1.7.14.1. Classes</a>
                  </div>
                  <div>
                    <div>
                      <div class="toc5">
                        <a name="SEC173" href="#Point">1.7.14.1.1. Point</a>
                      </div>
                    </div>
                    <div>
                      <div class="toc5">
                        <a name="SEC174" href="#Rect">1.7.14.1.2. Rect</a>
                      </div>
                    </div>
                    <div>
                      <div class="toc5">
                        <a name="SEC175" href="#Dimension">1.7.14.1.3. Dimension</a>
                      </div>
                    </div>
                    <div>
                      <div class="toc5">
                        <a name="SEC176" href="#Branch">1.7.14.1.4. Branch</a>
                      </div>
                    </div>
                    <div>
                      <div class="toc5">
                        <a name="SEC177" href="#Component">1.7.14.1.5. Component</a>
                      </div>
                    </div>
                    <div>
                      <div class="toc5">
                        <a name="SEC178" href="#Form">1.7.14.1.6. Form</a>
                      </div>
                    </div>
                    <div>
                      <div class="toc5">
                        <a name="SEC179" href="#Node">1.7.14.1.7. Node</a>
                      </div>
                    </div>
                    <div>
                      <div class="toc5">
                        <a name="SEC180" href="#Element">1.7.14.1.8. Element</a>
                      </div>
                    </div>
                    <div>
                      <div class="toc5">
                        <a name="SEC181" href="#Exemplar">1.7.14.1.9. Exemplar</a>
                      </div>
                    </div>
                  </div>
                </div>
                <div>
                  <div class="toc4">
                    <a name="SEC182" href="#Windows">1.7.14.2. Windows</a>
                  </div>
                  <div>
                    <div>
                      <div class="toc5">
                        <a name="SEC183" href="#WinGDI">1.7.14.2.1. WinGDI</a>
                      </div>
                    </div>
                    <div>
                      <div class="toc5">
                        <a name="SEC184" href="#WinUser">1.7.14.2.2. WinUser</a>
                      </div>
                    </div>
                    <div>
                      <div class="toc5">
                        <a name="SEC185" href="#WinDef">1.7.14.2.3. WinDef</a>
                      </div>
                    </div>
                    <div>
                      <div class="toc5">
                        <a name="SEC186" href="#WinKernel">1.7.14.2.4. WinKernel</a>
                      </div>
                    </div>
                    <div>
                      <div class="toc5">
                        <a name="SEC187" href="#WinBase">1.7.14.2.5. WinBase</a>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
            <div>
              <div class="toc3">
                <a name="SEC188" href="#License">1.7.15. License</a>
              </div>
            </div>
            <div>
              <div class="toc3">
                <a name="SEC189" href="#Process">1.7.16. Process</a>
              </div>
            </div>
            <div>
              <div class="toc3">
                <a name="SEC190" href="#Repository">1.7.17. Repository</a>
              </div>
            </div>
            <div>
              <div class="toc3">
                <a name="SEC191" href="#Slayer">1.7.18. Slayer</a>
              </div>
            </div>
            <div>
              <div class="toc3">
                <a name="SEC192" href="#SQL">1.7.19. SQL</a>
              </div>
            </div>
            <div>
              <div class="toc3">
                <a name="SEC193" href="#UI">1.7.20. UI</a>
              </div>
              <div>
                <div>
                  <div class="toc4">
                    <a name="SEC194" href="#Concepts">1.7.20.1. Concepts</a>
                  </div>
                  <div>
                    <div>
                      <div class="toc5">
                        <a name="SEC195" href="#Activation">1.7.20.1.1. Activation</a>
                      </div>
                    </div>
                    <div>
                      <div class="toc5">
                        <a name="SEC196" href="#Events">1.7.20.1.2. Events</a>
                      </div>
                    </div>
                    <div>
                      <div class="toc5">
                        <a name="SEC197" href="#Painting">1.7.20.1.3. Painting</a>
                      </div>
                    </div>
                    <div>
                      <div class="toc5">
                        <a name="SEC198" href="#Printing">1.7.20.1.4. Printing</a>
                      </div>
                    </div>
                  </div>
                </div>
                <div>
                  <div class="toc4">
                    <a name="SEC199" href="#Packages">1.7.20.2. Packages</a>
                  </div>
                  <div>
                    <div>
                      <div class="toc5">
                        <a name="SEC200" href="#Window">1.7.20.2.1. Window</a>
                      </div>
                    </div>
                    <div>
                      <div class="toc5">
                        <a name="SEC201" href="#View">1.7.20.2.2. View</a>
                      </div>
                    </div>
                    <div>
                      <div class="toc5">
                        <a name="SEC202" href="#Text">1.7.20.2.3. Text</a>
                      </div>
                    </div>
                    <div>
                      <div class="toc5">
                        <a name="SEC203" href="#Tree">1.7.20.2.4. Tree</a>
                      </div>
                    </div>
                    <div>
                      <div class="toc5">
                        <a name="SEC204" href="#Layout">1.7.20.2.5. Layout</a>
                      </div>
                    </div>
                    <div>
                      <div class="toc5">
                        <a name="SEC205" href="#Menu">1.7.20.2.6. Menu</a>
                      </div>
                    </div>
                    <div>
                      <div class="toc5">
                        <a name="SEC206" href="#Look">1.7.20.2.7. Look & Feel</a>
                      </div>
                    </div>
                    <div>
                      <div class="toc5">
                        <a name="SEC207" href="#Search">1.7.20.2.8. Search</a>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
            <div>
              <div class="toc3">
                <a name="SEC208" href="#XML">1.7.21. XML</a>
              </div>
            </div>
            <div>
              <div class="toc3">
                <a name="SEC209" href="#Zip">1.7.22. Zip</a>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
    <div>
      <div class="toc1">
        <a name="SEC210" href="#org.jedi">2. Jedi</a>
      </div>
      <div>
        <div>
          <div class="toc_first2">
            <a name="SEC211" href="#jedi.installation">2.1. Installation</a>
          </div>
        </div>
        <div>
          <div class="toc2">
            <a name="SEC212" href="#jedi.boot">2.2. Boot Process</a>
          </div>
        </div>
        <div>
          <div class="toc2">
            <a name="SEC213" href="#jedi.console">2.3. Console</a>
          </div>
        </div>
        <div>
          <div class="toc2">
            <a name="SEC214" href="#jedi.debugger">2.4. Debugger</a>
          </div>
        </div>
        <div>
          <div class="toc2">
            <a name="SEC215" href="#jedi.designer">2.5. Designer</a>
          </div>
        </div>
        <div>
          <div class="toc2">
            <a name="SEC216" href="#jedi.groupware">2.6. Groupware</a>
          </div>
        </div>
        <div>
          <div class="toc2">
            <a name="SEC217" href="#jedi.profiler">2.7. Profiler</a>
          </div>
        </div>
        <div>
          <div class="toc2">
            <a name="SEC218" href="#jedi.projects">2.8. Projects</a>
          </div>
        </div>
        <div>
          <div class="toc2">
            <a name="SEC219" href="#jedi.search">2.9. Search</a>
          </div>
        </div>
        <div>
          <div class="toc2">
            <a name="SEC220" href="#jedi.sql">2.10. SQL</a>
          </div>
        </div>
        <div>
          <div class="toc2">
            <a name="SEC221" href="#jedi.text">2.11. Text</a>
          </div>
          <div>
            <div>
              <div class="toc_first3">
                <a name="SEC222" href="#jedi.undo">2.11.1. Undo / Redo</a>
              </div>
            </div>
            <div>
              <div class="toc3">
                <a name="SEC223" href="#jedi.coloring">2.11.2. Syntax coloring</a>
              </div>
            </div>
            <div>
              <div class="toc3">
                <a name="SEC224" href="#jedi.recording">2.11.3. Macro recording</a>
              </div>
            </div>
            <div>
              <div class="toc3">
                <a name="SEC225" href="#jedi.mouse-copy">2.11.4. Mouse copy</a>
              </div>
            </div>
            <div>
              <div class="toc3">
                <a name="SEC226" href="#jedi.completion">2.11.5. Symbol completion</a>
              </div>
            </div>
            <div>
              <div class="toc3">
                <a name="SEC227" href="#jedi.navigation">2.11.6. Navigation</a>
              </div>
            </div>
          </div>
        </div>
        <div>
          <div class="toc2">
            <a name="SEC228" href="#jedi.printing">2.12. Printing</a>
          </div>
        </div>
        <div>
          <div class="toc2">
            <a name="SEC229" href="#jedi.user">2.13. User</a>
          </div>
          <div>
            <div>
              <div class="toc_first3">
                <a name="SEC230" href="#Settings">2.13.1. Settings</a>
              </div>
              <div>
                <div>
                  <div class="toc4">
                    <a name="SEC231" href="#Preferences">2.13.1.1. Preferences</a>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
        <div>
          <div class="toc2">
            <a name="SEC232" href="#jedi.workbench">2.14. Workbench</a>
          </div>
        </div>
        <div>
          <div class="toc2">
            <a name="SEC233" href="#jedi.workspaces">2.15. Workspaces</a>
          </div>
        </div>
        <div>
          <div class="toc2">
            <a name="SEC234" href="#jedi.windows">2.16. Windows</a>
          </div>
          <div>
            <div>
              <div class="toc_first3">
                <a name="SEC235" href="#jedi.com">2.16.1. COM</a>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
    <a name="INDEX">
      <h3>Index</h3>
    </a>
    <a class="letter-navigator" href="#SEC41">
      <b>*</b>
    </a>
&nbsp;    <a class="letter-navigator" href="#SEC42">
      <b>+</b>
    </a>
&nbsp;    <a class="letter-navigator" href="#SEC43">
      <b>-</b>
    </a>
&nbsp;    <a class="letter-navigator" href="#SEC44">
      <b>/</b>
    </a>
&nbsp;    <a class="letter-navigator" href="#SEC45">
      <b><</b>
    </a>
&nbsp;    <a class="letter-navigator" href="#SEC46">
      <b>=</b>
    </a>
&nbsp;    <a class="letter-navigator" href="#SEC47">
      <b>></b>
    </a>
&nbsp;    <br/>
    <a class="letter-navigator" href="#SEC48">
      <b>A</b>
    </a>
&nbsp;    <a class="letter-navigator" href="#SEC49">
      <b>B</b>
    </a>
&nbsp;    <a class="letter-navigator" href="#SEC50">
      <b>C</b>
    </a>
&nbsp;    <a class="letter-navigator" href="#SEC51">
      <b>D</b>
    </a>
&nbsp;    <a class="letter-navigator" href="#SEC52">
      <b>E</b>
    </a>
&nbsp;    <a class="letter-navigator" href="#SEC53">
      <b>F</b>
    </a>
&nbsp;    <a class="letter-navigator" href="#SEC54">
      <b>G</b>
    </a>
&nbsp;    <a class="letter-navigator" href="#SEC55">
      <b>H</b>
    </a>
&nbsp;    <a class="letter-navigator" href="#SEC56">
      <b>I</b>
    </a>
&nbsp;    <a class="letter-navigator" href="#SEC57">
      <b>J</b>
    </a>
&nbsp;    <a class="letter-navigator" href="#SEC58">
      <b>K</b>
    </a>
&nbsp;    <a class="letter-navigator" href="#SEC59">
      <b>L</b>
    </a>
&nbsp;    <a class="letter-navigator" href="#SEC60">
      <b>M</b>
    </a>
&nbsp;    <a class="letter-navigator" href="#SEC61">
      <b>N</b>
    </a>
&nbsp;    <a class="letter-navigator" href="#SEC62">
      <b>O</b>
    </a>
&nbsp;    <a class="letter-navigator" href="#SEC63">
      <b>P</b>
    </a>
&nbsp;    <a class="letter-navigator" href="#SEC64">
      <b>Q</b>
    </a>
&nbsp;    <a class="letter-navigator" href="#SEC65">
      <b>R</b>
    </a>
&nbsp;    <a class="letter-navigator" href="#SEC66">
      <b>S</b>
    </a>
&nbsp;    <a class="letter-navigator" href="#SEC67">
      <b>T</b>
    </a>
&nbsp;    <a class="letter-navigator" href="#SEC68">
      <b>U</b>
    </a>
&nbsp;    <a class="letter-navigator" href="#SEC69">
      <b>V</b>
    </a>
&nbsp;    <a class="letter-navigator" href="#SEC70">
      <b>W</b>
    </a>
&nbsp;    <a class="letter-navigator" href="#SEC71">
      <b>X</b>
    </a>
&nbsp;    <a class="letter-navigator" href="#SEC72">
      <b>Z</b>
    </a>
&nbsp;    <table width="100%">
      <tr>
        <td colspan="2">
<div class="index-letter">
            <a name="SEC41">*</a>
          </div></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#*">
            <code>*</code>
          </a></td>
      </tr>
      <tr>
        <td colspan="2">
<div class="index-letter">
            <a name="SEC42">+</a>
          </div></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#+">
            <code>+</code>
          </a></td>
      </tr>
      <tr>
        <td colspan="2">
<div class="index-letter">
            <a name="SEC43">-</a>
          </div></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#-">
            <code>-</code>
          </a></td>
      </tr>
      <tr>
        <td colspan="2">
<div class="index-letter">
            <a name="SEC44">/</a>
          </div></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#/">
            <code>/</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#/=">
            <code>/=</code>
          </a></td>
      </tr>
      <tr>
        <td colspan="2">
<div class="index-letter">
            <a name="SEC45"><</a>
          </div></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#<">
            <code><</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#<=">
            <code><=</code>
          </a></td>
      </tr>
      <tr>
        <td colspan="2">
<div class="index-letter">
            <a name="SEC46">=</a>
          </div></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#=">
            <code>=</code>
          </a></td>
      </tr>
      <tr>
        <td colspan="2">
<div class="index-letter">
            <a name="SEC47">></a>
          </div></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#>">
            <code>></code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#>=">
            <code>>=</code>
          </a></td>
      </tr>
      <tr>
        <td colspan="2">
<div class="index-letter">
            <a name="SEC48">A</a>
          </div></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#Access">
            <code>Access</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#Activation">
            <code>Activation</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#Application">
            <code>Application</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#abs">
            <code>abs</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#acos">
            <code>acos</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#active-thread">
            <code>active-thread</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#all-units">
            <code>all-units</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#alphabetic?">
            <code>alphabetic?</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#alphanumeric?">
            <code>alphanumeric?</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#and">
            <code>and</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#ansistring">
            <code>ansistring</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#append">
            <code>append</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#append!">
            <code>append!</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#asin">
            <code>asin</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#assert">
            <code>assert</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#assert-type">
            <code>assert-type</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#assoc">
            <code>assoc</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#assq">
            <code>assq</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#assv">
            <code>assv</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#atan">
            <code>atan</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#atom?">
            <code>atom?</code>
          </a></td>
      </tr>
      <tr>
        <td colspan="2">
<div class="index-letter">
            <a name="SEC49">B</a>
          </div></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#Boolean">
            <code>Boolean</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#jedi.boot">
            <code>Boot Process</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#Branch">
            <code>Branch</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#Builder">
            <code>Builder</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#begin">
            <code>begin</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#between">
            <code>between</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#between?">
            <code>between?</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#bind">
            <code>bind</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#bind-keywords">
            <code>bind-keywords</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#bind-optionals">
            <code>bind-optionals</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#bind-values">
            <code>bind-values</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#bit-and">
            <code>bit-and</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#bit-not">
            <code>bit-not</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#bit-or">
            <code>bit-or</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#bit-set">
            <code>bit-set</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#bit-set?">
            <code>bit-set?</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#bit-xor">
            <code>bit-xor</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#bool">
            <code>bool</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#boolean">
            <code>boolean</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#boolean->integer">
            <code>boolean->integer</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#boolean?">
            <code>boolean?</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#butlast">
            <code>butlast</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#byte">
            <code>byte</code>
          </a></td>
      </tr>
      <tr>
        <td colspan="2">
<div class="index-letter">
            <a name="SEC50">C</a>
          </div></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#jedi.com">
            <code>COM</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#Catalog">
            <code>Catalog</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#Char">
            <code>Char</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#Compiler">
            <code>Compiler</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#Component">
            <code>Component</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#components">
            <code>Components</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#Concepts">
            <code>Concepts</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#Connection">
            <code>Connection</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#jedi.console">
            <code>Console</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#constants">
            <code>Constants</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#caar">
            <code>caar</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#cadr">
            <code>cadr</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#capitalize">
            <code>capitalize</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#car">
            <code>car</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#case">
            <code>case</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#catch">
            <code>catch</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#catched?">
            <code>catched?</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#cdar">
            <code>cdar</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#cddr">
            <code>cddr</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#cdr">
            <code>cdr</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#ceil">
            <code>ceil</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#char?">
            <code>char?</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#child">
            <code>child</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#children">
            <code>children</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#ci/=">
            <code>ci/=</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#ci<">
            <code>ci<</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#ci<=">
            <code>ci<=</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#ci=">
            <code>ci=</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#ci>">
            <code>ci></code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#ci>=">
            <code>ci>=</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#class">
            <code>class</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#class-fields">
            <code>class-fields</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#class-members">
            <code>class-members</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#class-of">
            <code>class-of</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#class-slots">
            <code>class-slots</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#class?">
            <code>class?</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#clock">
            <code>clock</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#close">
            <code>close</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#closure?">
            <code>closure?</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#coerce">
            <code>coerce</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#coexternal">
            <code>coexternal</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#collect">
            <code>collect</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#collect-if">
            <code>collect-if</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#collect-type">
            <code>collect-type</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#comethod">
            <code>comethod</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#conclude">
            <code>conclude</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#cond">
            <code>cond</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#cons">
            <code>cons</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#constant">
            <code>constant</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#copy">
            <code>copy</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#cos">
            <code>cos</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#count">
            <code>count</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#count-if">
            <code>count-if</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#count-type">
            <code>count-type</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#cpp/java-constituent?">
            <code>cpp/java-constituent?</code>
          </a></td>
      </tr>
      <tr>
        <td colspan="2">
<div class="index-letter">
            <a name="SEC51">D</a>
          </div></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#jedi.debugger">
            <code>Debugger</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#Designer">
            <code>Designer</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#jedi.designer">
            <code>Designer</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#Dimension">
            <code>Dimension</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#Doc">
            <code>Doc</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#decrease!">
            <code>decrease!</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#definition">
            <code>definition</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#describe">
            <code>describe</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#destroy">
            <code>destroy</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#difference">
            <code>difference</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#display">
            <code>display</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#double">
            <code>double</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#downcase">
            <code>downcase</code>
          </a></td>
      </tr>
      <tr>
        <td colspan="2">
<div class="index-letter">
            <a name="SEC52">E</a>
          </div></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#Element">
            <code>Element</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#Events">
            <code>Events</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#Exemplar">
            <code>Exemplar</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#ecase">
            <code>ecase</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#eighth">
            <code>eighth</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#either">
            <code>either</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#element">
            <code>element</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#element-reversed">
            <code>element-reversed</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#empty-hashtable">
            <code>empty-hashtable</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#empty-map">
            <code>empty-map</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#empty-string?">
            <code>empty-string?</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#empty?">
            <code>empty?</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#end-of-stream?">
            <code>end-of-stream?</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#ends-with?">
            <code>ends-with?</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#enumeration">
            <code>enumeration</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#enumeration?">
            <code>enumeration?</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#eq?">
            <code>eq?</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#equal?">
            <code>equal?</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#eqv?">
            <code>eqv?</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#error">
            <code>error</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#error?">
            <code>error?</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#essay">
            <code>essay</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#eval">
            <code>eval</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#even?">
            <code>even?</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#every?">
            <code>every?</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#exit">
            <code>exit</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#exp">
            <code>exp</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#expt">
            <code>expt</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#external">
            <code>external</code>
          </a></td>
      </tr>
      <tr>
        <td colspan="2">
<div class="index-letter">
            <a name="SEC53">F</a>
          </div></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#Form">
            <code>Form</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#grammar">
            <code>Formal Grammar</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#formatted_output">
            <code>Formatted Output</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#functions">
            <code>Functions</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#c_false">
            <code>false</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#fifth">
            <code>fifth</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#fill!">
            <code>fill!</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#find">
            <code>find</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#find-component">
            <code>find-component</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#find-if">
            <code>find-if</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#find-symbol">
            <code>find-symbol</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#finish">
            <code>finish</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#first">
            <code>first</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#float">
            <code>float</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#floor">
            <code>floor</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#for-each">
            <code>for-each</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#for-each-hash">
            <code>for-each-hash</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#for-each-map">
            <code>for-each-map</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#for-each-pair">
            <code>for-each-pair</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#for-each-property">
            <code>for-each-property</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#for-each-reversed">
            <code>for-each-reversed</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#format">
            <code>format</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#fourth">
            <code>fourth</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#function">
            <code>function</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#function?">
            <code>function?</code>
          </a></td>
      </tr>
      <tr>
        <td colspan="2">
<div class="index-letter">
            <a name="SEC54">G</a>
          </div></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#collector">
            <code>Garbage Collector</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#Groupware">
            <code>Groupware</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#jedi.groupware">
            <code>Groupware</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#gather">
            <code>gather</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#gc">
            <code>gc</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#generate-symbol">
            <code>generate-symbol</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#get-char">
            <code>get-char</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#getf">
            <code>getf</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#getprop">
            <code>getprop</code>
          </a></td>
      </tr>
      <tr>
        <td colspan="2">
<div class="index-letter">
            <a name="SEC55">H</a>
          </div></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#hash-clear">
            <code>hash-clear</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#hash-ref">
            <code>hash-ref</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#hash-remove!">
            <code>hash-remove!</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#hash-set!">
            <code>hash-set!</code>
          </a></td>
      </tr>
      <tr>
        <td colspan="2">
<div class="index-letter">
            <a name="SEC56">I</a>
          </div></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#jedi.installation">
            <code>Installation</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#Interpreter">
            <code>Interpreter</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#identity">
            <code>identity</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#if">
            <code>if</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#in">
            <code>in</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#in-interval?">
            <code>in-interval?</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#in-manifest?">
            <code>in-manifest?</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#increase!">
            <code>increase!</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#initialize">
            <code>initialize</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#insert!">
            <code>insert!</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#insert-ordered!">
            <code>insert-ordered!</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#insert-sequence!">
            <code>insert-sequence!</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#install">
            <code>install</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#int">
            <code>int</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#integer->boolean">
            <code>integer->boolean</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#integer?">
            <code>integer?</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#interface">
            <code>interface</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#interface?">
            <code>interface?</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#intersection">
            <code>intersection</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#intrinsic">
            <code>intrinsic</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#is-not?">
            <code>is-not?</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#is?">
            <code>is?</code>
          </a></td>
      </tr>
      <tr>
        <td colspan="2">
<div class="index-letter">
            <a name="SEC57">J</a>
          </div></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#JML">
            <code>JML</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#JRM">
            <code>JRM</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#Java">
            <code>Java</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#JavaParser">
            <code>JavaParser</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#org.jazz">
            <code>Jazz</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#jazz">
            <code>Jazz</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#org.jedi">
            <code>Jedi</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#jazz-constituent?">
            <code>jazz-constituent?</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#join">
            <code>join</code>
          </a></td>
      </tr>
      <tr>
        <td colspan="2">
<div class="index-letter">
            <a name="SEC58">K</a>
          </div></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#keyword->symbol">
            <code>keyword->symbol</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#keyword?">
            <code>keyword?</code>
          </a></td>
      </tr>
      <tr>
        <td colspan="2">
<div class="index-letter">
            <a name="SEC59">L</a>
          </div></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#syntax">
            <code>Language Syntax</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#launch">
            <code>Launch Parameters</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#Layout">
            <code>Layout</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#lexical">
            <code>Lexical Syntax</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#Library">
            <code>Library</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#License">
            <code>License</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#lists">
            <code>Lists</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#Look">
            <code>Look & Feel</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#last">
            <code>last</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#last-tail">
            <code>last-tail</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#length">
            <code>length</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#let">
            <code>let</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#letrec">
            <code>letrec</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#list">
            <code>list</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#list?">
            <code>list?</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#load">
            <code>load</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#load-hashtable">
            <code>load-hashtable</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#load-map">
            <code>load-map</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#locate">
            <code>locate</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#log">
            <code>log</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#long">
            <code>long</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#loop">
            <code>loop</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#lower-case?">
            <code>lower-case?</code>
          </a></td>
      </tr>
      <tr>
        <td colspan="2">
<div class="index-letter">
            <a name="SEC60">M</a>
          </div></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#jedi.recording">
            <code>Macro recording</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#Menu">
            <code>Menu</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#modifiers">
            <code>Modifiers</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#jedi.mouse-copy">
            <code>Mouse copy</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#map">
            <code>map</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#map-clear">
            <code>map-clear</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#map-ref">
            <code>map-ref</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#map-set!">
            <code>map-set!</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#map-to">
            <code>map-to</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#max">
            <code>max</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#member?">
            <code>member?</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#memq?">
            <code>memq?</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#memv?">
            <code>memv?</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#merge-ordered">
            <code>merge-ordered</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#metaclass-instance">
            <code>metaclass-instance</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#metaclass?">
            <code>metaclass?</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#method">
            <code>method</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#min">
            <code>min</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#mismatch">
            <code>mismatch</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#modulo">
            <code>modulo</code>
          </a></td>
      </tr>
      <tr>
        <td colspan="2">
<div class="index-letter">
            <a name="SEC61">N</a>
          </div></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#naming">
            <code>Naming Conventions</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#jedi.navigation">
            <code>Navigation</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#Node">
            <code>Node</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#name">
            <code>name</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#near?">
            <code>near?</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#negative?">
            <code>negative?</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#neq?">
            <code>neq?</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#new">
            <code>new</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#new-in">
            <code>new-in</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#new-line">
            <code>new-line</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#c_nil">
            <code>nil</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#nil?">
            <code>nil?</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#ninth">
            <code>ninth</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#norm">
            <code>norm</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#not">
            <code>not</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#not-nil?">
            <code>not-nil?</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#number?">
            <code>number?</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#numeric?">
            <code>numeric?</code>
          </a></td>
      </tr>
      <tr>
        <td colspan="2">
<div class="index-letter">
            <a name="SEC62">O</a>
          </div></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#Object">
            <code>Object</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#objects">
            <code>Objects</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#overview">
            <code>Overview</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#object?">
            <code>object?</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#odd?">
            <code>odd?</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#optimize">
            <code>optimize</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#or">
            <code>or</code>
          </a></td>
      </tr>
      <tr>
        <td colspan="2">
<div class="index-letter">
            <a name="SEC63">P</a>
          </div></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#Packages">
            <code>Packages</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#Painting">
            <code>Painting</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#Point">
            <code>Point</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#Preferences">
            <code>Preferences</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#primitives">
            <code>Primitive Types</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#Printing">
            <code>Printing</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#jedi.printing">
            <code>Printing</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#Process">
            <code>Process</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#jedi.profiler">
            <code>Profiler</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#jedi.projects">
            <code>Projects</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#package">
            <code>package</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#package?">
            <code>package?</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#pair?">
            <code>pair?</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#parent">
            <code>parent</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#partition">
            <code>partition</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#peek-char">
            <code>peek-char</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#percent">
            <code>percent</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#percentage">
            <code>percentage</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#positive?">
            <code>positive?</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#prefix">
            <code>prefix</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#prefix?">
            <code>prefix?</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#prepare">
            <code>prepare</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#primary-thread">
            <code>primary-thread</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#print">
            <code>print</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#print-unreadable">
            <code>print-unreadable</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#procedure?">
            <code>procedure?</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#profile">
            <code>profile</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#prog1">
            <code>prog1</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#properties">
            <code>properties</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#property">
            <code>property</code>
          </a></td>
      </tr>
      <tr>
        <td colspan="2">
<div class="index-letter">
            <a name="SEC64">Q</a>
          </div></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#quote">
            <code>quote</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#quotient">
            <code>quotient</code>
          </a></td>
      </tr>
      <tr>
        <td colspan="2">
<div class="index-letter">
            <a name="SEC65">R</a>
          </div></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#Recordset">
            <code>Recordset</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#Rect">
            <code>Rect</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#reference_desambiguation">
            <code>Reference Desambiguation</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#Repository">
            <code>Repository</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#Request">
            <code>Request</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#random">
            <code>random</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#random-element">
            <code>random-element</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#randomize">
            <code>randomize</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#rassoc">
            <code>rassoc</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#read">
            <code>read</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#real?">
            <code>real?</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#relate">
            <code>relate</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#remove">
            <code>remove</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#remove!">
            <code>remove!</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#remove-duplicates">
            <code>remove-duplicates</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#remove-nils">
            <code>remove-nils</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#remove-trailing">
            <code>remove-trailing</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#replace!">
            <code>replace!</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#replace-subseq!">
            <code>replace-subseq!</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#reverse">
            <code>reverse</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#reverse!">
            <code>reverse!</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#round">
            <code>round</code>
          </a></td>
      </tr>
      <tr>
        <td colspan="2">
<div class="index-letter">
            <a name="SEC66">S</a>
          </div></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#jedi.sql">
            <code>SQL</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#SQL">
            <code>SQL</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#Search">
            <code>Search</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#jedi.search">
            <code>Search</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#Settings">
            <code>Settings</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#Slayer">
            <code>Slayer</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#jedi.completion">
            <code>Symbol completion</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#symbols">
            <code>Symbols</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#syntax_forms">
            <code>Syntax</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#jedi.coloring">
            <code>Syntax coloring</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#search">
            <code>search</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#second">
            <code>second</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#separate">
            <code>separate</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#sequence?">
            <code>sequence?</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#set!">
            <code>set!</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#set-car!">
            <code>set-car!</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#set-cdr!">
            <code>set-cdr!</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#set-eighth!">
            <code>set-eighth!</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#set-element!">
            <code>set-element!</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#set-fifth!">
            <code>set-fifth!</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#set-first!">
            <code>set-first!</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#set-fourth!">
            <code>set-fourth!</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#set-ninth!">
            <code>set-ninth!</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#set-second!">
            <code>set-second!</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#set-seventh!">
            <code>set-seventh!</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#set-sixth!">
            <code>set-sixth!</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#set-tenth!">
            <code>set-tenth!</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#set-third!">
            <code>set-third!</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#setf">
            <code>setf</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#seventh">
            <code>seventh</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#shift-left">
            <code>shift-left</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#shift-right">
            <code>shift-right</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#short">
            <code>short</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#sign">
            <code>sign</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#signal">
            <code>signal</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#sin">
            <code>sin</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#sixth">
            <code>sixth</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#skip">
            <code>skip</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#slot">
            <code>slot</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#some?">
            <code>some?</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#sort">
            <code>sort</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#split">
            <code>split</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#split-justified">
            <code>split-justified</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#sqrt">
            <code>sqrt</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#starts-with?">
            <code>starts-with?</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#string">
            <code>string</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#string->symbol">
            <code>string->symbol</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#string?">
            <code>string?</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#structure">
            <code>structure</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#subseq">
            <code>subseq</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#subseq!">
            <code>subseq!</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#substitute">
            <code>substitute</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#substitute-alist">
            <code>substitute-alist</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#subtype?">
            <code>subtype?</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#subtyped?">
            <code>subtyped?</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#symbol->keyword">
            <code>symbol->keyword</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#symbol->string">
            <code>symbol->string</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#symbol-bound?">
            <code>symbol-bound?</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#symbol-unbound?">
            <code>symbol-unbound?</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#symbol?">
            <code>symbol?</code>
          </a></td>
      </tr>
      <tr>
        <td colspan="2">
<div class="index-letter">
            <a name="SEC67">T</a>
          </div></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#jedi.text">
            <code>Text</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#Text">
            <code>Text</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#threads">
            <code>Threads</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#toplevel_forms">
            <code>Toplevel Forms</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#Tree">
            <code>Tree</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#types">
            <code>Types</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#tail">
            <code>tail</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#tan">
            <code>tan</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#tenth">
            <code>tenth</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#third">
            <code>third</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#throw">
            <code>throw</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#tie">
            <code>tie</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#c_true">
            <code>true</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#type-ancestors">
            <code>type-ancestors</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#type-ascendant">
            <code>type-ascendant</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#type-descendants">
            <code>type-descendants</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#type-name">
            <code>type-name</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#type?">
            <code>type?</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#typecase">
            <code>typecase</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#typed?">
            <code>typed?</code>
          </a></td>
      </tr>
      <tr>
        <td colspan="2">
<div class="index-letter">
            <a name="SEC68">U</a>
          </div></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#UI">
            <code>UI</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#jedi.undo">
            <code>Undo / Redo</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#jedi.user">
            <code>User</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#ubyte">
            <code>ubyte</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#unget-char">
            <code>unget-char</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#union">
            <code>union</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#unit-loaded?">
            <code>unit-loaded?</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#unit?">
            <code>unit?</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#unless">
            <code>unless</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#unwind-protect">
            <code>unwind-protect</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#upcase">
            <code>upcase</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#upper-case?">
            <code>upper-case?</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#using">
            <code>using</code>
          </a></td>
      </tr>
      <tr>
        <td colspan="2">
<div class="index-letter">
            <a name="SEC69">V</a>
          </div></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#View">
            <code>View</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#values">
            <code>values</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#vector?">
            <code>vector?</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#void">
            <code>void</code>
          </a></td>
      </tr>
      <tr>
        <td colspan="2">
<div class="index-letter">
            <a name="SEC70">W</a>
          </div></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#WinBase">
            <code>WinBase</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#WinDef">
            <code>WinDef</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#WinGDI">
            <code>WinGDI</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#WinKernel">
            <code>WinKernel</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#WinUser">
            <code>WinUser</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#Window">
            <code>Window</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#jedi.windows">
            <code>Windows</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#Windows">
            <code>Windows</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#jedi.workbench">
            <code>Workbench</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#jedi.workspaces">
            <code>Workspaces</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#when">
            <code>when</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#while">
            <code>while</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#whitespace?">
            <code>whitespace?</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#with">
            <code>with</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#with-closed">
            <code>with-closed</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#write">
            <code>write</code>
          </a></td>
      </tr>
      <tr>
        <td colspan="2">
<div class="index-letter">
            <a name="SEC71">X</a>
          </div></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#XML">
            <code>XML</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#xor">
            <code>xor</code>
          </a></td>
      </tr>
      <tr>
        <td colspan="2">
<div class="index-letter">
            <a name="SEC72">Z</a>
          </div></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#Zip">
            <code>Zip</code>
          </a></td>
      </tr>
      <tr>
        <td></td>
        <td>
<a href="#zero?">
            <code>zero?</code>
          </a></td>
      </tr>
    </table>
    <a name="org.jazz"></a>
    <h3>Jazz</h3>
    <a name="overview"></a>
    <h4 class="section">Overview</h4>
    <p>A language that doesn't affect the way you think about programming, is not worth knowing.</p>
    <p>--Alan J. Perlis</p>
    <p></p>
    <p>Jazz was born on December 9 1996.</p>
    <a name="lexical"></a>
    <h4 class="concept">Lexical Syntax</h4>
    <div>
      <p class="definition">
<b>Identifiers</b></p>
      <p>Identifiers in Jazz are case sensitive. A common usage of this is to have a class named X and a variable containing an instance of X named x.</p>
      <p></p>
      <p>The following characters are considered alphabetic and can thus be used in identifiers:</p>
      <p>! $ % & * + - . / : < = > ? ^ _ ~</p>
    </div>
    <p></p>
    <p></p>
    <div>
      <p class="definition">
<b>Whitespace</b></p>
      <p>Spaces, tabs, carriage returns and line feeds are considered whitespace and can be freely inserted in Jazz code without changing the meaning of the code.</p>
    </div>
    <p></p>
    <p></p>
    <div>
      <p class="definition">
<b>Comments</b></p>
      <p>Jazz offers two types of comments:</p>
      <ul>
        <li><span>; starts a line based comment and</span></li>
        <li><span>@name starts an sexpr based comment where name can be any symbol. It is completely ignored and can be used for documentation purposes.</span></li>
      </ul>
    </div>
    <a name="syntax"></a>
    <h4 class="concept">Language Syntax</h4>
    <div>
      <p class="definition">
<b>Variable value</b></p>
      <p>
<code>x</code></p>
    </div>
    <p></p>
    <div>
      <p class="definition">
<b>Function invocation</b></p>
      <p>
<code>(f x y)</code></p>
    </div>
    <p></p>
    <div>
      <p class="definition">
<b>Field access</b></p>
      <p>
<code>[name obj]</code></p>
    </div>
    <p></p>
    <p>Examples:</p>
    <ul>
      <li>
        <code> [h my-point]</code>
      </li>
      <li>
        <code> [h size my-view]</code>
      </li>
    </ul>
    <p></p>
    <div>
      <p class="definition">
<b>Method invocation</b></p>
      <p>
<xmp>(f~ obj x y)</xmp></p>
    </div>
    <p></p>
    <p>Examples:</p>
    <ul>
      <li>
        <code>(get-size~ window)</code>
      </li>
      <li>
        <code>(invalidate-view~ (get-parent~ view))</code>
      </li>
    </ul>
    <a name="SEC1"></a>
    <h4 class="section">Constants</h4>
    <div>
      <p class="definition">
<b>Numeric</b></p>
      <p>Numeric constants can be integer or real values.</p>
      <p>Examples:</p>
      <ul>
        <li>
          <code>2</code>
        </li>
        <li>
          <code>-5</code>
        </li>
        <li>
          <code>6.75</code>
        </li>
      </ul>
    </div>
    <div>
      <p class="definition">
<b>String</b></p>
      <p>String constants can be delimited by either " or #| |# where the second form is usefull to enclose large text without having to escape special characters.</p>
      <p>Examples:</p>
      <ul>
        <li>
          <code>"Hello World!"</code>
        </li>
        <li>
          <code>#|This is a more complex string containing special characters like # \ " without escaping|#</code>
        </li>
      </ul>
    </div>
    <div>
      <p class="definition">
<b>Symbol</b></p>
      <p>Examples:</p>
      <ul>
        <li>
          <code>'x</code>
        </li>
        <li>
          <code>(quote y)</code>
        </li>
      </ul>
      <p>Note that the quote is necessary to distinguish from taking a variable's value</p>
    </div>
    <div>
      <p class="definition">
<b>List</b></p>
      <p>Examples:</p>
      <ul>
        <li>
          <code>'(a b c)</code>
        </li>
        <li>
          <code>(quote (1 2))</code>
        </li>
      </ul>
      <p>Note that the quote is necessary to distinguish from invoking as a function call</p>
    </div>
    <div>
      <p class="definition">
<b>User</b></p>
      <p>Jazz supports a very powerfull concept where any class can define it's own literal constants using the following syntax: {class-name ...}. This integrates classes fully with the Jazz reader and printer.</p>
      <p>Examples:</p>
      <ul>
        <li>
          <code>{Point 2 3}</code>
        </li>
        <li>
          <code>{Dimension 100 100}</code>
        </li>
        <li>
          <code>{Color :name Red}</code>
        </li>
        <li>
          <code>{Font :name Code}</code>
        </li>
      </ul>
    </div>
    <a name="toplevel_forms"></a>
    <h4 class="concept">Toplevel Forms</h4>
    <a name="in"></a>
    <p class="form-definition">
<b>in</b> <i>package</i></p>
    <p></p>
    <p>
The following toplevel unit will become part of <i>package</i>. Note that the package concept is only partialy implemented in Jazz. Fusion will support full fledged hierarchical namespaces.</p>
    <a name="using"></a>
    <p class="form-definition">
<b>using</b> <i>package ...</i></p>
    <p></p>
    <p>
Using <i>package</i> enables the defined unit to use a lighter syntax when referencing fields defined in <i>package</i> :</p>
    <p>
The compiler will automatically replace <code>(f a b)</code> with <code>(f~ package a b)</code> when <code>f</code> is a field of <i>package</i>. When multiple using directives are present, packages are searched in the appearance order in the file.</p>
    <a name="class"></a>
    <p class="form-definition">
<b>class</b> <i>extends implements uses ...</i></p>
    <p></p>
    <p>Jazz uses a single inheritance model where a class can extend only one superclass. A class can implement any number of interfaces.</p>
    <p></p>
    <p>Jazz also supports inner classes. Inner classes can refer directly to outer class fields. This is done by having an invisible slot that point to the outer class and transforming automatically an outer call (f x) into (f~ outer x). This implies that for the system to remember this information, inner class creation must always be done inside an instance of its outer class.</p>
    <a name="interface"></a>
    <p class="form-definition">
<b>interface</b> <i>extends uses ...</i></p>
    <p></p>
    <p>An interface defines a new type but cannot contain code.</p>
    <a name="package"></a>
    <p class="form-definition">
<b>package</b> <i>extends uses ...</i></p>
    <p></p>
    <p>Inside a package, all definitions are automatically meta. This implements a sort of dynamic namespace concept as no package instances are ever created and all package access is done through the package itself.</p>
    <a name="constant"></a>
    <p class="form-definition">
<b>constant</b> <i>name value</i></p>
    <p></p>
    <p>A definition that cannot be modified. Note that currently, a constant definition is simply a definition.</p>
    <p></p>
    <p>Constant definitions are currently used mainly to access the Windows API.</p>
    <a name="enumeration"></a>
    <p class="form-definition">
<b>enumeration</b> <i>enumeration-name (name1 value1) (name2 value2) ...</i></p>
    <p></p>
    <p>An enumeration definition. This enumeration will create a definition enumeration-name containing an Enumeration object that can be queried at runtime and create constant definitions name1 : value1, name2 : value2, ...</p>
    <p></p>
    <p>Enumeration definitions are currently used mainly to access the Windows API.</p>
    <a name="structure"></a>
    <p class="form-definition">
<b>structure</b> <i>structure-name (type1 field1 <n1>) (type2 field2 <n2>) ...</i></p>
    <p></p>
    <p>A structure is a template that can be used to create records containing primitive types. Here, type is any primitive type and field is a symbol that can be used to access this field is records of type structure-name. If the optional n is specified, then an array of n elements of type will be inserted.</p>
    <p></p>
    <p>Structure definitions are currently used mainly to access the Windows API.</p>
    <a name="intrinsic"></a>
    <p class="form-definition">
<b>intrinsic</b> <i>intrinsic module-name return-type (name param1 param2 ...) <entry-name> <intrinsic-name></i></p>
    <p></p>
    <p>An intrinsic is basically an external that will be treated specially by the compiler. The compiler instead of generation a 'safe' call to entry-name will inline a call to intrinsic-name.</p>
    <a name="external"></a>
    <p class="form-definition">
<b>external</b> <i>module-name return-type (name param1 param2 ...) <entry-name></i></p>
    <p></p>
    <p>An external entry point into a Windows module, i.e. a dynamic-link library or an executable.</p>
    <p></p>
    <p>External definitions are currently used mainly to access the Jazz runtime and the Windows API.</p>
    <a name="coexternal"></a>
    <p class="form-definition">
<b>coexternal</b> <i>coexternal {modifiers} return-type (name . parameters)</i></p>
    <p></p>
    <p>An entry point into a COM class. Note that coexternal definitions do not have entry-names. Their entry position into the COM class is determined by their rank in the class.</p>
    <p></p>
    <p>(external void (f out x)) -> (values x) (external long (f)) -> result (external long (f out x)) -> (values result x) Because coexternals almost always return an hresult, it is very common to have only one out parameter which is really the function result. So Jazz treats coexternals a bit differently from externals... (coexternal void (f out x)) -> x (coexternal hresult (f out x)) -> x or throw a CoError (coexternal long (f out x)) -> (values result x) (coexternal long (f)) -> result (coexternal void (f out x out y)) -> (values x y) </p>
    <a name="definition"></a>
    <p class="form-definition">
<b>definition</b> <i>name value</i></p>
    <p></p>
    <p>A definition associates name to value inside the defining unit. A definition is as field and as such is stored in the class and doesn't take any space in instances. At class instantiation, value is evaluated in an empty lexical environment and in an empty object environment.</p>
    <a name="method"></a>
    <p class="form-definition">
<b>method</b> <i>{modifiers} (name . parameters) {return-type} . body</i></p>
    <p></p>
    <p>A method is where code resides.</p>
    <a name="comethod"></a>
    <p class="form-definition">
<b>comethod</b> <i>return-type (name . parameters)</i></p>
    <p></p>
    <p>A comethod is used to create an COM entry point into a Jazz defined COM class.</p>
    <a name="slot"></a>
    <p class="form-definition">
<b>slot</b> <i>name <initialize> <initial-value></i></p>
    <p></p>
    <p>A slot is a field that defines the structure of the instances of a class.</p>
    <a name="property"></a>
    <p class="form-definition">
<b>property</b> <i>name <initialize> <initial-value> <getter> <getter-name> <setter> <setter-name></i></p>
    <p></p>
    <p>A property is a slot that can specify a getter and a setter.</p>
    <a name="properties"></a>
    <p class="form-definition">
<b>properties</b> <i>key1 value1 key2 value2 ...</i></p>
    <p></p>
    <p>Enables associating a property list to any unit. Unit properties are currently used to specify COM interfaces GUID.</p>
    <a name="reference_desambiguation"></a>
    <h4 class="concept">Reference Desambiguation</h4>
    <p>References inside units are resolved in the following order: </p>
    <ul>
      <li><span>syntax</span></li>
      <li><span>local variable</span></li>
      <li><span>unit definition</span></li>
      <li><span>metaclass definition</span></li>
      <li><span>outer definition</span></li>
      <li><span>imported definition</span></li>
      <li><span>global definition</span></li>
    </ul>
    <p></p>
    <p>Note that outside references [x f] are only allowed to access public unit definitions (and not metaclass, outer or imported definitions) for scope security reasons.</p>
    <a name="naming"></a>
    <h4 class="concept">Naming Conventions</h4>
    <div>
      <p class="definition">
<b>Comments</b></p>
      <ul>
        <li><span>; Code comment : put at the end of a line of code to document it.</span></li>
        <li><span>;; Method comment : documents a method and many lines may be used.</span></li>
        <li><span>;;; Section comment : documents a section.</span></li>
        <li><span>;;;; Chapter comment : specifies a section title naming and will be gathered in a chapter.</span></li>
      </ul>
    </div>
    <p></p>
    <p></p>
    <div>
      <p class="definition">
<b>Classes</b></p>
      <p>Class names are capitalized</p>
      <ul>
        <li>
          <span>
            <code>View</code>
          </span>
        </li>
        <li>
          <span>
            <code>Java-Text</code>
          </span>
        </li>
      </ul>
    </div>
    <p></p>
    <p></p>
    <div>
      <p class="definition">
<b>Methods</b></p>
      <p>Methods are in lowercase separated by -</p>
      <ul>
        <li>
          <span>
            <code>get-application</code>
          </span>
        </li>
      </ul>
    </div>
    <p></p>
    <p></p>
    <div>
      <p class="definition">
<b>Predicates</b></p>
      <p>Predicates end with ?</p>
      <ul>
        <li>
          <span>
            <code>eq?</code>
          </span>
        </li>
        <li>
          <span>
            <code>string?</code>
          </span>
        </li>
      </ul>
    </div>
    <p></p>
    <p></p>
    <div>
      <p class="definition">
<b>Mutators</b></p>
      <p>Destructive functions end with !</p>
      <ul>
        <li>
          <span>
            <code>set-cdr!</code>
          </span>
        </li>
        <li>
          <span>
            <code>append!</code>
          </span>
        </li>
      </ul>
    </div>
    <p></p>
    <p></p>
    <div>
      <p class="definition">
<b>Convertors</b></p>
      <p>Type conversion functions have -> in their name</p>
      <ul>
        <li>
          <span>
            <code>symbol->string</code>
          </span>
        </li>
        <li>
          <span>
            <code>symbol->keyword</code>
          </span>
        </li>
      </ul>
    </div>
    <a name="functions"></a>
    <h4 class="concept">Functions</h4>
    <p>In Jazz, functions are first order objects and can be freely manipulated as any other objects. They can be passed as parameters, stored in variables, ...Anyone who says functions are not object-oriented is just showing they have'nt really went far enough in their understanding of the problem!</p>
    <p></p>
    <div>
      <p class="definition">
<b>Parameters</b></p>
      <p>On top of the standard positional parameter passing scheme, Jazz offers the following:</p>
      <ul>
        <li><span>Variable number of parameters</span></li>
        <li><span>Optional parameters</span></li>
        <li><span>Keyword parameters</span></li>
      </ul>
    </div>
    <p></p>
    <p></p>
    <div>
      <p class="definition">
<b>Arguments</b></p>
      <p>Arguments are passed by pointer value, i.e. only a copy of the pointer to the argument is passed as opposed to copying the entire content of the object.</p>
    </div>
    <a name="lists"></a>
    <h4 class="concept">Lists</h4>
    <p>Lists are the most flexible data structure available in Jazz. They can grow to accommodate any number of elements and this very efficiently. As they are sequences, they are supported by a huge number of manipulation functions</p>
    <a name="symbols"></a>
    <h4 class="concept">Symbols</h4>
    <p>Jazz is symbolic language where symbols are used extensively. Symbols can be used as a very efficient higher level abstraction replacement for integer enumerations</p>
    <a name="objects"></a>
    <h4 class="concept">Objects</h4>
    <p>Jazz is a fully object-oriented language that offers :</p>
    <ul>
      <li><span>Classes with single inheritance and multiple interfaces implemented</span></li>
      <li><span>Packages that can be imported into classes</span></li>
      <li><span>Inner classes</span></li>
      <li><span>Metaclasses</span></li>
    </ul>
    <p></p>
    <p></p>
    <div>
      <p class="definition">
<b>Classes</b></p>
    </div>
    <p></p>
    <p></p>
    <div>
      <p class="definition">
<b>Interfaces</b></p>
    </div>
    <p></p>
    <p></p>
    <div>
      <p class="definition">
<b>Packages</b></p>
    </div>
    <p></p>
    <p></p>
    <div>
      <p class="definition">
<b>Metaclasses</b></p>
    </div>
    <p></p>
    <p>
<xmp>(class X
  (field meta f ...)</xmp></p>
    <p>has exactly the same semantics as</p>
    <p></p>
    <p>
<xmp>(class MX
  (field f ...)</xmp></p>
    <p>where MX is the class of the class X.</p>
    <p></p>
    <p>In Jazz, as a design decision, a class and it metaclass are both defined in the same file. This simplifies metaclass design and ensures that the following always holds true for every class X :</p>
    <p>
<code>(type-ascendant (class-of X)) = (class-of (type-ascendant X))</code></p>
    <p></p>
    <p>i.e. the inheritance hierarchy of metaclasses follows the inheritance hierarchy of regular classes.</p>
    <p></p>
    <p></p>
    <div>
      <p class="definition">
<b>Notes</b></p>
      <p>One difference between a constant and a meta constant, is that to access the first one, you have to be able to create an instance of the class (it is more private than the second one). Note that the previous comment applies to any definition. </p>
      <p></p>
      <p></p>
      <p>One big difference between having a meta slot and a meta definition is that every derived class will have its own space allocated for the meta slot, but every meta definition that is not overwritten will be shared. Ex: </p>
      <p></p>
      <p>
<code>(slot meta public mouse-in initialize {})</code></p>
      <p>
will not work because accessing mouse-in from an instance of <code>Window</code> or from an instance of a <code>Text</code> will not access the same slot space. </p>
      <p>
<code>(definition meta public mouse-in nil)</code></p>
      <p>should be used instead. </p>
    </div>
    <a name="components"></a>
    <h4 class="concept">Components</h4>
    <p>One of the biggest strength of components is the full integration of the programming metaphor with the visual design metaphor they enable. By seamlessly intermixing programming code and designer data, components brings all the power of programming tools to the design part.</p>
    <a name="modifiers"></a>
    <h4 class="concept">Modifiers</h4>
    <div>
      <p class="definition">
<b>meta</b></p>
      <p>Defines a field of the meta class. Because a class is an object, meta methods can use self to refer to themselves (i.e. the class).</p>
    </div>
    <p></p>
    <p></p>
    <div>
      <p class="definition">
<b>private</b></p>
      <p>Access is restricted to classes that reside in the same file.</p>
    </div>
    <p></p>
    <p></p>
    <div>
      <p class="definition">
<b>protected</b></p>
      <p>Access is restricted to sub-classes and classes in the same package.</p>
    </div>
    <p></p>
    <p></p>
    <div>
      <p class="definition">
<b>public</b></p>
      <p>Access is unrestricted.</p>
    </div>
    <p></p>
    <p></p>
    <div>
      <p class="definition">
<b>final</b></p>
      <p>A final definition cannot be overridden.</p>
    </div>
    <p></p>
    <p></p>
    <div>
      <p class="definition">
<b>virtual</b></p>
      <p>A virtual definition can be overridden in sub-classes.</p>
    </div>
    <p></p>
    <p></p>
    <div>
      <p class="definition">
<b>chained</b></p>
      <p>A chained method can be overridden in sub-classes and the override must call the overridden method.</p>
    </div>
    <p></p>
    <p></p>
    <div>
      <p class="definition">
<b>abstract</b></p>
      <p>A abstract definition must overridden in some sub-class. This modifier is currently unimplemented.</p>
    </div>
    <p></p>
    <p></p>
    <div>
      <p class="definition">
<b>inline</b></p>
      <p>An inline method permits the compiler to inline its code.</p>
    </div>
    <p></p>
    <p></p>
    <div>
      <p class="definition">
<b>synchronized</b></p>
      <p>A synchronized method is guarantied to always be executing in at most one thread at a time.</p>
    </div>
    <p></p>
    <p></p>
    <div>
      <p class="definition">
<b>remote</b></p>
      <p>A remote method can be used remotely (see the JRM package).</p>
    </div>
    <p></p>
    <a name="types"></a>
    <h4 class="concept">Types</h4>
    <p>Jazz is a dynamically typed language. Types are associated with objects as opposed to statically typed languages where types are associated with variables. With a dynamically typed language, type information is always available at runtime contrary to statically typed languages where only the compiler has access to type information</p>
    <p></p>
    <p>Types in Jazz are always optional.</p>
    <p></p>
    <p>Jazz classes are objects that can be manipulated like any other. This enables powerful runtime flexibility that is very difficult to obtain in languages like C++.</p>
    <p></p>
    <p>In Jazz, even compiled code in entirely dynamic. One big consequence is that modifying a source file will never force recompilation of any other file than itself. </p>
    <p></p>
    <p>Types are denoted by :</p>
    <xmp><primitive> (ex: <int> <bool>)</xmp>
    <xmp><class> (ex: <View> <Window>)</xmp>
    <p>denote the type of all objects of type class, the null not included</p>
    <xmp><class+> (ex: <Point+> <Rect+>)</xmp>
    <p>denote the type of all objects of type class, the null included</p>
    <p></p>
    <p>Using a &lt;class&gt; type specifier instead of the more generic &lt;class+&gt; specifier will enable the compiler to enforce non null.</p>
    <a name="threads"></a>
    <h4 class="concept">Threads</h4>
    <p>Jazz offers a multi-threaded programming model. The Thread class represents a thread</p>
    <a name="formatted_output"></a>
    <h4 class="concept">Formatted Output</h4>
    <p>Implements formatted output.</p>
    <p></p>
    <div>
      <p class="definition">
<b>Directives</b></p>
      <table class="format-directives">
        <tr>
          <td>ASCII</td>
          <td>a</td>
          <td>human readable</td>
        </tr>
        <tr>
          <td>SEXPR</td>
          <td>s</td>
          <td>reader readable</td>
        </tr>
        <tr>
          <td>TEXT</td>
          <td>t</td>
          <td>textual representation</td>
        </tr>
        <tr>
          <td>PRINT</td>
          <td>p</td>
          <td>ascii or sexpr or text</td>
        </tr>
        <tr>
          <td>REAL</td>
          <td>r</td>
          <td>real number</td>
        </tr>
        <tr>
          <td>CHAR</td>
          <td>h</td>
          <td>character</td>
        </tr>
        <tr>
          <td>LIST</td>
          <td>l</td>
          <td>remove parenthesis</td>
        </tr>
        <tr>
          <td>PROPERTIES</td>
          <td>k</td>
          <td>properties list</td>
        </tr>
        <tr>
          <td>UNSIGNED</td>
          <td>u</td>
          <td>unsigned integer</td>
        </tr>
        <tr>
          <td>HEXADECIMAL</td>
          <td>x</td>
          <td>hexadecimal integer</td>
        </tr>
        <tr>
          <td>COLUMN</td>
          <td>c</td>
          <td>column</td>
        </tr>
        <tr>
          <td>TAB</td>
          <td>&</td>
          <td>insert tab character</td>
        </tr>
        <tr>
          <td>NEW_LINE</td>
          <td>%</td>
          <td>insert new line</td>
        </tr>
        <tr>
          <td>LOCALIZE</td>
          <td>z</td>
          <td>localized string</td>
        </tr>
        <tr>
          <td>FORMATTED</td>
          <td>f</td>
          <td>formatted control</td>
        </tr>
      </table>
    </div>
    <p></p>
    <div>
      <p class="definition">
<b>Parameters</b></p>
      <p>{x :a value :b value ?}</p>
      <p>:v -> takes the info from the parameters</p>
      <p></p>
      <p>Examples:</p>
      <ul>
        <li>
          <code>(format :string "{_ 5}")</code>
        </li>
        <li>
          <code>(format :string "{a :width :v :justify right}" bonjour 20)</code>
        </li>
      </ul>
      <p></p>
      <p>Parameters can be optional and can be keyword based.</p>
      <ul>
        <li><span>list?</span></li>
        <li><span>width</span></li>
        <li><span>justify -> :left :right</span></li>
        <li><span>padding</span></li>
        <li><span>separator</span></li>
        <li><span>last-separator</span></li>
        <li><span>precision</span></li>
        <li><span>properties</span></li>
        <li><span>empty-value</span></li>
        <li><span>detail</span></li>
      </ul>
    </div>
    <a name="collector"></a>
    <h4 class="concept">Garbage Collector</h4>
    <p>Jazz is a garbage collected language where memory management is entirely managed by the language freeing the programmer from these complexities. </p>
    <p>When a more precise control of memory and object lifespan is needed, Jazz offers structures similar to C++ scopes where a programmer can specify exactly where an object lifespan should end. The system is then able to immediately recycle the object thus freeing the garbage collector from first having to prove that the object was not used anymore before being able to recycle it. With these structures, very efficient systems can be built where memory allocation is kept at a minimum.</p>
    <p>The Jazz garbage collector is a fully incremental garbage collector, meaning that no discernable pauses should be experienced by the user caused by the garbage collector.</p>
    <a name="launch"></a>
    <h4 class="concept">Launch Parameters</h4>
    <p>Every Jazz application supports the following launch parameters:</p>
    <table class="properties">
      <tr>
        <td>/app</td>
        <td>name of the application to launch</td>
      </tr>
      <tr>
        <td>/controllerhost</td>
        <td>host address of the debugger</td>
      </tr>
      <tr>
        <td>/controllerport</td>
        <td>host port of the debugger</td>
      </tr>
      <tr>
        <td>/debug</td>
        <td>do we debug the process</td>
      </tr>
      <tr>
        <td>/homedir</td>
        <td>home directory of the application</td>
      </tr>
      <tr>
        <td>/jazzdir</td>
        <td>directory where to find the jazz executables</td>
      </tr>
      <tr>
        <td>/user</td>
        <td>login name of the user</td>
      </tr>
      <tr>
        <td>/userdir</td>
        <td>user directory</td>
      </tr>
    </table>
    <p></p>
    <p>Example:</p>
    <p>
<xmp>Launcher.exe
  /app State
  /debug true
  /controllerhost 16777343
  /controllerport 32000
  /jazzdir "C:\Jedi\Bin"
  /jazzuser Guillaume
  /jazzuserdir "C:\Jedi\Guillaume"
  /homedir "C:\Jedi\Products\org.jazz.samples\Projects\State\Distribution"
  /user Guillaume</xmp></p>
    <p></p>
    <div>
      <p class="definition">
<b>Directories</b></p>
      <p>There are two main root directories: Home and Jazz. In a standalone application, the Home directory will point to the same directory as the Jazz one. The Jazz development environment uses this to point Jazz to its root and Home to the root of a project (in general the Jedi project as this will load the IDE). Note that by pointing Home to another project than Jedi by using the /app command line argument, other projects can be loaded in the environment. Also note that on a client site, starting the application with /jazz to point to a Jazz environment (typically on a CD-ROM) can be use to debug the application in interpreted mode.</p>
      <p>Note that in Jazz, the Jazz root directory can be viewed as the root of the Jazz Development System, where as the Jedi directory is one part of the system, the IDE.</p>
    </div>
    <a name="grammar"></a>
    <h4 class="concept">Formal Grammar</h4>
    <xmp style="font-size: small;">;;;
;;;; Formal Syntax
;;;


;; ? -> 0 or 1
;; * -> 0, 1, 2, ...
;; + -> 1, 2, ...
;; { ... } -> group


;;;
;;;; Lexical Structure
;;;


<content> ::= <read>+
<read> ::= <ws> <expr>

<expr> ::= <token> | <sequence> | <quote> | <string>

<sequence> ::=
    "(" <read>* { <ws> "." <read> }? ")"
    | "" <read>+ ""
    | "{" <symbol> <read>* "}"

<quote> ::= "'" <read>
<string> ::= """ { <string-char> | <escape> }* """

<token> ::=
    <type-specifier>
    | <symbol>
    | <hexadecimal>
    | <binary>
    | <integer>
    | <long>
    | <double>

<type-specifier> ::= "<" <symbol> ">" "+"?
<symbol> ::= <symbol-first> <symbol-subsequent>*

<hexadecimal> ::= "#x" <hexdigit>+
<binary> ::= "#b" <binarydigit>+
<integer> ::= <sign>? <digit>+
<long> ::= <sign>? <digit>+ L
<double> ::= <sign>? <digit>+ "." <digit>+
<escape> ::= "\" <any>
<comment> ::= ";" <comment-char> {cr | lf}
<expression-comment> ::= "@" <read> <read>
<ws> ::= <whitespace>*
<whitespace> ::=
    <comment>
    | <expression-comment>
    | tab
    | cr
    | lf
    | space

<symbol-first> ::= <letter> | <digit> | <special>
<symbol-subsequent> ::= <symbol-first> | <sign> | "."

<letter> ::= A-Za-z
<digit> ::= 0-9
<special> ::= !#$%&*/:<=>?^_|~
<hexdigit> ::= 0-9A-Fa-f
<binarydigit> ::= "0" | "1"
<sign> ::= "+" | "-"
<string-char> ::= <any> except """ | "\"
<comment-char> ::= <any> except cr | lf


;;;
;;;; Program Structure
;;;


<jazz-source-file> ::=
    <in>? <using>* <toplevel-unit>

<in> ::=
    "(" "in" <package-identifier> ")"

<using> ::=
    "(" "using" <package-identifier> ")"

;; toplevel units

<toplevel-unit> ::=
    "(" "class" "Object" <class-body> ")"
    | "(" "interface" "Unknown" ")"
    | "(" "package" "Common" ")"
    | <toplevel-class>
    | <toplevel-interface>
    | <toplevel-package>

<toplevel-class> ::=
    "(" "class" <toplevel-unit-modifiers> <class-identifier>
    "extends" <class-identifier>
    { "implements" <interface-list> }?
    <properties>?
    <class-body> ")"

<toplevel-interface> ::=
    "(" "interface" <toplevel-unit-modifiers> <interface-identifier>
    "extends" <interface-identifier>
    <properties>?
    <interface-body> ")"

<toplevel-package> ::=
    "(" "package" <toplevel-unit-modifiers> <package-identifier>
    "extends" <package-identifier>
    <properties>?
    <package-body> ")"

;; inner units

<inner-unit> ::=
    <inner-class> | <inner-interface> | <inner-package>

<inner-class> ::=
    "(" "class" <inner-unit-modifiers> <class-identifier>
    "extends" <class-identifier>
    { "implements" <interface-list> }?
    <properties>?
    <class-body> ")"

<inner-interface> ::=
    "(" "interface" <inner-unit-modifiers> <interface-identifier>
    { "extends" <interface-identifier> }?
    <properties>?
    <interface-body> ")"

<inner-package> ::=
    "(" "package" <inner-unit-modifiers> <package-identifier>
    { "extends" <package-identifier> }?
    <properties>?
    <package-body> ")"

;; unit definition

<interface-list> ::=
    <interface-identifier>
    | "(" <interface-identifier>+ ")"

<properties> ::=
    "(" "properties" { <identifier> <literal> }* ")"

<class-body> ::=
    <class-member>*

<interface-body> ::=
    <interface-member>*

<package-body> ::=
    <package-member>*

;; members

<class-member> ::=
    <slot>
    | <property>
    | <macro>
    | <method>
    | <unit-member>

<interface-member> ::=
    <method-signature>
    | <coexternal>
    | <unit-member>

<package-member> ::=
    <macro>
    | <method>
    | <unit-member>

<unit-member> ::=
    <unit>
    | <constant>
    | <structure>
    | <definition>
    | <comethod>
    | <external>

<slot> ::=
    "(" "slot" <member-modifiers> <slot-identifier> { "initialize" <expression> }? ")"

<property> ::=
    "(" "property" <member-modifiers> <property-identifier> { "initialize" <expression> }?
                { "getter" <method-identifier> }? { "setter" <method-identifier> }? ")"

<constant> ::=
    "(" "constant" <member-modifiers> <constant-identifier> <expression> ")"

<structure> ::=
    "(" "structure" <member-modifiers> <structure-identifier> <expression> ")"

<definition> ::=
    "(" "definition" <definition-modifiers> <definition-identifier> <expression> ")"

<macro> ::=
    "(" "macro" <macro-modifiers> "(" <macro-identifier> <parameter-list> ")" <body> ")"

<method-signature> ::=
    "(" <method-signature-body> ")"

<method-signature-body> ::=
    "method" <method-modifiers> "(" <method-identifier> <parameter-list> ")"

<method> ::=
    "(" <method-signature-body> <body> ")"

<comethod> ::=
    "(" "comethod" <member-modifiers> "(" <comethod-identifier> <typed-parameter-list> ")" <body> ")"

<external> ::=
    "(" "external" <library-identifier> <member-modifiers> "(" <external-identifier> <typed-parameter-list> ")" <body> ")"

<coexternal> ::=
    "(" "coexternal" <member-modifiers> "(" <coexternal-identifier> <typed-parameter-list> ")" <body> ")"

;; parameters

<parameter-list> ::=
    <parameter>* { "." <parameter-identifier> }?

<parameter> ::=
    <parameter-identifier> <type-specifier>?

<typed-parameter-list> ::=
    <typed-parameter>* { "." <parameter-identifier> }?

<typed-parameter> ::=
    <direction>? <parameter-identifier> <type-specifier>

<direction> ::=
    <in>
    | <out>
    | <in-out>

;; modifiers

<toplevel-unit-modifiers> ::= <toplevel-modifier>*
<inner-unit-modifiers> ::= <member-modifier>*
<definition-modifiers> ::= { <member-modifier> | <definition-modifier-extra> }*
<macro-modifiers> ::= <member-modifier>*
<method-modifiers> ::= { <definition-modifier> | <method-modifier-extra> }*
<member-modifiers> ::= <member-modifier>*

<member-modifier> ::= <toplevel-modifier> | "private"
<toplevel-modifier> ::= "meta" | "protected" | "public"
<definition-modifier-extra> ::= "final" | "virtual"
<method-modifier-extra> ::= "chained" | "abstract" | "inline" | "synchronized" | "remote"


;;;
;;;; External Representations
;;;


<datum> ::=
    <boolean> | <number> | <character> | <string> | <symbol> | <list>

<symbol> ::= <identifier>
<list> ::= "(" <datum>* ")" | "(" <datum>+ "." <datum> ")"


;;;
;;;; Expressions
;;;


<expression> ::=
    <literal>
    | <self>
    | <variable>
    | <function-call>
    | <object-invocation>

<literal> ::=
    <quotation> | <self-evaluating>

<variable> ::=
    <identifier>

<generalized-variable> ::=
    <variable>
    | <slot-access>

<quotation> ::=
    "'" <datum> | <quote>

<function-call> ::=
    "(" ")"

<object-invocation> ::=
    "" ""

<self> ::=
    "self"

<super> ::=
    "super"

<body> ::=
    <expression>*

;; derived expressions

<derived-expression> ::=
    <enumeration>
    | <quote> | <if> | <when> | <unless> | <while> | <begin> | <prog1> | <loop>
    | <cond> | <case> | <ecase> | <typecase> | <and> | <or> | <essay> | <either>
    | <set!> | <increase> | <decrease> | <cast> | <synchronize>
    | <function> | <let> | <letrec> | <with> | <with-closed>
    | <bind> | <bind-keywords> | <bind-optionals> | <bind-values> | <bind-properties> | <tie>
    | <cotry> | <block> | <return-from> | <return> | <catch> | <unwind-protect>
    | <error?> | <assert> | <assert-type> | <optimize> | <profile>

<quote> ::=
    "(" "quote" <expression> ")"

<if> ::=
    "(" "if" <test> <consequent> <alternate>+ ")"
<test> ::= <expression>
<consequent> ::= <expression>
<alternate> ::= <expression>

<while> ::=
    "(" "while" <test> <body> ")"

<and> ::=
    "(" "and" <expression>* ")"

<or> ::=
    "(" "or" <expression>* ")"

<set!> ::=
    "(" "set!" <generalized-variable> <expression> ")"

<cast> ::=
    "(" "cast" <expression> <type-specifier> ")"

<synchronize> ::=
    "(" "synchronize" <expression>* ")"

<function> ::=
    "(" "function"  ")"

<let> ::=
    "(" "let" <bindings> <body> ")"

<with> ::=
    "(" "with" <bindings> <body> ")"

<with-closed> ::=
    "(" "with-closed" <bindings> <body> ")"

<bind> ::=
    "(" "bind" <tree-bindings> <expression> <body> ")"

<bind-keywords> ::=
    "(" "bind-keywords" <keyword-bindings> <expression> <body> ")"

<bind-optionals> ::=
    "(" "bind-optionals" <optional-bindings> <expression> <body> ")"

<bind-values> ::=
    "(" "bind-values" <value-bindings> <expression> <body> ")"

<bind-properties> ::=
    "(" "bind-properties" <property-bindings> <expression> <body> ")"

<block> ::=
    "(" "block" <identifier> <body> ")"

<return-from> ::=
    "(" "return-from" <identifier> <expression> ")"

<return> ::=
    "(" "return" <expression> ")"

<catch> ::=
    "(" "catch"  ")"

<optimize> ::=
    "(" "optimize" <optimize-settings> <expression>* ")"
<optimize-settings> ::= "(" <optimize-setting>* ")"
<optimize-setting> ::=
    ":frame?" <boolean>

<profile> ::=
    "(" "profile" <boolean> <profile-body> ")"
    | "(" "profile" <profile-body> ")"
<profile-body> ::= <profile-name> <profile-condition> <body>
<profile-name> ::= <identifier>
<profile-condition> ::= <identifier>

;; macros

<enumeration> ::=
    "(" "enumeration" <member-modifiers> <enumeration-identifier> <expression> ")"

<when> ::=
    "(" "when" <test> <consequent>+ ")"

<unless> ::=
    "(" "unless" <test> <consequent>+ ")"

<begin> ::=
    "(" "begin" <body> ")"

<prog1> ::=
    "(" "prog1" <expression> <body> ")"

<loop> ::=
    "(" "loop" <loop-clause>* ")"
<loop-clause> ::=
    "(" "for" <loop-for-clause> ")"
    | "(" "repeat" <loop-repeat-clause> ")"
    | "(" "do" <loop-do-clause> ")"
    | "(" "sum" <loop-sum-clause> ")"
    | "(" "collect" <loop-collect-clause> ")"
    | <expression>
<loop-for-clause> ::=
    <variable> "in" <expression>
    | "(" <variable> <variable> ")" "in-properties" <expression>
    | <variable> "iterate" <expression>
    | <variable> "from" <loop-for-from-clause>?
<loop-for-from-clause> ::=
    "to" <expression>
    | "below" <expression>
    | "downto" <expression>
<loop-repeat-clause> ::= <expression>
<loop-do-clause> ::= <expression>*
<loop-sum-clause> ::= <expression>
<loop-collect-clause> ::= <expression>

<cond> ::=
    "(" "cond" <cond-clause>* ")"

<case> ::= "(" "case" <target> <case-clause>+ ")"
<case> ::= "(" "case" <target> <case-clause>* "(" "else" <expression>* ")" ")"

<ecase> ::=
    "(" "ecase" <ecase-clause>* ")"

<typecase> ::=
    "(" "typecase" <typecase-clause>* ")"

<essay> ::=
    "(" "essay" <expression>+ ")"

<either> ::=
    "(" "either" <expression>+ ")"

<increase> ::=
    "(" "increase" <generalized-variable> <expression>? ")"

<decrease> ::=
    "(" "decrease" <generalized-variable> <expression>? ")"

<letrec> ::=
    "(" "letrec" <bindings> <body> ")"

<tie> ::=
    "(" "tie" <string> ")"

<cotry> ::=
    "(" "cotry" <expression> <cotry-clauses> ")"
<cotry-clauses> ::= <cotry-clause>*
<cotry-clause> ::= <ecase-clause>

<unwind-protect> ::=
    "(" "unwind-protect" <protected-expression> <protection-expressions> ")"
<protected-expression> ::= <expression>
<protection-expressions> ::= <expression>*

<error?> ::=
    "(" "error?" <expression>* ")"

<assert> ::=
    "(" "assert" <expression> ")"
    | "(" "assert" <function> <expression> ")"

<assert-type> ::=
    "(" "assert-type" <expression> <type-specifier> ")"

;; identifiers

<class-identifier> ::= <identifier>
<interface-identifier> ::= <identifier>
<package-identifier> ::= <identifier>
<constant-identifier> ::= <identifier>
<enumeration-identifier> ::= <identifier>
<structure-identifier> ::= <identifier>
<definition-identifier> ::= <identifier>
<slot-identifier> ::= <identifier>
<property-identifier> ::= <identifier>
<macro-identifier> ::= <identifier>
<method-identifier> ::= <identifier>
<comethod-identifier> ::= <identifier>
<external-identifier> ::= <identifier>
<coexternal-identifier> ::= <identifier>
<parameter-identifier> ::= <identifier>

<library-identifier> ::=
    "Jazz"
    | "Kernel"
    | "GDI"
    | ...

<primitive-identifier> ::=
    "void" |
    "bool" |
    "byte" | "ubyte" | "short" | "int" | "long" | "float" | "double" |
    "string" | "ansistring" |
    "hresult" | "variant" | "guid"
</xmp>
    <a name="syntax_forms"></a>
    <h4 class="section">Syntax</h4>
    <p>Syntax forms in Jazz can be of two kinds :</p>
    <ul>
      <li>
        <p>
Special form<p>A special form is a fundamental syntactic element of the Jazz language. It is explicitly recognized by both the interpreter and the compiler.</p></p>
      </li>
      <li>
        <p>
Macro<p>A macro works by rewriting a lisp expression into another valid lisp expression, often by using more fundamental special forms. Because the code generated stays within the language, macros don't need explicit support in either the interpreter and the compiler.</p></p>
      </li>
    </ul>
    <a name="bind"></a>
    <p class="definition">
<b>bind</b> <i>variables-tree values-tree expr ...</i></p>
    <p></p>
    <p></p>
    <a name="bind-optionals"></a>
    <p class="definition">
<b>bind-optionals</b> <i>((variable default) ...) values-list expr ...</i></p>
    <p></p>
    <p></p>
    <a name="bind-keywords"></a>
    <p class="definition">
<b>bind-keywords</b> <i>((variable default) ...) values-list expr ...</i></p>
    <p></p>
    <p></p>
    <a name="bind-values"></a>
    <p class="definition">
<b>bind-values</b> <i>(variable ...) values expr ...</i></p>
    <p></p>
    <p></p>
    <a name="quote"></a>
    <p class="definition">
<b>quote</b> <i>expr</i></p>
    <p></p>
    <p></p>
    <a name="if"></a>
    <p class="definition">
<b>if</b> <i>test yes-expr no-expr ...</i></p>
    <p></p>
    <p></p>
    <a name="when"></a>
    <p class="definition">
<b>when</b> <i>test yes-expr ...</i></p>
    <p></p>
    <p></p>
    <a name="unless"></a>
    <p class="definition">
<b>unless</b> <i>test no-expr ...</i></p>
    <p></p>
    <p></p>
    <a name="while"></a>
    <p class="definition">
<b>while</b> <i>test expr ...</i></p>
    <p></p>
    <p></p>
    <a name="begin"></a>
    <p class="definition">
<b>begin</b> <i>expr ...</i></p>
    <p></p>
    <p></p>
    <a name="prog1"></a>
    <p class="definition">
<b>prog1</b> <i>result-expr1 expr ...</i></p>
    <p></p>
    <p></p>
    <a name="loop"></a>
    <p class="definition">
<b>loop</b> <i>...</i></p>
    <p></p>
    <code>for</code>
    <code>in</code>
    <code>in-properties</code>
    <code>iterate</code>
    <code>from</code>
    <code>repeat</code>
    <code>do</code>
    <code>sum</code>
    <code>collect</code>
    <a name="tie"></a>
    <p class="definition">
<b>tie</b> <i></i></p>
    <p></p>
    <p></p>
    <a name="cond"></a>
    <p class="definition">
<b>cond</b> <i>(test expr ...) ...</i></p>
    <p></p>
    <p></p>
    <a name="case"></a>
    <p class="definition">
<b>case</b> <i>target (try expr ...) ...</i></p>
    <p></p>
    <p></p>
    <a name="ecase"></a>
    <p class="definition">
<b>ecase</b> <i>target (try expr ...) ...</i></p>
    <p></p>
    <p></p>
    <a name="typecase"></a>
    <p class="definition">
<b>typecase</b> <i>target (try expr ...) ...</i></p>
    <p></p>
    <p></p>
    <a name="set!"></a>
    <p class="definition">
<b>set!</b> <i>variable expr</i></p>
    <p></p>
    <p></p>
    <a name="increase!"></a>
    <p class="definition">
<b>increase!</b> <i>variable expr {value}</i></p>
    <p></p>
    <p></p>
    <a name="decrease!"></a>
    <p class="definition">
<b>decrease!</b> <i>variable expr {value}</i></p>
    <p></p>
    <p></p>
    <a name="let"></a>
    <p class="definition">
<b>let</b> <i>((variable value) ...) expr ...</i></p>
    <p></p>
    <p></p>
    <a name="letrec"></a>
    <p class="definition">
<b>letrec</b> <i>((variable value) ...) expr ...</i></p>
    <p></p>
    <p></p>
    <a name="catch"></a>
    <p class="definition">
<b>catch</b> <i>name expr ...</i></p>
    <p></p>
    <p></p>
    <a name="unwind-protect"></a>
    <p class="definition">
<b>unwind-protect</b> <i>protected-expr protection-expr ...</i></p>
    <p></p>
    <p></p>
    <a name="function"></a>
    <p class="definition">
<b>function</b> <i>parameters-list expr ...</i></p>
    <p></p>
    <p></p>
    <a name="with"></a>
    <p class="definition">
<b>with</b> <i>((variable value) ...) expr ...</i></p>
    <p></p>
    <p></p>
    <a name="with-closed"></a>
    <p class="definition">
<b>with-closed</b> <i>((variable value) ...) expr ...</i></p>
    <p></p>
    <p></p>
    <a name="and"></a>
    <p class="definition">
<b>and</b> <i>expr ...</i></p>
    <p></p>
    <p>This syntactic form will return true if and only if all expr... are true. Note that and will stop as soon as it encounters a false value.</p>
    <a name="or"></a>
    <p class="definition">
<b>or</b> <i>expr ...</i></p>
    <p></p>
    <p>This syntactic form will return true if one of the expr... is true. Note that or will stop as soon as it encounters a true value.</p>
    <a name="essay"></a>
    <p class="definition">
<b>essay</b> <i>expr ...</i></p>
    <p></p>
    <p></p>
    <a name="either"></a>
    <p class="definition">
<b>either</b> <i>expr ...</i></p>
    <p></p>
    <p></p>
    <a name="error?"></a>
    <p class="definition">
<b>error?</b> <i>expr</i></p>
    <p></p>
    <p></p>
    <a name="assert"></a>
    <p class="definition">
<b>assert</b> <i>asserted-expr</i></p>
    <p></p>
    <p></p>
    <a name="assert-type"></a>
    <p class="definition">
<b>assert-type</b> <i>asserted-type</i></p>
    <p></p>
    <p></p>
    <a name="optimize"></a>
    <p class="definition">
<b>optimize</b> <i>settings expr ...</i></p>
    <p></p>
    <p></p>
    <a name="profile"></a>
    <p class="definition">
<b>profile</b> <i>...</i></p>
    <p></p>
    <p></p>
    <a name="constants"></a>
    <h4 class="section">Constants</h4>
    <a name="c_false"></a>
    <p class="definition">
<b>false</b></p>
    <p></p>
Represents the boolean value false.    <a name="c_true"></a>
    <p class="definition">
<b>true</b></p>
    <p></p>
Represents the boolean value true.    <a name="c_nil"></a>
    <p class="definition">
<b>nil</b></p>
    <p></p>
Represents the empty list.    <a name="primitives"></a>
    <h4 class="section">Primitive Types</h4>
    <p></p>
    <a name="void"></a>
    <p class="definition">
<b>void</b></p>
    <p></p>
    <p></p>
    <a name="bool"></a>
    <p class="definition">
<b>bool</b></p>
    <p></p>
    <p>A primitive boolean value.</p>
    <a name="byte"></a>
    <p class="definition">
<b>byte</b></p>
    <p></p>
    <p>An integer of size 1.</p>
    <a name="ubyte"></a>
    <p class="definition">
<b>ubyte</b></p>
    <p></p>
    <p>An unsigned integer of size 1.</p>
    <a name="short"></a>
    <p class="definition">
<b>short</b></p>
    <p></p>
    <p>An integer of size 2.</p>
    <a name="int"></a>
    <p class="definition">
<b>int</b></p>
    <p></p>
    <p>An integer of size 4.</p>
    <a name="long"></a>
    <p class="definition">
<b>long</b></p>
    <p></p>
    <p>An integer of size 8.</p>
    <a name="float"></a>
    <p class="definition">
<b>float</b></p>
    <p></p>
    <p>A small real.</p>
    <a name="double"></a>
    <p class="definition">
<b>double</b></p>
    <p></p>
    <p>A large real.</p>
    <a name="string"></a>
    <p class="definition">
<b>string</b></p>
    <p></p>
    <p>A unicode string.</p>
    <a name="ansistring"></a>
    <p class="definition">
<b>ansistring</b></p>
    <p></p>
    <p>An ansi string.</p>
    <a name="SEC2"></a>
    <h4 class="section">Packages</h4>
    <a name="jazz"></a>
    <h4 class="package">Jazz</h4>
    <a name="SEC3"></a>
    <h4 class="section">Boolean</h4>
    <a name="eq?"></a>
    <p class="definition">
<b>eq?</b> <i>x y</i></p>
    <p></p>
    <p>
Tests if <i>x</i> is physicaly equal to <i>y</i>. In other words, if both memory pointers are the same.</p>
    <a name="neq?"></a>
    <p class="definition">
<b>neq?</b> <i>x y</i></p>
    <p></p>
    <p>The inverse test of eq?.</p>
    <a name="eqv?"></a>
    <p class="definition">
<b>eqv?</b> <i>x y</i></p>
    <p></p>
    <p>eqv? will succed if the two objects are eq? or if they can be simply compared without going into their structures. For example, (eq? 2.3 2.3) migth return false whereas (eqv? 2.3 2.3) will always return true.</p>
    <a name="equal?"></a>
    <p class="definition">
<b>equal?</b> <i>x y</i></p>
    <p></p>
    <p>The most general equivalence predicate of all.</p>
    <p>equal? will succed if the two objects are eqv? but will also try to determine if the two objets structures are identical. For example, (eq? (list 1 2 3) (list 1 2 3)) returns false but (equal? (list 1 2 3) (list 1 2 3)) returns true.</p>
    <a name="not"></a>
    <p class="definition">
<b>not</b> <i>obj</i></p>
    <p></p>
    <p>
Returns the logical negation of <i>obj</i>.</p>
    <a name="boolean?"></a>
    <p class="definition">
<b>boolean?</b> <i>obj</i></p>
    <p></p>
    <p>
Tests if <i>obj</i> is of <code>Boolean</code> type.</p>
    <p></p>
    <p>Examples</p>
    <ul>
      <li>
        <span>
          <code>(boolean? true)</code>
 returns true.        </span>
      </li>
      <li>
        <span>
          <code>(boolean? false)</code>
 returns true.        </span>
      </li>
      <li>
        <span>
          <code>(boolean? nil)</code>
 return false.        </span>
      </li>
    </ul>
    <a name="xor"></a>
    <p class="definition">
<b>xor</b> <i>x y</i></p>
    <p></p>
    <a name="="></a>
    <p class="definition">
<b>=</b> <i>obj1 obj2 obj3 ...</i></p>
    <p></p>
    <a name="/="></a>
    <p class="definition">
<b>/=</b> <i>obj1 obj2 obj3 ...</i></p>
    <p></p>
    <a name="<"></a>
    <p class="definition">
<b><</b> <i>obj1 obj2 obj3 ...</i></p>
    <p></p>
    <a name="<="></a>
    <p class="definition">
<b><=</b> <i>obj1 obj2 obj3 ...</i></p>
    <p></p>
    <a name=">"></a>
    <p class="definition">
<b>></b> <i>obj1 obj2 obj3 ...</i></p>
    <p></p>
    <a name=">="></a>
    <p class="definition">
<b>>=</b> <i>obj1 obj2 obj3 ...</i></p>
    <p></p>
    <a name="ci="></a>
    <p class="definition">
<b>ci=</b> <i>obj1 obj2 obj3 ...</i></p>
    <p></p>
    <a name="ci/="></a>
    <p class="definition">
<b>ci/=</b> <i>obj1 obj2 obj3 ...</i></p>
    <p></p>
    <a name="ci<"></a>
    <p class="definition">
<b>ci<</b> <i>obj1 obj2 obj3 ...</i></p>
    <p></p>
    <a name="ci<="></a>
    <p class="definition">
<b>ci<=</b> <i>obj1 obj2 obj3 ...</i></p>
    <p></p>
    <a name="ci>"></a>
    <p class="definition">
<b>ci></b> <i>obj1 obj2 obj3 ...</i></p>
    <p></p>
    <a name="ci>="></a>
    <p class="definition">
<b>ci>=</b> <i>obj1 obj2 obj3 ...</i></p>
    <p></p>
    <a name="boolean"></a>
    <p class="definition">
<b>boolean</b> <i>obj</i></p>
    <p></p>
    <a name="boolean->integer"></a>
    <p class="definition">
<b>boolean->integer</b> <i>bool</i></p>
    <p></p>
    <a name="integer->boolean"></a>
    <p class="definition">
<b>integer->boolean</b> <i>z</i></p>
    <p></p>
    <a name="SEC4"></a>
    <h4 class="section">Char</h4>
    <a name="char?"></a>
    <p class="definition">
<b>char?</b> <i>obj</i></p>
    <p></p>
    <a name="jazz-constituent?"></a>
    <p class="definition">
<b>jazz-constituent?</b> <i>obj</i></p>
    <p></p>
    <a name="cpp/java-constituent?"></a>
    <p class="definition">
<b>cpp/java-constituent?</b> <i>obj</i></p>
    <p></p>
    <a name="alphabetic?"></a>
    <p class="definition">
<b>alphabetic?</b> <i>obj</i></p>
    <p></p>
    <p>
Tests if <i>obj</i> is alphabetic. An object is alphabetic if it is an alphabetic character or a sequence composed only of alphabetic parts.</p>
    <a name="numeric?"></a>
    <p class="definition">
<b>numeric?</b> <i>obj</i></p>
    <p></p>
    <p>Tests if obj is numeric. An object is numeric if it is a numeric character or a sequence composed only of numeric parts.</p>
    <a name="alphanumeric?"></a>
    <p class="definition">
<b>alphanumeric?</b> <i>obj</i></p>
    <p></p>
    <p></p>
    <a name="whitespace?"></a>
    <p class="definition">
<b>whitespace?</b> <i>obj</i></p>
    <p></p>
    <p>Tests if obj is whitespace. An object is whitespace if it is a whitespace character or a sequence composed only of whitespace parts.</p>
    <a name="upper-case?"></a>
    <p class="definition">
<b>upper-case?</b> <i>obj</i></p>
    <p></p>
    <p>Tests if obj is upper-case. An object is upper-case if it is an upper-case character or a sequence composed only of upper-case parts.</p>
    <a name="lower-case?"></a>
    <p class="definition">
<b>lower-case?</b> <i>obj</i></p>
    <p></p>
    <p>Tests if obj is lower-case. An object is lower-case if it is a lower-case character or a sequence composed only of lower-case parts.</p>
    <a name="upcase"></a>
    <p class="definition">
<b>upcase</b> <i>obj</i></p>
    <p></p>
    <p>Converts obj to upper-case. If obj is a sequence, every part of obj with be converted to upper-case.</p>
    <a name="downcase"></a>
    <p class="definition">
<b>downcase</b> <i>obj</i></p>
    <p></p>
    <p>Converts obj to lower-case. If obj is a sequence, every part of obj with be converted to lower-case.</p>
    <a name="capitalize"></a>
    <p class="definition">
<b>capitalize</b> <i>obj</i></p>
    <p></p>
    <p>Converts obj to capitalized form where every word starts with a capital letter and the rest is in lower-case. If obj is a sequence, every part of obj with be converted to capitalized form.</p>
    <a name="SEC5"></a>
    <h4 class="section">Class</h4>
    <p>The Class type is the supertype of every class. It enables a class to be inspected and manipulated as any other object.</p>
    <a name="class?"></a>
    <p class="definition">
<b>class?</b> <i>obj</i></p>
    <p></p>
    <p></p>
    <a name="class-members"></a>
    <p class="definition">
<b>class-members</b> <i>class</i></p>
    <p></p>
    <p>Returns a list of all members of class.</p>
    <a name="class-fields"></a>
    <p class="definition">
<b>class-fields</b> <i>class</i></p>
    <p></p>
    <p>Returns a list of all fields of class.</p>
    <a name="class-slots"></a>
    <p class="definition">
<b>class-slots</b> <i>class</i></p>
    <p></p>
    <p>Returns a list of all slots of class.</p>
    <a name="SEC6"></a>
    <h4 class="section">Closure</h4>
    <a name="closure?"></a>
    <p class="definition">
<b>closure?</b> <i>obj</i></p>
    <p></p>
    <a name="SEC7"></a>
    <h4 class="section">Collector</h4>
    <a name="gc"></a>
    <p class="definition">
<b>gc</b> <i></i></p>
    <p></p>
    <a name="SEC8"></a>
    <h4 class="section">Control</h4>
    <a name="catched?"></a>
    <p class="definition">
<b>catched?</b> <i>name</i></p>
    <p></p>
    <a name="throw"></a>
    <p class="definition">
<b>throw</b> <i>name</i></p>
    <p></p>
    <a name="exit"></a>
    <p class="definition">
<b>exit</b> <i></i></p>
    <p></p>
    <a name="SEC9"></a>
    <h4 class="section">Debugger</h4>
    <a name="signal"></a>
    <p class="definition">
<b>signal</b> <i>exception</i></p>
    <p></p>
    <a name="error"></a>
    <p class="definition">
<b>error</b> <i>format-string obj ...</i></p>
    <p></p>
    <a name="SEC10"></a>
    <h4 class="section">Enumeration</h4>
    <a name="enumeration?"></a>
    <p class="definition">
<b>enumeration?</b> <i>obj</i></p>
    <p></p>
    <a name="SEC11"></a>
    <h4 class="section">Eval</h4>
    <a name="eval"></a>
    <p class="definition">
<b>eval</b> <i>expr</i></p>
    <p></p>
    <a name="identity"></a>
    <p class="definition">
<b>identity</b> <i>obj</i></p>
    <p></p>
    <a name="SEC12"></a>
    <h4 class="section">Format</h4>
    <a name="format"></a>
    <p class="definition">
<b>format</b> <i>format-string obj ...</i></p>
    <p></p>
    <a name="SEC13"></a>
    <h4 class="section">Function</h4>
    <a name="function?"></a>
    <p class="definition">
<b>function?</b> <i>obj</i></p>
    <p></p>
    <a name="SEC14"></a>
    <h4 class="section">Hashtable</h4>
    <a name="hash-ref"></a>
    <p class="definition">
<b>hash-ref</b> <i>hashtable key</i></p>
    <p></p>
    <p>
Gets the value associated with <i>key</i> inside <i>hashtable</i>.</p>
    <a name="hash-set!"></a>
    <p class="definition">
<b>hash-set!</b> <i>hashtable key value</i></p>
    <p></p>
    <p>
Sets the value associated with <i>key</i> inside <i>hashtable</i> to <i>value</i>.</p>
    <a name="hash-clear"></a>
    <p class="definition">
<b>hash-clear</b> <i>hashtable key</i></p>
    <p></p>
    <a name="empty-hashtable"></a>
    <p class="definition">
<b>empty-hashtable</b> <i>hashtable</i></p>
    <p></p>
    <a name="load-hashtable"></a>
    <p class="definition">
<b>load-hashtable</b> <i>hashtable file</i></p>
    <p></p>
    <a name="hash-remove!"></a>
    <p class="definition">
<b>hash-remove!</b> <i>hashtable key value</i></p>
    <p></p>
    <a name="for-each-hash"></a>
    <p class="definition">
<b>for-each-hash</b> <i>proc hashtable</i></p>
    <p></p>
    <a name="SEC15"></a>
    <h4 class="section">Integer</h4>
    <a name="integer?"></a>
    <p class="definition">
<b>integer?</b> <i>obj</i></p>
    <p></p>
    <a name="even?"></a>
    <p class="definition">
<b>even?</b> <i>z</i></p>
    <p></p>
    <a name="odd?"></a>
    <p class="definition">
<b>odd?</b> <i>z</i></p>
    <p></p>
    <a name="quotient"></a>
    <p class="definition">
<b>quotient</b> <i>z1 z2</i></p>
    <p></p>
    <a name="modulo"></a>
    <p class="definition">
<b>modulo</b> <i>z1 z2</i></p>
    <p></p>
    <a name="separate"></a>
    <p class="definition">
<b>separate</b> <i>z1 z2</i></p>
    <p></p>
    <a name="randomize"></a>
    <p class="definition">
<b>randomize</b> <i></i></p>
    <p></p>
    <a name="random"></a>
    <p class="definition">
<b>random</b> <i>n</i></p>
    <p></p>
    <a name="bit-not"></a>
    <p class="definition">
<b>bit-not</b> <i>n</i></p>
    <p></p>
    <a name="bit-and"></a>
    <p class="definition">
<b>bit-and</b> <i>n ...</i></p>
    <p></p>
    <a name="bit-or"></a>
    <p class="definition">
<b>bit-or</b> <i>n ...</i></p>
    <p></p>
    <a name="bit-xor"></a>
    <p class="definition">
<b>bit-xor</b> <i>n ...</i></p>
    <p></p>
    <a name="bit-set"></a>
    <p class="definition">
<b>bit-set</b> <i>n1 n2 n3</i></p>
    <p></p>
    <a name="bit-set?"></a>
    <p class="definition">
<b>bit-set?</b> <i>n1 n2</i></p>
    <p></p>
    <a name="shift-left"></a>
    <p class="definition">
<b>shift-left</b> <i>n1 n2</i></p>
    <p></p>
    <a name="shift-right"></a>
    <p class="definition">
<b>shift-right</b> <i>n1 n2</i></p>
    <p></p>
    <a name="SEC16"></a>
    <h4 class="section">Interface</h4>
    <a name="interface?"></a>
    <p class="definition">
<b>interface?</b> <i>obj</i></p>
    <p></p>
    <a name="SEC17"></a>
    <h4 class="section">List</h4>
    <a name="car"></a>
    <p class="definition">
<b>car</b> <i>pair</i></p>
    <p></p>
    <p>
Returns the car field of <i>pair</i>.</p>
    <a name="cdr"></a>
    <p class="definition">
<b>cdr</b> <i>pair</i></p>
    <p></p>
    <p>
Returns the cdr field of <i>pair</i>.</p>
    <a name="set-car!"></a>
    <p class="definition">
<b>set-car!</b> <i>pair obj</i></p>
    <p></p>
    <p>
Sets the car field of <i>pair</i> to <i>obj</i>.</p>
    <a name="set-cdr!"></a>
    <p class="definition">
<b>set-cdr!</b> <i>pair obj</i></p>
    <p></p>
    <p>
Sets the cdr field of <i>pair</i> to <i>obj</i>.</p>
    <a name="cons"></a>
    <p class="definition">
<b>cons</b> <i>x y</i></p>
    <p></p>
    <p>
Returns a newly allocated pair whose car is <i>x</i> and whose cdr is <i>y</i>.</p>
    <a name="reverse"></a>
    <p class="definition">
<b>reverse</b> <i>seq</i></p>
    <p></p>
    <p>Reverses a sequence.</p>
    <a name="list?"></a>
    <p class="definition">
<b>list?</b> <i>obj</i></p>
    <p></p>
    <p>Returns true if obj is a list, false otherwise.</p>
    <p></p>
    <p>Examples</p>
    <ul>
      <li><span>(list? nil) -> true</span></li>
      <li><span>(list? '(a b c)) -> true</span></li>
      <li><span>(list? 2) -> false</span></li>
    </ul>
    <a name="nil?"></a>
    <p class="definition">
<b>nil?</b> <i>obj</i></p>
    <p></p>
    <p>Returns true if obj is the empty list, false otherwise.</p>
    <a name="not-nil?"></a>
    <p class="definition">
<b>not-nil?</b> <i></i></p>
    <p></p>
    <a name="pair?"></a>
    <p class="definition">
<b>pair?</b> <i>obj</i></p>
    <p></p>
    <p>Returns true if obj is a pair and otherwise returns false.</p>
    <p></p>
    <p>Examples</p>
    <ul>
      <li><span>(pair? 2) -> false</span></li>
      <li><span>(pair? nil) -> false</span></li>
      <li><span>(pair? (cons 1 2)) -> true</span></li>
      <li><span>(pair? '(a b c)) -> true</span></li>
    </ul>
    <a name="atom?"></a>
    <p class="definition">
<b>atom?</b> <i>obj</i></p>
    <p></p>
    <a name="caar"></a>
    <p class="definition">
<b>caar</b> <i>pair</i></p>
    <p></p>
    <p>
Returns the car field of the car field of <i>pair</i>.</p>
    <a name="cadr"></a>
    <p class="definition">
<b>cadr</b> <i>pair</i></p>
    <p></p>
    <p>
Returns the car field of the cdr field of <i>pair</i>.</p>
    <a name="cdar"></a>
    <p class="definition">
<b>cdar</b> <i>pair</i></p>
    <p></p>
    <p>
Returns the cdr field of the car field of <i>pair</i>.</p>
    <a name="cddr"></a>
    <p class="definition">
<b>cddr</b> <i>pair</i></p>
    <p></p>
    <p>
Returns the cdr field of the cdr field of <i>pair</i>.</p>
    <a name="list"></a>
    <p class="definition">
<b>list</b> <i>obj ...</i></p>
    <p></p>
    <p>Returns a list constructed of all its arguments.</p>
    <a name="memq?"></a>
    <p class="definition">
<b>memq?</b> <i>obj list</i></p>
    <p></p>
    <a name="memv?"></a>
    <p class="definition">
<b>memv?</b> <i>obj list</i></p>
    <p></p>
    <a name="member?"></a>
    <p class="definition">
<b>member?</b> <i>obj list &key key test</i></p>
    <p></p>
    <a name="assq"></a>
    <p class="definition">
<b>assq</b> <i>obj list</i></p>
    <p></p>
    <a name="assv"></a>
    <p class="definition">
<b>assv</b> <i>obj list</i></p>
    <p></p>
    <a name="assoc"></a>
    <p class="definition">
<b>assoc</b> <i>obj list &key key test</i></p>
    <p></p>
    <a name="rassoc"></a>
    <p class="definition">
<b>rassoc</b> <i>obj list &key key test</i></p>
    <p></p>
    <a name="reverse!"></a>
    <p class="definition">
<b>reverse!</b> <i>list</i></p>
    <p></p>
    <a name="remove!"></a>
    <p class="definition">
<b>remove!</b> <i>obj list</i></p>
    <p></p>
    <a name="getprop"></a>
    <p class="definition">
<b>getprop</b> <i>plist key</i></p>
    <p></p>
    <a name="getf"></a>
    <p class="definition">
<b>getf</b> <i>plist key</i></p>
    <p></p>
    <a name="setf"></a>
    <p class="definition">
<b>setf</b> <i>plist key value</i></p>
    <p></p>
    <a name="for-each-pair"></a>
    <p class="definition">
<b>for-each-pair</b> <i>proc list</i></p>
    <p></p>
    <a name="for-each-property"></a>
    <p class="definition">
<b>for-each-property</b> <i>proc list</i></p>
    <p></p>
    <a name="SEC18"></a>
    <h4 class="section">Manifest</h4>
    <a name="load"></a>
    <p class="definition">
<b>load</b> <i>unit-name</i></p>
    <p></p>
    <a name="unit-loaded?"></a>
    <p class="definition">
<b>unit-loaded?</b> <i>unit-name</i></p>
    <p></p>
    <a name="in-manifest?"></a>
    <p class="definition">
<b>in-manifest?</b> <i>unit-name</i></p>
    <p></p>
    <a name="SEC19"></a>
    <h4 class="section">Map</h4>
    <a name="map-ref"></a>
    <p class="definition">
<b>map-ref</b> <i>map key</i></p>
    <p></p>
    <a name="map-set!"></a>
    <p class="definition">
<b>map-set!</b> <i>map key value</i></p>
    <p></p>
    <a name="map-clear"></a>
    <p class="definition">
<b>map-clear</b> <i>map key</i></p>
    <p></p>
    <a name="empty-map"></a>
    <p class="definition">
<b>empty-map</b> <i>map</i></p>
    <p></p>
    <a name="load-map"></a>
    <p class="definition">
<b>load-map</b> <i>map file</i></p>
    <p></p>
    <a name="for-each-map"></a>
    <p class="definition">
<b>for-each-map</b> <i>proc map</i></p>
    <p></p>
    <a name="SEC20"></a>
    <h4 class="section">Metaclass</h4>
    <a name="metaclass?"></a>
    <p class="definition">
<b>metaclass?</b> <i>obj</i></p>
    <p></p>
    <a name="metaclass-instance"></a>
    <p class="definition">
<b>metaclass-instance</b> <i>metaclass</i></p>
    <p></p>
    <a name="SEC21"></a>
    <h4 class="section">Number</h4>
    <a name="+"></a>
    <p class="definition">
<b>+</b> <i>obj ...</i></p>
    <p></p>
    <a name="-"></a>
    <p class="definition">
<b>-</b> <i>obj1 obj2 ...</i></p>
    <p></p>
    <a name="*"></a>
    <p class="definition">
<b>*</b> <i>obj ...</i></p>
    <p></p>
    <a name="number?"></a>
    <p class="definition">
<b>number?</b> <i>obj</i></p>
    <p></p>
    <a name="zero?"></a>
    <p class="definition">
<b>zero?</b> <i>obj</i></p>
    <p></p>
    <a name="positive?"></a>
    <p class="definition">
<b>positive?</b> <i>obj</i></p>
    <p></p>
    <a name="negative?"></a>
    <p class="definition">
<b>negative?</b> <i>obj</i></p>
    <p></p>
    <a name="/"></a>
    <p class="definition">
<b>/</b> <i>obj1 obj2 ...</i></p>
    <p></p>
    <a name="relate"></a>
    <p class="definition">
<b>relate</b> <i>x y</i></p>
    <p></p>
    <a name="sign"></a>
    <p class="definition">
<b>sign</b> <i>z</i></p>
    <p></p>
    <a name="floor"></a>
    <p class="definition">
<b>floor</b> <i>r</i></p>
    <p></p>
    <a name="round"></a>
    <p class="definition">
<b>round</b> <i>r</i></p>
    <p></p>
    <a name="ceil"></a>
    <p class="definition">
<b>ceil</b> <i>r</i></p>
    <p></p>
    <a name="abs"></a>
    <p class="definition">
<b>abs</b> <i>z</i></p>
    <p></p>
    <a name="min"></a>
    <p class="definition">
<b>min</b> <i>obj ...</i></p>
    <p></p>
    <a name="max"></a>
    <p class="definition">
<b>max</b> <i>obj ...</i></p>
    <p></p>
    <a name="between?"></a>
    <p class="definition">
<b>between?</b> <i>n lower upper</i></p>
    <p></p>
    <a name="between"></a>
    <p class="definition">
<b>between</b> <i>lower n upper</i></p>
    <p></p>
    <a name="in-interval?"></a>
    <p class="definition">
<b>in-interval?</b> <i>n lower upper</i></p>
    <p></p>
    <a name="norm"></a>
    <p class="definition">
<b>norm</b> <i>x</i></p>
    <p></p>
    <a name="near?"></a>
    <p class="definition">
<b>near?</b> <i>x y distance</i></p>
    <p></p>
    <a name="SEC22"></a>
    <h4 class="section">Object</h4>
    <a name="object?"></a>
    <p class="definition">
<b>object?</b> <i>obj</i></p>
    <p></p>
    <a name="copy"></a>
    <p class="definition">
<b>copy</b> <i>obj</i></p>
    <p></p>
    <a name="SEC23"></a>
    <h4 class="section">Package</h4>
    <a name="package?"></a>
    <p class="definition">
<b>package?</b> <i>obj</i></p>
    <p></p>
    <a name="SEC24"></a>
    <h4 class="section">Printer</h4>
    <a name="display"></a>
    <p class="definition">
<b>display</b> <i>obj &optional printer</i></p>
    <p></p>
    <a name="write"></a>
    <p class="definition">
<b>write</b> <i>obj &optional printer</i></p>
    <p></p>
    <a name="describe"></a>
    <p class="definition">
<b>describe</b> <i>obj &optional printer</i></p>
    <p></p>
    <a name="new-line"></a>
    <p class="definition">
<b>new-line</b> <i>&optional printer</i></p>
    <p></p>
    <a name="print-unreadable"></a>
    <p class="definition">
<b>print-unreadable</b> <i>obj printer proc</i></p>
    <p></p>
    <a name="SEC25"></a>
    <h4 class="section">Procedure</h4>
    <a name="procedure?"></a>
    <p class="definition">
<b>procedure?</b> <i>obj</i></p>
    <p></p>
    <a name="SEC26"></a>
    <h4 class="section">Reader</h4>
    <a name="read"></a>
    <p class="definition">
<b>read</b> <i>&optional reader</i></p>
    <p></p>
    <a name="get-char"></a>
    <p class="definition">
<b>get-char</b> <i>&optional reader</i></p>
    <p></p>
    <a name="unget-char"></a>
    <p class="definition">
<b>unget-char</b> <i>char &optional reader</i></p>
    <p></p>
    <a name="peek-char"></a>
    <p class="definition">
<b>peek-char</b> <i>&optional reader</i></p>
    <p></p>
    <a name="end-of-stream?"></a>
    <p class="definition">
<b>end-of-stream?</b> <i>&optional reader</i></p>
    <p></p>
    <a name="SEC27"></a>
    <h4 class="section">Real</h4>
    <a name="real?"></a>
    <p class="definition">
<b>real?</b> <i>obj</i></p>
    <p></p>
    <a name="sin"></a>
    <p class="definition">
<b>sin</b> <i>r</i></p>
    <p></p>
    <a name="cos"></a>
    <p class="definition">
<b>cos</b> <i>r</i></p>
    <p></p>
    <a name="tan"></a>
    <p class="definition">
<b>tan</b> <i>r</i></p>
    <p></p>
    <a name="asin"></a>
    <p class="definition">
<b>asin</b> <i>r</i></p>
    <p></p>
    <a name="acos"></a>
    <p class="definition">
<b>acos</b> <i>r</i></p>
    <p></p>
    <a name="atan"></a>
    <p class="definition">
<b>atan</b> <i>r1 r2</i></p>
    <p></p>
    <a name="sqrt"></a>
    <p class="definition">
<b>sqrt</b> <i>r</i></p>
    <p></p>
    <a name="exp"></a>
    <p class="definition">
<b>exp</b> <i>r</i></p>
    <p></p>
    <a name="log"></a>
    <p class="definition">
<b>log</b> <i>r</i></p>
    <p></p>
    <a name="expt"></a>
    <p class="definition">
<b>expt</b> <i>r1 r2</i></p>
    <p></p>
    <a name="percentage"></a>
    <p class="definition">
<b>percentage</b> <i>part total</i></p>
    <p></p>
    <a name="percent"></a>
    <p class="definition">
<b>percent</b> <i>percent n</i></p>
    <p></p>
    <a name="SEC28"></a>
    <h4 class="section">Sequence</h4>
Sequences are an abstract data type representing objects capable of storing sequences of objects. Some examples of sequences are lists, strings and vectors. The Jazz language possesses a important number of sequence manipulation functions    <a name="sequence?"></a>
    <p class="definition">
<b>sequence?</b> <i>obj</i></p>
    <p></p>
    <p>Tests if obj is of Sequence type.</p>
    <a name="length"></a>
    <p class="definition">
<b>length</b> <i>sequence</i></p>
    <p></p>
    <p>
Returns the number of elements in <i>seq</i>.</p>
    <a name="element"></a>
    <p class="definition">
<b>element</b> <i>sequence n</i></p>
    <p></p>
    <p>Returns the nth element of sequence.</p>
    <a name="set-element!"></a>
    <p class="definition">
<b>set-element!</b> <i>sequence n value</i></p>
    <p></p>
    <p>Destructively sets the nth element of sequence to value.</p>
    <a name="empty?"></a>
    <p class="definition">
<b>empty?</b> <i>sequence</i></p>
    <p></p>
    <a name="tail"></a>
    <p class="definition">
<b>tail</b> <i>sequence n</i></p>
    <p></p>
    <p>Returns the elements of sequence that range from n to the end. Note that this operation can be done very efficiently for lists.</p>
    <a name="last"></a>
    <p class="definition">
<b>last</b> <i>sequence</i></p>
    <p></p>
    <p>Returns the last element of sequence.</p>
    <a name="last-tail"></a>
    <p class="definition">
<b>last-tail</b> <i>sequence</i></p>
    <p></p>
    <p>Returns a sequence made-up of only the last element of sequence. Note that this operation can be done very efficiently for lists.</p>
    <a name="butlast"></a>
    <p class="definition">
<b>butlast</b> <i>sequence</i></p>
    <p></p>
    <p>Returns a sequence made up of every element of sequence except the last.</p>
    <a name="subseq"></a>
    <p class="definition">
<b>subseq</b> <i>sequence start &optional end</i></p>
    <p></p>
    <p>Returns a sequence made up of the elements of sequence that range from start to end exclusively. If end is omited, the elements are taken till the end of sequence.</p>
    <a name="subseq!"></a>
    <p class="definition">
<b>subseq!</b> <i>sequence start &optional end</i></p>
    <p></p>
    <a name="sort"></a>
    <p class="definition">
<b>sort</b> <i>predicate sequence &key key test</i></p>
    <p></p>
    <a name="for-each-reversed"></a>
    <p class="definition">
<b>for-each-reversed</b> <i>sequence</i></p>
    <p></p>
    <a name="append"></a>
    <p class="definition">
<b>append</b> <i>sequence</i></p>
    <p></p>
    <p>
Returns a sequence composed of all the elements of <i>seq</i>.</p>
    <p></p>
    <p>Examples</p>
    <ul>
      <li><span>(append) -> nil</span></li>
      <li><span>(append '(a b c) nil '(1 2) '(1 2 3)) -> (a b c 1 2 1 2 3)</span></li>
      <li><span>(append \"Hello\" \" \" \"there\") -> \"Hello there\"</span></li>
      <li><span>(append 2 3) -> <error>"</span></li>
    </ul>
    <a name="append!"></a>
    <p class="definition">
<b>append!</b> <i>sequence ...</i></p>
    <p></p>
    <a name="insert!"></a>
    <p class="definition">
<b>insert!</b> <i>obj sequence pos</i></p>
    <p></p>
    <a name="insert-sequence!"></a>
    <p class="definition">
<b>insert-sequence!</b> <i>sequence inserted pos</i></p>
    <p></p>
    <a name="replace-subseq!"></a>
    <p class="definition">
<b>replace-subseq!</b> <i>sequence start end replacement</i></p>
    <p></p>
    <a name="element-reversed"></a>
    <p class="definition">
<b>element-reversed</b> <i>sequence n</i></p>
    <p></p>
    <a name="for-each"></a>
    <p class="definition">
<b>for-each</b> <i>procedure sequence1 &optional sequence2</i></p>
    <p></p>
    <p>Applies procedure to every element of sequence1 and optionaly sequence2</p>
    <a name="map"></a>
    <p class="definition">
<b>map</b> <i>procedure sequence1 &optional sequence2</i></p>
    <p></p>
    <p>Applies procedure to every element of sequence1 and optionaly sequence2 and collects the results in a list that it returns.</p>
    <a name="map-to"></a>
    <p class="definition">
<b>map-to</b> <i>type proc sequence</i></p>
    <p></p>
    <a name="gather"></a>
    <p class="definition">
<b>gather</b> <i>sequence</i></p>
    <p></p>
    <a name="collect"></a>
    <p class="definition">
<b>collect</b> <i>proc sequence</i></p>
    <p></p>
    <a name="collect-if"></a>
    <p class="definition">
<b>collect-if</b> <i>predicate sequence</i></p>
    <p></p>
    <a name="collect-type"></a>
    <p class="definition">
<b>collect-type</b> <i>type sequence</i></p>
    <p></p>
    <a name="count"></a>
    <p class="definition">
<b>count</b> <i>obj sequence</i></p>
    <p></p>
    <p>Finds the number of occurrences of obj in sequence.</p>
    <a name="count-if"></a>
    <p class="definition">
<b>count-if</b> <i>predicate sequence</i></p>
    <p></p>
    <a name="count-type"></a>
    <p class="definition">
<b>count-type</b> <i>type sequence</i></p>
    <p></p>
    <a name="find"></a>
    <p class="definition">
<b>find</b> <i>object sequence</i></p>
    <p></p>
    <a name="find-if"></a>
    <p class="definition">
<b>find-if</b> <i>predicate sequence</i></p>
    <p></p>
    <a name="skip"></a>
    <p class="definition">
<b>skip</b> <i>predicate sequence</i></p>
    <p></p>
    <a name="some?"></a>
    <p class="definition">
<b>some?</b> <i>predicate sequence</i></p>
    <p></p>
    <a name="every?"></a>
    <p class="definition">
<b>every?</b> <i>predicate sequence</i></p>
    <p></p>
    <a name="union"></a>
    <p class="definition">
<b>union</b> <i>sequence ...</i></p>
    <p></p>
    <a name="intersection"></a>
    <p class="definition">
<b>intersection</b> <i>sequence ...</i></p>
    <p></p>
    <a name="difference"></a>
    <p class="definition">
<b>difference</b> <i>sequence1 sequence2</i></p>
    <p></p>
    <p>Returns the set difference sequence1 \ sequence2.</p>
    <a name="remove"></a>
    <p class="definition">
<b>remove</b> <i>target sequence</i></p>
    <p></p>
    <a name="remove-trailing"></a>
    <p class="definition">
<b>remove-trailing</b> <i>target list</i></p>
    <p></p>
    <a name="remove-duplicates"></a>
    <p class="definition">
<b>remove-duplicates</b> <i>sequence</i></p>
    <p></p>
    <p>Returns a sequence that has exactly the same elements as sequence and in the same order but with no duplicates.</p>
    <a name="remove-nils"></a>
    <p class="definition">
<b>remove-nils</b> <i>sequence</i></p>
    <p></p>
    <a name="mismatch"></a>
    <p class="definition">
<b>mismatch</b> <i>target sequence</i></p>
    <p></p>
    <a name="prefix"></a>
    <p class="definition">
<b>prefix</b> <i>sequences</i></p>
    <p></p>
    <a name="prefix?"></a>
    <p class="definition">
<b>prefix?</b> <i>target sequence</i></p>
    <p></p>
    <a name="search"></a>
    <p class="definition">
<b>search</b> <i>target sequence</i></p>
    <p></p>
    <a name="split"></a>
    <p class="definition">
<b>split</b> <i>sequence separator</i></p>
    <p></p>
    <a name="split-justified"></a>
    <p class="definition">
<b>split-justified</b> <i>sequence width separators</i></p>
    <p></p>
    <a name="join"></a>
    <p class="definition">
<b>join</b> <i>sequences separator</i></p>
    <p></p>
    <a name="substitute"></a>
    <p class="definition">
<b>substitute</b> <i>old new sequence</i></p>
    <p></p>
    <a name="substitute-alist"></a>
    <p class="definition">
<b>substitute-alist</b> <i>replacements sequence</i></p>
    <p></p>
    <a name="fill!"></a>
    <p class="definition">
<b>fill!</b> <i>sequence object</i></p>
    <p></p>
    <a name="replace!"></a>
    <p class="definition">
<b>replace!</b> <i>sequence replacement</i></p>
    <p></p>
    <a name="insert-ordered!"></a>
    <p class="definition">
<b>insert-ordered!</b> <i>object sequence</i></p>
    <p></p>
    <a name="merge-ordered"></a>
    <p class="definition">
<b>merge-ordered</b> <i>proc x y</i></p>
    <p></p>
    <a name="random-element"></a>
    <p class="definition">
<b>random-element</b> <i>sequence</i></p>
    <p></p>
    <a name="partition"></a>
    <p class="definition">
<b>partition</b> <i>sequence &key key test</i></p>
    <p></p>
    <a name="starts-with?"></a>
    <p class="definition">
<b>starts-with?</b> <i>string target</i></p>
    <p></p>
    <a name="ends-with?"></a>
    <p class="definition">
<b>ends-with?</b> <i>string target</i></p>
    <p></p>
    <a name="first"></a>
    <p class="definition">
<b>first</b> <i>sequence</i></p>
    <p></p>
    <a name="second"></a>
    <p class="definition">
<b>second</b> <i>sequence</i></p>
    <p></p>
    <a name="third"></a>
    <p class="definition">
<b>third</b> <i>sequence</i></p>
    <p></p>
    <a name="fourth"></a>
    <p class="definition">
<b>fourth</b> <i>sequence</i></p>
    <p></p>
    <a name="fifth"></a>
    <p class="definition">
<b>fifth</b> <i>sequence</i></p>
    <p></p>
    <a name="sixth"></a>
    <p class="definition">
<b>sixth</b> <i>sequence</i></p>
    <p></p>
    <a name="seventh"></a>
    <p class="definition">
<b>seventh</b> <i>sequence</i></p>
    <p></p>
    <a name="eighth"></a>
    <p class="definition">
<b>eighth</b> <i>sequence</i></p>
    <p></p>
    <a name="ninth"></a>
    <p class="definition">
<b>ninth</b> <i>sequence</i></p>
    <p></p>
    <a name="tenth"></a>
    <p class="definition">
<b>tenth</b> <i>sequence</i></p>
    <p></p>
    <a name="set-first!"></a>
    <p class="definition">
<b>set-first!</b> <i>sequence object</i></p>
    <p></p>
    <a name="set-second!"></a>
    <p class="definition">
<b>set-second!</b> <i>sequence object</i></p>
    <p></p>
    <a name="set-third!"></a>
    <p class="definition">
<b>set-third!</b> <i>sequence object</i></p>
    <p></p>
    <a name="set-fourth!"></a>
    <p class="definition">
<b>set-fourth!</b> <i>sequence object</i></p>
    <p></p>
    <a name="set-fifth!"></a>
    <p class="definition">
<b>set-fifth!</b> <i>sequence object</i></p>
    <p></p>
    <a name="set-sixth!"></a>
    <p class="definition">
<b>set-sixth!</b> <i>sequence object</i></p>
    <p></p>
    <a name="set-seventh!"></a>
    <p class="definition">
<b>set-seventh!</b> <i>sequence object</i></p>
    <p></p>
    <a name="set-eighth!"></a>
    <p class="definition">
<b>set-eighth!</b> <i>sequence object</i></p>
    <p></p>
    <a name="set-ninth!"></a>
    <p class="definition">
<b>set-ninth!</b> <i>sequence object</i></p>
    <p></p>
    <a name="set-tenth!"></a>
    <p class="definition">
<b>set-tenth!</b> <i>sequence object</i></p>
    <p></p>
    <a name="SEC29"></a>
    <h4 class="section">String</h4>
    <a name="string?"></a>
    <p class="definition">
<b>string?</b> <i>object</i></p>
    <p></p>
    <a name="empty-string?"></a>
    <p class="definition">
<b>empty-string?</b> <i>object</i></p>
    <p></p>
    <a name="SEC30"></a>
    <h4 class="section">Symbol</h4>
    <a name="symbol?"></a>
    <p class="definition">
<b>symbol?</b> <i>object</i></p>
    <p></p>
    <a name="keyword?"></a>
    <p class="definition">
<b>keyword?</b> <i>object</i></p>
    <p></p>
    <a name="symbol->keyword"></a>
    <p class="definition">
<b>symbol->keyword</b> <i>symbol</i></p>
    <p></p>
    <a name="keyword->symbol"></a>
    <p class="definition">
<b>keyword->symbol</b> <i>keyword</i></p>
    <p></p>
    <a name="string->symbol"></a>
    <p class="definition">
<b>string->symbol</b> <i>string</i></p>
    <p></p>
    <a name="symbol->string"></a>
    <p class="definition">
<b>symbol->string</b> <i>symbol</i></p>
    <p></p>
    <a name="find-symbol"></a>
    <p class="definition">
<b>find-symbol</b> <i>string</i></p>
    <p></p>
    <a name="generate-symbol"></a>
    <p class="definition">
<b>generate-symbol</b> <i>&optional prefix</i></p>
    <p></p>
    <a name="symbol-bound?"></a>
    <p class="definition">
<b>symbol-bound?</b> <i>symbol</i></p>
    <p></p>
    <a name="symbol-unbound?"></a>
    <p class="definition">
<b>symbol-unbound?</b> <i>symbol</i></p>
    <p></p>
    <a name="SEC31"></a>
    <h4 class="section">Thread</h4>
    <a name="primary-thread"></a>
    <p class="definition">
<b>primary-thread</b> <i></i></p>
    <p></p>
    <a name="active-thread"></a>
    <p class="definition">
<b>active-thread</b> <i></i></p>
    <p></p>
    <a name="SEC32"></a>
    <h4 class="section">Time</h4>
    <a name="clock"></a>
    <p class="definition">
<b>clock</b> <i></i></p>
    <p></p>
    <a name="SEC33"></a>
    <h4 class="section">Type</h4>
    <a name="type?"></a>
    <p class="definition">
<b>type?</b> <i>object</i></p>
    <p></p>
    <a name="new"></a>
    <p class="definition">
<b>new</b> <i>class object ...</i></p>
    <p></p>
    <a name="new-in"></a>
    <p class="definition">
<b>new-in</b> <i>context class object ...</i></p>
    <p></p>
    <a name="coerce"></a>
    <p class="definition">
<b>coerce</b> <i>object type</i></p>
    <p></p>
    <a name="class-of"></a>
    <p class="definition">
<b>class-of</b> <i>object</i></p>
    <p></p>
    <a name="is?"></a>
    <p class="definition">
<b>is?</b> <i>object type</i></p>
    <p></p>
    <a name="is-not?"></a>
    <p class="definition">
<b>is-not?</b> <i>object type</i></p>
    <p></p>
    <a name="typed?"></a>
    <p class="definition">
<b>typed?</b> <i>object type-name</i></p>
    <p></p>
    <a name="subtype?"></a>
    <p class="definition">
<b>subtype?</b> <i>class type</i></p>
    <p></p>
    <a name="subtyped?"></a>
    <p class="definition">
<b>subtyped?</b> <i>class type-name</i></p>
    <p></p>
    <a name="type-name"></a>
    <p class="definition">
<b>type-name</b> <i>type</i></p>
    <p></p>
    <a name="type-ascendant"></a>
    <p class="definition">
<b>type-ascendant</b> <i>type</i></p>
    <p></p>
    <a name="type-descendants"></a>
    <p class="definition">
<b>type-descendants</b> <i>type</i></p>
    <p></p>
    <a name="type-ancestors"></a>
    <p class="definition">
<b>type-ancestors</b> <i>type</i></p>
    <p></p>
    <a name="SEC34"></a>
    <h4 class="section">Unit</h4>
    <a name="unit?"></a>
    <p class="definition">
<b>unit?</b> <i>object</i></p>
    <p></p>
    <a name="all-units"></a>
    <p class="definition">
<b>all-units</b> <i></i></p>
    <p></p>
    <a name="SEC35"></a>
    <h4 class="section">Values</h4>
    <a name="values"></a>
    <p class="definition">
<b>values</b> <i>object ...</i></p>
    <p></p>
    <a name="SEC36"></a>
    <h4 class="section">Vector</h4>
    <a name="vector?"></a>
    <p class="definition">
<b>vector?</b> <i>object</i></p>
    <p></p>
    <a name="SEC37"></a>
    <h4 class="section">Classes</h4>
    <a name="Object"></a>
    <h4 class="class">Object</h4>
    <p>The base class of every other class.</p>
    <a name="initialize"></a>
    <p class="definition">
<b>initialize</b> <i>object ...</i></p>
    <p></p>
    <a name="destroy"></a>
    <p class="definition">
<b>destroy</b> <i></i></p>
    <p></p>
    <a name="close"></a>
    <p class="definition">
<b>close</b> <i></i></p>
    <p></p>
    <a name="print"></a>
    <p class="definition">
<b>print</b> <i>printer detail</i></p>
    <p></p>
    <a name="Boolean"></a>
    <h4 class="class">Boolean</h4>
    <p>
The <code>Boolean</code> class is used to represent truth values. Two boolean objects, <code>true</code> and <code>false</code> exist to represent truthness and falseness respectively. In general, every time a method expects a boolean value, you can use either <code>false</code> or <code>nil</code> to specify falseness and any other object to specify truthness.</p>
    <a name="Char"></a>
    <h4 class="class">Char</h4>
    <p>The Char type is used to represent characters. The external representation of a character x is #\x. Certain special characters can also be represented by a symbolic name as in #\symbolic-name.</p>
    <p></p>
    <p>Symbolic Names</p>
    <ul>
      <li>Home</li>
      <li>Enter</li>
      <li>End</li>
      <li>Info</li>
      <li>Backspace</li>
      <li>Tab</li>
      <li>Line-Feed</li>
      <li>Page-Up</li>
      <li>Page-Down</li>
      <li>Return</li>
      <li>Escape</li>
      <li>Left-Arrow</li>
      <li>Right-Arrow</li>
      <li>Up-Arrow</li>
      <li>Down-Arrow</li>
      <li>Space</li>
      <li>Exclamation-Mark</li>
      <li>Quotation-Mark</li>
      <li>Ampersand</li>
      <li>Quote</li>
      <li>Open-Parenthesis</li>
      <li>Close-Parenthesis</li>
      <li>Times</li>
      <li>Plus</li>
      <li>Comma</li>
      <li>Minus</li>
      <li>Period</li>
      <li>Slash</li>
      <li>Colon</li>
      <li>Semi-Colon</li>
      <li>Question-Mark</li>
      <li>Open-Bracket</li>
      <li>Backslash</li>
      <li>Close-Bracket</li>
      <li>Exponential</li>
      <li>Underscore</li>
      <li>Backquote</li>
      <li>Open-Brace</li>
      <li>Close-Brace</li>
      <li>Delete</li>
      <li>Ellipsis</li>
      <li>Diamond</li>
      <li>Lower-Equal</li>
      <li>Greater-Equal</li>
      <li>Not-Equal</li>
      <li>Check-Mark</li>
      <li>Triangle</li>
      <li>Angle</li>
      <li>F1</li>
      <li>F2</li>
      <li>F3</li>
      <li>F4</li>
      <li>F5</li>
      <li>F6</li>
      <li>F7</li>
      <li>F8</li>
      <li>F9</li>
      <li>F10</li>
      <li>F11</li>
      <li>F12</li>
      <li>F13</li>
      <li>F14</li>
      <li>F15</li>
    </ul>
    <a name="SEC38"></a>
    <h4 class="section">Modules</h4>
    <a name="Access"></a>
    <h3>Access</h3>
    <p>Database access module.</p>
    <p></p>
    <p>The Access module classes can be sorted in two groups, the catalog section and the request section.</p>
    <p></p>
    <p>The catalog section contains all the inventory and provider classes. A provider is a context interface class for a specific DB. Providers are included for SQLServer, Access, dBase and Oracle.</p>
    <p></p>
    <p>The request section contains the connections classes (to connect to a database), the request classes (to sent requests to the database) and record set classes (to hold request results). The classes are currently based on Microsoft ADOBC, but ultimately will be migrated to Data-Mesh.</p>
    <p></p>
    <p>Typical classes: Inventory, Inventory-Table, Inventory-Relation.</p>
    <a name="SEC39"></a>
    <h4 class="section">Classes</h4>
    <a name="Connection"></a>
    <h4 class="class">Connection</h4>
    <p>A database connection.</p>
    <a name="Request"></a>
    <h4 class="class">Request</h4>
    <p>A request to a stored procedure.</p>
    <a name="Recordset"></a>
    <h4 class="class">Recordset</h4>
    <p>A recordset returned by a request.</p>
    <a name="Application"></a>
    <h3>Application</h3>
    <p>Application related classes.</p>
    <a name="Catalog"></a>
    <h3>Catalog</h3>
    <p>A catalog stores in a file database, information associated to scanned source files, remembering file times to minimize disk access and speedup the process. </p>
    <p></p>
    <p>Multi-language catalog for modelized code, including all classes, methods and variables in Java and C++.</p>
    <a name="Builder"></a>
    <h3>Builder</h3>
    <p>Module for building projects</p>
    <p></p>
    <div>
      <p class="definition">
<b>Projects</b></p>
      <p>The most important class of this module is Project. The project class is a collection of modules and references used in a project, to build an application or library. That class must not be confused with the application itself or a process.</p>
    </div>
    <p></p>
    <div>
      <p class="definition">
<b>Modules</b></p>
      <p>Jazz files are regrouped into modules. A project is composed of modules. Each included module can be controlled with the keywords:</p>
    </div>
    <p></p>
    <ul>
      <li><span>:error</span></li>
      <li><span>:reference</span></li>
      <li><span>:include</span></li>
      <li><span>:load (not implemented yet)</span></li>
      <li><span>:install (not implemented yet)</span></li>
    </ul>
    <p></p>
    <div>
      <p class="definition">
<b>Policies</b></p>
      <p>This is a difficult zone where performance and flexibility clash. For now, a Jazz build can be done at 3 levels :</p>
      <ul>
        <li><span>Debug        - rarely used - mainly used to debug the generated C++ code</span></li>
        <li><span>Release      - emphasis is on dynamism, e.g. modifying base class B will not force a recompilation of A</span></li>
        <li><span>Distribution - emphasis is on performance. Minimal amount of safety checks. A programming error could crash the process. Note that even MetaScoop's commercial product do not use this mode as Release is fast enough for most needs!</span></li>
      </ul>
    </div>
    <p></p>
    <div>
      <p class="definition">
<b>Manifest</b></p>
      <p>The manifest is explicitly managed by the programmer. This gives more control to the programmer. There can be no surprise of having a file loaded that was not the one wanted because there was a name conflict. It also gives a very convenient place to put meta information about the unit that a program can programmatically access without having to open the file. Also, the load time is always very fast as there is never any searching to do. </p>
      <p>By having IDE tools to automate mundane tasks like registering a new class in the manifest, this approach can be made almost painless and still keep all of its advantages. </p>
    </div>
    <p></p>
    <a name="Compiler"></a>
    <h3>Compiler</h3>
    <p>The Jazz compiler will produce a native build (i.e. a .exe or .dll file) of the Jazz code files composing a project.</p>
    <a name="Designer"></a>
    <h3>Designer</h3>
    <div>
      <p class="definition">
<b>Designer</b></p>
      <p>A Designer is the interface between a jazz object and a form</p>
    </div>
    <div>
      <p class="definition">
<b>Component-Editor</b></p>
    </div>
    <div>
      <p class="definition">
<b>View-Editor</b></p>
    </div>
    <div>
      <p class="definition">
<b>Branches-Editor</b></p>
    </div>
    <div>
      <p class="definition">
<b>Components-Editor</b></p>
    </div>
    <p></p>
    <div>
      <p class="definition">
<b>Card</b></p>
    </div>
    <div>
      <p class="definition">
<b>Custom-Card</b></p>
    </div>
    <div>
      <p class="definition">
<b>Properties-Card</b></p>
    </div>
    <div>
      <p class="definition">
<b>Value-Row</b></p>
    </div>
    <p></p>
    <div>
      <p class="definition">
<b>Component-Surrogate</b></p>
    </div>
    <p></p>
    <div>
      <p class="definition">
<b>Property</b></p>
    </div>
    <div>
      <p class="definition">
<b>Property-Entry</b></p>
    </div>
    <div>
      <p class="definition">
<b>Property-View</b></p>
    </div>
    <div>
      <p class="definition">
<b>Domain</b></p>
    </div>
    <p></p>
    <div>
      <p class="definition">
<b>Designer Events</b></p>
      <ul>
        <li><span>property-change </span></li>
        <li><span>child-add </span></li>
        <li><span>child-remove </span></li>
        <li><span>child-move </span></li>
        <li><span>update</span></li>
        <li><span>refresh</span></li>
      </ul>
    </div>
    <p></p>
    <div>
      <p class="definition">
<b>Editor Events</b></p>
      <ul>
        <li><span>client-change </span></li>
        <li><span>designer-change </span></li>
        <li><span>branch-changing </span></li>
        <li><span>branch-change </span></li>
        <li><span>selection-changing </span></li>
        <li><span>selection-change</span></li>
        <li><span>saving</span></li>
      </ul>
    </div>
    <p></p>
    <div>
      <p class="definition">
<b>Notes</b></p>
      <ul>
        <li><span>Editing a form is done through a Designer and an instance of the form. Any changes to the instance or its children should be done by calling methods of the designer instead of going to the instance directly. The designer will take care of making the changes as well as recording them.</span></li>
        <li><span>Note that by having events generated when properties are modified and some others, this process could be made more automatic. But, this would imply a great performance overhead on the system and also we do not want programmatically modified properties to be recorded by the designer. This is why Jazz sticks will a manually calling the designer approach.</span></li>
        <li><span>So, if we have a Z -> Y -> X class hierarchy, an instance of Z can be used to edit the class form of X, Y or Z.</span></li>
        <li><span>When Jazz edits an object, it monitors every descendant by installing surrogates in them. Even if the edited component is changed (by double-clicking), we keep the upper surrogates installed (even if they could conceptually be removed) so as to still be able to double-click on them to change again the edited component.</span></li>
        <li><span>Surrogates take the place of an edited component and its descendants when there's a need to trap user events sent to the component. They are most commonly used for visual components like views.</span></li>
        <li><span>An editor is an view that will permit edition of its client and do so by calling designer methods in response to events generated three optional subviews: a branches tree, a descendants tree and a properties tree. An editor has an installed client on which you can put one or more (currently only one) designers on specific descendants of the client. Each designer will record edition to its part of the client descendants tree.</span></li>
        <li><span>So, we have a component and its descendants being monitored by surrogates and one of then is the edited component (so changes to it or any of its descendants is being sent to the designer).</span></li>
        <li><span>When editing a form I should also specify the edited branch (can be nil of course).</span></li>
        <li><span>Note that branch and form unification while desirable is not a good idea because always having an installed branch for every component instance would impose to great a memory load for a very small gain. Also the present approach has the very nice property of having branches as ordinary objects that could have been developed outside of the main system. They are as any other component, they simply have a different behavior.</span></li>
        <li><span>The designer and the various elements of the editor follow the MVC model. The designer plays the model role and the editor elements are views of this model. The editor never modifies its view directly. Instead it calls methods of the designer that will modify the edited component and also send events to every listening view who can then update their interface accordingly.</span></li>
      </ul>
    </div>
    <a name="Doc"></a>
    <h3>Doc</h3>
    <p>The documentation module.</p>
    <p></p>
    <p>The Jazz HTML manual and online help are built using this module.</p>
    <p></p>
    <div>
      <p class="definition">
<b>Todo</b></p>
      <ul>
        <li><span>Add capabilities to include external documentation inside a doc.This could be used to:</span></li>
        <ul>
          <li><span>Give finer control over products including their subproduct documentations.</span></li>
          <li><span>Include generic documentation into application documentation. For instance, almost every Jazz application will be using the File and Edit menu. It would begin wonderfull to be able to just include a generic File-Menu-Doc section, especially if we make it parameterizable using JML for stuff like the application name, so that it says stuff like: The MetaModeler's File menu...</span></li>
        </ul>
      </ul>
    </div>
    <a name="Groupware"></a>
    <h3>Groupware</h3>
    <p>The support classes for the Compare-Directories and Compare-Files tools.</p>
    <a name="Interpreter"></a>
    <h3>Interpreter</h3>
    <p>Project development in Jazz in normally done entirely in interpreted mode resulting in much faster development time, less bugs and just plainly more fun for the programmer! A compiler is available to produce a high performance native build of the project at any time needed.</p>
    <a name="Java"></a>
    <h3>Java</h3>
    <p>Java integration module</p>
    <p></p>
    <p>This module is at an experimental stage at the moment though it was used to implement full database access through Java's JDBC library.</p>
    <a name="JavaParser"></a>
    <h3>JavaParser</h3>
    <p>Module for Java files parsing, based on the ANTLR library.</p>
    <a name="JML"></a>
    <h3>JML</h3>
    <p>The Jazz Markup Language module.</p>
    <p></p>
    <p>JRM plays a key role in Jazz. Almost all data externaly persisted will use JRM as its representation format.</p>
    <p></p>
    <p>Key Classes:</p>
    <div>
      <p class="definition">
<b>JML</b></p>
      <p>A package of JML related methods.</p>
    </div>
    <div>
      <p class="definition">
<b>JML-Node</b></p>
    </div>
    <div>
      <p class="definition">
<b>JML-Element</b></p>
    </div>
    <div>
      <p class="definition">
<b>JML-Text</b></p>
    </div>
    <div>
      <p class="definition">
<b>JML-Parser</b></p>
    </div>
    <div>
      <p class="definition">
<b>JML-Transformation</b></p>
    </div>
    <div>
      <p class="definition">
<b>JML-Renderer</b></p>
    </div>
    <p></p>
    <div>
      <p class="definition">
<b>Terminology</b></p>
      <table class="terminology">
        <caption>Terminology</caption>
        <tr>
          <td>JML</td>
          <td>The sexpr based markup language</td>
        </tr>
        <tr>
          <td>Node</td>
          <td>The tree of node obtained after parsing a JML sexpr</td>
        </tr>
      </table>
    </div>
    <div>
      <p class="definition">
<b>Todo</b></p>
      <p>As we have in Jazz our equivalent of CSS with Styles, shouldn't we use Jazz styles when generating the website or the documentation!?</p>
    </div>
    <a name="JRM"></a>
    <h3>JRM</h3>
    <p></p>
    <p>The Jazz Remote Method Invocation module.</p>
    <p></p>
    <p>Any class can be made remotable. A single remote modifier tells Jazz which methods to make remotable.</p>
    <p></p>
    <p>In the current implementation, remotable objects should always be accessed via their local proxy. For example, an instance of a remotable class X should be created like:</p>
    <p>(new X-Local-Proxy (new X)).</p>
    <p></p>
    <p>Note that an IOR with a reference value of nil can be used to refer to the unique Jazz-Process representing the process itself on the remote process.</p>
    <p></p>
    <p></p>
    <p></p>
    <a name="Library"></a>
    <h3>Library</h3>
    <p>A catch all module for any non-UI class that doesn't belong in another module.</p>
    <a name="SEC40"></a>
    <h4 class="section">Classes</h4>
    <a name="Point"></a>
    <h4 class="class">Point</h4>
    <a name="Rect"></a>
    <h4 class="class">Rect</h4>
    <a name="Dimension"></a>
    <h4 class="class">Dimension</h4>
    <a name="Branch"></a>
    <h4 class="class">Branch</h4>
    <p>A branch is simply a component that encapsulates a form. This branch can be installed or removed at will. Branchs can also be hierarchicaly nested. Thinking about components, you can now give them static shape with a form, or go further and collect some branchs that can be applied to them or go even further and thats the complete flexibility of programming. </p>
    <p></p>
    <p>With this naming, every thing becomes very clean -> for example the saved searches are branchs of the search that you package (maybe to a file or maybe you are copy pasting them or even drag and dropping them!) to a file and later on unpackage and reinstall in the search! Seeing it this way really makes it clear that branchs are clearly an outstanding feature of Jazz. </p>
    <p></p>
    <p>If I can reach a point where everytning is components that can be packaged for saving, copy pasting, ... and all the tools are based on that, I see branches as a concept that will show that a huge portion of the code out there is basically doing branch management stuff without knowing it. </p>
    <a name="Component"></a>
    <h4 class="class">Component</h4>
    <p>Object-Oriented Databases</p>
    <p></p>
    <p>Inheritance and Composition</p>
    <p></p>
    <p>The Jazz component system unifies the inheritance and composition based programming models.</p>
    <p></p>
    <p>The Component class is by far the most fundamental one. It is the foundation of all the graphical user interface but can also be extremely usefull in non graphical contexes.</p>
    <p></p>
    <p>Components are the result the following design goals:</p>
    <ul>
      <li><span> Components should be editable by a graphical editor.</span></li>
      <li><span> Components should be savable to disk and restorable from disk.</span></li>
      <li><span> Components should be hierarchical.</span></li>
      <li><span> Components should integrate seamlessly with the object model.</span></li>
      <li><span> Components should integrate seamlessly with the programming language.</span></li>
    </ul>
    <a name="name"></a>
    <p class="definition">
<b>name</b></p>
    <p></p>
    <p>Every component can be named. A name must be a symbol or nil. A name of nil represents an anonymous component.</p>
    <a name="parent"></a>
    <p class="definition">
<b>parent</b></p>
    <p></p>
    <a name="children"></a>
    <p class="definition">
<b>children</b></p>
    <p></p>
    <a name="find-component"></a>
    <p class="definition">
<b>find-component</b> <i>name</i></p>
    <p></p>
    <p>Returns the child whose name is name. If no such child is found, nil is returned.</p>
    <a name="child"></a>
    <p class="definition">
<b>child</b> <i>name</i></p>
    <p></p>
    <p>Returns the child whose name is name. If no such child is found, an error is signaled.</p>
    <a name="install"></a>
    <p class="definition">
<b>install</b> <i></i></p>
    <p></p>
    <a name="conclude"></a>
    <p class="definition">
<b>conclude</b> <i></i></p>
    <p></p>
    <a name="finish"></a>
    <p class="definition">
<b>finish</b> <i></i></p>
    <p></p>
    <a name="prepare"></a>
    <p class="definition">
<b>prepare</b> <i></i></p>
    <p></p>
    <a name="locate"></a>
    <p class="definition">
<b>locate</b> <i></i></p>
    <p></p>
    <a name="Form"></a>
    <h4 class="class">Form</h4>
    <p>Forms contain properties. Each subform can redefine parts of the parent form. Properties can be added, modified or even removed.</p>
    <p></p>
    <p>For example, a class X has two properties, a and b. The derived class Y change the property a. The resulting form would contain both a and b, with a being the redefined property.</p>
    <p></p>
    <p>X (a = 2, b = 3) -> Y (a = 5) ---> a = 5, b = 3</p>
    <p></p>
    <p>When a form is created, the base form is loaded, then each modification of the successive branches are applied, up to our final form.</p>
    <p></p>
    <p>A property initialized in a class can be impacted by the class's form and all subsequent form redefinitions in the subclasses.</p>
    <a name="Node"></a>
    <h4 class="class">Node</h4>
    <p>A node is a class that supports dynamic properties</p>
    <p></p>
    <ul>
      <li>An node can optionally be named</li>
    </ul>
    <p>
Node properties, for efficiency are stored as slots for direct access but can also be accessed in a generic fashion via the <a href="manual.htm#get-property">get-property</a> method</p>
    <p></p>
    <a name="Element"></a>
    <h4 class="class">Element</h4>
    <p>An element is a node with a hierarchical structure</p>
    <p></p>
    <a name="Exemplar"></a>
    <h4 class="class">Exemplar</h4>
    <p>An Exemplar is a dynamic class whose hierarchy can be modified at runtime</p>
    <p></p>
    <ul>
      <li><span>Exemplars don't have instances</span></li>
    </ul>
    <ul>
      <li><span>All properties are fully inherited in the sense that whenever an exemplar is modified, every descendant is automatically updated. Because the most used operation is by far property access, exemplars have a full internal copy of every property. To implement inheritance, exemplars also have a list of which properties are owned by the exemplar, i.e. what properties should not be updated when an ascendant is modified</span></li>
    </ul>
    <ul>
      <li>
        <span>
Exemplar properties, for efficiency are stored as slots for direct access but they can also be accessed in a generic fashion via the           <a href="manual.htm#get-property">get-property</a>
 method        </span>
      </li>
    </ul>
    <ul>
      <li>
        <span>
Exemplars are grouped in an           <a href="manual.htm#Exemplar-Domain">Exemplar-Domain</a>
 which is the domain in which an exemplar name is a valid reference        </span>
      </li>
    </ul>
    <ul>
      <li>
        <span>
An Exemplar can be named and can inherit from another exemplar via its           <code>base</code>
        </span>
      </li>
    </ul>
    <a name="Windows"></a>
    <h4 class="section">Windows</h4>
    <a name="WinGDI"></a>
    <h4 class="package">WinGDI</h4>
    <a name="WinUser"></a>
    <h4 class="package">WinUser</h4>
    <a name="WinDef"></a>
    <h4 class="package">WinDef</h4>
    <a name="WinKernel"></a>
    <h4 class="package">WinKernel</h4>
    <a name="WinBase"></a>
    <h4 class="package">WinBase</h4>
    <a name="License"></a>
    <h3>License</h3>
    <p>Licensing module.This module which is in development, will provide classes to enforce commercial licensing strategies.</p>
    <a name="Process"></a>
    <h3>Process</h3>
    <p>Process related classes.</p>
    <a name="Repository"></a>
    <h3>Repository</h3>
    <p>A Repository is an abstraction for a Source Control Agent. The only currently supported repository is Microsoft's Visual Source Safe, although an experimental version was used to interface ClearCase for common tasks.</p>
    <a name="Slayer"></a>
    <h3>Slayer</h3>
    <p>Module for bug slaying.</p>
    <p></p>
    <p>With that module a crashing application can dump a status file (named crash.txt) to help debug in a situation where the scheme environment is no longer available. Necessary for the final deployment of an external application.</p>
    <p></p>
    <p></p>
    <a name="SQL"></a>
    <h3>SQL</h3>
    <p>SQL access module.</p>
    <p></p>
    <p>This module is a very mature module that provides a sophisticated UI over the database access classes of the Access module.</p>
    <a name="UI"></a>
    <h3>UI</h3>
    <p>A catch all module for all User Interface related classes.</p>
    <a name="Concepts"></a>
    <h4 class="section">Concepts</h4>
    <a name="Activation"></a>
    <h4 class="concept">Activation</h4>
    <p>Kinds of activation taking place in a Jazz application:</p>
    <ul>
      <li>Frame</li>
      <ul>
        <li>Frame that becomes front -> frame-activate</li>
      </ul>
      <ul>
        <li>Frame that was front -> frame-deactivate</li>
      </ul>
    </ul>
    <ul>
      <li>Root</li>
      <ul>
        <li>mouse-activate -> activate event from a user mouse action</li>
      </ul>
      <ul>
        <li>Root view of the view that has the focus -> root-activate</li>
      </ul>
    </ul>
    <ul>
      <li>Stage</li>
      <ul>
        <li>When the last frame is closed -> stage-activate</li>
      </ul>
      <ul>
        <li>When a first frame is activated -> stage-deactivate</li>
      </ul>
    </ul>
    <ul>
      <li>Client</li>
      <ul>
        <li>When a new frame becomes front, every palette receives a client-activate</li>
      </ul>
    </ul>
    <a name="Events"></a>
    <h4 class="concept">Events</h4>
    <p>Event encapsulation puts almost no pressure on the framework because almost everywhere the direct class override is used.Events encapsulate amongst other things, modifiers state that is necessary for recording systems.</p>
    <p>When an event is generated in response to a value change :</p>
    <ul>
      <li><span>only one event is generated after the value change -> :value-change</span></li>
      <li><span>two events, one before and one after the value change -> :value-changing :value-changed</span></li>
      <li><span>An event is generated when something happens. Code gets executed in response to events. Event code that whants the triggered action to be stored and manipulated in a meaningfull way will use an Action instead of simply doing it.</span></li>
    </ul>
    <a name="Painting"></a>
    <h4 class="concept">Painting</h4>
    <ul>
      <li>View-Player.paint</li>
      <ul>
        <li>Drawing.paint (root)</li>
        <ul>
          <li>Drawing.paint-displayed</li>
          <ul>
            <li>Drawing.paint-drawing</li>
            <ul>
              <li>DC.with-transform</li>
              <ul>
                <li>Drawing.draw-background</li>
              </ul>
              <ul>
                <li>Drawing.draw-view</li>
                <ul>
                  <li>Drawing.draw</li>
                </ul>
              </ul>
              <ul>
                <li>Drawing.draw-children</li>
                <ul>
                  <li>Drawing.paint</li>
                </ul>
              </ul>
            </ul>
          </ul>
        </ul>
      </ul>
    </ul>
    <p></p>
    <ul>
      <li><span>View painting</span></li>
      <li><span>Tree cell (column) painting</span></li>
      <li><span>Zooming</span></li>
      <li><span>Print previewing</span></li>
      <li><span>View-DC</span></li>
    </ul>
    <p></p>
    <ul>
      <li><span>A view is a rectangular abstraction</span></li>
      <li><span>Views can define their own painting abstractions and hook them into the painting scheme (ex: tables painting cells)</span></li>
      <li><span>Setup origin and clipping</span></li>
      <li><span>Why origin + clipping? A simple rectangle wouldn't do?</span></li>
    </ul>
    <a name="Printing"></a>
    <h4 class="concept">Printing</h4>
    <p>Print Flow</p>
    <p></p>
    <ul>
      <li>on-print</li>
      <ul>
        <li>get printer dc</li>
      </ul>
      <ul>
        <li>allocate print job</li>
      </ul>
      <ul>
        <li>job.start-doc</li>
      </ul>
      <ul>
        <li>view.print-content job</li>
        <ul>
          <li>job.with-job self</li>
          <ul>
            <li>for-each-page start end (get-page-height~ job)</li>
            <ul>
              <li>job.with-page</li>
              <ul>
                <li>print-range job dc top bottom</li>
              </ul>
            </ul>
          </ul>
        </ul>
      </ul>
      <ul>
        <li>job.end-doc</li>
      </ul>
    </ul>
    <a name="Packages"></a>
    <h4 class="section">Packages</h4>
    <a name="Window"></a>
    <h4 class="section">Window</h4>
    <div>
      <p class="definition">
<b>Frame</b></p>
      <p>A frame window represents a document window in the MDI metaphor. Frame windows should only be used in an MDI application.</p>
    </div>
    <div>
      <p class="definition">
<b>Palette</b></p>
      <p>Windows of this class should be permanent popups. They can be in either floating or docked mode.</p>
    </div>
    <div>
      <p class="definition">
<b>Popup</b></p>
      <p>Windows of this class should be temporary popup windows, i.e. tooltips, menus, ... For permanent popups that can be floating or docked, see Palette.</p>
    </div>
    <div>
      <p class="definition">
<b>Stage</b></p>
      <p>A stage window represents a the client window in the MDI metaphor. Stage windows should only be used in an MDI application.</p>
    </div>
    <div>
      <p class="definition">
<b>Window</b></p>
    </div>
    <a name="View"></a>
    <h4 class="section">View</h4>
    <div>
      <p class="definition">
<b>View</b></p>
    </div>
    <div>
      <p class="definition">
<b>Scroller-View</b></p>
    </div>
    <a name="Text"></a>
    <h4 class="section">Text</h4>
    <a name="Tree"></a>
    <h4 class="section">Tree</h4>
    <a name="Layout"></a>
    <h4 class="section">Layout</h4>
    <a name="Menu"></a>
    <h4 class="section">Menu</h4>
    <a name="Look"></a>
    <h4 class="section">Look & Feel</h4>
    <a name="Search"></a>
    <h4 class="section">Search</h4>
    <a name="XML"></a>
    <h3>XML</h3>
    <p>External XML parsing module.</p>
    <p></p>
    <p>This module uses an external XML parsing library to parse XML. Note that any file under application control should definitely use the JML module that provides much higher level functionnality.</p>
    <a name="Zip"></a>
    <h3>Zip</h3>
    <p>Data compression module. This module is an abstraction layer over the ZLib library.</p>
    <a name="org.jedi"></a>
    <h3>Jedi</h3>
    <p>Jedi is a full featured IDE for the Jazz programming language built entirely using the Jazz language</p>
    <a name="jedi.installation"></a>
    <h4 class="section">Installation</h4>
    <a name="jedi.boot"></a>
    <h4 class="section">Boot Process</h4>
    <p>IDE starting steps</p>
    <p></p>
    <p>When the IDE (Jedi) is launched, the jazz environment is created in the following steps:</p>
    <p></p>
    <ol>
      <li>Hardcoded C++: The underlaying compiled C++.</li>
      <li>Settings: Mostly for memory allocation</li>
      <li>Command arguments:</li>
      <li>System properties: The jazz classes are loaded.</li>
      <li>Manifest: The manifest is applied.</li>
      <li>Preferences: The Preference.jml file is loaded.</li>
    </ol>
    <a name="jedi.console"></a>
    <h4 class="section">Console</h4>
    <p>Les modes private sont overrides par le mode "superuser" en mode console (interprete) ou en mode test (test0, test1, etc&#8230;) : ceci est concu pour pouvoir tester toutes les methods sans etre bloque par le "private".</p>
    <a name="jedi.debugger"></a>
    <h4 class="section">Debugger</h4>
    <p>Remote debugger</p>
    <p>Every Jazz process has an associated Jazz-Process instance that can be obtained by the (get-process) method of the running process. For Jedi, this is an instance of the Jedi-Process derived class</p>
    <p>A running Jedi application also creates an instance of the Debugger class that remote processes will call</p>
    <p>Also, every debugged process (including Jedi) will have a controller (the Jedi that launched it) and a debugger (the debugger in the controlling Jedi). Note that in general for Jedi these will point to its local versions but if a Jedi is remotly debugging another Jedi, they can point to the remote Jedi acting as the debugger. In both cases, a get-local-debugger-server method can be used to retreive the local version of the debugger even if the local Jedi is beeing remotly debugged</p>
    <p>The debugger uses basically two remote classes into the debugged process: Jazz-Process to call the remote process and Execution-Thread to represent a thread in the debugged process.  Also, the base class Execution-Frame and its derived classes are used when a remote execution thread returns a list of its stack frames (these are not remote classes, they are basic classes that can be marshalled by value).</p>
    <p>An advantage of pretty-printed code is the ability to debug code that was generated programmatically</p>
    <p>The Debugger class is used locally and the Jedi-Debugger class is the one that gets called remotely by debugged processes</p>
    <a name="jedi.designer"></a>
    <h4 class="section">Designer</h4>
    <p>The visual GUI designer is at a prototype stage at best. Because the emphasis has always been on enabling the code to do everything in a clean reusable fashion, not much work was done to complete the Designer.</p>
    <a name="jedi.groupware"></a>
    <h4 class="section">Groupware</h4>
    <p>Compare files.</p>
    <p>Compare directories.</p>
    <p>Source safe integration</p>
    <p></p>
    <a name="jedi.profiler"></a>
    <h4 class="section">Profiler</h4>
    <a name="jedi.projects"></a>
    <h4 class="section">Projects</h4>
    <p>Manifest</p>
    <p></p>
    <p>At build time, Jazz files are converted to C++ files, then to object files and finally assembled into the application (or library). Each object file contains the modification date of its Jazz file.</p>
    <p></p>
    <p>.jazz -> .cpp -> .obj }</p>
    <p>.jazz -> .cpp -> .obj } .exe or .dll</p>
    <p>.jazz -> .cpp -> .obj }</p>
    <p></p>
    <p>When the Interpreter module is included  in the compiled version, the application is still able to evaluate Jazz code. We can take advantage of that to replace parts of the code without having to recompile the whole project.</p>
    <p></p>
    <p>By default, the application will look into some files and folders for more recent code, using the modification date. The priority order is:</p>
    <p></p>
    <ol>
      <li>Manifest file</li>
      <li>Patches file</li>
      <li>Debug folder</li>
      <li>Support folder</li>
    </ol>
    <p></p>
    <p>As there's no semantic distinctions between interpreted and compiled code, a deployed application can then be updated by simply using the new code.</p>
    <p></p>
    <a name="jedi.search"></a>
    <h4 class="section">Search</h4>
    <img src="screenshots/search_replace.png"/>
    <a name="jedi.sql"></a>
    <h4 class="section">SQL</h4>
    <p></p>
    <a name="jedi.text"></a>
    <h4 class="section">Text</h4>
    <a name="jedi.undo"></a>
    <h4 class="section">Undo / Redo</h4>
    <a name="jedi.coloring"></a>
    <h4 class="section">Syntax coloring</h4>
    <a name="jedi.recording"></a>
    <h4 class="section">Macro recording</h4>
    <a name="jedi.mouse-copy"></a>
    <h4 class="section">Mouse copy</h4>
    <a name="jedi.completion"></a>
    <h4 class="section">Symbol completion</h4>
    <a name="jedi.navigation"></a>
    <h4 class="section">Navigation</h4>
    <a name="jedi.printing"></a>
    <h4 class="section">Printing</h4>
    <a name="jedi.user"></a>
    <h4 class="section">User</h4>
    <a name="Settings"></a>
    <h4 class="section">Settings</h4>
    <a name="Preferences"></a>
    <h4 class="section">Preferences</h4>
    <a name="jedi.workbench"></a>
    <h4 class="section">Workbench</h4>
    <img src="screenshots/workbench.png"/>
    <a name="jedi.workspaces"></a>
    <h4 class="section">Workspaces</h4>
    <a name="jedi.windows"></a>
    <h4 class="section">Windows</h4>
    <a name="jedi.com"></a>
    <h4 class="section">COM</h4>
    <div id="footer">
      <p>Copyright &copy; 1996-2007 Guillaume Cartier</p>
    </div>
  </div>
</div>
</body>

</html>
