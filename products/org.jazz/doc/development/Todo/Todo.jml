(<article> title: "Future Improvements"
  (<node>
    "Fix cond tabulation."
    "Fix the recorder in regards to uses of shift-down? ... and in general do a scan of all modif-down? that should basically only be used in Even..."
    "Finish the work started on configurations to enable configurable launch parameters"
    (<node>
      "command line parametres"
      "debug / release / ..."
      "...")
    "In an error dialog, if we copy / paste a part of the message, we get another error. The text should not allow the paste as it is not editable..."
    "Should really support adding and removing slots without having to restart for the open source release..."
    "Implement the CSS border-collapse concept"
    (<span>
      "Why not have exactly like we have delimited strings, a syntax for binary objects that would enable images or ... to be saved in Jazz files like JML databases."
      "Not a very scalable solution but very nice for small to medium size databases.")
    "Clean the text by having a Jazz-Syntax class. It will make F1 work in the console amongst other things."
    "Investigate if very generic and simple to implement inlined functions could be implemented by a simple macro expansion expanding to a syntax-case that would take care of lexical captures."
    "A nice feature would be to color inner definitions by progressively augmenting their color's darkness in proportion to their depth."
    "Could also color expression commented code by augmenting it's color's gray component."
    "Try and find a solution to infinite loops. Could a key be used to interrupt any Jazz thread."
    "Also need to find a solution to stack overflows."
    "Add support for textual macros beeing callable from code (generate code that implements a macro)."
    "What really brings textual macros home is user configurable shortcuts for every events."
    "Add validation code for methods for parameters with an enumeration type. This could be very usefull for all those methods receiving symbols which is nice but not very robust."
    "Finish the started work on making Jazz 100% robust to memory leaks by ensuring that *every* object referencing an external resource goes through an object implementing destroy."
    "Investigate why the drawing system seems not to be using offscreens anymore."
    "Think about removing windows altogether and having only views."
    "Implement a simple static catalog for Lisp code based on the lisp explorer to enable code edition, completion, ... for all scheme code."
    "Also use this catalog for Jazz and rename the current catalog to Memory-Catalog. Bring all tools up to speed with catalogs..."
    "Note that the lisp catalog should not use file positions but locations..."
    "Would be nice to have 1 update shortcut that updates the chapters, the hierarchy and the catalog..."
    (<node>
      "This will give file order (put back the sort button)."
      "Classes will no longuer have to be loaded to show hierarchy."
      "This will support Scheme code too! For this to be 100% nice I have to add support in the explorer for Scheme's toplevel spicing constructs (begin let ...).")
    "A logo for JazzScheme would be nice."
    "Should double-click on f~ select only f!?"
    "Finish the expression based search."
    "Fix when a coloring style bugs because it has a style within a style (e.g. a string within a literal). How can we test for the preapplied external style so that the string doesnt color when in a colorizer?"
    "Now that the eval of toplevel begin forms is fixed, refactor the commented code in the Jedi-User class. In fact, the clean approach is to leave it like it is and implement the methods like test-pen as local methods."
    "Clean the lisp explorer by making it as much as possible data driven with all information at one place for each special form."
    "Integrate the contents of the Jazz Presentation.ftx file into the manual and website."
    "Complete the nil / nil? / not-nil? cleanup. Probably implement a runtime obsoleted call logging mechanism..."
    (<node>
      "null? <-> nil?"
      "prolly remove the null and nil constants.")
    ))
