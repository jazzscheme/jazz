{Formatted-Text
 :formats
 ({Format :base Default :left-margin 0 :bulleted? #f}
  {Format :base Default :left-margin 16 :bulleted? #t}
  {Format :base Default :left-margin 48 :bulleted? #t}
  {Format :base Heading3 :left-margin 32 :bulleted? #f}
  {Format :base Default :left-margin 32 :bulleted? #f}
  {Format :base Heading0 :left-margin 48 :bulleted? #t}
  {Format :base Heading0 :left-margin 80 :bulleted? #t}
  {Format :base Heading1 :left-margin 16 :bulleted? #t}
  {Format :base Heading3 :left-margin 48 :bulleted? #t}
  {Format :base Heading3 :left-margin 0 :bulleted? #f}
  {Format :base Heading1 :left-margin 0 :bulleted? #f}
  {Format :base Heading1 :left-margin 48 :bulleted? #t}
  {Format :base Heading3 :left-margin 16 :bulleted? #t}
  {Format :base Heading1 :left-margin 80 :bulleted? #t}
  {Format :base Heading3 :left-margin 80 :bulleted? #t}
  {Format :base Heading0 :left-margin 16 :bulleted? #t}
  {Format :base Heading3 :left-margin 32 :bulleted? #f}
  {Format :base Heading0 :left-margin 48 :bulleted? #t}
  {Format :base Heading0 :left-margin 80 :bulleted? #t}
  {Format :base Heading1 :left-margin 16 :bulleted? #t}
  {Format :base Heading3 :left-margin 48 :bulleted? #t}
  {Format :base Heading3 :left-margin 0 :bulleted? #f}
  {Format :base Heading1 :left-margin 0 :bulleted? #f}
  {Format :base Heading1 :left-margin 48 :bulleted? #t}
  {Format :base Heading3 :left-margin 16 :bulleted? #t}
  {Format :base Heading1 :left-margin 80 :bulleted? #t}
  {Format :base Heading3 :left-margin 80 :bulleted? #t}
  {Format :base Heading0 :left-margin 16 :bulleted? #t}
  {Format :base Heading3 :left-margin 32 :bulleted? #f}
  {Format :base Heading0 :left-margin 48 :bulleted? #t}
  {Format :base Heading0 :left-margin 80 :bulleted? #t}
  {Format :base Heading1 :left-margin 16 :bulleted? #t}
  {Format :base Heading3 :left-margin 48 :bulleted? #t}
  {Format :base Heading3 :left-margin 0 :bulleted? #f}
  {Format :base Heading1 :left-margin 0 :bulleted? #f}
  {Format :base Heading1 :left-margin 48 :bulleted? #t}
  {Format :base Heading3 :left-margin 16 :bulleted? #t}
  {Format :base Heading1 :left-margin 80 :bulleted? #t}
  {Format :base Heading3 :left-margin 80 :bulleted? #t}
  {Format :base Heading0 :left-margin 16 :bulleted? #t}
  {Format :base Heading3 :left-margin 32 :bulleted? #f}
  {Format :base Heading0 :left-margin 48 :bulleted? #t}
  {Format :base Heading0 :left-margin 80 :bulleted? #t}
  {Format :base Heading1 :left-margin 16 :bulleted? #t}
  {Format :base Heading3 :left-margin 48 :bulleted? #t}
  {Format :base Heading3 :left-margin 0 :bulleted? #f}
  {Format :base Heading1 :left-margin 0 :bulleted? #f}
  {Format :base Heading1 :left-margin 48 :bulleted? #t}
  {Format :base Heading3 :left-margin 16 :bulleted? #t}
  {Format :base Heading1 :left-margin 80 :bulleted? #t}
  {Format :base Heading3 :left-margin 80 :bulleted? #t}
  {Format :base Heading0 :left-margin 16 :bulleted? #t}
  {Format :base Default :left-margin 80 :bulleted? #t}
  {Format :base Default :left-margin 112 :bulleted? #t}
  {Format :base Heading3 :left-margin 32 :bulleted? #f}
  {Format :base Heading0 :left-margin 48 :bulleted? #t}
  {Format :base Heading0 :left-margin 80 :bulleted? #t}
  {Format :base Heading1 :left-margin 16 :bulleted? #t}
  {Format :base Heading3 :left-margin 48 :bulleted? #t}
  {Format :base Heading3 :left-margin 0 :bulleted? #f}
  {Format :base Heading1 :left-margin 0 :bulleted? #f}
  {Format :base Heading1 :left-margin 48 :bulleted? #t}
  {Format :base Heading3 :left-margin 16 :bulleted? #t}
  {Format :base Heading1 :left-margin 80 :bulleted? #t}
  {Format :base Heading3 :left-margin 80 :bulleted? #t}
  {Format :base Heading0 :left-margin 16 :bulleted? #t}
  {Format :base Heading3 :left-margin 32 :bulleted? #f}
  {Format :base Heading0 :left-margin 48 :bulleted? #t}
  {Format :base Heading0 :left-margin 80 :bulleted? #t}
  {Format :base Heading1 :left-margin 16 :bulleted? #t}
  {Format :base Heading3 :left-margin 48 :bulleted? #t}
  {Format :base Heading3 :left-margin 0 :bulleted? #f}
  {Format :base Heading1 :left-margin 0 :bulleted? #f}
  {Format :base Heading1 :left-margin 48 :bulleted? #t}
  {Format :base Heading3 :left-margin 16 :bulleted? #t}
  {Format :base Heading1 :left-margin 80 :bulleted? #t}
  {Format :base Heading3 :left-margin 80 :bulleted? #t}
  {Format :base Heading0 :left-margin 16 :bulleted? #t}
  {Format :base Heading3 :left-margin 32 :bulleted? #f}
  {Format :base Heading0 :left-margin 48 :bulleted? #t}
  {Format :base Heading0 :left-margin 80 :bulleted? #t}
  {Format :base Heading1 :left-margin 16 :bulleted? #t}
  {Format :base Heading3 :left-margin 48 :bulleted? #t}
  {Format :base Heading3 :left-margin 0 :bulleted? #f}
  {Format :base Heading1 :left-margin 0 :bulleted? #f}
  {Format :base Heading1 :left-margin 48 :bulleted? #t}
  {Format :base Heading3 :left-margin 16 :bulleted? #t}
  {Format :base Heading1 :left-margin 80 :bulleted? #t}
  {Format :base Heading3 :left-margin 80 :bulleted? #t}
  {Format :base Heading0 :left-margin 16 :bulleted? #t}
  {Format :base Heading3 :left-margin 32 :bulleted? #f}
  {Format :base Heading0 :left-margin 48 :bulleted? #t}
  {Format :base Heading0 :left-margin 80 :bulleted? #t}
  {Format :base Heading1 :left-margin 16 :bulleted? #t}
  {Format :base Heading3 :left-margin 48 :bulleted? #t}
  {Format :base Heading3 :left-margin 0 :bulleted? #f}
  {Format :base Heading1 :left-margin 0 :bulleted? #f}
  {Format :base Heading1 :left-margin 48 :bulleted? #t}
  {Format :base Heading3 :left-margin 16 :bulleted? #t}
  {Format :base Heading1 :left-margin 80 :bulleted? #t}
  {Format :base Heading3 :left-margin 80 :bulleted? #t}
  {Format :base Heading0 :left-margin 16 :bulleted? #t}
  {Format :base Heading0 :left-margin 0 :bulleted? #f}
  {Format :base Heading0 :left-margin 32 :bulleted? #f})

 :styles
 ({Text-Style :name Default :font {Font :name Plain}})

 :paragraphs
 ((Heading0 ("Jazz Presentation" Heading0))
  (Heading0)
  (Heading0 ("A language that doesn't affect the way you think about programming, is not worth knowing." 0))
  (Heading0 ("-- Alan J. Perlis" 0))
  (0)
  (0)
  (Heading1 ("Overview" Heading1))
  (0)
  (Heading3 ("Introduction" Heading3))
  (1 ("What is Jazz?" 0))
  (4 ("Jazz is a complete development platform for writing, debugging and deploying industrial-strength applications using Jazz, an object-oriented Lisp-based programming language" 0))
  (0)
  (1 ("Why was Jazz created?" 0))
  (4 ("To bring the development power of a modern object-oriented Lisp-based programming language to the world of commercial business application development" 0))
  (0)
  (Heading3 ("Key Points" Heading3))
  (1 ("Bring the development power of Lisp to the business world" 0))
  (1 ("Promote the use of Lisp based languages" 0))
  (2 ("Generate wealth to" 0))
  (52 ("Hire talented people" 0))
  (52 ("Promote Lisp" 0))
  (52 ("Jazz is all about having fun by beeing able to focus on the project" 0))
  (53 ("It is the absolute opposite of the 'sweat shop' trend where programming is going" 0))
  (1 ("Create a commercialy focussed and successfull company" 0))
  (0)
  (Heading3 ("Key features" Heading3))
  (1 ("Exceptional development speed" 0))
  (1 ("95% reuse of previously developed code" 0))
  (1 ("Sophistical GUI system" 0))
  (1 ("Enables a rapid prototyping approach to development" 0))
  (1 ("Fully object oriented language" 0))
  (1 ("System based on revolutionary components" 0))
  (1 ("Object oriented database fully integrated with the language" 0))
  (1 ("Full range of teamwork tools" 0))
  (1 ("Extremely sophisticated, integrated development environment" 0))
  (1 ("Execution speed of a natively compiled language" 0))
  (1 ("Highly generic framework easily portable to Linux, Unix and Macintosh" 0))
  (1 ("Extremely simple language that can be mastered by new programmers in record time" 0))
  (0)
  (Heading3 ("What's Next" Heading3))
  (1 ("Finish optimizing the Jazz compiler" 0))
  (1 ("Build a Web browser plugin or ActiveX control" 0))
  (1 ("Add optional C++ / Java syntax to Jazz" 0))
  (2 ("Mainly for end user scripting" 0))
  (1 ("Object-oriented data access system" 0))
  (1 ("Open the language through meta-classes" 0))
  (2 ("Symbolic definition of accessors" 0))
  (2 ("Symbolic definition of event handling code" 0))
  (1 ("Interface to the .NET platform" 0))
  (1 ("Port to Linux / Unix" 0))
  (1 ("Port to Mac OS X" 0))
  (0)
  (0)
  (Heading1 ("MetaScoop" Heading1))
  (Heading0)
  (Heading0 ("Powering Next Generation Software" 0))
  (Heading0)
  (Heading0)
  (Heading0)
  (Heading0)
  (Heading0 ("Ce que vous pouvez faire, ou rêvez de pouvoir faire, mettez vous-y. L'audace a du génie, du pouvoir et de la magie." 0))
  (Heading0 ("-- Goethe" 0))
  (Heading0)
  (Heading3 ("Overview" Heading3))
  (15 ("Who is MetaScoop?" 0))
  (5 ("Founded in May 1999 by Guillaume Cartier and Francine Rioux" 0))
  (5 ("Started its commercial activities in 2003" 0))
  (5 ("Now composed of a talented team of around 8 persons ranging from partial to full time" 0))
  (Heading0)
  (Heading3 ("Its Mission" Heading3))
  (15 ("Create a commercially focussed company around the Jazz platform" 0))
  (15 ("Promote the use of Lisp based languages" 0))
  (5 ("Not by trying to convince people of their advantages" 0))
  (5 ("By creating and commercializing revolutionary products that would almost have been impossible to develop using main stream languages (time, cost, feasibility, &)" 0))
  (15 ("Generate the wealth to attain this dream (and others)" 0))
  (15 ("Bring back joy to programming!" 0))
  (Heading0)
  (Heading3 ("Products and Partnerships" Heading3))
  (15 ("Already 3 partnerships with key companies in various domains of activity" 0))
  (15 ("2 commercial products" 0))
  (15 ("4 products developed for clients" 0))
  (0)
  (0)
  (Heading1 ("Jazz" Heading1))
  (0)
  (Heading3 ("Some Myths" Heading3))
  (1 ("Lisp is not good for GUIs" 0))
  (1 ("Lisp applications are big" 0))
  (1 ("Lisp is slow" 0))
  (1 ("Lisp is not good for business software" 0))
  (0)
  (Heading3 ("At A Glance" Heading3))
  (1 ("Develops software faster" 0))
  (1 ("Creates code that is more reusable" 0))
  (1 ("Creates code that contains less bugs" 0))
  (1 ("Handles the complexity of modern large scale projects" 0))
  (1 ("Creates smaller source code" 0))
  (1 ("Enables iterative methodology because code changes are simple to do" 0))
  (0)
  (Heading3 ("At A Glance (to rephrase)" Heading3))
  (7 ("Java for its clean object-oriented system" 0))
  (7 ("VB for its powerful IDE and Debugger" 0))
  (7 ("Perl for the ease of use of an interpreter" 0))
  (7 ("C++ for its performance and low level access" 0))
  (0)
  (Heading3 ("Related to Business" Heading3))
  (1 ("Quick adaptation to market changes " 0))
  (1 ("Keeps risks to a minimum in volatile markets" 0))
  (1 ("Excellent positioning for emerging markets" 0))
  (0)
  (Heading3 ("Propaganda" Heading3))
  (1 ("I encourage people to write as many parts of their programs in C++ as they like. In fact, the language has been designed to have every facility necessary for easy C++ integration. Contrary to Java that as a 'We are the only solution' attitude, Jazz targets application and will *never* compete C++ for system programming." 0))
  (1 ("Add new features 10 times faster than the competition" 0))
  (1 ("Problems with existing solutions: Java is very slow and does not have a native look and feel" 0))
  (1 ("MFC is very powerful but very complex and also lacking in RAD and abstraction capabilities" 0))
  (1 ("VB has a great RAD and a great debugger but the language is so primitive as to make it unusable for anything else but very simple projects" 0))
  (1 ("Jazz is natively compiled so it is very fast" 0))
  (1 ("It is pure Windows so it has native look and feel. Being pure Windows also makes it extremely simple to learn for Windows programmers" 0))
  (1 ("The Jazz language is extremely high level with all the abstraction necessary to handle large projects. One very good example of a complex software developed in Jazz is the Jazz IDE itself" 0))
  (1 ("Jazz has an RAD and debugger even more powerful than VB" 0))
  (1 ("Any language and IDE is a big leap of faith. If any major problem or limitation occurs during development, you are stuck. With Jazz, there absolutely cannot be any unsolvable problem as you have complete access to every level of development." 0))
  (1 ("Jazz is a power user language" 0))
  (1 ("Using a build process instead of separetely compiling files enables much more efficient code to be generated." 0))
  (0)
  (0)
  (Heading1 ("Language" Heading1))
  (Heading1)
  (Heading3 ("Clean Language" Heading3))
  (7 ("Designed 100% clean from the ground up" 0))
  (7 ("Fully object-oriented even in the C++ kernel" 0))
  (7 ("Everything is made open to user code" 0))
  (7 ("Open access to Windows APIs" 0))
  (7 ("Short learning curve for programmers" 0))
  (7 ("Time to implement or modify features is short" 0))
  (7 ("Inner classes implemented in 2 weeks" 0))
  (7 ("Full COM interface implemented in a month" 0))
  (7 ("Used for complex and large scale projects" 0))
  (Heading1)
  (Heading3 ("Code Reuse" Heading3))
  (7 ("Up to 99% for code" 0))
  (7 ("Reuse is also possible for a large category of graphical user interfaces" 0))
  (Heading1)
  (Heading3 ("Code Reuse for MetaScoop" Heading3))
  (7 ("Here explain how every project augments the Jazz library because of its great capacity for code reuse" 0))
  (Heading1)
  (Heading3 ("Less Source Code Needed" Heading3))
  (Default ("(method (filter-properties properties)" 0))
  (Default ("  (collect-if display-property? properties))" 0))
  (Default ("Vector filterProperties(Vector properties)" 0))
  (Default ("{" 0))
  (Default ("	Vector result = new Vector();" 0))
  (Default ("	Enumeration enum = properties.elements();" 0))
  (Default ("	while (enum.hasMoreElements())" 0))
  (Default ("	{" 0))
  (Default ("		Property property = (Property) enum.nextElement();" 0))
  (Default ("		if (displayProperty(property))" 0))
  (Default ("		    result.addElement(property);" 0))
  (Default ("	}" 0))
  (Default ("	return result;" 0))
  (Default ("}" 0))
  (Default)
  (Heading3 ("Domains of Application" Heading3))
  (1 ("Desktop Applications" 0))
  (1 ("Web Application" 0))
  (1 ("Strategy Games" 0))
  (1 ("Project Management" 0))
  (1 ("Prototyping" 0))
  (0)
  (Heading3 ("Empowers Domain Experts" Heading3))
  (1 ("Domain experts can use the software visual builders to build the software themselves" 0))
  (1 ("Reduces drastically the costly knowledge transfer between domain experts and implementation team" 0))
  (1 ("People in their own domain of expertise" 0))
  (8 ("Conceptor (domain expert)" 0))
  (8 ("Programmer" 0))
  (8 ("Graphist" 0))
  (8 ("Elaborate..." 0))
  (Heading1)
  (Heading3 ("Multi Language" Heading3))
  (1 ("Jazz" 0))
  (1 ("Scheme (work in progress)" 0))
  (1 ("C++" 0))
  (2 ("Built from the ground up to integrate seamlessly with C++ code" 0))
  (1 ("Java (work in progress)" 0))
  (2 ("Call any Java code directly from Jazz using the Jazz syntax transparently." 0))
  (2 ("Develop full-fledged Java classes using the Jazz programming language. The resulting Java class can either be fully compiled into optimized C++ or interpreted by the Jazz interpreter for full debugging capabilities." 0))
  (1 ("COM" 0))
  (9)
  (Heading3 ("Multi Platform" Heading3))
  (1 ("Windows" 0))
  (2 ("Native Windows interface" 0))
  (1 ("Unix (work in progress)" 0))
  (1 ("Macintosh (work in progress)" 0))
  (0)
  (Heading3 ("Scheme and Common Lisp Roots" Heading3))
  (1 ("Jazz has its roots in Scheme for its purity of language and concepts" 0))
  (1 ("Jazz also has its roots in Common Lisp for its extensive library and many useful concepts like :" 0))
  (2 ("Multiple values" 0))
  (2 ("Logical pathnames" 0))
  (2 ("User extensible readtable" 0))
  (2 ("Formatted output" 0))
  (2 ("Generic sequence functions" 0))
  (2 ("Loop iteration macro (actually more Jonathan Amsterdam's iterate macro)" 0))
  (2 ("..." 0))
  (Heading3)
  (Heading3 ("Object-Oriented" Heading3))
  (7 ("Classes" 0))
  (7 ("Interfaces" 0))
  (7 ("Packages" 0))
  (7 ("Metaclasses" 0))
  (7 ("Multi dispatch" 0))
  (7 ("Inner classes" 0))
  (7 ("public / protected / private" 0))
  (7 ("chained methods" 0))
  (10)
  (Heading3 ("Metaclasses" Heading3))
  (7 ("Makes the language much cleaner" 0))
  (7 ("The same initialize method used to initialize new objects is used to initialize new classes" 0))
  (7 ("Enabled an extremely clean and simple RMI implementation" 0))
  (7 ("Makes factory classes unnecessary" 0))
  (7 ("(class X (field meta f ...)) has exactly the same semantics as" 0))
  (7 ("(class MX (field f ...)) where MX is the class of the class X" 0))
  (7 ("In Jazz, as a design decision, a class and it metaclass are both defined in the same file. This simplifies metaclass design and ensures that the following always holds true for every class X :" 0))
  (11 ("(type-ascendant (class-of X)) = (class-of (type-ascendant X))" 0))
  (11 ("i.e. the inheritance hierarchy of metaclasses follows the inheritance hierarchy of regular classes" 0))
  (0)
  (Heading3 ("Multi Dispatch" Heading3))
  (12 ("Generic functions" 0))
  (12 ("Dispatch on the dynamic of multiple parameters" 0))
  (10)
  (Heading3 ("Primitive Types" Heading3))
  (7 ("List and pair" 0))
  (7 ("Boolean" 0))
  (7 ("Character" 0))
  (7 ("Symbol" 0))
  (7 ("Integer" 0))
  (7 ("Real" 0))
  (7 ("Vector" 0))
  (7 ("String" 0))
  (7 ("Array" 0))
  (7 ("Hashtable" 0))
  (7 ("Iterator" 0))
  (Heading3)
  (Heading3 ("Lists" Heading3))
  (Heading3)
  (Heading3 ("Sequences" Heading3))
  (Default)
  (Heading3 ("Iteration Framework" Heading3))
  (Heading3)
  (Heading3 ("Symbols" Heading3))
  (Heading3)
  (Heading3 ("Functions" Heading3))
  (12 ("Functions are full featured objects and can be manipulated as any other objects" 0))
  (12 ("Functions are first order objects in Jazz" 0))
  (12 ("They can be passed as parameters, stored in variables, ..." 0))
  (Heading3)
  (Heading3 ("Generic Functions" Heading3))
  (12 ("Jazz supports generic functions where behavior can be incrementally added via independently defined methods" 0))
  (Heading3)
  (Heading3 ("Macros" Heading3))
  (12 ("Jazz has a full featured macro system that is completely integrated with the IDE" 0))
  (Heading3)
  (Heading3 ("Types" Heading3))
  (12 ("Typeless language with support for optional types" 0))
  (12 ("Approches the speed of fully types languages" 0))
  (Heading3)
  (Heading3 ("Parameters" Heading3))
  (1 ("Mandatory" 0))
  (1 ("Optional" 0))
  (1 ("Keyword" 0))
  (4 ("(new Button :title \"Open Database\"" 0))
  (4 ("            :position {Point 50 100}" 0))
  (4 ("            :size {Dimension 150 24}" 0))
  (4 ("            :font {Font :name Ansi-Var})" 0))
  (0)
  (Heading3 ("Interpreted Language" Heading3))
  (12 ("One testimonial to the astonishing speed of development of interpreted languages is the short time it took (~ 1 person year) to develop the complete Jazz IDE (Jedi)" 0))
  (12 ("Never wait for compilation" 0))
  (12 ("Interpreted languages encourage a better method of programming" 0))
  (8 ("Better code quality" 0))
  (8 ("Less time spent debugging complex bugs" 0))
  (8 ("Test more often and so drastically reduce debugging time" 0))
  (Heading3)
  (Heading3 ("Dynamic Language" Heading3))
  (12 ("Dynamic types" 0))
  (12 ("Jazz source code can be dynamically modified while the application is running enabling much faster turn around time for the developer." 0))
  (12 ("Even designer forms can be dynamically modified!" 0))
  (Heading3)
  (Heading3 ("Typeless Language" Heading3))
  (12 ("Speed of development" 0))
  (12 ("Makes the language cleaner and simpler" 0))
  (12 ("Enables much greater code reuse than with typed languages" 0))
  (12 ("Made possible by a revolutionary breakthrough that gave Jazz" 0))
  (8 ("The flexibility of typeless languages" 0))
  (8 ("The execution speed of typed languages" 0))
  (Heading3)
  (Heading3 ("Symbolic Language" Heading3))
  (12 ("List manipulation" 0))
  (8 ("The list structure is very flexible and enables treating code as data and vice versa" 0))
  (12 ("Functions can be passed as parameters" 0))
  (12 ("Symbolic reader enables simple implementation of complex data" 0))
  (12 ("Full language introspection to the real runtime (i.e. full functional) objects" 0))
  (Heading3)
  (Heading3 ("Interpreted and Compiled Language" Heading3))
  (12 ("Interpreted and compiled classes can inherit freely from one another" 0))
  (Heading3)
  (Heading3 ("Scriptable Software" Heading3))
  (12 ("All software created with Jazz automatically has the option of being scriptable to the end user" 0))
  (12 ("The scripting language is Jazz itself making it extremely powerful for the end user" 0))
  (12 ("In other systems, you have to develop your own scripting language or build a complex interface to VBA" 0))
  (Heading3)
  (Heading3 ("Interpreter / Compiler" Heading3))
  (12 ("Interpreted and compiled code can coexist tranparentely" 0))
  (12 ("The interpreted code has exactly the same semantics has the compiled code" 0))
  (8 ("An interpreted application will have access to exactly the same classes that the compiled code would" 0))
  (Heading3)
  (Heading3 ("Fast Language" Heading3))
  (12 ("Execution Speed of a Natively Compiled Language" 0))
  (12 ("Jazz has the C++ like constructs necessary to build optimal software (here put an example of with)" 0))
  (Heading3)
  (Heading3 ("Memory Management" Heading3))
  (12 ("Garbage collector" 0))
  (8 ("Incremental mark&sweep garbage collector" 0))
  (8 ("The approach used at the kernel level results in an extremely robust memory manager" 0))
  (Heading3)
  (Heading3 ("Exception System" Heading3))
  (12 ("Object-oriented" 0))
  (Heading3)
  (Heading3 ("Formatted Output" Heading3))
  (12 ("Formatted output in Jazz is loosely based on Common Lisp's format" 0))
  (Heading3)
  (Heading3 ("Reader" Heading3))
  (12 ("Classes can define custom object-oriented reader extensions" 0))
  (12 ("A symbolic reader enables sophisticated data representations to be easily defined" 0))
  (0)
  (0)
  (Heading1 ("Platform" Heading1))
  (Heading1)
  (Heading2 ("Development" Heading2))
  (Heading1)
  (Heading3 ("Component System" Heading3))
  (12 ("Design can be done at the class level instead of at the instance level" 0))
  (12 ("Enables a much larger part of the code logic to reside into databases" 0))
  (12 ("Bug free code" 0))
  (12 ("Easy to modify visually" 0))
  (12 ("Complete integration of the programming and visual metaphors" 0))
  (10)
  (Heading3 ("Inheritance and Composition" Heading3))
  (Heading3 ("Unifies inheritance and composition" 0))
  (7 ("Object-Oriented / Component Based" 0))
  (7 ("Inheritance / Composition" 0))
  (7 ("Is / Has" 0))
  (10)
  (7 ("Object" 0))
  (11 ("Animal" 0))
  (13 ("Dog" 0))
  (13 ("Cat" 0))
  (10)
  (7 ("Dog" 0))
  (11 ("Leg" 0))
  (11 ("Leg" 0))
  (11 ("Leg" 0))
  (11 ("Leg" 0))
  (11 ("Head" 0))
  (11 ("Body" 0))
  (11 ("Tail" 0))
  (Heading3)
  (Heading3 ("Information Management" Heading3))
  (12 ("Represents a huge proportion of all IT software" 0))
  (12 ("Definition of the object-oriented database" 0))
  (12 ("Definition of the object-oriented classes" 0))
  (12 ("Persistence code" 0))
  (12 ("XML Integration" 0))
  (12 ("User Interface" 0))
  (8 ("Classification" 0))
  (8 ("Indexes" 0))
  (8 ("Searches" 0))
  (Heading3)
  (Heading3 ("Object-Oriented Databases" Heading3))
  (12 ("Used extensively in the IDE" 0))
  (8 ("Favorites" 0))
  (8 ("Preferences" 0))
  (8 ("Documentation" 0))
  (8 ("Projects" 0))
  (8 ("Visual Designer" 0))
  (12 ("Hierarchycal" 0))
  (12 ("Unified with classes" 0))
  (12 ("Human readable format like XML" 0))
  (12 ("Automatic GUI interface for data entry" 0))
  (12 ("Used for small to medium size local databases" 0))
  (12 ("Do not incur the huge development overhead needed by a relational to OO mapping" 0))
  (Heading3)
  (Heading3 ("Black and White Boxes" Heading3))
  (12 ("Talk about how Jazz encourages a White box approach also" 0))
  (8 ("Better code quality" 0))
  (8 ("Better reuse in the future" 0))
  (8 ("Code more maintainable" 0))
  (Heading3)
  (Heading3 ("Branch System" Heading3))
  (12 ("Any component can be given a tree of branches" 0))
  (Heading3)
  (Heading3 ("Scaling" Heading3))
  (12 ("Any view can be scaled independently of other views" 0))
  (Heading3)
  (Heading3 ("Printing" Heading3))
  (1 ("Print Layout" 0))
  (1 ("Print Preview" 0))
  (Heading3)
  (Heading3 ("Licensing" Heading3))
  (Heading3)
  (Heading3 ("RMI" Heading3))
  (12 ("Any class can be remote without any code" 0))
  (12 ("A single remote modifier tells Jazz which methods should be made remoteable" 0))
  (Heading3)
  (Heading3 ("Relation Database Access" Heading3))
  (Heading3)
  (Heading3 ("Java Parser" Heading3))
  (Heading3)
  (Heading3 ("XML" Heading3))
  (Heading3)
  (Heading3 ("XSL" Heading3))
  (Heading3)
  (Heading3 ("Text" Heading3))
  (Heading3)
  (Heading3 ("Formatted Text" Heading3))
  (Heading3)
  (Heading3 ("Tree" Heading3))
  (Heading3)
  (Heading3 ("Editor" Heading3))
  (1 ("Edit definitions" 0))
  (1 ("Edit callers" 0))
  (1 ("Browser metaphor navigation" 0))
  (1 ("Syntax coloring" 0))
  (1 ("Textual macro recording" 0))
  (1 ("Mouse copying" 0))
  (1 ("Unlimited undo / redo" 0))
  (1 ("Clipboard stack" 0))
  (1 ("Customisable code completion" 0))
  (1 ("Chapters browser" 0))
  (1 ("Definitions browser" 0))
  (1 ("Compare to saved" 0))
  (Heading3)
  (Heading3 ("Code Navigation" Heading3))
  (12 ("Definitions" 0))
  (12 ("References" 0))
  (8 ("Multiple levels inside the search results" 0))
  (12 ("Back / Forward navigation" 0))
  (12 ("History of code navigation" 0))
  (Heading3)
  (Heading3 ("Event system" Heading3))
  (12 ("Minimize component coupling" 0))
  (Heading3)
  (Heading3 ("View Framework" Heading3))
  (12 ("Highly Generic" 0))
  (12 ("Tree" 0))
  (8 ("Unifies Trees and Lists" 0))
  (8 ("Any view can be used for cells" 0))
  (12 ("Menus are views" 0))
  (12 ("Complete windowing system" 0))
  (8 ("Doesn't use poor and buggy Windows controls" 0))
  (8 ("Would port easily to Linux / Unix" 0))
  (12 ("Maybe an example with the Views class..." 0))
  (Heading3)
  (Heading3 ("Layouts" Heading3))
  (Heading3)
  (Heading3 ("Workspaces" Heading3))
  (1 ("Workspaces are used to organize complex applications windows" 0))
  (1 ("Based on a flexible host / hosted metaphor where any view can be hosted in any of the following hosts :" 0))
  (2 ("Frame" 0))
  (2 ("Pallete" 0))
  (2 ("Docked" 0))
  (2 ("Dialog" 0))
  (2 ("Toolbar" 0))
  (2 ("Tooltip" 0))
  (Heading3)
  (Heading3 ("Threads" Heading3))
  (12 ("Multi-threaded" 0))
  (Heading3)
  (Heading3 ("Zip File Access" Heading3))
  (1 ("Create and write to a new zip file" 0))
  (1 ("Read a zip file's content" 0))
  (Heading3)
  (Heading3 ("Windows Interface" Heading3))
  (1 ("Access to Windows API all from Lisp" 0))
  (Heading3)
  (Heading3 ("Scripting" Heading3))
  (1 ("All Jazz applications can be made scriptable via Jazz itself in interpreted mode" 0))
  (0)
  (Heading2 ("Deployment" Heading2))
  (Heading3)
  (Heading3 ("Mutli User" Heading3))
  (12 ("Every Jazz application can be made multi-user" 0))
  (8 ("In a multi-user application, every user will have its own personal copy of :" 0))
  (14 ("Preferences" 0))
  (14 ("Favorites" 0))
  (14 ("Connections" 0))
  (14 ("User code" 0))
  (14 ("..." 0))
  (Heading3)
  (Heading3 ("Configuration" Heading3))
  (12 ("Many levels of configuration are available for deployed applications :" 0))
  (8 ("Settings" 0))
  (8 ("Command line arguments" 0))
  (8 ("Properties" 0))
  (8 ("Preferences" 0))
  (Heading3)
  (Heading3 ("Crash Handler" Heading3))
  (1 ("Even once deployed at a client site, any software failure in a Jazz application will be trapped by the Jazz kernel and a complete process snapshot will be saved to a crash file" 0))
  (1 ("This crash file will contain useful debugging information, including the complete stack state of every thread" 0))
  (1 ("Jazz can later on be used to visualize the code stack exactly as if the failure occured live" 0))
  (2 ("Importantly, this feature does not require that any debugging information be shipped with the deployed application" 0))
  (Default)
  (0)
  (Heading1 ("IDE" Heading1))
  (Heading1)
  (7 ("Built entirely in Jazz" 0))
  (Heading3)
  (Heading3 ("Multi Language" Heading3))
  (1 ("Jazz" 0))
  (1 ("Scheme" 0))
  (1 ("C++" 0))
  (1 ("Java" 0))
  (Heading3)
  (Heading3 ("Search and Replace" Heading3))
  (1 ("Multiple search / replace" 0))
  (1 ("Preserve case" 0))
  (1 ("Play recording on replace" 0))
  (Heading3)
  (Heading3 ("Code Debugger" Heading3))
  (1 ("Local" 0))
  (2 ("Break Loop" 0))
  (1 ("Remote" 0))
  (1 ("Break" 0))
  (1 ("Step over / into / out" 0))
  (1 ("Tooltip for variable value" 0))
  (Heading3)
  (Heading3 ("View Debugger" Heading3))
  (12 ("Easy access via a single keystroke to many debugging tools related to views" 0))
  (8 ("Debug" 0))
  (14 ("make the selected view and all related views accessible via global variables" 0))
  (8 ("Describe" 0))
  (14 ("send a detailled description of the selected view to the console" 0))
  (8 ("Edit" 0))
  (14 ("edit the source code of the selected view" 0))
  (Heading3)
  (Heading3 ("Visual Designer" Heading3))
  (12 ("Design classes visually" 0))
  (12 ("Seamless integration with the language" 0))
  (8 ("Text based format" 0))
  (14 ("Changes can be made directly to it" 0))
  (14 ("Any text based tool (search, compare, ...) will interact with it" 0))
  (8 ("Inside the class definition" 0))
  (8 ("No code generated" 0))
  (Heading3)
  (Heading3 ("No Code Generation" Heading3))
  (12 ("Code generation is bad in the long run. It is anti object-oriented as it boils down to copy-pasting code!" 0))
  (12 ("Jazz replaces code generation by usage of powerful object-oriented databases" 0))
  (Heading3)
  (Heading3 ("Build System" Heading3))
  (1 ("Compiler" 0))
  (2 ("Compiles into natural optimized C++ code" 0))
  (1 ("Class modification never forces recompilation of another class" 0))
  (Heading3)
  (Heading3 ("Console" Heading3))
  (12 ("Syntax coloring of results" 0))
  (12 ("Previous / next expression navigation" 0))
  (12 ("Many variables giving easy access to :" 0))
  (8 ("Last result" 0))
  (8 ("Debugged view, hosted, host, user data, ..." 0))
  (8 ("..." 0))
  (12 ("Easy access to any object displayed (thanks Marc!)" 0))
  (12 ("A user extensible command mechanism" 0))
  (Heading3)
  (Heading3 ("Documentation" Heading3))
  (12 ("Documentation editor" 0))
  (12 ("Stored in an object-oriented database" 0))
  (8 ("More flexible" 0))
  (8 ("No code clutter as with comments based approaches like javadoc" 0))
  (8 ("Syntax coloring to indicate documented parts" 0))
  (8 ("HTML documentation tooltips" 0))
  (8 ("Single key access to the documentation editor" 0))
  (Heading3)
  (Heading3 ("Groupware" Heading3))
  (1 ("Compare directories" 0))
  (1 ("Compare files" 0))
  (1 ("Compare databases" 0))
  (1 ("Roaming support" 0))
  (1 ("Source control" 0))
  (2 ("Vss (Visual Source Safe)" 0))
  (2 ("Jsc (Jazz Source Control) (work in progress)" 0))
  (2 ("Clear Case (work in progress)" 0))
  (Heading3)
  (Heading3 ("Favorites" Heading3))
  (Heading3)
  (Heading3 ("Preferences" Heading3))
  (Heading3)
  (Heading3 ("Profiler" Heading3))
  (12 ("A very low overhead profiler for the Jazz language" 0))
  (9)
  (Heading3 ("Class Browser" Heading3))
  (Heading3)
  (Heading3 ("Thread Manager" Heading3))
  (Heading3)
  (Heading3 ("Event Spy" Heading3))
  (Heading3)
  (Heading3 ("Log Viewer" Heading3))
  (1 ("A log viewer for the log system" 0))
  (1 ("Using the log system, any of these can be logged for later viewing :" 0))
  (2 ("Title" 0))
  (2 ("Text, plain or formatted" 0))
  (2 ("Properties" 0))
  (2 ("Stack state" 0))
  (2 ("Graphical state of a view" 0))
  (2 ("Can also be user expanded to log any information" 0))
  (1 ("Logs can also be made into a hierarchy for easier retrieval" 0))
  (Heading3)
  (Heading3 ("Memory Inspector" Heading3))
  (Heading3)
  (Heading3 ("Sql Explorer" Heading3))
  (0)
  (Heading3 ("Validation Suites" Heading3))
  (1 ("Validation suites for the Jazz language" 0))
  (Default)
  (Heading3 ("Smoker Tests" Heading3))
  (0)
  (0)
  (Heading1 ("Applications" Heading1))
  (Heading1)
  (Heading3 ("Jedi" Heading3))
  (12 ("The Jazz Integrated Development Environment" 0))
  (12 ("Built entirely with Jazz" 0))
  (12 ("All development done using Jedi itself" 0))
  (8 ("Up to the standards of the creators of Jazz" 0))
  (8 ("Much more powerful IDE than others who rely on remote user feedback to evolve" 0))
  (8 ("An endless source of high quality code samples" 0))
  (Heading3)
  (Heading3 ("Setup" Heading3))
  (12 ("An Install / Uninstall program (work in progress)" 0))
  (12 ("Jazz comes with all the classes needed to build sophisticated Install / Uninstall programs" 0))
  (Heading3)
  (Heading3 ("MetaModeler" Heading3))
  (12 ("An extremely sophisticated database modeling application" 0))
  (Heading3)
  (Heading3 ("Sorcerer" Heading3))
  (12 ("A complete consultant's toolbox" 0))
  (Heading3)
  (Heading3 ("Pricing Rules System" Heading3))
  (12 ("A completely functional prototype for a pricing system based on rules created via a visual editor" 0))
  (Heading3)
  (Heading3 ("Mapping Companion" Heading3))
  (12 ("An application to visual design mappings" 0))
  (12 ("This first version currently targets mapping Java entities by generating Java code that implements the mapping" 0))
  (Default)
  (Heading3 ("Diablo" Heading3))
  (1 ("A simple video game" 0))
  (Default))}
