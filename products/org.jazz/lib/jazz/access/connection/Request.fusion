;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Database Requests
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2007
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.access.connection.Request jazz


(import (jazz.access)
        (jazz.library)
        (jazz.utilities))


(class Request extends Object
  
  
  (slot connection)
  
  
  (method (initialize con)
    (nextmethod)
    (set! connection con))
  
  
  (method virtual (new-recordset request . rest)
    )
  
  
  (method public (load-request request . rest)
    (bind-keywords ((table null) (name null) (max-load true) (data-class null)) rest
      (with-closed ((recordset (new-recordset request :max-load max-load)))
        (unless (= (get-state~ recordset) 'closed)
          (let ((table (either table (new Data-Table :request request))))
            (when name
              (set-name~ table name))
            (load-table~ recordset table :max-load max-load :data-class data-class)
            table)))))
  
  
  (method public (load-multirequest request . rest)
    (bind-keywords ((max-load true) (data-classes null)) rest
      (if (not (supports-multirequests?~ connection))
          (list (load-request request :max-load max-load))
        (with-closed ((recordset (new-recordset request :max-load max-load)))
          (let ((tables (new List-Factory)))
            ;; this double test is a bit strange but it will do for now!
            (while (and (opened?~ recordset) (= (get-state~ recordset) 'open))
              (let ((table (new Data-Table :request request)))
                (if (null? data-classes)
                    (load-table~ recordset table :max-load max-load)
                  (let ((data-class (car data-classes)))
                    (set! data-classes (cdr data-classes))
                    (load-table~ recordset table :max-load max-load :data-class data-class)))
                (put~ tables table))
              (next-recordset!~ recordset))
            (get-output~ tables))))))
  
  
  (method public (load-rows request table . rest)
    (bind-keywords ((max-load true)) rest
      (with-closed ((recordset (new-recordset)))
        (let ((columns (get-columns~ recordset)))
          (bind-values (rows missing?) (get-rows~ recordset table :max-load max-load)
            (values columns rows missing?))))))
  
  
  ;;;
  ;;;; Execute
  ;;;
  
  
  (method public virtual (execute command)
    )))
