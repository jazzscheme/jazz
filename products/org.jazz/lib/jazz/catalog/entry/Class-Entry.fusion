;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Class Entry
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2007
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.catalog.entry.Class-Entry jazz


(import (jazz.catalog)
        (jazz.library)
        (jazz.utilities))


(class Class-Entry extends Unit-Entry
  
  
  (slot implements)  ;; qualified
  
  
  @convert-literal
  (method meta (construct-literal context modifiers name extends implements line column . definitions)
    (new self modifiers null name extends implements line column definitions))
  
  
  (method (initialize modifiers qualified name extends implements line column definitions)
    (nextmethod modifiers qualified name extends line column definitions)
    (set! [implements self] implements))
  
  
  (method public (get-implements)
    implements)
  
  
  (method public (set-implements value)
    (set! implements value))
  
  
  (method (print-catalog level printer)
    (format printer "{%}{_ :v}~{{s} {s} {s} {s} {s} {s} {s}"
            (* level 2)
            (type-name (class-of self))
            modifiers name extends implements line column)
    (for-each (function dynamic (definition)
                (print-catalog~ definition (+ level 1) printer))
              definitions)
    (format printer "}"))
  
  
  (method (get-image)
    {Bitmap-Resource "Class"})
  
  
  ;;;
  ;;;; Indexes
  ;;;
  
  
  (method (update-indexes definitions-index references-index)
    (nextmethod definitions-index references-index)
    (for-each (function dynamic (qualified)
                (update-index references-index (last qualified)))
              implements))


  ;;;
  ;;;; Browse
  ;;;
  
  
  (method (insert-interfaces tree father)
    (insert-interfaces-list tree father "Implemented interfaces" implements))))
