;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Compiler Helper
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Dominique Boucher.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2007
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library Compiler-Helper jazz


@WAIT (
  
  
  (definition type-annotations   (new Annotation-Holder))
  (definition mutated-locals     (new Annotation-Holder))
  (definition unused-results     '())
  
  
  ;;;
  ;;;; Type approximations
  ;;;
  
  
  (method (get-type-approximation form)
    ;; TODO: do something special with variables, or at least
    ;; those expressions that we can call expr-typeref on. We
    ;; should not put all the forms in a map
    (let ((approximation (get-annotation~ type-annotations form)))
      (unless (not-null? approximation)
        (set! approximation (new Type-Approximation))
        (set-annotation!~ type-annotations form approximation))
      approximation))
  
  
  (method (add-type form type)
    (let ((approximation (get-annotation~ type-annotations form)))
      (add-type~ approximation type)))
  

  ;;;
  ;;;; Mutated locals
  ;;;
  
  
  (method (get-mutated-locals form)
    (either (get-annotation~ mutated-locals form)
            '()))
  
  
  (method (set-mutated-locals form variables)
    (when (not-null? variables)
      (format :console "{%} MUTATIONS BELOW {s}: " form)
      (for-each (function dynamic (var) 
                  (format :console "{%}  - {s}" var))
                variables)
      (set-annotation!~ mutated-locals form variables))
    variables)
  
    
  ;;;
  ;;;; Unused result
  ;;;
  
  
  (method (result-unused? form)
    (memq? form unused-results))
  
  
  (method (add-form-with-unused-result form)
    (when (not (memq? form unused-results))
      (set! unused-results (cons form unused-results)))))
)