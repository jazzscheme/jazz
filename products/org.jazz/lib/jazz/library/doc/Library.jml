;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Library Documentation
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2007
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(<Module-Doc> name: Library
  (<description>
    (<p> "A catch all module for any non-UI class that doesn't belong in another module."))
  (<Section-Doc> title: "Classes"
    (<Class-Doc> name: Point)
    (<Class-Doc> name: Rect)
    (<Class-Doc> name: Dimension)
    (<Class-Doc> name: Branch
      (<description>
        (<p> "A branch is simply a component that encapsulates a form. "
          "This branch can be installed or removed at will. "
          "Branchs can also be hierarchicaly nested. "
          "Thinking about components, you can now give them static shape with a form, or go further and collect some branchs that can be applied to them or go even further and thats the complete flexibility of programming. ")
        (<p>)
        (<p> "With this naming, every thing becomes very clean -> for example the saved searches are branchs of the search that you package (maybe to a file or maybe you are copy pasting them or even drag and dropping them!) to a file and later on unpackage and reinstall in the search! "
          "Seeing it this way really makes it clear that branchs are clearly an outstanding feature of Jazz. ")
        (<p>)
        (<p> "If I can reach a point where everytning is components that can be packaged for saving, copy pasting, ... and all the tools are based on that, I see branches as a concept that will show that a huge portion of the code out there is basically doing branch management stuff without knowing it. ")))
    (<Class-Doc> name: Component
      (<description>
        (<p> "Object-Oriented Databases")
        (<p>)
        (<p> "Inheritance and Composition")
        (<p>)
        (<p> "The Jazz component system unifies the inheritance and composition based programming models.")
        (<p>)
        (<p>
          "The Component class is by far the most fundamental one. "
          "It is the foundation of all the graphical user interface but can also be extremely usefull in non graphical contexes.")
        (<p>)
        (<p> "Components are the result the following design goals:")
        (<node>
          (<span> " Components should be editable by a graphical editor.")
          (<span> " Components should be savable to disk and restorable from disk.")
          (<span> " Components should be hierarchical.")
          (<span> " Components should integrate seamlessly with the object model.")
          (<span> " Components should integrate seamlessly with the programming language.")))
      (<Property-Doc> name: name getter: get-name setter: set-name
        (<description>
          (<p> "Every component can be named. A name must be a symbol or nil. A name of nil represents an anonymous component.")))
      (<Property-Doc> name: parent getter: get-parent setter: set-parent)
      (<Property-Doc> name: children getter: get-children setter: set-children)
      (<Method-Doc> name: find-component parameters: "name"
        (<description>
          (<p> "Returns the child whose name is name. If no such child is found, nil is returned.")))
      (<Method-Doc> name: child parameters: "name"
        (<description>
          (<p> "Returns the child whose name is name. If no such child is found, an error is signaled.")))
      (<Method-Doc> name: install)
      (<Method-Doc> name: conclude)
      (<Method-Doc> name: finish)
      (<Method-Doc> name: prepare)
      (<Method-Doc> name: locate))
    (<Class-Doc> name: Form
      (<description>
        (<p>
          "Forms contain properties. "
          "Each subform can redefine parts of the parent form. "
          "Properties can be added, modified or even removed.")
        (<p>)
        (<p>
          "For example, a class X has two properties, a and b. "
          "The derived class Y change the property a. "
          "The resulting form would contain both a and b, with a being the redefined property.")
        (<p>)
        (<p> "X (a = 2, b = 3) -> Y (a = 5) ---> a = 5, b = 3")
        (<p>)
        (<p> "When a form is created, the base form is loaded, then each modification of the successive branches are applied, up to our final form.")
        (<p>)
        (<p> "A property initialized in a class can be impacted by the class's form and all subsequent form redefinitions in the subclasses.")))
    (<Class-Doc> name: Node
      (<description>
        (<p> "A node is a class that supports dynamic properties")
        (<p>)
        (<node> "An node can optionally be named")
        (<p>
          "Node properties, for efficiency are stored as slots for direct access but can also be accessed in a generic fashion via the "
          (<reference> href: "get-property")
          " method")
        (<p>)))
    (<Class-Doc> name: Element
      (<description>
        (<p> "An element is a node with a hierarchical structure")
        (<p>)))
    (<Class-Doc> name: Exemplar
      (<description>
        (<p> "An Exemplar is a dynamic class whose hierarchy can be modified at runtime")
        (<p>)
        (<node>
          (<span>
            "Exemplars don't have instances"))
        (<node>
          (<span>
            "All properties are fully inherited in the sense that whenever an exemplar is modified, every descendant is automatically updated. "
            "Because the most used operation is by far property access, exemplars have a full internal copy of every property. "
            "To implement inheritance, exemplars also have a list of which properties are owned by the exemplar, "
            "i.e. what properties should not be updated when an ascendant is modified"))
        (<node>
          (<span>
            "Exemplar properties, for efficiency are stored as slots for direct access but they can also be accessed in a generic fashion via the "
            (<reference> href: "get-property")
            " method"))
        (<node>
          (<span>
            "Exemplars are grouped in an "
            (<reference> href: "Exemplar-Domain")
            " which is the domain in which an exemplar name is a valid reference"))
        (<node>
          (<span>
            "An Exemplar can be named and can inherit from another exemplar via its "
            (<code> "base"))))))
    (<Section-Doc> name: Windows
      (<Package-Doc> name: WinGDI)
      (<Package-Doc> name: WinUser)
      (<Package-Doc> name: WinDef)
      (<Package-Doc> name: WinKernel)
      (<Package-Doc> name: WinBase)))
