;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Integrity Violations
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2007
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.library.integrity.Integrity-Violation jazz


(import (jazz.library)
        (jazz.utilities))


(class Integrity-Violation extends Object
  
  
  (slot message)
  (slot branch)
  (slot branch-presentation)
  (slot path)
  (slot path-presentation)
  (slot property)
  
  
  @convert-literal
  (method meta (construct-literal context . rest)
    (apply new self rest))
  
  
  (method (initialize . rest)
    (bind-keywords ((message null) (branch null) (branch-presentation null) (path null) (path-presentation null) (property null)) rest
      (nextmethod)
      (set! [message self] message)
      (set! [branch self] branch)
      (set! [branch-presentation self] branch-presentation)
      (set! [path self] path)
      (set! [path-presentation self] path-presentation)
      (set! [property self] property)))
  
  
  (method (print printer readably)
    (format printer "~{{a} :message {s} :branch {s} :branch-presentation {s} :path {s} :path-presentation {s}}"
            (type-name (class-of self))
            message
            branch
            branch-presentation
            path
            path-presentation))


  ;;;
  ;;;; Access
  ;;;
  
  
  (method public (get-branch)
    branch)
  
  
  (method public (set-branch value)
    (set! branch value))
  
  
  (method public (get-branch-presentation)
    branch-presentation)
  
  
  (method public (set-branch-presentation value)
    (set! branch-presentation value))
  
  
  (method public (get-path)
    path)
  
  
  (method public (set-path value)
    (set! path value))
  
  
  (method public (get-path-presentation)
    path-presentation)
  
  
  (method public (set-path-presentation value)
    (set! path-presentation value))
  
  
  (method public (get-property)
    property)
  
  
  (method public (set-property value)
    (set! property value))


  ;;;
  ;;;; Message
  ;;;
  
  
  (method public virtual (get-message)
    message)


  ;;;
  ;;;; Presentation
  ;;;
  
  
  (method public virtual (get-image)
    {Bitmap-Resource "IntegrityError"})
  
  
  (method public virtual (present-message)
    (get-message))
  
  
  (method public virtual (present-location)
    (let ((location (either path-presentation (get-path~ path))))
      (join location " ")))))
