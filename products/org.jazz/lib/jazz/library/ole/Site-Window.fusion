;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; ActiveX Site Window
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2007
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.library.ole.Site-Window jazz


(import (jazz.library)
        (jazz.utilities))


(class Site-Window extends Window uses (Utilities System COM WinDef WinUser WinGDI WinOLE WinTypes)
  
  
  (property guid initialize {} getter get-guid setter set-guid)
  
  
  (slot site     initialize {})
  (slot embedded initialize {})
  (slot active?  initialize false)
  
  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method (conclude rest)
    (nextmethod rest)
    (destroy-mandatory))
  
  
  (method (size-change size)
    (nextmethod size)
    (resize-embedded size))
  
  
  (method (resize-embedded size)
    (when embedded
      (let ((hwnd (GetWindow~ (coquery embedded IOleWindow))))
        (SetWindowPos hwnd NULL 0 0 [width size] [height size] (bit-or SWP_NOMOVE SWP_NOZORDER SWP_NOACTIVATE)))))
  
  
  (method (destroy)
    (close-embedded)
    (close-site)
    (nextmethod))
  
  
  (method (close-embedded)
    (when embedded
      (Close~ embedded OLECLOSE_SAVEIFDIRTY)
      (corelease embedded)
      (set! embedded null)))
  
  
  (method (close-site)
    (when site
      (corelease site)
      (set! site null)))
  
  
  ;;;
  ;;;; Access
  ;;;
  
  
  (method public (get-guid)
    guid)
  
  
  (method public (set-guid g)
    (set! guid g)
    (create-control guid))
  
  
  (method public (get-site)
    site)
  
  
  (method public (get-embedded)
    embedded)
  
  
  (method public (get-active?)
    active?)
  
  
  ;;;
  ;;;; Site
  ;;;
  
  
  (method public (can-inplace-activate?)
    true)
  
  
  (method public (get-window-context)
    (let ((bounds (new RECT))
          (clip (new RECT))
          (info (new OLEINPLACEFRAMEINFO)))
      (let ((rect (get-client-rect)))
        (set bounds 'left   [left rect])
        (set bounds 'top    [top rect])
        (set bounds 'right  [right rect])
        (set bounds 'bottom [bottom rect]))
      (set clip 'left   0)
      (set clip 'top    0)
      (set clip 'right  32000)
      (set clip 'bottom 32000)
      (set info 'cb (size-of OLEINPLACEFRAMEINFO))
      (set info 'fMDIApp true)
      (set info 'hwndFrame (get-hwnd~ (get-toplevel)))
      (set info 'haccel NULL)
      (set info 'cAccelEntries 0)
      (let ((frame (get-frame)))
        (values (get-site~ (get-toplevel))
                (essay frame (get-site~ frame))
                bounds
                clip
                info))))
  
  
  (method public (on-show-window show?)
    (set! active? show?)
    (invalidate-window))
  
  
  (method public (on-view-change)
    (invalidate-window))
  
  
  ;;;
  ;;;; Control
  ;;;
  
  
  (method public (create-control guid)
    (set! site (conew CSite))
    (setup-site)
    (let ((storage (create-storage)))
      (bind-values (hresult iunknown) (OleCreate guid (unit-guid IOleObject) OLERENDER_DRAW NULL null storage)
        (assert-hresult hresult)
        (set! embedded (cobind iunknown IOleObject))
        (SetClientSite~ embedded site)
        (Advise~ embedded (coquery site IAdviseSink))
        (SetAdvise~ (coquery embedded IViewObject2) DVASPECT_CONTENT 0 (coquery site IAdviseSink))
        (OleSetContainedObject embedded true)
        (SetHostNames~ embedded "Jedi" "Test"))))
  
  
  (method (setup-site)
    ;; wow! this way of getting the object is really ugly!
    (let* ((appl (get-application))
           (factory (find-cofactory~ appl CSite))
           (object (car (cofactory-instances factory))))
      (set-view~ object self)))
  
  
  (method (create-storage)
    (bind-values (hresult storage) (StgCreateDocfile NULL (bit-or STGM_DIRECT STGM_CREATE STGM_READWRITE STGM_SHARE_EXCLUSIVE STGM_DELETEONRELEASE) 0)
      (assert-hresult hresult)
      storage))
    
  
  (method public (run)
    (OleRun embedded))
  
  
  (method public (get-extent)
    (let ((size (new SIZE)))
      (GetExtent~ embedded DVASPECT_CONTENT size)
      (new Dimension (get size 'cx) (get size 'cy))))
  
  
  (method public (set-extent s)
    (let ((size (new SIZE)))
      (set size 'cx [width s])
      (set size 'cy [height s])
      (SetExtent~ embedded DVASPECT_CONTENT size)))

  
  ;;;
  ;;;; Verbs
  ;;;
  
  
  (method public (do-verb verb)
    (with ((rect (rect->RECT (get-client-rect))))
      (DoVerb~ embedded verb NULL site 0 (get-hwnd) rect)))
  
  
  (method public (show-verb)
    (do-verb OLEIVERB_SHOW))
  
  
  (method public (open-verb)
    (do-verb OLEIVERB_OPEN))
  
  
  (method public (primary-verb)
    (do-verb OLEIVERB_PRIMARY))
  
  
  (method public (inplace-activate-verb)
    (do-verb OLEIVERB_INPLACEACTIVATE))
  
  
  (method public (ui-activate-verb)
    (do-verb OLEIVERB_UIACTIVATE))

  
  ;;;
  ;;;; Mouse
  ;;;
  
  
  (method (double-click pos)
    (primary-verb))


  ;;;
  ;;;; Drawing
  ;;;

  
  @try
  (method (draw dc paint)
    (when (not (can-inplace-activate?))
      (let* (cr (get-client-rect)))
        (frame-rect~ dc cr (if active? {Color name: Dark-Red} {Color name: Dark-Blue}))
        (when embedded
          (let ((view (coquery embedded IViewObject2)))
            (with ((rect (rect->RECT (inflate-rect cr -1 -1))))
              (Draw~ view DVASPECT_CONTENT -1 NULL NULL NULL (get-hdc~ dc) rect NULL NULL 0))))))))
