;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Storages
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2007
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.library.ole.Storage jazz


(import (jazz.library)
        (jazz.utilities))


(class Storage extends Object uses (Utilities System COM WinDef WinOLE)
  
  
  (method meta public (storage-file? file)
    (succeeded? (StgIsStorageFile (parse~ file))))
  
  
  (method meta public (create-storage-file file . rest)
    (bind-keywords ((mode (bit-or STGM_CREATE STGM_DIRECT STGM_READWRITE STGM_SHARE_EXCLUSIVE))) rest
      (bind-values (hresult storage) (StgCreateDocfile (if file (parse~ file) NULL) mode 0)
        (assert-hresult hresult)
        (new self storage))))
  
  
  (method meta public (open-storage-file file . rest)
    (bind-keywords ((mode (bit-or STGM_DIRECT STGM_READ STGM_SHARE_EXCLUSIVE))) rest
      (bind-values (hresult storage) (StgOpenStorage (parse~ file) NULL mode NULL 0)
        (assert-hresult hresult)
        (new self storage))))
  
  
  (slot handle)
  
  
  (method (initialize hnd)
    (nextmethod)
    (set! handle hnd)
    (destroy-mandatory))
  
  
  (method (destroy)
    (corelease handle)
    (nextmethod))
  
  
  (method public (get-content)
    (with-closed ((enum (EnumElements~ handle 0 NULL 0)))
      (let ((array (new-array STATSTG 1))
            (fact  (new List-Factory))
            (done? false))
        (while (not done?)
          (let ((fetched (Next~ enum 1 array)))
            (if (= fetched 0)
                (set! done? true)
              (let ((statstg (array-ref array 0)))
                (put~ fact statstg)))))
        (get-output~ fact))))))
