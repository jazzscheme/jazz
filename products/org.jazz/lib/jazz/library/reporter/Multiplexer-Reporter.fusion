;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Multiplexer Reporter
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2007
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.library.reporter.Multiplexer-Reporter jazz


(import (jazz.library)
        (jazz.utilities))


(class Multiplexer-Reporter extends Object implements Reporter
  
  
  (slot reporters)
  
  
  (method (initialize reporters)
    (nextmethod)
    (set! [reporters self] reporters))
  
  
  (method (main-reporter)
    (car reporters))
  
  
  (method (section-title title)
    (for-each (function dynamic (reporter)
                (section-title~ reporter title))
              reporters))
  
  
  (method (set-message msg)
    (for-each (function dynamic (reporter)
                (set-message~ reporter msg))
              reporters))
  
  
  (method (user-message fmt . rest)
    (for-each (function dynamic (reporter)
                (apply [user-message reporter] fmt rest))
              reporters))
  
  
  (method (set-range range)
    (for-each (function dynamic (reporter)
                (set-range~ reporter range))
              reporters))
  
  
  (method (set-pos pos)
    (for-each (function dynamic (reporter)
                (set-pos~ reporter pos))
              reporters))
  
  
  (method (delta-pos increment)
    (for-each (function dynamic (reporter)
                (delta-pos~ reporter increment))
              reporters))
  
  
  (method (set-step increment)
    (for-each (function dynamic (reporter)
                (set-step~ reporter increment))
              reporters))
  
  
  (method (step-it)
    (for-each (function dynamic (reporter)
                (step-it~ reporter))
              reporters))
  
  
  (method (set-done)
    (for-each (function dynamic (reporter)
                (set-done~ reporter))
              reporters))
  
  
  (method (disable-cancel)
    (for-each (function dynamic (reporter)
                (disable-cancel~ reporter))
              reporters))
  
  
  (method (cancel-requested?)
    (let ((main (main-reporter)))
      (cancel-requested?~ main)))
  
  
  (method (test-cancelled)
    (let ((main (main-reporter)))
      (test-cancelled~ main)))))
