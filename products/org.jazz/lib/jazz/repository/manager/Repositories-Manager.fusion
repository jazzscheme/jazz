;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Repositories Manager
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2007
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.repository.manager.Repositories-Manager jazz


(import (jazz.jml)
        (jazz.repository)
        (jazz.designer)
        (jazz.process)
        (jazz.literals)
        (jazz.library)
        (jazz.ui)
        (jazz.ui.view)
        (jazz.utilities))


(class Repositories-Manager extends Editor-View implements (Repository-Listener Exit-Listener)


  (form
    (<install>                                 size: {Dimension 650 400} layout-type: border
      (<Layout-View>         name: tools)
      (<Repositories-Editor> name: descendants location: center
        (<!>                 name: scroller    flat?: #t)
        (<!>                 name: tree        show-header?: #f highlight-edited?: #f
          (<!>               name: descendant  title: "Repository" width: 291)))))
  
  
  @convert-external
  (method meta (external-name . rest)
    'repositories-manager)

  
  ;;;
  ;;;; Palette
  ;;;
  
  
  @convert-guest
  (method meta (palette-class)
    Tool-Palette)
  
  
  @convert-guest
  (method meta (palette-icon)
    {Bitmap-Resource "Repositories"})
  
  
  @convert-guest
  (method meta (palette-title)
    "Repositories")
  
  
  ;;;
  ;;;; Docked
  ;;;
  
  
  (method (get-tools)
    (locate 'tools))
  
  
  (method (focus-default)
    (let ((tree (get-tree)))
      (acquire-focus~ tree)))

  
  ;;;
  ;;;; Component
  ;;;
  
  
  (method (get-tree)
    (locate '(descendants tree)))
  
  
  ;;;
  ;;;; Controller
  ;;;


  @convert
  (class Repositories-Manager-Controller extends Editor-View-Controller
    
    
    (method (document-status)
      "Repositories"))


  @convert
  (method (new-controller)
    (new Repositories-Manager-Controller self))

  
  ;;;
  ;;;; Component
  ;;;
  
  
  (method (install rest)
    (nextmethod rest)
    (set-shown?~ (locate-component '(descendants header)) false)
    (set-editor~ (locate 'descendants) self)
    (add-exit-listener~ (get-application) self)
    (add-repository-listener~ Repository self)
    (set-client (get-repositories-preferences~ (get-application))))
  
  
  ;;;
  ;;;; Designer
  ;;;
  
  
  (method (on-designer evt)
    (nextmethod evt)
    (let ((kind (get-kind~ evt)))
      (case kind
        ((:child-remove)
         (let ((child (get-property~ evt :child)))
           (when (is? child Repository-Preferences)
             (remove-preferences~ Repository child)))))))

  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method (resize-center dh dv)
    (size-figure~ (locate 'descendants) dh dv))
  
  
  (method (prepare-exit)
    (when (get-modified?)
      (save)))
  
  
  ;;;
  ;;;; Properties
  ;;;
  
  
  (method protected (edit-repository-properties)
    (let* ((tree (get-tree))
           (row (get-selected-row~ tree))
           (preferences (get-user-data~ row))
           (name (get-name~ preferences))
           (editor (editor-class~ (class-of preferences)))
           (initargs (get-modal~ editor :preferences preferences)))
      (set-properties~ editor designer preferences initargs)
      (reload-preferences~ Repository preferences)
      (remove-every-son~ row)
      (set-state~ row 'dynamic)))
  
  
  ;;;
  ;;;; Update
  ;;;
  
  
  (method protected (update-tree-row tree row)
    (let ((data (get-user-data~ row)))
      (typecase data
        ((Repository-Preferences)
         (let* ((repository (get-repository~ Repository (get-name~ data)))
                (project (new Repository-Moniker repository null)))
           (insert-project project tree row)))
        ((Repository-Moniker)
         (insert-content data tree row)))))
  
  
  (method (insert-content moniker tree row)
    (insert-projects moniker tree row)
    (insert-files moniker tree row))
  
  
  (method (insert-projects moniker tree row)
    (let ((projects (get-content~ moniker :nodes? true :leaves? false)))
      (for-each (function dynamic (project)
                  (insert-project project tree row))
                projects)))
  
  
  (method (insert-project project tree row)
    (let* ((title (get-name~ project))
           (effective-title (if (empty-string? title) "$" title)))
      (add-row~ tree :state 'dynamic :father row :children (list (new Tree-Node :image {Bitmap-Resource "OpenedFolder"} :title effective-title)) :user-data project)))
  
  
  (method (insert-files moniker tree row)
    (let ((children (get-content~ moniker :nodes? false :leaves? true)))
      (for-each (function dynamic (child)
                  (let* ((repository (get-repository~ child))
                         (title (remote->local~ repository (get-name~ child)))
                         (image (get-moniker-image child)))
                    (add-row~ tree :state 'collapsed :father row :children (list (new Tree-Node :image image :title title)) :user-data child)))
                children)))
  
  
  (method (get-moniker-image moniker)
    (with-closed ((item (get-repository-item~ moniker)))
      (case (get-status~ item)
        ((checked-in) {Bitmap-Resource "CheckedIn"})
        ((checked-out) {Bitmap-Resource "CheckedOut"})
        ((checked-out-me) {Bitmap-Resource "CheckedOutMe"}))))
  
  
  (method (update-image file)
    (let* ((repository (find-repository~ Repository file))
           (moniker (new Repository-Moniker repository (file->path~ repository file)))
           (tree (get-tree))
           (row (user-data-row~ tree moniker :test =)))
      (when row
        (let* ((rank (row-rank~ tree row))
               (cell (new Cell rank 0))
               (image (get-moniker-image moniker)))
          (set-image~ (get-cell-data~ tree cell) image)
          (invalidate-cell~ tree cell)))))
  
  
  ;;;
  ;;;; Repository
  ;;;
  
  
  (method (repository-event what repository moniker)
    (case what
      ((:item-status)
       (update-image moniker))))
  
  
  (method (selected-moniker)
    (let* ((tree (get-tree))
           (data (selected-component~ tree)))
      (when (is? data Repository-Moniker)
        data)))
  
  
  (method (selected-project)
    (let ((moniker (selected-moniker)))
      (when (and moniker (get-project?~ moniker))
        moniker)))
  
  
  (method (selected-file)
    (let ((moniker (selected-moniker)))
      (when (and moniker (get-file?~ moniker))
        moniker)))
  
  
  (method (selected-repository/path)
    (let ((moniker (selected-moniker)))
      (values (get-repository~ moniker)
              (get-path~ moniker))))
  
  
  (method (selected-repository/pathname)
    (let* ((moniker (selected-moniker))
           (repository (get-repository~ moniker))
           (pathname (get-pathname~ moniker)))
      (values repository pathname)))
  
  
  (method (selected-repository/file)
    (let* ((moniker (selected-file))
           (repository (get-repository~ moniker))
           (file (get-pathname~ moniker)))
      (values repository file)))
  
  
  (method (moniker->file moniker)
    (with ((item (get-repository-item~ moniker)))
      (get-pathname~ item)))
  
  
  (method protected (add-files-to-selection)
    (let* ((tree (get-tree))
           (row (get-selected-row~ tree))
           (moniker (get-user-data~ row))
           (repository (get-repository~ moniker))
           (path (get-path~ moniker)))
      (add-files-to-project~ repository path)
      (refresh-row tree row)))
  
  
  (method protected (create-project-in-selection)
    (let* ((tree (get-tree))
           (row (get-selected-row~ tree))
           (moniker (get-user-data~ row))
           (repository (get-repository~ moniker))
           (path (get-path~ moniker)))
      (create-project-in-project~ repository path)
      (refresh-row tree row)))
  
  
  (method protected (edit-selection)
    (let ((moniker (selected-file)))
      (when moniker
        (let ((appl (get-application))
              (file (get-pathname~ moniker)))
          (edit-document~ appl file)))))
  
  
  (method protected (get-selection-latest)
    (bind-values (repository file) (selected-repository/file)
      (get-latest~ repository file)))
  
  
  (method protected (detach-selection)
    (bind-values (repository file) (selected-repository/file)
      (detach-file~ repository file)))
  
  
  (method protected (checkout-selection)
    (bind-values (repository file) (selected-repository/file)
      (checkout-file~ repository file)))
  
  
  (method protected (checkin-selection)
    (bind-values (repository file) (selected-repository/file)
      (checkin-file~ repository file)))
  
  
  (method protected (reintegrate-selection)
    (bind-values (repository file) (selected-repository/file)
      (reintegrate-file~ repository file)))
  
  
  (method protected (undo-selection-checkout)
    (bind-values (repository file) (selected-repository/file)
      (undo-checkout-file~ repository file)))
  
  
  (method protected (show-selection-history)
    (bind-values (repository file) (selected-repository/file)
      (show-history~ repository file)))
  
  
  (method protected (show-selection-changes)
    (bind-values (repository file) (selected-repository/file)
      (show-changes~ repository file)))
  
  
  (method protected (delete-selected-item)
    (bind-values (repository path) (selected-repository/path)
        (let* ((tree (get-tree))
               (row (get-selected-row~ tree))
               (father (get-father~ row)))
          (propose-delete~ repository path)
          (select-row tree father)
          (refresh-row tree father))))
  
  
  (method protected (rename-selected-item)
    (bind-values (repository path) (selected-repository/path)
      (let* ((moniker (selected-moniker))
             (new-path (propose-rename~ repository path))
             (new-moniker (new Repository-Moniker repository new-path)))
        (refresh-moniker moniker new-moniker))))
  
  
  (method protected (refresh-selection)
    (let* ((tree (get-tree))
           (row (get-selected-row~ tree)))
      (refresh-row tree row)))
  
  
  (method (refresh-moniker moniker . rest)
    (bind-optionals ((new-moniker null)) rest
      (let* ((tree (get-tree))
             (row (user-data-row~ tree moniker :test =))
             (father (get-father~ row)))
        (unless (get-path~ moniker)
          (unimplemented 'refresh-moniker))
        (refresh-row tree father)
        (when new-moniker
          (select-row tree (user-data-row~ tree new-moniker :test =))))))
  
  
  (method (refresh-row tree row)
    (let ((expanded? (eq? (get-state~ row) 'expanded)))
      (remove-every-son~ row)
      (set-state~ row 'dynamic)
      (when expanded?
        (expand/collapse~ tree row))))
  
  
  (method (select-row tree row)
    (set-single-selection~ tree (row-rank~ tree row)))))
