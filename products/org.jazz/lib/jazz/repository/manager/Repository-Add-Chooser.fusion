;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Repository Add Files Chooser
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2007
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.repository.manager.Repository-Add-Chooser jazz


(import (jazz.jml)
        (jazz.repository)
        (jazz.ui)
        (jazz.literals)
        (jazz.library)
        (jazz.utilities))


(class Repository-Add-Chooser extends View
  

  (property files initialize '() accessors generate)


  (form
    (<install>                                     size: {Dimension 210 316}
      (<Label-View>                  name: invite  title: "Select the files to be added" position: {Point 10 9} size: {Dimension 189 16} font: {Font name: Default-GUI})
      (<Border-View>                               position: {Point 9 30} size: {Dimension 191 246} border-type: edge
        (<Scroller-View>                           hscroll?: #t vscroll?: #t
          (<!>                       name: content layout-type: fill
            (<Tree-View>             name: tree    multiple-selection?: #t portfolio: :icons double-click-handler: {Event-Handler form: on-double-click} return-press-handler: {Event-Handler form: on-return-press} escape-press-handler: {Event-Handler form: on-escape-press}
              (<Tree-Node-Column>    name: model   width: 200 toplevel-controls?: #f)))))
      (<Push-Button>                 name: ok      title: "OK" position: {Point 37 284} size: {Dimension 80 24} action-handler: {Event-Handler :host on-ok} default?: #t)
      (<Push-Button>                 name: cancel  title: "Cancel" position: {Point 121 284} size: {Dimension 80 24} action-handler: {Event-Handler :host on-cancel})))
  

  (method (finish rest)
    (nextmethod rest)
    (let ((tree (locate 'tree)))
      (setup-files tree)
      (acquire-focus~ tree)))

  
  ;;;
  ;;;; Dialog
  ;;;
  
  
  @convert-dialog
  (method meta (dialog-class)
    Add-Chooser-Dialog)
  

  @convert-dialog
  (class meta Add-Chooser-Dialog extends Host-Dialog
    
    
    (form
      (<install> title: "Choose Files" position: {Point 450 300} size: {Dimension 302 120})))

  
  ;;;
  ;;;; Setup
  ;;;

  
  (method (setup-files tree)
    (for-each (function dynamic (file)
                (let ((title (get-name~ file))
                      (image (file-image file)))
                  (add-row~ tree :children (list (new Tree-Node :title title :image image)) :user-data file)))
              files))
  
  
  (method protected virtual (file-image file)
    {Bitmap-Resource "Document"})

  
  ;;;
  ;;;; Events
  ;;;
  
  
  ;; Should really be generic in the Dialog class
  (method (on-double-click evt)
    (let ((dialog (get-host)))
      (end-modal~ dialog (get-modal-result~ dialog))))
  
  
  ;; Should really be generic in the Dialog class
  (method (on-return-press evt)
    (let ((dialog (get-host)))
      (end-modal~ dialog (get-modal-result~ dialog))))
  
  
  ;; Should really be generic in the Dialog class
  (method (on-escape-press evt)
    (let ((dialog (get-host)))
      (cancel-modal~ dialog)))
  
  
  ;;;
  ;;;; Modal
  ;;;
  
  
  (method (get-modal-result)
    (let ((tree (locate 'tree)))
      (get-selected-data~ tree)))))
