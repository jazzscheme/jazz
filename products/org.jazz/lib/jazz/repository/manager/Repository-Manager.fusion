;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Repository Manager
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2007
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.repository.manager.Repository-Manager jazz


(import (jazz.jml)
        (jazz.repository)
        (jazz.ui)
        (jazz.literals)
        (jazz.library)
        (jazz.utilities))


(class Repository-Manager extends View uses (Utilities System COM WinDef WinUser)

  
  (property repository initialize {} getter get-repository setter set-repository)


  (form
    (<install>                                            size: {Dimension 803 404}
      (<Check-Box>                     name: check-status title: "Check Status" position: {Point 7 9} size: {Dimension 100 18})
      (<Push-Button>                   name: checkin      title: "Check In" position: {Point 372 7} size: {Dimension 100 22} action-handler: {Event-Handler form: on-checkin})
      (<Push-Button>                   name: checkpoint   title: "Check Point" position: {Point 477 7} size: {Dimension 100 22} action-handler: {Event-Handler form: on-checkpoint})
      (<Push-Button>                   name: reintegrate  title: "Reintegrate" position: {Point 582 7} size: {Dimension 100 22} action-handler: {Event-Handler form: on-reintegrate})
      (<Push-Button>                   name: update       title: "Update" position: {Point 699 7} size: {Dimension 100 22} action-handler: {Event-Handler form: on-update})
      (<Border-View>                   name: files-border position: {Point 2 35} size: {Dimension 799 367} border-type: edge
        (<Scroller-View>                                  vscroll?: #t
          (<!>                         name: content      layout-type: fill
            (<Tree-Header>
              (<!>                     name: content
                (<Tree-View>           name: files        filled-column: directory portfolio: :icons double-click-handler: {Event-Handler form: on-double-click} multiple-selection?: #t selection-mode: row
                  (<Tree-Node-Column>  name: filename     title: "Filename" width: 200 toplevel-controls?: #f)
                  (<Tree-Label-Column> name: directory    title: "Directory" width: 270)
                  (<Tree-Label-Column> name: status       title: "Status" width: 107)
                  (<Tree-Label-Column> name: type         title: "Type" width: 107)))))))))
  
  
  @convert-external
  (method meta (external-name . rest)
    'repository-manager)
  
  
  (method (finish rest)
    (nextmethod rest)
    (setup-status)
    (update-files))
  
  
  (method (setup-status)
    (let ((pref (get-preferences '(tools repository-manager) :error? false)))
      (when (and pref (get-check-status?~ pref))
        (let ((checkbox (locate 'check-status)))
          (set-checked?~ checkbox true)))))
  
  
  ;;;
  ;;;; Frame
  ;;;
  
  
  @convert-guest
  (method meta (frame-title)
    "Repository Manager")
  
  
  @convert-guest
  (method meta (frame-position)
    {Point 68 68})
  
  
  @convert-guest
  (method meta (frame-size)
    {Dimension 803 404})
  
  
  ;;;
  ;;;; Preferences
  ;;;
  
  
  (method (tool-preferences)
    (get-preferences '(tools repository-manager)))
  
  
  ;;;
  ;;;; Events
  ;;;


  (method (resize dh dv)
    (nextmethod dh dv)
    (move-figure~ (locate 'checkin) dh 0)
    (move-figure~ (locate 'checkpoint) dh 0)
    (move-figure~ (locate 'reintegrate) dh 0)
    (move-figure~ (locate 'update) dh 0)
    (size-figure~ (locate 'files-border) dh dv))
  
  
  (method (on-checkin evt)
    (checkin-files false))
  
  
  (method (on-checkpoint evt)
    (checkin-files true))
  
  
  (method (on-reintegrate evt)
    (reintegrate-files))


  (method (on-update evt)
    (update-files))
  

  (method (on-double-click evt)
    (let ((sender (get-sender~ evt)))
      (case (get-name~ sender)
        ((files)
          (show-changes)))))


  ;;;
  ;;;; Access
  ;;;


  (method public (get-repository)
    repository)


  (method public (set-repository rep)
    (set! repository rep))
    

  ;;;
  ;;;; Session
  ;;;
  
  
  (method (confirm-close)
    (save-session))
  
  
  (method (save-session)
    @to-convert
    (let ((info
           (list (external-name)
                 :position (get-position)
                 :size     (get-size))))
      (push-property~ properties 'Opened-Windows info)))
  

  ;;;
  ;;;; Update
  ;;;
  
  
  (definition Ignored-Nodes
    '("Crashes" "Catalogs" "Work"))
  
  (definition Ignored-Leaves
    '("vssver.scc" "mssccprj.scc" "Book.ico" "Desktop.ini" "JazzStandaloneDebug.exe" "JazzStandaloneRelease.exe"))
  
  (definition Ignored-Extensions
    '("exe" "pdb" "opt" "lib" "exp" "ilk" "dll" "lnk" "ncb" "plg" "obj" "sbr" "pch" "idb" "crash" "dmp" "stack"))

  
  (method (update-files)
    (with-cursor :wait
      (function dynamic ()
        (let ((tree (locate 'files)))
          (with-update-locked~ tree
            (function dynamic ()
              (remove-every-row~ tree)
              (when repository
                (let ((base (get-base-directory~ repository))
                      (status? (get-checked?~ (locate 'check-status))))
                  (for-each (function dynamic (file)
                              (insert-file tree file base status?))
                            (sort < (collect-read/write-files base)
                                  :key (function dynamic (file) (get-name~ file))))))))
          (sort-column~ tree 1))))
    (user-message "Done"))
  
  
  (method (insert-file tree file base status?)
    (let* ((status (if status? (file-status file) 'unknown))
           (c0 (new Tree-Node :title (get-name~ file) :image (status-image status)))
           (c1 (new Tree-Label :title (format "{l :detail :human}" (cdr (get-list~ (get-parent~ file))))))
           (c2 (new Tree-Label :title (status-title status)))
           (c3 (new Tree-Label :title (file-type file))))
      (add-row~ tree :children (list c0 c1 c2 c3) :user-data file)))
  
  
  (method (file-status file)
    (get-file-status~ repository file :error? false))
  
  
  (method (status-image status)
    (case status
      ((checked-in) {Bitmap-Resource "CheckedIn"})
      ((checked-out) {Bitmap-Resource "CheckedOut"})
      ((checked-out-me) {Bitmap-Resource "CheckedOutMe"})
      ((unknown) {Bitmap-Resource "FrameUnknown"})
      (else {Bitmap-Resource "New"})))
  
  
  (method (status-title status)
    (case status
      ((checked-in) "Checked In")
      ((checked-out) "Checked Out")
      ((checked-out-me) "Checked Out Me")
      ((unknown) "Unknown")
      (else "Not in Repository")))
  
  
  (method (file-type file)
    (let ((ext (get-extension~ file)))
      (cond ((member? ext '("jazz") :test ci=) "Jazz")
            ((member? ext '("h" "c" "cpp") :test ci=) "C++")
            ((member? ext '("txt" "text" "ftx") :test ci=) "Text")
            ((member? ext '("doc") :test ci=) "Word")
            ((member? ext '("html") :test ci=) "HTML")
            ((member? ext '("mod") :test ci=) "Layout")
            ((member? ext '("pln") :test ci=) "Database")
            ((member? ext '("dll") :test ci=) "Extension")
            ((member? ext '("exe") :test ci=) "Application")
            (else ""))))

  
  (method (collect-read/write-files directory)
    (let ((fact (new List-Factory)))
      (iterate-directory~ directory
        (function dynamic (pathname)
          (user-message "Scanning {a}..." pathname)
          (let ((name (get-name~ pathname))
                (ext (get-extension~ pathname)))
            (when (and (not (member? name Ignored-Leaves))
                       (not (member? ext Ignored-Extensions))
                       (not (read-only?~ pathname)))
              (put~ fact pathname))))
        :files? true
        :directories? false
        :ignored-directories Ignored-Nodes)
      (get-output~ fact)))


  ;;;
  ;;;; Checkin
  ;;;
  
  
  (constant NotCheckedOut-Err
    #x8004D73C)
  
  
  (method (checkin-files keep-checked-out? . rest)
    (bind-keywords ((report? true)) rest
      (let* ((tree (locate 'files))
             (rows (get-selected-rows~ tree))
             (ccnt 0)
             (ncnt 0))
        (with-cursor :wait
          (function dynamic ()
            (for-each (function dynamic (row)
                        (let* ((file (get-user-data~ row))
                               (checked-in? (checkin-file file keep-checked-out?)))
                          (if (not checked-in?)
                              (increase! ncnt)
                            (increase! ccnt)
                            (unless keep-checked-out?
                              (remove-row~ tree row)))))
                      rows)))
        (user-message "Done")
        (when (or report? (/= ncnt 0))
          (message-box
            (format "{a} file{a} checked in{a}"
                    ccnt
                    (format-plural ccnt)
                    (if (= ncnt 0)
                        ""
                      (format " ({a} {a} read/write but not checked out)" ncnt (format-was/were ncnt)))))))))
  
  
  (method (checkin-file file keep-checked-out?)
    (catch (CoError err
             (ecase (get-hresult~ err)
               ((NotCheckedOut-Err) false)
               (else (signal err))))
      (checkin-file~ repository file :keep-checked-out? keep-checked-out?)
      true))


  ;;;
  ;;;; Reintegrate
  ;;;
  
  
  (method (reintegrate-files)
    (let* ((tree (locate 'files))
           (rows (get-selected-rows~ tree))
           (ccnt 0))
      (for-each (function dynamic (row)
                  (let ((file (get-user-data~ row)))
                    (with-closed ((item (get-item~ repository file)))
                      (checkout~ item file :get? false)
                      (checkin~ item file))
                    (increase! ccnt)
                    (remove-row~ tree row)))
                rows)
      (user-message "Done")
      (message-box
        (format "{a} file{a} reintegrated"
                ccnt
                (format-plural ccnt)))))


  ;;;
  ;;;; Changes
  ;;;
  
  
  (method (show-changes)
    (let ((repository (get-repository))
          (file (selected-file)))
      (show-changes~ repository file)))


  ;;;
  ;;;; Utilities
  ;;;
  
  
  (method (selected-row)
    (let* ((tree (locate 'files))
           (selection (get-single-selection~ tree)))
      selection))
  
  
  (method (selected-file)
    (let ((tree (locate 'files))
          (selection (selected-row)))
      (when selection
        (get-user-data~ (get-row~ tree selection)))))))
