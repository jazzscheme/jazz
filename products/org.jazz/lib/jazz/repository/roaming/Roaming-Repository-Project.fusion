;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Roaming Repository Projects
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2007
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.repository.roaming.Roaming-Repository-Project jazz


(import (jazz.repository)
        (jazz.library)
        (jazz.utilities))


(class Roaming-Repository-Project extends Roaming-Repository-Moniker
  
  
  (slot content)
  
  
  @convert-literal
  (method meta (construct-literal context spec . content)
    (new self spec content))
  
  
  (method (initialize spec content)
    (nextmethod spec)
    (set! [content self] content))
  
    
  ;;;
  ;;;; Repository
  ;;;
  
  
  @need-to-debug
  (method (get-project?)
    true)
  
  
  (method (get-children . rest)
    (bind-keywords ((nodes? true) (leaves? true)) rest
      (let ((fact (new List-Factory)))
        (for-each (function dynamic (moniker)
                    (when (or (and nodes? (is? moniker Roaming-Repository-Project))
                              (and leaves? (is? moniker Roaming-Repository-File)))
                      (put~ fact moniker)))
                  content)
        (get-output~ fact))))))
