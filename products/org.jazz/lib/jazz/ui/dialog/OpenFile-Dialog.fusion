;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; OpenFile Dialog
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2007
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.ui.dialog.OpenFile-Dialog jazz


(import (jazz.library)
        (jazz.ui)
        (jazz.ui.view)
        (jazz.utilities))


(class OpenFile-Dialog extends Dialog
    
  
  @convert-dialog
  (method meta (get-modal . rest)
    (bind-keywords ((title null) (directory null) (initial-filename null) (extensions null) (multiple-selection? false) (anchors {})) rest
      (close-all-popups)
      (let* ((r (new OPENFILENAME))
             (size (if multiple-selection? (+ MAX_PATH (* 64 50)) MAX_PATH))
             (filename (make-string size)))
        (if (null? initial-filename)
            (set-element! filename 0 #\nul)
          (copy-into! initial-filename filename))
        (set r 'lStructSize     (size-of OPENFILENAME))
        (set r 'hwndOwner       (let ((toplevel (get-toplevel))) (if toplevel (get-hwnd~ toplevel) NULL)))
        (set r 'lpstrFilter     (extensions-filter extensions))
        (set r 'lpstrFile       filename)
        (set r 'nMaxFile        size)
        (set r 'lpstrInitialDir (if directory (parse~ directory) (get-current-directory)))
        (set r 'lpstrTitle      (either title NULL))
        (set r 'Flags           (bit-or OFN_EXPLORER (if multiple-selection? OFN_ALLOWMULTISELECT 0) OFN_HIDEREADONLY OFN_ENABLEHOOK OFN_FILEMUSTEXIST OFN_ENABLESIZING))
        (set r 'lpstrDefExt     NULL)
        (set r 'lCustData       NULL)
        (set r 'lpfnHook        (get-dialog-proc))
        (let ((anchorize
               (function dynamic (pathname)
                 (anchorize~ pathname :anchors anchors))))
          (if (GetOpenFileName r)
              (begin
                (if (not multiple-selection?)
                    (begin
                      (adjust-string filename)
                      (anchorize (new File (tokenise filename))))
                  (let ((tokens (tokenise-choose-file-string filename)))
                    (if (= (length tokens) 1)
                        (begin
                          (adjust-string filename)
                          (list (anchorize (new File (tokenise filename)))))
                      (bind (dir . filenames) tokens
                        (let ((dirlist (tokenise dir)))
                          (map (function dynamic (filename)
                                 (anchorize (new File (append dirlist (list filename)))))
                               filenames)))))))
            (let ((code (CommDlgExtendedError)))
              (if (= code 0)
                  (throw-cancel)
                (error "Dialog error: {t}" code))))))))))
