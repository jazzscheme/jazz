;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Password Text View
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2007
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.ui.text.Password-Text-View jazz


(import (jazz.jml)
        (jazz.platform)
        (jazz.ui)
        (jazz.literals)
        (jazz.library)
        (jazz.utilities))


(class Password-Text-View extends Text-View
  
  
  (form
    (<install> default-style: {Text-Style name: Default :font {Font :font-name "Courier" :point-size 9 :color () :bold? #f :italic? #f :underline? #f :monospace? #t}} left-padding: 2 top-padding: 2))
  
  
  (method (copy-selection)
    (bell))
  
  
  (method (get-context-menu)
    (new-text-context-menu))
  
  
  (method (draw-outline dc context update update-rect lh lv sh sv sc sc?)
    (let ((top null)
          (bottom null)
          (printing? (getf context :printing?)))
      (unless printing?
        (draw-selection dc top bottom))
      (draw-password dc)
      (unless printing?
        (draw-caret dc sc sc?))))
  
  
  (method (draw-password dc)
    (let* ((paragraph (get-paragraph 0))
           (password (get-string~ paragraph))
           (hidden (make-string (length password) #\times))
           (pos (get-position~ paragraph))
           (height (get-height~ paragraph))
           (font-height (get-height~ (get-metrics~ font)))
           (style (get-default-style))
           (font (get-font~ style))
           (h [h pos])
           (v (+ [v pos] (- height font-height))))
      (set-font~ dc font)
      (set-text-color~ dc {Color name: Black})
      (draw-text~ dc h v hidden (get-enabled?))))))
