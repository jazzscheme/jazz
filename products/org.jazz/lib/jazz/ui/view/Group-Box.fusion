;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Group Boxes
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2007
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.ui.view.Group-Box jazz


(import (jazz.literals)
        (jazz.library)
        (jazz.ui)
        (jazz.ui.look)
        (jazz.utilities))


(class Group-Box extends Layout-View


  (property flat? initialize false getter get-flat? setter set-flat?)
  (property style initialize {}    getter get-style setter set-style)


  ;;;
  ;;;; Access
  ;;;


  (method public (get-flat?)
    flat?)


  (method public (set-flat? value)
    (set! flat? value)
    (invalidate-view))


  (method public (get-style)
    style)


  (method public (set-style value)
    (set! style value)
    (invalidate-view))

  
  ;;;
  ;;;; Look
  ;;;
  
  
  (method (flat-look?)
    (case style
      ((styled) (get-element~ (get-look) 'group/border/flat?))
      (else flat?)))


  ;;;
  ;;;; Drawing
  ;;;

  
  (method (draw dc context update lh lv)
    (let* ((title (localize (either (get-title) "")))
           (size (get-size))
           (width [width size])
           (height [height size])
           (offset 9)
           (color {Color name: Medium})
           (flat? (flat-look?))
           (frame-color (case style ((entry) {Color name: Entry-Border}) (else {Color name: Group-Border})))
           (rect (get-bounds)))  
      (let* ((metrics (get-text-metrics~ dc))
             (extent (get-text-extent~ dc title))
             (top (ceil (/ (get metrics 'ascent) 2))))
        (if flat?
            (frame-rect~ dc (new Rect 0 top width height) frame-color)
          (draw-edge~ dc (new Rect 0 top width height) :inner 'raised :outer 'sunken :edges 'rectangle))
        (fill-rect~ dc (new Rect (- offset 2) 0 (+ offset [width extent] 2) [height extent]) color)
        (set-text-color~ dc {Color name: Black})
        (draw-text~ dc offset 0 title))))))
