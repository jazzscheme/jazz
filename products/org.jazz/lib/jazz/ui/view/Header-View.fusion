;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Header View
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2007
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.ui.view.Header-View jazz


(import (jazz.library)
        (jazz.ui)
        (jazz.ui.look)
        (jazz.designer)
        (jazz.utilities))


(class Header-View extends Container


  (property flat?  initialize false getter get-flat?  setter set-flat?)
  (property shown? initialize true  getter get-shown? setter set-shown?)
  (property style  initialize {}    getter get-style  setter set-style)
  
  
  (slot client initialize {})
  
  
  (method (default-name)
    'header)


  ;;;
  ;;;; Access
  ;;;


  (method public (get-flat?)
    flat?)


  (method public (set-flat? value)
    (when (/= value flat?)
      (set! flat? value)
      (layout-view)))


  (method public (get-shown?)
    shown?)


  (method public (set-shown? value)
    (when (/= value shown?)
      (set! shown? value)
      (layout-view)))


  (method public (get-style)
    style)


  (method public (set-style value)
    (set! style value))

  
  ;;;
  ;;;; Look
  ;;;
  
  
  (method (flat-look?)
    (case style
      ((tool) (get-element~ (get-look) 'tool/header/flat?))
      ((document) (get-element~ (get-look) 'document/header/flat?))
      (else flat?)))

  
  ;;;
  ;;;; Client
  ;;;
  
  
  (method public (get-client)
    client)
  
  
  (method public (set-client clt)
    (set! client clt))
  
  
  ;;;
  ;;;; Layout
  ;;;
  
  
  (method (layout)
    (let ((content (get-content)))
      (when content
        (let ((size (get-size)))
          (set-position~ content (content-position size))
          (set-size~ content (content-size size))))))
  
  
  (method (content-position size)
    (new Point 0 (get-header-height)))
  
  
  (method (content-size size)
    (new Dimension
      [width size]
      (- [height size] (get-header-height))))
  
  
  (method public virtual (get-header-height)
    (if shown? (if flat? 15 16) 0))


  ;;;
  ;;;; Designer
  ;;;

  
  (method (get-row-instance property)
    (case (field-name property)
      ((flat? shown?) (new Boolean-Row))
      (else (nextmethod property))))))
