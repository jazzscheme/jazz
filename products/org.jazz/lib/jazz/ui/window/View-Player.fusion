;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; View Player
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2007
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(library jazz.ui.window.View-Player jazz


(import (jazz.library)
        (jazz.ui)
        (jazz.ui.window)
        (jazz.utilities)
        (jazz.platform)
        (jazz.platform.windows)
        (jazz.platform.cairo.cairo-win32)
        (jazz.literals))


(class View-Player-Class extends Window-Class)
  

(class View-Player metaclass View-Player-Class extends Window


  ;; This property supports a scheme to delay insertion into the parent
  ;; until the last moment possible in case errors should occur.
  (property in-parent?  initialize true getter get-in-parent?  setter set-in-parent?)
  (property close-root? initialize true getter get-close-root? setter set-close-root?)

  
  (slot root    initialize {})
  (slot focused initialize {})

  
  ;;;
  ;;;; Initialization
  ;;;
  
  
  (method (prepare rest)
    (nextmethod rest)
    (set! root (new-root))
    (set-name~ root 'root)
    (set-player~ root self)
    (destroy-mandatory))
  
  
  (method (install-in-parent)
    (when in-parent?
      (nextmethod)))

  
  (method protected virtual (new-root)
    (new Root-View))
  
  
  (method (find-to-modify name test)
    (if (eq? name 'root)
        (get-root)
      (nextmethod name test)))
  
  
  (method (get-components)
    (cons root (get-children)))
  
  
  ;;;
  ;;;; Destruction
  ;;;
  
  
  (method (destroy)
    (close-root)
    (nextmethod))
  
  
  (method protected virtual (close-root)
    (when close-root?
      (close~ root)))

  
  ;;;
  ;;;; Window
  ;;;


  (method (erase-background dc)
    (unless (get-offscreen?~ root)
      (nextmethod dc)))

  
  ;;;
  ;;;; Access
  ;;;
  

  (method public (get-in-parent?)
    in-parent?)


  (method public (set-in-parent? value)
    (set! in-parent? value))


  (method public (get-close-root?)
    close-root?)


  (method public (set-close-root? value)
    (set! close-root? value))
  
  
  (method public (get-root)
    root)
  
  
  ;;;
  ;;;; Events
  ;;;
  
  
  (method (size-change size)
    (nextmethod size)
    (when root
      (set-position~ root {Point 0 0})
      (set-size~ root size)))
  
  
  ;;;
  ;;;; Focus
  ;;;
  
  
  (method (focus-gain)
    (call-activate~ root)
    (if (and focused (eq? (get-player~ focused) self))
        (begin
          (set-focus focused)
          (focus-delegate~ focused))
      (focus-default))
    processed)
  
  
  (method (focus-lose receiving)
    (let ((focus (get-focus)))
      (set! focused (essay focus (focus-master~ focus))))
    (call-deactivate~ root)
    processed)
  
 
  (method (call-focus-lose wparam)
    (nextmethod wparam)
    (let ((focus (get-focus)))
      (when (and focus (eq? (get-player~ focus) self))
        (clear-focus (get-window wparam))))
    processed)
  
  
  (method public virtual (focus-default)
    )
  
  
  (method protected (view-destroyed view)
    (when (eq? focused view)
      (set! focused null)))
  
  
  ;;;
  ;;;; Error
  ;;;
  
  
  (slot in-error? initialize false)
  
  
  (method public (get-in-error?)
    in-error?)
  
  
  (method public (set-in-error? flag)
    (set! in-error? flag)
    (invalidate-window))
  
  
  (definition Error-Color
    {Color name: Dark-Red})
  
  
  (method (paint-in-error dc bounds)
    (fill-rect~ dc bounds Error-Color))
  
  
  ;;;
  ;;;; Paint
  ;;;
  
  
  (method (paint hdc)
    (with-closed ((region (get-update-region)))
      (with ((ps (PAINTSTRUCT-make)))
        (let ((hdc (BeginPaint hwnd ps)))
          (let ((origin (new Point 0 0))
                (clipper (get-client-rect))
                (dc (new Cairo-Win32-Surface (cairo_win32_surface_create hdc))))
            (unwind-protect
                (begin
                  (setup-clipper~ dc clipper)             
                  (if in-error?
                      (paint-in-error dc clipper)
                    (set! in-error? true)
                    (paint~ root dc null region 0 0 0 0 1.0 false)
                    (set! in-error? false)))
              (close~ dc)
              (EndPaint hwnd ps))))))
    processed)
  
  
  ;;;
  ;;;; Receive Files
  ;;;
  
  
  (method (receive-files pos files)
    (unless in-error?
      (dispatch-receive-files~ root pos files))
    processed)
  
  
  ;;;
  ;;;; Mouse
  ;;;
  
  
  (method (mouse-hover h v)
    (unless in-error?
      (dispatch-mouse-hover~ root h v))
    processed)
  
  
  (method (mouse-wheel delta)
    (unless in-error?
      (dispatch-mouse-wheel~ root delta))
    processed)
  
  
  (method (mouse-down h v)
    (if in-error?
        (bell)
      (dispatch-mouse-down~ root h v))
    processed)
  
  
  (method (mouse-move h v)
    (unless in-error?
      (dispatch-mouse-move~ root h v))
    processed)
  
  
  (method (mouse-up h v)
    (unless in-error?
      (dispatch-mouse-up~ root h v))
    processed)
  
  
  (method (double-click h v)
    (unless in-error?
      (dispatch-double-click~ root h v))
    processed)
  
  
  (method (context-menu h v)
    (if in-error?
        (set-in-error? false)
      (dispatch-context-menu~ root h v))
    processed)
  
  
  (method (middle-mouse-down h v)
    (unless in-error?
      (dispatch-middle-mouse-down~ root h v))
    processed)
  
  
  (method (middle-mouse-up h v)
    (unless in-error?
      (dispatch-middle-mouse-up~ root h v))
    processed)
  
  
  (method (right-mouse-down h v)
    (unless in-error?
      (dispatch-right-mouse-down~ root h v))
    processed)
  
  
  (method (right-mouse-up h v)
    (unless in-error?
      (dispatch-right-mouse-up~ root h v))
    unprocessed)


  ;;;
  ;;;; Popup
  ;;;
  
  
  (method public (popup class . initargs)
    (let ((popup (new-popup class initargs)))
      (set! popups (cons popup popups))
      popup))


  (method (new-popup class initargs)
    (apply new class
      :owner (get-overlapped)
      :visible? false
      initargs))
  
  
  (method public (close-popups . rest)
    (bind-keywords ((all? false) (exclude null)) rest
      (when (and popups (not Passing-Through?))
        (let* ((overlapped (get-overlapped))
               (owners (get-owners~ overlapped)))
          (for-each (function dynamic (popup)
                      (when (and (or all? (not (memq? popup owners))) (not (memq? popup exclude)))
                        (close-popup popup)))
                    popups)))))
  
  
  ;;;
  ;;;; Keyboard
  ;;;
  
  
  (method (key-down char)
    (dispatch-key-down~ root char)
    processed)
  
  
  (method (key-up char)
    (dispatch-key-up~ root char)
    processed)
  
  
  (method (key-press char)
    (if (and (= char #\escape) Escape-Handler)
        (Escape-Handler)
      (if (null? popups)
          (dispatch-key-press~ root char)
        (unless (popup-key-press~ (car popups) char)
          (close-popups)
          (dispatch-key-press~ root char))))
    processed)


  ;;;
  ;;;; Debugging
  ;;;
  
  
  (method (debug-window pos)
    (let ((view (find-drawing~ root pos)))
      (if (null? view)
          (nextmethod pos)
        (debug-view~ view (acquire~ view root pos)))))


  (method (describe-window pos)
    (let ((view (find-drawing~ root pos)))
      (when view
        (describe-view~ view (acquire~ view root pos)))))))
